
f7RTU_freeMB_master_slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000999c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e4  08009b9c  08009b9c  00019b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a080  0800a080  000200f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a080  0800a080  0001a080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a088  0800a088  000200f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a088  0800a088  0001a088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a08c  0800a08c  0001a08c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f8  20000000  0800a090  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ebc  200000f8  0800a188  000200f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004fb4  0800a188  00024fb4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031888  00000000  00000000  00020126  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000603d  00000000  00000000  000519ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019f8  00000000  00000000  000579f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001790  00000000  00000000  000593e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000091be  00000000  00000000  0005ab78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024183  00000000  00000000  00063d36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010a0d0  00000000  00000000  00087eb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00191f89  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000070e0  00000000  00000000  00191fdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000f8 	.word	0x200000f8
 800021c:	00000000 	.word	0x00000000
 8000220:	08009b84 	.word	0x08009b84

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000fc 	.word	0x200000fc
 800023c:	08009b84 	.word	0x08009b84

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005dc:	f000 fd45 	bl	800106a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e0:	f000 f81e 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e4:	f000 f980 	bl	80008e8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005e8:	f000 f94e 	bl	8000888 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 80005ec:	f000 f8ae 	bl	800074c <MX_TIM6_Init>
  MX_TIM7_Init();
 80005f0:	f000 f8e2 	bl	80007b8 <MX_TIM7_Init>
  MX_USART2_UART_Init();
 80005f4:	f000 f916 	bl	8000824 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005f8:	f003 fc7e 	bl	8003ef8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005fc:	4a05      	ldr	r2, [pc, #20]	; (8000614 <main+0x3c>)
 80005fe:	2100      	movs	r1, #0
 8000600:	4805      	ldr	r0, [pc, #20]	; (8000618 <main+0x40>)
 8000602:	f003 fce3 	bl	8003fcc <osThreadNew>
 8000606:	4603      	mov	r3, r0
 8000608:	4a04      	ldr	r2, [pc, #16]	; (800061c <main+0x44>)
 800060a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800060c:	f003 fca8 	bl	8003f60 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000610:	e7fe      	b.n	8000610 <main+0x38>
 8000612:	bf00      	nop
 8000614:	08009d10 	.word	0x08009d10
 8000618:	08000b1d 	.word	0x08000b1d
 800061c:	20004b50 	.word	0x20004b50

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b0b8      	sub	sp, #224	; 0xe0
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800062a:	2234      	movs	r2, #52	; 0x34
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f008 fba3 	bl	8008d7a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000644:	f107 0308 	add.w	r3, r7, #8
 8000648:	2290      	movs	r2, #144	; 0x90
 800064a:	2100      	movs	r1, #0
 800064c:	4618      	mov	r0, r3
 800064e:	f008 fb94 	bl	8008d7a <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000652:	f001 f8af 	bl	80017b4 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000656:	4b3b      	ldr	r3, [pc, #236]	; (8000744 <SystemClock_Config+0x124>)
 8000658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065a:	4a3a      	ldr	r2, [pc, #232]	; (8000744 <SystemClock_Config+0x124>)
 800065c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000660:	6413      	str	r3, [r2, #64]	; 0x40
 8000662:	4b38      	ldr	r3, [pc, #224]	; (8000744 <SystemClock_Config+0x124>)
 8000664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800066e:	4b36      	ldr	r3, [pc, #216]	; (8000748 <SystemClock_Config+0x128>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4a35      	ldr	r2, [pc, #212]	; (8000748 <SystemClock_Config+0x128>)
 8000674:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000678:	6013      	str	r3, [r2, #0]
 800067a:	4b33      	ldr	r3, [pc, #204]	; (8000748 <SystemClock_Config+0x128>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000682:	603b      	str	r3, [r7, #0]
 8000684:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000686:	2301      	movs	r3, #1
 8000688:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800068c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000690:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000694:	2302      	movs	r3, #2
 8000696:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800069a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800069e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006a2:	2304      	movs	r3, #4
 80006a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 80006a8:	23d8      	movs	r3, #216	; 0xd8
 80006aa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ae:	2302      	movs	r3, #2
 80006b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006b4:	2304      	movs	r3, #4
 80006b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006ba:	2302      	movs	r3, #2
 80006bc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80006c4:	4618      	mov	r0, r3
 80006c6:	f001 f8d5 	bl	8001874 <HAL_RCC_OscConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80006d0:	f000 fa40 	bl	8000b54 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006d4:	f001 f87e 	bl	80017d4 <HAL_PWREx_EnableOverDrive>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006de:	f000 fa39 	bl	8000b54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e2:	230f      	movs	r3, #15
 80006e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e8:	2302      	movs	r3, #2
 80006ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006f4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000700:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000704:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000708:	2107      	movs	r1, #7
 800070a:	4618      	mov	r0, r3
 800070c:	f001 fb60 	bl	8001dd0 <HAL_RCC_ClockConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8000716:	f000 fa1d 	bl	8000b54 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
 800071a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800071e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000720:	2300      	movs	r3, #0
 8000722:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000724:	2300      	movs	r3, #0
 8000726:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000728:	f107 0308 	add.w	r3, r7, #8
 800072c:	4618      	mov	r0, r3
 800072e:	f001 fd83 	bl	8002238 <HAL_RCCEx_PeriphCLKConfig>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <SystemClock_Config+0x11c>
  {
    Error_Handler();
 8000738:	f000 fa0c 	bl	8000b54 <Error_Handler>
  }
}
 800073c:	bf00      	nop
 800073e:	37e0      	adds	r7, #224	; 0xe0
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40023800 	.word	0x40023800
 8000748:	40007000 	.word	0x40007000

0800074c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800075c:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <MX_TIM6_Init+0x64>)
 800075e:	4a15      	ldr	r2, [pc, #84]	; (80007b4 <MX_TIM6_Init+0x68>)
 8000760:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000762:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <MX_TIM6_Init+0x64>)
 8000764:	2200      	movs	r2, #0
 8000766:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000768:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <MX_TIM6_Init+0x64>)
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800076e:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <MX_TIM6_Init+0x64>)
 8000770:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000774:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000776:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <MX_TIM6_Init+0x64>)
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800077c:	480c      	ldr	r0, [pc, #48]	; (80007b0 <MX_TIM6_Init+0x64>)
 800077e:	f002 f983 	bl	8002a88 <HAL_TIM_Base_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000788:	f000 f9e4 	bl	8000b54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800078c:	2300      	movs	r3, #0
 800078e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000790:	2300      	movs	r3, #0
 8000792:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	4619      	mov	r1, r3
 8000798:	4805      	ldr	r0, [pc, #20]	; (80007b0 <MX_TIM6_Init+0x64>)
 800079a:	f002 fc5b 	bl	8003054 <HAL_TIMEx_MasterConfigSynchronization>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80007a4:	f000 f9d6 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80007a8:	bf00      	nop
 80007aa:	3710      	adds	r7, #16
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20004bd8 	.word	0x20004bd8
 80007b4:	40001000 	.word	0x40001000

080007b8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80007c8:	4b14      	ldr	r3, [pc, #80]	; (800081c <MX_TIM7_Init+0x64>)
 80007ca:	4a15      	ldr	r2, [pc, #84]	; (8000820 <MX_TIM7_Init+0x68>)
 80007cc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80007ce:	4b13      	ldr	r3, [pc, #76]	; (800081c <MX_TIM7_Init+0x64>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d4:	4b11      	ldr	r3, [pc, #68]	; (800081c <MX_TIM7_Init+0x64>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80007da:	4b10      	ldr	r3, [pc, #64]	; (800081c <MX_TIM7_Init+0x64>)
 80007dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007e0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <MX_TIM7_Init+0x64>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80007e8:	480c      	ldr	r0, [pc, #48]	; (800081c <MX_TIM7_Init+0x64>)
 80007ea:	f002 f94d 	bl	8002a88 <HAL_TIM_Base_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80007f4:	f000 f9ae 	bl	8000b54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007f8:	2300      	movs	r3, #0
 80007fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007fc:	2300      	movs	r3, #0
 80007fe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	4619      	mov	r1, r3
 8000804:	4805      	ldr	r0, [pc, #20]	; (800081c <MX_TIM7_Init+0x64>)
 8000806:	f002 fc25 	bl	8003054 <HAL_TIMEx_MasterConfigSynchronization>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000810:	f000 f9a0 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000814:	bf00      	nop
 8000816:	3710      	adds	r7, #16
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20004ca8 	.word	0x20004ca8
 8000820:	40001400 	.word	0x40001400

08000824 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000828:	4b15      	ldr	r3, [pc, #84]	; (8000880 <MX_USART2_UART_Init+0x5c>)
 800082a:	4a16      	ldr	r2, [pc, #88]	; (8000884 <MX_USART2_UART_Init+0x60>)
 800082c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800082e:	4b14      	ldr	r3, [pc, #80]	; (8000880 <MX_USART2_UART_Init+0x5c>)
 8000830:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000834:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8000836:	4b12      	ldr	r3, [pc, #72]	; (8000880 <MX_USART2_UART_Init+0x5c>)
 8000838:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800083c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800083e:	4b10      	ldr	r3, [pc, #64]	; (8000880 <MX_USART2_UART_Init+0x5c>)
 8000840:	2200      	movs	r2, #0
 8000842:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8000844:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <MX_USART2_UART_Init+0x5c>)
 8000846:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800084a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800084c:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <MX_USART2_UART_Init+0x5c>)
 800084e:	220c      	movs	r2, #12
 8000850:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000852:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <MX_USART2_UART_Init+0x5c>)
 8000854:	2200      	movs	r2, #0
 8000856:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000858:	4b09      	ldr	r3, [pc, #36]	; (8000880 <MX_USART2_UART_Init+0x5c>)
 800085a:	2200      	movs	r2, #0
 800085c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800085e:	4b08      	ldr	r3, [pc, #32]	; (8000880 <MX_USART2_UART_Init+0x5c>)
 8000860:	2200      	movs	r2, #0
 8000862:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <MX_USART2_UART_Init+0x5c>)
 8000866:	2200      	movs	r2, #0
 8000868:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800086a:	4805      	ldr	r0, [pc, #20]	; (8000880 <MX_USART2_UART_Init+0x5c>)
 800086c:	f002 fc9e 	bl	80031ac <HAL_UART_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8000876:	f000 f96d 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20004c24 	.word	0x20004c24
 8000884:	40004400 	.word	0x40004400

08000888 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800088c:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <MX_USART3_UART_Init+0x58>)
 800088e:	4a15      	ldr	r2, [pc, #84]	; (80008e4 <MX_USART3_UART_Init+0x5c>)
 8000890:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000892:	4b13      	ldr	r3, [pc, #76]	; (80008e0 <MX_USART3_UART_Init+0x58>)
 8000894:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000898:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800089a:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <MX_USART3_UART_Init+0x58>)
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008a0:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <MX_USART3_UART_Init+0x58>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <MX_USART3_UART_Init+0x58>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008ac:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <MX_USART3_UART_Init+0x58>)
 80008ae:	220c      	movs	r2, #12
 80008b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b2:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <MX_USART3_UART_Init+0x58>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b8:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_USART3_UART_Init+0x58>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008be:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <MX_USART3_UART_Init+0x58>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <MX_USART3_UART_Init+0x58>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008ca:	4805      	ldr	r0, [pc, #20]	; (80008e0 <MX_USART3_UART_Init+0x58>)
 80008cc:	f002 fc6e 	bl	80031ac <HAL_UART_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80008d6:	f000 f93d 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20004b54 	.word	0x20004b54
 80008e4:	40004800 	.word	0x40004800

080008e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08c      	sub	sp, #48	; 0x30
 80008ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]
 80008fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fe:	4b81      	ldr	r3, [pc, #516]	; (8000b04 <MX_GPIO_Init+0x21c>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a80      	ldr	r2, [pc, #512]	; (8000b04 <MX_GPIO_Init+0x21c>)
 8000904:	f043 0304 	orr.w	r3, r3, #4
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b7e      	ldr	r3, [pc, #504]	; (8000b04 <MX_GPIO_Init+0x21c>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0304 	and.w	r3, r3, #4
 8000912:	61bb      	str	r3, [r7, #24]
 8000914:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000916:	4b7b      	ldr	r3, [pc, #492]	; (8000b04 <MX_GPIO_Init+0x21c>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a7a      	ldr	r2, [pc, #488]	; (8000b04 <MX_GPIO_Init+0x21c>)
 800091c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b78      	ldr	r3, [pc, #480]	; (8000b04 <MX_GPIO_Init+0x21c>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800092a:	617b      	str	r3, [r7, #20]
 800092c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092e:	4b75      	ldr	r3, [pc, #468]	; (8000b04 <MX_GPIO_Init+0x21c>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a74      	ldr	r2, [pc, #464]	; (8000b04 <MX_GPIO_Init+0x21c>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b72      	ldr	r3, [pc, #456]	; (8000b04 <MX_GPIO_Init+0x21c>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	613b      	str	r3, [r7, #16]
 8000944:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000946:	4b6f      	ldr	r3, [pc, #444]	; (8000b04 <MX_GPIO_Init+0x21c>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a6e      	ldr	r2, [pc, #440]	; (8000b04 <MX_GPIO_Init+0x21c>)
 800094c:	f043 0302 	orr.w	r3, r3, #2
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b6c      	ldr	r3, [pc, #432]	; (8000b04 <MX_GPIO_Init+0x21c>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0302 	and.w	r3, r3, #2
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800095e:	4b69      	ldr	r3, [pc, #420]	; (8000b04 <MX_GPIO_Init+0x21c>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a68      	ldr	r2, [pc, #416]	; (8000b04 <MX_GPIO_Init+0x21c>)
 8000964:	f043 0308 	orr.w	r3, r3, #8
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b66      	ldr	r3, [pc, #408]	; (8000b04 <MX_GPIO_Init+0x21c>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0308 	and.w	r3, r3, #8
 8000972:	60bb      	str	r3, [r7, #8]
 8000974:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000976:	4b63      	ldr	r3, [pc, #396]	; (8000b04 <MX_GPIO_Init+0x21c>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a62      	ldr	r2, [pc, #392]	; (8000b04 <MX_GPIO_Init+0x21c>)
 800097c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b60      	ldr	r3, [pc, #384]	; (8000b04 <MX_GPIO_Init+0x21c>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|DE_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800098e:	2200      	movs	r2, #0
 8000990:	f644 0181 	movw	r1, #18561	; 0x4881
 8000994:	485c      	ldr	r0, [pc, #368]	; (8000b08 <MX_GPIO_Init+0x220>)
 8000996:	f000 fed9 	bl	800174c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RE_GPIO_Port, RE_Pin, GPIO_PIN_SET);
 800099a:	2201      	movs	r2, #1
 800099c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009a0:	4859      	ldr	r0, [pc, #356]	; (8000b08 <MX_GPIO_Init+0x220>)
 80009a2:	f000 fed3 	bl	800174c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2140      	movs	r1, #64	; 0x40
 80009aa:	4858      	ldr	r0, [pc, #352]	; (8000b0c <MX_GPIO_Init+0x224>)
 80009ac:	f000 fece 	bl	800174c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009b6:	4b56      	ldr	r3, [pc, #344]	; (8000b10 <MX_GPIO_Init+0x228>)
 80009b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	4619      	mov	r1, r3
 80009c4:	4853      	ldr	r0, [pc, #332]	; (8000b14 <MX_GPIO_Init+0x22c>)
 80009c6:	f000 fd15 	bl	80013f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80009ca:	2332      	movs	r3, #50	; 0x32
 80009cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ce:	2302      	movs	r3, #2
 80009d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d6:	2303      	movs	r3, #3
 80009d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009da:	230b      	movs	r3, #11
 80009dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009de:	f107 031c 	add.w	r3, r7, #28
 80009e2:	4619      	mov	r1, r3
 80009e4:	484b      	ldr	r0, [pc, #300]	; (8000b14 <MX_GPIO_Init+0x22c>)
 80009e6:	f000 fd05 	bl	80013f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80009ea:	2386      	movs	r3, #134	; 0x86
 80009ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ee:	2302      	movs	r3, #2
 80009f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f6:	2303      	movs	r3, #3
 80009f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009fa:	230b      	movs	r3, #11
 80009fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4619      	mov	r1, r3
 8000a04:	4844      	ldr	r0, [pc, #272]	; (8000b18 <MX_GPIO_Init+0x230>)
 8000a06:	f000 fcf5 	bl	80013f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a0a:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a10:	2301      	movs	r3, #1
 8000a12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a1c:	f107 031c 	add.w	r3, r7, #28
 8000a20:	4619      	mov	r1, r3
 8000a22:	4839      	ldr	r0, [pc, #228]	; (8000b08 <MX_GPIO_Init+0x220>)
 8000a24:	f000 fce6 	bl	80013f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RE_Pin DE_Pin */
  GPIO_InitStruct.Pin = RE_Pin|DE_Pin;
 8000a28:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a36:	2303      	movs	r3, #3
 8000a38:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3a:	f107 031c 	add.w	r3, r7, #28
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4831      	ldr	r0, [pc, #196]	; (8000b08 <MX_GPIO_Init+0x220>)
 8000a42:	f000 fcd7 	bl	80013f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000a46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a54:	2303      	movs	r3, #3
 8000a56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a58:	230b      	movs	r3, #11
 8000a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000a5c:	f107 031c 	add.w	r3, r7, #28
 8000a60:	4619      	mov	r1, r3
 8000a62:	4829      	ldr	r0, [pc, #164]	; (8000b08 <MX_GPIO_Init+0x220>)
 8000a64:	f000 fcc6 	bl	80013f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a68:	2340      	movs	r3, #64	; 0x40
 8000a6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a74:	2300      	movs	r3, #0
 8000a76:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a78:	f107 031c 	add.w	r3, r7, #28
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4823      	ldr	r0, [pc, #140]	; (8000b0c <MX_GPIO_Init+0x224>)
 8000a80:	f000 fcb8 	bl	80013f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a84:	2380      	movs	r3, #128	; 0x80
 8000a86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a90:	f107 031c 	add.w	r3, r7, #28
 8000a94:	4619      	mov	r1, r3
 8000a96:	481d      	ldr	r0, [pc, #116]	; (8000b0c <MX_GPIO_Init+0x224>)
 8000a98:	f000 fcac 	bl	80013f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000a9c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000aa0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aaa:	2303      	movs	r3, #3
 8000aac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000aae:	230a      	movs	r3, #10
 8000ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab2:	f107 031c 	add.w	r3, r7, #28
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4817      	ldr	r0, [pc, #92]	; (8000b18 <MX_GPIO_Init+0x230>)
 8000aba:	f000 fc9b 	bl	80013f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000abe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ac2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000acc:	f107 031c 	add.w	r3, r7, #28
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4811      	ldr	r0, [pc, #68]	; (8000b18 <MX_GPIO_Init+0x230>)
 8000ad4:	f000 fc8e 	bl	80013f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000ad8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000adc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000aea:	230b      	movs	r3, #11
 8000aec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000aee:	f107 031c 	add.w	r3, r7, #28
 8000af2:	4619      	mov	r1, r3
 8000af4:	4805      	ldr	r0, [pc, #20]	; (8000b0c <MX_GPIO_Init+0x224>)
 8000af6:	f000 fc7d 	bl	80013f4 <HAL_GPIO_Init>

}
 8000afa:	bf00      	nop
 8000afc:	3730      	adds	r7, #48	; 0x30
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40023800 	.word	0x40023800
 8000b08:	40020400 	.word	0x40020400
 8000b0c:	40021800 	.word	0x40021800
 8000b10:	10110000 	.word	0x10110000
 8000b14:	40020800 	.word	0x40020800
 8000b18:	40020000 	.word	0x40020000

08000b1c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	vInitMBTask();
 8000b24:	f007 f88e 	bl	8007c44 <vInitMBTask>
  for(;;)
  {
    osDelay(1);
 8000b28:	2001      	movs	r0, #1
 8000b2a:	f003 faf5 	bl	8004118 <osDelay>
 8000b2e:	e7fb      	b.n	8000b28 <StartDefaultTask+0xc>

08000b30 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM13) {
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a04      	ldr	r2, [pc, #16]	; (8000b50 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d101      	bne.n	8000b46 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b42:	f000 fa9f 	bl	8001084 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b46:	bf00      	nop
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40001c00 	.word	0x40001c00

08000b54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b58:	b672      	cpsid	i
}
 8000b5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <Error_Handler+0x8>
	...

08000b60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b66:	4b11      	ldr	r3, [pc, #68]	; (8000bac <HAL_MspInit+0x4c>)
 8000b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6a:	4a10      	ldr	r2, [pc, #64]	; (8000bac <HAL_MspInit+0x4c>)
 8000b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b70:	6413      	str	r3, [r2, #64]	; 0x40
 8000b72:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <HAL_MspInit+0x4c>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b7e:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <HAL_MspInit+0x4c>)
 8000b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b82:	4a0a      	ldr	r2, [pc, #40]	; (8000bac <HAL_MspInit+0x4c>)
 8000b84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b88:	6453      	str	r3, [r2, #68]	; 0x44
 8000b8a:	4b08      	ldr	r3, [pc, #32]	; (8000bac <HAL_MspInit+0x4c>)
 8000b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b92:	603b      	str	r3, [r7, #0]
 8000b94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b96:	2200      	movs	r2, #0
 8000b98:	210f      	movs	r1, #15
 8000b9a:	f06f 0001 	mvn.w	r0, #1
 8000b9e:	f000 fb6d 	bl	800127c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40023800 	.word	0x40023800

08000bb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a1a      	ldr	r2, [pc, #104]	; (8000c28 <HAL_TIM_Base_MspInit+0x78>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d114      	bne.n	8000bec <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000bc2:	4b1a      	ldr	r3, [pc, #104]	; (8000c2c <HAL_TIM_Base_MspInit+0x7c>)
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc6:	4a19      	ldr	r2, [pc, #100]	; (8000c2c <HAL_TIM_Base_MspInit+0x7c>)
 8000bc8:	f043 0310 	orr.w	r3, r3, #16
 8000bcc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bce:	4b17      	ldr	r3, [pc, #92]	; (8000c2c <HAL_TIM_Base_MspInit+0x7c>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd2:	f003 0310 	and.w	r3, r3, #16
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2105      	movs	r1, #5
 8000bde:	2036      	movs	r0, #54	; 0x36
 8000be0:	f000 fb4c 	bl	800127c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000be4:	2036      	movs	r0, #54	; 0x36
 8000be6:	f000 fb65 	bl	80012b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000bea:	e018      	b.n	8000c1e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM7)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a0f      	ldr	r2, [pc, #60]	; (8000c30 <HAL_TIM_Base_MspInit+0x80>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d113      	bne.n	8000c1e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000bf6:	4b0d      	ldr	r3, [pc, #52]	; (8000c2c <HAL_TIM_Base_MspInit+0x7c>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfa:	4a0c      	ldr	r2, [pc, #48]	; (8000c2c <HAL_TIM_Base_MspInit+0x7c>)
 8000bfc:	f043 0320 	orr.w	r3, r3, #32
 8000c00:	6413      	str	r3, [r2, #64]	; 0x40
 8000c02:	4b0a      	ldr	r3, [pc, #40]	; (8000c2c <HAL_TIM_Base_MspInit+0x7c>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	f003 0320 	and.w	r3, r3, #32
 8000c0a:	60bb      	str	r3, [r7, #8]
 8000c0c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2105      	movs	r1, #5
 8000c12:	2037      	movs	r0, #55	; 0x37
 8000c14:	f000 fb32 	bl	800127c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000c18:	2037      	movs	r0, #55	; 0x37
 8000c1a:	f000 fb4b 	bl	80012b4 <HAL_NVIC_EnableIRQ>
}
 8000c1e:	bf00      	nop
 8000c20:	3710      	adds	r7, #16
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40001000 	.word	0x40001000
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	40001400 	.word	0x40001400

08000c34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08c      	sub	sp, #48	; 0x30
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3c:	f107 031c 	add.w	r3, r7, #28
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a44      	ldr	r2, [pc, #272]	; (8000d64 <HAL_UART_MspInit+0x130>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d14c      	bne.n	8000cf0 <HAL_UART_MspInit+0xbc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c56:	4b44      	ldr	r3, [pc, #272]	; (8000d68 <HAL_UART_MspInit+0x134>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5a:	4a43      	ldr	r2, [pc, #268]	; (8000d68 <HAL_UART_MspInit+0x134>)
 8000c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c60:	6413      	str	r3, [r2, #64]	; 0x40
 8000c62:	4b41      	ldr	r3, [pc, #260]	; (8000d68 <HAL_UART_MspInit+0x134>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c6a:	61bb      	str	r3, [r7, #24]
 8000c6c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6e:	4b3e      	ldr	r3, [pc, #248]	; (8000d68 <HAL_UART_MspInit+0x134>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	4a3d      	ldr	r2, [pc, #244]	; (8000d68 <HAL_UART_MspInit+0x134>)
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7a:	4b3b      	ldr	r3, [pc, #236]	; (8000d68 <HAL_UART_MspInit+0x134>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	617b      	str	r3, [r7, #20]
 8000c84:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c86:	4b38      	ldr	r3, [pc, #224]	; (8000d68 <HAL_UART_MspInit+0x134>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a37      	ldr	r2, [pc, #220]	; (8000d68 <HAL_UART_MspInit+0x134>)
 8000c8c:	f043 0308 	orr.w	r3, r3, #8
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b35      	ldr	r3, [pc, #212]	; (8000d68 <HAL_UART_MspInit+0x134>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0308 	and.w	r3, r3, #8
 8000c9a:	613b      	str	r3, [r7, #16]
 8000c9c:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c9e:	2308      	movs	r3, #8
 8000ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000caa:	2303      	movs	r3, #3
 8000cac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cae:	2307      	movs	r3, #7
 8000cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb2:	f107 031c 	add.w	r3, r7, #28
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	482c      	ldr	r0, [pc, #176]	; (8000d6c <HAL_UART_MspInit+0x138>)
 8000cba:	f000 fb9b 	bl	80013f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000cbe:	2320      	movs	r3, #32
 8000cc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cca:	2303      	movs	r3, #3
 8000ccc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cce:	2307      	movs	r3, #7
 8000cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cd2:	f107 031c 	add.w	r3, r7, #28
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4825      	ldr	r0, [pc, #148]	; (8000d70 <HAL_UART_MspInit+0x13c>)
 8000cda:	f000 fb8b 	bl	80013f4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2105      	movs	r1, #5
 8000ce2:	2026      	movs	r0, #38	; 0x26
 8000ce4:	f000 faca 	bl	800127c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ce8:	2026      	movs	r0, #38	; 0x26
 8000cea:	f000 fae3 	bl	80012b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cee:	e035      	b.n	8000d5c <HAL_UART_MspInit+0x128>
  else if(huart->Instance==USART3)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a1f      	ldr	r2, [pc, #124]	; (8000d74 <HAL_UART_MspInit+0x140>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d130      	bne.n	8000d5c <HAL_UART_MspInit+0x128>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cfa:	4b1b      	ldr	r3, [pc, #108]	; (8000d68 <HAL_UART_MspInit+0x134>)
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfe:	4a1a      	ldr	r2, [pc, #104]	; (8000d68 <HAL_UART_MspInit+0x134>)
 8000d00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d04:	6413      	str	r3, [r2, #64]	; 0x40
 8000d06:	4b18      	ldr	r3, [pc, #96]	; (8000d68 <HAL_UART_MspInit+0x134>)
 8000d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d12:	4b15      	ldr	r3, [pc, #84]	; (8000d68 <HAL_UART_MspInit+0x134>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	4a14      	ldr	r2, [pc, #80]	; (8000d68 <HAL_UART_MspInit+0x134>)
 8000d18:	f043 0308 	orr.w	r3, r3, #8
 8000d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1e:	4b12      	ldr	r3, [pc, #72]	; (8000d68 <HAL_UART_MspInit+0x134>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	f003 0308 	and.w	r3, r3, #8
 8000d26:	60bb      	str	r3, [r7, #8]
 8000d28:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d2a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d30:	2302      	movs	r3, #2
 8000d32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d3c:	2307      	movs	r3, #7
 8000d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d40:	f107 031c 	add.w	r3, r7, #28
 8000d44:	4619      	mov	r1, r3
 8000d46:	480a      	ldr	r0, [pc, #40]	; (8000d70 <HAL_UART_MspInit+0x13c>)
 8000d48:	f000 fb54 	bl	80013f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2105      	movs	r1, #5
 8000d50:	2027      	movs	r0, #39	; 0x27
 8000d52:	f000 fa93 	bl	800127c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000d56:	2027      	movs	r0, #39	; 0x27
 8000d58:	f000 faac 	bl	80012b4 <HAL_NVIC_EnableIRQ>
}
 8000d5c:	bf00      	nop
 8000d5e:	3730      	adds	r7, #48	; 0x30
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	40004400 	.word	0x40004400
 8000d68:	40023800 	.word	0x40023800
 8000d6c:	40020000 	.word	0x40020000
 8000d70:	40020c00 	.word	0x40020c00
 8000d74:	40004800 	.word	0x40004800

08000d78 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08c      	sub	sp, #48	; 0x30
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d80:	2300      	movs	r3, #0
 8000d82:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d84:	2300      	movs	r3, #0
 8000d86:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM13 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	6879      	ldr	r1, [r7, #4]
 8000d8c:	202c      	movs	r0, #44	; 0x2c
 8000d8e:	f000 fa75 	bl	800127c <HAL_NVIC_SetPriority>

  /* Enable the TIM13 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8000d92:	202c      	movs	r0, #44	; 0x2c
 8000d94:	f000 fa8e 	bl	80012b4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM13 clock */
  __HAL_RCC_TIM13_CLK_ENABLE();
 8000d98:	4b1f      	ldr	r3, [pc, #124]	; (8000e18 <HAL_InitTick+0xa0>)
 8000d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9c:	4a1e      	ldr	r2, [pc, #120]	; (8000e18 <HAL_InitTick+0xa0>)
 8000d9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000da2:	6413      	str	r3, [r2, #64]	; 0x40
 8000da4:	4b1c      	ldr	r3, [pc, #112]	; (8000e18 <HAL_InitTick+0xa0>)
 8000da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dac:	60fb      	str	r3, [r7, #12]
 8000dae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000db0:	f107 0210 	add.w	r2, r7, #16
 8000db4:	f107 0314 	add.w	r3, r7, #20
 8000db8:	4611      	mov	r1, r2
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f001 fa0a 	bl	80021d4 <HAL_RCC_GetClockConfig>

  /* Compute TIM13 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000dc0:	f001 f9e0 	bl	8002184 <HAL_RCC_GetPCLK1Freq>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM13 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dcc:	4a13      	ldr	r2, [pc, #76]	; (8000e1c <HAL_InitTick+0xa4>)
 8000dce:	fba2 2303 	umull	r2, r3, r2, r3
 8000dd2:	0c9b      	lsrs	r3, r3, #18
 8000dd4:	3b01      	subs	r3, #1
 8000dd6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM13 */
  htim13.Instance = TIM13;
 8000dd8:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <HAL_InitTick+0xa8>)
 8000dda:	4a12      	ldr	r2, [pc, #72]	; (8000e24 <HAL_InitTick+0xac>)
 8000ddc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM13CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim13.Init.Period = (1000000U / 1000U) - 1U;
 8000dde:	4b10      	ldr	r3, [pc, #64]	; (8000e20 <HAL_InitTick+0xa8>)
 8000de0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000de4:	60da      	str	r2, [r3, #12]
  htim13.Init.Prescaler = uwPrescalerValue;
 8000de6:	4a0e      	ldr	r2, [pc, #56]	; (8000e20 <HAL_InitTick+0xa8>)
 8000de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dea:	6053      	str	r3, [r2, #4]
  htim13.Init.ClockDivision = 0;
 8000dec:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <HAL_InitTick+0xa8>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	611a      	str	r2, [r3, #16]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df2:	4b0b      	ldr	r3, [pc, #44]	; (8000e20 <HAL_InitTick+0xa8>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim13) == HAL_OK)
 8000df8:	4809      	ldr	r0, [pc, #36]	; (8000e20 <HAL_InitTick+0xa8>)
 8000dfa:	f001 fe45 	bl	8002a88 <HAL_TIM_Base_Init>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d104      	bne.n	8000e0e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim13);
 8000e04:	4806      	ldr	r0, [pc, #24]	; (8000e20 <HAL_InitTick+0xa8>)
 8000e06:	f001 fe97 	bl	8002b38 <HAL_TIM_Base_Start_IT>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	e000      	b.n	8000e10 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3730      	adds	r7, #48	; 0x30
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40023800 	.word	0x40023800
 8000e1c:	431bde83 	.word	0x431bde83
 8000e20:	20004cf4 	.word	0x20004cf4
 8000e24:	40001c00 	.word	0x40001c00

08000e28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e2c:	e7fe      	b.n	8000e2c <NMI_Handler+0x4>

08000e2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e32:	e7fe      	b.n	8000e32 <HardFault_Handler+0x4>

08000e34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e38:	e7fe      	b.n	8000e38 <MemManage_Handler+0x4>

08000e3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e3e:	e7fe      	b.n	8000e3e <BusFault_Handler+0x4>

08000e40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e44:	e7fe      	b.n	8000e44 <UsageFault_Handler+0x4>

08000e46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8000e58:	4802      	ldr	r0, [pc, #8]	; (8000e64 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8000e5a:	f001 ff14 	bl	8002c86 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	20004cf4 	.word	0x20004cf4

08000e68 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
	return 1;
 8000e6c:	2301      	movs	r3, #1
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <_kill>:

int _kill(int pid, int sig)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000e82:	f007 fe37 	bl	8008af4 <__errno>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2216      	movs	r2, #22
 8000e8a:	601a      	str	r2, [r3, #0]
	return -1;
 8000e8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <_exit>:

void _exit (int status)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000ea0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f7ff ffe7 	bl	8000e78 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000eaa:	e7fe      	b.n	8000eaa <_exit+0x12>

08000eac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eb8:	2300      	movs	r3, #0
 8000eba:	617b      	str	r3, [r7, #20]
 8000ebc:	e00a      	b.n	8000ed4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ebe:	f3af 8000 	nop.w
 8000ec2:	4601      	mov	r1, r0
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	1c5a      	adds	r2, r3, #1
 8000ec8:	60ba      	str	r2, [r7, #8]
 8000eca:	b2ca      	uxtb	r2, r1
 8000ecc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	617b      	str	r3, [r7, #20]
 8000ed4:	697a      	ldr	r2, [r7, #20]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	dbf0      	blt.n	8000ebe <_read+0x12>
	}

return len;
 8000edc:	687b      	ldr	r3, [r7, #4]
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3718      	adds	r7, #24
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b086      	sub	sp, #24
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	60f8      	str	r0, [r7, #12]
 8000eee:	60b9      	str	r1, [r7, #8]
 8000ef0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	617b      	str	r3, [r7, #20]
 8000ef6:	e009      	b.n	8000f0c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	1c5a      	adds	r2, r3, #1
 8000efc:	60ba      	str	r2, [r7, #8]
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	617b      	str	r3, [r7, #20]
 8000f0c:	697a      	ldr	r2, [r7, #20]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	dbf1      	blt.n	8000ef8 <_write+0x12>
	}
	return len;
 8000f14:	687b      	ldr	r3, [r7, #4]
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3718      	adds	r7, #24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <_close>:

int _close(int file)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	b083      	sub	sp, #12
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
	return -1;
 8000f26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f36:	b480      	push	{r7}
 8000f38:	b083      	sub	sp, #12
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
 8000f3e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f46:	605a      	str	r2, [r3, #4]
	return 0;
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr

08000f56 <_isatty>:

int _isatty(int file)
{
 8000f56:	b480      	push	{r7}
 8000f58:	b083      	sub	sp, #12
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
	return 1;
 8000f5e:	2301      	movs	r3, #1
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
	return 0;
 8000f78:	2300      	movs	r3, #0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3714      	adds	r7, #20
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
	...

08000f88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f90:	4a14      	ldr	r2, [pc, #80]	; (8000fe4 <_sbrk+0x5c>)
 8000f92:	4b15      	ldr	r3, [pc, #84]	; (8000fe8 <_sbrk+0x60>)
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f9c:	4b13      	ldr	r3, [pc, #76]	; (8000fec <_sbrk+0x64>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d102      	bne.n	8000faa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fa4:	4b11      	ldr	r3, [pc, #68]	; (8000fec <_sbrk+0x64>)
 8000fa6:	4a12      	ldr	r2, [pc, #72]	; (8000ff0 <_sbrk+0x68>)
 8000fa8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000faa:	4b10      	ldr	r3, [pc, #64]	; (8000fec <_sbrk+0x64>)
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d207      	bcs.n	8000fc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fb8:	f007 fd9c 	bl	8008af4 <__errno>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	220c      	movs	r2, #12
 8000fc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc6:	e009      	b.n	8000fdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fc8:	4b08      	ldr	r3, [pc, #32]	; (8000fec <_sbrk+0x64>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fce:	4b07      	ldr	r3, [pc, #28]	; (8000fec <_sbrk+0x64>)
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	4a05      	ldr	r2, [pc, #20]	; (8000fec <_sbrk+0x64>)
 8000fd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fda:	68fb      	ldr	r3, [r7, #12]
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3718      	adds	r7, #24
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20080000 	.word	0x20080000
 8000fe8:	00000400 	.word	0x00000400
 8000fec:	20000114 	.word	0x20000114
 8000ff0:	20004fb8 	.word	0x20004fb8

08000ff4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ff8:	4b06      	ldr	r3, [pc, #24]	; (8001014 <SystemInit+0x20>)
 8000ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ffe:	4a05      	ldr	r2, [pc, #20]	; (8001014 <SystemInit+0x20>)
 8001000:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001004:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001018:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001050 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800101c:	480d      	ldr	r0, [pc, #52]	; (8001054 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800101e:	490e      	ldr	r1, [pc, #56]	; (8001058 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001020:	4a0e      	ldr	r2, [pc, #56]	; (800105c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001022:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001024:	e002      	b.n	800102c <LoopCopyDataInit>

08001026 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001026:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001028:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800102a:	3304      	adds	r3, #4

0800102c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800102c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800102e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001030:	d3f9      	bcc.n	8001026 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001032:	4a0b      	ldr	r2, [pc, #44]	; (8001060 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001034:	4c0b      	ldr	r4, [pc, #44]	; (8001064 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001036:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001038:	e001      	b.n	800103e <LoopFillZerobss>

0800103a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800103a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800103c:	3204      	adds	r2, #4

0800103e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800103e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001040:	d3fb      	bcc.n	800103a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001042:	f7ff ffd7 	bl	8000ff4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001046:	f007 fe63 	bl	8008d10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800104a:	f7ff fac5 	bl	80005d8 <main>
  bx  lr    
 800104e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001050:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001054:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001058:	200000f8 	.word	0x200000f8
  ldr r2, =_sidata
 800105c:	0800a090 	.word	0x0800a090
  ldr r2, =_sbss
 8001060:	200000f8 	.word	0x200000f8
  ldr r4, =_ebss
 8001064:	20004fb4 	.word	0x20004fb4

08001068 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001068:	e7fe      	b.n	8001068 <ADC_IRQHandler>

0800106a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800106e:	2003      	movs	r0, #3
 8001070:	f000 f8f9 	bl	8001266 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001074:	200f      	movs	r0, #15
 8001076:	f7ff fe7f 	bl	8000d78 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800107a:	f7ff fd71 	bl	8000b60 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800107e:	2300      	movs	r3, #0
}
 8001080:	4618      	mov	r0, r3
 8001082:	bd80      	pop	{r7, pc}

08001084 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001088:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <HAL_IncTick+0x20>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	461a      	mov	r2, r3
 800108e:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <HAL_IncTick+0x24>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4413      	add	r3, r2
 8001094:	4a04      	ldr	r2, [pc, #16]	; (80010a8 <HAL_IncTick+0x24>)
 8001096:	6013      	str	r3, [r2, #0]
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	20000008 	.word	0x20000008
 80010a8:	20004d40 	.word	0x20004d40

080010ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  return uwTick;
 80010b0:	4b03      	ldr	r3, [pc, #12]	; (80010c0 <HAL_GetTick+0x14>)
 80010b2:	681b      	ldr	r3, [r3, #0]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	20004d40 	.word	0x20004d40

080010c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010cc:	f7ff ffee 	bl	80010ac <HAL_GetTick>
 80010d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010dc:	d005      	beq.n	80010ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010de:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <HAL_Delay+0x44>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	461a      	mov	r2, r3
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	4413      	add	r3, r2
 80010e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010ea:	bf00      	nop
 80010ec:	f7ff ffde 	bl	80010ac <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	68fa      	ldr	r2, [r7, #12]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d8f7      	bhi.n	80010ec <HAL_Delay+0x28>
  {
  }
}
 80010fc:	bf00      	nop
 80010fe:	bf00      	nop
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000008 	.word	0x20000008

0800110c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f003 0307 	and.w	r3, r3, #7
 800111a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800111c:	4b0b      	ldr	r3, [pc, #44]	; (800114c <__NVIC_SetPriorityGrouping+0x40>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001122:	68ba      	ldr	r2, [r7, #8]
 8001124:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001128:	4013      	ands	r3, r2
 800112a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001134:	4b06      	ldr	r3, [pc, #24]	; (8001150 <__NVIC_SetPriorityGrouping+0x44>)
 8001136:	4313      	orrs	r3, r2
 8001138:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800113a:	4a04      	ldr	r2, [pc, #16]	; (800114c <__NVIC_SetPriorityGrouping+0x40>)
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	60d3      	str	r3, [r2, #12]
}
 8001140:	bf00      	nop
 8001142:	3714      	adds	r7, #20
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	e000ed00 	.word	0xe000ed00
 8001150:	05fa0000 	.word	0x05fa0000

08001154 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001158:	4b04      	ldr	r3, [pc, #16]	; (800116c <__NVIC_GetPriorityGrouping+0x18>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	0a1b      	lsrs	r3, r3, #8
 800115e:	f003 0307 	and.w	r3, r3, #7
}
 8001162:	4618      	mov	r0, r3
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800117a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117e:	2b00      	cmp	r3, #0
 8001180:	db0b      	blt.n	800119a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	f003 021f 	and.w	r2, r3, #31
 8001188:	4907      	ldr	r1, [pc, #28]	; (80011a8 <__NVIC_EnableIRQ+0x38>)
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	095b      	lsrs	r3, r3, #5
 8001190:	2001      	movs	r0, #1
 8001192:	fa00 f202 	lsl.w	r2, r0, r2
 8001196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	e000e100 	.word	0xe000e100

080011ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	6039      	str	r1, [r7, #0]
 80011b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	db0a      	blt.n	80011d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	b2da      	uxtb	r2, r3
 80011c4:	490c      	ldr	r1, [pc, #48]	; (80011f8 <__NVIC_SetPriority+0x4c>)
 80011c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ca:	0112      	lsls	r2, r2, #4
 80011cc:	b2d2      	uxtb	r2, r2
 80011ce:	440b      	add	r3, r1
 80011d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011d4:	e00a      	b.n	80011ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	b2da      	uxtb	r2, r3
 80011da:	4908      	ldr	r1, [pc, #32]	; (80011fc <__NVIC_SetPriority+0x50>)
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	f003 030f 	and.w	r3, r3, #15
 80011e2:	3b04      	subs	r3, #4
 80011e4:	0112      	lsls	r2, r2, #4
 80011e6:	b2d2      	uxtb	r2, r2
 80011e8:	440b      	add	r3, r1
 80011ea:	761a      	strb	r2, [r3, #24]
}
 80011ec:	bf00      	nop
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	e000e100 	.word	0xe000e100
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001200:	b480      	push	{r7}
 8001202:	b089      	sub	sp, #36	; 0x24
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	f1c3 0307 	rsb	r3, r3, #7
 800121a:	2b04      	cmp	r3, #4
 800121c:	bf28      	it	cs
 800121e:	2304      	movcs	r3, #4
 8001220:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	3304      	adds	r3, #4
 8001226:	2b06      	cmp	r3, #6
 8001228:	d902      	bls.n	8001230 <NVIC_EncodePriority+0x30>
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	3b03      	subs	r3, #3
 800122e:	e000      	b.n	8001232 <NVIC_EncodePriority+0x32>
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001234:	f04f 32ff 	mov.w	r2, #4294967295
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	43da      	mvns	r2, r3
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	401a      	ands	r2, r3
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001248:	f04f 31ff 	mov.w	r1, #4294967295
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	fa01 f303 	lsl.w	r3, r1, r3
 8001252:	43d9      	mvns	r1, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001258:	4313      	orrs	r3, r2
         );
}
 800125a:	4618      	mov	r0, r3
 800125c:	3724      	adds	r7, #36	; 0x24
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	b082      	sub	sp, #8
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f7ff ff4c 	bl	800110c <__NVIC_SetPriorityGrouping>
}
 8001274:	bf00      	nop
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800127c:	b580      	push	{r7, lr}
 800127e:	b086      	sub	sp, #24
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	60b9      	str	r1, [r7, #8]
 8001286:	607a      	str	r2, [r7, #4]
 8001288:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800128a:	2300      	movs	r3, #0
 800128c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800128e:	f7ff ff61 	bl	8001154 <__NVIC_GetPriorityGrouping>
 8001292:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	68b9      	ldr	r1, [r7, #8]
 8001298:	6978      	ldr	r0, [r7, #20]
 800129a:	f7ff ffb1 	bl	8001200 <NVIC_EncodePriority>
 800129e:	4602      	mov	r2, r0
 80012a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012a4:	4611      	mov	r1, r2
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff ff80 	bl	80011ac <__NVIC_SetPriority>
}
 80012ac:	bf00      	nop
 80012ae:	3718      	adds	r7, #24
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff ff54 	bl	8001170 <__NVIC_EnableIRQ>
}
 80012c8:	bf00      	nop
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012dc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80012de:	f7ff fee5 	bl	80010ac <HAL_GetTick>
 80012e2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d008      	beq.n	8001302 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2280      	movs	r2, #128	; 0x80
 80012f4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2200      	movs	r2, #0
 80012fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e052      	b.n	80013a8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f022 0216 	bic.w	r2, r2, #22
 8001310:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	695a      	ldr	r2, [r3, #20]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001320:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001326:	2b00      	cmp	r3, #0
 8001328:	d103      	bne.n	8001332 <HAL_DMA_Abort+0x62>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800132e:	2b00      	cmp	r3, #0
 8001330:	d007      	beq.n	8001342 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f022 0208 	bic.w	r2, r2, #8
 8001340:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f022 0201 	bic.w	r2, r2, #1
 8001350:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001352:	e013      	b.n	800137c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001354:	f7ff feaa 	bl	80010ac <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	2b05      	cmp	r3, #5
 8001360:	d90c      	bls.n	800137c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2220      	movs	r2, #32
 8001366:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2200      	movs	r2, #0
 800136c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2203      	movs	r2, #3
 8001374:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001378:	2303      	movs	r3, #3
 800137a:	e015      	b.n	80013a8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	2b00      	cmp	r3, #0
 8001388:	d1e4      	bne.n	8001354 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800138e:	223f      	movs	r2, #63	; 0x3f
 8001390:	409a      	lsls	r2, r3
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2200      	movs	r2, #0
 800139a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2201      	movs	r2, #1
 80013a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80013a6:	2300      	movs	r3, #0
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3710      	adds	r7, #16
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d004      	beq.n	80013ce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2280      	movs	r2, #128	; 0x80
 80013c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e00c      	b.n	80013e8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2205      	movs	r2, #5
 80013d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f022 0201 	bic.w	r2, r2, #1
 80013e4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80013e6:	2300      	movs	r3, #0
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b089      	sub	sp, #36	; 0x24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80013fe:	2300      	movs	r3, #0
 8001400:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001402:	2300      	movs	r3, #0
 8001404:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001406:	2300      	movs	r3, #0
 8001408:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800140a:	2300      	movs	r3, #0
 800140c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800140e:	2300      	movs	r3, #0
 8001410:	61fb      	str	r3, [r7, #28]
 8001412:	e175      	b.n	8001700 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001414:	2201      	movs	r2, #1
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	697a      	ldr	r2, [r7, #20]
 8001424:	4013      	ands	r3, r2
 8001426:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	429a      	cmp	r2, r3
 800142e:	f040 8164 	bne.w	80016fa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d00b      	beq.n	8001452 <HAL_GPIO_Init+0x5e>
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	2b02      	cmp	r3, #2
 8001440:	d007      	beq.n	8001452 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001446:	2b11      	cmp	r3, #17
 8001448:	d003      	beq.n	8001452 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	2b12      	cmp	r3, #18
 8001450:	d130      	bne.n	80014b4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	2203      	movs	r2, #3
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	43db      	mvns	r3, r3
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	4013      	ands	r3, r2
 8001468:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	68da      	ldr	r2, [r3, #12]
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	4313      	orrs	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001488:	2201      	movs	r2, #1
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	43db      	mvns	r3, r3
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	4013      	ands	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	091b      	lsrs	r3, r3, #4
 800149e:	f003 0201 	and.w	r2, r3, #1
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	2203      	movs	r2, #3
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	43db      	mvns	r3, r3
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	4013      	ands	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	689a      	ldr	r2, [r3, #8]
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	4313      	orrs	r3, r2
 80014dc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d003      	beq.n	80014f4 <HAL_GPIO_Init+0x100>
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	2b12      	cmp	r3, #18
 80014f2:	d123      	bne.n	800153c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	08da      	lsrs	r2, r3, #3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3208      	adds	r2, #8
 80014fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001500:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	f003 0307 	and.w	r3, r3, #7
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	220f      	movs	r2, #15
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	43db      	mvns	r3, r3
 8001512:	69ba      	ldr	r2, [r7, #24]
 8001514:	4013      	ands	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	691a      	ldr	r2, [r3, #16]
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	f003 0307 	and.w	r3, r3, #7
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	4313      	orrs	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	08da      	lsrs	r2, r3, #3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	3208      	adds	r2, #8
 8001536:	69b9      	ldr	r1, [r7, #24]
 8001538:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	2203      	movs	r2, #3
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	43db      	mvns	r3, r3
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	4013      	ands	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f003 0203 	and.w	r2, r3, #3
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	4313      	orrs	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001578:	2b00      	cmp	r3, #0
 800157a:	f000 80be 	beq.w	80016fa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800157e:	4b66      	ldr	r3, [pc, #408]	; (8001718 <HAL_GPIO_Init+0x324>)
 8001580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001582:	4a65      	ldr	r2, [pc, #404]	; (8001718 <HAL_GPIO_Init+0x324>)
 8001584:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001588:	6453      	str	r3, [r2, #68]	; 0x44
 800158a:	4b63      	ldr	r3, [pc, #396]	; (8001718 <HAL_GPIO_Init+0x324>)
 800158c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001596:	4a61      	ldr	r2, [pc, #388]	; (800171c <HAL_GPIO_Init+0x328>)
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	089b      	lsrs	r3, r3, #2
 800159c:	3302      	adds	r3, #2
 800159e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	f003 0303 	and.w	r3, r3, #3
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	220f      	movs	r2, #15
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	43db      	mvns	r3, r3
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	4013      	ands	r3, r2
 80015b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a58      	ldr	r2, [pc, #352]	; (8001720 <HAL_GPIO_Init+0x32c>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d037      	beq.n	8001632 <HAL_GPIO_Init+0x23e>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a57      	ldr	r2, [pc, #348]	; (8001724 <HAL_GPIO_Init+0x330>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d031      	beq.n	800162e <HAL_GPIO_Init+0x23a>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a56      	ldr	r2, [pc, #344]	; (8001728 <HAL_GPIO_Init+0x334>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d02b      	beq.n	800162a <HAL_GPIO_Init+0x236>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a55      	ldr	r2, [pc, #340]	; (800172c <HAL_GPIO_Init+0x338>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d025      	beq.n	8001626 <HAL_GPIO_Init+0x232>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a54      	ldr	r2, [pc, #336]	; (8001730 <HAL_GPIO_Init+0x33c>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d01f      	beq.n	8001622 <HAL_GPIO_Init+0x22e>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a53      	ldr	r2, [pc, #332]	; (8001734 <HAL_GPIO_Init+0x340>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d019      	beq.n	800161e <HAL_GPIO_Init+0x22a>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a52      	ldr	r2, [pc, #328]	; (8001738 <HAL_GPIO_Init+0x344>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d013      	beq.n	800161a <HAL_GPIO_Init+0x226>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a51      	ldr	r2, [pc, #324]	; (800173c <HAL_GPIO_Init+0x348>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d00d      	beq.n	8001616 <HAL_GPIO_Init+0x222>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a50      	ldr	r2, [pc, #320]	; (8001740 <HAL_GPIO_Init+0x34c>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d007      	beq.n	8001612 <HAL_GPIO_Init+0x21e>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a4f      	ldr	r2, [pc, #316]	; (8001744 <HAL_GPIO_Init+0x350>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d101      	bne.n	800160e <HAL_GPIO_Init+0x21a>
 800160a:	2309      	movs	r3, #9
 800160c:	e012      	b.n	8001634 <HAL_GPIO_Init+0x240>
 800160e:	230a      	movs	r3, #10
 8001610:	e010      	b.n	8001634 <HAL_GPIO_Init+0x240>
 8001612:	2308      	movs	r3, #8
 8001614:	e00e      	b.n	8001634 <HAL_GPIO_Init+0x240>
 8001616:	2307      	movs	r3, #7
 8001618:	e00c      	b.n	8001634 <HAL_GPIO_Init+0x240>
 800161a:	2306      	movs	r3, #6
 800161c:	e00a      	b.n	8001634 <HAL_GPIO_Init+0x240>
 800161e:	2305      	movs	r3, #5
 8001620:	e008      	b.n	8001634 <HAL_GPIO_Init+0x240>
 8001622:	2304      	movs	r3, #4
 8001624:	e006      	b.n	8001634 <HAL_GPIO_Init+0x240>
 8001626:	2303      	movs	r3, #3
 8001628:	e004      	b.n	8001634 <HAL_GPIO_Init+0x240>
 800162a:	2302      	movs	r3, #2
 800162c:	e002      	b.n	8001634 <HAL_GPIO_Init+0x240>
 800162e:	2301      	movs	r3, #1
 8001630:	e000      	b.n	8001634 <HAL_GPIO_Init+0x240>
 8001632:	2300      	movs	r3, #0
 8001634:	69fa      	ldr	r2, [r7, #28]
 8001636:	f002 0203 	and.w	r2, r2, #3
 800163a:	0092      	lsls	r2, r2, #2
 800163c:	4093      	lsls	r3, r2
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	4313      	orrs	r3, r2
 8001642:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001644:	4935      	ldr	r1, [pc, #212]	; (800171c <HAL_GPIO_Init+0x328>)
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	089b      	lsrs	r3, r3, #2
 800164a:	3302      	adds	r3, #2
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001652:	4b3d      	ldr	r3, [pc, #244]	; (8001748 <HAL_GPIO_Init+0x354>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	43db      	mvns	r3, r3
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	4013      	ands	r3, r2
 8001660:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d003      	beq.n	8001676 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	4313      	orrs	r3, r2
 8001674:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001676:	4a34      	ldr	r2, [pc, #208]	; (8001748 <HAL_GPIO_Init+0x354>)
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800167c:	4b32      	ldr	r3, [pc, #200]	; (8001748 <HAL_GPIO_Init+0x354>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	43db      	mvns	r3, r3
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	4013      	ands	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d003      	beq.n	80016a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	4313      	orrs	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016a0:	4a29      	ldr	r2, [pc, #164]	; (8001748 <HAL_GPIO_Init+0x354>)
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016a6:	4b28      	ldr	r3, [pc, #160]	; (8001748 <HAL_GPIO_Init+0x354>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	43db      	mvns	r3, r3
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	4013      	ands	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d003      	beq.n	80016ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016ca:	4a1f      	ldr	r2, [pc, #124]	; (8001748 <HAL_GPIO_Init+0x354>)
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016d0:	4b1d      	ldr	r3, [pc, #116]	; (8001748 <HAL_GPIO_Init+0x354>)
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	43db      	mvns	r3, r3
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	4013      	ands	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d003      	beq.n	80016f4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016f4:	4a14      	ldr	r2, [pc, #80]	; (8001748 <HAL_GPIO_Init+0x354>)
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	3301      	adds	r3, #1
 80016fe:	61fb      	str	r3, [r7, #28]
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	2b0f      	cmp	r3, #15
 8001704:	f67f ae86 	bls.w	8001414 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001708:	bf00      	nop
 800170a:	bf00      	nop
 800170c:	3724      	adds	r7, #36	; 0x24
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	40023800 	.word	0x40023800
 800171c:	40013800 	.word	0x40013800
 8001720:	40020000 	.word	0x40020000
 8001724:	40020400 	.word	0x40020400
 8001728:	40020800 	.word	0x40020800
 800172c:	40020c00 	.word	0x40020c00
 8001730:	40021000 	.word	0x40021000
 8001734:	40021400 	.word	0x40021400
 8001738:	40021800 	.word	0x40021800
 800173c:	40021c00 	.word	0x40021c00
 8001740:	40022000 	.word	0x40022000
 8001744:	40022400 	.word	0x40022400
 8001748:	40013c00 	.word	0x40013c00

0800174c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	460b      	mov	r3, r1
 8001756:	807b      	strh	r3, [r7, #2]
 8001758:	4613      	mov	r3, r2
 800175a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800175c:	787b      	ldrb	r3, [r7, #1]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d003      	beq.n	800176a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001762:	887a      	ldrh	r2, [r7, #2]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001768:	e003      	b.n	8001772 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800176a:	887b      	ldrh	r3, [r7, #2]
 800176c:	041a      	lsls	r2, r3, #16
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	619a      	str	r2, [r3, #24]
}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800177e:	b480      	push	{r7}
 8001780:	b085      	sub	sp, #20
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
 8001786:	460b      	mov	r3, r1
 8001788:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	695b      	ldr	r3, [r3, #20]
 800178e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001790:	887a      	ldrh	r2, [r7, #2]
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	4013      	ands	r3, r2
 8001796:	041a      	lsls	r2, r3, #16
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	43d9      	mvns	r1, r3
 800179c:	887b      	ldrh	r3, [r7, #2]
 800179e:	400b      	ands	r3, r1
 80017a0:	431a      	orrs	r2, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	619a      	str	r2, [r3, #24]
}
 80017a6:	bf00      	nop
 80017a8:	3714      	adds	r7, #20
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
	...

080017b4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017b8:	4b05      	ldr	r3, [pc, #20]	; (80017d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a04      	ldr	r2, [pc, #16]	; (80017d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80017be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c2:	6013      	str	r3, [r2, #0]
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	40007000 	.word	0x40007000

080017d4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80017da:	2300      	movs	r3, #0
 80017dc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80017de:	4b23      	ldr	r3, [pc, #140]	; (800186c <HAL_PWREx_EnableOverDrive+0x98>)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	4a22      	ldr	r2, [pc, #136]	; (800186c <HAL_PWREx_EnableOverDrive+0x98>)
 80017e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017e8:	6413      	str	r3, [r2, #64]	; 0x40
 80017ea:	4b20      	ldr	r3, [pc, #128]	; (800186c <HAL_PWREx_EnableOverDrive+0x98>)
 80017ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f2:	603b      	str	r3, [r7, #0]
 80017f4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80017f6:	4b1e      	ldr	r3, [pc, #120]	; (8001870 <HAL_PWREx_EnableOverDrive+0x9c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a1d      	ldr	r2, [pc, #116]	; (8001870 <HAL_PWREx_EnableOverDrive+0x9c>)
 80017fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001800:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001802:	f7ff fc53 	bl	80010ac <HAL_GetTick>
 8001806:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001808:	e009      	b.n	800181e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800180a:	f7ff fc4f 	bl	80010ac <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001818:	d901      	bls.n	800181e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e022      	b.n	8001864 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800181e:	4b14      	ldr	r3, [pc, #80]	; (8001870 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001826:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800182a:	d1ee      	bne.n	800180a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800182c:	4b10      	ldr	r3, [pc, #64]	; (8001870 <HAL_PWREx_EnableOverDrive+0x9c>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a0f      	ldr	r2, [pc, #60]	; (8001870 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001832:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001836:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001838:	f7ff fc38 	bl	80010ac <HAL_GetTick>
 800183c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800183e:	e009      	b.n	8001854 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001840:	f7ff fc34 	bl	80010ac <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800184e:	d901      	bls.n	8001854 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e007      	b.n	8001864 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001854:	4b06      	ldr	r3, [pc, #24]	; (8001870 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001860:	d1ee      	bne.n	8001840 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001862:	2300      	movs	r3, #0
}
 8001864:	4618      	mov	r0, r3
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40023800 	.word	0x40023800
 8001870:	40007000 	.word	0x40007000

08001874 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800187c:	2300      	movs	r3, #0
 800187e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d101      	bne.n	800188a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e29b      	b.n	8001dc2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	2b00      	cmp	r3, #0
 8001894:	f000 8087 	beq.w	80019a6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001898:	4b96      	ldr	r3, [pc, #600]	; (8001af4 <HAL_RCC_OscConfig+0x280>)
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f003 030c 	and.w	r3, r3, #12
 80018a0:	2b04      	cmp	r3, #4
 80018a2:	d00c      	beq.n	80018be <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018a4:	4b93      	ldr	r3, [pc, #588]	; (8001af4 <HAL_RCC_OscConfig+0x280>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f003 030c 	and.w	r3, r3, #12
 80018ac:	2b08      	cmp	r3, #8
 80018ae:	d112      	bne.n	80018d6 <HAL_RCC_OscConfig+0x62>
 80018b0:	4b90      	ldr	r3, [pc, #576]	; (8001af4 <HAL_RCC_OscConfig+0x280>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018bc:	d10b      	bne.n	80018d6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018be:	4b8d      	ldr	r3, [pc, #564]	; (8001af4 <HAL_RCC_OscConfig+0x280>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d06c      	beq.n	80019a4 <HAL_RCC_OscConfig+0x130>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d168      	bne.n	80019a4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e275      	b.n	8001dc2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018de:	d106      	bne.n	80018ee <HAL_RCC_OscConfig+0x7a>
 80018e0:	4b84      	ldr	r3, [pc, #528]	; (8001af4 <HAL_RCC_OscConfig+0x280>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a83      	ldr	r2, [pc, #524]	; (8001af4 <HAL_RCC_OscConfig+0x280>)
 80018e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ea:	6013      	str	r3, [r2, #0]
 80018ec:	e02e      	b.n	800194c <HAL_RCC_OscConfig+0xd8>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d10c      	bne.n	8001910 <HAL_RCC_OscConfig+0x9c>
 80018f6:	4b7f      	ldr	r3, [pc, #508]	; (8001af4 <HAL_RCC_OscConfig+0x280>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a7e      	ldr	r2, [pc, #504]	; (8001af4 <HAL_RCC_OscConfig+0x280>)
 80018fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001900:	6013      	str	r3, [r2, #0]
 8001902:	4b7c      	ldr	r3, [pc, #496]	; (8001af4 <HAL_RCC_OscConfig+0x280>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a7b      	ldr	r2, [pc, #492]	; (8001af4 <HAL_RCC_OscConfig+0x280>)
 8001908:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800190c:	6013      	str	r3, [r2, #0]
 800190e:	e01d      	b.n	800194c <HAL_RCC_OscConfig+0xd8>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001918:	d10c      	bne.n	8001934 <HAL_RCC_OscConfig+0xc0>
 800191a:	4b76      	ldr	r3, [pc, #472]	; (8001af4 <HAL_RCC_OscConfig+0x280>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a75      	ldr	r2, [pc, #468]	; (8001af4 <HAL_RCC_OscConfig+0x280>)
 8001920:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001924:	6013      	str	r3, [r2, #0]
 8001926:	4b73      	ldr	r3, [pc, #460]	; (8001af4 <HAL_RCC_OscConfig+0x280>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a72      	ldr	r2, [pc, #456]	; (8001af4 <HAL_RCC_OscConfig+0x280>)
 800192c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001930:	6013      	str	r3, [r2, #0]
 8001932:	e00b      	b.n	800194c <HAL_RCC_OscConfig+0xd8>
 8001934:	4b6f      	ldr	r3, [pc, #444]	; (8001af4 <HAL_RCC_OscConfig+0x280>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a6e      	ldr	r2, [pc, #440]	; (8001af4 <HAL_RCC_OscConfig+0x280>)
 800193a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800193e:	6013      	str	r3, [r2, #0]
 8001940:	4b6c      	ldr	r3, [pc, #432]	; (8001af4 <HAL_RCC_OscConfig+0x280>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a6b      	ldr	r2, [pc, #428]	; (8001af4 <HAL_RCC_OscConfig+0x280>)
 8001946:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800194a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d013      	beq.n	800197c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001954:	f7ff fbaa 	bl	80010ac <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800195c:	f7ff fba6 	bl	80010ac <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b64      	cmp	r3, #100	; 0x64
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e229      	b.n	8001dc2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800196e:	4b61      	ldr	r3, [pc, #388]	; (8001af4 <HAL_RCC_OscConfig+0x280>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d0f0      	beq.n	800195c <HAL_RCC_OscConfig+0xe8>
 800197a:	e014      	b.n	80019a6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800197c:	f7ff fb96 	bl	80010ac <HAL_GetTick>
 8001980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001984:	f7ff fb92 	bl	80010ac <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b64      	cmp	r3, #100	; 0x64
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e215      	b.n	8001dc2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001996:	4b57      	ldr	r3, [pc, #348]	; (8001af4 <HAL_RCC_OscConfig+0x280>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d1f0      	bne.n	8001984 <HAL_RCC_OscConfig+0x110>
 80019a2:	e000      	b.n	80019a6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d069      	beq.n	8001a86 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019b2:	4b50      	ldr	r3, [pc, #320]	; (8001af4 <HAL_RCC_OscConfig+0x280>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f003 030c 	and.w	r3, r3, #12
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d00b      	beq.n	80019d6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019be:	4b4d      	ldr	r3, [pc, #308]	; (8001af4 <HAL_RCC_OscConfig+0x280>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f003 030c 	and.w	r3, r3, #12
 80019c6:	2b08      	cmp	r3, #8
 80019c8:	d11c      	bne.n	8001a04 <HAL_RCC_OscConfig+0x190>
 80019ca:	4b4a      	ldr	r3, [pc, #296]	; (8001af4 <HAL_RCC_OscConfig+0x280>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d116      	bne.n	8001a04 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019d6:	4b47      	ldr	r3, [pc, #284]	; (8001af4 <HAL_RCC_OscConfig+0x280>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d005      	beq.n	80019ee <HAL_RCC_OscConfig+0x17a>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d001      	beq.n	80019ee <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e1e9      	b.n	8001dc2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ee:	4b41      	ldr	r3, [pc, #260]	; (8001af4 <HAL_RCC_OscConfig+0x280>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	691b      	ldr	r3, [r3, #16]
 80019fa:	00db      	lsls	r3, r3, #3
 80019fc:	493d      	ldr	r1, [pc, #244]	; (8001af4 <HAL_RCC_OscConfig+0x280>)
 80019fe:	4313      	orrs	r3, r2
 8001a00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a02:	e040      	b.n	8001a86 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d023      	beq.n	8001a54 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a0c:	4b39      	ldr	r3, [pc, #228]	; (8001af4 <HAL_RCC_OscConfig+0x280>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a38      	ldr	r2, [pc, #224]	; (8001af4 <HAL_RCC_OscConfig+0x280>)
 8001a12:	f043 0301 	orr.w	r3, r3, #1
 8001a16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a18:	f7ff fb48 	bl	80010ac <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a20:	f7ff fb44 	bl	80010ac <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e1c7      	b.n	8001dc2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a32:	4b30      	ldr	r3, [pc, #192]	; (8001af4 <HAL_RCC_OscConfig+0x280>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d0f0      	beq.n	8001a20 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a3e:	4b2d      	ldr	r3, [pc, #180]	; (8001af4 <HAL_RCC_OscConfig+0x280>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	691b      	ldr	r3, [r3, #16]
 8001a4a:	00db      	lsls	r3, r3, #3
 8001a4c:	4929      	ldr	r1, [pc, #164]	; (8001af4 <HAL_RCC_OscConfig+0x280>)
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	600b      	str	r3, [r1, #0]
 8001a52:	e018      	b.n	8001a86 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a54:	4b27      	ldr	r3, [pc, #156]	; (8001af4 <HAL_RCC_OscConfig+0x280>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a26      	ldr	r2, [pc, #152]	; (8001af4 <HAL_RCC_OscConfig+0x280>)
 8001a5a:	f023 0301 	bic.w	r3, r3, #1
 8001a5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a60:	f7ff fb24 	bl	80010ac <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a68:	f7ff fb20 	bl	80010ac <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e1a3      	b.n	8001dc2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a7a:	4b1e      	ldr	r3, [pc, #120]	; (8001af4 <HAL_RCC_OscConfig+0x280>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1f0      	bne.n	8001a68 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0308 	and.w	r3, r3, #8
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d038      	beq.n	8001b04 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	695b      	ldr	r3, [r3, #20]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d019      	beq.n	8001ace <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a9a:	4b16      	ldr	r3, [pc, #88]	; (8001af4 <HAL_RCC_OscConfig+0x280>)
 8001a9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a9e:	4a15      	ldr	r2, [pc, #84]	; (8001af4 <HAL_RCC_OscConfig+0x280>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa6:	f7ff fb01 	bl	80010ac <HAL_GetTick>
 8001aaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aac:	e008      	b.n	8001ac0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aae:	f7ff fafd 	bl	80010ac <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e180      	b.n	8001dc2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ac0:	4b0c      	ldr	r3, [pc, #48]	; (8001af4 <HAL_RCC_OscConfig+0x280>)
 8001ac2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ac4:	f003 0302 	and.w	r3, r3, #2
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d0f0      	beq.n	8001aae <HAL_RCC_OscConfig+0x23a>
 8001acc:	e01a      	b.n	8001b04 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ace:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <HAL_RCC_OscConfig+0x280>)
 8001ad0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ad2:	4a08      	ldr	r2, [pc, #32]	; (8001af4 <HAL_RCC_OscConfig+0x280>)
 8001ad4:	f023 0301 	bic.w	r3, r3, #1
 8001ad8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ada:	f7ff fae7 	bl	80010ac <HAL_GetTick>
 8001ade:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ae0:	e00a      	b.n	8001af8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ae2:	f7ff fae3 	bl	80010ac <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d903      	bls.n	8001af8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e166      	b.n	8001dc2 <HAL_RCC_OscConfig+0x54e>
 8001af4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001af8:	4b92      	ldr	r3, [pc, #584]	; (8001d44 <HAL_RCC_OscConfig+0x4d0>)
 8001afa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d1ee      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0304 	and.w	r3, r3, #4
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	f000 80a4 	beq.w	8001c5a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b12:	4b8c      	ldr	r3, [pc, #560]	; (8001d44 <HAL_RCC_OscConfig+0x4d0>)
 8001b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d10d      	bne.n	8001b3a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b1e:	4b89      	ldr	r3, [pc, #548]	; (8001d44 <HAL_RCC_OscConfig+0x4d0>)
 8001b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b22:	4a88      	ldr	r2, [pc, #544]	; (8001d44 <HAL_RCC_OscConfig+0x4d0>)
 8001b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b28:	6413      	str	r3, [r2, #64]	; 0x40
 8001b2a:	4b86      	ldr	r3, [pc, #536]	; (8001d44 <HAL_RCC_OscConfig+0x4d0>)
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b32:	60bb      	str	r3, [r7, #8]
 8001b34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b36:	2301      	movs	r3, #1
 8001b38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b3a:	4b83      	ldr	r3, [pc, #524]	; (8001d48 <HAL_RCC_OscConfig+0x4d4>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d118      	bne.n	8001b78 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001b46:	4b80      	ldr	r3, [pc, #512]	; (8001d48 <HAL_RCC_OscConfig+0x4d4>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a7f      	ldr	r2, [pc, #508]	; (8001d48 <HAL_RCC_OscConfig+0x4d4>)
 8001b4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b52:	f7ff faab 	bl	80010ac <HAL_GetTick>
 8001b56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b58:	e008      	b.n	8001b6c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b5a:	f7ff faa7 	bl	80010ac <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b64      	cmp	r3, #100	; 0x64
 8001b66:	d901      	bls.n	8001b6c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e12a      	b.n	8001dc2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b6c:	4b76      	ldr	r3, [pc, #472]	; (8001d48 <HAL_RCC_OscConfig+0x4d4>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d0f0      	beq.n	8001b5a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d106      	bne.n	8001b8e <HAL_RCC_OscConfig+0x31a>
 8001b80:	4b70      	ldr	r3, [pc, #448]	; (8001d44 <HAL_RCC_OscConfig+0x4d0>)
 8001b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b84:	4a6f      	ldr	r2, [pc, #444]	; (8001d44 <HAL_RCC_OscConfig+0x4d0>)
 8001b86:	f043 0301 	orr.w	r3, r3, #1
 8001b8a:	6713      	str	r3, [r2, #112]	; 0x70
 8001b8c:	e02d      	b.n	8001bea <HAL_RCC_OscConfig+0x376>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d10c      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x33c>
 8001b96:	4b6b      	ldr	r3, [pc, #428]	; (8001d44 <HAL_RCC_OscConfig+0x4d0>)
 8001b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b9a:	4a6a      	ldr	r2, [pc, #424]	; (8001d44 <HAL_RCC_OscConfig+0x4d0>)
 8001b9c:	f023 0301 	bic.w	r3, r3, #1
 8001ba0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ba2:	4b68      	ldr	r3, [pc, #416]	; (8001d44 <HAL_RCC_OscConfig+0x4d0>)
 8001ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba6:	4a67      	ldr	r2, [pc, #412]	; (8001d44 <HAL_RCC_OscConfig+0x4d0>)
 8001ba8:	f023 0304 	bic.w	r3, r3, #4
 8001bac:	6713      	str	r3, [r2, #112]	; 0x70
 8001bae:	e01c      	b.n	8001bea <HAL_RCC_OscConfig+0x376>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	2b05      	cmp	r3, #5
 8001bb6:	d10c      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x35e>
 8001bb8:	4b62      	ldr	r3, [pc, #392]	; (8001d44 <HAL_RCC_OscConfig+0x4d0>)
 8001bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bbc:	4a61      	ldr	r2, [pc, #388]	; (8001d44 <HAL_RCC_OscConfig+0x4d0>)
 8001bbe:	f043 0304 	orr.w	r3, r3, #4
 8001bc2:	6713      	str	r3, [r2, #112]	; 0x70
 8001bc4:	4b5f      	ldr	r3, [pc, #380]	; (8001d44 <HAL_RCC_OscConfig+0x4d0>)
 8001bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc8:	4a5e      	ldr	r2, [pc, #376]	; (8001d44 <HAL_RCC_OscConfig+0x4d0>)
 8001bca:	f043 0301 	orr.w	r3, r3, #1
 8001bce:	6713      	str	r3, [r2, #112]	; 0x70
 8001bd0:	e00b      	b.n	8001bea <HAL_RCC_OscConfig+0x376>
 8001bd2:	4b5c      	ldr	r3, [pc, #368]	; (8001d44 <HAL_RCC_OscConfig+0x4d0>)
 8001bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd6:	4a5b      	ldr	r2, [pc, #364]	; (8001d44 <HAL_RCC_OscConfig+0x4d0>)
 8001bd8:	f023 0301 	bic.w	r3, r3, #1
 8001bdc:	6713      	str	r3, [r2, #112]	; 0x70
 8001bde:	4b59      	ldr	r3, [pc, #356]	; (8001d44 <HAL_RCC_OscConfig+0x4d0>)
 8001be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be2:	4a58      	ldr	r2, [pc, #352]	; (8001d44 <HAL_RCC_OscConfig+0x4d0>)
 8001be4:	f023 0304 	bic.w	r3, r3, #4
 8001be8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d015      	beq.n	8001c1e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf2:	f7ff fa5b 	bl	80010ac <HAL_GetTick>
 8001bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bf8:	e00a      	b.n	8001c10 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bfa:	f7ff fa57 	bl	80010ac <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e0d8      	b.n	8001dc2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c10:	4b4c      	ldr	r3, [pc, #304]	; (8001d44 <HAL_RCC_OscConfig+0x4d0>)
 8001c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d0ee      	beq.n	8001bfa <HAL_RCC_OscConfig+0x386>
 8001c1c:	e014      	b.n	8001c48 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c1e:	f7ff fa45 	bl	80010ac <HAL_GetTick>
 8001c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c24:	e00a      	b.n	8001c3c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c26:	f7ff fa41 	bl	80010ac <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e0c2      	b.n	8001dc2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c3c:	4b41      	ldr	r3, [pc, #260]	; (8001d44 <HAL_RCC_OscConfig+0x4d0>)
 8001c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c40:	f003 0302 	and.w	r3, r3, #2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d1ee      	bne.n	8001c26 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c48:	7dfb      	ldrb	r3, [r7, #23]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d105      	bne.n	8001c5a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c4e:	4b3d      	ldr	r3, [pc, #244]	; (8001d44 <HAL_RCC_OscConfig+0x4d0>)
 8001c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c52:	4a3c      	ldr	r2, [pc, #240]	; (8001d44 <HAL_RCC_OscConfig+0x4d0>)
 8001c54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c58:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f000 80ae 	beq.w	8001dc0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c64:	4b37      	ldr	r3, [pc, #220]	; (8001d44 <HAL_RCC_OscConfig+0x4d0>)
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f003 030c 	and.w	r3, r3, #12
 8001c6c:	2b08      	cmp	r3, #8
 8001c6e:	d06d      	beq.n	8001d4c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d14b      	bne.n	8001d10 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c78:	4b32      	ldr	r3, [pc, #200]	; (8001d44 <HAL_RCC_OscConfig+0x4d0>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a31      	ldr	r2, [pc, #196]	; (8001d44 <HAL_RCC_OscConfig+0x4d0>)
 8001c7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c84:	f7ff fa12 	bl	80010ac <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c8c:	f7ff fa0e 	bl	80010ac <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e091      	b.n	8001dc2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c9e:	4b29      	ldr	r3, [pc, #164]	; (8001d44 <HAL_RCC_OscConfig+0x4d0>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d1f0      	bne.n	8001c8c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	69da      	ldr	r2, [r3, #28]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a1b      	ldr	r3, [r3, #32]
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb8:	019b      	lsls	r3, r3, #6
 8001cba:	431a      	orrs	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc0:	085b      	lsrs	r3, r3, #1
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	041b      	lsls	r3, r3, #16
 8001cc6:	431a      	orrs	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ccc:	061b      	lsls	r3, r3, #24
 8001cce:	431a      	orrs	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd4:	071b      	lsls	r3, r3, #28
 8001cd6:	491b      	ldr	r1, [pc, #108]	; (8001d44 <HAL_RCC_OscConfig+0x4d0>)
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cdc:	4b19      	ldr	r3, [pc, #100]	; (8001d44 <HAL_RCC_OscConfig+0x4d0>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a18      	ldr	r2, [pc, #96]	; (8001d44 <HAL_RCC_OscConfig+0x4d0>)
 8001ce2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ce6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce8:	f7ff f9e0 	bl	80010ac <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cf0:	f7ff f9dc 	bl	80010ac <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e05f      	b.n	8001dc2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d02:	4b10      	ldr	r3, [pc, #64]	; (8001d44 <HAL_RCC_OscConfig+0x4d0>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d0f0      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x47c>
 8001d0e:	e057      	b.n	8001dc0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d10:	4b0c      	ldr	r3, [pc, #48]	; (8001d44 <HAL_RCC_OscConfig+0x4d0>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a0b      	ldr	r2, [pc, #44]	; (8001d44 <HAL_RCC_OscConfig+0x4d0>)
 8001d16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d1c:	f7ff f9c6 	bl	80010ac <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d24:	f7ff f9c2 	bl	80010ac <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e045      	b.n	8001dc2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d36:	4b03      	ldr	r3, [pc, #12]	; (8001d44 <HAL_RCC_OscConfig+0x4d0>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1f0      	bne.n	8001d24 <HAL_RCC_OscConfig+0x4b0>
 8001d42:	e03d      	b.n	8001dc0 <HAL_RCC_OscConfig+0x54c>
 8001d44:	40023800 	.word	0x40023800
 8001d48:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001d4c:	4b1f      	ldr	r3, [pc, #124]	; (8001dcc <HAL_RCC_OscConfig+0x558>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d030      	beq.n	8001dbc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d129      	bne.n	8001dbc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d122      	bne.n	8001dbc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d82:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d119      	bne.n	8001dbc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d92:	085b      	lsrs	r3, r3, #1
 8001d94:	3b01      	subs	r3, #1
 8001d96:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d10f      	bne.n	8001dbc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d107      	bne.n	8001dbc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d001      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e000      	b.n	8001dc2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3718      	adds	r7, #24
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	40023800 	.word	0x40023800

08001dd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d101      	bne.n	8001de8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e0d0      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001de8:	4b6a      	ldr	r3, [pc, #424]	; (8001f94 <HAL_RCC_ClockConfig+0x1c4>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 030f 	and.w	r3, r3, #15
 8001df0:	683a      	ldr	r2, [r7, #0]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d910      	bls.n	8001e18 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001df6:	4b67      	ldr	r3, [pc, #412]	; (8001f94 <HAL_RCC_ClockConfig+0x1c4>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f023 020f 	bic.w	r2, r3, #15
 8001dfe:	4965      	ldr	r1, [pc, #404]	; (8001f94 <HAL_RCC_ClockConfig+0x1c4>)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e06:	4b63      	ldr	r3, [pc, #396]	; (8001f94 <HAL_RCC_ClockConfig+0x1c4>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 030f 	and.w	r3, r3, #15
 8001e0e:	683a      	ldr	r2, [r7, #0]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d001      	beq.n	8001e18 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e0b8      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0302 	and.w	r3, r3, #2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d020      	beq.n	8001e66 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0304 	and.w	r3, r3, #4
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d005      	beq.n	8001e3c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e30:	4b59      	ldr	r3, [pc, #356]	; (8001f98 <HAL_RCC_ClockConfig+0x1c8>)
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	4a58      	ldr	r2, [pc, #352]	; (8001f98 <HAL_RCC_ClockConfig+0x1c8>)
 8001e36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e3a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0308 	and.w	r3, r3, #8
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d005      	beq.n	8001e54 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e48:	4b53      	ldr	r3, [pc, #332]	; (8001f98 <HAL_RCC_ClockConfig+0x1c8>)
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	4a52      	ldr	r2, [pc, #328]	; (8001f98 <HAL_RCC_ClockConfig+0x1c8>)
 8001e4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e52:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e54:	4b50      	ldr	r3, [pc, #320]	; (8001f98 <HAL_RCC_ClockConfig+0x1c8>)
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	494d      	ldr	r1, [pc, #308]	; (8001f98 <HAL_RCC_ClockConfig+0x1c8>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d040      	beq.n	8001ef4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d107      	bne.n	8001e8a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e7a:	4b47      	ldr	r3, [pc, #284]	; (8001f98 <HAL_RCC_ClockConfig+0x1c8>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d115      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e07f      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d107      	bne.n	8001ea2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e92:	4b41      	ldr	r3, [pc, #260]	; (8001f98 <HAL_RCC_ClockConfig+0x1c8>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d109      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e073      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ea2:	4b3d      	ldr	r3, [pc, #244]	; (8001f98 <HAL_RCC_ClockConfig+0x1c8>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e06b      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eb2:	4b39      	ldr	r3, [pc, #228]	; (8001f98 <HAL_RCC_ClockConfig+0x1c8>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f023 0203 	bic.w	r2, r3, #3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	4936      	ldr	r1, [pc, #216]	; (8001f98 <HAL_RCC_ClockConfig+0x1c8>)
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ec4:	f7ff f8f2 	bl	80010ac <HAL_GetTick>
 8001ec8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eca:	e00a      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ecc:	f7ff f8ee 	bl	80010ac <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e053      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ee2:	4b2d      	ldr	r3, [pc, #180]	; (8001f98 <HAL_RCC_ClockConfig+0x1c8>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f003 020c 	and.w	r2, r3, #12
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d1eb      	bne.n	8001ecc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ef4:	4b27      	ldr	r3, [pc, #156]	; (8001f94 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 030f 	and.w	r3, r3, #15
 8001efc:	683a      	ldr	r2, [r7, #0]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d210      	bcs.n	8001f24 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f02:	4b24      	ldr	r3, [pc, #144]	; (8001f94 <HAL_RCC_ClockConfig+0x1c4>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f023 020f 	bic.w	r2, r3, #15
 8001f0a:	4922      	ldr	r1, [pc, #136]	; (8001f94 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f12:	4b20      	ldr	r3, [pc, #128]	; (8001f94 <HAL_RCC_ClockConfig+0x1c4>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 030f 	and.w	r3, r3, #15
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d001      	beq.n	8001f24 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e032      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0304 	and.w	r3, r3, #4
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d008      	beq.n	8001f42 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f30:	4b19      	ldr	r3, [pc, #100]	; (8001f98 <HAL_RCC_ClockConfig+0x1c8>)
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	4916      	ldr	r1, [pc, #88]	; (8001f98 <HAL_RCC_ClockConfig+0x1c8>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0308 	and.w	r3, r3, #8
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d009      	beq.n	8001f62 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f4e:	4b12      	ldr	r3, [pc, #72]	; (8001f98 <HAL_RCC_ClockConfig+0x1c8>)
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	490e      	ldr	r1, [pc, #56]	; (8001f98 <HAL_RCC_ClockConfig+0x1c8>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f62:	f000 f821 	bl	8001fa8 <HAL_RCC_GetSysClockFreq>
 8001f66:	4602      	mov	r2, r0
 8001f68:	4b0b      	ldr	r3, [pc, #44]	; (8001f98 <HAL_RCC_ClockConfig+0x1c8>)
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	091b      	lsrs	r3, r3, #4
 8001f6e:	f003 030f 	and.w	r3, r3, #15
 8001f72:	490a      	ldr	r1, [pc, #40]	; (8001f9c <HAL_RCC_ClockConfig+0x1cc>)
 8001f74:	5ccb      	ldrb	r3, [r1, r3]
 8001f76:	fa22 f303 	lsr.w	r3, r2, r3
 8001f7a:	4a09      	ldr	r2, [pc, #36]	; (8001fa0 <HAL_RCC_ClockConfig+0x1d0>)
 8001f7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f7e:	4b09      	ldr	r3, [pc, #36]	; (8001fa4 <HAL_RCC_ClockConfig+0x1d4>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7fe fef8 	bl	8000d78 <HAL_InitTick>

  return HAL_OK;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	40023c00 	.word	0x40023c00
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	08009d34 	.word	0x08009d34
 8001fa0:	20000000 	.word	0x20000000
 8001fa4:	20000004 	.word	0x20000004

08001fa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fa8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001fac:	b084      	sub	sp, #16
 8001fae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	607b      	str	r3, [r7, #4]
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	2300      	movs	r3, #0
 8001fba:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fc0:	4b67      	ldr	r3, [pc, #412]	; (8002160 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f003 030c 	and.w	r3, r3, #12
 8001fc8:	2b08      	cmp	r3, #8
 8001fca:	d00d      	beq.n	8001fe8 <HAL_RCC_GetSysClockFreq+0x40>
 8001fcc:	2b08      	cmp	r3, #8
 8001fce:	f200 80bd 	bhi.w	800214c <HAL_RCC_GetSysClockFreq+0x1a4>
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d002      	beq.n	8001fdc <HAL_RCC_GetSysClockFreq+0x34>
 8001fd6:	2b04      	cmp	r3, #4
 8001fd8:	d003      	beq.n	8001fe2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001fda:	e0b7      	b.n	800214c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fdc:	4b61      	ldr	r3, [pc, #388]	; (8002164 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001fde:	60bb      	str	r3, [r7, #8]
      break;
 8001fe0:	e0b7      	b.n	8002152 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fe2:	4b61      	ldr	r3, [pc, #388]	; (8002168 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001fe4:	60bb      	str	r3, [r7, #8]
      break;
 8001fe6:	e0b4      	b.n	8002152 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fe8:	4b5d      	ldr	r3, [pc, #372]	; (8002160 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ff0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001ff2:	4b5b      	ldr	r3, [pc, #364]	; (8002160 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d04d      	beq.n	800209a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ffe:	4b58      	ldr	r3, [pc, #352]	; (8002160 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	099b      	lsrs	r3, r3, #6
 8002004:	461a      	mov	r2, r3
 8002006:	f04f 0300 	mov.w	r3, #0
 800200a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800200e:	f04f 0100 	mov.w	r1, #0
 8002012:	ea02 0800 	and.w	r8, r2, r0
 8002016:	ea03 0901 	and.w	r9, r3, r1
 800201a:	4640      	mov	r0, r8
 800201c:	4649      	mov	r1, r9
 800201e:	f04f 0200 	mov.w	r2, #0
 8002022:	f04f 0300 	mov.w	r3, #0
 8002026:	014b      	lsls	r3, r1, #5
 8002028:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800202c:	0142      	lsls	r2, r0, #5
 800202e:	4610      	mov	r0, r2
 8002030:	4619      	mov	r1, r3
 8002032:	ebb0 0008 	subs.w	r0, r0, r8
 8002036:	eb61 0109 	sbc.w	r1, r1, r9
 800203a:	f04f 0200 	mov.w	r2, #0
 800203e:	f04f 0300 	mov.w	r3, #0
 8002042:	018b      	lsls	r3, r1, #6
 8002044:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002048:	0182      	lsls	r2, r0, #6
 800204a:	1a12      	subs	r2, r2, r0
 800204c:	eb63 0301 	sbc.w	r3, r3, r1
 8002050:	f04f 0000 	mov.w	r0, #0
 8002054:	f04f 0100 	mov.w	r1, #0
 8002058:	00d9      	lsls	r1, r3, #3
 800205a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800205e:	00d0      	lsls	r0, r2, #3
 8002060:	4602      	mov	r2, r0
 8002062:	460b      	mov	r3, r1
 8002064:	eb12 0208 	adds.w	r2, r2, r8
 8002068:	eb43 0309 	adc.w	r3, r3, r9
 800206c:	f04f 0000 	mov.w	r0, #0
 8002070:	f04f 0100 	mov.w	r1, #0
 8002074:	0259      	lsls	r1, r3, #9
 8002076:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800207a:	0250      	lsls	r0, r2, #9
 800207c:	4602      	mov	r2, r0
 800207e:	460b      	mov	r3, r1
 8002080:	4610      	mov	r0, r2
 8002082:	4619      	mov	r1, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	461a      	mov	r2, r3
 8002088:	f04f 0300 	mov.w	r3, #0
 800208c:	f7fe f928 	bl	80002e0 <__aeabi_uldivmod>
 8002090:	4602      	mov	r2, r0
 8002092:	460b      	mov	r3, r1
 8002094:	4613      	mov	r3, r2
 8002096:	60fb      	str	r3, [r7, #12]
 8002098:	e04a      	b.n	8002130 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800209a:	4b31      	ldr	r3, [pc, #196]	; (8002160 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	099b      	lsrs	r3, r3, #6
 80020a0:	461a      	mov	r2, r3
 80020a2:	f04f 0300 	mov.w	r3, #0
 80020a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80020aa:	f04f 0100 	mov.w	r1, #0
 80020ae:	ea02 0400 	and.w	r4, r2, r0
 80020b2:	ea03 0501 	and.w	r5, r3, r1
 80020b6:	4620      	mov	r0, r4
 80020b8:	4629      	mov	r1, r5
 80020ba:	f04f 0200 	mov.w	r2, #0
 80020be:	f04f 0300 	mov.w	r3, #0
 80020c2:	014b      	lsls	r3, r1, #5
 80020c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80020c8:	0142      	lsls	r2, r0, #5
 80020ca:	4610      	mov	r0, r2
 80020cc:	4619      	mov	r1, r3
 80020ce:	1b00      	subs	r0, r0, r4
 80020d0:	eb61 0105 	sbc.w	r1, r1, r5
 80020d4:	f04f 0200 	mov.w	r2, #0
 80020d8:	f04f 0300 	mov.w	r3, #0
 80020dc:	018b      	lsls	r3, r1, #6
 80020de:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80020e2:	0182      	lsls	r2, r0, #6
 80020e4:	1a12      	subs	r2, r2, r0
 80020e6:	eb63 0301 	sbc.w	r3, r3, r1
 80020ea:	f04f 0000 	mov.w	r0, #0
 80020ee:	f04f 0100 	mov.w	r1, #0
 80020f2:	00d9      	lsls	r1, r3, #3
 80020f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80020f8:	00d0      	lsls	r0, r2, #3
 80020fa:	4602      	mov	r2, r0
 80020fc:	460b      	mov	r3, r1
 80020fe:	1912      	adds	r2, r2, r4
 8002100:	eb45 0303 	adc.w	r3, r5, r3
 8002104:	f04f 0000 	mov.w	r0, #0
 8002108:	f04f 0100 	mov.w	r1, #0
 800210c:	0299      	lsls	r1, r3, #10
 800210e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002112:	0290      	lsls	r0, r2, #10
 8002114:	4602      	mov	r2, r0
 8002116:	460b      	mov	r3, r1
 8002118:	4610      	mov	r0, r2
 800211a:	4619      	mov	r1, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	461a      	mov	r2, r3
 8002120:	f04f 0300 	mov.w	r3, #0
 8002124:	f7fe f8dc 	bl	80002e0 <__aeabi_uldivmod>
 8002128:	4602      	mov	r2, r0
 800212a:	460b      	mov	r3, r1
 800212c:	4613      	mov	r3, r2
 800212e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002130:	4b0b      	ldr	r3, [pc, #44]	; (8002160 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	0c1b      	lsrs	r3, r3, #16
 8002136:	f003 0303 	and.w	r3, r3, #3
 800213a:	3301      	adds	r3, #1
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	fbb2 f3f3 	udiv	r3, r2, r3
 8002148:	60bb      	str	r3, [r7, #8]
      break;
 800214a:	e002      	b.n	8002152 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800214c:	4b05      	ldr	r3, [pc, #20]	; (8002164 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800214e:	60bb      	str	r3, [r7, #8]
      break;
 8002150:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002152:	68bb      	ldr	r3, [r7, #8]
}
 8002154:	4618      	mov	r0, r3
 8002156:	3710      	adds	r7, #16
 8002158:	46bd      	mov	sp, r7
 800215a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800215e:	bf00      	nop
 8002160:	40023800 	.word	0x40023800
 8002164:	00f42400 	.word	0x00f42400
 8002168:	007a1200 	.word	0x007a1200

0800216c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002170:	4b03      	ldr	r3, [pc, #12]	; (8002180 <HAL_RCC_GetHCLKFreq+0x14>)
 8002172:	681b      	ldr	r3, [r3, #0]
}
 8002174:	4618      	mov	r0, r3
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	20000000 	.word	0x20000000

08002184 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002188:	f7ff fff0 	bl	800216c <HAL_RCC_GetHCLKFreq>
 800218c:	4602      	mov	r2, r0
 800218e:	4b05      	ldr	r3, [pc, #20]	; (80021a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	0a9b      	lsrs	r3, r3, #10
 8002194:	f003 0307 	and.w	r3, r3, #7
 8002198:	4903      	ldr	r1, [pc, #12]	; (80021a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800219a:	5ccb      	ldrb	r3, [r1, r3]
 800219c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	40023800 	.word	0x40023800
 80021a8:	08009d44 	.word	0x08009d44

080021ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021b0:	f7ff ffdc 	bl	800216c <HAL_RCC_GetHCLKFreq>
 80021b4:	4602      	mov	r2, r0
 80021b6:	4b05      	ldr	r3, [pc, #20]	; (80021cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	0b5b      	lsrs	r3, r3, #13
 80021bc:	f003 0307 	and.w	r3, r3, #7
 80021c0:	4903      	ldr	r1, [pc, #12]	; (80021d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021c2:	5ccb      	ldrb	r3, [r1, r3]
 80021c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	40023800 	.word	0x40023800
 80021d0:	08009d44 	.word	0x08009d44

080021d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	220f      	movs	r2, #15
 80021e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80021e4:	4b12      	ldr	r3, [pc, #72]	; (8002230 <HAL_RCC_GetClockConfig+0x5c>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f003 0203 	and.w	r2, r3, #3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80021f0:	4b0f      	ldr	r3, [pc, #60]	; (8002230 <HAL_RCC_GetClockConfig+0x5c>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80021fc:	4b0c      	ldr	r3, [pc, #48]	; (8002230 <HAL_RCC_GetClockConfig+0x5c>)
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002208:	4b09      	ldr	r3, [pc, #36]	; (8002230 <HAL_RCC_GetClockConfig+0x5c>)
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	08db      	lsrs	r3, r3, #3
 800220e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002216:	4b07      	ldr	r3, [pc, #28]	; (8002234 <HAL_RCC_GetClockConfig+0x60>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 020f 	and.w	r2, r3, #15
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	601a      	str	r2, [r3, #0]
}
 8002222:	bf00      	nop
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	40023800 	.word	0x40023800
 8002234:	40023c00 	.word	0x40023c00

08002238 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b088      	sub	sp, #32
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002240:	2300      	movs	r3, #0
 8002242:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002244:	2300      	movs	r3, #0
 8002246:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002248:	2300      	movs	r3, #0
 800224a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800224c:	2300      	movs	r3, #0
 800224e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002250:	2300      	movs	r3, #0
 8002252:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	2b00      	cmp	r3, #0
 800225e:	d012      	beq.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002260:	4b69      	ldr	r3, [pc, #420]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	4a68      	ldr	r2, [pc, #416]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002266:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800226a:	6093      	str	r3, [r2, #8]
 800226c:	4b66      	ldr	r3, [pc, #408]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800226e:	689a      	ldr	r2, [r3, #8]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002274:	4964      	ldr	r1, [pc, #400]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002276:	4313      	orrs	r3, r2
 8002278:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800227e:	2b00      	cmp	r3, #0
 8002280:	d101      	bne.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002282:	2301      	movs	r3, #1
 8002284:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d017      	beq.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002292:	4b5d      	ldr	r3, [pc, #372]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002294:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002298:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022a0:	4959      	ldr	r1, [pc, #356]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022b0:	d101      	bne.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80022b2:	2301      	movs	r3, #1
 80022b4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80022be:	2301      	movs	r3, #1
 80022c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d017      	beq.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80022ce:	4b4e      	ldr	r3, [pc, #312]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022dc:	494a      	ldr	r1, [pc, #296]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022ec:	d101      	bne.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80022ee:	2301      	movs	r3, #1
 80022f0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d101      	bne.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80022fa:	2301      	movs	r3, #1
 80022fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800230a:	2301      	movs	r3, #1
 800230c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0320 	and.w	r3, r3, #32
 8002316:	2b00      	cmp	r3, #0
 8002318:	f000 808b 	beq.w	8002432 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800231c:	4b3a      	ldr	r3, [pc, #232]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800231e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002320:	4a39      	ldr	r2, [pc, #228]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002322:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002326:	6413      	str	r3, [r2, #64]	; 0x40
 8002328:	4b37      	ldr	r3, [pc, #220]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800232a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002330:	60bb      	str	r3, [r7, #8]
 8002332:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002334:	4b35      	ldr	r3, [pc, #212]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a34      	ldr	r2, [pc, #208]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800233a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800233e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002340:	f7fe feb4 	bl	80010ac <HAL_GetTick>
 8002344:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002346:	e008      	b.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002348:	f7fe feb0 	bl	80010ac <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b64      	cmp	r3, #100	; 0x64
 8002354:	d901      	bls.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e38f      	b.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800235a:	4b2c      	ldr	r3, [pc, #176]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002362:	2b00      	cmp	r3, #0
 8002364:	d0f0      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002366:	4b28      	ldr	r3, [pc, #160]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800236a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800236e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d035      	beq.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	429a      	cmp	r2, r3
 8002382:	d02e      	beq.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002384:	4b20      	ldr	r3, [pc, #128]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002388:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800238c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800238e:	4b1e      	ldr	r3, [pc, #120]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002392:	4a1d      	ldr	r2, [pc, #116]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002398:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800239a:	4b1b      	ldr	r3, [pc, #108]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800239c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800239e:	4a1a      	ldr	r2, [pc, #104]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023a4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80023a6:	4a18      	ldr	r2, [pc, #96]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80023ac:	4b16      	ldr	r3, [pc, #88]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d114      	bne.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b8:	f7fe fe78 	bl	80010ac <HAL_GetTick>
 80023bc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023be:	e00a      	b.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023c0:	f7fe fe74 	bl	80010ac <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d901      	bls.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e351      	b.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023d6:	4b0c      	ldr	r3, [pc, #48]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d0ee      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80023ee:	d111      	bne.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80023f0:	4b05      	ldr	r3, [pc, #20]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023fc:	4b04      	ldr	r3, [pc, #16]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80023fe:	400b      	ands	r3, r1
 8002400:	4901      	ldr	r1, [pc, #4]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002402:	4313      	orrs	r3, r2
 8002404:	608b      	str	r3, [r1, #8]
 8002406:	e00b      	b.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002408:	40023800 	.word	0x40023800
 800240c:	40007000 	.word	0x40007000
 8002410:	0ffffcff 	.word	0x0ffffcff
 8002414:	4bb3      	ldr	r3, [pc, #716]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	4ab2      	ldr	r2, [pc, #712]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800241a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800241e:	6093      	str	r3, [r2, #8]
 8002420:	4bb0      	ldr	r3, [pc, #704]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002422:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002428:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800242c:	49ad      	ldr	r1, [pc, #692]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800242e:	4313      	orrs	r3, r2
 8002430:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0310 	and.w	r3, r3, #16
 800243a:	2b00      	cmp	r3, #0
 800243c:	d010      	beq.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800243e:	4ba9      	ldr	r3, [pc, #676]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002440:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002444:	4aa7      	ldr	r2, [pc, #668]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002446:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800244a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800244e:	4ba5      	ldr	r3, [pc, #660]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002450:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002458:	49a2      	ldr	r1, [pc, #648]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800245a:	4313      	orrs	r3, r2
 800245c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d00a      	beq.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800246c:	4b9d      	ldr	r3, [pc, #628]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800246e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002472:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800247a:	499a      	ldr	r1, [pc, #616]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800247c:	4313      	orrs	r3, r2
 800247e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d00a      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800248e:	4b95      	ldr	r3, [pc, #596]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002494:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800249c:	4991      	ldr	r1, [pc, #580]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d00a      	beq.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80024b0:	4b8c      	ldr	r3, [pc, #560]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024be:	4989      	ldr	r1, [pc, #548]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00a      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80024d2:	4b84      	ldr	r3, [pc, #528]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024d8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e0:	4980      	ldr	r1, [pc, #512]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d00a      	beq.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024f4:	4b7b      	ldr	r3, [pc, #492]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024fa:	f023 0203 	bic.w	r2, r3, #3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002502:	4978      	ldr	r1, [pc, #480]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002504:	4313      	orrs	r3, r2
 8002506:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00a      	beq.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002516:	4b73      	ldr	r3, [pc, #460]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800251c:	f023 020c 	bic.w	r2, r3, #12
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002524:	496f      	ldr	r1, [pc, #444]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002526:	4313      	orrs	r3, r2
 8002528:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00a      	beq.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002538:	4b6a      	ldr	r3, [pc, #424]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800253a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800253e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002546:	4967      	ldr	r1, [pc, #412]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002548:	4313      	orrs	r3, r2
 800254a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00a      	beq.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800255a:	4b62      	ldr	r3, [pc, #392]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800255c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002560:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002568:	495e      	ldr	r1, [pc, #376]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800256a:	4313      	orrs	r3, r2
 800256c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002578:	2b00      	cmp	r3, #0
 800257a:	d00a      	beq.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800257c:	4b59      	ldr	r3, [pc, #356]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800257e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002582:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800258a:	4956      	ldr	r1, [pc, #344]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800258c:	4313      	orrs	r3, r2
 800258e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00a      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800259e:	4b51      	ldr	r3, [pc, #324]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025a4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ac:	494d      	ldr	r1, [pc, #308]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d00a      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80025c0:	4b48      	ldr	r3, [pc, #288]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025c6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ce:	4945      	ldr	r1, [pc, #276]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00a      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80025e2:	4b40      	ldr	r3, [pc, #256]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025f0:	493c      	ldr	r1, [pc, #240]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d00a      	beq.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002604:	4b37      	ldr	r3, [pc, #220]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800260a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002612:	4934      	ldr	r1, [pc, #208]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002614:	4313      	orrs	r3, r2
 8002616:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d011      	beq.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002626:	4b2f      	ldr	r3, [pc, #188]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800262c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002634:	492b      	ldr	r1, [pc, #172]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002636:	4313      	orrs	r3, r2
 8002638:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002640:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002644:	d101      	bne.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002646:	2301      	movs	r3, #1
 8002648:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0308 	and.w	r3, r3, #8
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002656:	2301      	movs	r3, #1
 8002658:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00a      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002666:	4b1f      	ldr	r3, [pc, #124]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800266c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002674:	491b      	ldr	r1, [pc, #108]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002676:	4313      	orrs	r3, r2
 8002678:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d00b      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002688:	4b16      	ldr	r3, [pc, #88]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800268a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800268e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002698:	4912      	ldr	r1, [pc, #72]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800269a:	4313      	orrs	r3, r2
 800269c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d00b      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80026ac:	4b0d      	ldr	r3, [pc, #52]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026b2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026bc:	4909      	ldr	r1, [pc, #36]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d00f      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80026d0:	4b04      	ldr	r3, [pc, #16]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026d6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e0:	e002      	b.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80026e2:	bf00      	nop
 80026e4:	40023800 	.word	0x40023800
 80026e8:	4986      	ldr	r1, [pc, #536]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00b      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80026fc:	4b81      	ldr	r3, [pc, #516]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002702:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800270c:	497d      	ldr	r1, [pc, #500]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800270e:	4313      	orrs	r3, r2
 8002710:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d006      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002722:	2b00      	cmp	r3, #0
 8002724:	f000 80d6 	beq.w	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002728:	4b76      	ldr	r3, [pc, #472]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a75      	ldr	r2, [pc, #468]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800272e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002732:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002734:	f7fe fcba 	bl	80010ac <HAL_GetTick>
 8002738:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800273a:	e008      	b.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800273c:	f7fe fcb6 	bl	80010ac <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b64      	cmp	r3, #100	; 0x64
 8002748:	d901      	bls.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e195      	b.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800274e:	4b6d      	ldr	r3, [pc, #436]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d1f0      	bne.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	2b00      	cmp	r3, #0
 8002764:	d021      	beq.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800276a:	2b00      	cmp	r3, #0
 800276c:	d11d      	bne.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800276e:	4b65      	ldr	r3, [pc, #404]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002770:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002774:	0c1b      	lsrs	r3, r3, #16
 8002776:	f003 0303 	and.w	r3, r3, #3
 800277a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800277c:	4b61      	ldr	r3, [pc, #388]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800277e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002782:	0e1b      	lsrs	r3, r3, #24
 8002784:	f003 030f 	and.w	r3, r3, #15
 8002788:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	019a      	lsls	r2, r3, #6
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	041b      	lsls	r3, r3, #16
 8002794:	431a      	orrs	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	061b      	lsls	r3, r3, #24
 800279a:	431a      	orrs	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	071b      	lsls	r3, r3, #28
 80027a2:	4958      	ldr	r1, [pc, #352]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d004      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027be:	d00a      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d02e      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027d4:	d129      	bne.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80027d6:	4b4b      	ldr	r3, [pc, #300]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027dc:	0c1b      	lsrs	r3, r3, #16
 80027de:	f003 0303 	and.w	r3, r3, #3
 80027e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80027e4:	4b47      	ldr	r3, [pc, #284]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027ea:	0f1b      	lsrs	r3, r3, #28
 80027ec:	f003 0307 	and.w	r3, r3, #7
 80027f0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	019a      	lsls	r2, r3, #6
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	041b      	lsls	r3, r3, #16
 80027fc:	431a      	orrs	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	061b      	lsls	r3, r3, #24
 8002804:	431a      	orrs	r2, r3
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	071b      	lsls	r3, r3, #28
 800280a:	493e      	ldr	r1, [pc, #248]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800280c:	4313      	orrs	r3, r2
 800280e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002812:	4b3c      	ldr	r3, [pc, #240]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002814:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002818:	f023 021f 	bic.w	r2, r3, #31
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002820:	3b01      	subs	r3, #1
 8002822:	4938      	ldr	r1, [pc, #224]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002824:	4313      	orrs	r3, r2
 8002826:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d01d      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002836:	4b33      	ldr	r3, [pc, #204]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002838:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800283c:	0e1b      	lsrs	r3, r3, #24
 800283e:	f003 030f 	and.w	r3, r3, #15
 8002842:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002844:	4b2f      	ldr	r3, [pc, #188]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002846:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800284a:	0f1b      	lsrs	r3, r3, #28
 800284c:	f003 0307 	and.w	r3, r3, #7
 8002850:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	019a      	lsls	r2, r3, #6
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	041b      	lsls	r3, r3, #16
 800285e:	431a      	orrs	r2, r3
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	061b      	lsls	r3, r3, #24
 8002864:	431a      	orrs	r2, r3
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	071b      	lsls	r3, r3, #28
 800286a:	4926      	ldr	r1, [pc, #152]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800286c:	4313      	orrs	r3, r2
 800286e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d011      	beq.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	019a      	lsls	r2, r3, #6
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	041b      	lsls	r3, r3, #16
 800288a:	431a      	orrs	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	061b      	lsls	r3, r3, #24
 8002892:	431a      	orrs	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	071b      	lsls	r3, r3, #28
 800289a:	491a      	ldr	r1, [pc, #104]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800289c:	4313      	orrs	r3, r2
 800289e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80028a2:	4b18      	ldr	r3, [pc, #96]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a17      	ldr	r2, [pc, #92]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80028ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028ae:	f7fe fbfd 	bl	80010ac <HAL_GetTick>
 80028b2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80028b4:	e008      	b.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80028b6:	f7fe fbf9 	bl	80010ac <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	2b64      	cmp	r3, #100	; 0x64
 80028c2:	d901      	bls.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e0d8      	b.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80028c8:	4b0e      	ldr	r3, [pc, #56]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d0f0      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	f040 80ce 	bne.w	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80028dc:	4b09      	ldr	r3, [pc, #36]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a08      	ldr	r2, [pc, #32]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028e8:	f7fe fbe0 	bl	80010ac <HAL_GetTick>
 80028ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80028ee:	e00b      	b.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80028f0:	f7fe fbdc 	bl	80010ac <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b64      	cmp	r3, #100	; 0x64
 80028fc:	d904      	bls.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e0bb      	b.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002902:	bf00      	nop
 8002904:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002908:	4b5e      	ldr	r3, [pc, #376]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002910:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002914:	d0ec      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002926:	2b00      	cmp	r3, #0
 8002928:	d009      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002932:	2b00      	cmp	r3, #0
 8002934:	d02e      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	2b00      	cmp	r3, #0
 800293c:	d12a      	bne.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800293e:	4b51      	ldr	r3, [pc, #324]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002944:	0c1b      	lsrs	r3, r3, #16
 8002946:	f003 0303 	and.w	r3, r3, #3
 800294a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800294c:	4b4d      	ldr	r3, [pc, #308]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800294e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002952:	0f1b      	lsrs	r3, r3, #28
 8002954:	f003 0307 	and.w	r3, r3, #7
 8002958:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	019a      	lsls	r2, r3, #6
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	041b      	lsls	r3, r3, #16
 8002964:	431a      	orrs	r2, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	061b      	lsls	r3, r3, #24
 800296c:	431a      	orrs	r2, r3
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	071b      	lsls	r3, r3, #28
 8002972:	4944      	ldr	r1, [pc, #272]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002974:	4313      	orrs	r3, r2
 8002976:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800297a:	4b42      	ldr	r3, [pc, #264]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800297c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002980:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002988:	3b01      	subs	r3, #1
 800298a:	021b      	lsls	r3, r3, #8
 800298c:	493d      	ldr	r1, [pc, #244]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800298e:	4313      	orrs	r3, r2
 8002990:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d022      	beq.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029a8:	d11d      	bne.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80029aa:	4b36      	ldr	r3, [pc, #216]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80029ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b0:	0e1b      	lsrs	r3, r3, #24
 80029b2:	f003 030f 	and.w	r3, r3, #15
 80029b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80029b8:	4b32      	ldr	r3, [pc, #200]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80029ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029be:	0f1b      	lsrs	r3, r3, #28
 80029c0:	f003 0307 	and.w	r3, r3, #7
 80029c4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	695b      	ldr	r3, [r3, #20]
 80029ca:	019a      	lsls	r2, r3, #6
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	041b      	lsls	r3, r3, #16
 80029d2:	431a      	orrs	r2, r3
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	061b      	lsls	r3, r3, #24
 80029d8:	431a      	orrs	r2, r3
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	071b      	lsls	r3, r3, #28
 80029de:	4929      	ldr	r1, [pc, #164]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0308 	and.w	r3, r3, #8
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d028      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80029f2:	4b24      	ldr	r3, [pc, #144]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80029f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f8:	0e1b      	lsrs	r3, r3, #24
 80029fa:	f003 030f 	and.w	r3, r3, #15
 80029fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002a00:	4b20      	ldr	r3, [pc, #128]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a06:	0c1b      	lsrs	r3, r3, #16
 8002a08:	f003 0303 	and.w	r3, r3, #3
 8002a0c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	019a      	lsls	r2, r3, #6
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	041b      	lsls	r3, r3, #16
 8002a18:	431a      	orrs	r2, r3
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	061b      	lsls	r3, r3, #24
 8002a1e:	431a      	orrs	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	69db      	ldr	r3, [r3, #28]
 8002a24:	071b      	lsls	r3, r3, #28
 8002a26:	4917      	ldr	r1, [pc, #92]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002a2e:	4b15      	ldr	r3, [pc, #84]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3c:	4911      	ldr	r1, [pc, #68]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002a44:	4b0f      	ldr	r3, [pc, #60]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a0e      	ldr	r2, [pc, #56]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a50:	f7fe fb2c 	bl	80010ac <HAL_GetTick>
 8002a54:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002a56:	e008      	b.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002a58:	f7fe fb28 	bl	80010ac <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b64      	cmp	r3, #100	; 0x64
 8002a64:	d901      	bls.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e007      	b.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002a6a:	4b06      	ldr	r3, [pc, #24]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a76:	d1ef      	bne.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3720      	adds	r7, #32
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	40023800 	.word	0x40023800

08002a88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d101      	bne.n	8002a9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e049      	b.n	8002b2e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d106      	bne.n	8002ab4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f7fe f87e 	bl	8000bb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2202      	movs	r2, #2
 8002ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	3304      	adds	r3, #4
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	4610      	mov	r0, r2
 8002ac8:	f000 fa24 	bl	8002f14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
	...

08002b38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d001      	beq.n	8002b50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e054      	b.n	8002bfa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2202      	movs	r2, #2
 8002b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68da      	ldr	r2, [r3, #12]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f042 0201 	orr.w	r2, r2, #1
 8002b66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a26      	ldr	r2, [pc, #152]	; (8002c08 <HAL_TIM_Base_Start_IT+0xd0>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d022      	beq.n	8002bb8 <HAL_TIM_Base_Start_IT+0x80>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b7a:	d01d      	beq.n	8002bb8 <HAL_TIM_Base_Start_IT+0x80>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a22      	ldr	r2, [pc, #136]	; (8002c0c <HAL_TIM_Base_Start_IT+0xd4>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d018      	beq.n	8002bb8 <HAL_TIM_Base_Start_IT+0x80>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a21      	ldr	r2, [pc, #132]	; (8002c10 <HAL_TIM_Base_Start_IT+0xd8>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d013      	beq.n	8002bb8 <HAL_TIM_Base_Start_IT+0x80>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a1f      	ldr	r2, [pc, #124]	; (8002c14 <HAL_TIM_Base_Start_IT+0xdc>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d00e      	beq.n	8002bb8 <HAL_TIM_Base_Start_IT+0x80>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a1e      	ldr	r2, [pc, #120]	; (8002c18 <HAL_TIM_Base_Start_IT+0xe0>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d009      	beq.n	8002bb8 <HAL_TIM_Base_Start_IT+0x80>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a1c      	ldr	r2, [pc, #112]	; (8002c1c <HAL_TIM_Base_Start_IT+0xe4>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d004      	beq.n	8002bb8 <HAL_TIM_Base_Start_IT+0x80>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a1b      	ldr	r2, [pc, #108]	; (8002c20 <HAL_TIM_Base_Start_IT+0xe8>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d115      	bne.n	8002be4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	689a      	ldr	r2, [r3, #8]
 8002bbe:	4b19      	ldr	r3, [pc, #100]	; (8002c24 <HAL_TIM_Base_Start_IT+0xec>)
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2b06      	cmp	r3, #6
 8002bc8:	d015      	beq.n	8002bf6 <HAL_TIM_Base_Start_IT+0xbe>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bd0:	d011      	beq.n	8002bf6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f042 0201 	orr.w	r2, r2, #1
 8002be0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002be2:	e008      	b.n	8002bf6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f042 0201 	orr.w	r2, r2, #1
 8002bf2:	601a      	str	r2, [r3, #0]
 8002bf4:	e000      	b.n	8002bf8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bf6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3714      	adds	r7, #20
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	40010000 	.word	0x40010000
 8002c0c:	40000400 	.word	0x40000400
 8002c10:	40000800 	.word	0x40000800
 8002c14:	40000c00 	.word	0x40000c00
 8002c18:	40010400 	.word	0x40010400
 8002c1c:	40014000 	.word	0x40014000
 8002c20:	40001800 	.word	0x40001800
 8002c24:	00010007 	.word	0x00010007

08002c28 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68da      	ldr	r2, [r3, #12]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f022 0201 	bic.w	r2, r2, #1
 8002c3e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	6a1a      	ldr	r2, [r3, #32]
 8002c46:	f241 1311 	movw	r3, #4369	; 0x1111
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d10f      	bne.n	8002c70 <HAL_TIM_Base_Stop_IT+0x48>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	6a1a      	ldr	r2, [r3, #32]
 8002c56:	f240 4344 	movw	r3, #1092	; 0x444
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d107      	bne.n	8002c70 <HAL_TIM_Base_Stop_IT+0x48>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f022 0201 	bic.w	r2, r2, #1
 8002c6e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr

08002c86 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b082      	sub	sp, #8
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d122      	bne.n	8002ce2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d11b      	bne.n	8002ce2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f06f 0202 	mvn.w	r2, #2
 8002cb2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	f003 0303 	and.w	r3, r3, #3
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d003      	beq.n	8002cd0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f000 f905 	bl	8002ed8 <HAL_TIM_IC_CaptureCallback>
 8002cce:	e005      	b.n	8002cdc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f000 f8f7 	bl	8002ec4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 f908 	bl	8002eec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	691b      	ldr	r3, [r3, #16]
 8002ce8:	f003 0304 	and.w	r3, r3, #4
 8002cec:	2b04      	cmp	r3, #4
 8002cee:	d122      	bne.n	8002d36 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	f003 0304 	and.w	r3, r3, #4
 8002cfa:	2b04      	cmp	r3, #4
 8002cfc:	d11b      	bne.n	8002d36 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f06f 0204 	mvn.w	r2, #4
 8002d06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2202      	movs	r2, #2
 8002d0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d003      	beq.n	8002d24 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f000 f8db 	bl	8002ed8 <HAL_TIM_IC_CaptureCallback>
 8002d22:	e005      	b.n	8002d30 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f000 f8cd 	bl	8002ec4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 f8de 	bl	8002eec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	f003 0308 	and.w	r3, r3, #8
 8002d40:	2b08      	cmp	r3, #8
 8002d42:	d122      	bne.n	8002d8a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	f003 0308 	and.w	r3, r3, #8
 8002d4e:	2b08      	cmp	r3, #8
 8002d50:	d11b      	bne.n	8002d8a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f06f 0208 	mvn.w	r2, #8
 8002d5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2204      	movs	r2, #4
 8002d60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	69db      	ldr	r3, [r3, #28]
 8002d68:	f003 0303 	and.w	r3, r3, #3
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d003      	beq.n	8002d78 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f000 f8b1 	bl	8002ed8 <HAL_TIM_IC_CaptureCallback>
 8002d76:	e005      	b.n	8002d84 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f000 f8a3 	bl	8002ec4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f000 f8b4 	bl	8002eec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	691b      	ldr	r3, [r3, #16]
 8002d90:	f003 0310 	and.w	r3, r3, #16
 8002d94:	2b10      	cmp	r3, #16
 8002d96:	d122      	bne.n	8002dde <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	f003 0310 	and.w	r3, r3, #16
 8002da2:	2b10      	cmp	r3, #16
 8002da4:	d11b      	bne.n	8002dde <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f06f 0210 	mvn.w	r2, #16
 8002dae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2208      	movs	r2, #8
 8002db4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	69db      	ldr	r3, [r3, #28]
 8002dbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d003      	beq.n	8002dcc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f000 f887 	bl	8002ed8 <HAL_TIM_IC_CaptureCallback>
 8002dca:	e005      	b.n	8002dd8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f000 f879 	bl	8002ec4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 f88a 	bl	8002eec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	f003 0301 	and.w	r3, r3, #1
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d10e      	bne.n	8002e0a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d107      	bne.n	8002e0a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f06f 0201 	mvn.w	r2, #1
 8002e02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f7fd fe93 	bl	8000b30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e14:	2b80      	cmp	r3, #128	; 0x80
 8002e16:	d10e      	bne.n	8002e36 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e22:	2b80      	cmp	r3, #128	; 0x80
 8002e24:	d107      	bne.n	8002e36 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f000 f9a7 	bl	8003184 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e44:	d10e      	bne.n	8002e64 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e50:	2b80      	cmp	r3, #128	; 0x80
 8002e52:	d107      	bne.n	8002e64 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002e5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 f99a 	bl	8003198 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e6e:	2b40      	cmp	r3, #64	; 0x40
 8002e70:	d10e      	bne.n	8002e90 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e7c:	2b40      	cmp	r3, #64	; 0x40
 8002e7e:	d107      	bne.n	8002e90 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 f838 	bl	8002f00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	f003 0320 	and.w	r3, r3, #32
 8002e9a:	2b20      	cmp	r3, #32
 8002e9c:	d10e      	bne.n	8002ebc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	f003 0320 	and.w	r3, r3, #32
 8002ea8:	2b20      	cmp	r3, #32
 8002eaa:	d107      	bne.n	8002ebc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f06f 0220 	mvn.w	r2, #32
 8002eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 f95a 	bl	8003170 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ebc:	bf00      	nop
 8002ebe:	3708      	adds	r7, #8
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ecc:	bf00      	nop
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ee0:	bf00      	nop
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ef4:	bf00      	nop
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f08:	bf00      	nop
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b085      	sub	sp, #20
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a40      	ldr	r2, [pc, #256]	; (8003028 <TIM_Base_SetConfig+0x114>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d013      	beq.n	8002f54 <TIM_Base_SetConfig+0x40>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f32:	d00f      	beq.n	8002f54 <TIM_Base_SetConfig+0x40>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4a3d      	ldr	r2, [pc, #244]	; (800302c <TIM_Base_SetConfig+0x118>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d00b      	beq.n	8002f54 <TIM_Base_SetConfig+0x40>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a3c      	ldr	r2, [pc, #240]	; (8003030 <TIM_Base_SetConfig+0x11c>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d007      	beq.n	8002f54 <TIM_Base_SetConfig+0x40>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a3b      	ldr	r2, [pc, #236]	; (8003034 <TIM_Base_SetConfig+0x120>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d003      	beq.n	8002f54 <TIM_Base_SetConfig+0x40>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a3a      	ldr	r2, [pc, #232]	; (8003038 <TIM_Base_SetConfig+0x124>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d108      	bne.n	8002f66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a2f      	ldr	r2, [pc, #188]	; (8003028 <TIM_Base_SetConfig+0x114>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d02b      	beq.n	8002fc6 <TIM_Base_SetConfig+0xb2>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f74:	d027      	beq.n	8002fc6 <TIM_Base_SetConfig+0xb2>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a2c      	ldr	r2, [pc, #176]	; (800302c <TIM_Base_SetConfig+0x118>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d023      	beq.n	8002fc6 <TIM_Base_SetConfig+0xb2>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a2b      	ldr	r2, [pc, #172]	; (8003030 <TIM_Base_SetConfig+0x11c>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d01f      	beq.n	8002fc6 <TIM_Base_SetConfig+0xb2>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a2a      	ldr	r2, [pc, #168]	; (8003034 <TIM_Base_SetConfig+0x120>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d01b      	beq.n	8002fc6 <TIM_Base_SetConfig+0xb2>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a29      	ldr	r2, [pc, #164]	; (8003038 <TIM_Base_SetConfig+0x124>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d017      	beq.n	8002fc6 <TIM_Base_SetConfig+0xb2>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a28      	ldr	r2, [pc, #160]	; (800303c <TIM_Base_SetConfig+0x128>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d013      	beq.n	8002fc6 <TIM_Base_SetConfig+0xb2>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a27      	ldr	r2, [pc, #156]	; (8003040 <TIM_Base_SetConfig+0x12c>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d00f      	beq.n	8002fc6 <TIM_Base_SetConfig+0xb2>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a26      	ldr	r2, [pc, #152]	; (8003044 <TIM_Base_SetConfig+0x130>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d00b      	beq.n	8002fc6 <TIM_Base_SetConfig+0xb2>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a25      	ldr	r2, [pc, #148]	; (8003048 <TIM_Base_SetConfig+0x134>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d007      	beq.n	8002fc6 <TIM_Base_SetConfig+0xb2>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a24      	ldr	r2, [pc, #144]	; (800304c <TIM_Base_SetConfig+0x138>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d003      	beq.n	8002fc6 <TIM_Base_SetConfig+0xb2>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a23      	ldr	r2, [pc, #140]	; (8003050 <TIM_Base_SetConfig+0x13c>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d108      	bne.n	8002fd8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	689a      	ldr	r2, [r3, #8]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4a0a      	ldr	r2, [pc, #40]	; (8003028 <TIM_Base_SetConfig+0x114>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d003      	beq.n	800300c <TIM_Base_SetConfig+0xf8>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	4a0c      	ldr	r2, [pc, #48]	; (8003038 <TIM_Base_SetConfig+0x124>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d103      	bne.n	8003014 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	691a      	ldr	r2, [r3, #16]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	615a      	str	r2, [r3, #20]
}
 800301a:	bf00      	nop
 800301c:	3714      	adds	r7, #20
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	40010000 	.word	0x40010000
 800302c:	40000400 	.word	0x40000400
 8003030:	40000800 	.word	0x40000800
 8003034:	40000c00 	.word	0x40000c00
 8003038:	40010400 	.word	0x40010400
 800303c:	40014000 	.word	0x40014000
 8003040:	40014400 	.word	0x40014400
 8003044:	40014800 	.word	0x40014800
 8003048:	40001800 	.word	0x40001800
 800304c:	40001c00 	.word	0x40001c00
 8003050:	40002000 	.word	0x40002000

08003054 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003054:	b480      	push	{r7}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003064:	2b01      	cmp	r3, #1
 8003066:	d101      	bne.n	800306c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003068:	2302      	movs	r3, #2
 800306a:	e06d      	b.n	8003148 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2202      	movs	r2, #2
 8003078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a30      	ldr	r2, [pc, #192]	; (8003154 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d004      	beq.n	80030a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a2f      	ldr	r2, [pc, #188]	; (8003158 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d108      	bne.n	80030b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80030a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030b8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a20      	ldr	r2, [pc, #128]	; (8003154 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d022      	beq.n	800311c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030de:	d01d      	beq.n	800311c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a1d      	ldr	r2, [pc, #116]	; (800315c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d018      	beq.n	800311c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a1c      	ldr	r2, [pc, #112]	; (8003160 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d013      	beq.n	800311c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a1a      	ldr	r2, [pc, #104]	; (8003164 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d00e      	beq.n	800311c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a15      	ldr	r2, [pc, #84]	; (8003158 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d009      	beq.n	800311c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a16      	ldr	r2, [pc, #88]	; (8003168 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d004      	beq.n	800311c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a15      	ldr	r2, [pc, #84]	; (800316c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d10c      	bne.n	8003136 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003122:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	68ba      	ldr	r2, [r7, #8]
 800312a:	4313      	orrs	r3, r2
 800312c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68ba      	ldr	r2, [r7, #8]
 8003134:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3714      	adds	r7, #20
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr
 8003154:	40010000 	.word	0x40010000
 8003158:	40010400 	.word	0x40010400
 800315c:	40000400 	.word	0x40000400
 8003160:	40000800 	.word	0x40000800
 8003164:	40000c00 	.word	0x40000c00
 8003168:	40014000 	.word	0x40014000
 800316c:	40001800 	.word	0x40001800

08003170 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800318c:	bf00      	nop
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e040      	b.n	8003240 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d106      	bne.n	80031d4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f7fd fd30 	bl	8000c34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2224      	movs	r2, #36	; 0x24
 80031d8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f022 0201 	bic.w	r2, r2, #1
 80031e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 fa56 	bl	800369c <UART_SetConfig>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d101      	bne.n	80031fa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e022      	b.n	8003240 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d002      	beq.n	8003208 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 fcac 	bl	8003b60 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	685a      	ldr	r2, [r3, #4]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003216:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	689a      	ldr	r2, [r3, #8]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003226:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f042 0201 	orr.w	r2, r2, #1
 8003236:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f000 fd33 	bl	8003ca4 <UART_CheckIdleState>
 800323e:	4603      	mov	r3, r0
}
 8003240:	4618      	mov	r0, r3
 8003242:	3708      	adds	r7, #8
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b088      	sub	sp, #32
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	69db      	ldr	r3, [r3, #28]
 8003256:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003268:	69fa      	ldr	r2, [r7, #28]
 800326a:	f640 030f 	movw	r3, #2063	; 0x80f
 800326e:	4013      	ands	r3, r2
 8003270:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d113      	bne.n	80032a0 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	f003 0320 	and.w	r3, r3, #32
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00e      	beq.n	80032a0 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	f003 0320 	and.w	r3, r3, #32
 8003288:	2b00      	cmp	r3, #0
 800328a:	d009      	beq.n	80032a0 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003290:	2b00      	cmp	r3, #0
 8003292:	f000 81cc 	beq.w	800362e <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	4798      	blx	r3
      }
      return;
 800329e:	e1c6      	b.n	800362e <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f000 80e3 	beq.w	800346e <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d105      	bne.n	80032be <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	4ba5      	ldr	r3, [pc, #660]	; (800354c <HAL_UART_IRQHandler+0x304>)
 80032b6:	4013      	ands	r3, r2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	f000 80d8 	beq.w	800346e <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	f003 0301 	and.w	r3, r3, #1
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d010      	beq.n	80032ea <HAL_UART_IRQHandler+0xa2>
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00b      	beq.n	80032ea <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2201      	movs	r2, #1
 80032d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032e0:	f043 0201 	orr.w	r2, r3, #1
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	f003 0302 	and.w	r3, r3, #2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d010      	beq.n	8003316 <HAL_UART_IRQHandler+0xce>
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d00b      	beq.n	8003316 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2202      	movs	r2, #2
 8003304:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800330c:	f043 0204 	orr.w	r2, r3, #4
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	f003 0304 	and.w	r3, r3, #4
 800331c:	2b00      	cmp	r3, #0
 800331e:	d010      	beq.n	8003342 <HAL_UART_IRQHandler+0xfa>
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00b      	beq.n	8003342 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2204      	movs	r2, #4
 8003330:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003338:	f043 0202 	orr.w	r2, r3, #2
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	f003 0308 	and.w	r3, r3, #8
 8003348:	2b00      	cmp	r3, #0
 800334a:	d015      	beq.n	8003378 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	f003 0320 	and.w	r3, r3, #32
 8003352:	2b00      	cmp	r3, #0
 8003354:	d104      	bne.n	8003360 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00b      	beq.n	8003378 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2208      	movs	r2, #8
 8003366:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800336e:	f043 0208 	orr.w	r2, r3, #8
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800337e:	2b00      	cmp	r3, #0
 8003380:	d011      	beq.n	80033a6 <HAL_UART_IRQHandler+0x15e>
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00c      	beq.n	80033a6 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003394:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800339c:	f043 0220 	orr.w	r2, r3, #32
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	f000 8140 	beq.w	8003632 <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	f003 0320 	and.w	r3, r3, #32
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00c      	beq.n	80033d6 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	f003 0320 	and.w	r3, r3, #32
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d007      	beq.n	80033d6 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d003      	beq.n	80033d6 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033dc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033e8:	2b40      	cmp	r3, #64	; 0x40
 80033ea:	d004      	beq.n	80033f6 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d031      	beq.n	800345a <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 fd19 	bl	8003e2e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003406:	2b40      	cmp	r3, #64	; 0x40
 8003408:	d123      	bne.n	8003452 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	689a      	ldr	r2, [r3, #8]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003418:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800341e:	2b00      	cmp	r3, #0
 8003420:	d013      	beq.n	800344a <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003426:	4a4a      	ldr	r2, [pc, #296]	; (8003550 <HAL_UART_IRQHandler+0x308>)
 8003428:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342e:	4618      	mov	r0, r3
 8003430:	f7fd ffbe 	bl	80013b0 <HAL_DMA_Abort_IT>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d017      	beq.n	800346a <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800343e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003444:	4610      	mov	r0, r2
 8003446:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003448:	e00f      	b.n	800346a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 f906 	bl	800365c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003450:	e00b      	b.n	800346a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 f902 	bl	800365c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003458:	e007      	b.n	800346a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 f8fe 	bl	800365c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003468:	e0e3      	b.n	8003632 <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800346a:	bf00      	nop
    return;
 800346c:	e0e1      	b.n	8003632 <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003472:	2b01      	cmp	r3, #1
 8003474:	f040 80a7 	bne.w	80035c6 <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	f003 0310 	and.w	r3, r3, #16
 800347e:	2b00      	cmp	r3, #0
 8003480:	f000 80a1 	beq.w	80035c6 <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	f003 0310 	and.w	r3, r3, #16
 800348a:	2b00      	cmp	r3, #0
 800348c:	f000 809b 	beq.w	80035c6 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2210      	movs	r2, #16
 8003496:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a2:	2b40      	cmp	r3, #64	; 0x40
 80034a4:	d156      	bne.n	8003554 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 80034b0:	893b      	ldrh	r3, [r7, #8]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f000 80bf 	beq.w	8003636 <HAL_UART_IRQHandler+0x3ee>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80034be:	893a      	ldrh	r2, [r7, #8]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	f080 80b8 	bcs.w	8003636 <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	893a      	ldrh	r2, [r7, #8]
 80034ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d2:	69db      	ldr	r3, [r3, #28]
 80034d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034d8:	d02a      	beq.n	8003530 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034e8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	689a      	ldr	r2, [r3, #8]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f022 0201 	bic.w	r2, r2, #1
 80034f8:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	689a      	ldr	r2, [r3, #8]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003508:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2220      	movs	r2, #32
 800350e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f022 0210 	bic.w	r2, r2, #16
 8003524:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800352a:	4618      	mov	r0, r3
 800352c:	f7fd fed0 	bl	80012d0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800353c:	b29b      	uxth	r3, r3
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	b29b      	uxth	r3, r3
 8003542:	4619      	mov	r1, r3
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f000 f893 	bl	8003670 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800354a:	e074      	b.n	8003636 <HAL_UART_IRQHandler+0x3ee>
 800354c:	04000120 	.word	0x04000120
 8003550:	08003e8d 	.word	0x08003e8d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003560:	b29b      	uxth	r3, r3
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800356c:	b29b      	uxth	r3, r3
 800356e:	2b00      	cmp	r3, #0
 8003570:	d063      	beq.n	800363a <HAL_UART_IRQHandler+0x3f2>
          && (nb_rx_data > 0U))
 8003572:	897b      	ldrh	r3, [r7, #10]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d060      	beq.n	800363a <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003586:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	689a      	ldr	r2, [r3, #8]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f022 0201 	bic.w	r2, r2, #1
 8003596:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2220      	movs	r2, #32
 800359c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f022 0210 	bic.w	r2, r2, #16
 80035b8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80035ba:	897b      	ldrh	r3, [r7, #10]
 80035bc:	4619      	mov	r1, r3
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f856 	bl	8003670 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80035c4:	e039      	b.n	800363a <HAL_UART_IRQHandler+0x3f2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00d      	beq.n	80035ec <HAL_UART_IRQHandler+0x3a4>
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d008      	beq.n	80035ec <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80035e2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 f84f 	bl	8003688 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80035ea:	e029      	b.n	8003640 <HAL_UART_IRQHandler+0x3f8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00d      	beq.n	8003612 <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d008      	beq.n	8003612 <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003604:	2b00      	cmp	r3, #0
 8003606:	d01a      	beq.n	800363e <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	4798      	blx	r3
    }
    return;
 8003610:	e015      	b.n	800363e <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003618:	2b00      	cmp	r3, #0
 800361a:	d011      	beq.n	8003640 <HAL_UART_IRQHandler+0x3f8>
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00c      	beq.n	8003640 <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 fc46 	bl	8003eb8 <UART_EndTransmit_IT>
    return;
 800362c:	e008      	b.n	8003640 <HAL_UART_IRQHandler+0x3f8>
      return;
 800362e:	bf00      	nop
 8003630:	e006      	b.n	8003640 <HAL_UART_IRQHandler+0x3f8>
    return;
 8003632:	bf00      	nop
 8003634:	e004      	b.n	8003640 <HAL_UART_IRQHandler+0x3f8>
      return;
 8003636:	bf00      	nop
 8003638:	e002      	b.n	8003640 <HAL_UART_IRQHandler+0x3f8>
      return;
 800363a:	bf00      	nop
 800363c:	e000      	b.n	8003640 <HAL_UART_IRQHandler+0x3f8>
    return;
 800363e:	bf00      	nop
  }

}
 8003640:	3720      	adds	r7, #32
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop

08003648 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003664:	bf00      	nop
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	460b      	mov	r3, r1
 800367a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800367c:	bf00      	nop
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003690:	bf00      	nop
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b088      	sub	sp, #32
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80036a4:	2300      	movs	r3, #0
 80036a6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689a      	ldr	r2, [r3, #8]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	431a      	orrs	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	431a      	orrs	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	69db      	ldr	r3, [r3, #28]
 80036bc:	4313      	orrs	r3, r2
 80036be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	4ba7      	ldr	r3, [pc, #668]	; (8003964 <UART_SetConfig+0x2c8>)
 80036c8:	4013      	ands	r3, r2
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	6812      	ldr	r2, [r2, #0]
 80036ce:	6979      	ldr	r1, [r7, #20]
 80036d0:	430b      	orrs	r3, r1
 80036d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	68da      	ldr	r2, [r3, #12]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	430a      	orrs	r2, r1
 80036e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a1b      	ldr	r3, [r3, #32]
 80036f4:	697a      	ldr	r2, [r7, #20]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	697a      	ldr	r2, [r7, #20]
 800370a:	430a      	orrs	r2, r1
 800370c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a95      	ldr	r2, [pc, #596]	; (8003968 <UART_SetConfig+0x2cc>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d120      	bne.n	800375a <UART_SetConfig+0xbe>
 8003718:	4b94      	ldr	r3, [pc, #592]	; (800396c <UART_SetConfig+0x2d0>)
 800371a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800371e:	f003 0303 	and.w	r3, r3, #3
 8003722:	2b03      	cmp	r3, #3
 8003724:	d816      	bhi.n	8003754 <UART_SetConfig+0xb8>
 8003726:	a201      	add	r2, pc, #4	; (adr r2, 800372c <UART_SetConfig+0x90>)
 8003728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800372c:	0800373d 	.word	0x0800373d
 8003730:	08003749 	.word	0x08003749
 8003734:	08003743 	.word	0x08003743
 8003738:	0800374f 	.word	0x0800374f
 800373c:	2301      	movs	r3, #1
 800373e:	77fb      	strb	r3, [r7, #31]
 8003740:	e14f      	b.n	80039e2 <UART_SetConfig+0x346>
 8003742:	2302      	movs	r3, #2
 8003744:	77fb      	strb	r3, [r7, #31]
 8003746:	e14c      	b.n	80039e2 <UART_SetConfig+0x346>
 8003748:	2304      	movs	r3, #4
 800374a:	77fb      	strb	r3, [r7, #31]
 800374c:	e149      	b.n	80039e2 <UART_SetConfig+0x346>
 800374e:	2308      	movs	r3, #8
 8003750:	77fb      	strb	r3, [r7, #31]
 8003752:	e146      	b.n	80039e2 <UART_SetConfig+0x346>
 8003754:	2310      	movs	r3, #16
 8003756:	77fb      	strb	r3, [r7, #31]
 8003758:	e143      	b.n	80039e2 <UART_SetConfig+0x346>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a84      	ldr	r2, [pc, #528]	; (8003970 <UART_SetConfig+0x2d4>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d132      	bne.n	80037ca <UART_SetConfig+0x12e>
 8003764:	4b81      	ldr	r3, [pc, #516]	; (800396c <UART_SetConfig+0x2d0>)
 8003766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800376a:	f003 030c 	and.w	r3, r3, #12
 800376e:	2b0c      	cmp	r3, #12
 8003770:	d828      	bhi.n	80037c4 <UART_SetConfig+0x128>
 8003772:	a201      	add	r2, pc, #4	; (adr r2, 8003778 <UART_SetConfig+0xdc>)
 8003774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003778:	080037ad 	.word	0x080037ad
 800377c:	080037c5 	.word	0x080037c5
 8003780:	080037c5 	.word	0x080037c5
 8003784:	080037c5 	.word	0x080037c5
 8003788:	080037b9 	.word	0x080037b9
 800378c:	080037c5 	.word	0x080037c5
 8003790:	080037c5 	.word	0x080037c5
 8003794:	080037c5 	.word	0x080037c5
 8003798:	080037b3 	.word	0x080037b3
 800379c:	080037c5 	.word	0x080037c5
 80037a0:	080037c5 	.word	0x080037c5
 80037a4:	080037c5 	.word	0x080037c5
 80037a8:	080037bf 	.word	0x080037bf
 80037ac:	2300      	movs	r3, #0
 80037ae:	77fb      	strb	r3, [r7, #31]
 80037b0:	e117      	b.n	80039e2 <UART_SetConfig+0x346>
 80037b2:	2302      	movs	r3, #2
 80037b4:	77fb      	strb	r3, [r7, #31]
 80037b6:	e114      	b.n	80039e2 <UART_SetConfig+0x346>
 80037b8:	2304      	movs	r3, #4
 80037ba:	77fb      	strb	r3, [r7, #31]
 80037bc:	e111      	b.n	80039e2 <UART_SetConfig+0x346>
 80037be:	2308      	movs	r3, #8
 80037c0:	77fb      	strb	r3, [r7, #31]
 80037c2:	e10e      	b.n	80039e2 <UART_SetConfig+0x346>
 80037c4:	2310      	movs	r3, #16
 80037c6:	77fb      	strb	r3, [r7, #31]
 80037c8:	e10b      	b.n	80039e2 <UART_SetConfig+0x346>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a69      	ldr	r2, [pc, #420]	; (8003974 <UART_SetConfig+0x2d8>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d120      	bne.n	8003816 <UART_SetConfig+0x17a>
 80037d4:	4b65      	ldr	r3, [pc, #404]	; (800396c <UART_SetConfig+0x2d0>)
 80037d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037da:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80037de:	2b30      	cmp	r3, #48	; 0x30
 80037e0:	d013      	beq.n	800380a <UART_SetConfig+0x16e>
 80037e2:	2b30      	cmp	r3, #48	; 0x30
 80037e4:	d814      	bhi.n	8003810 <UART_SetConfig+0x174>
 80037e6:	2b20      	cmp	r3, #32
 80037e8:	d009      	beq.n	80037fe <UART_SetConfig+0x162>
 80037ea:	2b20      	cmp	r3, #32
 80037ec:	d810      	bhi.n	8003810 <UART_SetConfig+0x174>
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d002      	beq.n	80037f8 <UART_SetConfig+0x15c>
 80037f2:	2b10      	cmp	r3, #16
 80037f4:	d006      	beq.n	8003804 <UART_SetConfig+0x168>
 80037f6:	e00b      	b.n	8003810 <UART_SetConfig+0x174>
 80037f8:	2300      	movs	r3, #0
 80037fa:	77fb      	strb	r3, [r7, #31]
 80037fc:	e0f1      	b.n	80039e2 <UART_SetConfig+0x346>
 80037fe:	2302      	movs	r3, #2
 8003800:	77fb      	strb	r3, [r7, #31]
 8003802:	e0ee      	b.n	80039e2 <UART_SetConfig+0x346>
 8003804:	2304      	movs	r3, #4
 8003806:	77fb      	strb	r3, [r7, #31]
 8003808:	e0eb      	b.n	80039e2 <UART_SetConfig+0x346>
 800380a:	2308      	movs	r3, #8
 800380c:	77fb      	strb	r3, [r7, #31]
 800380e:	e0e8      	b.n	80039e2 <UART_SetConfig+0x346>
 8003810:	2310      	movs	r3, #16
 8003812:	77fb      	strb	r3, [r7, #31]
 8003814:	e0e5      	b.n	80039e2 <UART_SetConfig+0x346>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a57      	ldr	r2, [pc, #348]	; (8003978 <UART_SetConfig+0x2dc>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d120      	bne.n	8003862 <UART_SetConfig+0x1c6>
 8003820:	4b52      	ldr	r3, [pc, #328]	; (800396c <UART_SetConfig+0x2d0>)
 8003822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003826:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800382a:	2bc0      	cmp	r3, #192	; 0xc0
 800382c:	d013      	beq.n	8003856 <UART_SetConfig+0x1ba>
 800382e:	2bc0      	cmp	r3, #192	; 0xc0
 8003830:	d814      	bhi.n	800385c <UART_SetConfig+0x1c0>
 8003832:	2b80      	cmp	r3, #128	; 0x80
 8003834:	d009      	beq.n	800384a <UART_SetConfig+0x1ae>
 8003836:	2b80      	cmp	r3, #128	; 0x80
 8003838:	d810      	bhi.n	800385c <UART_SetConfig+0x1c0>
 800383a:	2b00      	cmp	r3, #0
 800383c:	d002      	beq.n	8003844 <UART_SetConfig+0x1a8>
 800383e:	2b40      	cmp	r3, #64	; 0x40
 8003840:	d006      	beq.n	8003850 <UART_SetConfig+0x1b4>
 8003842:	e00b      	b.n	800385c <UART_SetConfig+0x1c0>
 8003844:	2300      	movs	r3, #0
 8003846:	77fb      	strb	r3, [r7, #31]
 8003848:	e0cb      	b.n	80039e2 <UART_SetConfig+0x346>
 800384a:	2302      	movs	r3, #2
 800384c:	77fb      	strb	r3, [r7, #31]
 800384e:	e0c8      	b.n	80039e2 <UART_SetConfig+0x346>
 8003850:	2304      	movs	r3, #4
 8003852:	77fb      	strb	r3, [r7, #31]
 8003854:	e0c5      	b.n	80039e2 <UART_SetConfig+0x346>
 8003856:	2308      	movs	r3, #8
 8003858:	77fb      	strb	r3, [r7, #31]
 800385a:	e0c2      	b.n	80039e2 <UART_SetConfig+0x346>
 800385c:	2310      	movs	r3, #16
 800385e:	77fb      	strb	r3, [r7, #31]
 8003860:	e0bf      	b.n	80039e2 <UART_SetConfig+0x346>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a45      	ldr	r2, [pc, #276]	; (800397c <UART_SetConfig+0x2e0>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d125      	bne.n	80038b8 <UART_SetConfig+0x21c>
 800386c:	4b3f      	ldr	r3, [pc, #252]	; (800396c <UART_SetConfig+0x2d0>)
 800386e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003872:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003876:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800387a:	d017      	beq.n	80038ac <UART_SetConfig+0x210>
 800387c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003880:	d817      	bhi.n	80038b2 <UART_SetConfig+0x216>
 8003882:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003886:	d00b      	beq.n	80038a0 <UART_SetConfig+0x204>
 8003888:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800388c:	d811      	bhi.n	80038b2 <UART_SetConfig+0x216>
 800388e:	2b00      	cmp	r3, #0
 8003890:	d003      	beq.n	800389a <UART_SetConfig+0x1fe>
 8003892:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003896:	d006      	beq.n	80038a6 <UART_SetConfig+0x20a>
 8003898:	e00b      	b.n	80038b2 <UART_SetConfig+0x216>
 800389a:	2300      	movs	r3, #0
 800389c:	77fb      	strb	r3, [r7, #31]
 800389e:	e0a0      	b.n	80039e2 <UART_SetConfig+0x346>
 80038a0:	2302      	movs	r3, #2
 80038a2:	77fb      	strb	r3, [r7, #31]
 80038a4:	e09d      	b.n	80039e2 <UART_SetConfig+0x346>
 80038a6:	2304      	movs	r3, #4
 80038a8:	77fb      	strb	r3, [r7, #31]
 80038aa:	e09a      	b.n	80039e2 <UART_SetConfig+0x346>
 80038ac:	2308      	movs	r3, #8
 80038ae:	77fb      	strb	r3, [r7, #31]
 80038b0:	e097      	b.n	80039e2 <UART_SetConfig+0x346>
 80038b2:	2310      	movs	r3, #16
 80038b4:	77fb      	strb	r3, [r7, #31]
 80038b6:	e094      	b.n	80039e2 <UART_SetConfig+0x346>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a30      	ldr	r2, [pc, #192]	; (8003980 <UART_SetConfig+0x2e4>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d125      	bne.n	800390e <UART_SetConfig+0x272>
 80038c2:	4b2a      	ldr	r3, [pc, #168]	; (800396c <UART_SetConfig+0x2d0>)
 80038c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80038cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80038d0:	d017      	beq.n	8003902 <UART_SetConfig+0x266>
 80038d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80038d6:	d817      	bhi.n	8003908 <UART_SetConfig+0x26c>
 80038d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038dc:	d00b      	beq.n	80038f6 <UART_SetConfig+0x25a>
 80038de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038e2:	d811      	bhi.n	8003908 <UART_SetConfig+0x26c>
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d003      	beq.n	80038f0 <UART_SetConfig+0x254>
 80038e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038ec:	d006      	beq.n	80038fc <UART_SetConfig+0x260>
 80038ee:	e00b      	b.n	8003908 <UART_SetConfig+0x26c>
 80038f0:	2301      	movs	r3, #1
 80038f2:	77fb      	strb	r3, [r7, #31]
 80038f4:	e075      	b.n	80039e2 <UART_SetConfig+0x346>
 80038f6:	2302      	movs	r3, #2
 80038f8:	77fb      	strb	r3, [r7, #31]
 80038fa:	e072      	b.n	80039e2 <UART_SetConfig+0x346>
 80038fc:	2304      	movs	r3, #4
 80038fe:	77fb      	strb	r3, [r7, #31]
 8003900:	e06f      	b.n	80039e2 <UART_SetConfig+0x346>
 8003902:	2308      	movs	r3, #8
 8003904:	77fb      	strb	r3, [r7, #31]
 8003906:	e06c      	b.n	80039e2 <UART_SetConfig+0x346>
 8003908:	2310      	movs	r3, #16
 800390a:	77fb      	strb	r3, [r7, #31]
 800390c:	e069      	b.n	80039e2 <UART_SetConfig+0x346>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a1c      	ldr	r2, [pc, #112]	; (8003984 <UART_SetConfig+0x2e8>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d137      	bne.n	8003988 <UART_SetConfig+0x2ec>
 8003918:	4b14      	ldr	r3, [pc, #80]	; (800396c <UART_SetConfig+0x2d0>)
 800391a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800391e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003922:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003926:	d017      	beq.n	8003958 <UART_SetConfig+0x2bc>
 8003928:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800392c:	d817      	bhi.n	800395e <UART_SetConfig+0x2c2>
 800392e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003932:	d00b      	beq.n	800394c <UART_SetConfig+0x2b0>
 8003934:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003938:	d811      	bhi.n	800395e <UART_SetConfig+0x2c2>
 800393a:	2b00      	cmp	r3, #0
 800393c:	d003      	beq.n	8003946 <UART_SetConfig+0x2aa>
 800393e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003942:	d006      	beq.n	8003952 <UART_SetConfig+0x2b6>
 8003944:	e00b      	b.n	800395e <UART_SetConfig+0x2c2>
 8003946:	2300      	movs	r3, #0
 8003948:	77fb      	strb	r3, [r7, #31]
 800394a:	e04a      	b.n	80039e2 <UART_SetConfig+0x346>
 800394c:	2302      	movs	r3, #2
 800394e:	77fb      	strb	r3, [r7, #31]
 8003950:	e047      	b.n	80039e2 <UART_SetConfig+0x346>
 8003952:	2304      	movs	r3, #4
 8003954:	77fb      	strb	r3, [r7, #31]
 8003956:	e044      	b.n	80039e2 <UART_SetConfig+0x346>
 8003958:	2308      	movs	r3, #8
 800395a:	77fb      	strb	r3, [r7, #31]
 800395c:	e041      	b.n	80039e2 <UART_SetConfig+0x346>
 800395e:	2310      	movs	r3, #16
 8003960:	77fb      	strb	r3, [r7, #31]
 8003962:	e03e      	b.n	80039e2 <UART_SetConfig+0x346>
 8003964:	efff69f3 	.word	0xefff69f3
 8003968:	40011000 	.word	0x40011000
 800396c:	40023800 	.word	0x40023800
 8003970:	40004400 	.word	0x40004400
 8003974:	40004800 	.word	0x40004800
 8003978:	40004c00 	.word	0x40004c00
 800397c:	40005000 	.word	0x40005000
 8003980:	40011400 	.word	0x40011400
 8003984:	40007800 	.word	0x40007800
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a71      	ldr	r2, [pc, #452]	; (8003b54 <UART_SetConfig+0x4b8>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d125      	bne.n	80039de <UART_SetConfig+0x342>
 8003992:	4b71      	ldr	r3, [pc, #452]	; (8003b58 <UART_SetConfig+0x4bc>)
 8003994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003998:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800399c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80039a0:	d017      	beq.n	80039d2 <UART_SetConfig+0x336>
 80039a2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80039a6:	d817      	bhi.n	80039d8 <UART_SetConfig+0x33c>
 80039a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039ac:	d00b      	beq.n	80039c6 <UART_SetConfig+0x32a>
 80039ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039b2:	d811      	bhi.n	80039d8 <UART_SetConfig+0x33c>
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d003      	beq.n	80039c0 <UART_SetConfig+0x324>
 80039b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039bc:	d006      	beq.n	80039cc <UART_SetConfig+0x330>
 80039be:	e00b      	b.n	80039d8 <UART_SetConfig+0x33c>
 80039c0:	2300      	movs	r3, #0
 80039c2:	77fb      	strb	r3, [r7, #31]
 80039c4:	e00d      	b.n	80039e2 <UART_SetConfig+0x346>
 80039c6:	2302      	movs	r3, #2
 80039c8:	77fb      	strb	r3, [r7, #31]
 80039ca:	e00a      	b.n	80039e2 <UART_SetConfig+0x346>
 80039cc:	2304      	movs	r3, #4
 80039ce:	77fb      	strb	r3, [r7, #31]
 80039d0:	e007      	b.n	80039e2 <UART_SetConfig+0x346>
 80039d2:	2308      	movs	r3, #8
 80039d4:	77fb      	strb	r3, [r7, #31]
 80039d6:	e004      	b.n	80039e2 <UART_SetConfig+0x346>
 80039d8:	2310      	movs	r3, #16
 80039da:	77fb      	strb	r3, [r7, #31]
 80039dc:	e001      	b.n	80039e2 <UART_SetConfig+0x346>
 80039de:	2310      	movs	r3, #16
 80039e0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	69db      	ldr	r3, [r3, #28]
 80039e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039ea:	d15b      	bne.n	8003aa4 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80039ec:	7ffb      	ldrb	r3, [r7, #31]
 80039ee:	2b08      	cmp	r3, #8
 80039f0:	d827      	bhi.n	8003a42 <UART_SetConfig+0x3a6>
 80039f2:	a201      	add	r2, pc, #4	; (adr r2, 80039f8 <UART_SetConfig+0x35c>)
 80039f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f8:	08003a1d 	.word	0x08003a1d
 80039fc:	08003a25 	.word	0x08003a25
 8003a00:	08003a2d 	.word	0x08003a2d
 8003a04:	08003a43 	.word	0x08003a43
 8003a08:	08003a33 	.word	0x08003a33
 8003a0c:	08003a43 	.word	0x08003a43
 8003a10:	08003a43 	.word	0x08003a43
 8003a14:	08003a43 	.word	0x08003a43
 8003a18:	08003a3b 	.word	0x08003a3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a1c:	f7fe fbb2 	bl	8002184 <HAL_RCC_GetPCLK1Freq>
 8003a20:	61b8      	str	r0, [r7, #24]
        break;
 8003a22:	e013      	b.n	8003a4c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a24:	f7fe fbc2 	bl	80021ac <HAL_RCC_GetPCLK2Freq>
 8003a28:	61b8      	str	r0, [r7, #24]
        break;
 8003a2a:	e00f      	b.n	8003a4c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a2c:	4b4b      	ldr	r3, [pc, #300]	; (8003b5c <UART_SetConfig+0x4c0>)
 8003a2e:	61bb      	str	r3, [r7, #24]
        break;
 8003a30:	e00c      	b.n	8003a4c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a32:	f7fe fab9 	bl	8001fa8 <HAL_RCC_GetSysClockFreq>
 8003a36:	61b8      	str	r0, [r7, #24]
        break;
 8003a38:	e008      	b.n	8003a4c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a3e:	61bb      	str	r3, [r7, #24]
        break;
 8003a40:	e004      	b.n	8003a4c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8003a42:	2300      	movs	r3, #0
 8003a44:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	77bb      	strb	r3, [r7, #30]
        break;
 8003a4a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d074      	beq.n	8003b3c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	005a      	lsls	r2, r3, #1
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	085b      	lsrs	r3, r3, #1
 8003a5c:	441a      	add	r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	2b0f      	cmp	r3, #15
 8003a6e:	d916      	bls.n	8003a9e <UART_SetConfig+0x402>
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a76:	d212      	bcs.n	8003a9e <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	f023 030f 	bic.w	r3, r3, #15
 8003a80:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	085b      	lsrs	r3, r3, #1
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	f003 0307 	and.w	r3, r3, #7
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	89fb      	ldrh	r3, [r7, #14]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	89fa      	ldrh	r2, [r7, #14]
 8003a9a:	60da      	str	r2, [r3, #12]
 8003a9c:	e04e      	b.n	8003b3c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	77bb      	strb	r3, [r7, #30]
 8003aa2:	e04b      	b.n	8003b3c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003aa4:	7ffb      	ldrb	r3, [r7, #31]
 8003aa6:	2b08      	cmp	r3, #8
 8003aa8:	d827      	bhi.n	8003afa <UART_SetConfig+0x45e>
 8003aaa:	a201      	add	r2, pc, #4	; (adr r2, 8003ab0 <UART_SetConfig+0x414>)
 8003aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab0:	08003ad5 	.word	0x08003ad5
 8003ab4:	08003add 	.word	0x08003add
 8003ab8:	08003ae5 	.word	0x08003ae5
 8003abc:	08003afb 	.word	0x08003afb
 8003ac0:	08003aeb 	.word	0x08003aeb
 8003ac4:	08003afb 	.word	0x08003afb
 8003ac8:	08003afb 	.word	0x08003afb
 8003acc:	08003afb 	.word	0x08003afb
 8003ad0:	08003af3 	.word	0x08003af3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ad4:	f7fe fb56 	bl	8002184 <HAL_RCC_GetPCLK1Freq>
 8003ad8:	61b8      	str	r0, [r7, #24]
        break;
 8003ada:	e013      	b.n	8003b04 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003adc:	f7fe fb66 	bl	80021ac <HAL_RCC_GetPCLK2Freq>
 8003ae0:	61b8      	str	r0, [r7, #24]
        break;
 8003ae2:	e00f      	b.n	8003b04 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ae4:	4b1d      	ldr	r3, [pc, #116]	; (8003b5c <UART_SetConfig+0x4c0>)
 8003ae6:	61bb      	str	r3, [r7, #24]
        break;
 8003ae8:	e00c      	b.n	8003b04 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003aea:	f7fe fa5d 	bl	8001fa8 <HAL_RCC_GetSysClockFreq>
 8003aee:	61b8      	str	r0, [r7, #24]
        break;
 8003af0:	e008      	b.n	8003b04 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003af2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003af6:	61bb      	str	r3, [r7, #24]
        break;
 8003af8:	e004      	b.n	8003b04 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8003afa:	2300      	movs	r3, #0
 8003afc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	77bb      	strb	r3, [r7, #30]
        break;
 8003b02:	bf00      	nop
    }

    if (pclk != 0U)
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d018      	beq.n	8003b3c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	085a      	lsrs	r2, r3, #1
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	441a      	add	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	2b0f      	cmp	r3, #15
 8003b24:	d908      	bls.n	8003b38 <UART_SetConfig+0x49c>
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b2c:	d204      	bcs.n	8003b38 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	693a      	ldr	r2, [r7, #16]
 8003b34:	60da      	str	r2, [r3, #12]
 8003b36:	e001      	b.n	8003b3c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003b48:	7fbb      	ldrb	r3, [r7, #30]
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3720      	adds	r7, #32
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	40007c00 	.word	0x40007c00
 8003b58:	40023800 	.word	0x40023800
 8003b5c:	00f42400 	.word	0x00f42400

08003b60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6c:	f003 0301 	and.w	r3, r3, #1
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d00a      	beq.n	8003b8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	430a      	orrs	r2, r1
 8003b88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00a      	beq.n	8003bac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	430a      	orrs	r2, r1
 8003baa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb0:	f003 0304 	and.w	r3, r3, #4
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00a      	beq.n	8003bce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd2:	f003 0308 	and.w	r3, r3, #8
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d00a      	beq.n	8003bf0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	430a      	orrs	r2, r1
 8003bee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf4:	f003 0310 	and.w	r3, r3, #16
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d00a      	beq.n	8003c12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c16:	f003 0320 	and.w	r3, r3, #32
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00a      	beq.n	8003c34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	430a      	orrs	r2, r1
 8003c32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d01a      	beq.n	8003c76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	430a      	orrs	r2, r1
 8003c54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c5e:	d10a      	bne.n	8003c76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	430a      	orrs	r2, r1
 8003c74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00a      	beq.n	8003c98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	430a      	orrs	r2, r1
 8003c96:	605a      	str	r2, [r3, #4]
  }
}
 8003c98:	bf00      	nop
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b086      	sub	sp, #24
 8003ca8:	af02      	add	r7, sp, #8
 8003caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003cb4:	f7fd f9fa 	bl	80010ac <HAL_GetTick>
 8003cb8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0308 	and.w	r3, r3, #8
 8003cc4:	2b08      	cmp	r3, #8
 8003cc6:	d10e      	bne.n	8003ce6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ccc:	9300      	str	r3, [sp, #0]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 f82d 	bl	8003d36 <UART_WaitOnFlagUntilTimeout>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d001      	beq.n	8003ce6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e023      	b.n	8003d2e <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0304 	and.w	r3, r3, #4
 8003cf0:	2b04      	cmp	r3, #4
 8003cf2:	d10e      	bne.n	8003d12 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cf4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003cf8:	9300      	str	r3, [sp, #0]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 f817 	bl	8003d36 <UART_WaitOnFlagUntilTimeout>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d001      	beq.n	8003d12 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e00d      	b.n	8003d2e <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2220      	movs	r2, #32
 8003d16:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2220      	movs	r2, #32
 8003d1c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3710      	adds	r7, #16
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}

08003d36 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d36:	b580      	push	{r7, lr}
 8003d38:	b084      	sub	sp, #16
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	60f8      	str	r0, [r7, #12]
 8003d3e:	60b9      	str	r1, [r7, #8]
 8003d40:	603b      	str	r3, [r7, #0]
 8003d42:	4613      	mov	r3, r2
 8003d44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d46:	e05e      	b.n	8003e06 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d4e:	d05a      	beq.n	8003e06 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d50:	f7fd f9ac 	bl	80010ac <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	69ba      	ldr	r2, [r7, #24]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d302      	bcc.n	8003d66 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d11b      	bne.n	8003d9e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003d74:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	689a      	ldr	r2, [r3, #8]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f022 0201 	bic.w	r2, r2, #1
 8003d84:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2220      	movs	r2, #32
 8003d8a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2220      	movs	r2, #32
 8003d90:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e043      	b.n	8003e26 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0304 	and.w	r3, r3, #4
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d02c      	beq.n	8003e06 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	69db      	ldr	r3, [r3, #28]
 8003db2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003db6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dba:	d124      	bne.n	8003e06 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003dc4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003dd4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	689a      	ldr	r2, [r3, #8]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f022 0201 	bic.w	r2, r2, #1
 8003de4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2220      	movs	r2, #32
 8003dea:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2220      	movs	r2, #32
 8003df0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2220      	movs	r2, #32
 8003df6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e00f      	b.n	8003e26 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	69da      	ldr	r2, [r3, #28]
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	4013      	ands	r3, r2
 8003e10:	68ba      	ldr	r2, [r7, #8]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	bf0c      	ite	eq
 8003e16:	2301      	moveq	r3, #1
 8003e18:	2300      	movne	r3, #0
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	79fb      	ldrb	r3, [r7, #7]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d091      	beq.n	8003d48 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3710      	adds	r7, #16
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}

08003e2e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e2e:	b480      	push	{r7}
 8003e30:	b083      	sub	sp, #12
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003e44:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	689a      	ldr	r2, [r3, #8]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f022 0201 	bic.w	r2, r2, #1
 8003e54:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d107      	bne.n	8003e6e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f022 0210 	bic.w	r2, r2, #16
 8003e6c:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2220      	movs	r2, #32
 8003e72:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003e80:	bf00      	nop
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e98:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f7ff fbd6 	bl	800365c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003eb0:	bf00      	nop
 8003eb2:	3710      	adds	r7, #16
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ece:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f7ff fbb3 	bl	8003648 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ee2:	bf00      	nop
 8003ee4:	3708      	adds	r7, #8
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}

08003eea <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003eea:	b480      	push	{r7}
 8003eec:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8003eee:	bf00      	nop
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003ef8:	b480      	push	{r7}
 8003efa:	b085      	sub	sp, #20
 8003efc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003efe:	f3ef 8305 	mrs	r3, IPSR
 8003f02:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f04:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d10f      	bne.n	8003f2a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f0a:	f3ef 8310 	mrs	r3, PRIMASK
 8003f0e:	607b      	str	r3, [r7, #4]
  return(result);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d105      	bne.n	8003f22 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003f16:	f3ef 8311 	mrs	r3, BASEPRI
 8003f1a:	603b      	str	r3, [r7, #0]
  return(result);
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d007      	beq.n	8003f32 <osKernelInitialize+0x3a>
 8003f22:	4b0e      	ldr	r3, [pc, #56]	; (8003f5c <osKernelInitialize+0x64>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d103      	bne.n	8003f32 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003f2a:	f06f 0305 	mvn.w	r3, #5
 8003f2e:	60fb      	str	r3, [r7, #12]
 8003f30:	e00c      	b.n	8003f4c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003f32:	4b0a      	ldr	r3, [pc, #40]	; (8003f5c <osKernelInitialize+0x64>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d105      	bne.n	8003f46 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003f3a:	4b08      	ldr	r3, [pc, #32]	; (8003f5c <osKernelInitialize+0x64>)
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003f40:	2300      	movs	r3, #0
 8003f42:	60fb      	str	r3, [r7, #12]
 8003f44:	e002      	b.n	8003f4c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003f46:	f04f 33ff 	mov.w	r3, #4294967295
 8003f4a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3714      	adds	r7, #20
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	20000118 	.word	0x20000118

08003f60 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f66:	f3ef 8305 	mrs	r3, IPSR
 8003f6a:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f6c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d10f      	bne.n	8003f92 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f72:	f3ef 8310 	mrs	r3, PRIMASK
 8003f76:	607b      	str	r3, [r7, #4]
  return(result);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d105      	bne.n	8003f8a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003f7e:	f3ef 8311 	mrs	r3, BASEPRI
 8003f82:	603b      	str	r3, [r7, #0]
  return(result);
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d007      	beq.n	8003f9a <osKernelStart+0x3a>
 8003f8a:	4b0f      	ldr	r3, [pc, #60]	; (8003fc8 <osKernelStart+0x68>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d103      	bne.n	8003f9a <osKernelStart+0x3a>
    stat = osErrorISR;
 8003f92:	f06f 0305 	mvn.w	r3, #5
 8003f96:	60fb      	str	r3, [r7, #12]
 8003f98:	e010      	b.n	8003fbc <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003f9a:	4b0b      	ldr	r3, [pc, #44]	; (8003fc8 <osKernelStart+0x68>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d109      	bne.n	8003fb6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003fa2:	f7ff ffa2 	bl	8003eea <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003fa6:	4b08      	ldr	r3, [pc, #32]	; (8003fc8 <osKernelStart+0x68>)
 8003fa8:	2202      	movs	r2, #2
 8003faa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003fac:	f001 fa8c 	bl	80054c8 <vTaskStartScheduler>
      stat = osOK;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	60fb      	str	r3, [r7, #12]
 8003fb4:	e002      	b.n	8003fbc <osKernelStart+0x5c>
    } else {
      stat = osError;
 8003fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8003fba:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	20000118 	.word	0x20000118

08003fcc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b090      	sub	sp, #64	; 0x40
 8003fd0:	af04      	add	r7, sp, #16
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003fdc:	f3ef 8305 	mrs	r3, IPSR
 8003fe0:	61fb      	str	r3, [r7, #28]
  return(result);
 8003fe2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f040 808f 	bne.w	8004108 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fea:	f3ef 8310 	mrs	r3, PRIMASK
 8003fee:	61bb      	str	r3, [r7, #24]
  return(result);
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d105      	bne.n	8004002 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003ff6:	f3ef 8311 	mrs	r3, BASEPRI
 8003ffa:	617b      	str	r3, [r7, #20]
  return(result);
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d003      	beq.n	800400a <osThreadNew+0x3e>
 8004002:	4b44      	ldr	r3, [pc, #272]	; (8004114 <osThreadNew+0x148>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2b02      	cmp	r3, #2
 8004008:	d07e      	beq.n	8004108 <osThreadNew+0x13c>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d07b      	beq.n	8004108 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004010:	2380      	movs	r3, #128	; 0x80
 8004012:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004014:	2318      	movs	r3, #24
 8004016:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8004018:	2300      	movs	r3, #0
 800401a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800401c:	f04f 33ff 	mov.w	r3, #4294967295
 8004020:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d045      	beq.n	80040b4 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d002      	beq.n	8004036 <osThreadNew+0x6a>
        name = attr->name;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d002      	beq.n	8004044 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004046:	2b00      	cmp	r3, #0
 8004048:	d008      	beq.n	800405c <osThreadNew+0x90>
 800404a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404c:	2b38      	cmp	r3, #56	; 0x38
 800404e:	d805      	bhi.n	800405c <osThreadNew+0x90>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f003 0301 	and.w	r3, r3, #1
 8004058:	2b00      	cmp	r3, #0
 800405a:	d001      	beq.n	8004060 <osThreadNew+0x94>
        return (NULL);
 800405c:	2300      	movs	r3, #0
 800405e:	e054      	b.n	800410a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	695b      	ldr	r3, [r3, #20]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d003      	beq.n	8004070 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	695b      	ldr	r3, [r3, #20]
 800406c:	089b      	lsrs	r3, r3, #2
 800406e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d00e      	beq.n	8004096 <osThreadNew+0xca>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	2bbb      	cmp	r3, #187	; 0xbb
 800407e:	d90a      	bls.n	8004096 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004084:	2b00      	cmp	r3, #0
 8004086:	d006      	beq.n	8004096 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	695b      	ldr	r3, [r3, #20]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d002      	beq.n	8004096 <osThreadNew+0xca>
        mem = 1;
 8004090:	2301      	movs	r3, #1
 8004092:	623b      	str	r3, [r7, #32]
 8004094:	e010      	b.n	80040b8 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d10c      	bne.n	80040b8 <osThreadNew+0xec>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d108      	bne.n	80040b8 <osThreadNew+0xec>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d104      	bne.n	80040b8 <osThreadNew+0xec>
          mem = 0;
 80040ae:	2300      	movs	r3, #0
 80040b0:	623b      	str	r3, [r7, #32]
 80040b2:	e001      	b.n	80040b8 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80040b4:	2300      	movs	r3, #0
 80040b6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80040b8:	6a3b      	ldr	r3, [r7, #32]
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d110      	bne.n	80040e0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80040c6:	9202      	str	r2, [sp, #8]
 80040c8:	9301      	str	r3, [sp, #4]
 80040ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040cc:	9300      	str	r3, [sp, #0]
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040d4:	68f8      	ldr	r0, [r7, #12]
 80040d6:	f001 f801 	bl	80050dc <xTaskCreateStatic>
 80040da:	4603      	mov	r3, r0
 80040dc:	613b      	str	r3, [r7, #16]
 80040de:	e013      	b.n	8004108 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80040e0:	6a3b      	ldr	r3, [r7, #32]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d110      	bne.n	8004108 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80040e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e8:	b29a      	uxth	r2, r3
 80040ea:	f107 0310 	add.w	r3, r7, #16
 80040ee:	9301      	str	r3, [sp, #4]
 80040f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f2:	9300      	str	r3, [sp, #0]
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040f8:	68f8      	ldr	r0, [r7, #12]
 80040fa:	f001 f852 	bl	80051a2 <xTaskCreate>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b01      	cmp	r3, #1
 8004102:	d001      	beq.n	8004108 <osThreadNew+0x13c>
          hTask = NULL;
 8004104:	2300      	movs	r3, #0
 8004106:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004108:	693b      	ldr	r3, [r7, #16]
}
 800410a:	4618      	mov	r0, r3
 800410c:	3730      	adds	r7, #48	; 0x30
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	20000118 	.word	0x20000118

08004118 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004118:	b580      	push	{r7, lr}
 800411a:	b086      	sub	sp, #24
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004120:	f3ef 8305 	mrs	r3, IPSR
 8004124:	613b      	str	r3, [r7, #16]
  return(result);
 8004126:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004128:	2b00      	cmp	r3, #0
 800412a:	d10f      	bne.n	800414c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800412c:	f3ef 8310 	mrs	r3, PRIMASK
 8004130:	60fb      	str	r3, [r7, #12]
  return(result);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d105      	bne.n	8004144 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004138:	f3ef 8311 	mrs	r3, BASEPRI
 800413c:	60bb      	str	r3, [r7, #8]
  return(result);
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d007      	beq.n	8004154 <osDelay+0x3c>
 8004144:	4b0a      	ldr	r3, [pc, #40]	; (8004170 <osDelay+0x58>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2b02      	cmp	r3, #2
 800414a:	d103      	bne.n	8004154 <osDelay+0x3c>
    stat = osErrorISR;
 800414c:	f06f 0305 	mvn.w	r3, #5
 8004150:	617b      	str	r3, [r7, #20]
 8004152:	e007      	b.n	8004164 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004154:	2300      	movs	r3, #0
 8004156:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d002      	beq.n	8004164 <osDelay+0x4c>
      vTaskDelay(ticks);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f001 f97c 	bl	800545c <vTaskDelay>
    }
  }

  return (stat);
 8004164:	697b      	ldr	r3, [r7, #20]
}
 8004166:	4618      	mov	r0, r3
 8004168:	3718      	adds	r7, #24
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	20000118 	.word	0x20000118

08004174 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	4a07      	ldr	r2, [pc, #28]	; (80041a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8004184:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	4a06      	ldr	r2, [pc, #24]	; (80041a4 <vApplicationGetIdleTaskMemory+0x30>)
 800418a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2280      	movs	r2, #128	; 0x80
 8004190:	601a      	str	r2, [r3, #0]
}
 8004192:	bf00      	nop
 8004194:	3714      	adds	r7, #20
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	2000011c 	.word	0x2000011c
 80041a4:	200001d8 	.word	0x200001d8

080041a8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	4a07      	ldr	r2, [pc, #28]	; (80041d4 <vApplicationGetTimerTaskMemory+0x2c>)
 80041b8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	4a06      	ldr	r2, [pc, #24]	; (80041d8 <vApplicationGetTimerTaskMemory+0x30>)
 80041be:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80041c6:	601a      	str	r2, [r3, #0]
}
 80041c8:	bf00      	nop
 80041ca:	3714      	adds	r7, #20
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr
 80041d4:	200003d8 	.word	0x200003d8
 80041d8:	20000494 	.word	0x20000494

080041dc <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80041e2:	2020      	movs	r0, #32
 80041e4:	f002 fd36 	bl	8006c54 <pvPortMalloc>
 80041e8:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00a      	beq.n	8004206 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	3304      	adds	r3, #4
 80041fa:	4618      	mov	r0, r3
 80041fc:	f000 f9b0 	bl	8004560 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8004206:	687b      	ldr	r3, [r7, #4]
	}
 8004208:	4618      	mov	r0, r3
 800420a:	3708      	adds	r7, #8
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b090      	sub	sp, #64	; 0x40
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	607a      	str	r2, [r7, #4]
 800421c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8004222:	2300      	movs	r3, #0
 8004224:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8004226:	2300      	movs	r3, #0
 8004228:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d10c      	bne.n	800424a <xEventGroupWaitBits+0x3a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004234:	b672      	cpsid	i
 8004236:	f383 8811 	msr	BASEPRI, r3
 800423a:	f3bf 8f6f 	isb	sy
 800423e:	f3bf 8f4f 	dsb	sy
 8004242:	b662      	cpsie	i
 8004244:	623b      	str	r3, [r7, #32]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004246:	bf00      	nop
 8004248:	e7fe      	b.n	8004248 <xEventGroupWaitBits+0x38>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004250:	2b00      	cmp	r3, #0
 8004252:	d00c      	beq.n	800426e <xEventGroupWaitBits+0x5e>
	__asm volatile
 8004254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004258:	b672      	cpsid	i
 800425a:	f383 8811 	msr	BASEPRI, r3
 800425e:	f3bf 8f6f 	isb	sy
 8004262:	f3bf 8f4f 	dsb	sy
 8004266:	b662      	cpsie	i
 8004268:	61fb      	str	r3, [r7, #28]
}
 800426a:	bf00      	nop
 800426c:	e7fe      	b.n	800426c <xEventGroupWaitBits+0x5c>
	configASSERT( uxBitsToWaitFor != 0 );
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d10c      	bne.n	800428e <xEventGroupWaitBits+0x7e>
	__asm volatile
 8004274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004278:	b672      	cpsid	i
 800427a:	f383 8811 	msr	BASEPRI, r3
 800427e:	f3bf 8f6f 	isb	sy
 8004282:	f3bf 8f4f 	dsb	sy
 8004286:	b662      	cpsie	i
 8004288:	61bb      	str	r3, [r7, #24]
}
 800428a:	bf00      	nop
 800428c:	e7fe      	b.n	800428c <xEventGroupWaitBits+0x7c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800428e:	f001 fe33 	bl	8005ef8 <xTaskGetSchedulerState>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d102      	bne.n	800429e <xEventGroupWaitBits+0x8e>
 8004298:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800429a:	2b00      	cmp	r3, #0
 800429c:	d101      	bne.n	80042a2 <xEventGroupWaitBits+0x92>
 800429e:	2301      	movs	r3, #1
 80042a0:	e000      	b.n	80042a4 <xEventGroupWaitBits+0x94>
 80042a2:	2300      	movs	r3, #0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d10c      	bne.n	80042c2 <xEventGroupWaitBits+0xb2>
	__asm volatile
 80042a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ac:	b672      	cpsid	i
 80042ae:	f383 8811 	msr	BASEPRI, r3
 80042b2:	f3bf 8f6f 	isb	sy
 80042b6:	f3bf 8f4f 	dsb	sy
 80042ba:	b662      	cpsie	i
 80042bc:	617b      	str	r3, [r7, #20]
}
 80042be:	bf00      	nop
 80042c0:	e7fe      	b.n	80042c0 <xEventGroupWaitBits+0xb0>
	}
	#endif

	vTaskSuspendAll();
 80042c2:	f001 f975 	bl	80055b0 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80042c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80042cc:	683a      	ldr	r2, [r7, #0]
 80042ce:	68b9      	ldr	r1, [r7, #8]
 80042d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80042d2:	f000 f90f 	bl	80044f4 <prvTestWaitCondition>
 80042d6:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80042d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d00e      	beq.n	80042fc <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80042de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e0:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80042e2:	2300      	movs	r3, #0
 80042e4:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d028      	beq.n	800433e <xEventGroupWaitBits+0x12e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80042ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	43db      	mvns	r3, r3
 80042f4:	401a      	ands	r2, r3
 80042f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042f8:	601a      	str	r2, [r3, #0]
 80042fa:	e020      	b.n	800433e <xEventGroupWaitBits+0x12e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80042fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d104      	bne.n	800430c <xEventGroupWaitBits+0xfc>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8004302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004304:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8004306:	2301      	movs	r3, #1
 8004308:	633b      	str	r3, [r7, #48]	; 0x30
 800430a:	e018      	b.n	800433e <xEventGroupWaitBits+0x12e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d003      	beq.n	800431a <xEventGroupWaitBits+0x10a>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8004312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004314:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004318:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d003      	beq.n	8004328 <xEventGroupWaitBits+0x118>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8004320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004322:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004326:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8004328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800432a:	1d18      	adds	r0, r3, #4
 800432c:	68ba      	ldr	r2, [r7, #8]
 800432e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004330:	4313      	orrs	r3, r2
 8004332:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004334:	4619      	mov	r1, r3
 8004336:	f001 fb41 	bl	80059bc <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800433a:	2300      	movs	r3, #0
 800433c:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800433e:	f001 f945 	bl	80055cc <xTaskResumeAll>
 8004342:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8004344:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004346:	2b00      	cmp	r3, #0
 8004348:	d031      	beq.n	80043ae <xEventGroupWaitBits+0x19e>
	{
		if( xAlreadyYielded == pdFALSE )
 800434a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434c:	2b00      	cmp	r3, #0
 800434e:	d107      	bne.n	8004360 <xEventGroupWaitBits+0x150>
		{
			portYIELD_WITHIN_API();
 8004350:	4b19      	ldr	r3, [pc, #100]	; (80043b8 <xEventGroupWaitBits+0x1a8>)
 8004352:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004356:	601a      	str	r2, [r3, #0]
 8004358:	f3bf 8f4f 	dsb	sy
 800435c:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8004360:	f001 fe5a 	bl	8006018 <uxTaskResetEventItemValue>
 8004364:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8004366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d11a      	bne.n	80043a6 <xEventGroupWaitBits+0x196>
		{
			taskENTER_CRITICAL();
 8004370:	f002 fb44 	bl	80069fc <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8004374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800437a:	683a      	ldr	r2, [r7, #0]
 800437c:	68b9      	ldr	r1, [r7, #8]
 800437e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004380:	f000 f8b8 	bl	80044f4 <prvTestWaitCondition>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d009      	beq.n	800439e <xEventGroupWaitBits+0x18e>
				{
					if( xClearOnExit != pdFALSE )
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d006      	beq.n	800439e <xEventGroupWaitBits+0x18e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8004390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	43db      	mvns	r3, r3
 8004398:	401a      	ands	r2, r3
 800439a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800439c:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800439e:	2301      	movs	r3, #1
 80043a0:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80043a2:	f002 fb5f 	bl	8006a64 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80043a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043a8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80043ac:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80043ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3740      	adds	r7, #64	; 0x40
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	e000ed04 	.word	0xe000ed04

080043bc <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b08e      	sub	sp, #56	; 0x38
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80043c6:	2300      	movs	r3, #0
 80043c8:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80043ce:	2300      	movs	r3, #0
 80043d0:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d10c      	bne.n	80043f2 <xEventGroupSetBits+0x36>
	__asm volatile
 80043d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043dc:	b672      	cpsid	i
 80043de:	f383 8811 	msr	BASEPRI, r3
 80043e2:	f3bf 8f6f 	isb	sy
 80043e6:	f3bf 8f4f 	dsb	sy
 80043ea:	b662      	cpsie	i
 80043ec:	613b      	str	r3, [r7, #16]
}
 80043ee:	bf00      	nop
 80043f0:	e7fe      	b.n	80043f0 <xEventGroupSetBits+0x34>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d00c      	beq.n	8004416 <xEventGroupSetBits+0x5a>
	__asm volatile
 80043fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004400:	b672      	cpsid	i
 8004402:	f383 8811 	msr	BASEPRI, r3
 8004406:	f3bf 8f6f 	isb	sy
 800440a:	f3bf 8f4f 	dsb	sy
 800440e:	b662      	cpsie	i
 8004410:	60fb      	str	r3, [r7, #12]
}
 8004412:	bf00      	nop
 8004414:	e7fe      	b.n	8004414 <xEventGroupSetBits+0x58>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8004416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004418:	3304      	adds	r3, #4
 800441a:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800441c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441e:	3308      	adds	r3, #8
 8004420:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8004422:	f001 f8c5 	bl	80055b0 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8004426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800442c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	431a      	orrs	r2, r3
 8004434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004436:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8004438:	e03c      	b.n	80044b4 <xEventGroupSetBits+0xf8>
		{
			pxNext = listGET_NEXT( pxListItem );
 800443a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8004440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8004446:	2300      	movs	r3, #0
 8004448:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004450:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004458:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d108      	bne.n	8004476 <xEventGroupSetBits+0xba>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8004464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	4013      	ands	r3, r2
 800446c:	2b00      	cmp	r3, #0
 800446e:	d00b      	beq.n	8004488 <xEventGroupSetBits+0xcc>
				{
					xMatchFound = pdTRUE;
 8004470:	2301      	movs	r3, #1
 8004472:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004474:	e008      	b.n	8004488 <xEventGroupSetBits+0xcc>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8004476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	4013      	ands	r3, r2
 800447e:	69ba      	ldr	r2, [r7, #24]
 8004480:	429a      	cmp	r2, r3
 8004482:	d101      	bne.n	8004488 <xEventGroupSetBits+0xcc>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8004484:	2301      	movs	r3, #1
 8004486:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8004488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800448a:	2b00      	cmp	r3, #0
 800448c:	d010      	beq.n	80044b0 <xEventGroupSetBits+0xf4>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d003      	beq.n	80044a0 <xEventGroupSetBits+0xe4>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8004498:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	4313      	orrs	r3, r2
 800449e:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80044a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80044a8:	4619      	mov	r1, r3
 80044aa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80044ac:	f001 fb5a 	bl	8005b64 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80044b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044b6:	6a3b      	ldr	r3, [r7, #32]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d1be      	bne.n	800443a <xEventGroupSetBits+0x7e>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80044bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c2:	43db      	mvns	r3, r3
 80044c4:	401a      	ands	r2, r3
 80044c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c8:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80044ca:	f001 f87f 	bl	80055cc <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80044ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d0:	681b      	ldr	r3, [r3, #0]
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3738      	adds	r7, #56	; 0x38
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}

080044da <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80044da:	b580      	push	{r7, lr}
 80044dc:	b082      	sub	sp, #8
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
 80044e2:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80044e4:	6839      	ldr	r1, [r7, #0]
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f7ff ff68 	bl	80043bc <xEventGroupSetBits>
}
 80044ec:	bf00      	nop
 80044ee:	3708      	adds	r7, #8
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80044f4:	b480      	push	{r7}
 80044f6:	b087      	sub	sp, #28
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8004500:	2300      	movs	r3, #0
 8004502:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d107      	bne.n	800451a <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	4013      	ands	r3, r2
 8004510:	2b00      	cmp	r3, #0
 8004512:	d00a      	beq.n	800452a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8004514:	2301      	movs	r3, #1
 8004516:	617b      	str	r3, [r7, #20]
 8004518:	e007      	b.n	800452a <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	4013      	ands	r3, r2
 8004520:	68ba      	ldr	r2, [r7, #8]
 8004522:	429a      	cmp	r2, r3
 8004524:	d101      	bne.n	800452a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8004526:	2301      	movs	r3, #1
 8004528:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800452a:	697b      	ldr	r3, [r7, #20]
}
 800452c:	4618      	mov	r0, r3
 800452e:	371c      	adds	r7, #28
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr

08004538 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8004538:	b580      	push	{r7, lr}
 800453a:	b086      	sub	sp, #24
 800453c:	af00      	add	r7, sp, #0
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	68ba      	ldr	r2, [r7, #8]
 8004548:	68f9      	ldr	r1, [r7, #12]
 800454a:	4804      	ldr	r0, [pc, #16]	; (800455c <xEventGroupSetBitsFromISR+0x24>)
 800454c:	f002 f92c 	bl	80067a8 <xTimerPendFunctionCallFromISR>
 8004550:	6178      	str	r0, [r7, #20]

		return xReturn;
 8004552:	697b      	ldr	r3, [r7, #20]
	}
 8004554:	4618      	mov	r0, r3
 8004556:	3718      	adds	r7, #24
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	080044db 	.word	0x080044db

08004560 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f103 0208 	add.w	r2, r3, #8
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f04f 32ff 	mov.w	r2, #4294967295
 8004578:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f103 0208 	add.w	r2, r3, #8
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f103 0208 	add.w	r2, r3, #8
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80045ae:	bf00      	nop
 80045b0:	370c      	adds	r7, #12
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr

080045ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80045ba:	b480      	push	{r7}
 80045bc:	b085      	sub	sp, #20
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
 80045c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	68fa      	ldr	r2, [r7, #12]
 80045ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	689a      	ldr	r2, [r3, #8]
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	683a      	ldr	r2, [r7, #0]
 80045de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	683a      	ldr	r2, [r7, #0]
 80045e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	1c5a      	adds	r2, r3, #1
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	601a      	str	r2, [r3, #0]
}
 80045f6:	bf00      	nop
 80045f8:	3714      	adds	r7, #20
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr

08004602 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004602:	b480      	push	{r7}
 8004604:	b085      	sub	sp, #20
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
 800460a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004618:	d103      	bne.n	8004622 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	60fb      	str	r3, [r7, #12]
 8004620:	e00c      	b.n	800463c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	3308      	adds	r3, #8
 8004626:	60fb      	str	r3, [r7, #12]
 8004628:	e002      	b.n	8004630 <vListInsert+0x2e>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	60fb      	str	r3, [r7, #12]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	68ba      	ldr	r2, [r7, #8]
 8004638:	429a      	cmp	r2, r3
 800463a:	d2f6      	bcs.n	800462a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	685a      	ldr	r2, [r3, #4]
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	683a      	ldr	r2, [r7, #0]
 800464a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	683a      	ldr	r2, [r7, #0]
 8004656:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	1c5a      	adds	r2, r3, #1
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	601a      	str	r2, [r3, #0]
}
 8004668:	bf00      	nop
 800466a:	3714      	adds	r7, #20
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004674:	b480      	push	{r7}
 8004676:	b085      	sub	sp, #20
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	6892      	ldr	r2, [r2, #8]
 800468a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	6852      	ldr	r2, [r2, #4]
 8004694:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	429a      	cmp	r2, r3
 800469e:	d103      	bne.n	80046a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	689a      	ldr	r2, [r3, #8]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	1e5a      	subs	r2, r3, #1
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3714      	adds	r7, #20
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d10c      	bne.n	80046f6 <xQueueGenericReset+0x2e>
	__asm volatile
 80046dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e0:	b672      	cpsid	i
 80046e2:	f383 8811 	msr	BASEPRI, r3
 80046e6:	f3bf 8f6f 	isb	sy
 80046ea:	f3bf 8f4f 	dsb	sy
 80046ee:	b662      	cpsie	i
 80046f0:	60bb      	str	r3, [r7, #8]
}
 80046f2:	bf00      	nop
 80046f4:	e7fe      	b.n	80046f4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80046f6:	f002 f981 	bl	80069fc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004702:	68f9      	ldr	r1, [r7, #12]
 8004704:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004706:	fb01 f303 	mul.w	r3, r1, r3
 800470a:	441a      	add	r2, r3
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2200      	movs	r2, #0
 8004714:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004726:	3b01      	subs	r3, #1
 8004728:	68f9      	ldr	r1, [r7, #12]
 800472a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800472c:	fb01 f303 	mul.w	r3, r1, r3
 8004730:	441a      	add	r2, r3
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	22ff      	movs	r2, #255	; 0xff
 800473a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	22ff      	movs	r2, #255	; 0xff
 8004742:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d114      	bne.n	8004776 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d01a      	beq.n	800478a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	3310      	adds	r3, #16
 8004758:	4618      	mov	r0, r3
 800475a:	f001 f99d 	bl	8005a98 <xTaskRemoveFromEventList>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d012      	beq.n	800478a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004764:	4b0c      	ldr	r3, [pc, #48]	; (8004798 <xQueueGenericReset+0xd0>)
 8004766:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800476a:	601a      	str	r2, [r3, #0]
 800476c:	f3bf 8f4f 	dsb	sy
 8004770:	f3bf 8f6f 	isb	sy
 8004774:	e009      	b.n	800478a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	3310      	adds	r3, #16
 800477a:	4618      	mov	r0, r3
 800477c:	f7ff fef0 	bl	8004560 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	3324      	adds	r3, #36	; 0x24
 8004784:	4618      	mov	r0, r3
 8004786:	f7ff feeb 	bl	8004560 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800478a:	f002 f96b 	bl	8006a64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800478e:	2301      	movs	r3, #1
}
 8004790:	4618      	mov	r0, r3
 8004792:	3710      	adds	r7, #16
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	e000ed04 	.word	0xe000ed04

0800479c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800479c:	b580      	push	{r7, lr}
 800479e:	b08e      	sub	sp, #56	; 0x38
 80047a0:	af02      	add	r7, sp, #8
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	607a      	str	r2, [r7, #4]
 80047a8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d10c      	bne.n	80047ca <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80047b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b4:	b672      	cpsid	i
 80047b6:	f383 8811 	msr	BASEPRI, r3
 80047ba:	f3bf 8f6f 	isb	sy
 80047be:	f3bf 8f4f 	dsb	sy
 80047c2:	b662      	cpsie	i
 80047c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80047c6:	bf00      	nop
 80047c8:	e7fe      	b.n	80047c8 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d10c      	bne.n	80047ea <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80047d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d4:	b672      	cpsid	i
 80047d6:	f383 8811 	msr	BASEPRI, r3
 80047da:	f3bf 8f6f 	isb	sy
 80047de:	f3bf 8f4f 	dsb	sy
 80047e2:	b662      	cpsie	i
 80047e4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80047e6:	bf00      	nop
 80047e8:	e7fe      	b.n	80047e8 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d002      	beq.n	80047f6 <xQueueGenericCreateStatic+0x5a>
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d001      	beq.n	80047fa <xQueueGenericCreateStatic+0x5e>
 80047f6:	2301      	movs	r3, #1
 80047f8:	e000      	b.n	80047fc <xQueueGenericCreateStatic+0x60>
 80047fa:	2300      	movs	r3, #0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d10c      	bne.n	800481a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8004800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004804:	b672      	cpsid	i
 8004806:	f383 8811 	msr	BASEPRI, r3
 800480a:	f3bf 8f6f 	isb	sy
 800480e:	f3bf 8f4f 	dsb	sy
 8004812:	b662      	cpsie	i
 8004814:	623b      	str	r3, [r7, #32]
}
 8004816:	bf00      	nop
 8004818:	e7fe      	b.n	8004818 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d102      	bne.n	8004826 <xQueueGenericCreateStatic+0x8a>
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d101      	bne.n	800482a <xQueueGenericCreateStatic+0x8e>
 8004826:	2301      	movs	r3, #1
 8004828:	e000      	b.n	800482c <xQueueGenericCreateStatic+0x90>
 800482a:	2300      	movs	r3, #0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d10c      	bne.n	800484a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8004830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004834:	b672      	cpsid	i
 8004836:	f383 8811 	msr	BASEPRI, r3
 800483a:	f3bf 8f6f 	isb	sy
 800483e:	f3bf 8f4f 	dsb	sy
 8004842:	b662      	cpsie	i
 8004844:	61fb      	str	r3, [r7, #28]
}
 8004846:	bf00      	nop
 8004848:	e7fe      	b.n	8004848 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800484a:	2350      	movs	r3, #80	; 0x50
 800484c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	2b50      	cmp	r3, #80	; 0x50
 8004852:	d00c      	beq.n	800486e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8004854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004858:	b672      	cpsid	i
 800485a:	f383 8811 	msr	BASEPRI, r3
 800485e:	f3bf 8f6f 	isb	sy
 8004862:	f3bf 8f4f 	dsb	sy
 8004866:	b662      	cpsie	i
 8004868:	61bb      	str	r3, [r7, #24]
}
 800486a:	bf00      	nop
 800486c:	e7fe      	b.n	800486c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800486e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00d      	beq.n	8004896 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800487a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800487c:	2201      	movs	r2, #1
 800487e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004882:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004888:	9300      	str	r3, [sp, #0]
 800488a:	4613      	mov	r3, r2
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	68b9      	ldr	r1, [r7, #8]
 8004890:	68f8      	ldr	r0, [r7, #12]
 8004892:	f000 f805 	bl	80048a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004898:	4618      	mov	r0, r3
 800489a:	3730      	adds	r7, #48	; 0x30
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	607a      	str	r2, [r7, #4]
 80048ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d103      	bne.n	80048bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	69ba      	ldr	r2, [r7, #24]
 80048b8:	601a      	str	r2, [r3, #0]
 80048ba:	e002      	b.n	80048c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	68fa      	ldr	r2, [r7, #12]
 80048c6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	68ba      	ldr	r2, [r7, #8]
 80048cc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80048ce:	2101      	movs	r1, #1
 80048d0:	69b8      	ldr	r0, [r7, #24]
 80048d2:	f7ff fef9 	bl	80046c8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	78fa      	ldrb	r2, [r7, #3]
 80048da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80048de:	bf00      	nop
 80048e0:	3710      	adds	r7, #16
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
	...

080048e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b08e      	sub	sp, #56	; 0x38
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	607a      	str	r2, [r7, #4]
 80048f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80048f6:	2300      	movs	r3, #0
 80048f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80048fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004900:	2b00      	cmp	r3, #0
 8004902:	d10c      	bne.n	800491e <xQueueGenericSend+0x36>
	__asm volatile
 8004904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004908:	b672      	cpsid	i
 800490a:	f383 8811 	msr	BASEPRI, r3
 800490e:	f3bf 8f6f 	isb	sy
 8004912:	f3bf 8f4f 	dsb	sy
 8004916:	b662      	cpsie	i
 8004918:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800491a:	bf00      	nop
 800491c:	e7fe      	b.n	800491c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d103      	bne.n	800492c <xQueueGenericSend+0x44>
 8004924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004928:	2b00      	cmp	r3, #0
 800492a:	d101      	bne.n	8004930 <xQueueGenericSend+0x48>
 800492c:	2301      	movs	r3, #1
 800492e:	e000      	b.n	8004932 <xQueueGenericSend+0x4a>
 8004930:	2300      	movs	r3, #0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d10c      	bne.n	8004950 <xQueueGenericSend+0x68>
	__asm volatile
 8004936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493a:	b672      	cpsid	i
 800493c:	f383 8811 	msr	BASEPRI, r3
 8004940:	f3bf 8f6f 	isb	sy
 8004944:	f3bf 8f4f 	dsb	sy
 8004948:	b662      	cpsie	i
 800494a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800494c:	bf00      	nop
 800494e:	e7fe      	b.n	800494e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	2b02      	cmp	r3, #2
 8004954:	d103      	bne.n	800495e <xQueueGenericSend+0x76>
 8004956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800495a:	2b01      	cmp	r3, #1
 800495c:	d101      	bne.n	8004962 <xQueueGenericSend+0x7a>
 800495e:	2301      	movs	r3, #1
 8004960:	e000      	b.n	8004964 <xQueueGenericSend+0x7c>
 8004962:	2300      	movs	r3, #0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d10c      	bne.n	8004982 <xQueueGenericSend+0x9a>
	__asm volatile
 8004968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800496c:	b672      	cpsid	i
 800496e:	f383 8811 	msr	BASEPRI, r3
 8004972:	f3bf 8f6f 	isb	sy
 8004976:	f3bf 8f4f 	dsb	sy
 800497a:	b662      	cpsie	i
 800497c:	623b      	str	r3, [r7, #32]
}
 800497e:	bf00      	nop
 8004980:	e7fe      	b.n	8004980 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004982:	f001 fab9 	bl	8005ef8 <xTaskGetSchedulerState>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d102      	bne.n	8004992 <xQueueGenericSend+0xaa>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d101      	bne.n	8004996 <xQueueGenericSend+0xae>
 8004992:	2301      	movs	r3, #1
 8004994:	e000      	b.n	8004998 <xQueueGenericSend+0xb0>
 8004996:	2300      	movs	r3, #0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d10c      	bne.n	80049b6 <xQueueGenericSend+0xce>
	__asm volatile
 800499c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a0:	b672      	cpsid	i
 80049a2:	f383 8811 	msr	BASEPRI, r3
 80049a6:	f3bf 8f6f 	isb	sy
 80049aa:	f3bf 8f4f 	dsb	sy
 80049ae:	b662      	cpsie	i
 80049b0:	61fb      	str	r3, [r7, #28]
}
 80049b2:	bf00      	nop
 80049b4:	e7fe      	b.n	80049b4 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80049b6:	f002 f821 	bl	80069fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80049ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d302      	bcc.n	80049cc <xQueueGenericSend+0xe4>
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d129      	bne.n	8004a20 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80049cc:	683a      	ldr	r2, [r7, #0]
 80049ce:	68b9      	ldr	r1, [r7, #8]
 80049d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049d2:	f000 fa15 	bl	8004e00 <prvCopyDataToQueue>
 80049d6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d010      	beq.n	8004a02 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e2:	3324      	adds	r3, #36	; 0x24
 80049e4:	4618      	mov	r0, r3
 80049e6:	f001 f857 	bl	8005a98 <xTaskRemoveFromEventList>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d013      	beq.n	8004a18 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80049f0:	4b3f      	ldr	r3, [pc, #252]	; (8004af0 <xQueueGenericSend+0x208>)
 80049f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049f6:	601a      	str	r2, [r3, #0]
 80049f8:	f3bf 8f4f 	dsb	sy
 80049fc:	f3bf 8f6f 	isb	sy
 8004a00:	e00a      	b.n	8004a18 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d007      	beq.n	8004a18 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004a08:	4b39      	ldr	r3, [pc, #228]	; (8004af0 <xQueueGenericSend+0x208>)
 8004a0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a0e:	601a      	str	r2, [r3, #0]
 8004a10:	f3bf 8f4f 	dsb	sy
 8004a14:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004a18:	f002 f824 	bl	8006a64 <vPortExitCritical>
				return pdPASS;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e063      	b.n	8004ae8 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d103      	bne.n	8004a2e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004a26:	f002 f81d 	bl	8006a64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	e05c      	b.n	8004ae8 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d106      	bne.n	8004a42 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a34:	f107 0314 	add.w	r3, r7, #20
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f001 f8f9 	bl	8005c30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a42:	f002 f80f 	bl	8006a64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a46:	f000 fdb3 	bl	80055b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a4a:	f001 ffd7 	bl	80069fc <vPortEnterCritical>
 8004a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a54:	b25b      	sxtb	r3, r3
 8004a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a5a:	d103      	bne.n	8004a64 <xQueueGenericSend+0x17c>
 8004a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a6a:	b25b      	sxtb	r3, r3
 8004a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a70:	d103      	bne.n	8004a7a <xQueueGenericSend+0x192>
 8004a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a7a:	f001 fff3 	bl	8006a64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a7e:	1d3a      	adds	r2, r7, #4
 8004a80:	f107 0314 	add.w	r3, r7, #20
 8004a84:	4611      	mov	r1, r2
 8004a86:	4618      	mov	r0, r3
 8004a88:	f001 f8e8 	bl	8005c5c <xTaskCheckForTimeOut>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d124      	bne.n	8004adc <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004a92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a94:	f000 faac 	bl	8004ff0 <prvIsQueueFull>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d018      	beq.n	8004ad0 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa0:	3310      	adds	r3, #16
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	4611      	mov	r1, r2
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f000 ff62 	bl	8005970 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004aac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004aae:	f000 fa37 	bl	8004f20 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004ab2:	f000 fd8b 	bl	80055cc <xTaskResumeAll>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	f47f af7c 	bne.w	80049b6 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8004abe:	4b0c      	ldr	r3, [pc, #48]	; (8004af0 <xQueueGenericSend+0x208>)
 8004ac0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ac4:	601a      	str	r2, [r3, #0]
 8004ac6:	f3bf 8f4f 	dsb	sy
 8004aca:	f3bf 8f6f 	isb	sy
 8004ace:	e772      	b.n	80049b6 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004ad0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ad2:	f000 fa25 	bl	8004f20 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ad6:	f000 fd79 	bl	80055cc <xTaskResumeAll>
 8004ada:	e76c      	b.n	80049b6 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004adc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ade:	f000 fa1f 	bl	8004f20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ae2:	f000 fd73 	bl	80055cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004ae6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3738      	adds	r7, #56	; 0x38
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	e000ed04 	.word	0xe000ed04

08004af4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b08e      	sub	sp, #56	; 0x38
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	607a      	str	r2, [r7, #4]
 8004b00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d10c      	bne.n	8004b26 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8004b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b10:	b672      	cpsid	i
 8004b12:	f383 8811 	msr	BASEPRI, r3
 8004b16:	f3bf 8f6f 	isb	sy
 8004b1a:	f3bf 8f4f 	dsb	sy
 8004b1e:	b662      	cpsie	i
 8004b20:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004b22:	bf00      	nop
 8004b24:	e7fe      	b.n	8004b24 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d103      	bne.n	8004b34 <xQueueGenericSendFromISR+0x40>
 8004b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d101      	bne.n	8004b38 <xQueueGenericSendFromISR+0x44>
 8004b34:	2301      	movs	r3, #1
 8004b36:	e000      	b.n	8004b3a <xQueueGenericSendFromISR+0x46>
 8004b38:	2300      	movs	r3, #0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d10c      	bne.n	8004b58 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8004b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b42:	b672      	cpsid	i
 8004b44:	f383 8811 	msr	BASEPRI, r3
 8004b48:	f3bf 8f6f 	isb	sy
 8004b4c:	f3bf 8f4f 	dsb	sy
 8004b50:	b662      	cpsie	i
 8004b52:	623b      	str	r3, [r7, #32]
}
 8004b54:	bf00      	nop
 8004b56:	e7fe      	b.n	8004b56 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d103      	bne.n	8004b66 <xQueueGenericSendFromISR+0x72>
 8004b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d101      	bne.n	8004b6a <xQueueGenericSendFromISR+0x76>
 8004b66:	2301      	movs	r3, #1
 8004b68:	e000      	b.n	8004b6c <xQueueGenericSendFromISR+0x78>
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d10c      	bne.n	8004b8a <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8004b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b74:	b672      	cpsid	i
 8004b76:	f383 8811 	msr	BASEPRI, r3
 8004b7a:	f3bf 8f6f 	isb	sy
 8004b7e:	f3bf 8f4f 	dsb	sy
 8004b82:	b662      	cpsie	i
 8004b84:	61fb      	str	r3, [r7, #28]
}
 8004b86:	bf00      	nop
 8004b88:	e7fe      	b.n	8004b88 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004b8a:	f002 f81f 	bl	8006bcc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004b8e:	f3ef 8211 	mrs	r2, BASEPRI
 8004b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b96:	b672      	cpsid	i
 8004b98:	f383 8811 	msr	BASEPRI, r3
 8004b9c:	f3bf 8f6f 	isb	sy
 8004ba0:	f3bf 8f4f 	dsb	sy
 8004ba4:	b662      	cpsie	i
 8004ba6:	61ba      	str	r2, [r7, #24]
 8004ba8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004baa:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004bac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d302      	bcc.n	8004bc0 <xQueueGenericSendFromISR+0xcc>
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d12c      	bne.n	8004c1a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004bc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004bca:	683a      	ldr	r2, [r7, #0]
 8004bcc:	68b9      	ldr	r1, [r7, #8]
 8004bce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004bd0:	f000 f916 	bl	8004e00 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004bd4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bdc:	d112      	bne.n	8004c04 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d016      	beq.n	8004c14 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be8:	3324      	adds	r3, #36	; 0x24
 8004bea:	4618      	mov	r0, r3
 8004bec:	f000 ff54 	bl	8005a98 <xTaskRemoveFromEventList>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00e      	beq.n	8004c14 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00b      	beq.n	8004c14 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	601a      	str	r2, [r3, #0]
 8004c02:	e007      	b.n	8004c14 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004c04:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004c08:	3301      	adds	r3, #1
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	b25a      	sxtb	r2, r3
 8004c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004c14:	2301      	movs	r3, #1
 8004c16:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004c18:	e001      	b.n	8004c1e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	637b      	str	r3, [r7, #52]	; 0x34
 8004c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c20:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004c28:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004c2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3738      	adds	r7, #56	; 0x38
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b08c      	sub	sp, #48	; 0x30
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004c40:	2300      	movs	r3, #0
 8004c42:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d10c      	bne.n	8004c68 <xQueueReceive+0x34>
	__asm volatile
 8004c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c52:	b672      	cpsid	i
 8004c54:	f383 8811 	msr	BASEPRI, r3
 8004c58:	f3bf 8f6f 	isb	sy
 8004c5c:	f3bf 8f4f 	dsb	sy
 8004c60:	b662      	cpsie	i
 8004c62:	623b      	str	r3, [r7, #32]
}
 8004c64:	bf00      	nop
 8004c66:	e7fe      	b.n	8004c66 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d103      	bne.n	8004c76 <xQueueReceive+0x42>
 8004c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d101      	bne.n	8004c7a <xQueueReceive+0x46>
 8004c76:	2301      	movs	r3, #1
 8004c78:	e000      	b.n	8004c7c <xQueueReceive+0x48>
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d10c      	bne.n	8004c9a <xQueueReceive+0x66>
	__asm volatile
 8004c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c84:	b672      	cpsid	i
 8004c86:	f383 8811 	msr	BASEPRI, r3
 8004c8a:	f3bf 8f6f 	isb	sy
 8004c8e:	f3bf 8f4f 	dsb	sy
 8004c92:	b662      	cpsie	i
 8004c94:	61fb      	str	r3, [r7, #28]
}
 8004c96:	bf00      	nop
 8004c98:	e7fe      	b.n	8004c98 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c9a:	f001 f92d 	bl	8005ef8 <xTaskGetSchedulerState>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d102      	bne.n	8004caa <xQueueReceive+0x76>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d101      	bne.n	8004cae <xQueueReceive+0x7a>
 8004caa:	2301      	movs	r3, #1
 8004cac:	e000      	b.n	8004cb0 <xQueueReceive+0x7c>
 8004cae:	2300      	movs	r3, #0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d10c      	bne.n	8004cce <xQueueReceive+0x9a>
	__asm volatile
 8004cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb8:	b672      	cpsid	i
 8004cba:	f383 8811 	msr	BASEPRI, r3
 8004cbe:	f3bf 8f6f 	isb	sy
 8004cc2:	f3bf 8f4f 	dsb	sy
 8004cc6:	b662      	cpsie	i
 8004cc8:	61bb      	str	r3, [r7, #24]
}
 8004cca:	bf00      	nop
 8004ccc:	e7fe      	b.n	8004ccc <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004cce:	f001 fe95 	bl	80069fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d01f      	beq.n	8004d1e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004cde:	68b9      	ldr	r1, [r7, #8]
 8004ce0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ce2:	f000 f8f7 	bl	8004ed4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce8:	1e5a      	subs	r2, r3, #1
 8004cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00f      	beq.n	8004d16 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf8:	3310      	adds	r3, #16
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f000 fecc 	bl	8005a98 <xTaskRemoveFromEventList>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d007      	beq.n	8004d16 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004d06:	4b3d      	ldr	r3, [pc, #244]	; (8004dfc <xQueueReceive+0x1c8>)
 8004d08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d0c:	601a      	str	r2, [r3, #0]
 8004d0e:	f3bf 8f4f 	dsb	sy
 8004d12:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004d16:	f001 fea5 	bl	8006a64 <vPortExitCritical>
				return pdPASS;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e069      	b.n	8004df2 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d103      	bne.n	8004d2c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004d24:	f001 fe9e 	bl	8006a64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	e062      	b.n	8004df2 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d106      	bne.n	8004d40 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d32:	f107 0310 	add.w	r3, r7, #16
 8004d36:	4618      	mov	r0, r3
 8004d38:	f000 ff7a 	bl	8005c30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d40:	f001 fe90 	bl	8006a64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d44:	f000 fc34 	bl	80055b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d48:	f001 fe58 	bl	80069fc <vPortEnterCritical>
 8004d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d52:	b25b      	sxtb	r3, r3
 8004d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d58:	d103      	bne.n	8004d62 <xQueueReceive+0x12e>
 8004d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d68:	b25b      	sxtb	r3, r3
 8004d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d6e:	d103      	bne.n	8004d78 <xQueueReceive+0x144>
 8004d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d72:	2200      	movs	r2, #0
 8004d74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d78:	f001 fe74 	bl	8006a64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d7c:	1d3a      	adds	r2, r7, #4
 8004d7e:	f107 0310 	add.w	r3, r7, #16
 8004d82:	4611      	mov	r1, r2
 8004d84:	4618      	mov	r0, r3
 8004d86:	f000 ff69 	bl	8005c5c <xTaskCheckForTimeOut>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d123      	bne.n	8004dd8 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d92:	f000 f917 	bl	8004fc4 <prvIsQueueEmpty>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d017      	beq.n	8004dcc <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d9e:	3324      	adds	r3, #36	; 0x24
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	4611      	mov	r1, r2
 8004da4:	4618      	mov	r0, r3
 8004da6:	f000 fde3 	bl	8005970 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004daa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dac:	f000 f8b8 	bl	8004f20 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004db0:	f000 fc0c 	bl	80055cc <xTaskResumeAll>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d189      	bne.n	8004cce <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8004dba:	4b10      	ldr	r3, [pc, #64]	; (8004dfc <xQueueReceive+0x1c8>)
 8004dbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dc0:	601a      	str	r2, [r3, #0]
 8004dc2:	f3bf 8f4f 	dsb	sy
 8004dc6:	f3bf 8f6f 	isb	sy
 8004dca:	e780      	b.n	8004cce <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004dcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dce:	f000 f8a7 	bl	8004f20 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004dd2:	f000 fbfb 	bl	80055cc <xTaskResumeAll>
 8004dd6:	e77a      	b.n	8004cce <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004dd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dda:	f000 f8a1 	bl	8004f20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004dde:	f000 fbf5 	bl	80055cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004de2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004de4:	f000 f8ee 	bl	8004fc4 <prvIsQueueEmpty>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	f43f af6f 	beq.w	8004cce <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004df0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3730      	adds	r7, #48	; 0x30
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	e000ed04 	.word	0xe000ed04

08004e00 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b086      	sub	sp, #24
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e14:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d10d      	bne.n	8004e3a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d14d      	bne.n	8004ec2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f001 f882 	bl	8005f34 <xTaskPriorityDisinherit>
 8004e30:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2200      	movs	r2, #0
 8004e36:	609a      	str	r2, [r3, #8]
 8004e38:	e043      	b.n	8004ec2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d119      	bne.n	8004e74 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6858      	ldr	r0, [r3, #4]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e48:	461a      	mov	r2, r3
 8004e4a:	68b9      	ldr	r1, [r7, #8]
 8004e4c:	f003 ff87 	bl	8008d5e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	685a      	ldr	r2, [r3, #4]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e58:	441a      	add	r2, r3
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	685a      	ldr	r2, [r3, #4]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d32b      	bcc.n	8004ec2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	605a      	str	r2, [r3, #4]
 8004e72:	e026      	b.n	8004ec2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	68d8      	ldr	r0, [r3, #12]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	68b9      	ldr	r1, [r7, #8]
 8004e80:	f003 ff6d 	bl	8008d5e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	68da      	ldr	r2, [r3, #12]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8c:	425b      	negs	r3, r3
 8004e8e:	441a      	add	r2, r3
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	68da      	ldr	r2, [r3, #12]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d207      	bcs.n	8004eb0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	689a      	ldr	r2, [r3, #8]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea8:	425b      	negs	r3, r3
 8004eaa:	441a      	add	r2, r3
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d105      	bne.n	8004ec2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d002      	beq.n	8004ec2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	1c5a      	adds	r2, r3, #1
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004eca:	697b      	ldr	r3, [r7, #20]
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3718      	adds	r7, #24
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d018      	beq.n	8004f18 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	68da      	ldr	r2, [r3, #12]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eee:	441a      	add	r2, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	68da      	ldr	r2, [r3, #12]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d303      	bcc.n	8004f08 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	68d9      	ldr	r1, [r3, #12]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f10:	461a      	mov	r2, r3
 8004f12:	6838      	ldr	r0, [r7, #0]
 8004f14:	f003 ff23 	bl	8008d5e <memcpy>
	}
}
 8004f18:	bf00      	nop
 8004f1a:	3708      	adds	r7, #8
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004f28:	f001 fd68 	bl	80069fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f32:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f34:	e011      	b.n	8004f5a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d012      	beq.n	8004f64 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	3324      	adds	r3, #36	; 0x24
 8004f42:	4618      	mov	r0, r3
 8004f44:	f000 fda8 	bl	8005a98 <xTaskRemoveFromEventList>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d001      	beq.n	8004f52 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004f4e:	f000 feeb 	bl	8005d28 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004f52:	7bfb      	ldrb	r3, [r7, #15]
 8004f54:	3b01      	subs	r3, #1
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	dce9      	bgt.n	8004f36 <prvUnlockQueue+0x16>
 8004f62:	e000      	b.n	8004f66 <prvUnlockQueue+0x46>
					break;
 8004f64:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	22ff      	movs	r2, #255	; 0xff
 8004f6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004f6e:	f001 fd79 	bl	8006a64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004f72:	f001 fd43 	bl	80069fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f7c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f7e:	e011      	b.n	8004fa4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d012      	beq.n	8004fae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	3310      	adds	r3, #16
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f000 fd83 	bl	8005a98 <xTaskRemoveFromEventList>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d001      	beq.n	8004f9c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004f98:	f000 fec6 	bl	8005d28 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004f9c:	7bbb      	ldrb	r3, [r7, #14]
 8004f9e:	3b01      	subs	r3, #1
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004fa4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	dce9      	bgt.n	8004f80 <prvUnlockQueue+0x60>
 8004fac:	e000      	b.n	8004fb0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004fae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	22ff      	movs	r2, #255	; 0xff
 8004fb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004fb8:	f001 fd54 	bl	8006a64 <vPortExitCritical>
}
 8004fbc:	bf00      	nop
 8004fbe:	3710      	adds	r7, #16
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004fcc:	f001 fd16 	bl	80069fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d102      	bne.n	8004fde <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	60fb      	str	r3, [r7, #12]
 8004fdc:	e001      	b.n	8004fe2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004fe2:	f001 fd3f 	bl	8006a64 <vPortExitCritical>

	return xReturn;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3710      	adds	r7, #16
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004ff8:	f001 fd00 	bl	80069fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005004:	429a      	cmp	r2, r3
 8005006:	d102      	bne.n	800500e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005008:	2301      	movs	r3, #1
 800500a:	60fb      	str	r3, [r7, #12]
 800500c:	e001      	b.n	8005012 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800500e:	2300      	movs	r3, #0
 8005010:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005012:	f001 fd27 	bl	8006a64 <vPortExitCritical>

	return xReturn;
 8005016:	68fb      	ldr	r3, [r7, #12]
}
 8005018:	4618      	mov	r0, r3
 800501a:	3710      	adds	r7, #16
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005020:	b480      	push	{r7}
 8005022:	b085      	sub	sp, #20
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800502a:	2300      	movs	r3, #0
 800502c:	60fb      	str	r3, [r7, #12]
 800502e:	e014      	b.n	800505a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005030:	4a0f      	ldr	r2, [pc, #60]	; (8005070 <vQueueAddToRegistry+0x50>)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d10b      	bne.n	8005054 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800503c:	490c      	ldr	r1, [pc, #48]	; (8005070 <vQueueAddToRegistry+0x50>)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	683a      	ldr	r2, [r7, #0]
 8005042:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005046:	4a0a      	ldr	r2, [pc, #40]	; (8005070 <vQueueAddToRegistry+0x50>)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	00db      	lsls	r3, r3, #3
 800504c:	4413      	add	r3, r2
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005052:	e006      	b.n	8005062 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	3301      	adds	r3, #1
 8005058:	60fb      	str	r3, [r7, #12]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2b07      	cmp	r3, #7
 800505e:	d9e7      	bls.n	8005030 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005060:	bf00      	nop
 8005062:	bf00      	nop
 8005064:	3714      	adds	r7, #20
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	20004d44 	.word	0x20004d44

08005074 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005074:	b580      	push	{r7, lr}
 8005076:	b086      	sub	sp, #24
 8005078:	af00      	add	r7, sp, #0
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005084:	f001 fcba 	bl	80069fc <vPortEnterCritical>
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800508e:	b25b      	sxtb	r3, r3
 8005090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005094:	d103      	bne.n	800509e <vQueueWaitForMessageRestricted+0x2a>
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050a4:	b25b      	sxtb	r3, r3
 80050a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050aa:	d103      	bne.n	80050b4 <vQueueWaitForMessageRestricted+0x40>
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050b4:	f001 fcd6 	bl	8006a64 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d106      	bne.n	80050ce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	3324      	adds	r3, #36	; 0x24
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	68b9      	ldr	r1, [r7, #8]
 80050c8:	4618      	mov	r0, r3
 80050ca:	f000 fcb7 	bl	8005a3c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80050ce:	6978      	ldr	r0, [r7, #20]
 80050d0:	f7ff ff26 	bl	8004f20 <prvUnlockQueue>
	}
 80050d4:	bf00      	nop
 80050d6:	3718      	adds	r7, #24
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b08e      	sub	sp, #56	; 0x38
 80050e0:	af04      	add	r7, sp, #16
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	607a      	str	r2, [r7, #4]
 80050e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80050ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d10c      	bne.n	800510a <xTaskCreateStatic+0x2e>
	__asm volatile
 80050f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f4:	b672      	cpsid	i
 80050f6:	f383 8811 	msr	BASEPRI, r3
 80050fa:	f3bf 8f6f 	isb	sy
 80050fe:	f3bf 8f4f 	dsb	sy
 8005102:	b662      	cpsie	i
 8005104:	623b      	str	r3, [r7, #32]
}
 8005106:	bf00      	nop
 8005108:	e7fe      	b.n	8005108 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800510a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800510c:	2b00      	cmp	r3, #0
 800510e:	d10c      	bne.n	800512a <xTaskCreateStatic+0x4e>
	__asm volatile
 8005110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005114:	b672      	cpsid	i
 8005116:	f383 8811 	msr	BASEPRI, r3
 800511a:	f3bf 8f6f 	isb	sy
 800511e:	f3bf 8f4f 	dsb	sy
 8005122:	b662      	cpsie	i
 8005124:	61fb      	str	r3, [r7, #28]
}
 8005126:	bf00      	nop
 8005128:	e7fe      	b.n	8005128 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800512a:	23bc      	movs	r3, #188	; 0xbc
 800512c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	2bbc      	cmp	r3, #188	; 0xbc
 8005132:	d00c      	beq.n	800514e <xTaskCreateStatic+0x72>
	__asm volatile
 8005134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005138:	b672      	cpsid	i
 800513a:	f383 8811 	msr	BASEPRI, r3
 800513e:	f3bf 8f6f 	isb	sy
 8005142:	f3bf 8f4f 	dsb	sy
 8005146:	b662      	cpsie	i
 8005148:	61bb      	str	r3, [r7, #24]
}
 800514a:	bf00      	nop
 800514c:	e7fe      	b.n	800514c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800514e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005152:	2b00      	cmp	r3, #0
 8005154:	d01e      	beq.n	8005194 <xTaskCreateStatic+0xb8>
 8005156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005158:	2b00      	cmp	r3, #0
 800515a:	d01b      	beq.n	8005194 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800515c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800515e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005162:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005164:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005168:	2202      	movs	r2, #2
 800516a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800516e:	2300      	movs	r3, #0
 8005170:	9303      	str	r3, [sp, #12]
 8005172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005174:	9302      	str	r3, [sp, #8]
 8005176:	f107 0314 	add.w	r3, r7, #20
 800517a:	9301      	str	r3, [sp, #4]
 800517c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800517e:	9300      	str	r3, [sp, #0]
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	68b9      	ldr	r1, [r7, #8]
 8005186:	68f8      	ldr	r0, [r7, #12]
 8005188:	f000 f850 	bl	800522c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800518c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800518e:	f000 f8f5 	bl	800537c <prvAddNewTaskToReadyList>
 8005192:	e001      	b.n	8005198 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8005194:	2300      	movs	r3, #0
 8005196:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005198:	697b      	ldr	r3, [r7, #20]
	}
 800519a:	4618      	mov	r0, r3
 800519c:	3728      	adds	r7, #40	; 0x28
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}

080051a2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80051a2:	b580      	push	{r7, lr}
 80051a4:	b08c      	sub	sp, #48	; 0x30
 80051a6:	af04      	add	r7, sp, #16
 80051a8:	60f8      	str	r0, [r7, #12]
 80051aa:	60b9      	str	r1, [r7, #8]
 80051ac:	603b      	str	r3, [r7, #0]
 80051ae:	4613      	mov	r3, r2
 80051b0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80051b2:	88fb      	ldrh	r3, [r7, #6]
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	4618      	mov	r0, r3
 80051b8:	f001 fd4c 	bl	8006c54 <pvPortMalloc>
 80051bc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d00e      	beq.n	80051e2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80051c4:	20bc      	movs	r0, #188	; 0xbc
 80051c6:	f001 fd45 	bl	8006c54 <pvPortMalloc>
 80051ca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d003      	beq.n	80051da <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	631a      	str	r2, [r3, #48]	; 0x30
 80051d8:	e005      	b.n	80051e6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80051da:	6978      	ldr	r0, [r7, #20]
 80051dc:	f001 fe04 	bl	8006de8 <vPortFree>
 80051e0:	e001      	b.n	80051e6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80051e2:	2300      	movs	r3, #0
 80051e4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d017      	beq.n	800521c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80051f4:	88fa      	ldrh	r2, [r7, #6]
 80051f6:	2300      	movs	r3, #0
 80051f8:	9303      	str	r3, [sp, #12]
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	9302      	str	r3, [sp, #8]
 80051fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005200:	9301      	str	r3, [sp, #4]
 8005202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005204:	9300      	str	r3, [sp, #0]
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	68b9      	ldr	r1, [r7, #8]
 800520a:	68f8      	ldr	r0, [r7, #12]
 800520c:	f000 f80e 	bl	800522c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005210:	69f8      	ldr	r0, [r7, #28]
 8005212:	f000 f8b3 	bl	800537c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005216:	2301      	movs	r3, #1
 8005218:	61bb      	str	r3, [r7, #24]
 800521a:	e002      	b.n	8005222 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800521c:	f04f 33ff 	mov.w	r3, #4294967295
 8005220:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005222:	69bb      	ldr	r3, [r7, #24]
	}
 8005224:	4618      	mov	r0, r3
 8005226:	3720      	adds	r7, #32
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b088      	sub	sp, #32
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	607a      	str	r2, [r7, #4]
 8005238:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800523a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800523c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	461a      	mov	r2, r3
 8005244:	21a5      	movs	r1, #165	; 0xa5
 8005246:	f003 fd98 	bl	8008d7a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800524a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800524c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800524e:	6879      	ldr	r1, [r7, #4]
 8005250:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005254:	440b      	add	r3, r1
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	4413      	add	r3, r2
 800525a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	f023 0307 	bic.w	r3, r3, #7
 8005262:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	f003 0307 	and.w	r3, r3, #7
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00c      	beq.n	8005288 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800526e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005272:	b672      	cpsid	i
 8005274:	f383 8811 	msr	BASEPRI, r3
 8005278:	f3bf 8f6f 	isb	sy
 800527c:	f3bf 8f4f 	dsb	sy
 8005280:	b662      	cpsie	i
 8005282:	617b      	str	r3, [r7, #20]
}
 8005284:	bf00      	nop
 8005286:	e7fe      	b.n	8005286 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d01f      	beq.n	80052ce <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800528e:	2300      	movs	r3, #0
 8005290:	61fb      	str	r3, [r7, #28]
 8005292:	e012      	b.n	80052ba <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005294:	68ba      	ldr	r2, [r7, #8]
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	4413      	add	r3, r2
 800529a:	7819      	ldrb	r1, [r3, #0]
 800529c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	4413      	add	r3, r2
 80052a2:	3334      	adds	r3, #52	; 0x34
 80052a4:	460a      	mov	r2, r1
 80052a6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80052a8:	68ba      	ldr	r2, [r7, #8]
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	4413      	add	r3, r2
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d006      	beq.n	80052c2 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	3301      	adds	r3, #1
 80052b8:	61fb      	str	r3, [r7, #28]
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	2b0f      	cmp	r3, #15
 80052be:	d9e9      	bls.n	8005294 <prvInitialiseNewTask+0x68>
 80052c0:	e000      	b.n	80052c4 <prvInitialiseNewTask+0x98>
			{
				break;
 80052c2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80052c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052cc:	e003      	b.n	80052d6 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80052ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80052d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d8:	2b37      	cmp	r3, #55	; 0x37
 80052da:	d901      	bls.n	80052e0 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80052dc:	2337      	movs	r3, #55	; 0x37
 80052de:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80052e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052e4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80052e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052ea:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80052ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ee:	2200      	movs	r2, #0
 80052f0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80052f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f4:	3304      	adds	r3, #4
 80052f6:	4618      	mov	r0, r3
 80052f8:	f7ff f952 	bl	80045a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80052fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052fe:	3318      	adds	r3, #24
 8005300:	4618      	mov	r0, r3
 8005302:	f7ff f94d 	bl	80045a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005308:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800530a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800530c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800530e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005314:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005318:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800531a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800531c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531e:	2200      	movs	r2, #0
 8005320:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005326:	2200      	movs	r2, #0
 8005328:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800532c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532e:	3354      	adds	r3, #84	; 0x54
 8005330:	2260      	movs	r2, #96	; 0x60
 8005332:	2100      	movs	r1, #0
 8005334:	4618      	mov	r0, r3
 8005336:	f003 fd20 	bl	8008d7a <memset>
 800533a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533c:	4a0c      	ldr	r2, [pc, #48]	; (8005370 <prvInitialiseNewTask+0x144>)
 800533e:	659a      	str	r2, [r3, #88]	; 0x58
 8005340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005342:	4a0c      	ldr	r2, [pc, #48]	; (8005374 <prvInitialiseNewTask+0x148>)
 8005344:	65da      	str	r2, [r3, #92]	; 0x5c
 8005346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005348:	4a0b      	ldr	r2, [pc, #44]	; (8005378 <prvInitialiseNewTask+0x14c>)
 800534a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800534c:	683a      	ldr	r2, [r7, #0]
 800534e:	68f9      	ldr	r1, [r7, #12]
 8005350:	69b8      	ldr	r0, [r7, #24]
 8005352:	f001 fa49 	bl	80067e8 <pxPortInitialiseStack>
 8005356:	4602      	mov	r2, r0
 8005358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800535c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800535e:	2b00      	cmp	r3, #0
 8005360:	d002      	beq.n	8005368 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005364:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005366:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005368:	bf00      	nop
 800536a:	3720      	adds	r7, #32
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}
 8005370:	0800a008 	.word	0x0800a008
 8005374:	0800a028 	.word	0x0800a028
 8005378:	08009fe8 	.word	0x08009fe8

0800537c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b082      	sub	sp, #8
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005384:	f001 fb3a 	bl	80069fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005388:	4b2d      	ldr	r3, [pc, #180]	; (8005440 <prvAddNewTaskToReadyList+0xc4>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	3301      	adds	r3, #1
 800538e:	4a2c      	ldr	r2, [pc, #176]	; (8005440 <prvAddNewTaskToReadyList+0xc4>)
 8005390:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005392:	4b2c      	ldr	r3, [pc, #176]	; (8005444 <prvAddNewTaskToReadyList+0xc8>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d109      	bne.n	80053ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800539a:	4a2a      	ldr	r2, [pc, #168]	; (8005444 <prvAddNewTaskToReadyList+0xc8>)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80053a0:	4b27      	ldr	r3, [pc, #156]	; (8005440 <prvAddNewTaskToReadyList+0xc4>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d110      	bne.n	80053ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80053a8:	f000 fce2 	bl	8005d70 <prvInitialiseTaskLists>
 80053ac:	e00d      	b.n	80053ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80053ae:	4b26      	ldr	r3, [pc, #152]	; (8005448 <prvAddNewTaskToReadyList+0xcc>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d109      	bne.n	80053ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80053b6:	4b23      	ldr	r3, [pc, #140]	; (8005444 <prvAddNewTaskToReadyList+0xc8>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d802      	bhi.n	80053ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80053c4:	4a1f      	ldr	r2, [pc, #124]	; (8005444 <prvAddNewTaskToReadyList+0xc8>)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80053ca:	4b20      	ldr	r3, [pc, #128]	; (800544c <prvAddNewTaskToReadyList+0xd0>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	3301      	adds	r3, #1
 80053d0:	4a1e      	ldr	r2, [pc, #120]	; (800544c <prvAddNewTaskToReadyList+0xd0>)
 80053d2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80053d4:	4b1d      	ldr	r3, [pc, #116]	; (800544c <prvAddNewTaskToReadyList+0xd0>)
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053e0:	4b1b      	ldr	r3, [pc, #108]	; (8005450 <prvAddNewTaskToReadyList+0xd4>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d903      	bls.n	80053f0 <prvAddNewTaskToReadyList+0x74>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ec:	4a18      	ldr	r2, [pc, #96]	; (8005450 <prvAddNewTaskToReadyList+0xd4>)
 80053ee:	6013      	str	r3, [r2, #0]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053f4:	4613      	mov	r3, r2
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	4413      	add	r3, r2
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	4a15      	ldr	r2, [pc, #84]	; (8005454 <prvAddNewTaskToReadyList+0xd8>)
 80053fe:	441a      	add	r2, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	3304      	adds	r3, #4
 8005404:	4619      	mov	r1, r3
 8005406:	4610      	mov	r0, r2
 8005408:	f7ff f8d7 	bl	80045ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800540c:	f001 fb2a 	bl	8006a64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005410:	4b0d      	ldr	r3, [pc, #52]	; (8005448 <prvAddNewTaskToReadyList+0xcc>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d00e      	beq.n	8005436 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005418:	4b0a      	ldr	r3, [pc, #40]	; (8005444 <prvAddNewTaskToReadyList+0xc8>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005422:	429a      	cmp	r2, r3
 8005424:	d207      	bcs.n	8005436 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005426:	4b0c      	ldr	r3, [pc, #48]	; (8005458 <prvAddNewTaskToReadyList+0xdc>)
 8005428:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800542c:	601a      	str	r2, [r3, #0]
 800542e:	f3bf 8f4f 	dsb	sy
 8005432:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005436:	bf00      	nop
 8005438:	3708      	adds	r7, #8
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	20000d68 	.word	0x20000d68
 8005444:	20000894 	.word	0x20000894
 8005448:	20000d74 	.word	0x20000d74
 800544c:	20000d84 	.word	0x20000d84
 8005450:	20000d70 	.word	0x20000d70
 8005454:	20000898 	.word	0x20000898
 8005458:	e000ed04 	.word	0xe000ed04

0800545c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005464:	2300      	movs	r3, #0
 8005466:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d019      	beq.n	80054a2 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800546e:	4b14      	ldr	r3, [pc, #80]	; (80054c0 <vTaskDelay+0x64>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d00c      	beq.n	8005490 <vTaskDelay+0x34>
	__asm volatile
 8005476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800547a:	b672      	cpsid	i
 800547c:	f383 8811 	msr	BASEPRI, r3
 8005480:	f3bf 8f6f 	isb	sy
 8005484:	f3bf 8f4f 	dsb	sy
 8005488:	b662      	cpsie	i
 800548a:	60bb      	str	r3, [r7, #8]
}
 800548c:	bf00      	nop
 800548e:	e7fe      	b.n	800548e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8005490:	f000 f88e 	bl	80055b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005494:	2100      	movs	r1, #0
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 fdd6 	bl	8006048 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800549c:	f000 f896 	bl	80055cc <xTaskResumeAll>
 80054a0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d107      	bne.n	80054b8 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80054a8:	4b06      	ldr	r3, [pc, #24]	; (80054c4 <vTaskDelay+0x68>)
 80054aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054ae:	601a      	str	r2, [r3, #0]
 80054b0:	f3bf 8f4f 	dsb	sy
 80054b4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80054b8:	bf00      	nop
 80054ba:	3710      	adds	r7, #16
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	20000d90 	.word	0x20000d90
 80054c4:	e000ed04 	.word	0xe000ed04

080054c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b08a      	sub	sp, #40	; 0x28
 80054cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80054ce:	2300      	movs	r3, #0
 80054d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80054d2:	2300      	movs	r3, #0
 80054d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80054d6:	463a      	mov	r2, r7
 80054d8:	1d39      	adds	r1, r7, #4
 80054da:	f107 0308 	add.w	r3, r7, #8
 80054de:	4618      	mov	r0, r3
 80054e0:	f7fe fe48 	bl	8004174 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80054e4:	6839      	ldr	r1, [r7, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	68ba      	ldr	r2, [r7, #8]
 80054ea:	9202      	str	r2, [sp, #8]
 80054ec:	9301      	str	r3, [sp, #4]
 80054ee:	2300      	movs	r3, #0
 80054f0:	9300      	str	r3, [sp, #0]
 80054f2:	2300      	movs	r3, #0
 80054f4:	460a      	mov	r2, r1
 80054f6:	4926      	ldr	r1, [pc, #152]	; (8005590 <vTaskStartScheduler+0xc8>)
 80054f8:	4826      	ldr	r0, [pc, #152]	; (8005594 <vTaskStartScheduler+0xcc>)
 80054fa:	f7ff fdef 	bl	80050dc <xTaskCreateStatic>
 80054fe:	4603      	mov	r3, r0
 8005500:	4a25      	ldr	r2, [pc, #148]	; (8005598 <vTaskStartScheduler+0xd0>)
 8005502:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005504:	4b24      	ldr	r3, [pc, #144]	; (8005598 <vTaskStartScheduler+0xd0>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d002      	beq.n	8005512 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800550c:	2301      	movs	r3, #1
 800550e:	617b      	str	r3, [r7, #20]
 8005510:	e001      	b.n	8005516 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005512:	2300      	movs	r3, #0
 8005514:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	2b01      	cmp	r3, #1
 800551a:	d102      	bne.n	8005522 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800551c:	f000 fde8 	bl	80060f0 <xTimerCreateTimerTask>
 8005520:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	2b01      	cmp	r3, #1
 8005526:	d11d      	bne.n	8005564 <vTaskStartScheduler+0x9c>
	__asm volatile
 8005528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800552c:	b672      	cpsid	i
 800552e:	f383 8811 	msr	BASEPRI, r3
 8005532:	f3bf 8f6f 	isb	sy
 8005536:	f3bf 8f4f 	dsb	sy
 800553a:	b662      	cpsie	i
 800553c:	613b      	str	r3, [r7, #16]
}
 800553e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005540:	4b16      	ldr	r3, [pc, #88]	; (800559c <vTaskStartScheduler+0xd4>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	3354      	adds	r3, #84	; 0x54
 8005546:	4a16      	ldr	r2, [pc, #88]	; (80055a0 <vTaskStartScheduler+0xd8>)
 8005548:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800554a:	4b16      	ldr	r3, [pc, #88]	; (80055a4 <vTaskStartScheduler+0xdc>)
 800554c:	f04f 32ff 	mov.w	r2, #4294967295
 8005550:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005552:	4b15      	ldr	r3, [pc, #84]	; (80055a8 <vTaskStartScheduler+0xe0>)
 8005554:	2201      	movs	r2, #1
 8005556:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005558:	4b14      	ldr	r3, [pc, #80]	; (80055ac <vTaskStartScheduler+0xe4>)
 800555a:	2200      	movs	r2, #0
 800555c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800555e:	f001 f9cf 	bl	8006900 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005562:	e010      	b.n	8005586 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800556a:	d10c      	bne.n	8005586 <vTaskStartScheduler+0xbe>
	__asm volatile
 800556c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005570:	b672      	cpsid	i
 8005572:	f383 8811 	msr	BASEPRI, r3
 8005576:	f3bf 8f6f 	isb	sy
 800557a:	f3bf 8f4f 	dsb	sy
 800557e:	b662      	cpsie	i
 8005580:	60fb      	str	r3, [r7, #12]
}
 8005582:	bf00      	nop
 8005584:	e7fe      	b.n	8005584 <vTaskStartScheduler+0xbc>
}
 8005586:	bf00      	nop
 8005588:	3718      	adds	r7, #24
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
 800558e:	bf00      	nop
 8005590:	08009ba8 	.word	0x08009ba8
 8005594:	08005d41 	.word	0x08005d41
 8005598:	20000d8c 	.word	0x20000d8c
 800559c:	20000894 	.word	0x20000894
 80055a0:	20000094 	.word	0x20000094
 80055a4:	20000d88 	.word	0x20000d88
 80055a8:	20000d74 	.word	0x20000d74
 80055ac:	20000d6c 	.word	0x20000d6c

080055b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80055b0:	b480      	push	{r7}
 80055b2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80055b4:	4b04      	ldr	r3, [pc, #16]	; (80055c8 <vTaskSuspendAll+0x18>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	3301      	adds	r3, #1
 80055ba:	4a03      	ldr	r2, [pc, #12]	; (80055c8 <vTaskSuspendAll+0x18>)
 80055bc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80055be:	bf00      	nop
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr
 80055c8:	20000d90 	.word	0x20000d90

080055cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80055d2:	2300      	movs	r3, #0
 80055d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80055d6:	2300      	movs	r3, #0
 80055d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80055da:	4b43      	ldr	r3, [pc, #268]	; (80056e8 <xTaskResumeAll+0x11c>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d10c      	bne.n	80055fc <xTaskResumeAll+0x30>
	__asm volatile
 80055e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e6:	b672      	cpsid	i
 80055e8:	f383 8811 	msr	BASEPRI, r3
 80055ec:	f3bf 8f6f 	isb	sy
 80055f0:	f3bf 8f4f 	dsb	sy
 80055f4:	b662      	cpsie	i
 80055f6:	603b      	str	r3, [r7, #0]
}
 80055f8:	bf00      	nop
 80055fa:	e7fe      	b.n	80055fa <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80055fc:	f001 f9fe 	bl	80069fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005600:	4b39      	ldr	r3, [pc, #228]	; (80056e8 <xTaskResumeAll+0x11c>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	3b01      	subs	r3, #1
 8005606:	4a38      	ldr	r2, [pc, #224]	; (80056e8 <xTaskResumeAll+0x11c>)
 8005608:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800560a:	4b37      	ldr	r3, [pc, #220]	; (80056e8 <xTaskResumeAll+0x11c>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d162      	bne.n	80056d8 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005612:	4b36      	ldr	r3, [pc, #216]	; (80056ec <xTaskResumeAll+0x120>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d05e      	beq.n	80056d8 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800561a:	e02f      	b.n	800567c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800561c:	4b34      	ldr	r3, [pc, #208]	; (80056f0 <xTaskResumeAll+0x124>)
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	3318      	adds	r3, #24
 8005628:	4618      	mov	r0, r3
 800562a:	f7ff f823 	bl	8004674 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	3304      	adds	r3, #4
 8005632:	4618      	mov	r0, r3
 8005634:	f7ff f81e 	bl	8004674 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800563c:	4b2d      	ldr	r3, [pc, #180]	; (80056f4 <xTaskResumeAll+0x128>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	429a      	cmp	r2, r3
 8005642:	d903      	bls.n	800564c <xTaskResumeAll+0x80>
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005648:	4a2a      	ldr	r2, [pc, #168]	; (80056f4 <xTaskResumeAll+0x128>)
 800564a:	6013      	str	r3, [r2, #0]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005650:	4613      	mov	r3, r2
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	4413      	add	r3, r2
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	4a27      	ldr	r2, [pc, #156]	; (80056f8 <xTaskResumeAll+0x12c>)
 800565a:	441a      	add	r2, r3
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	3304      	adds	r3, #4
 8005660:	4619      	mov	r1, r3
 8005662:	4610      	mov	r0, r2
 8005664:	f7fe ffa9 	bl	80045ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800566c:	4b23      	ldr	r3, [pc, #140]	; (80056fc <xTaskResumeAll+0x130>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005672:	429a      	cmp	r2, r3
 8005674:	d302      	bcc.n	800567c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8005676:	4b22      	ldr	r3, [pc, #136]	; (8005700 <xTaskResumeAll+0x134>)
 8005678:	2201      	movs	r2, #1
 800567a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800567c:	4b1c      	ldr	r3, [pc, #112]	; (80056f0 <xTaskResumeAll+0x124>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d1cb      	bne.n	800561c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d001      	beq.n	800568e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800568a:	f000 fc15 	bl	8005eb8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800568e:	4b1d      	ldr	r3, [pc, #116]	; (8005704 <xTaskResumeAll+0x138>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d010      	beq.n	80056bc <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800569a:	f000 f847 	bl	800572c <xTaskIncrementTick>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d002      	beq.n	80056aa <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80056a4:	4b16      	ldr	r3, [pc, #88]	; (8005700 <xTaskResumeAll+0x134>)
 80056a6:	2201      	movs	r2, #1
 80056a8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	3b01      	subs	r3, #1
 80056ae:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d1f1      	bne.n	800569a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80056b6:	4b13      	ldr	r3, [pc, #76]	; (8005704 <xTaskResumeAll+0x138>)
 80056b8:	2200      	movs	r2, #0
 80056ba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80056bc:	4b10      	ldr	r3, [pc, #64]	; (8005700 <xTaskResumeAll+0x134>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d009      	beq.n	80056d8 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80056c4:	2301      	movs	r3, #1
 80056c6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80056c8:	4b0f      	ldr	r3, [pc, #60]	; (8005708 <xTaskResumeAll+0x13c>)
 80056ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056ce:	601a      	str	r2, [r3, #0]
 80056d0:	f3bf 8f4f 	dsb	sy
 80056d4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80056d8:	f001 f9c4 	bl	8006a64 <vPortExitCritical>

	return xAlreadyYielded;
 80056dc:	68bb      	ldr	r3, [r7, #8]
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3710      	adds	r7, #16
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	20000d90 	.word	0x20000d90
 80056ec:	20000d68 	.word	0x20000d68
 80056f0:	20000d28 	.word	0x20000d28
 80056f4:	20000d70 	.word	0x20000d70
 80056f8:	20000898 	.word	0x20000898
 80056fc:	20000894 	.word	0x20000894
 8005700:	20000d7c 	.word	0x20000d7c
 8005704:	20000d78 	.word	0x20000d78
 8005708:	e000ed04 	.word	0xe000ed04

0800570c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005712:	4b05      	ldr	r3, [pc, #20]	; (8005728 <xTaskGetTickCount+0x1c>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005718:	687b      	ldr	r3, [r7, #4]
}
 800571a:	4618      	mov	r0, r3
 800571c:	370c      	adds	r7, #12
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr
 8005726:	bf00      	nop
 8005728:	20000d6c 	.word	0x20000d6c

0800572c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b086      	sub	sp, #24
 8005730:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005732:	2300      	movs	r3, #0
 8005734:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005736:	4b50      	ldr	r3, [pc, #320]	; (8005878 <xTaskIncrementTick+0x14c>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	f040 808b 	bne.w	8005856 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005740:	4b4e      	ldr	r3, [pc, #312]	; (800587c <xTaskIncrementTick+0x150>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	3301      	adds	r3, #1
 8005746:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005748:	4a4c      	ldr	r2, [pc, #304]	; (800587c <xTaskIncrementTick+0x150>)
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d122      	bne.n	800579a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8005754:	4b4a      	ldr	r3, [pc, #296]	; (8005880 <xTaskIncrementTick+0x154>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00c      	beq.n	8005778 <xTaskIncrementTick+0x4c>
	__asm volatile
 800575e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005762:	b672      	cpsid	i
 8005764:	f383 8811 	msr	BASEPRI, r3
 8005768:	f3bf 8f6f 	isb	sy
 800576c:	f3bf 8f4f 	dsb	sy
 8005770:	b662      	cpsie	i
 8005772:	603b      	str	r3, [r7, #0]
}
 8005774:	bf00      	nop
 8005776:	e7fe      	b.n	8005776 <xTaskIncrementTick+0x4a>
 8005778:	4b41      	ldr	r3, [pc, #260]	; (8005880 <xTaskIncrementTick+0x154>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	60fb      	str	r3, [r7, #12]
 800577e:	4b41      	ldr	r3, [pc, #260]	; (8005884 <xTaskIncrementTick+0x158>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a3f      	ldr	r2, [pc, #252]	; (8005880 <xTaskIncrementTick+0x154>)
 8005784:	6013      	str	r3, [r2, #0]
 8005786:	4a3f      	ldr	r2, [pc, #252]	; (8005884 <xTaskIncrementTick+0x158>)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6013      	str	r3, [r2, #0]
 800578c:	4b3e      	ldr	r3, [pc, #248]	; (8005888 <xTaskIncrementTick+0x15c>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	3301      	adds	r3, #1
 8005792:	4a3d      	ldr	r2, [pc, #244]	; (8005888 <xTaskIncrementTick+0x15c>)
 8005794:	6013      	str	r3, [r2, #0]
 8005796:	f000 fb8f 	bl	8005eb8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800579a:	4b3c      	ldr	r3, [pc, #240]	; (800588c <xTaskIncrementTick+0x160>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	693a      	ldr	r2, [r7, #16]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d349      	bcc.n	8005838 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057a4:	4b36      	ldr	r3, [pc, #216]	; (8005880 <xTaskIncrementTick+0x154>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d104      	bne.n	80057b8 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057ae:	4b37      	ldr	r3, [pc, #220]	; (800588c <xTaskIncrementTick+0x160>)
 80057b0:	f04f 32ff 	mov.w	r2, #4294967295
 80057b4:	601a      	str	r2, [r3, #0]
					break;
 80057b6:	e03f      	b.n	8005838 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057b8:	4b31      	ldr	r3, [pc, #196]	; (8005880 <xTaskIncrementTick+0x154>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80057c8:	693a      	ldr	r2, [r7, #16]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d203      	bcs.n	80057d8 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80057d0:	4a2e      	ldr	r2, [pc, #184]	; (800588c <xTaskIncrementTick+0x160>)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80057d6:	e02f      	b.n	8005838 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	3304      	adds	r3, #4
 80057dc:	4618      	mov	r0, r3
 80057de:	f7fe ff49 	bl	8004674 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d004      	beq.n	80057f4 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	3318      	adds	r3, #24
 80057ee:	4618      	mov	r0, r3
 80057f0:	f7fe ff40 	bl	8004674 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057f8:	4b25      	ldr	r3, [pc, #148]	; (8005890 <xTaskIncrementTick+0x164>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d903      	bls.n	8005808 <xTaskIncrementTick+0xdc>
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005804:	4a22      	ldr	r2, [pc, #136]	; (8005890 <xTaskIncrementTick+0x164>)
 8005806:	6013      	str	r3, [r2, #0]
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800580c:	4613      	mov	r3, r2
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	4413      	add	r3, r2
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	4a1f      	ldr	r2, [pc, #124]	; (8005894 <xTaskIncrementTick+0x168>)
 8005816:	441a      	add	r2, r3
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	3304      	adds	r3, #4
 800581c:	4619      	mov	r1, r3
 800581e:	4610      	mov	r0, r2
 8005820:	f7fe fecb 	bl	80045ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005828:	4b1b      	ldr	r3, [pc, #108]	; (8005898 <xTaskIncrementTick+0x16c>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582e:	429a      	cmp	r2, r3
 8005830:	d3b8      	bcc.n	80057a4 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8005832:	2301      	movs	r3, #1
 8005834:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005836:	e7b5      	b.n	80057a4 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005838:	4b17      	ldr	r3, [pc, #92]	; (8005898 <xTaskIncrementTick+0x16c>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800583e:	4915      	ldr	r1, [pc, #84]	; (8005894 <xTaskIncrementTick+0x168>)
 8005840:	4613      	mov	r3, r2
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	4413      	add	r3, r2
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	440b      	add	r3, r1
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2b01      	cmp	r3, #1
 800584e:	d907      	bls.n	8005860 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8005850:	2301      	movs	r3, #1
 8005852:	617b      	str	r3, [r7, #20]
 8005854:	e004      	b.n	8005860 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005856:	4b11      	ldr	r3, [pc, #68]	; (800589c <xTaskIncrementTick+0x170>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	3301      	adds	r3, #1
 800585c:	4a0f      	ldr	r2, [pc, #60]	; (800589c <xTaskIncrementTick+0x170>)
 800585e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005860:	4b0f      	ldr	r3, [pc, #60]	; (80058a0 <xTaskIncrementTick+0x174>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d001      	beq.n	800586c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8005868:	2301      	movs	r3, #1
 800586a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800586c:	697b      	ldr	r3, [r7, #20]
}
 800586e:	4618      	mov	r0, r3
 8005870:	3718      	adds	r7, #24
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	20000d90 	.word	0x20000d90
 800587c:	20000d6c 	.word	0x20000d6c
 8005880:	20000d20 	.word	0x20000d20
 8005884:	20000d24 	.word	0x20000d24
 8005888:	20000d80 	.word	0x20000d80
 800588c:	20000d88 	.word	0x20000d88
 8005890:	20000d70 	.word	0x20000d70
 8005894:	20000898 	.word	0x20000898
 8005898:	20000894 	.word	0x20000894
 800589c:	20000d78 	.word	0x20000d78
 80058a0:	20000d7c 	.word	0x20000d7c

080058a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80058a4:	b480      	push	{r7}
 80058a6:	b085      	sub	sp, #20
 80058a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80058aa:	4b2b      	ldr	r3, [pc, #172]	; (8005958 <vTaskSwitchContext+0xb4>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d003      	beq.n	80058ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80058b2:	4b2a      	ldr	r3, [pc, #168]	; (800595c <vTaskSwitchContext+0xb8>)
 80058b4:	2201      	movs	r2, #1
 80058b6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80058b8:	e048      	b.n	800594c <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 80058ba:	4b28      	ldr	r3, [pc, #160]	; (800595c <vTaskSwitchContext+0xb8>)
 80058bc:	2200      	movs	r2, #0
 80058be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058c0:	4b27      	ldr	r3, [pc, #156]	; (8005960 <vTaskSwitchContext+0xbc>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	60fb      	str	r3, [r7, #12]
 80058c6:	e012      	b.n	80058ee <vTaskSwitchContext+0x4a>
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d10c      	bne.n	80058e8 <vTaskSwitchContext+0x44>
	__asm volatile
 80058ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d2:	b672      	cpsid	i
 80058d4:	f383 8811 	msr	BASEPRI, r3
 80058d8:	f3bf 8f6f 	isb	sy
 80058dc:	f3bf 8f4f 	dsb	sy
 80058e0:	b662      	cpsie	i
 80058e2:	607b      	str	r3, [r7, #4]
}
 80058e4:	bf00      	nop
 80058e6:	e7fe      	b.n	80058e6 <vTaskSwitchContext+0x42>
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	3b01      	subs	r3, #1
 80058ec:	60fb      	str	r3, [r7, #12]
 80058ee:	491d      	ldr	r1, [pc, #116]	; (8005964 <vTaskSwitchContext+0xc0>)
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	4613      	mov	r3, r2
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	4413      	add	r3, r2
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	440b      	add	r3, r1
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d0e2      	beq.n	80058c8 <vTaskSwitchContext+0x24>
 8005902:	68fa      	ldr	r2, [r7, #12]
 8005904:	4613      	mov	r3, r2
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	4413      	add	r3, r2
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	4a15      	ldr	r2, [pc, #84]	; (8005964 <vTaskSwitchContext+0xc0>)
 800590e:	4413      	add	r3, r2
 8005910:	60bb      	str	r3, [r7, #8]
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	685a      	ldr	r2, [r3, #4]
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	605a      	str	r2, [r3, #4]
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	685a      	ldr	r2, [r3, #4]
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	3308      	adds	r3, #8
 8005924:	429a      	cmp	r2, r3
 8005926:	d104      	bne.n	8005932 <vTaskSwitchContext+0x8e>
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	685a      	ldr	r2, [r3, #4]
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	605a      	str	r2, [r3, #4]
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	4a0b      	ldr	r2, [pc, #44]	; (8005968 <vTaskSwitchContext+0xc4>)
 800593a:	6013      	str	r3, [r2, #0]
 800593c:	4a08      	ldr	r2, [pc, #32]	; (8005960 <vTaskSwitchContext+0xbc>)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005942:	4b09      	ldr	r3, [pc, #36]	; (8005968 <vTaskSwitchContext+0xc4>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	3354      	adds	r3, #84	; 0x54
 8005948:	4a08      	ldr	r2, [pc, #32]	; (800596c <vTaskSwitchContext+0xc8>)
 800594a:	6013      	str	r3, [r2, #0]
}
 800594c:	bf00      	nop
 800594e:	3714      	adds	r7, #20
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr
 8005958:	20000d90 	.word	0x20000d90
 800595c:	20000d7c 	.word	0x20000d7c
 8005960:	20000d70 	.word	0x20000d70
 8005964:	20000898 	.word	0x20000898
 8005968:	20000894 	.word	0x20000894
 800596c:	20000094 	.word	0x20000094

08005970 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d10c      	bne.n	800599a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8005980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005984:	b672      	cpsid	i
 8005986:	f383 8811 	msr	BASEPRI, r3
 800598a:	f3bf 8f6f 	isb	sy
 800598e:	f3bf 8f4f 	dsb	sy
 8005992:	b662      	cpsie	i
 8005994:	60fb      	str	r3, [r7, #12]
}
 8005996:	bf00      	nop
 8005998:	e7fe      	b.n	8005998 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800599a:	4b07      	ldr	r3, [pc, #28]	; (80059b8 <vTaskPlaceOnEventList+0x48>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	3318      	adds	r3, #24
 80059a0:	4619      	mov	r1, r3
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f7fe fe2d 	bl	8004602 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80059a8:	2101      	movs	r1, #1
 80059aa:	6838      	ldr	r0, [r7, #0]
 80059ac:	f000 fb4c 	bl	8006048 <prvAddCurrentTaskToDelayedList>
}
 80059b0:	bf00      	nop
 80059b2:	3710      	adds	r7, #16
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	20000894 	.word	0x20000894

080059bc <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b086      	sub	sp, #24
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d10c      	bne.n	80059e8 <vTaskPlaceOnUnorderedEventList+0x2c>
	__asm volatile
 80059ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d2:	b672      	cpsid	i
 80059d4:	f383 8811 	msr	BASEPRI, r3
 80059d8:	f3bf 8f6f 	isb	sy
 80059dc:	f3bf 8f4f 	dsb	sy
 80059e0:	b662      	cpsie	i
 80059e2:	617b      	str	r3, [r7, #20]
}
 80059e4:	bf00      	nop
 80059e6:	e7fe      	b.n	80059e6 <vTaskPlaceOnUnorderedEventList+0x2a>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 80059e8:	4b12      	ldr	r3, [pc, #72]	; (8005a34 <vTaskPlaceOnUnorderedEventList+0x78>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d10c      	bne.n	8005a0a <vTaskPlaceOnUnorderedEventList+0x4e>
	__asm volatile
 80059f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f4:	b672      	cpsid	i
 80059f6:	f383 8811 	msr	BASEPRI, r3
 80059fa:	f3bf 8f6f 	isb	sy
 80059fe:	f3bf 8f4f 	dsb	sy
 8005a02:	b662      	cpsie	i
 8005a04:	613b      	str	r3, [r7, #16]
}
 8005a06:	bf00      	nop
 8005a08:	e7fe      	b.n	8005a08 <vTaskPlaceOnUnorderedEventList+0x4c>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8005a0a:	4b0b      	ldr	r3, [pc, #44]	; (8005a38 <vTaskPlaceOnUnorderedEventList+0x7c>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	68ba      	ldr	r2, [r7, #8]
 8005a10:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005a14:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005a16:	4b08      	ldr	r3, [pc, #32]	; (8005a38 <vTaskPlaceOnUnorderedEventList+0x7c>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	3318      	adds	r3, #24
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	68f8      	ldr	r0, [r7, #12]
 8005a20:	f7fe fdcb 	bl	80045ba <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005a24:	2101      	movs	r1, #1
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 fb0e 	bl	8006048 <prvAddCurrentTaskToDelayedList>
}
 8005a2c:	bf00      	nop
 8005a2e:	3718      	adds	r7, #24
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	20000d90 	.word	0x20000d90
 8005a38:	20000894 	.word	0x20000894

08005a3c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b086      	sub	sp, #24
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	60b9      	str	r1, [r7, #8]
 8005a46:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d10c      	bne.n	8005a68 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8005a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a52:	b672      	cpsid	i
 8005a54:	f383 8811 	msr	BASEPRI, r3
 8005a58:	f3bf 8f6f 	isb	sy
 8005a5c:	f3bf 8f4f 	dsb	sy
 8005a60:	b662      	cpsie	i
 8005a62:	617b      	str	r3, [r7, #20]
}
 8005a64:	bf00      	nop
 8005a66:	e7fe      	b.n	8005a66 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005a68:	4b0a      	ldr	r3, [pc, #40]	; (8005a94 <vTaskPlaceOnEventListRestricted+0x58>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	3318      	adds	r3, #24
 8005a6e:	4619      	mov	r1, r3
 8005a70:	68f8      	ldr	r0, [r7, #12]
 8005a72:	f7fe fda2 	bl	80045ba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d002      	beq.n	8005a82 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8005a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8005a80:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005a82:	6879      	ldr	r1, [r7, #4]
 8005a84:	68b8      	ldr	r0, [r7, #8]
 8005a86:	f000 fadf 	bl	8006048 <prvAddCurrentTaskToDelayedList>
	}
 8005a8a:	bf00      	nop
 8005a8c:	3718      	adds	r7, #24
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	20000894 	.word	0x20000894

08005a98 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b086      	sub	sp, #24
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d10c      	bne.n	8005ac8 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8005aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab2:	b672      	cpsid	i
 8005ab4:	f383 8811 	msr	BASEPRI, r3
 8005ab8:	f3bf 8f6f 	isb	sy
 8005abc:	f3bf 8f4f 	dsb	sy
 8005ac0:	b662      	cpsie	i
 8005ac2:	60fb      	str	r3, [r7, #12]
}
 8005ac4:	bf00      	nop
 8005ac6:	e7fe      	b.n	8005ac6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	3318      	adds	r3, #24
 8005acc:	4618      	mov	r0, r3
 8005ace:	f7fe fdd1 	bl	8004674 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ad2:	4b1e      	ldr	r3, [pc, #120]	; (8005b4c <xTaskRemoveFromEventList+0xb4>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d11d      	bne.n	8005b16 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	3304      	adds	r3, #4
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f7fe fdc8 	bl	8004674 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ae8:	4b19      	ldr	r3, [pc, #100]	; (8005b50 <xTaskRemoveFromEventList+0xb8>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d903      	bls.n	8005af8 <xTaskRemoveFromEventList+0x60>
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af4:	4a16      	ldr	r2, [pc, #88]	; (8005b50 <xTaskRemoveFromEventList+0xb8>)
 8005af6:	6013      	str	r3, [r2, #0]
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005afc:	4613      	mov	r3, r2
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	4413      	add	r3, r2
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	4a13      	ldr	r2, [pc, #76]	; (8005b54 <xTaskRemoveFromEventList+0xbc>)
 8005b06:	441a      	add	r2, r3
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	3304      	adds	r3, #4
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	4610      	mov	r0, r2
 8005b10:	f7fe fd53 	bl	80045ba <vListInsertEnd>
 8005b14:	e005      	b.n	8005b22 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	3318      	adds	r3, #24
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	480e      	ldr	r0, [pc, #56]	; (8005b58 <xTaskRemoveFromEventList+0xc0>)
 8005b1e:	f7fe fd4c 	bl	80045ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b26:	4b0d      	ldr	r3, [pc, #52]	; (8005b5c <xTaskRemoveFromEventList+0xc4>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d905      	bls.n	8005b3c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005b30:	2301      	movs	r3, #1
 8005b32:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005b34:	4b0a      	ldr	r3, [pc, #40]	; (8005b60 <xTaskRemoveFromEventList+0xc8>)
 8005b36:	2201      	movs	r2, #1
 8005b38:	601a      	str	r2, [r3, #0]
 8005b3a:	e001      	b.n	8005b40 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005b40:	697b      	ldr	r3, [r7, #20]
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3718      	adds	r7, #24
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	20000d90 	.word	0x20000d90
 8005b50:	20000d70 	.word	0x20000d70
 8005b54:	20000898 	.word	0x20000898
 8005b58:	20000d28 	.word	0x20000d28
 8005b5c:	20000894 	.word	0x20000894
 8005b60:	20000d7c 	.word	0x20000d7c

08005b64 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b086      	sub	sp, #24
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8005b6e:	4b2b      	ldr	r3, [pc, #172]	; (8005c1c <vTaskRemoveFromUnorderedEventList+0xb8>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d10c      	bne.n	8005b90 <vTaskRemoveFromUnorderedEventList+0x2c>
	__asm volatile
 8005b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b7a:	b672      	cpsid	i
 8005b7c:	f383 8811 	msr	BASEPRI, r3
 8005b80:	f3bf 8f6f 	isb	sy
 8005b84:	f3bf 8f4f 	dsb	sy
 8005b88:	b662      	cpsie	i
 8005b8a:	613b      	str	r3, [r7, #16]
}
 8005b8c:	bf00      	nop
 8005b8e:	e7fe      	b.n	8005b8e <vTaskRemoveFromUnorderedEventList+0x2a>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d10c      	bne.n	8005bc0 <vTaskRemoveFromUnorderedEventList+0x5c>
	__asm volatile
 8005ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005baa:	b672      	cpsid	i
 8005bac:	f383 8811 	msr	BASEPRI, r3
 8005bb0:	f3bf 8f6f 	isb	sy
 8005bb4:	f3bf 8f4f 	dsb	sy
 8005bb8:	b662      	cpsie	i
 8005bba:	60fb      	str	r3, [r7, #12]
}
 8005bbc:	bf00      	nop
 8005bbe:	e7fe      	b.n	8005bbe <vTaskRemoveFromUnorderedEventList+0x5a>
	( void ) uxListRemove( pxEventListItem );
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f7fe fd57 	bl	8004674 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	3304      	adds	r3, #4
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f7fe fd52 	bl	8004674 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bd4:	4b12      	ldr	r3, [pc, #72]	; (8005c20 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d903      	bls.n	8005be4 <vTaskRemoveFromUnorderedEventList+0x80>
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be0:	4a0f      	ldr	r2, [pc, #60]	; (8005c20 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8005be2:	6013      	str	r3, [r2, #0]
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005be8:	4613      	mov	r3, r2
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	4413      	add	r3, r2
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	4a0c      	ldr	r2, [pc, #48]	; (8005c24 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8005bf2:	441a      	add	r2, r3
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	3304      	adds	r3, #4
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	4610      	mov	r0, r2
 8005bfc:	f7fe fcdd 	bl	80045ba <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c04:	4b08      	ldr	r3, [pc, #32]	; (8005c28 <vTaskRemoveFromUnorderedEventList+0xc4>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d902      	bls.n	8005c14 <vTaskRemoveFromUnorderedEventList+0xb0>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8005c0e:	4b07      	ldr	r3, [pc, #28]	; (8005c2c <vTaskRemoveFromUnorderedEventList+0xc8>)
 8005c10:	2201      	movs	r2, #1
 8005c12:	601a      	str	r2, [r3, #0]
	}
}
 8005c14:	bf00      	nop
 8005c16:	3718      	adds	r7, #24
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}
 8005c1c:	20000d90 	.word	0x20000d90
 8005c20:	20000d70 	.word	0x20000d70
 8005c24:	20000898 	.word	0x20000898
 8005c28:	20000894 	.word	0x20000894
 8005c2c:	20000d7c 	.word	0x20000d7c

08005c30 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005c38:	4b06      	ldr	r3, [pc, #24]	; (8005c54 <vTaskInternalSetTimeOutState+0x24>)
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005c40:	4b05      	ldr	r3, [pc, #20]	; (8005c58 <vTaskInternalSetTimeOutState+0x28>)
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	605a      	str	r2, [r3, #4]
}
 8005c48:	bf00      	nop
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr
 8005c54:	20000d80 	.word	0x20000d80
 8005c58:	20000d6c 	.word	0x20000d6c

08005c5c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b088      	sub	sp, #32
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d10c      	bne.n	8005c86 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8005c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c70:	b672      	cpsid	i
 8005c72:	f383 8811 	msr	BASEPRI, r3
 8005c76:	f3bf 8f6f 	isb	sy
 8005c7a:	f3bf 8f4f 	dsb	sy
 8005c7e:	b662      	cpsie	i
 8005c80:	613b      	str	r3, [r7, #16]
}
 8005c82:	bf00      	nop
 8005c84:	e7fe      	b.n	8005c84 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d10c      	bne.n	8005ca6 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8005c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c90:	b672      	cpsid	i
 8005c92:	f383 8811 	msr	BASEPRI, r3
 8005c96:	f3bf 8f6f 	isb	sy
 8005c9a:	f3bf 8f4f 	dsb	sy
 8005c9e:	b662      	cpsie	i
 8005ca0:	60fb      	str	r3, [r7, #12]
}
 8005ca2:	bf00      	nop
 8005ca4:	e7fe      	b.n	8005ca4 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8005ca6:	f000 fea9 	bl	80069fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005caa:	4b1d      	ldr	r3, [pc, #116]	; (8005d20 <xTaskCheckForTimeOut+0xc4>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	69ba      	ldr	r2, [r7, #24]
 8005cb6:	1ad3      	subs	r3, r2, r3
 8005cb8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cc2:	d102      	bne.n	8005cca <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	61fb      	str	r3, [r7, #28]
 8005cc8:	e023      	b.n	8005d12 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	4b15      	ldr	r3, [pc, #84]	; (8005d24 <xTaskCheckForTimeOut+0xc8>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d007      	beq.n	8005ce6 <xTaskCheckForTimeOut+0x8a>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	69ba      	ldr	r2, [r7, #24]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d302      	bcc.n	8005ce6 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	61fb      	str	r3, [r7, #28]
 8005ce4:	e015      	b.n	8005d12 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	697a      	ldr	r2, [r7, #20]
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d20b      	bcs.n	8005d08 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	1ad2      	subs	r2, r2, r3
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f7ff ff97 	bl	8005c30 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005d02:	2300      	movs	r3, #0
 8005d04:	61fb      	str	r3, [r7, #28]
 8005d06:	e004      	b.n	8005d12 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005d12:	f000 fea7 	bl	8006a64 <vPortExitCritical>

	return xReturn;
 8005d16:	69fb      	ldr	r3, [r7, #28]
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3720      	adds	r7, #32
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}
 8005d20:	20000d6c 	.word	0x20000d6c
 8005d24:	20000d80 	.word	0x20000d80

08005d28 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005d28:	b480      	push	{r7}
 8005d2a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005d2c:	4b03      	ldr	r3, [pc, #12]	; (8005d3c <vTaskMissedYield+0x14>)
 8005d2e:	2201      	movs	r2, #1
 8005d30:	601a      	str	r2, [r3, #0]
}
 8005d32:	bf00      	nop
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr
 8005d3c:	20000d7c 	.word	0x20000d7c

08005d40 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b082      	sub	sp, #8
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005d48:	f000 f852 	bl	8005df0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005d4c:	4b06      	ldr	r3, [pc, #24]	; (8005d68 <prvIdleTask+0x28>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d9f9      	bls.n	8005d48 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005d54:	4b05      	ldr	r3, [pc, #20]	; (8005d6c <prvIdleTask+0x2c>)
 8005d56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d5a:	601a      	str	r2, [r3, #0]
 8005d5c:	f3bf 8f4f 	dsb	sy
 8005d60:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005d64:	e7f0      	b.n	8005d48 <prvIdleTask+0x8>
 8005d66:	bf00      	nop
 8005d68:	20000898 	.word	0x20000898
 8005d6c:	e000ed04 	.word	0xe000ed04

08005d70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b082      	sub	sp, #8
 8005d74:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d76:	2300      	movs	r3, #0
 8005d78:	607b      	str	r3, [r7, #4]
 8005d7a:	e00c      	b.n	8005d96 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	4613      	mov	r3, r2
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	4413      	add	r3, r2
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	4a12      	ldr	r2, [pc, #72]	; (8005dd0 <prvInitialiseTaskLists+0x60>)
 8005d88:	4413      	add	r3, r2
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f7fe fbe8 	bl	8004560 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	3301      	adds	r3, #1
 8005d94:	607b      	str	r3, [r7, #4]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2b37      	cmp	r3, #55	; 0x37
 8005d9a:	d9ef      	bls.n	8005d7c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005d9c:	480d      	ldr	r0, [pc, #52]	; (8005dd4 <prvInitialiseTaskLists+0x64>)
 8005d9e:	f7fe fbdf 	bl	8004560 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005da2:	480d      	ldr	r0, [pc, #52]	; (8005dd8 <prvInitialiseTaskLists+0x68>)
 8005da4:	f7fe fbdc 	bl	8004560 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005da8:	480c      	ldr	r0, [pc, #48]	; (8005ddc <prvInitialiseTaskLists+0x6c>)
 8005daa:	f7fe fbd9 	bl	8004560 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005dae:	480c      	ldr	r0, [pc, #48]	; (8005de0 <prvInitialiseTaskLists+0x70>)
 8005db0:	f7fe fbd6 	bl	8004560 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005db4:	480b      	ldr	r0, [pc, #44]	; (8005de4 <prvInitialiseTaskLists+0x74>)
 8005db6:	f7fe fbd3 	bl	8004560 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005dba:	4b0b      	ldr	r3, [pc, #44]	; (8005de8 <prvInitialiseTaskLists+0x78>)
 8005dbc:	4a05      	ldr	r2, [pc, #20]	; (8005dd4 <prvInitialiseTaskLists+0x64>)
 8005dbe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005dc0:	4b0a      	ldr	r3, [pc, #40]	; (8005dec <prvInitialiseTaskLists+0x7c>)
 8005dc2:	4a05      	ldr	r2, [pc, #20]	; (8005dd8 <prvInitialiseTaskLists+0x68>)
 8005dc4:	601a      	str	r2, [r3, #0]
}
 8005dc6:	bf00      	nop
 8005dc8:	3708      	adds	r7, #8
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	20000898 	.word	0x20000898
 8005dd4:	20000cf8 	.word	0x20000cf8
 8005dd8:	20000d0c 	.word	0x20000d0c
 8005ddc:	20000d28 	.word	0x20000d28
 8005de0:	20000d3c 	.word	0x20000d3c
 8005de4:	20000d54 	.word	0x20000d54
 8005de8:	20000d20 	.word	0x20000d20
 8005dec:	20000d24 	.word	0x20000d24

08005df0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b082      	sub	sp, #8
 8005df4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005df6:	e019      	b.n	8005e2c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005df8:	f000 fe00 	bl	80069fc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dfc:	4b10      	ldr	r3, [pc, #64]	; (8005e40 <prvCheckTasksWaitingTermination+0x50>)
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	3304      	adds	r3, #4
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f7fe fc33 	bl	8004674 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005e0e:	4b0d      	ldr	r3, [pc, #52]	; (8005e44 <prvCheckTasksWaitingTermination+0x54>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	3b01      	subs	r3, #1
 8005e14:	4a0b      	ldr	r2, [pc, #44]	; (8005e44 <prvCheckTasksWaitingTermination+0x54>)
 8005e16:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005e18:	4b0b      	ldr	r3, [pc, #44]	; (8005e48 <prvCheckTasksWaitingTermination+0x58>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	3b01      	subs	r3, #1
 8005e1e:	4a0a      	ldr	r2, [pc, #40]	; (8005e48 <prvCheckTasksWaitingTermination+0x58>)
 8005e20:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005e22:	f000 fe1f 	bl	8006a64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 f810 	bl	8005e4c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e2c:	4b06      	ldr	r3, [pc, #24]	; (8005e48 <prvCheckTasksWaitingTermination+0x58>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d1e1      	bne.n	8005df8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005e34:	bf00      	nop
 8005e36:	bf00      	nop
 8005e38:	3708      	adds	r7, #8
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	bf00      	nop
 8005e40:	20000d3c 	.word	0x20000d3c
 8005e44:	20000d68 	.word	0x20000d68
 8005e48:	20000d50 	.word	0x20000d50

08005e4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	3354      	adds	r3, #84	; 0x54
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f003 faed 	bl	8009438 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d108      	bne.n	8005e7a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f000 ffbb 	bl	8006de8 <vPortFree>
				vPortFree( pxTCB );
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 ffb8 	bl	8006de8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005e78:	e01a      	b.n	8005eb0 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d103      	bne.n	8005e8c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f000 ffaf 	bl	8006de8 <vPortFree>
	}
 8005e8a:	e011      	b.n	8005eb0 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005e92:	2b02      	cmp	r3, #2
 8005e94:	d00c      	beq.n	8005eb0 <prvDeleteTCB+0x64>
	__asm volatile
 8005e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e9a:	b672      	cpsid	i
 8005e9c:	f383 8811 	msr	BASEPRI, r3
 8005ea0:	f3bf 8f6f 	isb	sy
 8005ea4:	f3bf 8f4f 	dsb	sy
 8005ea8:	b662      	cpsie	i
 8005eaa:	60fb      	str	r3, [r7, #12]
}
 8005eac:	bf00      	nop
 8005eae:	e7fe      	b.n	8005eae <prvDeleteTCB+0x62>
	}
 8005eb0:	bf00      	nop
 8005eb2:	3710      	adds	r7, #16
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ebe:	4b0c      	ldr	r3, [pc, #48]	; (8005ef0 <prvResetNextTaskUnblockTime+0x38>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d104      	bne.n	8005ed2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005ec8:	4b0a      	ldr	r3, [pc, #40]	; (8005ef4 <prvResetNextTaskUnblockTime+0x3c>)
 8005eca:	f04f 32ff 	mov.w	r2, #4294967295
 8005ece:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005ed0:	e008      	b.n	8005ee4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ed2:	4b07      	ldr	r3, [pc, #28]	; (8005ef0 <prvResetNextTaskUnblockTime+0x38>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	4a04      	ldr	r2, [pc, #16]	; (8005ef4 <prvResetNextTaskUnblockTime+0x3c>)
 8005ee2:	6013      	str	r3, [r2, #0]
}
 8005ee4:	bf00      	nop
 8005ee6:	370c      	adds	r7, #12
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr
 8005ef0:	20000d20 	.word	0x20000d20
 8005ef4:	20000d88 	.word	0x20000d88

08005ef8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005ef8:	b480      	push	{r7}
 8005efa:	b083      	sub	sp, #12
 8005efc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005efe:	4b0b      	ldr	r3, [pc, #44]	; (8005f2c <xTaskGetSchedulerState+0x34>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d102      	bne.n	8005f0c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005f06:	2301      	movs	r3, #1
 8005f08:	607b      	str	r3, [r7, #4]
 8005f0a:	e008      	b.n	8005f1e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f0c:	4b08      	ldr	r3, [pc, #32]	; (8005f30 <xTaskGetSchedulerState+0x38>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d102      	bne.n	8005f1a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005f14:	2302      	movs	r3, #2
 8005f16:	607b      	str	r3, [r7, #4]
 8005f18:	e001      	b.n	8005f1e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005f1e:	687b      	ldr	r3, [r7, #4]
	}
 8005f20:	4618      	mov	r0, r3
 8005f22:	370c      	adds	r7, #12
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr
 8005f2c:	20000d74 	.word	0x20000d74
 8005f30:	20000d90 	.word	0x20000d90

08005f34 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b086      	sub	sp, #24
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005f40:	2300      	movs	r3, #0
 8005f42:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d05a      	beq.n	8006000 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005f4a:	4b30      	ldr	r3, [pc, #192]	; (800600c <xTaskPriorityDisinherit+0xd8>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	693a      	ldr	r2, [r7, #16]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d00c      	beq.n	8005f6e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8005f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f58:	b672      	cpsid	i
 8005f5a:	f383 8811 	msr	BASEPRI, r3
 8005f5e:	f3bf 8f6f 	isb	sy
 8005f62:	f3bf 8f4f 	dsb	sy
 8005f66:	b662      	cpsie	i
 8005f68:	60fb      	str	r3, [r7, #12]
}
 8005f6a:	bf00      	nop
 8005f6c:	e7fe      	b.n	8005f6c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d10c      	bne.n	8005f90 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8005f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f7a:	b672      	cpsid	i
 8005f7c:	f383 8811 	msr	BASEPRI, r3
 8005f80:	f3bf 8f6f 	isb	sy
 8005f84:	f3bf 8f4f 	dsb	sy
 8005f88:	b662      	cpsie	i
 8005f8a:	60bb      	str	r3, [r7, #8]
}
 8005f8c:	bf00      	nop
 8005f8e:	e7fe      	b.n	8005f8e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f94:	1e5a      	subs	r2, r3, #1
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d02c      	beq.n	8006000 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d128      	bne.n	8006000 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	3304      	adds	r3, #4
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f7fe fb5e 	bl	8004674 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fd0:	4b0f      	ldr	r3, [pc, #60]	; (8006010 <xTaskPriorityDisinherit+0xdc>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d903      	bls.n	8005fe0 <xTaskPriorityDisinherit+0xac>
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fdc:	4a0c      	ldr	r2, [pc, #48]	; (8006010 <xTaskPriorityDisinherit+0xdc>)
 8005fde:	6013      	str	r3, [r2, #0]
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fe4:	4613      	mov	r3, r2
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	4413      	add	r3, r2
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	4a09      	ldr	r2, [pc, #36]	; (8006014 <xTaskPriorityDisinherit+0xe0>)
 8005fee:	441a      	add	r2, r3
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	3304      	adds	r3, #4
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	4610      	mov	r0, r2
 8005ff8:	f7fe fadf 	bl	80045ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006000:	697b      	ldr	r3, [r7, #20]
	}
 8006002:	4618      	mov	r0, r3
 8006004:	3718      	adds	r7, #24
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	20000894 	.word	0x20000894
 8006010:	20000d70 	.word	0x20000d70
 8006014:	20000898 	.word	0x20000898

08006018 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8006018:	b480      	push	{r7}
 800601a:	b083      	sub	sp, #12
 800601c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800601e:	4b09      	ldr	r3, [pc, #36]	; (8006044 <uxTaskResetEventItemValue+0x2c>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	699b      	ldr	r3, [r3, #24]
 8006024:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006026:	4b07      	ldr	r3, [pc, #28]	; (8006044 <uxTaskResetEventItemValue+0x2c>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800602c:	4b05      	ldr	r3, [pc, #20]	; (8006044 <uxTaskResetEventItemValue+0x2c>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8006034:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8006036:	687b      	ldr	r3, [r7, #4]
}
 8006038:	4618      	mov	r0, r3
 800603a:	370c      	adds	r7, #12
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr
 8006044:	20000894 	.word	0x20000894

08006048 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006052:	4b21      	ldr	r3, [pc, #132]	; (80060d8 <prvAddCurrentTaskToDelayedList+0x90>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006058:	4b20      	ldr	r3, [pc, #128]	; (80060dc <prvAddCurrentTaskToDelayedList+0x94>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	3304      	adds	r3, #4
 800605e:	4618      	mov	r0, r3
 8006060:	f7fe fb08 	bl	8004674 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800606a:	d10a      	bne.n	8006082 <prvAddCurrentTaskToDelayedList+0x3a>
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d007      	beq.n	8006082 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006072:	4b1a      	ldr	r3, [pc, #104]	; (80060dc <prvAddCurrentTaskToDelayedList+0x94>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	3304      	adds	r3, #4
 8006078:	4619      	mov	r1, r3
 800607a:	4819      	ldr	r0, [pc, #100]	; (80060e0 <prvAddCurrentTaskToDelayedList+0x98>)
 800607c:	f7fe fa9d 	bl	80045ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006080:	e026      	b.n	80060d0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006082:	68fa      	ldr	r2, [r7, #12]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4413      	add	r3, r2
 8006088:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800608a:	4b14      	ldr	r3, [pc, #80]	; (80060dc <prvAddCurrentTaskToDelayedList+0x94>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	68ba      	ldr	r2, [r7, #8]
 8006090:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006092:	68ba      	ldr	r2, [r7, #8]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	429a      	cmp	r2, r3
 8006098:	d209      	bcs.n	80060ae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800609a:	4b12      	ldr	r3, [pc, #72]	; (80060e4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	4b0f      	ldr	r3, [pc, #60]	; (80060dc <prvAddCurrentTaskToDelayedList+0x94>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	3304      	adds	r3, #4
 80060a4:	4619      	mov	r1, r3
 80060a6:	4610      	mov	r0, r2
 80060a8:	f7fe faab 	bl	8004602 <vListInsert>
}
 80060ac:	e010      	b.n	80060d0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060ae:	4b0e      	ldr	r3, [pc, #56]	; (80060e8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	4b0a      	ldr	r3, [pc, #40]	; (80060dc <prvAddCurrentTaskToDelayedList+0x94>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	3304      	adds	r3, #4
 80060b8:	4619      	mov	r1, r3
 80060ba:	4610      	mov	r0, r2
 80060bc:	f7fe faa1 	bl	8004602 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80060c0:	4b0a      	ldr	r3, [pc, #40]	; (80060ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68ba      	ldr	r2, [r7, #8]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d202      	bcs.n	80060d0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80060ca:	4a08      	ldr	r2, [pc, #32]	; (80060ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	6013      	str	r3, [r2, #0]
}
 80060d0:	bf00      	nop
 80060d2:	3710      	adds	r7, #16
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}
 80060d8:	20000d6c 	.word	0x20000d6c
 80060dc:	20000894 	.word	0x20000894
 80060e0:	20000d54 	.word	0x20000d54
 80060e4:	20000d24 	.word	0x20000d24
 80060e8:	20000d20 	.word	0x20000d20
 80060ec:	20000d88 	.word	0x20000d88

080060f0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b08a      	sub	sp, #40	; 0x28
 80060f4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80060f6:	2300      	movs	r3, #0
 80060f8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80060fa:	f000 fb15 	bl	8006728 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80060fe:	4b1d      	ldr	r3, [pc, #116]	; (8006174 <xTimerCreateTimerTask+0x84>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d021      	beq.n	800614a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006106:	2300      	movs	r3, #0
 8006108:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800610a:	2300      	movs	r3, #0
 800610c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800610e:	1d3a      	adds	r2, r7, #4
 8006110:	f107 0108 	add.w	r1, r7, #8
 8006114:	f107 030c 	add.w	r3, r7, #12
 8006118:	4618      	mov	r0, r3
 800611a:	f7fe f845 	bl	80041a8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800611e:	6879      	ldr	r1, [r7, #4]
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	68fa      	ldr	r2, [r7, #12]
 8006124:	9202      	str	r2, [sp, #8]
 8006126:	9301      	str	r3, [sp, #4]
 8006128:	2302      	movs	r3, #2
 800612a:	9300      	str	r3, [sp, #0]
 800612c:	2300      	movs	r3, #0
 800612e:	460a      	mov	r2, r1
 8006130:	4911      	ldr	r1, [pc, #68]	; (8006178 <xTimerCreateTimerTask+0x88>)
 8006132:	4812      	ldr	r0, [pc, #72]	; (800617c <xTimerCreateTimerTask+0x8c>)
 8006134:	f7fe ffd2 	bl	80050dc <xTaskCreateStatic>
 8006138:	4603      	mov	r3, r0
 800613a:	4a11      	ldr	r2, [pc, #68]	; (8006180 <xTimerCreateTimerTask+0x90>)
 800613c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800613e:	4b10      	ldr	r3, [pc, #64]	; (8006180 <xTimerCreateTimerTask+0x90>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d001      	beq.n	800614a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006146:	2301      	movs	r3, #1
 8006148:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d10c      	bne.n	800616a <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8006150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006154:	b672      	cpsid	i
 8006156:	f383 8811 	msr	BASEPRI, r3
 800615a:	f3bf 8f6f 	isb	sy
 800615e:	f3bf 8f4f 	dsb	sy
 8006162:	b662      	cpsie	i
 8006164:	613b      	str	r3, [r7, #16]
}
 8006166:	bf00      	nop
 8006168:	e7fe      	b.n	8006168 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800616a:	697b      	ldr	r3, [r7, #20]
}
 800616c:	4618      	mov	r0, r3
 800616e:	3718      	adds	r7, #24
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}
 8006174:	20000dc4 	.word	0x20000dc4
 8006178:	08009bb0 	.word	0x08009bb0
 800617c:	080062c1 	.word	0x080062c1
 8006180:	20000dc8 	.word	0x20000dc8

08006184 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b08a      	sub	sp, #40	; 0x28
 8006188:	af00      	add	r7, sp, #0
 800618a:	60f8      	str	r0, [r7, #12]
 800618c:	60b9      	str	r1, [r7, #8]
 800618e:	607a      	str	r2, [r7, #4]
 8006190:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006192:	2300      	movs	r3, #0
 8006194:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d10c      	bne.n	80061b6 <xTimerGenericCommand+0x32>
	__asm volatile
 800619c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a0:	b672      	cpsid	i
 80061a2:	f383 8811 	msr	BASEPRI, r3
 80061a6:	f3bf 8f6f 	isb	sy
 80061aa:	f3bf 8f4f 	dsb	sy
 80061ae:	b662      	cpsie	i
 80061b0:	623b      	str	r3, [r7, #32]
}
 80061b2:	bf00      	nop
 80061b4:	e7fe      	b.n	80061b4 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80061b6:	4b1a      	ldr	r3, [pc, #104]	; (8006220 <xTimerGenericCommand+0x9c>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d02a      	beq.n	8006214 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	2b05      	cmp	r3, #5
 80061ce:	dc18      	bgt.n	8006202 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80061d0:	f7ff fe92 	bl	8005ef8 <xTaskGetSchedulerState>
 80061d4:	4603      	mov	r3, r0
 80061d6:	2b02      	cmp	r3, #2
 80061d8:	d109      	bne.n	80061ee <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80061da:	4b11      	ldr	r3, [pc, #68]	; (8006220 <xTimerGenericCommand+0x9c>)
 80061dc:	6818      	ldr	r0, [r3, #0]
 80061de:	f107 0110 	add.w	r1, r7, #16
 80061e2:	2300      	movs	r3, #0
 80061e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061e6:	f7fe fb7f 	bl	80048e8 <xQueueGenericSend>
 80061ea:	6278      	str	r0, [r7, #36]	; 0x24
 80061ec:	e012      	b.n	8006214 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80061ee:	4b0c      	ldr	r3, [pc, #48]	; (8006220 <xTimerGenericCommand+0x9c>)
 80061f0:	6818      	ldr	r0, [r3, #0]
 80061f2:	f107 0110 	add.w	r1, r7, #16
 80061f6:	2300      	movs	r3, #0
 80061f8:	2200      	movs	r2, #0
 80061fa:	f7fe fb75 	bl	80048e8 <xQueueGenericSend>
 80061fe:	6278      	str	r0, [r7, #36]	; 0x24
 8006200:	e008      	b.n	8006214 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006202:	4b07      	ldr	r3, [pc, #28]	; (8006220 <xTimerGenericCommand+0x9c>)
 8006204:	6818      	ldr	r0, [r3, #0]
 8006206:	f107 0110 	add.w	r1, r7, #16
 800620a:	2300      	movs	r3, #0
 800620c:	683a      	ldr	r2, [r7, #0]
 800620e:	f7fe fc71 	bl	8004af4 <xQueueGenericSendFromISR>
 8006212:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006216:	4618      	mov	r0, r3
 8006218:	3728      	adds	r7, #40	; 0x28
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
 800621e:	bf00      	nop
 8006220:	20000dc4 	.word	0x20000dc4

08006224 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b088      	sub	sp, #32
 8006228:	af02      	add	r7, sp, #8
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800622e:	4b23      	ldr	r3, [pc, #140]	; (80062bc <prvProcessExpiredTimer+0x98>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	3304      	adds	r3, #4
 800623c:	4618      	mov	r0, r3
 800623e:	f7fe fa19 	bl	8004674 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006248:	f003 0304 	and.w	r3, r3, #4
 800624c:	2b00      	cmp	r3, #0
 800624e:	d024      	beq.n	800629a <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	699a      	ldr	r2, [r3, #24]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	18d1      	adds	r1, r2, r3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	683a      	ldr	r2, [r7, #0]
 800625c:	6978      	ldr	r0, [r7, #20]
 800625e:	f000 f8d3 	bl	8006408 <prvInsertTimerInActiveList>
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d021      	beq.n	80062ac <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006268:	2300      	movs	r3, #0
 800626a:	9300      	str	r3, [sp, #0]
 800626c:	2300      	movs	r3, #0
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	2100      	movs	r1, #0
 8006272:	6978      	ldr	r0, [r7, #20]
 8006274:	f7ff ff86 	bl	8006184 <xTimerGenericCommand>
 8006278:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d115      	bne.n	80062ac <prvProcessExpiredTimer+0x88>
	__asm volatile
 8006280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006284:	b672      	cpsid	i
 8006286:	f383 8811 	msr	BASEPRI, r3
 800628a:	f3bf 8f6f 	isb	sy
 800628e:	f3bf 8f4f 	dsb	sy
 8006292:	b662      	cpsie	i
 8006294:	60fb      	str	r3, [r7, #12]
}
 8006296:	bf00      	nop
 8006298:	e7fe      	b.n	8006298 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062a0:	f023 0301 	bic.w	r3, r3, #1
 80062a4:	b2da      	uxtb	r2, r3
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	6a1b      	ldr	r3, [r3, #32]
 80062b0:	6978      	ldr	r0, [r7, #20]
 80062b2:	4798      	blx	r3
}
 80062b4:	bf00      	nop
 80062b6:	3718      	adds	r7, #24
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}
 80062bc:	20000dbc 	.word	0x20000dbc

080062c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80062c8:	f107 0308 	add.w	r3, r7, #8
 80062cc:	4618      	mov	r0, r3
 80062ce:	f000 f857 	bl	8006380 <prvGetNextExpireTime>
 80062d2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	4619      	mov	r1, r3
 80062d8:	68f8      	ldr	r0, [r7, #12]
 80062da:	f000 f803 	bl	80062e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80062de:	f000 f8d5 	bl	800648c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80062e2:	e7f1      	b.n	80062c8 <prvTimerTask+0x8>

080062e4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b084      	sub	sp, #16
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80062ee:	f7ff f95f 	bl	80055b0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80062f2:	f107 0308 	add.w	r3, r7, #8
 80062f6:	4618      	mov	r0, r3
 80062f8:	f000 f866 	bl	80063c8 <prvSampleTimeNow>
 80062fc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d130      	bne.n	8006366 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d10a      	bne.n	8006320 <prvProcessTimerOrBlockTask+0x3c>
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	429a      	cmp	r2, r3
 8006310:	d806      	bhi.n	8006320 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006312:	f7ff f95b 	bl	80055cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006316:	68f9      	ldr	r1, [r7, #12]
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f7ff ff83 	bl	8006224 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800631e:	e024      	b.n	800636a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d008      	beq.n	8006338 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006326:	4b13      	ldr	r3, [pc, #76]	; (8006374 <prvProcessTimerOrBlockTask+0x90>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d101      	bne.n	8006334 <prvProcessTimerOrBlockTask+0x50>
 8006330:	2301      	movs	r3, #1
 8006332:	e000      	b.n	8006336 <prvProcessTimerOrBlockTask+0x52>
 8006334:	2300      	movs	r3, #0
 8006336:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006338:	4b0f      	ldr	r3, [pc, #60]	; (8006378 <prvProcessTimerOrBlockTask+0x94>)
 800633a:	6818      	ldr	r0, [r3, #0]
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	1ad3      	subs	r3, r2, r3
 8006342:	683a      	ldr	r2, [r7, #0]
 8006344:	4619      	mov	r1, r3
 8006346:	f7fe fe95 	bl	8005074 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800634a:	f7ff f93f 	bl	80055cc <xTaskResumeAll>
 800634e:	4603      	mov	r3, r0
 8006350:	2b00      	cmp	r3, #0
 8006352:	d10a      	bne.n	800636a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006354:	4b09      	ldr	r3, [pc, #36]	; (800637c <prvProcessTimerOrBlockTask+0x98>)
 8006356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800635a:	601a      	str	r2, [r3, #0]
 800635c:	f3bf 8f4f 	dsb	sy
 8006360:	f3bf 8f6f 	isb	sy
}
 8006364:	e001      	b.n	800636a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006366:	f7ff f931 	bl	80055cc <xTaskResumeAll>
}
 800636a:	bf00      	nop
 800636c:	3710      	adds	r7, #16
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	20000dc0 	.word	0x20000dc0
 8006378:	20000dc4 	.word	0x20000dc4
 800637c:	e000ed04 	.word	0xe000ed04

08006380 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006380:	b480      	push	{r7}
 8006382:	b085      	sub	sp, #20
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006388:	4b0e      	ldr	r3, [pc, #56]	; (80063c4 <prvGetNextExpireTime+0x44>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d101      	bne.n	8006396 <prvGetNextExpireTime+0x16>
 8006392:	2201      	movs	r2, #1
 8006394:	e000      	b.n	8006398 <prvGetNextExpireTime+0x18>
 8006396:	2200      	movs	r2, #0
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d105      	bne.n	80063b0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80063a4:	4b07      	ldr	r3, [pc, #28]	; (80063c4 <prvGetNextExpireTime+0x44>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	60fb      	str	r3, [r7, #12]
 80063ae:	e001      	b.n	80063b4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80063b0:	2300      	movs	r3, #0
 80063b2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80063b4:	68fb      	ldr	r3, [r7, #12]
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3714      	adds	r7, #20
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr
 80063c2:	bf00      	nop
 80063c4:	20000dbc 	.word	0x20000dbc

080063c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80063d0:	f7ff f99c 	bl	800570c <xTaskGetTickCount>
 80063d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80063d6:	4b0b      	ldr	r3, [pc, #44]	; (8006404 <prvSampleTimeNow+0x3c>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	429a      	cmp	r2, r3
 80063de:	d205      	bcs.n	80063ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80063e0:	f000 f93c 	bl	800665c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	601a      	str	r2, [r3, #0]
 80063ea:	e002      	b.n	80063f2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80063f2:	4a04      	ldr	r2, [pc, #16]	; (8006404 <prvSampleTimeNow+0x3c>)
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80063f8:	68fb      	ldr	r3, [r7, #12]
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3710      	adds	r7, #16
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop
 8006404:	20000dcc 	.word	0x20000dcc

08006408 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b086      	sub	sp, #24
 800640c:	af00      	add	r7, sp, #0
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	60b9      	str	r1, [r7, #8]
 8006412:	607a      	str	r2, [r7, #4]
 8006414:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006416:	2300      	movs	r3, #0
 8006418:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	68ba      	ldr	r2, [r7, #8]
 800641e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006426:	68ba      	ldr	r2, [r7, #8]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	429a      	cmp	r2, r3
 800642c:	d812      	bhi.n	8006454 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	1ad2      	subs	r2, r2, r3
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	699b      	ldr	r3, [r3, #24]
 8006438:	429a      	cmp	r2, r3
 800643a:	d302      	bcc.n	8006442 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800643c:	2301      	movs	r3, #1
 800643e:	617b      	str	r3, [r7, #20]
 8006440:	e01b      	b.n	800647a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006442:	4b10      	ldr	r3, [pc, #64]	; (8006484 <prvInsertTimerInActiveList+0x7c>)
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	3304      	adds	r3, #4
 800644a:	4619      	mov	r1, r3
 800644c:	4610      	mov	r0, r2
 800644e:	f7fe f8d8 	bl	8004602 <vListInsert>
 8006452:	e012      	b.n	800647a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	429a      	cmp	r2, r3
 800645a:	d206      	bcs.n	800646a <prvInsertTimerInActiveList+0x62>
 800645c:	68ba      	ldr	r2, [r7, #8]
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	429a      	cmp	r2, r3
 8006462:	d302      	bcc.n	800646a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006464:	2301      	movs	r3, #1
 8006466:	617b      	str	r3, [r7, #20]
 8006468:	e007      	b.n	800647a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800646a:	4b07      	ldr	r3, [pc, #28]	; (8006488 <prvInsertTimerInActiveList+0x80>)
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	3304      	adds	r3, #4
 8006472:	4619      	mov	r1, r3
 8006474:	4610      	mov	r0, r2
 8006476:	f7fe f8c4 	bl	8004602 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800647a:	697b      	ldr	r3, [r7, #20]
}
 800647c:	4618      	mov	r0, r3
 800647e:	3718      	adds	r7, #24
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}
 8006484:	20000dc0 	.word	0x20000dc0
 8006488:	20000dbc 	.word	0x20000dbc

0800648c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b08e      	sub	sp, #56	; 0x38
 8006490:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006492:	e0d0      	b.n	8006636 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2b00      	cmp	r3, #0
 8006498:	da1a      	bge.n	80064d0 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800649a:	1d3b      	adds	r3, r7, #4
 800649c:	3304      	adds	r3, #4
 800649e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80064a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d10c      	bne.n	80064c0 <prvProcessReceivedCommands+0x34>
	__asm volatile
 80064a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064aa:	b672      	cpsid	i
 80064ac:	f383 8811 	msr	BASEPRI, r3
 80064b0:	f3bf 8f6f 	isb	sy
 80064b4:	f3bf 8f4f 	dsb	sy
 80064b8:	b662      	cpsie	i
 80064ba:	61fb      	str	r3, [r7, #28]
}
 80064bc:	bf00      	nop
 80064be:	e7fe      	b.n	80064be <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80064c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064c6:	6850      	ldr	r0, [r2, #4]
 80064c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064ca:	6892      	ldr	r2, [r2, #8]
 80064cc:	4611      	mov	r1, r2
 80064ce:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	f2c0 80ae 	blt.w	8006634 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80064dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064de:	695b      	ldr	r3, [r3, #20]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d004      	beq.n	80064ee <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80064e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e6:	3304      	adds	r3, #4
 80064e8:	4618      	mov	r0, r3
 80064ea:	f7fe f8c3 	bl	8004674 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80064ee:	463b      	mov	r3, r7
 80064f0:	4618      	mov	r0, r3
 80064f2:	f7ff ff69 	bl	80063c8 <prvSampleTimeNow>
 80064f6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2b09      	cmp	r3, #9
 80064fc:	f200 809b 	bhi.w	8006636 <prvProcessReceivedCommands+0x1aa>
 8006500:	a201      	add	r2, pc, #4	; (adr r2, 8006508 <prvProcessReceivedCommands+0x7c>)
 8006502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006506:	bf00      	nop
 8006508:	08006531 	.word	0x08006531
 800650c:	08006531 	.word	0x08006531
 8006510:	08006531 	.word	0x08006531
 8006514:	080065a9 	.word	0x080065a9
 8006518:	080065bd 	.word	0x080065bd
 800651c:	0800660b 	.word	0x0800660b
 8006520:	08006531 	.word	0x08006531
 8006524:	08006531 	.word	0x08006531
 8006528:	080065a9 	.word	0x080065a9
 800652c:	080065bd 	.word	0x080065bd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006532:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006536:	f043 0301 	orr.w	r3, r3, #1
 800653a:	b2da      	uxtb	r2, r3
 800653c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800653e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006542:	68ba      	ldr	r2, [r7, #8]
 8006544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006546:	699b      	ldr	r3, [r3, #24]
 8006548:	18d1      	adds	r1, r2, r3
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800654e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006550:	f7ff ff5a 	bl	8006408 <prvInsertTimerInActiveList>
 8006554:	4603      	mov	r3, r0
 8006556:	2b00      	cmp	r3, #0
 8006558:	d06d      	beq.n	8006636 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800655a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800655c:	6a1b      	ldr	r3, [r3, #32]
 800655e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006560:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006564:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006568:	f003 0304 	and.w	r3, r3, #4
 800656c:	2b00      	cmp	r3, #0
 800656e:	d062      	beq.n	8006636 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006570:	68ba      	ldr	r2, [r7, #8]
 8006572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006574:	699b      	ldr	r3, [r3, #24]
 8006576:	441a      	add	r2, r3
 8006578:	2300      	movs	r3, #0
 800657a:	9300      	str	r3, [sp, #0]
 800657c:	2300      	movs	r3, #0
 800657e:	2100      	movs	r1, #0
 8006580:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006582:	f7ff fdff 	bl	8006184 <xTimerGenericCommand>
 8006586:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006588:	6a3b      	ldr	r3, [r7, #32]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d153      	bne.n	8006636 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800658e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006592:	b672      	cpsid	i
 8006594:	f383 8811 	msr	BASEPRI, r3
 8006598:	f3bf 8f6f 	isb	sy
 800659c:	f3bf 8f4f 	dsb	sy
 80065a0:	b662      	cpsie	i
 80065a2:	61bb      	str	r3, [r7, #24]
}
 80065a4:	bf00      	nop
 80065a6:	e7fe      	b.n	80065a6 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80065a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065ae:	f023 0301 	bic.w	r3, r3, #1
 80065b2:	b2da      	uxtb	r2, r3
 80065b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80065ba:	e03c      	b.n	8006636 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80065bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065c2:	f043 0301 	orr.w	r3, r3, #1
 80065c6:	b2da      	uxtb	r2, r3
 80065c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80065ce:	68ba      	ldr	r2, [r7, #8]
 80065d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80065d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d6:	699b      	ldr	r3, [r3, #24]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d10c      	bne.n	80065f6 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 80065dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e0:	b672      	cpsid	i
 80065e2:	f383 8811 	msr	BASEPRI, r3
 80065e6:	f3bf 8f6f 	isb	sy
 80065ea:	f3bf 8f4f 	dsb	sy
 80065ee:	b662      	cpsie	i
 80065f0:	617b      	str	r3, [r7, #20]
}
 80065f2:	bf00      	nop
 80065f4:	e7fe      	b.n	80065f4 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80065f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f8:	699a      	ldr	r2, [r3, #24]
 80065fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fc:	18d1      	adds	r1, r2, r3
 80065fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006602:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006604:	f7ff ff00 	bl	8006408 <prvInsertTimerInActiveList>
					break;
 8006608:	e015      	b.n	8006636 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800660a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006610:	f003 0302 	and.w	r3, r3, #2
 8006614:	2b00      	cmp	r3, #0
 8006616:	d103      	bne.n	8006620 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8006618:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800661a:	f000 fbe5 	bl	8006de8 <vPortFree>
 800661e:	e00a      	b.n	8006636 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006622:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006626:	f023 0301 	bic.w	r3, r3, #1
 800662a:	b2da      	uxtb	r2, r3
 800662c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006632:	e000      	b.n	8006636 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006634:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006636:	4b08      	ldr	r3, [pc, #32]	; (8006658 <prvProcessReceivedCommands+0x1cc>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	1d39      	adds	r1, r7, #4
 800663c:	2200      	movs	r2, #0
 800663e:	4618      	mov	r0, r3
 8006640:	f7fe faf8 	bl	8004c34 <xQueueReceive>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	f47f af24 	bne.w	8006494 <prvProcessReceivedCommands+0x8>
	}
}
 800664c:	bf00      	nop
 800664e:	bf00      	nop
 8006650:	3730      	adds	r7, #48	; 0x30
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}
 8006656:	bf00      	nop
 8006658:	20000dc4 	.word	0x20000dc4

0800665c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b088      	sub	sp, #32
 8006660:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006662:	e04a      	b.n	80066fa <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006664:	4b2e      	ldr	r3, [pc, #184]	; (8006720 <prvSwitchTimerLists+0xc4>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	68db      	ldr	r3, [r3, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800666e:	4b2c      	ldr	r3, [pc, #176]	; (8006720 <prvSwitchTimerLists+0xc4>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	3304      	adds	r3, #4
 800667c:	4618      	mov	r0, r3
 800667e:	f7fd fff9 	bl	8004674 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	6a1b      	ldr	r3, [r3, #32]
 8006686:	68f8      	ldr	r0, [r7, #12]
 8006688:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006690:	f003 0304 	and.w	r3, r3, #4
 8006694:	2b00      	cmp	r3, #0
 8006696:	d030      	beq.n	80066fa <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	699b      	ldr	r3, [r3, #24]
 800669c:	693a      	ldr	r2, [r7, #16]
 800669e:	4413      	add	r3, r2
 80066a0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80066a2:	68ba      	ldr	r2, [r7, #8]
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d90e      	bls.n	80066c8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	68ba      	ldr	r2, [r7, #8]
 80066ae:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	68fa      	ldr	r2, [r7, #12]
 80066b4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80066b6:	4b1a      	ldr	r3, [pc, #104]	; (8006720 <prvSwitchTimerLists+0xc4>)
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	3304      	adds	r3, #4
 80066be:	4619      	mov	r1, r3
 80066c0:	4610      	mov	r0, r2
 80066c2:	f7fd ff9e 	bl	8004602 <vListInsert>
 80066c6:	e018      	b.n	80066fa <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80066c8:	2300      	movs	r3, #0
 80066ca:	9300      	str	r3, [sp, #0]
 80066cc:	2300      	movs	r3, #0
 80066ce:	693a      	ldr	r2, [r7, #16]
 80066d0:	2100      	movs	r1, #0
 80066d2:	68f8      	ldr	r0, [r7, #12]
 80066d4:	f7ff fd56 	bl	8006184 <xTimerGenericCommand>
 80066d8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d10c      	bne.n	80066fa <prvSwitchTimerLists+0x9e>
	__asm volatile
 80066e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e4:	b672      	cpsid	i
 80066e6:	f383 8811 	msr	BASEPRI, r3
 80066ea:	f3bf 8f6f 	isb	sy
 80066ee:	f3bf 8f4f 	dsb	sy
 80066f2:	b662      	cpsie	i
 80066f4:	603b      	str	r3, [r7, #0]
}
 80066f6:	bf00      	nop
 80066f8:	e7fe      	b.n	80066f8 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80066fa:	4b09      	ldr	r3, [pc, #36]	; (8006720 <prvSwitchTimerLists+0xc4>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d1af      	bne.n	8006664 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006704:	4b06      	ldr	r3, [pc, #24]	; (8006720 <prvSwitchTimerLists+0xc4>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800670a:	4b06      	ldr	r3, [pc, #24]	; (8006724 <prvSwitchTimerLists+0xc8>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a04      	ldr	r2, [pc, #16]	; (8006720 <prvSwitchTimerLists+0xc4>)
 8006710:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006712:	4a04      	ldr	r2, [pc, #16]	; (8006724 <prvSwitchTimerLists+0xc8>)
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	6013      	str	r3, [r2, #0]
}
 8006718:	bf00      	nop
 800671a:	3718      	adds	r7, #24
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}
 8006720:	20000dbc 	.word	0x20000dbc
 8006724:	20000dc0 	.word	0x20000dc0

08006728 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b082      	sub	sp, #8
 800672c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800672e:	f000 f965 	bl	80069fc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006732:	4b15      	ldr	r3, [pc, #84]	; (8006788 <prvCheckForValidListAndQueue+0x60>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d120      	bne.n	800677c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800673a:	4814      	ldr	r0, [pc, #80]	; (800678c <prvCheckForValidListAndQueue+0x64>)
 800673c:	f7fd ff10 	bl	8004560 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006740:	4813      	ldr	r0, [pc, #76]	; (8006790 <prvCheckForValidListAndQueue+0x68>)
 8006742:	f7fd ff0d 	bl	8004560 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006746:	4b13      	ldr	r3, [pc, #76]	; (8006794 <prvCheckForValidListAndQueue+0x6c>)
 8006748:	4a10      	ldr	r2, [pc, #64]	; (800678c <prvCheckForValidListAndQueue+0x64>)
 800674a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800674c:	4b12      	ldr	r3, [pc, #72]	; (8006798 <prvCheckForValidListAndQueue+0x70>)
 800674e:	4a10      	ldr	r2, [pc, #64]	; (8006790 <prvCheckForValidListAndQueue+0x68>)
 8006750:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006752:	2300      	movs	r3, #0
 8006754:	9300      	str	r3, [sp, #0]
 8006756:	4b11      	ldr	r3, [pc, #68]	; (800679c <prvCheckForValidListAndQueue+0x74>)
 8006758:	4a11      	ldr	r2, [pc, #68]	; (80067a0 <prvCheckForValidListAndQueue+0x78>)
 800675a:	2110      	movs	r1, #16
 800675c:	200a      	movs	r0, #10
 800675e:	f7fe f81d 	bl	800479c <xQueueGenericCreateStatic>
 8006762:	4603      	mov	r3, r0
 8006764:	4a08      	ldr	r2, [pc, #32]	; (8006788 <prvCheckForValidListAndQueue+0x60>)
 8006766:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006768:	4b07      	ldr	r3, [pc, #28]	; (8006788 <prvCheckForValidListAndQueue+0x60>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d005      	beq.n	800677c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006770:	4b05      	ldr	r3, [pc, #20]	; (8006788 <prvCheckForValidListAndQueue+0x60>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	490b      	ldr	r1, [pc, #44]	; (80067a4 <prvCheckForValidListAndQueue+0x7c>)
 8006776:	4618      	mov	r0, r3
 8006778:	f7fe fc52 	bl	8005020 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800677c:	f000 f972 	bl	8006a64 <vPortExitCritical>
}
 8006780:	bf00      	nop
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop
 8006788:	20000dc4 	.word	0x20000dc4
 800678c:	20000d94 	.word	0x20000d94
 8006790:	20000da8 	.word	0x20000da8
 8006794:	20000dbc 	.word	0x20000dbc
 8006798:	20000dc0 	.word	0x20000dc0
 800679c:	20000e70 	.word	0x20000e70
 80067a0:	20000dd0 	.word	0x20000dd0
 80067a4:	08009bb8 	.word	0x08009bb8

080067a8 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b08a      	sub	sp, #40	; 0x28
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	607a      	str	r2, [r7, #4]
 80067b4:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80067b6:	f06f 0301 	mvn.w	r3, #1
 80067ba:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80067c8:	4b06      	ldr	r3, [pc, #24]	; (80067e4 <xTimerPendFunctionCallFromISR+0x3c>)
 80067ca:	6818      	ldr	r0, [r3, #0]
 80067cc:	f107 0114 	add.w	r1, r7, #20
 80067d0:	2300      	movs	r3, #0
 80067d2:	683a      	ldr	r2, [r7, #0]
 80067d4:	f7fe f98e 	bl	8004af4 <xQueueGenericSendFromISR>
 80067d8:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 80067da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80067dc:	4618      	mov	r0, r3
 80067de:	3728      	adds	r7, #40	; 0x28
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}
 80067e4:	20000dc4 	.word	0x20000dc4

080067e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80067e8:	b480      	push	{r7}
 80067ea:	b085      	sub	sp, #20
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	60b9      	str	r1, [r7, #8]
 80067f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	3b04      	subs	r3, #4
 80067f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006800:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	3b04      	subs	r3, #4
 8006806:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	f023 0201 	bic.w	r2, r3, #1
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	3b04      	subs	r3, #4
 8006816:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006818:	4a0c      	ldr	r2, [pc, #48]	; (800684c <pxPortInitialiseStack+0x64>)
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	3b14      	subs	r3, #20
 8006822:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	3b04      	subs	r3, #4
 800682e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f06f 0202 	mvn.w	r2, #2
 8006836:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	3b20      	subs	r3, #32
 800683c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800683e:	68fb      	ldr	r3, [r7, #12]
}
 8006840:	4618      	mov	r0, r3
 8006842:	3714      	adds	r7, #20
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr
 800684c:	08006851 	.word	0x08006851

08006850 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006850:	b480      	push	{r7}
 8006852:	b085      	sub	sp, #20
 8006854:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006856:	2300      	movs	r3, #0
 8006858:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800685a:	4b14      	ldr	r3, [pc, #80]	; (80068ac <prvTaskExitError+0x5c>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006862:	d00c      	beq.n	800687e <prvTaskExitError+0x2e>
	__asm volatile
 8006864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006868:	b672      	cpsid	i
 800686a:	f383 8811 	msr	BASEPRI, r3
 800686e:	f3bf 8f6f 	isb	sy
 8006872:	f3bf 8f4f 	dsb	sy
 8006876:	b662      	cpsie	i
 8006878:	60fb      	str	r3, [r7, #12]
}
 800687a:	bf00      	nop
 800687c:	e7fe      	b.n	800687c <prvTaskExitError+0x2c>
	__asm volatile
 800687e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006882:	b672      	cpsid	i
 8006884:	f383 8811 	msr	BASEPRI, r3
 8006888:	f3bf 8f6f 	isb	sy
 800688c:	f3bf 8f4f 	dsb	sy
 8006890:	b662      	cpsie	i
 8006892:	60bb      	str	r3, [r7, #8]
}
 8006894:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006896:	bf00      	nop
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d0fc      	beq.n	8006898 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800689e:	bf00      	nop
 80068a0:	bf00      	nop
 80068a2:	3714      	adds	r7, #20
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr
 80068ac:	2000000c 	.word	0x2000000c

080068b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80068b0:	4b07      	ldr	r3, [pc, #28]	; (80068d0 <pxCurrentTCBConst2>)
 80068b2:	6819      	ldr	r1, [r3, #0]
 80068b4:	6808      	ldr	r0, [r1, #0]
 80068b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ba:	f380 8809 	msr	PSP, r0
 80068be:	f3bf 8f6f 	isb	sy
 80068c2:	f04f 0000 	mov.w	r0, #0
 80068c6:	f380 8811 	msr	BASEPRI, r0
 80068ca:	4770      	bx	lr
 80068cc:	f3af 8000 	nop.w

080068d0 <pxCurrentTCBConst2>:
 80068d0:	20000894 	.word	0x20000894
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80068d4:	bf00      	nop
 80068d6:	bf00      	nop

080068d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80068d8:	4808      	ldr	r0, [pc, #32]	; (80068fc <prvPortStartFirstTask+0x24>)
 80068da:	6800      	ldr	r0, [r0, #0]
 80068dc:	6800      	ldr	r0, [r0, #0]
 80068de:	f380 8808 	msr	MSP, r0
 80068e2:	f04f 0000 	mov.w	r0, #0
 80068e6:	f380 8814 	msr	CONTROL, r0
 80068ea:	b662      	cpsie	i
 80068ec:	b661      	cpsie	f
 80068ee:	f3bf 8f4f 	dsb	sy
 80068f2:	f3bf 8f6f 	isb	sy
 80068f6:	df00      	svc	0
 80068f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80068fa:	bf00      	nop
 80068fc:	e000ed08 	.word	0xe000ed08

08006900 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b084      	sub	sp, #16
 8006904:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006906:	4b37      	ldr	r3, [pc, #220]	; (80069e4 <xPortStartScheduler+0xe4>)
 8006908:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	b2db      	uxtb	r3, r3
 8006910:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	22ff      	movs	r2, #255	; 0xff
 8006916:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	b2db      	uxtb	r3, r3
 800691e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006920:	78fb      	ldrb	r3, [r7, #3]
 8006922:	b2db      	uxtb	r3, r3
 8006924:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006928:	b2da      	uxtb	r2, r3
 800692a:	4b2f      	ldr	r3, [pc, #188]	; (80069e8 <xPortStartScheduler+0xe8>)
 800692c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800692e:	4b2f      	ldr	r3, [pc, #188]	; (80069ec <xPortStartScheduler+0xec>)
 8006930:	2207      	movs	r2, #7
 8006932:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006934:	e009      	b.n	800694a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006936:	4b2d      	ldr	r3, [pc, #180]	; (80069ec <xPortStartScheduler+0xec>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	3b01      	subs	r3, #1
 800693c:	4a2b      	ldr	r2, [pc, #172]	; (80069ec <xPortStartScheduler+0xec>)
 800693e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006940:	78fb      	ldrb	r3, [r7, #3]
 8006942:	b2db      	uxtb	r3, r3
 8006944:	005b      	lsls	r3, r3, #1
 8006946:	b2db      	uxtb	r3, r3
 8006948:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800694a:	78fb      	ldrb	r3, [r7, #3]
 800694c:	b2db      	uxtb	r3, r3
 800694e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006952:	2b80      	cmp	r3, #128	; 0x80
 8006954:	d0ef      	beq.n	8006936 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006956:	4b25      	ldr	r3, [pc, #148]	; (80069ec <xPortStartScheduler+0xec>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f1c3 0307 	rsb	r3, r3, #7
 800695e:	2b04      	cmp	r3, #4
 8006960:	d00c      	beq.n	800697c <xPortStartScheduler+0x7c>
	__asm volatile
 8006962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006966:	b672      	cpsid	i
 8006968:	f383 8811 	msr	BASEPRI, r3
 800696c:	f3bf 8f6f 	isb	sy
 8006970:	f3bf 8f4f 	dsb	sy
 8006974:	b662      	cpsie	i
 8006976:	60bb      	str	r3, [r7, #8]
}
 8006978:	bf00      	nop
 800697a:	e7fe      	b.n	800697a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800697c:	4b1b      	ldr	r3, [pc, #108]	; (80069ec <xPortStartScheduler+0xec>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	021b      	lsls	r3, r3, #8
 8006982:	4a1a      	ldr	r2, [pc, #104]	; (80069ec <xPortStartScheduler+0xec>)
 8006984:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006986:	4b19      	ldr	r3, [pc, #100]	; (80069ec <xPortStartScheduler+0xec>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800698e:	4a17      	ldr	r2, [pc, #92]	; (80069ec <xPortStartScheduler+0xec>)
 8006990:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	b2da      	uxtb	r2, r3
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800699a:	4b15      	ldr	r3, [pc, #84]	; (80069f0 <xPortStartScheduler+0xf0>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a14      	ldr	r2, [pc, #80]	; (80069f0 <xPortStartScheduler+0xf0>)
 80069a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80069a4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80069a6:	4b12      	ldr	r3, [pc, #72]	; (80069f0 <xPortStartScheduler+0xf0>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a11      	ldr	r2, [pc, #68]	; (80069f0 <xPortStartScheduler+0xf0>)
 80069ac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80069b0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80069b2:	f000 f8dd 	bl	8006b70 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80069b6:	4b0f      	ldr	r3, [pc, #60]	; (80069f4 <xPortStartScheduler+0xf4>)
 80069b8:	2200      	movs	r2, #0
 80069ba:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80069bc:	f000 f8fc 	bl	8006bb8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80069c0:	4b0d      	ldr	r3, [pc, #52]	; (80069f8 <xPortStartScheduler+0xf8>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a0c      	ldr	r2, [pc, #48]	; (80069f8 <xPortStartScheduler+0xf8>)
 80069c6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80069ca:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80069cc:	f7ff ff84 	bl	80068d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80069d0:	f7fe ff68 	bl	80058a4 <vTaskSwitchContext>
	prvTaskExitError();
 80069d4:	f7ff ff3c 	bl	8006850 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80069d8:	2300      	movs	r3, #0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3710      	adds	r7, #16
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	e000e400 	.word	0xe000e400
 80069e8:	20000ec0 	.word	0x20000ec0
 80069ec:	20000ec4 	.word	0x20000ec4
 80069f0:	e000ed20 	.word	0xe000ed20
 80069f4:	2000000c 	.word	0x2000000c
 80069f8:	e000ef34 	.word	0xe000ef34

080069fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80069fc:	b480      	push	{r7}
 80069fe:	b083      	sub	sp, #12
 8006a00:	af00      	add	r7, sp, #0
	__asm volatile
 8006a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a06:	b672      	cpsid	i
 8006a08:	f383 8811 	msr	BASEPRI, r3
 8006a0c:	f3bf 8f6f 	isb	sy
 8006a10:	f3bf 8f4f 	dsb	sy
 8006a14:	b662      	cpsie	i
 8006a16:	607b      	str	r3, [r7, #4]
}
 8006a18:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006a1a:	4b10      	ldr	r3, [pc, #64]	; (8006a5c <vPortEnterCritical+0x60>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	3301      	adds	r3, #1
 8006a20:	4a0e      	ldr	r2, [pc, #56]	; (8006a5c <vPortEnterCritical+0x60>)
 8006a22:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006a24:	4b0d      	ldr	r3, [pc, #52]	; (8006a5c <vPortEnterCritical+0x60>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d111      	bne.n	8006a50 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006a2c:	4b0c      	ldr	r3, [pc, #48]	; (8006a60 <vPortEnterCritical+0x64>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d00c      	beq.n	8006a50 <vPortEnterCritical+0x54>
	__asm volatile
 8006a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a3a:	b672      	cpsid	i
 8006a3c:	f383 8811 	msr	BASEPRI, r3
 8006a40:	f3bf 8f6f 	isb	sy
 8006a44:	f3bf 8f4f 	dsb	sy
 8006a48:	b662      	cpsie	i
 8006a4a:	603b      	str	r3, [r7, #0]
}
 8006a4c:	bf00      	nop
 8006a4e:	e7fe      	b.n	8006a4e <vPortEnterCritical+0x52>
	}
}
 8006a50:	bf00      	nop
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr
 8006a5c:	2000000c 	.word	0x2000000c
 8006a60:	e000ed04 	.word	0xe000ed04

08006a64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006a64:	b480      	push	{r7}
 8006a66:	b083      	sub	sp, #12
 8006a68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006a6a:	4b13      	ldr	r3, [pc, #76]	; (8006ab8 <vPortExitCritical+0x54>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d10c      	bne.n	8006a8c <vPortExitCritical+0x28>
	__asm volatile
 8006a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a76:	b672      	cpsid	i
 8006a78:	f383 8811 	msr	BASEPRI, r3
 8006a7c:	f3bf 8f6f 	isb	sy
 8006a80:	f3bf 8f4f 	dsb	sy
 8006a84:	b662      	cpsie	i
 8006a86:	607b      	str	r3, [r7, #4]
}
 8006a88:	bf00      	nop
 8006a8a:	e7fe      	b.n	8006a8a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8006a8c:	4b0a      	ldr	r3, [pc, #40]	; (8006ab8 <vPortExitCritical+0x54>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	3b01      	subs	r3, #1
 8006a92:	4a09      	ldr	r2, [pc, #36]	; (8006ab8 <vPortExitCritical+0x54>)
 8006a94:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006a96:	4b08      	ldr	r3, [pc, #32]	; (8006ab8 <vPortExitCritical+0x54>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d105      	bne.n	8006aaa <vPortExitCritical+0x46>
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	f383 8811 	msr	BASEPRI, r3
}
 8006aa8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006aaa:	bf00      	nop
 8006aac:	370c      	adds	r7, #12
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr
 8006ab6:	bf00      	nop
 8006ab8:	2000000c 	.word	0x2000000c
 8006abc:	00000000 	.word	0x00000000

08006ac0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006ac0:	f3ef 8009 	mrs	r0, PSP
 8006ac4:	f3bf 8f6f 	isb	sy
 8006ac8:	4b15      	ldr	r3, [pc, #84]	; (8006b20 <pxCurrentTCBConst>)
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	f01e 0f10 	tst.w	lr, #16
 8006ad0:	bf08      	it	eq
 8006ad2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006ad6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ada:	6010      	str	r0, [r2, #0]
 8006adc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006ae0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006ae4:	b672      	cpsid	i
 8006ae6:	f380 8811 	msr	BASEPRI, r0
 8006aea:	f3bf 8f4f 	dsb	sy
 8006aee:	f3bf 8f6f 	isb	sy
 8006af2:	b662      	cpsie	i
 8006af4:	f7fe fed6 	bl	80058a4 <vTaskSwitchContext>
 8006af8:	f04f 0000 	mov.w	r0, #0
 8006afc:	f380 8811 	msr	BASEPRI, r0
 8006b00:	bc09      	pop	{r0, r3}
 8006b02:	6819      	ldr	r1, [r3, #0]
 8006b04:	6808      	ldr	r0, [r1, #0]
 8006b06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b0a:	f01e 0f10 	tst.w	lr, #16
 8006b0e:	bf08      	it	eq
 8006b10:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006b14:	f380 8809 	msr	PSP, r0
 8006b18:	f3bf 8f6f 	isb	sy
 8006b1c:	4770      	bx	lr
 8006b1e:	bf00      	nop

08006b20 <pxCurrentTCBConst>:
 8006b20:	20000894 	.word	0x20000894
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006b24:	bf00      	nop
 8006b26:	bf00      	nop

08006b28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
	__asm volatile
 8006b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b32:	b672      	cpsid	i
 8006b34:	f383 8811 	msr	BASEPRI, r3
 8006b38:	f3bf 8f6f 	isb	sy
 8006b3c:	f3bf 8f4f 	dsb	sy
 8006b40:	b662      	cpsie	i
 8006b42:	607b      	str	r3, [r7, #4]
}
 8006b44:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006b46:	f7fe fdf1 	bl	800572c <xTaskIncrementTick>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d003      	beq.n	8006b58 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006b50:	4b06      	ldr	r3, [pc, #24]	; (8006b6c <SysTick_Handler+0x44>)
 8006b52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b56:	601a      	str	r2, [r3, #0]
 8006b58:	2300      	movs	r3, #0
 8006b5a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	f383 8811 	msr	BASEPRI, r3
}
 8006b62:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006b64:	bf00      	nop
 8006b66:	3708      	adds	r7, #8
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}
 8006b6c:	e000ed04 	.word	0xe000ed04

08006b70 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006b70:	b480      	push	{r7}
 8006b72:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006b74:	4b0b      	ldr	r3, [pc, #44]	; (8006ba4 <vPortSetupTimerInterrupt+0x34>)
 8006b76:	2200      	movs	r2, #0
 8006b78:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006b7a:	4b0b      	ldr	r3, [pc, #44]	; (8006ba8 <vPortSetupTimerInterrupt+0x38>)
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006b80:	4b0a      	ldr	r3, [pc, #40]	; (8006bac <vPortSetupTimerInterrupt+0x3c>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a0a      	ldr	r2, [pc, #40]	; (8006bb0 <vPortSetupTimerInterrupt+0x40>)
 8006b86:	fba2 2303 	umull	r2, r3, r2, r3
 8006b8a:	099b      	lsrs	r3, r3, #6
 8006b8c:	4a09      	ldr	r2, [pc, #36]	; (8006bb4 <vPortSetupTimerInterrupt+0x44>)
 8006b8e:	3b01      	subs	r3, #1
 8006b90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006b92:	4b04      	ldr	r3, [pc, #16]	; (8006ba4 <vPortSetupTimerInterrupt+0x34>)
 8006b94:	2207      	movs	r2, #7
 8006b96:	601a      	str	r2, [r3, #0]
}
 8006b98:	bf00      	nop
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr
 8006ba2:	bf00      	nop
 8006ba4:	e000e010 	.word	0xe000e010
 8006ba8:	e000e018 	.word	0xe000e018
 8006bac:	20000000 	.word	0x20000000
 8006bb0:	10624dd3 	.word	0x10624dd3
 8006bb4:	e000e014 	.word	0xe000e014

08006bb8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006bb8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006bc8 <vPortEnableVFP+0x10>
 8006bbc:	6801      	ldr	r1, [r0, #0]
 8006bbe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006bc2:	6001      	str	r1, [r0, #0]
 8006bc4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006bc6:	bf00      	nop
 8006bc8:	e000ed88 	.word	0xe000ed88

08006bcc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006bcc:	b480      	push	{r7}
 8006bce:	b085      	sub	sp, #20
 8006bd0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006bd2:	f3ef 8305 	mrs	r3, IPSR
 8006bd6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2b0f      	cmp	r3, #15
 8006bdc:	d916      	bls.n	8006c0c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006bde:	4a19      	ldr	r2, [pc, #100]	; (8006c44 <vPortValidateInterruptPriority+0x78>)
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	4413      	add	r3, r2
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006be8:	4b17      	ldr	r3, [pc, #92]	; (8006c48 <vPortValidateInterruptPriority+0x7c>)
 8006bea:	781b      	ldrb	r3, [r3, #0]
 8006bec:	7afa      	ldrb	r2, [r7, #11]
 8006bee:	429a      	cmp	r2, r3
 8006bf0:	d20c      	bcs.n	8006c0c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8006bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf6:	b672      	cpsid	i
 8006bf8:	f383 8811 	msr	BASEPRI, r3
 8006bfc:	f3bf 8f6f 	isb	sy
 8006c00:	f3bf 8f4f 	dsb	sy
 8006c04:	b662      	cpsie	i
 8006c06:	607b      	str	r3, [r7, #4]
}
 8006c08:	bf00      	nop
 8006c0a:	e7fe      	b.n	8006c0a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006c0c:	4b0f      	ldr	r3, [pc, #60]	; (8006c4c <vPortValidateInterruptPriority+0x80>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006c14:	4b0e      	ldr	r3, [pc, #56]	; (8006c50 <vPortValidateInterruptPriority+0x84>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d90c      	bls.n	8006c36 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8006c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c20:	b672      	cpsid	i
 8006c22:	f383 8811 	msr	BASEPRI, r3
 8006c26:	f3bf 8f6f 	isb	sy
 8006c2a:	f3bf 8f4f 	dsb	sy
 8006c2e:	b662      	cpsie	i
 8006c30:	603b      	str	r3, [r7, #0]
}
 8006c32:	bf00      	nop
 8006c34:	e7fe      	b.n	8006c34 <vPortValidateInterruptPriority+0x68>
	}
 8006c36:	bf00      	nop
 8006c38:	3714      	adds	r7, #20
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr
 8006c42:	bf00      	nop
 8006c44:	e000e3f0 	.word	0xe000e3f0
 8006c48:	20000ec0 	.word	0x20000ec0
 8006c4c:	e000ed0c 	.word	0xe000ed0c
 8006c50:	20000ec4 	.word	0x20000ec4

08006c54 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b08a      	sub	sp, #40	; 0x28
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006c60:	f7fe fca6 	bl	80055b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006c64:	4b5b      	ldr	r3, [pc, #364]	; (8006dd4 <pvPortMalloc+0x180>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d101      	bne.n	8006c70 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006c6c:	f000 f91a 	bl	8006ea4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006c70:	4b59      	ldr	r3, [pc, #356]	; (8006dd8 <pvPortMalloc+0x184>)
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4013      	ands	r3, r2
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	f040 8092 	bne.w	8006da2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d01f      	beq.n	8006cc4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8006c84:	2208      	movs	r2, #8
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	4413      	add	r3, r2
 8006c8a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f003 0307 	and.w	r3, r3, #7
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d016      	beq.n	8006cc4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f023 0307 	bic.w	r3, r3, #7
 8006c9c:	3308      	adds	r3, #8
 8006c9e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f003 0307 	and.w	r3, r3, #7
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d00c      	beq.n	8006cc4 <pvPortMalloc+0x70>
	__asm volatile
 8006caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cae:	b672      	cpsid	i
 8006cb0:	f383 8811 	msr	BASEPRI, r3
 8006cb4:	f3bf 8f6f 	isb	sy
 8006cb8:	f3bf 8f4f 	dsb	sy
 8006cbc:	b662      	cpsie	i
 8006cbe:	617b      	str	r3, [r7, #20]
}
 8006cc0:	bf00      	nop
 8006cc2:	e7fe      	b.n	8006cc2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d06b      	beq.n	8006da2 <pvPortMalloc+0x14e>
 8006cca:	4b44      	ldr	r3, [pc, #272]	; (8006ddc <pvPortMalloc+0x188>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d866      	bhi.n	8006da2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006cd4:	4b42      	ldr	r3, [pc, #264]	; (8006de0 <pvPortMalloc+0x18c>)
 8006cd6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006cd8:	4b41      	ldr	r3, [pc, #260]	; (8006de0 <pvPortMalloc+0x18c>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006cde:	e004      	b.n	8006cea <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8006ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d903      	bls.n	8006cfc <pvPortMalloc+0xa8>
 8006cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d1f1      	bne.n	8006ce0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006cfc:	4b35      	ldr	r3, [pc, #212]	; (8006dd4 <pvPortMalloc+0x180>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d04d      	beq.n	8006da2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006d06:	6a3b      	ldr	r3, [r7, #32]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	2208      	movs	r2, #8
 8006d0c:	4413      	add	r3, r2
 8006d0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	6a3b      	ldr	r3, [r7, #32]
 8006d16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1a:	685a      	ldr	r2, [r3, #4]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	1ad2      	subs	r2, r2, r3
 8006d20:	2308      	movs	r3, #8
 8006d22:	005b      	lsls	r3, r3, #1
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d921      	bls.n	8006d6c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4413      	add	r3, r2
 8006d2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d30:	69bb      	ldr	r3, [r7, #24]
 8006d32:	f003 0307 	and.w	r3, r3, #7
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d00c      	beq.n	8006d54 <pvPortMalloc+0x100>
	__asm volatile
 8006d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d3e:	b672      	cpsid	i
 8006d40:	f383 8811 	msr	BASEPRI, r3
 8006d44:	f3bf 8f6f 	isb	sy
 8006d48:	f3bf 8f4f 	dsb	sy
 8006d4c:	b662      	cpsie	i
 8006d4e:	613b      	str	r3, [r7, #16]
}
 8006d50:	bf00      	nop
 8006d52:	e7fe      	b.n	8006d52 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d56:	685a      	ldr	r2, [r3, #4]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	1ad2      	subs	r2, r2, r3
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006d66:	69b8      	ldr	r0, [r7, #24]
 8006d68:	f000 f8fe 	bl	8006f68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006d6c:	4b1b      	ldr	r3, [pc, #108]	; (8006ddc <pvPortMalloc+0x188>)
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	1ad3      	subs	r3, r2, r3
 8006d76:	4a19      	ldr	r2, [pc, #100]	; (8006ddc <pvPortMalloc+0x188>)
 8006d78:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006d7a:	4b18      	ldr	r3, [pc, #96]	; (8006ddc <pvPortMalloc+0x188>)
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	4b19      	ldr	r3, [pc, #100]	; (8006de4 <pvPortMalloc+0x190>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d203      	bcs.n	8006d8e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006d86:	4b15      	ldr	r3, [pc, #84]	; (8006ddc <pvPortMalloc+0x188>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a16      	ldr	r2, [pc, #88]	; (8006de4 <pvPortMalloc+0x190>)
 8006d8c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d90:	685a      	ldr	r2, [r3, #4]
 8006d92:	4b11      	ldr	r3, [pc, #68]	; (8006dd8 <pvPortMalloc+0x184>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	431a      	orrs	r2, r3
 8006d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9e:	2200      	movs	r2, #0
 8006da0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006da2:	f7fe fc13 	bl	80055cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006da6:	69fb      	ldr	r3, [r7, #28]
 8006da8:	f003 0307 	and.w	r3, r3, #7
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d00c      	beq.n	8006dca <pvPortMalloc+0x176>
	__asm volatile
 8006db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db4:	b672      	cpsid	i
 8006db6:	f383 8811 	msr	BASEPRI, r3
 8006dba:	f3bf 8f6f 	isb	sy
 8006dbe:	f3bf 8f4f 	dsb	sy
 8006dc2:	b662      	cpsie	i
 8006dc4:	60fb      	str	r3, [r7, #12]
}
 8006dc6:	bf00      	nop
 8006dc8:	e7fe      	b.n	8006dc8 <pvPortMalloc+0x174>
	return pvReturn;
 8006dca:	69fb      	ldr	r3, [r7, #28]
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3728      	adds	r7, #40	; 0x28
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	20004ad0 	.word	0x20004ad0
 8006dd8:	20004adc 	.word	0x20004adc
 8006ddc:	20004ad4 	.word	0x20004ad4
 8006de0:	20004ac8 	.word	0x20004ac8
 8006de4:	20004ad8 	.word	0x20004ad8

08006de8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b086      	sub	sp, #24
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d04c      	beq.n	8006e94 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006dfa:	2308      	movs	r3, #8
 8006dfc:	425b      	negs	r3, r3
 8006dfe:	697a      	ldr	r2, [r7, #20]
 8006e00:	4413      	add	r3, r2
 8006e02:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	685a      	ldr	r2, [r3, #4]
 8006e0c:	4b23      	ldr	r3, [pc, #140]	; (8006e9c <vPortFree+0xb4>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4013      	ands	r3, r2
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d10c      	bne.n	8006e30 <vPortFree+0x48>
	__asm volatile
 8006e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e1a:	b672      	cpsid	i
 8006e1c:	f383 8811 	msr	BASEPRI, r3
 8006e20:	f3bf 8f6f 	isb	sy
 8006e24:	f3bf 8f4f 	dsb	sy
 8006e28:	b662      	cpsie	i
 8006e2a:	60fb      	str	r3, [r7, #12]
}
 8006e2c:	bf00      	nop
 8006e2e:	e7fe      	b.n	8006e2e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d00c      	beq.n	8006e52 <vPortFree+0x6a>
	__asm volatile
 8006e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e3c:	b672      	cpsid	i
 8006e3e:	f383 8811 	msr	BASEPRI, r3
 8006e42:	f3bf 8f6f 	isb	sy
 8006e46:	f3bf 8f4f 	dsb	sy
 8006e4a:	b662      	cpsie	i
 8006e4c:	60bb      	str	r3, [r7, #8]
}
 8006e4e:	bf00      	nop
 8006e50:	e7fe      	b.n	8006e50 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	685a      	ldr	r2, [r3, #4]
 8006e56:	4b11      	ldr	r3, [pc, #68]	; (8006e9c <vPortFree+0xb4>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4013      	ands	r3, r2
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d019      	beq.n	8006e94 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d115      	bne.n	8006e94 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	685a      	ldr	r2, [r3, #4]
 8006e6c:	4b0b      	ldr	r3, [pc, #44]	; (8006e9c <vPortFree+0xb4>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	43db      	mvns	r3, r3
 8006e72:	401a      	ands	r2, r3
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006e78:	f7fe fb9a 	bl	80055b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	685a      	ldr	r2, [r3, #4]
 8006e80:	4b07      	ldr	r3, [pc, #28]	; (8006ea0 <vPortFree+0xb8>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4413      	add	r3, r2
 8006e86:	4a06      	ldr	r2, [pc, #24]	; (8006ea0 <vPortFree+0xb8>)
 8006e88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006e8a:	6938      	ldr	r0, [r7, #16]
 8006e8c:	f000 f86c 	bl	8006f68 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006e90:	f7fe fb9c 	bl	80055cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006e94:	bf00      	nop
 8006e96:	3718      	adds	r7, #24
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}
 8006e9c:	20004adc 	.word	0x20004adc
 8006ea0:	20004ad4 	.word	0x20004ad4

08006ea4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b085      	sub	sp, #20
 8006ea8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006eaa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006eae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006eb0:	4b27      	ldr	r3, [pc, #156]	; (8006f50 <prvHeapInit+0xac>)
 8006eb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f003 0307 	and.w	r3, r3, #7
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d00c      	beq.n	8006ed8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	3307      	adds	r3, #7
 8006ec2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f023 0307 	bic.w	r3, r3, #7
 8006eca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006ecc:	68ba      	ldr	r2, [r7, #8]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	1ad3      	subs	r3, r2, r3
 8006ed2:	4a1f      	ldr	r2, [pc, #124]	; (8006f50 <prvHeapInit+0xac>)
 8006ed4:	4413      	add	r3, r2
 8006ed6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006edc:	4a1d      	ldr	r2, [pc, #116]	; (8006f54 <prvHeapInit+0xb0>)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006ee2:	4b1c      	ldr	r3, [pc, #112]	; (8006f54 <prvHeapInit+0xb0>)
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	68ba      	ldr	r2, [r7, #8]
 8006eec:	4413      	add	r3, r2
 8006eee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006ef0:	2208      	movs	r2, #8
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	1a9b      	subs	r3, r3, r2
 8006ef6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f023 0307 	bic.w	r3, r3, #7
 8006efe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	4a15      	ldr	r2, [pc, #84]	; (8006f58 <prvHeapInit+0xb4>)
 8006f04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006f06:	4b14      	ldr	r3, [pc, #80]	; (8006f58 <prvHeapInit+0xb4>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006f0e:	4b12      	ldr	r3, [pc, #72]	; (8006f58 <prvHeapInit+0xb4>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	2200      	movs	r2, #0
 8006f14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	68fa      	ldr	r2, [r7, #12]
 8006f1e:	1ad2      	subs	r2, r2, r3
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006f24:	4b0c      	ldr	r3, [pc, #48]	; (8006f58 <prvHeapInit+0xb4>)
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	4a0a      	ldr	r2, [pc, #40]	; (8006f5c <prvHeapInit+0xb8>)
 8006f32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	4a09      	ldr	r2, [pc, #36]	; (8006f60 <prvHeapInit+0xbc>)
 8006f3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006f3c:	4b09      	ldr	r3, [pc, #36]	; (8006f64 <prvHeapInit+0xc0>)
 8006f3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006f42:	601a      	str	r2, [r3, #0]
}
 8006f44:	bf00      	nop
 8006f46:	3714      	adds	r7, #20
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr
 8006f50:	20000ec8 	.word	0x20000ec8
 8006f54:	20004ac8 	.word	0x20004ac8
 8006f58:	20004ad0 	.word	0x20004ad0
 8006f5c:	20004ad8 	.word	0x20004ad8
 8006f60:	20004ad4 	.word	0x20004ad4
 8006f64:	20004adc 	.word	0x20004adc

08006f68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b085      	sub	sp, #20
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006f70:	4b28      	ldr	r3, [pc, #160]	; (8007014 <prvInsertBlockIntoFreeList+0xac>)
 8006f72:	60fb      	str	r3, [r7, #12]
 8006f74:	e002      	b.n	8006f7c <prvInsertBlockIntoFreeList+0x14>
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	60fb      	str	r3, [r7, #12]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d8f7      	bhi.n	8006f76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	68ba      	ldr	r2, [r7, #8]
 8006f90:	4413      	add	r3, r2
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d108      	bne.n	8006faa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	685a      	ldr	r2, [r3, #4]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	441a      	add	r2, r3
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	68ba      	ldr	r2, [r7, #8]
 8006fb4:	441a      	add	r2, r3
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d118      	bne.n	8006ff0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681a      	ldr	r2, [r3, #0]
 8006fc2:	4b15      	ldr	r3, [pc, #84]	; (8007018 <prvInsertBlockIntoFreeList+0xb0>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d00d      	beq.n	8006fe6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	685a      	ldr	r2, [r3, #4]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	441a      	add	r2, r3
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	601a      	str	r2, [r3, #0]
 8006fe4:	e008      	b.n	8006ff8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006fe6:	4b0c      	ldr	r3, [pc, #48]	; (8007018 <prvInsertBlockIntoFreeList+0xb0>)
 8006fe8:	681a      	ldr	r2, [r3, #0]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	601a      	str	r2, [r3, #0]
 8006fee:	e003      	b.n	8006ff8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681a      	ldr	r2, [r3, #0]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006ff8:	68fa      	ldr	r2, [r7, #12]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d002      	beq.n	8007006 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007006:	bf00      	nop
 8007008:	3714      	adds	r7, #20
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr
 8007012:	bf00      	nop
 8007014:	20004ac8 	.word	0x20004ac8
 8007018:	20004ad0 	.word	0x20004ad0

0800701c <eMBFuncReadCoils>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b086      	sub	sp, #24
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usCoilCount;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8007026:	2300      	movs	r3, #0
 8007028:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	881b      	ldrh	r3, [r3, #0]
 800702e:	2b05      	cmp	r3, #5
 8007030:	d16c      	bne.n	800710c <eMBFuncReadCoils+0xf0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	3301      	adds	r3, #1
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	b29b      	uxth	r3, r3
 800703a:	021b      	lsls	r3, r3, #8
 800703c:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	3302      	adds	r3, #2
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	b29a      	uxth	r2, r3
 8007046:	8abb      	ldrh	r3, [r7, #20]
 8007048:	4313      	orrs	r3, r2
 800704a:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 800704c:	8abb      	ldrh	r3, [r7, #20]
 800704e:	3301      	adds	r3, #1
 8007050:	82bb      	strh	r3, [r7, #20]

        usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	3303      	adds	r3, #3
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	b29b      	uxth	r3, r3
 800705a:	021b      	lsls	r3, r3, #8
 800705c:	827b      	strh	r3, [r7, #18]
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	3304      	adds	r3, #4
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	b29a      	uxth	r2, r3
 8007066:	8a7b      	ldrh	r3, [r7, #18]
 8007068:	4313      	orrs	r3, r2
 800706a:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usCoilCount >= 1 ) &&
 800706c:	8a7b      	ldrh	r3, [r7, #18]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d049      	beq.n	8007106 <eMBFuncReadCoils+0xea>
 8007072:	8a7b      	ldrh	r3, [r7, #18]
 8007074:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007078:	d245      	bcs.n	8007106 <eMBFuncReadCoils+0xea>
            ( usCoilCount < MB_PDU_FUNC_READ_COILCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	2200      	movs	r2, #0
 8007082:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_COILS;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	1c5a      	adds	r2, r3, #1
 8007088:	60fa      	str	r2, [r7, #12]
 800708a:	2201      	movs	r2, #1
 800708c:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	881b      	ldrh	r3, [r3, #0]
 8007092:	3301      	adds	r3, #1
 8007094:	b29a      	uxth	r2, r3
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	801a      	strh	r2, [r3, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usCoilCount & 0x0007 ) != 0 )
 800709a:	8a7b      	ldrh	r3, [r7, #18]
 800709c:	f003 0307 	and.w	r3, r3, #7
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d006      	beq.n	80070b2 <eMBFuncReadCoils+0x96>
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
 80070a4:	8a7b      	ldrh	r3, [r7, #18]
 80070a6:	08db      	lsrs	r3, r3, #3
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	3301      	adds	r3, #1
 80070ae:	75fb      	strb	r3, [r7, #23]
 80070b0:	e003      	b.n	80070ba <eMBFuncReadCoils+0x9e>
            }
            else
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
 80070b2:	8a7b      	ldrh	r3, [r7, #18]
 80070b4:	08db      	lsrs	r3, r3, #3
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	75fb      	strb	r3, [r7, #23]
            }
            *pucFrameCur++ = ucNBytes;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	1c5a      	adds	r2, r3, #1
 80070be:	60fa      	str	r2, [r7, #12]
 80070c0:	7dfa      	ldrb	r2, [r7, #23]
 80070c2:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	881b      	ldrh	r3, [r3, #0]
 80070c8:	3301      	adds	r3, #1
 80070ca:	b29a      	uxth	r2, r3
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
 80070d0:	8a7a      	ldrh	r2, [r7, #18]
 80070d2:	8ab9      	ldrh	r1, [r7, #20]
 80070d4:	2300      	movs	r3, #0
 80070d6:	68f8      	ldr	r0, [r7, #12]
 80070d8:	f001 f980 	bl	80083dc <eMBRegCoilsCB>
 80070dc:	4603      	mov	r3, r0
 80070de:	72fb      	strb	r3, [r7, #11]
                               MB_REG_READ );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80070e0:	7afb      	ldrb	r3, [r7, #11]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d006      	beq.n	80070f4 <eMBFuncReadCoils+0xd8>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 80070e6:	7afb      	ldrb	r3, [r7, #11]
 80070e8:	4618      	mov	r0, r3
 80070ea:	f000 fc2b 	bl	8007944 <prveMBError2Exception>
 80070ee:	4603      	mov	r3, r0
 80070f0:	75bb      	strb	r3, [r7, #22]
            if( eRegStatus != MB_ENOERR )
 80070f2:	e00d      	b.n	8007110 <eMBFuncReadCoils+0xf4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	881a      	ldrh	r2, [r3, #0]
 80070f8:	7dfb      	ldrb	r3, [r7, #23]
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	4413      	add	r3, r2
 80070fe:	b29a      	uxth	r2, r3
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8007104:	e004      	b.n	8007110 <eMBFuncReadCoils+0xf4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8007106:	2303      	movs	r3, #3
 8007108:	75bb      	strb	r3, [r7, #22]
 800710a:	e001      	b.n	8007110 <eMBFuncReadCoils+0xf4>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800710c:	2303      	movs	r3, #3
 800710e:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 8007110:	7dbb      	ldrb	r3, [r7, #22]
}
 8007112:	4618      	mov	r0, r3
 8007114:	3718      	adds	r7, #24
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}

0800711a <eMBFuncWriteCoil>:

#if MB_FUNC_WRITE_COIL_ENABLED > 0
eMBException
eMBFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
{
 800711a:	b580      	push	{r7, lr}
 800711c:	b084      	sub	sp, #16
 800711e:	af00      	add	r7, sp, #0
 8007120:	6078      	str	r0, [r7, #4]
 8007122:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
 8007124:	2300      	movs	r3, #0
 8007126:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	881b      	ldrh	r3, [r3, #0]
 800712c:	2b05      	cmp	r3, #5
 800712e:	d140      	bne.n	80071b2 <eMBFuncWriteCoil+0x98>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	3301      	adds	r3, #1
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	b29b      	uxth	r3, r3
 8007138:	021b      	lsls	r3, r3, #8
 800713a:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	3302      	adds	r3, #2
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	b29a      	uxth	r2, r3
 8007144:	89bb      	ldrh	r3, [r7, #12]
 8007146:	4313      	orrs	r3, r2
 8007148:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 800714a:	89bb      	ldrh	r3, [r7, #12]
 800714c:	3301      	adds	r3, #1
 800714e:	81bb      	strh	r3, [r7, #12]

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	3304      	adds	r3, #4
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d128      	bne.n	80071ac <eMBFuncWriteCoil+0x92>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	3303      	adds	r3, #3
 800715e:	781b      	ldrb	r3, [r3, #0]
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8007160:	2bff      	cmp	r3, #255	; 0xff
 8007162:	d004      	beq.n	800716e <eMBFuncWriteCoil+0x54>
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	3303      	adds	r3, #3
 8007168:	781b      	ldrb	r3, [r3, #0]
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 800716a:	2b00      	cmp	r3, #0
 800716c:	d11e      	bne.n	80071ac <eMBFuncWriteCoil+0x92>
        {
            ucBuf[1] = 0;
 800716e:	2300      	movs	r3, #0
 8007170:	727b      	strb	r3, [r7, #9]
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	3303      	adds	r3, #3
 8007176:	781b      	ldrb	r3, [r3, #0]
 8007178:	2bff      	cmp	r3, #255	; 0xff
 800717a:	d102      	bne.n	8007182 <eMBFuncWriteCoil+0x68>
            {
                ucBuf[0] = 1;
 800717c:	2301      	movs	r3, #1
 800717e:	723b      	strb	r3, [r7, #8]
 8007180:	e001      	b.n	8007186 <eMBFuncWriteCoil+0x6c>
            }
            else
            {
                ucBuf[0] = 0;
 8007182:	2300      	movs	r3, #0
 8007184:	723b      	strb	r3, [r7, #8]
            }
            eRegStatus =
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );
 8007186:	89b9      	ldrh	r1, [r7, #12]
 8007188:	f107 0008 	add.w	r0, r7, #8
 800718c:	2301      	movs	r3, #1
 800718e:	2201      	movs	r2, #1
 8007190:	f001 f924 	bl	80083dc <eMBRegCoilsCB>
 8007194:	4603      	mov	r3, r0
 8007196:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8007198:	7afb      	ldrb	r3, [r7, #11]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d00b      	beq.n	80071b6 <eMBFuncWriteCoil+0x9c>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800719e:	7afb      	ldrb	r3, [r7, #11]
 80071a0:	4618      	mov	r0, r3
 80071a2:	f000 fbcf 	bl	8007944 <prveMBError2Exception>
 80071a6:	4603      	mov	r3, r0
 80071a8:	73fb      	strb	r3, [r7, #15]
            if( eRegStatus != MB_ENOERR )
 80071aa:	e004      	b.n	80071b6 <eMBFuncWriteCoil+0x9c>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80071ac:	2303      	movs	r3, #3
 80071ae:	73fb      	strb	r3, [r7, #15]
 80071b0:	e001      	b.n	80071b6 <eMBFuncWriteCoil+0x9c>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80071b2:	2303      	movs	r3, #3
 80071b4:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 80071b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3710      	adds	r7, #16
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}

080071c0 <eMBFuncWriteMultipleCoils>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_COILS_ENABLED > 0
eMBException
eMBFuncWriteMultipleCoils( UCHAR * pucFrame, USHORT * usLen )
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usCoilCnt;
    UCHAR           ucByteCount;
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
 80071ca:	2300      	movs	r3, #0
 80071cc:	73bb      	strb	r3, [r7, #14]
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	881b      	ldrh	r3, [r3, #0]
 80071d2:	2b05      	cmp	r3, #5
 80071d4:	d954      	bls.n	8007280 <eMBFuncWriteMultipleCoils+0xc0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	3301      	adds	r3, #1
 80071da:	781b      	ldrb	r3, [r3, #0]
 80071dc:	b29b      	uxth	r3, r3
 80071de:	021b      	lsls	r3, r3, #8
 80071e0:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	3302      	adds	r3, #2
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	b29a      	uxth	r2, r3
 80071ea:	89bb      	ldrh	r3, [r7, #12]
 80071ec:	4313      	orrs	r3, r2
 80071ee:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 80071f0:	89bb      	ldrh	r3, [r7, #12]
 80071f2:	3301      	adds	r3, #1
 80071f4:	81bb      	strh	r3, [r7, #12]

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	3303      	adds	r3, #3
 80071fa:	781b      	ldrb	r3, [r3, #0]
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	021b      	lsls	r3, r3, #8
 8007200:	817b      	strh	r3, [r7, #10]
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	3304      	adds	r3, #4
 8007206:	781b      	ldrb	r3, [r3, #0]
 8007208:	b29a      	uxth	r2, r3
 800720a:	897b      	ldrh	r3, [r7, #10]
 800720c:	4313      	orrs	r3, r2
 800720e:	817b      	strh	r3, [r7, #10]

        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	795b      	ldrb	r3, [r3, #5]
 8007214:	727b      	strb	r3, [r7, #9]

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
 8007216:	897b      	ldrh	r3, [r7, #10]
 8007218:	f003 0307 	and.w	r3, r3, #7
 800721c:	2b00      	cmp	r3, #0
 800721e:	d006      	beq.n	800722e <eMBFuncWriteMultipleCoils+0x6e>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 8007220:	897b      	ldrh	r3, [r7, #10]
 8007222:	08db      	lsrs	r3, r3, #3
 8007224:	b29b      	uxth	r3, r3
 8007226:	b2db      	uxtb	r3, r3
 8007228:	3301      	adds	r3, #1
 800722a:	73fb      	strb	r3, [r7, #15]
 800722c:	e003      	b.n	8007236 <eMBFuncWriteMultipleCoils+0x76>
        }
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
 800722e:	897b      	ldrh	r3, [r7, #10]
 8007230:	08db      	lsrs	r3, r3, #3
 8007232:	b29b      	uxth	r3, r3
 8007234:	73fb      	strb	r3, [r7, #15]
        }

        if( ( usCoilCnt >= 1 ) &&
 8007236:	897b      	ldrh	r3, [r7, #10]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d01e      	beq.n	800727a <eMBFuncWriteMultipleCoils+0xba>
 800723c:	897b      	ldrh	r3, [r7, #10]
 800723e:	f5b3 6ff6 	cmp.w	r3, #1968	; 0x7b0
 8007242:	d81a      	bhi.n	800727a <eMBFuncWriteMultipleCoils+0xba>
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
 8007244:	7bfa      	ldrb	r2, [r7, #15]
 8007246:	7a7b      	ldrb	r3, [r7, #9]
 8007248:	429a      	cmp	r2, r3
 800724a:	d116      	bne.n	800727a <eMBFuncWriteMultipleCoils+0xba>
            ( ucByteCountVerify == ucByteCount ) )
        {
            eRegStatus =
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	1d98      	adds	r0, r3, #6
 8007250:	897a      	ldrh	r2, [r7, #10]
 8007252:	89b9      	ldrh	r1, [r7, #12]
 8007254:	2301      	movs	r3, #1
 8007256:	f001 f8c1 	bl	80083dc <eMBRegCoilsCB>
 800725a:	4603      	mov	r3, r0
 800725c:	723b      	strb	r3, [r7, #8]
                               usRegAddress, usCoilCnt, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 800725e:	7a3b      	ldrb	r3, [r7, #8]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d006      	beq.n	8007272 <eMBFuncWriteMultipleCoils+0xb2>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8007264:	7a3b      	ldrb	r3, [r7, #8]
 8007266:	4618      	mov	r0, r3
 8007268:	f000 fb6c 	bl	8007944 <prveMBError2Exception>
 800726c:	4603      	mov	r3, r0
 800726e:	73bb      	strb	r3, [r7, #14]
            if( eRegStatus != MB_ENOERR )
 8007270:	e008      	b.n	8007284 <eMBFuncWriteMultipleCoils+0xc4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	2205      	movs	r2, #5
 8007276:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8007278:	e004      	b.n	8007284 <eMBFuncWriteMultipleCoils+0xc4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800727a:	2303      	movs	r3, #3
 800727c:	73bb      	strb	r3, [r7, #14]
 800727e:	e001      	b.n	8007284 <eMBFuncWriteMultipleCoils+0xc4>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8007280:	2303      	movs	r3, #3
 8007282:	73bb      	strb	r3, [r7, #14]
    }
    return eStatus;
 8007284:	7bbb      	ldrb	r3, [r7, #14]
}
 8007286:	4618      	mov	r0, r3
 8007288:	3710      	adds	r7, #16
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}

0800728e <eMBFuncReadDiscreteInputs>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
 800728e:	b580      	push	{r7, lr}
 8007290:	b086      	sub	sp, #24
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
 8007296:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usDiscreteCnt;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8007298:	2300      	movs	r3, #0
 800729a:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	881b      	ldrh	r3, [r3, #0]
 80072a0:	2b05      	cmp	r3, #5
 80072a2:	d16c      	bne.n	800737e <eMBFuncReadDiscreteInputs+0xf0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	3301      	adds	r3, #1
 80072a8:	781b      	ldrb	r3, [r3, #0]
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	021b      	lsls	r3, r3, #8
 80072ae:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	3302      	adds	r3, #2
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	b29a      	uxth	r2, r3
 80072b8:	8abb      	ldrh	r3, [r7, #20]
 80072ba:	4313      	orrs	r3, r2
 80072bc:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 80072be:	8abb      	ldrh	r3, [r7, #20]
 80072c0:	3301      	adds	r3, #1
 80072c2:	82bb      	strh	r3, [r7, #20]

        usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	3303      	adds	r3, #3
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	021b      	lsls	r3, r3, #8
 80072ce:	827b      	strh	r3, [r7, #18]
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	3304      	adds	r3, #4
 80072d4:	781b      	ldrb	r3, [r3, #0]
 80072d6:	b29a      	uxth	r2, r3
 80072d8:	8a7b      	ldrh	r3, [r7, #18]
 80072da:	4313      	orrs	r3, r2
 80072dc:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usDiscreteCnt >= 1 ) &&
 80072de:	8a7b      	ldrh	r3, [r7, #18]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d049      	beq.n	8007378 <eMBFuncReadDiscreteInputs+0xea>
 80072e4:	8a7b      	ldrh	r3, [r7, #18]
 80072e6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80072ea:	d245      	bcs.n	8007378 <eMBFuncReadDiscreteInputs+0xea>
            ( usDiscreteCnt < MB_PDU_FUNC_READ_DISCCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	2200      	movs	r2, #0
 80072f4:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	1c5a      	adds	r2, r3, #1
 80072fa:	60fa      	str	r2, [r7, #12]
 80072fc:	2202      	movs	r2, #2
 80072fe:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	881b      	ldrh	r3, [r3, #0]
 8007304:	3301      	adds	r3, #1
 8007306:	b29a      	uxth	r2, r3
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	801a      	strh	r2, [r3, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
 800730c:	8a7b      	ldrh	r3, [r7, #18]
 800730e:	f003 0307 	and.w	r3, r3, #7
 8007312:	2b00      	cmp	r3, #0
 8007314:	d006      	beq.n	8007324 <eMBFuncReadDiscreteInputs+0x96>
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
 8007316:	8a7b      	ldrh	r3, [r7, #18]
 8007318:	08db      	lsrs	r3, r3, #3
 800731a:	b29b      	uxth	r3, r3
 800731c:	b2db      	uxtb	r3, r3
 800731e:	3301      	adds	r3, #1
 8007320:	75fb      	strb	r3, [r7, #23]
 8007322:	e003      	b.n	800732c <eMBFuncReadDiscreteInputs+0x9e>
            }
            else
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
 8007324:	8a7b      	ldrh	r3, [r7, #18]
 8007326:	08db      	lsrs	r3, r3, #3
 8007328:	b29b      	uxth	r3, r3
 800732a:	75fb      	strb	r3, [r7, #23]
            }
            *pucFrameCur++ = ucNBytes;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	1c5a      	adds	r2, r3, #1
 8007330:	60fa      	str	r2, [r7, #12]
 8007332:	7dfa      	ldrb	r2, [r7, #23]
 8007334:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	881b      	ldrh	r3, [r3, #0]
 800733a:	3301      	adds	r3, #1
 800733c:	b29a      	uxth	r2, r3
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );
 8007342:	8a7a      	ldrh	r2, [r7, #18]
 8007344:	8abb      	ldrh	r3, [r7, #20]
 8007346:	4619      	mov	r1, r3
 8007348:	68f8      	ldr	r0, [r7, #12]
 800734a:	f001 f8f5 	bl	8008538 <eMBRegDiscreteCB>
 800734e:	4603      	mov	r3, r0
 8007350:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8007352:	7afb      	ldrb	r3, [r7, #11]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d006      	beq.n	8007366 <eMBFuncReadDiscreteInputs+0xd8>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8007358:	7afb      	ldrb	r3, [r7, #11]
 800735a:	4618      	mov	r0, r3
 800735c:	f000 faf2 	bl	8007944 <prveMBError2Exception>
 8007360:	4603      	mov	r3, r0
 8007362:	75bb      	strb	r3, [r7, #22]
            if( eRegStatus != MB_ENOERR )
 8007364:	e00d      	b.n	8007382 <eMBFuncReadDiscreteInputs+0xf4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	881a      	ldrh	r2, [r3, #0]
 800736a:	7dfb      	ldrb	r3, [r7, #23]
 800736c:	b29b      	uxth	r3, r3
 800736e:	4413      	add	r3, r2
 8007370:	b29a      	uxth	r2, r3
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8007376:	e004      	b.n	8007382 <eMBFuncReadDiscreteInputs+0xf4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8007378:	2303      	movs	r3, #3
 800737a:	75bb      	strb	r3, [r7, #22]
 800737c:	e001      	b.n	8007382 <eMBFuncReadDiscreteInputs+0xf4>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800737e:	2303      	movs	r3, #3
 8007380:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 8007382:	7dbb      	ldrb	r3, [r7, #22]
}
 8007384:	4618      	mov	r0, r3
 8007386:	3718      	adds	r7, #24
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}

0800738c <eMBFuncWriteHoldingRegister>:

#if MB_FUNC_WRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b084      	sub	sp, #16
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
 8007396:	2300      	movs	r3, #0
 8007398:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	881b      	ldrh	r3, [r3, #0]
 800739e:	2b05      	cmp	r3, #5
 80073a0:	d122      	bne.n	80073e8 <eMBFuncWriteHoldingRegister+0x5c>
    {
        usRegAddress  = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	3301      	adds	r3, #1
 80073a6:	781b      	ldrb	r3, [r3, #0]
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	021b      	lsls	r3, r3, #8
 80073ac:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	3302      	adds	r3, #2
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	b29a      	uxth	r2, r3
 80073b6:	89bb      	ldrh	r3, [r7, #12]
 80073b8:	4313      	orrs	r3, r2
 80073ba:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 80073bc:	89bb      	ldrh	r3, [r7, #12]
 80073be:	3301      	adds	r3, #1
 80073c0:	81bb      	strh	r3, [r7, #12]

        /* Make callback to update the value. */
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	1cd8      	adds	r0, r3, #3
 80073c6:	89b9      	ldrh	r1, [r7, #12]
 80073c8:	2301      	movs	r3, #1
 80073ca:	2201      	movs	r2, #1
 80073cc:	f000 ff80 	bl	80082d0 <eMBRegHoldingCB>
 80073d0:	4603      	mov	r3, r0
 80073d2:	72fb      	strb	r3, [r7, #11]
                                      usRegAddress, 1, MB_REG_WRITE );

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
 80073d4:	7afb      	ldrb	r3, [r7, #11]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d008      	beq.n	80073ec <eMBFuncWriteHoldingRegister+0x60>
        {
            eStatus = prveMBError2Exception( eRegStatus );
 80073da:	7afb      	ldrb	r3, [r7, #11]
 80073dc:	4618      	mov	r0, r3
 80073de:	f000 fab1 	bl	8007944 <prveMBError2Exception>
 80073e2:	4603      	mov	r3, r0
 80073e4:	73fb      	strb	r3, [r7, #15]
 80073e6:	e001      	b.n	80073ec <eMBFuncWriteHoldingRegister+0x60>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80073e8:	2303      	movs	r3, #3
 80073ea:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 80073ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3710      	adds	r7, #16
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}

080073f6 <eMBFuncWriteMultipleHoldingRegister>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_HOLDING_ENABLED > 0
eMBException
eMBFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 80073f6:	b580      	push	{r7, lr}
 80073f8:	b084      	sub	sp, #16
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6078      	str	r0, [r7, #4]
 80073fe:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
 8007400:	2300      	movs	r3, #0
 8007402:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	881b      	ldrh	r3, [r3, #0]
 8007408:	2b05      	cmp	r3, #5
 800740a:	d946      	bls.n	800749a <eMBFuncWriteMultipleHoldingRegister+0xa4>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	3301      	adds	r3, #1
 8007410:	781b      	ldrb	r3, [r3, #0]
 8007412:	b29b      	uxth	r3, r3
 8007414:	021b      	lsls	r3, r3, #8
 8007416:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	3302      	adds	r3, #2
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	b29a      	uxth	r2, r3
 8007420:	89bb      	ldrh	r3, [r7, #12]
 8007422:	4313      	orrs	r3, r2
 8007424:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8007426:	89bb      	ldrh	r3, [r7, #12]
 8007428:	3301      	adds	r3, #1
 800742a:	81bb      	strh	r3, [r7, #12]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	3303      	adds	r3, #3
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	b29b      	uxth	r3, r3
 8007434:	021b      	lsls	r3, r3, #8
 8007436:	817b      	strh	r3, [r7, #10]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	3304      	adds	r3, #4
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	b29a      	uxth	r2, r3
 8007440:	897b      	ldrh	r3, [r7, #10]
 8007442:	4313      	orrs	r3, r2
 8007444:	817b      	strh	r3, [r7, #10]

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	795b      	ldrb	r3, [r3, #5]
 800744a:	727b      	strb	r3, [r7, #9]

        if( ( usRegCount >= 1 ) &&
 800744c:	897b      	ldrh	r3, [r7, #10]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d020      	beq.n	8007494 <eMBFuncWriteMultipleHoldingRegister+0x9e>
 8007452:	897b      	ldrh	r3, [r7, #10]
 8007454:	2b78      	cmp	r3, #120	; 0x78
 8007456:	d81d      	bhi.n	8007494 <eMBFuncWriteMultipleHoldingRegister+0x9e>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
 8007458:	897b      	ldrh	r3, [r7, #10]
 800745a:	b2db      	uxtb	r3, r3
 800745c:	005b      	lsls	r3, r3, #1
 800745e:	b2db      	uxtb	r3, r3
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
 8007460:	7a7a      	ldrb	r2, [r7, #9]
 8007462:	429a      	cmp	r2, r3
 8007464:	d116      	bne.n	8007494 <eMBFuncWriteMultipleHoldingRegister+0x9e>
        {
            /* Make callback to update the register values. */
            eRegStatus =
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	1d98      	adds	r0, r3, #6
 800746a:	897a      	ldrh	r2, [r7, #10]
 800746c:	89b9      	ldrh	r1, [r7, #12]
 800746e:	2301      	movs	r3, #1
 8007470:	f000 ff2e 	bl	80082d0 <eMBRegHoldingCB>
 8007474:	4603      	mov	r3, r0
 8007476:	723b      	strb	r3, [r7, #8]
                                 usRegAddress, usRegCount, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8007478:	7a3b      	ldrb	r3, [r7, #8]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d006      	beq.n	800748c <eMBFuncWriteMultipleHoldingRegister+0x96>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800747e:	7a3b      	ldrb	r3, [r7, #8]
 8007480:	4618      	mov	r0, r3
 8007482:	f000 fa5f 	bl	8007944 <prveMBError2Exception>
 8007486:	4603      	mov	r3, r0
 8007488:	73fb      	strb	r3, [r7, #15]
            if( eRegStatus != MB_ENOERR )
 800748a:	e008      	b.n	800749e <eMBFuncWriteMultipleHoldingRegister+0xa8>
            {
                /* The response contains the function code, the starting
                 * address and the quantity of registers. We reuse the
                 * old values in the buffer because they are still valid.
                 */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	2205      	movs	r2, #5
 8007490:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8007492:	e004      	b.n	800749e <eMBFuncWriteMultipleHoldingRegister+0xa8>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8007494:	2303      	movs	r3, #3
 8007496:	73fb      	strb	r3, [r7, #15]
 8007498:	e001      	b.n	800749e <eMBFuncWriteMultipleHoldingRegister+0xa8>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800749a:	2303      	movs	r3, #3
 800749c:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 800749e:	7bfb      	ldrb	r3, [r7, #15]
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3710      	adds	r7, #16
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b086      	sub	sp, #24
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 80074b2:	2300      	movs	r3, #0
 80074b4:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	881b      	ldrh	r3, [r3, #0]
 80074ba:	2b05      	cmp	r3, #5
 80074bc:	d15c      	bne.n	8007578 <eMBFuncReadHoldingRegister+0xd0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	3301      	adds	r3, #1
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	021b      	lsls	r3, r3, #8
 80074c8:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	3302      	adds	r3, #2
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	b29a      	uxth	r2, r3
 80074d2:	8abb      	ldrh	r3, [r7, #20]
 80074d4:	4313      	orrs	r3, r2
 80074d6:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 80074d8:	8abb      	ldrh	r3, [r7, #20]
 80074da:	3301      	adds	r3, #1
 80074dc:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	3303      	adds	r3, #3
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	021b      	lsls	r3, r3, #8
 80074e8:	827b      	strh	r3, [r7, #18]
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	3304      	adds	r3, #4
 80074ee:	781b      	ldrb	r3, [r3, #0]
 80074f0:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
 80074f2:	8a7b      	ldrh	r3, [r7, #18]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d03c      	beq.n	8007572 <eMBFuncReadHoldingRegister+0xca>
 80074f8:	8a7b      	ldrh	r3, [r7, #18]
 80074fa:	2b7d      	cmp	r3, #125	; 0x7d
 80074fc:	d839      	bhi.n	8007572 <eMBFuncReadHoldingRegister+0xca>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	2200      	movs	r2, #0
 8007506:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	1c5a      	adds	r2, r3, #1
 800750c:	60fa      	str	r2, [r7, #12]
 800750e:	2203      	movs	r2, #3
 8007510:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	881b      	ldrh	r3, [r3, #0]
 8007516:	3301      	adds	r3, #1
 8007518:	b29a      	uxth	r2, r3
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 800751e:	8a7b      	ldrh	r3, [r7, #18]
 8007520:	b2da      	uxtb	r2, r3
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	1c59      	adds	r1, r3, #1
 8007526:	60f9      	str	r1, [r7, #12]
 8007528:	0052      	lsls	r2, r2, #1
 800752a:	b2d2      	uxtb	r2, r2
 800752c:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	881b      	ldrh	r3, [r3, #0]
 8007532:	3301      	adds	r3, #1
 8007534:	b29a      	uxth	r2, r3
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	801a      	strh	r2, [r3, #0]

            /* Make callback to fill the buffer. */
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 800753a:	8a7a      	ldrh	r2, [r7, #18]
 800753c:	8ab9      	ldrh	r1, [r7, #20]
 800753e:	2300      	movs	r3, #0
 8007540:	68f8      	ldr	r0, [r7, #12]
 8007542:	f000 fec5 	bl	80082d0 <eMBRegHoldingCB>
 8007546:	4603      	mov	r3, r0
 8007548:	72fb      	strb	r3, [r7, #11]
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 800754a:	7afb      	ldrb	r3, [r7, #11]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d006      	beq.n	800755e <eMBFuncReadHoldingRegister+0xb6>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8007550:	7afb      	ldrb	r3, [r7, #11]
 8007552:	4618      	mov	r0, r3
 8007554:	f000 f9f6 	bl	8007944 <prveMBError2Exception>
 8007558:	4603      	mov	r3, r0
 800755a:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 800755c:	e00e      	b.n	800757c <eMBFuncReadHoldingRegister+0xd4>
            }
            else
            {
                *usLen += usRegCount * 2;
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	881a      	ldrh	r2, [r3, #0]
 8007562:	8a7b      	ldrh	r3, [r7, #18]
 8007564:	005b      	lsls	r3, r3, #1
 8007566:	b29b      	uxth	r3, r3
 8007568:	4413      	add	r3, r2
 800756a:	b29a      	uxth	r2, r3
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8007570:	e004      	b.n	800757c <eMBFuncReadHoldingRegister+0xd4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8007572:	2303      	movs	r3, #3
 8007574:	75fb      	strb	r3, [r7, #23]
 8007576:	e001      	b.n	800757c <eMBFuncReadHoldingRegister+0xd4>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8007578:	2303      	movs	r3, #3
 800757a:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 800757c:	7dfb      	ldrb	r3, [r7, #23]
}
 800757e:	4618      	mov	r0, r3
 8007580:	3718      	adds	r7, #24
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}

08007586 <eMBFuncReadWriteMultipleHoldingRegister>:

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8007586:	b580      	push	{r7, lr}
 8007588:	b086      	sub	sp, #24
 800758a:	af00      	add	r7, sp, #0
 800758c:	6078      	str	r0, [r7, #4]
 800758e:	6039      	str	r1, [r7, #0]
    USHORT          usRegWriteAddress;
    USHORT          usRegWriteCount;
    UCHAR           ucRegWriteByteCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8007590:	2300      	movs	r3, #0
 8007592:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	881b      	ldrh	r3, [r3, #0]
 8007598:	2b09      	cmp	r3, #9
 800759a:	f240 8099 	bls.w	80076d0 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	3301      	adds	r3, #1
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	021b      	lsls	r3, r3, #8
 80075a8:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	3302      	adds	r3, #2
 80075ae:	781b      	ldrb	r3, [r3, #0]
 80075b0:	b29a      	uxth	r2, r3
 80075b2:	8abb      	ldrh	r3, [r7, #20]
 80075b4:	4313      	orrs	r3, r2
 80075b6:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress++;
 80075b8:	8abb      	ldrh	r3, [r7, #20]
 80075ba:	3301      	adds	r3, #1
 80075bc:	82bb      	strh	r3, [r7, #20]

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	3303      	adds	r3, #3
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	021b      	lsls	r3, r3, #8
 80075c8:	827b      	strh	r3, [r7, #18]
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	3304      	adds	r3, #4
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	b29a      	uxth	r2, r3
 80075d2:	8a7b      	ldrh	r3, [r7, #18]
 80075d4:	4313      	orrs	r3, r2
 80075d6:	827b      	strh	r3, [r7, #18]

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	3305      	adds	r3, #5
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	b29b      	uxth	r3, r3
 80075e0:	021b      	lsls	r3, r3, #8
 80075e2:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	3306      	adds	r3, #6
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	b29a      	uxth	r2, r3
 80075ec:	8a3b      	ldrh	r3, [r7, #16]
 80075ee:	4313      	orrs	r3, r2
 80075f0:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress++;
 80075f2:	8a3b      	ldrh	r3, [r7, #16]
 80075f4:	3301      	adds	r3, #1
 80075f6:	823b      	strh	r3, [r7, #16]

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	3307      	adds	r3, #7
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	b29b      	uxth	r3, r3
 8007600:	021b      	lsls	r3, r3, #8
 8007602:	81fb      	strh	r3, [r7, #14]
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	3308      	adds	r3, #8
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	b29a      	uxth	r2, r3
 800760c:	89fb      	ldrh	r3, [r7, #14]
 800760e:	4313      	orrs	r3, r2
 8007610:	81fb      	strh	r3, [r7, #14]

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	7a5b      	ldrb	r3, [r3, #9]
 8007616:	737b      	strb	r3, [r7, #13]

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 8007618:	8a7b      	ldrh	r3, [r7, #18]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d056      	beq.n	80076cc <eMBFuncReadWriteMultipleHoldingRegister+0x146>
 800761e:	8a7b      	ldrh	r3, [r7, #18]
 8007620:	2b7d      	cmp	r3, #125	; 0x7d
 8007622:	d853      	bhi.n	80076cc <eMBFuncReadWriteMultipleHoldingRegister+0x146>
 8007624:	89fb      	ldrh	r3, [r7, #14]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d050      	beq.n	80076cc <eMBFuncReadWriteMultipleHoldingRegister+0x146>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 800762a:	89fb      	ldrh	r3, [r7, #14]
 800762c:	2b79      	cmp	r3, #121	; 0x79
 800762e:	d84d      	bhi.n	80076cc <eMBFuncReadWriteMultipleHoldingRegister+0x146>
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
 8007630:	89fb      	ldrh	r3, [r7, #14]
 8007632:	005a      	lsls	r2, r3, #1
 8007634:	7b7b      	ldrb	r3, [r7, #13]
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 8007636:	429a      	cmp	r2, r3
 8007638:	d148      	bne.n	80076cc <eMBFuncReadWriteMultipleHoldingRegister+0x146>
        {
            /* Make callback to update the register values. */
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f103 000a 	add.w	r0, r3, #10
 8007640:	89fa      	ldrh	r2, [r7, #14]
 8007642:	8a39      	ldrh	r1, [r7, #16]
 8007644:	2301      	movs	r3, #1
 8007646:	f000 fe43 	bl	80082d0 <eMBRegHoldingCB>
 800764a:	4603      	mov	r3, r0
 800764c:	75bb      	strb	r3, [r7, #22]
                                          usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );

            if( eRegStatus == MB_ENOERR )
 800764e:	7dbb      	ldrb	r3, [r7, #22]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d131      	bne.n	80076b8 <eMBFuncReadWriteMultipleHoldingRegister+0x132>
            {
                /* Set the current PDU data pointer to the beginning. */
                pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	60bb      	str	r3, [r7, #8]
                *usLen = MB_PDU_FUNC_OFF;
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	2200      	movs	r2, #0
 800765c:	801a      	strh	r2, [r3, #0]

                /* First byte contains the function code. */
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	1c5a      	adds	r2, r3, #1
 8007662:	60ba      	str	r2, [r7, #8]
 8007664:	2217      	movs	r2, #23
 8007666:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	881b      	ldrh	r3, [r3, #0]
 800766c:	3301      	adds	r3, #1
 800766e:	b29a      	uxth	r2, r3
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	801a      	strh	r2, [r3, #0]

                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 8007674:	8a7b      	ldrh	r3, [r7, #18]
 8007676:	b2da      	uxtb	r2, r3
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	1c59      	adds	r1, r3, #1
 800767c:	60b9      	str	r1, [r7, #8]
 800767e:	0052      	lsls	r2, r2, #1
 8007680:	b2d2      	uxtb	r2, r2
 8007682:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	881b      	ldrh	r3, [r3, #0]
 8007688:	3301      	adds	r3, #1
 800768a:	b29a      	uxth	r2, r3
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	801a      	strh	r2, [r3, #0]

                /* Make the read callback. */
                eRegStatus =
                    eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
 8007690:	8a7a      	ldrh	r2, [r7, #18]
 8007692:	8ab9      	ldrh	r1, [r7, #20]
 8007694:	2300      	movs	r3, #0
 8007696:	68b8      	ldr	r0, [r7, #8]
 8007698:	f000 fe1a 	bl	80082d0 <eMBRegHoldingCB>
 800769c:	4603      	mov	r3, r0
 800769e:	75bb      	strb	r3, [r7, #22]
                if( eRegStatus == MB_ENOERR )
 80076a0:	7dbb      	ldrb	r3, [r7, #22]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d108      	bne.n	80076b8 <eMBFuncReadWriteMultipleHoldingRegister+0x132>
                {
                    *usLen += 2 * usRegReadCount;
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	881a      	ldrh	r2, [r3, #0]
 80076aa:	8a7b      	ldrh	r3, [r7, #18]
 80076ac:	005b      	lsls	r3, r3, #1
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	4413      	add	r3, r2
 80076b2:	b29a      	uxth	r2, r3
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	801a      	strh	r2, [r3, #0]
                }
            }
            if( eRegStatus != MB_ENOERR )
 80076b8:	7dbb      	ldrb	r3, [r7, #22]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d008      	beq.n	80076d0 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 80076be:	7dbb      	ldrb	r3, [r7, #22]
 80076c0:	4618      	mov	r0, r3
 80076c2:	f000 f93f 	bl	8007944 <prveMBError2Exception>
 80076c6:	4603      	mov	r3, r0
 80076c8:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 80076ca:	e001      	b.n	80076d0 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80076cc:	2303      	movs	r3, #3
 80076ce:	75fb      	strb	r3, [r7, #23]
        }
    }
    return eStatus;
 80076d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3718      	adds	r7, #24
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}

080076da <eMBFuncReadInputRegister>:
/* ----------------------- Start implementation -----------------------------*/
#if MB_FUNC_READ_INPUT_ENABLED > 0

eMBException
eMBFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
 80076da:	b580      	push	{r7, lr}
 80076dc:	b086      	sub	sp, #24
 80076de:	af00      	add	r7, sp, #0
 80076e0:	6078      	str	r0, [r7, #4]
 80076e2:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 80076e4:	2300      	movs	r3, #0
 80076e6:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	881b      	ldrh	r3, [r3, #0]
 80076ec:	2b05      	cmp	r3, #5
 80076ee:	d15f      	bne.n	80077b0 <eMBFuncReadInputRegister+0xd6>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	3301      	adds	r3, #1
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	021b      	lsls	r3, r3, #8
 80076fa:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	3302      	adds	r3, #2
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	b29a      	uxth	r2, r3
 8007704:	8abb      	ldrh	r3, [r7, #20]
 8007706:	4313      	orrs	r3, r2
 8007708:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 800770a:	8abb      	ldrh	r3, [r7, #20]
 800770c:	3301      	adds	r3, #1
 800770e:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	3303      	adds	r3, #3
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	b29b      	uxth	r3, r3
 8007718:	021b      	lsls	r3, r3, #8
 800771a:	827b      	strh	r3, [r7, #18]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	3304      	adds	r3, #4
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	b29a      	uxth	r2, r3
 8007724:	8a7b      	ldrh	r3, [r7, #18]
 8007726:	4313      	orrs	r3, r2
 8007728:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 )
 800772a:	8a7b      	ldrh	r3, [r7, #18]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d03c      	beq.n	80077aa <eMBFuncReadInputRegister+0xd0>
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
 8007730:	8a7b      	ldrh	r3, [r7, #18]
 8007732:	2b7c      	cmp	r3, #124	; 0x7c
 8007734:	d839      	bhi.n	80077aa <eMBFuncReadInputRegister+0xd0>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	2200      	movs	r2, #0
 800773e:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	1c5a      	adds	r2, r3, #1
 8007744:	60fa      	str	r2, [r7, #12]
 8007746:	2204      	movs	r2, #4
 8007748:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	881b      	ldrh	r3, [r3, #0]
 800774e:	3301      	adds	r3, #1
 8007750:	b29a      	uxth	r2, r3
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
 8007756:	8a7b      	ldrh	r3, [r7, #18]
 8007758:	b2da      	uxtb	r2, r3
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	1c59      	adds	r1, r3, #1
 800775e:	60f9      	str	r1, [r7, #12]
 8007760:	0052      	lsls	r2, r2, #1
 8007762:	b2d2      	uxtb	r2, r2
 8007764:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	881b      	ldrh	r3, [r3, #0]
 800776a:	3301      	adds	r3, #1
 800776c:	b29a      	uxth	r2, r3
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );
 8007772:	8a7a      	ldrh	r2, [r7, #18]
 8007774:	8abb      	ldrh	r3, [r7, #20]
 8007776:	4619      	mov	r1, r3
 8007778:	68f8      	ldr	r0, [r7, #12]
 800777a:	f000 fd55 	bl	8008228 <eMBRegInputCB>
 800777e:	4603      	mov	r3, r0
 8007780:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8007782:	7afb      	ldrb	r3, [r7, #11]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d006      	beq.n	8007796 <eMBFuncReadInputRegister+0xbc>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8007788:	7afb      	ldrb	r3, [r7, #11]
 800778a:	4618      	mov	r0, r3
 800778c:	f000 f8da 	bl	8007944 <prveMBError2Exception>
 8007790:	4603      	mov	r3, r0
 8007792:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 8007794:	e00e      	b.n	80077b4 <eMBFuncReadInputRegister+0xda>
            }
            else
            {
                *usLen += usRegCount * 2;
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	881a      	ldrh	r2, [r3, #0]
 800779a:	8a7b      	ldrh	r3, [r7, #18]
 800779c:	005b      	lsls	r3, r3, #1
 800779e:	b29b      	uxth	r3, r3
 80077a0:	4413      	add	r3, r2
 80077a2:	b29a      	uxth	r2, r3
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 80077a8:	e004      	b.n	80077b4 <eMBFuncReadInputRegister+0xda>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80077aa:	2303      	movs	r3, #3
 80077ac:	75fb      	strb	r3, [r7, #23]
 80077ae:	e001      	b.n	80077b4 <eMBFuncReadInputRegister+0xda>
    }
    else
    {
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80077b0:	2303      	movs	r3, #3
 80077b2:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 80077b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3718      	adds	r7, #24
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
	...

080077c0 <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b082      	sub	sp, #8
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	6039      	str	r1, [r7, #0]
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	3301      	adds	r3, #1
 80077ce:	4a08      	ldr	r2, [pc, #32]	; (80077f0 <eMBFuncReportSlaveID+0x30>)
 80077d0:	8812      	ldrh	r2, [r2, #0]
 80077d2:	4908      	ldr	r1, [pc, #32]	; (80077f4 <eMBFuncReportSlaveID+0x34>)
 80077d4:	4618      	mov	r0, r3
 80077d6:	f001 fac2 	bl	8008d5e <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 80077da:	4b05      	ldr	r3, [pc, #20]	; (80077f0 <eMBFuncReportSlaveID+0x30>)
 80077dc:	881b      	ldrh	r3, [r3, #0]
 80077de:	3301      	adds	r3, #1
 80077e0:	b29a      	uxth	r2, r3
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	801a      	strh	r2, [r3, #0]
    return MB_EX_NONE;
 80077e6:	2300      	movs	r3, #0
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3708      	adds	r7, #8
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}
 80077f0:	20004b00 	.word	0x20004b00
 80077f4:	20004ae0 	.word	0x20004ae0

080077f8 <xMBUtilSetBits>:

/* ----------------------- Start implementation -----------------------------*/
void
xMBUtilSetBits( UCHAR * ucByteBuf, USHORT usBitOffset, UCHAR ucNBits,
                UCHAR ucValue )
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b086      	sub	sp, #24
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	4608      	mov	r0, r1
 8007802:	4611      	mov	r1, r2
 8007804:	461a      	mov	r2, r3
 8007806:	4603      	mov	r3, r0
 8007808:	807b      	strh	r3, [r7, #2]
 800780a:	460b      	mov	r3, r1
 800780c:	707b      	strb	r3, [r7, #1]
 800780e:	4613      	mov	r3, r2
 8007810:	703b      	strb	r3, [r7, #0]
    USHORT          usWordBuf;
    USHORT          usMask;
    USHORT          usByteOffset;
    USHORT          usNPreBits;
    USHORT          usValue = ucValue;
 8007812:	783b      	ldrb	r3, [r7, #0]
 8007814:	82fb      	strh	r3, [r7, #22]

    assert( ucNBits <= 8 );
 8007816:	787b      	ldrb	r3, [r7, #1]
 8007818:	2b08      	cmp	r3, #8
 800781a:	d905      	bls.n	8007828 <xMBUtilSetBits+0x30>
 800781c:	4b29      	ldr	r3, [pc, #164]	; (80078c4 <xMBUtilSetBits+0xcc>)
 800781e:	4a2a      	ldr	r2, [pc, #168]	; (80078c8 <xMBUtilSetBits+0xd0>)
 8007820:	2136      	movs	r1, #54	; 0x36
 8007822:	482a      	ldr	r0, [pc, #168]	; (80078cc <xMBUtilSetBits+0xd4>)
 8007824:	f001 f948 	bl	8008ab8 <__assert_func>
    assert( ( size_t )BITS_UCHAR == sizeof( UCHAR ) * 8 );

    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );
 8007828:	887b      	ldrh	r3, [r7, #2]
 800782a:	08db      	lsrs	r3, r3, #3
 800782c:	82bb      	strh	r3, [r7, #20]

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );
 800782e:	8abb      	ldrh	r3, [r7, #20]
 8007830:	00db      	lsls	r3, r3, #3
 8007832:	b29b      	uxth	r3, r3
 8007834:	887a      	ldrh	r2, [r7, #2]
 8007836:	1ad3      	subs	r3, r2, r3
 8007838:	827b      	strh	r3, [r7, #18]

    /* Move bit field into position over bits to set */
    usValue <<= usNPreBits;
 800783a:	8afa      	ldrh	r2, [r7, #22]
 800783c:	8a7b      	ldrh	r3, [r7, #18]
 800783e:	fa02 f303 	lsl.w	r3, r2, r3
 8007842:	82fb      	strh	r3, [r7, #22]

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 8007844:	787b      	ldrb	r3, [r7, #1]
 8007846:	2201      	movs	r2, #1
 8007848:	fa02 f303 	lsl.w	r3, r2, r3
 800784c:	b29b      	uxth	r3, r3
 800784e:	3b01      	subs	r3, #1
 8007850:	823b      	strh	r3, [r7, #16]
    usMask <<= usBitOffset - usByteOffset * BITS_UCHAR;
 8007852:	8a3a      	ldrh	r2, [r7, #16]
 8007854:	8879      	ldrh	r1, [r7, #2]
 8007856:	8abb      	ldrh	r3, [r7, #20]
 8007858:	00db      	lsls	r3, r3, #3
 800785a:	1acb      	subs	r3, r1, r3
 800785c:	fa02 f303 	lsl.w	r3, r2, r3
 8007860:	823b      	strh	r3, [r7, #16]

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
 8007862:	8abb      	ldrh	r3, [r7, #20]
 8007864:	687a      	ldr	r2, [r7, #4]
 8007866:	4413      	add	r3, r2
 8007868:	781b      	ldrb	r3, [r3, #0]
 800786a:	81fb      	strh	r3, [r7, #14]
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 800786c:	8abb      	ldrh	r3, [r7, #20]
 800786e:	3301      	adds	r3, #1
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	4413      	add	r3, r2
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	021b      	lsls	r3, r3, #8
 8007878:	b21a      	sxth	r2, r3
 800787a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800787e:	4313      	orrs	r3, r2
 8007880:	b21b      	sxth	r3, r3
 8007882:	81fb      	strh	r3, [r7, #14]

    /* Zero out bit field bits and then or value bits into them. */
    usWordBuf = ( USHORT )( ( usWordBuf & ( ~usMask ) ) | usValue );
 8007884:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007888:	43db      	mvns	r3, r3
 800788a:	b21a      	sxth	r2, r3
 800788c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007890:	4013      	ands	r3, r2
 8007892:	b21a      	sxth	r2, r3
 8007894:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007898:	4313      	orrs	r3, r2
 800789a:	b21b      	sxth	r3, r3
 800789c:	81fb      	strh	r3, [r7, #14]

    /* move bits back into storage */
    ucByteBuf[usByteOffset] = ( UCHAR )( usWordBuf & 0xFF );
 800789e:	8abb      	ldrh	r3, [r7, #20]
 80078a0:	687a      	ldr	r2, [r7, #4]
 80078a2:	4413      	add	r3, r2
 80078a4:	89fa      	ldrh	r2, [r7, #14]
 80078a6:	b2d2      	uxtb	r2, r2
 80078a8:	701a      	strb	r2, [r3, #0]
    ucByteBuf[usByteOffset + 1] = ( UCHAR )( usWordBuf >> BITS_UCHAR );
 80078aa:	89fb      	ldrh	r3, [r7, #14]
 80078ac:	0a1b      	lsrs	r3, r3, #8
 80078ae:	b299      	uxth	r1, r3
 80078b0:	8abb      	ldrh	r3, [r7, #20]
 80078b2:	3301      	adds	r3, #1
 80078b4:	687a      	ldr	r2, [r7, #4]
 80078b6:	4413      	add	r3, r2
 80078b8:	b2ca      	uxtb	r2, r1
 80078ba:	701a      	strb	r2, [r3, #0]
}
 80078bc:	bf00      	nop
 80078be:	3718      	adds	r7, #24
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}
 80078c4:	08009bc0 	.word	0x08009bc0
 80078c8:	08009d4c 	.word	0x08009d4c
 80078cc:	08009bd0 	.word	0x08009bd0

080078d0 <xMBUtilGetBits>:

UCHAR
xMBUtilGetBits( UCHAR * ucByteBuf, USHORT usBitOffset, UCHAR ucNBits )
{
 80078d0:	b480      	push	{r7}
 80078d2:	b085      	sub	sp, #20
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	460b      	mov	r3, r1
 80078da:	807b      	strh	r3, [r7, #2]
 80078dc:	4613      	mov	r3, r2
 80078de:	707b      	strb	r3, [r7, #1]
    USHORT          usByteOffset;
    USHORT          usNPreBits;

    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );
 80078e0:	887b      	ldrh	r3, [r7, #2]
 80078e2:	08db      	lsrs	r3, r3, #3
 80078e4:	81fb      	strh	r3, [r7, #14]

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );
 80078e6:	89fb      	ldrh	r3, [r7, #14]
 80078e8:	00db      	lsls	r3, r3, #3
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	887a      	ldrh	r2, [r7, #2]
 80078ee:	1ad3      	subs	r3, r2, r3
 80078f0:	81bb      	strh	r3, [r7, #12]

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 80078f2:	787b      	ldrb	r3, [r7, #1]
 80078f4:	2201      	movs	r2, #1
 80078f6:	fa02 f303 	lsl.w	r3, r2, r3
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	3b01      	subs	r3, #1
 80078fe:	817b      	strh	r3, [r7, #10]

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
 8007900:	89fb      	ldrh	r3, [r7, #14]
 8007902:	687a      	ldr	r2, [r7, #4]
 8007904:	4413      	add	r3, r2
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	813b      	strh	r3, [r7, #8]
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 800790a:	89fb      	ldrh	r3, [r7, #14]
 800790c:	3301      	adds	r3, #1
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	4413      	add	r3, r2
 8007912:	781b      	ldrb	r3, [r3, #0]
 8007914:	021b      	lsls	r3, r3, #8
 8007916:	b21a      	sxth	r2, r3
 8007918:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800791c:	4313      	orrs	r3, r2
 800791e:	b21b      	sxth	r3, r3
 8007920:	813b      	strh	r3, [r7, #8]

    /* throw away unneeded bits. */
    usWordBuf >>= usNPreBits;
 8007922:	893a      	ldrh	r2, [r7, #8]
 8007924:	89bb      	ldrh	r3, [r7, #12]
 8007926:	fa42 f303 	asr.w	r3, r2, r3
 800792a:	813b      	strh	r3, [r7, #8]

    /* mask away bits above the requested bitfield. */
    usWordBuf &= usMask;
 800792c:	893a      	ldrh	r2, [r7, #8]
 800792e:	897b      	ldrh	r3, [r7, #10]
 8007930:	4013      	ands	r3, r2
 8007932:	813b      	strh	r3, [r7, #8]

    return ( UCHAR ) usWordBuf;
 8007934:	893b      	ldrh	r3, [r7, #8]
 8007936:	b2db      	uxtb	r3, r3
}
 8007938:	4618      	mov	r0, r3
 800793a:	3714      	adds	r7, #20
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr

08007944 <prveMBError2Exception>:

eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
 8007944:	b480      	push	{r7}
 8007946:	b085      	sub	sp, #20
 8007948:	af00      	add	r7, sp, #0
 800794a:	4603      	mov	r3, r0
 800794c:	71fb      	strb	r3, [r7, #7]
    eMBException    eStatus;

    switch ( eErrorCode )
 800794e:	79fb      	ldrb	r3, [r7, #7]
 8007950:	2b07      	cmp	r3, #7
 8007952:	d00c      	beq.n	800796e <prveMBError2Exception+0x2a>
 8007954:	2b07      	cmp	r3, #7
 8007956:	dc0d      	bgt.n	8007974 <prveMBError2Exception+0x30>
 8007958:	2b00      	cmp	r3, #0
 800795a:	d002      	beq.n	8007962 <prveMBError2Exception+0x1e>
 800795c:	2b01      	cmp	r3, #1
 800795e:	d003      	beq.n	8007968 <prveMBError2Exception+0x24>
 8007960:	e008      	b.n	8007974 <prveMBError2Exception+0x30>
    {
        case MB_ENOERR:
            eStatus = MB_EX_NONE;
 8007962:	2300      	movs	r3, #0
 8007964:	73fb      	strb	r3, [r7, #15]
            break;
 8007966:	e008      	b.n	800797a <prveMBError2Exception+0x36>

        case MB_ENOREG:
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
 8007968:	2302      	movs	r3, #2
 800796a:	73fb      	strb	r3, [r7, #15]
            break;
 800796c:	e005      	b.n	800797a <prveMBError2Exception+0x36>

        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
 800796e:	2306      	movs	r3, #6
 8007970:	73fb      	strb	r3, [r7, #15]
            break;
 8007972:	e002      	b.n	800797a <prveMBError2Exception+0x36>

        default:
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
 8007974:	2304      	movs	r3, #4
 8007976:	73fb      	strb	r3, [r7, #15]
            break;
 8007978:	bf00      	nop
    }

    return eStatus;
 800797a:	7bfb      	ldrb	r3, [r7, #15]
}
 800797c:	4618      	mov	r0, r3
 800797e:	3714      	adds	r7, #20
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr

08007988 <eMBInit>:
};

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBInit( eMBMode eMode, UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b084      	sub	sp, #16
 800798c:	af00      	add	r7, sp, #0
 800798e:	603b      	str	r3, [r7, #0]
 8007990:	4603      	mov	r3, r0
 8007992:	71fb      	strb	r3, [r7, #7]
 8007994:	460b      	mov	r3, r1
 8007996:	71bb      	strb	r3, [r7, #6]
 8007998:	4613      	mov	r3, r2
 800799a:	717b      	strb	r3, [r7, #5]
    eMBErrorCode    eStatus = MB_ENOERR;
 800799c:	2300      	movs	r3, #0
 800799e:	73fb      	strb	r3, [r7, #15]

    /* check preconditions */
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
 80079a0:	79bb      	ldrb	r3, [r7, #6]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d005      	beq.n	80079b2 <eMBInit+0x2a>
 80079a6:	79bb      	ldrb	r3, [r7, #6]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d002      	beq.n	80079b2 <eMBInit+0x2a>
        ( ucSlaveAddress < MB_ADDRESS_MIN ) || ( ucSlaveAddress > MB_ADDRESS_MAX ) )
 80079ac:	79bb      	ldrb	r3, [r7, #6]
 80079ae:	2bf7      	cmp	r3, #247	; 0xf7
 80079b0:	d902      	bls.n	80079b8 <eMBInit+0x30>
    {
        eStatus = MB_EINVAL;
 80079b2:	2302      	movs	r3, #2
 80079b4:	73fb      	strb	r3, [r7, #15]
 80079b6:	e03a      	b.n	8007a2e <eMBInit+0xa6>
    }
    else
    {
        ucMBAddress = ucSlaveAddress;
 80079b8:	4a1f      	ldr	r2, [pc, #124]	; (8007a38 <eMBInit+0xb0>)
 80079ba:	79bb      	ldrb	r3, [r7, #6]
 80079bc:	7013      	strb	r3, [r2, #0]

        switch ( eMode )
 80079be:	79fb      	ldrb	r3, [r7, #7]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d121      	bne.n	8007a08 <eMBInit+0x80>
        {
#if MB_SLAVE_RTU_ENABLED > 0
        case MB_RTU:
            pvMBFrameStartCur = eMBRTUStart;
 80079c4:	4b1d      	ldr	r3, [pc, #116]	; (8007a3c <eMBInit+0xb4>)
 80079c6:	4a1e      	ldr	r2, [pc, #120]	; (8007a40 <eMBInit+0xb8>)
 80079c8:	601a      	str	r2, [r3, #0]
            pvMBFrameStopCur = eMBRTUStop;
 80079ca:	4b1e      	ldr	r3, [pc, #120]	; (8007a44 <eMBInit+0xbc>)
 80079cc:	4a1e      	ldr	r2, [pc, #120]	; (8007a48 <eMBInit+0xc0>)
 80079ce:	601a      	str	r2, [r3, #0]
            peMBFrameSendCur = eMBRTUSend;
 80079d0:	4b1e      	ldr	r3, [pc, #120]	; (8007a4c <eMBInit+0xc4>)
 80079d2:	4a1f      	ldr	r2, [pc, #124]	; (8007a50 <eMBInit+0xc8>)
 80079d4:	601a      	str	r2, [r3, #0]
            peMBFrameReceiveCur = eMBRTUReceive;
 80079d6:	4b1f      	ldr	r3, [pc, #124]	; (8007a54 <eMBInit+0xcc>)
 80079d8:	4a1f      	ldr	r2, [pc, #124]	; (8007a58 <eMBInit+0xd0>)
 80079da:	601a      	str	r2, [r3, #0]
            pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
 80079dc:	4b1f      	ldr	r3, [pc, #124]	; (8007a5c <eMBInit+0xd4>)
 80079de:	2200      	movs	r2, #0
 80079e0:	601a      	str	r2, [r3, #0]
            pxMBFrameCBByteReceived = xMBRTUReceiveFSM;			//call back from interrupt
 80079e2:	4b1f      	ldr	r3, [pc, #124]	; (8007a60 <eMBInit+0xd8>)
 80079e4:	4a1f      	ldr	r2, [pc, #124]	; (8007a64 <eMBInit+0xdc>)
 80079e6:	601a      	str	r2, [r3, #0]
            pxMBFrameCBTransmitterEmpty = xMBRTUTransmitFSM;	//call back from interrupt
 80079e8:	4b1f      	ldr	r3, [pc, #124]	; (8007a68 <eMBInit+0xe0>)
 80079ea:	4a20      	ldr	r2, [pc, #128]	; (8007a6c <eMBInit+0xe4>)
 80079ec:	601a      	str	r2, [r3, #0]
            pxMBPortCBTimerExpired = xMBRTUTimerT35Expired;		//call back from interrupt
 80079ee:	4b20      	ldr	r3, [pc, #128]	; (8007a70 <eMBInit+0xe8>)
 80079f0:	4a20      	ldr	r2, [pc, #128]	; (8007a74 <eMBInit+0xec>)
 80079f2:	601a      	str	r2, [r3, #0]

            eStatus = eMBRTUInit( ucMBAddress, ucPort, ulBaudRate, eParity );
 80079f4:	4b10      	ldr	r3, [pc, #64]	; (8007a38 <eMBInit+0xb0>)
 80079f6:	7818      	ldrb	r0, [r3, #0]
 80079f8:	7e3b      	ldrb	r3, [r7, #24]
 80079fa:	7979      	ldrb	r1, [r7, #5]
 80079fc:	683a      	ldr	r2, [r7, #0]
 80079fe:	f000 fe45 	bl	800868c <eMBRTUInit>
 8007a02:	4603      	mov	r3, r0
 8007a04:	73fb      	strb	r3, [r7, #15]
            break;
 8007a06:	e001      	b.n	8007a0c <eMBInit+0x84>

            eStatus = eMBASCIIInit( ucMBAddress, ucPort, ulBaudRate, eParity );
            break;
#endif
        default:
            eStatus = MB_EINVAL;
 8007a08:	2302      	movs	r3, #2
 8007a0a:	73fb      	strb	r3, [r7, #15]
        }

        if( eStatus == MB_ENOERR )
 8007a0c:	7bfb      	ldrb	r3, [r7, #15]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d10d      	bne.n	8007a2e <eMBInit+0xa6>
        {
            if( !xMBPortEventInit(  ) )
 8007a12:	f000 fa29 	bl	8007e68 <xMBPortEventInit>
 8007a16:	4603      	mov	r3, r0
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d102      	bne.n	8007a22 <eMBInit+0x9a>
            {
                /* port dependent event module initalization failed. */
                eStatus = MB_EPORTERR;
 8007a1c:	2303      	movs	r3, #3
 8007a1e:	73fb      	strb	r3, [r7, #15]
 8007a20:	e005      	b.n	8007a2e <eMBInit+0xa6>
            }
            else
            {
                eMBCurrentMode = eMode;
 8007a22:	4a15      	ldr	r2, [pc, #84]	; (8007a78 <eMBInit+0xf0>)
 8007a24:	79fb      	ldrb	r3, [r7, #7]
 8007a26:	7013      	strb	r3, [r2, #0]
                eMBState = STATE_DISABLED;
 8007a28:	4b14      	ldr	r3, [pc, #80]	; (8007a7c <eMBInit+0xf4>)
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	701a      	strb	r2, [r3, #0]
            }
        }
    }
    return eStatus;
 8007a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3710      	adds	r7, #16
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}
 8007a38:	20004b02 	.word	0x20004b02
 8007a3c:	20004b08 	.word	0x20004b08
 8007a40:	08008705 	.word	0x08008705
 8007a44:	20004b0c 	.word	0x20004b0c
 8007a48:	0800872d 	.word	0x0800872d
 8007a4c:	20004b04 	.word	0x20004b04
 8007a50:	080087e5 	.word	0x080087e5
 8007a54:	20004b10 	.word	0x20004b10
 8007a58:	08008749 	.word	0x08008749
 8007a5c:	20004b14 	.word	0x20004b14
 8007a60:	20004d8c 	.word	0x20004d8c
 8007a64:	080088ad 	.word	0x080088ad
 8007a68:	20004d84 	.word	0x20004d84
 8007a6c:	0800897d 	.word	0x0800897d
 8007a70:	20004d88 	.word	0x20004d88
 8007a74:	08008a2d 	.word	0x08008a2d
 8007a78:	20004b03 	.word	0x20004b03
 8007a7c:	20000010 	.word	0x20000010

08007a80 <eMBEnable>:
    return eStatus;
}

eMBErrorCode
eMBEnable( void )
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b082      	sub	sp, #8
 8007a84:	af00      	add	r7, sp, #0
    eMBErrorCode    eStatus = MB_ENOERR;
 8007a86:	2300      	movs	r3, #0
 8007a88:	71fb      	strb	r3, [r7, #7]

    if( eMBState == STATE_DISABLED )
 8007a8a:	4b09      	ldr	r3, [pc, #36]	; (8007ab0 <eMBEnable+0x30>)
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d106      	bne.n	8007aa0 <eMBEnable+0x20>
    {
        /* Activate the protocol stack. */
        pvMBFrameStartCur(  );
 8007a92:	4b08      	ldr	r3, [pc, #32]	; (8007ab4 <eMBEnable+0x34>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 8007a98:	4b05      	ldr	r3, [pc, #20]	; (8007ab0 <eMBEnable+0x30>)
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	701a      	strb	r2, [r3, #0]
 8007a9e:	e001      	b.n	8007aa4 <eMBEnable+0x24>
    }
    else
    {
        eStatus = MB_EILLSTATE;
 8007aa0:	2306      	movs	r3, #6
 8007aa2:	71fb      	strb	r3, [r7, #7]
    }
    return eStatus;
 8007aa4:	79fb      	ldrb	r3, [r7, #7]
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3708      	adds	r7, #8
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}
 8007aae:	bf00      	nop
 8007ab0:	20000010 	.word	0x20000010
 8007ab4:	20004b08 	.word	0x20004b08

08007ab8 <eMBPoll>:
    return eStatus;
}

eMBErrorCode
eMBPoll( void )
{
 8007ab8:	b590      	push	{r4, r7, lr}
 8007aba:	b083      	sub	sp, #12
 8007abc:	af00      	add	r7, sp, #0
    static UCHAR    ucFunctionCode;
    static USHORT   usLength;
    static eMBException eException;

    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	70fb      	strb	r3, [r7, #3]
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
 8007ac2:	4b56      	ldr	r3, [pc, #344]	; (8007c1c <eMBPoll+0x164>)
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d001      	beq.n	8007ace <eMBPoll+0x16>
    {
        return MB_EILLSTATE;
 8007aca:	2306      	movs	r3, #6
 8007acc:	e0a1      	b.n	8007c12 <eMBPoll+0x15a>
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
 8007ace:	1cbb      	adds	r3, r7, #2
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f000 fa17 	bl	8007f04 <xMBPortEventGet>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	f040 8094 	bne.w	8007c06 <eMBPoll+0x14e>
    {
        switch ( eEvent )
 8007ade:	78bb      	ldrb	r3, [r7, #2]
 8007ae0:	3b01      	subs	r3, #1
 8007ae2:	2b07      	cmp	r3, #7
 8007ae4:	f200 8094 	bhi.w	8007c10 <eMBPoll+0x158>
 8007ae8:	a201      	add	r2, pc, #4	; (adr r2, 8007af0 <eMBPoll+0x38>)
 8007aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aee:	bf00      	nop
 8007af0:	08007c11 	.word	0x08007c11
 8007af4:	08007b11 	.word	0x08007b11
 8007af8:	08007c11 	.word	0x08007c11
 8007afc:	08007b43 	.word	0x08007b43
 8007b00:	08007c11 	.word	0x08007c11
 8007b04:	08007c11 	.word	0x08007c11
 8007b08:	08007c11 	.word	0x08007c11
 8007b0c:	08007c11 	.word	0x08007c11
        case EV_READY:

            break;

        case EV_FRAME_RECEIVED:
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 8007b10:	4b43      	ldr	r3, [pc, #268]	; (8007c20 <eMBPoll+0x168>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a43      	ldr	r2, [pc, #268]	; (8007c24 <eMBPoll+0x16c>)
 8007b16:	4944      	ldr	r1, [pc, #272]	; (8007c28 <eMBPoll+0x170>)
 8007b18:	4844      	ldr	r0, [pc, #272]	; (8007c2c <eMBPoll+0x174>)
 8007b1a:	4798      	blx	r3
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	70fb      	strb	r3, [r7, #3]
            if( eStatus == MB_ENOERR )
 8007b20:	78fb      	ldrb	r3, [r7, #3]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d171      	bne.n	8007c0a <eMBPoll+0x152>
            {
                /* Check if the frame is for us. If not ignore the frame. */
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
 8007b26:	4b41      	ldr	r3, [pc, #260]	; (8007c2c <eMBPoll+0x174>)
 8007b28:	781a      	ldrb	r2, [r3, #0]
 8007b2a:	4b41      	ldr	r3, [pc, #260]	; (8007c30 <eMBPoll+0x178>)
 8007b2c:	781b      	ldrb	r3, [r3, #0]
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	d003      	beq.n	8007b3a <eMBPoll+0x82>
 8007b32:	4b3e      	ldr	r3, [pc, #248]	; (8007c2c <eMBPoll+0x174>)
 8007b34:	781b      	ldrb	r3, [r3, #0]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d167      	bne.n	8007c0a <eMBPoll+0x152>
                {
                    ( void )xMBPortEventPost( EV_EXECUTE );
 8007b3a:	2004      	movs	r0, #4
 8007b3c:	f000 f9b4 	bl	8007ea8 <xMBPortEventPost>
                }
            }
            break;
 8007b40:	e063      	b.n	8007c0a <eMBPoll+0x152>

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 8007b42:	4b39      	ldr	r3, [pc, #228]	; (8007c28 <eMBPoll+0x170>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	781a      	ldrb	r2, [r3, #0]
 8007b48:	4b3a      	ldr	r3, [pc, #232]	; (8007c34 <eMBPoll+0x17c>)
 8007b4a:	701a      	strb	r2, [r3, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 8007b4c:	4b3a      	ldr	r3, [pc, #232]	; (8007c38 <eMBPoll+0x180>)
 8007b4e:	2201      	movs	r2, #1
 8007b50:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 8007b52:	2300      	movs	r3, #0
 8007b54:	607b      	str	r3, [r7, #4]
 8007b56:	e01f      	b.n	8007b98 <eMBPoll+0xe0>
            {
                /* No more function handlers registered. Abort. */
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 8007b58:	4a38      	ldr	r2, [pc, #224]	; (8007c3c <eMBPoll+0x184>)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d01d      	beq.n	8007ba0 <eMBPoll+0xe8>
                {
                    break;
                }
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 8007b64:	4a35      	ldr	r2, [pc, #212]	; (8007c3c <eMBPoll+0x184>)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8007b6c:	4b31      	ldr	r3, [pc, #196]	; (8007c34 <eMBPoll+0x17c>)
 8007b6e:	781b      	ldrb	r3, [r3, #0]
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d10e      	bne.n	8007b92 <eMBPoll+0xda>
                {
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
 8007b74:	4a31      	ldr	r2, [pc, #196]	; (8007c3c <eMBPoll+0x184>)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	00db      	lsls	r3, r3, #3
 8007b7a:	4413      	add	r3, r2
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	4a2a      	ldr	r2, [pc, #168]	; (8007c28 <eMBPoll+0x170>)
 8007b80:	6812      	ldr	r2, [r2, #0]
 8007b82:	4928      	ldr	r1, [pc, #160]	; (8007c24 <eMBPoll+0x16c>)
 8007b84:	4610      	mov	r0, r2
 8007b86:	4798      	blx	r3
 8007b88:	4603      	mov	r3, r0
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	4b2a      	ldr	r3, [pc, #168]	; (8007c38 <eMBPoll+0x180>)
 8007b8e:	701a      	strb	r2, [r3, #0]
                    break;
 8007b90:	e007      	b.n	8007ba2 <eMBPoll+0xea>
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	3301      	adds	r3, #1
 8007b96:	607b      	str	r3, [r7, #4]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2b0f      	cmp	r3, #15
 8007b9c:	dddc      	ble.n	8007b58 <eMBPoll+0xa0>
 8007b9e:	e000      	b.n	8007ba2 <eMBPoll+0xea>
                    break;
 8007ba0:	bf00      	nop
                }
            }

            /* If the request was not sent to the broadcast address we
             * return a reply. */
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 8007ba2:	4b22      	ldr	r3, [pc, #136]	; (8007c2c <eMBPoll+0x174>)
 8007ba4:	781b      	ldrb	r3, [r3, #0]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d031      	beq.n	8007c0e <eMBPoll+0x156>
            {
                if( eException != MB_EX_NONE )
 8007baa:	4b23      	ldr	r3, [pc, #140]	; (8007c38 <eMBPoll+0x180>)
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d01d      	beq.n	8007bee <eMBPoll+0x136>
                {
                    /* An exception occured. Build an error frame. */
                    usLength = 0;
 8007bb2:	4b1c      	ldr	r3, [pc, #112]	; (8007c24 <eMBPoll+0x16c>)
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	801a      	strh	r2, [r3, #0]
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 8007bb8:	4b1e      	ldr	r3, [pc, #120]	; (8007c34 <eMBPoll+0x17c>)
 8007bba:	781a      	ldrb	r2, [r3, #0]
 8007bbc:	4b1a      	ldr	r3, [pc, #104]	; (8007c28 <eMBPoll+0x170>)
 8007bbe:	6819      	ldr	r1, [r3, #0]
 8007bc0:	4b18      	ldr	r3, [pc, #96]	; (8007c24 <eMBPoll+0x16c>)
 8007bc2:	881b      	ldrh	r3, [r3, #0]
 8007bc4:	1c58      	adds	r0, r3, #1
 8007bc6:	b284      	uxth	r4, r0
 8007bc8:	4816      	ldr	r0, [pc, #88]	; (8007c24 <eMBPoll+0x16c>)
 8007bca:	8004      	strh	r4, [r0, #0]
 8007bcc:	440b      	add	r3, r1
 8007bce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007bd2:	b2d2      	uxtb	r2, r2
 8007bd4:	701a      	strb	r2, [r3, #0]
                    ucMBFrame[usLength++] = eException;
 8007bd6:	4b14      	ldr	r3, [pc, #80]	; (8007c28 <eMBPoll+0x170>)
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	4b12      	ldr	r3, [pc, #72]	; (8007c24 <eMBPoll+0x16c>)
 8007bdc:	881b      	ldrh	r3, [r3, #0]
 8007bde:	1c59      	adds	r1, r3, #1
 8007be0:	b288      	uxth	r0, r1
 8007be2:	4910      	ldr	r1, [pc, #64]	; (8007c24 <eMBPoll+0x16c>)
 8007be4:	8008      	strh	r0, [r1, #0]
 8007be6:	4413      	add	r3, r2
 8007be8:	4a13      	ldr	r2, [pc, #76]	; (8007c38 <eMBPoll+0x180>)
 8007bea:	7812      	ldrb	r2, [r2, #0]
 8007bec:	701a      	strb	r2, [r3, #0]
                }


                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
 8007bee:	4b14      	ldr	r3, [pc, #80]	; (8007c40 <eMBPoll+0x188>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a0f      	ldr	r2, [pc, #60]	; (8007c30 <eMBPoll+0x178>)
 8007bf4:	7810      	ldrb	r0, [r2, #0]
 8007bf6:	4a0c      	ldr	r2, [pc, #48]	; (8007c28 <eMBPoll+0x170>)
 8007bf8:	6811      	ldr	r1, [r2, #0]
 8007bfa:	4a0a      	ldr	r2, [pc, #40]	; (8007c24 <eMBPoll+0x16c>)
 8007bfc:	8812      	ldrh	r2, [r2, #0]
 8007bfe:	4798      	blx	r3
 8007c00:	4603      	mov	r3, r0
 8007c02:	70fb      	strb	r3, [r7, #3]
            }
            break;
 8007c04:	e003      	b.n	8007c0e <eMBPoll+0x156>

        case EV_FRAME_SENT:
            break;
        }
    }
 8007c06:	bf00      	nop
 8007c08:	e002      	b.n	8007c10 <eMBPoll+0x158>
            break;
 8007c0a:	bf00      	nop
 8007c0c:	e000      	b.n	8007c10 <eMBPoll+0x158>
            break;
 8007c0e:	bf00      	nop
    return MB_ENOERR;
 8007c10:	2300      	movs	r3, #0
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	370c      	adds	r7, #12
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd90      	pop	{r4, r7, pc}
 8007c1a:	bf00      	nop
 8007c1c:	20000010 	.word	0x20000010
 8007c20:	20004b10 	.word	0x20004b10
 8007c24:	20004b20 	.word	0x20004b20
 8007c28:	20004b1c 	.word	0x20004b1c
 8007c2c:	20004b18 	.word	0x20004b18
 8007c30:	20004b02 	.word	0x20004b02
 8007c34:	20004b22 	.word	0x20004b22
 8007c38:	20004b23 	.word	0x20004b23
 8007c3c:	20000014 	.word	0x20000014
 8007c40:	20004b04 	.word	0x20004b04

08007c44 <vInitMBTask>:
};

void TestFloat_task (void *p);
void  vMBUpdateRegister(float *pfloat, uint16_t Nfloat, uint16_t RegAdd);

void vInitMBTask(void){
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b086      	sub	sp, #24
 8007c48:	af02      	add	r7, sp, #8
	configASSERT(status == pdPASS);
#endif

#if MB_SLAVE_RTU_ENABLED

	status = xTaskCreate(slavepoll_task, "slave poll task", 600, NULL, 2, &SlavePollHandle);
 8007c4a:	4b2b      	ldr	r3, [pc, #172]	; (8007cf8 <vInitMBTask+0xb4>)
 8007c4c:	9301      	str	r3, [sp, #4]
 8007c4e:	2302      	movs	r3, #2
 8007c50:	9300      	str	r3, [sp, #0]
 8007c52:	2300      	movs	r3, #0
 8007c54:	f44f 7216 	mov.w	r2, #600	; 0x258
 8007c58:	4928      	ldr	r1, [pc, #160]	; (8007cfc <vInitMBTask+0xb8>)
 8007c5a:	4829      	ldr	r0, [pc, #164]	; (8007d00 <vInitMBTask+0xbc>)
 8007c5c:	f7fd faa1 	bl	80051a2 <xTaskCreate>
 8007c60:	60f8      	str	r0, [r7, #12]
	configASSERT(status == pdPASS);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	d00c      	beq.n	8007c82 <vInitMBTask+0x3e>
	__asm volatile
 8007c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c6c:	b672      	cpsid	i
 8007c6e:	f383 8811 	msr	BASEPRI, r3
 8007c72:	f3bf 8f6f 	isb	sy
 8007c76:	f3bf 8f4f 	dsb	sy
 8007c7a:	b662      	cpsie	i
 8007c7c:	60bb      	str	r3, [r7, #8]
}
 8007c7e:	bf00      	nop
 8007c80:	e7fe      	b.n	8007c80 <vInitMBTask+0x3c>

#endif

	status = xTaskCreate(led_task, "LED task", 200, NULL, 2, &LedTaskHandle);
 8007c82:	4b20      	ldr	r3, [pc, #128]	; (8007d04 <vInitMBTask+0xc0>)
 8007c84:	9301      	str	r3, [sp, #4]
 8007c86:	2302      	movs	r3, #2
 8007c88:	9300      	str	r3, [sp, #0]
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	22c8      	movs	r2, #200	; 0xc8
 8007c8e:	491e      	ldr	r1, [pc, #120]	; (8007d08 <vInitMBTask+0xc4>)
 8007c90:	481e      	ldr	r0, [pc, #120]	; (8007d0c <vInitMBTask+0xc8>)
 8007c92:	f7fd fa86 	bl	80051a2 <xTaskCreate>
 8007c96:	60f8      	str	r0, [r7, #12]
	configASSERT(status == pdPASS);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	d00c      	beq.n	8007cb8 <vInitMBTask+0x74>
	__asm volatile
 8007c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca2:	b672      	cpsid	i
 8007ca4:	f383 8811 	msr	BASEPRI, r3
 8007ca8:	f3bf 8f6f 	isb	sy
 8007cac:	f3bf 8f4f 	dsb	sy
 8007cb0:	b662      	cpsie	i
 8007cb2:	607b      	str	r3, [r7, #4]
}
 8007cb4:	bf00      	nop
 8007cb6:	e7fe      	b.n	8007cb6 <vInitMBTask+0x72>

	status = xTaskCreate(TestFloat_task, "TestFloat Task", 600, NULL, 2, &testfloat_handle );
 8007cb8:	4b15      	ldr	r3, [pc, #84]	; (8007d10 <vInitMBTask+0xcc>)
 8007cba:	9301      	str	r3, [sp, #4]
 8007cbc:	2302      	movs	r3, #2
 8007cbe:	9300      	str	r3, [sp, #0]
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	f44f 7216 	mov.w	r2, #600	; 0x258
 8007cc6:	4913      	ldr	r1, [pc, #76]	; (8007d14 <vInitMBTask+0xd0>)
 8007cc8:	4813      	ldr	r0, [pc, #76]	; (8007d18 <vInitMBTask+0xd4>)
 8007cca:	f7fd fa6a 	bl	80051a2 <xTaskCreate>
 8007cce:	60f8      	str	r0, [r7, #12]
	configASSERT(status == pdPASS);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	d00c      	beq.n	8007cf0 <vInitMBTask+0xac>
	__asm volatile
 8007cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cda:	b672      	cpsid	i
 8007cdc:	f383 8811 	msr	BASEPRI, r3
 8007ce0:	f3bf 8f6f 	isb	sy
 8007ce4:	f3bf 8f4f 	dsb	sy
 8007ce8:	b662      	cpsie	i
 8007cea:	603b      	str	r3, [r7, #0]
}
 8007cec:	bf00      	nop
 8007cee:	e7fe      	b.n	8007cee <vInitMBTask+0xaa>

//	vTaskStartScheduler();

}
 8007cf0:	bf00      	nop
 8007cf2:	3710      	adds	r7, #16
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}
 8007cf8:	20004b24 	.word	0x20004b24
 8007cfc:	08009bfc 	.word	0x08009bfc
 8007d00:	08007ddd 	.word	0x08007ddd
 8007d04:	20004b28 	.word	0x20004b28
 8007d08:	08009c0c 	.word	0x08009c0c
 8007d0c:	08007e31 	.word	0x08007e31
 8007d10:	20004d90 	.word	0x20004d90
 8007d14:	08009c18 	.word	0x08009c18
 8007d18:	08007d1d 	.word	0x08007d1d

08007d1c <TestFloat_task>:

void TestFloat_task (void *p)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b088      	sub	sp, #32
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
	float fValue[5] = {0};
 8007d24:	f107 030c 	add.w	r3, r7, #12
 8007d28:	2200      	movs	r2, #0
 8007d2a:	601a      	str	r2, [r3, #0]
 8007d2c:	605a      	str	r2, [r3, #4]
 8007d2e:	609a      	str	r2, [r3, #8]
 8007d30:	60da      	str	r2, [r3, #12]
 8007d32:	611a      	str	r2, [r3, #16]

	while(1)
	{
		fValue[0] = 0.1;
 8007d34:	4b0a      	ldr	r3, [pc, #40]	; (8007d60 <TestFloat_task+0x44>)
 8007d36:	60fb      	str	r3, [r7, #12]
		fValue[1] = 0.2;
 8007d38:	4b0a      	ldr	r3, [pc, #40]	; (8007d64 <TestFloat_task+0x48>)
 8007d3a:	613b      	str	r3, [r7, #16]
		fValue[2] = 3.3;
 8007d3c:	4b0a      	ldr	r3, [pc, #40]	; (8007d68 <TestFloat_task+0x4c>)
 8007d3e:	617b      	str	r3, [r7, #20]
		fValue[3] = 2.2;
 8007d40:	4b0a      	ldr	r3, [pc, #40]	; (8007d6c <TestFloat_task+0x50>)
 8007d42:	61bb      	str	r3, [r7, #24]
		fValue[4] = 1.1;
 8007d44:	4b0a      	ldr	r3, [pc, #40]	; (8007d70 <TestFloat_task+0x54>)
 8007d46:	61fb      	str	r3, [r7, #28]
		vMBUpdateRegister(fValue, 5, 0);
 8007d48:	f107 030c 	add.w	r3, r7, #12
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	2105      	movs	r1, #5
 8007d50:	4618      	mov	r0, r3
 8007d52:	f000 f80f 	bl	8007d74 <vMBUpdateRegister>
		vTaskDelay(1000);
 8007d56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007d5a:	f7fd fb7f 	bl	800545c <vTaskDelay>
		fValue[0] = 0.1;
 8007d5e:	e7e9      	b.n	8007d34 <TestFloat_task+0x18>
 8007d60:	3dcccccd 	.word	0x3dcccccd
 8007d64:	3e4ccccd 	.word	0x3e4ccccd
 8007d68:	40533333 	.word	0x40533333
 8007d6c:	400ccccd 	.word	0x400ccccd
 8007d70:	3f8ccccd 	.word	0x3f8ccccd

08007d74 <vMBUpdateRegister>:


	}
}

void  vMBUpdateRegister(float *pfloat, uint16_t Nfloat, uint16_t RegAdd){
 8007d74:	b480      	push	{r7}
 8007d76:	b087      	sub	sp, #28
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
 8007d7c:	460b      	mov	r3, r1
 8007d7e:	807b      	strh	r3, [r7, #2]
 8007d80:	4613      	mov	r3, r2
 8007d82:	803b      	strh	r3, [r7, #0]

	//	USHORT countReg;
	//	USHORT indexReg = RegAdd;
	int i = 0;
 8007d84:	2300      	movs	r3, #0
 8007d86:	617b      	str	r3, [r7, #20]
	union SwapData VarData;
	/*
	 * todo
	 * add invalid Register address function (check by if esle)
	 */
	USHORT *usUpdateReg = usSRegInBuf;
 8007d88:	4b13      	ldr	r3, [pc, #76]	; (8007dd8 <vMBUpdateRegister+0x64>)
 8007d8a:	613b      	str	r3, [r7, #16]
	for(i = 0; i < Nfloat; i++ )
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	617b      	str	r3, [r7, #20]
 8007d90:	e018      	b.n	8007dc4 <vMBUpdateRegister+0x50>
	{
		VarData.xfloat = pfloat[i];
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	009b      	lsls	r3, r3, #2
 8007d96:	687a      	ldr	r2, [r7, #4]
 8007d98:	4413      	add	r3, r2
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	60fb      	str	r3, [r7, #12]
		usUpdateReg[RegAdd++] = VarData.ushort[0];	//low word (16 bit)
 8007d9e:	883b      	ldrh	r3, [r7, #0]
 8007da0:	1c5a      	adds	r2, r3, #1
 8007da2:	803a      	strh	r2, [r7, #0]
 8007da4:	005b      	lsls	r3, r3, #1
 8007da6:	693a      	ldr	r2, [r7, #16]
 8007da8:	4413      	add	r3, r2
 8007daa:	89ba      	ldrh	r2, [r7, #12]
 8007dac:	801a      	strh	r2, [r3, #0]
		usUpdateReg[RegAdd++] = VarData.ushort[1];	//high word
 8007dae:	883b      	ldrh	r3, [r7, #0]
 8007db0:	1c5a      	adds	r2, r3, #1
 8007db2:	803a      	strh	r2, [r7, #0]
 8007db4:	005b      	lsls	r3, r3, #1
 8007db6:	693a      	ldr	r2, [r7, #16]
 8007db8:	4413      	add	r3, r2
 8007dba:	89fa      	ldrh	r2, [r7, #14]
 8007dbc:	801a      	strh	r2, [r3, #0]
	for(i = 0; i < Nfloat; i++ )
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	3301      	adds	r3, #1
 8007dc2:	617b      	str	r3, [r7, #20]
 8007dc4:	887b      	ldrh	r3, [r7, #2]
 8007dc6:	697a      	ldr	r2, [r7, #20]
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	dbe2      	blt.n	8007d92 <vMBUpdateRegister+0x1e>

	}

	return ;
 8007dcc:	bf00      	nop
}
 8007dce:	371c      	adds	r7, #28
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr
 8007dd8:	20004ddc 	.word	0x20004ddc

08007ddc <slavepoll_task>:

	}

}

void slavepoll_task(void*p){
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b084      	sub	sp, #16
 8007de0:	af02      	add	r7, sp, #8
 8007de2:	6078      	str	r0, [r7, #4]

//	  usSRegInBuf[0] = 0x11;
//	  usSRegInBuf[1] = 0x22;
//	  usSRegInBuf[2] = 0x33;
//	  usSRegInBuf[3] = 0x44;
	  usSRegHoldBuf[0] = 0x1111;
 8007de4:	4b0f      	ldr	r3, [pc, #60]	; (8007e24 <slavepoll_task+0x48>)
 8007de6:	f241 1211 	movw	r2, #4369	; 0x1111
 8007dea:	801a      	strh	r2, [r3, #0]
	  usSRegHoldBuf[1] = 0x2222;
 8007dec:	4b0d      	ldr	r3, [pc, #52]	; (8007e24 <slavepoll_task+0x48>)
 8007dee:	f242 2222 	movw	r2, #8738	; 0x2222
 8007df2:	805a      	strh	r2, [r3, #2]
	  ucSDiscInBuf[0] = 0xAA;
 8007df4:	4b0c      	ldr	r3, [pc, #48]	; (8007e28 <slavepoll_task+0x4c>)
 8007df6:	22aa      	movs	r2, #170	; 0xaa
 8007df8:	701a      	strb	r2, [r3, #0]
	  ucSCoilBuf[0] = 0xf4;
 8007dfa:	4b0c      	ldr	r3, [pc, #48]	; (8007e2c <slavepoll_task+0x50>)
 8007dfc:	22f4      	movs	r2, #244	; 0xf4
 8007dfe:	701a      	strb	r2, [r3, #0]
	eMBInit(MB_RTU, 1, 9, 115200, MB_PAR_NONE);
 8007e00:	2300      	movs	r3, #0
 8007e02:	9300      	str	r3, [sp, #0]
 8007e04:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8007e08:	2209      	movs	r2, #9
 8007e0a:	2101      	movs	r1, #1
 8007e0c:	2000      	movs	r0, #0
 8007e0e:	f7ff fdbb 	bl	8007988 <eMBInit>
	eMBEnable();
 8007e12:	f7ff fe35 	bl	8007a80 <eMBEnable>
	HAL_Delay(2);
 8007e16:	2002      	movs	r0, #2
 8007e18:	f7f9 f954 	bl	80010c4 <HAL_Delay>
	while(1){

		eMBPoll();
 8007e1c:	f7ff fe4c 	bl	8007ab8 <eMBPoll>
 8007e20:	e7fc      	b.n	8007e1c <slavepoll_task+0x40>
 8007e22:	bf00      	nop
 8007e24:	20004dbc 	.word	0x20004dbc
 8007e28:	20004db8 	.word	0x20004db8
 8007e2c:	20004db4 	.word	0x20004db4

08007e30 <led_task>:

	}

}

void led_task(void*p){
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b082      	sub	sp, #8
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]

	while(1){
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8007e38:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007e3c:	4803      	ldr	r0, [pc, #12]	; (8007e4c <led_task+0x1c>)
 8007e3e:	f7f9 fc9e 	bl	800177e <HAL_GPIO_TogglePin>
		//HAL_GPIO_WritePin(GreenLed_GPIO_Port, GreenLed_Pin, GPIO_PIN_SET);
		vTaskDelay(500);
 8007e42:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007e46:	f7fd fb09 	bl	800545c <vTaskDelay>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8007e4a:	e7f5      	b.n	8007e38 <led_task+0x8>
 8007e4c:	40020400 	.word	0x40020400

08007e50 <EnterCriticalSection>:

/* ----------------------- Variables ----------------------------------------*/

/* ----------------------- Start implementation -----------------------------*/
void EnterCriticalSection(void)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	af00      	add	r7, sp, #0
    taskENTER_CRITICAL();
 8007e54:	f7fe fdd2 	bl	80069fc <vPortEnterCritical>
}
 8007e58:	bf00      	nop
 8007e5a:	bd80      	pop	{r7, pc}

08007e5c <ExitCriticalSection>:

void ExitCriticalSection(void)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	af00      	add	r7, sp, #0
    taskEXIT_CRITICAL();
 8007e60:	f7fe fe00 	bl	8006a64 <vPortExitCritical>
}
 8007e64:	bf00      	nop
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <xMBPortEventInit>:


/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortEventInit( void )
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b082      	sub	sp, #8
 8007e6c:	af00      	add	r7, sp, #0
	xSlaveOsEvent = xEventGroupCreate();
 8007e6e:	f7fc f9b5 	bl	80041dc <xEventGroupCreate>
 8007e72:	4603      	mov	r3, r0
 8007e74:	4a0b      	ldr	r2, [pc, #44]	; (8007ea4 <xMBPortEventInit+0x3c>)
 8007e76:	6013      	str	r3, [r2, #0]

	configASSERT(xSlaveOsEvent != NULL);
 8007e78:	4b0a      	ldr	r3, [pc, #40]	; (8007ea4 <xMBPortEventInit+0x3c>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d10c      	bne.n	8007e9a <xMBPortEventInit+0x32>
	__asm volatile
 8007e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e84:	b672      	cpsid	i
 8007e86:	f383 8811 	msr	BASEPRI, r3
 8007e8a:	f3bf 8f6f 	isb	sy
 8007e8e:	f3bf 8f4f 	dsb	sy
 8007e92:	b662      	cpsie	i
 8007e94:	607b      	str	r3, [r7, #4]
}
 8007e96:	bf00      	nop
 8007e98:	e7fe      	b.n	8007e98 <xMBPortEventInit+0x30>

    return TRUE;
 8007e9a:	2301      	movs	r3, #1
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3708      	adds	r7, #8
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}
 8007ea4:	20004b2c 	.word	0x20004b2c

08007ea8 <xMBPortEventPost>:

BOOL
xMBPortEventPost( eMBEventType eEvent )
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b082      	sub	sp, #8
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	4603      	mov	r3, r0
 8007eb0:	71fb      	strb	r3, [r7, #7]
	xEventGroupSetBits(xSlaveOsEvent, eEvent);
 8007eb2:	4b06      	ldr	r3, [pc, #24]	; (8007ecc <xMBPortEventPost+0x24>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	79fa      	ldrb	r2, [r7, #7]
 8007eb8:	4611      	mov	r1, r2
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f7fc fa7e 	bl	80043bc <xEventGroupSetBits>
    return TRUE;
 8007ec0:	2301      	movs	r3, #1
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3708      	adds	r7, #8
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}
 8007eca:	bf00      	nop
 8007ecc:	20004b2c 	.word	0x20004b2c

08007ed0 <xMBPortEventPostFromISR>:

BOOL
xMBPortEventPostFromISR( eMBEventType eEvent )
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b084      	sub	sp, #16
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	71fb      	strb	r3, [r7, #7]
	BaseType_t xresult = pdFAIL;
 8007eda:	2300      	movs	r3, #0
 8007edc:	60fb      	str	r3, [r7, #12]
	xresult = xEventGroupSetBitsFromISR(xSlaveOsEvent, eEvent, NULL);
 8007ede:	4b08      	ldr	r3, [pc, #32]	; (8007f00 <xMBPortEventPostFromISR+0x30>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	79f9      	ldrb	r1, [r7, #7]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f7fc fb26 	bl	8004538 <xEventGroupSetBitsFromISR>
 8007eec:	60f8      	str	r0, [r7, #12]
	if(xresult == pdFAIL){
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d100      	bne.n	8007ef6 <xMBPortEventPostFromISR+0x26>
		while(1);
 8007ef4:	e7fe      	b.n	8007ef4 <xMBPortEventPostFromISR+0x24>
	}
	return TRUE;
 8007ef6:	2301      	movs	r3, #1
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3710      	adds	r7, #16
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}
 8007f00:	20004b2c 	.word	0x20004b2c

08007f04 <xMBPortEventGet>:

BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b086      	sub	sp, #24
 8007f08:	af02      	add	r7, sp, #8
 8007f0a:	6078      	str	r0, [r7, #4]
	EventBits_t recEvent;
	recEvent = xEventGroupWaitBits(	xSlaveOsEvent,
 8007f0c:	4b1b      	ldr	r3, [pc, #108]	; (8007f7c <xMBPortEventGet+0x78>)
 8007f0e:	6818      	ldr	r0, [r3, #0]
 8007f10:	f04f 33ff 	mov.w	r3, #4294967295
 8007f14:	9300      	str	r3, [sp, #0]
 8007f16:	2300      	movs	r3, #0
 8007f18:	2201      	movs	r2, #1
 8007f1a:	210f      	movs	r1, #15
 8007f1c:	f7fc f978 	bl	8004210 <xEventGroupWaitBits>
 8007f20:	60f8      	str	r0, [r7, #12]
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	3b01      	subs	r3, #1
 8007f26:	2b07      	cmp	r3, #7
 8007f28:	d822      	bhi.n	8007f70 <xMBPortEventGet+0x6c>
 8007f2a:	a201      	add	r2, pc, #4	; (adr r2, 8007f30 <xMBPortEventGet+0x2c>)
 8007f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f30:	08007f51 	.word	0x08007f51
 8007f34:	08007f59 	.word	0x08007f59
 8007f38:	08007f71 	.word	0x08007f71
 8007f3c:	08007f61 	.word	0x08007f61
 8007f40:	08007f71 	.word	0x08007f71
 8007f44:	08007f71 	.word	0x08007f71
 8007f48:	08007f71 	.word	0x08007f71
 8007f4c:	08007f69 	.word	0x08007f69
									portMAX_DELAY);

    switch (recEvent)
    {
    case EV_READY:
        *eEvent = EV_READY;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2201      	movs	r2, #1
 8007f54:	701a      	strb	r2, [r3, #0]
        break;
 8007f56:	e00b      	b.n	8007f70 <xMBPortEventGet+0x6c>
    case EV_FRAME_RECEIVED:
        *eEvent = EV_FRAME_RECEIVED;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2202      	movs	r2, #2
 8007f5c:	701a      	strb	r2, [r3, #0]
        break;
 8007f5e:	e007      	b.n	8007f70 <xMBPortEventGet+0x6c>
    case EV_EXECUTE:
        *eEvent = EV_EXECUTE;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2204      	movs	r2, #4
 8007f64:	701a      	strb	r2, [r3, #0]
        break;
 8007f66:	e003      	b.n	8007f70 <xMBPortEventGet+0x6c>
    case EV_FRAME_SENT:
        *eEvent = EV_FRAME_SENT;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2208      	movs	r2, #8
 8007f6c:	701a      	strb	r2, [r3, #0]
        break;
 8007f6e:	bf00      	nop
    }
    return TRUE;
 8007f70:	2301      	movs	r3, #1
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3710      	adds	r7, #16
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
 8007f7a:	bf00      	nop
 8007f7c:	20004b2c 	.word	0x20004b2c

08007f80 <vMBPortSerialEnable>:
 
/* ----------------------- Start implementation -----------------------------*/

void
vMBPortSerialEnable( BOOL xRxEnable, BOOL xTxEnable )
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b082      	sub	sp, #8
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	4603      	mov	r3, r0
 8007f88:	460a      	mov	r2, r1
 8007f8a:	71fb      	strb	r3, [r7, #7]
 8007f8c:	4613      	mov	r3, r2
 8007f8e:	71bb      	strb	r3, [r7, #6]
  /* If xRXEnable enable serial receive interrupts. If xTxENable enable
  * transmitter empty interrupts.
  */
  
  if (xRxEnable) {        
 8007f90:	79fb      	ldrb	r3, [r7, #7]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d00e      	beq.n	8007fb4 <vMBPortSerialEnable+0x34>
	  SET_BIT((&huartslave)->Instance->CR1, ( USART_CR1_RXNEIE) );
 8007f96:	4b20      	ldr	r3, [pc, #128]	; (8008018 <vMBPortSerialEnable+0x98>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	681a      	ldr	r2, [r3, #0]
 8007f9c:	4b1e      	ldr	r3, [pc, #120]	; (8008018 <vMBPortSerialEnable+0x98>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f042 0220 	orr.w	r2, r2, #32
 8007fa4:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(RE_GPIO_Port, RE_Pin, GPIO_PIN_RESET);// PC10 <=> RE..Receiver Output Enable (Low to enable)
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007fac:	481b      	ldr	r0, [pc, #108]	; (800801c <vMBPortSerialEnable+0x9c>)
 8007fae:	f7f9 fbcd 	bl	800174c <HAL_GPIO_WritePin>
 8007fb2:	e00d      	b.n	8007fd0 <vMBPortSerialEnable+0x50>
  } else {    
	 CLEAR_BIT((&huartslave)->Instance->CR1, ( USART_CR1_RXNEIE) );
 8007fb4:	4b18      	ldr	r3, [pc, #96]	; (8008018 <vMBPortSerialEnable+0x98>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	681a      	ldr	r2, [r3, #0]
 8007fba:	4b17      	ldr	r3, [pc, #92]	; (8008018 <vMBPortSerialEnable+0x98>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f022 0220 	bic.w	r2, r2, #32
 8007fc2:	601a      	str	r2, [r3, #0]
	 HAL_GPIO_WritePin(RE_GPIO_Port, RE_Pin, GPIO_PIN_SET);
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007fca:	4814      	ldr	r0, [pc, #80]	; (800801c <vMBPortSerialEnable+0x9c>)
 8007fcc:	f7f9 fbbe 	bl	800174c <HAL_GPIO_WritePin>
  }
  if (xTxEnable) {
 8007fd0:	79bb      	ldrb	r3, [r7, #6]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d00e      	beq.n	8007ff4 <vMBPortSerialEnable+0x74>
	  SET_BIT((&huartslave)->Instance->CR1, USART_CR1_TXEIE);
 8007fd6:	4b10      	ldr	r3, [pc, #64]	; (8008018 <vMBPortSerialEnable+0x98>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	4b0e      	ldr	r3, [pc, #56]	; (8008018 <vMBPortSerialEnable+0x98>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007fe4:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(DE_GPIO_Port, DE_Pin, GPIO_PIN_SET);// PC11 <=> DE……….Driver Output Enable (high to enable)
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007fec:	480b      	ldr	r0, [pc, #44]	; (800801c <vMBPortSerialEnable+0x9c>)
 8007fee:	f7f9 fbad 	bl	800174c <HAL_GPIO_WritePin>
  } else {
	  CLEAR_BIT((&huartslave)->Instance->CR1, USART_CR1_TXEIE);
	  HAL_GPIO_WritePin(DE_GPIO_Port, DE_Pin, GPIO_PIN_RESET);
  }  
  
}
 8007ff2:	e00d      	b.n	8008010 <vMBPortSerialEnable+0x90>
	  CLEAR_BIT((&huartslave)->Instance->CR1, USART_CR1_TXEIE);
 8007ff4:	4b08      	ldr	r3, [pc, #32]	; (8008018 <vMBPortSerialEnable+0x98>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	4b07      	ldr	r3, [pc, #28]	; (8008018 <vMBPortSerialEnable+0x98>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008002:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(DE_GPIO_Port, DE_Pin, GPIO_PIN_RESET);
 8008004:	2200      	movs	r2, #0
 8008006:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800800a:	4804      	ldr	r0, [pc, #16]	; (800801c <vMBPortSerialEnable+0x9c>)
 800800c:	f7f9 fb9e 	bl	800174c <HAL_GPIO_WritePin>
}
 8008010:	bf00      	nop
 8008012:	3708      	adds	r7, #8
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}
 8008018:	20004b54 	.word	0x20004b54
 800801c:	40020400 	.word	0x40020400

08008020 <xMBPortSerialInit>:
 
BOOL
xMBPortSerialInit( UCHAR ucPORT, ULONG ulBaudRate, UCHAR ucDataBits, eMBParity eParity )
{
 8008020:	b480      	push	{r7}
 8008022:	b083      	sub	sp, #12
 8008024:	af00      	add	r7, sp, #0
 8008026:	6039      	str	r1, [r7, #0]
 8008028:	4611      	mov	r1, r2
 800802a:	461a      	mov	r2, r3
 800802c:	4603      	mov	r3, r0
 800802e:	71fb      	strb	r3, [r7, #7]
 8008030:	460b      	mov	r3, r1
 8008032:	71bb      	strb	r3, [r7, #6]
 8008034:	4613      	mov	r3, r2
 8008036:	717b      	strb	r3, [r7, #5]

	/*
	 * Please note: when user uses EVEN or ODD parity the Data bit value chose
	 * in CubeMx initialize must be 9 bit
	 */
  return TRUE;
 8008038:	2301      	movs	r3, #1
}
 800803a:	4618      	mov	r0, r3
 800803c:	370c      	adds	r7, #12
 800803e:	46bd      	mov	sp, r7
 8008040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008044:	4770      	bx	lr
	...

08008048 <xMBPortSerialPutByte>:
 
BOOL
xMBPortSerialPutByte( CHAR ucByte )
{
 8008048:	b480      	push	{r7}
 800804a:	b083      	sub	sp, #12
 800804c:	af00      	add	r7, sp, #0
 800804e:	4603      	mov	r3, r0
 8008050:	71fb      	strb	r3, [r7, #7]
  /* Put a byte in the UARTs transmit buffer. This function is called
  * by the protocol stack if pxMBFrameCBTransmitterEmpty( ) has been
  * called. */
	huartslave.Instance->TDR = (uint8_t)(ucByte & 0xFFU);
 8008052:	4b05      	ldr	r3, [pc, #20]	; (8008068 <xMBPortSerialPutByte+0x20>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	79fa      	ldrb	r2, [r7, #7]
 8008058:	629a      	str	r2, [r3, #40]	; 0x28
	return TRUE;
 800805a:	2301      	movs	r3, #1
}
 800805c:	4618      	mov	r0, r3
 800805e:	370c      	adds	r7, #12
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr
 8008068:	20004b54 	.word	0x20004b54

0800806c <xMBPortSerialGetByte>:
 
BOOL
xMBPortSerialGetByte( CHAR * pucByte )
{
 800806c:	b480      	push	{r7}
 800806e:	b083      	sub	sp, #12
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  /* Return the byte in the UARTs receive buffer. This function is called
  * by the protocol stack after pxMBFrameCBByteReceived( ) has been called.
  */
  *pucByte = (uint8_t)(huartslave.Instance->RDR & (uint8_t)0x00FF);
 8008074:	4b06      	ldr	r3, [pc, #24]	; (8008090 <xMBPortSerialGetByte+0x24>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800807a:	b2da      	uxtb	r2, r3
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	701a      	strb	r2, [r3, #0]
  return TRUE;
 8008080:	2301      	movs	r3, #1
}
 8008082:	4618      	mov	r0, r3
 8008084:	370c      	adds	r7, #12
 8008086:	46bd      	mov	sp, r7
 8008088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808c:	4770      	bx	lr
 800808e:	bf00      	nop
 8008090:	20004b54 	.word	0x20004b54

08008094 <USART3_IRQHandler>:
void USART3_IRQHandler(void)

#else
void USART2_IRQHandler(void)
#endif
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b082      	sub	sp, #8
 8008098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	uint32_t isrflags   = READ_REG(huartslave.Instance->ISR);
 800809a:	4b1b      	ldr	r3, [pc, #108]	; (8008108 <USART3_IRQHandler+0x74>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	69db      	ldr	r3, [r3, #28]
 80080a0:	607b      	str	r3, [r7, #4]
	uint32_t cr1its     = READ_REG(huartslave.Instance->CR1);
 80080a2:	4b19      	ldr	r3, [pc, #100]	; (8008108 <USART3_IRQHandler+0x74>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	603b      	str	r3, [r7, #0]

    if ( ((isrflags & USART_ISR_RXNE) != 0U)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f003 0320 	and.w	r3, r3, #32
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d010      	beq.n	80080d6 <USART3_IRQHandler+0x42>
         && ((cr1its & USART_CR1_RXNEIE) != 0U) )
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	f003 0320 	and.w	r3, r3, #32
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d00b      	beq.n	80080d6 <USART3_IRQHandler+0x42>
    {

		  pxMBFrameCBByteReceived();	  //xMBRTUReceiveFSM() in mbrtu.c
 80080be:	4b13      	ldr	r3, [pc, #76]	; (800810c <USART3_IRQHandler+0x78>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4798      	blx	r3

		  SET_BIT((&huartslave)->Instance->RQR,  USART_RQR_RXFRQ );
 80080c4:	4b10      	ldr	r3, [pc, #64]	; (8008108 <USART3_IRQHandler+0x74>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	699a      	ldr	r2, [r3, #24]
 80080ca:	4b0f      	ldr	r3, [pc, #60]	; (8008108 <USART3_IRQHandler+0x74>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f042 0208 	orr.w	r2, r2, #8
 80080d2:	619a      	str	r2, [r3, #24]

		return;
 80080d4:	e014      	b.n	8008100 <USART3_IRQHandler+0x6c>
    }

  if((__HAL_UART_GET_FLAG(&huartslave, UART_FLAG_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(&huartslave, UART_IT_TXE) != RESET)) {
 80080d6:	4b0c      	ldr	r3, [pc, #48]	; (8008108 <USART3_IRQHandler+0x74>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	69db      	ldr	r3, [r3, #28]
 80080dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080e0:	2b80      	cmp	r3, #128	; 0x80
 80080e2:	d10a      	bne.n	80080fa <USART3_IRQHandler+0x66>
 80080e4:	4b08      	ldr	r3, [pc, #32]	; (8008108 <USART3_IRQHandler+0x74>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d003      	beq.n	80080fa <USART3_IRQHandler+0x66>

	  pxMBFrameCBTransmitterEmpty(); 	  //xMBRTUTransmitFSM() in mbrtu.c
 80080f2:	4b07      	ldr	r3, [pc, #28]	; (8008110 <USART3_IRQHandler+0x7c>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4798      	blx	r3

    return ;
 80080f8:	e002      	b.n	8008100 <USART3_IRQHandler+0x6c>
  }

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huartslave);
 80080fa:	4803      	ldr	r0, [pc, #12]	; (8008108 <USART3_IRQHandler+0x74>)
 80080fc:	f7fb f8a4 	bl	8003248 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8008100:	3708      	adds	r7, #8
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}
 8008106:	bf00      	nop
 8008108:	20004b54 	.word	0x20004b54
 800810c:	20004d8c 	.word	0x20004d8c
 8008110:	20004d84 	.word	0x20004d84

08008114 <xMBPortTimersInit>:
static uint16_t downcounter = 0;		//20000 = 1s for test timer
 
/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortTimersInit( USHORT usTim1Timerout50us )
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b086      	sub	sp, #24
 8008118:	af00      	add	r7, sp, #0
 800811a:	4603      	mov	r3, r0
 800811c:	80fb      	strh	r3, [r7, #6]
  TIM_MasterConfigTypeDef sMasterConfig;
  
  htim6.Instance = TIM6;
 800811e:	4b19      	ldr	r3, [pc, #100]	; (8008184 <xMBPortTimersInit+0x70>)
 8008120:	4a19      	ldr	r2, [pc, #100]	; (8008188 <xMBPortTimersInit+0x74>)
 8008122:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = (2 * HAL_RCC_GetPCLK1Freq() / 1000000) - 1; //TIMx_CLK = 216Mhz, PCLK1 = 108MHz
 8008124:	f7fa f82e 	bl	8002184 <HAL_RCC_GetPCLK1Freq>
 8008128:	4603      	mov	r3, r0
 800812a:	005b      	lsls	r3, r3, #1
 800812c:	4a17      	ldr	r2, [pc, #92]	; (800818c <xMBPortTimersInit+0x78>)
 800812e:	fba2 2303 	umull	r2, r3, r2, r3
 8008132:	0c9b      	lsrs	r3, r3, #18
 8008134:	3b01      	subs	r3, #1
 8008136:	4a13      	ldr	r2, [pc, #76]	; (8008184 <xMBPortTimersInit+0x70>)
 8008138:	6053      	str	r3, [r2, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800813a:	4b12      	ldr	r3, [pc, #72]	; (8008184 <xMBPortTimersInit+0x70>)
 800813c:	2200      	movs	r2, #0
 800813e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 50 - 1;
 8008140:	4b10      	ldr	r3, [pc, #64]	; (8008184 <xMBPortTimersInit+0x70>)
 8008142:	2231      	movs	r2, #49	; 0x31
 8008144:	60da      	str	r2, [r3, #12]
  
  timeout = usTim1Timerout50us;
 8008146:	4a12      	ldr	r2, [pc, #72]	; (8008190 <xMBPortTimersInit+0x7c>)
 8008148:	88fb      	ldrh	r3, [r7, #6]
 800814a:	8013      	strh	r3, [r2, #0]
  
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800814c:	480d      	ldr	r0, [pc, #52]	; (8008184 <xMBPortTimersInit+0x70>)
 800814e:	f7fa fc9b 	bl	8002a88 <HAL_TIM_Base_Init>
 8008152:	4603      	mov	r3, r0
 8008154:	2b00      	cmp	r3, #0
 8008156:	d001      	beq.n	800815c <xMBPortTimersInit+0x48>
  {
    return FALSE;
 8008158:	2300      	movs	r3, #0
 800815a:	e00f      	b.n	800817c <xMBPortTimersInit+0x68>
  }
  
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800815c:	2320      	movs	r3, #32
 800815e:	60fb      	str	r3, [r7, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008160:	2300      	movs	r3, #0
 8008162:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8008164:	f107 030c 	add.w	r3, r7, #12
 8008168:	4619      	mov	r1, r3
 800816a:	4806      	ldr	r0, [pc, #24]	; (8008184 <xMBPortTimersInit+0x70>)
 800816c:	f7fa ff72 	bl	8003054 <HAL_TIMEx_MasterConfigSynchronization>
 8008170:	4603      	mov	r3, r0
 8008172:	2b00      	cmp	r3, #0
 8008174:	d001      	beq.n	800817a <xMBPortTimersInit+0x66>
  {
    return FALSE;
 8008176:	2300      	movs	r3, #0
 8008178:	e000      	b.n	800817c <xMBPortTimersInit+0x68>
  }
  
  return TRUE;
 800817a:	2301      	movs	r3, #1
}
 800817c:	4618      	mov	r0, r3
 800817e:	3718      	adds	r7, #24
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}
 8008184:	20004bd8 	.word	0x20004bd8
 8008188:	40001000 	.word	0x40001000
 800818c:	431bde83 	.word	0x431bde83
 8008190:	20004b30 	.word	0x20004b30

08008194 <vMBPortTimersEnable>:
 
void
vMBPortTimersEnable(  )
{
 8008194:	b580      	push	{r7, lr}
 8008196:	af00      	add	r7, sp, #0
  /* Enable the timer with the timeout passed to xMBPortTimersInit( ) */
  downcounter = timeout;
 8008198:	4b04      	ldr	r3, [pc, #16]	; (80081ac <vMBPortTimersEnable+0x18>)
 800819a:	881a      	ldrh	r2, [r3, #0]
 800819c:	4b04      	ldr	r3, [pc, #16]	; (80081b0 <vMBPortTimersEnable+0x1c>)
 800819e:	801a      	strh	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim6);
 80081a0:	4804      	ldr	r0, [pc, #16]	; (80081b4 <vMBPortTimersEnable+0x20>)
 80081a2:	f7fa fcc9 	bl	8002b38 <HAL_TIM_Base_Start_IT>
}
 80081a6:	bf00      	nop
 80081a8:	bd80      	pop	{r7, pc}
 80081aa:	bf00      	nop
 80081ac:	20004b30 	.word	0x20004b30
 80081b0:	20004b32 	.word	0x20004b32
 80081b4:	20004bd8 	.word	0x20004bd8

080081b8 <vMBPortTimersDisable>:
 
void
vMBPortTimersDisable(  )
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	af00      	add	r7, sp, #0
  /* Disable any pending timers. */
  HAL_TIM_Base_Stop_IT(&htim6);
 80081bc:	4802      	ldr	r0, [pc, #8]	; (80081c8 <vMBPortTimersDisable+0x10>)
 80081be:	f7fa fd33 	bl	8002c28 <HAL_TIM_Base_Stop_IT>
}
 80081c2:	bf00      	nop
 80081c4:	bd80      	pop	{r7, pc}
 80081c6:	bf00      	nop
 80081c8:	20004bd8 	.word	0x20004bd8

080081cc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	if(__HAL_TIM_GET_FLAG(&htim6, TIM_FLAG_UPDATE) != RESET
 80081d0:	4b12      	ldr	r3, [pc, #72]	; (800821c <TIM6_DAC_IRQHandler+0x50>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	691b      	ldr	r3, [r3, #16]
 80081d6:	f003 0301 	and.w	r3, r3, #1
 80081da:	2b01      	cmp	r3, #1
 80081dc:	d118      	bne.n	8008210 <TIM6_DAC_IRQHandler+0x44>
	   && __HAL_TIM_GET_IT_SOURCE(&htim6, TIM_IT_UPDATE) !=RESET)
 80081de:	4b0f      	ldr	r3, [pc, #60]	; (800821c <TIM6_DAC_IRQHandler+0x50>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	68db      	ldr	r3, [r3, #12]
 80081e4:	f003 0301 	and.w	r3, r3, #1
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d111      	bne.n	8008210 <TIM6_DAC_IRQHandler+0x44>
	{
		__HAL_TIM_CLEAR_IT(&htim6, TIM_IT_UPDATE);
 80081ec:	4b0b      	ldr	r3, [pc, #44]	; (800821c <TIM6_DAC_IRQHandler+0x50>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f06f 0201 	mvn.w	r2, #1
 80081f4:	611a      	str	r2, [r3, #16]
		if (!--downcounter)
 80081f6:	4b0a      	ldr	r3, [pc, #40]	; (8008220 <TIM6_DAC_IRQHandler+0x54>)
 80081f8:	881b      	ldrh	r3, [r3, #0]
 80081fa:	3b01      	subs	r3, #1
 80081fc:	b29a      	uxth	r2, r3
 80081fe:	4b08      	ldr	r3, [pc, #32]	; (8008220 <TIM6_DAC_IRQHandler+0x54>)
 8008200:	801a      	strh	r2, [r3, #0]
 8008202:	4b07      	ldr	r3, [pc, #28]	; (8008220 <TIM6_DAC_IRQHandler+0x54>)
 8008204:	881b      	ldrh	r3, [r3, #0]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d102      	bne.n	8008210 <TIM6_DAC_IRQHandler+0x44>
		{
			pxMBPortCBTimerExpired();	// it is "xMBRTUTimerT35Expired()"
 800820a:	4b06      	ldr	r3, [pc, #24]	; (8008224 <TIM6_DAC_IRQHandler+0x58>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4798      	blx	r3
			//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
			//todo return;
		}
	}
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8008210:	4802      	ldr	r0, [pc, #8]	; (800821c <TIM6_DAC_IRQHandler+0x50>)
 8008212:	f7fa fd38 	bl	8002c86 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8008216:	bf00      	nop
 8008218:	bd80      	pop	{r7, pc}
 800821a:	bf00      	nop
 800821c:	20004bd8 	.word	0x20004bd8
 8008220:	20004b32 	.word	0x20004b32
 8008224:	20004d88 	.word	0x20004d88

08008228 <eMBRegInputCB>:
 *
 * @return result
 */

eMBErrorCode eMBRegInputCB(UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
{
 8008228:	b480      	push	{r7}
 800822a:	b087      	sub	sp, #28
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	460b      	mov	r3, r1
 8008232:	807b      	strh	r3, [r7, #2]
 8008234:	4613      	mov	r3, r2
 8008236:	803b      	strh	r3, [r7, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 8008238:	2300      	movs	r3, #0
 800823a:	75fb      	strb	r3, [r7, #23]
    USHORT *        pusRegInputBuf;
    USHORT          REG_INPUT_START;
    USHORT          REG_INPUT_NREGS;
    USHORT          usRegInStart;

    pusRegInputBuf = usSRegInBuf;
 800823c:	4b22      	ldr	r3, [pc, #136]	; (80082c8 <eMBRegInputCB+0xa0>)
 800823e:	613b      	str	r3, [r7, #16]
    REG_INPUT_START = S_REG_INPUT_START;
 8008240:	2300      	movs	r3, #0
 8008242:	81fb      	strh	r3, [r7, #14]
    REG_INPUT_NREGS = S_REG_INPUT_NREGS;
 8008244:	2364      	movs	r3, #100	; 0x64
 8008246:	81bb      	strh	r3, [r7, #12]
    usRegInStart = usSRegInStart;
 8008248:	4b20      	ldr	r3, [pc, #128]	; (80082cc <eMBRegInputCB+0xa4>)
 800824a:	881b      	ldrh	r3, [r3, #0]
 800824c:	817b      	strh	r3, [r7, #10]

    /* it already plus one in modbus function method. */
    usAddress--;
 800824e:	887b      	ldrh	r3, [r7, #2]
 8008250:	3b01      	subs	r3, #1
 8008252:	807b      	strh	r3, [r7, #2]

    if ((usAddress >= REG_INPUT_START)
 8008254:	887a      	ldrh	r2, [r7, #2]
 8008256:	89fb      	ldrh	r3, [r7, #14]
 8008258:	429a      	cmp	r2, r3
 800825a:	d32c      	bcc.n	80082b6 <eMBRegInputCB+0x8e>
            && (usAddress + usNRegs <= REG_INPUT_START + REG_INPUT_NREGS))
 800825c:	887a      	ldrh	r2, [r7, #2]
 800825e:	883b      	ldrh	r3, [r7, #0]
 8008260:	441a      	add	r2, r3
 8008262:	89f9      	ldrh	r1, [r7, #14]
 8008264:	89bb      	ldrh	r3, [r7, #12]
 8008266:	440b      	add	r3, r1
 8008268:	429a      	cmp	r2, r3
 800826a:	dc24      	bgt.n	80082b6 <eMBRegInputCB+0x8e>
    {
        iRegIndex = usAddress - usRegInStart;
 800826c:	887a      	ldrh	r2, [r7, #2]
 800826e:	897b      	ldrh	r3, [r7, #10]
 8008270:	1ad3      	subs	r3, r2, r3
 8008272:	82bb      	strh	r3, [r7, #20]
        while (usNRegs > 0)
 8008274:	e01b      	b.n	80082ae <eMBRegInputCB+0x86>
        {
            *pucRegBuffer++ = (UCHAR) (pusRegInputBuf[iRegIndex] >> 8);
 8008276:	8abb      	ldrh	r3, [r7, #20]
 8008278:	005b      	lsls	r3, r3, #1
 800827a:	693a      	ldr	r2, [r7, #16]
 800827c:	4413      	add	r3, r2
 800827e:	881b      	ldrh	r3, [r3, #0]
 8008280:	0a1b      	lsrs	r3, r3, #8
 8008282:	b299      	uxth	r1, r3
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	1c5a      	adds	r2, r3, #1
 8008288:	607a      	str	r2, [r7, #4]
 800828a:	b2ca      	uxtb	r2, r1
 800828c:	701a      	strb	r2, [r3, #0]
            *pucRegBuffer++ = (UCHAR) (pusRegInputBuf[iRegIndex] & 0xFF);
 800828e:	8abb      	ldrh	r3, [r7, #20]
 8008290:	005b      	lsls	r3, r3, #1
 8008292:	693a      	ldr	r2, [r7, #16]
 8008294:	4413      	add	r3, r2
 8008296:	8819      	ldrh	r1, [r3, #0]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	1c5a      	adds	r2, r3, #1
 800829c:	607a      	str	r2, [r7, #4]
 800829e:	b2ca      	uxtb	r2, r1
 80082a0:	701a      	strb	r2, [r3, #0]
            iRegIndex++;
 80082a2:	8abb      	ldrh	r3, [r7, #20]
 80082a4:	3301      	adds	r3, #1
 80082a6:	82bb      	strh	r3, [r7, #20]
            usNRegs--;
 80082a8:	883b      	ldrh	r3, [r7, #0]
 80082aa:	3b01      	subs	r3, #1
 80082ac:	803b      	strh	r3, [r7, #0]
        while (usNRegs > 0)
 80082ae:	883b      	ldrh	r3, [r7, #0]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d1e0      	bne.n	8008276 <eMBRegInputCB+0x4e>
    if ((usAddress >= REG_INPUT_START)
 80082b4:	e001      	b.n	80082ba <eMBRegInputCB+0x92>
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 80082b6:	2301      	movs	r3, #1
 80082b8:	75fb      	strb	r3, [r7, #23]
    }

    return eStatus;
 80082ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80082bc:	4618      	mov	r0, r3
 80082be:	371c      	adds	r7, #28
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr
 80082c8:	20004ddc 	.word	0x20004ddc
 80082cc:	20004b38 	.word	0x20004b38

080082d0 <eMBRegHoldingCB>:
 *
 * @return result
 */
eMBErrorCode eMBRegHoldingCB(UCHAR * pucRegBuffer, USHORT usAddress,
        USHORT usNRegs, eMBRegisterMode eMode)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b089      	sub	sp, #36	; 0x24
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	60f8      	str	r0, [r7, #12]
 80082d8:	4608      	mov	r0, r1
 80082da:	4611      	mov	r1, r2
 80082dc:	461a      	mov	r2, r3
 80082de:	4603      	mov	r3, r0
 80082e0:	817b      	strh	r3, [r7, #10]
 80082e2:	460b      	mov	r3, r1
 80082e4:	813b      	strh	r3, [r7, #8]
 80082e6:	4613      	mov	r3, r2
 80082e8:	71fb      	strb	r3, [r7, #7]
    eMBErrorCode    eStatus = MB_ENOERR;
 80082ea:	2300      	movs	r3, #0
 80082ec:	77fb      	strb	r3, [r7, #31]
    USHORT *        pusRegHoldingBuf;
    USHORT          REG_HOLDING_START;
    USHORT          REG_HOLDING_NREGS;
    USHORT          usRegHoldStart;

    pusRegHoldingBuf = usSRegHoldBuf;
 80082ee:	4b39      	ldr	r3, [pc, #228]	; (80083d4 <eMBRegHoldingCB+0x104>)
 80082f0:	61bb      	str	r3, [r7, #24]
    REG_HOLDING_START = S_REG_HOLDING_START;
 80082f2:	2300      	movs	r3, #0
 80082f4:	82fb      	strh	r3, [r7, #22]
    REG_HOLDING_NREGS = S_REG_HOLDING_NREGS;
 80082f6:	2310      	movs	r3, #16
 80082f8:	82bb      	strh	r3, [r7, #20]
    usRegHoldStart = usSRegHoldStart;
 80082fa:	4b37      	ldr	r3, [pc, #220]	; (80083d8 <eMBRegHoldingCB+0x108>)
 80082fc:	881b      	ldrh	r3, [r3, #0]
 80082fe:	827b      	strh	r3, [r7, #18]

    /* it already plus one in modbus function method. */
    usAddress--;
 8008300:	897b      	ldrh	r3, [r7, #10]
 8008302:	3b01      	subs	r3, #1
 8008304:	817b      	strh	r3, [r7, #10]

    if ((usAddress >= REG_HOLDING_START)
 8008306:	897a      	ldrh	r2, [r7, #10]
 8008308:	8afb      	ldrh	r3, [r7, #22]
 800830a:	429a      	cmp	r2, r3
 800830c:	d359      	bcc.n	80083c2 <eMBRegHoldingCB+0xf2>
            && (usAddress + usNRegs <= REG_HOLDING_START + REG_HOLDING_NREGS))
 800830e:	897a      	ldrh	r2, [r7, #10]
 8008310:	893b      	ldrh	r3, [r7, #8]
 8008312:	441a      	add	r2, r3
 8008314:	8af9      	ldrh	r1, [r7, #22]
 8008316:	8abb      	ldrh	r3, [r7, #20]
 8008318:	440b      	add	r3, r1
 800831a:	429a      	cmp	r2, r3
 800831c:	dc51      	bgt.n	80083c2 <eMBRegHoldingCB+0xf2>
    {
        iRegIndex = usAddress - usRegHoldStart;
 800831e:	897a      	ldrh	r2, [r7, #10]
 8008320:	8a7b      	ldrh	r3, [r7, #18]
 8008322:	1ad3      	subs	r3, r2, r3
 8008324:	83bb      	strh	r3, [r7, #28]
        switch (eMode)
 8008326:	79fb      	ldrb	r3, [r7, #7]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d01e      	beq.n	800836a <eMBRegHoldingCB+0x9a>
 800832c:	2b01      	cmp	r3, #1
 800832e:	d043      	beq.n	80083b8 <eMBRegHoldingCB+0xe8>
 8008330:	e049      	b.n	80083c6 <eMBRegHoldingCB+0xf6>
        {
        /* read current register values from the protocol stack. */
        case MB_REG_READ:
            while (usNRegs > 0)
            {
                *pucRegBuffer++ = (UCHAR) (pusRegHoldingBuf[iRegIndex] >> 8);
 8008332:	8bbb      	ldrh	r3, [r7, #28]
 8008334:	005b      	lsls	r3, r3, #1
 8008336:	69ba      	ldr	r2, [r7, #24]
 8008338:	4413      	add	r3, r2
 800833a:	881b      	ldrh	r3, [r3, #0]
 800833c:	0a1b      	lsrs	r3, r3, #8
 800833e:	b299      	uxth	r1, r3
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	1c5a      	adds	r2, r3, #1
 8008344:	60fa      	str	r2, [r7, #12]
 8008346:	b2ca      	uxtb	r2, r1
 8008348:	701a      	strb	r2, [r3, #0]
                *pucRegBuffer++ = (UCHAR) (pusRegHoldingBuf[iRegIndex] & 0xFF);
 800834a:	8bbb      	ldrh	r3, [r7, #28]
 800834c:	005b      	lsls	r3, r3, #1
 800834e:	69ba      	ldr	r2, [r7, #24]
 8008350:	4413      	add	r3, r2
 8008352:	8819      	ldrh	r1, [r3, #0]
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	1c5a      	adds	r2, r3, #1
 8008358:	60fa      	str	r2, [r7, #12]
 800835a:	b2ca      	uxtb	r2, r1
 800835c:	701a      	strb	r2, [r3, #0]
                iRegIndex++;
 800835e:	8bbb      	ldrh	r3, [r7, #28]
 8008360:	3301      	adds	r3, #1
 8008362:	83bb      	strh	r3, [r7, #28]
                usNRegs--;
 8008364:	893b      	ldrh	r3, [r7, #8]
 8008366:	3b01      	subs	r3, #1
 8008368:	813b      	strh	r3, [r7, #8]
            while (usNRegs > 0)
 800836a:	893b      	ldrh	r3, [r7, #8]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d1e0      	bne.n	8008332 <eMBRegHoldingCB+0x62>
            }
            break;
 8008370:	e026      	b.n	80083c0 <eMBRegHoldingCB+0xf0>

        /* write current register values with new values from the protocol stack. */
        case MB_REG_WRITE:
            while (usNRegs > 0)
            {
                pusRegHoldingBuf[iRegIndex] = *pucRegBuffer++ << 8;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	1c5a      	adds	r2, r3, #1
 8008376:	60fa      	str	r2, [r7, #12]
 8008378:	781b      	ldrb	r3, [r3, #0]
 800837a:	b29a      	uxth	r2, r3
 800837c:	8bbb      	ldrh	r3, [r7, #28]
 800837e:	005b      	lsls	r3, r3, #1
 8008380:	69b9      	ldr	r1, [r7, #24]
 8008382:	440b      	add	r3, r1
 8008384:	0212      	lsls	r2, r2, #8
 8008386:	b292      	uxth	r2, r2
 8008388:	801a      	strh	r2, [r3, #0]
                pusRegHoldingBuf[iRegIndex] |= *pucRegBuffer++;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	1c5a      	adds	r2, r3, #1
 800838e:	60fa      	str	r2, [r7, #12]
 8008390:	7818      	ldrb	r0, [r3, #0]
 8008392:	8bbb      	ldrh	r3, [r7, #28]
 8008394:	005b      	lsls	r3, r3, #1
 8008396:	69ba      	ldr	r2, [r7, #24]
 8008398:	4413      	add	r3, r2
 800839a:	8819      	ldrh	r1, [r3, #0]
 800839c:	b282      	uxth	r2, r0
 800839e:	8bbb      	ldrh	r3, [r7, #28]
 80083a0:	005b      	lsls	r3, r3, #1
 80083a2:	69b8      	ldr	r0, [r7, #24]
 80083a4:	4403      	add	r3, r0
 80083a6:	430a      	orrs	r2, r1
 80083a8:	b292      	uxth	r2, r2
 80083aa:	801a      	strh	r2, [r3, #0]
                iRegIndex++;
 80083ac:	8bbb      	ldrh	r3, [r7, #28]
 80083ae:	3301      	adds	r3, #1
 80083b0:	83bb      	strh	r3, [r7, #28]
                usNRegs--;
 80083b2:	893b      	ldrh	r3, [r7, #8]
 80083b4:	3b01      	subs	r3, #1
 80083b6:	813b      	strh	r3, [r7, #8]
            while (usNRegs > 0)
 80083b8:	893b      	ldrh	r3, [r7, #8]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d1d9      	bne.n	8008372 <eMBRegHoldingCB+0xa2>
            }
            break;
 80083be:	bf00      	nop
        switch (eMode)
 80083c0:	e001      	b.n	80083c6 <eMBRegHoldingCB+0xf6>
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 80083c2:	2301      	movs	r3, #1
 80083c4:	77fb      	strb	r3, [r7, #31]
    }
    return eStatus;
 80083c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3724      	adds	r7, #36	; 0x24
 80083cc:	46bd      	mov	sp, r7
 80083ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d2:	4770      	bx	lr
 80083d4:	20004dbc 	.word	0x20004dbc
 80083d8:	20004b3a 	.word	0x20004b3a

080083dc <eMBRegCoilsCB>:
 *
 * @return result
 */
eMBErrorCode eMBRegCoilsCB(UCHAR * pucRegBuffer, USHORT usAddress,
        USHORT usNCoils, eMBRegisterMode eMode)
{
 80083dc:	b590      	push	{r4, r7, lr}
 80083de:	b08b      	sub	sp, #44	; 0x2c
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	60f8      	str	r0, [r7, #12]
 80083e4:	4608      	mov	r0, r1
 80083e6:	4611      	mov	r1, r2
 80083e8:	461a      	mov	r2, r3
 80083ea:	4603      	mov	r3, r0
 80083ec:	817b      	strh	r3, [r7, #10]
 80083ee:	460b      	mov	r3, r1
 80083f0:	813b      	strh	r3, [r7, #8]
 80083f2:	4613      	mov	r3, r2
 80083f4:	71fb      	strb	r3, [r7, #7]
    eMBErrorCode    eStatus = MB_ENOERR;
 80083f6:	2300      	movs	r3, #0
 80083f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    USHORT          iRegIndex , iRegBitIndex , iNReg;
    UCHAR *         pucCoilBuf;
    USHORT          COIL_START;
    USHORT          COIL_NCOILS;
    USHORT          usCoilStart;
    iNReg =  usNCoils / 8 + 1;
 80083fc:	893b      	ldrh	r3, [r7, #8]
 80083fe:	08db      	lsrs	r3, r3, #3
 8008400:	b29b      	uxth	r3, r3
 8008402:	3301      	adds	r3, #1
 8008404:	847b      	strh	r3, [r7, #34]	; 0x22

    pucCoilBuf = ucSCoilBuf;
 8008406:	4b4a      	ldr	r3, [pc, #296]	; (8008530 <eMBRegCoilsCB+0x154>)
 8008408:	61fb      	str	r3, [r7, #28]
    COIL_START = S_COIL_START;
 800840a:	2300      	movs	r3, #0
 800840c:	837b      	strh	r3, [r7, #26]
    COIL_NCOILS = S_COIL_NCOILS;
 800840e:	2311      	movs	r3, #17
 8008410:	833b      	strh	r3, [r7, #24]
    usCoilStart = usSCoilStart;
 8008412:	4b48      	ldr	r3, [pc, #288]	; (8008534 <eMBRegCoilsCB+0x158>)
 8008414:	881b      	ldrh	r3, [r3, #0]
 8008416:	82fb      	strh	r3, [r7, #22]

    /* it already plus one in modbus function method. */
    usAddress--;
 8008418:	897b      	ldrh	r3, [r7, #10]
 800841a:	3b01      	subs	r3, #1
 800841c:	817b      	strh	r3, [r7, #10]

    if( ( usAddress >= COIL_START ) &&
 800841e:	897a      	ldrh	r2, [r7, #10]
 8008420:	8b7b      	ldrh	r3, [r7, #26]
 8008422:	429a      	cmp	r2, r3
 8008424:	d37b      	bcc.n	800851e <eMBRegCoilsCB+0x142>
        ( usAddress + usNCoils <= COIL_START + COIL_NCOILS ) )
 8008426:	897a      	ldrh	r2, [r7, #10]
 8008428:	893b      	ldrh	r3, [r7, #8]
 800842a:	441a      	add	r2, r3
 800842c:	8b79      	ldrh	r1, [r7, #26]
 800842e:	8b3b      	ldrh	r3, [r7, #24]
 8008430:	440b      	add	r3, r1
    if( ( usAddress >= COIL_START ) &&
 8008432:	429a      	cmp	r2, r3
 8008434:	dc73      	bgt.n	800851e <eMBRegCoilsCB+0x142>
    {
        iRegIndex = (USHORT) (usAddress - usCoilStart) / 8;
 8008436:	897a      	ldrh	r2, [r7, #10]
 8008438:	8afb      	ldrh	r3, [r7, #22]
 800843a:	1ad3      	subs	r3, r2, r3
 800843c:	b29b      	uxth	r3, r3
 800843e:	08db      	lsrs	r3, r3, #3
 8008440:	84bb      	strh	r3, [r7, #36]	; 0x24
        iRegBitIndex = (USHORT) (usAddress - usCoilStart) % 8;
 8008442:	897a      	ldrh	r2, [r7, #10]
 8008444:	8afb      	ldrh	r3, [r7, #22]
 8008446:	1ad3      	subs	r3, r2, r3
 8008448:	b29b      	uxth	r3, r3
 800844a:	f003 0307 	and.w	r3, r3, #7
 800844e:	82bb      	strh	r3, [r7, #20]
        switch ( eMode )
 8008450:	79fb      	ldrb	r3, [r7, #7]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d015      	beq.n	8008482 <eMBRegCoilsCB+0xa6>
 8008456:	2b01      	cmp	r3, #1
 8008458:	d045      	beq.n	80084e6 <eMBRegCoilsCB+0x10a>
 800845a:	e063      	b.n	8008524 <eMBRegCoilsCB+0x148>
        {
        /* read current coil values from the protocol stack. */
        case MB_REG_READ:
            while (iNReg > 0)
            {
                *pucRegBuffer++ = xMBUtilGetBits(&pucCoilBuf[iRegIndex++],
 800845c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800845e:	1c5a      	adds	r2, r3, #1
 8008460:	84ba      	strh	r2, [r7, #36]	; 0x24
 8008462:	461a      	mov	r2, r3
 8008464:	69fb      	ldr	r3, [r7, #28]
 8008466:	1898      	adds	r0, r3, r2
 8008468:	68fc      	ldr	r4, [r7, #12]
 800846a:	1c63      	adds	r3, r4, #1
 800846c:	60fb      	str	r3, [r7, #12]
 800846e:	8abb      	ldrh	r3, [r7, #20]
 8008470:	2208      	movs	r2, #8
 8008472:	4619      	mov	r1, r3
 8008474:	f7ff fa2c 	bl	80078d0 <xMBUtilGetBits>
 8008478:	4603      	mov	r3, r0
 800847a:	7023      	strb	r3, [r4, #0]
                        iRegBitIndex, 8);
                iNReg--;
 800847c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800847e:	3b01      	subs	r3, #1
 8008480:	847b      	strh	r3, [r7, #34]	; 0x22
            while (iNReg > 0)
 8008482:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008484:	2b00      	cmp	r3, #0
 8008486:	d1e9      	bne.n	800845c <eMBRegCoilsCB+0x80>
            }
            pucRegBuffer--;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	3b01      	subs	r3, #1
 800848c:	60fb      	str	r3, [r7, #12]
            /* last coils */
            usNCoils = usNCoils % 8;
 800848e:	893b      	ldrh	r3, [r7, #8]
 8008490:	f003 0307 	and.w	r3, r3, #7
 8008494:	813b      	strh	r3, [r7, #8]
            /* filling zero to high bit */
            *pucRegBuffer = *pucRegBuffer << (8 - usNCoils);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	781b      	ldrb	r3, [r3, #0]
 800849a:	461a      	mov	r2, r3
 800849c:	893b      	ldrh	r3, [r7, #8]
 800849e:	f1c3 0308 	rsb	r3, r3, #8
 80084a2:	fa02 f303 	lsl.w	r3, r2, r3
 80084a6:	b2da      	uxtb	r2, r3
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	701a      	strb	r2, [r3, #0]
            *pucRegBuffer = *pucRegBuffer >> (8 - usNCoils);
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	461a      	mov	r2, r3
 80084b2:	893b      	ldrh	r3, [r7, #8]
 80084b4:	f1c3 0308 	rsb	r3, r3, #8
 80084b8:	fa42 f303 	asr.w	r3, r2, r3
 80084bc:	b2da      	uxtb	r2, r3
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	701a      	strb	r2, [r3, #0]
            break;
 80084c2:	e02b      	b.n	800851c <eMBRegCoilsCB+0x140>

            /* write current coil values with new values from the protocol stack. */
        case MB_REG_WRITE:
            while (iNReg > 1)
            {
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, 8,
 80084c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80084c6:	1c5a      	adds	r2, r3, #1
 80084c8:	84ba      	strh	r2, [r7, #36]	; 0x24
 80084ca:	461a      	mov	r2, r3
 80084cc:	69fb      	ldr	r3, [r7, #28]
 80084ce:	1898      	adds	r0, r3, r2
                        *pucRegBuffer++);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	1c5a      	adds	r2, r3, #1
 80084d4:	60fa      	str	r2, [r7, #12]
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, 8,
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	8ab9      	ldrh	r1, [r7, #20]
 80084da:	2208      	movs	r2, #8
 80084dc:	f7ff f98c 	bl	80077f8 <xMBUtilSetBits>
                iNReg--;
 80084e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80084e2:	3b01      	subs	r3, #1
 80084e4:	847b      	strh	r3, [r7, #34]	; 0x22
            while (iNReg > 1)
 80084e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	d8eb      	bhi.n	80084c4 <eMBRegCoilsCB+0xe8>
            }
            /* last coils */
            usNCoils = usNCoils % 8;
 80084ec:	893b      	ldrh	r3, [r7, #8]
 80084ee:	f003 0307 	and.w	r3, r3, #7
 80084f2:	813b      	strh	r3, [r7, #8]
            /* xMBUtilSetBits has bug when ucNBits is zero */
            if (usNCoils != 0)
 80084f4:	893b      	ldrh	r3, [r7, #8]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d00f      	beq.n	800851a <eMBRegCoilsCB+0x13e>
            {
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, usNCoils,
 80084fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80084fc:	1c5a      	adds	r2, r3, #1
 80084fe:	84ba      	strh	r2, [r7, #36]	; 0x24
 8008500:	461a      	mov	r2, r3
 8008502:	69fb      	ldr	r3, [r7, #28]
 8008504:	1898      	adds	r0, r3, r2
 8008506:	893b      	ldrh	r3, [r7, #8]
 8008508:	b2dc      	uxtb	r4, r3
                        *pucRegBuffer++);
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	1c5a      	adds	r2, r3, #1
 800850e:	60fa      	str	r2, [r7, #12]
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, usNCoils,
 8008510:	781b      	ldrb	r3, [r3, #0]
 8008512:	8ab9      	ldrh	r1, [r7, #20]
 8008514:	4622      	mov	r2, r4
 8008516:	f7ff f96f 	bl	80077f8 <xMBUtilSetBits>
            }
            break;
 800851a:	bf00      	nop
        switch ( eMode )
 800851c:	e002      	b.n	8008524 <eMBRegCoilsCB+0x148>
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 800851e:	2301      	movs	r3, #1
 8008520:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    return eStatus;
 8008524:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008528:	4618      	mov	r0, r3
 800852a:	372c      	adds	r7, #44	; 0x2c
 800852c:	46bd      	mov	sp, r7
 800852e:	bd90      	pop	{r4, r7, pc}
 8008530:	20004db4 	.word	0x20004db4
 8008534:	20004b36 	.word	0x20004b36

08008538 <eMBRegDiscreteCB>:
 * @param usNDiscrete discrete number
 *
 * @return result
 */
eMBErrorCode eMBRegDiscreteCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete )
{
 8008538:	b590      	push	{r4, r7, lr}
 800853a:	b089      	sub	sp, #36	; 0x24
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	460b      	mov	r3, r1
 8008542:	807b      	strh	r3, [r7, #2]
 8008544:	4613      	mov	r3, r2
 8008546:	803b      	strh	r3, [r7, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 8008548:	2300      	movs	r3, #0
 800854a:	77fb      	strb	r3, [r7, #31]
    USHORT          iRegIndex , iRegBitIndex , iNReg;
    UCHAR *         pucDiscreteInputBuf;
    USHORT          DISCRETE_INPUT_START;
    USHORT          DISCRETE_INPUT_NDISCRETES;
    USHORT          usDiscreteInputStart;
    iNReg =  usNDiscrete / 8 + 1;
 800854c:	883b      	ldrh	r3, [r7, #0]
 800854e:	08db      	lsrs	r3, r3, #3
 8008550:	b29b      	uxth	r3, r3
 8008552:	3301      	adds	r3, #1
 8008554:	837b      	strh	r3, [r7, #26]

    pucDiscreteInputBuf = ucSDiscInBuf;
 8008556:	4b30      	ldr	r3, [pc, #192]	; (8008618 <eMBRegDiscreteCB+0xe0>)
 8008558:	617b      	str	r3, [r7, #20]
    DISCRETE_INPUT_START = S_DISCRETE_INPUT_START;
 800855a:	2300      	movs	r3, #0
 800855c:	827b      	strh	r3, [r7, #18]
    DISCRETE_INPUT_NDISCRETES = S_DISCRETE_INPUT_NDISCRETES;
 800855e:	2310      	movs	r3, #16
 8008560:	823b      	strh	r3, [r7, #16]
    usDiscreteInputStart = usSDiscInStart;
 8008562:	4b2e      	ldr	r3, [pc, #184]	; (800861c <eMBRegDiscreteCB+0xe4>)
 8008564:	881b      	ldrh	r3, [r3, #0]
 8008566:	81fb      	strh	r3, [r7, #14]

    /* it already plus one in modbus function method. */
    usAddress--;
 8008568:	887b      	ldrh	r3, [r7, #2]
 800856a:	3b01      	subs	r3, #1
 800856c:	807b      	strh	r3, [r7, #2]

    if ((usAddress >= DISCRETE_INPUT_START)
 800856e:	887a      	ldrh	r2, [r7, #2]
 8008570:	8a7b      	ldrh	r3, [r7, #18]
 8008572:	429a      	cmp	r2, r3
 8008574:	d349      	bcc.n	800860a <eMBRegDiscreteCB+0xd2>
            && (usAddress + usNDiscrete    <= DISCRETE_INPUT_START + DISCRETE_INPUT_NDISCRETES))
 8008576:	887a      	ldrh	r2, [r7, #2]
 8008578:	883b      	ldrh	r3, [r7, #0]
 800857a:	441a      	add	r2, r3
 800857c:	8a79      	ldrh	r1, [r7, #18]
 800857e:	8a3b      	ldrh	r3, [r7, #16]
 8008580:	440b      	add	r3, r1
 8008582:	429a      	cmp	r2, r3
 8008584:	dc41      	bgt.n	800860a <eMBRegDiscreteCB+0xd2>
    {
        iRegIndex = (USHORT) (usAddress - usDiscreteInputStart) / 8;
 8008586:	887a      	ldrh	r2, [r7, #2]
 8008588:	89fb      	ldrh	r3, [r7, #14]
 800858a:	1ad3      	subs	r3, r2, r3
 800858c:	b29b      	uxth	r3, r3
 800858e:	08db      	lsrs	r3, r3, #3
 8008590:	83bb      	strh	r3, [r7, #28]
        iRegBitIndex = (USHORT) (usAddress - usDiscreteInputStart) % 8;
 8008592:	887a      	ldrh	r2, [r7, #2]
 8008594:	89fb      	ldrh	r3, [r7, #14]
 8008596:	1ad3      	subs	r3, r2, r3
 8008598:	b29b      	uxth	r3, r3
 800859a:	f003 0307 	and.w	r3, r3, #7
 800859e:	81bb      	strh	r3, [r7, #12]

        while (iNReg > 0)
 80085a0:	e012      	b.n	80085c8 <eMBRegDiscreteCB+0x90>
        {
            *pucRegBuffer++ = xMBUtilGetBits(&pucDiscreteInputBuf[iRegIndex++],
 80085a2:	8bbb      	ldrh	r3, [r7, #28]
 80085a4:	1c5a      	adds	r2, r3, #1
 80085a6:	83ba      	strh	r2, [r7, #28]
 80085a8:	461a      	mov	r2, r3
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	1898      	adds	r0, r3, r2
 80085ae:	687c      	ldr	r4, [r7, #4]
 80085b0:	1c63      	adds	r3, r4, #1
 80085b2:	607b      	str	r3, [r7, #4]
 80085b4:	89bb      	ldrh	r3, [r7, #12]
 80085b6:	2208      	movs	r2, #8
 80085b8:	4619      	mov	r1, r3
 80085ba:	f7ff f989 	bl	80078d0 <xMBUtilGetBits>
 80085be:	4603      	mov	r3, r0
 80085c0:	7023      	strb	r3, [r4, #0]
                    iRegBitIndex, 8);
            iNReg--;
 80085c2:	8b7b      	ldrh	r3, [r7, #26]
 80085c4:	3b01      	subs	r3, #1
 80085c6:	837b      	strh	r3, [r7, #26]
        while (iNReg > 0)
 80085c8:	8b7b      	ldrh	r3, [r7, #26]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d1e9      	bne.n	80085a2 <eMBRegDiscreteCB+0x6a>
        }
        pucRegBuffer--;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	3b01      	subs	r3, #1
 80085d2:	607b      	str	r3, [r7, #4]
        /* last discrete */
        usNDiscrete = usNDiscrete % 8;
 80085d4:	883b      	ldrh	r3, [r7, #0]
 80085d6:	f003 0307 	and.w	r3, r3, #7
 80085da:	803b      	strh	r3, [r7, #0]
        /* filling zero to high bit */
        *pucRegBuffer = *pucRegBuffer << (8 - usNDiscrete);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	781b      	ldrb	r3, [r3, #0]
 80085e0:	461a      	mov	r2, r3
 80085e2:	883b      	ldrh	r3, [r7, #0]
 80085e4:	f1c3 0308 	rsb	r3, r3, #8
 80085e8:	fa02 f303 	lsl.w	r3, r2, r3
 80085ec:	b2da      	uxtb	r2, r3
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	701a      	strb	r2, [r3, #0]
        *pucRegBuffer = *pucRegBuffer >> (8 - usNDiscrete);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	781b      	ldrb	r3, [r3, #0]
 80085f6:	461a      	mov	r2, r3
 80085f8:	883b      	ldrh	r3, [r7, #0]
 80085fa:	f1c3 0308 	rsb	r3, r3, #8
 80085fe:	fa42 f303 	asr.w	r3, r2, r3
 8008602:	b2da      	uxtb	r2, r3
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	701a      	strb	r2, [r3, #0]
 8008608:	e001      	b.n	800860e <eMBRegDiscreteCB+0xd6>
    }
    else
    {
        eStatus = MB_ENOREG;
 800860a:	2301      	movs	r3, #1
 800860c:	77fb      	strb	r3, [r7, #31]
    }

    return eStatus;
 800860e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008610:	4618      	mov	r0, r3
 8008612:	3724      	adds	r7, #36	; 0x24
 8008614:	46bd      	mov	sp, r7
 8008616:	bd90      	pop	{r4, r7, pc}
 8008618:	20004db8 	.word	0x20004db8
 800861c:	20004b34 	.word	0x20004b34

08008620 <usMBCRC16>:
    0x41, 0x81, 0x80, 0x40
};

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
 8008620:	b480      	push	{r7}
 8008622:	b085      	sub	sp, #20
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	460b      	mov	r3, r1
 800862a:	807b      	strh	r3, [r7, #2]
    UCHAR           ucCRCHi = 0xFF;
 800862c:	23ff      	movs	r3, #255	; 0xff
 800862e:	73fb      	strb	r3, [r7, #15]
    UCHAR           ucCRCLo = 0xFF;
 8008630:	23ff      	movs	r3, #255	; 0xff
 8008632:	73bb      	strb	r3, [r7, #14]
    int             iIndex;

    while( usLen-- )
 8008634:	e013      	b.n	800865e <usMBCRC16+0x3e>
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	1c5a      	adds	r2, r3, #1
 800863a:	607a      	str	r2, [r7, #4]
 800863c:	781a      	ldrb	r2, [r3, #0]
 800863e:	7bbb      	ldrb	r3, [r7, #14]
 8008640:	4053      	eors	r3, r2
 8008642:	b2db      	uxtb	r3, r3
 8008644:	60bb      	str	r3, [r7, #8]
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 8008646:	4a0f      	ldr	r2, [pc, #60]	; (8008684 <usMBCRC16+0x64>)
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	4413      	add	r3, r2
 800864c:	781a      	ldrb	r2, [r3, #0]
 800864e:	7bfb      	ldrb	r3, [r7, #15]
 8008650:	4053      	eors	r3, r2
 8008652:	73bb      	strb	r3, [r7, #14]
        ucCRCHi = aucCRCLo[iIndex];
 8008654:	4a0c      	ldr	r2, [pc, #48]	; (8008688 <usMBCRC16+0x68>)
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	4413      	add	r3, r2
 800865a:	781b      	ldrb	r3, [r3, #0]
 800865c:	73fb      	strb	r3, [r7, #15]
    while( usLen-- )
 800865e:	887b      	ldrh	r3, [r7, #2]
 8008660:	1e5a      	subs	r2, r3, #1
 8008662:	807a      	strh	r2, [r7, #2]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d1e6      	bne.n	8008636 <usMBCRC16+0x16>
    }
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
 8008668:	7bfb      	ldrb	r3, [r7, #15]
 800866a:	021b      	lsls	r3, r3, #8
 800866c:	b21a      	sxth	r2, r3
 800866e:	7bbb      	ldrb	r3, [r7, #14]
 8008670:	b21b      	sxth	r3, r3
 8008672:	4313      	orrs	r3, r2
 8008674:	b21b      	sxth	r3, r3
 8008676:	b29b      	uxth	r3, r3
}
 8008678:	4618      	mov	r0, r3
 800867a:	3714      	adds	r7, #20
 800867c:	46bd      	mov	sp, r7
 800867e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008682:	4770      	bx	lr
 8008684:	08009d5c 	.word	0x08009d5c
 8008688:	08009e5c 	.word	0x08009e5c

0800868c <eMBRTUInit>:
static volatile USHORT usRcvBufferPos;

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBRTUInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b084      	sub	sp, #16
 8008690:	af00      	add	r7, sp, #0
 8008692:	603a      	str	r2, [r7, #0]
 8008694:	461a      	mov	r2, r3
 8008696:	4603      	mov	r3, r0
 8008698:	71fb      	strb	r3, [r7, #7]
 800869a:	460b      	mov	r3, r1
 800869c:	71bb      	strb	r3, [r7, #6]
 800869e:	4613      	mov	r3, r2
 80086a0:	717b      	strb	r3, [r7, #5]
    eMBErrorCode    eStatus = MB_ENOERR;
 80086a2:	2300      	movs	r3, #0
 80086a4:	73fb      	strb	r3, [r7, #15]
    ULONG           usTimerT35_50us;

    ( void )ucSlaveAddress;
    ENTER_CRITICAL_SECTION(  );
 80086a6:	f7ff fbd3 	bl	8007e50 <EnterCriticalSection>

    /* Modbus RTU uses 8 Databits. */
    if( xMBPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
 80086aa:	797b      	ldrb	r3, [r7, #5]
 80086ac:	79b8      	ldrb	r0, [r7, #6]
 80086ae:	2208      	movs	r2, #8
 80086b0:	6839      	ldr	r1, [r7, #0]
 80086b2:	f7ff fcb5 	bl	8008020 <xMBPortSerialInit>
 80086b6:	4603      	mov	r3, r0
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	d002      	beq.n	80086c2 <eMBRTUInit+0x36>
    {
        eStatus = MB_EPORTERR;
 80086bc:	2303      	movs	r3, #3
 80086be:	73fb      	strb	r3, [r7, #15]
 80086c0:	e016      	b.n	80086f0 <eMBRTUInit+0x64>
    else
    {
        /* If baudrate > 19200 then we should use the fixed timer values
         * t35 = 1750us. Otherwise t35 must be 3.5 times the character time.
         */
        if( ulBaudRate > 19200 )
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
 80086c8:	d902      	bls.n	80086d0 <eMBRTUInit+0x44>
        {
            usTimerT35_50us = 35;       /* 1800us. */
 80086ca:	2323      	movs	r3, #35	; 0x23
 80086cc:	60bb      	str	r3, [r7, #8]
 80086ce:	e005      	b.n	80086dc <eMBRTUInit+0x50>
             *             = 11 * Ticks_per_1s / Baudrate
             *             = 220000 / Baudrate
             * The reload for t3.5 is 1.5 times this value and similary
             * for t3.5.
             */
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	005b      	lsls	r3, r3, #1
 80086d4:	4a0a      	ldr	r2, [pc, #40]	; (8008700 <eMBRTUInit+0x74>)
 80086d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80086da:	60bb      	str	r3, [r7, #8]
        }
        if( xMBPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	b29b      	uxth	r3, r3
 80086e0:	4618      	mov	r0, r3
 80086e2:	f7ff fd17 	bl	8008114 <xMBPortTimersInit>
 80086e6:	4603      	mov	r3, r0
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d001      	beq.n	80086f0 <eMBRTUInit+0x64>
        {
            eStatus = MB_EPORTERR;
 80086ec:	2303      	movs	r3, #3
 80086ee:	73fb      	strb	r3, [r7, #15]
        }
    }
    EXIT_CRITICAL_SECTION(  );
 80086f0:	f7ff fbb4 	bl	8007e5c <ExitCriticalSection>

    return eStatus;
 80086f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3710      	adds	r7, #16
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}
 80086fe:	bf00      	nop
 8008700:	00177fa0 	.word	0x00177fa0

08008704 <eMBRTUStart>:

void
eMBRTUStart( void )
{
 8008704:	b580      	push	{r7, lr}
 8008706:	af00      	add	r7, sp, #0
    ENTER_CRITICAL_SECTION(  );
 8008708:	f7ff fba2 	bl	8007e50 <EnterCriticalSection>
    /* Initially the receiver is in the state STATE_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_RX_INIT;
 800870c:	4b06      	ldr	r3, [pc, #24]	; (8008728 <eMBRTUStart+0x24>)
 800870e:	2200      	movs	r2, #0
 8008710:	701a      	strb	r2, [r3, #0]
    vMBPortSerialEnable( TRUE, FALSE );
 8008712:	2100      	movs	r1, #0
 8008714:	2001      	movs	r0, #1
 8008716:	f7ff fc33 	bl	8007f80 <vMBPortSerialEnable>
    vMBPortTimersEnable(  );
 800871a:	f7ff fd3b 	bl	8008194 <vMBPortTimersEnable>

    EXIT_CRITICAL_SECTION(  );
 800871e:	f7ff fb9d 	bl	8007e5c <ExitCriticalSection>
}
 8008722:	bf00      	nop
 8008724:	bd80      	pop	{r7, pc}
 8008726:	bf00      	nop
 8008728:	20004b3d 	.word	0x20004b3d

0800872c <eMBRTUStop>:

void
eMBRTUStop( void )
{
 800872c:	b580      	push	{r7, lr}
 800872e:	af00      	add	r7, sp, #0
    ENTER_CRITICAL_SECTION(  );
 8008730:	f7ff fb8e 	bl	8007e50 <EnterCriticalSection>
    vMBPortSerialEnable( FALSE, FALSE );
 8008734:	2100      	movs	r1, #0
 8008736:	2000      	movs	r0, #0
 8008738:	f7ff fc22 	bl	8007f80 <vMBPortSerialEnable>
    vMBPortTimersDisable(  );
 800873c:	f7ff fd3c 	bl	80081b8 <vMBPortTimersDisable>
    EXIT_CRITICAL_SECTION(  );
 8008740:	f7ff fb8c 	bl	8007e5c <ExitCriticalSection>
}
 8008744:	bf00      	nop
 8008746:	bd80      	pop	{r7, pc}

08008748 <eMBRTUReceive>:

eMBErrorCode
eMBRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b086      	sub	sp, #24
 800874c:	af00      	add	r7, sp, #0
 800874e:	60f8      	str	r0, [r7, #12]
 8008750:	60b9      	str	r1, [r7, #8]
 8008752:	607a      	str	r2, [r7, #4]
    BOOL            xFrameReceived = FALSE;
 8008754:	2300      	movs	r3, #0
 8008756:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eStatus = MB_ENOERR;
 8008758:	2300      	movs	r3, #0
 800875a:	75fb      	strb	r3, [r7, #23]

    (void)(xFrameReceived);

    ENTER_CRITICAL_SECTION(  );
 800875c:	f7ff fb78 	bl	8007e50 <EnterCriticalSection>
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );
 8008760:	4b1a      	ldr	r3, [pc, #104]	; (80087cc <eMBRTUReceive+0x84>)
 8008762:	881b      	ldrh	r3, [r3, #0]
 8008764:	b29b      	uxth	r3, r3
 8008766:	2bff      	cmp	r3, #255	; 0xff
 8008768:	d905      	bls.n	8008776 <eMBRTUReceive+0x2e>
 800876a:	4b19      	ldr	r3, [pc, #100]	; (80087d0 <eMBRTUReceive+0x88>)
 800876c:	4a19      	ldr	r2, [pc, #100]	; (80087d4 <eMBRTUReceive+0x8c>)
 800876e:	21a0      	movs	r1, #160	; 0xa0
 8008770:	4819      	ldr	r0, [pc, #100]	; (80087d8 <eMBRTUReceive+0x90>)
 8008772:	f000 f9a1 	bl	8008ab8 <__assert_func>

    /* Length and CRC check */
    if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
 8008776:	4b15      	ldr	r3, [pc, #84]	; (80087cc <eMBRTUReceive+0x84>)
 8008778:	881b      	ldrh	r3, [r3, #0]
 800877a:	b29b      	uxth	r3, r3
 800877c:	2b03      	cmp	r3, #3
 800877e:	d91b      	bls.n	80087b8 <eMBRTUReceive+0x70>
        && ( usMBCRC16( ( UCHAR * ) ucRTUBuf, usRcvBufferPos ) == 0 ) )
 8008780:	4b12      	ldr	r3, [pc, #72]	; (80087cc <eMBRTUReceive+0x84>)
 8008782:	881b      	ldrh	r3, [r3, #0]
 8008784:	b29b      	uxth	r3, r3
 8008786:	4619      	mov	r1, r3
 8008788:	4814      	ldr	r0, [pc, #80]	; (80087dc <eMBRTUReceive+0x94>)
 800878a:	f7ff ff49 	bl	8008620 <usMBCRC16>
 800878e:	4603      	mov	r3, r0
 8008790:	2b00      	cmp	r3, #0
 8008792:	d111      	bne.n	80087b8 <eMBRTUReceive+0x70>
    {
        /* Save the address field. All frames are passed to the upper layed
         * and the decision if a frame is used is done there.
         */
        *pucRcvAddress = ucRTUBuf[MB_SER_PDU_ADDR_OFF];
 8008794:	4b11      	ldr	r3, [pc, #68]	; (80087dc <eMBRTUReceive+0x94>)
 8008796:	781b      	ldrb	r3, [r3, #0]
 8008798:	b2da      	uxtb	r2, r3
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	701a      	strb	r2, [r3, #0]

        /* Total length of Modbus-PDU is Modbus-Serial-Line-PDU minus
         * size of address field and CRC checksum.
         */
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 800879e:	4b0b      	ldr	r3, [pc, #44]	; (80087cc <eMBRTUReceive+0x84>)
 80087a0:	881b      	ldrh	r3, [r3, #0]
 80087a2:	b29b      	uxth	r3, r3
 80087a4:	3b03      	subs	r3, #3
 80087a6:	b29a      	uxth	r2, r3
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	801a      	strh	r2, [r3, #0]

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	4a0c      	ldr	r2, [pc, #48]	; (80087e0 <eMBRTUReceive+0x98>)
 80087b0:	601a      	str	r2, [r3, #0]
        xFrameReceived = TRUE;
 80087b2:	2301      	movs	r3, #1
 80087b4:	75bb      	strb	r3, [r7, #22]
 80087b6:	e001      	b.n	80087bc <eMBRTUReceive+0x74>
    }
    else
    {
        eStatus = MB_EIO;
 80087b8:	2305      	movs	r3, #5
 80087ba:	75fb      	strb	r3, [r7, #23]
    }

    EXIT_CRITICAL_SECTION(  );
 80087bc:	f7ff fb4e 	bl	8007e5c <ExitCriticalSection>
    return eStatus;
 80087c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3718      	adds	r7, #24
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
 80087ca:	bf00      	nop
 80087cc:	20004b46 	.word	0x20004b46
 80087d0:	08009c28 	.word	0x08009c28
 80087d4:	08009f5c 	.word	0x08009f5c
 80087d8:	08009c50 	.word	0x08009c50
 80087dc:	20004ea4 	.word	0x20004ea4
 80087e0:	20004ea5 	.word	0x20004ea5

080087e4 <eMBRTUSend>:

eMBErrorCode
eMBRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b084      	sub	sp, #16
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	4603      	mov	r3, r0
 80087ec:	6039      	str	r1, [r7, #0]
 80087ee:	71fb      	strb	r3, [r7, #7]
 80087f0:	4613      	mov	r3, r2
 80087f2:	80bb      	strh	r3, [r7, #4]
    eMBErrorCode    eStatus = MB_ENOERR;
 80087f4:	2300      	movs	r3, #0
 80087f6:	73fb      	strb	r3, [r7, #15]
    USHORT          usCRC16;

    ENTER_CRITICAL_SECTION(  );
 80087f8:	f7ff fb2a 	bl	8007e50 <EnterCriticalSection>

    /* Check if the receiver is still in idle state. If not we where to
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_RX_IDLE )
 80087fc:	4b26      	ldr	r3, [pc, #152]	; (8008898 <eMBRTUSend+0xb4>)
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	b2db      	uxtb	r3, r3
 8008802:	2b01      	cmp	r3, #1
 8008804:	d13f      	bne.n	8008886 <eMBRTUSend+0xa2>
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	3b01      	subs	r3, #1
 800880a:	4a24      	ldr	r2, [pc, #144]	; (800889c <eMBRTUSend+0xb8>)
 800880c:	6013      	str	r3, [r2, #0]
        usSndBufferCount = 1;
 800880e:	4b24      	ldr	r3, [pc, #144]	; (80088a0 <eMBRTUSend+0xbc>)
 8008810:	2201      	movs	r2, #1
 8008812:	801a      	strh	r2, [r3, #0]

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
        pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
 8008814:	4b21      	ldr	r3, [pc, #132]	; (800889c <eMBRTUSend+0xb8>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	79fa      	ldrb	r2, [r7, #7]
 800881a:	701a      	strb	r2, [r3, #0]
        usSndBufferCount += usLength;
 800881c:	4b20      	ldr	r3, [pc, #128]	; (80088a0 <eMBRTUSend+0xbc>)
 800881e:	881b      	ldrh	r3, [r3, #0]
 8008820:	b29a      	uxth	r2, r3
 8008822:	88bb      	ldrh	r3, [r7, #4]
 8008824:	4413      	add	r3, r2
 8008826:	b29a      	uxth	r2, r3
 8008828:	4b1d      	ldr	r3, [pc, #116]	; (80088a0 <eMBRTUSend+0xbc>)
 800882a:	801a      	strh	r2, [r3, #0]

        /* Calculate CRC16 checksum for Modbus-Serial-Line-PDU. */
        usCRC16 = usMBCRC16( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );
 800882c:	4b1b      	ldr	r3, [pc, #108]	; (800889c <eMBRTUSend+0xb8>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a1b      	ldr	r2, [pc, #108]	; (80088a0 <eMBRTUSend+0xbc>)
 8008832:	8812      	ldrh	r2, [r2, #0]
 8008834:	b292      	uxth	r2, r2
 8008836:	4611      	mov	r1, r2
 8008838:	4618      	mov	r0, r3
 800883a:	f7ff fef1 	bl	8008620 <usMBCRC16>
 800883e:	4603      	mov	r3, r0
 8008840:	81bb      	strh	r3, [r7, #12]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
 8008842:	4b17      	ldr	r3, [pc, #92]	; (80088a0 <eMBRTUSend+0xbc>)
 8008844:	881b      	ldrh	r3, [r3, #0]
 8008846:	b29b      	uxth	r3, r3
 8008848:	1c5a      	adds	r2, r3, #1
 800884a:	b291      	uxth	r1, r2
 800884c:	4a14      	ldr	r2, [pc, #80]	; (80088a0 <eMBRTUSend+0xbc>)
 800884e:	8011      	strh	r1, [r2, #0]
 8008850:	461a      	mov	r2, r3
 8008852:	89bb      	ldrh	r3, [r7, #12]
 8008854:	b2d9      	uxtb	r1, r3
 8008856:	4b13      	ldr	r3, [pc, #76]	; (80088a4 <eMBRTUSend+0xc0>)
 8008858:	5499      	strb	r1, [r3, r2]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 800885a:	89bb      	ldrh	r3, [r7, #12]
 800885c:	0a1b      	lsrs	r3, r3, #8
 800885e:	b299      	uxth	r1, r3
 8008860:	4b0f      	ldr	r3, [pc, #60]	; (80088a0 <eMBRTUSend+0xbc>)
 8008862:	881b      	ldrh	r3, [r3, #0]
 8008864:	b29b      	uxth	r3, r3
 8008866:	1c5a      	adds	r2, r3, #1
 8008868:	b290      	uxth	r0, r2
 800886a:	4a0d      	ldr	r2, [pc, #52]	; (80088a0 <eMBRTUSend+0xbc>)
 800886c:	8010      	strh	r0, [r2, #0]
 800886e:	461a      	mov	r2, r3
 8008870:	b2c9      	uxtb	r1, r1
 8008872:	4b0c      	ldr	r3, [pc, #48]	; (80088a4 <eMBRTUSend+0xc0>)
 8008874:	5499      	strb	r1, [r3, r2]
		#if MB_RTU_SLAVE_USE_RS485
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
		#endif

        /*  Activate the transmitter. */
        eSndState = STATE_TX_XMIT;
 8008876:	4b0c      	ldr	r3, [pc, #48]	; (80088a8 <eMBRTUSend+0xc4>)
 8008878:	2201      	movs	r2, #1
 800887a:	701a      	strb	r2, [r3, #0]
        vMBPortSerialEnable( FALSE, TRUE );
 800887c:	2101      	movs	r1, #1
 800887e:	2000      	movs	r0, #0
 8008880:	f7ff fb7e 	bl	8007f80 <vMBPortSerialEnable>
 8008884:	e001      	b.n	800888a <eMBRTUSend+0xa6>
    }
    else
    {
        eStatus = MB_EIO;
 8008886:	2305      	movs	r3, #5
 8008888:	73fb      	strb	r3, [r7, #15]
    }
    EXIT_CRITICAL_SECTION(  );
 800888a:	f7ff fae7 	bl	8007e5c <ExitCriticalSection>
    return eStatus;
 800888e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008890:	4618      	mov	r0, r3
 8008892:	3710      	adds	r7, #16
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}
 8008898:	20004b3d 	.word	0x20004b3d
 800889c:	20004b40 	.word	0x20004b40
 80088a0:	20004b44 	.word	0x20004b44
 80088a4:	20004ea4 	.word	0x20004ea4
 80088a8:	20004b3c 	.word	0x20004b3c

080088ac <xMBRTUReceiveFSM>:

BOOL
xMBRTUReceiveFSM( void )		//run in UART_ISR - thread mode
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b082      	sub	sp, #8
 80088b0:	af00      	add	r7, sp, #0
    BOOL            xTaskNeedSwitch = FALSE;
 80088b2:	2300      	movs	r3, #0
 80088b4:	71fb      	strb	r3, [r7, #7]
    UCHAR           ucByte;

    assert( eSndState == STATE_TX_IDLE );
 80088b6:	4b2a      	ldr	r3, [pc, #168]	; (8008960 <xMBRTUReceiveFSM+0xb4>)
 80088b8:	781b      	ldrb	r3, [r3, #0]
 80088ba:	b2db      	uxtb	r3, r3
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d005      	beq.n	80088cc <xMBRTUReceiveFSM+0x20>
 80088c0:	4b28      	ldr	r3, [pc, #160]	; (8008964 <xMBRTUReceiveFSM+0xb8>)
 80088c2:	4a29      	ldr	r2, [pc, #164]	; (8008968 <xMBRTUReceiveFSM+0xbc>)
 80088c4:	21f2      	movs	r1, #242	; 0xf2
 80088c6:	4829      	ldr	r0, [pc, #164]	; (800896c <xMBRTUReceiveFSM+0xc0>)
 80088c8:	f000 f8f6 	bl	8008ab8 <__assert_func>

    /* Always read the character. */
    ( void )xMBPortSerialGetByte( ( CHAR * ) & ucByte );
 80088cc:	1dbb      	adds	r3, r7, #6
 80088ce:	4618      	mov	r0, r3
 80088d0:	f7ff fbcc 	bl	800806c <xMBPortSerialGetByte>

    switch ( eRcvState )
 80088d4:	4b26      	ldr	r3, [pc, #152]	; (8008970 <xMBRTUReceiveFSM+0xc4>)
 80088d6:	781b      	ldrb	r3, [r3, #0]
 80088d8:	b2db      	uxtb	r3, r3
 80088da:	2b03      	cmp	r3, #3
 80088dc:	d83b      	bhi.n	8008956 <xMBRTUReceiveFSM+0xaa>
 80088de:	a201      	add	r2, pc, #4	; (adr r2, 80088e4 <xMBRTUReceiveFSM+0x38>)
 80088e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088e4:	080088f5 	.word	0x080088f5
 80088e8:	08008901 	.word	0x08008901
 80088ec:	08008929 	.word	0x08008929
 80088f0:	080088fb 	.word	0x080088fb
    {
        /* If we have received a character in the init state we have to
         * wait until the frame is finished.
         */
    case STATE_RX_INIT:
        vMBPortTimersEnable(  );
 80088f4:	f7ff fc4e 	bl	8008194 <vMBPortTimersEnable>
        break;
 80088f8:	e02d      	b.n	8008956 <xMBRTUReceiveFSM+0xaa>

        /* In the error state we wait until all characters in the
         * damaged frame are transmitted.
         */
    case STATE_RX_ERROR:
        vMBPortTimersEnable(  );
 80088fa:	f7ff fc4b 	bl	8008194 <vMBPortTimersEnable>
        break;
 80088fe:	e02a      	b.n	8008956 <xMBRTUReceiveFSM+0xaa>
        /* In the idle state we wait for a new character. If a character
         * is received the t1.5 and t3.5 timers are started and the
         * receiver is in the state STATE_RX_RECEIVCE.
         */
    case STATE_RX_IDLE:
        usRcvBufferPos = 0;
 8008900:	4b1c      	ldr	r3, [pc, #112]	; (8008974 <xMBRTUReceiveFSM+0xc8>)
 8008902:	2200      	movs	r2, #0
 8008904:	801a      	strh	r2, [r3, #0]
        ucRTUBuf[usRcvBufferPos++] = ucByte;
 8008906:	4b1b      	ldr	r3, [pc, #108]	; (8008974 <xMBRTUReceiveFSM+0xc8>)
 8008908:	881b      	ldrh	r3, [r3, #0]
 800890a:	b29b      	uxth	r3, r3
 800890c:	1c5a      	adds	r2, r3, #1
 800890e:	b291      	uxth	r1, r2
 8008910:	4a18      	ldr	r2, [pc, #96]	; (8008974 <xMBRTUReceiveFSM+0xc8>)
 8008912:	8011      	strh	r1, [r2, #0]
 8008914:	461a      	mov	r2, r3
 8008916:	79b9      	ldrb	r1, [r7, #6]
 8008918:	4b17      	ldr	r3, [pc, #92]	; (8008978 <xMBRTUReceiveFSM+0xcc>)
 800891a:	5499      	strb	r1, [r3, r2]
        eRcvState = STATE_RX_RCV;
 800891c:	4b14      	ldr	r3, [pc, #80]	; (8008970 <xMBRTUReceiveFSM+0xc4>)
 800891e:	2202      	movs	r2, #2
 8008920:	701a      	strb	r2, [r3, #0]

        /* Enable t3.5 timers. */
        vMBPortTimersEnable(  );
 8008922:	f7ff fc37 	bl	8008194 <vMBPortTimersEnable>
        break;
 8008926:	e016      	b.n	8008956 <xMBRTUReceiveFSM+0xaa>
         * every character received. If more than the maximum possible
         * number of bytes in a modbus frame is received the frame is
         * ignored.
         */
    case STATE_RX_RCV:
        if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
 8008928:	4b12      	ldr	r3, [pc, #72]	; (8008974 <xMBRTUReceiveFSM+0xc8>)
 800892a:	881b      	ldrh	r3, [r3, #0]
 800892c:	b29b      	uxth	r3, r3
 800892e:	2bff      	cmp	r3, #255	; 0xff
 8008930:	d80b      	bhi.n	800894a <xMBRTUReceiveFSM+0x9e>
        {
            ucRTUBuf[usRcvBufferPos++] = ucByte;
 8008932:	4b10      	ldr	r3, [pc, #64]	; (8008974 <xMBRTUReceiveFSM+0xc8>)
 8008934:	881b      	ldrh	r3, [r3, #0]
 8008936:	b29b      	uxth	r3, r3
 8008938:	1c5a      	adds	r2, r3, #1
 800893a:	b291      	uxth	r1, r2
 800893c:	4a0d      	ldr	r2, [pc, #52]	; (8008974 <xMBRTUReceiveFSM+0xc8>)
 800893e:	8011      	strh	r1, [r2, #0]
 8008940:	461a      	mov	r2, r3
 8008942:	79b9      	ldrb	r1, [r7, #6]
 8008944:	4b0c      	ldr	r3, [pc, #48]	; (8008978 <xMBRTUReceiveFSM+0xcc>)
 8008946:	5499      	strb	r1, [r3, r2]
 8008948:	e002      	b.n	8008950 <xMBRTUReceiveFSM+0xa4>
        }
        else
        {
            eRcvState = STATE_RX_ERROR;
 800894a:	4b09      	ldr	r3, [pc, #36]	; (8008970 <xMBRTUReceiveFSM+0xc4>)
 800894c:	2203      	movs	r2, #3
 800894e:	701a      	strb	r2, [r3, #0]
        }
        vMBPortTimersEnable(  );
 8008950:	f7ff fc20 	bl	8008194 <vMBPortTimersEnable>
        break;
 8008954:	bf00      	nop
    }
    return xTaskNeedSwitch;
 8008956:	79fb      	ldrb	r3, [r7, #7]
}
 8008958:	4618      	mov	r0, r3
 800895a:	3708      	adds	r7, #8
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}
 8008960:	20004b3c 	.word	0x20004b3c
 8008964:	08009c74 	.word	0x08009c74
 8008968:	08009f6c 	.word	0x08009f6c
 800896c:	08009c50 	.word	0x08009c50
 8008970:	20004b3d 	.word	0x20004b3d
 8008974:	20004b46 	.word	0x20004b46
 8008978:	20004ea4 	.word	0x20004ea4

0800897c <xMBRTUTransmitFSM>:

BOOL
xMBRTUTransmitFSM( void )	//run in UART_ISR - thread mode
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b082      	sub	sp, #8
 8008980:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 8008982:	2300      	movs	r3, #0
 8008984:	71fb      	strb	r3, [r7, #7]

    assert( eRcvState == STATE_RX_IDLE );
 8008986:	4b22      	ldr	r3, [pc, #136]	; (8008a10 <xMBRTUTransmitFSM+0x94>)
 8008988:	781b      	ldrb	r3, [r3, #0]
 800898a:	b2db      	uxtb	r3, r3
 800898c:	2b01      	cmp	r3, #1
 800898e:	d006      	beq.n	800899e <xMBRTUTransmitFSM+0x22>
 8008990:	4b20      	ldr	r3, [pc, #128]	; (8008a14 <xMBRTUTransmitFSM+0x98>)
 8008992:	4a21      	ldr	r2, [pc, #132]	; (8008a18 <xMBRTUTransmitFSM+0x9c>)
 8008994:	f240 112d 	movw	r1, #301	; 0x12d
 8008998:	4820      	ldr	r0, [pc, #128]	; (8008a1c <xMBRTUTransmitFSM+0xa0>)
 800899a:	f000 f88d 	bl	8008ab8 <__assert_func>

    switch ( eSndState )
 800899e:	4b20      	ldr	r3, [pc, #128]	; (8008a20 <xMBRTUTransmitFSM+0xa4>)
 80089a0:	781b      	ldrb	r3, [r3, #0]
 80089a2:	b2db      	uxtb	r3, r3
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d002      	beq.n	80089ae <xMBRTUTransmitFSM+0x32>
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	d005      	beq.n	80089b8 <xMBRTUTransmitFSM+0x3c>
 80089ac:	e02a      	b.n	8008a04 <xMBRTUTransmitFSM+0x88>
    {
        /* We should not get a transmitter event if the transmitter is in
         * idle state.  */
    case STATE_TX_IDLE:
        /* enable receiver/disable transmitter. */
        vMBPortSerialEnable( TRUE, FALSE );
 80089ae:	2100      	movs	r1, #0
 80089b0:	2001      	movs	r0, #1
 80089b2:	f7ff fae5 	bl	8007f80 <vMBPortSerialEnable>
        break;
 80089b6:	e025      	b.n	8008a04 <xMBRTUTransmitFSM+0x88>

    case STATE_TX_XMIT:
        /* check if we are finished. */
        if( usSndBufferCount != 0 )
 80089b8:	4b1a      	ldr	r3, [pc, #104]	; (8008a24 <xMBRTUTransmitFSM+0xa8>)
 80089ba:	881b      	ldrh	r3, [r3, #0]
 80089bc:	b29b      	uxth	r3, r3
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d013      	beq.n	80089ea <xMBRTUTransmitFSM+0x6e>
        {
            xMBPortSerialPutByte( ( CHAR )*pucSndBufferCur );
 80089c2:	4b19      	ldr	r3, [pc, #100]	; (8008a28 <xMBRTUTransmitFSM+0xac>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	781b      	ldrb	r3, [r3, #0]
 80089c8:	b2db      	uxtb	r3, r3
 80089ca:	4618      	mov	r0, r3
 80089cc:	f7ff fb3c 	bl	8008048 <xMBPortSerialPutByte>
            pucSndBufferCur++;  /* next byte in sendbuffer. */
 80089d0:	4b15      	ldr	r3, [pc, #84]	; (8008a28 <xMBRTUTransmitFSM+0xac>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	3301      	adds	r3, #1
 80089d6:	4a14      	ldr	r2, [pc, #80]	; (8008a28 <xMBRTUTransmitFSM+0xac>)
 80089d8:	6013      	str	r3, [r2, #0]
            usSndBufferCount--;
 80089da:	4b12      	ldr	r3, [pc, #72]	; (8008a24 <xMBRTUTransmitFSM+0xa8>)
 80089dc:	881b      	ldrh	r3, [r3, #0]
 80089de:	b29b      	uxth	r3, r3
 80089e0:	3b01      	subs	r3, #1
 80089e2:	b29a      	uxth	r2, r3
 80089e4:	4b0f      	ldr	r3, [pc, #60]	; (8008a24 <xMBRTUTransmitFSM+0xa8>)
 80089e6:	801a      	strh	r2, [r3, #0]
            /* Disable transmitter. This prevents another transmit buffer
             * empty interrupt. */
            vMBPortSerialEnable( TRUE, FALSE );
            eSndState = STATE_TX_IDLE;
        }
        break;
 80089e8:	e00b      	b.n	8008a02 <xMBRTUTransmitFSM+0x86>
            xNeedPoll = xMBPortEventPostFromISR( EV_FRAME_SENT );
 80089ea:	2008      	movs	r0, #8
 80089ec:	f7ff fa70 	bl	8007ed0 <xMBPortEventPostFromISR>
 80089f0:	4603      	mov	r3, r0
 80089f2:	71fb      	strb	r3, [r7, #7]
            vMBPortSerialEnable( TRUE, FALSE );
 80089f4:	2100      	movs	r1, #0
 80089f6:	2001      	movs	r0, #1
 80089f8:	f7ff fac2 	bl	8007f80 <vMBPortSerialEnable>
            eSndState = STATE_TX_IDLE;
 80089fc:	4b08      	ldr	r3, [pc, #32]	; (8008a20 <xMBRTUTransmitFSM+0xa4>)
 80089fe:	2200      	movs	r2, #0
 8008a00:	701a      	strb	r2, [r3, #0]
        break;
 8008a02:	bf00      	nop
    }

    return xNeedPoll;
 8008a04:	79fb      	ldrb	r3, [r7, #7]
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3708      	adds	r7, #8
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}
 8008a0e:	bf00      	nop
 8008a10:	20004b3d 	.word	0x20004b3d
 8008a14:	08009c90 	.word	0x08009c90
 8008a18:	08009f80 	.word	0x08009f80
 8008a1c:	08009c50 	.word	0x08009c50
 8008a20:	20004b3c 	.word	0x20004b3c
 8008a24:	20004b44 	.word	0x20004b44
 8008a28:	20004b40 	.word	0x20004b40

08008a2c <xMBRTUTimerT35Expired>:

BOOL
xMBRTUTimerT35Expired( void )
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b082      	sub	sp, #8
 8008a30:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 8008a32:	2300      	movs	r3, #0
 8008a34:	71fb      	strb	r3, [r7, #7]

    switch ( eRcvState )
 8008a36:	4b1c      	ldr	r3, [pc, #112]	; (8008aa8 <xMBRTUTimerT35Expired+0x7c>)
 8008a38:	781b      	ldrb	r3, [r3, #0]
 8008a3a:	b2db      	uxtb	r3, r3
 8008a3c:	2b03      	cmp	r3, #3
 8008a3e:	d028      	beq.n	8008a92 <xMBRTUTimerT35Expired+0x66>
 8008a40:	2b03      	cmp	r3, #3
 8008a42:	dc10      	bgt.n	8008a66 <xMBRTUTimerT35Expired+0x3a>
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d002      	beq.n	8008a4e <xMBRTUTimerT35Expired+0x22>
 8008a48:	2b02      	cmp	r3, #2
 8008a4a:	d006      	beq.n	8008a5a <xMBRTUTimerT35Expired+0x2e>
 8008a4c:	e00b      	b.n	8008a66 <xMBRTUTimerT35Expired+0x3a>
    {
        /* Timer t35 expired. Startup phase is finished. */
    case STATE_RX_INIT:
        xNeedPoll = xMBPortEventPostFromISR( EV_READY );
 8008a4e:	2001      	movs	r0, #1
 8008a50:	f7ff fa3e 	bl	8007ed0 <xMBPortEventPostFromISR>
 8008a54:	4603      	mov	r3, r0
 8008a56:	71fb      	strb	r3, [r7, #7]
        break;
 8008a58:	e01c      	b.n	8008a94 <xMBRTUTimerT35Expired+0x68>

        /* A frame was received and t35 expired. Notify the listener that
         * a new frame was received. */
    case STATE_RX_RCV:
    	//vMBPortSerialEnable( FALSE, FALSE );
        xNeedPoll = xMBPortEventPostFromISR( EV_FRAME_RECEIVED );
 8008a5a:	2002      	movs	r0, #2
 8008a5c:	f7ff fa38 	bl	8007ed0 <xMBPortEventPostFromISR>
 8008a60:	4603      	mov	r3, r0
 8008a62:	71fb      	strb	r3, [r7, #7]
        break;
 8008a64:	e016      	b.n	8008a94 <xMBRTUTimerT35Expired+0x68>
    case STATE_RX_ERROR:
        break;

        /* Function called in an illegal state. */
    default:
        assert( ( eRcvState == STATE_RX_INIT ) ||
 8008a66:	4b10      	ldr	r3, [pc, #64]	; (8008aa8 <xMBRTUTimerT35Expired+0x7c>)
 8008a68:	781b      	ldrb	r3, [r3, #0]
 8008a6a:	b2db      	uxtb	r3, r3
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d011      	beq.n	8008a94 <xMBRTUTimerT35Expired+0x68>
 8008a70:	4b0d      	ldr	r3, [pc, #52]	; (8008aa8 <xMBRTUTimerT35Expired+0x7c>)
 8008a72:	781b      	ldrb	r3, [r3, #0]
 8008a74:	b2db      	uxtb	r3, r3
 8008a76:	2b02      	cmp	r3, #2
 8008a78:	d00c      	beq.n	8008a94 <xMBRTUTimerT35Expired+0x68>
 8008a7a:	4b0b      	ldr	r3, [pc, #44]	; (8008aa8 <xMBRTUTimerT35Expired+0x7c>)
 8008a7c:	781b      	ldrb	r3, [r3, #0]
 8008a7e:	b2db      	uxtb	r3, r3
 8008a80:	2b03      	cmp	r3, #3
 8008a82:	d007      	beq.n	8008a94 <xMBRTUTimerT35Expired+0x68>
 8008a84:	4b09      	ldr	r3, [pc, #36]	; (8008aac <xMBRTUTimerT35Expired+0x80>)
 8008a86:	4a0a      	ldr	r2, [pc, #40]	; (8008ab0 <xMBRTUTimerT35Expired+0x84>)
 8008a88:	f240 1167 	movw	r1, #359	; 0x167
 8008a8c:	4809      	ldr	r0, [pc, #36]	; (8008ab4 <xMBRTUTimerT35Expired+0x88>)
 8008a8e:	f000 f813 	bl	8008ab8 <__assert_func>
        break;
 8008a92:	bf00      	nop
                ( eRcvState == STATE_RX_RCV ) || ( eRcvState == STATE_RX_ERROR ) );
    }

    vMBPortTimersDisable(  );
 8008a94:	f7ff fb90 	bl	80081b8 <vMBPortTimersDisable>
    eRcvState = STATE_RX_IDLE;
 8008a98:	4b03      	ldr	r3, [pc, #12]	; (8008aa8 <xMBRTUTimerT35Expired+0x7c>)
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	701a      	strb	r2, [r3, #0]

    return xNeedPoll;
 8008a9e:	79fb      	ldrb	r3, [r7, #7]
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3708      	adds	r7, #8
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}
 8008aa8:	20004b3d 	.word	0x20004b3d
 8008aac:	08009cac 	.word	0x08009cac
 8008ab0:	08009f94 	.word	0x08009f94
 8008ab4:	08009c50 	.word	0x08009c50

08008ab8 <__assert_func>:
 8008ab8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008aba:	4614      	mov	r4, r2
 8008abc:	461a      	mov	r2, r3
 8008abe:	4b09      	ldr	r3, [pc, #36]	; (8008ae4 <__assert_func+0x2c>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4605      	mov	r5, r0
 8008ac4:	68d8      	ldr	r0, [r3, #12]
 8008ac6:	b14c      	cbz	r4, 8008adc <__assert_func+0x24>
 8008ac8:	4b07      	ldr	r3, [pc, #28]	; (8008ae8 <__assert_func+0x30>)
 8008aca:	9100      	str	r1, [sp, #0]
 8008acc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008ad0:	4906      	ldr	r1, [pc, #24]	; (8008aec <__assert_func+0x34>)
 8008ad2:	462b      	mov	r3, r5
 8008ad4:	f000 f8ea 	bl	8008cac <fiprintf>
 8008ad8:	f000 fe30 	bl	800973c <abort>
 8008adc:	4b04      	ldr	r3, [pc, #16]	; (8008af0 <__assert_func+0x38>)
 8008ade:	461c      	mov	r4, r3
 8008ae0:	e7f3      	b.n	8008aca <__assert_func+0x12>
 8008ae2:	bf00      	nop
 8008ae4:	20000094 	.word	0x20000094
 8008ae8:	08009faa 	.word	0x08009faa
 8008aec:	08009fb7 	.word	0x08009fb7
 8008af0:	08009fe5 	.word	0x08009fe5

08008af4 <__errno>:
 8008af4:	4b01      	ldr	r3, [pc, #4]	; (8008afc <__errno+0x8>)
 8008af6:	6818      	ldr	r0, [r3, #0]
 8008af8:	4770      	bx	lr
 8008afa:	bf00      	nop
 8008afc:	20000094 	.word	0x20000094

08008b00 <std>:
 8008b00:	2300      	movs	r3, #0
 8008b02:	b510      	push	{r4, lr}
 8008b04:	4604      	mov	r4, r0
 8008b06:	e9c0 3300 	strd	r3, r3, [r0]
 8008b0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008b0e:	6083      	str	r3, [r0, #8]
 8008b10:	8181      	strh	r1, [r0, #12]
 8008b12:	6643      	str	r3, [r0, #100]	; 0x64
 8008b14:	81c2      	strh	r2, [r0, #14]
 8008b16:	6183      	str	r3, [r0, #24]
 8008b18:	4619      	mov	r1, r3
 8008b1a:	2208      	movs	r2, #8
 8008b1c:	305c      	adds	r0, #92	; 0x5c
 8008b1e:	f000 f92c 	bl	8008d7a <memset>
 8008b22:	4b05      	ldr	r3, [pc, #20]	; (8008b38 <std+0x38>)
 8008b24:	6263      	str	r3, [r4, #36]	; 0x24
 8008b26:	4b05      	ldr	r3, [pc, #20]	; (8008b3c <std+0x3c>)
 8008b28:	62a3      	str	r3, [r4, #40]	; 0x28
 8008b2a:	4b05      	ldr	r3, [pc, #20]	; (8008b40 <std+0x40>)
 8008b2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008b2e:	4b05      	ldr	r3, [pc, #20]	; (8008b44 <std+0x44>)
 8008b30:	6224      	str	r4, [r4, #32]
 8008b32:	6323      	str	r3, [r4, #48]	; 0x30
 8008b34:	bd10      	pop	{r4, pc}
 8008b36:	bf00      	nop
 8008b38:	08009511 	.word	0x08009511
 8008b3c:	08009533 	.word	0x08009533
 8008b40:	0800956b 	.word	0x0800956b
 8008b44:	0800958f 	.word	0x0800958f

08008b48 <_cleanup_r>:
 8008b48:	4901      	ldr	r1, [pc, #4]	; (8008b50 <_cleanup_r+0x8>)
 8008b4a:	f000 b8c1 	b.w	8008cd0 <_fwalk_reent>
 8008b4e:	bf00      	nop
 8008b50:	08009879 	.word	0x08009879

08008b54 <__sfmoreglue>:
 8008b54:	b570      	push	{r4, r5, r6, lr}
 8008b56:	1e4a      	subs	r2, r1, #1
 8008b58:	2568      	movs	r5, #104	; 0x68
 8008b5a:	4355      	muls	r5, r2
 8008b5c:	460e      	mov	r6, r1
 8008b5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008b62:	f000 f913 	bl	8008d8c <_malloc_r>
 8008b66:	4604      	mov	r4, r0
 8008b68:	b140      	cbz	r0, 8008b7c <__sfmoreglue+0x28>
 8008b6a:	2100      	movs	r1, #0
 8008b6c:	e9c0 1600 	strd	r1, r6, [r0]
 8008b70:	300c      	adds	r0, #12
 8008b72:	60a0      	str	r0, [r4, #8]
 8008b74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008b78:	f000 f8ff 	bl	8008d7a <memset>
 8008b7c:	4620      	mov	r0, r4
 8008b7e:	bd70      	pop	{r4, r5, r6, pc}

08008b80 <__sfp_lock_acquire>:
 8008b80:	4801      	ldr	r0, [pc, #4]	; (8008b88 <__sfp_lock_acquire+0x8>)
 8008b82:	f000 b8ea 	b.w	8008d5a <__retarget_lock_acquire_recursive>
 8008b86:	bf00      	nop
 8008b88:	20004fac 	.word	0x20004fac

08008b8c <__sfp_lock_release>:
 8008b8c:	4801      	ldr	r0, [pc, #4]	; (8008b94 <__sfp_lock_release+0x8>)
 8008b8e:	f000 b8e5 	b.w	8008d5c <__retarget_lock_release_recursive>
 8008b92:	bf00      	nop
 8008b94:	20004fac 	.word	0x20004fac

08008b98 <__sinit_lock_acquire>:
 8008b98:	4801      	ldr	r0, [pc, #4]	; (8008ba0 <__sinit_lock_acquire+0x8>)
 8008b9a:	f000 b8de 	b.w	8008d5a <__retarget_lock_acquire_recursive>
 8008b9e:	bf00      	nop
 8008ba0:	20004fa7 	.word	0x20004fa7

08008ba4 <__sinit_lock_release>:
 8008ba4:	4801      	ldr	r0, [pc, #4]	; (8008bac <__sinit_lock_release+0x8>)
 8008ba6:	f000 b8d9 	b.w	8008d5c <__retarget_lock_release_recursive>
 8008baa:	bf00      	nop
 8008bac:	20004fa7 	.word	0x20004fa7

08008bb0 <__sinit>:
 8008bb0:	b510      	push	{r4, lr}
 8008bb2:	4604      	mov	r4, r0
 8008bb4:	f7ff fff0 	bl	8008b98 <__sinit_lock_acquire>
 8008bb8:	69a3      	ldr	r3, [r4, #24]
 8008bba:	b11b      	cbz	r3, 8008bc4 <__sinit+0x14>
 8008bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bc0:	f7ff bff0 	b.w	8008ba4 <__sinit_lock_release>
 8008bc4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008bc8:	6523      	str	r3, [r4, #80]	; 0x50
 8008bca:	4b13      	ldr	r3, [pc, #76]	; (8008c18 <__sinit+0x68>)
 8008bcc:	4a13      	ldr	r2, [pc, #76]	; (8008c1c <__sinit+0x6c>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	62a2      	str	r2, [r4, #40]	; 0x28
 8008bd2:	42a3      	cmp	r3, r4
 8008bd4:	bf04      	itt	eq
 8008bd6:	2301      	moveq	r3, #1
 8008bd8:	61a3      	streq	r3, [r4, #24]
 8008bda:	4620      	mov	r0, r4
 8008bdc:	f000 f820 	bl	8008c20 <__sfp>
 8008be0:	6060      	str	r0, [r4, #4]
 8008be2:	4620      	mov	r0, r4
 8008be4:	f000 f81c 	bl	8008c20 <__sfp>
 8008be8:	60a0      	str	r0, [r4, #8]
 8008bea:	4620      	mov	r0, r4
 8008bec:	f000 f818 	bl	8008c20 <__sfp>
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	60e0      	str	r0, [r4, #12]
 8008bf4:	2104      	movs	r1, #4
 8008bf6:	6860      	ldr	r0, [r4, #4]
 8008bf8:	f7ff ff82 	bl	8008b00 <std>
 8008bfc:	68a0      	ldr	r0, [r4, #8]
 8008bfe:	2201      	movs	r2, #1
 8008c00:	2109      	movs	r1, #9
 8008c02:	f7ff ff7d 	bl	8008b00 <std>
 8008c06:	68e0      	ldr	r0, [r4, #12]
 8008c08:	2202      	movs	r2, #2
 8008c0a:	2112      	movs	r1, #18
 8008c0c:	f7ff ff78 	bl	8008b00 <std>
 8008c10:	2301      	movs	r3, #1
 8008c12:	61a3      	str	r3, [r4, #24]
 8008c14:	e7d2      	b.n	8008bbc <__sinit+0xc>
 8008c16:	bf00      	nop
 8008c18:	0800a048 	.word	0x0800a048
 8008c1c:	08008b49 	.word	0x08008b49

08008c20 <__sfp>:
 8008c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c22:	4607      	mov	r7, r0
 8008c24:	f7ff ffac 	bl	8008b80 <__sfp_lock_acquire>
 8008c28:	4b1e      	ldr	r3, [pc, #120]	; (8008ca4 <__sfp+0x84>)
 8008c2a:	681e      	ldr	r6, [r3, #0]
 8008c2c:	69b3      	ldr	r3, [r6, #24]
 8008c2e:	b913      	cbnz	r3, 8008c36 <__sfp+0x16>
 8008c30:	4630      	mov	r0, r6
 8008c32:	f7ff ffbd 	bl	8008bb0 <__sinit>
 8008c36:	3648      	adds	r6, #72	; 0x48
 8008c38:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008c3c:	3b01      	subs	r3, #1
 8008c3e:	d503      	bpl.n	8008c48 <__sfp+0x28>
 8008c40:	6833      	ldr	r3, [r6, #0]
 8008c42:	b30b      	cbz	r3, 8008c88 <__sfp+0x68>
 8008c44:	6836      	ldr	r6, [r6, #0]
 8008c46:	e7f7      	b.n	8008c38 <__sfp+0x18>
 8008c48:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008c4c:	b9d5      	cbnz	r5, 8008c84 <__sfp+0x64>
 8008c4e:	4b16      	ldr	r3, [pc, #88]	; (8008ca8 <__sfp+0x88>)
 8008c50:	60e3      	str	r3, [r4, #12]
 8008c52:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008c56:	6665      	str	r5, [r4, #100]	; 0x64
 8008c58:	f000 f87e 	bl	8008d58 <__retarget_lock_init_recursive>
 8008c5c:	f7ff ff96 	bl	8008b8c <__sfp_lock_release>
 8008c60:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008c64:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008c68:	6025      	str	r5, [r4, #0]
 8008c6a:	61a5      	str	r5, [r4, #24]
 8008c6c:	2208      	movs	r2, #8
 8008c6e:	4629      	mov	r1, r5
 8008c70:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008c74:	f000 f881 	bl	8008d7a <memset>
 8008c78:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008c7c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008c80:	4620      	mov	r0, r4
 8008c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c84:	3468      	adds	r4, #104	; 0x68
 8008c86:	e7d9      	b.n	8008c3c <__sfp+0x1c>
 8008c88:	2104      	movs	r1, #4
 8008c8a:	4638      	mov	r0, r7
 8008c8c:	f7ff ff62 	bl	8008b54 <__sfmoreglue>
 8008c90:	4604      	mov	r4, r0
 8008c92:	6030      	str	r0, [r6, #0]
 8008c94:	2800      	cmp	r0, #0
 8008c96:	d1d5      	bne.n	8008c44 <__sfp+0x24>
 8008c98:	f7ff ff78 	bl	8008b8c <__sfp_lock_release>
 8008c9c:	230c      	movs	r3, #12
 8008c9e:	603b      	str	r3, [r7, #0]
 8008ca0:	e7ee      	b.n	8008c80 <__sfp+0x60>
 8008ca2:	bf00      	nop
 8008ca4:	0800a048 	.word	0x0800a048
 8008ca8:	ffff0001 	.word	0xffff0001

08008cac <fiprintf>:
 8008cac:	b40e      	push	{r1, r2, r3}
 8008cae:	b503      	push	{r0, r1, lr}
 8008cb0:	4601      	mov	r1, r0
 8008cb2:	ab03      	add	r3, sp, #12
 8008cb4:	4805      	ldr	r0, [pc, #20]	; (8008ccc <fiprintf+0x20>)
 8008cb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cba:	6800      	ldr	r0, [r0, #0]
 8008cbc:	9301      	str	r3, [sp, #4]
 8008cbe:	f000 f8e9 	bl	8008e94 <_vfiprintf_r>
 8008cc2:	b002      	add	sp, #8
 8008cc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008cc8:	b003      	add	sp, #12
 8008cca:	4770      	bx	lr
 8008ccc:	20000094 	.word	0x20000094

08008cd0 <_fwalk_reent>:
 8008cd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cd4:	4606      	mov	r6, r0
 8008cd6:	4688      	mov	r8, r1
 8008cd8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008cdc:	2700      	movs	r7, #0
 8008cde:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008ce2:	f1b9 0901 	subs.w	r9, r9, #1
 8008ce6:	d505      	bpl.n	8008cf4 <_fwalk_reent+0x24>
 8008ce8:	6824      	ldr	r4, [r4, #0]
 8008cea:	2c00      	cmp	r4, #0
 8008cec:	d1f7      	bne.n	8008cde <_fwalk_reent+0xe>
 8008cee:	4638      	mov	r0, r7
 8008cf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cf4:	89ab      	ldrh	r3, [r5, #12]
 8008cf6:	2b01      	cmp	r3, #1
 8008cf8:	d907      	bls.n	8008d0a <_fwalk_reent+0x3a>
 8008cfa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008cfe:	3301      	adds	r3, #1
 8008d00:	d003      	beq.n	8008d0a <_fwalk_reent+0x3a>
 8008d02:	4629      	mov	r1, r5
 8008d04:	4630      	mov	r0, r6
 8008d06:	47c0      	blx	r8
 8008d08:	4307      	orrs	r7, r0
 8008d0a:	3568      	adds	r5, #104	; 0x68
 8008d0c:	e7e9      	b.n	8008ce2 <_fwalk_reent+0x12>
	...

08008d10 <__libc_init_array>:
 8008d10:	b570      	push	{r4, r5, r6, lr}
 8008d12:	4d0d      	ldr	r5, [pc, #52]	; (8008d48 <__libc_init_array+0x38>)
 8008d14:	4c0d      	ldr	r4, [pc, #52]	; (8008d4c <__libc_init_array+0x3c>)
 8008d16:	1b64      	subs	r4, r4, r5
 8008d18:	10a4      	asrs	r4, r4, #2
 8008d1a:	2600      	movs	r6, #0
 8008d1c:	42a6      	cmp	r6, r4
 8008d1e:	d109      	bne.n	8008d34 <__libc_init_array+0x24>
 8008d20:	4d0b      	ldr	r5, [pc, #44]	; (8008d50 <__libc_init_array+0x40>)
 8008d22:	4c0c      	ldr	r4, [pc, #48]	; (8008d54 <__libc_init_array+0x44>)
 8008d24:	f000 ff2e 	bl	8009b84 <_init>
 8008d28:	1b64      	subs	r4, r4, r5
 8008d2a:	10a4      	asrs	r4, r4, #2
 8008d2c:	2600      	movs	r6, #0
 8008d2e:	42a6      	cmp	r6, r4
 8008d30:	d105      	bne.n	8008d3e <__libc_init_array+0x2e>
 8008d32:	bd70      	pop	{r4, r5, r6, pc}
 8008d34:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d38:	4798      	blx	r3
 8008d3a:	3601      	adds	r6, #1
 8008d3c:	e7ee      	b.n	8008d1c <__libc_init_array+0xc>
 8008d3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d42:	4798      	blx	r3
 8008d44:	3601      	adds	r6, #1
 8008d46:	e7f2      	b.n	8008d2e <__libc_init_array+0x1e>
 8008d48:	0800a088 	.word	0x0800a088
 8008d4c:	0800a088 	.word	0x0800a088
 8008d50:	0800a088 	.word	0x0800a088
 8008d54:	0800a08c 	.word	0x0800a08c

08008d58 <__retarget_lock_init_recursive>:
 8008d58:	4770      	bx	lr

08008d5a <__retarget_lock_acquire_recursive>:
 8008d5a:	4770      	bx	lr

08008d5c <__retarget_lock_release_recursive>:
 8008d5c:	4770      	bx	lr

08008d5e <memcpy>:
 8008d5e:	440a      	add	r2, r1
 8008d60:	4291      	cmp	r1, r2
 8008d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d66:	d100      	bne.n	8008d6a <memcpy+0xc>
 8008d68:	4770      	bx	lr
 8008d6a:	b510      	push	{r4, lr}
 8008d6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d70:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d74:	4291      	cmp	r1, r2
 8008d76:	d1f9      	bne.n	8008d6c <memcpy+0xe>
 8008d78:	bd10      	pop	{r4, pc}

08008d7a <memset>:
 8008d7a:	4402      	add	r2, r0
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d100      	bne.n	8008d84 <memset+0xa>
 8008d82:	4770      	bx	lr
 8008d84:	f803 1b01 	strb.w	r1, [r3], #1
 8008d88:	e7f9      	b.n	8008d7e <memset+0x4>
	...

08008d8c <_malloc_r>:
 8008d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d8e:	1ccd      	adds	r5, r1, #3
 8008d90:	f025 0503 	bic.w	r5, r5, #3
 8008d94:	3508      	adds	r5, #8
 8008d96:	2d0c      	cmp	r5, #12
 8008d98:	bf38      	it	cc
 8008d9a:	250c      	movcc	r5, #12
 8008d9c:	2d00      	cmp	r5, #0
 8008d9e:	4606      	mov	r6, r0
 8008da0:	db01      	blt.n	8008da6 <_malloc_r+0x1a>
 8008da2:	42a9      	cmp	r1, r5
 8008da4:	d903      	bls.n	8008dae <_malloc_r+0x22>
 8008da6:	230c      	movs	r3, #12
 8008da8:	6033      	str	r3, [r6, #0]
 8008daa:	2000      	movs	r0, #0
 8008dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dae:	f000 fe15 	bl	80099dc <__malloc_lock>
 8008db2:	4921      	ldr	r1, [pc, #132]	; (8008e38 <_malloc_r+0xac>)
 8008db4:	680a      	ldr	r2, [r1, #0]
 8008db6:	4614      	mov	r4, r2
 8008db8:	b99c      	cbnz	r4, 8008de2 <_malloc_r+0x56>
 8008dba:	4f20      	ldr	r7, [pc, #128]	; (8008e3c <_malloc_r+0xb0>)
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	b923      	cbnz	r3, 8008dca <_malloc_r+0x3e>
 8008dc0:	4621      	mov	r1, r4
 8008dc2:	4630      	mov	r0, r6
 8008dc4:	f000 fb94 	bl	80094f0 <_sbrk_r>
 8008dc8:	6038      	str	r0, [r7, #0]
 8008dca:	4629      	mov	r1, r5
 8008dcc:	4630      	mov	r0, r6
 8008dce:	f000 fb8f 	bl	80094f0 <_sbrk_r>
 8008dd2:	1c43      	adds	r3, r0, #1
 8008dd4:	d123      	bne.n	8008e1e <_malloc_r+0x92>
 8008dd6:	230c      	movs	r3, #12
 8008dd8:	6033      	str	r3, [r6, #0]
 8008dda:	4630      	mov	r0, r6
 8008ddc:	f000 fe04 	bl	80099e8 <__malloc_unlock>
 8008de0:	e7e3      	b.n	8008daa <_malloc_r+0x1e>
 8008de2:	6823      	ldr	r3, [r4, #0]
 8008de4:	1b5b      	subs	r3, r3, r5
 8008de6:	d417      	bmi.n	8008e18 <_malloc_r+0x8c>
 8008de8:	2b0b      	cmp	r3, #11
 8008dea:	d903      	bls.n	8008df4 <_malloc_r+0x68>
 8008dec:	6023      	str	r3, [r4, #0]
 8008dee:	441c      	add	r4, r3
 8008df0:	6025      	str	r5, [r4, #0]
 8008df2:	e004      	b.n	8008dfe <_malloc_r+0x72>
 8008df4:	6863      	ldr	r3, [r4, #4]
 8008df6:	42a2      	cmp	r2, r4
 8008df8:	bf0c      	ite	eq
 8008dfa:	600b      	streq	r3, [r1, #0]
 8008dfc:	6053      	strne	r3, [r2, #4]
 8008dfe:	4630      	mov	r0, r6
 8008e00:	f000 fdf2 	bl	80099e8 <__malloc_unlock>
 8008e04:	f104 000b 	add.w	r0, r4, #11
 8008e08:	1d23      	adds	r3, r4, #4
 8008e0a:	f020 0007 	bic.w	r0, r0, #7
 8008e0e:	1ac2      	subs	r2, r0, r3
 8008e10:	d0cc      	beq.n	8008dac <_malloc_r+0x20>
 8008e12:	1a1b      	subs	r3, r3, r0
 8008e14:	50a3      	str	r3, [r4, r2]
 8008e16:	e7c9      	b.n	8008dac <_malloc_r+0x20>
 8008e18:	4622      	mov	r2, r4
 8008e1a:	6864      	ldr	r4, [r4, #4]
 8008e1c:	e7cc      	b.n	8008db8 <_malloc_r+0x2c>
 8008e1e:	1cc4      	adds	r4, r0, #3
 8008e20:	f024 0403 	bic.w	r4, r4, #3
 8008e24:	42a0      	cmp	r0, r4
 8008e26:	d0e3      	beq.n	8008df0 <_malloc_r+0x64>
 8008e28:	1a21      	subs	r1, r4, r0
 8008e2a:	4630      	mov	r0, r6
 8008e2c:	f000 fb60 	bl	80094f0 <_sbrk_r>
 8008e30:	3001      	adds	r0, #1
 8008e32:	d1dd      	bne.n	8008df0 <_malloc_r+0x64>
 8008e34:	e7cf      	b.n	8008dd6 <_malloc_r+0x4a>
 8008e36:	bf00      	nop
 8008e38:	20004b48 	.word	0x20004b48
 8008e3c:	20004b4c 	.word	0x20004b4c

08008e40 <__sfputc_r>:
 8008e40:	6893      	ldr	r3, [r2, #8]
 8008e42:	3b01      	subs	r3, #1
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	b410      	push	{r4}
 8008e48:	6093      	str	r3, [r2, #8]
 8008e4a:	da08      	bge.n	8008e5e <__sfputc_r+0x1e>
 8008e4c:	6994      	ldr	r4, [r2, #24]
 8008e4e:	42a3      	cmp	r3, r4
 8008e50:	db01      	blt.n	8008e56 <__sfputc_r+0x16>
 8008e52:	290a      	cmp	r1, #10
 8008e54:	d103      	bne.n	8008e5e <__sfputc_r+0x1e>
 8008e56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e5a:	f000 bb9d 	b.w	8009598 <__swbuf_r>
 8008e5e:	6813      	ldr	r3, [r2, #0]
 8008e60:	1c58      	adds	r0, r3, #1
 8008e62:	6010      	str	r0, [r2, #0]
 8008e64:	7019      	strb	r1, [r3, #0]
 8008e66:	4608      	mov	r0, r1
 8008e68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e6c:	4770      	bx	lr

08008e6e <__sfputs_r>:
 8008e6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e70:	4606      	mov	r6, r0
 8008e72:	460f      	mov	r7, r1
 8008e74:	4614      	mov	r4, r2
 8008e76:	18d5      	adds	r5, r2, r3
 8008e78:	42ac      	cmp	r4, r5
 8008e7a:	d101      	bne.n	8008e80 <__sfputs_r+0x12>
 8008e7c:	2000      	movs	r0, #0
 8008e7e:	e007      	b.n	8008e90 <__sfputs_r+0x22>
 8008e80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e84:	463a      	mov	r2, r7
 8008e86:	4630      	mov	r0, r6
 8008e88:	f7ff ffda 	bl	8008e40 <__sfputc_r>
 8008e8c:	1c43      	adds	r3, r0, #1
 8008e8e:	d1f3      	bne.n	8008e78 <__sfputs_r+0xa>
 8008e90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008e94 <_vfiprintf_r>:
 8008e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e98:	460d      	mov	r5, r1
 8008e9a:	b09d      	sub	sp, #116	; 0x74
 8008e9c:	4614      	mov	r4, r2
 8008e9e:	4698      	mov	r8, r3
 8008ea0:	4606      	mov	r6, r0
 8008ea2:	b118      	cbz	r0, 8008eac <_vfiprintf_r+0x18>
 8008ea4:	6983      	ldr	r3, [r0, #24]
 8008ea6:	b90b      	cbnz	r3, 8008eac <_vfiprintf_r+0x18>
 8008ea8:	f7ff fe82 	bl	8008bb0 <__sinit>
 8008eac:	4b89      	ldr	r3, [pc, #548]	; (80090d4 <_vfiprintf_r+0x240>)
 8008eae:	429d      	cmp	r5, r3
 8008eb0:	d11b      	bne.n	8008eea <_vfiprintf_r+0x56>
 8008eb2:	6875      	ldr	r5, [r6, #4]
 8008eb4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008eb6:	07d9      	lsls	r1, r3, #31
 8008eb8:	d405      	bmi.n	8008ec6 <_vfiprintf_r+0x32>
 8008eba:	89ab      	ldrh	r3, [r5, #12]
 8008ebc:	059a      	lsls	r2, r3, #22
 8008ebe:	d402      	bmi.n	8008ec6 <_vfiprintf_r+0x32>
 8008ec0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ec2:	f7ff ff4a 	bl	8008d5a <__retarget_lock_acquire_recursive>
 8008ec6:	89ab      	ldrh	r3, [r5, #12]
 8008ec8:	071b      	lsls	r3, r3, #28
 8008eca:	d501      	bpl.n	8008ed0 <_vfiprintf_r+0x3c>
 8008ecc:	692b      	ldr	r3, [r5, #16]
 8008ece:	b9eb      	cbnz	r3, 8008f0c <_vfiprintf_r+0x78>
 8008ed0:	4629      	mov	r1, r5
 8008ed2:	4630      	mov	r0, r6
 8008ed4:	f000 fbc4 	bl	8009660 <__swsetup_r>
 8008ed8:	b1c0      	cbz	r0, 8008f0c <_vfiprintf_r+0x78>
 8008eda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008edc:	07dc      	lsls	r4, r3, #31
 8008ede:	d50e      	bpl.n	8008efe <_vfiprintf_r+0x6a>
 8008ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ee4:	b01d      	add	sp, #116	; 0x74
 8008ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eea:	4b7b      	ldr	r3, [pc, #492]	; (80090d8 <_vfiprintf_r+0x244>)
 8008eec:	429d      	cmp	r5, r3
 8008eee:	d101      	bne.n	8008ef4 <_vfiprintf_r+0x60>
 8008ef0:	68b5      	ldr	r5, [r6, #8]
 8008ef2:	e7df      	b.n	8008eb4 <_vfiprintf_r+0x20>
 8008ef4:	4b79      	ldr	r3, [pc, #484]	; (80090dc <_vfiprintf_r+0x248>)
 8008ef6:	429d      	cmp	r5, r3
 8008ef8:	bf08      	it	eq
 8008efa:	68f5      	ldreq	r5, [r6, #12]
 8008efc:	e7da      	b.n	8008eb4 <_vfiprintf_r+0x20>
 8008efe:	89ab      	ldrh	r3, [r5, #12]
 8008f00:	0598      	lsls	r0, r3, #22
 8008f02:	d4ed      	bmi.n	8008ee0 <_vfiprintf_r+0x4c>
 8008f04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f06:	f7ff ff29 	bl	8008d5c <__retarget_lock_release_recursive>
 8008f0a:	e7e9      	b.n	8008ee0 <_vfiprintf_r+0x4c>
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	9309      	str	r3, [sp, #36]	; 0x24
 8008f10:	2320      	movs	r3, #32
 8008f12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f16:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f1a:	2330      	movs	r3, #48	; 0x30
 8008f1c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80090e0 <_vfiprintf_r+0x24c>
 8008f20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f24:	f04f 0901 	mov.w	r9, #1
 8008f28:	4623      	mov	r3, r4
 8008f2a:	469a      	mov	sl, r3
 8008f2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f30:	b10a      	cbz	r2, 8008f36 <_vfiprintf_r+0xa2>
 8008f32:	2a25      	cmp	r2, #37	; 0x25
 8008f34:	d1f9      	bne.n	8008f2a <_vfiprintf_r+0x96>
 8008f36:	ebba 0b04 	subs.w	fp, sl, r4
 8008f3a:	d00b      	beq.n	8008f54 <_vfiprintf_r+0xc0>
 8008f3c:	465b      	mov	r3, fp
 8008f3e:	4622      	mov	r2, r4
 8008f40:	4629      	mov	r1, r5
 8008f42:	4630      	mov	r0, r6
 8008f44:	f7ff ff93 	bl	8008e6e <__sfputs_r>
 8008f48:	3001      	adds	r0, #1
 8008f4a:	f000 80aa 	beq.w	80090a2 <_vfiprintf_r+0x20e>
 8008f4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f50:	445a      	add	r2, fp
 8008f52:	9209      	str	r2, [sp, #36]	; 0x24
 8008f54:	f89a 3000 	ldrb.w	r3, [sl]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	f000 80a2 	beq.w	80090a2 <_vfiprintf_r+0x20e>
 8008f5e:	2300      	movs	r3, #0
 8008f60:	f04f 32ff 	mov.w	r2, #4294967295
 8008f64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f68:	f10a 0a01 	add.w	sl, sl, #1
 8008f6c:	9304      	str	r3, [sp, #16]
 8008f6e:	9307      	str	r3, [sp, #28]
 8008f70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f74:	931a      	str	r3, [sp, #104]	; 0x68
 8008f76:	4654      	mov	r4, sl
 8008f78:	2205      	movs	r2, #5
 8008f7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f7e:	4858      	ldr	r0, [pc, #352]	; (80090e0 <_vfiprintf_r+0x24c>)
 8008f80:	f7f7 f95e 	bl	8000240 <memchr>
 8008f84:	9a04      	ldr	r2, [sp, #16]
 8008f86:	b9d8      	cbnz	r0, 8008fc0 <_vfiprintf_r+0x12c>
 8008f88:	06d1      	lsls	r1, r2, #27
 8008f8a:	bf44      	itt	mi
 8008f8c:	2320      	movmi	r3, #32
 8008f8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f92:	0713      	lsls	r3, r2, #28
 8008f94:	bf44      	itt	mi
 8008f96:	232b      	movmi	r3, #43	; 0x2b
 8008f98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f9c:	f89a 3000 	ldrb.w	r3, [sl]
 8008fa0:	2b2a      	cmp	r3, #42	; 0x2a
 8008fa2:	d015      	beq.n	8008fd0 <_vfiprintf_r+0x13c>
 8008fa4:	9a07      	ldr	r2, [sp, #28]
 8008fa6:	4654      	mov	r4, sl
 8008fa8:	2000      	movs	r0, #0
 8008faa:	f04f 0c0a 	mov.w	ip, #10
 8008fae:	4621      	mov	r1, r4
 8008fb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fb4:	3b30      	subs	r3, #48	; 0x30
 8008fb6:	2b09      	cmp	r3, #9
 8008fb8:	d94e      	bls.n	8009058 <_vfiprintf_r+0x1c4>
 8008fba:	b1b0      	cbz	r0, 8008fea <_vfiprintf_r+0x156>
 8008fbc:	9207      	str	r2, [sp, #28]
 8008fbe:	e014      	b.n	8008fea <_vfiprintf_r+0x156>
 8008fc0:	eba0 0308 	sub.w	r3, r0, r8
 8008fc4:	fa09 f303 	lsl.w	r3, r9, r3
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	9304      	str	r3, [sp, #16]
 8008fcc:	46a2      	mov	sl, r4
 8008fce:	e7d2      	b.n	8008f76 <_vfiprintf_r+0xe2>
 8008fd0:	9b03      	ldr	r3, [sp, #12]
 8008fd2:	1d19      	adds	r1, r3, #4
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	9103      	str	r1, [sp, #12]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	bfbb      	ittet	lt
 8008fdc:	425b      	neglt	r3, r3
 8008fde:	f042 0202 	orrlt.w	r2, r2, #2
 8008fe2:	9307      	strge	r3, [sp, #28]
 8008fe4:	9307      	strlt	r3, [sp, #28]
 8008fe6:	bfb8      	it	lt
 8008fe8:	9204      	strlt	r2, [sp, #16]
 8008fea:	7823      	ldrb	r3, [r4, #0]
 8008fec:	2b2e      	cmp	r3, #46	; 0x2e
 8008fee:	d10c      	bne.n	800900a <_vfiprintf_r+0x176>
 8008ff0:	7863      	ldrb	r3, [r4, #1]
 8008ff2:	2b2a      	cmp	r3, #42	; 0x2a
 8008ff4:	d135      	bne.n	8009062 <_vfiprintf_r+0x1ce>
 8008ff6:	9b03      	ldr	r3, [sp, #12]
 8008ff8:	1d1a      	adds	r2, r3, #4
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	9203      	str	r2, [sp, #12]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	bfb8      	it	lt
 8009002:	f04f 33ff 	movlt.w	r3, #4294967295
 8009006:	3402      	adds	r4, #2
 8009008:	9305      	str	r3, [sp, #20]
 800900a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80090f0 <_vfiprintf_r+0x25c>
 800900e:	7821      	ldrb	r1, [r4, #0]
 8009010:	2203      	movs	r2, #3
 8009012:	4650      	mov	r0, sl
 8009014:	f7f7 f914 	bl	8000240 <memchr>
 8009018:	b140      	cbz	r0, 800902c <_vfiprintf_r+0x198>
 800901a:	2340      	movs	r3, #64	; 0x40
 800901c:	eba0 000a 	sub.w	r0, r0, sl
 8009020:	fa03 f000 	lsl.w	r0, r3, r0
 8009024:	9b04      	ldr	r3, [sp, #16]
 8009026:	4303      	orrs	r3, r0
 8009028:	3401      	adds	r4, #1
 800902a:	9304      	str	r3, [sp, #16]
 800902c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009030:	482c      	ldr	r0, [pc, #176]	; (80090e4 <_vfiprintf_r+0x250>)
 8009032:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009036:	2206      	movs	r2, #6
 8009038:	f7f7 f902 	bl	8000240 <memchr>
 800903c:	2800      	cmp	r0, #0
 800903e:	d03f      	beq.n	80090c0 <_vfiprintf_r+0x22c>
 8009040:	4b29      	ldr	r3, [pc, #164]	; (80090e8 <_vfiprintf_r+0x254>)
 8009042:	bb1b      	cbnz	r3, 800908c <_vfiprintf_r+0x1f8>
 8009044:	9b03      	ldr	r3, [sp, #12]
 8009046:	3307      	adds	r3, #7
 8009048:	f023 0307 	bic.w	r3, r3, #7
 800904c:	3308      	adds	r3, #8
 800904e:	9303      	str	r3, [sp, #12]
 8009050:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009052:	443b      	add	r3, r7
 8009054:	9309      	str	r3, [sp, #36]	; 0x24
 8009056:	e767      	b.n	8008f28 <_vfiprintf_r+0x94>
 8009058:	fb0c 3202 	mla	r2, ip, r2, r3
 800905c:	460c      	mov	r4, r1
 800905e:	2001      	movs	r0, #1
 8009060:	e7a5      	b.n	8008fae <_vfiprintf_r+0x11a>
 8009062:	2300      	movs	r3, #0
 8009064:	3401      	adds	r4, #1
 8009066:	9305      	str	r3, [sp, #20]
 8009068:	4619      	mov	r1, r3
 800906a:	f04f 0c0a 	mov.w	ip, #10
 800906e:	4620      	mov	r0, r4
 8009070:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009074:	3a30      	subs	r2, #48	; 0x30
 8009076:	2a09      	cmp	r2, #9
 8009078:	d903      	bls.n	8009082 <_vfiprintf_r+0x1ee>
 800907a:	2b00      	cmp	r3, #0
 800907c:	d0c5      	beq.n	800900a <_vfiprintf_r+0x176>
 800907e:	9105      	str	r1, [sp, #20]
 8009080:	e7c3      	b.n	800900a <_vfiprintf_r+0x176>
 8009082:	fb0c 2101 	mla	r1, ip, r1, r2
 8009086:	4604      	mov	r4, r0
 8009088:	2301      	movs	r3, #1
 800908a:	e7f0      	b.n	800906e <_vfiprintf_r+0x1da>
 800908c:	ab03      	add	r3, sp, #12
 800908e:	9300      	str	r3, [sp, #0]
 8009090:	462a      	mov	r2, r5
 8009092:	4b16      	ldr	r3, [pc, #88]	; (80090ec <_vfiprintf_r+0x258>)
 8009094:	a904      	add	r1, sp, #16
 8009096:	4630      	mov	r0, r6
 8009098:	f3af 8000 	nop.w
 800909c:	4607      	mov	r7, r0
 800909e:	1c78      	adds	r0, r7, #1
 80090a0:	d1d6      	bne.n	8009050 <_vfiprintf_r+0x1bc>
 80090a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090a4:	07d9      	lsls	r1, r3, #31
 80090a6:	d405      	bmi.n	80090b4 <_vfiprintf_r+0x220>
 80090a8:	89ab      	ldrh	r3, [r5, #12]
 80090aa:	059a      	lsls	r2, r3, #22
 80090ac:	d402      	bmi.n	80090b4 <_vfiprintf_r+0x220>
 80090ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090b0:	f7ff fe54 	bl	8008d5c <__retarget_lock_release_recursive>
 80090b4:	89ab      	ldrh	r3, [r5, #12]
 80090b6:	065b      	lsls	r3, r3, #25
 80090b8:	f53f af12 	bmi.w	8008ee0 <_vfiprintf_r+0x4c>
 80090bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090be:	e711      	b.n	8008ee4 <_vfiprintf_r+0x50>
 80090c0:	ab03      	add	r3, sp, #12
 80090c2:	9300      	str	r3, [sp, #0]
 80090c4:	462a      	mov	r2, r5
 80090c6:	4b09      	ldr	r3, [pc, #36]	; (80090ec <_vfiprintf_r+0x258>)
 80090c8:	a904      	add	r1, sp, #16
 80090ca:	4630      	mov	r0, r6
 80090cc:	f000 f880 	bl	80091d0 <_printf_i>
 80090d0:	e7e4      	b.n	800909c <_vfiprintf_r+0x208>
 80090d2:	bf00      	nop
 80090d4:	0800a008 	.word	0x0800a008
 80090d8:	0800a028 	.word	0x0800a028
 80090dc:	08009fe8 	.word	0x08009fe8
 80090e0:	0800a04c 	.word	0x0800a04c
 80090e4:	0800a056 	.word	0x0800a056
 80090e8:	00000000 	.word	0x00000000
 80090ec:	08008e6f 	.word	0x08008e6f
 80090f0:	0800a052 	.word	0x0800a052

080090f4 <_printf_common>:
 80090f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090f8:	4616      	mov	r6, r2
 80090fa:	4699      	mov	r9, r3
 80090fc:	688a      	ldr	r2, [r1, #8]
 80090fe:	690b      	ldr	r3, [r1, #16]
 8009100:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009104:	4293      	cmp	r3, r2
 8009106:	bfb8      	it	lt
 8009108:	4613      	movlt	r3, r2
 800910a:	6033      	str	r3, [r6, #0]
 800910c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009110:	4607      	mov	r7, r0
 8009112:	460c      	mov	r4, r1
 8009114:	b10a      	cbz	r2, 800911a <_printf_common+0x26>
 8009116:	3301      	adds	r3, #1
 8009118:	6033      	str	r3, [r6, #0]
 800911a:	6823      	ldr	r3, [r4, #0]
 800911c:	0699      	lsls	r1, r3, #26
 800911e:	bf42      	ittt	mi
 8009120:	6833      	ldrmi	r3, [r6, #0]
 8009122:	3302      	addmi	r3, #2
 8009124:	6033      	strmi	r3, [r6, #0]
 8009126:	6825      	ldr	r5, [r4, #0]
 8009128:	f015 0506 	ands.w	r5, r5, #6
 800912c:	d106      	bne.n	800913c <_printf_common+0x48>
 800912e:	f104 0a19 	add.w	sl, r4, #25
 8009132:	68e3      	ldr	r3, [r4, #12]
 8009134:	6832      	ldr	r2, [r6, #0]
 8009136:	1a9b      	subs	r3, r3, r2
 8009138:	42ab      	cmp	r3, r5
 800913a:	dc26      	bgt.n	800918a <_printf_common+0x96>
 800913c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009140:	1e13      	subs	r3, r2, #0
 8009142:	6822      	ldr	r2, [r4, #0]
 8009144:	bf18      	it	ne
 8009146:	2301      	movne	r3, #1
 8009148:	0692      	lsls	r2, r2, #26
 800914a:	d42b      	bmi.n	80091a4 <_printf_common+0xb0>
 800914c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009150:	4649      	mov	r1, r9
 8009152:	4638      	mov	r0, r7
 8009154:	47c0      	blx	r8
 8009156:	3001      	adds	r0, #1
 8009158:	d01e      	beq.n	8009198 <_printf_common+0xa4>
 800915a:	6823      	ldr	r3, [r4, #0]
 800915c:	68e5      	ldr	r5, [r4, #12]
 800915e:	6832      	ldr	r2, [r6, #0]
 8009160:	f003 0306 	and.w	r3, r3, #6
 8009164:	2b04      	cmp	r3, #4
 8009166:	bf08      	it	eq
 8009168:	1aad      	subeq	r5, r5, r2
 800916a:	68a3      	ldr	r3, [r4, #8]
 800916c:	6922      	ldr	r2, [r4, #16]
 800916e:	bf0c      	ite	eq
 8009170:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009174:	2500      	movne	r5, #0
 8009176:	4293      	cmp	r3, r2
 8009178:	bfc4      	itt	gt
 800917a:	1a9b      	subgt	r3, r3, r2
 800917c:	18ed      	addgt	r5, r5, r3
 800917e:	2600      	movs	r6, #0
 8009180:	341a      	adds	r4, #26
 8009182:	42b5      	cmp	r5, r6
 8009184:	d11a      	bne.n	80091bc <_printf_common+0xc8>
 8009186:	2000      	movs	r0, #0
 8009188:	e008      	b.n	800919c <_printf_common+0xa8>
 800918a:	2301      	movs	r3, #1
 800918c:	4652      	mov	r2, sl
 800918e:	4649      	mov	r1, r9
 8009190:	4638      	mov	r0, r7
 8009192:	47c0      	blx	r8
 8009194:	3001      	adds	r0, #1
 8009196:	d103      	bne.n	80091a0 <_printf_common+0xac>
 8009198:	f04f 30ff 	mov.w	r0, #4294967295
 800919c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091a0:	3501      	adds	r5, #1
 80091a2:	e7c6      	b.n	8009132 <_printf_common+0x3e>
 80091a4:	18e1      	adds	r1, r4, r3
 80091a6:	1c5a      	adds	r2, r3, #1
 80091a8:	2030      	movs	r0, #48	; 0x30
 80091aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80091ae:	4422      	add	r2, r4
 80091b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80091b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80091b8:	3302      	adds	r3, #2
 80091ba:	e7c7      	b.n	800914c <_printf_common+0x58>
 80091bc:	2301      	movs	r3, #1
 80091be:	4622      	mov	r2, r4
 80091c0:	4649      	mov	r1, r9
 80091c2:	4638      	mov	r0, r7
 80091c4:	47c0      	blx	r8
 80091c6:	3001      	adds	r0, #1
 80091c8:	d0e6      	beq.n	8009198 <_printf_common+0xa4>
 80091ca:	3601      	adds	r6, #1
 80091cc:	e7d9      	b.n	8009182 <_printf_common+0x8e>
	...

080091d0 <_printf_i>:
 80091d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80091d4:	460c      	mov	r4, r1
 80091d6:	4691      	mov	r9, r2
 80091d8:	7e27      	ldrb	r7, [r4, #24]
 80091da:	990c      	ldr	r1, [sp, #48]	; 0x30
 80091dc:	2f78      	cmp	r7, #120	; 0x78
 80091de:	4680      	mov	r8, r0
 80091e0:	469a      	mov	sl, r3
 80091e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80091e6:	d807      	bhi.n	80091f8 <_printf_i+0x28>
 80091e8:	2f62      	cmp	r7, #98	; 0x62
 80091ea:	d80a      	bhi.n	8009202 <_printf_i+0x32>
 80091ec:	2f00      	cmp	r7, #0
 80091ee:	f000 80d8 	beq.w	80093a2 <_printf_i+0x1d2>
 80091f2:	2f58      	cmp	r7, #88	; 0x58
 80091f4:	f000 80a3 	beq.w	800933e <_printf_i+0x16e>
 80091f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80091fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009200:	e03a      	b.n	8009278 <_printf_i+0xa8>
 8009202:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009206:	2b15      	cmp	r3, #21
 8009208:	d8f6      	bhi.n	80091f8 <_printf_i+0x28>
 800920a:	a001      	add	r0, pc, #4	; (adr r0, 8009210 <_printf_i+0x40>)
 800920c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009210:	08009269 	.word	0x08009269
 8009214:	0800927d 	.word	0x0800927d
 8009218:	080091f9 	.word	0x080091f9
 800921c:	080091f9 	.word	0x080091f9
 8009220:	080091f9 	.word	0x080091f9
 8009224:	080091f9 	.word	0x080091f9
 8009228:	0800927d 	.word	0x0800927d
 800922c:	080091f9 	.word	0x080091f9
 8009230:	080091f9 	.word	0x080091f9
 8009234:	080091f9 	.word	0x080091f9
 8009238:	080091f9 	.word	0x080091f9
 800923c:	08009389 	.word	0x08009389
 8009240:	080092ad 	.word	0x080092ad
 8009244:	0800936b 	.word	0x0800936b
 8009248:	080091f9 	.word	0x080091f9
 800924c:	080091f9 	.word	0x080091f9
 8009250:	080093ab 	.word	0x080093ab
 8009254:	080091f9 	.word	0x080091f9
 8009258:	080092ad 	.word	0x080092ad
 800925c:	080091f9 	.word	0x080091f9
 8009260:	080091f9 	.word	0x080091f9
 8009264:	08009373 	.word	0x08009373
 8009268:	680b      	ldr	r3, [r1, #0]
 800926a:	1d1a      	adds	r2, r3, #4
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	600a      	str	r2, [r1, #0]
 8009270:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009274:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009278:	2301      	movs	r3, #1
 800927a:	e0a3      	b.n	80093c4 <_printf_i+0x1f4>
 800927c:	6825      	ldr	r5, [r4, #0]
 800927e:	6808      	ldr	r0, [r1, #0]
 8009280:	062e      	lsls	r6, r5, #24
 8009282:	f100 0304 	add.w	r3, r0, #4
 8009286:	d50a      	bpl.n	800929e <_printf_i+0xce>
 8009288:	6805      	ldr	r5, [r0, #0]
 800928a:	600b      	str	r3, [r1, #0]
 800928c:	2d00      	cmp	r5, #0
 800928e:	da03      	bge.n	8009298 <_printf_i+0xc8>
 8009290:	232d      	movs	r3, #45	; 0x2d
 8009292:	426d      	negs	r5, r5
 8009294:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009298:	485e      	ldr	r0, [pc, #376]	; (8009414 <_printf_i+0x244>)
 800929a:	230a      	movs	r3, #10
 800929c:	e019      	b.n	80092d2 <_printf_i+0x102>
 800929e:	f015 0f40 	tst.w	r5, #64	; 0x40
 80092a2:	6805      	ldr	r5, [r0, #0]
 80092a4:	600b      	str	r3, [r1, #0]
 80092a6:	bf18      	it	ne
 80092a8:	b22d      	sxthne	r5, r5
 80092aa:	e7ef      	b.n	800928c <_printf_i+0xbc>
 80092ac:	680b      	ldr	r3, [r1, #0]
 80092ae:	6825      	ldr	r5, [r4, #0]
 80092b0:	1d18      	adds	r0, r3, #4
 80092b2:	6008      	str	r0, [r1, #0]
 80092b4:	0628      	lsls	r0, r5, #24
 80092b6:	d501      	bpl.n	80092bc <_printf_i+0xec>
 80092b8:	681d      	ldr	r5, [r3, #0]
 80092ba:	e002      	b.n	80092c2 <_printf_i+0xf2>
 80092bc:	0669      	lsls	r1, r5, #25
 80092be:	d5fb      	bpl.n	80092b8 <_printf_i+0xe8>
 80092c0:	881d      	ldrh	r5, [r3, #0]
 80092c2:	4854      	ldr	r0, [pc, #336]	; (8009414 <_printf_i+0x244>)
 80092c4:	2f6f      	cmp	r7, #111	; 0x6f
 80092c6:	bf0c      	ite	eq
 80092c8:	2308      	moveq	r3, #8
 80092ca:	230a      	movne	r3, #10
 80092cc:	2100      	movs	r1, #0
 80092ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80092d2:	6866      	ldr	r6, [r4, #4]
 80092d4:	60a6      	str	r6, [r4, #8]
 80092d6:	2e00      	cmp	r6, #0
 80092d8:	bfa2      	ittt	ge
 80092da:	6821      	ldrge	r1, [r4, #0]
 80092dc:	f021 0104 	bicge.w	r1, r1, #4
 80092e0:	6021      	strge	r1, [r4, #0]
 80092e2:	b90d      	cbnz	r5, 80092e8 <_printf_i+0x118>
 80092e4:	2e00      	cmp	r6, #0
 80092e6:	d04d      	beq.n	8009384 <_printf_i+0x1b4>
 80092e8:	4616      	mov	r6, r2
 80092ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80092ee:	fb03 5711 	mls	r7, r3, r1, r5
 80092f2:	5dc7      	ldrb	r7, [r0, r7]
 80092f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80092f8:	462f      	mov	r7, r5
 80092fa:	42bb      	cmp	r3, r7
 80092fc:	460d      	mov	r5, r1
 80092fe:	d9f4      	bls.n	80092ea <_printf_i+0x11a>
 8009300:	2b08      	cmp	r3, #8
 8009302:	d10b      	bne.n	800931c <_printf_i+0x14c>
 8009304:	6823      	ldr	r3, [r4, #0]
 8009306:	07df      	lsls	r7, r3, #31
 8009308:	d508      	bpl.n	800931c <_printf_i+0x14c>
 800930a:	6923      	ldr	r3, [r4, #16]
 800930c:	6861      	ldr	r1, [r4, #4]
 800930e:	4299      	cmp	r1, r3
 8009310:	bfde      	ittt	le
 8009312:	2330      	movle	r3, #48	; 0x30
 8009314:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009318:	f106 36ff 	addle.w	r6, r6, #4294967295
 800931c:	1b92      	subs	r2, r2, r6
 800931e:	6122      	str	r2, [r4, #16]
 8009320:	f8cd a000 	str.w	sl, [sp]
 8009324:	464b      	mov	r3, r9
 8009326:	aa03      	add	r2, sp, #12
 8009328:	4621      	mov	r1, r4
 800932a:	4640      	mov	r0, r8
 800932c:	f7ff fee2 	bl	80090f4 <_printf_common>
 8009330:	3001      	adds	r0, #1
 8009332:	d14c      	bne.n	80093ce <_printf_i+0x1fe>
 8009334:	f04f 30ff 	mov.w	r0, #4294967295
 8009338:	b004      	add	sp, #16
 800933a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800933e:	4835      	ldr	r0, [pc, #212]	; (8009414 <_printf_i+0x244>)
 8009340:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009344:	6823      	ldr	r3, [r4, #0]
 8009346:	680e      	ldr	r6, [r1, #0]
 8009348:	061f      	lsls	r7, r3, #24
 800934a:	f856 5b04 	ldr.w	r5, [r6], #4
 800934e:	600e      	str	r6, [r1, #0]
 8009350:	d514      	bpl.n	800937c <_printf_i+0x1ac>
 8009352:	07d9      	lsls	r1, r3, #31
 8009354:	bf44      	itt	mi
 8009356:	f043 0320 	orrmi.w	r3, r3, #32
 800935a:	6023      	strmi	r3, [r4, #0]
 800935c:	b91d      	cbnz	r5, 8009366 <_printf_i+0x196>
 800935e:	6823      	ldr	r3, [r4, #0]
 8009360:	f023 0320 	bic.w	r3, r3, #32
 8009364:	6023      	str	r3, [r4, #0]
 8009366:	2310      	movs	r3, #16
 8009368:	e7b0      	b.n	80092cc <_printf_i+0xfc>
 800936a:	6823      	ldr	r3, [r4, #0]
 800936c:	f043 0320 	orr.w	r3, r3, #32
 8009370:	6023      	str	r3, [r4, #0]
 8009372:	2378      	movs	r3, #120	; 0x78
 8009374:	4828      	ldr	r0, [pc, #160]	; (8009418 <_printf_i+0x248>)
 8009376:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800937a:	e7e3      	b.n	8009344 <_printf_i+0x174>
 800937c:	065e      	lsls	r6, r3, #25
 800937e:	bf48      	it	mi
 8009380:	b2ad      	uxthmi	r5, r5
 8009382:	e7e6      	b.n	8009352 <_printf_i+0x182>
 8009384:	4616      	mov	r6, r2
 8009386:	e7bb      	b.n	8009300 <_printf_i+0x130>
 8009388:	680b      	ldr	r3, [r1, #0]
 800938a:	6826      	ldr	r6, [r4, #0]
 800938c:	6960      	ldr	r0, [r4, #20]
 800938e:	1d1d      	adds	r5, r3, #4
 8009390:	600d      	str	r5, [r1, #0]
 8009392:	0635      	lsls	r5, r6, #24
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	d501      	bpl.n	800939c <_printf_i+0x1cc>
 8009398:	6018      	str	r0, [r3, #0]
 800939a:	e002      	b.n	80093a2 <_printf_i+0x1d2>
 800939c:	0671      	lsls	r1, r6, #25
 800939e:	d5fb      	bpl.n	8009398 <_printf_i+0x1c8>
 80093a0:	8018      	strh	r0, [r3, #0]
 80093a2:	2300      	movs	r3, #0
 80093a4:	6123      	str	r3, [r4, #16]
 80093a6:	4616      	mov	r6, r2
 80093a8:	e7ba      	b.n	8009320 <_printf_i+0x150>
 80093aa:	680b      	ldr	r3, [r1, #0]
 80093ac:	1d1a      	adds	r2, r3, #4
 80093ae:	600a      	str	r2, [r1, #0]
 80093b0:	681e      	ldr	r6, [r3, #0]
 80093b2:	6862      	ldr	r2, [r4, #4]
 80093b4:	2100      	movs	r1, #0
 80093b6:	4630      	mov	r0, r6
 80093b8:	f7f6 ff42 	bl	8000240 <memchr>
 80093bc:	b108      	cbz	r0, 80093c2 <_printf_i+0x1f2>
 80093be:	1b80      	subs	r0, r0, r6
 80093c0:	6060      	str	r0, [r4, #4]
 80093c2:	6863      	ldr	r3, [r4, #4]
 80093c4:	6123      	str	r3, [r4, #16]
 80093c6:	2300      	movs	r3, #0
 80093c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093cc:	e7a8      	b.n	8009320 <_printf_i+0x150>
 80093ce:	6923      	ldr	r3, [r4, #16]
 80093d0:	4632      	mov	r2, r6
 80093d2:	4649      	mov	r1, r9
 80093d4:	4640      	mov	r0, r8
 80093d6:	47d0      	blx	sl
 80093d8:	3001      	adds	r0, #1
 80093da:	d0ab      	beq.n	8009334 <_printf_i+0x164>
 80093dc:	6823      	ldr	r3, [r4, #0]
 80093de:	079b      	lsls	r3, r3, #30
 80093e0:	d413      	bmi.n	800940a <_printf_i+0x23a>
 80093e2:	68e0      	ldr	r0, [r4, #12]
 80093e4:	9b03      	ldr	r3, [sp, #12]
 80093e6:	4298      	cmp	r0, r3
 80093e8:	bfb8      	it	lt
 80093ea:	4618      	movlt	r0, r3
 80093ec:	e7a4      	b.n	8009338 <_printf_i+0x168>
 80093ee:	2301      	movs	r3, #1
 80093f0:	4632      	mov	r2, r6
 80093f2:	4649      	mov	r1, r9
 80093f4:	4640      	mov	r0, r8
 80093f6:	47d0      	blx	sl
 80093f8:	3001      	adds	r0, #1
 80093fa:	d09b      	beq.n	8009334 <_printf_i+0x164>
 80093fc:	3501      	adds	r5, #1
 80093fe:	68e3      	ldr	r3, [r4, #12]
 8009400:	9903      	ldr	r1, [sp, #12]
 8009402:	1a5b      	subs	r3, r3, r1
 8009404:	42ab      	cmp	r3, r5
 8009406:	dcf2      	bgt.n	80093ee <_printf_i+0x21e>
 8009408:	e7eb      	b.n	80093e2 <_printf_i+0x212>
 800940a:	2500      	movs	r5, #0
 800940c:	f104 0619 	add.w	r6, r4, #25
 8009410:	e7f5      	b.n	80093fe <_printf_i+0x22e>
 8009412:	bf00      	nop
 8009414:	0800a05d 	.word	0x0800a05d
 8009418:	0800a06e 	.word	0x0800a06e

0800941c <cleanup_glue>:
 800941c:	b538      	push	{r3, r4, r5, lr}
 800941e:	460c      	mov	r4, r1
 8009420:	6809      	ldr	r1, [r1, #0]
 8009422:	4605      	mov	r5, r0
 8009424:	b109      	cbz	r1, 800942a <cleanup_glue+0xe>
 8009426:	f7ff fff9 	bl	800941c <cleanup_glue>
 800942a:	4621      	mov	r1, r4
 800942c:	4628      	mov	r0, r5
 800942e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009432:	f000 badf 	b.w	80099f4 <_free_r>
	...

08009438 <_reclaim_reent>:
 8009438:	4b2c      	ldr	r3, [pc, #176]	; (80094ec <_reclaim_reent+0xb4>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	4283      	cmp	r3, r0
 800943e:	b570      	push	{r4, r5, r6, lr}
 8009440:	4604      	mov	r4, r0
 8009442:	d051      	beq.n	80094e8 <_reclaim_reent+0xb0>
 8009444:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009446:	b143      	cbz	r3, 800945a <_reclaim_reent+0x22>
 8009448:	68db      	ldr	r3, [r3, #12]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d14a      	bne.n	80094e4 <_reclaim_reent+0xac>
 800944e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009450:	6819      	ldr	r1, [r3, #0]
 8009452:	b111      	cbz	r1, 800945a <_reclaim_reent+0x22>
 8009454:	4620      	mov	r0, r4
 8009456:	f000 facd 	bl	80099f4 <_free_r>
 800945a:	6961      	ldr	r1, [r4, #20]
 800945c:	b111      	cbz	r1, 8009464 <_reclaim_reent+0x2c>
 800945e:	4620      	mov	r0, r4
 8009460:	f000 fac8 	bl	80099f4 <_free_r>
 8009464:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009466:	b111      	cbz	r1, 800946e <_reclaim_reent+0x36>
 8009468:	4620      	mov	r0, r4
 800946a:	f000 fac3 	bl	80099f4 <_free_r>
 800946e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009470:	b111      	cbz	r1, 8009478 <_reclaim_reent+0x40>
 8009472:	4620      	mov	r0, r4
 8009474:	f000 fabe 	bl	80099f4 <_free_r>
 8009478:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800947a:	b111      	cbz	r1, 8009482 <_reclaim_reent+0x4a>
 800947c:	4620      	mov	r0, r4
 800947e:	f000 fab9 	bl	80099f4 <_free_r>
 8009482:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009484:	b111      	cbz	r1, 800948c <_reclaim_reent+0x54>
 8009486:	4620      	mov	r0, r4
 8009488:	f000 fab4 	bl	80099f4 <_free_r>
 800948c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800948e:	b111      	cbz	r1, 8009496 <_reclaim_reent+0x5e>
 8009490:	4620      	mov	r0, r4
 8009492:	f000 faaf 	bl	80099f4 <_free_r>
 8009496:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009498:	b111      	cbz	r1, 80094a0 <_reclaim_reent+0x68>
 800949a:	4620      	mov	r0, r4
 800949c:	f000 faaa 	bl	80099f4 <_free_r>
 80094a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80094a2:	b111      	cbz	r1, 80094aa <_reclaim_reent+0x72>
 80094a4:	4620      	mov	r0, r4
 80094a6:	f000 faa5 	bl	80099f4 <_free_r>
 80094aa:	69a3      	ldr	r3, [r4, #24]
 80094ac:	b1e3      	cbz	r3, 80094e8 <_reclaim_reent+0xb0>
 80094ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80094b0:	4620      	mov	r0, r4
 80094b2:	4798      	blx	r3
 80094b4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80094b6:	b1b9      	cbz	r1, 80094e8 <_reclaim_reent+0xb0>
 80094b8:	4620      	mov	r0, r4
 80094ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80094be:	f7ff bfad 	b.w	800941c <cleanup_glue>
 80094c2:	5949      	ldr	r1, [r1, r5]
 80094c4:	b941      	cbnz	r1, 80094d8 <_reclaim_reent+0xa0>
 80094c6:	3504      	adds	r5, #4
 80094c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80094ca:	2d80      	cmp	r5, #128	; 0x80
 80094cc:	68d9      	ldr	r1, [r3, #12]
 80094ce:	d1f8      	bne.n	80094c2 <_reclaim_reent+0x8a>
 80094d0:	4620      	mov	r0, r4
 80094d2:	f000 fa8f 	bl	80099f4 <_free_r>
 80094d6:	e7ba      	b.n	800944e <_reclaim_reent+0x16>
 80094d8:	680e      	ldr	r6, [r1, #0]
 80094da:	4620      	mov	r0, r4
 80094dc:	f000 fa8a 	bl	80099f4 <_free_r>
 80094e0:	4631      	mov	r1, r6
 80094e2:	e7ef      	b.n	80094c4 <_reclaim_reent+0x8c>
 80094e4:	2500      	movs	r5, #0
 80094e6:	e7ef      	b.n	80094c8 <_reclaim_reent+0x90>
 80094e8:	bd70      	pop	{r4, r5, r6, pc}
 80094ea:	bf00      	nop
 80094ec:	20000094 	.word	0x20000094

080094f0 <_sbrk_r>:
 80094f0:	b538      	push	{r3, r4, r5, lr}
 80094f2:	4d06      	ldr	r5, [pc, #24]	; (800950c <_sbrk_r+0x1c>)
 80094f4:	2300      	movs	r3, #0
 80094f6:	4604      	mov	r4, r0
 80094f8:	4608      	mov	r0, r1
 80094fa:	602b      	str	r3, [r5, #0]
 80094fc:	f7f7 fd44 	bl	8000f88 <_sbrk>
 8009500:	1c43      	adds	r3, r0, #1
 8009502:	d102      	bne.n	800950a <_sbrk_r+0x1a>
 8009504:	682b      	ldr	r3, [r5, #0]
 8009506:	b103      	cbz	r3, 800950a <_sbrk_r+0x1a>
 8009508:	6023      	str	r3, [r4, #0]
 800950a:	bd38      	pop	{r3, r4, r5, pc}
 800950c:	20004fb0 	.word	0x20004fb0

08009510 <__sread>:
 8009510:	b510      	push	{r4, lr}
 8009512:	460c      	mov	r4, r1
 8009514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009518:	f000 fabc 	bl	8009a94 <_read_r>
 800951c:	2800      	cmp	r0, #0
 800951e:	bfab      	itete	ge
 8009520:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009522:	89a3      	ldrhlt	r3, [r4, #12]
 8009524:	181b      	addge	r3, r3, r0
 8009526:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800952a:	bfac      	ite	ge
 800952c:	6563      	strge	r3, [r4, #84]	; 0x54
 800952e:	81a3      	strhlt	r3, [r4, #12]
 8009530:	bd10      	pop	{r4, pc}

08009532 <__swrite>:
 8009532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009536:	461f      	mov	r7, r3
 8009538:	898b      	ldrh	r3, [r1, #12]
 800953a:	05db      	lsls	r3, r3, #23
 800953c:	4605      	mov	r5, r0
 800953e:	460c      	mov	r4, r1
 8009540:	4616      	mov	r6, r2
 8009542:	d505      	bpl.n	8009550 <__swrite+0x1e>
 8009544:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009548:	2302      	movs	r3, #2
 800954a:	2200      	movs	r2, #0
 800954c:	f000 f9d0 	bl	80098f0 <_lseek_r>
 8009550:	89a3      	ldrh	r3, [r4, #12]
 8009552:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009556:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800955a:	81a3      	strh	r3, [r4, #12]
 800955c:	4632      	mov	r2, r6
 800955e:	463b      	mov	r3, r7
 8009560:	4628      	mov	r0, r5
 8009562:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009566:	f000 b869 	b.w	800963c <_write_r>

0800956a <__sseek>:
 800956a:	b510      	push	{r4, lr}
 800956c:	460c      	mov	r4, r1
 800956e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009572:	f000 f9bd 	bl	80098f0 <_lseek_r>
 8009576:	1c43      	adds	r3, r0, #1
 8009578:	89a3      	ldrh	r3, [r4, #12]
 800957a:	bf15      	itete	ne
 800957c:	6560      	strne	r0, [r4, #84]	; 0x54
 800957e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009582:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009586:	81a3      	strheq	r3, [r4, #12]
 8009588:	bf18      	it	ne
 800958a:	81a3      	strhne	r3, [r4, #12]
 800958c:	bd10      	pop	{r4, pc}

0800958e <__sclose>:
 800958e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009592:	f000 b8db 	b.w	800974c <_close_r>
	...

08009598 <__swbuf_r>:
 8009598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800959a:	460e      	mov	r6, r1
 800959c:	4614      	mov	r4, r2
 800959e:	4605      	mov	r5, r0
 80095a0:	b118      	cbz	r0, 80095aa <__swbuf_r+0x12>
 80095a2:	6983      	ldr	r3, [r0, #24]
 80095a4:	b90b      	cbnz	r3, 80095aa <__swbuf_r+0x12>
 80095a6:	f7ff fb03 	bl	8008bb0 <__sinit>
 80095aa:	4b21      	ldr	r3, [pc, #132]	; (8009630 <__swbuf_r+0x98>)
 80095ac:	429c      	cmp	r4, r3
 80095ae:	d12b      	bne.n	8009608 <__swbuf_r+0x70>
 80095b0:	686c      	ldr	r4, [r5, #4]
 80095b2:	69a3      	ldr	r3, [r4, #24]
 80095b4:	60a3      	str	r3, [r4, #8]
 80095b6:	89a3      	ldrh	r3, [r4, #12]
 80095b8:	071a      	lsls	r2, r3, #28
 80095ba:	d52f      	bpl.n	800961c <__swbuf_r+0x84>
 80095bc:	6923      	ldr	r3, [r4, #16]
 80095be:	b36b      	cbz	r3, 800961c <__swbuf_r+0x84>
 80095c0:	6923      	ldr	r3, [r4, #16]
 80095c2:	6820      	ldr	r0, [r4, #0]
 80095c4:	1ac0      	subs	r0, r0, r3
 80095c6:	6963      	ldr	r3, [r4, #20]
 80095c8:	b2f6      	uxtb	r6, r6
 80095ca:	4283      	cmp	r3, r0
 80095cc:	4637      	mov	r7, r6
 80095ce:	dc04      	bgt.n	80095da <__swbuf_r+0x42>
 80095d0:	4621      	mov	r1, r4
 80095d2:	4628      	mov	r0, r5
 80095d4:	f000 f950 	bl	8009878 <_fflush_r>
 80095d8:	bb30      	cbnz	r0, 8009628 <__swbuf_r+0x90>
 80095da:	68a3      	ldr	r3, [r4, #8]
 80095dc:	3b01      	subs	r3, #1
 80095de:	60a3      	str	r3, [r4, #8]
 80095e0:	6823      	ldr	r3, [r4, #0]
 80095e2:	1c5a      	adds	r2, r3, #1
 80095e4:	6022      	str	r2, [r4, #0]
 80095e6:	701e      	strb	r6, [r3, #0]
 80095e8:	6963      	ldr	r3, [r4, #20]
 80095ea:	3001      	adds	r0, #1
 80095ec:	4283      	cmp	r3, r0
 80095ee:	d004      	beq.n	80095fa <__swbuf_r+0x62>
 80095f0:	89a3      	ldrh	r3, [r4, #12]
 80095f2:	07db      	lsls	r3, r3, #31
 80095f4:	d506      	bpl.n	8009604 <__swbuf_r+0x6c>
 80095f6:	2e0a      	cmp	r6, #10
 80095f8:	d104      	bne.n	8009604 <__swbuf_r+0x6c>
 80095fa:	4621      	mov	r1, r4
 80095fc:	4628      	mov	r0, r5
 80095fe:	f000 f93b 	bl	8009878 <_fflush_r>
 8009602:	b988      	cbnz	r0, 8009628 <__swbuf_r+0x90>
 8009604:	4638      	mov	r0, r7
 8009606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009608:	4b0a      	ldr	r3, [pc, #40]	; (8009634 <__swbuf_r+0x9c>)
 800960a:	429c      	cmp	r4, r3
 800960c:	d101      	bne.n	8009612 <__swbuf_r+0x7a>
 800960e:	68ac      	ldr	r4, [r5, #8]
 8009610:	e7cf      	b.n	80095b2 <__swbuf_r+0x1a>
 8009612:	4b09      	ldr	r3, [pc, #36]	; (8009638 <__swbuf_r+0xa0>)
 8009614:	429c      	cmp	r4, r3
 8009616:	bf08      	it	eq
 8009618:	68ec      	ldreq	r4, [r5, #12]
 800961a:	e7ca      	b.n	80095b2 <__swbuf_r+0x1a>
 800961c:	4621      	mov	r1, r4
 800961e:	4628      	mov	r0, r5
 8009620:	f000 f81e 	bl	8009660 <__swsetup_r>
 8009624:	2800      	cmp	r0, #0
 8009626:	d0cb      	beq.n	80095c0 <__swbuf_r+0x28>
 8009628:	f04f 37ff 	mov.w	r7, #4294967295
 800962c:	e7ea      	b.n	8009604 <__swbuf_r+0x6c>
 800962e:	bf00      	nop
 8009630:	0800a008 	.word	0x0800a008
 8009634:	0800a028 	.word	0x0800a028
 8009638:	08009fe8 	.word	0x08009fe8

0800963c <_write_r>:
 800963c:	b538      	push	{r3, r4, r5, lr}
 800963e:	4d07      	ldr	r5, [pc, #28]	; (800965c <_write_r+0x20>)
 8009640:	4604      	mov	r4, r0
 8009642:	4608      	mov	r0, r1
 8009644:	4611      	mov	r1, r2
 8009646:	2200      	movs	r2, #0
 8009648:	602a      	str	r2, [r5, #0]
 800964a:	461a      	mov	r2, r3
 800964c:	f7f7 fc4b 	bl	8000ee6 <_write>
 8009650:	1c43      	adds	r3, r0, #1
 8009652:	d102      	bne.n	800965a <_write_r+0x1e>
 8009654:	682b      	ldr	r3, [r5, #0]
 8009656:	b103      	cbz	r3, 800965a <_write_r+0x1e>
 8009658:	6023      	str	r3, [r4, #0]
 800965a:	bd38      	pop	{r3, r4, r5, pc}
 800965c:	20004fb0 	.word	0x20004fb0

08009660 <__swsetup_r>:
 8009660:	4b32      	ldr	r3, [pc, #200]	; (800972c <__swsetup_r+0xcc>)
 8009662:	b570      	push	{r4, r5, r6, lr}
 8009664:	681d      	ldr	r5, [r3, #0]
 8009666:	4606      	mov	r6, r0
 8009668:	460c      	mov	r4, r1
 800966a:	b125      	cbz	r5, 8009676 <__swsetup_r+0x16>
 800966c:	69ab      	ldr	r3, [r5, #24]
 800966e:	b913      	cbnz	r3, 8009676 <__swsetup_r+0x16>
 8009670:	4628      	mov	r0, r5
 8009672:	f7ff fa9d 	bl	8008bb0 <__sinit>
 8009676:	4b2e      	ldr	r3, [pc, #184]	; (8009730 <__swsetup_r+0xd0>)
 8009678:	429c      	cmp	r4, r3
 800967a:	d10f      	bne.n	800969c <__swsetup_r+0x3c>
 800967c:	686c      	ldr	r4, [r5, #4]
 800967e:	89a3      	ldrh	r3, [r4, #12]
 8009680:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009684:	0719      	lsls	r1, r3, #28
 8009686:	d42c      	bmi.n	80096e2 <__swsetup_r+0x82>
 8009688:	06dd      	lsls	r5, r3, #27
 800968a:	d411      	bmi.n	80096b0 <__swsetup_r+0x50>
 800968c:	2309      	movs	r3, #9
 800968e:	6033      	str	r3, [r6, #0]
 8009690:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009694:	81a3      	strh	r3, [r4, #12]
 8009696:	f04f 30ff 	mov.w	r0, #4294967295
 800969a:	e03e      	b.n	800971a <__swsetup_r+0xba>
 800969c:	4b25      	ldr	r3, [pc, #148]	; (8009734 <__swsetup_r+0xd4>)
 800969e:	429c      	cmp	r4, r3
 80096a0:	d101      	bne.n	80096a6 <__swsetup_r+0x46>
 80096a2:	68ac      	ldr	r4, [r5, #8]
 80096a4:	e7eb      	b.n	800967e <__swsetup_r+0x1e>
 80096a6:	4b24      	ldr	r3, [pc, #144]	; (8009738 <__swsetup_r+0xd8>)
 80096a8:	429c      	cmp	r4, r3
 80096aa:	bf08      	it	eq
 80096ac:	68ec      	ldreq	r4, [r5, #12]
 80096ae:	e7e6      	b.n	800967e <__swsetup_r+0x1e>
 80096b0:	0758      	lsls	r0, r3, #29
 80096b2:	d512      	bpl.n	80096da <__swsetup_r+0x7a>
 80096b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80096b6:	b141      	cbz	r1, 80096ca <__swsetup_r+0x6a>
 80096b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80096bc:	4299      	cmp	r1, r3
 80096be:	d002      	beq.n	80096c6 <__swsetup_r+0x66>
 80096c0:	4630      	mov	r0, r6
 80096c2:	f000 f997 	bl	80099f4 <_free_r>
 80096c6:	2300      	movs	r3, #0
 80096c8:	6363      	str	r3, [r4, #52]	; 0x34
 80096ca:	89a3      	ldrh	r3, [r4, #12]
 80096cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80096d0:	81a3      	strh	r3, [r4, #12]
 80096d2:	2300      	movs	r3, #0
 80096d4:	6063      	str	r3, [r4, #4]
 80096d6:	6923      	ldr	r3, [r4, #16]
 80096d8:	6023      	str	r3, [r4, #0]
 80096da:	89a3      	ldrh	r3, [r4, #12]
 80096dc:	f043 0308 	orr.w	r3, r3, #8
 80096e0:	81a3      	strh	r3, [r4, #12]
 80096e2:	6923      	ldr	r3, [r4, #16]
 80096e4:	b94b      	cbnz	r3, 80096fa <__swsetup_r+0x9a>
 80096e6:	89a3      	ldrh	r3, [r4, #12]
 80096e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80096ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80096f0:	d003      	beq.n	80096fa <__swsetup_r+0x9a>
 80096f2:	4621      	mov	r1, r4
 80096f4:	4630      	mov	r0, r6
 80096f6:	f000 f931 	bl	800995c <__smakebuf_r>
 80096fa:	89a0      	ldrh	r0, [r4, #12]
 80096fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009700:	f010 0301 	ands.w	r3, r0, #1
 8009704:	d00a      	beq.n	800971c <__swsetup_r+0xbc>
 8009706:	2300      	movs	r3, #0
 8009708:	60a3      	str	r3, [r4, #8]
 800970a:	6963      	ldr	r3, [r4, #20]
 800970c:	425b      	negs	r3, r3
 800970e:	61a3      	str	r3, [r4, #24]
 8009710:	6923      	ldr	r3, [r4, #16]
 8009712:	b943      	cbnz	r3, 8009726 <__swsetup_r+0xc6>
 8009714:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009718:	d1ba      	bne.n	8009690 <__swsetup_r+0x30>
 800971a:	bd70      	pop	{r4, r5, r6, pc}
 800971c:	0781      	lsls	r1, r0, #30
 800971e:	bf58      	it	pl
 8009720:	6963      	ldrpl	r3, [r4, #20]
 8009722:	60a3      	str	r3, [r4, #8]
 8009724:	e7f4      	b.n	8009710 <__swsetup_r+0xb0>
 8009726:	2000      	movs	r0, #0
 8009728:	e7f7      	b.n	800971a <__swsetup_r+0xba>
 800972a:	bf00      	nop
 800972c:	20000094 	.word	0x20000094
 8009730:	0800a008 	.word	0x0800a008
 8009734:	0800a028 	.word	0x0800a028
 8009738:	08009fe8 	.word	0x08009fe8

0800973c <abort>:
 800973c:	b508      	push	{r3, lr}
 800973e:	2006      	movs	r0, #6
 8009740:	f000 f9e2 	bl	8009b08 <raise>
 8009744:	2001      	movs	r0, #1
 8009746:	f7f7 fba7 	bl	8000e98 <_exit>
	...

0800974c <_close_r>:
 800974c:	b538      	push	{r3, r4, r5, lr}
 800974e:	4d06      	ldr	r5, [pc, #24]	; (8009768 <_close_r+0x1c>)
 8009750:	2300      	movs	r3, #0
 8009752:	4604      	mov	r4, r0
 8009754:	4608      	mov	r0, r1
 8009756:	602b      	str	r3, [r5, #0]
 8009758:	f7f7 fbe1 	bl	8000f1e <_close>
 800975c:	1c43      	adds	r3, r0, #1
 800975e:	d102      	bne.n	8009766 <_close_r+0x1a>
 8009760:	682b      	ldr	r3, [r5, #0]
 8009762:	b103      	cbz	r3, 8009766 <_close_r+0x1a>
 8009764:	6023      	str	r3, [r4, #0]
 8009766:	bd38      	pop	{r3, r4, r5, pc}
 8009768:	20004fb0 	.word	0x20004fb0

0800976c <__sflush_r>:
 800976c:	898a      	ldrh	r2, [r1, #12]
 800976e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009772:	4605      	mov	r5, r0
 8009774:	0710      	lsls	r0, r2, #28
 8009776:	460c      	mov	r4, r1
 8009778:	d458      	bmi.n	800982c <__sflush_r+0xc0>
 800977a:	684b      	ldr	r3, [r1, #4]
 800977c:	2b00      	cmp	r3, #0
 800977e:	dc05      	bgt.n	800978c <__sflush_r+0x20>
 8009780:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009782:	2b00      	cmp	r3, #0
 8009784:	dc02      	bgt.n	800978c <__sflush_r+0x20>
 8009786:	2000      	movs	r0, #0
 8009788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800978c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800978e:	2e00      	cmp	r6, #0
 8009790:	d0f9      	beq.n	8009786 <__sflush_r+0x1a>
 8009792:	2300      	movs	r3, #0
 8009794:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009798:	682f      	ldr	r7, [r5, #0]
 800979a:	602b      	str	r3, [r5, #0]
 800979c:	d032      	beq.n	8009804 <__sflush_r+0x98>
 800979e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80097a0:	89a3      	ldrh	r3, [r4, #12]
 80097a2:	075a      	lsls	r2, r3, #29
 80097a4:	d505      	bpl.n	80097b2 <__sflush_r+0x46>
 80097a6:	6863      	ldr	r3, [r4, #4]
 80097a8:	1ac0      	subs	r0, r0, r3
 80097aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80097ac:	b10b      	cbz	r3, 80097b2 <__sflush_r+0x46>
 80097ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80097b0:	1ac0      	subs	r0, r0, r3
 80097b2:	2300      	movs	r3, #0
 80097b4:	4602      	mov	r2, r0
 80097b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80097b8:	6a21      	ldr	r1, [r4, #32]
 80097ba:	4628      	mov	r0, r5
 80097bc:	47b0      	blx	r6
 80097be:	1c43      	adds	r3, r0, #1
 80097c0:	89a3      	ldrh	r3, [r4, #12]
 80097c2:	d106      	bne.n	80097d2 <__sflush_r+0x66>
 80097c4:	6829      	ldr	r1, [r5, #0]
 80097c6:	291d      	cmp	r1, #29
 80097c8:	d82c      	bhi.n	8009824 <__sflush_r+0xb8>
 80097ca:	4a2a      	ldr	r2, [pc, #168]	; (8009874 <__sflush_r+0x108>)
 80097cc:	40ca      	lsrs	r2, r1
 80097ce:	07d6      	lsls	r6, r2, #31
 80097d0:	d528      	bpl.n	8009824 <__sflush_r+0xb8>
 80097d2:	2200      	movs	r2, #0
 80097d4:	6062      	str	r2, [r4, #4]
 80097d6:	04d9      	lsls	r1, r3, #19
 80097d8:	6922      	ldr	r2, [r4, #16]
 80097da:	6022      	str	r2, [r4, #0]
 80097dc:	d504      	bpl.n	80097e8 <__sflush_r+0x7c>
 80097de:	1c42      	adds	r2, r0, #1
 80097e0:	d101      	bne.n	80097e6 <__sflush_r+0x7a>
 80097e2:	682b      	ldr	r3, [r5, #0]
 80097e4:	b903      	cbnz	r3, 80097e8 <__sflush_r+0x7c>
 80097e6:	6560      	str	r0, [r4, #84]	; 0x54
 80097e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80097ea:	602f      	str	r7, [r5, #0]
 80097ec:	2900      	cmp	r1, #0
 80097ee:	d0ca      	beq.n	8009786 <__sflush_r+0x1a>
 80097f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80097f4:	4299      	cmp	r1, r3
 80097f6:	d002      	beq.n	80097fe <__sflush_r+0x92>
 80097f8:	4628      	mov	r0, r5
 80097fa:	f000 f8fb 	bl	80099f4 <_free_r>
 80097fe:	2000      	movs	r0, #0
 8009800:	6360      	str	r0, [r4, #52]	; 0x34
 8009802:	e7c1      	b.n	8009788 <__sflush_r+0x1c>
 8009804:	6a21      	ldr	r1, [r4, #32]
 8009806:	2301      	movs	r3, #1
 8009808:	4628      	mov	r0, r5
 800980a:	47b0      	blx	r6
 800980c:	1c41      	adds	r1, r0, #1
 800980e:	d1c7      	bne.n	80097a0 <__sflush_r+0x34>
 8009810:	682b      	ldr	r3, [r5, #0]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d0c4      	beq.n	80097a0 <__sflush_r+0x34>
 8009816:	2b1d      	cmp	r3, #29
 8009818:	d001      	beq.n	800981e <__sflush_r+0xb2>
 800981a:	2b16      	cmp	r3, #22
 800981c:	d101      	bne.n	8009822 <__sflush_r+0xb6>
 800981e:	602f      	str	r7, [r5, #0]
 8009820:	e7b1      	b.n	8009786 <__sflush_r+0x1a>
 8009822:	89a3      	ldrh	r3, [r4, #12]
 8009824:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009828:	81a3      	strh	r3, [r4, #12]
 800982a:	e7ad      	b.n	8009788 <__sflush_r+0x1c>
 800982c:	690f      	ldr	r7, [r1, #16]
 800982e:	2f00      	cmp	r7, #0
 8009830:	d0a9      	beq.n	8009786 <__sflush_r+0x1a>
 8009832:	0793      	lsls	r3, r2, #30
 8009834:	680e      	ldr	r6, [r1, #0]
 8009836:	bf08      	it	eq
 8009838:	694b      	ldreq	r3, [r1, #20]
 800983a:	600f      	str	r7, [r1, #0]
 800983c:	bf18      	it	ne
 800983e:	2300      	movne	r3, #0
 8009840:	eba6 0807 	sub.w	r8, r6, r7
 8009844:	608b      	str	r3, [r1, #8]
 8009846:	f1b8 0f00 	cmp.w	r8, #0
 800984a:	dd9c      	ble.n	8009786 <__sflush_r+0x1a>
 800984c:	6a21      	ldr	r1, [r4, #32]
 800984e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009850:	4643      	mov	r3, r8
 8009852:	463a      	mov	r2, r7
 8009854:	4628      	mov	r0, r5
 8009856:	47b0      	blx	r6
 8009858:	2800      	cmp	r0, #0
 800985a:	dc06      	bgt.n	800986a <__sflush_r+0xfe>
 800985c:	89a3      	ldrh	r3, [r4, #12]
 800985e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009862:	81a3      	strh	r3, [r4, #12]
 8009864:	f04f 30ff 	mov.w	r0, #4294967295
 8009868:	e78e      	b.n	8009788 <__sflush_r+0x1c>
 800986a:	4407      	add	r7, r0
 800986c:	eba8 0800 	sub.w	r8, r8, r0
 8009870:	e7e9      	b.n	8009846 <__sflush_r+0xda>
 8009872:	bf00      	nop
 8009874:	20400001 	.word	0x20400001

08009878 <_fflush_r>:
 8009878:	b538      	push	{r3, r4, r5, lr}
 800987a:	690b      	ldr	r3, [r1, #16]
 800987c:	4605      	mov	r5, r0
 800987e:	460c      	mov	r4, r1
 8009880:	b913      	cbnz	r3, 8009888 <_fflush_r+0x10>
 8009882:	2500      	movs	r5, #0
 8009884:	4628      	mov	r0, r5
 8009886:	bd38      	pop	{r3, r4, r5, pc}
 8009888:	b118      	cbz	r0, 8009892 <_fflush_r+0x1a>
 800988a:	6983      	ldr	r3, [r0, #24]
 800988c:	b90b      	cbnz	r3, 8009892 <_fflush_r+0x1a>
 800988e:	f7ff f98f 	bl	8008bb0 <__sinit>
 8009892:	4b14      	ldr	r3, [pc, #80]	; (80098e4 <_fflush_r+0x6c>)
 8009894:	429c      	cmp	r4, r3
 8009896:	d11b      	bne.n	80098d0 <_fflush_r+0x58>
 8009898:	686c      	ldr	r4, [r5, #4]
 800989a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d0ef      	beq.n	8009882 <_fflush_r+0xa>
 80098a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80098a4:	07d0      	lsls	r0, r2, #31
 80098a6:	d404      	bmi.n	80098b2 <_fflush_r+0x3a>
 80098a8:	0599      	lsls	r1, r3, #22
 80098aa:	d402      	bmi.n	80098b2 <_fflush_r+0x3a>
 80098ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80098ae:	f7ff fa54 	bl	8008d5a <__retarget_lock_acquire_recursive>
 80098b2:	4628      	mov	r0, r5
 80098b4:	4621      	mov	r1, r4
 80098b6:	f7ff ff59 	bl	800976c <__sflush_r>
 80098ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80098bc:	07da      	lsls	r2, r3, #31
 80098be:	4605      	mov	r5, r0
 80098c0:	d4e0      	bmi.n	8009884 <_fflush_r+0xc>
 80098c2:	89a3      	ldrh	r3, [r4, #12]
 80098c4:	059b      	lsls	r3, r3, #22
 80098c6:	d4dd      	bmi.n	8009884 <_fflush_r+0xc>
 80098c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80098ca:	f7ff fa47 	bl	8008d5c <__retarget_lock_release_recursive>
 80098ce:	e7d9      	b.n	8009884 <_fflush_r+0xc>
 80098d0:	4b05      	ldr	r3, [pc, #20]	; (80098e8 <_fflush_r+0x70>)
 80098d2:	429c      	cmp	r4, r3
 80098d4:	d101      	bne.n	80098da <_fflush_r+0x62>
 80098d6:	68ac      	ldr	r4, [r5, #8]
 80098d8:	e7df      	b.n	800989a <_fflush_r+0x22>
 80098da:	4b04      	ldr	r3, [pc, #16]	; (80098ec <_fflush_r+0x74>)
 80098dc:	429c      	cmp	r4, r3
 80098de:	bf08      	it	eq
 80098e0:	68ec      	ldreq	r4, [r5, #12]
 80098e2:	e7da      	b.n	800989a <_fflush_r+0x22>
 80098e4:	0800a008 	.word	0x0800a008
 80098e8:	0800a028 	.word	0x0800a028
 80098ec:	08009fe8 	.word	0x08009fe8

080098f0 <_lseek_r>:
 80098f0:	b538      	push	{r3, r4, r5, lr}
 80098f2:	4d07      	ldr	r5, [pc, #28]	; (8009910 <_lseek_r+0x20>)
 80098f4:	4604      	mov	r4, r0
 80098f6:	4608      	mov	r0, r1
 80098f8:	4611      	mov	r1, r2
 80098fa:	2200      	movs	r2, #0
 80098fc:	602a      	str	r2, [r5, #0]
 80098fe:	461a      	mov	r2, r3
 8009900:	f7f7 fb34 	bl	8000f6c <_lseek>
 8009904:	1c43      	adds	r3, r0, #1
 8009906:	d102      	bne.n	800990e <_lseek_r+0x1e>
 8009908:	682b      	ldr	r3, [r5, #0]
 800990a:	b103      	cbz	r3, 800990e <_lseek_r+0x1e>
 800990c:	6023      	str	r3, [r4, #0]
 800990e:	bd38      	pop	{r3, r4, r5, pc}
 8009910:	20004fb0 	.word	0x20004fb0

08009914 <__swhatbuf_r>:
 8009914:	b570      	push	{r4, r5, r6, lr}
 8009916:	460e      	mov	r6, r1
 8009918:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800991c:	2900      	cmp	r1, #0
 800991e:	b096      	sub	sp, #88	; 0x58
 8009920:	4614      	mov	r4, r2
 8009922:	461d      	mov	r5, r3
 8009924:	da07      	bge.n	8009936 <__swhatbuf_r+0x22>
 8009926:	2300      	movs	r3, #0
 8009928:	602b      	str	r3, [r5, #0]
 800992a:	89b3      	ldrh	r3, [r6, #12]
 800992c:	061a      	lsls	r2, r3, #24
 800992e:	d410      	bmi.n	8009952 <__swhatbuf_r+0x3e>
 8009930:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009934:	e00e      	b.n	8009954 <__swhatbuf_r+0x40>
 8009936:	466a      	mov	r2, sp
 8009938:	f000 f902 	bl	8009b40 <_fstat_r>
 800993c:	2800      	cmp	r0, #0
 800993e:	dbf2      	blt.n	8009926 <__swhatbuf_r+0x12>
 8009940:	9a01      	ldr	r2, [sp, #4]
 8009942:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009946:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800994a:	425a      	negs	r2, r3
 800994c:	415a      	adcs	r2, r3
 800994e:	602a      	str	r2, [r5, #0]
 8009950:	e7ee      	b.n	8009930 <__swhatbuf_r+0x1c>
 8009952:	2340      	movs	r3, #64	; 0x40
 8009954:	2000      	movs	r0, #0
 8009956:	6023      	str	r3, [r4, #0]
 8009958:	b016      	add	sp, #88	; 0x58
 800995a:	bd70      	pop	{r4, r5, r6, pc}

0800995c <__smakebuf_r>:
 800995c:	898b      	ldrh	r3, [r1, #12]
 800995e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009960:	079d      	lsls	r5, r3, #30
 8009962:	4606      	mov	r6, r0
 8009964:	460c      	mov	r4, r1
 8009966:	d507      	bpl.n	8009978 <__smakebuf_r+0x1c>
 8009968:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800996c:	6023      	str	r3, [r4, #0]
 800996e:	6123      	str	r3, [r4, #16]
 8009970:	2301      	movs	r3, #1
 8009972:	6163      	str	r3, [r4, #20]
 8009974:	b002      	add	sp, #8
 8009976:	bd70      	pop	{r4, r5, r6, pc}
 8009978:	ab01      	add	r3, sp, #4
 800997a:	466a      	mov	r2, sp
 800997c:	f7ff ffca 	bl	8009914 <__swhatbuf_r>
 8009980:	9900      	ldr	r1, [sp, #0]
 8009982:	4605      	mov	r5, r0
 8009984:	4630      	mov	r0, r6
 8009986:	f7ff fa01 	bl	8008d8c <_malloc_r>
 800998a:	b948      	cbnz	r0, 80099a0 <__smakebuf_r+0x44>
 800998c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009990:	059a      	lsls	r2, r3, #22
 8009992:	d4ef      	bmi.n	8009974 <__smakebuf_r+0x18>
 8009994:	f023 0303 	bic.w	r3, r3, #3
 8009998:	f043 0302 	orr.w	r3, r3, #2
 800999c:	81a3      	strh	r3, [r4, #12]
 800999e:	e7e3      	b.n	8009968 <__smakebuf_r+0xc>
 80099a0:	4b0d      	ldr	r3, [pc, #52]	; (80099d8 <__smakebuf_r+0x7c>)
 80099a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80099a4:	89a3      	ldrh	r3, [r4, #12]
 80099a6:	6020      	str	r0, [r4, #0]
 80099a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099ac:	81a3      	strh	r3, [r4, #12]
 80099ae:	9b00      	ldr	r3, [sp, #0]
 80099b0:	6163      	str	r3, [r4, #20]
 80099b2:	9b01      	ldr	r3, [sp, #4]
 80099b4:	6120      	str	r0, [r4, #16]
 80099b6:	b15b      	cbz	r3, 80099d0 <__smakebuf_r+0x74>
 80099b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099bc:	4630      	mov	r0, r6
 80099be:	f000 f8d1 	bl	8009b64 <_isatty_r>
 80099c2:	b128      	cbz	r0, 80099d0 <__smakebuf_r+0x74>
 80099c4:	89a3      	ldrh	r3, [r4, #12]
 80099c6:	f023 0303 	bic.w	r3, r3, #3
 80099ca:	f043 0301 	orr.w	r3, r3, #1
 80099ce:	81a3      	strh	r3, [r4, #12]
 80099d0:	89a0      	ldrh	r0, [r4, #12]
 80099d2:	4305      	orrs	r5, r0
 80099d4:	81a5      	strh	r5, [r4, #12]
 80099d6:	e7cd      	b.n	8009974 <__smakebuf_r+0x18>
 80099d8:	08008b49 	.word	0x08008b49

080099dc <__malloc_lock>:
 80099dc:	4801      	ldr	r0, [pc, #4]	; (80099e4 <__malloc_lock+0x8>)
 80099de:	f7ff b9bc 	b.w	8008d5a <__retarget_lock_acquire_recursive>
 80099e2:	bf00      	nop
 80099e4:	20004fa8 	.word	0x20004fa8

080099e8 <__malloc_unlock>:
 80099e8:	4801      	ldr	r0, [pc, #4]	; (80099f0 <__malloc_unlock+0x8>)
 80099ea:	f7ff b9b7 	b.w	8008d5c <__retarget_lock_release_recursive>
 80099ee:	bf00      	nop
 80099f0:	20004fa8 	.word	0x20004fa8

080099f4 <_free_r>:
 80099f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80099f6:	2900      	cmp	r1, #0
 80099f8:	d048      	beq.n	8009a8c <_free_r+0x98>
 80099fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099fe:	9001      	str	r0, [sp, #4]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	f1a1 0404 	sub.w	r4, r1, #4
 8009a06:	bfb8      	it	lt
 8009a08:	18e4      	addlt	r4, r4, r3
 8009a0a:	f7ff ffe7 	bl	80099dc <__malloc_lock>
 8009a0e:	4a20      	ldr	r2, [pc, #128]	; (8009a90 <_free_r+0x9c>)
 8009a10:	9801      	ldr	r0, [sp, #4]
 8009a12:	6813      	ldr	r3, [r2, #0]
 8009a14:	4615      	mov	r5, r2
 8009a16:	b933      	cbnz	r3, 8009a26 <_free_r+0x32>
 8009a18:	6063      	str	r3, [r4, #4]
 8009a1a:	6014      	str	r4, [r2, #0]
 8009a1c:	b003      	add	sp, #12
 8009a1e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009a22:	f7ff bfe1 	b.w	80099e8 <__malloc_unlock>
 8009a26:	42a3      	cmp	r3, r4
 8009a28:	d90b      	bls.n	8009a42 <_free_r+0x4e>
 8009a2a:	6821      	ldr	r1, [r4, #0]
 8009a2c:	1862      	adds	r2, r4, r1
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	bf04      	itt	eq
 8009a32:	681a      	ldreq	r2, [r3, #0]
 8009a34:	685b      	ldreq	r3, [r3, #4]
 8009a36:	6063      	str	r3, [r4, #4]
 8009a38:	bf04      	itt	eq
 8009a3a:	1852      	addeq	r2, r2, r1
 8009a3c:	6022      	streq	r2, [r4, #0]
 8009a3e:	602c      	str	r4, [r5, #0]
 8009a40:	e7ec      	b.n	8009a1c <_free_r+0x28>
 8009a42:	461a      	mov	r2, r3
 8009a44:	685b      	ldr	r3, [r3, #4]
 8009a46:	b10b      	cbz	r3, 8009a4c <_free_r+0x58>
 8009a48:	42a3      	cmp	r3, r4
 8009a4a:	d9fa      	bls.n	8009a42 <_free_r+0x4e>
 8009a4c:	6811      	ldr	r1, [r2, #0]
 8009a4e:	1855      	adds	r5, r2, r1
 8009a50:	42a5      	cmp	r5, r4
 8009a52:	d10b      	bne.n	8009a6c <_free_r+0x78>
 8009a54:	6824      	ldr	r4, [r4, #0]
 8009a56:	4421      	add	r1, r4
 8009a58:	1854      	adds	r4, r2, r1
 8009a5a:	42a3      	cmp	r3, r4
 8009a5c:	6011      	str	r1, [r2, #0]
 8009a5e:	d1dd      	bne.n	8009a1c <_free_r+0x28>
 8009a60:	681c      	ldr	r4, [r3, #0]
 8009a62:	685b      	ldr	r3, [r3, #4]
 8009a64:	6053      	str	r3, [r2, #4]
 8009a66:	4421      	add	r1, r4
 8009a68:	6011      	str	r1, [r2, #0]
 8009a6a:	e7d7      	b.n	8009a1c <_free_r+0x28>
 8009a6c:	d902      	bls.n	8009a74 <_free_r+0x80>
 8009a6e:	230c      	movs	r3, #12
 8009a70:	6003      	str	r3, [r0, #0]
 8009a72:	e7d3      	b.n	8009a1c <_free_r+0x28>
 8009a74:	6825      	ldr	r5, [r4, #0]
 8009a76:	1961      	adds	r1, r4, r5
 8009a78:	428b      	cmp	r3, r1
 8009a7a:	bf04      	itt	eq
 8009a7c:	6819      	ldreq	r1, [r3, #0]
 8009a7e:	685b      	ldreq	r3, [r3, #4]
 8009a80:	6063      	str	r3, [r4, #4]
 8009a82:	bf04      	itt	eq
 8009a84:	1949      	addeq	r1, r1, r5
 8009a86:	6021      	streq	r1, [r4, #0]
 8009a88:	6054      	str	r4, [r2, #4]
 8009a8a:	e7c7      	b.n	8009a1c <_free_r+0x28>
 8009a8c:	b003      	add	sp, #12
 8009a8e:	bd30      	pop	{r4, r5, pc}
 8009a90:	20004b48 	.word	0x20004b48

08009a94 <_read_r>:
 8009a94:	b538      	push	{r3, r4, r5, lr}
 8009a96:	4d07      	ldr	r5, [pc, #28]	; (8009ab4 <_read_r+0x20>)
 8009a98:	4604      	mov	r4, r0
 8009a9a:	4608      	mov	r0, r1
 8009a9c:	4611      	mov	r1, r2
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	602a      	str	r2, [r5, #0]
 8009aa2:	461a      	mov	r2, r3
 8009aa4:	f7f7 fa02 	bl	8000eac <_read>
 8009aa8:	1c43      	adds	r3, r0, #1
 8009aaa:	d102      	bne.n	8009ab2 <_read_r+0x1e>
 8009aac:	682b      	ldr	r3, [r5, #0]
 8009aae:	b103      	cbz	r3, 8009ab2 <_read_r+0x1e>
 8009ab0:	6023      	str	r3, [r4, #0]
 8009ab2:	bd38      	pop	{r3, r4, r5, pc}
 8009ab4:	20004fb0 	.word	0x20004fb0

08009ab8 <_raise_r>:
 8009ab8:	291f      	cmp	r1, #31
 8009aba:	b538      	push	{r3, r4, r5, lr}
 8009abc:	4604      	mov	r4, r0
 8009abe:	460d      	mov	r5, r1
 8009ac0:	d904      	bls.n	8009acc <_raise_r+0x14>
 8009ac2:	2316      	movs	r3, #22
 8009ac4:	6003      	str	r3, [r0, #0]
 8009ac6:	f04f 30ff 	mov.w	r0, #4294967295
 8009aca:	bd38      	pop	{r3, r4, r5, pc}
 8009acc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009ace:	b112      	cbz	r2, 8009ad6 <_raise_r+0x1e>
 8009ad0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009ad4:	b94b      	cbnz	r3, 8009aea <_raise_r+0x32>
 8009ad6:	4620      	mov	r0, r4
 8009ad8:	f000 f830 	bl	8009b3c <_getpid_r>
 8009adc:	462a      	mov	r2, r5
 8009ade:	4601      	mov	r1, r0
 8009ae0:	4620      	mov	r0, r4
 8009ae2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ae6:	f000 b817 	b.w	8009b18 <_kill_r>
 8009aea:	2b01      	cmp	r3, #1
 8009aec:	d00a      	beq.n	8009b04 <_raise_r+0x4c>
 8009aee:	1c59      	adds	r1, r3, #1
 8009af0:	d103      	bne.n	8009afa <_raise_r+0x42>
 8009af2:	2316      	movs	r3, #22
 8009af4:	6003      	str	r3, [r0, #0]
 8009af6:	2001      	movs	r0, #1
 8009af8:	e7e7      	b.n	8009aca <_raise_r+0x12>
 8009afa:	2400      	movs	r4, #0
 8009afc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009b00:	4628      	mov	r0, r5
 8009b02:	4798      	blx	r3
 8009b04:	2000      	movs	r0, #0
 8009b06:	e7e0      	b.n	8009aca <_raise_r+0x12>

08009b08 <raise>:
 8009b08:	4b02      	ldr	r3, [pc, #8]	; (8009b14 <raise+0xc>)
 8009b0a:	4601      	mov	r1, r0
 8009b0c:	6818      	ldr	r0, [r3, #0]
 8009b0e:	f7ff bfd3 	b.w	8009ab8 <_raise_r>
 8009b12:	bf00      	nop
 8009b14:	20000094 	.word	0x20000094

08009b18 <_kill_r>:
 8009b18:	b538      	push	{r3, r4, r5, lr}
 8009b1a:	4d07      	ldr	r5, [pc, #28]	; (8009b38 <_kill_r+0x20>)
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	4604      	mov	r4, r0
 8009b20:	4608      	mov	r0, r1
 8009b22:	4611      	mov	r1, r2
 8009b24:	602b      	str	r3, [r5, #0]
 8009b26:	f7f7 f9a7 	bl	8000e78 <_kill>
 8009b2a:	1c43      	adds	r3, r0, #1
 8009b2c:	d102      	bne.n	8009b34 <_kill_r+0x1c>
 8009b2e:	682b      	ldr	r3, [r5, #0]
 8009b30:	b103      	cbz	r3, 8009b34 <_kill_r+0x1c>
 8009b32:	6023      	str	r3, [r4, #0]
 8009b34:	bd38      	pop	{r3, r4, r5, pc}
 8009b36:	bf00      	nop
 8009b38:	20004fb0 	.word	0x20004fb0

08009b3c <_getpid_r>:
 8009b3c:	f7f7 b994 	b.w	8000e68 <_getpid>

08009b40 <_fstat_r>:
 8009b40:	b538      	push	{r3, r4, r5, lr}
 8009b42:	4d07      	ldr	r5, [pc, #28]	; (8009b60 <_fstat_r+0x20>)
 8009b44:	2300      	movs	r3, #0
 8009b46:	4604      	mov	r4, r0
 8009b48:	4608      	mov	r0, r1
 8009b4a:	4611      	mov	r1, r2
 8009b4c:	602b      	str	r3, [r5, #0]
 8009b4e:	f7f7 f9f2 	bl	8000f36 <_fstat>
 8009b52:	1c43      	adds	r3, r0, #1
 8009b54:	d102      	bne.n	8009b5c <_fstat_r+0x1c>
 8009b56:	682b      	ldr	r3, [r5, #0]
 8009b58:	b103      	cbz	r3, 8009b5c <_fstat_r+0x1c>
 8009b5a:	6023      	str	r3, [r4, #0]
 8009b5c:	bd38      	pop	{r3, r4, r5, pc}
 8009b5e:	bf00      	nop
 8009b60:	20004fb0 	.word	0x20004fb0

08009b64 <_isatty_r>:
 8009b64:	b538      	push	{r3, r4, r5, lr}
 8009b66:	4d06      	ldr	r5, [pc, #24]	; (8009b80 <_isatty_r+0x1c>)
 8009b68:	2300      	movs	r3, #0
 8009b6a:	4604      	mov	r4, r0
 8009b6c:	4608      	mov	r0, r1
 8009b6e:	602b      	str	r3, [r5, #0]
 8009b70:	f7f7 f9f1 	bl	8000f56 <_isatty>
 8009b74:	1c43      	adds	r3, r0, #1
 8009b76:	d102      	bne.n	8009b7e <_isatty_r+0x1a>
 8009b78:	682b      	ldr	r3, [r5, #0]
 8009b7a:	b103      	cbz	r3, 8009b7e <_isatty_r+0x1a>
 8009b7c:	6023      	str	r3, [r4, #0]
 8009b7e:	bd38      	pop	{r3, r4, r5, pc}
 8009b80:	20004fb0 	.word	0x20004fb0

08009b84 <_init>:
 8009b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b86:	bf00      	nop
 8009b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b8a:	bc08      	pop	{r3}
 8009b8c:	469e      	mov	lr, r3
 8009b8e:	4770      	bx	lr

08009b90 <_fini>:
 8009b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b92:	bf00      	nop
 8009b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b96:	bc08      	pop	{r3}
 8009b98:	469e      	mov	lr, r3
 8009b9a:	4770      	bx	lr
