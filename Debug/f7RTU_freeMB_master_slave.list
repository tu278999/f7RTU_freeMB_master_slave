
f7RTU_freeMB_master_slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bbc8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004fc  0800bdc8  0800bdc8  0001bdc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c2c4  0800c2c4  0002017c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c2c4  0800c2c4  0001c2c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c2cc  0800c2cc  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c2cc  0800c2cc  0001c2cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c2d0  0800c2d0  0001c2d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  0800c2d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005070  2000017c  0800c450  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200051ec  0800c450  000251ec  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003e36e  00000000  00000000  000201aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000077b9  00000000  00000000  0005e518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d18  00000000  00000000  00065cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a10  00000000  00000000  000679f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000baf0  00000000  00000000  00069400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002bc3e  00000000  00000000  00074ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010b681  00000000  00000000  000a0b2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001ac1af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b24  00000000  00000000  001ac204  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000017c 	.word	0x2000017c
 800021c:	00000000 	.word	0x00000000
 8000220:	0800bdb0 	.word	0x0800bdb0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000180 	.word	0x20000180
 800023c:	0800bdb0 	.word	0x0800bdb0

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005dc:	f000 fd4b 	bl	8001076 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e0:	f000 f824 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e4:	f000 f986 	bl	80008f4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005e8:	f000 f954 	bl	8000894 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 80005ec:	f000 f8b4 	bl	8000758 <MX_TIM6_Init>
  MX_TIM7_Init();
 80005f0:	f000 f8e8 	bl	80007c4 <MX_TIM7_Init>
  MX_USART2_UART_Init();
 80005f4:	f000 f91c 	bl	8000830 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005f8:	f003 fc84 	bl	8003f04 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005fc:	4a07      	ldr	r2, [pc, #28]	; (800061c <main+0x44>)
 80005fe:	2100      	movs	r1, #0
 8000600:	4807      	ldr	r0, [pc, #28]	; (8000620 <main+0x48>)
 8000602:	f003 fce9 	bl	8003fd8 <osThreadNew>
 8000606:	4603      	mov	r3, r0
 8000608:	4a06      	ldr	r2, [pc, #24]	; (8000624 <main+0x4c>)
 800060a:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */
HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 800060c:	2201      	movs	r2, #1
 800060e:	2101      	movs	r1, #1
 8000610:	4805      	ldr	r0, [pc, #20]	; (8000628 <main+0x50>)
 8000612:	f001 f8a1 	bl	8001758 <HAL_GPIO_WritePin>
  /* Start scheduler */
  osKernelStart();
 8000616:	f003 fca9 	bl	8003f6c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800061a:	e7fe      	b.n	800061a <main+0x42>
 800061c:	0800bf54 	.word	0x0800bf54
 8000620:	08000b29 	.word	0x08000b29
 8000624:	20004e28 	.word	0x20004e28
 8000628:	40020400 	.word	0x40020400

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b0b8      	sub	sp, #224	; 0xe0
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000636:	2234      	movs	r2, #52	; 0x34
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f00a fcb3 	bl	800afa6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000650:	f107 0308 	add.w	r3, r7, #8
 8000654:	2290      	movs	r2, #144	; 0x90
 8000656:	2100      	movs	r1, #0
 8000658:	4618      	mov	r0, r3
 800065a:	f00a fca4 	bl	800afa6 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800065e:	f001 f8af 	bl	80017c0 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000662:	4b3b      	ldr	r3, [pc, #236]	; (8000750 <SystemClock_Config+0x124>)
 8000664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000666:	4a3a      	ldr	r2, [pc, #232]	; (8000750 <SystemClock_Config+0x124>)
 8000668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066c:	6413      	str	r3, [r2, #64]	; 0x40
 800066e:	4b38      	ldr	r3, [pc, #224]	; (8000750 <SystemClock_Config+0x124>)
 8000670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800067a:	4b36      	ldr	r3, [pc, #216]	; (8000754 <SystemClock_Config+0x128>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4a35      	ldr	r2, [pc, #212]	; (8000754 <SystemClock_Config+0x128>)
 8000680:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000684:	6013      	str	r3, [r2, #0]
 8000686:	4b33      	ldr	r3, [pc, #204]	; (8000754 <SystemClock_Config+0x128>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800068e:	603b      	str	r3, [r7, #0]
 8000690:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000692:	2301      	movs	r3, #1
 8000694:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000698:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800069c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a0:	2302      	movs	r3, #2
 80006a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006ae:	2304      	movs	r3, #4
 80006b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 80006b4:	23d8      	movs	r3, #216	; 0xd8
 80006b6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ba:	2302      	movs	r3, #2
 80006bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006c0:	2304      	movs	r3, #4
 80006c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006c6:	2302      	movs	r3, #2
 80006c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006cc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80006d0:	4618      	mov	r0, r3
 80006d2:	f001 f8d5 	bl	8001880 <HAL_RCC_OscConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80006dc:	f000 fa40 	bl	8000b60 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006e0:	f001 f87e 	bl	80017e0 <HAL_PWREx_EnableOverDrive>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ea:	f000 fa39 	bl	8000b60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ee:	230f      	movs	r3, #15
 80006f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f4:	2302      	movs	r3, #2
 80006f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000700:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000704:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000708:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800070c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000710:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000714:	2107      	movs	r1, #7
 8000716:	4618      	mov	r0, r3
 8000718:	f001 fb60 	bl	8001ddc <HAL_RCC_ClockConfig>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8000722:	f000 fa1d 	bl	8000b60 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
 8000726:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800072a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800072c:	2300      	movs	r3, #0
 800072e:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000730:	2300      	movs	r3, #0
 8000732:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000734:	f107 0308 	add.w	r3, r7, #8
 8000738:	4618      	mov	r0, r3
 800073a:	f001 fd83 	bl	8002244 <HAL_RCCEx_PeriphCLKConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 8000744:	f000 fa0c 	bl	8000b60 <Error_Handler>
  }
}
 8000748:	bf00      	nop
 800074a:	37e0      	adds	r7, #224	; 0xe0
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40023800 	.word	0x40023800
 8000754:	40007000 	.word	0x40007000

08000758 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000768:	4b14      	ldr	r3, [pc, #80]	; (80007bc <MX_TIM6_Init+0x64>)
 800076a:	4a15      	ldr	r2, [pc, #84]	; (80007c0 <MX_TIM6_Init+0x68>)
 800076c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800076e:	4b13      	ldr	r3, [pc, #76]	; (80007bc <MX_TIM6_Init+0x64>)
 8000770:	2200      	movs	r2, #0
 8000772:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000774:	4b11      	ldr	r3, [pc, #68]	; (80007bc <MX_TIM6_Init+0x64>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800077a:	4b10      	ldr	r3, [pc, #64]	; (80007bc <MX_TIM6_Init+0x64>)
 800077c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000780:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000782:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <MX_TIM6_Init+0x64>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000788:	480c      	ldr	r0, [pc, #48]	; (80007bc <MX_TIM6_Init+0x64>)
 800078a:	f002 f983 	bl	8002a94 <HAL_TIM_Base_Init>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000794:	f000 f9e4 	bl	8000b60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000798:	2300      	movs	r3, #0
 800079a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800079c:	2300      	movs	r3, #0
 800079e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80007a0:	1d3b      	adds	r3, r7, #4
 80007a2:	4619      	mov	r1, r3
 80007a4:	4805      	ldr	r0, [pc, #20]	; (80007bc <MX_TIM6_Init+0x64>)
 80007a6:	f002 fc5b 	bl	8003060 <HAL_TIMEx_MasterConfigSynchronization>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80007b0:	f000 f9d6 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80007b4:	bf00      	nop
 80007b6:	3710      	adds	r7, #16
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20004eb0 	.word	0x20004eb0
 80007c0:	40001000 	.word	0x40001000

080007c4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80007d4:	4b14      	ldr	r3, [pc, #80]	; (8000828 <MX_TIM7_Init+0x64>)
 80007d6:	4a15      	ldr	r2, [pc, #84]	; (800082c <MX_TIM7_Init+0x68>)
 80007d8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80007da:	4b13      	ldr	r3, [pc, #76]	; (8000828 <MX_TIM7_Init+0x64>)
 80007dc:	2200      	movs	r2, #0
 80007de:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e0:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_TIM7_Init+0x64>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80007e6:	4b10      	ldr	r3, [pc, #64]	; (8000828 <MX_TIM7_Init+0x64>)
 80007e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007ec:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ee:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <MX_TIM7_Init+0x64>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80007f4:	480c      	ldr	r0, [pc, #48]	; (8000828 <MX_TIM7_Init+0x64>)
 80007f6:	f002 f94d 	bl	8002a94 <HAL_TIM_Base_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000800:	f000 f9ae 	bl	8000b60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000804:	2300      	movs	r3, #0
 8000806:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000808:	2300      	movs	r3, #0
 800080a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800080c:	1d3b      	adds	r3, r7, #4
 800080e:	4619      	mov	r1, r3
 8000810:	4805      	ldr	r0, [pc, #20]	; (8000828 <MX_TIM7_Init+0x64>)
 8000812:	f002 fc25 	bl	8003060 <HAL_TIMEx_MasterConfigSynchronization>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800081c:	f000 f9a0 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000820:	bf00      	nop
 8000822:	3710      	adds	r7, #16
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20004f80 	.word	0x20004f80
 800082c:	40001400 	.word	0x40001400

08000830 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000834:	4b15      	ldr	r3, [pc, #84]	; (800088c <MX_USART2_UART_Init+0x5c>)
 8000836:	4a16      	ldr	r2, [pc, #88]	; (8000890 <MX_USART2_UART_Init+0x60>)
 8000838:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800083a:	4b14      	ldr	r3, [pc, #80]	; (800088c <MX_USART2_UART_Init+0x5c>)
 800083c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000840:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8000842:	4b12      	ldr	r3, [pc, #72]	; (800088c <MX_USART2_UART_Init+0x5c>)
 8000844:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000848:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800084a:	4b10      	ldr	r3, [pc, #64]	; (800088c <MX_USART2_UART_Init+0x5c>)
 800084c:	2200      	movs	r2, #0
 800084e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8000850:	4b0e      	ldr	r3, [pc, #56]	; (800088c <MX_USART2_UART_Init+0x5c>)
 8000852:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000856:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000858:	4b0c      	ldr	r3, [pc, #48]	; (800088c <MX_USART2_UART_Init+0x5c>)
 800085a:	220c      	movs	r2, #12
 800085c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085e:	4b0b      	ldr	r3, [pc, #44]	; (800088c <MX_USART2_UART_Init+0x5c>)
 8000860:	2200      	movs	r2, #0
 8000862:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000864:	4b09      	ldr	r3, [pc, #36]	; (800088c <MX_USART2_UART_Init+0x5c>)
 8000866:	2200      	movs	r2, #0
 8000868:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800086a:	4b08      	ldr	r3, [pc, #32]	; (800088c <MX_USART2_UART_Init+0x5c>)
 800086c:	2200      	movs	r2, #0
 800086e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <MX_USART2_UART_Init+0x5c>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000876:	4805      	ldr	r0, [pc, #20]	; (800088c <MX_USART2_UART_Init+0x5c>)
 8000878:	f002 fc9e 	bl	80031b8 <HAL_UART_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8000882:	f000 f96d 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20004efc 	.word	0x20004efc
 8000890:	40004400 	.word	0x40004400

08000894 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000898:	4b14      	ldr	r3, [pc, #80]	; (80008ec <MX_USART3_UART_Init+0x58>)
 800089a:	4a15      	ldr	r2, [pc, #84]	; (80008f0 <MX_USART3_UART_Init+0x5c>)
 800089c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800089e:	4b13      	ldr	r3, [pc, #76]	; (80008ec <MX_USART3_UART_Init+0x58>)
 80008a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008a6:	4b11      	ldr	r3, [pc, #68]	; (80008ec <MX_USART3_UART_Init+0x58>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008ac:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <MX_USART3_UART_Init+0x58>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008b2:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <MX_USART3_UART_Init+0x58>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008b8:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <MX_USART3_UART_Init+0x58>)
 80008ba:	220c      	movs	r2, #12
 80008bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008be:	4b0b      	ldr	r3, [pc, #44]	; (80008ec <MX_USART3_UART_Init+0x58>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c4:	4b09      	ldr	r3, [pc, #36]	; (80008ec <MX_USART3_UART_Init+0x58>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ca:	4b08      	ldr	r3, [pc, #32]	; (80008ec <MX_USART3_UART_Init+0x58>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008d0:	4b06      	ldr	r3, [pc, #24]	; (80008ec <MX_USART3_UART_Init+0x58>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008d6:	4805      	ldr	r0, [pc, #20]	; (80008ec <MX_USART3_UART_Init+0x58>)
 80008d8:	f002 fc6e 	bl	80031b8 <HAL_UART_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80008e2:	f000 f93d 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	20004e2c 	.word	0x20004e2c
 80008f0:	40004800 	.word	0x40004800

080008f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08c      	sub	sp, #48	; 0x30
 80008f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fa:	f107 031c 	add.w	r3, r7, #28
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	605a      	str	r2, [r3, #4]
 8000904:	609a      	str	r2, [r3, #8]
 8000906:	60da      	str	r2, [r3, #12]
 8000908:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800090a:	4b81      	ldr	r3, [pc, #516]	; (8000b10 <MX_GPIO_Init+0x21c>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a80      	ldr	r2, [pc, #512]	; (8000b10 <MX_GPIO_Init+0x21c>)
 8000910:	f043 0304 	orr.w	r3, r3, #4
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b7e      	ldr	r3, [pc, #504]	; (8000b10 <MX_GPIO_Init+0x21c>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0304 	and.w	r3, r3, #4
 800091e:	61bb      	str	r3, [r7, #24]
 8000920:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000922:	4b7b      	ldr	r3, [pc, #492]	; (8000b10 <MX_GPIO_Init+0x21c>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a7a      	ldr	r2, [pc, #488]	; (8000b10 <MX_GPIO_Init+0x21c>)
 8000928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b78      	ldr	r3, [pc, #480]	; (8000b10 <MX_GPIO_Init+0x21c>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000936:	617b      	str	r3, [r7, #20]
 8000938:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800093a:	4b75      	ldr	r3, [pc, #468]	; (8000b10 <MX_GPIO_Init+0x21c>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a74      	ldr	r2, [pc, #464]	; (8000b10 <MX_GPIO_Init+0x21c>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b72      	ldr	r3, [pc, #456]	; (8000b10 <MX_GPIO_Init+0x21c>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	613b      	str	r3, [r7, #16]
 8000950:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000952:	4b6f      	ldr	r3, [pc, #444]	; (8000b10 <MX_GPIO_Init+0x21c>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a6e      	ldr	r2, [pc, #440]	; (8000b10 <MX_GPIO_Init+0x21c>)
 8000958:	f043 0302 	orr.w	r3, r3, #2
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b6c      	ldr	r3, [pc, #432]	; (8000b10 <MX_GPIO_Init+0x21c>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0302 	and.w	r3, r3, #2
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800096a:	4b69      	ldr	r3, [pc, #420]	; (8000b10 <MX_GPIO_Init+0x21c>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a68      	ldr	r2, [pc, #416]	; (8000b10 <MX_GPIO_Init+0x21c>)
 8000970:	f043 0308 	orr.w	r3, r3, #8
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b66      	ldr	r3, [pc, #408]	; (8000b10 <MX_GPIO_Init+0x21c>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0308 	and.w	r3, r3, #8
 800097e:	60bb      	str	r3, [r7, #8]
 8000980:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000982:	4b63      	ldr	r3, [pc, #396]	; (8000b10 <MX_GPIO_Init+0x21c>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a62      	ldr	r2, [pc, #392]	; (8000b10 <MX_GPIO_Init+0x21c>)
 8000988:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b60      	ldr	r3, [pc, #384]	; (8000b10 <MX_GPIO_Init+0x21c>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|DE_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800099a:	2200      	movs	r2, #0
 800099c:	f644 0181 	movw	r1, #18561	; 0x4881
 80009a0:	485c      	ldr	r0, [pc, #368]	; (8000b14 <MX_GPIO_Init+0x220>)
 80009a2:	f000 fed9 	bl	8001758 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RE_GPIO_Port, RE_Pin, GPIO_PIN_SET);
 80009a6:	2201      	movs	r2, #1
 80009a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009ac:	4859      	ldr	r0, [pc, #356]	; (8000b14 <MX_GPIO_Init+0x220>)
 80009ae:	f000 fed3 	bl	8001758 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2140      	movs	r1, #64	; 0x40
 80009b6:	4858      	ldr	r0, [pc, #352]	; (8000b18 <MX_GPIO_Init+0x224>)
 80009b8:	f000 fece 	bl	8001758 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009c2:	4b56      	ldr	r3, [pc, #344]	; (8000b1c <MX_GPIO_Init+0x228>)
 80009c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	4619      	mov	r1, r3
 80009d0:	4853      	ldr	r0, [pc, #332]	; (8000b20 <MX_GPIO_Init+0x22c>)
 80009d2:	f000 fd15 	bl	8001400 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80009d6:	2332      	movs	r3, #50	; 0x32
 80009d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009da:	2302      	movs	r3, #2
 80009dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e2:	2303      	movs	r3, #3
 80009e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009e6:	230b      	movs	r3, #11
 80009e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ea:	f107 031c 	add.w	r3, r7, #28
 80009ee:	4619      	mov	r1, r3
 80009f0:	484b      	ldr	r0, [pc, #300]	; (8000b20 <MX_GPIO_Init+0x22c>)
 80009f2:	f000 fd05 	bl	8001400 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80009f6:	2386      	movs	r3, #134	; 0x86
 80009f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fa:	2302      	movs	r3, #2
 80009fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a02:	2303      	movs	r3, #3
 8000a04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a06:	230b      	movs	r3, #11
 8000a08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0a:	f107 031c 	add.w	r3, r7, #28
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4844      	ldr	r0, [pc, #272]	; (8000b24 <MX_GPIO_Init+0x230>)
 8000a12:	f000 fcf5 	bl	8001400 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a16:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a24:	2300      	movs	r3, #0
 8000a26:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a28:	f107 031c 	add.w	r3, r7, #28
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4839      	ldr	r0, [pc, #228]	; (8000b14 <MX_GPIO_Init+0x220>)
 8000a30:	f000 fce6 	bl	8001400 <HAL_GPIO_Init>

  /*Configure GPIO pins : RE_Pin DE_Pin */
  GPIO_InitStruct.Pin = RE_Pin|DE_Pin;
 8000a34:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a42:	2303      	movs	r3, #3
 8000a44:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4831      	ldr	r0, [pc, #196]	; (8000b14 <MX_GPIO_Init+0x220>)
 8000a4e:	f000 fcd7 	bl	8001400 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000a52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a60:	2303      	movs	r3, #3
 8000a62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a64:	230b      	movs	r3, #11
 8000a66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000a68:	f107 031c 	add.w	r3, r7, #28
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4829      	ldr	r0, [pc, #164]	; (8000b14 <MX_GPIO_Init+0x220>)
 8000a70:	f000 fcc6 	bl	8001400 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a74:	2340      	movs	r3, #64	; 0x40
 8000a76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a80:	2300      	movs	r3, #0
 8000a82:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a84:	f107 031c 	add.w	r3, r7, #28
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4823      	ldr	r0, [pc, #140]	; (8000b18 <MX_GPIO_Init+0x224>)
 8000a8c:	f000 fcb8 	bl	8001400 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a90:	2380      	movs	r3, #128	; 0x80
 8000a92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a94:	2300      	movs	r3, #0
 8000a96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a9c:	f107 031c 	add.w	r3, r7, #28
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	481d      	ldr	r0, [pc, #116]	; (8000b18 <MX_GPIO_Init+0x224>)
 8000aa4:	f000 fcac 	bl	8001400 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000aa8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000aac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab6:	2303      	movs	r3, #3
 8000ab8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000aba:	230a      	movs	r3, #10
 8000abc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000abe:	f107 031c 	add.w	r3, r7, #28
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4817      	ldr	r0, [pc, #92]	; (8000b24 <MX_GPIO_Init+0x230>)
 8000ac6:	f000 fc9b 	bl	8001400 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000aca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ace:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ad8:	f107 031c 	add.w	r3, r7, #28
 8000adc:	4619      	mov	r1, r3
 8000ade:	4811      	ldr	r0, [pc, #68]	; (8000b24 <MX_GPIO_Init+0x230>)
 8000ae0:	f000 fc8e 	bl	8001400 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000ae4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aea:	2302      	movs	r3, #2
 8000aec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af2:	2303      	movs	r3, #3
 8000af4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000af6:	230b      	movs	r3, #11
 8000af8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000afa:	f107 031c 	add.w	r3, r7, #28
 8000afe:	4619      	mov	r1, r3
 8000b00:	4805      	ldr	r0, [pc, #20]	; (8000b18 <MX_GPIO_Init+0x224>)
 8000b02:	f000 fc7d 	bl	8001400 <HAL_GPIO_Init>

}
 8000b06:	bf00      	nop
 8000b08:	3730      	adds	r7, #48	; 0x30
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40023800 	.word	0x40023800
 8000b14:	40020400 	.word	0x40020400
 8000b18:	40021800 	.word	0x40021800
 8000b1c:	10110000 	.word	0x10110000
 8000b20:	40020800 	.word	0x40020800
 8000b24:	40020000 	.word	0x40020000

08000b28 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	vInitMBTask();
 8000b30:	f008 f9e4 	bl	8008efc <vInitMBTask>
  for(;;)
  {
    osDelay(1);
 8000b34:	2001      	movs	r0, #1
 8000b36:	f003 faf5 	bl	8004124 <osDelay>
 8000b3a:	e7fb      	b.n	8000b34 <StartDefaultTask+0xc>

08000b3c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM13) {
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a04      	ldr	r2, [pc, #16]	; (8000b5c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d101      	bne.n	8000b52 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b4e:	f000 fa9f 	bl	8001090 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40001c00 	.word	0x40001c00

08000b60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b64:	b672      	cpsid	i
}
 8000b66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <Error_Handler+0x8>
	...

08000b6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b72:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b76:	4a10      	ldr	r2, [pc, #64]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000b78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b86:	607b      	str	r3, [r7, #4]
 8000b88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8a:	4b0b      	ldr	r3, [pc, #44]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8e:	4a0a      	ldr	r2, [pc, #40]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000b90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b94:	6453      	str	r3, [r2, #68]	; 0x44
 8000b96:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b9e:	603b      	str	r3, [r7, #0]
 8000ba0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	210f      	movs	r1, #15
 8000ba6:	f06f 0001 	mvn.w	r0, #1
 8000baa:	f000 fb6d 	bl	8001288 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40023800 	.word	0x40023800

08000bbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a1a      	ldr	r2, [pc, #104]	; (8000c34 <HAL_TIM_Base_MspInit+0x78>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d114      	bne.n	8000bf8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000bce:	4b1a      	ldr	r3, [pc, #104]	; (8000c38 <HAL_TIM_Base_MspInit+0x7c>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd2:	4a19      	ldr	r2, [pc, #100]	; (8000c38 <HAL_TIM_Base_MspInit+0x7c>)
 8000bd4:	f043 0310 	orr.w	r3, r3, #16
 8000bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bda:	4b17      	ldr	r3, [pc, #92]	; (8000c38 <HAL_TIM_Base_MspInit+0x7c>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bde:	f003 0310 	and.w	r3, r3, #16
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000be6:	2200      	movs	r2, #0
 8000be8:	2105      	movs	r1, #5
 8000bea:	2036      	movs	r0, #54	; 0x36
 8000bec:	f000 fb4c 	bl	8001288 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bf0:	2036      	movs	r0, #54	; 0x36
 8000bf2:	f000 fb65 	bl	80012c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000bf6:	e018      	b.n	8000c2a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM7)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a0f      	ldr	r2, [pc, #60]	; (8000c3c <HAL_TIM_Base_MspInit+0x80>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d113      	bne.n	8000c2a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000c02:	4b0d      	ldr	r3, [pc, #52]	; (8000c38 <HAL_TIM_Base_MspInit+0x7c>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	4a0c      	ldr	r2, [pc, #48]	; (8000c38 <HAL_TIM_Base_MspInit+0x7c>)
 8000c08:	f043 0320 	orr.w	r3, r3, #32
 8000c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c0e:	4b0a      	ldr	r3, [pc, #40]	; (8000c38 <HAL_TIM_Base_MspInit+0x7c>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c12:	f003 0320 	and.w	r3, r3, #32
 8000c16:	60bb      	str	r3, [r7, #8]
 8000c18:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2105      	movs	r1, #5
 8000c1e:	2037      	movs	r0, #55	; 0x37
 8000c20:	f000 fb32 	bl	8001288 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000c24:	2037      	movs	r0, #55	; 0x37
 8000c26:	f000 fb4b 	bl	80012c0 <HAL_NVIC_EnableIRQ>
}
 8000c2a:	bf00      	nop
 8000c2c:	3710      	adds	r7, #16
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40001000 	.word	0x40001000
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40001400 	.word	0x40001400

08000c40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08c      	sub	sp, #48	; 0x30
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c48:	f107 031c 	add.w	r3, r7, #28
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a44      	ldr	r2, [pc, #272]	; (8000d70 <HAL_UART_MspInit+0x130>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d14c      	bne.n	8000cfc <HAL_UART_MspInit+0xbc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c62:	4b44      	ldr	r3, [pc, #272]	; (8000d74 <HAL_UART_MspInit+0x134>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	4a43      	ldr	r2, [pc, #268]	; (8000d74 <HAL_UART_MspInit+0x134>)
 8000c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c6e:	4b41      	ldr	r3, [pc, #260]	; (8000d74 <HAL_UART_MspInit+0x134>)
 8000c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c76:	61bb      	str	r3, [r7, #24]
 8000c78:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7a:	4b3e      	ldr	r3, [pc, #248]	; (8000d74 <HAL_UART_MspInit+0x134>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	4a3d      	ldr	r2, [pc, #244]	; (8000d74 <HAL_UART_MspInit+0x134>)
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	6313      	str	r3, [r2, #48]	; 0x30
 8000c86:	4b3b      	ldr	r3, [pc, #236]	; (8000d74 <HAL_UART_MspInit+0x134>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	617b      	str	r3, [r7, #20]
 8000c90:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c92:	4b38      	ldr	r3, [pc, #224]	; (8000d74 <HAL_UART_MspInit+0x134>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	4a37      	ldr	r2, [pc, #220]	; (8000d74 <HAL_UART_MspInit+0x134>)
 8000c98:	f043 0308 	orr.w	r3, r3, #8
 8000c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9e:	4b35      	ldr	r3, [pc, #212]	; (8000d74 <HAL_UART_MspInit+0x134>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	f003 0308 	and.w	r3, r3, #8
 8000ca6:	613b      	str	r3, [r7, #16]
 8000ca8:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000caa:	2308      	movs	r3, #8
 8000cac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb6:	2303      	movs	r3, #3
 8000cb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cba:	2307      	movs	r3, #7
 8000cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbe:	f107 031c 	add.w	r3, r7, #28
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	482c      	ldr	r0, [pc, #176]	; (8000d78 <HAL_UART_MspInit+0x138>)
 8000cc6:	f000 fb9b 	bl	8001400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000cca:	2320      	movs	r3, #32
 8000ccc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cda:	2307      	movs	r3, #7
 8000cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cde:	f107 031c 	add.w	r3, r7, #28
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4825      	ldr	r0, [pc, #148]	; (8000d7c <HAL_UART_MspInit+0x13c>)
 8000ce6:	f000 fb8b 	bl	8001400 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2105      	movs	r1, #5
 8000cee:	2026      	movs	r0, #38	; 0x26
 8000cf0:	f000 faca 	bl	8001288 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000cf4:	2026      	movs	r0, #38	; 0x26
 8000cf6:	f000 fae3 	bl	80012c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cfa:	e035      	b.n	8000d68 <HAL_UART_MspInit+0x128>
  else if(huart->Instance==USART3)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a1f      	ldr	r2, [pc, #124]	; (8000d80 <HAL_UART_MspInit+0x140>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d130      	bne.n	8000d68 <HAL_UART_MspInit+0x128>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d06:	4b1b      	ldr	r3, [pc, #108]	; (8000d74 <HAL_UART_MspInit+0x134>)
 8000d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0a:	4a1a      	ldr	r2, [pc, #104]	; (8000d74 <HAL_UART_MspInit+0x134>)
 8000d0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d10:	6413      	str	r3, [r2, #64]	; 0x40
 8000d12:	4b18      	ldr	r3, [pc, #96]	; (8000d74 <HAL_UART_MspInit+0x134>)
 8000d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d1e:	4b15      	ldr	r3, [pc, #84]	; (8000d74 <HAL_UART_MspInit+0x134>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	4a14      	ldr	r2, [pc, #80]	; (8000d74 <HAL_UART_MspInit+0x134>)
 8000d24:	f043 0308 	orr.w	r3, r3, #8
 8000d28:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2a:	4b12      	ldr	r3, [pc, #72]	; (8000d74 <HAL_UART_MspInit+0x134>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	f003 0308 	and.w	r3, r3, #8
 8000d32:	60bb      	str	r3, [r7, #8]
 8000d34:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d36:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d44:	2303      	movs	r3, #3
 8000d46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d48:	2307      	movs	r3, #7
 8000d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d4c:	f107 031c 	add.w	r3, r7, #28
 8000d50:	4619      	mov	r1, r3
 8000d52:	480a      	ldr	r0, [pc, #40]	; (8000d7c <HAL_UART_MspInit+0x13c>)
 8000d54:	f000 fb54 	bl	8001400 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	2105      	movs	r1, #5
 8000d5c:	2027      	movs	r0, #39	; 0x27
 8000d5e:	f000 fa93 	bl	8001288 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000d62:	2027      	movs	r0, #39	; 0x27
 8000d64:	f000 faac 	bl	80012c0 <HAL_NVIC_EnableIRQ>
}
 8000d68:	bf00      	nop
 8000d6a:	3730      	adds	r7, #48	; 0x30
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40004400 	.word	0x40004400
 8000d74:	40023800 	.word	0x40023800
 8000d78:	40020000 	.word	0x40020000
 8000d7c:	40020c00 	.word	0x40020c00
 8000d80:	40004800 	.word	0x40004800

08000d84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08c      	sub	sp, #48	; 0x30
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM13 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0);
 8000d94:	2200      	movs	r2, #0
 8000d96:	6879      	ldr	r1, [r7, #4]
 8000d98:	202c      	movs	r0, #44	; 0x2c
 8000d9a:	f000 fa75 	bl	8001288 <HAL_NVIC_SetPriority>

  /* Enable the TIM13 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8000d9e:	202c      	movs	r0, #44	; 0x2c
 8000da0:	f000 fa8e 	bl	80012c0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM13 clock */
  __HAL_RCC_TIM13_CLK_ENABLE();
 8000da4:	4b1f      	ldr	r3, [pc, #124]	; (8000e24 <HAL_InitTick+0xa0>)
 8000da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da8:	4a1e      	ldr	r2, [pc, #120]	; (8000e24 <HAL_InitTick+0xa0>)
 8000daa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dae:	6413      	str	r3, [r2, #64]	; 0x40
 8000db0:	4b1c      	ldr	r3, [pc, #112]	; (8000e24 <HAL_InitTick+0xa0>)
 8000db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000dbc:	f107 0210 	add.w	r2, r7, #16
 8000dc0:	f107 0314 	add.w	r3, r7, #20
 8000dc4:	4611      	mov	r1, r2
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f001 fa0a 	bl	80021e0 <HAL_RCC_GetClockConfig>

  /* Compute TIM13 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000dcc:	f001 f9e0 	bl	8002190 <HAL_RCC_GetPCLK1Freq>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM13 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dd8:	4a13      	ldr	r2, [pc, #76]	; (8000e28 <HAL_InitTick+0xa4>)
 8000dda:	fba2 2303 	umull	r2, r3, r2, r3
 8000dde:	0c9b      	lsrs	r3, r3, #18
 8000de0:	3b01      	subs	r3, #1
 8000de2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM13 */
  htim13.Instance = TIM13;
 8000de4:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <HAL_InitTick+0xa8>)
 8000de6:	4a12      	ldr	r2, [pc, #72]	; (8000e30 <HAL_InitTick+0xac>)
 8000de8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM13CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim13.Init.Period = (1000000U / 1000U) - 1U;
 8000dea:	4b10      	ldr	r3, [pc, #64]	; (8000e2c <HAL_InitTick+0xa8>)
 8000dec:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000df0:	60da      	str	r2, [r3, #12]
  htim13.Init.Prescaler = uwPrescalerValue;
 8000df2:	4a0e      	ldr	r2, [pc, #56]	; (8000e2c <HAL_InitTick+0xa8>)
 8000df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000df6:	6053      	str	r3, [r2, #4]
  htim13.Init.ClockDivision = 0;
 8000df8:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <HAL_InitTick+0xa8>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	611a      	str	r2, [r3, #16]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dfe:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <HAL_InitTick+0xa8>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim13) == HAL_OK)
 8000e04:	4809      	ldr	r0, [pc, #36]	; (8000e2c <HAL_InitTick+0xa8>)
 8000e06:	f001 fe45 	bl	8002a94 <HAL_TIM_Base_Init>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d104      	bne.n	8000e1a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim13);
 8000e10:	4806      	ldr	r0, [pc, #24]	; (8000e2c <HAL_InitTick+0xa8>)
 8000e12:	f001 fe97 	bl	8002b44 <HAL_TIM_Base_Start_IT>
 8000e16:	4603      	mov	r3, r0
 8000e18:	e000      	b.n	8000e1c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3730      	adds	r7, #48	; 0x30
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40023800 	.word	0x40023800
 8000e28:	431bde83 	.word	0x431bde83
 8000e2c:	20004fcc 	.word	0x20004fcc
 8000e30:	40001c00 	.word	0x40001c00

08000e34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e38:	e7fe      	b.n	8000e38 <NMI_Handler+0x4>

08000e3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e3e:	e7fe      	b.n	8000e3e <HardFault_Handler+0x4>

08000e40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e44:	e7fe      	b.n	8000e44 <MemManage_Handler+0x4>

08000e46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e4a:	e7fe      	b.n	8000e4a <BusFault_Handler+0x4>

08000e4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e50:	e7fe      	b.n	8000e50 <UsageFault_Handler+0x4>

08000e52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8000e64:	4802      	ldr	r0, [pc, #8]	; (8000e70 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8000e66:	f001 ff14 	bl	8002c92 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20004fcc 	.word	0x20004fcc

08000e74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
	return 1;
 8000e78:	2301      	movs	r3, #1
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <_kill>:

int _kill(int pid, int sig)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000e8e:	f009 ff47 	bl	800ad20 <__errno>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2216      	movs	r2, #22
 8000e96:	601a      	str	r2, [r3, #0]
	return -1;
 8000e98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <_exit>:

void _exit (int status)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000eac:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f7ff ffe7 	bl	8000e84 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000eb6:	e7fe      	b.n	8000eb6 <_exit+0x12>

08000eb8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]
 8000ec8:	e00a      	b.n	8000ee0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000eca:	f3af 8000 	nop.w
 8000ece:	4601      	mov	r1, r0
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	1c5a      	adds	r2, r3, #1
 8000ed4:	60ba      	str	r2, [r7, #8]
 8000ed6:	b2ca      	uxtb	r2, r1
 8000ed8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	3301      	adds	r3, #1
 8000ede:	617b      	str	r3, [r7, #20]
 8000ee0:	697a      	ldr	r2, [r7, #20]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	dbf0      	blt.n	8000eca <_read+0x12>
	}

return len;
 8000ee8:	687b      	ldr	r3, [r7, #4]
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3718      	adds	r7, #24
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b086      	sub	sp, #24
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	60f8      	str	r0, [r7, #12]
 8000efa:	60b9      	str	r1, [r7, #8]
 8000efc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000efe:	2300      	movs	r3, #0
 8000f00:	617b      	str	r3, [r7, #20]
 8000f02:	e009      	b.n	8000f18 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	1c5a      	adds	r2, r3, #1
 8000f08:	60ba      	str	r2, [r7, #8]
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	3301      	adds	r3, #1
 8000f16:	617b      	str	r3, [r7, #20]
 8000f18:	697a      	ldr	r2, [r7, #20]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	dbf1      	blt.n	8000f04 <_write+0x12>
	}
	return len;
 8000f20:	687b      	ldr	r3, [r7, #4]
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3718      	adds	r7, #24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <_close>:

int _close(int file)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	b083      	sub	sp, #12
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
	return -1;
 8000f32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr

08000f42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f42:	b480      	push	{r7}
 8000f44:	b083      	sub	sp, #12
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
 8000f4a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f52:	605a      	str	r2, [r3, #4]
	return 0;
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <_isatty>:

int _isatty(int file)
{
 8000f62:	b480      	push	{r7}
 8000f64:	b083      	sub	sp, #12
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
	return 1;
 8000f6a:	2301      	movs	r3, #1
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
	return 0;
 8000f84:	2300      	movs	r3, #0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3714      	adds	r7, #20
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
	...

08000f94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f9c:	4a14      	ldr	r2, [pc, #80]	; (8000ff0 <_sbrk+0x5c>)
 8000f9e:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <_sbrk+0x60>)
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fa8:	4b13      	ldr	r3, [pc, #76]	; (8000ff8 <_sbrk+0x64>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d102      	bne.n	8000fb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fb0:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <_sbrk+0x64>)
 8000fb2:	4a12      	ldr	r2, [pc, #72]	; (8000ffc <_sbrk+0x68>)
 8000fb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fb6:	4b10      	ldr	r3, [pc, #64]	; (8000ff8 <_sbrk+0x64>)
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d207      	bcs.n	8000fd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fc4:	f009 feac 	bl	800ad20 <__errno>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	220c      	movs	r2, #12
 8000fcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fce:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd2:	e009      	b.n	8000fe8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fd4:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <_sbrk+0x64>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fda:	4b07      	ldr	r3, [pc, #28]	; (8000ff8 <_sbrk+0x64>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	4a05      	ldr	r2, [pc, #20]	; (8000ff8 <_sbrk+0x64>)
 8000fe4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3718      	adds	r7, #24
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20080000 	.word	0x20080000
 8000ff4:	00000400 	.word	0x00000400
 8000ff8:	20000198 	.word	0x20000198
 8000ffc:	200051f0 	.word	0x200051f0

08001000 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001004:	4b06      	ldr	r3, [pc, #24]	; (8001020 <SystemInit+0x20>)
 8001006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800100a:	4a05      	ldr	r2, [pc, #20]	; (8001020 <SystemInit+0x20>)
 800100c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001010:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001024:	f8df d034 	ldr.w	sp, [pc, #52]	; 800105c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001028:	480d      	ldr	r0, [pc, #52]	; (8001060 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800102a:	490e      	ldr	r1, [pc, #56]	; (8001064 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800102c:	4a0e      	ldr	r2, [pc, #56]	; (8001068 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800102e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001030:	e002      	b.n	8001038 <LoopCopyDataInit>

08001032 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001032:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001034:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001036:	3304      	adds	r3, #4

08001038 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001038:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800103a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800103c:	d3f9      	bcc.n	8001032 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800103e:	4a0b      	ldr	r2, [pc, #44]	; (800106c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001040:	4c0b      	ldr	r4, [pc, #44]	; (8001070 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001042:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001044:	e001      	b.n	800104a <LoopFillZerobss>

08001046 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001046:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001048:	3204      	adds	r2, #4

0800104a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800104a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800104c:	d3fb      	bcc.n	8001046 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800104e:	f7ff ffd7 	bl	8001000 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001052:	f009 ff73 	bl	800af3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001056:	f7ff fabf 	bl	80005d8 <main>
  bx  lr    
 800105a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800105c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001060:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001064:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8001068:	0800c2d4 	.word	0x0800c2d4
  ldr r2, =_sbss
 800106c:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8001070:	200051ec 	.word	0x200051ec

08001074 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001074:	e7fe      	b.n	8001074 <ADC_IRQHandler>

08001076 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800107a:	2003      	movs	r0, #3
 800107c:	f000 f8f9 	bl	8001272 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001080:	200f      	movs	r0, #15
 8001082:	f7ff fe7f 	bl	8000d84 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001086:	f7ff fd71 	bl	8000b6c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800108a:	2300      	movs	r3, #0
}
 800108c:	4618      	mov	r0, r3
 800108e:	bd80      	pop	{r7, pc}

08001090 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001094:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <HAL_IncTick+0x20>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	461a      	mov	r2, r3
 800109a:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <HAL_IncTick+0x24>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4413      	add	r3, r2
 80010a0:	4a04      	ldr	r2, [pc, #16]	; (80010b4 <HAL_IncTick+0x24>)
 80010a2:	6013      	str	r3, [r2, #0]
}
 80010a4:	bf00      	nop
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	20000008 	.word	0x20000008
 80010b4:	20005018 	.word	0x20005018

080010b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  return uwTick;
 80010bc:	4b03      	ldr	r3, [pc, #12]	; (80010cc <HAL_GetTick+0x14>)
 80010be:	681b      	ldr	r3, [r3, #0]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	20005018 	.word	0x20005018

080010d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010d8:	f7ff ffee 	bl	80010b8 <HAL_GetTick>
 80010dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010e8:	d005      	beq.n	80010f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ea:	4b0a      	ldr	r3, [pc, #40]	; (8001114 <HAL_Delay+0x44>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	461a      	mov	r2, r3
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	4413      	add	r3, r2
 80010f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010f6:	bf00      	nop
 80010f8:	f7ff ffde 	bl	80010b8 <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	68fa      	ldr	r2, [r7, #12]
 8001104:	429a      	cmp	r2, r3
 8001106:	d8f7      	bhi.n	80010f8 <HAL_Delay+0x28>
  {
  }
}
 8001108:	bf00      	nop
 800110a:	bf00      	nop
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000008 	.word	0x20000008

08001118 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001128:	4b0b      	ldr	r3, [pc, #44]	; (8001158 <__NVIC_SetPriorityGrouping+0x40>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800112e:	68ba      	ldr	r2, [r7, #8]
 8001130:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001134:	4013      	ands	r3, r2
 8001136:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001140:	4b06      	ldr	r3, [pc, #24]	; (800115c <__NVIC_SetPriorityGrouping+0x44>)
 8001142:	4313      	orrs	r3, r2
 8001144:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001146:	4a04      	ldr	r2, [pc, #16]	; (8001158 <__NVIC_SetPriorityGrouping+0x40>)
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	60d3      	str	r3, [r2, #12]
}
 800114c:	bf00      	nop
 800114e:	3714      	adds	r7, #20
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	e000ed00 	.word	0xe000ed00
 800115c:	05fa0000 	.word	0x05fa0000

08001160 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001164:	4b04      	ldr	r3, [pc, #16]	; (8001178 <__NVIC_GetPriorityGrouping+0x18>)
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	0a1b      	lsrs	r3, r3, #8
 800116a:	f003 0307 	and.w	r3, r3, #7
}
 800116e:	4618      	mov	r0, r3
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118a:	2b00      	cmp	r3, #0
 800118c:	db0b      	blt.n	80011a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	f003 021f 	and.w	r2, r3, #31
 8001194:	4907      	ldr	r1, [pc, #28]	; (80011b4 <__NVIC_EnableIRQ+0x38>)
 8001196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119a:	095b      	lsrs	r3, r3, #5
 800119c:	2001      	movs	r0, #1
 800119e:	fa00 f202 	lsl.w	r2, r0, r2
 80011a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	e000e100 	.word	0xe000e100

080011b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	6039      	str	r1, [r7, #0]
 80011c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	db0a      	blt.n	80011e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	490c      	ldr	r1, [pc, #48]	; (8001204 <__NVIC_SetPriority+0x4c>)
 80011d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d6:	0112      	lsls	r2, r2, #4
 80011d8:	b2d2      	uxtb	r2, r2
 80011da:	440b      	add	r3, r1
 80011dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011e0:	e00a      	b.n	80011f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	4908      	ldr	r1, [pc, #32]	; (8001208 <__NVIC_SetPriority+0x50>)
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	f003 030f 	and.w	r3, r3, #15
 80011ee:	3b04      	subs	r3, #4
 80011f0:	0112      	lsls	r2, r2, #4
 80011f2:	b2d2      	uxtb	r2, r2
 80011f4:	440b      	add	r3, r1
 80011f6:	761a      	strb	r2, [r3, #24]
}
 80011f8:	bf00      	nop
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	e000e100 	.word	0xe000e100
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800120c:	b480      	push	{r7}
 800120e:	b089      	sub	sp, #36	; 0x24
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	f1c3 0307 	rsb	r3, r3, #7
 8001226:	2b04      	cmp	r3, #4
 8001228:	bf28      	it	cs
 800122a:	2304      	movcs	r3, #4
 800122c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	3304      	adds	r3, #4
 8001232:	2b06      	cmp	r3, #6
 8001234:	d902      	bls.n	800123c <NVIC_EncodePriority+0x30>
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	3b03      	subs	r3, #3
 800123a:	e000      	b.n	800123e <NVIC_EncodePriority+0x32>
 800123c:	2300      	movs	r3, #0
 800123e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001240:	f04f 32ff 	mov.w	r2, #4294967295
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43da      	mvns	r2, r3
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	401a      	ands	r2, r3
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001254:	f04f 31ff 	mov.w	r1, #4294967295
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	fa01 f303 	lsl.w	r3, r1, r3
 800125e:	43d9      	mvns	r1, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001264:	4313      	orrs	r3, r2
         );
}
 8001266:	4618      	mov	r0, r3
 8001268:	3724      	adds	r7, #36	; 0x24
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr

08001272 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b082      	sub	sp, #8
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff ff4c 	bl	8001118 <__NVIC_SetPriorityGrouping>
}
 8001280:	bf00      	nop
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
 8001294:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001296:	2300      	movs	r3, #0
 8001298:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800129a:	f7ff ff61 	bl	8001160 <__NVIC_GetPriorityGrouping>
 800129e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012a0:	687a      	ldr	r2, [r7, #4]
 80012a2:	68b9      	ldr	r1, [r7, #8]
 80012a4:	6978      	ldr	r0, [r7, #20]
 80012a6:	f7ff ffb1 	bl	800120c <NVIC_EncodePriority>
 80012aa:	4602      	mov	r2, r0
 80012ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012b0:	4611      	mov	r1, r2
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff ff80 	bl	80011b8 <__NVIC_SetPriority>
}
 80012b8:	bf00      	nop
 80012ba:	3718      	adds	r7, #24
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff ff54 	bl	800117c <__NVIC_EnableIRQ>
}
 80012d4:	bf00      	nop
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80012ea:	f7ff fee5 	bl	80010b8 <HAL_GetTick>
 80012ee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d008      	beq.n	800130e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2280      	movs	r2, #128	; 0x80
 8001300:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2200      	movs	r2, #0
 8001306:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e052      	b.n	80013b4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f022 0216 	bic.w	r2, r2, #22
 800131c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	695a      	ldr	r2, [r3, #20]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800132c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001332:	2b00      	cmp	r3, #0
 8001334:	d103      	bne.n	800133e <HAL_DMA_Abort+0x62>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800133a:	2b00      	cmp	r3, #0
 800133c:	d007      	beq.n	800134e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f022 0208 	bic.w	r2, r2, #8
 800134c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f022 0201 	bic.w	r2, r2, #1
 800135c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800135e:	e013      	b.n	8001388 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001360:	f7ff feaa 	bl	80010b8 <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b05      	cmp	r3, #5
 800136c:	d90c      	bls.n	8001388 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2220      	movs	r2, #32
 8001372:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2200      	movs	r2, #0
 8001378:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2203      	movs	r2, #3
 8001380:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001384:	2303      	movs	r3, #3
 8001386:	e015      	b.n	80013b4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	2b00      	cmp	r3, #0
 8001394:	d1e4      	bne.n	8001360 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800139a:	223f      	movs	r2, #63	; 0x3f
 800139c:	409a      	lsls	r2, r3
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2200      	movs	r2, #0
 80013a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2201      	movs	r2, #1
 80013ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80013b2:	2300      	movs	r3, #0
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3710      	adds	r7, #16
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d004      	beq.n	80013da <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2280      	movs	r2, #128	; 0x80
 80013d4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e00c      	b.n	80013f4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2205      	movs	r2, #5
 80013de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f022 0201 	bic.w	r2, r2, #1
 80013f0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80013f2:	2300      	movs	r3, #0
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001400:	b480      	push	{r7}
 8001402:	b089      	sub	sp, #36	; 0x24
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800140a:	2300      	movs	r3, #0
 800140c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800140e:	2300      	movs	r3, #0
 8001410:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001412:	2300      	movs	r3, #0
 8001414:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001416:	2300      	movs	r3, #0
 8001418:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800141a:	2300      	movs	r3, #0
 800141c:	61fb      	str	r3, [r7, #28]
 800141e:	e175      	b.n	800170c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001420:	2201      	movs	r2, #1
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	697a      	ldr	r2, [r7, #20]
 8001430:	4013      	ands	r3, r2
 8001432:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	429a      	cmp	r2, r3
 800143a:	f040 8164 	bne.w	8001706 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d00b      	beq.n	800145e <HAL_GPIO_Init+0x5e>
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	2b02      	cmp	r3, #2
 800144c:	d007      	beq.n	800145e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001452:	2b11      	cmp	r3, #17
 8001454:	d003      	beq.n	800145e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	2b12      	cmp	r3, #18
 800145c:	d130      	bne.n	80014c0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	2203      	movs	r2, #3
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	43db      	mvns	r3, r3
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	4013      	ands	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	68da      	ldr	r2, [r3, #12]
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	4313      	orrs	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001494:	2201      	movs	r2, #1
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	43db      	mvns	r3, r3
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	4013      	ands	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	091b      	lsrs	r3, r3, #4
 80014aa:	f003 0201 	and.w	r2, r3, #1
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	2203      	movs	r2, #3
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	43db      	mvns	r3, r3
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	4013      	ands	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	689a      	ldr	r2, [r3, #8]
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d003      	beq.n	8001500 <HAL_GPIO_Init+0x100>
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	2b12      	cmp	r3, #18
 80014fe:	d123      	bne.n	8001548 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	08da      	lsrs	r2, r3, #3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	3208      	adds	r2, #8
 8001508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800150c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	f003 0307 	and.w	r3, r3, #7
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	220f      	movs	r2, #15
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	43db      	mvns	r3, r3
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	4013      	ands	r3, r2
 8001522:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	691a      	ldr	r2, [r3, #16]
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	f003 0307 	and.w	r3, r3, #7
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	4313      	orrs	r3, r2
 8001538:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	08da      	lsrs	r2, r3, #3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	3208      	adds	r2, #8
 8001542:	69b9      	ldr	r1, [r7, #24]
 8001544:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	2203      	movs	r2, #3
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	43db      	mvns	r3, r3
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	4013      	ands	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f003 0203 	and.w	r2, r3, #3
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	4313      	orrs	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001584:	2b00      	cmp	r3, #0
 8001586:	f000 80be 	beq.w	8001706 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800158a:	4b66      	ldr	r3, [pc, #408]	; (8001724 <HAL_GPIO_Init+0x324>)
 800158c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158e:	4a65      	ldr	r2, [pc, #404]	; (8001724 <HAL_GPIO_Init+0x324>)
 8001590:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001594:	6453      	str	r3, [r2, #68]	; 0x44
 8001596:	4b63      	ldr	r3, [pc, #396]	; (8001724 <HAL_GPIO_Init+0x324>)
 8001598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80015a2:	4a61      	ldr	r2, [pc, #388]	; (8001728 <HAL_GPIO_Init+0x328>)
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	089b      	lsrs	r3, r3, #2
 80015a8:	3302      	adds	r3, #2
 80015aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	f003 0303 	and.w	r3, r3, #3
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	220f      	movs	r2, #15
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	43db      	mvns	r3, r3
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	4013      	ands	r3, r2
 80015c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a58      	ldr	r2, [pc, #352]	; (800172c <HAL_GPIO_Init+0x32c>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d037      	beq.n	800163e <HAL_GPIO_Init+0x23e>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a57      	ldr	r2, [pc, #348]	; (8001730 <HAL_GPIO_Init+0x330>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d031      	beq.n	800163a <HAL_GPIO_Init+0x23a>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a56      	ldr	r2, [pc, #344]	; (8001734 <HAL_GPIO_Init+0x334>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d02b      	beq.n	8001636 <HAL_GPIO_Init+0x236>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a55      	ldr	r2, [pc, #340]	; (8001738 <HAL_GPIO_Init+0x338>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d025      	beq.n	8001632 <HAL_GPIO_Init+0x232>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a54      	ldr	r2, [pc, #336]	; (800173c <HAL_GPIO_Init+0x33c>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d01f      	beq.n	800162e <HAL_GPIO_Init+0x22e>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a53      	ldr	r2, [pc, #332]	; (8001740 <HAL_GPIO_Init+0x340>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d019      	beq.n	800162a <HAL_GPIO_Init+0x22a>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a52      	ldr	r2, [pc, #328]	; (8001744 <HAL_GPIO_Init+0x344>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d013      	beq.n	8001626 <HAL_GPIO_Init+0x226>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a51      	ldr	r2, [pc, #324]	; (8001748 <HAL_GPIO_Init+0x348>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d00d      	beq.n	8001622 <HAL_GPIO_Init+0x222>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a50      	ldr	r2, [pc, #320]	; (800174c <HAL_GPIO_Init+0x34c>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d007      	beq.n	800161e <HAL_GPIO_Init+0x21e>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a4f      	ldr	r2, [pc, #316]	; (8001750 <HAL_GPIO_Init+0x350>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d101      	bne.n	800161a <HAL_GPIO_Init+0x21a>
 8001616:	2309      	movs	r3, #9
 8001618:	e012      	b.n	8001640 <HAL_GPIO_Init+0x240>
 800161a:	230a      	movs	r3, #10
 800161c:	e010      	b.n	8001640 <HAL_GPIO_Init+0x240>
 800161e:	2308      	movs	r3, #8
 8001620:	e00e      	b.n	8001640 <HAL_GPIO_Init+0x240>
 8001622:	2307      	movs	r3, #7
 8001624:	e00c      	b.n	8001640 <HAL_GPIO_Init+0x240>
 8001626:	2306      	movs	r3, #6
 8001628:	e00a      	b.n	8001640 <HAL_GPIO_Init+0x240>
 800162a:	2305      	movs	r3, #5
 800162c:	e008      	b.n	8001640 <HAL_GPIO_Init+0x240>
 800162e:	2304      	movs	r3, #4
 8001630:	e006      	b.n	8001640 <HAL_GPIO_Init+0x240>
 8001632:	2303      	movs	r3, #3
 8001634:	e004      	b.n	8001640 <HAL_GPIO_Init+0x240>
 8001636:	2302      	movs	r3, #2
 8001638:	e002      	b.n	8001640 <HAL_GPIO_Init+0x240>
 800163a:	2301      	movs	r3, #1
 800163c:	e000      	b.n	8001640 <HAL_GPIO_Init+0x240>
 800163e:	2300      	movs	r3, #0
 8001640:	69fa      	ldr	r2, [r7, #28]
 8001642:	f002 0203 	and.w	r2, r2, #3
 8001646:	0092      	lsls	r2, r2, #2
 8001648:	4093      	lsls	r3, r2
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	4313      	orrs	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001650:	4935      	ldr	r1, [pc, #212]	; (8001728 <HAL_GPIO_Init+0x328>)
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	089b      	lsrs	r3, r3, #2
 8001656:	3302      	adds	r3, #2
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800165e:	4b3d      	ldr	r3, [pc, #244]	; (8001754 <HAL_GPIO_Init+0x354>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	43db      	mvns	r3, r3
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	4013      	ands	r3, r2
 800166c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d003      	beq.n	8001682 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	4313      	orrs	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001682:	4a34      	ldr	r2, [pc, #208]	; (8001754 <HAL_GPIO_Init+0x354>)
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001688:	4b32      	ldr	r3, [pc, #200]	; (8001754 <HAL_GPIO_Init+0x354>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	43db      	mvns	r3, r3
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	4013      	ands	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d003      	beq.n	80016ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016ac:	4a29      	ldr	r2, [pc, #164]	; (8001754 <HAL_GPIO_Init+0x354>)
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016b2:	4b28      	ldr	r3, [pc, #160]	; (8001754 <HAL_GPIO_Init+0x354>)
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	43db      	mvns	r3, r3
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	4013      	ands	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d003      	beq.n	80016d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80016ce:	69ba      	ldr	r2, [r7, #24]
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016d6:	4a1f      	ldr	r2, [pc, #124]	; (8001754 <HAL_GPIO_Init+0x354>)
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016dc:	4b1d      	ldr	r3, [pc, #116]	; (8001754 <HAL_GPIO_Init+0x354>)
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	43db      	mvns	r3, r3
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	4013      	ands	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d003      	beq.n	8001700 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001700:	4a14      	ldr	r2, [pc, #80]	; (8001754 <HAL_GPIO_Init+0x354>)
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	3301      	adds	r3, #1
 800170a:	61fb      	str	r3, [r7, #28]
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	2b0f      	cmp	r3, #15
 8001710:	f67f ae86 	bls.w	8001420 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001714:	bf00      	nop
 8001716:	bf00      	nop
 8001718:	3724      	adds	r7, #36	; 0x24
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	40023800 	.word	0x40023800
 8001728:	40013800 	.word	0x40013800
 800172c:	40020000 	.word	0x40020000
 8001730:	40020400 	.word	0x40020400
 8001734:	40020800 	.word	0x40020800
 8001738:	40020c00 	.word	0x40020c00
 800173c:	40021000 	.word	0x40021000
 8001740:	40021400 	.word	0x40021400
 8001744:	40021800 	.word	0x40021800
 8001748:	40021c00 	.word	0x40021c00
 800174c:	40022000 	.word	0x40022000
 8001750:	40022400 	.word	0x40022400
 8001754:	40013c00 	.word	0x40013c00

08001758 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	460b      	mov	r3, r1
 8001762:	807b      	strh	r3, [r7, #2]
 8001764:	4613      	mov	r3, r2
 8001766:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001768:	787b      	ldrb	r3, [r7, #1]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d003      	beq.n	8001776 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800176e:	887a      	ldrh	r2, [r7, #2]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001774:	e003      	b.n	800177e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001776:	887b      	ldrh	r3, [r7, #2]
 8001778:	041a      	lsls	r2, r3, #16
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	619a      	str	r2, [r3, #24]
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800178a:	b480      	push	{r7}
 800178c:	b085      	sub	sp, #20
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
 8001792:	460b      	mov	r3, r1
 8001794:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	695b      	ldr	r3, [r3, #20]
 800179a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800179c:	887a      	ldrh	r2, [r7, #2]
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	4013      	ands	r3, r2
 80017a2:	041a      	lsls	r2, r3, #16
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	43d9      	mvns	r1, r3
 80017a8:	887b      	ldrh	r3, [r7, #2]
 80017aa:	400b      	ands	r3, r1
 80017ac:	431a      	orrs	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	619a      	str	r2, [r3, #24]
}
 80017b2:	bf00      	nop
 80017b4:	3714      	adds	r7, #20
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
	...

080017c0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017c4:	4b05      	ldr	r3, [pc, #20]	; (80017dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a04      	ldr	r2, [pc, #16]	; (80017dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80017ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ce:	6013      	str	r3, [r2, #0]
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	40007000 	.word	0x40007000

080017e0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80017e6:	2300      	movs	r3, #0
 80017e8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80017ea:	4b23      	ldr	r3, [pc, #140]	; (8001878 <HAL_PWREx_EnableOverDrive+0x98>)
 80017ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ee:	4a22      	ldr	r2, [pc, #136]	; (8001878 <HAL_PWREx_EnableOverDrive+0x98>)
 80017f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017f4:	6413      	str	r3, [r2, #64]	; 0x40
 80017f6:	4b20      	ldr	r3, [pc, #128]	; (8001878 <HAL_PWREx_EnableOverDrive+0x98>)
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017fe:	603b      	str	r3, [r7, #0]
 8001800:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001802:	4b1e      	ldr	r3, [pc, #120]	; (800187c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a1d      	ldr	r2, [pc, #116]	; (800187c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001808:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800180c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800180e:	f7ff fc53 	bl	80010b8 <HAL_GetTick>
 8001812:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001814:	e009      	b.n	800182a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001816:	f7ff fc4f 	bl	80010b8 <HAL_GetTick>
 800181a:	4602      	mov	r2, r0
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001824:	d901      	bls.n	800182a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e022      	b.n	8001870 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800182a:	4b14      	ldr	r3, [pc, #80]	; (800187c <HAL_PWREx_EnableOverDrive+0x9c>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001832:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001836:	d1ee      	bne.n	8001816 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001838:	4b10      	ldr	r3, [pc, #64]	; (800187c <HAL_PWREx_EnableOverDrive+0x9c>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a0f      	ldr	r2, [pc, #60]	; (800187c <HAL_PWREx_EnableOverDrive+0x9c>)
 800183e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001842:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001844:	f7ff fc38 	bl	80010b8 <HAL_GetTick>
 8001848:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800184a:	e009      	b.n	8001860 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800184c:	f7ff fc34 	bl	80010b8 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800185a:	d901      	bls.n	8001860 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e007      	b.n	8001870 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001860:	4b06      	ldr	r3, [pc, #24]	; (800187c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001868:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800186c:	d1ee      	bne.n	800184c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800186e:	2300      	movs	r3, #0
}
 8001870:	4618      	mov	r0, r3
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40023800 	.word	0x40023800
 800187c:	40007000 	.word	0x40007000

08001880 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001888:	2300      	movs	r3, #0
 800188a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d101      	bne.n	8001896 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e29b      	b.n	8001dce <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	2b00      	cmp	r3, #0
 80018a0:	f000 8087 	beq.w	80019b2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018a4:	4b96      	ldr	r3, [pc, #600]	; (8001b00 <HAL_RCC_OscConfig+0x280>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f003 030c 	and.w	r3, r3, #12
 80018ac:	2b04      	cmp	r3, #4
 80018ae:	d00c      	beq.n	80018ca <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018b0:	4b93      	ldr	r3, [pc, #588]	; (8001b00 <HAL_RCC_OscConfig+0x280>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f003 030c 	and.w	r3, r3, #12
 80018b8:	2b08      	cmp	r3, #8
 80018ba:	d112      	bne.n	80018e2 <HAL_RCC_OscConfig+0x62>
 80018bc:	4b90      	ldr	r3, [pc, #576]	; (8001b00 <HAL_RCC_OscConfig+0x280>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018c8:	d10b      	bne.n	80018e2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ca:	4b8d      	ldr	r3, [pc, #564]	; (8001b00 <HAL_RCC_OscConfig+0x280>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d06c      	beq.n	80019b0 <HAL_RCC_OscConfig+0x130>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d168      	bne.n	80019b0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e275      	b.n	8001dce <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018ea:	d106      	bne.n	80018fa <HAL_RCC_OscConfig+0x7a>
 80018ec:	4b84      	ldr	r3, [pc, #528]	; (8001b00 <HAL_RCC_OscConfig+0x280>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a83      	ldr	r2, [pc, #524]	; (8001b00 <HAL_RCC_OscConfig+0x280>)
 80018f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018f6:	6013      	str	r3, [r2, #0]
 80018f8:	e02e      	b.n	8001958 <HAL_RCC_OscConfig+0xd8>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d10c      	bne.n	800191c <HAL_RCC_OscConfig+0x9c>
 8001902:	4b7f      	ldr	r3, [pc, #508]	; (8001b00 <HAL_RCC_OscConfig+0x280>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a7e      	ldr	r2, [pc, #504]	; (8001b00 <HAL_RCC_OscConfig+0x280>)
 8001908:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800190c:	6013      	str	r3, [r2, #0]
 800190e:	4b7c      	ldr	r3, [pc, #496]	; (8001b00 <HAL_RCC_OscConfig+0x280>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a7b      	ldr	r2, [pc, #492]	; (8001b00 <HAL_RCC_OscConfig+0x280>)
 8001914:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001918:	6013      	str	r3, [r2, #0]
 800191a:	e01d      	b.n	8001958 <HAL_RCC_OscConfig+0xd8>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001924:	d10c      	bne.n	8001940 <HAL_RCC_OscConfig+0xc0>
 8001926:	4b76      	ldr	r3, [pc, #472]	; (8001b00 <HAL_RCC_OscConfig+0x280>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a75      	ldr	r2, [pc, #468]	; (8001b00 <HAL_RCC_OscConfig+0x280>)
 800192c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001930:	6013      	str	r3, [r2, #0]
 8001932:	4b73      	ldr	r3, [pc, #460]	; (8001b00 <HAL_RCC_OscConfig+0x280>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a72      	ldr	r2, [pc, #456]	; (8001b00 <HAL_RCC_OscConfig+0x280>)
 8001938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800193c:	6013      	str	r3, [r2, #0]
 800193e:	e00b      	b.n	8001958 <HAL_RCC_OscConfig+0xd8>
 8001940:	4b6f      	ldr	r3, [pc, #444]	; (8001b00 <HAL_RCC_OscConfig+0x280>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a6e      	ldr	r2, [pc, #440]	; (8001b00 <HAL_RCC_OscConfig+0x280>)
 8001946:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800194a:	6013      	str	r3, [r2, #0]
 800194c:	4b6c      	ldr	r3, [pc, #432]	; (8001b00 <HAL_RCC_OscConfig+0x280>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a6b      	ldr	r2, [pc, #428]	; (8001b00 <HAL_RCC_OscConfig+0x280>)
 8001952:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001956:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d013      	beq.n	8001988 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001960:	f7ff fbaa 	bl	80010b8 <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001968:	f7ff fba6 	bl	80010b8 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b64      	cmp	r3, #100	; 0x64
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e229      	b.n	8001dce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800197a:	4b61      	ldr	r3, [pc, #388]	; (8001b00 <HAL_RCC_OscConfig+0x280>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d0f0      	beq.n	8001968 <HAL_RCC_OscConfig+0xe8>
 8001986:	e014      	b.n	80019b2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001988:	f7ff fb96 	bl	80010b8 <HAL_GetTick>
 800198c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001990:	f7ff fb92 	bl	80010b8 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b64      	cmp	r3, #100	; 0x64
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e215      	b.n	8001dce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019a2:	4b57      	ldr	r3, [pc, #348]	; (8001b00 <HAL_RCC_OscConfig+0x280>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1f0      	bne.n	8001990 <HAL_RCC_OscConfig+0x110>
 80019ae:	e000      	b.n	80019b2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d069      	beq.n	8001a92 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019be:	4b50      	ldr	r3, [pc, #320]	; (8001b00 <HAL_RCC_OscConfig+0x280>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f003 030c 	and.w	r3, r3, #12
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d00b      	beq.n	80019e2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019ca:	4b4d      	ldr	r3, [pc, #308]	; (8001b00 <HAL_RCC_OscConfig+0x280>)
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	f003 030c 	and.w	r3, r3, #12
 80019d2:	2b08      	cmp	r3, #8
 80019d4:	d11c      	bne.n	8001a10 <HAL_RCC_OscConfig+0x190>
 80019d6:	4b4a      	ldr	r3, [pc, #296]	; (8001b00 <HAL_RCC_OscConfig+0x280>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d116      	bne.n	8001a10 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019e2:	4b47      	ldr	r3, [pc, #284]	; (8001b00 <HAL_RCC_OscConfig+0x280>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d005      	beq.n	80019fa <HAL_RCC_OscConfig+0x17a>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d001      	beq.n	80019fa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e1e9      	b.n	8001dce <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019fa:	4b41      	ldr	r3, [pc, #260]	; (8001b00 <HAL_RCC_OscConfig+0x280>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	691b      	ldr	r3, [r3, #16]
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	493d      	ldr	r1, [pc, #244]	; (8001b00 <HAL_RCC_OscConfig+0x280>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a0e:	e040      	b.n	8001a92 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d023      	beq.n	8001a60 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a18:	4b39      	ldr	r3, [pc, #228]	; (8001b00 <HAL_RCC_OscConfig+0x280>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a38      	ldr	r2, [pc, #224]	; (8001b00 <HAL_RCC_OscConfig+0x280>)
 8001a1e:	f043 0301 	orr.w	r3, r3, #1
 8001a22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a24:	f7ff fb48 	bl	80010b8 <HAL_GetTick>
 8001a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a2a:	e008      	b.n	8001a3e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a2c:	f7ff fb44 	bl	80010b8 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e1c7      	b.n	8001dce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a3e:	4b30      	ldr	r3, [pc, #192]	; (8001b00 <HAL_RCC_OscConfig+0x280>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d0f0      	beq.n	8001a2c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a4a:	4b2d      	ldr	r3, [pc, #180]	; (8001b00 <HAL_RCC_OscConfig+0x280>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	691b      	ldr	r3, [r3, #16]
 8001a56:	00db      	lsls	r3, r3, #3
 8001a58:	4929      	ldr	r1, [pc, #164]	; (8001b00 <HAL_RCC_OscConfig+0x280>)
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	600b      	str	r3, [r1, #0]
 8001a5e:	e018      	b.n	8001a92 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a60:	4b27      	ldr	r3, [pc, #156]	; (8001b00 <HAL_RCC_OscConfig+0x280>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a26      	ldr	r2, [pc, #152]	; (8001b00 <HAL_RCC_OscConfig+0x280>)
 8001a66:	f023 0301 	bic.w	r3, r3, #1
 8001a6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a6c:	f7ff fb24 	bl	80010b8 <HAL_GetTick>
 8001a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a72:	e008      	b.n	8001a86 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a74:	f7ff fb20 	bl	80010b8 <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e1a3      	b.n	8001dce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a86:	4b1e      	ldr	r3, [pc, #120]	; (8001b00 <HAL_RCC_OscConfig+0x280>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1f0      	bne.n	8001a74 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0308 	and.w	r3, r3, #8
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d038      	beq.n	8001b10 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	695b      	ldr	r3, [r3, #20]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d019      	beq.n	8001ada <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aa6:	4b16      	ldr	r3, [pc, #88]	; (8001b00 <HAL_RCC_OscConfig+0x280>)
 8001aa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001aaa:	4a15      	ldr	r2, [pc, #84]	; (8001b00 <HAL_RCC_OscConfig+0x280>)
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ab2:	f7ff fb01 	bl	80010b8 <HAL_GetTick>
 8001ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ab8:	e008      	b.n	8001acc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aba:	f7ff fafd 	bl	80010b8 <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d901      	bls.n	8001acc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e180      	b.n	8001dce <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001acc:	4b0c      	ldr	r3, [pc, #48]	; (8001b00 <HAL_RCC_OscConfig+0x280>)
 8001ace:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ad0:	f003 0302 	and.w	r3, r3, #2
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d0f0      	beq.n	8001aba <HAL_RCC_OscConfig+0x23a>
 8001ad8:	e01a      	b.n	8001b10 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ada:	4b09      	ldr	r3, [pc, #36]	; (8001b00 <HAL_RCC_OscConfig+0x280>)
 8001adc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ade:	4a08      	ldr	r2, [pc, #32]	; (8001b00 <HAL_RCC_OscConfig+0x280>)
 8001ae0:	f023 0301 	bic.w	r3, r3, #1
 8001ae4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ae6:	f7ff fae7 	bl	80010b8 <HAL_GetTick>
 8001aea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aec:	e00a      	b.n	8001b04 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aee:	f7ff fae3 	bl	80010b8 <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d903      	bls.n	8001b04 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e166      	b.n	8001dce <HAL_RCC_OscConfig+0x54e>
 8001b00:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b04:	4b92      	ldr	r3, [pc, #584]	; (8001d50 <HAL_RCC_OscConfig+0x4d0>)
 8001b06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1ee      	bne.n	8001aee <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	f000 80a4 	beq.w	8001c66 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b1e:	4b8c      	ldr	r3, [pc, #560]	; (8001d50 <HAL_RCC_OscConfig+0x4d0>)
 8001b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d10d      	bne.n	8001b46 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b2a:	4b89      	ldr	r3, [pc, #548]	; (8001d50 <HAL_RCC_OscConfig+0x4d0>)
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2e:	4a88      	ldr	r2, [pc, #544]	; (8001d50 <HAL_RCC_OscConfig+0x4d0>)
 8001b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b34:	6413      	str	r3, [r2, #64]	; 0x40
 8001b36:	4b86      	ldr	r3, [pc, #536]	; (8001d50 <HAL_RCC_OscConfig+0x4d0>)
 8001b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b3e:	60bb      	str	r3, [r7, #8]
 8001b40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b42:	2301      	movs	r3, #1
 8001b44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b46:	4b83      	ldr	r3, [pc, #524]	; (8001d54 <HAL_RCC_OscConfig+0x4d4>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d118      	bne.n	8001b84 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001b52:	4b80      	ldr	r3, [pc, #512]	; (8001d54 <HAL_RCC_OscConfig+0x4d4>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a7f      	ldr	r2, [pc, #508]	; (8001d54 <HAL_RCC_OscConfig+0x4d4>)
 8001b58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b5e:	f7ff faab 	bl	80010b8 <HAL_GetTick>
 8001b62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b64:	e008      	b.n	8001b78 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b66:	f7ff faa7 	bl	80010b8 <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	2b64      	cmp	r3, #100	; 0x64
 8001b72:	d901      	bls.n	8001b78 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e12a      	b.n	8001dce <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b78:	4b76      	ldr	r3, [pc, #472]	; (8001d54 <HAL_RCC_OscConfig+0x4d4>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d0f0      	beq.n	8001b66 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d106      	bne.n	8001b9a <HAL_RCC_OscConfig+0x31a>
 8001b8c:	4b70      	ldr	r3, [pc, #448]	; (8001d50 <HAL_RCC_OscConfig+0x4d0>)
 8001b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b90:	4a6f      	ldr	r2, [pc, #444]	; (8001d50 <HAL_RCC_OscConfig+0x4d0>)
 8001b92:	f043 0301 	orr.w	r3, r3, #1
 8001b96:	6713      	str	r3, [r2, #112]	; 0x70
 8001b98:	e02d      	b.n	8001bf6 <HAL_RCC_OscConfig+0x376>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d10c      	bne.n	8001bbc <HAL_RCC_OscConfig+0x33c>
 8001ba2:	4b6b      	ldr	r3, [pc, #428]	; (8001d50 <HAL_RCC_OscConfig+0x4d0>)
 8001ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba6:	4a6a      	ldr	r2, [pc, #424]	; (8001d50 <HAL_RCC_OscConfig+0x4d0>)
 8001ba8:	f023 0301 	bic.w	r3, r3, #1
 8001bac:	6713      	str	r3, [r2, #112]	; 0x70
 8001bae:	4b68      	ldr	r3, [pc, #416]	; (8001d50 <HAL_RCC_OscConfig+0x4d0>)
 8001bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb2:	4a67      	ldr	r2, [pc, #412]	; (8001d50 <HAL_RCC_OscConfig+0x4d0>)
 8001bb4:	f023 0304 	bic.w	r3, r3, #4
 8001bb8:	6713      	str	r3, [r2, #112]	; 0x70
 8001bba:	e01c      	b.n	8001bf6 <HAL_RCC_OscConfig+0x376>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	2b05      	cmp	r3, #5
 8001bc2:	d10c      	bne.n	8001bde <HAL_RCC_OscConfig+0x35e>
 8001bc4:	4b62      	ldr	r3, [pc, #392]	; (8001d50 <HAL_RCC_OscConfig+0x4d0>)
 8001bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc8:	4a61      	ldr	r2, [pc, #388]	; (8001d50 <HAL_RCC_OscConfig+0x4d0>)
 8001bca:	f043 0304 	orr.w	r3, r3, #4
 8001bce:	6713      	str	r3, [r2, #112]	; 0x70
 8001bd0:	4b5f      	ldr	r3, [pc, #380]	; (8001d50 <HAL_RCC_OscConfig+0x4d0>)
 8001bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd4:	4a5e      	ldr	r2, [pc, #376]	; (8001d50 <HAL_RCC_OscConfig+0x4d0>)
 8001bd6:	f043 0301 	orr.w	r3, r3, #1
 8001bda:	6713      	str	r3, [r2, #112]	; 0x70
 8001bdc:	e00b      	b.n	8001bf6 <HAL_RCC_OscConfig+0x376>
 8001bde:	4b5c      	ldr	r3, [pc, #368]	; (8001d50 <HAL_RCC_OscConfig+0x4d0>)
 8001be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be2:	4a5b      	ldr	r2, [pc, #364]	; (8001d50 <HAL_RCC_OscConfig+0x4d0>)
 8001be4:	f023 0301 	bic.w	r3, r3, #1
 8001be8:	6713      	str	r3, [r2, #112]	; 0x70
 8001bea:	4b59      	ldr	r3, [pc, #356]	; (8001d50 <HAL_RCC_OscConfig+0x4d0>)
 8001bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bee:	4a58      	ldr	r2, [pc, #352]	; (8001d50 <HAL_RCC_OscConfig+0x4d0>)
 8001bf0:	f023 0304 	bic.w	r3, r3, #4
 8001bf4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d015      	beq.n	8001c2a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bfe:	f7ff fa5b 	bl	80010b8 <HAL_GetTick>
 8001c02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c04:	e00a      	b.n	8001c1c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c06:	f7ff fa57 	bl	80010b8 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e0d8      	b.n	8001dce <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c1c:	4b4c      	ldr	r3, [pc, #304]	; (8001d50 <HAL_RCC_OscConfig+0x4d0>)
 8001c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c20:	f003 0302 	and.w	r3, r3, #2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d0ee      	beq.n	8001c06 <HAL_RCC_OscConfig+0x386>
 8001c28:	e014      	b.n	8001c54 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c2a:	f7ff fa45 	bl	80010b8 <HAL_GetTick>
 8001c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c30:	e00a      	b.n	8001c48 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c32:	f7ff fa41 	bl	80010b8 <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d901      	bls.n	8001c48 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e0c2      	b.n	8001dce <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c48:	4b41      	ldr	r3, [pc, #260]	; (8001d50 <HAL_RCC_OscConfig+0x4d0>)
 8001c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d1ee      	bne.n	8001c32 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c54:	7dfb      	ldrb	r3, [r7, #23]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d105      	bne.n	8001c66 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c5a:	4b3d      	ldr	r3, [pc, #244]	; (8001d50 <HAL_RCC_OscConfig+0x4d0>)
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	4a3c      	ldr	r2, [pc, #240]	; (8001d50 <HAL_RCC_OscConfig+0x4d0>)
 8001c60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c64:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	699b      	ldr	r3, [r3, #24]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f000 80ae 	beq.w	8001dcc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c70:	4b37      	ldr	r3, [pc, #220]	; (8001d50 <HAL_RCC_OscConfig+0x4d0>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f003 030c 	and.w	r3, r3, #12
 8001c78:	2b08      	cmp	r3, #8
 8001c7a:	d06d      	beq.n	8001d58 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d14b      	bne.n	8001d1c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c84:	4b32      	ldr	r3, [pc, #200]	; (8001d50 <HAL_RCC_OscConfig+0x4d0>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a31      	ldr	r2, [pc, #196]	; (8001d50 <HAL_RCC_OscConfig+0x4d0>)
 8001c8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c90:	f7ff fa12 	bl	80010b8 <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c98:	f7ff fa0e 	bl	80010b8 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e091      	b.n	8001dce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001caa:	4b29      	ldr	r3, [pc, #164]	; (8001d50 <HAL_RCC_OscConfig+0x4d0>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1f0      	bne.n	8001c98 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	69da      	ldr	r2, [r3, #28]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a1b      	ldr	r3, [r3, #32]
 8001cbe:	431a      	orrs	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc4:	019b      	lsls	r3, r3, #6
 8001cc6:	431a      	orrs	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ccc:	085b      	lsrs	r3, r3, #1
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	041b      	lsls	r3, r3, #16
 8001cd2:	431a      	orrs	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd8:	061b      	lsls	r3, r3, #24
 8001cda:	431a      	orrs	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce0:	071b      	lsls	r3, r3, #28
 8001ce2:	491b      	ldr	r1, [pc, #108]	; (8001d50 <HAL_RCC_OscConfig+0x4d0>)
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ce8:	4b19      	ldr	r3, [pc, #100]	; (8001d50 <HAL_RCC_OscConfig+0x4d0>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a18      	ldr	r2, [pc, #96]	; (8001d50 <HAL_RCC_OscConfig+0x4d0>)
 8001cee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf4:	f7ff f9e0 	bl	80010b8 <HAL_GetTick>
 8001cf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cfa:	e008      	b.n	8001d0e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cfc:	f7ff f9dc 	bl	80010b8 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e05f      	b.n	8001dce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d0e:	4b10      	ldr	r3, [pc, #64]	; (8001d50 <HAL_RCC_OscConfig+0x4d0>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d0f0      	beq.n	8001cfc <HAL_RCC_OscConfig+0x47c>
 8001d1a:	e057      	b.n	8001dcc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d1c:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <HAL_RCC_OscConfig+0x4d0>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a0b      	ldr	r2, [pc, #44]	; (8001d50 <HAL_RCC_OscConfig+0x4d0>)
 8001d22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d28:	f7ff f9c6 	bl	80010b8 <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d30:	f7ff f9c2 	bl	80010b8 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e045      	b.n	8001dce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d42:	4b03      	ldr	r3, [pc, #12]	; (8001d50 <HAL_RCC_OscConfig+0x4d0>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1f0      	bne.n	8001d30 <HAL_RCC_OscConfig+0x4b0>
 8001d4e:	e03d      	b.n	8001dcc <HAL_RCC_OscConfig+0x54c>
 8001d50:	40023800 	.word	0x40023800
 8001d54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001d58:	4b1f      	ldr	r3, [pc, #124]	; (8001dd8 <HAL_RCC_OscConfig+0x558>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d030      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d129      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d122      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d82:	68fa      	ldr	r2, [r7, #12]
 8001d84:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d88:	4013      	ands	r3, r2
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d8e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d119      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d9e:	085b      	lsrs	r3, r3, #1
 8001da0:	3b01      	subs	r3, #1
 8001da2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d10f      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d107      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d001      	beq.n	8001dcc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e000      	b.n	8001dce <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3718      	adds	r7, #24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40023800 	.word	0x40023800

08001ddc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001de6:	2300      	movs	r3, #0
 8001de8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d101      	bne.n	8001df4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e0d0      	b.n	8001f96 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001df4:	4b6a      	ldr	r3, [pc, #424]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 030f 	and.w	r3, r3, #15
 8001dfc:	683a      	ldr	r2, [r7, #0]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d910      	bls.n	8001e24 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e02:	4b67      	ldr	r3, [pc, #412]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f023 020f 	bic.w	r2, r3, #15
 8001e0a:	4965      	ldr	r1, [pc, #404]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e12:	4b63      	ldr	r3, [pc, #396]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 030f 	and.w	r3, r3, #15
 8001e1a:	683a      	ldr	r2, [r7, #0]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d001      	beq.n	8001e24 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e0b8      	b.n	8001f96 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d020      	beq.n	8001e72 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0304 	and.w	r3, r3, #4
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d005      	beq.n	8001e48 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e3c:	4b59      	ldr	r3, [pc, #356]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	4a58      	ldr	r2, [pc, #352]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e46:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0308 	and.w	r3, r3, #8
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d005      	beq.n	8001e60 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e54:	4b53      	ldr	r3, [pc, #332]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	4a52      	ldr	r2, [pc, #328]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e5e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e60:	4b50      	ldr	r3, [pc, #320]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	494d      	ldr	r1, [pc, #308]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d040      	beq.n	8001f00 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d107      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e86:	4b47      	ldr	r3, [pc, #284]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d115      	bne.n	8001ebe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e07f      	b.n	8001f96 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d107      	bne.n	8001eae <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e9e:	4b41      	ldr	r3, [pc, #260]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d109      	bne.n	8001ebe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e073      	b.n	8001f96 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eae:	4b3d      	ldr	r3, [pc, #244]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d101      	bne.n	8001ebe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e06b      	b.n	8001f96 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ebe:	4b39      	ldr	r3, [pc, #228]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f023 0203 	bic.w	r2, r3, #3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	4936      	ldr	r1, [pc, #216]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ed0:	f7ff f8f2 	bl	80010b8 <HAL_GetTick>
 8001ed4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ed6:	e00a      	b.n	8001eee <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ed8:	f7ff f8ee 	bl	80010b8 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e053      	b.n	8001f96 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eee:	4b2d      	ldr	r3, [pc, #180]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f003 020c 	and.w	r2, r3, #12
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d1eb      	bne.n	8001ed8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f00:	4b27      	ldr	r3, [pc, #156]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 030f 	and.w	r3, r3, #15
 8001f08:	683a      	ldr	r2, [r7, #0]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d210      	bcs.n	8001f30 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f0e:	4b24      	ldr	r3, [pc, #144]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f023 020f 	bic.w	r2, r3, #15
 8001f16:	4922      	ldr	r1, [pc, #136]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f1e:	4b20      	ldr	r3, [pc, #128]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 030f 	and.w	r3, r3, #15
 8001f26:	683a      	ldr	r2, [r7, #0]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d001      	beq.n	8001f30 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e032      	b.n	8001f96 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0304 	and.w	r3, r3, #4
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d008      	beq.n	8001f4e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f3c:	4b19      	ldr	r3, [pc, #100]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	4916      	ldr	r1, [pc, #88]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0308 	and.w	r3, r3, #8
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d009      	beq.n	8001f6e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f5a:	4b12      	ldr	r3, [pc, #72]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	490e      	ldr	r1, [pc, #56]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f6e:	f000 f821 	bl	8001fb4 <HAL_RCC_GetSysClockFreq>
 8001f72:	4602      	mov	r2, r0
 8001f74:	4b0b      	ldr	r3, [pc, #44]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	091b      	lsrs	r3, r3, #4
 8001f7a:	f003 030f 	and.w	r3, r3, #15
 8001f7e:	490a      	ldr	r1, [pc, #40]	; (8001fa8 <HAL_RCC_ClockConfig+0x1cc>)
 8001f80:	5ccb      	ldrb	r3, [r1, r3]
 8001f82:	fa22 f303 	lsr.w	r3, r2, r3
 8001f86:	4a09      	ldr	r2, [pc, #36]	; (8001fac <HAL_RCC_ClockConfig+0x1d0>)
 8001f88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f8a:	4b09      	ldr	r3, [pc, #36]	; (8001fb0 <HAL_RCC_ClockConfig+0x1d4>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7fe fef8 	bl	8000d84 <HAL_InitTick>

  return HAL_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	40023c00 	.word	0x40023c00
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	0800bf78 	.word	0x0800bf78
 8001fac:	20000000 	.word	0x20000000
 8001fb0:	20000004 	.word	0x20000004

08001fb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fb4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001fb8:	b084      	sub	sp, #16
 8001fba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	607b      	str	r3, [r7, #4]
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fcc:	4b67      	ldr	r3, [pc, #412]	; (800216c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f003 030c 	and.w	r3, r3, #12
 8001fd4:	2b08      	cmp	r3, #8
 8001fd6:	d00d      	beq.n	8001ff4 <HAL_RCC_GetSysClockFreq+0x40>
 8001fd8:	2b08      	cmp	r3, #8
 8001fda:	f200 80bd 	bhi.w	8002158 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d002      	beq.n	8001fe8 <HAL_RCC_GetSysClockFreq+0x34>
 8001fe2:	2b04      	cmp	r3, #4
 8001fe4:	d003      	beq.n	8001fee <HAL_RCC_GetSysClockFreq+0x3a>
 8001fe6:	e0b7      	b.n	8002158 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fe8:	4b61      	ldr	r3, [pc, #388]	; (8002170 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001fea:	60bb      	str	r3, [r7, #8]
      break;
 8001fec:	e0b7      	b.n	800215e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fee:	4b61      	ldr	r3, [pc, #388]	; (8002174 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001ff0:	60bb      	str	r3, [r7, #8]
      break;
 8001ff2:	e0b4      	b.n	800215e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ff4:	4b5d      	ldr	r3, [pc, #372]	; (800216c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ffc:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001ffe:	4b5b      	ldr	r3, [pc, #364]	; (800216c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d04d      	beq.n	80020a6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800200a:	4b58      	ldr	r3, [pc, #352]	; (800216c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	099b      	lsrs	r3, r3, #6
 8002010:	461a      	mov	r2, r3
 8002012:	f04f 0300 	mov.w	r3, #0
 8002016:	f240 10ff 	movw	r0, #511	; 0x1ff
 800201a:	f04f 0100 	mov.w	r1, #0
 800201e:	ea02 0800 	and.w	r8, r2, r0
 8002022:	ea03 0901 	and.w	r9, r3, r1
 8002026:	4640      	mov	r0, r8
 8002028:	4649      	mov	r1, r9
 800202a:	f04f 0200 	mov.w	r2, #0
 800202e:	f04f 0300 	mov.w	r3, #0
 8002032:	014b      	lsls	r3, r1, #5
 8002034:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002038:	0142      	lsls	r2, r0, #5
 800203a:	4610      	mov	r0, r2
 800203c:	4619      	mov	r1, r3
 800203e:	ebb0 0008 	subs.w	r0, r0, r8
 8002042:	eb61 0109 	sbc.w	r1, r1, r9
 8002046:	f04f 0200 	mov.w	r2, #0
 800204a:	f04f 0300 	mov.w	r3, #0
 800204e:	018b      	lsls	r3, r1, #6
 8002050:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002054:	0182      	lsls	r2, r0, #6
 8002056:	1a12      	subs	r2, r2, r0
 8002058:	eb63 0301 	sbc.w	r3, r3, r1
 800205c:	f04f 0000 	mov.w	r0, #0
 8002060:	f04f 0100 	mov.w	r1, #0
 8002064:	00d9      	lsls	r1, r3, #3
 8002066:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800206a:	00d0      	lsls	r0, r2, #3
 800206c:	4602      	mov	r2, r0
 800206e:	460b      	mov	r3, r1
 8002070:	eb12 0208 	adds.w	r2, r2, r8
 8002074:	eb43 0309 	adc.w	r3, r3, r9
 8002078:	f04f 0000 	mov.w	r0, #0
 800207c:	f04f 0100 	mov.w	r1, #0
 8002080:	0259      	lsls	r1, r3, #9
 8002082:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002086:	0250      	lsls	r0, r2, #9
 8002088:	4602      	mov	r2, r0
 800208a:	460b      	mov	r3, r1
 800208c:	4610      	mov	r0, r2
 800208e:	4619      	mov	r1, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	461a      	mov	r2, r3
 8002094:	f04f 0300 	mov.w	r3, #0
 8002098:	f7fe f922 	bl	80002e0 <__aeabi_uldivmod>
 800209c:	4602      	mov	r2, r0
 800209e:	460b      	mov	r3, r1
 80020a0:	4613      	mov	r3, r2
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	e04a      	b.n	800213c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020a6:	4b31      	ldr	r3, [pc, #196]	; (800216c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	099b      	lsrs	r3, r3, #6
 80020ac:	461a      	mov	r2, r3
 80020ae:	f04f 0300 	mov.w	r3, #0
 80020b2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80020b6:	f04f 0100 	mov.w	r1, #0
 80020ba:	ea02 0400 	and.w	r4, r2, r0
 80020be:	ea03 0501 	and.w	r5, r3, r1
 80020c2:	4620      	mov	r0, r4
 80020c4:	4629      	mov	r1, r5
 80020c6:	f04f 0200 	mov.w	r2, #0
 80020ca:	f04f 0300 	mov.w	r3, #0
 80020ce:	014b      	lsls	r3, r1, #5
 80020d0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80020d4:	0142      	lsls	r2, r0, #5
 80020d6:	4610      	mov	r0, r2
 80020d8:	4619      	mov	r1, r3
 80020da:	1b00      	subs	r0, r0, r4
 80020dc:	eb61 0105 	sbc.w	r1, r1, r5
 80020e0:	f04f 0200 	mov.w	r2, #0
 80020e4:	f04f 0300 	mov.w	r3, #0
 80020e8:	018b      	lsls	r3, r1, #6
 80020ea:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80020ee:	0182      	lsls	r2, r0, #6
 80020f0:	1a12      	subs	r2, r2, r0
 80020f2:	eb63 0301 	sbc.w	r3, r3, r1
 80020f6:	f04f 0000 	mov.w	r0, #0
 80020fa:	f04f 0100 	mov.w	r1, #0
 80020fe:	00d9      	lsls	r1, r3, #3
 8002100:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002104:	00d0      	lsls	r0, r2, #3
 8002106:	4602      	mov	r2, r0
 8002108:	460b      	mov	r3, r1
 800210a:	1912      	adds	r2, r2, r4
 800210c:	eb45 0303 	adc.w	r3, r5, r3
 8002110:	f04f 0000 	mov.w	r0, #0
 8002114:	f04f 0100 	mov.w	r1, #0
 8002118:	0299      	lsls	r1, r3, #10
 800211a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800211e:	0290      	lsls	r0, r2, #10
 8002120:	4602      	mov	r2, r0
 8002122:	460b      	mov	r3, r1
 8002124:	4610      	mov	r0, r2
 8002126:	4619      	mov	r1, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	461a      	mov	r2, r3
 800212c:	f04f 0300 	mov.w	r3, #0
 8002130:	f7fe f8d6 	bl	80002e0 <__aeabi_uldivmod>
 8002134:	4602      	mov	r2, r0
 8002136:	460b      	mov	r3, r1
 8002138:	4613      	mov	r3, r2
 800213a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800213c:	4b0b      	ldr	r3, [pc, #44]	; (800216c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	0c1b      	lsrs	r3, r3, #16
 8002142:	f003 0303 	and.w	r3, r3, #3
 8002146:	3301      	adds	r3, #1
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800214c:	68fa      	ldr	r2, [r7, #12]
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	fbb2 f3f3 	udiv	r3, r2, r3
 8002154:	60bb      	str	r3, [r7, #8]
      break;
 8002156:	e002      	b.n	800215e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002158:	4b05      	ldr	r3, [pc, #20]	; (8002170 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800215a:	60bb      	str	r3, [r7, #8]
      break;
 800215c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800215e:	68bb      	ldr	r3, [r7, #8]
}
 8002160:	4618      	mov	r0, r3
 8002162:	3710      	adds	r7, #16
 8002164:	46bd      	mov	sp, r7
 8002166:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800216a:	bf00      	nop
 800216c:	40023800 	.word	0x40023800
 8002170:	00f42400 	.word	0x00f42400
 8002174:	007a1200 	.word	0x007a1200

08002178 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800217c:	4b03      	ldr	r3, [pc, #12]	; (800218c <HAL_RCC_GetHCLKFreq+0x14>)
 800217e:	681b      	ldr	r3, [r3, #0]
}
 8002180:	4618      	mov	r0, r3
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	20000000 	.word	0x20000000

08002190 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002194:	f7ff fff0 	bl	8002178 <HAL_RCC_GetHCLKFreq>
 8002198:	4602      	mov	r2, r0
 800219a:	4b05      	ldr	r3, [pc, #20]	; (80021b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	0a9b      	lsrs	r3, r3, #10
 80021a0:	f003 0307 	and.w	r3, r3, #7
 80021a4:	4903      	ldr	r1, [pc, #12]	; (80021b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021a6:	5ccb      	ldrb	r3, [r1, r3]
 80021a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	40023800 	.word	0x40023800
 80021b4:	0800bf88 	.word	0x0800bf88

080021b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021bc:	f7ff ffdc 	bl	8002178 <HAL_RCC_GetHCLKFreq>
 80021c0:	4602      	mov	r2, r0
 80021c2:	4b05      	ldr	r3, [pc, #20]	; (80021d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	0b5b      	lsrs	r3, r3, #13
 80021c8:	f003 0307 	and.w	r3, r3, #7
 80021cc:	4903      	ldr	r1, [pc, #12]	; (80021dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80021ce:	5ccb      	ldrb	r3, [r1, r3]
 80021d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40023800 	.word	0x40023800
 80021dc:	0800bf88 	.word	0x0800bf88

080021e0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	220f      	movs	r2, #15
 80021ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80021f0:	4b12      	ldr	r3, [pc, #72]	; (800223c <HAL_RCC_GetClockConfig+0x5c>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f003 0203 	and.w	r2, r3, #3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80021fc:	4b0f      	ldr	r3, [pc, #60]	; (800223c <HAL_RCC_GetClockConfig+0x5c>)
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002208:	4b0c      	ldr	r3, [pc, #48]	; (800223c <HAL_RCC_GetClockConfig+0x5c>)
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002214:	4b09      	ldr	r3, [pc, #36]	; (800223c <HAL_RCC_GetClockConfig+0x5c>)
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	08db      	lsrs	r3, r3, #3
 800221a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002222:	4b07      	ldr	r3, [pc, #28]	; (8002240 <HAL_RCC_GetClockConfig+0x60>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 020f 	and.w	r2, r3, #15
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	601a      	str	r2, [r3, #0]
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	40023800 	.word	0x40023800
 8002240:	40023c00 	.word	0x40023c00

08002244 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b088      	sub	sp, #32
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800224c:	2300      	movs	r3, #0
 800224e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002250:	2300      	movs	r3, #0
 8002252:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002254:	2300      	movs	r3, #0
 8002256:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002258:	2300      	movs	r3, #0
 800225a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800225c:	2300      	movs	r3, #0
 800225e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0301 	and.w	r3, r3, #1
 8002268:	2b00      	cmp	r3, #0
 800226a:	d012      	beq.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800226c:	4b69      	ldr	r3, [pc, #420]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	4a68      	ldr	r2, [pc, #416]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002272:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002276:	6093      	str	r3, [r2, #8]
 8002278:	4b66      	ldr	r3, [pc, #408]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800227a:	689a      	ldr	r2, [r3, #8]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002280:	4964      	ldr	r1, [pc, #400]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002282:	4313      	orrs	r3, r2
 8002284:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800228e:	2301      	movs	r3, #1
 8002290:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d017      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800229e:	4b5d      	ldr	r3, [pc, #372]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ac:	4959      	ldr	r1, [pc, #356]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022bc:	d101      	bne.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80022be:	2301      	movs	r3, #1
 80022c0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80022ca:	2301      	movs	r3, #1
 80022cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d017      	beq.n	800230a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80022da:	4b4e      	ldr	r3, [pc, #312]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022e0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e8:	494a      	ldr	r1, [pc, #296]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022f8:	d101      	bne.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80022fa:	2301      	movs	r3, #1
 80022fc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002306:	2301      	movs	r3, #1
 8002308:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002316:	2301      	movs	r3, #1
 8002318:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0320 	and.w	r3, r3, #32
 8002322:	2b00      	cmp	r3, #0
 8002324:	f000 808b 	beq.w	800243e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002328:	4b3a      	ldr	r3, [pc, #232]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800232a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232c:	4a39      	ldr	r2, [pc, #228]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800232e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002332:	6413      	str	r3, [r2, #64]	; 0x40
 8002334:	4b37      	ldr	r3, [pc, #220]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002338:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800233c:	60bb      	str	r3, [r7, #8]
 800233e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002340:	4b35      	ldr	r3, [pc, #212]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a34      	ldr	r2, [pc, #208]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002346:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800234a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800234c:	f7fe feb4 	bl	80010b8 <HAL_GetTick>
 8002350:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002352:	e008      	b.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002354:	f7fe feb0 	bl	80010b8 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b64      	cmp	r3, #100	; 0x64
 8002360:	d901      	bls.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e38f      	b.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002366:	4b2c      	ldr	r3, [pc, #176]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800236e:	2b00      	cmp	r3, #0
 8002370:	d0f0      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002372:	4b28      	ldr	r3, [pc, #160]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002376:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800237a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d035      	beq.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002386:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	429a      	cmp	r2, r3
 800238e:	d02e      	beq.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002390:	4b20      	ldr	r3, [pc, #128]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002394:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002398:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800239a:	4b1e      	ldr	r3, [pc, #120]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800239c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800239e:	4a1d      	ldr	r2, [pc, #116]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023a6:	4b1b      	ldr	r3, [pc, #108]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023aa:	4a1a      	ldr	r2, [pc, #104]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023b0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80023b2:	4a18      	ldr	r2, [pc, #96]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80023b8:	4b16      	ldr	r3, [pc, #88]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023bc:	f003 0301 	and.w	r3, r3, #1
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d114      	bne.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c4:	f7fe fe78 	bl	80010b8 <HAL_GetTick>
 80023c8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ca:	e00a      	b.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023cc:	f7fe fe74 	bl	80010b8 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023da:	4293      	cmp	r3, r2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e351      	b.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023e2:	4b0c      	ldr	r3, [pc, #48]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d0ee      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80023fa:	d111      	bne.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80023fc:	4b05      	ldr	r3, [pc, #20]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002408:	4b04      	ldr	r3, [pc, #16]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800240a:	400b      	ands	r3, r1
 800240c:	4901      	ldr	r1, [pc, #4]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800240e:	4313      	orrs	r3, r2
 8002410:	608b      	str	r3, [r1, #8]
 8002412:	e00b      	b.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002414:	40023800 	.word	0x40023800
 8002418:	40007000 	.word	0x40007000
 800241c:	0ffffcff 	.word	0x0ffffcff
 8002420:	4bb3      	ldr	r3, [pc, #716]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	4ab2      	ldr	r2, [pc, #712]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002426:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800242a:	6093      	str	r3, [r2, #8]
 800242c:	4bb0      	ldr	r3, [pc, #704]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800242e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002434:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002438:	49ad      	ldr	r1, [pc, #692]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800243a:	4313      	orrs	r3, r2
 800243c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0310 	and.w	r3, r3, #16
 8002446:	2b00      	cmp	r3, #0
 8002448:	d010      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800244a:	4ba9      	ldr	r3, [pc, #676]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800244c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002450:	4aa7      	ldr	r2, [pc, #668]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002452:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002456:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800245a:	4ba5      	ldr	r3, [pc, #660]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800245c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002464:	49a2      	ldr	r1, [pc, #648]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002466:	4313      	orrs	r3, r2
 8002468:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d00a      	beq.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002478:	4b9d      	ldr	r3, [pc, #628]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800247a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800247e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002486:	499a      	ldr	r1, [pc, #616]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002488:	4313      	orrs	r3, r2
 800248a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00a      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800249a:	4b95      	ldr	r3, [pc, #596]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800249c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024a8:	4991      	ldr	r1, [pc, #580]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00a      	beq.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80024bc:	4b8c      	ldr	r3, [pc, #560]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024ca:	4989      	ldr	r1, [pc, #548]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00a      	beq.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80024de:	4b84      	ldr	r3, [pc, #528]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ec:	4980      	ldr	r1, [pc, #512]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d00a      	beq.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002500:	4b7b      	ldr	r3, [pc, #492]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002506:	f023 0203 	bic.w	r2, r3, #3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250e:	4978      	ldr	r1, [pc, #480]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002510:	4313      	orrs	r3, r2
 8002512:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00a      	beq.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002522:	4b73      	ldr	r3, [pc, #460]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002528:	f023 020c 	bic.w	r2, r3, #12
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002530:	496f      	ldr	r1, [pc, #444]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002532:	4313      	orrs	r3, r2
 8002534:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002540:	2b00      	cmp	r3, #0
 8002542:	d00a      	beq.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002544:	4b6a      	ldr	r3, [pc, #424]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800254a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002552:	4967      	ldr	r1, [pc, #412]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002554:	4313      	orrs	r3, r2
 8002556:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00a      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002566:	4b62      	ldr	r3, [pc, #392]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800256c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002574:	495e      	ldr	r1, [pc, #376]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002576:	4313      	orrs	r3, r2
 8002578:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002584:	2b00      	cmp	r3, #0
 8002586:	d00a      	beq.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002588:	4b59      	ldr	r3, [pc, #356]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800258a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800258e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002596:	4956      	ldr	r1, [pc, #344]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002598:	4313      	orrs	r3, r2
 800259a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00a      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80025aa:	4b51      	ldr	r3, [pc, #324]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025b0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b8:	494d      	ldr	r1, [pc, #308]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d00a      	beq.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80025cc:	4b48      	ldr	r3, [pc, #288]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025da:	4945      	ldr	r1, [pc, #276]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d00a      	beq.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80025ee:	4b40      	ldr	r3, [pc, #256]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025fc:	493c      	ldr	r1, [pc, #240]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00a      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002610:	4b37      	ldr	r3, [pc, #220]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002616:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800261e:	4934      	ldr	r1, [pc, #208]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002620:	4313      	orrs	r3, r2
 8002622:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d011      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002632:	4b2f      	ldr	r3, [pc, #188]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002638:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002640:	492b      	ldr	r1, [pc, #172]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002642:	4313      	orrs	r3, r2
 8002644:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800264c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002650:	d101      	bne.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002652:	2301      	movs	r3, #1
 8002654:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0308 	and.w	r3, r3, #8
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002662:	2301      	movs	r3, #1
 8002664:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00a      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002672:	4b1f      	ldr	r3, [pc, #124]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002678:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002680:	491b      	ldr	r1, [pc, #108]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002682:	4313      	orrs	r3, r2
 8002684:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d00b      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002694:	4b16      	ldr	r3, [pc, #88]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800269a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026a4:	4912      	ldr	r1, [pc, #72]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00b      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80026b8:	4b0d      	ldr	r3, [pc, #52]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026be:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026c8:	4909      	ldr	r1, [pc, #36]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00f      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80026dc:	4b04      	ldr	r3, [pc, #16]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026e2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ec:	e002      	b.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80026ee:	bf00      	nop
 80026f0:	40023800 	.word	0x40023800
 80026f4:	4986      	ldr	r1, [pc, #536]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00b      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002708:	4b81      	ldr	r3, [pc, #516]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800270a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800270e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002718:	497d      	ldr	r1, [pc, #500]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800271a:	4313      	orrs	r3, r2
 800271c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d006      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272e:	2b00      	cmp	r3, #0
 8002730:	f000 80d6 	beq.w	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002734:	4b76      	ldr	r3, [pc, #472]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a75      	ldr	r2, [pc, #468]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800273a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800273e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002740:	f7fe fcba 	bl	80010b8 <HAL_GetTick>
 8002744:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002746:	e008      	b.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002748:	f7fe fcb6 	bl	80010b8 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b64      	cmp	r3, #100	; 0x64
 8002754:	d901      	bls.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e195      	b.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800275a:	4b6d      	ldr	r3, [pc, #436]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d1f0      	bne.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	2b00      	cmp	r3, #0
 8002770:	d021      	beq.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002776:	2b00      	cmp	r3, #0
 8002778:	d11d      	bne.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800277a:	4b65      	ldr	r3, [pc, #404]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800277c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002780:	0c1b      	lsrs	r3, r3, #16
 8002782:	f003 0303 	and.w	r3, r3, #3
 8002786:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002788:	4b61      	ldr	r3, [pc, #388]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800278a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800278e:	0e1b      	lsrs	r3, r3, #24
 8002790:	f003 030f 	and.w	r3, r3, #15
 8002794:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	019a      	lsls	r2, r3, #6
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	041b      	lsls	r3, r3, #16
 80027a0:	431a      	orrs	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	061b      	lsls	r3, r3, #24
 80027a6:	431a      	orrs	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	071b      	lsls	r3, r3, #28
 80027ae:	4958      	ldr	r1, [pc, #352]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d004      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x588>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027ca:	d00a      	beq.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d02e      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027e0:	d129      	bne.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80027e2:	4b4b      	ldr	r3, [pc, #300]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027e8:	0c1b      	lsrs	r3, r3, #16
 80027ea:	f003 0303 	and.w	r3, r3, #3
 80027ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80027f0:	4b47      	ldr	r3, [pc, #284]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027f6:	0f1b      	lsrs	r3, r3, #28
 80027f8:	f003 0307 	and.w	r3, r3, #7
 80027fc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	019a      	lsls	r2, r3, #6
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	041b      	lsls	r3, r3, #16
 8002808:	431a      	orrs	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	061b      	lsls	r3, r3, #24
 8002810:	431a      	orrs	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	071b      	lsls	r3, r3, #28
 8002816:	493e      	ldr	r1, [pc, #248]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002818:	4313      	orrs	r3, r2
 800281a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800281e:	4b3c      	ldr	r3, [pc, #240]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002820:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002824:	f023 021f 	bic.w	r2, r3, #31
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282c:	3b01      	subs	r3, #1
 800282e:	4938      	ldr	r1, [pc, #224]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002830:	4313      	orrs	r3, r2
 8002832:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d01d      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002842:	4b33      	ldr	r3, [pc, #204]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002844:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002848:	0e1b      	lsrs	r3, r3, #24
 800284a:	f003 030f 	and.w	r3, r3, #15
 800284e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002850:	4b2f      	ldr	r3, [pc, #188]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002852:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002856:	0f1b      	lsrs	r3, r3, #28
 8002858:	f003 0307 	and.w	r3, r3, #7
 800285c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	019a      	lsls	r2, r3, #6
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	691b      	ldr	r3, [r3, #16]
 8002868:	041b      	lsls	r3, r3, #16
 800286a:	431a      	orrs	r2, r3
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	061b      	lsls	r3, r3, #24
 8002870:	431a      	orrs	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	071b      	lsls	r3, r3, #28
 8002876:	4926      	ldr	r1, [pc, #152]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002878:	4313      	orrs	r3, r2
 800287a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d011      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	019a      	lsls	r2, r3, #6
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	691b      	ldr	r3, [r3, #16]
 8002894:	041b      	lsls	r3, r3, #16
 8002896:	431a      	orrs	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	061b      	lsls	r3, r3, #24
 800289e:	431a      	orrs	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	071b      	lsls	r3, r3, #28
 80028a6:	491a      	ldr	r1, [pc, #104]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80028ae:	4b18      	ldr	r3, [pc, #96]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a17      	ldr	r2, [pc, #92]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80028b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028ba:	f7fe fbfd 	bl	80010b8 <HAL_GetTick>
 80028be:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80028c0:	e008      	b.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80028c2:	f7fe fbf9 	bl	80010b8 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b64      	cmp	r3, #100	; 0x64
 80028ce:	d901      	bls.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e0d8      	b.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80028d4:	4b0e      	ldr	r3, [pc, #56]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d0f0      	beq.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	f040 80ce 	bne.w	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80028e8:	4b09      	ldr	r3, [pc, #36]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a08      	ldr	r2, [pc, #32]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028f4:	f7fe fbe0 	bl	80010b8 <HAL_GetTick>
 80028f8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80028fa:	e00b      	b.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80028fc:	f7fe fbdc 	bl	80010b8 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b64      	cmp	r3, #100	; 0x64
 8002908:	d904      	bls.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e0bb      	b.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800290e:	bf00      	nop
 8002910:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002914:	4b5e      	ldr	r3, [pc, #376]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800291c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002920:	d0ec      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d003      	beq.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002932:	2b00      	cmp	r3, #0
 8002934:	d009      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800293e:	2b00      	cmp	r3, #0
 8002940:	d02e      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002946:	2b00      	cmp	r3, #0
 8002948:	d12a      	bne.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800294a:	4b51      	ldr	r3, [pc, #324]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800294c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002950:	0c1b      	lsrs	r3, r3, #16
 8002952:	f003 0303 	and.w	r3, r3, #3
 8002956:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002958:	4b4d      	ldr	r3, [pc, #308]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800295a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800295e:	0f1b      	lsrs	r3, r3, #28
 8002960:	f003 0307 	and.w	r3, r3, #7
 8002964:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	695b      	ldr	r3, [r3, #20]
 800296a:	019a      	lsls	r2, r3, #6
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	041b      	lsls	r3, r3, #16
 8002970:	431a      	orrs	r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	061b      	lsls	r3, r3, #24
 8002978:	431a      	orrs	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	071b      	lsls	r3, r3, #28
 800297e:	4944      	ldr	r1, [pc, #272]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002980:	4313      	orrs	r3, r2
 8002982:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002986:	4b42      	ldr	r3, [pc, #264]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002988:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800298c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002994:	3b01      	subs	r3, #1
 8002996:	021b      	lsls	r3, r3, #8
 8002998:	493d      	ldr	r1, [pc, #244]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800299a:	4313      	orrs	r3, r2
 800299c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d022      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029b4:	d11d      	bne.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80029b6:	4b36      	ldr	r3, [pc, #216]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80029b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029bc:	0e1b      	lsrs	r3, r3, #24
 80029be:	f003 030f 	and.w	r3, r3, #15
 80029c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80029c4:	4b32      	ldr	r3, [pc, #200]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80029c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ca:	0f1b      	lsrs	r3, r3, #28
 80029cc:	f003 0307 	and.w	r3, r3, #7
 80029d0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	019a      	lsls	r2, r3, #6
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a1b      	ldr	r3, [r3, #32]
 80029dc:	041b      	lsls	r3, r3, #16
 80029de:	431a      	orrs	r2, r3
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	061b      	lsls	r3, r3, #24
 80029e4:	431a      	orrs	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	071b      	lsls	r3, r3, #28
 80029ea:	4929      	ldr	r1, [pc, #164]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0308 	and.w	r3, r3, #8
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d028      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80029fe:	4b24      	ldr	r3, [pc, #144]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a04:	0e1b      	lsrs	r3, r3, #24
 8002a06:	f003 030f 	and.w	r3, r3, #15
 8002a0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002a0c:	4b20      	ldr	r3, [pc, #128]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a12:	0c1b      	lsrs	r3, r3, #16
 8002a14:	f003 0303 	and.w	r3, r3, #3
 8002a18:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	019a      	lsls	r2, r3, #6
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	041b      	lsls	r3, r3, #16
 8002a24:	431a      	orrs	r2, r3
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	061b      	lsls	r3, r3, #24
 8002a2a:	431a      	orrs	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	69db      	ldr	r3, [r3, #28]
 8002a30:	071b      	lsls	r3, r3, #28
 8002a32:	4917      	ldr	r1, [pc, #92]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002a3a:	4b15      	ldr	r3, [pc, #84]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a48:	4911      	ldr	r1, [pc, #68]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002a50:	4b0f      	ldr	r3, [pc, #60]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a0e      	ldr	r2, [pc, #56]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a5c:	f7fe fb2c 	bl	80010b8 <HAL_GetTick>
 8002a60:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002a62:	e008      	b.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002a64:	f7fe fb28 	bl	80010b8 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b64      	cmp	r3, #100	; 0x64
 8002a70:	d901      	bls.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e007      	b.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002a76:	4b06      	ldr	r3, [pc, #24]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a82:	d1ef      	bne.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3720      	adds	r7, #32
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	40023800 	.word	0x40023800

08002a94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e049      	b.n	8002b3a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d106      	bne.n	8002ac0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f7fe f87e 	bl	8000bbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	3304      	adds	r3, #4
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	4610      	mov	r0, r2
 8002ad4:	f000 fa24 	bl	8002f20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
	...

08002b44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d001      	beq.n	8002b5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e054      	b.n	8002c06 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2202      	movs	r2, #2
 8002b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68da      	ldr	r2, [r3, #12]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f042 0201 	orr.w	r2, r2, #1
 8002b72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a26      	ldr	r2, [pc, #152]	; (8002c14 <HAL_TIM_Base_Start_IT+0xd0>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d022      	beq.n	8002bc4 <HAL_TIM_Base_Start_IT+0x80>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b86:	d01d      	beq.n	8002bc4 <HAL_TIM_Base_Start_IT+0x80>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a22      	ldr	r2, [pc, #136]	; (8002c18 <HAL_TIM_Base_Start_IT+0xd4>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d018      	beq.n	8002bc4 <HAL_TIM_Base_Start_IT+0x80>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a21      	ldr	r2, [pc, #132]	; (8002c1c <HAL_TIM_Base_Start_IT+0xd8>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d013      	beq.n	8002bc4 <HAL_TIM_Base_Start_IT+0x80>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a1f      	ldr	r2, [pc, #124]	; (8002c20 <HAL_TIM_Base_Start_IT+0xdc>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d00e      	beq.n	8002bc4 <HAL_TIM_Base_Start_IT+0x80>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a1e      	ldr	r2, [pc, #120]	; (8002c24 <HAL_TIM_Base_Start_IT+0xe0>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d009      	beq.n	8002bc4 <HAL_TIM_Base_Start_IT+0x80>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a1c      	ldr	r2, [pc, #112]	; (8002c28 <HAL_TIM_Base_Start_IT+0xe4>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d004      	beq.n	8002bc4 <HAL_TIM_Base_Start_IT+0x80>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a1b      	ldr	r2, [pc, #108]	; (8002c2c <HAL_TIM_Base_Start_IT+0xe8>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d115      	bne.n	8002bf0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689a      	ldr	r2, [r3, #8]
 8002bca:	4b19      	ldr	r3, [pc, #100]	; (8002c30 <HAL_TIM_Base_Start_IT+0xec>)
 8002bcc:	4013      	ands	r3, r2
 8002bce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2b06      	cmp	r3, #6
 8002bd4:	d015      	beq.n	8002c02 <HAL_TIM_Base_Start_IT+0xbe>
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bdc:	d011      	beq.n	8002c02 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f042 0201 	orr.w	r2, r2, #1
 8002bec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bee:	e008      	b.n	8002c02 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f042 0201 	orr.w	r2, r2, #1
 8002bfe:	601a      	str	r2, [r3, #0]
 8002c00:	e000      	b.n	8002c04 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c02:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3714      	adds	r7, #20
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	40010000 	.word	0x40010000
 8002c18:	40000400 	.word	0x40000400
 8002c1c:	40000800 	.word	0x40000800
 8002c20:	40000c00 	.word	0x40000c00
 8002c24:	40010400 	.word	0x40010400
 8002c28:	40014000 	.word	0x40014000
 8002c2c:	40001800 	.word	0x40001800
 8002c30:	00010007 	.word	0x00010007

08002c34 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68da      	ldr	r2, [r3, #12]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f022 0201 	bic.w	r2, r2, #1
 8002c4a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6a1a      	ldr	r2, [r3, #32]
 8002c52:	f241 1311 	movw	r3, #4369	; 0x1111
 8002c56:	4013      	ands	r3, r2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d10f      	bne.n	8002c7c <HAL_TIM_Base_Stop_IT+0x48>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	6a1a      	ldr	r2, [r3, #32]
 8002c62:	f240 4344 	movw	r3, #1092	; 0x444
 8002c66:	4013      	ands	r3, r2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d107      	bne.n	8002c7c <HAL_TIM_Base_Stop_IT+0x48>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f022 0201 	bic.w	r2, r2, #1
 8002c7a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr

08002c92 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b082      	sub	sp, #8
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d122      	bne.n	8002cee <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d11b      	bne.n	8002cee <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f06f 0202 	mvn.w	r2, #2
 8002cbe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	f003 0303 	and.w	r3, r3, #3
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d003      	beq.n	8002cdc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f000 f905 	bl	8002ee4 <HAL_TIM_IC_CaptureCallback>
 8002cda:	e005      	b.n	8002ce8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f000 f8f7 	bl	8002ed0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 f908 	bl	8002ef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	f003 0304 	and.w	r3, r3, #4
 8002cf8:	2b04      	cmp	r3, #4
 8002cfa:	d122      	bne.n	8002d42 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	f003 0304 	and.w	r3, r3, #4
 8002d06:	2b04      	cmp	r3, #4
 8002d08:	d11b      	bne.n	8002d42 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f06f 0204 	mvn.w	r2, #4
 8002d12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2202      	movs	r2, #2
 8002d18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d003      	beq.n	8002d30 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f000 f8db 	bl	8002ee4 <HAL_TIM_IC_CaptureCallback>
 8002d2e:	e005      	b.n	8002d3c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f000 f8cd 	bl	8002ed0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 f8de 	bl	8002ef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	f003 0308 	and.w	r3, r3, #8
 8002d4c:	2b08      	cmp	r3, #8
 8002d4e:	d122      	bne.n	8002d96 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	f003 0308 	and.w	r3, r3, #8
 8002d5a:	2b08      	cmp	r3, #8
 8002d5c:	d11b      	bne.n	8002d96 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f06f 0208 	mvn.w	r2, #8
 8002d66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2204      	movs	r2, #4
 8002d6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	69db      	ldr	r3, [r3, #28]
 8002d74:	f003 0303 	and.w	r3, r3, #3
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d003      	beq.n	8002d84 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 f8b1 	bl	8002ee4 <HAL_TIM_IC_CaptureCallback>
 8002d82:	e005      	b.n	8002d90 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f000 f8a3 	bl	8002ed0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 f8b4 	bl	8002ef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	f003 0310 	and.w	r3, r3, #16
 8002da0:	2b10      	cmp	r3, #16
 8002da2:	d122      	bne.n	8002dea <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	f003 0310 	and.w	r3, r3, #16
 8002dae:	2b10      	cmp	r3, #16
 8002db0:	d11b      	bne.n	8002dea <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f06f 0210 	mvn.w	r2, #16
 8002dba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2208      	movs	r2, #8
 8002dc0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	69db      	ldr	r3, [r3, #28]
 8002dc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d003      	beq.n	8002dd8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f000 f887 	bl	8002ee4 <HAL_TIM_IC_CaptureCallback>
 8002dd6:	e005      	b.n	8002de4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f000 f879 	bl	8002ed0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 f88a 	bl	8002ef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	691b      	ldr	r3, [r3, #16]
 8002df0:	f003 0301 	and.w	r3, r3, #1
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d10e      	bne.n	8002e16 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d107      	bne.n	8002e16 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f06f 0201 	mvn.w	r2, #1
 8002e0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f7fd fe93 	bl	8000b3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e20:	2b80      	cmp	r3, #128	; 0x80
 8002e22:	d10e      	bne.n	8002e42 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e2e:	2b80      	cmp	r3, #128	; 0x80
 8002e30:	d107      	bne.n	8002e42 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f000 f9a7 	bl	8003190 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	691b      	ldr	r3, [r3, #16]
 8002e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e50:	d10e      	bne.n	8002e70 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e5c:	2b80      	cmp	r3, #128	; 0x80
 8002e5e:	d107      	bne.n	8002e70 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 f99a 	bl	80031a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e7a:	2b40      	cmp	r3, #64	; 0x40
 8002e7c:	d10e      	bne.n	8002e9c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e88:	2b40      	cmp	r3, #64	; 0x40
 8002e8a:	d107      	bne.n	8002e9c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 f838 	bl	8002f0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	f003 0320 	and.w	r3, r3, #32
 8002ea6:	2b20      	cmp	r3, #32
 8002ea8:	d10e      	bne.n	8002ec8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	f003 0320 	and.w	r3, r3, #32
 8002eb4:	2b20      	cmp	r3, #32
 8002eb6:	d107      	bne.n	8002ec8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f06f 0220 	mvn.w	r2, #32
 8002ec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 f95a 	bl	800317c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ec8:	bf00      	nop
 8002eca:	3708      	adds	r7, #8
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ed8:	bf00      	nop
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4a40      	ldr	r2, [pc, #256]	; (8003034 <TIM_Base_SetConfig+0x114>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d013      	beq.n	8002f60 <TIM_Base_SetConfig+0x40>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f3e:	d00f      	beq.n	8002f60 <TIM_Base_SetConfig+0x40>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4a3d      	ldr	r2, [pc, #244]	; (8003038 <TIM_Base_SetConfig+0x118>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d00b      	beq.n	8002f60 <TIM_Base_SetConfig+0x40>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a3c      	ldr	r2, [pc, #240]	; (800303c <TIM_Base_SetConfig+0x11c>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d007      	beq.n	8002f60 <TIM_Base_SetConfig+0x40>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a3b      	ldr	r2, [pc, #236]	; (8003040 <TIM_Base_SetConfig+0x120>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d003      	beq.n	8002f60 <TIM_Base_SetConfig+0x40>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a3a      	ldr	r2, [pc, #232]	; (8003044 <TIM_Base_SetConfig+0x124>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d108      	bne.n	8002f72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a2f      	ldr	r2, [pc, #188]	; (8003034 <TIM_Base_SetConfig+0x114>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d02b      	beq.n	8002fd2 <TIM_Base_SetConfig+0xb2>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f80:	d027      	beq.n	8002fd2 <TIM_Base_SetConfig+0xb2>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a2c      	ldr	r2, [pc, #176]	; (8003038 <TIM_Base_SetConfig+0x118>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d023      	beq.n	8002fd2 <TIM_Base_SetConfig+0xb2>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a2b      	ldr	r2, [pc, #172]	; (800303c <TIM_Base_SetConfig+0x11c>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d01f      	beq.n	8002fd2 <TIM_Base_SetConfig+0xb2>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a2a      	ldr	r2, [pc, #168]	; (8003040 <TIM_Base_SetConfig+0x120>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d01b      	beq.n	8002fd2 <TIM_Base_SetConfig+0xb2>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a29      	ldr	r2, [pc, #164]	; (8003044 <TIM_Base_SetConfig+0x124>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d017      	beq.n	8002fd2 <TIM_Base_SetConfig+0xb2>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a28      	ldr	r2, [pc, #160]	; (8003048 <TIM_Base_SetConfig+0x128>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d013      	beq.n	8002fd2 <TIM_Base_SetConfig+0xb2>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a27      	ldr	r2, [pc, #156]	; (800304c <TIM_Base_SetConfig+0x12c>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d00f      	beq.n	8002fd2 <TIM_Base_SetConfig+0xb2>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a26      	ldr	r2, [pc, #152]	; (8003050 <TIM_Base_SetConfig+0x130>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d00b      	beq.n	8002fd2 <TIM_Base_SetConfig+0xb2>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a25      	ldr	r2, [pc, #148]	; (8003054 <TIM_Base_SetConfig+0x134>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d007      	beq.n	8002fd2 <TIM_Base_SetConfig+0xb2>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a24      	ldr	r2, [pc, #144]	; (8003058 <TIM_Base_SetConfig+0x138>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d003      	beq.n	8002fd2 <TIM_Base_SetConfig+0xb2>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a23      	ldr	r2, [pc, #140]	; (800305c <TIM_Base_SetConfig+0x13c>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d108      	bne.n	8002fe4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	68fa      	ldr	r2, [r7, #12]
 8002ff6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	689a      	ldr	r2, [r3, #8]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a0a      	ldr	r2, [pc, #40]	; (8003034 <TIM_Base_SetConfig+0x114>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d003      	beq.n	8003018 <TIM_Base_SetConfig+0xf8>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a0c      	ldr	r2, [pc, #48]	; (8003044 <TIM_Base_SetConfig+0x124>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d103      	bne.n	8003020 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	691a      	ldr	r2, [r3, #16]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	615a      	str	r2, [r3, #20]
}
 8003026:	bf00      	nop
 8003028:	3714      	adds	r7, #20
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	40010000 	.word	0x40010000
 8003038:	40000400 	.word	0x40000400
 800303c:	40000800 	.word	0x40000800
 8003040:	40000c00 	.word	0x40000c00
 8003044:	40010400 	.word	0x40010400
 8003048:	40014000 	.word	0x40014000
 800304c:	40014400 	.word	0x40014400
 8003050:	40014800 	.word	0x40014800
 8003054:	40001800 	.word	0x40001800
 8003058:	40001c00 	.word	0x40001c00
 800305c:	40002000 	.word	0x40002000

08003060 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003060:	b480      	push	{r7}
 8003062:	b085      	sub	sp, #20
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003070:	2b01      	cmp	r3, #1
 8003072:	d101      	bne.n	8003078 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003074:	2302      	movs	r3, #2
 8003076:	e06d      	b.n	8003154 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2202      	movs	r2, #2
 8003084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a30      	ldr	r2, [pc, #192]	; (8003160 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d004      	beq.n	80030ac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a2f      	ldr	r2, [pc, #188]	; (8003164 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d108      	bne.n	80030be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80030b2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a20      	ldr	r2, [pc, #128]	; (8003160 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d022      	beq.n	8003128 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ea:	d01d      	beq.n	8003128 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a1d      	ldr	r2, [pc, #116]	; (8003168 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d018      	beq.n	8003128 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a1c      	ldr	r2, [pc, #112]	; (800316c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d013      	beq.n	8003128 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a1a      	ldr	r2, [pc, #104]	; (8003170 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d00e      	beq.n	8003128 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a15      	ldr	r2, [pc, #84]	; (8003164 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d009      	beq.n	8003128 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a16      	ldr	r2, [pc, #88]	; (8003174 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d004      	beq.n	8003128 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a15      	ldr	r2, [pc, #84]	; (8003178 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d10c      	bne.n	8003142 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800312e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	68ba      	ldr	r2, [r7, #8]
 8003136:	4313      	orrs	r3, r2
 8003138:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68ba      	ldr	r2, [r7, #8]
 8003140:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3714      	adds	r7, #20
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr
 8003160:	40010000 	.word	0x40010000
 8003164:	40010400 	.word	0x40010400
 8003168:	40000400 	.word	0x40000400
 800316c:	40000800 	.word	0x40000800
 8003170:	40000c00 	.word	0x40000c00
 8003174:	40014000 	.word	0x40014000
 8003178:	40001800 	.word	0x40001800

0800317c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003184:	bf00      	nop
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80031ac:	bf00      	nop
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e040      	b.n	800324c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d106      	bne.n	80031e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f7fd fd30 	bl	8000c40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2224      	movs	r2, #36	; 0x24
 80031e4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f022 0201 	bic.w	r2, r2, #1
 80031f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 fa56 	bl	80036a8 <UART_SetConfig>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d101      	bne.n	8003206 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e022      	b.n	800324c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320a:	2b00      	cmp	r3, #0
 800320c:	d002      	beq.n	8003214 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 fcac 	bl	8003b6c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	685a      	ldr	r2, [r3, #4]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003222:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689a      	ldr	r2, [r3, #8]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003232:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f042 0201 	orr.w	r2, r2, #1
 8003242:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f000 fd33 	bl	8003cb0 <UART_CheckIdleState>
 800324a:	4603      	mov	r3, r0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3708      	adds	r7, #8
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b088      	sub	sp, #32
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	69db      	ldr	r3, [r3, #28]
 8003262:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003274:	69fa      	ldr	r2, [r7, #28]
 8003276:	f640 030f 	movw	r3, #2063	; 0x80f
 800327a:	4013      	ands	r3, r2
 800327c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d113      	bne.n	80032ac <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	f003 0320 	and.w	r3, r3, #32
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00e      	beq.n	80032ac <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	f003 0320 	and.w	r3, r3, #32
 8003294:	2b00      	cmp	r3, #0
 8003296:	d009      	beq.n	80032ac <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800329c:	2b00      	cmp	r3, #0
 800329e:	f000 81cc 	beq.w	800363a <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	4798      	blx	r3
      }
      return;
 80032aa:	e1c6      	b.n	800363a <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	f000 80e3 	beq.w	800347a <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d105      	bne.n	80032ca <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80032be:	69ba      	ldr	r2, [r7, #24]
 80032c0:	4ba5      	ldr	r3, [pc, #660]	; (8003558 <HAL_UART_IRQHandler+0x304>)
 80032c2:	4013      	ands	r3, r2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f000 80d8 	beq.w	800347a <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	f003 0301 	and.w	r3, r3, #1
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d010      	beq.n	80032f6 <HAL_UART_IRQHandler+0xa2>
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00b      	beq.n	80032f6 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2201      	movs	r2, #1
 80032e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032ec:	f043 0201 	orr.w	r2, r3, #1
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d010      	beq.n	8003322 <HAL_UART_IRQHandler+0xce>
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00b      	beq.n	8003322 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2202      	movs	r2, #2
 8003310:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003318:	f043 0204 	orr.w	r2, r3, #4
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	f003 0304 	and.w	r3, r3, #4
 8003328:	2b00      	cmp	r3, #0
 800332a:	d010      	beq.n	800334e <HAL_UART_IRQHandler+0xfa>
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00b      	beq.n	800334e <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	2204      	movs	r2, #4
 800333c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003344:	f043 0202 	orr.w	r2, r3, #2
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	f003 0308 	and.w	r3, r3, #8
 8003354:	2b00      	cmp	r3, #0
 8003356:	d015      	beq.n	8003384 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	f003 0320 	and.w	r3, r3, #32
 800335e:	2b00      	cmp	r3, #0
 8003360:	d104      	bne.n	800336c <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00b      	beq.n	8003384 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2208      	movs	r2, #8
 8003372:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800337a:	f043 0208 	orr.w	r2, r3, #8
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800338a:	2b00      	cmp	r3, #0
 800338c:	d011      	beq.n	80033b2 <HAL_UART_IRQHandler+0x15e>
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00c      	beq.n	80033b2 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033a8:	f043 0220 	orr.w	r2, r3, #32
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f000 8140 	beq.w	800363e <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	f003 0320 	and.w	r3, r3, #32
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d00c      	beq.n	80033e2 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	f003 0320 	and.w	r3, r3, #32
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d007      	beq.n	80033e2 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d003      	beq.n	80033e2 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033e8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f4:	2b40      	cmp	r3, #64	; 0x40
 80033f6:	d004      	beq.n	8003402 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d031      	beq.n	8003466 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 fd19 	bl	8003e3a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003412:	2b40      	cmp	r3, #64	; 0x40
 8003414:	d123      	bne.n	800345e <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	689a      	ldr	r2, [r3, #8]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003424:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342a:	2b00      	cmp	r3, #0
 800342c:	d013      	beq.n	8003456 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003432:	4a4a      	ldr	r2, [pc, #296]	; (800355c <HAL_UART_IRQHandler+0x308>)
 8003434:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800343a:	4618      	mov	r0, r3
 800343c:	f7fd ffbe 	bl	80013bc <HAL_DMA_Abort_IT>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d017      	beq.n	8003476 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800344a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003450:	4610      	mov	r0, r2
 8003452:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003454:	e00f      	b.n	8003476 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 f906 	bl	8003668 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800345c:	e00b      	b.n	8003476 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f902 	bl	8003668 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003464:	e007      	b.n	8003476 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 f8fe 	bl	8003668 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003474:	e0e3      	b.n	800363e <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003476:	bf00      	nop
    return;
 8003478:	e0e1      	b.n	800363e <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800347e:	2b01      	cmp	r3, #1
 8003480:	f040 80a7 	bne.w	80035d2 <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	f003 0310 	and.w	r3, r3, #16
 800348a:	2b00      	cmp	r3, #0
 800348c:	f000 80a1 	beq.w	80035d2 <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	f003 0310 	and.w	r3, r3, #16
 8003496:	2b00      	cmp	r3, #0
 8003498:	f000 809b 	beq.w	80035d2 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2210      	movs	r2, #16
 80034a2:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ae:	2b40      	cmp	r3, #64	; 0x40
 80034b0:	d156      	bne.n	8003560 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 80034bc:	893b      	ldrh	r3, [r7, #8]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f000 80bf 	beq.w	8003642 <HAL_UART_IRQHandler+0x3ee>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80034ca:	893a      	ldrh	r2, [r7, #8]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	f080 80b8 	bcs.w	8003642 <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	893a      	ldrh	r2, [r7, #8]
 80034d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034de:	69db      	ldr	r3, [r3, #28]
 80034e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034e4:	d02a      	beq.n	800353c <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034f4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	689a      	ldr	r2, [r3, #8]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f022 0201 	bic.w	r2, r2, #1
 8003504:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	689a      	ldr	r2, [r3, #8]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003514:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2220      	movs	r2, #32
 800351a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f022 0210 	bic.w	r2, r2, #16
 8003530:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003536:	4618      	mov	r0, r3
 8003538:	f7fd fed0 	bl	80012dc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003548:	b29b      	uxth	r3, r3
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	b29b      	uxth	r3, r3
 800354e:	4619      	mov	r1, r3
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 f893 	bl	800367c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003556:	e074      	b.n	8003642 <HAL_UART_IRQHandler+0x3ee>
 8003558:	04000120 	.word	0x04000120
 800355c:	08003e99 	.word	0x08003e99
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800356c:	b29b      	uxth	r3, r3
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003578:	b29b      	uxth	r3, r3
 800357a:	2b00      	cmp	r3, #0
 800357c:	d063      	beq.n	8003646 <HAL_UART_IRQHandler+0x3f2>
          && (nb_rx_data > 0U))
 800357e:	897b      	ldrh	r3, [r7, #10]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d060      	beq.n	8003646 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003592:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	689a      	ldr	r2, [r3, #8]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f022 0201 	bic.w	r2, r2, #1
 80035a2:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2220      	movs	r2, #32
 80035a8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f022 0210 	bic.w	r2, r2, #16
 80035c4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80035c6:	897b      	ldrh	r3, [r7, #10]
 80035c8:	4619      	mov	r1, r3
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 f856 	bl	800367c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80035d0:	e039      	b.n	8003646 <HAL_UART_IRQHandler+0x3f2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d00d      	beq.n	80035f8 <HAL_UART_IRQHandler+0x3a4>
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d008      	beq.n	80035f8 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80035ee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f000 f84f 	bl	8003694 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80035f6:	e029      	b.n	800364c <HAL_UART_IRQHandler+0x3f8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00d      	beq.n	800361e <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003608:	2b00      	cmp	r3, #0
 800360a:	d008      	beq.n	800361e <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003610:	2b00      	cmp	r3, #0
 8003612:	d01a      	beq.n	800364a <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	4798      	blx	r3
    }
    return;
 800361c:	e015      	b.n	800364a <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003624:	2b00      	cmp	r3, #0
 8003626:	d011      	beq.n	800364c <HAL_UART_IRQHandler+0x3f8>
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00c      	beq.n	800364c <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 fc46 	bl	8003ec4 <UART_EndTransmit_IT>
    return;
 8003638:	e008      	b.n	800364c <HAL_UART_IRQHandler+0x3f8>
      return;
 800363a:	bf00      	nop
 800363c:	e006      	b.n	800364c <HAL_UART_IRQHandler+0x3f8>
    return;
 800363e:	bf00      	nop
 8003640:	e004      	b.n	800364c <HAL_UART_IRQHandler+0x3f8>
      return;
 8003642:	bf00      	nop
 8003644:	e002      	b.n	800364c <HAL_UART_IRQHandler+0x3f8>
      return;
 8003646:	bf00      	nop
 8003648:	e000      	b.n	800364c <HAL_UART_IRQHandler+0x3f8>
    return;
 800364a:	bf00      	nop
  }

}
 800364c:	3720      	adds	r7, #32
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop

08003654 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800365c:	bf00      	nop
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	460b      	mov	r3, r1
 8003686:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003688:	bf00      	nop
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b088      	sub	sp, #32
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80036b0:	2300      	movs	r3, #0
 80036b2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689a      	ldr	r2, [r3, #8]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	431a      	orrs	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	431a      	orrs	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	69db      	ldr	r3, [r3, #28]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	4ba7      	ldr	r3, [pc, #668]	; (8003970 <UART_SetConfig+0x2c8>)
 80036d4:	4013      	ands	r3, r2
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	6812      	ldr	r2, [r2, #0]
 80036da:	6979      	ldr	r1, [r7, #20]
 80036dc:	430b      	orrs	r3, r1
 80036de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	68da      	ldr	r2, [r3, #12]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	430a      	orrs	r2, r1
 80036f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a1b      	ldr	r3, [r3, #32]
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	4313      	orrs	r3, r2
 8003704:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	697a      	ldr	r2, [r7, #20]
 8003716:	430a      	orrs	r2, r1
 8003718:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a95      	ldr	r2, [pc, #596]	; (8003974 <UART_SetConfig+0x2cc>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d120      	bne.n	8003766 <UART_SetConfig+0xbe>
 8003724:	4b94      	ldr	r3, [pc, #592]	; (8003978 <UART_SetConfig+0x2d0>)
 8003726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800372a:	f003 0303 	and.w	r3, r3, #3
 800372e:	2b03      	cmp	r3, #3
 8003730:	d816      	bhi.n	8003760 <UART_SetConfig+0xb8>
 8003732:	a201      	add	r2, pc, #4	; (adr r2, 8003738 <UART_SetConfig+0x90>)
 8003734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003738:	08003749 	.word	0x08003749
 800373c:	08003755 	.word	0x08003755
 8003740:	0800374f 	.word	0x0800374f
 8003744:	0800375b 	.word	0x0800375b
 8003748:	2301      	movs	r3, #1
 800374a:	77fb      	strb	r3, [r7, #31]
 800374c:	e14f      	b.n	80039ee <UART_SetConfig+0x346>
 800374e:	2302      	movs	r3, #2
 8003750:	77fb      	strb	r3, [r7, #31]
 8003752:	e14c      	b.n	80039ee <UART_SetConfig+0x346>
 8003754:	2304      	movs	r3, #4
 8003756:	77fb      	strb	r3, [r7, #31]
 8003758:	e149      	b.n	80039ee <UART_SetConfig+0x346>
 800375a:	2308      	movs	r3, #8
 800375c:	77fb      	strb	r3, [r7, #31]
 800375e:	e146      	b.n	80039ee <UART_SetConfig+0x346>
 8003760:	2310      	movs	r3, #16
 8003762:	77fb      	strb	r3, [r7, #31]
 8003764:	e143      	b.n	80039ee <UART_SetConfig+0x346>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a84      	ldr	r2, [pc, #528]	; (800397c <UART_SetConfig+0x2d4>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d132      	bne.n	80037d6 <UART_SetConfig+0x12e>
 8003770:	4b81      	ldr	r3, [pc, #516]	; (8003978 <UART_SetConfig+0x2d0>)
 8003772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003776:	f003 030c 	and.w	r3, r3, #12
 800377a:	2b0c      	cmp	r3, #12
 800377c:	d828      	bhi.n	80037d0 <UART_SetConfig+0x128>
 800377e:	a201      	add	r2, pc, #4	; (adr r2, 8003784 <UART_SetConfig+0xdc>)
 8003780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003784:	080037b9 	.word	0x080037b9
 8003788:	080037d1 	.word	0x080037d1
 800378c:	080037d1 	.word	0x080037d1
 8003790:	080037d1 	.word	0x080037d1
 8003794:	080037c5 	.word	0x080037c5
 8003798:	080037d1 	.word	0x080037d1
 800379c:	080037d1 	.word	0x080037d1
 80037a0:	080037d1 	.word	0x080037d1
 80037a4:	080037bf 	.word	0x080037bf
 80037a8:	080037d1 	.word	0x080037d1
 80037ac:	080037d1 	.word	0x080037d1
 80037b0:	080037d1 	.word	0x080037d1
 80037b4:	080037cb 	.word	0x080037cb
 80037b8:	2300      	movs	r3, #0
 80037ba:	77fb      	strb	r3, [r7, #31]
 80037bc:	e117      	b.n	80039ee <UART_SetConfig+0x346>
 80037be:	2302      	movs	r3, #2
 80037c0:	77fb      	strb	r3, [r7, #31]
 80037c2:	e114      	b.n	80039ee <UART_SetConfig+0x346>
 80037c4:	2304      	movs	r3, #4
 80037c6:	77fb      	strb	r3, [r7, #31]
 80037c8:	e111      	b.n	80039ee <UART_SetConfig+0x346>
 80037ca:	2308      	movs	r3, #8
 80037cc:	77fb      	strb	r3, [r7, #31]
 80037ce:	e10e      	b.n	80039ee <UART_SetConfig+0x346>
 80037d0:	2310      	movs	r3, #16
 80037d2:	77fb      	strb	r3, [r7, #31]
 80037d4:	e10b      	b.n	80039ee <UART_SetConfig+0x346>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a69      	ldr	r2, [pc, #420]	; (8003980 <UART_SetConfig+0x2d8>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d120      	bne.n	8003822 <UART_SetConfig+0x17a>
 80037e0:	4b65      	ldr	r3, [pc, #404]	; (8003978 <UART_SetConfig+0x2d0>)
 80037e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80037ea:	2b30      	cmp	r3, #48	; 0x30
 80037ec:	d013      	beq.n	8003816 <UART_SetConfig+0x16e>
 80037ee:	2b30      	cmp	r3, #48	; 0x30
 80037f0:	d814      	bhi.n	800381c <UART_SetConfig+0x174>
 80037f2:	2b20      	cmp	r3, #32
 80037f4:	d009      	beq.n	800380a <UART_SetConfig+0x162>
 80037f6:	2b20      	cmp	r3, #32
 80037f8:	d810      	bhi.n	800381c <UART_SetConfig+0x174>
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d002      	beq.n	8003804 <UART_SetConfig+0x15c>
 80037fe:	2b10      	cmp	r3, #16
 8003800:	d006      	beq.n	8003810 <UART_SetConfig+0x168>
 8003802:	e00b      	b.n	800381c <UART_SetConfig+0x174>
 8003804:	2300      	movs	r3, #0
 8003806:	77fb      	strb	r3, [r7, #31]
 8003808:	e0f1      	b.n	80039ee <UART_SetConfig+0x346>
 800380a:	2302      	movs	r3, #2
 800380c:	77fb      	strb	r3, [r7, #31]
 800380e:	e0ee      	b.n	80039ee <UART_SetConfig+0x346>
 8003810:	2304      	movs	r3, #4
 8003812:	77fb      	strb	r3, [r7, #31]
 8003814:	e0eb      	b.n	80039ee <UART_SetConfig+0x346>
 8003816:	2308      	movs	r3, #8
 8003818:	77fb      	strb	r3, [r7, #31]
 800381a:	e0e8      	b.n	80039ee <UART_SetConfig+0x346>
 800381c:	2310      	movs	r3, #16
 800381e:	77fb      	strb	r3, [r7, #31]
 8003820:	e0e5      	b.n	80039ee <UART_SetConfig+0x346>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a57      	ldr	r2, [pc, #348]	; (8003984 <UART_SetConfig+0x2dc>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d120      	bne.n	800386e <UART_SetConfig+0x1c6>
 800382c:	4b52      	ldr	r3, [pc, #328]	; (8003978 <UART_SetConfig+0x2d0>)
 800382e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003832:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003836:	2bc0      	cmp	r3, #192	; 0xc0
 8003838:	d013      	beq.n	8003862 <UART_SetConfig+0x1ba>
 800383a:	2bc0      	cmp	r3, #192	; 0xc0
 800383c:	d814      	bhi.n	8003868 <UART_SetConfig+0x1c0>
 800383e:	2b80      	cmp	r3, #128	; 0x80
 8003840:	d009      	beq.n	8003856 <UART_SetConfig+0x1ae>
 8003842:	2b80      	cmp	r3, #128	; 0x80
 8003844:	d810      	bhi.n	8003868 <UART_SetConfig+0x1c0>
 8003846:	2b00      	cmp	r3, #0
 8003848:	d002      	beq.n	8003850 <UART_SetConfig+0x1a8>
 800384a:	2b40      	cmp	r3, #64	; 0x40
 800384c:	d006      	beq.n	800385c <UART_SetConfig+0x1b4>
 800384e:	e00b      	b.n	8003868 <UART_SetConfig+0x1c0>
 8003850:	2300      	movs	r3, #0
 8003852:	77fb      	strb	r3, [r7, #31]
 8003854:	e0cb      	b.n	80039ee <UART_SetConfig+0x346>
 8003856:	2302      	movs	r3, #2
 8003858:	77fb      	strb	r3, [r7, #31]
 800385a:	e0c8      	b.n	80039ee <UART_SetConfig+0x346>
 800385c:	2304      	movs	r3, #4
 800385e:	77fb      	strb	r3, [r7, #31]
 8003860:	e0c5      	b.n	80039ee <UART_SetConfig+0x346>
 8003862:	2308      	movs	r3, #8
 8003864:	77fb      	strb	r3, [r7, #31]
 8003866:	e0c2      	b.n	80039ee <UART_SetConfig+0x346>
 8003868:	2310      	movs	r3, #16
 800386a:	77fb      	strb	r3, [r7, #31]
 800386c:	e0bf      	b.n	80039ee <UART_SetConfig+0x346>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a45      	ldr	r2, [pc, #276]	; (8003988 <UART_SetConfig+0x2e0>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d125      	bne.n	80038c4 <UART_SetConfig+0x21c>
 8003878:	4b3f      	ldr	r3, [pc, #252]	; (8003978 <UART_SetConfig+0x2d0>)
 800387a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800387e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003882:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003886:	d017      	beq.n	80038b8 <UART_SetConfig+0x210>
 8003888:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800388c:	d817      	bhi.n	80038be <UART_SetConfig+0x216>
 800388e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003892:	d00b      	beq.n	80038ac <UART_SetConfig+0x204>
 8003894:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003898:	d811      	bhi.n	80038be <UART_SetConfig+0x216>
 800389a:	2b00      	cmp	r3, #0
 800389c:	d003      	beq.n	80038a6 <UART_SetConfig+0x1fe>
 800389e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038a2:	d006      	beq.n	80038b2 <UART_SetConfig+0x20a>
 80038a4:	e00b      	b.n	80038be <UART_SetConfig+0x216>
 80038a6:	2300      	movs	r3, #0
 80038a8:	77fb      	strb	r3, [r7, #31]
 80038aa:	e0a0      	b.n	80039ee <UART_SetConfig+0x346>
 80038ac:	2302      	movs	r3, #2
 80038ae:	77fb      	strb	r3, [r7, #31]
 80038b0:	e09d      	b.n	80039ee <UART_SetConfig+0x346>
 80038b2:	2304      	movs	r3, #4
 80038b4:	77fb      	strb	r3, [r7, #31]
 80038b6:	e09a      	b.n	80039ee <UART_SetConfig+0x346>
 80038b8:	2308      	movs	r3, #8
 80038ba:	77fb      	strb	r3, [r7, #31]
 80038bc:	e097      	b.n	80039ee <UART_SetConfig+0x346>
 80038be:	2310      	movs	r3, #16
 80038c0:	77fb      	strb	r3, [r7, #31]
 80038c2:	e094      	b.n	80039ee <UART_SetConfig+0x346>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a30      	ldr	r2, [pc, #192]	; (800398c <UART_SetConfig+0x2e4>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d125      	bne.n	800391a <UART_SetConfig+0x272>
 80038ce:	4b2a      	ldr	r3, [pc, #168]	; (8003978 <UART_SetConfig+0x2d0>)
 80038d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80038d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80038dc:	d017      	beq.n	800390e <UART_SetConfig+0x266>
 80038de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80038e2:	d817      	bhi.n	8003914 <UART_SetConfig+0x26c>
 80038e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038e8:	d00b      	beq.n	8003902 <UART_SetConfig+0x25a>
 80038ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038ee:	d811      	bhi.n	8003914 <UART_SetConfig+0x26c>
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d003      	beq.n	80038fc <UART_SetConfig+0x254>
 80038f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038f8:	d006      	beq.n	8003908 <UART_SetConfig+0x260>
 80038fa:	e00b      	b.n	8003914 <UART_SetConfig+0x26c>
 80038fc:	2301      	movs	r3, #1
 80038fe:	77fb      	strb	r3, [r7, #31]
 8003900:	e075      	b.n	80039ee <UART_SetConfig+0x346>
 8003902:	2302      	movs	r3, #2
 8003904:	77fb      	strb	r3, [r7, #31]
 8003906:	e072      	b.n	80039ee <UART_SetConfig+0x346>
 8003908:	2304      	movs	r3, #4
 800390a:	77fb      	strb	r3, [r7, #31]
 800390c:	e06f      	b.n	80039ee <UART_SetConfig+0x346>
 800390e:	2308      	movs	r3, #8
 8003910:	77fb      	strb	r3, [r7, #31]
 8003912:	e06c      	b.n	80039ee <UART_SetConfig+0x346>
 8003914:	2310      	movs	r3, #16
 8003916:	77fb      	strb	r3, [r7, #31]
 8003918:	e069      	b.n	80039ee <UART_SetConfig+0x346>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a1c      	ldr	r2, [pc, #112]	; (8003990 <UART_SetConfig+0x2e8>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d137      	bne.n	8003994 <UART_SetConfig+0x2ec>
 8003924:	4b14      	ldr	r3, [pc, #80]	; (8003978 <UART_SetConfig+0x2d0>)
 8003926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800392a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800392e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003932:	d017      	beq.n	8003964 <UART_SetConfig+0x2bc>
 8003934:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003938:	d817      	bhi.n	800396a <UART_SetConfig+0x2c2>
 800393a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800393e:	d00b      	beq.n	8003958 <UART_SetConfig+0x2b0>
 8003940:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003944:	d811      	bhi.n	800396a <UART_SetConfig+0x2c2>
 8003946:	2b00      	cmp	r3, #0
 8003948:	d003      	beq.n	8003952 <UART_SetConfig+0x2aa>
 800394a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800394e:	d006      	beq.n	800395e <UART_SetConfig+0x2b6>
 8003950:	e00b      	b.n	800396a <UART_SetConfig+0x2c2>
 8003952:	2300      	movs	r3, #0
 8003954:	77fb      	strb	r3, [r7, #31]
 8003956:	e04a      	b.n	80039ee <UART_SetConfig+0x346>
 8003958:	2302      	movs	r3, #2
 800395a:	77fb      	strb	r3, [r7, #31]
 800395c:	e047      	b.n	80039ee <UART_SetConfig+0x346>
 800395e:	2304      	movs	r3, #4
 8003960:	77fb      	strb	r3, [r7, #31]
 8003962:	e044      	b.n	80039ee <UART_SetConfig+0x346>
 8003964:	2308      	movs	r3, #8
 8003966:	77fb      	strb	r3, [r7, #31]
 8003968:	e041      	b.n	80039ee <UART_SetConfig+0x346>
 800396a:	2310      	movs	r3, #16
 800396c:	77fb      	strb	r3, [r7, #31]
 800396e:	e03e      	b.n	80039ee <UART_SetConfig+0x346>
 8003970:	efff69f3 	.word	0xefff69f3
 8003974:	40011000 	.word	0x40011000
 8003978:	40023800 	.word	0x40023800
 800397c:	40004400 	.word	0x40004400
 8003980:	40004800 	.word	0x40004800
 8003984:	40004c00 	.word	0x40004c00
 8003988:	40005000 	.word	0x40005000
 800398c:	40011400 	.word	0x40011400
 8003990:	40007800 	.word	0x40007800
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a71      	ldr	r2, [pc, #452]	; (8003b60 <UART_SetConfig+0x4b8>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d125      	bne.n	80039ea <UART_SetConfig+0x342>
 800399e:	4b71      	ldr	r3, [pc, #452]	; (8003b64 <UART_SetConfig+0x4bc>)
 80039a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80039a8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80039ac:	d017      	beq.n	80039de <UART_SetConfig+0x336>
 80039ae:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80039b2:	d817      	bhi.n	80039e4 <UART_SetConfig+0x33c>
 80039b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039b8:	d00b      	beq.n	80039d2 <UART_SetConfig+0x32a>
 80039ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039be:	d811      	bhi.n	80039e4 <UART_SetConfig+0x33c>
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d003      	beq.n	80039cc <UART_SetConfig+0x324>
 80039c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039c8:	d006      	beq.n	80039d8 <UART_SetConfig+0x330>
 80039ca:	e00b      	b.n	80039e4 <UART_SetConfig+0x33c>
 80039cc:	2300      	movs	r3, #0
 80039ce:	77fb      	strb	r3, [r7, #31]
 80039d0:	e00d      	b.n	80039ee <UART_SetConfig+0x346>
 80039d2:	2302      	movs	r3, #2
 80039d4:	77fb      	strb	r3, [r7, #31]
 80039d6:	e00a      	b.n	80039ee <UART_SetConfig+0x346>
 80039d8:	2304      	movs	r3, #4
 80039da:	77fb      	strb	r3, [r7, #31]
 80039dc:	e007      	b.n	80039ee <UART_SetConfig+0x346>
 80039de:	2308      	movs	r3, #8
 80039e0:	77fb      	strb	r3, [r7, #31]
 80039e2:	e004      	b.n	80039ee <UART_SetConfig+0x346>
 80039e4:	2310      	movs	r3, #16
 80039e6:	77fb      	strb	r3, [r7, #31]
 80039e8:	e001      	b.n	80039ee <UART_SetConfig+0x346>
 80039ea:	2310      	movs	r3, #16
 80039ec:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	69db      	ldr	r3, [r3, #28]
 80039f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039f6:	d15b      	bne.n	8003ab0 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80039f8:	7ffb      	ldrb	r3, [r7, #31]
 80039fa:	2b08      	cmp	r3, #8
 80039fc:	d827      	bhi.n	8003a4e <UART_SetConfig+0x3a6>
 80039fe:	a201      	add	r2, pc, #4	; (adr r2, 8003a04 <UART_SetConfig+0x35c>)
 8003a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a04:	08003a29 	.word	0x08003a29
 8003a08:	08003a31 	.word	0x08003a31
 8003a0c:	08003a39 	.word	0x08003a39
 8003a10:	08003a4f 	.word	0x08003a4f
 8003a14:	08003a3f 	.word	0x08003a3f
 8003a18:	08003a4f 	.word	0x08003a4f
 8003a1c:	08003a4f 	.word	0x08003a4f
 8003a20:	08003a4f 	.word	0x08003a4f
 8003a24:	08003a47 	.word	0x08003a47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a28:	f7fe fbb2 	bl	8002190 <HAL_RCC_GetPCLK1Freq>
 8003a2c:	61b8      	str	r0, [r7, #24]
        break;
 8003a2e:	e013      	b.n	8003a58 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a30:	f7fe fbc2 	bl	80021b8 <HAL_RCC_GetPCLK2Freq>
 8003a34:	61b8      	str	r0, [r7, #24]
        break;
 8003a36:	e00f      	b.n	8003a58 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a38:	4b4b      	ldr	r3, [pc, #300]	; (8003b68 <UART_SetConfig+0x4c0>)
 8003a3a:	61bb      	str	r3, [r7, #24]
        break;
 8003a3c:	e00c      	b.n	8003a58 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a3e:	f7fe fab9 	bl	8001fb4 <HAL_RCC_GetSysClockFreq>
 8003a42:	61b8      	str	r0, [r7, #24]
        break;
 8003a44:	e008      	b.n	8003a58 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a4a:	61bb      	str	r3, [r7, #24]
        break;
 8003a4c:	e004      	b.n	8003a58 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	77bb      	strb	r3, [r7, #30]
        break;
 8003a56:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d074      	beq.n	8003b48 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	005a      	lsls	r2, r3, #1
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	085b      	lsrs	r3, r3, #1
 8003a68:	441a      	add	r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	2b0f      	cmp	r3, #15
 8003a7a:	d916      	bls.n	8003aaa <UART_SetConfig+0x402>
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a82:	d212      	bcs.n	8003aaa <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	f023 030f 	bic.w	r3, r3, #15
 8003a8c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	085b      	lsrs	r3, r3, #1
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	f003 0307 	and.w	r3, r3, #7
 8003a98:	b29a      	uxth	r2, r3
 8003a9a:	89fb      	ldrh	r3, [r7, #14]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	89fa      	ldrh	r2, [r7, #14]
 8003aa6:	60da      	str	r2, [r3, #12]
 8003aa8:	e04e      	b.n	8003b48 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	77bb      	strb	r3, [r7, #30]
 8003aae:	e04b      	b.n	8003b48 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ab0:	7ffb      	ldrb	r3, [r7, #31]
 8003ab2:	2b08      	cmp	r3, #8
 8003ab4:	d827      	bhi.n	8003b06 <UART_SetConfig+0x45e>
 8003ab6:	a201      	add	r2, pc, #4	; (adr r2, 8003abc <UART_SetConfig+0x414>)
 8003ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003abc:	08003ae1 	.word	0x08003ae1
 8003ac0:	08003ae9 	.word	0x08003ae9
 8003ac4:	08003af1 	.word	0x08003af1
 8003ac8:	08003b07 	.word	0x08003b07
 8003acc:	08003af7 	.word	0x08003af7
 8003ad0:	08003b07 	.word	0x08003b07
 8003ad4:	08003b07 	.word	0x08003b07
 8003ad8:	08003b07 	.word	0x08003b07
 8003adc:	08003aff 	.word	0x08003aff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ae0:	f7fe fb56 	bl	8002190 <HAL_RCC_GetPCLK1Freq>
 8003ae4:	61b8      	str	r0, [r7, #24]
        break;
 8003ae6:	e013      	b.n	8003b10 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ae8:	f7fe fb66 	bl	80021b8 <HAL_RCC_GetPCLK2Freq>
 8003aec:	61b8      	str	r0, [r7, #24]
        break;
 8003aee:	e00f      	b.n	8003b10 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003af0:	4b1d      	ldr	r3, [pc, #116]	; (8003b68 <UART_SetConfig+0x4c0>)
 8003af2:	61bb      	str	r3, [r7, #24]
        break;
 8003af4:	e00c      	b.n	8003b10 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003af6:	f7fe fa5d 	bl	8001fb4 <HAL_RCC_GetSysClockFreq>
 8003afa:	61b8      	str	r0, [r7, #24]
        break;
 8003afc:	e008      	b.n	8003b10 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003afe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b02:	61bb      	str	r3, [r7, #24]
        break;
 8003b04:	e004      	b.n	8003b10 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8003b06:	2300      	movs	r3, #0
 8003b08:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	77bb      	strb	r3, [r7, #30]
        break;
 8003b0e:	bf00      	nop
    }

    if (pclk != 0U)
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d018      	beq.n	8003b48 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	085a      	lsrs	r2, r3, #1
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	441a      	add	r2, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	2b0f      	cmp	r3, #15
 8003b30:	d908      	bls.n	8003b44 <UART_SetConfig+0x49c>
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b38:	d204      	bcs.n	8003b44 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	693a      	ldr	r2, [r7, #16]
 8003b40:	60da      	str	r2, [r3, #12]
 8003b42:	e001      	b.n	8003b48 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003b54:	7fbb      	ldrb	r3, [r7, #30]
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3720      	adds	r7, #32
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	40007c00 	.word	0x40007c00
 8003b64:	40023800 	.word	0x40023800
 8003b68:	00f42400 	.word	0x00f42400

08003b6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b78:	f003 0301 	and.w	r3, r3, #1
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d00a      	beq.n	8003b96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	430a      	orrs	r2, r1
 8003b94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00a      	beq.n	8003bb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbc:	f003 0304 	and.w	r3, r3, #4
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d00a      	beq.n	8003bda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bde:	f003 0308 	and.w	r3, r3, #8
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d00a      	beq.n	8003bfc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	430a      	orrs	r2, r1
 8003bfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c00:	f003 0310 	and.w	r3, r3, #16
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d00a      	beq.n	8003c1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c22:	f003 0320 	and.w	r3, r3, #32
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00a      	beq.n	8003c40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	430a      	orrs	r2, r1
 8003c3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d01a      	beq.n	8003c82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c6a:	d10a      	bne.n	8003c82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00a      	beq.n	8003ca4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	605a      	str	r2, [r3, #4]
  }
}
 8003ca4:	bf00      	nop
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b086      	sub	sp, #24
 8003cb4:	af02      	add	r7, sp, #8
 8003cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003cc0:	f7fd f9fa 	bl	80010b8 <HAL_GetTick>
 8003cc4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0308 	and.w	r3, r3, #8
 8003cd0:	2b08      	cmp	r3, #8
 8003cd2:	d10e      	bne.n	8003cf2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cd4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003cd8:	9300      	str	r3, [sp, #0]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 f82d 	bl	8003d42 <UART_WaitOnFlagUntilTimeout>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d001      	beq.n	8003cf2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e023      	b.n	8003d3a <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0304 	and.w	r3, r3, #4
 8003cfc:	2b04      	cmp	r3, #4
 8003cfe:	d10e      	bne.n	8003d1e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d04:	9300      	str	r3, [sp, #0]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 f817 	bl	8003d42 <UART_WaitOnFlagUntilTimeout>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d001      	beq.n	8003d1e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e00d      	b.n	8003d3a <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2220      	movs	r2, #32
 8003d22:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2220      	movs	r2, #32
 8003d28:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3710      	adds	r7, #16
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}

08003d42 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d42:	b580      	push	{r7, lr}
 8003d44:	b084      	sub	sp, #16
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	60f8      	str	r0, [r7, #12]
 8003d4a:	60b9      	str	r1, [r7, #8]
 8003d4c:	603b      	str	r3, [r7, #0]
 8003d4e:	4613      	mov	r3, r2
 8003d50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d52:	e05e      	b.n	8003e12 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d5a:	d05a      	beq.n	8003e12 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d5c:	f7fd f9ac 	bl	80010b8 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	69ba      	ldr	r2, [r7, #24]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d302      	bcc.n	8003d72 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d11b      	bne.n	8003daa <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003d80:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	689a      	ldr	r2, [r3, #8]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f022 0201 	bic.w	r2, r2, #1
 8003d90:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2220      	movs	r2, #32
 8003d96:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2220      	movs	r2, #32
 8003d9c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e043      	b.n	8003e32 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0304 	and.w	r3, r3, #4
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d02c      	beq.n	8003e12 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	69db      	ldr	r3, [r3, #28]
 8003dbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dc6:	d124      	bne.n	8003e12 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003dd0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003de0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	689a      	ldr	r2, [r3, #8]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f022 0201 	bic.w	r2, r2, #1
 8003df0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2220      	movs	r2, #32
 8003df6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2220      	movs	r2, #32
 8003dfc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2220      	movs	r2, #32
 8003e02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e00f      	b.n	8003e32 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	69da      	ldr	r2, [r3, #28]
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	68ba      	ldr	r2, [r7, #8]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	bf0c      	ite	eq
 8003e22:	2301      	moveq	r3, #1
 8003e24:	2300      	movne	r3, #0
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	461a      	mov	r2, r3
 8003e2a:	79fb      	ldrb	r3, [r7, #7]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d091      	beq.n	8003d54 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3710      	adds	r7, #16
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}

08003e3a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e3a:	b480      	push	{r7}
 8003e3c:	b083      	sub	sp, #12
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003e50:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	689a      	ldr	r2, [r3, #8]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f022 0201 	bic.w	r2, r2, #1
 8003e60:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d107      	bne.n	8003e7a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f022 0210 	bic.w	r2, r2, #16
 8003e78:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2220      	movs	r2, #32
 8003e7e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003eb6:	68f8      	ldr	r0, [r7, #12]
 8003eb8:	f7ff fbd6 	bl	8003668 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ebc:	bf00      	nop
 8003ebe:	3710      	adds	r7, #16
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eda:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2220      	movs	r2, #32
 8003ee0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f7ff fbb3 	bl	8003654 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003eee:	bf00      	nop
 8003ef0:	3708      	adds	r7, #8
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}

08003ef6 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003ef6:	b480      	push	{r7}
 8003ef8:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8003efa:	bf00      	nop
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003f04:	b480      	push	{r7}
 8003f06:	b085      	sub	sp, #20
 8003f08:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f0a:	f3ef 8305 	mrs	r3, IPSR
 8003f0e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f10:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d10f      	bne.n	8003f36 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f16:	f3ef 8310 	mrs	r3, PRIMASK
 8003f1a:	607b      	str	r3, [r7, #4]
  return(result);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d105      	bne.n	8003f2e <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003f22:	f3ef 8311 	mrs	r3, BASEPRI
 8003f26:	603b      	str	r3, [r7, #0]
  return(result);
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d007      	beq.n	8003f3e <osKernelInitialize+0x3a>
 8003f2e:	4b0e      	ldr	r3, [pc, #56]	; (8003f68 <osKernelInitialize+0x64>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d103      	bne.n	8003f3e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003f36:	f06f 0305 	mvn.w	r3, #5
 8003f3a:	60fb      	str	r3, [r7, #12]
 8003f3c:	e00c      	b.n	8003f58 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003f3e:	4b0a      	ldr	r3, [pc, #40]	; (8003f68 <osKernelInitialize+0x64>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d105      	bne.n	8003f52 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003f46:	4b08      	ldr	r3, [pc, #32]	; (8003f68 <osKernelInitialize+0x64>)
 8003f48:	2201      	movs	r2, #1
 8003f4a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	60fb      	str	r3, [r7, #12]
 8003f50:	e002      	b.n	8003f58 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003f52:	f04f 33ff 	mov.w	r3, #4294967295
 8003f56:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003f58:	68fb      	ldr	r3, [r7, #12]
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3714      	adds	r7, #20
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	2000019c 	.word	0x2000019c

08003f6c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f72:	f3ef 8305 	mrs	r3, IPSR
 8003f76:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f78:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d10f      	bne.n	8003f9e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f7e:	f3ef 8310 	mrs	r3, PRIMASK
 8003f82:	607b      	str	r3, [r7, #4]
  return(result);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d105      	bne.n	8003f96 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003f8a:	f3ef 8311 	mrs	r3, BASEPRI
 8003f8e:	603b      	str	r3, [r7, #0]
  return(result);
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d007      	beq.n	8003fa6 <osKernelStart+0x3a>
 8003f96:	4b0f      	ldr	r3, [pc, #60]	; (8003fd4 <osKernelStart+0x68>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d103      	bne.n	8003fa6 <osKernelStart+0x3a>
    stat = osErrorISR;
 8003f9e:	f06f 0305 	mvn.w	r3, #5
 8003fa2:	60fb      	str	r3, [r7, #12]
 8003fa4:	e010      	b.n	8003fc8 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003fa6:	4b0b      	ldr	r3, [pc, #44]	; (8003fd4 <osKernelStart+0x68>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d109      	bne.n	8003fc2 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003fae:	f7ff ffa2 	bl	8003ef6 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003fb2:	4b08      	ldr	r3, [pc, #32]	; (8003fd4 <osKernelStart+0x68>)
 8003fb4:	2202      	movs	r2, #2
 8003fb6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003fb8:	f001 fbfa 	bl	80057b0 <vTaskStartScheduler>
      stat = osOK;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	60fb      	str	r3, [r7, #12]
 8003fc0:	e002      	b.n	8003fc8 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8003fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8003fc6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3710      	adds	r7, #16
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	2000019c 	.word	0x2000019c

08003fd8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b090      	sub	sp, #64	; 0x40
 8003fdc:	af04      	add	r7, sp, #16
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003fe8:	f3ef 8305 	mrs	r3, IPSR
 8003fec:	61fb      	str	r3, [r7, #28]
  return(result);
 8003fee:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	f040 808f 	bne.w	8004114 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ff6:	f3ef 8310 	mrs	r3, PRIMASK
 8003ffa:	61bb      	str	r3, [r7, #24]
  return(result);
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d105      	bne.n	800400e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004002:	f3ef 8311 	mrs	r3, BASEPRI
 8004006:	617b      	str	r3, [r7, #20]
  return(result);
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d003      	beq.n	8004016 <osThreadNew+0x3e>
 800400e:	4b44      	ldr	r3, [pc, #272]	; (8004120 <osThreadNew+0x148>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2b02      	cmp	r3, #2
 8004014:	d07e      	beq.n	8004114 <osThreadNew+0x13c>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d07b      	beq.n	8004114 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800401c:	2380      	movs	r3, #128	; 0x80
 800401e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004020:	2318      	movs	r3, #24
 8004022:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8004024:	2300      	movs	r3, #0
 8004026:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8004028:	f04f 33ff 	mov.w	r3, #4294967295
 800402c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d045      	beq.n	80040c0 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d002      	beq.n	8004042 <osThreadNew+0x6a>
        name = attr->name;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d002      	beq.n	8004050 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004052:	2b00      	cmp	r3, #0
 8004054:	d008      	beq.n	8004068 <osThreadNew+0x90>
 8004056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004058:	2b38      	cmp	r3, #56	; 0x38
 800405a:	d805      	bhi.n	8004068 <osThreadNew+0x90>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f003 0301 	and.w	r3, r3, #1
 8004064:	2b00      	cmp	r3, #0
 8004066:	d001      	beq.n	800406c <osThreadNew+0x94>
        return (NULL);
 8004068:	2300      	movs	r3, #0
 800406a:	e054      	b.n	8004116 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	695b      	ldr	r3, [r3, #20]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d003      	beq.n	800407c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	695b      	ldr	r3, [r3, #20]
 8004078:	089b      	lsrs	r3, r3, #2
 800407a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00e      	beq.n	80040a2 <osThreadNew+0xca>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	2bbb      	cmp	r3, #187	; 0xbb
 800408a:	d90a      	bls.n	80040a2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004090:	2b00      	cmp	r3, #0
 8004092:	d006      	beq.n	80040a2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	695b      	ldr	r3, [r3, #20]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d002      	beq.n	80040a2 <osThreadNew+0xca>
        mem = 1;
 800409c:	2301      	movs	r3, #1
 800409e:	623b      	str	r3, [r7, #32]
 80040a0:	e010      	b.n	80040c4 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d10c      	bne.n	80040c4 <osThreadNew+0xec>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d108      	bne.n	80040c4 <osThreadNew+0xec>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d104      	bne.n	80040c4 <osThreadNew+0xec>
          mem = 0;
 80040ba:	2300      	movs	r3, #0
 80040bc:	623b      	str	r3, [r7, #32]
 80040be:	e001      	b.n	80040c4 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80040c0:	2300      	movs	r3, #0
 80040c2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80040c4:	6a3b      	ldr	r3, [r7, #32]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d110      	bne.n	80040ec <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80040d2:	9202      	str	r2, [sp, #8]
 80040d4:	9301      	str	r3, [sp, #4]
 80040d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d8:	9300      	str	r3, [sp, #0]
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040e0:	68f8      	ldr	r0, [r7, #12]
 80040e2:	f001 f96f 	bl	80053c4 <xTaskCreateStatic>
 80040e6:	4603      	mov	r3, r0
 80040e8:	613b      	str	r3, [r7, #16]
 80040ea:	e013      	b.n	8004114 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80040ec:	6a3b      	ldr	r3, [r7, #32]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d110      	bne.n	8004114 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80040f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	f107 0310 	add.w	r3, r7, #16
 80040fa:	9301      	str	r3, [sp, #4]
 80040fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fe:	9300      	str	r3, [sp, #0]
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	f001 f9c0 	bl	800548a <xTaskCreate>
 800410a:	4603      	mov	r3, r0
 800410c:	2b01      	cmp	r3, #1
 800410e:	d001      	beq.n	8004114 <osThreadNew+0x13c>
          hTask = NULL;
 8004110:	2300      	movs	r3, #0
 8004112:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004114:	693b      	ldr	r3, [r7, #16]
}
 8004116:	4618      	mov	r0, r3
 8004118:	3730      	adds	r7, #48	; 0x30
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	2000019c 	.word	0x2000019c

08004124 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004124:	b580      	push	{r7, lr}
 8004126:	b086      	sub	sp, #24
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800412c:	f3ef 8305 	mrs	r3, IPSR
 8004130:	613b      	str	r3, [r7, #16]
  return(result);
 8004132:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004134:	2b00      	cmp	r3, #0
 8004136:	d10f      	bne.n	8004158 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004138:	f3ef 8310 	mrs	r3, PRIMASK
 800413c:	60fb      	str	r3, [r7, #12]
  return(result);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d105      	bne.n	8004150 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004144:	f3ef 8311 	mrs	r3, BASEPRI
 8004148:	60bb      	str	r3, [r7, #8]
  return(result);
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d007      	beq.n	8004160 <osDelay+0x3c>
 8004150:	4b0a      	ldr	r3, [pc, #40]	; (800417c <osDelay+0x58>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2b02      	cmp	r3, #2
 8004156:	d103      	bne.n	8004160 <osDelay+0x3c>
    stat = osErrorISR;
 8004158:	f06f 0305 	mvn.w	r3, #5
 800415c:	617b      	str	r3, [r7, #20]
 800415e:	e007      	b.n	8004170 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004160:	2300      	movs	r3, #0
 8004162:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d002      	beq.n	8004170 <osDelay+0x4c>
      vTaskDelay(ticks);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f001 faea 	bl	8005744 <vTaskDelay>
    }
  }

  return (stat);
 8004170:	697b      	ldr	r3, [r7, #20]
}
 8004172:	4618      	mov	r0, r3
 8004174:	3718      	adds	r7, #24
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	2000019c 	.word	0x2000019c

08004180 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004180:	b480      	push	{r7}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	4a07      	ldr	r2, [pc, #28]	; (80041ac <vApplicationGetIdleTaskMemory+0x2c>)
 8004190:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	4a06      	ldr	r2, [pc, #24]	; (80041b0 <vApplicationGetIdleTaskMemory+0x30>)
 8004196:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2280      	movs	r2, #128	; 0x80
 800419c:	601a      	str	r2, [r3, #0]
}
 800419e:	bf00      	nop
 80041a0:	3714      	adds	r7, #20
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	200001a0 	.word	0x200001a0
 80041b0:	2000025c 	.word	0x2000025c

080041b4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	4a07      	ldr	r2, [pc, #28]	; (80041e0 <vApplicationGetTimerTaskMemory+0x2c>)
 80041c4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	4a06      	ldr	r2, [pc, #24]	; (80041e4 <vApplicationGetTimerTaskMemory+0x30>)
 80041ca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80041d2:	601a      	str	r2, [r3, #0]
}
 80041d4:	bf00      	nop
 80041d6:	3714      	adds	r7, #20
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr
 80041e0:	2000045c 	.word	0x2000045c
 80041e4:	20000518 	.word	0x20000518

080041e8 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80041ee:	2020      	movs	r0, #32
 80041f0:	f002 ffa8 	bl	8007144 <pvPortMalloc>
 80041f4:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00a      	beq.n	8004212 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	3304      	adds	r3, #4
 8004206:	4618      	mov	r0, r3
 8004208:	f000 f9b0 	bl	800456c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8004212:	687b      	ldr	r3, [r7, #4]
	}
 8004214:	4618      	mov	r0, r3
 8004216:	3708      	adds	r7, #8
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b090      	sub	sp, #64	; 0x40
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	607a      	str	r2, [r7, #4]
 8004228:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800422e:	2300      	movs	r3, #0
 8004230:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8004232:	2300      	movs	r3, #0
 8004234:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d10c      	bne.n	8004256 <xEventGroupWaitBits+0x3a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800423c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004240:	b672      	cpsid	i
 8004242:	f383 8811 	msr	BASEPRI, r3
 8004246:	f3bf 8f6f 	isb	sy
 800424a:	f3bf 8f4f 	dsb	sy
 800424e:	b662      	cpsie	i
 8004250:	623b      	str	r3, [r7, #32]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004252:	bf00      	nop
 8004254:	e7fe      	b.n	8004254 <xEventGroupWaitBits+0x38>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800425c:	2b00      	cmp	r3, #0
 800425e:	d00c      	beq.n	800427a <xEventGroupWaitBits+0x5e>
	__asm volatile
 8004260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004264:	b672      	cpsid	i
 8004266:	f383 8811 	msr	BASEPRI, r3
 800426a:	f3bf 8f6f 	isb	sy
 800426e:	f3bf 8f4f 	dsb	sy
 8004272:	b662      	cpsie	i
 8004274:	61fb      	str	r3, [r7, #28]
}
 8004276:	bf00      	nop
 8004278:	e7fe      	b.n	8004278 <xEventGroupWaitBits+0x5c>
	configASSERT( uxBitsToWaitFor != 0 );
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d10c      	bne.n	800429a <xEventGroupWaitBits+0x7e>
	__asm volatile
 8004280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004284:	b672      	cpsid	i
 8004286:	f383 8811 	msr	BASEPRI, r3
 800428a:	f3bf 8f6f 	isb	sy
 800428e:	f3bf 8f4f 	dsb	sy
 8004292:	b662      	cpsie	i
 8004294:	61bb      	str	r3, [r7, #24]
}
 8004296:	bf00      	nop
 8004298:	e7fe      	b.n	8004298 <xEventGroupWaitBits+0x7c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800429a:	f001 ffa1 	bl	80061e0 <xTaskGetSchedulerState>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d102      	bne.n	80042aa <xEventGroupWaitBits+0x8e>
 80042a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d101      	bne.n	80042ae <xEventGroupWaitBits+0x92>
 80042aa:	2301      	movs	r3, #1
 80042ac:	e000      	b.n	80042b0 <xEventGroupWaitBits+0x94>
 80042ae:	2300      	movs	r3, #0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d10c      	bne.n	80042ce <xEventGroupWaitBits+0xb2>
	__asm volatile
 80042b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b8:	b672      	cpsid	i
 80042ba:	f383 8811 	msr	BASEPRI, r3
 80042be:	f3bf 8f6f 	isb	sy
 80042c2:	f3bf 8f4f 	dsb	sy
 80042c6:	b662      	cpsie	i
 80042c8:	617b      	str	r3, [r7, #20]
}
 80042ca:	bf00      	nop
 80042cc:	e7fe      	b.n	80042cc <xEventGroupWaitBits+0xb0>
	}
	#endif

	vTaskSuspendAll();
 80042ce:	f001 fae3 	bl	8005898 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80042d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80042d8:	683a      	ldr	r2, [r7, #0]
 80042da:	68b9      	ldr	r1, [r7, #8]
 80042dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80042de:	f000 f90f 	bl	8004500 <prvTestWaitCondition>
 80042e2:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80042e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00e      	beq.n	8004308 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80042ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ec:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80042ee:	2300      	movs	r3, #0
 80042f0:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d028      	beq.n	800434a <xEventGroupWaitBits+0x12e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80042f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	43db      	mvns	r3, r3
 8004300:	401a      	ands	r2, r3
 8004302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004304:	601a      	str	r2, [r3, #0]
 8004306:	e020      	b.n	800434a <xEventGroupWaitBits+0x12e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8004308:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800430a:	2b00      	cmp	r3, #0
 800430c:	d104      	bne.n	8004318 <xEventGroupWaitBits+0xfc>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800430e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004310:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8004312:	2301      	movs	r3, #1
 8004314:	633b      	str	r3, [r7, #48]	; 0x30
 8004316:	e018      	b.n	800434a <xEventGroupWaitBits+0x12e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d003      	beq.n	8004326 <xEventGroupWaitBits+0x10a>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800431e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004320:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004324:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d003      	beq.n	8004334 <xEventGroupWaitBits+0x118>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800432c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800432e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004332:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8004334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004336:	1d18      	adds	r0, r3, #4
 8004338:	68ba      	ldr	r2, [r7, #8]
 800433a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800433c:	4313      	orrs	r3, r2
 800433e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004340:	4619      	mov	r1, r3
 8004342:	f001 fcaf 	bl	8005ca4 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8004346:	2300      	movs	r3, #0
 8004348:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800434a:	f001 fab3 	bl	80058b4 <xTaskResumeAll>
 800434e:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8004350:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004352:	2b00      	cmp	r3, #0
 8004354:	d031      	beq.n	80043ba <xEventGroupWaitBits+0x19e>
	{
		if( xAlreadyYielded == pdFALSE )
 8004356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004358:	2b00      	cmp	r3, #0
 800435a:	d107      	bne.n	800436c <xEventGroupWaitBits+0x150>
		{
			portYIELD_WITHIN_API();
 800435c:	4b19      	ldr	r3, [pc, #100]	; (80043c4 <xEventGroupWaitBits+0x1a8>)
 800435e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004362:	601a      	str	r2, [r3, #0]
 8004364:	f3bf 8f4f 	dsb	sy
 8004368:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800436c:	f002 f8b6 	bl	80064dc <uxTaskResetEventItemValue>
 8004370:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8004372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004374:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d11a      	bne.n	80043b2 <xEventGroupWaitBits+0x196>
		{
			taskENTER_CRITICAL();
 800437c:	f002 fdb6 	bl	8006eec <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8004380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8004386:	683a      	ldr	r2, [r7, #0]
 8004388:	68b9      	ldr	r1, [r7, #8]
 800438a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800438c:	f000 f8b8 	bl	8004500 <prvTestWaitCondition>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d009      	beq.n	80043aa <xEventGroupWaitBits+0x18e>
				{
					if( xClearOnExit != pdFALSE )
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d006      	beq.n	80043aa <xEventGroupWaitBits+0x18e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800439c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	43db      	mvns	r3, r3
 80043a4:	401a      	ands	r2, r3
 80043a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043a8:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80043aa:	2301      	movs	r3, #1
 80043ac:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80043ae:	f002 fdd1 	bl	8006f54 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80043b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80043b8:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80043ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3740      	adds	r7, #64	; 0x40
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	e000ed04 	.word	0xe000ed04

080043c8 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b08e      	sub	sp, #56	; 0x38
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80043d2:	2300      	movs	r3, #0
 80043d4:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80043da:	2300      	movs	r3, #0
 80043dc:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d10c      	bne.n	80043fe <xEventGroupSetBits+0x36>
	__asm volatile
 80043e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e8:	b672      	cpsid	i
 80043ea:	f383 8811 	msr	BASEPRI, r3
 80043ee:	f3bf 8f6f 	isb	sy
 80043f2:	f3bf 8f4f 	dsb	sy
 80043f6:	b662      	cpsie	i
 80043f8:	613b      	str	r3, [r7, #16]
}
 80043fa:	bf00      	nop
 80043fc:	e7fe      	b.n	80043fc <xEventGroupSetBits+0x34>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d00c      	beq.n	8004422 <xEventGroupSetBits+0x5a>
	__asm volatile
 8004408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800440c:	b672      	cpsid	i
 800440e:	f383 8811 	msr	BASEPRI, r3
 8004412:	f3bf 8f6f 	isb	sy
 8004416:	f3bf 8f4f 	dsb	sy
 800441a:	b662      	cpsie	i
 800441c:	60fb      	str	r3, [r7, #12]
}
 800441e:	bf00      	nop
 8004420:	e7fe      	b.n	8004420 <xEventGroupSetBits+0x58>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8004422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004424:	3304      	adds	r3, #4
 8004426:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442a:	3308      	adds	r3, #8
 800442c:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800442e:	f001 fa33 	bl	8005898 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8004432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8004438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	431a      	orrs	r2, r3
 8004440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004442:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8004444:	e03c      	b.n	80044c0 <xEventGroupSetBits+0xf8>
		{
			pxNext = listGET_NEXT( pxListItem );
 8004446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800444c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8004452:	2300      	movs	r3, #0
 8004454:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800445c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004464:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d108      	bne.n	8004482 <xEventGroupSetBits+0xba>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8004470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	4013      	ands	r3, r2
 8004478:	2b00      	cmp	r3, #0
 800447a:	d00b      	beq.n	8004494 <xEventGroupSetBits+0xcc>
				{
					xMatchFound = pdTRUE;
 800447c:	2301      	movs	r3, #1
 800447e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004480:	e008      	b.n	8004494 <xEventGroupSetBits+0xcc>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8004482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	4013      	ands	r3, r2
 800448a:	69ba      	ldr	r2, [r7, #24]
 800448c:	429a      	cmp	r2, r3
 800448e:	d101      	bne.n	8004494 <xEventGroupSetBits+0xcc>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8004490:	2301      	movs	r3, #1
 8004492:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8004494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004496:	2b00      	cmp	r3, #0
 8004498:	d010      	beq.n	80044bc <xEventGroupSetBits+0xf4>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d003      	beq.n	80044ac <xEventGroupSetBits+0xe4>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80044a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80044ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80044b4:	4619      	mov	r1, r3
 80044b6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80044b8:	f001 fcc8 	bl	8005e4c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80044c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044c2:	6a3b      	ldr	r3, [r7, #32]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d1be      	bne.n	8004446 <xEventGroupSetBits+0x7e>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80044c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ce:	43db      	mvns	r3, r3
 80044d0:	401a      	ands	r2, r3
 80044d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d4:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80044d6:	f001 f9ed 	bl	80058b4 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80044da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044dc:	681b      	ldr	r3, [r3, #0]
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3738      	adds	r7, #56	; 0x38
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80044e6:	b580      	push	{r7, lr}
 80044e8:	b082      	sub	sp, #8
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
 80044ee:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80044f0:	6839      	ldr	r1, [r7, #0]
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f7ff ff68 	bl	80043c8 <xEventGroupSetBits>
}
 80044f8:	bf00      	nop
 80044fa:	3708      	adds	r7, #8
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8004500:	b480      	push	{r7}
 8004502:	b087      	sub	sp, #28
 8004504:	af00      	add	r7, sp, #0
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	60b9      	str	r1, [r7, #8]
 800450a:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800450c:	2300      	movs	r3, #0
 800450e:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d107      	bne.n	8004526 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	4013      	ands	r3, r2
 800451c:	2b00      	cmp	r3, #0
 800451e:	d00a      	beq.n	8004536 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8004520:	2301      	movs	r3, #1
 8004522:	617b      	str	r3, [r7, #20]
 8004524:	e007      	b.n	8004536 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8004526:	68fa      	ldr	r2, [r7, #12]
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	4013      	ands	r3, r2
 800452c:	68ba      	ldr	r2, [r7, #8]
 800452e:	429a      	cmp	r2, r3
 8004530:	d101      	bne.n	8004536 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8004532:	2301      	movs	r3, #1
 8004534:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8004536:	697b      	ldr	r3, [r7, #20]
}
 8004538:	4618      	mov	r0, r3
 800453a:	371c      	adds	r7, #28
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8004544:	b580      	push	{r7, lr}
 8004546:	b086      	sub	sp, #24
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	68ba      	ldr	r2, [r7, #8]
 8004554:	68f9      	ldr	r1, [r7, #12]
 8004556:	4804      	ldr	r0, [pc, #16]	; (8004568 <xEventGroupSetBitsFromISR+0x24>)
 8004558:	f002 fb9c 	bl	8006c94 <xTimerPendFunctionCallFromISR>
 800455c:	6178      	str	r0, [r7, #20]

		return xReturn;
 800455e:	697b      	ldr	r3, [r7, #20]
	}
 8004560:	4618      	mov	r0, r3
 8004562:	3718      	adds	r7, #24
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	080044e7 	.word	0x080044e7

0800456c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f103 0208 	add.w	r2, r3, #8
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f04f 32ff 	mov.w	r2, #4294967295
 8004584:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f103 0208 	add.w	r2, r3, #8
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f103 0208 	add.w	r2, r3, #8
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80045a0:	bf00      	nop
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80045ba:	bf00      	nop
 80045bc:	370c      	adds	r7, #12
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr

080045c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80045c6:	b480      	push	{r7}
 80045c8:	b085      	sub	sp, #20
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
 80045ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	689a      	ldr	r2, [r3, #8]
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	683a      	ldr	r2, [r7, #0]
 80045ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	683a      	ldr	r2, [r7, #0]
 80045f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	1c5a      	adds	r2, r3, #1
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	601a      	str	r2, [r3, #0]
}
 8004602:	bf00      	nop
 8004604:	3714      	adds	r7, #20
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr

0800460e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800460e:	b480      	push	{r7}
 8004610:	b085      	sub	sp, #20
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
 8004616:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004624:	d103      	bne.n	800462e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	60fb      	str	r3, [r7, #12]
 800462c:	e00c      	b.n	8004648 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	3308      	adds	r3, #8
 8004632:	60fb      	str	r3, [r7, #12]
 8004634:	e002      	b.n	800463c <vListInsert+0x2e>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	60fb      	str	r3, [r7, #12]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68ba      	ldr	r2, [r7, #8]
 8004644:	429a      	cmp	r2, r3
 8004646:	d2f6      	bcs.n	8004636 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	685a      	ldr	r2, [r3, #4]
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	683a      	ldr	r2, [r7, #0]
 8004656:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	683a      	ldr	r2, [r7, #0]
 8004662:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	1c5a      	adds	r2, r3, #1
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	601a      	str	r2, [r3, #0]
}
 8004674:	bf00      	nop
 8004676:	3714      	adds	r7, #20
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004680:	b480      	push	{r7}
 8004682:	b085      	sub	sp, #20
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	691b      	ldr	r3, [r3, #16]
 800468c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	6892      	ldr	r2, [r2, #8]
 8004696:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	6852      	ldr	r2, [r2, #4]
 80046a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d103      	bne.n	80046b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	689a      	ldr	r2, [r3, #8]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	1e5a      	subs	r2, r3, #1
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3714      	adds	r7, #20
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d10c      	bne.n	8004702 <xQueueGenericReset+0x2e>
	__asm volatile
 80046e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ec:	b672      	cpsid	i
 80046ee:	f383 8811 	msr	BASEPRI, r3
 80046f2:	f3bf 8f6f 	isb	sy
 80046f6:	f3bf 8f4f 	dsb	sy
 80046fa:	b662      	cpsie	i
 80046fc:	60bb      	str	r3, [r7, #8]
}
 80046fe:	bf00      	nop
 8004700:	e7fe      	b.n	8004700 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8004702:	f002 fbf3 	bl	8006eec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800470e:	68f9      	ldr	r1, [r7, #12]
 8004710:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004712:	fb01 f303 	mul.w	r3, r1, r3
 8004716:	441a      	add	r2, r3
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2200      	movs	r2, #0
 8004720:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004732:	3b01      	subs	r3, #1
 8004734:	68f9      	ldr	r1, [r7, #12]
 8004736:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004738:	fb01 f303 	mul.w	r3, r1, r3
 800473c:	441a      	add	r2, r3
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	22ff      	movs	r2, #255	; 0xff
 8004746:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	22ff      	movs	r2, #255	; 0xff
 800474e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d114      	bne.n	8004782 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	691b      	ldr	r3, [r3, #16]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d01a      	beq.n	8004796 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	3310      	adds	r3, #16
 8004764:	4618      	mov	r0, r3
 8004766:	f001 fb0b 	bl	8005d80 <xTaskRemoveFromEventList>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d012      	beq.n	8004796 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004770:	4b0c      	ldr	r3, [pc, #48]	; (80047a4 <xQueueGenericReset+0xd0>)
 8004772:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004776:	601a      	str	r2, [r3, #0]
 8004778:	f3bf 8f4f 	dsb	sy
 800477c:	f3bf 8f6f 	isb	sy
 8004780:	e009      	b.n	8004796 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	3310      	adds	r3, #16
 8004786:	4618      	mov	r0, r3
 8004788:	f7ff fef0 	bl	800456c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	3324      	adds	r3, #36	; 0x24
 8004790:	4618      	mov	r0, r3
 8004792:	f7ff feeb 	bl	800456c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004796:	f002 fbdd 	bl	8006f54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800479a:	2301      	movs	r3, #1
}
 800479c:	4618      	mov	r0, r3
 800479e:	3710      	adds	r7, #16
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	e000ed04 	.word	0xe000ed04

080047a8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b08e      	sub	sp, #56	; 0x38
 80047ac:	af02      	add	r7, sp, #8
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	607a      	str	r2, [r7, #4]
 80047b4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d10c      	bne.n	80047d6 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80047bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c0:	b672      	cpsid	i
 80047c2:	f383 8811 	msr	BASEPRI, r3
 80047c6:	f3bf 8f6f 	isb	sy
 80047ca:	f3bf 8f4f 	dsb	sy
 80047ce:	b662      	cpsie	i
 80047d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80047d2:	bf00      	nop
 80047d4:	e7fe      	b.n	80047d4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d10c      	bne.n	80047f6 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80047dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e0:	b672      	cpsid	i
 80047e2:	f383 8811 	msr	BASEPRI, r3
 80047e6:	f3bf 8f6f 	isb	sy
 80047ea:	f3bf 8f4f 	dsb	sy
 80047ee:	b662      	cpsie	i
 80047f0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80047f2:	bf00      	nop
 80047f4:	e7fe      	b.n	80047f4 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d002      	beq.n	8004802 <xQueueGenericCreateStatic+0x5a>
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d001      	beq.n	8004806 <xQueueGenericCreateStatic+0x5e>
 8004802:	2301      	movs	r3, #1
 8004804:	e000      	b.n	8004808 <xQueueGenericCreateStatic+0x60>
 8004806:	2300      	movs	r3, #0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d10c      	bne.n	8004826 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800480c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004810:	b672      	cpsid	i
 8004812:	f383 8811 	msr	BASEPRI, r3
 8004816:	f3bf 8f6f 	isb	sy
 800481a:	f3bf 8f4f 	dsb	sy
 800481e:	b662      	cpsie	i
 8004820:	623b      	str	r3, [r7, #32]
}
 8004822:	bf00      	nop
 8004824:	e7fe      	b.n	8004824 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d102      	bne.n	8004832 <xQueueGenericCreateStatic+0x8a>
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d101      	bne.n	8004836 <xQueueGenericCreateStatic+0x8e>
 8004832:	2301      	movs	r3, #1
 8004834:	e000      	b.n	8004838 <xQueueGenericCreateStatic+0x90>
 8004836:	2300      	movs	r3, #0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d10c      	bne.n	8004856 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800483c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004840:	b672      	cpsid	i
 8004842:	f383 8811 	msr	BASEPRI, r3
 8004846:	f3bf 8f6f 	isb	sy
 800484a:	f3bf 8f4f 	dsb	sy
 800484e:	b662      	cpsie	i
 8004850:	61fb      	str	r3, [r7, #28]
}
 8004852:	bf00      	nop
 8004854:	e7fe      	b.n	8004854 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004856:	2350      	movs	r3, #80	; 0x50
 8004858:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	2b50      	cmp	r3, #80	; 0x50
 800485e:	d00c      	beq.n	800487a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8004860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004864:	b672      	cpsid	i
 8004866:	f383 8811 	msr	BASEPRI, r3
 800486a:	f3bf 8f6f 	isb	sy
 800486e:	f3bf 8f4f 	dsb	sy
 8004872:	b662      	cpsie	i
 8004874:	61bb      	str	r3, [r7, #24]
}
 8004876:	bf00      	nop
 8004878:	e7fe      	b.n	8004878 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800487a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00d      	beq.n	80048a2 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004888:	2201      	movs	r2, #1
 800488a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800488e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004894:	9300      	str	r3, [sp, #0]
 8004896:	4613      	mov	r3, r2
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	68b9      	ldr	r1, [r7, #8]
 800489c:	68f8      	ldr	r0, [r7, #12]
 800489e:	f000 f847 	bl	8004930 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80048a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3730      	adds	r7, #48	; 0x30
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b08a      	sub	sp, #40	; 0x28
 80048b0:	af02      	add	r7, sp, #8
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	4613      	mov	r3, r2
 80048b8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d10c      	bne.n	80048da <xQueueGenericCreate+0x2e>
	__asm volatile
 80048c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c4:	b672      	cpsid	i
 80048c6:	f383 8811 	msr	BASEPRI, r3
 80048ca:	f3bf 8f6f 	isb	sy
 80048ce:	f3bf 8f4f 	dsb	sy
 80048d2:	b662      	cpsie	i
 80048d4:	613b      	str	r3, [r7, #16]
}
 80048d6:	bf00      	nop
 80048d8:	e7fe      	b.n	80048d8 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d102      	bne.n	80048e6 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80048e0:	2300      	movs	r3, #0
 80048e2:	61fb      	str	r3, [r7, #28]
 80048e4:	e004      	b.n	80048f0 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	68ba      	ldr	r2, [r7, #8]
 80048ea:	fb02 f303 	mul.w	r3, r2, r3
 80048ee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	3350      	adds	r3, #80	; 0x50
 80048f4:	4618      	mov	r0, r3
 80048f6:	f002 fc25 	bl	8007144 <pvPortMalloc>
 80048fa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d011      	beq.n	8004926 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	3350      	adds	r3, #80	; 0x50
 800490a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004914:	79fa      	ldrb	r2, [r7, #7]
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	9300      	str	r3, [sp, #0]
 800491a:	4613      	mov	r3, r2
 800491c:	697a      	ldr	r2, [r7, #20]
 800491e:	68b9      	ldr	r1, [r7, #8]
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	f000 f805 	bl	8004930 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004926:	69bb      	ldr	r3, [r7, #24]
	}
 8004928:	4618      	mov	r0, r3
 800492a:	3720      	adds	r7, #32
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
 800493c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d103      	bne.n	800494c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	69ba      	ldr	r2, [r7, #24]
 8004948:	601a      	str	r2, [r3, #0]
 800494a:	e002      	b.n	8004952 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	68fa      	ldr	r2, [r7, #12]
 8004956:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	68ba      	ldr	r2, [r7, #8]
 800495c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800495e:	2101      	movs	r1, #1
 8004960:	69b8      	ldr	r0, [r7, #24]
 8004962:	f7ff feb7 	bl	80046d4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	78fa      	ldrb	r2, [r7, #3]
 800496a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800496e:	bf00      	nop
 8004970:	3710      	adds	r7, #16
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
	...

08004978 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b08e      	sub	sp, #56	; 0x38
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]
 8004984:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004986:	2300      	movs	r3, #0
 8004988:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800498e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004990:	2b00      	cmp	r3, #0
 8004992:	d10c      	bne.n	80049ae <xQueueGenericSend+0x36>
	__asm volatile
 8004994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004998:	b672      	cpsid	i
 800499a:	f383 8811 	msr	BASEPRI, r3
 800499e:	f3bf 8f6f 	isb	sy
 80049a2:	f3bf 8f4f 	dsb	sy
 80049a6:	b662      	cpsie	i
 80049a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80049aa:	bf00      	nop
 80049ac:	e7fe      	b.n	80049ac <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d103      	bne.n	80049bc <xQueueGenericSend+0x44>
 80049b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d101      	bne.n	80049c0 <xQueueGenericSend+0x48>
 80049bc:	2301      	movs	r3, #1
 80049be:	e000      	b.n	80049c2 <xQueueGenericSend+0x4a>
 80049c0:	2300      	movs	r3, #0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d10c      	bne.n	80049e0 <xQueueGenericSend+0x68>
	__asm volatile
 80049c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ca:	b672      	cpsid	i
 80049cc:	f383 8811 	msr	BASEPRI, r3
 80049d0:	f3bf 8f6f 	isb	sy
 80049d4:	f3bf 8f4f 	dsb	sy
 80049d8:	b662      	cpsie	i
 80049da:	627b      	str	r3, [r7, #36]	; 0x24
}
 80049dc:	bf00      	nop
 80049de:	e7fe      	b.n	80049de <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	d103      	bne.n	80049ee <xQueueGenericSend+0x76>
 80049e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d101      	bne.n	80049f2 <xQueueGenericSend+0x7a>
 80049ee:	2301      	movs	r3, #1
 80049f0:	e000      	b.n	80049f4 <xQueueGenericSend+0x7c>
 80049f2:	2300      	movs	r3, #0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d10c      	bne.n	8004a12 <xQueueGenericSend+0x9a>
	__asm volatile
 80049f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049fc:	b672      	cpsid	i
 80049fe:	f383 8811 	msr	BASEPRI, r3
 8004a02:	f3bf 8f6f 	isb	sy
 8004a06:	f3bf 8f4f 	dsb	sy
 8004a0a:	b662      	cpsie	i
 8004a0c:	623b      	str	r3, [r7, #32]
}
 8004a0e:	bf00      	nop
 8004a10:	e7fe      	b.n	8004a10 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a12:	f001 fbe5 	bl	80061e0 <xTaskGetSchedulerState>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d102      	bne.n	8004a22 <xQueueGenericSend+0xaa>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d101      	bne.n	8004a26 <xQueueGenericSend+0xae>
 8004a22:	2301      	movs	r3, #1
 8004a24:	e000      	b.n	8004a28 <xQueueGenericSend+0xb0>
 8004a26:	2300      	movs	r3, #0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d10c      	bne.n	8004a46 <xQueueGenericSend+0xce>
	__asm volatile
 8004a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a30:	b672      	cpsid	i
 8004a32:	f383 8811 	msr	BASEPRI, r3
 8004a36:	f3bf 8f6f 	isb	sy
 8004a3a:	f3bf 8f4f 	dsb	sy
 8004a3e:	b662      	cpsie	i
 8004a40:	61fb      	str	r3, [r7, #28]
}
 8004a42:	bf00      	nop
 8004a44:	e7fe      	b.n	8004a44 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a46:	f002 fa51 	bl	8006eec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d302      	bcc.n	8004a5c <xQueueGenericSend+0xe4>
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	d129      	bne.n	8004ab0 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a5c:	683a      	ldr	r2, [r7, #0]
 8004a5e:	68b9      	ldr	r1, [r7, #8]
 8004a60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a62:	f000 fb41 	bl	80050e8 <prvCopyDataToQueue>
 8004a66:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d010      	beq.n	8004a92 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a72:	3324      	adds	r3, #36	; 0x24
 8004a74:	4618      	mov	r0, r3
 8004a76:	f001 f983 	bl	8005d80 <xTaskRemoveFromEventList>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d013      	beq.n	8004aa8 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004a80:	4b3f      	ldr	r3, [pc, #252]	; (8004b80 <xQueueGenericSend+0x208>)
 8004a82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a86:	601a      	str	r2, [r3, #0]
 8004a88:	f3bf 8f4f 	dsb	sy
 8004a8c:	f3bf 8f6f 	isb	sy
 8004a90:	e00a      	b.n	8004aa8 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d007      	beq.n	8004aa8 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004a98:	4b39      	ldr	r3, [pc, #228]	; (8004b80 <xQueueGenericSend+0x208>)
 8004a9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a9e:	601a      	str	r2, [r3, #0]
 8004aa0:	f3bf 8f4f 	dsb	sy
 8004aa4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004aa8:	f002 fa54 	bl	8006f54 <vPortExitCritical>
				return pdPASS;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e063      	b.n	8004b78 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d103      	bne.n	8004abe <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ab6:	f002 fa4d 	bl	8006f54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004aba:	2300      	movs	r3, #0
 8004abc:	e05c      	b.n	8004b78 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d106      	bne.n	8004ad2 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ac4:	f107 0314 	add.w	r3, r7, #20
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f001 fa25 	bl	8005f18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ad2:	f002 fa3f 	bl	8006f54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ad6:	f000 fedf 	bl	8005898 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ada:	f002 fa07 	bl	8006eec <vPortEnterCritical>
 8004ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ae4:	b25b      	sxtb	r3, r3
 8004ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aea:	d103      	bne.n	8004af4 <xQueueGenericSend+0x17c>
 8004aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004afa:	b25b      	sxtb	r3, r3
 8004afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b00:	d103      	bne.n	8004b0a <xQueueGenericSend+0x192>
 8004b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b0a:	f002 fa23 	bl	8006f54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b0e:	1d3a      	adds	r2, r7, #4
 8004b10:	f107 0314 	add.w	r3, r7, #20
 8004b14:	4611      	mov	r1, r2
 8004b16:	4618      	mov	r0, r3
 8004b18:	f001 fa14 	bl	8005f44 <xTaskCheckForTimeOut>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d124      	bne.n	8004b6c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004b22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b24:	f000 fbd8 	bl	80052d8 <prvIsQueueFull>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d018      	beq.n	8004b60 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b30:	3310      	adds	r3, #16
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	4611      	mov	r1, r2
 8004b36:	4618      	mov	r0, r3
 8004b38:	f001 f88e 	bl	8005c58 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004b3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b3e:	f000 fb63 	bl	8005208 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004b42:	f000 feb7 	bl	80058b4 <xTaskResumeAll>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	f47f af7c 	bne.w	8004a46 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8004b4e:	4b0c      	ldr	r3, [pc, #48]	; (8004b80 <xQueueGenericSend+0x208>)
 8004b50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b54:	601a      	str	r2, [r3, #0]
 8004b56:	f3bf 8f4f 	dsb	sy
 8004b5a:	f3bf 8f6f 	isb	sy
 8004b5e:	e772      	b.n	8004a46 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004b60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b62:	f000 fb51 	bl	8005208 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b66:	f000 fea5 	bl	80058b4 <xTaskResumeAll>
 8004b6a:	e76c      	b.n	8004a46 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004b6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b6e:	f000 fb4b 	bl	8005208 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b72:	f000 fe9f 	bl	80058b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004b76:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3738      	adds	r7, #56	; 0x38
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	e000ed04 	.word	0xe000ed04

08004b84 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b08e      	sub	sp, #56	; 0x38
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	607a      	str	r2, [r7, #4]
 8004b90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d10c      	bne.n	8004bb6 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8004b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba0:	b672      	cpsid	i
 8004ba2:	f383 8811 	msr	BASEPRI, r3
 8004ba6:	f3bf 8f6f 	isb	sy
 8004baa:	f3bf 8f4f 	dsb	sy
 8004bae:	b662      	cpsie	i
 8004bb0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004bb2:	bf00      	nop
 8004bb4:	e7fe      	b.n	8004bb4 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d103      	bne.n	8004bc4 <xQueueGenericSendFromISR+0x40>
 8004bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d101      	bne.n	8004bc8 <xQueueGenericSendFromISR+0x44>
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e000      	b.n	8004bca <xQueueGenericSendFromISR+0x46>
 8004bc8:	2300      	movs	r3, #0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d10c      	bne.n	8004be8 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8004bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd2:	b672      	cpsid	i
 8004bd4:	f383 8811 	msr	BASEPRI, r3
 8004bd8:	f3bf 8f6f 	isb	sy
 8004bdc:	f3bf 8f4f 	dsb	sy
 8004be0:	b662      	cpsie	i
 8004be2:	623b      	str	r3, [r7, #32]
}
 8004be4:	bf00      	nop
 8004be6:	e7fe      	b.n	8004be6 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d103      	bne.n	8004bf6 <xQueueGenericSendFromISR+0x72>
 8004bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d101      	bne.n	8004bfa <xQueueGenericSendFromISR+0x76>
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e000      	b.n	8004bfc <xQueueGenericSendFromISR+0x78>
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d10c      	bne.n	8004c1a <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8004c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c04:	b672      	cpsid	i
 8004c06:	f383 8811 	msr	BASEPRI, r3
 8004c0a:	f3bf 8f6f 	isb	sy
 8004c0e:	f3bf 8f4f 	dsb	sy
 8004c12:	b662      	cpsie	i
 8004c14:	61fb      	str	r3, [r7, #28]
}
 8004c16:	bf00      	nop
 8004c18:	e7fe      	b.n	8004c18 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004c1a:	f002 fa4f 	bl	80070bc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004c1e:	f3ef 8211 	mrs	r2, BASEPRI
 8004c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c26:	b672      	cpsid	i
 8004c28:	f383 8811 	msr	BASEPRI, r3
 8004c2c:	f3bf 8f6f 	isb	sy
 8004c30:	f3bf 8f4f 	dsb	sy
 8004c34:	b662      	cpsie	i
 8004c36:	61ba      	str	r2, [r7, #24]
 8004c38:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004c3a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d302      	bcc.n	8004c50 <xQueueGenericSendFromISR+0xcc>
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d12c      	bne.n	8004caa <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c5a:	683a      	ldr	r2, [r7, #0]
 8004c5c:	68b9      	ldr	r1, [r7, #8]
 8004c5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c60:	f000 fa42 	bl	80050e8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004c64:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c6c:	d112      	bne.n	8004c94 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d016      	beq.n	8004ca4 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c78:	3324      	adds	r3, #36	; 0x24
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f001 f880 	bl	8005d80 <xTaskRemoveFromEventList>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d00e      	beq.n	8004ca4 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d00b      	beq.n	8004ca4 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	601a      	str	r2, [r3, #0]
 8004c92:	e007      	b.n	8004ca4 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004c94:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004c98:	3301      	adds	r3, #1
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	b25a      	sxtb	r2, r3
 8004c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004ca8:	e001      	b.n	8004cae <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004caa:	2300      	movs	r3, #0
 8004cac:	637b      	str	r3, [r7, #52]	; 0x34
 8004cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004cb8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3738      	adds	r7, #56	; 0x38
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b08c      	sub	sp, #48	; 0x30
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	60b9      	str	r1, [r7, #8]
 8004cce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d10c      	bne.n	8004cf8 <xQueueReceive+0x34>
	__asm volatile
 8004cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce2:	b672      	cpsid	i
 8004ce4:	f383 8811 	msr	BASEPRI, r3
 8004ce8:	f3bf 8f6f 	isb	sy
 8004cec:	f3bf 8f4f 	dsb	sy
 8004cf0:	b662      	cpsie	i
 8004cf2:	623b      	str	r3, [r7, #32]
}
 8004cf4:	bf00      	nop
 8004cf6:	e7fe      	b.n	8004cf6 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d103      	bne.n	8004d06 <xQueueReceive+0x42>
 8004cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d101      	bne.n	8004d0a <xQueueReceive+0x46>
 8004d06:	2301      	movs	r3, #1
 8004d08:	e000      	b.n	8004d0c <xQueueReceive+0x48>
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d10c      	bne.n	8004d2a <xQueueReceive+0x66>
	__asm volatile
 8004d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d14:	b672      	cpsid	i
 8004d16:	f383 8811 	msr	BASEPRI, r3
 8004d1a:	f3bf 8f6f 	isb	sy
 8004d1e:	f3bf 8f4f 	dsb	sy
 8004d22:	b662      	cpsie	i
 8004d24:	61fb      	str	r3, [r7, #28]
}
 8004d26:	bf00      	nop
 8004d28:	e7fe      	b.n	8004d28 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d2a:	f001 fa59 	bl	80061e0 <xTaskGetSchedulerState>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d102      	bne.n	8004d3a <xQueueReceive+0x76>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d101      	bne.n	8004d3e <xQueueReceive+0x7a>
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e000      	b.n	8004d40 <xQueueReceive+0x7c>
 8004d3e:	2300      	movs	r3, #0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d10c      	bne.n	8004d5e <xQueueReceive+0x9a>
	__asm volatile
 8004d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d48:	b672      	cpsid	i
 8004d4a:	f383 8811 	msr	BASEPRI, r3
 8004d4e:	f3bf 8f6f 	isb	sy
 8004d52:	f3bf 8f4f 	dsb	sy
 8004d56:	b662      	cpsie	i
 8004d58:	61bb      	str	r3, [r7, #24]
}
 8004d5a:	bf00      	nop
 8004d5c:	e7fe      	b.n	8004d5c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d5e:	f002 f8c5 	bl	8006eec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d66:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d01f      	beq.n	8004dae <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004d6e:	68b9      	ldr	r1, [r7, #8]
 8004d70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d72:	f000 fa23 	bl	80051bc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d78:	1e5a      	subs	r2, r3, #1
 8004d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d7c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00f      	beq.n	8004da6 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d88:	3310      	adds	r3, #16
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f000 fff8 	bl	8005d80 <xTaskRemoveFromEventList>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d007      	beq.n	8004da6 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004d96:	4b3d      	ldr	r3, [pc, #244]	; (8004e8c <xQueueReceive+0x1c8>)
 8004d98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d9c:	601a      	str	r2, [r3, #0]
 8004d9e:	f3bf 8f4f 	dsb	sy
 8004da2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004da6:	f002 f8d5 	bl	8006f54 <vPortExitCritical>
				return pdPASS;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e069      	b.n	8004e82 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d103      	bne.n	8004dbc <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004db4:	f002 f8ce 	bl	8006f54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004db8:	2300      	movs	r3, #0
 8004dba:	e062      	b.n	8004e82 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d106      	bne.n	8004dd0 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004dc2:	f107 0310 	add.w	r3, r7, #16
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f001 f8a6 	bl	8005f18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004dd0:	f002 f8c0 	bl	8006f54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004dd4:	f000 fd60 	bl	8005898 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004dd8:	f002 f888 	bl	8006eec <vPortEnterCritical>
 8004ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dde:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004de2:	b25b      	sxtb	r3, r3
 8004de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004de8:	d103      	bne.n	8004df2 <xQueueReceive+0x12e>
 8004dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dec:	2200      	movs	r2, #0
 8004dee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004df8:	b25b      	sxtb	r3, r3
 8004dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dfe:	d103      	bne.n	8004e08 <xQueueReceive+0x144>
 8004e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e08:	f002 f8a4 	bl	8006f54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e0c:	1d3a      	adds	r2, r7, #4
 8004e0e:	f107 0310 	add.w	r3, r7, #16
 8004e12:	4611      	mov	r1, r2
 8004e14:	4618      	mov	r0, r3
 8004e16:	f001 f895 	bl	8005f44 <xTaskCheckForTimeOut>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d123      	bne.n	8004e68 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e22:	f000 fa43 	bl	80052ac <prvIsQueueEmpty>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d017      	beq.n	8004e5c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e2e:	3324      	adds	r3, #36	; 0x24
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	4611      	mov	r1, r2
 8004e34:	4618      	mov	r0, r3
 8004e36:	f000 ff0f 	bl	8005c58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004e3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e3c:	f000 f9e4 	bl	8005208 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004e40:	f000 fd38 	bl	80058b4 <xTaskResumeAll>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d189      	bne.n	8004d5e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8004e4a:	4b10      	ldr	r3, [pc, #64]	; (8004e8c <xQueueReceive+0x1c8>)
 8004e4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e50:	601a      	str	r2, [r3, #0]
 8004e52:	f3bf 8f4f 	dsb	sy
 8004e56:	f3bf 8f6f 	isb	sy
 8004e5a:	e780      	b.n	8004d5e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004e5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e5e:	f000 f9d3 	bl	8005208 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e62:	f000 fd27 	bl	80058b4 <xTaskResumeAll>
 8004e66:	e77a      	b.n	8004d5e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004e68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e6a:	f000 f9cd 	bl	8005208 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e6e:	f000 fd21 	bl	80058b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e74:	f000 fa1a 	bl	80052ac <prvIsQueueEmpty>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	f43f af6f 	beq.w	8004d5e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004e80:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3730      	adds	r7, #48	; 0x30
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	e000ed04 	.word	0xe000ed04

08004e90 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b08e      	sub	sp, #56	; 0x38
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d10c      	bne.n	8004ec6 <xQueueSemaphoreTake+0x36>
	__asm volatile
 8004eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb0:	b672      	cpsid	i
 8004eb2:	f383 8811 	msr	BASEPRI, r3
 8004eb6:	f3bf 8f6f 	isb	sy
 8004eba:	f3bf 8f4f 	dsb	sy
 8004ebe:	b662      	cpsie	i
 8004ec0:	623b      	str	r3, [r7, #32]
}
 8004ec2:	bf00      	nop
 8004ec4:	e7fe      	b.n	8004ec4 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00c      	beq.n	8004ee8 <xQueueSemaphoreTake+0x58>
	__asm volatile
 8004ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed2:	b672      	cpsid	i
 8004ed4:	f383 8811 	msr	BASEPRI, r3
 8004ed8:	f3bf 8f6f 	isb	sy
 8004edc:	f3bf 8f4f 	dsb	sy
 8004ee0:	b662      	cpsie	i
 8004ee2:	61fb      	str	r3, [r7, #28]
}
 8004ee4:	bf00      	nop
 8004ee6:	e7fe      	b.n	8004ee6 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ee8:	f001 f97a 	bl	80061e0 <xTaskGetSchedulerState>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d102      	bne.n	8004ef8 <xQueueSemaphoreTake+0x68>
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d101      	bne.n	8004efc <xQueueSemaphoreTake+0x6c>
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e000      	b.n	8004efe <xQueueSemaphoreTake+0x6e>
 8004efc:	2300      	movs	r3, #0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d10c      	bne.n	8004f1c <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8004f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f06:	b672      	cpsid	i
 8004f08:	f383 8811 	msr	BASEPRI, r3
 8004f0c:	f3bf 8f6f 	isb	sy
 8004f10:	f3bf 8f4f 	dsb	sy
 8004f14:	b662      	cpsie	i
 8004f16:	61bb      	str	r3, [r7, #24]
}
 8004f18:	bf00      	nop
 8004f1a:	e7fe      	b.n	8004f1a <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f1c:	f001 ffe6 	bl	8006eec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f24:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d024      	beq.n	8004f76 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f2e:	1e5a      	subs	r2, r3, #1
 8004f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f32:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d104      	bne.n	8004f46 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004f3c:	f001 fae6 	bl	800650c <pvTaskIncrementMutexHeldCount>
 8004f40:	4602      	mov	r2, r0
 8004f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f44:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00f      	beq.n	8004f6e <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f50:	3310      	adds	r3, #16
 8004f52:	4618      	mov	r0, r3
 8004f54:	f000 ff14 	bl	8005d80 <xTaskRemoveFromEventList>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d007      	beq.n	8004f6e <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004f5e:	4b55      	ldr	r3, [pc, #340]	; (80050b4 <xQueueSemaphoreTake+0x224>)
 8004f60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f64:	601a      	str	r2, [r3, #0]
 8004f66:	f3bf 8f4f 	dsb	sy
 8004f6a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004f6e:	f001 fff1 	bl	8006f54 <vPortExitCritical>
				return pdPASS;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e099      	b.n	80050aa <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d113      	bne.n	8004fa4 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d00c      	beq.n	8004f9c <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8004f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f86:	b672      	cpsid	i
 8004f88:	f383 8811 	msr	BASEPRI, r3
 8004f8c:	f3bf 8f6f 	isb	sy
 8004f90:	f3bf 8f4f 	dsb	sy
 8004f94:	b662      	cpsie	i
 8004f96:	617b      	str	r3, [r7, #20]
}
 8004f98:	bf00      	nop
 8004f9a:	e7fe      	b.n	8004f9a <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004f9c:	f001 ffda 	bl	8006f54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	e082      	b.n	80050aa <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d106      	bne.n	8004fb8 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004faa:	f107 030c 	add.w	r3, r7, #12
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f000 ffb2 	bl	8005f18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004fb8:	f001 ffcc 	bl	8006f54 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004fbc:	f000 fc6c 	bl	8005898 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004fc0:	f001 ff94 	bl	8006eec <vPortEnterCritical>
 8004fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fca:	b25b      	sxtb	r3, r3
 8004fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fd0:	d103      	bne.n	8004fda <xQueueSemaphoreTake+0x14a>
 8004fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fdc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fe0:	b25b      	sxtb	r3, r3
 8004fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe6:	d103      	bne.n	8004ff0 <xQueueSemaphoreTake+0x160>
 8004fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ff0:	f001 ffb0 	bl	8006f54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ff4:	463a      	mov	r2, r7
 8004ff6:	f107 030c 	add.w	r3, r7, #12
 8004ffa:	4611      	mov	r1, r2
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f000 ffa1 	bl	8005f44 <xTaskCheckForTimeOut>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d132      	bne.n	800506e <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005008:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800500a:	f000 f94f 	bl	80052ac <prvIsQueueEmpty>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d026      	beq.n	8005062 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d109      	bne.n	8005030 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800501c:	f001 ff66 	bl	8006eec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	4618      	mov	r0, r3
 8005026:	f001 f8f9 	bl	800621c <xTaskPriorityInherit>
 800502a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800502c:	f001 ff92 	bl	8006f54 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005032:	3324      	adds	r3, #36	; 0x24
 8005034:	683a      	ldr	r2, [r7, #0]
 8005036:	4611      	mov	r1, r2
 8005038:	4618      	mov	r0, r3
 800503a:	f000 fe0d 	bl	8005c58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800503e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005040:	f000 f8e2 	bl	8005208 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005044:	f000 fc36 	bl	80058b4 <xTaskResumeAll>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	f47f af66 	bne.w	8004f1c <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8005050:	4b18      	ldr	r3, [pc, #96]	; (80050b4 <xQueueSemaphoreTake+0x224>)
 8005052:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005056:	601a      	str	r2, [r3, #0]
 8005058:	f3bf 8f4f 	dsb	sy
 800505c:	f3bf 8f6f 	isb	sy
 8005060:	e75c      	b.n	8004f1c <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005062:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005064:	f000 f8d0 	bl	8005208 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005068:	f000 fc24 	bl	80058b4 <xTaskResumeAll>
 800506c:	e756      	b.n	8004f1c <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800506e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005070:	f000 f8ca 	bl	8005208 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005074:	f000 fc1e 	bl	80058b4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005078:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800507a:	f000 f917 	bl	80052ac <prvIsQueueEmpty>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	f43f af4b 	beq.w	8004f1c <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005088:	2b00      	cmp	r3, #0
 800508a:	d00d      	beq.n	80050a8 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800508c:	f001 ff2e 	bl	8006eec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005090:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005092:	f000 f811 	bl	80050b8 <prvGetDisinheritPriorityAfterTimeout>
 8005096:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800509e:	4618      	mov	r0, r3
 80050a0:	f001 f996 	bl	80063d0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80050a4:	f001 ff56 	bl	8006f54 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80050a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3738      	adds	r7, #56	; 0x38
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	e000ed04 	.word	0xe000ed04

080050b8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80050b8:	b480      	push	{r7}
 80050ba:	b085      	sub	sp, #20
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d006      	beq.n	80050d6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80050d2:	60fb      	str	r3, [r7, #12]
 80050d4:	e001      	b.n	80050da <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80050d6:	2300      	movs	r3, #0
 80050d8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80050da:	68fb      	ldr	r3, [r7, #12]
	}
 80050dc:	4618      	mov	r0, r3
 80050de:	3714      	adds	r7, #20
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b086      	sub	sp, #24
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80050f4:	2300      	movs	r3, #0
 80050f6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050fc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005102:	2b00      	cmp	r3, #0
 8005104:	d10d      	bne.n	8005122 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d14d      	bne.n	80051aa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	4618      	mov	r0, r3
 8005114:	f001 f8ea 	bl	80062ec <xTaskPriorityDisinherit>
 8005118:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2200      	movs	r2, #0
 800511e:	609a      	str	r2, [r3, #8]
 8005120:	e043      	b.n	80051aa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d119      	bne.n	800515c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6858      	ldr	r0, [r3, #4]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005130:	461a      	mov	r2, r3
 8005132:	68b9      	ldr	r1, [r7, #8]
 8005134:	f005 ff29 	bl	800af8a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	685a      	ldr	r2, [r3, #4]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005140:	441a      	add	r2, r3
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	685a      	ldr	r2, [r3, #4]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	429a      	cmp	r2, r3
 8005150:	d32b      	bcc.n	80051aa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	605a      	str	r2, [r3, #4]
 800515a:	e026      	b.n	80051aa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	68d8      	ldr	r0, [r3, #12]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005164:	461a      	mov	r2, r3
 8005166:	68b9      	ldr	r1, [r7, #8]
 8005168:	f005 ff0f 	bl	800af8a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	68da      	ldr	r2, [r3, #12]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005174:	425b      	negs	r3, r3
 8005176:	441a      	add	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	68da      	ldr	r2, [r3, #12]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	429a      	cmp	r2, r3
 8005186:	d207      	bcs.n	8005198 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	689a      	ldr	r2, [r3, #8]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005190:	425b      	negs	r3, r3
 8005192:	441a      	add	r2, r3
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2b02      	cmp	r3, #2
 800519c:	d105      	bne.n	80051aa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d002      	beq.n	80051aa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	3b01      	subs	r3, #1
 80051a8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	1c5a      	adds	r2, r3, #1
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80051b2:	697b      	ldr	r3, [r7, #20]
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3718      	adds	r7, #24
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b082      	sub	sp, #8
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d018      	beq.n	8005200 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	68da      	ldr	r2, [r3, #12]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d6:	441a      	add	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	68da      	ldr	r2, [r3, #12]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d303      	bcc.n	80051f0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	68d9      	ldr	r1, [r3, #12]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f8:	461a      	mov	r2, r3
 80051fa:	6838      	ldr	r0, [r7, #0]
 80051fc:	f005 fec5 	bl	800af8a <memcpy>
	}
}
 8005200:	bf00      	nop
 8005202:	3708      	adds	r7, #8
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005210:	f001 fe6c 	bl	8006eec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800521a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800521c:	e011      	b.n	8005242 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005222:	2b00      	cmp	r3, #0
 8005224:	d012      	beq.n	800524c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	3324      	adds	r3, #36	; 0x24
 800522a:	4618      	mov	r0, r3
 800522c:	f000 fda8 	bl	8005d80 <xTaskRemoveFromEventList>
 8005230:	4603      	mov	r3, r0
 8005232:	2b00      	cmp	r3, #0
 8005234:	d001      	beq.n	800523a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005236:	f000 feeb 	bl	8006010 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800523a:	7bfb      	ldrb	r3, [r7, #15]
 800523c:	3b01      	subs	r3, #1
 800523e:	b2db      	uxtb	r3, r3
 8005240:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005246:	2b00      	cmp	r3, #0
 8005248:	dce9      	bgt.n	800521e <prvUnlockQueue+0x16>
 800524a:	e000      	b.n	800524e <prvUnlockQueue+0x46>
					break;
 800524c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	22ff      	movs	r2, #255	; 0xff
 8005252:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005256:	f001 fe7d 	bl	8006f54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800525a:	f001 fe47 	bl	8006eec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005264:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005266:	e011      	b.n	800528c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d012      	beq.n	8005296 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	3310      	adds	r3, #16
 8005274:	4618      	mov	r0, r3
 8005276:	f000 fd83 	bl	8005d80 <xTaskRemoveFromEventList>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d001      	beq.n	8005284 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005280:	f000 fec6 	bl	8006010 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005284:	7bbb      	ldrb	r3, [r7, #14]
 8005286:	3b01      	subs	r3, #1
 8005288:	b2db      	uxtb	r3, r3
 800528a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800528c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005290:	2b00      	cmp	r3, #0
 8005292:	dce9      	bgt.n	8005268 <prvUnlockQueue+0x60>
 8005294:	e000      	b.n	8005298 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005296:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	22ff      	movs	r2, #255	; 0xff
 800529c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80052a0:	f001 fe58 	bl	8006f54 <vPortExitCritical>
}
 80052a4:	bf00      	nop
 80052a6:	3710      	adds	r7, #16
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80052b4:	f001 fe1a 	bl	8006eec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d102      	bne.n	80052c6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80052c0:	2301      	movs	r3, #1
 80052c2:	60fb      	str	r3, [r7, #12]
 80052c4:	e001      	b.n	80052ca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80052c6:	2300      	movs	r3, #0
 80052c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80052ca:	f001 fe43 	bl	8006f54 <vPortExitCritical>

	return xReturn;
 80052ce:	68fb      	ldr	r3, [r7, #12]
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3710      	adds	r7, #16
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80052e0:	f001 fe04 	bl	8006eec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d102      	bne.n	80052f6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80052f0:	2301      	movs	r3, #1
 80052f2:	60fb      	str	r3, [r7, #12]
 80052f4:	e001      	b.n	80052fa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80052f6:	2300      	movs	r3, #0
 80052f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80052fa:	f001 fe2b 	bl	8006f54 <vPortExitCritical>

	return xReturn;
 80052fe:	68fb      	ldr	r3, [r7, #12]
}
 8005300:	4618      	mov	r0, r3
 8005302:	3710      	adds	r7, #16
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005308:	b480      	push	{r7}
 800530a:	b085      	sub	sp, #20
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005312:	2300      	movs	r3, #0
 8005314:	60fb      	str	r3, [r7, #12]
 8005316:	e014      	b.n	8005342 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005318:	4a0f      	ldr	r2, [pc, #60]	; (8005358 <vQueueAddToRegistry+0x50>)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d10b      	bne.n	800533c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005324:	490c      	ldr	r1, [pc, #48]	; (8005358 <vQueueAddToRegistry+0x50>)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	683a      	ldr	r2, [r7, #0]
 800532a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800532e:	4a0a      	ldr	r2, [pc, #40]	; (8005358 <vQueueAddToRegistry+0x50>)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	00db      	lsls	r3, r3, #3
 8005334:	4413      	add	r3, r2
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800533a:	e006      	b.n	800534a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	3301      	adds	r3, #1
 8005340:	60fb      	str	r3, [r7, #12]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2b07      	cmp	r3, #7
 8005346:	d9e7      	bls.n	8005318 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005348:	bf00      	nop
 800534a:	bf00      	nop
 800534c:	3714      	adds	r7, #20
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	2000501c 	.word	0x2000501c

0800535c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800535c:	b580      	push	{r7, lr}
 800535e:	b086      	sub	sp, #24
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800536c:	f001 fdbe 	bl	8006eec <vPortEnterCritical>
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005376:	b25b      	sxtb	r3, r3
 8005378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800537c:	d103      	bne.n	8005386 <vQueueWaitForMessageRestricted+0x2a>
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800538c:	b25b      	sxtb	r3, r3
 800538e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005392:	d103      	bne.n	800539c <vQueueWaitForMessageRestricted+0x40>
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800539c:	f001 fdda 	bl	8006f54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d106      	bne.n	80053b6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	3324      	adds	r3, #36	; 0x24
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	68b9      	ldr	r1, [r7, #8]
 80053b0:	4618      	mov	r0, r3
 80053b2:	f000 fcb7 	bl	8005d24 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80053b6:	6978      	ldr	r0, [r7, #20]
 80053b8:	f7ff ff26 	bl	8005208 <prvUnlockQueue>
	}
 80053bc:	bf00      	nop
 80053be:	3718      	adds	r7, #24
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}

080053c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b08e      	sub	sp, #56	; 0x38
 80053c8:	af04      	add	r7, sp, #16
 80053ca:	60f8      	str	r0, [r7, #12]
 80053cc:	60b9      	str	r1, [r7, #8]
 80053ce:	607a      	str	r2, [r7, #4]
 80053d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80053d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d10c      	bne.n	80053f2 <xTaskCreateStatic+0x2e>
	__asm volatile
 80053d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053dc:	b672      	cpsid	i
 80053de:	f383 8811 	msr	BASEPRI, r3
 80053e2:	f3bf 8f6f 	isb	sy
 80053e6:	f3bf 8f4f 	dsb	sy
 80053ea:	b662      	cpsie	i
 80053ec:	623b      	str	r3, [r7, #32]
}
 80053ee:	bf00      	nop
 80053f0:	e7fe      	b.n	80053f0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80053f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d10c      	bne.n	8005412 <xTaskCreateStatic+0x4e>
	__asm volatile
 80053f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053fc:	b672      	cpsid	i
 80053fe:	f383 8811 	msr	BASEPRI, r3
 8005402:	f3bf 8f6f 	isb	sy
 8005406:	f3bf 8f4f 	dsb	sy
 800540a:	b662      	cpsie	i
 800540c:	61fb      	str	r3, [r7, #28]
}
 800540e:	bf00      	nop
 8005410:	e7fe      	b.n	8005410 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005412:	23bc      	movs	r3, #188	; 0xbc
 8005414:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	2bbc      	cmp	r3, #188	; 0xbc
 800541a:	d00c      	beq.n	8005436 <xTaskCreateStatic+0x72>
	__asm volatile
 800541c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005420:	b672      	cpsid	i
 8005422:	f383 8811 	msr	BASEPRI, r3
 8005426:	f3bf 8f6f 	isb	sy
 800542a:	f3bf 8f4f 	dsb	sy
 800542e:	b662      	cpsie	i
 8005430:	61bb      	str	r3, [r7, #24]
}
 8005432:	bf00      	nop
 8005434:	e7fe      	b.n	8005434 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005436:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800543a:	2b00      	cmp	r3, #0
 800543c:	d01e      	beq.n	800547c <xTaskCreateStatic+0xb8>
 800543e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005440:	2b00      	cmp	r3, #0
 8005442:	d01b      	beq.n	800547c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005446:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800544c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800544e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005450:	2202      	movs	r2, #2
 8005452:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005456:	2300      	movs	r3, #0
 8005458:	9303      	str	r3, [sp, #12]
 800545a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545c:	9302      	str	r3, [sp, #8]
 800545e:	f107 0314 	add.w	r3, r7, #20
 8005462:	9301      	str	r3, [sp, #4]
 8005464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005466:	9300      	str	r3, [sp, #0]
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	68b9      	ldr	r1, [r7, #8]
 800546e:	68f8      	ldr	r0, [r7, #12]
 8005470:	f000 f850 	bl	8005514 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005474:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005476:	f000 f8f5 	bl	8005664 <prvAddNewTaskToReadyList>
 800547a:	e001      	b.n	8005480 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800547c:	2300      	movs	r3, #0
 800547e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005480:	697b      	ldr	r3, [r7, #20]
	}
 8005482:	4618      	mov	r0, r3
 8005484:	3728      	adds	r7, #40	; 0x28
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}

0800548a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800548a:	b580      	push	{r7, lr}
 800548c:	b08c      	sub	sp, #48	; 0x30
 800548e:	af04      	add	r7, sp, #16
 8005490:	60f8      	str	r0, [r7, #12]
 8005492:	60b9      	str	r1, [r7, #8]
 8005494:	603b      	str	r3, [r7, #0]
 8005496:	4613      	mov	r3, r2
 8005498:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800549a:	88fb      	ldrh	r3, [r7, #6]
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	4618      	mov	r0, r3
 80054a0:	f001 fe50 	bl	8007144 <pvPortMalloc>
 80054a4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d00e      	beq.n	80054ca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80054ac:	20bc      	movs	r0, #188	; 0xbc
 80054ae:	f001 fe49 	bl	8007144 <pvPortMalloc>
 80054b2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d003      	beq.n	80054c2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	697a      	ldr	r2, [r7, #20]
 80054be:	631a      	str	r2, [r3, #48]	; 0x30
 80054c0:	e005      	b.n	80054ce <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80054c2:	6978      	ldr	r0, [r7, #20]
 80054c4:	f001 ff08 	bl	80072d8 <vPortFree>
 80054c8:	e001      	b.n	80054ce <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80054ca:	2300      	movs	r3, #0
 80054cc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d017      	beq.n	8005504 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80054dc:	88fa      	ldrh	r2, [r7, #6]
 80054de:	2300      	movs	r3, #0
 80054e0:	9303      	str	r3, [sp, #12]
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	9302      	str	r3, [sp, #8]
 80054e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e8:	9301      	str	r3, [sp, #4]
 80054ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ec:	9300      	str	r3, [sp, #0]
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	68b9      	ldr	r1, [r7, #8]
 80054f2:	68f8      	ldr	r0, [r7, #12]
 80054f4:	f000 f80e 	bl	8005514 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80054f8:	69f8      	ldr	r0, [r7, #28]
 80054fa:	f000 f8b3 	bl	8005664 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80054fe:	2301      	movs	r3, #1
 8005500:	61bb      	str	r3, [r7, #24]
 8005502:	e002      	b.n	800550a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005504:	f04f 33ff 	mov.w	r3, #4294967295
 8005508:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800550a:	69bb      	ldr	r3, [r7, #24]
	}
 800550c:	4618      	mov	r0, r3
 800550e:	3720      	adds	r7, #32
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b088      	sub	sp, #32
 8005518:	af00      	add	r7, sp, #0
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	607a      	str	r2, [r7, #4]
 8005520:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005524:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	461a      	mov	r2, r3
 800552c:	21a5      	movs	r1, #165	; 0xa5
 800552e:	f005 fd3a 	bl	800afa6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005534:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005536:	6879      	ldr	r1, [r7, #4]
 8005538:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800553c:	440b      	add	r3, r1
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	4413      	add	r3, r2
 8005542:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005544:	69bb      	ldr	r3, [r7, #24]
 8005546:	f023 0307 	bic.w	r3, r3, #7
 800554a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	f003 0307 	and.w	r3, r3, #7
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00c      	beq.n	8005570 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8005556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800555a:	b672      	cpsid	i
 800555c:	f383 8811 	msr	BASEPRI, r3
 8005560:	f3bf 8f6f 	isb	sy
 8005564:	f3bf 8f4f 	dsb	sy
 8005568:	b662      	cpsie	i
 800556a:	617b      	str	r3, [r7, #20]
}
 800556c:	bf00      	nop
 800556e:	e7fe      	b.n	800556e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d01f      	beq.n	80055b6 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005576:	2300      	movs	r3, #0
 8005578:	61fb      	str	r3, [r7, #28]
 800557a:	e012      	b.n	80055a2 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800557c:	68ba      	ldr	r2, [r7, #8]
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	4413      	add	r3, r2
 8005582:	7819      	ldrb	r1, [r3, #0]
 8005584:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	4413      	add	r3, r2
 800558a:	3334      	adds	r3, #52	; 0x34
 800558c:	460a      	mov	r2, r1
 800558e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005590:	68ba      	ldr	r2, [r7, #8]
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	4413      	add	r3, r2
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d006      	beq.n	80055aa <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	3301      	adds	r3, #1
 80055a0:	61fb      	str	r3, [r7, #28]
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	2b0f      	cmp	r3, #15
 80055a6:	d9e9      	bls.n	800557c <prvInitialiseNewTask+0x68>
 80055a8:	e000      	b.n	80055ac <prvInitialiseNewTask+0x98>
			{
				break;
 80055aa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80055ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ae:	2200      	movs	r2, #0
 80055b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055b4:	e003      	b.n	80055be <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80055b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80055be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c0:	2b37      	cmp	r3, #55	; 0x37
 80055c2:	d901      	bls.n	80055c8 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80055c4:	2337      	movs	r3, #55	; 0x37
 80055c6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80055c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055cc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80055ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055d2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80055d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d6:	2200      	movs	r2, #0
 80055d8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80055da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055dc:	3304      	adds	r3, #4
 80055de:	4618      	mov	r0, r3
 80055e0:	f7fe ffe4 	bl	80045ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80055e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e6:	3318      	adds	r3, #24
 80055e8:	4618      	mov	r0, r3
 80055ea:	f7fe ffdf 	bl	80045ac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80055ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055f2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80055fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055fc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80055fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005600:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005602:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005606:	2200      	movs	r2, #0
 8005608:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800560c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800560e:	2200      	movs	r2, #0
 8005610:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005616:	3354      	adds	r3, #84	; 0x54
 8005618:	2260      	movs	r2, #96	; 0x60
 800561a:	2100      	movs	r1, #0
 800561c:	4618      	mov	r0, r3
 800561e:	f005 fcc2 	bl	800afa6 <memset>
 8005622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005624:	4a0c      	ldr	r2, [pc, #48]	; (8005658 <prvInitialiseNewTask+0x144>)
 8005626:	659a      	str	r2, [r3, #88]	; 0x58
 8005628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800562a:	4a0c      	ldr	r2, [pc, #48]	; (800565c <prvInitialiseNewTask+0x148>)
 800562c:	65da      	str	r2, [r3, #92]	; 0x5c
 800562e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005630:	4a0b      	ldr	r2, [pc, #44]	; (8005660 <prvInitialiseNewTask+0x14c>)
 8005632:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005634:	683a      	ldr	r2, [r7, #0]
 8005636:	68f9      	ldr	r1, [r7, #12]
 8005638:	69b8      	ldr	r0, [r7, #24]
 800563a:	f001 fb4b 	bl	8006cd4 <pxPortInitialiseStack>
 800563e:	4602      	mov	r2, r0
 8005640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005642:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005646:	2b00      	cmp	r3, #0
 8005648:	d002      	beq.n	8005650 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800564a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800564c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800564e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005650:	bf00      	nop
 8005652:	3720      	adds	r7, #32
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}
 8005658:	0800c24c 	.word	0x0800c24c
 800565c:	0800c26c 	.word	0x0800c26c
 8005660:	0800c22c 	.word	0x0800c22c

08005664 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b082      	sub	sp, #8
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800566c:	f001 fc3e 	bl	8006eec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005670:	4b2d      	ldr	r3, [pc, #180]	; (8005728 <prvAddNewTaskToReadyList+0xc4>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	3301      	adds	r3, #1
 8005676:	4a2c      	ldr	r2, [pc, #176]	; (8005728 <prvAddNewTaskToReadyList+0xc4>)
 8005678:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800567a:	4b2c      	ldr	r3, [pc, #176]	; (800572c <prvAddNewTaskToReadyList+0xc8>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d109      	bne.n	8005696 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005682:	4a2a      	ldr	r2, [pc, #168]	; (800572c <prvAddNewTaskToReadyList+0xc8>)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005688:	4b27      	ldr	r3, [pc, #156]	; (8005728 <prvAddNewTaskToReadyList+0xc4>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2b01      	cmp	r3, #1
 800568e:	d110      	bne.n	80056b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005690:	f000 fce2 	bl	8006058 <prvInitialiseTaskLists>
 8005694:	e00d      	b.n	80056b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005696:	4b26      	ldr	r3, [pc, #152]	; (8005730 <prvAddNewTaskToReadyList+0xcc>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d109      	bne.n	80056b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800569e:	4b23      	ldr	r3, [pc, #140]	; (800572c <prvAddNewTaskToReadyList+0xc8>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d802      	bhi.n	80056b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80056ac:	4a1f      	ldr	r2, [pc, #124]	; (800572c <prvAddNewTaskToReadyList+0xc8>)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80056b2:	4b20      	ldr	r3, [pc, #128]	; (8005734 <prvAddNewTaskToReadyList+0xd0>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	3301      	adds	r3, #1
 80056b8:	4a1e      	ldr	r2, [pc, #120]	; (8005734 <prvAddNewTaskToReadyList+0xd0>)
 80056ba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80056bc:	4b1d      	ldr	r3, [pc, #116]	; (8005734 <prvAddNewTaskToReadyList+0xd0>)
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056c8:	4b1b      	ldr	r3, [pc, #108]	; (8005738 <prvAddNewTaskToReadyList+0xd4>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d903      	bls.n	80056d8 <prvAddNewTaskToReadyList+0x74>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d4:	4a18      	ldr	r2, [pc, #96]	; (8005738 <prvAddNewTaskToReadyList+0xd4>)
 80056d6:	6013      	str	r3, [r2, #0]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056dc:	4613      	mov	r3, r2
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	4413      	add	r3, r2
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	4a15      	ldr	r2, [pc, #84]	; (800573c <prvAddNewTaskToReadyList+0xd8>)
 80056e6:	441a      	add	r2, r3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	3304      	adds	r3, #4
 80056ec:	4619      	mov	r1, r3
 80056ee:	4610      	mov	r0, r2
 80056f0:	f7fe ff69 	bl	80045c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80056f4:	f001 fc2e 	bl	8006f54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80056f8:	4b0d      	ldr	r3, [pc, #52]	; (8005730 <prvAddNewTaskToReadyList+0xcc>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00e      	beq.n	800571e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005700:	4b0a      	ldr	r3, [pc, #40]	; (800572c <prvAddNewTaskToReadyList+0xc8>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800570a:	429a      	cmp	r2, r3
 800570c:	d207      	bcs.n	800571e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800570e:	4b0c      	ldr	r3, [pc, #48]	; (8005740 <prvAddNewTaskToReadyList+0xdc>)
 8005710:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005714:	601a      	str	r2, [r3, #0]
 8005716:	f3bf 8f4f 	dsb	sy
 800571a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800571e:	bf00      	nop
 8005720:	3708      	adds	r7, #8
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	20000dec 	.word	0x20000dec
 800572c:	20000918 	.word	0x20000918
 8005730:	20000df8 	.word	0x20000df8
 8005734:	20000e08 	.word	0x20000e08
 8005738:	20000df4 	.word	0x20000df4
 800573c:	2000091c 	.word	0x2000091c
 8005740:	e000ed04 	.word	0xe000ed04

08005744 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800574c:	2300      	movs	r3, #0
 800574e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d019      	beq.n	800578a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005756:	4b14      	ldr	r3, [pc, #80]	; (80057a8 <vTaskDelay+0x64>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00c      	beq.n	8005778 <vTaskDelay+0x34>
	__asm volatile
 800575e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005762:	b672      	cpsid	i
 8005764:	f383 8811 	msr	BASEPRI, r3
 8005768:	f3bf 8f6f 	isb	sy
 800576c:	f3bf 8f4f 	dsb	sy
 8005770:	b662      	cpsie	i
 8005772:	60bb      	str	r3, [r7, #8]
}
 8005774:	bf00      	nop
 8005776:	e7fe      	b.n	8005776 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8005778:	f000 f88e 	bl	8005898 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800577c:	2100      	movs	r1, #0
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 fed8 	bl	8006534 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005784:	f000 f896 	bl	80058b4 <xTaskResumeAll>
 8005788:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d107      	bne.n	80057a0 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8005790:	4b06      	ldr	r3, [pc, #24]	; (80057ac <vTaskDelay+0x68>)
 8005792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005796:	601a      	str	r2, [r3, #0]
 8005798:	f3bf 8f4f 	dsb	sy
 800579c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80057a0:	bf00      	nop
 80057a2:	3710      	adds	r7, #16
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	20000e14 	.word	0x20000e14
 80057ac:	e000ed04 	.word	0xe000ed04

080057b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b08a      	sub	sp, #40	; 0x28
 80057b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80057b6:	2300      	movs	r3, #0
 80057b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80057ba:	2300      	movs	r3, #0
 80057bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80057be:	463a      	mov	r2, r7
 80057c0:	1d39      	adds	r1, r7, #4
 80057c2:	f107 0308 	add.w	r3, r7, #8
 80057c6:	4618      	mov	r0, r3
 80057c8:	f7fe fcda 	bl	8004180 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80057cc:	6839      	ldr	r1, [r7, #0]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	68ba      	ldr	r2, [r7, #8]
 80057d2:	9202      	str	r2, [sp, #8]
 80057d4:	9301      	str	r3, [sp, #4]
 80057d6:	2300      	movs	r3, #0
 80057d8:	9300      	str	r3, [sp, #0]
 80057da:	2300      	movs	r3, #0
 80057dc:	460a      	mov	r2, r1
 80057de:	4926      	ldr	r1, [pc, #152]	; (8005878 <vTaskStartScheduler+0xc8>)
 80057e0:	4826      	ldr	r0, [pc, #152]	; (800587c <vTaskStartScheduler+0xcc>)
 80057e2:	f7ff fdef 	bl	80053c4 <xTaskCreateStatic>
 80057e6:	4603      	mov	r3, r0
 80057e8:	4a25      	ldr	r2, [pc, #148]	; (8005880 <vTaskStartScheduler+0xd0>)
 80057ea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80057ec:	4b24      	ldr	r3, [pc, #144]	; (8005880 <vTaskStartScheduler+0xd0>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d002      	beq.n	80057fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80057f4:	2301      	movs	r3, #1
 80057f6:	617b      	str	r3, [r7, #20]
 80057f8:	e001      	b.n	80057fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80057fa:	2300      	movs	r3, #0
 80057fc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	2b01      	cmp	r3, #1
 8005802:	d102      	bne.n	800580a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005804:	f000 feea 	bl	80065dc <xTimerCreateTimerTask>
 8005808:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	2b01      	cmp	r3, #1
 800580e:	d11d      	bne.n	800584c <vTaskStartScheduler+0x9c>
	__asm volatile
 8005810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005814:	b672      	cpsid	i
 8005816:	f383 8811 	msr	BASEPRI, r3
 800581a:	f3bf 8f6f 	isb	sy
 800581e:	f3bf 8f4f 	dsb	sy
 8005822:	b662      	cpsie	i
 8005824:	613b      	str	r3, [r7, #16]
}
 8005826:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005828:	4b16      	ldr	r3, [pc, #88]	; (8005884 <vTaskStartScheduler+0xd4>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	3354      	adds	r3, #84	; 0x54
 800582e:	4a16      	ldr	r2, [pc, #88]	; (8005888 <vTaskStartScheduler+0xd8>)
 8005830:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005832:	4b16      	ldr	r3, [pc, #88]	; (800588c <vTaskStartScheduler+0xdc>)
 8005834:	f04f 32ff 	mov.w	r2, #4294967295
 8005838:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800583a:	4b15      	ldr	r3, [pc, #84]	; (8005890 <vTaskStartScheduler+0xe0>)
 800583c:	2201      	movs	r2, #1
 800583e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005840:	4b14      	ldr	r3, [pc, #80]	; (8005894 <vTaskStartScheduler+0xe4>)
 8005842:	2200      	movs	r2, #0
 8005844:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005846:	f001 fad3 	bl	8006df0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800584a:	e010      	b.n	800586e <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005852:	d10c      	bne.n	800586e <vTaskStartScheduler+0xbe>
	__asm volatile
 8005854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005858:	b672      	cpsid	i
 800585a:	f383 8811 	msr	BASEPRI, r3
 800585e:	f3bf 8f6f 	isb	sy
 8005862:	f3bf 8f4f 	dsb	sy
 8005866:	b662      	cpsie	i
 8005868:	60fb      	str	r3, [r7, #12]
}
 800586a:	bf00      	nop
 800586c:	e7fe      	b.n	800586c <vTaskStartScheduler+0xbc>
}
 800586e:	bf00      	nop
 8005870:	3718      	adds	r7, #24
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	0800bdd4 	.word	0x0800bdd4
 800587c:	08006029 	.word	0x08006029
 8005880:	20000e10 	.word	0x20000e10
 8005884:	20000918 	.word	0x20000918
 8005888:	20000118 	.word	0x20000118
 800588c:	20000e0c 	.word	0x20000e0c
 8005890:	20000df8 	.word	0x20000df8
 8005894:	20000df0 	.word	0x20000df0

08005898 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005898:	b480      	push	{r7}
 800589a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800589c:	4b04      	ldr	r3, [pc, #16]	; (80058b0 <vTaskSuspendAll+0x18>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	3301      	adds	r3, #1
 80058a2:	4a03      	ldr	r2, [pc, #12]	; (80058b0 <vTaskSuspendAll+0x18>)
 80058a4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80058a6:	bf00      	nop
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr
 80058b0:	20000e14 	.word	0x20000e14

080058b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80058ba:	2300      	movs	r3, #0
 80058bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80058be:	2300      	movs	r3, #0
 80058c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80058c2:	4b43      	ldr	r3, [pc, #268]	; (80059d0 <xTaskResumeAll+0x11c>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d10c      	bne.n	80058e4 <xTaskResumeAll+0x30>
	__asm volatile
 80058ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ce:	b672      	cpsid	i
 80058d0:	f383 8811 	msr	BASEPRI, r3
 80058d4:	f3bf 8f6f 	isb	sy
 80058d8:	f3bf 8f4f 	dsb	sy
 80058dc:	b662      	cpsie	i
 80058de:	603b      	str	r3, [r7, #0]
}
 80058e0:	bf00      	nop
 80058e2:	e7fe      	b.n	80058e2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80058e4:	f001 fb02 	bl	8006eec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80058e8:	4b39      	ldr	r3, [pc, #228]	; (80059d0 <xTaskResumeAll+0x11c>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	3b01      	subs	r3, #1
 80058ee:	4a38      	ldr	r2, [pc, #224]	; (80059d0 <xTaskResumeAll+0x11c>)
 80058f0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058f2:	4b37      	ldr	r3, [pc, #220]	; (80059d0 <xTaskResumeAll+0x11c>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d162      	bne.n	80059c0 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80058fa:	4b36      	ldr	r3, [pc, #216]	; (80059d4 <xTaskResumeAll+0x120>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d05e      	beq.n	80059c0 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005902:	e02f      	b.n	8005964 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005904:	4b34      	ldr	r3, [pc, #208]	; (80059d8 <xTaskResumeAll+0x124>)
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	3318      	adds	r3, #24
 8005910:	4618      	mov	r0, r3
 8005912:	f7fe feb5 	bl	8004680 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	3304      	adds	r3, #4
 800591a:	4618      	mov	r0, r3
 800591c:	f7fe feb0 	bl	8004680 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005924:	4b2d      	ldr	r3, [pc, #180]	; (80059dc <xTaskResumeAll+0x128>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	429a      	cmp	r2, r3
 800592a:	d903      	bls.n	8005934 <xTaskResumeAll+0x80>
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005930:	4a2a      	ldr	r2, [pc, #168]	; (80059dc <xTaskResumeAll+0x128>)
 8005932:	6013      	str	r3, [r2, #0]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005938:	4613      	mov	r3, r2
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	4413      	add	r3, r2
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	4a27      	ldr	r2, [pc, #156]	; (80059e0 <xTaskResumeAll+0x12c>)
 8005942:	441a      	add	r2, r3
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	3304      	adds	r3, #4
 8005948:	4619      	mov	r1, r3
 800594a:	4610      	mov	r0, r2
 800594c:	f7fe fe3b 	bl	80045c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005954:	4b23      	ldr	r3, [pc, #140]	; (80059e4 <xTaskResumeAll+0x130>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800595a:	429a      	cmp	r2, r3
 800595c:	d302      	bcc.n	8005964 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800595e:	4b22      	ldr	r3, [pc, #136]	; (80059e8 <xTaskResumeAll+0x134>)
 8005960:	2201      	movs	r2, #1
 8005962:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005964:	4b1c      	ldr	r3, [pc, #112]	; (80059d8 <xTaskResumeAll+0x124>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d1cb      	bne.n	8005904 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d001      	beq.n	8005976 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005972:	f000 fc15 	bl	80061a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005976:	4b1d      	ldr	r3, [pc, #116]	; (80059ec <xTaskResumeAll+0x138>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d010      	beq.n	80059a4 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005982:	f000 f847 	bl	8005a14 <xTaskIncrementTick>
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d002      	beq.n	8005992 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800598c:	4b16      	ldr	r3, [pc, #88]	; (80059e8 <xTaskResumeAll+0x134>)
 800598e:	2201      	movs	r2, #1
 8005990:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	3b01      	subs	r3, #1
 8005996:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d1f1      	bne.n	8005982 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800599e:	4b13      	ldr	r3, [pc, #76]	; (80059ec <xTaskResumeAll+0x138>)
 80059a0:	2200      	movs	r2, #0
 80059a2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80059a4:	4b10      	ldr	r3, [pc, #64]	; (80059e8 <xTaskResumeAll+0x134>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d009      	beq.n	80059c0 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80059ac:	2301      	movs	r3, #1
 80059ae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80059b0:	4b0f      	ldr	r3, [pc, #60]	; (80059f0 <xTaskResumeAll+0x13c>)
 80059b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059b6:	601a      	str	r2, [r3, #0]
 80059b8:	f3bf 8f4f 	dsb	sy
 80059bc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80059c0:	f001 fac8 	bl	8006f54 <vPortExitCritical>

	return xAlreadyYielded;
 80059c4:	68bb      	ldr	r3, [r7, #8]
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3710      	adds	r7, #16
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	20000e14 	.word	0x20000e14
 80059d4:	20000dec 	.word	0x20000dec
 80059d8:	20000dac 	.word	0x20000dac
 80059dc:	20000df4 	.word	0x20000df4
 80059e0:	2000091c 	.word	0x2000091c
 80059e4:	20000918 	.word	0x20000918
 80059e8:	20000e00 	.word	0x20000e00
 80059ec:	20000dfc 	.word	0x20000dfc
 80059f0:	e000ed04 	.word	0xe000ed04

080059f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80059f4:	b480      	push	{r7}
 80059f6:	b083      	sub	sp, #12
 80059f8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80059fa:	4b05      	ldr	r3, [pc, #20]	; (8005a10 <xTaskGetTickCount+0x1c>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005a00:	687b      	ldr	r3, [r7, #4]
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	370c      	adds	r7, #12
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr
 8005a0e:	bf00      	nop
 8005a10:	20000df0 	.word	0x20000df0

08005a14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b086      	sub	sp, #24
 8005a18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a1e:	4b50      	ldr	r3, [pc, #320]	; (8005b60 <xTaskIncrementTick+0x14c>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	f040 808b 	bne.w	8005b3e <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005a28:	4b4e      	ldr	r3, [pc, #312]	; (8005b64 <xTaskIncrementTick+0x150>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	3301      	adds	r3, #1
 8005a2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005a30:	4a4c      	ldr	r2, [pc, #304]	; (8005b64 <xTaskIncrementTick+0x150>)
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d122      	bne.n	8005a82 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8005a3c:	4b4a      	ldr	r3, [pc, #296]	; (8005b68 <xTaskIncrementTick+0x154>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00c      	beq.n	8005a60 <xTaskIncrementTick+0x4c>
	__asm volatile
 8005a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a4a:	b672      	cpsid	i
 8005a4c:	f383 8811 	msr	BASEPRI, r3
 8005a50:	f3bf 8f6f 	isb	sy
 8005a54:	f3bf 8f4f 	dsb	sy
 8005a58:	b662      	cpsie	i
 8005a5a:	603b      	str	r3, [r7, #0]
}
 8005a5c:	bf00      	nop
 8005a5e:	e7fe      	b.n	8005a5e <xTaskIncrementTick+0x4a>
 8005a60:	4b41      	ldr	r3, [pc, #260]	; (8005b68 <xTaskIncrementTick+0x154>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	60fb      	str	r3, [r7, #12]
 8005a66:	4b41      	ldr	r3, [pc, #260]	; (8005b6c <xTaskIncrementTick+0x158>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a3f      	ldr	r2, [pc, #252]	; (8005b68 <xTaskIncrementTick+0x154>)
 8005a6c:	6013      	str	r3, [r2, #0]
 8005a6e:	4a3f      	ldr	r2, [pc, #252]	; (8005b6c <xTaskIncrementTick+0x158>)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6013      	str	r3, [r2, #0]
 8005a74:	4b3e      	ldr	r3, [pc, #248]	; (8005b70 <xTaskIncrementTick+0x15c>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	3301      	adds	r3, #1
 8005a7a:	4a3d      	ldr	r2, [pc, #244]	; (8005b70 <xTaskIncrementTick+0x15c>)
 8005a7c:	6013      	str	r3, [r2, #0]
 8005a7e:	f000 fb8f 	bl	80061a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005a82:	4b3c      	ldr	r3, [pc, #240]	; (8005b74 <xTaskIncrementTick+0x160>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	693a      	ldr	r2, [r7, #16]
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d349      	bcc.n	8005b20 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a8c:	4b36      	ldr	r3, [pc, #216]	; (8005b68 <xTaskIncrementTick+0x154>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d104      	bne.n	8005aa0 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a96:	4b37      	ldr	r3, [pc, #220]	; (8005b74 <xTaskIncrementTick+0x160>)
 8005a98:	f04f 32ff 	mov.w	r2, #4294967295
 8005a9c:	601a      	str	r2, [r3, #0]
					break;
 8005a9e:	e03f      	b.n	8005b20 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005aa0:	4b31      	ldr	r3, [pc, #196]	; (8005b68 <xTaskIncrementTick+0x154>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005ab0:	693a      	ldr	r2, [r7, #16]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d203      	bcs.n	8005ac0 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005ab8:	4a2e      	ldr	r2, [pc, #184]	; (8005b74 <xTaskIncrementTick+0x160>)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005abe:	e02f      	b.n	8005b20 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	3304      	adds	r3, #4
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f7fe fddb 	bl	8004680 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d004      	beq.n	8005adc <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	3318      	adds	r3, #24
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f7fe fdd2 	bl	8004680 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ae0:	4b25      	ldr	r3, [pc, #148]	; (8005b78 <xTaskIncrementTick+0x164>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d903      	bls.n	8005af0 <xTaskIncrementTick+0xdc>
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aec:	4a22      	ldr	r2, [pc, #136]	; (8005b78 <xTaskIncrementTick+0x164>)
 8005aee:	6013      	str	r3, [r2, #0]
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005af4:	4613      	mov	r3, r2
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	4413      	add	r3, r2
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	4a1f      	ldr	r2, [pc, #124]	; (8005b7c <xTaskIncrementTick+0x168>)
 8005afe:	441a      	add	r2, r3
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	3304      	adds	r3, #4
 8005b04:	4619      	mov	r1, r3
 8005b06:	4610      	mov	r0, r2
 8005b08:	f7fe fd5d 	bl	80045c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b10:	4b1b      	ldr	r3, [pc, #108]	; (8005b80 <xTaskIncrementTick+0x16c>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d3b8      	bcc.n	8005a8c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b1e:	e7b5      	b.n	8005a8c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005b20:	4b17      	ldr	r3, [pc, #92]	; (8005b80 <xTaskIncrementTick+0x16c>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b26:	4915      	ldr	r1, [pc, #84]	; (8005b7c <xTaskIncrementTick+0x168>)
 8005b28:	4613      	mov	r3, r2
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	4413      	add	r3, r2
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	440b      	add	r3, r1
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d907      	bls.n	8005b48 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	617b      	str	r3, [r7, #20]
 8005b3c:	e004      	b.n	8005b48 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005b3e:	4b11      	ldr	r3, [pc, #68]	; (8005b84 <xTaskIncrementTick+0x170>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	3301      	adds	r3, #1
 8005b44:	4a0f      	ldr	r2, [pc, #60]	; (8005b84 <xTaskIncrementTick+0x170>)
 8005b46:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005b48:	4b0f      	ldr	r3, [pc, #60]	; (8005b88 <xTaskIncrementTick+0x174>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d001      	beq.n	8005b54 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8005b50:	2301      	movs	r3, #1
 8005b52:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005b54:	697b      	ldr	r3, [r7, #20]
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3718      	adds	r7, #24
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
 8005b5e:	bf00      	nop
 8005b60:	20000e14 	.word	0x20000e14
 8005b64:	20000df0 	.word	0x20000df0
 8005b68:	20000da4 	.word	0x20000da4
 8005b6c:	20000da8 	.word	0x20000da8
 8005b70:	20000e04 	.word	0x20000e04
 8005b74:	20000e0c 	.word	0x20000e0c
 8005b78:	20000df4 	.word	0x20000df4
 8005b7c:	2000091c 	.word	0x2000091c
 8005b80:	20000918 	.word	0x20000918
 8005b84:	20000dfc 	.word	0x20000dfc
 8005b88:	20000e00 	.word	0x20000e00

08005b8c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b085      	sub	sp, #20
 8005b90:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005b92:	4b2b      	ldr	r3, [pc, #172]	; (8005c40 <vTaskSwitchContext+0xb4>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d003      	beq.n	8005ba2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005b9a:	4b2a      	ldr	r3, [pc, #168]	; (8005c44 <vTaskSwitchContext+0xb8>)
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005ba0:	e048      	b.n	8005c34 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8005ba2:	4b28      	ldr	r3, [pc, #160]	; (8005c44 <vTaskSwitchContext+0xb8>)
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ba8:	4b27      	ldr	r3, [pc, #156]	; (8005c48 <vTaskSwitchContext+0xbc>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	60fb      	str	r3, [r7, #12]
 8005bae:	e012      	b.n	8005bd6 <vTaskSwitchContext+0x4a>
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d10c      	bne.n	8005bd0 <vTaskSwitchContext+0x44>
	__asm volatile
 8005bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bba:	b672      	cpsid	i
 8005bbc:	f383 8811 	msr	BASEPRI, r3
 8005bc0:	f3bf 8f6f 	isb	sy
 8005bc4:	f3bf 8f4f 	dsb	sy
 8005bc8:	b662      	cpsie	i
 8005bca:	607b      	str	r3, [r7, #4]
}
 8005bcc:	bf00      	nop
 8005bce:	e7fe      	b.n	8005bce <vTaskSwitchContext+0x42>
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	3b01      	subs	r3, #1
 8005bd4:	60fb      	str	r3, [r7, #12]
 8005bd6:	491d      	ldr	r1, [pc, #116]	; (8005c4c <vTaskSwitchContext+0xc0>)
 8005bd8:	68fa      	ldr	r2, [r7, #12]
 8005bda:	4613      	mov	r3, r2
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	4413      	add	r3, r2
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	440b      	add	r3, r1
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d0e2      	beq.n	8005bb0 <vTaskSwitchContext+0x24>
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	4613      	mov	r3, r2
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	4413      	add	r3, r2
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	4a15      	ldr	r2, [pc, #84]	; (8005c4c <vTaskSwitchContext+0xc0>)
 8005bf6:	4413      	add	r3, r2
 8005bf8:	60bb      	str	r3, [r7, #8]
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	685a      	ldr	r2, [r3, #4]
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	605a      	str	r2, [r3, #4]
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	685a      	ldr	r2, [r3, #4]
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	3308      	adds	r3, #8
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d104      	bne.n	8005c1a <vTaskSwitchContext+0x8e>
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	685a      	ldr	r2, [r3, #4]
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	605a      	str	r2, [r3, #4]
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	4a0b      	ldr	r2, [pc, #44]	; (8005c50 <vTaskSwitchContext+0xc4>)
 8005c22:	6013      	str	r3, [r2, #0]
 8005c24:	4a08      	ldr	r2, [pc, #32]	; (8005c48 <vTaskSwitchContext+0xbc>)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005c2a:	4b09      	ldr	r3, [pc, #36]	; (8005c50 <vTaskSwitchContext+0xc4>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	3354      	adds	r3, #84	; 0x54
 8005c30:	4a08      	ldr	r2, [pc, #32]	; (8005c54 <vTaskSwitchContext+0xc8>)
 8005c32:	6013      	str	r3, [r2, #0]
}
 8005c34:	bf00      	nop
 8005c36:	3714      	adds	r7, #20
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr
 8005c40:	20000e14 	.word	0x20000e14
 8005c44:	20000e00 	.word	0x20000e00
 8005c48:	20000df4 	.word	0x20000df4
 8005c4c:	2000091c 	.word	0x2000091c
 8005c50:	20000918 	.word	0x20000918
 8005c54:	20000118 	.word	0x20000118

08005c58 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d10c      	bne.n	8005c82 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8005c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c6c:	b672      	cpsid	i
 8005c6e:	f383 8811 	msr	BASEPRI, r3
 8005c72:	f3bf 8f6f 	isb	sy
 8005c76:	f3bf 8f4f 	dsb	sy
 8005c7a:	b662      	cpsie	i
 8005c7c:	60fb      	str	r3, [r7, #12]
}
 8005c7e:	bf00      	nop
 8005c80:	e7fe      	b.n	8005c80 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c82:	4b07      	ldr	r3, [pc, #28]	; (8005ca0 <vTaskPlaceOnEventList+0x48>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	3318      	adds	r3, #24
 8005c88:	4619      	mov	r1, r3
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f7fe fcbf 	bl	800460e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005c90:	2101      	movs	r1, #1
 8005c92:	6838      	ldr	r0, [r7, #0]
 8005c94:	f000 fc4e 	bl	8006534 <prvAddCurrentTaskToDelayedList>
}
 8005c98:	bf00      	nop
 8005c9a:	3710      	adds	r7, #16
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	20000918 	.word	0x20000918

08005ca4 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b086      	sub	sp, #24
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	60b9      	str	r1, [r7, #8]
 8005cae:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d10c      	bne.n	8005cd0 <vTaskPlaceOnUnorderedEventList+0x2c>
	__asm volatile
 8005cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cba:	b672      	cpsid	i
 8005cbc:	f383 8811 	msr	BASEPRI, r3
 8005cc0:	f3bf 8f6f 	isb	sy
 8005cc4:	f3bf 8f4f 	dsb	sy
 8005cc8:	b662      	cpsie	i
 8005cca:	617b      	str	r3, [r7, #20]
}
 8005ccc:	bf00      	nop
 8005cce:	e7fe      	b.n	8005cce <vTaskPlaceOnUnorderedEventList+0x2a>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8005cd0:	4b12      	ldr	r3, [pc, #72]	; (8005d1c <vTaskPlaceOnUnorderedEventList+0x78>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d10c      	bne.n	8005cf2 <vTaskPlaceOnUnorderedEventList+0x4e>
	__asm volatile
 8005cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cdc:	b672      	cpsid	i
 8005cde:	f383 8811 	msr	BASEPRI, r3
 8005ce2:	f3bf 8f6f 	isb	sy
 8005ce6:	f3bf 8f4f 	dsb	sy
 8005cea:	b662      	cpsie	i
 8005cec:	613b      	str	r3, [r7, #16]
}
 8005cee:	bf00      	nop
 8005cf0:	e7fe      	b.n	8005cf0 <vTaskPlaceOnUnorderedEventList+0x4c>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8005cf2:	4b0b      	ldr	r3, [pc, #44]	; (8005d20 <vTaskPlaceOnUnorderedEventList+0x7c>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	68ba      	ldr	r2, [r7, #8]
 8005cf8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005cfc:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005cfe:	4b08      	ldr	r3, [pc, #32]	; (8005d20 <vTaskPlaceOnUnorderedEventList+0x7c>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	3318      	adds	r3, #24
 8005d04:	4619      	mov	r1, r3
 8005d06:	68f8      	ldr	r0, [r7, #12]
 8005d08:	f7fe fc5d 	bl	80045c6 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005d0c:	2101      	movs	r1, #1
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 fc10 	bl	8006534 <prvAddCurrentTaskToDelayedList>
}
 8005d14:	bf00      	nop
 8005d16:	3718      	adds	r7, #24
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	20000e14 	.word	0x20000e14
 8005d20:	20000918 	.word	0x20000918

08005d24 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b086      	sub	sp, #24
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	60b9      	str	r1, [r7, #8]
 8005d2e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d10c      	bne.n	8005d50 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8005d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d3a:	b672      	cpsid	i
 8005d3c:	f383 8811 	msr	BASEPRI, r3
 8005d40:	f3bf 8f6f 	isb	sy
 8005d44:	f3bf 8f4f 	dsb	sy
 8005d48:	b662      	cpsie	i
 8005d4a:	617b      	str	r3, [r7, #20]
}
 8005d4c:	bf00      	nop
 8005d4e:	e7fe      	b.n	8005d4e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005d50:	4b0a      	ldr	r3, [pc, #40]	; (8005d7c <vTaskPlaceOnEventListRestricted+0x58>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	3318      	adds	r3, #24
 8005d56:	4619      	mov	r1, r3
 8005d58:	68f8      	ldr	r0, [r7, #12]
 8005d5a:	f7fe fc34 	bl	80045c6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d002      	beq.n	8005d6a <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8005d64:	f04f 33ff 	mov.w	r3, #4294967295
 8005d68:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005d6a:	6879      	ldr	r1, [r7, #4]
 8005d6c:	68b8      	ldr	r0, [r7, #8]
 8005d6e:	f000 fbe1 	bl	8006534 <prvAddCurrentTaskToDelayedList>
	}
 8005d72:	bf00      	nop
 8005d74:	3718      	adds	r7, #24
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	20000918 	.word	0x20000918

08005d80 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b086      	sub	sp, #24
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d10c      	bne.n	8005db0 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8005d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d9a:	b672      	cpsid	i
 8005d9c:	f383 8811 	msr	BASEPRI, r3
 8005da0:	f3bf 8f6f 	isb	sy
 8005da4:	f3bf 8f4f 	dsb	sy
 8005da8:	b662      	cpsie	i
 8005daa:	60fb      	str	r3, [r7, #12]
}
 8005dac:	bf00      	nop
 8005dae:	e7fe      	b.n	8005dae <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	3318      	adds	r3, #24
 8005db4:	4618      	mov	r0, r3
 8005db6:	f7fe fc63 	bl	8004680 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005dba:	4b1e      	ldr	r3, [pc, #120]	; (8005e34 <xTaskRemoveFromEventList+0xb4>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d11d      	bne.n	8005dfe <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	3304      	adds	r3, #4
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f7fe fc5a 	bl	8004680 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dd0:	4b19      	ldr	r3, [pc, #100]	; (8005e38 <xTaskRemoveFromEventList+0xb8>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d903      	bls.n	8005de0 <xTaskRemoveFromEventList+0x60>
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ddc:	4a16      	ldr	r2, [pc, #88]	; (8005e38 <xTaskRemoveFromEventList+0xb8>)
 8005dde:	6013      	str	r3, [r2, #0]
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005de4:	4613      	mov	r3, r2
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	4413      	add	r3, r2
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	4a13      	ldr	r2, [pc, #76]	; (8005e3c <xTaskRemoveFromEventList+0xbc>)
 8005dee:	441a      	add	r2, r3
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	3304      	adds	r3, #4
 8005df4:	4619      	mov	r1, r3
 8005df6:	4610      	mov	r0, r2
 8005df8:	f7fe fbe5 	bl	80045c6 <vListInsertEnd>
 8005dfc:	e005      	b.n	8005e0a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	3318      	adds	r3, #24
 8005e02:	4619      	mov	r1, r3
 8005e04:	480e      	ldr	r0, [pc, #56]	; (8005e40 <xTaskRemoveFromEventList+0xc0>)
 8005e06:	f7fe fbde 	bl	80045c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e0e:	4b0d      	ldr	r3, [pc, #52]	; (8005e44 <xTaskRemoveFromEventList+0xc4>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d905      	bls.n	8005e24 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005e1c:	4b0a      	ldr	r3, [pc, #40]	; (8005e48 <xTaskRemoveFromEventList+0xc8>)
 8005e1e:	2201      	movs	r2, #1
 8005e20:	601a      	str	r2, [r3, #0]
 8005e22:	e001      	b.n	8005e28 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8005e24:	2300      	movs	r3, #0
 8005e26:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005e28:	697b      	ldr	r3, [r7, #20]
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3718      	adds	r7, #24
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	20000e14 	.word	0x20000e14
 8005e38:	20000df4 	.word	0x20000df4
 8005e3c:	2000091c 	.word	0x2000091c
 8005e40:	20000dac 	.word	0x20000dac
 8005e44:	20000918 	.word	0x20000918
 8005e48:	20000e00 	.word	0x20000e00

08005e4c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b086      	sub	sp, #24
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8005e56:	4b2b      	ldr	r3, [pc, #172]	; (8005f04 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d10c      	bne.n	8005e78 <vTaskRemoveFromUnorderedEventList+0x2c>
	__asm volatile
 8005e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e62:	b672      	cpsid	i
 8005e64:	f383 8811 	msr	BASEPRI, r3
 8005e68:	f3bf 8f6f 	isb	sy
 8005e6c:	f3bf 8f4f 	dsb	sy
 8005e70:	b662      	cpsie	i
 8005e72:	613b      	str	r3, [r7, #16]
}
 8005e74:	bf00      	nop
 8005e76:	e7fe      	b.n	8005e76 <vTaskRemoveFromUnorderedEventList+0x2a>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d10c      	bne.n	8005ea8 <vTaskRemoveFromUnorderedEventList+0x5c>
	__asm volatile
 8005e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e92:	b672      	cpsid	i
 8005e94:	f383 8811 	msr	BASEPRI, r3
 8005e98:	f3bf 8f6f 	isb	sy
 8005e9c:	f3bf 8f4f 	dsb	sy
 8005ea0:	b662      	cpsie	i
 8005ea2:	60fb      	str	r3, [r7, #12]
}
 8005ea4:	bf00      	nop
 8005ea6:	e7fe      	b.n	8005ea6 <vTaskRemoveFromUnorderedEventList+0x5a>
	( void ) uxListRemove( pxEventListItem );
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f7fe fbe9 	bl	8004680 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	3304      	adds	r3, #4
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f7fe fbe4 	bl	8004680 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ebc:	4b12      	ldr	r3, [pc, #72]	; (8005f08 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d903      	bls.n	8005ecc <vTaskRemoveFromUnorderedEventList+0x80>
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec8:	4a0f      	ldr	r2, [pc, #60]	; (8005f08 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8005eca:	6013      	str	r3, [r2, #0]
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ed0:	4613      	mov	r3, r2
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	4413      	add	r3, r2
 8005ed6:	009b      	lsls	r3, r3, #2
 8005ed8:	4a0c      	ldr	r2, [pc, #48]	; (8005f0c <vTaskRemoveFromUnorderedEventList+0xc0>)
 8005eda:	441a      	add	r2, r3
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	3304      	adds	r3, #4
 8005ee0:	4619      	mov	r1, r3
 8005ee2:	4610      	mov	r0, r2
 8005ee4:	f7fe fb6f 	bl	80045c6 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eec:	4b08      	ldr	r3, [pc, #32]	; (8005f10 <vTaskRemoveFromUnorderedEventList+0xc4>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d902      	bls.n	8005efc <vTaskRemoveFromUnorderedEventList+0xb0>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8005ef6:	4b07      	ldr	r3, [pc, #28]	; (8005f14 <vTaskRemoveFromUnorderedEventList+0xc8>)
 8005ef8:	2201      	movs	r2, #1
 8005efa:	601a      	str	r2, [r3, #0]
	}
}
 8005efc:	bf00      	nop
 8005efe:	3718      	adds	r7, #24
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	20000e14 	.word	0x20000e14
 8005f08:	20000df4 	.word	0x20000df4
 8005f0c:	2000091c 	.word	0x2000091c
 8005f10:	20000918 	.word	0x20000918
 8005f14:	20000e00 	.word	0x20000e00

08005f18 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b083      	sub	sp, #12
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005f20:	4b06      	ldr	r3, [pc, #24]	; (8005f3c <vTaskInternalSetTimeOutState+0x24>)
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005f28:	4b05      	ldr	r3, [pc, #20]	; (8005f40 <vTaskInternalSetTimeOutState+0x28>)
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	605a      	str	r2, [r3, #4]
}
 8005f30:	bf00      	nop
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr
 8005f3c:	20000e04 	.word	0x20000e04
 8005f40:	20000df0 	.word	0x20000df0

08005f44 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b088      	sub	sp, #32
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d10c      	bne.n	8005f6e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8005f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f58:	b672      	cpsid	i
 8005f5a:	f383 8811 	msr	BASEPRI, r3
 8005f5e:	f3bf 8f6f 	isb	sy
 8005f62:	f3bf 8f4f 	dsb	sy
 8005f66:	b662      	cpsie	i
 8005f68:	613b      	str	r3, [r7, #16]
}
 8005f6a:	bf00      	nop
 8005f6c:	e7fe      	b.n	8005f6c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d10c      	bne.n	8005f8e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8005f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f78:	b672      	cpsid	i
 8005f7a:	f383 8811 	msr	BASEPRI, r3
 8005f7e:	f3bf 8f6f 	isb	sy
 8005f82:	f3bf 8f4f 	dsb	sy
 8005f86:	b662      	cpsie	i
 8005f88:	60fb      	str	r3, [r7, #12]
}
 8005f8a:	bf00      	nop
 8005f8c:	e7fe      	b.n	8005f8c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8005f8e:	f000 ffad 	bl	8006eec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005f92:	4b1d      	ldr	r3, [pc, #116]	; (8006008 <xTaskCheckForTimeOut+0xc4>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	69ba      	ldr	r2, [r7, #24]
 8005f9e:	1ad3      	subs	r3, r2, r3
 8005fa0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005faa:	d102      	bne.n	8005fb2 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005fac:	2300      	movs	r3, #0
 8005fae:	61fb      	str	r3, [r7, #28]
 8005fb0:	e023      	b.n	8005ffa <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	4b15      	ldr	r3, [pc, #84]	; (800600c <xTaskCheckForTimeOut+0xc8>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d007      	beq.n	8005fce <xTaskCheckForTimeOut+0x8a>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	69ba      	ldr	r2, [r7, #24]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d302      	bcc.n	8005fce <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	61fb      	str	r3, [r7, #28]
 8005fcc:	e015      	b.n	8005ffa <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	697a      	ldr	r2, [r7, #20]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d20b      	bcs.n	8005ff0 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	1ad2      	subs	r2, r2, r3
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f7ff ff97 	bl	8005f18 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005fea:	2300      	movs	r3, #0
 8005fec:	61fb      	str	r3, [r7, #28]
 8005fee:	e004      	b.n	8005ffa <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005ffa:	f000 ffab 	bl	8006f54 <vPortExitCritical>

	return xReturn;
 8005ffe:	69fb      	ldr	r3, [r7, #28]
}
 8006000:	4618      	mov	r0, r3
 8006002:	3720      	adds	r7, #32
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}
 8006008:	20000df0 	.word	0x20000df0
 800600c:	20000e04 	.word	0x20000e04

08006010 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006010:	b480      	push	{r7}
 8006012:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006014:	4b03      	ldr	r3, [pc, #12]	; (8006024 <vTaskMissedYield+0x14>)
 8006016:	2201      	movs	r2, #1
 8006018:	601a      	str	r2, [r3, #0]
}
 800601a:	bf00      	nop
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr
 8006024:	20000e00 	.word	0x20000e00

08006028 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006030:	f000 f852 	bl	80060d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006034:	4b06      	ldr	r3, [pc, #24]	; (8006050 <prvIdleTask+0x28>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2b01      	cmp	r3, #1
 800603a:	d9f9      	bls.n	8006030 <prvIdleTask+0x8>
			{
				taskYIELD();
 800603c:	4b05      	ldr	r3, [pc, #20]	; (8006054 <prvIdleTask+0x2c>)
 800603e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006042:	601a      	str	r2, [r3, #0]
 8006044:	f3bf 8f4f 	dsb	sy
 8006048:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800604c:	e7f0      	b.n	8006030 <prvIdleTask+0x8>
 800604e:	bf00      	nop
 8006050:	2000091c 	.word	0x2000091c
 8006054:	e000ed04 	.word	0xe000ed04

08006058 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b082      	sub	sp, #8
 800605c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800605e:	2300      	movs	r3, #0
 8006060:	607b      	str	r3, [r7, #4]
 8006062:	e00c      	b.n	800607e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	4613      	mov	r3, r2
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	4413      	add	r3, r2
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	4a12      	ldr	r2, [pc, #72]	; (80060b8 <prvInitialiseTaskLists+0x60>)
 8006070:	4413      	add	r3, r2
 8006072:	4618      	mov	r0, r3
 8006074:	f7fe fa7a 	bl	800456c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	3301      	adds	r3, #1
 800607c:	607b      	str	r3, [r7, #4]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2b37      	cmp	r3, #55	; 0x37
 8006082:	d9ef      	bls.n	8006064 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006084:	480d      	ldr	r0, [pc, #52]	; (80060bc <prvInitialiseTaskLists+0x64>)
 8006086:	f7fe fa71 	bl	800456c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800608a:	480d      	ldr	r0, [pc, #52]	; (80060c0 <prvInitialiseTaskLists+0x68>)
 800608c:	f7fe fa6e 	bl	800456c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006090:	480c      	ldr	r0, [pc, #48]	; (80060c4 <prvInitialiseTaskLists+0x6c>)
 8006092:	f7fe fa6b 	bl	800456c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006096:	480c      	ldr	r0, [pc, #48]	; (80060c8 <prvInitialiseTaskLists+0x70>)
 8006098:	f7fe fa68 	bl	800456c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800609c:	480b      	ldr	r0, [pc, #44]	; (80060cc <prvInitialiseTaskLists+0x74>)
 800609e:	f7fe fa65 	bl	800456c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80060a2:	4b0b      	ldr	r3, [pc, #44]	; (80060d0 <prvInitialiseTaskLists+0x78>)
 80060a4:	4a05      	ldr	r2, [pc, #20]	; (80060bc <prvInitialiseTaskLists+0x64>)
 80060a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80060a8:	4b0a      	ldr	r3, [pc, #40]	; (80060d4 <prvInitialiseTaskLists+0x7c>)
 80060aa:	4a05      	ldr	r2, [pc, #20]	; (80060c0 <prvInitialiseTaskLists+0x68>)
 80060ac:	601a      	str	r2, [r3, #0]
}
 80060ae:	bf00      	nop
 80060b0:	3708      	adds	r7, #8
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}
 80060b6:	bf00      	nop
 80060b8:	2000091c 	.word	0x2000091c
 80060bc:	20000d7c 	.word	0x20000d7c
 80060c0:	20000d90 	.word	0x20000d90
 80060c4:	20000dac 	.word	0x20000dac
 80060c8:	20000dc0 	.word	0x20000dc0
 80060cc:	20000dd8 	.word	0x20000dd8
 80060d0:	20000da4 	.word	0x20000da4
 80060d4:	20000da8 	.word	0x20000da8

080060d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b082      	sub	sp, #8
 80060dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80060de:	e019      	b.n	8006114 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80060e0:	f000 ff04 	bl	8006eec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060e4:	4b10      	ldr	r3, [pc, #64]	; (8006128 <prvCheckTasksWaitingTermination+0x50>)
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	3304      	adds	r3, #4
 80060f0:	4618      	mov	r0, r3
 80060f2:	f7fe fac5 	bl	8004680 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80060f6:	4b0d      	ldr	r3, [pc, #52]	; (800612c <prvCheckTasksWaitingTermination+0x54>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	3b01      	subs	r3, #1
 80060fc:	4a0b      	ldr	r2, [pc, #44]	; (800612c <prvCheckTasksWaitingTermination+0x54>)
 80060fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006100:	4b0b      	ldr	r3, [pc, #44]	; (8006130 <prvCheckTasksWaitingTermination+0x58>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	3b01      	subs	r3, #1
 8006106:	4a0a      	ldr	r2, [pc, #40]	; (8006130 <prvCheckTasksWaitingTermination+0x58>)
 8006108:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800610a:	f000 ff23 	bl	8006f54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 f810 	bl	8006134 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006114:	4b06      	ldr	r3, [pc, #24]	; (8006130 <prvCheckTasksWaitingTermination+0x58>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d1e1      	bne.n	80060e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800611c:	bf00      	nop
 800611e:	bf00      	nop
 8006120:	3708      	adds	r7, #8
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	20000dc0 	.word	0x20000dc0
 800612c:	20000dec 	.word	0x20000dec
 8006130:	20000dd4 	.word	0x20000dd4

08006134 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	3354      	adds	r3, #84	; 0x54
 8006140:	4618      	mov	r0, r3
 8006142:	f005 fa8f 	bl	800b664 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800614c:	2b00      	cmp	r3, #0
 800614e:	d108      	bne.n	8006162 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006154:	4618      	mov	r0, r3
 8006156:	f001 f8bf 	bl	80072d8 <vPortFree>
				vPortFree( pxTCB );
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f001 f8bc 	bl	80072d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006160:	e01a      	b.n	8006198 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006168:	2b01      	cmp	r3, #1
 800616a:	d103      	bne.n	8006174 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f001 f8b3 	bl	80072d8 <vPortFree>
	}
 8006172:	e011      	b.n	8006198 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800617a:	2b02      	cmp	r3, #2
 800617c:	d00c      	beq.n	8006198 <prvDeleteTCB+0x64>
	__asm volatile
 800617e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006182:	b672      	cpsid	i
 8006184:	f383 8811 	msr	BASEPRI, r3
 8006188:	f3bf 8f6f 	isb	sy
 800618c:	f3bf 8f4f 	dsb	sy
 8006190:	b662      	cpsie	i
 8006192:	60fb      	str	r3, [r7, #12]
}
 8006194:	bf00      	nop
 8006196:	e7fe      	b.n	8006196 <prvDeleteTCB+0x62>
	}
 8006198:	bf00      	nop
 800619a:	3710      	adds	r7, #16
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80061a0:	b480      	push	{r7}
 80061a2:	b083      	sub	sp, #12
 80061a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061a6:	4b0c      	ldr	r3, [pc, #48]	; (80061d8 <prvResetNextTaskUnblockTime+0x38>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d104      	bne.n	80061ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80061b0:	4b0a      	ldr	r3, [pc, #40]	; (80061dc <prvResetNextTaskUnblockTime+0x3c>)
 80061b2:	f04f 32ff 	mov.w	r2, #4294967295
 80061b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80061b8:	e008      	b.n	80061cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061ba:	4b07      	ldr	r3, [pc, #28]	; (80061d8 <prvResetNextTaskUnblockTime+0x38>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	4a04      	ldr	r2, [pc, #16]	; (80061dc <prvResetNextTaskUnblockTime+0x3c>)
 80061ca:	6013      	str	r3, [r2, #0]
}
 80061cc:	bf00      	nop
 80061ce:	370c      	adds	r7, #12
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr
 80061d8:	20000da4 	.word	0x20000da4
 80061dc:	20000e0c 	.word	0x20000e0c

080061e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80061e0:	b480      	push	{r7}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80061e6:	4b0b      	ldr	r3, [pc, #44]	; (8006214 <xTaskGetSchedulerState+0x34>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d102      	bne.n	80061f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80061ee:	2301      	movs	r3, #1
 80061f0:	607b      	str	r3, [r7, #4]
 80061f2:	e008      	b.n	8006206 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061f4:	4b08      	ldr	r3, [pc, #32]	; (8006218 <xTaskGetSchedulerState+0x38>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d102      	bne.n	8006202 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80061fc:	2302      	movs	r3, #2
 80061fe:	607b      	str	r3, [r7, #4]
 8006200:	e001      	b.n	8006206 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006202:	2300      	movs	r3, #0
 8006204:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006206:	687b      	ldr	r3, [r7, #4]
	}
 8006208:	4618      	mov	r0, r3
 800620a:	370c      	adds	r7, #12
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr
 8006214:	20000df8 	.word	0x20000df8
 8006218:	20000e14 	.word	0x20000e14

0800621c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800621c:	b580      	push	{r7, lr}
 800621e:	b084      	sub	sp, #16
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006228:	2300      	movs	r3, #0
 800622a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d051      	beq.n	80062d6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006236:	4b2a      	ldr	r3, [pc, #168]	; (80062e0 <xTaskPriorityInherit+0xc4>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800623c:	429a      	cmp	r2, r3
 800623e:	d241      	bcs.n	80062c4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	699b      	ldr	r3, [r3, #24]
 8006244:	2b00      	cmp	r3, #0
 8006246:	db06      	blt.n	8006256 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006248:	4b25      	ldr	r3, [pc, #148]	; (80062e0 <xTaskPriorityInherit+0xc4>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800624e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	6959      	ldr	r1, [r3, #20]
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800625e:	4613      	mov	r3, r2
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	4413      	add	r3, r2
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	4a1f      	ldr	r2, [pc, #124]	; (80062e4 <xTaskPriorityInherit+0xc8>)
 8006268:	4413      	add	r3, r2
 800626a:	4299      	cmp	r1, r3
 800626c:	d122      	bne.n	80062b4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	3304      	adds	r3, #4
 8006272:	4618      	mov	r0, r3
 8006274:	f7fe fa04 	bl	8004680 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006278:	4b19      	ldr	r3, [pc, #100]	; (80062e0 <xTaskPriorityInherit+0xc4>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006286:	4b18      	ldr	r3, [pc, #96]	; (80062e8 <xTaskPriorityInherit+0xcc>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	429a      	cmp	r2, r3
 800628c:	d903      	bls.n	8006296 <xTaskPriorityInherit+0x7a>
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006292:	4a15      	ldr	r2, [pc, #84]	; (80062e8 <xTaskPriorityInherit+0xcc>)
 8006294:	6013      	str	r3, [r2, #0]
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800629a:	4613      	mov	r3, r2
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	4413      	add	r3, r2
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	4a10      	ldr	r2, [pc, #64]	; (80062e4 <xTaskPriorityInherit+0xc8>)
 80062a4:	441a      	add	r2, r3
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	3304      	adds	r3, #4
 80062aa:	4619      	mov	r1, r3
 80062ac:	4610      	mov	r0, r2
 80062ae:	f7fe f98a 	bl	80045c6 <vListInsertEnd>
 80062b2:	e004      	b.n	80062be <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80062b4:	4b0a      	ldr	r3, [pc, #40]	; (80062e0 <xTaskPriorityInherit+0xc4>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80062be:	2301      	movs	r3, #1
 80062c0:	60fb      	str	r3, [r7, #12]
 80062c2:	e008      	b.n	80062d6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80062c8:	4b05      	ldr	r3, [pc, #20]	; (80062e0 <xTaskPriorityInherit+0xc4>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d201      	bcs.n	80062d6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80062d2:	2301      	movs	r3, #1
 80062d4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80062d6:	68fb      	ldr	r3, [r7, #12]
	}
 80062d8:	4618      	mov	r0, r3
 80062da:	3710      	adds	r7, #16
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	20000918 	.word	0x20000918
 80062e4:	2000091c 	.word	0x2000091c
 80062e8:	20000df4 	.word	0x20000df4

080062ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b086      	sub	sp, #24
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80062f8:	2300      	movs	r3, #0
 80062fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d05a      	beq.n	80063b8 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006302:	4b30      	ldr	r3, [pc, #192]	; (80063c4 <xTaskPriorityDisinherit+0xd8>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	693a      	ldr	r2, [r7, #16]
 8006308:	429a      	cmp	r2, r3
 800630a:	d00c      	beq.n	8006326 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800630c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006310:	b672      	cpsid	i
 8006312:	f383 8811 	msr	BASEPRI, r3
 8006316:	f3bf 8f6f 	isb	sy
 800631a:	f3bf 8f4f 	dsb	sy
 800631e:	b662      	cpsie	i
 8006320:	60fb      	str	r3, [r7, #12]
}
 8006322:	bf00      	nop
 8006324:	e7fe      	b.n	8006324 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800632a:	2b00      	cmp	r3, #0
 800632c:	d10c      	bne.n	8006348 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800632e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006332:	b672      	cpsid	i
 8006334:	f383 8811 	msr	BASEPRI, r3
 8006338:	f3bf 8f6f 	isb	sy
 800633c:	f3bf 8f4f 	dsb	sy
 8006340:	b662      	cpsie	i
 8006342:	60bb      	str	r3, [r7, #8]
}
 8006344:	bf00      	nop
 8006346:	e7fe      	b.n	8006346 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800634c:	1e5a      	subs	r2, r3, #1
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800635a:	429a      	cmp	r2, r3
 800635c:	d02c      	beq.n	80063b8 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006362:	2b00      	cmp	r3, #0
 8006364:	d128      	bne.n	80063b8 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	3304      	adds	r3, #4
 800636a:	4618      	mov	r0, r3
 800636c:	f7fe f988 	bl	8004680 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800637c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006388:	4b0f      	ldr	r3, [pc, #60]	; (80063c8 <xTaskPriorityDisinherit+0xdc>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	429a      	cmp	r2, r3
 800638e:	d903      	bls.n	8006398 <xTaskPriorityDisinherit+0xac>
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006394:	4a0c      	ldr	r2, [pc, #48]	; (80063c8 <xTaskPriorityDisinherit+0xdc>)
 8006396:	6013      	str	r3, [r2, #0]
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800639c:	4613      	mov	r3, r2
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	4413      	add	r3, r2
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	4a09      	ldr	r2, [pc, #36]	; (80063cc <xTaskPriorityDisinherit+0xe0>)
 80063a6:	441a      	add	r2, r3
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	3304      	adds	r3, #4
 80063ac:	4619      	mov	r1, r3
 80063ae:	4610      	mov	r0, r2
 80063b0:	f7fe f909 	bl	80045c6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80063b4:	2301      	movs	r3, #1
 80063b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80063b8:	697b      	ldr	r3, [r7, #20]
	}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3718      	adds	r7, #24
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	20000918 	.word	0x20000918
 80063c8:	20000df4 	.word	0x20000df4
 80063cc:	2000091c 	.word	0x2000091c

080063d0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b088      	sub	sp, #32
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80063de:	2301      	movs	r3, #1
 80063e0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d06e      	beq.n	80064c6 <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80063e8:	69bb      	ldr	r3, [r7, #24]
 80063ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d10c      	bne.n	800640a <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 80063f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f4:	b672      	cpsid	i
 80063f6:	f383 8811 	msr	BASEPRI, r3
 80063fa:	f3bf 8f6f 	isb	sy
 80063fe:	f3bf 8f4f 	dsb	sy
 8006402:	b662      	cpsie	i
 8006404:	60fb      	str	r3, [r7, #12]
}
 8006406:	bf00      	nop
 8006408:	e7fe      	b.n	8006408 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800640a:	69bb      	ldr	r3, [r7, #24]
 800640c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800640e:	683a      	ldr	r2, [r7, #0]
 8006410:	429a      	cmp	r2, r3
 8006412:	d902      	bls.n	800641a <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	61fb      	str	r3, [r7, #28]
 8006418:	e002      	b.n	8006420 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800641a:	69bb      	ldr	r3, [r7, #24]
 800641c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800641e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006420:	69bb      	ldr	r3, [r7, #24]
 8006422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006424:	69fa      	ldr	r2, [r7, #28]
 8006426:	429a      	cmp	r2, r3
 8006428:	d04d      	beq.n	80064c6 <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800642e:	697a      	ldr	r2, [r7, #20]
 8006430:	429a      	cmp	r2, r3
 8006432:	d148      	bne.n	80064c6 <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006434:	4b26      	ldr	r3, [pc, #152]	; (80064d0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	69ba      	ldr	r2, [r7, #24]
 800643a:	429a      	cmp	r2, r3
 800643c:	d10c      	bne.n	8006458 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 800643e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006442:	b672      	cpsid	i
 8006444:	f383 8811 	msr	BASEPRI, r3
 8006448:	f3bf 8f6f 	isb	sy
 800644c:	f3bf 8f4f 	dsb	sy
 8006450:	b662      	cpsie	i
 8006452:	60bb      	str	r3, [r7, #8]
}
 8006454:	bf00      	nop
 8006456:	e7fe      	b.n	8006456 <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006458:	69bb      	ldr	r3, [r7, #24]
 800645a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800645c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800645e:	69bb      	ldr	r3, [r7, #24]
 8006460:	69fa      	ldr	r2, [r7, #28]
 8006462:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	699b      	ldr	r3, [r3, #24]
 8006468:	2b00      	cmp	r3, #0
 800646a:	db04      	blt.n	8006476 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800646c:	69fb      	ldr	r3, [r7, #28]
 800646e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006476:	69bb      	ldr	r3, [r7, #24]
 8006478:	6959      	ldr	r1, [r3, #20]
 800647a:	693a      	ldr	r2, [r7, #16]
 800647c:	4613      	mov	r3, r2
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	4413      	add	r3, r2
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	4a13      	ldr	r2, [pc, #76]	; (80064d4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006486:	4413      	add	r3, r2
 8006488:	4299      	cmp	r1, r3
 800648a:	d11c      	bne.n	80064c6 <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800648c:	69bb      	ldr	r3, [r7, #24]
 800648e:	3304      	adds	r3, #4
 8006490:	4618      	mov	r0, r3
 8006492:	f7fe f8f5 	bl	8004680 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006496:	69bb      	ldr	r3, [r7, #24]
 8006498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800649a:	4b0f      	ldr	r3, [pc, #60]	; (80064d8 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	429a      	cmp	r2, r3
 80064a0:	d903      	bls.n	80064aa <vTaskPriorityDisinheritAfterTimeout+0xda>
 80064a2:	69bb      	ldr	r3, [r7, #24]
 80064a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a6:	4a0c      	ldr	r2, [pc, #48]	; (80064d8 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80064a8:	6013      	str	r3, [r2, #0]
 80064aa:	69bb      	ldr	r3, [r7, #24]
 80064ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064ae:	4613      	mov	r3, r2
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	4413      	add	r3, r2
 80064b4:	009b      	lsls	r3, r3, #2
 80064b6:	4a07      	ldr	r2, [pc, #28]	; (80064d4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80064b8:	441a      	add	r2, r3
 80064ba:	69bb      	ldr	r3, [r7, #24]
 80064bc:	3304      	adds	r3, #4
 80064be:	4619      	mov	r1, r3
 80064c0:	4610      	mov	r0, r2
 80064c2:	f7fe f880 	bl	80045c6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80064c6:	bf00      	nop
 80064c8:	3720      	adds	r7, #32
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
 80064ce:	bf00      	nop
 80064d0:	20000918 	.word	0x20000918
 80064d4:	2000091c 	.word	0x2000091c
 80064d8:	20000df4 	.word	0x20000df4

080064dc <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80064dc:	b480      	push	{r7}
 80064de:	b083      	sub	sp, #12
 80064e0:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80064e2:	4b09      	ldr	r3, [pc, #36]	; (8006508 <uxTaskResetEventItemValue+0x2c>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	699b      	ldr	r3, [r3, #24]
 80064e8:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064ea:	4b07      	ldr	r3, [pc, #28]	; (8006508 <uxTaskResetEventItemValue+0x2c>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064f0:	4b05      	ldr	r3, [pc, #20]	; (8006508 <uxTaskResetEventItemValue+0x2c>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80064f8:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80064fa:	687b      	ldr	r3, [r7, #4]
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	370c      	adds	r7, #12
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr
 8006508:	20000918 	.word	0x20000918

0800650c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800650c:	b480      	push	{r7}
 800650e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006510:	4b07      	ldr	r3, [pc, #28]	; (8006530 <pvTaskIncrementMutexHeldCount+0x24>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d004      	beq.n	8006522 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006518:	4b05      	ldr	r3, [pc, #20]	; (8006530 <pvTaskIncrementMutexHeldCount+0x24>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800651e:	3201      	adds	r2, #1
 8006520:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8006522:	4b03      	ldr	r3, [pc, #12]	; (8006530 <pvTaskIncrementMutexHeldCount+0x24>)
 8006524:	681b      	ldr	r3, [r3, #0]
	}
 8006526:	4618      	mov	r0, r3
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr
 8006530:	20000918 	.word	0x20000918

08006534 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b084      	sub	sp, #16
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800653e:	4b21      	ldr	r3, [pc, #132]	; (80065c4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006544:	4b20      	ldr	r3, [pc, #128]	; (80065c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	3304      	adds	r3, #4
 800654a:	4618      	mov	r0, r3
 800654c:	f7fe f898 	bl	8004680 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006556:	d10a      	bne.n	800656e <prvAddCurrentTaskToDelayedList+0x3a>
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d007      	beq.n	800656e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800655e:	4b1a      	ldr	r3, [pc, #104]	; (80065c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	3304      	adds	r3, #4
 8006564:	4619      	mov	r1, r3
 8006566:	4819      	ldr	r0, [pc, #100]	; (80065cc <prvAddCurrentTaskToDelayedList+0x98>)
 8006568:	f7fe f82d 	bl	80045c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800656c:	e026      	b.n	80065bc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	4413      	add	r3, r2
 8006574:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006576:	4b14      	ldr	r3, [pc, #80]	; (80065c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68ba      	ldr	r2, [r7, #8]
 800657c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800657e:	68ba      	ldr	r2, [r7, #8]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	429a      	cmp	r2, r3
 8006584:	d209      	bcs.n	800659a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006586:	4b12      	ldr	r3, [pc, #72]	; (80065d0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	4b0f      	ldr	r3, [pc, #60]	; (80065c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	3304      	adds	r3, #4
 8006590:	4619      	mov	r1, r3
 8006592:	4610      	mov	r0, r2
 8006594:	f7fe f83b 	bl	800460e <vListInsert>
}
 8006598:	e010      	b.n	80065bc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800659a:	4b0e      	ldr	r3, [pc, #56]	; (80065d4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	4b0a      	ldr	r3, [pc, #40]	; (80065c8 <prvAddCurrentTaskToDelayedList+0x94>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	3304      	adds	r3, #4
 80065a4:	4619      	mov	r1, r3
 80065a6:	4610      	mov	r0, r2
 80065a8:	f7fe f831 	bl	800460e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80065ac:	4b0a      	ldr	r3, [pc, #40]	; (80065d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	68ba      	ldr	r2, [r7, #8]
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d202      	bcs.n	80065bc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80065b6:	4a08      	ldr	r2, [pc, #32]	; (80065d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	6013      	str	r3, [r2, #0]
}
 80065bc:	bf00      	nop
 80065be:	3710      	adds	r7, #16
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}
 80065c4:	20000df0 	.word	0x20000df0
 80065c8:	20000918 	.word	0x20000918
 80065cc:	20000dd8 	.word	0x20000dd8
 80065d0:	20000da8 	.word	0x20000da8
 80065d4:	20000da4 	.word	0x20000da4
 80065d8:	20000e0c 	.word	0x20000e0c

080065dc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b08a      	sub	sp, #40	; 0x28
 80065e0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80065e2:	2300      	movs	r3, #0
 80065e4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80065e6:	f000 fb15 	bl	8006c14 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80065ea:	4b1d      	ldr	r3, [pc, #116]	; (8006660 <xTimerCreateTimerTask+0x84>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d021      	beq.n	8006636 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80065f2:	2300      	movs	r3, #0
 80065f4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80065f6:	2300      	movs	r3, #0
 80065f8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80065fa:	1d3a      	adds	r2, r7, #4
 80065fc:	f107 0108 	add.w	r1, r7, #8
 8006600:	f107 030c 	add.w	r3, r7, #12
 8006604:	4618      	mov	r0, r3
 8006606:	f7fd fdd5 	bl	80041b4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800660a:	6879      	ldr	r1, [r7, #4]
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	68fa      	ldr	r2, [r7, #12]
 8006610:	9202      	str	r2, [sp, #8]
 8006612:	9301      	str	r3, [sp, #4]
 8006614:	2302      	movs	r3, #2
 8006616:	9300      	str	r3, [sp, #0]
 8006618:	2300      	movs	r3, #0
 800661a:	460a      	mov	r2, r1
 800661c:	4911      	ldr	r1, [pc, #68]	; (8006664 <xTimerCreateTimerTask+0x88>)
 800661e:	4812      	ldr	r0, [pc, #72]	; (8006668 <xTimerCreateTimerTask+0x8c>)
 8006620:	f7fe fed0 	bl	80053c4 <xTaskCreateStatic>
 8006624:	4603      	mov	r3, r0
 8006626:	4a11      	ldr	r2, [pc, #68]	; (800666c <xTimerCreateTimerTask+0x90>)
 8006628:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800662a:	4b10      	ldr	r3, [pc, #64]	; (800666c <xTimerCreateTimerTask+0x90>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d001      	beq.n	8006636 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006632:	2301      	movs	r3, #1
 8006634:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d10c      	bne.n	8006656 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800663c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006640:	b672      	cpsid	i
 8006642:	f383 8811 	msr	BASEPRI, r3
 8006646:	f3bf 8f6f 	isb	sy
 800664a:	f3bf 8f4f 	dsb	sy
 800664e:	b662      	cpsie	i
 8006650:	613b      	str	r3, [r7, #16]
}
 8006652:	bf00      	nop
 8006654:	e7fe      	b.n	8006654 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8006656:	697b      	ldr	r3, [r7, #20]
}
 8006658:	4618      	mov	r0, r3
 800665a:	3718      	adds	r7, #24
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}
 8006660:	20000e48 	.word	0x20000e48
 8006664:	0800bddc 	.word	0x0800bddc
 8006668:	080067ad 	.word	0x080067ad
 800666c:	20000e4c 	.word	0x20000e4c

08006670 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b08a      	sub	sp, #40	; 0x28
 8006674:	af00      	add	r7, sp, #0
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	60b9      	str	r1, [r7, #8]
 800667a:	607a      	str	r2, [r7, #4]
 800667c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800667e:	2300      	movs	r3, #0
 8006680:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d10c      	bne.n	80066a2 <xTimerGenericCommand+0x32>
	__asm volatile
 8006688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800668c:	b672      	cpsid	i
 800668e:	f383 8811 	msr	BASEPRI, r3
 8006692:	f3bf 8f6f 	isb	sy
 8006696:	f3bf 8f4f 	dsb	sy
 800669a:	b662      	cpsie	i
 800669c:	623b      	str	r3, [r7, #32]
}
 800669e:	bf00      	nop
 80066a0:	e7fe      	b.n	80066a0 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80066a2:	4b1a      	ldr	r3, [pc, #104]	; (800670c <xTimerGenericCommand+0x9c>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d02a      	beq.n	8006700 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	2b05      	cmp	r3, #5
 80066ba:	dc18      	bgt.n	80066ee <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80066bc:	f7ff fd90 	bl	80061e0 <xTaskGetSchedulerState>
 80066c0:	4603      	mov	r3, r0
 80066c2:	2b02      	cmp	r3, #2
 80066c4:	d109      	bne.n	80066da <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80066c6:	4b11      	ldr	r3, [pc, #68]	; (800670c <xTimerGenericCommand+0x9c>)
 80066c8:	6818      	ldr	r0, [r3, #0]
 80066ca:	f107 0110 	add.w	r1, r7, #16
 80066ce:	2300      	movs	r3, #0
 80066d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066d2:	f7fe f951 	bl	8004978 <xQueueGenericSend>
 80066d6:	6278      	str	r0, [r7, #36]	; 0x24
 80066d8:	e012      	b.n	8006700 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80066da:	4b0c      	ldr	r3, [pc, #48]	; (800670c <xTimerGenericCommand+0x9c>)
 80066dc:	6818      	ldr	r0, [r3, #0]
 80066de:	f107 0110 	add.w	r1, r7, #16
 80066e2:	2300      	movs	r3, #0
 80066e4:	2200      	movs	r2, #0
 80066e6:	f7fe f947 	bl	8004978 <xQueueGenericSend>
 80066ea:	6278      	str	r0, [r7, #36]	; 0x24
 80066ec:	e008      	b.n	8006700 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80066ee:	4b07      	ldr	r3, [pc, #28]	; (800670c <xTimerGenericCommand+0x9c>)
 80066f0:	6818      	ldr	r0, [r3, #0]
 80066f2:	f107 0110 	add.w	r1, r7, #16
 80066f6:	2300      	movs	r3, #0
 80066f8:	683a      	ldr	r2, [r7, #0]
 80066fa:	f7fe fa43 	bl	8004b84 <xQueueGenericSendFromISR>
 80066fe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006702:	4618      	mov	r0, r3
 8006704:	3728      	adds	r7, #40	; 0x28
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
 800670a:	bf00      	nop
 800670c:	20000e48 	.word	0x20000e48

08006710 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b088      	sub	sp, #32
 8006714:	af02      	add	r7, sp, #8
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800671a:	4b23      	ldr	r3, [pc, #140]	; (80067a8 <prvProcessExpiredTimer+0x98>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	3304      	adds	r3, #4
 8006728:	4618      	mov	r0, r3
 800672a:	f7fd ffa9 	bl	8004680 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006734:	f003 0304 	and.w	r3, r3, #4
 8006738:	2b00      	cmp	r3, #0
 800673a:	d024      	beq.n	8006786 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	699a      	ldr	r2, [r3, #24]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	18d1      	adds	r1, r2, r3
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	683a      	ldr	r2, [r7, #0]
 8006748:	6978      	ldr	r0, [r7, #20]
 800674a:	f000 f8d3 	bl	80068f4 <prvInsertTimerInActiveList>
 800674e:	4603      	mov	r3, r0
 8006750:	2b00      	cmp	r3, #0
 8006752:	d021      	beq.n	8006798 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006754:	2300      	movs	r3, #0
 8006756:	9300      	str	r3, [sp, #0]
 8006758:	2300      	movs	r3, #0
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	2100      	movs	r1, #0
 800675e:	6978      	ldr	r0, [r7, #20]
 8006760:	f7ff ff86 	bl	8006670 <xTimerGenericCommand>
 8006764:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d115      	bne.n	8006798 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800676c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006770:	b672      	cpsid	i
 8006772:	f383 8811 	msr	BASEPRI, r3
 8006776:	f3bf 8f6f 	isb	sy
 800677a:	f3bf 8f4f 	dsb	sy
 800677e:	b662      	cpsie	i
 8006780:	60fb      	str	r3, [r7, #12]
}
 8006782:	bf00      	nop
 8006784:	e7fe      	b.n	8006784 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800678c:	f023 0301 	bic.w	r3, r3, #1
 8006790:	b2da      	uxtb	r2, r3
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	6a1b      	ldr	r3, [r3, #32]
 800679c:	6978      	ldr	r0, [r7, #20]
 800679e:	4798      	blx	r3
}
 80067a0:	bf00      	nop
 80067a2:	3718      	adds	r7, #24
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}
 80067a8:	20000e40 	.word	0x20000e40

080067ac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b084      	sub	sp, #16
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80067b4:	f107 0308 	add.w	r3, r7, #8
 80067b8:	4618      	mov	r0, r3
 80067ba:	f000 f857 	bl	800686c <prvGetNextExpireTime>
 80067be:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	4619      	mov	r1, r3
 80067c4:	68f8      	ldr	r0, [r7, #12]
 80067c6:	f000 f803 	bl	80067d0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80067ca:	f000 f8d5 	bl	8006978 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80067ce:	e7f1      	b.n	80067b4 <prvTimerTask+0x8>

080067d0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b084      	sub	sp, #16
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80067da:	f7ff f85d 	bl	8005898 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80067de:	f107 0308 	add.w	r3, r7, #8
 80067e2:	4618      	mov	r0, r3
 80067e4:	f000 f866 	bl	80068b4 <prvSampleTimeNow>
 80067e8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d130      	bne.n	8006852 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d10a      	bne.n	800680c <prvProcessTimerOrBlockTask+0x3c>
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d806      	bhi.n	800680c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80067fe:	f7ff f859 	bl	80058b4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006802:	68f9      	ldr	r1, [r7, #12]
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f7ff ff83 	bl	8006710 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800680a:	e024      	b.n	8006856 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d008      	beq.n	8006824 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006812:	4b13      	ldr	r3, [pc, #76]	; (8006860 <prvProcessTimerOrBlockTask+0x90>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d101      	bne.n	8006820 <prvProcessTimerOrBlockTask+0x50>
 800681c:	2301      	movs	r3, #1
 800681e:	e000      	b.n	8006822 <prvProcessTimerOrBlockTask+0x52>
 8006820:	2300      	movs	r3, #0
 8006822:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006824:	4b0f      	ldr	r3, [pc, #60]	; (8006864 <prvProcessTimerOrBlockTask+0x94>)
 8006826:	6818      	ldr	r0, [r3, #0]
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	1ad3      	subs	r3, r2, r3
 800682e:	683a      	ldr	r2, [r7, #0]
 8006830:	4619      	mov	r1, r3
 8006832:	f7fe fd93 	bl	800535c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006836:	f7ff f83d 	bl	80058b4 <xTaskResumeAll>
 800683a:	4603      	mov	r3, r0
 800683c:	2b00      	cmp	r3, #0
 800683e:	d10a      	bne.n	8006856 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006840:	4b09      	ldr	r3, [pc, #36]	; (8006868 <prvProcessTimerOrBlockTask+0x98>)
 8006842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006846:	601a      	str	r2, [r3, #0]
 8006848:	f3bf 8f4f 	dsb	sy
 800684c:	f3bf 8f6f 	isb	sy
}
 8006850:	e001      	b.n	8006856 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006852:	f7ff f82f 	bl	80058b4 <xTaskResumeAll>
}
 8006856:	bf00      	nop
 8006858:	3710      	adds	r7, #16
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	20000e44 	.word	0x20000e44
 8006864:	20000e48 	.word	0x20000e48
 8006868:	e000ed04 	.word	0xe000ed04

0800686c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800686c:	b480      	push	{r7}
 800686e:	b085      	sub	sp, #20
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006874:	4b0e      	ldr	r3, [pc, #56]	; (80068b0 <prvGetNextExpireTime+0x44>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d101      	bne.n	8006882 <prvGetNextExpireTime+0x16>
 800687e:	2201      	movs	r2, #1
 8006880:	e000      	b.n	8006884 <prvGetNextExpireTime+0x18>
 8006882:	2200      	movs	r2, #0
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d105      	bne.n	800689c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006890:	4b07      	ldr	r3, [pc, #28]	; (80068b0 <prvGetNextExpireTime+0x44>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	68db      	ldr	r3, [r3, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	60fb      	str	r3, [r7, #12]
 800689a:	e001      	b.n	80068a0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800689c:	2300      	movs	r3, #0
 800689e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80068a0:	68fb      	ldr	r3, [r7, #12]
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3714      	adds	r7, #20
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr
 80068ae:	bf00      	nop
 80068b0:	20000e40 	.word	0x20000e40

080068b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80068bc:	f7ff f89a 	bl	80059f4 <xTaskGetTickCount>
 80068c0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80068c2:	4b0b      	ldr	r3, [pc, #44]	; (80068f0 <prvSampleTimeNow+0x3c>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	68fa      	ldr	r2, [r7, #12]
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d205      	bcs.n	80068d8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80068cc:	f000 f93c 	bl	8006b48 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2201      	movs	r2, #1
 80068d4:	601a      	str	r2, [r3, #0]
 80068d6:	e002      	b.n	80068de <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80068de:	4a04      	ldr	r2, [pc, #16]	; (80068f0 <prvSampleTimeNow+0x3c>)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80068e4:	68fb      	ldr	r3, [r7, #12]
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3710      	adds	r7, #16
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
 80068ee:	bf00      	nop
 80068f0:	20000e50 	.word	0x20000e50

080068f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b086      	sub	sp, #24
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	60f8      	str	r0, [r7, #12]
 80068fc:	60b9      	str	r1, [r7, #8]
 80068fe:	607a      	str	r2, [r7, #4]
 8006900:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006902:	2300      	movs	r3, #0
 8006904:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	68ba      	ldr	r2, [r7, #8]
 800690a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	68fa      	ldr	r2, [r7, #12]
 8006910:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006912:	68ba      	ldr	r2, [r7, #8]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	429a      	cmp	r2, r3
 8006918:	d812      	bhi.n	8006940 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	1ad2      	subs	r2, r2, r3
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	699b      	ldr	r3, [r3, #24]
 8006924:	429a      	cmp	r2, r3
 8006926:	d302      	bcc.n	800692e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006928:	2301      	movs	r3, #1
 800692a:	617b      	str	r3, [r7, #20]
 800692c:	e01b      	b.n	8006966 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800692e:	4b10      	ldr	r3, [pc, #64]	; (8006970 <prvInsertTimerInActiveList+0x7c>)
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	3304      	adds	r3, #4
 8006936:	4619      	mov	r1, r3
 8006938:	4610      	mov	r0, r2
 800693a:	f7fd fe68 	bl	800460e <vListInsert>
 800693e:	e012      	b.n	8006966 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	429a      	cmp	r2, r3
 8006946:	d206      	bcs.n	8006956 <prvInsertTimerInActiveList+0x62>
 8006948:	68ba      	ldr	r2, [r7, #8]
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	429a      	cmp	r2, r3
 800694e:	d302      	bcc.n	8006956 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006950:	2301      	movs	r3, #1
 8006952:	617b      	str	r3, [r7, #20]
 8006954:	e007      	b.n	8006966 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006956:	4b07      	ldr	r3, [pc, #28]	; (8006974 <prvInsertTimerInActiveList+0x80>)
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	3304      	adds	r3, #4
 800695e:	4619      	mov	r1, r3
 8006960:	4610      	mov	r0, r2
 8006962:	f7fd fe54 	bl	800460e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006966:	697b      	ldr	r3, [r7, #20]
}
 8006968:	4618      	mov	r0, r3
 800696a:	3718      	adds	r7, #24
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}
 8006970:	20000e44 	.word	0x20000e44
 8006974:	20000e40 	.word	0x20000e40

08006978 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b08e      	sub	sp, #56	; 0x38
 800697c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800697e:	e0d0      	b.n	8006b22 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2b00      	cmp	r3, #0
 8006984:	da1a      	bge.n	80069bc <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006986:	1d3b      	adds	r3, r7, #4
 8006988:	3304      	adds	r3, #4
 800698a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800698c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800698e:	2b00      	cmp	r3, #0
 8006990:	d10c      	bne.n	80069ac <prvProcessReceivedCommands+0x34>
	__asm volatile
 8006992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006996:	b672      	cpsid	i
 8006998:	f383 8811 	msr	BASEPRI, r3
 800699c:	f3bf 8f6f 	isb	sy
 80069a0:	f3bf 8f4f 	dsb	sy
 80069a4:	b662      	cpsie	i
 80069a6:	61fb      	str	r3, [r7, #28]
}
 80069a8:	bf00      	nop
 80069aa:	e7fe      	b.n	80069aa <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80069ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069b2:	6850      	ldr	r0, [r2, #4]
 80069b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069b6:	6892      	ldr	r2, [r2, #8]
 80069b8:	4611      	mov	r1, r2
 80069ba:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	f2c0 80ae 	blt.w	8006b20 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80069c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ca:	695b      	ldr	r3, [r3, #20]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d004      	beq.n	80069da <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80069d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d2:	3304      	adds	r3, #4
 80069d4:	4618      	mov	r0, r3
 80069d6:	f7fd fe53 	bl	8004680 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80069da:	463b      	mov	r3, r7
 80069dc:	4618      	mov	r0, r3
 80069de:	f7ff ff69 	bl	80068b4 <prvSampleTimeNow>
 80069e2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2b09      	cmp	r3, #9
 80069e8:	f200 809b 	bhi.w	8006b22 <prvProcessReceivedCommands+0x1aa>
 80069ec:	a201      	add	r2, pc, #4	; (adr r2, 80069f4 <prvProcessReceivedCommands+0x7c>)
 80069ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f2:	bf00      	nop
 80069f4:	08006a1d 	.word	0x08006a1d
 80069f8:	08006a1d 	.word	0x08006a1d
 80069fc:	08006a1d 	.word	0x08006a1d
 8006a00:	08006a95 	.word	0x08006a95
 8006a04:	08006aa9 	.word	0x08006aa9
 8006a08:	08006af7 	.word	0x08006af7
 8006a0c:	08006a1d 	.word	0x08006a1d
 8006a10:	08006a1d 	.word	0x08006a1d
 8006a14:	08006a95 	.word	0x08006a95
 8006a18:	08006aa9 	.word	0x08006aa9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a22:	f043 0301 	orr.w	r3, r3, #1
 8006a26:	b2da      	uxtb	r2, r3
 8006a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006a2e:	68ba      	ldr	r2, [r7, #8]
 8006a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a32:	699b      	ldr	r3, [r3, #24]
 8006a34:	18d1      	adds	r1, r2, r3
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a3c:	f7ff ff5a 	bl	80068f4 <prvInsertTimerInActiveList>
 8006a40:	4603      	mov	r3, r0
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d06d      	beq.n	8006b22 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a48:	6a1b      	ldr	r3, [r3, #32]
 8006a4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a4c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a54:	f003 0304 	and.w	r3, r3, #4
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d062      	beq.n	8006b22 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006a5c:	68ba      	ldr	r2, [r7, #8]
 8006a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a60:	699b      	ldr	r3, [r3, #24]
 8006a62:	441a      	add	r2, r3
 8006a64:	2300      	movs	r3, #0
 8006a66:	9300      	str	r3, [sp, #0]
 8006a68:	2300      	movs	r3, #0
 8006a6a:	2100      	movs	r1, #0
 8006a6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a6e:	f7ff fdff 	bl	8006670 <xTimerGenericCommand>
 8006a72:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006a74:	6a3b      	ldr	r3, [r7, #32]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d153      	bne.n	8006b22 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8006a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a7e:	b672      	cpsid	i
 8006a80:	f383 8811 	msr	BASEPRI, r3
 8006a84:	f3bf 8f6f 	isb	sy
 8006a88:	f3bf 8f4f 	dsb	sy
 8006a8c:	b662      	cpsie	i
 8006a8e:	61bb      	str	r3, [r7, #24]
}
 8006a90:	bf00      	nop
 8006a92:	e7fe      	b.n	8006a92 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a9a:	f023 0301 	bic.w	r3, r3, #1
 8006a9e:	b2da      	uxtb	r2, r3
 8006aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006aa6:	e03c      	b.n	8006b22 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aaa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006aae:	f043 0301 	orr.w	r3, r3, #1
 8006ab2:	b2da      	uxtb	r2, r3
 8006ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006aba:	68ba      	ldr	r2, [r7, #8]
 8006abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006abe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac2:	699b      	ldr	r3, [r3, #24]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d10c      	bne.n	8006ae2 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8006ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006acc:	b672      	cpsid	i
 8006ace:	f383 8811 	msr	BASEPRI, r3
 8006ad2:	f3bf 8f6f 	isb	sy
 8006ad6:	f3bf 8f4f 	dsb	sy
 8006ada:	b662      	cpsie	i
 8006adc:	617b      	str	r3, [r7, #20]
}
 8006ade:	bf00      	nop
 8006ae0:	e7fe      	b.n	8006ae0 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae4:	699a      	ldr	r2, [r3, #24]
 8006ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae8:	18d1      	adds	r1, r2, r3
 8006aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006aee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006af0:	f7ff ff00 	bl	80068f4 <prvInsertTimerInActiveList>
					break;
 8006af4:	e015      	b.n	8006b22 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006afc:	f003 0302 	and.w	r3, r3, #2
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d103      	bne.n	8006b0c <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8006b04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b06:	f000 fbe7 	bl	80072d8 <vPortFree>
 8006b0a:	e00a      	b.n	8006b22 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b12:	f023 0301 	bic.w	r3, r3, #1
 8006b16:	b2da      	uxtb	r2, r3
 8006b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006b1e:	e000      	b.n	8006b22 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006b20:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006b22:	4b08      	ldr	r3, [pc, #32]	; (8006b44 <prvProcessReceivedCommands+0x1cc>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	1d39      	adds	r1, r7, #4
 8006b28:	2200      	movs	r2, #0
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f7fe f8ca 	bl	8004cc4 <xQueueReceive>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	f47f af24 	bne.w	8006980 <prvProcessReceivedCommands+0x8>
	}
}
 8006b38:	bf00      	nop
 8006b3a:	bf00      	nop
 8006b3c:	3730      	adds	r7, #48	; 0x30
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
 8006b42:	bf00      	nop
 8006b44:	20000e48 	.word	0x20000e48

08006b48 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b088      	sub	sp, #32
 8006b4c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006b4e:	e04a      	b.n	8006be6 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b50:	4b2e      	ldr	r3, [pc, #184]	; (8006c0c <prvSwitchTimerLists+0xc4>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b5a:	4b2c      	ldr	r3, [pc, #176]	; (8006c0c <prvSwitchTimerLists+0xc4>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	68db      	ldr	r3, [r3, #12]
 8006b62:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	3304      	adds	r3, #4
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f7fd fd89 	bl	8004680 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6a1b      	ldr	r3, [r3, #32]
 8006b72:	68f8      	ldr	r0, [r7, #12]
 8006b74:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b7c:	f003 0304 	and.w	r3, r3, #4
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d030      	beq.n	8006be6 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	699b      	ldr	r3, [r3, #24]
 8006b88:	693a      	ldr	r2, [r7, #16]
 8006b8a:	4413      	add	r3, r2
 8006b8c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006b8e:	68ba      	ldr	r2, [r7, #8]
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d90e      	bls.n	8006bb4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	68ba      	ldr	r2, [r7, #8]
 8006b9a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	68fa      	ldr	r2, [r7, #12]
 8006ba0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006ba2:	4b1a      	ldr	r3, [pc, #104]	; (8006c0c <prvSwitchTimerLists+0xc4>)
 8006ba4:	681a      	ldr	r2, [r3, #0]
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	3304      	adds	r3, #4
 8006baa:	4619      	mov	r1, r3
 8006bac:	4610      	mov	r0, r2
 8006bae:	f7fd fd2e 	bl	800460e <vListInsert>
 8006bb2:	e018      	b.n	8006be6 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	9300      	str	r3, [sp, #0]
 8006bb8:	2300      	movs	r3, #0
 8006bba:	693a      	ldr	r2, [r7, #16]
 8006bbc:	2100      	movs	r1, #0
 8006bbe:	68f8      	ldr	r0, [r7, #12]
 8006bc0:	f7ff fd56 	bl	8006670 <xTimerGenericCommand>
 8006bc4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d10c      	bne.n	8006be6 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8006bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd0:	b672      	cpsid	i
 8006bd2:	f383 8811 	msr	BASEPRI, r3
 8006bd6:	f3bf 8f6f 	isb	sy
 8006bda:	f3bf 8f4f 	dsb	sy
 8006bde:	b662      	cpsie	i
 8006be0:	603b      	str	r3, [r7, #0]
}
 8006be2:	bf00      	nop
 8006be4:	e7fe      	b.n	8006be4 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006be6:	4b09      	ldr	r3, [pc, #36]	; (8006c0c <prvSwitchTimerLists+0xc4>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d1af      	bne.n	8006b50 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006bf0:	4b06      	ldr	r3, [pc, #24]	; (8006c0c <prvSwitchTimerLists+0xc4>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006bf6:	4b06      	ldr	r3, [pc, #24]	; (8006c10 <prvSwitchTimerLists+0xc8>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a04      	ldr	r2, [pc, #16]	; (8006c0c <prvSwitchTimerLists+0xc4>)
 8006bfc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006bfe:	4a04      	ldr	r2, [pc, #16]	; (8006c10 <prvSwitchTimerLists+0xc8>)
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	6013      	str	r3, [r2, #0]
}
 8006c04:	bf00      	nop
 8006c06:	3718      	adds	r7, #24
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}
 8006c0c:	20000e40 	.word	0x20000e40
 8006c10:	20000e44 	.word	0x20000e44

08006c14 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006c1a:	f000 f967 	bl	8006eec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006c1e:	4b15      	ldr	r3, [pc, #84]	; (8006c74 <prvCheckForValidListAndQueue+0x60>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d120      	bne.n	8006c68 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006c26:	4814      	ldr	r0, [pc, #80]	; (8006c78 <prvCheckForValidListAndQueue+0x64>)
 8006c28:	f7fd fca0 	bl	800456c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006c2c:	4813      	ldr	r0, [pc, #76]	; (8006c7c <prvCheckForValidListAndQueue+0x68>)
 8006c2e:	f7fd fc9d 	bl	800456c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006c32:	4b13      	ldr	r3, [pc, #76]	; (8006c80 <prvCheckForValidListAndQueue+0x6c>)
 8006c34:	4a10      	ldr	r2, [pc, #64]	; (8006c78 <prvCheckForValidListAndQueue+0x64>)
 8006c36:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006c38:	4b12      	ldr	r3, [pc, #72]	; (8006c84 <prvCheckForValidListAndQueue+0x70>)
 8006c3a:	4a10      	ldr	r2, [pc, #64]	; (8006c7c <prvCheckForValidListAndQueue+0x68>)
 8006c3c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006c3e:	2300      	movs	r3, #0
 8006c40:	9300      	str	r3, [sp, #0]
 8006c42:	4b11      	ldr	r3, [pc, #68]	; (8006c88 <prvCheckForValidListAndQueue+0x74>)
 8006c44:	4a11      	ldr	r2, [pc, #68]	; (8006c8c <prvCheckForValidListAndQueue+0x78>)
 8006c46:	2110      	movs	r1, #16
 8006c48:	200a      	movs	r0, #10
 8006c4a:	f7fd fdad 	bl	80047a8 <xQueueGenericCreateStatic>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	4a08      	ldr	r2, [pc, #32]	; (8006c74 <prvCheckForValidListAndQueue+0x60>)
 8006c52:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006c54:	4b07      	ldr	r3, [pc, #28]	; (8006c74 <prvCheckForValidListAndQueue+0x60>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d005      	beq.n	8006c68 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006c5c:	4b05      	ldr	r3, [pc, #20]	; (8006c74 <prvCheckForValidListAndQueue+0x60>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	490b      	ldr	r1, [pc, #44]	; (8006c90 <prvCheckForValidListAndQueue+0x7c>)
 8006c62:	4618      	mov	r0, r3
 8006c64:	f7fe fb50 	bl	8005308 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006c68:	f000 f974 	bl	8006f54 <vPortExitCritical>
}
 8006c6c:	bf00      	nop
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}
 8006c72:	bf00      	nop
 8006c74:	20000e48 	.word	0x20000e48
 8006c78:	20000e18 	.word	0x20000e18
 8006c7c:	20000e2c 	.word	0x20000e2c
 8006c80:	20000e40 	.word	0x20000e40
 8006c84:	20000e44 	.word	0x20000e44
 8006c88:	20000ef4 	.word	0x20000ef4
 8006c8c:	20000e54 	.word	0x20000e54
 8006c90:	0800bde4 	.word	0x0800bde4

08006c94 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b08a      	sub	sp, #40	; 0x28
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	607a      	str	r2, [r7, #4]
 8006ca0:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8006ca2:	f06f 0301 	mvn.w	r3, #1
 8006ca6:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006cb4:	4b06      	ldr	r3, [pc, #24]	; (8006cd0 <xTimerPendFunctionCallFromISR+0x3c>)
 8006cb6:	6818      	ldr	r0, [r3, #0]
 8006cb8:	f107 0114 	add.w	r1, r7, #20
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	683a      	ldr	r2, [r7, #0]
 8006cc0:	f7fd ff60 	bl	8004b84 <xQueueGenericSendFromISR>
 8006cc4:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8006cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3728      	adds	r7, #40	; 0x28
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}
 8006cd0:	20000e48 	.word	0x20000e48

08006cd4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b085      	sub	sp, #20
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	60f8      	str	r0, [r7, #12]
 8006cdc:	60b9      	str	r1, [r7, #8]
 8006cde:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	3b04      	subs	r3, #4
 8006ce4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006cec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	3b04      	subs	r3, #4
 8006cf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	f023 0201 	bic.w	r2, r3, #1
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	3b04      	subs	r3, #4
 8006d02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006d04:	4a0c      	ldr	r2, [pc, #48]	; (8006d38 <pxPortInitialiseStack+0x64>)
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	3b14      	subs	r3, #20
 8006d0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	3b04      	subs	r3, #4
 8006d1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f06f 0202 	mvn.w	r2, #2
 8006d22:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	3b20      	subs	r3, #32
 8006d28:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3714      	adds	r7, #20
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr
 8006d38:	08006d3d 	.word	0x08006d3d

08006d3c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b085      	sub	sp, #20
 8006d40:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006d42:	2300      	movs	r3, #0
 8006d44:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006d46:	4b14      	ldr	r3, [pc, #80]	; (8006d98 <prvTaskExitError+0x5c>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d4e:	d00c      	beq.n	8006d6a <prvTaskExitError+0x2e>
	__asm volatile
 8006d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d54:	b672      	cpsid	i
 8006d56:	f383 8811 	msr	BASEPRI, r3
 8006d5a:	f3bf 8f6f 	isb	sy
 8006d5e:	f3bf 8f4f 	dsb	sy
 8006d62:	b662      	cpsie	i
 8006d64:	60fb      	str	r3, [r7, #12]
}
 8006d66:	bf00      	nop
 8006d68:	e7fe      	b.n	8006d68 <prvTaskExitError+0x2c>
	__asm volatile
 8006d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d6e:	b672      	cpsid	i
 8006d70:	f383 8811 	msr	BASEPRI, r3
 8006d74:	f3bf 8f6f 	isb	sy
 8006d78:	f3bf 8f4f 	dsb	sy
 8006d7c:	b662      	cpsie	i
 8006d7e:	60bb      	str	r3, [r7, #8]
}
 8006d80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006d82:	bf00      	nop
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d0fc      	beq.n	8006d84 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006d8a:	bf00      	nop
 8006d8c:	bf00      	nop
 8006d8e:	3714      	adds	r7, #20
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr
 8006d98:	2000000c 	.word	0x2000000c
 8006d9c:	00000000 	.word	0x00000000

08006da0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006da0:	4b07      	ldr	r3, [pc, #28]	; (8006dc0 <pxCurrentTCBConst2>)
 8006da2:	6819      	ldr	r1, [r3, #0]
 8006da4:	6808      	ldr	r0, [r1, #0]
 8006da6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006daa:	f380 8809 	msr	PSP, r0
 8006dae:	f3bf 8f6f 	isb	sy
 8006db2:	f04f 0000 	mov.w	r0, #0
 8006db6:	f380 8811 	msr	BASEPRI, r0
 8006dba:	4770      	bx	lr
 8006dbc:	f3af 8000 	nop.w

08006dc0 <pxCurrentTCBConst2>:
 8006dc0:	20000918 	.word	0x20000918
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006dc4:	bf00      	nop
 8006dc6:	bf00      	nop

08006dc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006dc8:	4808      	ldr	r0, [pc, #32]	; (8006dec <prvPortStartFirstTask+0x24>)
 8006dca:	6800      	ldr	r0, [r0, #0]
 8006dcc:	6800      	ldr	r0, [r0, #0]
 8006dce:	f380 8808 	msr	MSP, r0
 8006dd2:	f04f 0000 	mov.w	r0, #0
 8006dd6:	f380 8814 	msr	CONTROL, r0
 8006dda:	b662      	cpsie	i
 8006ddc:	b661      	cpsie	f
 8006dde:	f3bf 8f4f 	dsb	sy
 8006de2:	f3bf 8f6f 	isb	sy
 8006de6:	df00      	svc	0
 8006de8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006dea:	bf00      	nop
 8006dec:	e000ed08 	.word	0xe000ed08

08006df0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b084      	sub	sp, #16
 8006df4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006df6:	4b37      	ldr	r3, [pc, #220]	; (8006ed4 <xPortStartScheduler+0xe4>)
 8006df8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	22ff      	movs	r2, #255	; 0xff
 8006e06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	b2db      	uxtb	r3, r3
 8006e0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006e10:	78fb      	ldrb	r3, [r7, #3]
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006e18:	b2da      	uxtb	r2, r3
 8006e1a:	4b2f      	ldr	r3, [pc, #188]	; (8006ed8 <xPortStartScheduler+0xe8>)
 8006e1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006e1e:	4b2f      	ldr	r3, [pc, #188]	; (8006edc <xPortStartScheduler+0xec>)
 8006e20:	2207      	movs	r2, #7
 8006e22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e24:	e009      	b.n	8006e3a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006e26:	4b2d      	ldr	r3, [pc, #180]	; (8006edc <xPortStartScheduler+0xec>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	3b01      	subs	r3, #1
 8006e2c:	4a2b      	ldr	r2, [pc, #172]	; (8006edc <xPortStartScheduler+0xec>)
 8006e2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006e30:	78fb      	ldrb	r3, [r7, #3]
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	005b      	lsls	r3, r3, #1
 8006e36:	b2db      	uxtb	r3, r3
 8006e38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e3a:	78fb      	ldrb	r3, [r7, #3]
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e42:	2b80      	cmp	r3, #128	; 0x80
 8006e44:	d0ef      	beq.n	8006e26 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006e46:	4b25      	ldr	r3, [pc, #148]	; (8006edc <xPortStartScheduler+0xec>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f1c3 0307 	rsb	r3, r3, #7
 8006e4e:	2b04      	cmp	r3, #4
 8006e50:	d00c      	beq.n	8006e6c <xPortStartScheduler+0x7c>
	__asm volatile
 8006e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e56:	b672      	cpsid	i
 8006e58:	f383 8811 	msr	BASEPRI, r3
 8006e5c:	f3bf 8f6f 	isb	sy
 8006e60:	f3bf 8f4f 	dsb	sy
 8006e64:	b662      	cpsie	i
 8006e66:	60bb      	str	r3, [r7, #8]
}
 8006e68:	bf00      	nop
 8006e6a:	e7fe      	b.n	8006e6a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006e6c:	4b1b      	ldr	r3, [pc, #108]	; (8006edc <xPortStartScheduler+0xec>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	021b      	lsls	r3, r3, #8
 8006e72:	4a1a      	ldr	r2, [pc, #104]	; (8006edc <xPortStartScheduler+0xec>)
 8006e74:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006e76:	4b19      	ldr	r3, [pc, #100]	; (8006edc <xPortStartScheduler+0xec>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006e7e:	4a17      	ldr	r2, [pc, #92]	; (8006edc <xPortStartScheduler+0xec>)
 8006e80:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	b2da      	uxtb	r2, r3
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006e8a:	4b15      	ldr	r3, [pc, #84]	; (8006ee0 <xPortStartScheduler+0xf0>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a14      	ldr	r2, [pc, #80]	; (8006ee0 <xPortStartScheduler+0xf0>)
 8006e90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006e94:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006e96:	4b12      	ldr	r3, [pc, #72]	; (8006ee0 <xPortStartScheduler+0xf0>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a11      	ldr	r2, [pc, #68]	; (8006ee0 <xPortStartScheduler+0xf0>)
 8006e9c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006ea0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006ea2:	f000 f8dd 	bl	8007060 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006ea6:	4b0f      	ldr	r3, [pc, #60]	; (8006ee4 <xPortStartScheduler+0xf4>)
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006eac:	f000 f8fc 	bl	80070a8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006eb0:	4b0d      	ldr	r3, [pc, #52]	; (8006ee8 <xPortStartScheduler+0xf8>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a0c      	ldr	r2, [pc, #48]	; (8006ee8 <xPortStartScheduler+0xf8>)
 8006eb6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006eba:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006ebc:	f7ff ff84 	bl	8006dc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006ec0:	f7fe fe64 	bl	8005b8c <vTaskSwitchContext>
	prvTaskExitError();
 8006ec4:	f7ff ff3a 	bl	8006d3c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006ec8:	2300      	movs	r3, #0
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3710      	adds	r7, #16
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}
 8006ed2:	bf00      	nop
 8006ed4:	e000e400 	.word	0xe000e400
 8006ed8:	20000f44 	.word	0x20000f44
 8006edc:	20000f48 	.word	0x20000f48
 8006ee0:	e000ed20 	.word	0xe000ed20
 8006ee4:	2000000c 	.word	0x2000000c
 8006ee8:	e000ef34 	.word	0xe000ef34

08006eec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
	__asm volatile
 8006ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef6:	b672      	cpsid	i
 8006ef8:	f383 8811 	msr	BASEPRI, r3
 8006efc:	f3bf 8f6f 	isb	sy
 8006f00:	f3bf 8f4f 	dsb	sy
 8006f04:	b662      	cpsie	i
 8006f06:	607b      	str	r3, [r7, #4]
}
 8006f08:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006f0a:	4b10      	ldr	r3, [pc, #64]	; (8006f4c <vPortEnterCritical+0x60>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	3301      	adds	r3, #1
 8006f10:	4a0e      	ldr	r2, [pc, #56]	; (8006f4c <vPortEnterCritical+0x60>)
 8006f12:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006f14:	4b0d      	ldr	r3, [pc, #52]	; (8006f4c <vPortEnterCritical+0x60>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d111      	bne.n	8006f40 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006f1c:	4b0c      	ldr	r3, [pc, #48]	; (8006f50 <vPortEnterCritical+0x64>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d00c      	beq.n	8006f40 <vPortEnterCritical+0x54>
	__asm volatile
 8006f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f2a:	b672      	cpsid	i
 8006f2c:	f383 8811 	msr	BASEPRI, r3
 8006f30:	f3bf 8f6f 	isb	sy
 8006f34:	f3bf 8f4f 	dsb	sy
 8006f38:	b662      	cpsie	i
 8006f3a:	603b      	str	r3, [r7, #0]
}
 8006f3c:	bf00      	nop
 8006f3e:	e7fe      	b.n	8006f3e <vPortEnterCritical+0x52>
	}
}
 8006f40:	bf00      	nop
 8006f42:	370c      	adds	r7, #12
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr
 8006f4c:	2000000c 	.word	0x2000000c
 8006f50:	e000ed04 	.word	0xe000ed04

08006f54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006f54:	b480      	push	{r7}
 8006f56:	b083      	sub	sp, #12
 8006f58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006f5a:	4b13      	ldr	r3, [pc, #76]	; (8006fa8 <vPortExitCritical+0x54>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d10c      	bne.n	8006f7c <vPortExitCritical+0x28>
	__asm volatile
 8006f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f66:	b672      	cpsid	i
 8006f68:	f383 8811 	msr	BASEPRI, r3
 8006f6c:	f3bf 8f6f 	isb	sy
 8006f70:	f3bf 8f4f 	dsb	sy
 8006f74:	b662      	cpsie	i
 8006f76:	607b      	str	r3, [r7, #4]
}
 8006f78:	bf00      	nop
 8006f7a:	e7fe      	b.n	8006f7a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8006f7c:	4b0a      	ldr	r3, [pc, #40]	; (8006fa8 <vPortExitCritical+0x54>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	3b01      	subs	r3, #1
 8006f82:	4a09      	ldr	r2, [pc, #36]	; (8006fa8 <vPortExitCritical+0x54>)
 8006f84:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006f86:	4b08      	ldr	r3, [pc, #32]	; (8006fa8 <vPortExitCritical+0x54>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d105      	bne.n	8006f9a <vPortExitCritical+0x46>
 8006f8e:	2300      	movs	r3, #0
 8006f90:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	f383 8811 	msr	BASEPRI, r3
}
 8006f98:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006f9a:	bf00      	nop
 8006f9c:	370c      	adds	r7, #12
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr
 8006fa6:	bf00      	nop
 8006fa8:	2000000c 	.word	0x2000000c
 8006fac:	00000000 	.word	0x00000000

08006fb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006fb0:	f3ef 8009 	mrs	r0, PSP
 8006fb4:	f3bf 8f6f 	isb	sy
 8006fb8:	4b15      	ldr	r3, [pc, #84]	; (8007010 <pxCurrentTCBConst>)
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	f01e 0f10 	tst.w	lr, #16
 8006fc0:	bf08      	it	eq
 8006fc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006fc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fca:	6010      	str	r0, [r2, #0]
 8006fcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006fd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006fd4:	b672      	cpsid	i
 8006fd6:	f380 8811 	msr	BASEPRI, r0
 8006fda:	f3bf 8f4f 	dsb	sy
 8006fde:	f3bf 8f6f 	isb	sy
 8006fe2:	b662      	cpsie	i
 8006fe4:	f7fe fdd2 	bl	8005b8c <vTaskSwitchContext>
 8006fe8:	f04f 0000 	mov.w	r0, #0
 8006fec:	f380 8811 	msr	BASEPRI, r0
 8006ff0:	bc09      	pop	{r0, r3}
 8006ff2:	6819      	ldr	r1, [r3, #0]
 8006ff4:	6808      	ldr	r0, [r1, #0]
 8006ff6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ffa:	f01e 0f10 	tst.w	lr, #16
 8006ffe:	bf08      	it	eq
 8007000:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007004:	f380 8809 	msr	PSP, r0
 8007008:	f3bf 8f6f 	isb	sy
 800700c:	4770      	bx	lr
 800700e:	bf00      	nop

08007010 <pxCurrentTCBConst>:
 8007010:	20000918 	.word	0x20000918
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007014:	bf00      	nop
 8007016:	bf00      	nop

08007018 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b082      	sub	sp, #8
 800701c:	af00      	add	r7, sp, #0
	__asm volatile
 800701e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007022:	b672      	cpsid	i
 8007024:	f383 8811 	msr	BASEPRI, r3
 8007028:	f3bf 8f6f 	isb	sy
 800702c:	f3bf 8f4f 	dsb	sy
 8007030:	b662      	cpsie	i
 8007032:	607b      	str	r3, [r7, #4]
}
 8007034:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007036:	f7fe fced 	bl	8005a14 <xTaskIncrementTick>
 800703a:	4603      	mov	r3, r0
 800703c:	2b00      	cmp	r3, #0
 800703e:	d003      	beq.n	8007048 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007040:	4b06      	ldr	r3, [pc, #24]	; (800705c <SysTick_Handler+0x44>)
 8007042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007046:	601a      	str	r2, [r3, #0]
 8007048:	2300      	movs	r3, #0
 800704a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	f383 8811 	msr	BASEPRI, r3
}
 8007052:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007054:	bf00      	nop
 8007056:	3708      	adds	r7, #8
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}
 800705c:	e000ed04 	.word	0xe000ed04

08007060 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007060:	b480      	push	{r7}
 8007062:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007064:	4b0b      	ldr	r3, [pc, #44]	; (8007094 <vPortSetupTimerInterrupt+0x34>)
 8007066:	2200      	movs	r2, #0
 8007068:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800706a:	4b0b      	ldr	r3, [pc, #44]	; (8007098 <vPortSetupTimerInterrupt+0x38>)
 800706c:	2200      	movs	r2, #0
 800706e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007070:	4b0a      	ldr	r3, [pc, #40]	; (800709c <vPortSetupTimerInterrupt+0x3c>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a0a      	ldr	r2, [pc, #40]	; (80070a0 <vPortSetupTimerInterrupt+0x40>)
 8007076:	fba2 2303 	umull	r2, r3, r2, r3
 800707a:	099b      	lsrs	r3, r3, #6
 800707c:	4a09      	ldr	r2, [pc, #36]	; (80070a4 <vPortSetupTimerInterrupt+0x44>)
 800707e:	3b01      	subs	r3, #1
 8007080:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007082:	4b04      	ldr	r3, [pc, #16]	; (8007094 <vPortSetupTimerInterrupt+0x34>)
 8007084:	2207      	movs	r2, #7
 8007086:	601a      	str	r2, [r3, #0]
}
 8007088:	bf00      	nop
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr
 8007092:	bf00      	nop
 8007094:	e000e010 	.word	0xe000e010
 8007098:	e000e018 	.word	0xe000e018
 800709c:	20000000 	.word	0x20000000
 80070a0:	10624dd3 	.word	0x10624dd3
 80070a4:	e000e014 	.word	0xe000e014

080070a8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80070a8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80070b8 <vPortEnableVFP+0x10>
 80070ac:	6801      	ldr	r1, [r0, #0]
 80070ae:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80070b2:	6001      	str	r1, [r0, #0]
 80070b4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80070b6:	bf00      	nop
 80070b8:	e000ed88 	.word	0xe000ed88

080070bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80070bc:	b480      	push	{r7}
 80070be:	b085      	sub	sp, #20
 80070c0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80070c2:	f3ef 8305 	mrs	r3, IPSR
 80070c6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2b0f      	cmp	r3, #15
 80070cc:	d916      	bls.n	80070fc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80070ce:	4a19      	ldr	r2, [pc, #100]	; (8007134 <vPortValidateInterruptPriority+0x78>)
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	4413      	add	r3, r2
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80070d8:	4b17      	ldr	r3, [pc, #92]	; (8007138 <vPortValidateInterruptPriority+0x7c>)
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	7afa      	ldrb	r2, [r7, #11]
 80070de:	429a      	cmp	r2, r3
 80070e0:	d20c      	bcs.n	80070fc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 80070e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e6:	b672      	cpsid	i
 80070e8:	f383 8811 	msr	BASEPRI, r3
 80070ec:	f3bf 8f6f 	isb	sy
 80070f0:	f3bf 8f4f 	dsb	sy
 80070f4:	b662      	cpsie	i
 80070f6:	607b      	str	r3, [r7, #4]
}
 80070f8:	bf00      	nop
 80070fa:	e7fe      	b.n	80070fa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80070fc:	4b0f      	ldr	r3, [pc, #60]	; (800713c <vPortValidateInterruptPriority+0x80>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007104:	4b0e      	ldr	r3, [pc, #56]	; (8007140 <vPortValidateInterruptPriority+0x84>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	429a      	cmp	r2, r3
 800710a:	d90c      	bls.n	8007126 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800710c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007110:	b672      	cpsid	i
 8007112:	f383 8811 	msr	BASEPRI, r3
 8007116:	f3bf 8f6f 	isb	sy
 800711a:	f3bf 8f4f 	dsb	sy
 800711e:	b662      	cpsie	i
 8007120:	603b      	str	r3, [r7, #0]
}
 8007122:	bf00      	nop
 8007124:	e7fe      	b.n	8007124 <vPortValidateInterruptPriority+0x68>
	}
 8007126:	bf00      	nop
 8007128:	3714      	adds	r7, #20
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr
 8007132:	bf00      	nop
 8007134:	e000e3f0 	.word	0xe000e3f0
 8007138:	20000f44 	.word	0x20000f44
 800713c:	e000ed0c 	.word	0xe000ed0c
 8007140:	20000f48 	.word	0x20000f48

08007144 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b08a      	sub	sp, #40	; 0x28
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800714c:	2300      	movs	r3, #0
 800714e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007150:	f7fe fba2 	bl	8005898 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007154:	4b5b      	ldr	r3, [pc, #364]	; (80072c4 <pvPortMalloc+0x180>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d101      	bne.n	8007160 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800715c:	f000 f91a 	bl	8007394 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007160:	4b59      	ldr	r3, [pc, #356]	; (80072c8 <pvPortMalloc+0x184>)
 8007162:	681a      	ldr	r2, [r3, #0]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	4013      	ands	r3, r2
 8007168:	2b00      	cmp	r3, #0
 800716a:	f040 8092 	bne.w	8007292 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d01f      	beq.n	80071b4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8007174:	2208      	movs	r2, #8
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	4413      	add	r3, r2
 800717a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f003 0307 	and.w	r3, r3, #7
 8007182:	2b00      	cmp	r3, #0
 8007184:	d016      	beq.n	80071b4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f023 0307 	bic.w	r3, r3, #7
 800718c:	3308      	adds	r3, #8
 800718e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f003 0307 	and.w	r3, r3, #7
 8007196:	2b00      	cmp	r3, #0
 8007198:	d00c      	beq.n	80071b4 <pvPortMalloc+0x70>
	__asm volatile
 800719a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800719e:	b672      	cpsid	i
 80071a0:	f383 8811 	msr	BASEPRI, r3
 80071a4:	f3bf 8f6f 	isb	sy
 80071a8:	f3bf 8f4f 	dsb	sy
 80071ac:	b662      	cpsie	i
 80071ae:	617b      	str	r3, [r7, #20]
}
 80071b0:	bf00      	nop
 80071b2:	e7fe      	b.n	80071b2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d06b      	beq.n	8007292 <pvPortMalloc+0x14e>
 80071ba:	4b44      	ldr	r3, [pc, #272]	; (80072cc <pvPortMalloc+0x188>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d866      	bhi.n	8007292 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80071c4:	4b42      	ldr	r3, [pc, #264]	; (80072d0 <pvPortMalloc+0x18c>)
 80071c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80071c8:	4b41      	ldr	r3, [pc, #260]	; (80072d0 <pvPortMalloc+0x18c>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80071ce:	e004      	b.n	80071da <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80071d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80071d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80071da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d903      	bls.n	80071ec <pvPortMalloc+0xa8>
 80071e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d1f1      	bne.n	80071d0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80071ec:	4b35      	ldr	r3, [pc, #212]	; (80072c4 <pvPortMalloc+0x180>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d04d      	beq.n	8007292 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80071f6:	6a3b      	ldr	r3, [r7, #32]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	2208      	movs	r2, #8
 80071fc:	4413      	add	r3, r2
 80071fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	6a3b      	ldr	r3, [r7, #32]
 8007206:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720a:	685a      	ldr	r2, [r3, #4]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	1ad2      	subs	r2, r2, r3
 8007210:	2308      	movs	r3, #8
 8007212:	005b      	lsls	r3, r3, #1
 8007214:	429a      	cmp	r2, r3
 8007216:	d921      	bls.n	800725c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	4413      	add	r3, r2
 800721e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007220:	69bb      	ldr	r3, [r7, #24]
 8007222:	f003 0307 	and.w	r3, r3, #7
 8007226:	2b00      	cmp	r3, #0
 8007228:	d00c      	beq.n	8007244 <pvPortMalloc+0x100>
	__asm volatile
 800722a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800722e:	b672      	cpsid	i
 8007230:	f383 8811 	msr	BASEPRI, r3
 8007234:	f3bf 8f6f 	isb	sy
 8007238:	f3bf 8f4f 	dsb	sy
 800723c:	b662      	cpsie	i
 800723e:	613b      	str	r3, [r7, #16]
}
 8007240:	bf00      	nop
 8007242:	e7fe      	b.n	8007242 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007246:	685a      	ldr	r2, [r3, #4]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	1ad2      	subs	r2, r2, r3
 800724c:	69bb      	ldr	r3, [r7, #24]
 800724e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007256:	69b8      	ldr	r0, [r7, #24]
 8007258:	f000 f8fe 	bl	8007458 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800725c:	4b1b      	ldr	r3, [pc, #108]	; (80072cc <pvPortMalloc+0x188>)
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	1ad3      	subs	r3, r2, r3
 8007266:	4a19      	ldr	r2, [pc, #100]	; (80072cc <pvPortMalloc+0x188>)
 8007268:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800726a:	4b18      	ldr	r3, [pc, #96]	; (80072cc <pvPortMalloc+0x188>)
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	4b19      	ldr	r3, [pc, #100]	; (80072d4 <pvPortMalloc+0x190>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	429a      	cmp	r2, r3
 8007274:	d203      	bcs.n	800727e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007276:	4b15      	ldr	r3, [pc, #84]	; (80072cc <pvPortMalloc+0x188>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a16      	ldr	r2, [pc, #88]	; (80072d4 <pvPortMalloc+0x190>)
 800727c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800727e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007280:	685a      	ldr	r2, [r3, #4]
 8007282:	4b11      	ldr	r3, [pc, #68]	; (80072c8 <pvPortMalloc+0x184>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	431a      	orrs	r2, r3
 8007288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800728c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728e:	2200      	movs	r2, #0
 8007290:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007292:	f7fe fb0f 	bl	80058b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007296:	69fb      	ldr	r3, [r7, #28]
 8007298:	f003 0307 	and.w	r3, r3, #7
 800729c:	2b00      	cmp	r3, #0
 800729e:	d00c      	beq.n	80072ba <pvPortMalloc+0x176>
	__asm volatile
 80072a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a4:	b672      	cpsid	i
 80072a6:	f383 8811 	msr	BASEPRI, r3
 80072aa:	f3bf 8f6f 	isb	sy
 80072ae:	f3bf 8f4f 	dsb	sy
 80072b2:	b662      	cpsie	i
 80072b4:	60fb      	str	r3, [r7, #12]
}
 80072b6:	bf00      	nop
 80072b8:	e7fe      	b.n	80072b8 <pvPortMalloc+0x174>
	return pvReturn;
 80072ba:	69fb      	ldr	r3, [r7, #28]
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3728      	adds	r7, #40	; 0x28
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}
 80072c4:	20004b54 	.word	0x20004b54
 80072c8:	20004b60 	.word	0x20004b60
 80072cc:	20004b58 	.word	0x20004b58
 80072d0:	20004b4c 	.word	0x20004b4c
 80072d4:	20004b5c 	.word	0x20004b5c

080072d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b086      	sub	sp, #24
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d04c      	beq.n	8007384 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80072ea:	2308      	movs	r3, #8
 80072ec:	425b      	negs	r3, r3
 80072ee:	697a      	ldr	r2, [r7, #20]
 80072f0:	4413      	add	r3, r2
 80072f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	685a      	ldr	r2, [r3, #4]
 80072fc:	4b23      	ldr	r3, [pc, #140]	; (800738c <vPortFree+0xb4>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4013      	ands	r3, r2
 8007302:	2b00      	cmp	r3, #0
 8007304:	d10c      	bne.n	8007320 <vPortFree+0x48>
	__asm volatile
 8007306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800730a:	b672      	cpsid	i
 800730c:	f383 8811 	msr	BASEPRI, r3
 8007310:	f3bf 8f6f 	isb	sy
 8007314:	f3bf 8f4f 	dsb	sy
 8007318:	b662      	cpsie	i
 800731a:	60fb      	str	r3, [r7, #12]
}
 800731c:	bf00      	nop
 800731e:	e7fe      	b.n	800731e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d00c      	beq.n	8007342 <vPortFree+0x6a>
	__asm volatile
 8007328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800732c:	b672      	cpsid	i
 800732e:	f383 8811 	msr	BASEPRI, r3
 8007332:	f3bf 8f6f 	isb	sy
 8007336:	f3bf 8f4f 	dsb	sy
 800733a:	b662      	cpsie	i
 800733c:	60bb      	str	r3, [r7, #8]
}
 800733e:	bf00      	nop
 8007340:	e7fe      	b.n	8007340 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	685a      	ldr	r2, [r3, #4]
 8007346:	4b11      	ldr	r3, [pc, #68]	; (800738c <vPortFree+0xb4>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4013      	ands	r3, r2
 800734c:	2b00      	cmp	r3, #0
 800734e:	d019      	beq.n	8007384 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d115      	bne.n	8007384 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	685a      	ldr	r2, [r3, #4]
 800735c:	4b0b      	ldr	r3, [pc, #44]	; (800738c <vPortFree+0xb4>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	43db      	mvns	r3, r3
 8007362:	401a      	ands	r2, r3
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007368:	f7fe fa96 	bl	8005898 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	685a      	ldr	r2, [r3, #4]
 8007370:	4b07      	ldr	r3, [pc, #28]	; (8007390 <vPortFree+0xb8>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4413      	add	r3, r2
 8007376:	4a06      	ldr	r2, [pc, #24]	; (8007390 <vPortFree+0xb8>)
 8007378:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800737a:	6938      	ldr	r0, [r7, #16]
 800737c:	f000 f86c 	bl	8007458 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007380:	f7fe fa98 	bl	80058b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007384:	bf00      	nop
 8007386:	3718      	adds	r7, #24
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}
 800738c:	20004b60 	.word	0x20004b60
 8007390:	20004b58 	.word	0x20004b58

08007394 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007394:	b480      	push	{r7}
 8007396:	b085      	sub	sp, #20
 8007398:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800739a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800739e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80073a0:	4b27      	ldr	r3, [pc, #156]	; (8007440 <prvHeapInit+0xac>)
 80073a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f003 0307 	and.w	r3, r3, #7
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d00c      	beq.n	80073c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	3307      	adds	r3, #7
 80073b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f023 0307 	bic.w	r3, r3, #7
 80073ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80073bc:	68ba      	ldr	r2, [r7, #8]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	1ad3      	subs	r3, r2, r3
 80073c2:	4a1f      	ldr	r2, [pc, #124]	; (8007440 <prvHeapInit+0xac>)
 80073c4:	4413      	add	r3, r2
 80073c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80073cc:	4a1d      	ldr	r2, [pc, #116]	; (8007444 <prvHeapInit+0xb0>)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80073d2:	4b1c      	ldr	r3, [pc, #112]	; (8007444 <prvHeapInit+0xb0>)
 80073d4:	2200      	movs	r2, #0
 80073d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	68ba      	ldr	r2, [r7, #8]
 80073dc:	4413      	add	r3, r2
 80073de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80073e0:	2208      	movs	r2, #8
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	1a9b      	subs	r3, r3, r2
 80073e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f023 0307 	bic.w	r3, r3, #7
 80073ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	4a15      	ldr	r2, [pc, #84]	; (8007448 <prvHeapInit+0xb4>)
 80073f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80073f6:	4b14      	ldr	r3, [pc, #80]	; (8007448 <prvHeapInit+0xb4>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	2200      	movs	r2, #0
 80073fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80073fe:	4b12      	ldr	r3, [pc, #72]	; (8007448 <prvHeapInit+0xb4>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	2200      	movs	r2, #0
 8007404:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	68fa      	ldr	r2, [r7, #12]
 800740e:	1ad2      	subs	r2, r2, r3
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007414:	4b0c      	ldr	r3, [pc, #48]	; (8007448 <prvHeapInit+0xb4>)
 8007416:	681a      	ldr	r2, [r3, #0]
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	4a0a      	ldr	r2, [pc, #40]	; (800744c <prvHeapInit+0xb8>)
 8007422:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	4a09      	ldr	r2, [pc, #36]	; (8007450 <prvHeapInit+0xbc>)
 800742a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800742c:	4b09      	ldr	r3, [pc, #36]	; (8007454 <prvHeapInit+0xc0>)
 800742e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007432:	601a      	str	r2, [r3, #0]
}
 8007434:	bf00      	nop
 8007436:	3714      	adds	r7, #20
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr
 8007440:	20000f4c 	.word	0x20000f4c
 8007444:	20004b4c 	.word	0x20004b4c
 8007448:	20004b54 	.word	0x20004b54
 800744c:	20004b5c 	.word	0x20004b5c
 8007450:	20004b58 	.word	0x20004b58
 8007454:	20004b60 	.word	0x20004b60

08007458 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007458:	b480      	push	{r7}
 800745a:	b085      	sub	sp, #20
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007460:	4b28      	ldr	r3, [pc, #160]	; (8007504 <prvInsertBlockIntoFreeList+0xac>)
 8007462:	60fb      	str	r3, [r7, #12]
 8007464:	e002      	b.n	800746c <prvInsertBlockIntoFreeList+0x14>
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	60fb      	str	r3, [r7, #12]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	429a      	cmp	r2, r3
 8007474:	d8f7      	bhi.n	8007466 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	68ba      	ldr	r2, [r7, #8]
 8007480:	4413      	add	r3, r2
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	429a      	cmp	r2, r3
 8007486:	d108      	bne.n	800749a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	685a      	ldr	r2, [r3, #4]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	441a      	add	r2, r3
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	68ba      	ldr	r2, [r7, #8]
 80074a4:	441a      	add	r2, r3
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d118      	bne.n	80074e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681a      	ldr	r2, [r3, #0]
 80074b2:	4b15      	ldr	r3, [pc, #84]	; (8007508 <prvInsertBlockIntoFreeList+0xb0>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d00d      	beq.n	80074d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	685a      	ldr	r2, [r3, #4]
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	441a      	add	r2, r3
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	601a      	str	r2, [r3, #0]
 80074d4:	e008      	b.n	80074e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80074d6:	4b0c      	ldr	r3, [pc, #48]	; (8007508 <prvInsertBlockIntoFreeList+0xb0>)
 80074d8:	681a      	ldr	r2, [r3, #0]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	601a      	str	r2, [r3, #0]
 80074de:	e003      	b.n	80074e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681a      	ldr	r2, [r3, #0]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80074e8:	68fa      	ldr	r2, [r7, #12]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d002      	beq.n	80074f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	687a      	ldr	r2, [r7, #4]
 80074f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80074f6:	bf00      	nop
 80074f8:	3714      	adds	r7, #20
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr
 8007502:	bf00      	nop
 8007504:	20004b4c 	.word	0x20004b4c
 8007508:	20004b54 	.word	0x20004b54

0800750c <eMBFuncReadCoils>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b086      	sub	sp, #24
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usCoilCount;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8007516:	2300      	movs	r3, #0
 8007518:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	881b      	ldrh	r3, [r3, #0]
 800751e:	2b05      	cmp	r3, #5
 8007520:	d16c      	bne.n	80075fc <eMBFuncReadCoils+0xf0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	3301      	adds	r3, #1
 8007526:	781b      	ldrb	r3, [r3, #0]
 8007528:	b29b      	uxth	r3, r3
 800752a:	021b      	lsls	r3, r3, #8
 800752c:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	3302      	adds	r3, #2
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	b29a      	uxth	r2, r3
 8007536:	8abb      	ldrh	r3, [r7, #20]
 8007538:	4313      	orrs	r3, r2
 800753a:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 800753c:	8abb      	ldrh	r3, [r7, #20]
 800753e:	3301      	adds	r3, #1
 8007540:	82bb      	strh	r3, [r7, #20]

        usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	3303      	adds	r3, #3
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	b29b      	uxth	r3, r3
 800754a:	021b      	lsls	r3, r3, #8
 800754c:	827b      	strh	r3, [r7, #18]
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	3304      	adds	r3, #4
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	b29a      	uxth	r2, r3
 8007556:	8a7b      	ldrh	r3, [r7, #18]
 8007558:	4313      	orrs	r3, r2
 800755a:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usCoilCount >= 1 ) &&
 800755c:	8a7b      	ldrh	r3, [r7, #18]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d049      	beq.n	80075f6 <eMBFuncReadCoils+0xea>
 8007562:	8a7b      	ldrh	r3, [r7, #18]
 8007564:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007568:	d245      	bcs.n	80075f6 <eMBFuncReadCoils+0xea>
            ( usCoilCount < MB_PDU_FUNC_READ_COILCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	2200      	movs	r2, #0
 8007572:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_COILS;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	1c5a      	adds	r2, r3, #1
 8007578:	60fa      	str	r2, [r7, #12]
 800757a:	2201      	movs	r2, #1
 800757c:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	881b      	ldrh	r3, [r3, #0]
 8007582:	3301      	adds	r3, #1
 8007584:	b29a      	uxth	r2, r3
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	801a      	strh	r2, [r3, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usCoilCount & 0x0007 ) != 0 )
 800758a:	8a7b      	ldrh	r3, [r7, #18]
 800758c:	f003 0307 	and.w	r3, r3, #7
 8007590:	2b00      	cmp	r3, #0
 8007592:	d006      	beq.n	80075a2 <eMBFuncReadCoils+0x96>
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
 8007594:	8a7b      	ldrh	r3, [r7, #18]
 8007596:	08db      	lsrs	r3, r3, #3
 8007598:	b29b      	uxth	r3, r3
 800759a:	b2db      	uxtb	r3, r3
 800759c:	3301      	adds	r3, #1
 800759e:	75fb      	strb	r3, [r7, #23]
 80075a0:	e003      	b.n	80075aa <eMBFuncReadCoils+0x9e>
            }
            else
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
 80075a2:	8a7b      	ldrh	r3, [r7, #18]
 80075a4:	08db      	lsrs	r3, r3, #3
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	75fb      	strb	r3, [r7, #23]
            }
            *pucFrameCur++ = ucNBytes;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	1c5a      	adds	r2, r3, #1
 80075ae:	60fa      	str	r2, [r7, #12]
 80075b0:	7dfa      	ldrb	r2, [r7, #23]
 80075b2:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	881b      	ldrh	r3, [r3, #0]
 80075b8:	3301      	adds	r3, #1
 80075ba:	b29a      	uxth	r2, r3
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
 80075c0:	8a7a      	ldrh	r2, [r7, #18]
 80075c2:	8ab9      	ldrh	r1, [r7, #20]
 80075c4:	2300      	movs	r3, #0
 80075c6:	68f8      	ldr	r0, [r7, #12]
 80075c8:	f002 fb3a 	bl	8009c40 <eMBRegCoilsCB>
 80075cc:	4603      	mov	r3, r0
 80075ce:	72fb      	strb	r3, [r7, #11]
                               MB_REG_READ );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80075d0:	7afb      	ldrb	r3, [r7, #11]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d006      	beq.n	80075e4 <eMBFuncReadCoils+0xd8>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 80075d6:	7afb      	ldrb	r3, [r7, #11]
 80075d8:	4618      	mov	r0, r3
 80075da:	f001 f8f3 	bl	80087c4 <prveMBError2Exception>
 80075de:	4603      	mov	r3, r0
 80075e0:	75bb      	strb	r3, [r7, #22]
            if( eRegStatus != MB_ENOERR )
 80075e2:	e00d      	b.n	8007600 <eMBFuncReadCoils+0xf4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	881a      	ldrh	r2, [r3, #0]
 80075e8:	7dfb      	ldrb	r3, [r7, #23]
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	4413      	add	r3, r2
 80075ee:	b29a      	uxth	r2, r3
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 80075f4:	e004      	b.n	8007600 <eMBFuncReadCoils+0xf4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80075f6:	2303      	movs	r3, #3
 80075f8:	75bb      	strb	r3, [r7, #22]
 80075fa:	e001      	b.n	8007600 <eMBFuncReadCoils+0xf4>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80075fc:	2303      	movs	r3, #3
 80075fe:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 8007600:	7dbb      	ldrb	r3, [r7, #22]
}
 8007602:	4618      	mov	r0, r3
 8007604:	3718      	adds	r7, #24
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}

0800760a <eMBFuncWriteCoil>:

#if MB_FUNC_WRITE_COIL_ENABLED > 0
eMBException
eMBFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
{
 800760a:	b580      	push	{r7, lr}
 800760c:	b084      	sub	sp, #16
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]
 8007612:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
 8007614:	2300      	movs	r3, #0
 8007616:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	881b      	ldrh	r3, [r3, #0]
 800761c:	2b05      	cmp	r3, #5
 800761e:	d140      	bne.n	80076a2 <eMBFuncWriteCoil+0x98>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	3301      	adds	r3, #1
 8007624:	781b      	ldrb	r3, [r3, #0]
 8007626:	b29b      	uxth	r3, r3
 8007628:	021b      	lsls	r3, r3, #8
 800762a:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	3302      	adds	r3, #2
 8007630:	781b      	ldrb	r3, [r3, #0]
 8007632:	b29a      	uxth	r2, r3
 8007634:	89bb      	ldrh	r3, [r7, #12]
 8007636:	4313      	orrs	r3, r2
 8007638:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 800763a:	89bb      	ldrh	r3, [r7, #12]
 800763c:	3301      	adds	r3, #1
 800763e:	81bb      	strh	r3, [r7, #12]

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	3304      	adds	r3, #4
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d128      	bne.n	800769c <eMBFuncWriteCoil+0x92>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	3303      	adds	r3, #3
 800764e:	781b      	ldrb	r3, [r3, #0]
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8007650:	2bff      	cmp	r3, #255	; 0xff
 8007652:	d004      	beq.n	800765e <eMBFuncWriteCoil+0x54>
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	3303      	adds	r3, #3
 8007658:	781b      	ldrb	r3, [r3, #0]
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 800765a:	2b00      	cmp	r3, #0
 800765c:	d11e      	bne.n	800769c <eMBFuncWriteCoil+0x92>
        {
            ucBuf[1] = 0;
 800765e:	2300      	movs	r3, #0
 8007660:	727b      	strb	r3, [r7, #9]
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	3303      	adds	r3, #3
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	2bff      	cmp	r3, #255	; 0xff
 800766a:	d102      	bne.n	8007672 <eMBFuncWriteCoil+0x68>
            {
                ucBuf[0] = 1;
 800766c:	2301      	movs	r3, #1
 800766e:	723b      	strb	r3, [r7, #8]
 8007670:	e001      	b.n	8007676 <eMBFuncWriteCoil+0x6c>
            }
            else
            {
                ucBuf[0] = 0;
 8007672:	2300      	movs	r3, #0
 8007674:	723b      	strb	r3, [r7, #8]
            }
            eRegStatus =
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );
 8007676:	89b9      	ldrh	r1, [r7, #12]
 8007678:	f107 0008 	add.w	r0, r7, #8
 800767c:	2301      	movs	r3, #1
 800767e:	2201      	movs	r2, #1
 8007680:	f002 fade 	bl	8009c40 <eMBRegCoilsCB>
 8007684:	4603      	mov	r3, r0
 8007686:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8007688:	7afb      	ldrb	r3, [r7, #11]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d00b      	beq.n	80076a6 <eMBFuncWriteCoil+0x9c>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800768e:	7afb      	ldrb	r3, [r7, #11]
 8007690:	4618      	mov	r0, r3
 8007692:	f001 f897 	bl	80087c4 <prveMBError2Exception>
 8007696:	4603      	mov	r3, r0
 8007698:	73fb      	strb	r3, [r7, #15]
            if( eRegStatus != MB_ENOERR )
 800769a:	e004      	b.n	80076a6 <eMBFuncWriteCoil+0x9c>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800769c:	2303      	movs	r3, #3
 800769e:	73fb      	strb	r3, [r7, #15]
 80076a0:	e001      	b.n	80076a6 <eMBFuncWriteCoil+0x9c>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80076a2:	2303      	movs	r3, #3
 80076a4:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 80076a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3710      	adds	r7, #16
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <eMBFuncWriteMultipleCoils>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_COILS_ENABLED > 0
eMBException
eMBFuncWriteMultipleCoils( UCHAR * pucFrame, USHORT * usLen )
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b084      	sub	sp, #16
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usCoilCnt;
    UCHAR           ucByteCount;
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
 80076ba:	2300      	movs	r3, #0
 80076bc:	73bb      	strb	r3, [r7, #14]
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	881b      	ldrh	r3, [r3, #0]
 80076c2:	2b05      	cmp	r3, #5
 80076c4:	d954      	bls.n	8007770 <eMBFuncWriteMultipleCoils+0xc0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	3301      	adds	r3, #1
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	021b      	lsls	r3, r3, #8
 80076d0:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	3302      	adds	r3, #2
 80076d6:	781b      	ldrb	r3, [r3, #0]
 80076d8:	b29a      	uxth	r2, r3
 80076da:	89bb      	ldrh	r3, [r7, #12]
 80076dc:	4313      	orrs	r3, r2
 80076de:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 80076e0:	89bb      	ldrh	r3, [r7, #12]
 80076e2:	3301      	adds	r3, #1
 80076e4:	81bb      	strh	r3, [r7, #12]

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	3303      	adds	r3, #3
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	021b      	lsls	r3, r3, #8
 80076f0:	817b      	strh	r3, [r7, #10]
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	3304      	adds	r3, #4
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	b29a      	uxth	r2, r3
 80076fa:	897b      	ldrh	r3, [r7, #10]
 80076fc:	4313      	orrs	r3, r2
 80076fe:	817b      	strh	r3, [r7, #10]

        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	795b      	ldrb	r3, [r3, #5]
 8007704:	727b      	strb	r3, [r7, #9]

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
 8007706:	897b      	ldrh	r3, [r7, #10]
 8007708:	f003 0307 	and.w	r3, r3, #7
 800770c:	2b00      	cmp	r3, #0
 800770e:	d006      	beq.n	800771e <eMBFuncWriteMultipleCoils+0x6e>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 8007710:	897b      	ldrh	r3, [r7, #10]
 8007712:	08db      	lsrs	r3, r3, #3
 8007714:	b29b      	uxth	r3, r3
 8007716:	b2db      	uxtb	r3, r3
 8007718:	3301      	adds	r3, #1
 800771a:	73fb      	strb	r3, [r7, #15]
 800771c:	e003      	b.n	8007726 <eMBFuncWriteMultipleCoils+0x76>
        }
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
 800771e:	897b      	ldrh	r3, [r7, #10]
 8007720:	08db      	lsrs	r3, r3, #3
 8007722:	b29b      	uxth	r3, r3
 8007724:	73fb      	strb	r3, [r7, #15]
        }

        if( ( usCoilCnt >= 1 ) &&
 8007726:	897b      	ldrh	r3, [r7, #10]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d01e      	beq.n	800776a <eMBFuncWriteMultipleCoils+0xba>
 800772c:	897b      	ldrh	r3, [r7, #10]
 800772e:	f5b3 6ff6 	cmp.w	r3, #1968	; 0x7b0
 8007732:	d81a      	bhi.n	800776a <eMBFuncWriteMultipleCoils+0xba>
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
 8007734:	7bfa      	ldrb	r2, [r7, #15]
 8007736:	7a7b      	ldrb	r3, [r7, #9]
 8007738:	429a      	cmp	r2, r3
 800773a:	d116      	bne.n	800776a <eMBFuncWriteMultipleCoils+0xba>
            ( ucByteCountVerify == ucByteCount ) )
        {
            eRegStatus =
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	1d98      	adds	r0, r3, #6
 8007740:	897a      	ldrh	r2, [r7, #10]
 8007742:	89b9      	ldrh	r1, [r7, #12]
 8007744:	2301      	movs	r3, #1
 8007746:	f002 fa7b 	bl	8009c40 <eMBRegCoilsCB>
 800774a:	4603      	mov	r3, r0
 800774c:	723b      	strb	r3, [r7, #8]
                               usRegAddress, usCoilCnt, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 800774e:	7a3b      	ldrb	r3, [r7, #8]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d006      	beq.n	8007762 <eMBFuncWriteMultipleCoils+0xb2>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8007754:	7a3b      	ldrb	r3, [r7, #8]
 8007756:	4618      	mov	r0, r3
 8007758:	f001 f834 	bl	80087c4 <prveMBError2Exception>
 800775c:	4603      	mov	r3, r0
 800775e:	73bb      	strb	r3, [r7, #14]
            if( eRegStatus != MB_ENOERR )
 8007760:	e008      	b.n	8007774 <eMBFuncWriteMultipleCoils+0xc4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	2205      	movs	r2, #5
 8007766:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8007768:	e004      	b.n	8007774 <eMBFuncWriteMultipleCoils+0xc4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800776a:	2303      	movs	r3, #3
 800776c:	73bb      	strb	r3, [r7, #14]
 800776e:	e001      	b.n	8007774 <eMBFuncWriteMultipleCoils+0xc4>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8007770:	2303      	movs	r3, #3
 8007772:	73bb      	strb	r3, [r7, #14]
    }
    return eStatus;
 8007774:	7bbb      	ldrb	r3, [r7, #14]
}
 8007776:	4618      	mov	r0, r3
 8007778:	3710      	adds	r7, #16
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}

0800777e <eMBMasterFuncReadCoils>:
    return eErrStatus;
}

eMBException
eMBMasterFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
 800777e:	b580      	push	{r7, lr}
 8007780:	b086      	sub	sp, #24
 8007782:	af00      	add	r7, sp, #0
 8007784:	6078      	str	r0, [r7, #4]
 8007786:	6039      	str	r1, [r7, #0]
    UCHAR          *ucMBFrame;
    USHORT          usRegAddress;
    USHORT          usCoilCount;
    UCHAR           ucByteCount;

    eMBException    eStatus = MB_EX_NONE;
 8007788:	2300      	movs	r3, #0
 800778a:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, and it's read mode. This request don't need execute. */
    if ( xMBMasterRequestIsBroadcast() )
 800778c:	f003 fa9e 	bl	800accc <xMBMasterRequestIsBroadcast>
 8007790:	4603      	mov	r3, r0
 8007792:	2b00      	cmp	r3, #0
 8007794:	d002      	beq.n	800779c <eMBMasterFuncReadCoils+0x1e>
    {
    	eStatus = MB_EX_NONE;
 8007796:	2300      	movs	r3, #0
 8007798:	75bb      	strb	r3, [r7, #22]
 800779a:	e056      	b.n	800784a <eMBMasterFuncReadCoils+0xcc>
    }
    else if ( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	881b      	ldrh	r3, [r3, #0]
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d950      	bls.n	8007846 <eMBMasterFuncReadCoils+0xc8>
    {
    	vMBMasterGetPDUSndBuf(&ucMBFrame);
 80077a4:	f107 030c 	add.w	r3, r7, #12
 80077a8:	4618      	mov	r0, r3
 80077aa:	f003 fa63 	bl	800ac74 <vMBMasterGetPDUSndBuf>
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	3301      	adds	r3, #1
 80077b2:	781b      	ldrb	r3, [r3, #0]
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	021b      	lsls	r3, r3, #8
 80077b8:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	3302      	adds	r3, #2
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	b29a      	uxth	r2, r3
 80077c2:	8abb      	ldrh	r3, [r7, #20]
 80077c4:	4313      	orrs	r3, r2
 80077c6:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 80077c8:	8abb      	ldrh	r3, [r7, #20]
 80077ca:	3301      	adds	r3, #1
 80077cc:	82bb      	strh	r3, [r7, #20]

        usCoilCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_COILCNT_OFF] << 8 );
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	3303      	adds	r3, #3
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	021b      	lsls	r3, r3, #8
 80077d8:	827b      	strh	r3, [r7, #18]
        usCoilCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_COILCNT_OFF + 1] );
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	3304      	adds	r3, #4
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	b29a      	uxth	r2, r3
 80077e2:	8a7b      	ldrh	r3, [r7, #18]
 80077e4:	4313      	orrs	r3, r2
 80077e6:	827b      	strh	r3, [r7, #18]

        /* Test if the quantity of coils is a multiple of 8. If not last
         * byte is only partially field with unused coils set to zero. */
        if( ( usCoilCount & 0x0007 ) != 0 )
 80077e8:	8a7b      	ldrh	r3, [r7, #18]
 80077ea:	f003 0307 	and.w	r3, r3, #7
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d006      	beq.n	8007800 <eMBMasterFuncReadCoils+0x82>
        {
        	ucByteCount = ( UCHAR )( usCoilCount / 8 + 1 );
 80077f2:	8a7b      	ldrh	r3, [r7, #18]
 80077f4:	08db      	lsrs	r3, r3, #3
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	b2db      	uxtb	r3, r3
 80077fa:	3301      	adds	r3, #1
 80077fc:	75fb      	strb	r3, [r7, #23]
 80077fe:	e003      	b.n	8007808 <eMBMasterFuncReadCoils+0x8a>
        }
        else
        {
        	ucByteCount = ( UCHAR )( usCoilCount / 8 );
 8007800:	8a7b      	ldrh	r3, [r7, #18]
 8007802:	08db      	lsrs	r3, r3, #3
 8007804:	b29b      	uxth	r3, r3
 8007806:	75fb      	strb	r3, [r7, #23]
        }

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usCoilCount >= 1 ) &&
 8007808:	8a7b      	ldrh	r3, [r7, #18]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d018      	beq.n	8007840 <eMBMasterFuncReadCoils+0xc2>
            ( ucByteCount == pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] ) )
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	3301      	adds	r3, #1
 8007812:	781b      	ldrb	r3, [r3, #0]
        if( ( usCoilCount >= 1 ) &&
 8007814:	7dfa      	ldrb	r2, [r7, #23]
 8007816:	429a      	cmp	r2, r3
 8007818:	d112      	bne.n	8007840 <eMBMasterFuncReadCoils+0xc2>
        {
        	/* Make callback to fill the buffer. */
            eRegStatus = eMBMasterRegCoilsCB( &pucFrame[MB_PDU_FUNC_READ_VALUES_OFF], usRegAddress, usCoilCount, MB_REG_READ );
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	1c98      	adds	r0, r3, #2
 800781e:	8a7a      	ldrh	r2, [r7, #18]
 8007820:	8ab9      	ldrh	r1, [r7, #20]
 8007822:	2300      	movs	r3, #0
 8007824:	f002 fc12 	bl	800a04c <eMBMasterRegCoilsCB>
 8007828:	4603      	mov	r3, r0
 800782a:	747b      	strb	r3, [r7, #17]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 800782c:	7c7b      	ldrb	r3, [r7, #17]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d00b      	beq.n	800784a <eMBMasterFuncReadCoils+0xcc>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8007832:	7c7b      	ldrb	r3, [r7, #17]
 8007834:	4618      	mov	r0, r3
 8007836:	f000 ffc5 	bl	80087c4 <prveMBError2Exception>
 800783a:	4603      	mov	r3, r0
 800783c:	75bb      	strb	r3, [r7, #22]
            if( eRegStatus != MB_ENOERR )
 800783e:	e004      	b.n	800784a <eMBMasterFuncReadCoils+0xcc>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8007840:	2303      	movs	r3, #3
 8007842:	75bb      	strb	r3, [r7, #22]
 8007844:	e001      	b.n	800784a <eMBMasterFuncReadCoils+0xcc>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8007846:	2303      	movs	r3, #3
 8007848:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 800784a:	7dbb      	ldrb	r3, [r7, #22]
}
 800784c:	4618      	mov	r0, r3
 800784e:	3718      	adds	r7, #24
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}

08007854 <eMBMasterReqWriteCoil>:
 *
 * @see eMBMasterReqWriteMultipleCoils
 */
eMBMasterReqErrCode
eMBMasterReqWriteCoil( UCHAR ucSndAddr, USHORT usCoilAddr, USHORT usCoilData, LONG lTimeOut )
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b086      	sub	sp, #24
 8007858:	af00      	add	r7, sp, #0
 800785a:	607b      	str	r3, [r7, #4]
 800785c:	4603      	mov	r3, r0
 800785e:	73fb      	strb	r3, [r7, #15]
 8007860:	460b      	mov	r3, r1
 8007862:	81bb      	strh	r3, [r7, #12]
 8007864:	4613      	mov	r3, r2
 8007866:	817b      	strh	r3, [r7, #10]
    UCHAR                 *ucMBFrame;
    eMBMasterReqErrCode    eErrStatus = MB_MRE_NO_ERR;
 8007868:	2300      	movs	r3, #0
 800786a:	75fb      	strb	r3, [r7, #23]

    if ( ucSndAddr > MB_MASTER_TOTAL_SLAVE_NUM ) eErrStatus = MB_MRE_ILL_ARG;
 800786c:	7bfb      	ldrb	r3, [r7, #15]
 800786e:	2b10      	cmp	r3, #16
 8007870:	d902      	bls.n	8007878 <eMBMasterReqWriteCoil+0x24>
 8007872:	2302      	movs	r3, #2
 8007874:	75fb      	strb	r3, [r7, #23]
 8007876:	e040      	b.n	80078fa <eMBMasterReqWriteCoil+0xa6>
    else if ( ( usCoilData != 0xFF00 ) && ( usCoilData != 0x0000 ) ) eErrStatus = MB_MRE_ILL_ARG;
 8007878:	897b      	ldrh	r3, [r7, #10]
 800787a:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800787e:	d005      	beq.n	800788c <eMBMasterReqWriteCoil+0x38>
 8007880:	897b      	ldrh	r3, [r7, #10]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d002      	beq.n	800788c <eMBMasterReqWriteCoil+0x38>
 8007886:	2302      	movs	r3, #2
 8007888:	75fb      	strb	r3, [r7, #23]
 800788a:	e036      	b.n	80078fa <eMBMasterReqWriteCoil+0xa6>
    else if ( xMBMasterRunResTake( lTimeOut ) == FALSE ) eErrStatus = MB_MRE_MASTER_BUSY;
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f001 fda7 	bl	80093e0 <xMBMasterRunResTake>
 8007892:	4603      	mov	r3, r0
 8007894:	2b00      	cmp	r3, #0
 8007896:	d102      	bne.n	800789e <eMBMasterReqWriteCoil+0x4a>
 8007898:	2305      	movs	r3, #5
 800789a:	75fb      	strb	r3, [r7, #23]
 800789c:	e02d      	b.n	80078fa <eMBMasterReqWriteCoil+0xa6>
    else
    {
		vMBMasterGetPDUSndBuf(&ucMBFrame);
 800789e:	f107 0310 	add.w	r3, r7, #16
 80078a2:	4618      	mov	r0, r3
 80078a4:	f003 f9e6 	bl	800ac74 <vMBMasterGetPDUSndBuf>
		vMBMasterSetDestAddress(ucSndAddr);
 80078a8:	7bfb      	ldrb	r3, [r7, #15]
 80078aa:	4618      	mov	r0, r3
 80078ac:	f001 fafa 	bl	8008ea4 <vMBMasterSetDestAddress>
		ucMBFrame[MB_PDU_FUNC_OFF]                = MB_FUNC_WRITE_SINGLE_COIL;
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	2205      	movs	r2, #5
 80078b4:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_WRITE_ADDR_OFF]      = usCoilAddr >> 8;
 80078b6:	89bb      	ldrh	r3, [r7, #12]
 80078b8:	0a1b      	lsrs	r3, r3, #8
 80078ba:	b29a      	uxth	r2, r3
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	3301      	adds	r3, #1
 80078c0:	b2d2      	uxtb	r2, r2
 80078c2:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_WRITE_ADDR_OFF + 1]  = usCoilAddr;
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	3302      	adds	r3, #2
 80078c8:	89ba      	ldrh	r2, [r7, #12]
 80078ca:	b2d2      	uxtb	r2, r2
 80078cc:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_WRITE_VALUE_OFF ]    = usCoilData >> 8;
 80078ce:	897b      	ldrh	r3, [r7, #10]
 80078d0:	0a1b      	lsrs	r3, r3, #8
 80078d2:	b29a      	uxth	r2, r3
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	3303      	adds	r3, #3
 80078d8:	b2d2      	uxtb	r2, r2
 80078da:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_WRITE_VALUE_OFF + 1] = usCoilData;
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	3304      	adds	r3, #4
 80078e0:	897a      	ldrh	r2, [r7, #10]
 80078e2:	b2d2      	uxtb	r2, r2
 80078e4:	701a      	strb	r2, [r3, #0]
		vMBMasterSetPDUSndLength( MB_PDU_SIZE_MIN + MB_PDU_REQ_WRITE_SIZE );
 80078e6:	2005      	movs	r0, #5
 80078e8:	f003 f9d4 	bl	800ac94 <vMBMasterSetPDUSndLength>
		( void ) xMBMasterPortEventPost( EV_MASTER_FRAME_SENT );
 80078ec:	2008      	movs	r0, #8
 80078ee:	f001 fce1 	bl	80092b4 <xMBMasterPortEventPost>
		eErrStatus = eMBMasterWaitRequestFinish( );
 80078f2:	f001 fde5 	bl	80094c0 <eMBMasterWaitRequestFinish>
 80078f6:	4603      	mov	r3, r0
 80078f8:	75fb      	strb	r3, [r7, #23]
    }
    return eErrStatus;
 80078fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3718      	adds	r7, #24
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}

08007904 <eMBMasterFuncWriteCoil>:

eMBException
eMBMasterFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b084      	sub	sp, #16
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
 800790c:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
 800790e:	2300      	movs	r3, #0
 8007910:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	881b      	ldrh	r3, [r3, #0]
 8007916:	2b05      	cmp	r3, #5
 8007918:	d140      	bne.n	800799c <eMBMasterFuncWriteCoil+0x98>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	3301      	adds	r3, #1
 800791e:	781b      	ldrb	r3, [r3, #0]
 8007920:	b29b      	uxth	r3, r3
 8007922:	021b      	lsls	r3, r3, #8
 8007924:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	3302      	adds	r3, #2
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	b29a      	uxth	r2, r3
 800792e:	89bb      	ldrh	r3, [r7, #12]
 8007930:	4313      	orrs	r3, r2
 8007932:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8007934:	89bb      	ldrh	r3, [r7, #12]
 8007936:	3301      	adds	r3, #1
 8007938:	81bb      	strh	r3, [r7, #12]

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	3304      	adds	r3, #4
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d128      	bne.n	8007996 <eMBMasterFuncWriteCoil+0x92>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	3303      	adds	r3, #3
 8007948:	781b      	ldrb	r3, [r3, #0]
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 800794a:	2bff      	cmp	r3, #255	; 0xff
 800794c:	d004      	beq.n	8007958 <eMBMasterFuncWriteCoil+0x54>
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	3303      	adds	r3, #3
 8007952:	781b      	ldrb	r3, [r3, #0]
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 8007954:	2b00      	cmp	r3, #0
 8007956:	d11e      	bne.n	8007996 <eMBMasterFuncWriteCoil+0x92>
        {
            ucBuf[1] = 0;
 8007958:	2300      	movs	r3, #0
 800795a:	727b      	strb	r3, [r7, #9]
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	3303      	adds	r3, #3
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	2bff      	cmp	r3, #255	; 0xff
 8007964:	d102      	bne.n	800796c <eMBMasterFuncWriteCoil+0x68>
            {
                ucBuf[0] = 1;
 8007966:	2301      	movs	r3, #1
 8007968:	723b      	strb	r3, [r7, #8]
 800796a:	e001      	b.n	8007970 <eMBMasterFuncWriteCoil+0x6c>
            }
            else
            {
                ucBuf[0] = 0;
 800796c:	2300      	movs	r3, #0
 800796e:	723b      	strb	r3, [r7, #8]
            }
            eRegStatus =
                eMBMasterRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );
 8007970:	89b9      	ldrh	r1, [r7, #12]
 8007972:	f107 0008 	add.w	r0, r7, #8
 8007976:	2301      	movs	r3, #1
 8007978:	2201      	movs	r2, #1
 800797a:	f002 fb67 	bl	800a04c <eMBMasterRegCoilsCB>
 800797e:	4603      	mov	r3, r0
 8007980:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8007982:	7afb      	ldrb	r3, [r7, #11]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d00b      	beq.n	80079a0 <eMBMasterFuncWriteCoil+0x9c>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8007988:	7afb      	ldrb	r3, [r7, #11]
 800798a:	4618      	mov	r0, r3
 800798c:	f000 ff1a 	bl	80087c4 <prveMBError2Exception>
 8007990:	4603      	mov	r3, r0
 8007992:	73fb      	strb	r3, [r7, #15]
            if( eRegStatus != MB_ENOERR )
 8007994:	e004      	b.n	80079a0 <eMBMasterFuncWriteCoil+0x9c>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8007996:	2303      	movs	r3, #3
 8007998:	73fb      	strb	r3, [r7, #15]
 800799a:	e001      	b.n	80079a0 <eMBMasterFuncWriteCoil+0x9c>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800799c:	2303      	movs	r3, #3
 800799e:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 80079a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3710      	adds	r7, #16
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}

080079aa <eMBMasterFuncWriteMultipleCoils>:
    return eErrStatus;
}

eMBException
eMBMasterFuncWriteMultipleCoils( UCHAR * pucFrame, USHORT * usLen )
{
 80079aa:	b580      	push	{r7, lr}
 80079ac:	b086      	sub	sp, #24
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
 80079b2:	6039      	str	r1, [r7, #0]
    USHORT          usCoilCnt;
    UCHAR           ucByteCount;
    UCHAR           ucByteCountVerify;
    UCHAR          *ucMBFrame;

    eMBException    eStatus = MB_EX_NONE;
 80079b4:	2300      	movs	r3, #0
 80079b6:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, the *usLen is not need check. */
    if( ( *usLen == MB_PDU_FUNC_WRITE_MUL_SIZE ) || xMBMasterRequestIsBroadcast() )
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	881b      	ldrh	r3, [r3, #0]
 80079bc:	2b05      	cmp	r3, #5
 80079be:	d004      	beq.n	80079ca <eMBMasterFuncWriteMultipleCoils+0x20>
 80079c0:	f003 f984 	bl	800accc <xMBMasterRequestIsBroadcast>
 80079c4:	4603      	mov	r3, r0
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d052      	beq.n	8007a70 <eMBMasterFuncWriteMultipleCoils+0xc6>
    {
    	vMBMasterGetPDUSndBuf(&ucMBFrame);
 80079ca:	f107 030c 	add.w	r3, r7, #12
 80079ce:	4618      	mov	r0, r3
 80079d0:	f003 f950 	bl	800ac74 <vMBMasterGetPDUSndBuf>
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	3301      	adds	r3, #1
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	b29b      	uxth	r3, r3
 80079dc:	021b      	lsls	r3, r3, #8
 80079de:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	3302      	adds	r3, #2
 80079e4:	781b      	ldrb	r3, [r3, #0]
 80079e6:	b29a      	uxth	r2, r3
 80079e8:	8abb      	ldrh	r3, [r7, #20]
 80079ea:	4313      	orrs	r3, r2
 80079ec:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 80079ee:	8abb      	ldrh	r3, [r7, #20]
 80079f0:	3301      	adds	r3, #1
 80079f2:	82bb      	strh	r3, [r7, #20]

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	3303      	adds	r3, #3
 80079f8:	781b      	ldrb	r3, [r3, #0]
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	021b      	lsls	r3, r3, #8
 80079fe:	827b      	strh	r3, [r7, #18]
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	3304      	adds	r3, #4
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	b29a      	uxth	r2, r3
 8007a08:	8a7b      	ldrh	r3, [r7, #18]
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	827b      	strh	r3, [r7, #18]

        ucByteCount = ucMBFrame[MB_PDU_REQ_WRITE_MUL_BYTECNT_OFF];
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	795b      	ldrb	r3, [r3, #5]
 8007a12:	747b      	strb	r3, [r7, #17]

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
 8007a14:	8a7b      	ldrh	r3, [r7, #18]
 8007a16:	f003 0307 	and.w	r3, r3, #7
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d006      	beq.n	8007a2c <eMBMasterFuncWriteMultipleCoils+0x82>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 8007a1e:	8a7b      	ldrh	r3, [r7, #18]
 8007a20:	08db      	lsrs	r3, r3, #3
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	b2db      	uxtb	r3, r3
 8007a26:	3301      	adds	r3, #1
 8007a28:	75fb      	strb	r3, [r7, #23]
 8007a2a:	e003      	b.n	8007a34 <eMBMasterFuncWriteMultipleCoils+0x8a>
        }
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
 8007a2c:	8a7b      	ldrh	r3, [r7, #18]
 8007a2e:	08db      	lsrs	r3, r3, #3
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	75fb      	strb	r3, [r7, #23]
        }

        if( ( usCoilCnt >= 1 ) && ( ucByteCountVerify == ucByteCount ) )
 8007a34:	8a7b      	ldrh	r3, [r7, #18]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d016      	beq.n	8007a68 <eMBMasterFuncWriteMultipleCoils+0xbe>
 8007a3a:	7dfa      	ldrb	r2, [r7, #23]
 8007a3c:	7c7b      	ldrb	r3, [r7, #17]
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d112      	bne.n	8007a68 <eMBMasterFuncWriteMultipleCoils+0xbe>
        {
            eRegStatus =
                eMBMasterRegCoilsCB( &ucMBFrame[MB_PDU_REQ_WRITE_MUL_VALUES_OFF],
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	1d98      	adds	r0, r3, #6
 8007a46:	8a7a      	ldrh	r2, [r7, #18]
 8007a48:	8ab9      	ldrh	r1, [r7, #20]
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	f002 fafe 	bl	800a04c <eMBMasterRegCoilsCB>
 8007a50:	4603      	mov	r3, r0
 8007a52:	743b      	strb	r3, [r7, #16]
                               usRegAddress, usCoilCnt, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8007a54:	7c3b      	ldrb	r3, [r7, #16]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d009      	beq.n	8007a6e <eMBMasterFuncWriteMultipleCoils+0xc4>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8007a5a:	7c3b      	ldrb	r3, [r7, #16]
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f000 feb1 	bl	80087c4 <prveMBError2Exception>
 8007a62:	4603      	mov	r3, r0
 8007a64:	75bb      	strb	r3, [r7, #22]
            if( eRegStatus != MB_ENOERR )
 8007a66:	e002      	b.n	8007a6e <eMBMasterFuncWriteMultipleCoils+0xc4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8007a68:	2303      	movs	r3, #3
 8007a6a:	75bb      	strb	r3, [r7, #22]
        if( ( usCoilCnt >= 1 ) && ( ucByteCountVerify == ucByteCount ) )
 8007a6c:	e002      	b.n	8007a74 <eMBMasterFuncWriteMultipleCoils+0xca>
 8007a6e:	e001      	b.n	8007a74 <eMBMasterFuncWriteMultipleCoils+0xca>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8007a70:	2303      	movs	r3, #3
 8007a72:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 8007a74:	7dbb      	ldrb	r3, [r7, #22]
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3718      	adds	r7, #24
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}

08007a7e <eMBFuncReadDiscreteInputs>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
 8007a7e:	b580      	push	{r7, lr}
 8007a80:	b086      	sub	sp, #24
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	6078      	str	r0, [r7, #4]
 8007a86:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usDiscreteCnt;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	881b      	ldrh	r3, [r3, #0]
 8007a90:	2b05      	cmp	r3, #5
 8007a92:	d16c      	bne.n	8007b6e <eMBFuncReadDiscreteInputs+0xf0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	3301      	adds	r3, #1
 8007a98:	781b      	ldrb	r3, [r3, #0]
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	021b      	lsls	r3, r3, #8
 8007a9e:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	3302      	adds	r3, #2
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	b29a      	uxth	r2, r3
 8007aa8:	8abb      	ldrh	r3, [r7, #20]
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8007aae:	8abb      	ldrh	r3, [r7, #20]
 8007ab0:	3301      	adds	r3, #1
 8007ab2:	82bb      	strh	r3, [r7, #20]

        usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	3303      	adds	r3, #3
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	021b      	lsls	r3, r3, #8
 8007abe:	827b      	strh	r3, [r7, #18]
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	3304      	adds	r3, #4
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	b29a      	uxth	r2, r3
 8007ac8:	8a7b      	ldrh	r3, [r7, #18]
 8007aca:	4313      	orrs	r3, r2
 8007acc:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usDiscreteCnt >= 1 ) &&
 8007ace:	8a7b      	ldrh	r3, [r7, #18]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d049      	beq.n	8007b68 <eMBFuncReadDiscreteInputs+0xea>
 8007ad4:	8a7b      	ldrh	r3, [r7, #18]
 8007ad6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007ada:	d245      	bcs.n	8007b68 <eMBFuncReadDiscreteInputs+0xea>
            ( usDiscreteCnt < MB_PDU_FUNC_READ_DISCCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	1c5a      	adds	r2, r3, #1
 8007aea:	60fa      	str	r2, [r7, #12]
 8007aec:	2202      	movs	r2, #2
 8007aee:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	881b      	ldrh	r3, [r3, #0]
 8007af4:	3301      	adds	r3, #1
 8007af6:	b29a      	uxth	r2, r3
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	801a      	strh	r2, [r3, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
 8007afc:	8a7b      	ldrh	r3, [r7, #18]
 8007afe:	f003 0307 	and.w	r3, r3, #7
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d006      	beq.n	8007b14 <eMBFuncReadDiscreteInputs+0x96>
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
 8007b06:	8a7b      	ldrh	r3, [r7, #18]
 8007b08:	08db      	lsrs	r3, r3, #3
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	3301      	adds	r3, #1
 8007b10:	75fb      	strb	r3, [r7, #23]
 8007b12:	e003      	b.n	8007b1c <eMBFuncReadDiscreteInputs+0x9e>
            }
            else
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
 8007b14:	8a7b      	ldrh	r3, [r7, #18]
 8007b16:	08db      	lsrs	r3, r3, #3
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	75fb      	strb	r3, [r7, #23]
            }
            *pucFrameCur++ = ucNBytes;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	1c5a      	adds	r2, r3, #1
 8007b20:	60fa      	str	r2, [r7, #12]
 8007b22:	7dfa      	ldrb	r2, [r7, #23]
 8007b24:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	881b      	ldrh	r3, [r3, #0]
 8007b2a:	3301      	adds	r3, #1
 8007b2c:	b29a      	uxth	r2, r3
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );
 8007b32:	8a7a      	ldrh	r2, [r7, #18]
 8007b34:	8abb      	ldrh	r3, [r7, #20]
 8007b36:	4619      	mov	r1, r3
 8007b38:	68f8      	ldr	r0, [r7, #12]
 8007b3a:	f002 f92f 	bl	8009d9c <eMBRegDiscreteCB>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8007b42:	7afb      	ldrb	r3, [r7, #11]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d006      	beq.n	8007b56 <eMBFuncReadDiscreteInputs+0xd8>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8007b48:	7afb      	ldrb	r3, [r7, #11]
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f000 fe3a 	bl	80087c4 <prveMBError2Exception>
 8007b50:	4603      	mov	r3, r0
 8007b52:	75bb      	strb	r3, [r7, #22]
            if( eRegStatus != MB_ENOERR )
 8007b54:	e00d      	b.n	8007b72 <eMBFuncReadDiscreteInputs+0xf4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	881a      	ldrh	r2, [r3, #0]
 8007b5a:	7dfb      	ldrb	r3, [r7, #23]
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	4413      	add	r3, r2
 8007b60:	b29a      	uxth	r2, r3
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8007b66:	e004      	b.n	8007b72 <eMBFuncReadDiscreteInputs+0xf4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8007b68:	2303      	movs	r3, #3
 8007b6a:	75bb      	strb	r3, [r7, #22]
 8007b6c:	e001      	b.n	8007b72 <eMBFuncReadDiscreteInputs+0xf4>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8007b6e:	2303      	movs	r3, #3
 8007b70:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 8007b72:	7dbb      	ldrb	r3, [r7, #22]
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3718      	adds	r7, #24
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <eMBMasterReqReadDiscreteInputs>:
 *
 * @return error code
 */
eMBMasterReqErrCode
eMBMasterReqReadDiscreteInputs( UCHAR ucSndAddr, USHORT usDiscreteAddr, USHORT usNDiscreteIn, LONG lTimeOut )
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b086      	sub	sp, #24
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	607b      	str	r3, [r7, #4]
 8007b84:	4603      	mov	r3, r0
 8007b86:	73fb      	strb	r3, [r7, #15]
 8007b88:	460b      	mov	r3, r1
 8007b8a:	81bb      	strh	r3, [r7, #12]
 8007b8c:	4613      	mov	r3, r2
 8007b8e:	817b      	strh	r3, [r7, #10]
    UCHAR                 *ucMBFrame;
    eMBMasterReqErrCode    eErrStatus = MB_MRE_NO_ERR;
 8007b90:	2300      	movs	r3, #0
 8007b92:	75fb      	strb	r3, [r7, #23]

    if ( ucSndAddr > MB_MASTER_TOTAL_SLAVE_NUM ) eErrStatus = MB_MRE_ILL_ARG;
 8007b94:	7bfb      	ldrb	r3, [r7, #15]
 8007b96:	2b10      	cmp	r3, #16
 8007b98:	d902      	bls.n	8007ba0 <eMBMasterReqReadDiscreteInputs+0x24>
 8007b9a:	2302      	movs	r3, #2
 8007b9c:	75fb      	strb	r3, [r7, #23]
 8007b9e:	e036      	b.n	8007c0e <eMBMasterReqReadDiscreteInputs+0x92>
    else if ( xMBMasterRunResTake( lTimeOut ) == FALSE ) eErrStatus = MB_MRE_MASTER_BUSY;
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f001 fc1d 	bl	80093e0 <xMBMasterRunResTake>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d102      	bne.n	8007bb2 <eMBMasterReqReadDiscreteInputs+0x36>
 8007bac:	2305      	movs	r3, #5
 8007bae:	75fb      	strb	r3, [r7, #23]
 8007bb0:	e02d      	b.n	8007c0e <eMBMasterReqReadDiscreteInputs+0x92>
    else
    {
		vMBMasterGetPDUSndBuf(&ucMBFrame);
 8007bb2:	f107 0310 	add.w	r3, r7, #16
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f003 f85c 	bl	800ac74 <vMBMasterGetPDUSndBuf>
		vMBMasterSetDestAddress(ucSndAddr);
 8007bbc:	7bfb      	ldrb	r3, [r7, #15]
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f001 f970 	bl	8008ea4 <vMBMasterSetDestAddress>
		ucMBFrame[MB_PDU_FUNC_OFF]                 = MB_FUNC_READ_DISCRETE_INPUTS;
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	2202      	movs	r2, #2
 8007bc8:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF]        = usDiscreteAddr >> 8;
 8007bca:	89bb      	ldrh	r3, [r7, #12]
 8007bcc:	0a1b      	lsrs	r3, r3, #8
 8007bce:	b29a      	uxth	r2, r3
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	b2d2      	uxtb	r2, r2
 8007bd6:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1]    = usDiscreteAddr;
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	3302      	adds	r3, #2
 8007bdc:	89ba      	ldrh	r2, [r7, #12]
 8007bde:	b2d2      	uxtb	r2, r2
 8007be0:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_READ_DISCCNT_OFF ]    = usNDiscreteIn >> 8;
 8007be2:	897b      	ldrh	r3, [r7, #10]
 8007be4:	0a1b      	lsrs	r3, r3, #8
 8007be6:	b29a      	uxth	r2, r3
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	3303      	adds	r3, #3
 8007bec:	b2d2      	uxtb	r2, r2
 8007bee:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_READ_DISCCNT_OFF + 1] = usNDiscreteIn;
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	3304      	adds	r3, #4
 8007bf4:	897a      	ldrh	r2, [r7, #10]
 8007bf6:	b2d2      	uxtb	r2, r2
 8007bf8:	701a      	strb	r2, [r3, #0]
		vMBMasterSetPDUSndLength( MB_PDU_SIZE_MIN + MB_PDU_REQ_READ_SIZE );
 8007bfa:	2005      	movs	r0, #5
 8007bfc:	f003 f84a 	bl	800ac94 <vMBMasterSetPDUSndLength>
		( void ) xMBMasterPortEventPost( EV_MASTER_FRAME_SENT );
 8007c00:	2008      	movs	r0, #8
 8007c02:	f001 fb57 	bl	80092b4 <xMBMasterPortEventPost>
		eErrStatus = eMBMasterWaitRequestFinish( );
 8007c06:	f001 fc5b 	bl	80094c0 <eMBMasterWaitRequestFinish>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	75fb      	strb	r3, [r7, #23]
    }
    return eErrStatus;
 8007c0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3718      	adds	r7, #24
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}

08007c18 <eMBMasterFuncReadDiscreteInputs>:

eMBException
eMBMasterFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b086      	sub	sp, #24
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usDiscreteCnt;
    UCHAR           ucNBytes;
    UCHAR          *ucMBFrame;

    eMBException    eStatus = MB_EX_NONE;
 8007c22:	2300      	movs	r3, #0
 8007c24:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, and it's read mode. This request don't need execute. */
    if ( xMBMasterRequestIsBroadcast() )
 8007c26:	f003 f851 	bl	800accc <xMBMasterRequestIsBroadcast>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d002      	beq.n	8007c36 <eMBMasterFuncReadDiscreteInputs+0x1e>
    {
    	eStatus = MB_EX_NONE;
 8007c30:	2300      	movs	r3, #0
 8007c32:	75bb      	strb	r3, [r7, #22]
 8007c34:	e056      	b.n	8007ce4 <eMBMasterFuncReadDiscreteInputs+0xcc>
    }
    else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	881b      	ldrh	r3, [r3, #0]
 8007c3a:	2b01      	cmp	r3, #1
 8007c3c:	d950      	bls.n	8007ce0 <eMBMasterFuncReadDiscreteInputs+0xc8>
    {
    	vMBMasterGetPDUSndBuf(&ucMBFrame);
 8007c3e:	f107 030c 	add.w	r3, r7, #12
 8007c42:	4618      	mov	r0, r3
 8007c44:	f003 f816 	bl	800ac74 <vMBMasterGetPDUSndBuf>
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	781b      	ldrb	r3, [r3, #0]
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	021b      	lsls	r3, r3, #8
 8007c52:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	3302      	adds	r3, #2
 8007c58:	781b      	ldrb	r3, [r3, #0]
 8007c5a:	b29a      	uxth	r2, r3
 8007c5c:	8abb      	ldrh	r3, [r7, #20]
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8007c62:	8abb      	ldrh	r3, [r7, #20]
 8007c64:	3301      	adds	r3, #1
 8007c66:	82bb      	strh	r3, [r7, #20]

        usDiscreteCnt = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_DISCCNT_OFF] << 8 );
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	3303      	adds	r3, #3
 8007c6c:	781b      	ldrb	r3, [r3, #0]
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	021b      	lsls	r3, r3, #8
 8007c72:	827b      	strh	r3, [r7, #18]
        usDiscreteCnt |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_DISCCNT_OFF + 1] );
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	3304      	adds	r3, #4
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	b29a      	uxth	r2, r3
 8007c7c:	8a7b      	ldrh	r3, [r7, #18]
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	827b      	strh	r3, [r7, #18]

        /* Test if the quantity of coils is a multiple of 8. If not last
         * byte is only partially field with unused coils set to zero. */
        if( ( usDiscreteCnt & 0x0007 ) != 0 )
 8007c82:	8a7b      	ldrh	r3, [r7, #18]
 8007c84:	f003 0307 	and.w	r3, r3, #7
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d006      	beq.n	8007c9a <eMBMasterFuncReadDiscreteInputs+0x82>
        {
        	ucNBytes = ( UCHAR )( usDiscreteCnt / 8 + 1 );
 8007c8c:	8a7b      	ldrh	r3, [r7, #18]
 8007c8e:	08db      	lsrs	r3, r3, #3
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	b2db      	uxtb	r3, r3
 8007c94:	3301      	adds	r3, #1
 8007c96:	75fb      	strb	r3, [r7, #23]
 8007c98:	e003      	b.n	8007ca2 <eMBMasterFuncReadDiscreteInputs+0x8a>
        }
        else
        {
        	ucNBytes = ( UCHAR )( usDiscreteCnt / 8 );
 8007c9a:	8a7b      	ldrh	r3, [r7, #18]
 8007c9c:	08db      	lsrs	r3, r3, #3
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	75fb      	strb	r3, [r7, #23]
        }

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
		if ((usDiscreteCnt >= 1) && ucNBytes == pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF])
 8007ca2:	8a7b      	ldrh	r3, [r7, #18]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d018      	beq.n	8007cda <eMBMasterFuncReadDiscreteInputs+0xc2>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	3301      	adds	r3, #1
 8007cac:	781b      	ldrb	r3, [r3, #0]
 8007cae:	7dfa      	ldrb	r2, [r7, #23]
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	d112      	bne.n	8007cda <eMBMasterFuncReadDiscreteInputs+0xc2>
        {
	       	/* Make callback to fill the buffer. */
			eRegStatus = eMBMasterRegDiscreteCB( &pucFrame[MB_PDU_FUNC_READ_VALUES_OFF], usRegAddress, usDiscreteCnt );
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	3302      	adds	r3, #2
 8007cb8:	8a7a      	ldrh	r2, [r7, #18]
 8007cba:	8ab9      	ldrh	r1, [r7, #20]
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f002 fa7b 	bl	800a1b8 <eMBMasterRegDiscreteCB>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	747b      	strb	r3, [r7, #17]

			/* If an error occured convert it into a Modbus exception. */
			if( eRegStatus != MB_ENOERR )
 8007cc6:	7c7b      	ldrb	r3, [r7, #17]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d00b      	beq.n	8007ce4 <eMBMasterFuncReadDiscreteInputs+0xcc>
			{
				eStatus = prveMBError2Exception( eRegStatus );
 8007ccc:	7c7b      	ldrb	r3, [r7, #17]
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f000 fd78 	bl	80087c4 <prveMBError2Exception>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	75bb      	strb	r3, [r7, #22]
			if( eRegStatus != MB_ENOERR )
 8007cd8:	e004      	b.n	8007ce4 <eMBMasterFuncReadDiscreteInputs+0xcc>
			}
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8007cda:	2303      	movs	r3, #3
 8007cdc:	75bb      	strb	r3, [r7, #22]
 8007cde:	e001      	b.n	8007ce4 <eMBMasterFuncReadDiscreteInputs+0xcc>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8007ce0:	2303      	movs	r3, #3
 8007ce2:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 8007ce4:	7dbb      	ldrb	r3, [r7, #22]
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3718      	adds	r7, #24
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}

08007cee <eMBFuncWriteHoldingRegister>:

#if MB_FUNC_WRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8007cee:	b580      	push	{r7, lr}
 8007cf0:	b084      	sub	sp, #16
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	6078      	str	r0, [r7, #4]
 8007cf6:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	881b      	ldrh	r3, [r3, #0]
 8007d00:	2b05      	cmp	r3, #5
 8007d02:	d122      	bne.n	8007d4a <eMBFuncWriteHoldingRegister+0x5c>
    {
        usRegAddress  = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	3301      	adds	r3, #1
 8007d08:	781b      	ldrb	r3, [r3, #0]
 8007d0a:	b29b      	uxth	r3, r3
 8007d0c:	021b      	lsls	r3, r3, #8
 8007d0e:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	3302      	adds	r3, #2
 8007d14:	781b      	ldrb	r3, [r3, #0]
 8007d16:	b29a      	uxth	r2, r3
 8007d18:	89bb      	ldrh	r3, [r7, #12]
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8007d1e:	89bb      	ldrh	r3, [r7, #12]
 8007d20:	3301      	adds	r3, #1
 8007d22:	81bb      	strh	r3, [r7, #12]

        /* Make callback to update the value. */
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	1cd8      	adds	r0, r3, #3
 8007d28:	89b9      	ldrh	r1, [r7, #12]
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	f001 ff01 	bl	8009b34 <eMBRegHoldingCB>
 8007d32:	4603      	mov	r3, r0
 8007d34:	72fb      	strb	r3, [r7, #11]
                                      usRegAddress, 1, MB_REG_WRITE );

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
 8007d36:	7afb      	ldrb	r3, [r7, #11]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d008      	beq.n	8007d4e <eMBFuncWriteHoldingRegister+0x60>
        {
            eStatus = prveMBError2Exception( eRegStatus );
 8007d3c:	7afb      	ldrb	r3, [r7, #11]
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f000 fd40 	bl	80087c4 <prveMBError2Exception>
 8007d44:	4603      	mov	r3, r0
 8007d46:	73fb      	strb	r3, [r7, #15]
 8007d48:	e001      	b.n	8007d4e <eMBFuncWriteHoldingRegister+0x60>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8007d4a:	2303      	movs	r3, #3
 8007d4c:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 8007d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3710      	adds	r7, #16
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <eMBFuncWriteMultipleHoldingRegister>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_HOLDING_ENABLED > 0
eMBException
eMBFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b084      	sub	sp, #16
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
 8007d62:	2300      	movs	r3, #0
 8007d64:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	881b      	ldrh	r3, [r3, #0]
 8007d6a:	2b05      	cmp	r3, #5
 8007d6c:	d946      	bls.n	8007dfc <eMBFuncWriteMultipleHoldingRegister+0xa4>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	3301      	adds	r3, #1
 8007d72:	781b      	ldrb	r3, [r3, #0]
 8007d74:	b29b      	uxth	r3, r3
 8007d76:	021b      	lsls	r3, r3, #8
 8007d78:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	3302      	adds	r3, #2
 8007d7e:	781b      	ldrb	r3, [r3, #0]
 8007d80:	b29a      	uxth	r2, r3
 8007d82:	89bb      	ldrh	r3, [r7, #12]
 8007d84:	4313      	orrs	r3, r2
 8007d86:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8007d88:	89bb      	ldrh	r3, [r7, #12]
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	81bb      	strh	r3, [r7, #12]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	3303      	adds	r3, #3
 8007d92:	781b      	ldrb	r3, [r3, #0]
 8007d94:	b29b      	uxth	r3, r3
 8007d96:	021b      	lsls	r3, r3, #8
 8007d98:	817b      	strh	r3, [r7, #10]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	3304      	adds	r3, #4
 8007d9e:	781b      	ldrb	r3, [r3, #0]
 8007da0:	b29a      	uxth	r2, r3
 8007da2:	897b      	ldrh	r3, [r7, #10]
 8007da4:	4313      	orrs	r3, r2
 8007da6:	817b      	strh	r3, [r7, #10]

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	795b      	ldrb	r3, [r3, #5]
 8007dac:	727b      	strb	r3, [r7, #9]

        if( ( usRegCount >= 1 ) &&
 8007dae:	897b      	ldrh	r3, [r7, #10]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d020      	beq.n	8007df6 <eMBFuncWriteMultipleHoldingRegister+0x9e>
 8007db4:	897b      	ldrh	r3, [r7, #10]
 8007db6:	2b78      	cmp	r3, #120	; 0x78
 8007db8:	d81d      	bhi.n	8007df6 <eMBFuncWriteMultipleHoldingRegister+0x9e>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
 8007dba:	897b      	ldrh	r3, [r7, #10]
 8007dbc:	b2db      	uxtb	r3, r3
 8007dbe:	005b      	lsls	r3, r3, #1
 8007dc0:	b2db      	uxtb	r3, r3
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
 8007dc2:	7a7a      	ldrb	r2, [r7, #9]
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d116      	bne.n	8007df6 <eMBFuncWriteMultipleHoldingRegister+0x9e>
        {
            /* Make callback to update the register values. */
            eRegStatus =
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	1d98      	adds	r0, r3, #6
 8007dcc:	897a      	ldrh	r2, [r7, #10]
 8007dce:	89b9      	ldrh	r1, [r7, #12]
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	f001 feaf 	bl	8009b34 <eMBRegHoldingCB>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	723b      	strb	r3, [r7, #8]
                                 usRegAddress, usRegCount, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8007dda:	7a3b      	ldrb	r3, [r7, #8]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d006      	beq.n	8007dee <eMBFuncWriteMultipleHoldingRegister+0x96>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8007de0:	7a3b      	ldrb	r3, [r7, #8]
 8007de2:	4618      	mov	r0, r3
 8007de4:	f000 fcee 	bl	80087c4 <prveMBError2Exception>
 8007de8:	4603      	mov	r3, r0
 8007dea:	73fb      	strb	r3, [r7, #15]
            if( eRegStatus != MB_ENOERR )
 8007dec:	e008      	b.n	8007e00 <eMBFuncWriteMultipleHoldingRegister+0xa8>
            {
                /* The response contains the function code, the starting
                 * address and the quantity of registers. We reuse the
                 * old values in the buffer because they are still valid.
                 */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	2205      	movs	r2, #5
 8007df2:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8007df4:	e004      	b.n	8007e00 <eMBFuncWriteMultipleHoldingRegister+0xa8>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8007df6:	2303      	movs	r3, #3
 8007df8:	73fb      	strb	r3, [r7, #15]
 8007dfa:	e001      	b.n	8007e00 <eMBFuncWriteMultipleHoldingRegister+0xa8>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8007dfc:	2303      	movs	r3, #3
 8007dfe:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 8007e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3710      	adds	r7, #16
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}

08007e0a <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8007e0a:	b580      	push	{r7, lr}
 8007e0c:	b086      	sub	sp, #24
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
 8007e12:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8007e14:	2300      	movs	r3, #0
 8007e16:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	881b      	ldrh	r3, [r3, #0]
 8007e1c:	2b05      	cmp	r3, #5
 8007e1e:	d15c      	bne.n	8007eda <eMBFuncReadHoldingRegister+0xd0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	3301      	adds	r3, #1
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	021b      	lsls	r3, r3, #8
 8007e2a:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	3302      	adds	r3, #2
 8007e30:	781b      	ldrb	r3, [r3, #0]
 8007e32:	b29a      	uxth	r2, r3
 8007e34:	8abb      	ldrh	r3, [r7, #20]
 8007e36:	4313      	orrs	r3, r2
 8007e38:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8007e3a:	8abb      	ldrh	r3, [r7, #20]
 8007e3c:	3301      	adds	r3, #1
 8007e3e:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	3303      	adds	r3, #3
 8007e44:	781b      	ldrb	r3, [r3, #0]
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	021b      	lsls	r3, r3, #8
 8007e4a:	827b      	strh	r3, [r7, #18]
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	3304      	adds	r3, #4
 8007e50:	781b      	ldrb	r3, [r3, #0]
 8007e52:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
 8007e54:	8a7b      	ldrh	r3, [r7, #18]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d03c      	beq.n	8007ed4 <eMBFuncReadHoldingRegister+0xca>
 8007e5a:	8a7b      	ldrh	r3, [r7, #18]
 8007e5c:	2b7d      	cmp	r3, #125	; 0x7d
 8007e5e:	d839      	bhi.n	8007ed4 <eMBFuncReadHoldingRegister+0xca>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	2200      	movs	r2, #0
 8007e68:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	1c5a      	adds	r2, r3, #1
 8007e6e:	60fa      	str	r2, [r7, #12]
 8007e70:	2203      	movs	r2, #3
 8007e72:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	881b      	ldrh	r3, [r3, #0]
 8007e78:	3301      	adds	r3, #1
 8007e7a:	b29a      	uxth	r2, r3
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 8007e80:	8a7b      	ldrh	r3, [r7, #18]
 8007e82:	b2da      	uxtb	r2, r3
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	1c59      	adds	r1, r3, #1
 8007e88:	60f9      	str	r1, [r7, #12]
 8007e8a:	0052      	lsls	r2, r2, #1
 8007e8c:	b2d2      	uxtb	r2, r2
 8007e8e:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	881b      	ldrh	r3, [r3, #0]
 8007e94:	3301      	adds	r3, #1
 8007e96:	b29a      	uxth	r2, r3
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	801a      	strh	r2, [r3, #0]

            /* Make callback to fill the buffer. */
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 8007e9c:	8a7a      	ldrh	r2, [r7, #18]
 8007e9e:	8ab9      	ldrh	r1, [r7, #20]
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	68f8      	ldr	r0, [r7, #12]
 8007ea4:	f001 fe46 	bl	8009b34 <eMBRegHoldingCB>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	72fb      	strb	r3, [r7, #11]
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8007eac:	7afb      	ldrb	r3, [r7, #11]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d006      	beq.n	8007ec0 <eMBFuncReadHoldingRegister+0xb6>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8007eb2:	7afb      	ldrb	r3, [r7, #11]
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f000 fc85 	bl	80087c4 <prveMBError2Exception>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 8007ebe:	e00e      	b.n	8007ede <eMBFuncReadHoldingRegister+0xd4>
            }
            else
            {
                *usLen += usRegCount * 2;
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	881a      	ldrh	r2, [r3, #0]
 8007ec4:	8a7b      	ldrh	r3, [r7, #18]
 8007ec6:	005b      	lsls	r3, r3, #1
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	4413      	add	r3, r2
 8007ecc:	b29a      	uxth	r2, r3
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8007ed2:	e004      	b.n	8007ede <eMBFuncReadHoldingRegister+0xd4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8007ed4:	2303      	movs	r3, #3
 8007ed6:	75fb      	strb	r3, [r7, #23]
 8007ed8:	e001      	b.n	8007ede <eMBFuncReadHoldingRegister+0xd4>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8007eda:	2303      	movs	r3, #3
 8007edc:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 8007ede:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3718      	adds	r7, #24
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <eMBFuncReadWriteMultipleHoldingRegister>:

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b086      	sub	sp, #24
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	6039      	str	r1, [r7, #0]
    USHORT          usRegWriteAddress;
    USHORT          usRegWriteCount;
    UCHAR           ucRegWriteByteCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	881b      	ldrh	r3, [r3, #0]
 8007efa:	2b09      	cmp	r3, #9
 8007efc:	f240 8099 	bls.w	8008032 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	3301      	adds	r3, #1
 8007f04:	781b      	ldrb	r3, [r3, #0]
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	021b      	lsls	r3, r3, #8
 8007f0a:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	3302      	adds	r3, #2
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	b29a      	uxth	r2, r3
 8007f14:	8abb      	ldrh	r3, [r7, #20]
 8007f16:	4313      	orrs	r3, r2
 8007f18:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress++;
 8007f1a:	8abb      	ldrh	r3, [r7, #20]
 8007f1c:	3301      	adds	r3, #1
 8007f1e:	82bb      	strh	r3, [r7, #20]

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	3303      	adds	r3, #3
 8007f24:	781b      	ldrb	r3, [r3, #0]
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	021b      	lsls	r3, r3, #8
 8007f2a:	827b      	strh	r3, [r7, #18]
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	3304      	adds	r3, #4
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	b29a      	uxth	r2, r3
 8007f34:	8a7b      	ldrh	r3, [r7, #18]
 8007f36:	4313      	orrs	r3, r2
 8007f38:	827b      	strh	r3, [r7, #18]

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	3305      	adds	r3, #5
 8007f3e:	781b      	ldrb	r3, [r3, #0]
 8007f40:	b29b      	uxth	r3, r3
 8007f42:	021b      	lsls	r3, r3, #8
 8007f44:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	3306      	adds	r3, #6
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	b29a      	uxth	r2, r3
 8007f4e:	8a3b      	ldrh	r3, [r7, #16]
 8007f50:	4313      	orrs	r3, r2
 8007f52:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress++;
 8007f54:	8a3b      	ldrh	r3, [r7, #16]
 8007f56:	3301      	adds	r3, #1
 8007f58:	823b      	strh	r3, [r7, #16]

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	3307      	adds	r3, #7
 8007f5e:	781b      	ldrb	r3, [r3, #0]
 8007f60:	b29b      	uxth	r3, r3
 8007f62:	021b      	lsls	r3, r3, #8
 8007f64:	81fb      	strh	r3, [r7, #14]
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	3308      	adds	r3, #8
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	b29a      	uxth	r2, r3
 8007f6e:	89fb      	ldrh	r3, [r7, #14]
 8007f70:	4313      	orrs	r3, r2
 8007f72:	81fb      	strh	r3, [r7, #14]

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	7a5b      	ldrb	r3, [r3, #9]
 8007f78:	737b      	strb	r3, [r7, #13]

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 8007f7a:	8a7b      	ldrh	r3, [r7, #18]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d056      	beq.n	800802e <eMBFuncReadWriteMultipleHoldingRegister+0x146>
 8007f80:	8a7b      	ldrh	r3, [r7, #18]
 8007f82:	2b7d      	cmp	r3, #125	; 0x7d
 8007f84:	d853      	bhi.n	800802e <eMBFuncReadWriteMultipleHoldingRegister+0x146>
 8007f86:	89fb      	ldrh	r3, [r7, #14]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d050      	beq.n	800802e <eMBFuncReadWriteMultipleHoldingRegister+0x146>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 8007f8c:	89fb      	ldrh	r3, [r7, #14]
 8007f8e:	2b79      	cmp	r3, #121	; 0x79
 8007f90:	d84d      	bhi.n	800802e <eMBFuncReadWriteMultipleHoldingRegister+0x146>
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
 8007f92:	89fb      	ldrh	r3, [r7, #14]
 8007f94:	005a      	lsls	r2, r3, #1
 8007f96:	7b7b      	ldrb	r3, [r7, #13]
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d148      	bne.n	800802e <eMBFuncReadWriteMultipleHoldingRegister+0x146>
        {
            /* Make callback to update the register values. */
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f103 000a 	add.w	r0, r3, #10
 8007fa2:	89fa      	ldrh	r2, [r7, #14]
 8007fa4:	8a39      	ldrh	r1, [r7, #16]
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	f001 fdc4 	bl	8009b34 <eMBRegHoldingCB>
 8007fac:	4603      	mov	r3, r0
 8007fae:	75bb      	strb	r3, [r7, #22]
                                          usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );

            if( eRegStatus == MB_ENOERR )
 8007fb0:	7dbb      	ldrb	r3, [r7, #22]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d131      	bne.n	800801a <eMBFuncReadWriteMultipleHoldingRegister+0x132>
            {
                /* Set the current PDU data pointer to the beginning. */
                pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	60bb      	str	r3, [r7, #8]
                *usLen = MB_PDU_FUNC_OFF;
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	801a      	strh	r2, [r3, #0]

                /* First byte contains the function code. */
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	1c5a      	adds	r2, r3, #1
 8007fc4:	60ba      	str	r2, [r7, #8]
 8007fc6:	2217      	movs	r2, #23
 8007fc8:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	881b      	ldrh	r3, [r3, #0]
 8007fce:	3301      	adds	r3, #1
 8007fd0:	b29a      	uxth	r2, r3
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	801a      	strh	r2, [r3, #0]

                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 8007fd6:	8a7b      	ldrh	r3, [r7, #18]
 8007fd8:	b2da      	uxtb	r2, r3
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	1c59      	adds	r1, r3, #1
 8007fde:	60b9      	str	r1, [r7, #8]
 8007fe0:	0052      	lsls	r2, r2, #1
 8007fe2:	b2d2      	uxtb	r2, r2
 8007fe4:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	881b      	ldrh	r3, [r3, #0]
 8007fea:	3301      	adds	r3, #1
 8007fec:	b29a      	uxth	r2, r3
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	801a      	strh	r2, [r3, #0]

                /* Make the read callback. */
                eRegStatus =
                    eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
 8007ff2:	8a7a      	ldrh	r2, [r7, #18]
 8007ff4:	8ab9      	ldrh	r1, [r7, #20]
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	68b8      	ldr	r0, [r7, #8]
 8007ffa:	f001 fd9b 	bl	8009b34 <eMBRegHoldingCB>
 8007ffe:	4603      	mov	r3, r0
 8008000:	75bb      	strb	r3, [r7, #22]
                if( eRegStatus == MB_ENOERR )
 8008002:	7dbb      	ldrb	r3, [r7, #22]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d108      	bne.n	800801a <eMBFuncReadWriteMultipleHoldingRegister+0x132>
                {
                    *usLen += 2 * usRegReadCount;
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	881a      	ldrh	r2, [r3, #0]
 800800c:	8a7b      	ldrh	r3, [r7, #18]
 800800e:	005b      	lsls	r3, r3, #1
 8008010:	b29b      	uxth	r3, r3
 8008012:	4413      	add	r3, r2
 8008014:	b29a      	uxth	r2, r3
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	801a      	strh	r2, [r3, #0]
                }
            }
            if( eRegStatus != MB_ENOERR )
 800801a:	7dbb      	ldrb	r3, [r7, #22]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d008      	beq.n	8008032 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8008020:	7dbb      	ldrb	r3, [r7, #22]
 8008022:	4618      	mov	r0, r3
 8008024:	f000 fbce 	bl	80087c4 <prveMBError2Exception>
 8008028:	4603      	mov	r3, r0
 800802a:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 800802c:	e001      	b.n	8008032 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800802e:	2303      	movs	r3, #3
 8008030:	75fb      	strb	r3, [r7, #23]
        }
    }
    return eStatus;
 8008032:	7dfb      	ldrb	r3, [r7, #23]
}
 8008034:	4618      	mov	r0, r3
 8008036:	3718      	adds	r7, #24
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <eMBMasterFuncWriteHoldingRegister>:
    return eErrStatus;
}

eMBException
eMBMasterFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b084      	sub	sp, #16
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
 8008046:	2300      	movs	r3, #0
 8008048:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_SIZE_MIN + MB_PDU_FUNC_WRITE_SIZE ) )
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	881b      	ldrh	r3, [r3, #0]
 800804e:	2b05      	cmp	r3, #5
 8008050:	d122      	bne.n	8008098 <eMBMasterFuncWriteHoldingRegister+0x5c>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	3301      	adds	r3, #1
 8008056:	781b      	ldrb	r3, [r3, #0]
 8008058:	b29b      	uxth	r3, r3
 800805a:	021b      	lsls	r3, r3, #8
 800805c:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	3302      	adds	r3, #2
 8008062:	781b      	ldrb	r3, [r3, #0]
 8008064:	b29a      	uxth	r2, r3
 8008066:	89bb      	ldrh	r3, [r7, #12]
 8008068:	4313      	orrs	r3, r2
 800806a:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 800806c:	89bb      	ldrh	r3, [r7, #12]
 800806e:	3301      	adds	r3, #1
 8008070:	81bb      	strh	r3, [r7, #12]

        /* Make callback to update the value. */
        eRegStatus = eMBMasterRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	1cd8      	adds	r0, r3, #3
 8008076:	89b9      	ldrh	r1, [r7, #12]
 8008078:	2301      	movs	r3, #1
 800807a:	2201      	movs	r2, #1
 800807c:	f001 ff5e 	bl	8009f3c <eMBMasterRegHoldingCB>
 8008080:	4603      	mov	r3, r0
 8008082:	72fb      	strb	r3, [r7, #11]
                                      usRegAddress, 1, MB_REG_WRITE );

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
 8008084:	7afb      	ldrb	r3, [r7, #11]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d008      	beq.n	800809c <eMBMasterFuncWriteHoldingRegister+0x60>
        {
            eStatus = prveMBError2Exception( eRegStatus );
 800808a:	7afb      	ldrb	r3, [r7, #11]
 800808c:	4618      	mov	r0, r3
 800808e:	f000 fb99 	bl	80087c4 <prveMBError2Exception>
 8008092:	4603      	mov	r3, r0
 8008094:	73fb      	strb	r3, [r7, #15]
 8008096:	e001      	b.n	800809c <eMBMasterFuncWriteHoldingRegister+0x60>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8008098:	2303      	movs	r3, #3
 800809a:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 800809c:	7bfb      	ldrb	r3, [r7, #15]
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3710      	adds	r7, #16
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}

080080a6 <eMBMasterReqWriteMultipleHoldingRegister>:
eMBMasterReqWriteMultipleHoldingRegister( 	UCHAR ucSndAddr,
											USHORT usRegAddr,
											USHORT usNRegs,
											USHORT * pusDataBuffer,
											LONG lTimeOut )
{
 80080a6:	b580      	push	{r7, lr}
 80080a8:	b086      	sub	sp, #24
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	607b      	str	r3, [r7, #4]
 80080ae:	4603      	mov	r3, r0
 80080b0:	73fb      	strb	r3, [r7, #15]
 80080b2:	460b      	mov	r3, r1
 80080b4:	81bb      	strh	r3, [r7, #12]
 80080b6:	4613      	mov	r3, r2
 80080b8:	817b      	strh	r3, [r7, #10]
    UCHAR                 *ucMBFrame;
    USHORT                 usRegIndex = 0;
 80080ba:	2300      	movs	r3, #0
 80080bc:	82fb      	strh	r3, [r7, #22]
    eMBMasterReqErrCode    eErrStatus = MB_MRE_NO_ERR;
 80080be:	2300      	movs	r3, #0
 80080c0:	757b      	strb	r3, [r7, #21]

    if ( ucSndAddr > MB_MASTER_TOTAL_SLAVE_NUM ) eErrStatus = MB_MRE_ILL_ARG;
 80080c2:	7bfb      	ldrb	r3, [r7, #15]
 80080c4:	2b10      	cmp	r3, #16
 80080c6:	d902      	bls.n	80080ce <eMBMasterReqWriteMultipleHoldingRegister+0x28>
 80080c8:	2302      	movs	r3, #2
 80080ca:	757b      	strb	r3, [r7, #21]
 80080cc:	e062      	b.n	8008194 <eMBMasterReqWriteMultipleHoldingRegister+0xee>
    else if ( xMBMasterRunResTake( lTimeOut ) == FALSE ) eErrStatus = MB_MRE_MASTER_BUSY;
 80080ce:	6a38      	ldr	r0, [r7, #32]
 80080d0:	f001 f986 	bl	80093e0 <xMBMasterRunResTake>
 80080d4:	4603      	mov	r3, r0
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d102      	bne.n	80080e0 <eMBMasterReqWriteMultipleHoldingRegister+0x3a>
 80080da:	2305      	movs	r3, #5
 80080dc:	757b      	strb	r3, [r7, #21]
 80080de:	e059      	b.n	8008194 <eMBMasterReqWriteMultipleHoldingRegister+0xee>
    else
    {
		vMBMasterGetPDUSndBuf(&ucMBFrame);
 80080e0:	f107 0310 	add.w	r3, r7, #16
 80080e4:	4618      	mov	r0, r3
 80080e6:	f002 fdc5 	bl	800ac74 <vMBMasterGetPDUSndBuf>
		vMBMasterSetDestAddress(ucSndAddr);
 80080ea:	7bfb      	ldrb	r3, [r7, #15]
 80080ec:	4618      	mov	r0, r3
 80080ee:	f000 fed9 	bl	8008ea4 <vMBMasterSetDestAddress>
		ucMBFrame[MB_PDU_FUNC_OFF]                     = MB_FUNC_WRITE_MULTIPLE_REGISTERS;
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	2210      	movs	r2, #16
 80080f6:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_WRITE_MUL_ADDR_OFF]       = usRegAddr >> 8;
 80080f8:	89bb      	ldrh	r3, [r7, #12]
 80080fa:	0a1b      	lsrs	r3, r3, #8
 80080fc:	b29a      	uxth	r2, r3
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	3301      	adds	r3, #1
 8008102:	b2d2      	uxtb	r2, r2
 8008104:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_WRITE_MUL_ADDR_OFF + 1]   = usRegAddr;
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	3302      	adds	r3, #2
 800810a:	89ba      	ldrh	r2, [r7, #12]
 800810c:	b2d2      	uxtb	r2, r2
 800810e:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_WRITE_MUL_REGCNT_OFF]     = usNRegs >> 8;
 8008110:	897b      	ldrh	r3, [r7, #10]
 8008112:	0a1b      	lsrs	r3, r3, #8
 8008114:	b29a      	uxth	r2, r3
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	3303      	adds	r3, #3
 800811a:	b2d2      	uxtb	r2, r2
 800811c:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_WRITE_MUL_REGCNT_OFF + 1] = usNRegs ;
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	3304      	adds	r3, #4
 8008122:	897a      	ldrh	r2, [r7, #10]
 8008124:	b2d2      	uxtb	r2, r2
 8008126:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_WRITE_MUL_BYTECNT_OFF]    = usNRegs * 2;
 8008128:	897b      	ldrh	r3, [r7, #10]
 800812a:	b2da      	uxtb	r2, r3
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	3305      	adds	r3, #5
 8008130:	0052      	lsls	r2, r2, #1
 8008132:	b2d2      	uxtb	r2, r2
 8008134:	701a      	strb	r2, [r3, #0]
		ucMBFrame += MB_PDU_REQ_WRITE_MUL_VALUES_OFF;
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	3306      	adds	r3, #6
 800813a:	613b      	str	r3, [r7, #16]
		while( usNRegs > usRegIndex)
 800813c:	e017      	b.n	800816e <eMBMasterReqWriteMultipleHoldingRegister+0xc8>
		{
			*ucMBFrame++ = pusDataBuffer[usRegIndex] >> 8;
 800813e:	8afb      	ldrh	r3, [r7, #22]
 8008140:	005b      	lsls	r3, r3, #1
 8008142:	687a      	ldr	r2, [r7, #4]
 8008144:	4413      	add	r3, r2
 8008146:	881b      	ldrh	r3, [r3, #0]
 8008148:	0a1b      	lsrs	r3, r3, #8
 800814a:	b299      	uxth	r1, r3
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	1c5a      	adds	r2, r3, #1
 8008150:	613a      	str	r2, [r7, #16]
 8008152:	b2ca      	uxtb	r2, r1
 8008154:	701a      	strb	r2, [r3, #0]
			*ucMBFrame++ = pusDataBuffer[usRegIndex++] ;
 8008156:	8afb      	ldrh	r3, [r7, #22]
 8008158:	1c5a      	adds	r2, r3, #1
 800815a:	82fa      	strh	r2, [r7, #22]
 800815c:	005b      	lsls	r3, r3, #1
 800815e:	687a      	ldr	r2, [r7, #4]
 8008160:	4413      	add	r3, r2
 8008162:	8819      	ldrh	r1, [r3, #0]
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	1c5a      	adds	r2, r3, #1
 8008168:	613a      	str	r2, [r7, #16]
 800816a:	b2ca      	uxtb	r2, r1
 800816c:	701a      	strb	r2, [r3, #0]
		while( usNRegs > usRegIndex)
 800816e:	897a      	ldrh	r2, [r7, #10]
 8008170:	8afb      	ldrh	r3, [r7, #22]
 8008172:	429a      	cmp	r2, r3
 8008174:	d8e3      	bhi.n	800813e <eMBMasterReqWriteMultipleHoldingRegister+0x98>
		}
		vMBMasterSetPDUSndLength( MB_PDU_SIZE_MIN + MB_PDU_REQ_WRITE_MUL_SIZE_MIN + 2*usNRegs );
 8008176:	897b      	ldrh	r3, [r7, #10]
 8008178:	3303      	adds	r3, #3
 800817a:	b29b      	uxth	r3, r3
 800817c:	005b      	lsls	r3, r3, #1
 800817e:	b29b      	uxth	r3, r3
 8008180:	4618      	mov	r0, r3
 8008182:	f002 fd87 	bl	800ac94 <vMBMasterSetPDUSndLength>
		( void ) xMBMasterPortEventPost( EV_MASTER_FRAME_SENT );
 8008186:	2008      	movs	r0, #8
 8008188:	f001 f894 	bl	80092b4 <xMBMasterPortEventPost>
		eErrStatus = eMBMasterWaitRequestFinish( );
 800818c:	f001 f998 	bl	80094c0 <eMBMasterWaitRequestFinish>
 8008190:	4603      	mov	r3, r0
 8008192:	757b      	strb	r3, [r7, #21]
    }
    return eErrStatus;
 8008194:	7d7b      	ldrb	r3, [r7, #21]
}
 8008196:	4618      	mov	r0, r3
 8008198:	3718      	adds	r7, #24
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}

0800819e <eMBMasterFuncWriteMultipleHoldingRegister>:

eMBException
eMBMasterFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800819e:	b580      	push	{r7, lr}
 80081a0:	b086      	sub	sp, #24
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	6078      	str	r0, [r7, #4]
 80081a6:	6039      	str	r1, [r7, #0]
    UCHAR          *ucMBFrame;
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
 80081a8:	2300      	movs	r3, #0
 80081aa:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, the *usLen is not need check. */
    if( ( *usLen == MB_PDU_SIZE_MIN + MB_PDU_FUNC_WRITE_MUL_SIZE ) || xMBMasterRequestIsBroadcast() )
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	881b      	ldrh	r3, [r3, #0]
 80081b0:	2b05      	cmp	r3, #5
 80081b2:	d004      	beq.n	80081be <eMBMasterFuncWriteMultipleHoldingRegister+0x20>
 80081b4:	f002 fd8a 	bl	800accc <xMBMasterRequestIsBroadcast>
 80081b8:	4603      	mov	r3, r0
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d03f      	beq.n	800823e <eMBMasterFuncWriteMultipleHoldingRegister+0xa0>
    {
		vMBMasterGetPDUSndBuf(&ucMBFrame);
 80081be:	f107 030c 	add.w	r3, r7, #12
 80081c2:	4618      	mov	r0, r3
 80081c4:	f002 fd56 	bl	800ac74 <vMBMasterGetPDUSndBuf>
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_WRITE_MUL_ADDR_OFF] << 8 );
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	3301      	adds	r3, #1
 80081cc:	781b      	ldrb	r3, [r3, #0]
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	021b      	lsls	r3, r3, #8
 80081d2:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_WRITE_MUL_ADDR_OFF + 1] );
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	3302      	adds	r3, #2
 80081d8:	781b      	ldrb	r3, [r3, #0]
 80081da:	b29a      	uxth	r2, r3
 80081dc:	8abb      	ldrh	r3, [r7, #20]
 80081de:	4313      	orrs	r3, r2
 80081e0:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 80081e2:	8abb      	ldrh	r3, [r7, #20]
 80081e4:	3301      	adds	r3, #1
 80081e6:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_WRITE_MUL_REGCNT_OFF] << 8 );
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	3303      	adds	r3, #3
 80081ec:	781b      	ldrb	r3, [r3, #0]
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	021b      	lsls	r3, r3, #8
 80081f2:	827b      	strh	r3, [r7, #18]
        usRegCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_WRITE_MUL_REGCNT_OFF + 1] );
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	3304      	adds	r3, #4
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	b29a      	uxth	r2, r3
 80081fc:	8a7b      	ldrh	r3, [r7, #18]
 80081fe:	4313      	orrs	r3, r2
 8008200:	827b      	strh	r3, [r7, #18]

        ucRegByteCount = ucMBFrame[MB_PDU_REQ_WRITE_MUL_BYTECNT_OFF];
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	795b      	ldrb	r3, [r3, #5]
 8008206:	747b      	strb	r3, [r7, #17]

        if( ucRegByteCount == 2 * usRegCount )
 8008208:	7c7a      	ldrb	r2, [r7, #17]
 800820a:	8a7b      	ldrh	r3, [r7, #18]
 800820c:	005b      	lsls	r3, r3, #1
 800820e:	429a      	cmp	r2, r3
 8008210:	d112      	bne.n	8008238 <eMBMasterFuncWriteMultipleHoldingRegister+0x9a>
        {
            /* Make callback to update the register values. */
            eRegStatus =
                eMBMasterRegHoldingCB( &ucMBFrame[MB_PDU_REQ_WRITE_MUL_VALUES_OFF],
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	1d98      	adds	r0, r3, #6
 8008216:	8a7a      	ldrh	r2, [r7, #18]
 8008218:	8ab9      	ldrh	r1, [r7, #20]
 800821a:	2301      	movs	r3, #1
 800821c:	f001 fe8e 	bl	8009f3c <eMBMasterRegHoldingCB>
 8008220:	4603      	mov	r3, r0
 8008222:	743b      	strb	r3, [r7, #16]
                                 usRegAddress, usRegCount, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8008224:	7c3b      	ldrb	r3, [r7, #16]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d00c      	beq.n	8008244 <eMBMasterFuncWriteMultipleHoldingRegister+0xa6>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800822a:	7c3b      	ldrb	r3, [r7, #16]
 800822c:	4618      	mov	r0, r3
 800822e:	f000 fac9 	bl	80087c4 <prveMBError2Exception>
 8008232:	4603      	mov	r3, r0
 8008234:	75fb      	strb	r3, [r7, #23]
        if( ucRegByteCount == 2 * usRegCount )
 8008236:	e005      	b.n	8008244 <eMBMasterFuncWriteMultipleHoldingRegister+0xa6>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8008238:	2303      	movs	r3, #3
 800823a:	75fb      	strb	r3, [r7, #23]
        if( ucRegByteCount == 2 * usRegCount )
 800823c:	e002      	b.n	8008244 <eMBMasterFuncWriteMultipleHoldingRegister+0xa6>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800823e:	2303      	movs	r3, #3
 8008240:	75fb      	strb	r3, [r7, #23]
 8008242:	e000      	b.n	8008246 <eMBMasterFuncWriteMultipleHoldingRegister+0xa8>
        if( ucRegByteCount == 2 * usRegCount )
 8008244:	bf00      	nop
    }
    return eStatus;
 8008246:	7dfb      	ldrb	r3, [r7, #23]
}
 8008248:	4618      	mov	r0, r3
 800824a:	3718      	adds	r7, #24
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}

08008250 <eMBMasterFuncReadHoldingRegister>:
    return eErrStatus;
}

eMBException
eMBMasterFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b086      	sub	sp, #24
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	6039      	str	r1, [r7, #0]
    UCHAR          *ucMBFrame;
    USHORT          usRegAddress;
    USHORT          usRegCount;

    eMBException    eStatus = MB_EX_NONE;
 800825a:	2300      	movs	r3, #0
 800825c:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, and it's read mode. This request don't need execute. */
    if ( xMBMasterRequestIsBroadcast() )
 800825e:	f002 fd35 	bl	800accc <xMBMasterRequestIsBroadcast>
 8008262:	4603      	mov	r3, r0
 8008264:	2b00      	cmp	r3, #0
 8008266:	d002      	beq.n	800826e <eMBMasterFuncReadHoldingRegister+0x1e>
    {
    	eStatus = MB_EX_NONE;
 8008268:	2300      	movs	r3, #0
 800826a:	75fb      	strb	r3, [r7, #23]
 800826c:	e047      	b.n	80082fe <eMBMasterFuncReadHoldingRegister+0xae>
    }
    else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	881b      	ldrh	r3, [r3, #0]
 8008272:	2b01      	cmp	r3, #1
 8008274:	d941      	bls.n	80082fa <eMBMasterFuncReadHoldingRegister+0xaa>
    {
		vMBMasterGetPDUSndBuf(&ucMBFrame);
 8008276:	f107 030c 	add.w	r3, r7, #12
 800827a:	4618      	mov	r0, r3
 800827c:	f002 fcfa 	bl	800ac74 <vMBMasterGetPDUSndBuf>
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	3301      	adds	r3, #1
 8008284:	781b      	ldrb	r3, [r3, #0]
 8008286:	b29b      	uxth	r3, r3
 8008288:	021b      	lsls	r3, r3, #8
 800828a:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	3302      	adds	r3, #2
 8008290:	781b      	ldrb	r3, [r3, #0]
 8008292:	b29a      	uxth	r2, r3
 8008294:	8abb      	ldrh	r3, [r7, #20]
 8008296:	4313      	orrs	r3, r2
 8008298:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 800829a:	8abb      	ldrh	r3, [r7, #20]
 800829c:	3301      	adds	r3, #1
 800829e:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF] << 8 );
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	3303      	adds	r3, #3
 80082a4:	781b      	ldrb	r3, [r3, #0]
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	021b      	lsls	r3, r3, #8
 80082aa:	827b      	strh	r3, [r7, #18]
        usRegCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF + 1] );
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	3304      	adds	r3, #4
 80082b0:	781b      	ldrb	r3, [r3, #0]
 80082b2:	b29a      	uxth	r2, r3
 80082b4:	8a7b      	ldrh	r3, [r7, #18]
 80082b6:	4313      	orrs	r3, r2
 80082b8:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception.
         */
        if( ( usRegCount >= 1 ) && ( 2 * usRegCount == pucFrame[MB_PDU_FUNC_READ_BYTECNT_OFF] ) )
 80082ba:	8a7b      	ldrh	r3, [r7, #18]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d019      	beq.n	80082f4 <eMBMasterFuncReadHoldingRegister+0xa4>
 80082c0:	8a7b      	ldrh	r3, [r7, #18]
 80082c2:	005b      	lsls	r3, r3, #1
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	3201      	adds	r2, #1
 80082c8:	7812      	ldrb	r2, [r2, #0]
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d112      	bne.n	80082f4 <eMBMasterFuncReadHoldingRegister+0xa4>
        {
            /* Make callback to fill the buffer. */
            eRegStatus = eMBMasterRegHoldingCB( &pucFrame[MB_PDU_FUNC_READ_VALUES_OFF], usRegAddress, usRegCount, MB_REG_READ );
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	1c98      	adds	r0, r3, #2
 80082d2:	8a7a      	ldrh	r2, [r7, #18]
 80082d4:	8ab9      	ldrh	r1, [r7, #20]
 80082d6:	2300      	movs	r3, #0
 80082d8:	f001 fe30 	bl	8009f3c <eMBMasterRegHoldingCB>
 80082dc:	4603      	mov	r3, r0
 80082de:	747b      	strb	r3, [r7, #17]
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80082e0:	7c7b      	ldrb	r3, [r7, #17]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d00b      	beq.n	80082fe <eMBMasterFuncReadHoldingRegister+0xae>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 80082e6:	7c7b      	ldrb	r3, [r7, #17]
 80082e8:	4618      	mov	r0, r3
 80082ea:	f000 fa6b 	bl	80087c4 <prveMBError2Exception>
 80082ee:	4603      	mov	r3, r0
 80082f0:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 80082f2:	e004      	b.n	80082fe <eMBMasterFuncReadHoldingRegister+0xae>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80082f4:	2303      	movs	r3, #3
 80082f6:	75fb      	strb	r3, [r7, #23]
 80082f8:	e001      	b.n	80082fe <eMBMasterFuncReadHoldingRegister+0xae>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80082fa:	2303      	movs	r3, #3
 80082fc:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 80082fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008300:	4618      	mov	r0, r3
 8008302:	3718      	adds	r7, #24
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <eMBMasterFuncReadWriteMultipleHoldingRegister>:
    return eErrStatus;
}

eMBException
eMBMasterFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b086      	sub	sp, #24
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	6039      	str	r1, [r7, #0]
    USHORT          usRegReadCount;
    USHORT          usRegWriteAddress;
    USHORT          usRegWriteCount;
    UCHAR          *ucMBFrame;

    eMBException    eStatus = MB_EX_NONE;
 8008312:	2300      	movs	r3, #0
 8008314:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, and it's read mode. This request don't need execute. */
    if ( xMBMasterRequestIsBroadcast() )
 8008316:	f002 fcd9 	bl	800accc <xMBMasterRequestIsBroadcast>
 800831a:	4603      	mov	r3, r0
 800831c:	2b00      	cmp	r3, #0
 800831e:	d002      	beq.n	8008326 <eMBMasterFuncReadWriteMultipleHoldingRegister+0x1e>
    {
    	eStatus = MB_EX_NONE;
 8008320:	2300      	movs	r3, #0
 8008322:	75fb      	strb	r3, [r7, #23]
 8008324:	e06b      	b.n	80083fe <eMBMasterFuncReadWriteMultipleHoldingRegister+0xf6>
    }
    else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READWRITE_SIZE_MIN )
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	881b      	ldrh	r3, [r3, #0]
 800832a:	2b01      	cmp	r3, #1
 800832c:	d967      	bls.n	80083fe <eMBMasterFuncReadWriteMultipleHoldingRegister+0xf6>
    {
    	vMBMasterGetPDUSndBuf(&ucMBFrame);
 800832e:	f107 0308 	add.w	r3, r7, #8
 8008332:	4618      	mov	r0, r3
 8008334:	f002 fc9e 	bl	800ac74 <vMBMasterGetPDUSndBuf>
        usRegReadAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_ADDR_OFF] << 8U );
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	3301      	adds	r3, #1
 800833c:	781b      	ldrb	r3, [r3, #0]
 800833e:	b29b      	uxth	r3, r3
 8008340:	021b      	lsls	r3, r3, #8
 8008342:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_ADDR_OFF + 1] );
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	3302      	adds	r3, #2
 8008348:	781b      	ldrb	r3, [r3, #0]
 800834a:	b29a      	uxth	r2, r3
 800834c:	8abb      	ldrh	r3, [r7, #20]
 800834e:	4313      	orrs	r3, r2
 8008350:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress++;
 8008352:	8abb      	ldrh	r3, [r7, #20]
 8008354:	3301      	adds	r3, #1
 8008356:	82bb      	strh	r3, [r7, #20]

        usRegReadCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_REGCNT_OFF] << 8U );
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	3303      	adds	r3, #3
 800835c:	781b      	ldrb	r3, [r3, #0]
 800835e:	b29b      	uxth	r3, r3
 8008360:	021b      	lsls	r3, r3, #8
 8008362:	827b      	strh	r3, [r7, #18]
        usRegReadCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_REGCNT_OFF + 1] );
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	3304      	adds	r3, #4
 8008368:	781b      	ldrb	r3, [r3, #0]
 800836a:	b29a      	uxth	r2, r3
 800836c:	8a7b      	ldrh	r3, [r7, #18]
 800836e:	4313      	orrs	r3, r2
 8008370:	827b      	strh	r3, [r7, #18]

        usRegWriteAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_ADDR_OFF] << 8U );
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	3305      	adds	r3, #5
 8008376:	781b      	ldrb	r3, [r3, #0]
 8008378:	b29b      	uxth	r3, r3
 800837a:	021b      	lsls	r3, r3, #8
 800837c:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_ADDR_OFF + 1] );
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	3306      	adds	r3, #6
 8008382:	781b      	ldrb	r3, [r3, #0]
 8008384:	b29a      	uxth	r2, r3
 8008386:	8a3b      	ldrh	r3, [r7, #16]
 8008388:	4313      	orrs	r3, r2
 800838a:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress++;
 800838c:	8a3b      	ldrh	r3, [r7, #16]
 800838e:	3301      	adds	r3, #1
 8008390:	823b      	strh	r3, [r7, #16]

        usRegWriteCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_REGCNT_OFF] << 8U );
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	3307      	adds	r3, #7
 8008396:	781b      	ldrb	r3, [r3, #0]
 8008398:	b29b      	uxth	r3, r3
 800839a:	021b      	lsls	r3, r3, #8
 800839c:	81fb      	strh	r3, [r7, #14]
        usRegWriteCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_REGCNT_OFF + 1] );
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	3308      	adds	r3, #8
 80083a2:	781b      	ldrb	r3, [r3, #0]
 80083a4:	b29a      	uxth	r2, r3
 80083a6:	89fb      	ldrh	r3, [r7, #14]
 80083a8:	4313      	orrs	r3, r2
 80083aa:	81fb      	strh	r3, [r7, #14]

        if( ( 2 * usRegReadCount ) == pucFrame[MB_PDU_FUNC_READWRITE_READ_BYTECNT_OFF] )
 80083ac:	8a7b      	ldrh	r3, [r7, #18]
 80083ae:	005b      	lsls	r3, r3, #1
 80083b0:	687a      	ldr	r2, [r7, #4]
 80083b2:	3201      	adds	r2, #1
 80083b4:	7812      	ldrb	r2, [r2, #0]
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d11f      	bne.n	80083fa <eMBMasterFuncReadWriteMultipleHoldingRegister+0xf2>
        {
            /* Make callback to update the register values. */
            eRegStatus = eMBMasterRegHoldingCB( &ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_VALUES_OFF],
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	f103 000a 	add.w	r0, r3, #10
 80083c0:	89fa      	ldrh	r2, [r7, #14]
 80083c2:	8a39      	ldrh	r1, [r7, #16]
 80083c4:	2301      	movs	r3, #1
 80083c6:	f001 fdb9 	bl	8009f3c <eMBMasterRegHoldingCB>
 80083ca:	4603      	mov	r3, r0
 80083cc:	75bb      	strb	r3, [r7, #22]
                                           usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );

            if( eRegStatus == MB_ENOERR )
 80083ce:	7dbb      	ldrb	r3, [r7, #22]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d108      	bne.n	80083e6 <eMBMasterFuncReadWriteMultipleHoldingRegister+0xde>
            {
                /* Make the read callback. */
				eRegStatus = eMBMasterRegHoldingCB(&pucFrame[MB_PDU_FUNC_READWRITE_READ_VALUES_OFF],
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	1c98      	adds	r0, r3, #2
 80083d8:	8a7a      	ldrh	r2, [r7, #18]
 80083da:	8ab9      	ldrh	r1, [r7, #20]
 80083dc:	2300      	movs	r3, #0
 80083de:	f001 fdad 	bl	8009f3c <eMBMasterRegHoldingCB>
 80083e2:	4603      	mov	r3, r0
 80083e4:	75bb      	strb	r3, [r7, #22]
						                      usRegReadAddress, usRegReadCount, MB_REG_READ);
            }
            if( eRegStatus != MB_ENOERR )
 80083e6:	7dbb      	ldrb	r3, [r7, #22]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d008      	beq.n	80083fe <eMBMasterFuncReadWriteMultipleHoldingRegister+0xf6>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 80083ec:	7dbb      	ldrb	r3, [r7, #22]
 80083ee:	4618      	mov	r0, r3
 80083f0:	f000 f9e8 	bl	80087c4 <prveMBError2Exception>
 80083f4:	4603      	mov	r3, r0
 80083f6:	75fb      	strb	r3, [r7, #23]
 80083f8:	e001      	b.n	80083fe <eMBMasterFuncReadWriteMultipleHoldingRegister+0xf6>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80083fa:	2303      	movs	r3, #3
 80083fc:	75fb      	strb	r3, [r7, #23]
        }
    }
    return eStatus;
 80083fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008400:	4618      	mov	r0, r3
 8008402:	3718      	adds	r7, #24
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}

08008408 <eMBFuncReadInputRegister>:
/* ----------------------- Start implementation -----------------------------*/
#if MB_FUNC_READ_INPUT_ENABLED > 0

eMBException
eMBFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b086      	sub	sp, #24
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8008412:	2300      	movs	r3, #0
 8008414:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	881b      	ldrh	r3, [r3, #0]
 800841a:	2b05      	cmp	r3, #5
 800841c:	d15f      	bne.n	80084de <eMBFuncReadInputRegister+0xd6>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	3301      	adds	r3, #1
 8008422:	781b      	ldrb	r3, [r3, #0]
 8008424:	b29b      	uxth	r3, r3
 8008426:	021b      	lsls	r3, r3, #8
 8008428:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	3302      	adds	r3, #2
 800842e:	781b      	ldrb	r3, [r3, #0]
 8008430:	b29a      	uxth	r2, r3
 8008432:	8abb      	ldrh	r3, [r7, #20]
 8008434:	4313      	orrs	r3, r2
 8008436:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8008438:	8abb      	ldrh	r3, [r7, #20]
 800843a:	3301      	adds	r3, #1
 800843c:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	3303      	adds	r3, #3
 8008442:	781b      	ldrb	r3, [r3, #0]
 8008444:	b29b      	uxth	r3, r3
 8008446:	021b      	lsls	r3, r3, #8
 8008448:	827b      	strh	r3, [r7, #18]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	3304      	adds	r3, #4
 800844e:	781b      	ldrb	r3, [r3, #0]
 8008450:	b29a      	uxth	r2, r3
 8008452:	8a7b      	ldrh	r3, [r7, #18]
 8008454:	4313      	orrs	r3, r2
 8008456:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 )
 8008458:	8a7b      	ldrh	r3, [r7, #18]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d03c      	beq.n	80084d8 <eMBFuncReadInputRegister+0xd0>
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
 800845e:	8a7b      	ldrh	r3, [r7, #18]
 8008460:	2b7c      	cmp	r3, #124	; 0x7c
 8008462:	d839      	bhi.n	80084d8 <eMBFuncReadInputRegister+0xd0>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	2200      	movs	r2, #0
 800846c:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	1c5a      	adds	r2, r3, #1
 8008472:	60fa      	str	r2, [r7, #12]
 8008474:	2204      	movs	r2, #4
 8008476:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	881b      	ldrh	r3, [r3, #0]
 800847c:	3301      	adds	r3, #1
 800847e:	b29a      	uxth	r2, r3
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
 8008484:	8a7b      	ldrh	r3, [r7, #18]
 8008486:	b2da      	uxtb	r2, r3
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	1c59      	adds	r1, r3, #1
 800848c:	60f9      	str	r1, [r7, #12]
 800848e:	0052      	lsls	r2, r2, #1
 8008490:	b2d2      	uxtb	r2, r2
 8008492:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	881b      	ldrh	r3, [r3, #0]
 8008498:	3301      	adds	r3, #1
 800849a:	b29a      	uxth	r2, r3
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );
 80084a0:	8a7a      	ldrh	r2, [r7, #18]
 80084a2:	8abb      	ldrh	r3, [r7, #20]
 80084a4:	4619      	mov	r1, r3
 80084a6:	68f8      	ldr	r0, [r7, #12]
 80084a8:	f001 faf0 	bl	8009a8c <eMBRegInputCB>
 80084ac:	4603      	mov	r3, r0
 80084ae:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80084b0:	7afb      	ldrb	r3, [r7, #11]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d006      	beq.n	80084c4 <eMBFuncReadInputRegister+0xbc>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 80084b6:	7afb      	ldrb	r3, [r7, #11]
 80084b8:	4618      	mov	r0, r3
 80084ba:	f000 f983 	bl	80087c4 <prveMBError2Exception>
 80084be:	4603      	mov	r3, r0
 80084c0:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 80084c2:	e00e      	b.n	80084e2 <eMBFuncReadInputRegister+0xda>
            }
            else
            {
                *usLen += usRegCount * 2;
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	881a      	ldrh	r2, [r3, #0]
 80084c8:	8a7b      	ldrh	r3, [r7, #18]
 80084ca:	005b      	lsls	r3, r3, #1
 80084cc:	b29b      	uxth	r3, r3
 80084ce:	4413      	add	r3, r2
 80084d0:	b29a      	uxth	r2, r3
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 80084d6:	e004      	b.n	80084e2 <eMBFuncReadInputRegister+0xda>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80084d8:	2303      	movs	r3, #3
 80084da:	75fb      	strb	r3, [r7, #23]
 80084dc:	e001      	b.n	80084e2 <eMBFuncReadInputRegister+0xda>
    }
    else
    {
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80084de:	2303      	movs	r3, #3
 80084e0:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 80084e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3718      	adds	r7, #24
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}

080084ec <eMBMasterReqReadInputRegister>:
 *
 * @return error code
 */
eMBMasterReqErrCode
eMBMasterReqReadInputRegister( UCHAR ucSndAddr, USHORT usRegAddr, USHORT usNRegs, LONG lTimeOut )
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b086      	sub	sp, #24
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	607b      	str	r3, [r7, #4]
 80084f4:	4603      	mov	r3, r0
 80084f6:	73fb      	strb	r3, [r7, #15]
 80084f8:	460b      	mov	r3, r1
 80084fa:	81bb      	strh	r3, [r7, #12]
 80084fc:	4613      	mov	r3, r2
 80084fe:	817b      	strh	r3, [r7, #10]
    UCHAR                 *ucMBFrame;
    eMBMasterReqErrCode    eErrStatus = MB_MRE_NO_ERR;
 8008500:	2300      	movs	r3, #0
 8008502:	75fb      	strb	r3, [r7, #23]

    if ( ucSndAddr > MB_MASTER_TOTAL_SLAVE_NUM ) eErrStatus = MB_MRE_ILL_ARG;
 8008504:	7bfb      	ldrb	r3, [r7, #15]
 8008506:	2b10      	cmp	r3, #16
 8008508:	d902      	bls.n	8008510 <eMBMasterReqReadInputRegister+0x24>
 800850a:	2302      	movs	r3, #2
 800850c:	75fb      	strb	r3, [r7, #23]
 800850e:	e036      	b.n	800857e <eMBMasterReqReadInputRegister+0x92>
    else if ( xMBMasterRunResTake( lTimeOut ) == FALSE ) eErrStatus = MB_MRE_MASTER_BUSY;
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 ff65 	bl	80093e0 <xMBMasterRunResTake>
 8008516:	4603      	mov	r3, r0
 8008518:	2b00      	cmp	r3, #0
 800851a:	d102      	bne.n	8008522 <eMBMasterReqReadInputRegister+0x36>
 800851c:	2305      	movs	r3, #5
 800851e:	75fb      	strb	r3, [r7, #23]
 8008520:	e02d      	b.n	800857e <eMBMasterReqReadInputRegister+0x92>
    else
    {
		vMBMasterGetPDUSndBuf(&ucMBFrame);
 8008522:	f107 0310 	add.w	r3, r7, #16
 8008526:	4618      	mov	r0, r3
 8008528:	f002 fba4 	bl	800ac74 <vMBMasterGetPDUSndBuf>
		vMBMasterSetDestAddress(ucSndAddr);
 800852c:	7bfb      	ldrb	r3, [r7, #15]
 800852e:	4618      	mov	r0, r3
 8008530:	f000 fcb8 	bl	8008ea4 <vMBMasterSetDestAddress>
		ucMBFrame[MB_PDU_FUNC_OFF]                = MB_FUNC_READ_INPUT_REGISTER;
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	2204      	movs	r2, #4
 8008538:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF]       = usRegAddr >> 8;
 800853a:	89bb      	ldrh	r3, [r7, #12]
 800853c:	0a1b      	lsrs	r3, r3, #8
 800853e:	b29a      	uxth	r2, r3
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	3301      	adds	r3, #1
 8008544:	b2d2      	uxtb	r2, r2
 8008546:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1]   = usRegAddr;
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	3302      	adds	r3, #2
 800854c:	89ba      	ldrh	r2, [r7, #12]
 800854e:	b2d2      	uxtb	r2, r2
 8008550:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF]     = usNRegs >> 8;
 8008552:	897b      	ldrh	r3, [r7, #10]
 8008554:	0a1b      	lsrs	r3, r3, #8
 8008556:	b29a      	uxth	r2, r3
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	3303      	adds	r3, #3
 800855c:	b2d2      	uxtb	r2, r2
 800855e:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF + 1] = usNRegs;
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	3304      	adds	r3, #4
 8008564:	897a      	ldrh	r2, [r7, #10]
 8008566:	b2d2      	uxtb	r2, r2
 8008568:	701a      	strb	r2, [r3, #0]
		vMBMasterSetPDUSndLength( MB_PDU_SIZE_MIN + MB_PDU_REQ_READ_SIZE );
 800856a:	2005      	movs	r0, #5
 800856c:	f002 fb92 	bl	800ac94 <vMBMasterSetPDUSndLength>
		( void ) xMBMasterPortEventPost( EV_MASTER_FRAME_SENT );
 8008570:	2008      	movs	r0, #8
 8008572:	f000 fe9f 	bl	80092b4 <xMBMasterPortEventPost>
		eErrStatus = eMBMasterWaitRequestFinish( );
 8008576:	f000 ffa3 	bl	80094c0 <eMBMasterWaitRequestFinish>
 800857a:	4603      	mov	r3, r0
 800857c:	75fb      	strb	r3, [r7, #23]
    }
    return eErrStatus;
 800857e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008580:	4618      	mov	r0, r3
 8008582:	3718      	adds	r7, #24
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}

08008588 <eMBMasterFuncReadInputRegister>:

eMBException
eMBMasterFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b086      	sub	sp, #24
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	6039      	str	r1, [r7, #0]
    UCHAR          *ucMBFrame;
    USHORT          usRegAddress;
    USHORT          usRegCount;

    eMBException    eStatus = MB_EX_NONE;
 8008592:	2300      	movs	r3, #0
 8008594:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, and it's read mode. This request don't need execute. */
	if ( xMBMasterRequestIsBroadcast() )
 8008596:	f002 fb99 	bl	800accc <xMBMasterRequestIsBroadcast>
 800859a:	4603      	mov	r3, r0
 800859c:	2b00      	cmp	r3, #0
 800859e:	d002      	beq.n	80085a6 <eMBMasterFuncReadInputRegister+0x1e>
	{
		eStatus = MB_EX_NONE;
 80085a0:	2300      	movs	r3, #0
 80085a2:	75fb      	strb	r3, [r7, #23]
 80085a4:	e047      	b.n	8008636 <eMBMasterFuncReadInputRegister+0xae>
	}
	else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	881b      	ldrh	r3, [r3, #0]
 80085aa:	2b01      	cmp	r3, #1
 80085ac:	d941      	bls.n	8008632 <eMBMasterFuncReadInputRegister+0xaa>
    {
		vMBMasterGetPDUSndBuf(&ucMBFrame);
 80085ae:	f107 030c 	add.w	r3, r7, #12
 80085b2:	4618      	mov	r0, r3
 80085b4:	f002 fb5e 	bl	800ac74 <vMBMasterGetPDUSndBuf>
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	3301      	adds	r3, #1
 80085bc:	781b      	ldrb	r3, [r3, #0]
 80085be:	b29b      	uxth	r3, r3
 80085c0:	021b      	lsls	r3, r3, #8
 80085c2:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	3302      	adds	r3, #2
 80085c8:	781b      	ldrb	r3, [r3, #0]
 80085ca:	b29a      	uxth	r2, r3
 80085cc:	8abb      	ldrh	r3, [r7, #20]
 80085ce:	4313      	orrs	r3, r2
 80085d0:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 80085d2:	8abb      	ldrh	r3, [r7, #20]
 80085d4:	3301      	adds	r3, #1
 80085d6:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF] << 8 );
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	3303      	adds	r3, #3
 80085dc:	781b      	ldrb	r3, [r3, #0]
 80085de:	b29b      	uxth	r3, r3
 80085e0:	021b      	lsls	r3, r3, #8
 80085e2:	827b      	strh	r3, [r7, #18]
        usRegCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF + 1] );
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	3304      	adds	r3, #4
 80085e8:	781b      	ldrb	r3, [r3, #0]
 80085ea:	b29a      	uxth	r2, r3
 80085ec:	8a7b      	ldrh	r3, [r7, #18]
 80085ee:	4313      	orrs	r3, r2
 80085f0:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception.
         */
        if( ( usRegCount >= 1 ) && ( 2 * usRegCount == pucFrame[MB_PDU_FUNC_READ_BYTECNT_OFF] ) )
 80085f2:	8a7b      	ldrh	r3, [r7, #18]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d019      	beq.n	800862c <eMBMasterFuncReadInputRegister+0xa4>
 80085f8:	8a7b      	ldrh	r3, [r7, #18]
 80085fa:	005b      	lsls	r3, r3, #1
 80085fc:	687a      	ldr	r2, [r7, #4]
 80085fe:	3201      	adds	r2, #1
 8008600:	7812      	ldrb	r2, [r2, #0]
 8008602:	4293      	cmp	r3, r2
 8008604:	d112      	bne.n	800862c <eMBMasterFuncReadInputRegister+0xa4>
        {
            /* Make callback to fill the buffer. */
            eRegStatus = eMBMasterRegInputCB( &pucFrame[MB_PDU_FUNC_READ_VALUES_OFF], usRegAddress, usRegCount );
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	3302      	adds	r3, #2
 800860a:	8a7a      	ldrh	r2, [r7, #18]
 800860c:	8ab9      	ldrh	r1, [r7, #20]
 800860e:	4618      	mov	r0, r3
 8008610:	f001 fc38 	bl	8009e84 <eMBMasterRegInputCB>
 8008614:	4603      	mov	r3, r0
 8008616:	747b      	strb	r3, [r7, #17]
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8008618:	7c7b      	ldrb	r3, [r7, #17]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d00b      	beq.n	8008636 <eMBMasterFuncReadInputRegister+0xae>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800861e:	7c7b      	ldrb	r3, [r7, #17]
 8008620:	4618      	mov	r0, r3
 8008622:	f000 f8cf 	bl	80087c4 <prveMBError2Exception>
 8008626:	4603      	mov	r3, r0
 8008628:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 800862a:	e004      	b.n	8008636 <eMBMasterFuncReadInputRegister+0xae>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800862c:	2303      	movs	r3, #3
 800862e:	75fb      	strb	r3, [r7, #23]
 8008630:	e001      	b.n	8008636 <eMBMasterFuncReadInputRegister+0xae>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8008632:	2303      	movs	r3, #3
 8008634:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 8008636:	7dfb      	ldrb	r3, [r7, #23]
}
 8008638:	4618      	mov	r0, r3
 800863a:	3718      	adds	r7, #24
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}

08008640 <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b082      	sub	sp, #8
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	6039      	str	r1, [r7, #0]
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	3301      	adds	r3, #1
 800864e:	4a08      	ldr	r2, [pc, #32]	; (8008670 <eMBFuncReportSlaveID+0x30>)
 8008650:	8812      	ldrh	r2, [r2, #0]
 8008652:	4908      	ldr	r1, [pc, #32]	; (8008674 <eMBFuncReportSlaveID+0x34>)
 8008654:	4618      	mov	r0, r3
 8008656:	f002 fc98 	bl	800af8a <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 800865a:	4b05      	ldr	r3, [pc, #20]	; (8008670 <eMBFuncReportSlaveID+0x30>)
 800865c:	881b      	ldrh	r3, [r3, #0]
 800865e:	3301      	adds	r3, #1
 8008660:	b29a      	uxth	r2, r3
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	801a      	strh	r2, [r3, #0]
    return MB_EX_NONE;
 8008666:	2300      	movs	r3, #0
}
 8008668:	4618      	mov	r0, r3
 800866a:	3708      	adds	r7, #8
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}
 8008670:	20004b84 	.word	0x20004b84
 8008674:	20004b64 	.word	0x20004b64

08008678 <xMBUtilSetBits>:

/* ----------------------- Start implementation -----------------------------*/
void
xMBUtilSetBits( UCHAR * ucByteBuf, USHORT usBitOffset, UCHAR ucNBits,
                UCHAR ucValue )
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b086      	sub	sp, #24
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
 8008680:	4608      	mov	r0, r1
 8008682:	4611      	mov	r1, r2
 8008684:	461a      	mov	r2, r3
 8008686:	4603      	mov	r3, r0
 8008688:	807b      	strh	r3, [r7, #2]
 800868a:	460b      	mov	r3, r1
 800868c:	707b      	strb	r3, [r7, #1]
 800868e:	4613      	mov	r3, r2
 8008690:	703b      	strb	r3, [r7, #0]
    USHORT          usWordBuf;
    USHORT          usMask;
    USHORT          usByteOffset;
    USHORT          usNPreBits;
    USHORT          usValue = ucValue;
 8008692:	783b      	ldrb	r3, [r7, #0]
 8008694:	82fb      	strh	r3, [r7, #22]

    assert( ucNBits <= 8 );
 8008696:	787b      	ldrb	r3, [r7, #1]
 8008698:	2b08      	cmp	r3, #8
 800869a:	d905      	bls.n	80086a8 <xMBUtilSetBits+0x30>
 800869c:	4b29      	ldr	r3, [pc, #164]	; (8008744 <xMBUtilSetBits+0xcc>)
 800869e:	4a2a      	ldr	r2, [pc, #168]	; (8008748 <xMBUtilSetBits+0xd0>)
 80086a0:	2136      	movs	r1, #54	; 0x36
 80086a2:	482a      	ldr	r0, [pc, #168]	; (800874c <xMBUtilSetBits+0xd4>)
 80086a4:	f002 fb1e 	bl	800ace4 <__assert_func>
    assert( ( size_t )BITS_UCHAR == sizeof( UCHAR ) * 8 );

    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );
 80086a8:	887b      	ldrh	r3, [r7, #2]
 80086aa:	08db      	lsrs	r3, r3, #3
 80086ac:	82bb      	strh	r3, [r7, #20]

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );
 80086ae:	8abb      	ldrh	r3, [r7, #20]
 80086b0:	00db      	lsls	r3, r3, #3
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	887a      	ldrh	r2, [r7, #2]
 80086b6:	1ad3      	subs	r3, r2, r3
 80086b8:	827b      	strh	r3, [r7, #18]

    /* Move bit field into position over bits to set */
    usValue <<= usNPreBits;
 80086ba:	8afa      	ldrh	r2, [r7, #22]
 80086bc:	8a7b      	ldrh	r3, [r7, #18]
 80086be:	fa02 f303 	lsl.w	r3, r2, r3
 80086c2:	82fb      	strh	r3, [r7, #22]

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 80086c4:	787b      	ldrb	r3, [r7, #1]
 80086c6:	2201      	movs	r2, #1
 80086c8:	fa02 f303 	lsl.w	r3, r2, r3
 80086cc:	b29b      	uxth	r3, r3
 80086ce:	3b01      	subs	r3, #1
 80086d0:	823b      	strh	r3, [r7, #16]
    usMask <<= usBitOffset - usByteOffset * BITS_UCHAR;
 80086d2:	8a3a      	ldrh	r2, [r7, #16]
 80086d4:	8879      	ldrh	r1, [r7, #2]
 80086d6:	8abb      	ldrh	r3, [r7, #20]
 80086d8:	00db      	lsls	r3, r3, #3
 80086da:	1acb      	subs	r3, r1, r3
 80086dc:	fa02 f303 	lsl.w	r3, r2, r3
 80086e0:	823b      	strh	r3, [r7, #16]

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
 80086e2:	8abb      	ldrh	r3, [r7, #20]
 80086e4:	687a      	ldr	r2, [r7, #4]
 80086e6:	4413      	add	r3, r2
 80086e8:	781b      	ldrb	r3, [r3, #0]
 80086ea:	81fb      	strh	r3, [r7, #14]
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 80086ec:	8abb      	ldrh	r3, [r7, #20]
 80086ee:	3301      	adds	r3, #1
 80086f0:	687a      	ldr	r2, [r7, #4]
 80086f2:	4413      	add	r3, r2
 80086f4:	781b      	ldrb	r3, [r3, #0]
 80086f6:	021b      	lsls	r3, r3, #8
 80086f8:	b21a      	sxth	r2, r3
 80086fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80086fe:	4313      	orrs	r3, r2
 8008700:	b21b      	sxth	r3, r3
 8008702:	81fb      	strh	r3, [r7, #14]

    /* Zero out bit field bits and then or value bits into them. */
    usWordBuf = ( USHORT )( ( usWordBuf & ( ~usMask ) ) | usValue );
 8008704:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008708:	43db      	mvns	r3, r3
 800870a:	b21a      	sxth	r2, r3
 800870c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008710:	4013      	ands	r3, r2
 8008712:	b21a      	sxth	r2, r3
 8008714:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008718:	4313      	orrs	r3, r2
 800871a:	b21b      	sxth	r3, r3
 800871c:	81fb      	strh	r3, [r7, #14]

    /* move bits back into storage */
    ucByteBuf[usByteOffset] = ( UCHAR )( usWordBuf & 0xFF );
 800871e:	8abb      	ldrh	r3, [r7, #20]
 8008720:	687a      	ldr	r2, [r7, #4]
 8008722:	4413      	add	r3, r2
 8008724:	89fa      	ldrh	r2, [r7, #14]
 8008726:	b2d2      	uxtb	r2, r2
 8008728:	701a      	strb	r2, [r3, #0]
    ucByteBuf[usByteOffset + 1] = ( UCHAR )( usWordBuf >> BITS_UCHAR );
 800872a:	89fb      	ldrh	r3, [r7, #14]
 800872c:	0a1b      	lsrs	r3, r3, #8
 800872e:	b299      	uxth	r1, r3
 8008730:	8abb      	ldrh	r3, [r7, #20]
 8008732:	3301      	adds	r3, #1
 8008734:	687a      	ldr	r2, [r7, #4]
 8008736:	4413      	add	r3, r2
 8008738:	b2ca      	uxtb	r2, r1
 800873a:	701a      	strb	r2, [r3, #0]
}
 800873c:	bf00      	nop
 800873e:	3718      	adds	r7, #24
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}
 8008744:	0800bdec 	.word	0x0800bdec
 8008748:	0800bf90 	.word	0x0800bf90
 800874c:	0800bdfc 	.word	0x0800bdfc

08008750 <xMBUtilGetBits>:

UCHAR
xMBUtilGetBits( UCHAR * ucByteBuf, USHORT usBitOffset, UCHAR ucNBits )
{
 8008750:	b480      	push	{r7}
 8008752:	b085      	sub	sp, #20
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
 8008758:	460b      	mov	r3, r1
 800875a:	807b      	strh	r3, [r7, #2]
 800875c:	4613      	mov	r3, r2
 800875e:	707b      	strb	r3, [r7, #1]
    USHORT          usByteOffset;
    USHORT          usNPreBits;

    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );
 8008760:	887b      	ldrh	r3, [r7, #2]
 8008762:	08db      	lsrs	r3, r3, #3
 8008764:	81fb      	strh	r3, [r7, #14]

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );
 8008766:	89fb      	ldrh	r3, [r7, #14]
 8008768:	00db      	lsls	r3, r3, #3
 800876a:	b29b      	uxth	r3, r3
 800876c:	887a      	ldrh	r2, [r7, #2]
 800876e:	1ad3      	subs	r3, r2, r3
 8008770:	81bb      	strh	r3, [r7, #12]

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 8008772:	787b      	ldrb	r3, [r7, #1]
 8008774:	2201      	movs	r2, #1
 8008776:	fa02 f303 	lsl.w	r3, r2, r3
 800877a:	b29b      	uxth	r3, r3
 800877c:	3b01      	subs	r3, #1
 800877e:	817b      	strh	r3, [r7, #10]

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
 8008780:	89fb      	ldrh	r3, [r7, #14]
 8008782:	687a      	ldr	r2, [r7, #4]
 8008784:	4413      	add	r3, r2
 8008786:	781b      	ldrb	r3, [r3, #0]
 8008788:	813b      	strh	r3, [r7, #8]
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 800878a:	89fb      	ldrh	r3, [r7, #14]
 800878c:	3301      	adds	r3, #1
 800878e:	687a      	ldr	r2, [r7, #4]
 8008790:	4413      	add	r3, r2
 8008792:	781b      	ldrb	r3, [r3, #0]
 8008794:	021b      	lsls	r3, r3, #8
 8008796:	b21a      	sxth	r2, r3
 8008798:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800879c:	4313      	orrs	r3, r2
 800879e:	b21b      	sxth	r3, r3
 80087a0:	813b      	strh	r3, [r7, #8]

    /* throw away unneeded bits. */
    usWordBuf >>= usNPreBits;
 80087a2:	893a      	ldrh	r2, [r7, #8]
 80087a4:	89bb      	ldrh	r3, [r7, #12]
 80087a6:	fa42 f303 	asr.w	r3, r2, r3
 80087aa:	813b      	strh	r3, [r7, #8]

    /* mask away bits above the requested bitfield. */
    usWordBuf &= usMask;
 80087ac:	893a      	ldrh	r2, [r7, #8]
 80087ae:	897b      	ldrh	r3, [r7, #10]
 80087b0:	4013      	ands	r3, r2
 80087b2:	813b      	strh	r3, [r7, #8]

    return ( UCHAR ) usWordBuf;
 80087b4:	893b      	ldrh	r3, [r7, #8]
 80087b6:	b2db      	uxtb	r3, r3
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3714      	adds	r7, #20
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr

080087c4 <prveMBError2Exception>:

eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
 80087c4:	b480      	push	{r7}
 80087c6:	b085      	sub	sp, #20
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	4603      	mov	r3, r0
 80087cc:	71fb      	strb	r3, [r7, #7]
    eMBException    eStatus;

    switch ( eErrorCode )
 80087ce:	79fb      	ldrb	r3, [r7, #7]
 80087d0:	2b07      	cmp	r3, #7
 80087d2:	d00c      	beq.n	80087ee <prveMBError2Exception+0x2a>
 80087d4:	2b07      	cmp	r3, #7
 80087d6:	dc0d      	bgt.n	80087f4 <prveMBError2Exception+0x30>
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d002      	beq.n	80087e2 <prveMBError2Exception+0x1e>
 80087dc:	2b01      	cmp	r3, #1
 80087de:	d003      	beq.n	80087e8 <prveMBError2Exception+0x24>
 80087e0:	e008      	b.n	80087f4 <prveMBError2Exception+0x30>
    {
        case MB_ENOERR:
            eStatus = MB_EX_NONE;
 80087e2:	2300      	movs	r3, #0
 80087e4:	73fb      	strb	r3, [r7, #15]
            break;
 80087e6:	e008      	b.n	80087fa <prveMBError2Exception+0x36>

        case MB_ENOREG:
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
 80087e8:	2302      	movs	r3, #2
 80087ea:	73fb      	strb	r3, [r7, #15]
            break;
 80087ec:	e005      	b.n	80087fa <prveMBError2Exception+0x36>

        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
 80087ee:	2306      	movs	r3, #6
 80087f0:	73fb      	strb	r3, [r7, #15]
            break;
 80087f2:	e002      	b.n	80087fa <prveMBError2Exception+0x36>

        default:
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
 80087f4:	2304      	movs	r3, #4
 80087f6:	73fb      	strb	r3, [r7, #15]
            break;
 80087f8:	bf00      	nop
    }

    return eStatus;
 80087fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3714      	adds	r7, #20
 8008800:	46bd      	mov	sp, r7
 8008802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008806:	4770      	bx	lr

08008808 <eMBInit>:
};

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBInit( eMBMode eMode, UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b084      	sub	sp, #16
 800880c:	af00      	add	r7, sp, #0
 800880e:	603b      	str	r3, [r7, #0]
 8008810:	4603      	mov	r3, r0
 8008812:	71fb      	strb	r3, [r7, #7]
 8008814:	460b      	mov	r3, r1
 8008816:	71bb      	strb	r3, [r7, #6]
 8008818:	4613      	mov	r3, r2
 800881a:	717b      	strb	r3, [r7, #5]
    eMBErrorCode    eStatus = MB_ENOERR;
 800881c:	2300      	movs	r3, #0
 800881e:	73fb      	strb	r3, [r7, #15]

    /* check preconditions */
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
 8008820:	79bb      	ldrb	r3, [r7, #6]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d005      	beq.n	8008832 <eMBInit+0x2a>
 8008826:	79bb      	ldrb	r3, [r7, #6]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d002      	beq.n	8008832 <eMBInit+0x2a>
        ( ucSlaveAddress < MB_ADDRESS_MIN ) || ( ucSlaveAddress > MB_ADDRESS_MAX ) )
 800882c:	79bb      	ldrb	r3, [r7, #6]
 800882e:	2bf7      	cmp	r3, #247	; 0xf7
 8008830:	d902      	bls.n	8008838 <eMBInit+0x30>
    {
        eStatus = MB_EINVAL;
 8008832:	2302      	movs	r3, #2
 8008834:	73fb      	strb	r3, [r7, #15]
 8008836:	e03a      	b.n	80088ae <eMBInit+0xa6>
    }
    else
    {
        ucMBAddress = ucSlaveAddress;
 8008838:	4a1f      	ldr	r2, [pc, #124]	; (80088b8 <eMBInit+0xb0>)
 800883a:	79bb      	ldrb	r3, [r7, #6]
 800883c:	7013      	strb	r3, [r2, #0]

        switch ( eMode )
 800883e:	79fb      	ldrb	r3, [r7, #7]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d121      	bne.n	8008888 <eMBInit+0x80>
        {
#if MB_SLAVE_RTU_ENABLED > 0
        case MB_RTU:
            pvMBFrameStartCur = eMBRTUStart;
 8008844:	4b1d      	ldr	r3, [pc, #116]	; (80088bc <eMBInit+0xb4>)
 8008846:	4a1e      	ldr	r2, [pc, #120]	; (80088c0 <eMBInit+0xb8>)
 8008848:	601a      	str	r2, [r3, #0]
            pvMBFrameStopCur = eMBRTUStop;
 800884a:	4b1e      	ldr	r3, [pc, #120]	; (80088c4 <eMBInit+0xbc>)
 800884c:	4a1e      	ldr	r2, [pc, #120]	; (80088c8 <eMBInit+0xc0>)
 800884e:	601a      	str	r2, [r3, #0]
            peMBFrameSendCur = eMBRTUSend;
 8008850:	4b1e      	ldr	r3, [pc, #120]	; (80088cc <eMBInit+0xc4>)
 8008852:	4a1f      	ldr	r2, [pc, #124]	; (80088d0 <eMBInit+0xc8>)
 8008854:	601a      	str	r2, [r3, #0]
            peMBFrameReceiveCur = eMBRTUReceive;
 8008856:	4b1f      	ldr	r3, [pc, #124]	; (80088d4 <eMBInit+0xcc>)
 8008858:	4a1f      	ldr	r2, [pc, #124]	; (80088d8 <eMBInit+0xd0>)
 800885a:	601a      	str	r2, [r3, #0]
            pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
 800885c:	4b1f      	ldr	r3, [pc, #124]	; (80088dc <eMBInit+0xd4>)
 800885e:	2200      	movs	r2, #0
 8008860:	601a      	str	r2, [r3, #0]
            pxMBFrameCBByteReceived = xMBRTUReceiveFSM;			//call back from interrupt
 8008862:	4b1f      	ldr	r3, [pc, #124]	; (80088e0 <eMBInit+0xd8>)
 8008864:	4a1f      	ldr	r2, [pc, #124]	; (80088e4 <eMBInit+0xdc>)
 8008866:	601a      	str	r2, [r3, #0]
            pxMBFrameCBTransmitterEmpty = xMBRTUTransmitFSM;	//call back from interrupt
 8008868:	4b1f      	ldr	r3, [pc, #124]	; (80088e8 <eMBInit+0xe0>)
 800886a:	4a20      	ldr	r2, [pc, #128]	; (80088ec <eMBInit+0xe4>)
 800886c:	601a      	str	r2, [r3, #0]
            pxMBPortCBTimerExpired = xMBRTUTimerT35Expired;		//call back from interrupt
 800886e:	4b20      	ldr	r3, [pc, #128]	; (80088f0 <eMBInit+0xe8>)
 8008870:	4a20      	ldr	r2, [pc, #128]	; (80088f4 <eMBInit+0xec>)
 8008872:	601a      	str	r2, [r3, #0]

            eStatus = eMBRTUInit( ucMBAddress, ucPort, ulBaudRate, eParity );
 8008874:	4b10      	ldr	r3, [pc, #64]	; (80088b8 <eMBInit+0xb0>)
 8008876:	7818      	ldrb	r0, [r3, #0]
 8008878:	7e3b      	ldrb	r3, [r7, #24]
 800887a:	7979      	ldrb	r1, [r7, #5]
 800887c:	683a      	ldr	r2, [r7, #0]
 800887e:	f001 fd43 	bl	800a308 <eMBRTUInit>
 8008882:	4603      	mov	r3, r0
 8008884:	73fb      	strb	r3, [r7, #15]
            break;
 8008886:	e001      	b.n	800888c <eMBInit+0x84>

            eStatus = eMBASCIIInit( ucMBAddress, ucPort, ulBaudRate, eParity );
            break;
#endif
        default:
            eStatus = MB_EINVAL;
 8008888:	2302      	movs	r3, #2
 800888a:	73fb      	strb	r3, [r7, #15]
        }

        if( eStatus == MB_ENOERR )
 800888c:	7bfb      	ldrb	r3, [r7, #15]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d10d      	bne.n	80088ae <eMBInit+0xa6>
        {
            if( !xMBPortEventInit(  ) )
 8008892:	f000 fc71 	bl	8009178 <xMBPortEventInit>
 8008896:	4603      	mov	r3, r0
 8008898:	2b00      	cmp	r3, #0
 800889a:	d102      	bne.n	80088a2 <eMBInit+0x9a>
            {
                /* port dependent event module initalization failed. */
                eStatus = MB_EPORTERR;
 800889c:	2303      	movs	r3, #3
 800889e:	73fb      	strb	r3, [r7, #15]
 80088a0:	e005      	b.n	80088ae <eMBInit+0xa6>
            }
            else
            {
                eMBCurrentMode = eMode;
 80088a2:	4a15      	ldr	r2, [pc, #84]	; (80088f8 <eMBInit+0xf0>)
 80088a4:	79fb      	ldrb	r3, [r7, #7]
 80088a6:	7013      	strb	r3, [r2, #0]
                eMBState = STATE_DISABLED;
 80088a8:	4b14      	ldr	r3, [pc, #80]	; (80088fc <eMBInit+0xf4>)
 80088aa:	2201      	movs	r2, #1
 80088ac:	701a      	strb	r2, [r3, #0]
            }
        }
    }
    return eStatus;
 80088ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3710      	adds	r7, #16
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}
 80088b8:	20004b86 	.word	0x20004b86
 80088bc:	20004b8c 	.word	0x20004b8c
 80088c0:	0800a381 	.word	0x0800a381
 80088c4:	20004b90 	.word	0x20004b90
 80088c8:	0800a3a9 	.word	0x0800a3a9
 80088cc:	20004b88 	.word	0x20004b88
 80088d0:	0800a461 	.word	0x0800a461
 80088d4:	20004b94 	.word	0x20004b94
 80088d8:	0800a3c5 	.word	0x0800a3c5
 80088dc:	20004b98 	.word	0x20004b98
 80088e0:	20005064 	.word	0x20005064
 80088e4:	0800a545 	.word	0x0800a545
 80088e8:	2000505c 	.word	0x2000505c
 80088ec:	0800a615 	.word	0x0800a615
 80088f0:	20005060 	.word	0x20005060
 80088f4:	0800a6c5 	.word	0x0800a6c5
 80088f8:	20004b87 	.word	0x20004b87
 80088fc:	20000010 	.word	0x20000010

08008900 <eMBEnable>:
    return eStatus;
}

eMBErrorCode
eMBEnable( void )
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b082      	sub	sp, #8
 8008904:	af00      	add	r7, sp, #0
    eMBErrorCode    eStatus = MB_ENOERR;
 8008906:	2300      	movs	r3, #0
 8008908:	71fb      	strb	r3, [r7, #7]

    if( eMBState == STATE_DISABLED )
 800890a:	4b09      	ldr	r3, [pc, #36]	; (8008930 <eMBEnable+0x30>)
 800890c:	781b      	ldrb	r3, [r3, #0]
 800890e:	2b01      	cmp	r3, #1
 8008910:	d106      	bne.n	8008920 <eMBEnable+0x20>
    {
        /* Activate the protocol stack. */
        pvMBFrameStartCur(  );
 8008912:	4b08      	ldr	r3, [pc, #32]	; (8008934 <eMBEnable+0x34>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 8008918:	4b05      	ldr	r3, [pc, #20]	; (8008930 <eMBEnable+0x30>)
 800891a:	2200      	movs	r2, #0
 800891c:	701a      	strb	r2, [r3, #0]
 800891e:	e001      	b.n	8008924 <eMBEnable+0x24>
    }
    else
    {
        eStatus = MB_EILLSTATE;
 8008920:	2306      	movs	r3, #6
 8008922:	71fb      	strb	r3, [r7, #7]
    }
    return eStatus;
 8008924:	79fb      	ldrb	r3, [r7, #7]
}
 8008926:	4618      	mov	r0, r3
 8008928:	3708      	adds	r7, #8
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}
 800892e:	bf00      	nop
 8008930:	20000010 	.word	0x20000010
 8008934:	20004b8c 	.word	0x20004b8c

08008938 <eMBPoll>:
    return eStatus;
}

eMBErrorCode
eMBPoll( void )
{
 8008938:	b590      	push	{r4, r7, lr}
 800893a:	b083      	sub	sp, #12
 800893c:	af00      	add	r7, sp, #0
    static UCHAR    ucFunctionCode;
    static USHORT   usLength;
    static eMBException eException;

    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
 800893e:	2300      	movs	r3, #0
 8008940:	70fb      	strb	r3, [r7, #3]
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
 8008942:	4b56      	ldr	r3, [pc, #344]	; (8008a9c <eMBPoll+0x164>)
 8008944:	781b      	ldrb	r3, [r3, #0]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d001      	beq.n	800894e <eMBPoll+0x16>
    {
        return MB_EILLSTATE;
 800894a:	2306      	movs	r3, #6
 800894c:	e0a1      	b.n	8008a92 <eMBPoll+0x15a>
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
 800894e:	1cbb      	adds	r3, r7, #2
 8008950:	4618      	mov	r0, r3
 8008952:	f000 fc5f 	bl	8009214 <xMBPortEventGet>
 8008956:	4603      	mov	r3, r0
 8008958:	2b01      	cmp	r3, #1
 800895a:	f040 8094 	bne.w	8008a86 <eMBPoll+0x14e>
    {
        switch ( eEvent )
 800895e:	78bb      	ldrb	r3, [r7, #2]
 8008960:	3b01      	subs	r3, #1
 8008962:	2b07      	cmp	r3, #7
 8008964:	f200 8094 	bhi.w	8008a90 <eMBPoll+0x158>
 8008968:	a201      	add	r2, pc, #4	; (adr r2, 8008970 <eMBPoll+0x38>)
 800896a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800896e:	bf00      	nop
 8008970:	08008a91 	.word	0x08008a91
 8008974:	08008991 	.word	0x08008991
 8008978:	08008a91 	.word	0x08008a91
 800897c:	080089c3 	.word	0x080089c3
 8008980:	08008a91 	.word	0x08008a91
 8008984:	08008a91 	.word	0x08008a91
 8008988:	08008a91 	.word	0x08008a91
 800898c:	08008a91 	.word	0x08008a91
        case EV_READY:

            break;

        case EV_FRAME_RECEIVED:
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 8008990:	4b43      	ldr	r3, [pc, #268]	; (8008aa0 <eMBPoll+0x168>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4a43      	ldr	r2, [pc, #268]	; (8008aa4 <eMBPoll+0x16c>)
 8008996:	4944      	ldr	r1, [pc, #272]	; (8008aa8 <eMBPoll+0x170>)
 8008998:	4844      	ldr	r0, [pc, #272]	; (8008aac <eMBPoll+0x174>)
 800899a:	4798      	blx	r3
 800899c:	4603      	mov	r3, r0
 800899e:	70fb      	strb	r3, [r7, #3]
            if( eStatus == MB_ENOERR )
 80089a0:	78fb      	ldrb	r3, [r7, #3]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d171      	bne.n	8008a8a <eMBPoll+0x152>
            {
                /* Check if the frame is for us. If not ignore the frame. */
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
 80089a6:	4b41      	ldr	r3, [pc, #260]	; (8008aac <eMBPoll+0x174>)
 80089a8:	781a      	ldrb	r2, [r3, #0]
 80089aa:	4b41      	ldr	r3, [pc, #260]	; (8008ab0 <eMBPoll+0x178>)
 80089ac:	781b      	ldrb	r3, [r3, #0]
 80089ae:	429a      	cmp	r2, r3
 80089b0:	d003      	beq.n	80089ba <eMBPoll+0x82>
 80089b2:	4b3e      	ldr	r3, [pc, #248]	; (8008aac <eMBPoll+0x174>)
 80089b4:	781b      	ldrb	r3, [r3, #0]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d167      	bne.n	8008a8a <eMBPoll+0x152>
                {
                    ( void )xMBPortEventPost( EV_EXECUTE );
 80089ba:	2004      	movs	r0, #4
 80089bc:	f000 fbfc 	bl	80091b8 <xMBPortEventPost>
                }
            }
            break;
 80089c0:	e063      	b.n	8008a8a <eMBPoll+0x152>

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 80089c2:	4b39      	ldr	r3, [pc, #228]	; (8008aa8 <eMBPoll+0x170>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	781a      	ldrb	r2, [r3, #0]
 80089c8:	4b3a      	ldr	r3, [pc, #232]	; (8008ab4 <eMBPoll+0x17c>)
 80089ca:	701a      	strb	r2, [r3, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 80089cc:	4b3a      	ldr	r3, [pc, #232]	; (8008ab8 <eMBPoll+0x180>)
 80089ce:	2201      	movs	r2, #1
 80089d0:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 80089d2:	2300      	movs	r3, #0
 80089d4:	607b      	str	r3, [r7, #4]
 80089d6:	e01f      	b.n	8008a18 <eMBPoll+0xe0>
            {
                /* No more function handlers registered. Abort. */
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 80089d8:	4a38      	ldr	r2, [pc, #224]	; (8008abc <eMBPoll+0x184>)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d01d      	beq.n	8008a20 <eMBPoll+0xe8>
                {
                    break;
                }
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 80089e4:	4a35      	ldr	r2, [pc, #212]	; (8008abc <eMBPoll+0x184>)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 80089ec:	4b31      	ldr	r3, [pc, #196]	; (8008ab4 <eMBPoll+0x17c>)
 80089ee:	781b      	ldrb	r3, [r3, #0]
 80089f0:	429a      	cmp	r2, r3
 80089f2:	d10e      	bne.n	8008a12 <eMBPoll+0xda>
                {
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
 80089f4:	4a31      	ldr	r2, [pc, #196]	; (8008abc <eMBPoll+0x184>)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	00db      	lsls	r3, r3, #3
 80089fa:	4413      	add	r3, r2
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	4a2a      	ldr	r2, [pc, #168]	; (8008aa8 <eMBPoll+0x170>)
 8008a00:	6812      	ldr	r2, [r2, #0]
 8008a02:	4928      	ldr	r1, [pc, #160]	; (8008aa4 <eMBPoll+0x16c>)
 8008a04:	4610      	mov	r0, r2
 8008a06:	4798      	blx	r3
 8008a08:	4603      	mov	r3, r0
 8008a0a:	461a      	mov	r2, r3
 8008a0c:	4b2a      	ldr	r3, [pc, #168]	; (8008ab8 <eMBPoll+0x180>)
 8008a0e:	701a      	strb	r2, [r3, #0]
                    break;
 8008a10:	e007      	b.n	8008a22 <eMBPoll+0xea>
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	3301      	adds	r3, #1
 8008a16:	607b      	str	r3, [r7, #4]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2b0f      	cmp	r3, #15
 8008a1c:	dddc      	ble.n	80089d8 <eMBPoll+0xa0>
 8008a1e:	e000      	b.n	8008a22 <eMBPoll+0xea>
                    break;
 8008a20:	bf00      	nop
                }
            }

            /* If the request was not sent to the broadcast address we
             * return a reply. */
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 8008a22:	4b22      	ldr	r3, [pc, #136]	; (8008aac <eMBPoll+0x174>)
 8008a24:	781b      	ldrb	r3, [r3, #0]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d031      	beq.n	8008a8e <eMBPoll+0x156>
            {
                if( eException != MB_EX_NONE )
 8008a2a:	4b23      	ldr	r3, [pc, #140]	; (8008ab8 <eMBPoll+0x180>)
 8008a2c:	781b      	ldrb	r3, [r3, #0]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d01d      	beq.n	8008a6e <eMBPoll+0x136>
                {
                    /* An exception occured. Build an error frame. */
                    usLength = 0;
 8008a32:	4b1c      	ldr	r3, [pc, #112]	; (8008aa4 <eMBPoll+0x16c>)
 8008a34:	2200      	movs	r2, #0
 8008a36:	801a      	strh	r2, [r3, #0]
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 8008a38:	4b1e      	ldr	r3, [pc, #120]	; (8008ab4 <eMBPoll+0x17c>)
 8008a3a:	781a      	ldrb	r2, [r3, #0]
 8008a3c:	4b1a      	ldr	r3, [pc, #104]	; (8008aa8 <eMBPoll+0x170>)
 8008a3e:	6819      	ldr	r1, [r3, #0]
 8008a40:	4b18      	ldr	r3, [pc, #96]	; (8008aa4 <eMBPoll+0x16c>)
 8008a42:	881b      	ldrh	r3, [r3, #0]
 8008a44:	1c58      	adds	r0, r3, #1
 8008a46:	b284      	uxth	r4, r0
 8008a48:	4816      	ldr	r0, [pc, #88]	; (8008aa4 <eMBPoll+0x16c>)
 8008a4a:	8004      	strh	r4, [r0, #0]
 8008a4c:	440b      	add	r3, r1
 8008a4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008a52:	b2d2      	uxtb	r2, r2
 8008a54:	701a      	strb	r2, [r3, #0]
                    ucMBFrame[usLength++] = eException;
 8008a56:	4b14      	ldr	r3, [pc, #80]	; (8008aa8 <eMBPoll+0x170>)
 8008a58:	681a      	ldr	r2, [r3, #0]
 8008a5a:	4b12      	ldr	r3, [pc, #72]	; (8008aa4 <eMBPoll+0x16c>)
 8008a5c:	881b      	ldrh	r3, [r3, #0]
 8008a5e:	1c59      	adds	r1, r3, #1
 8008a60:	b288      	uxth	r0, r1
 8008a62:	4910      	ldr	r1, [pc, #64]	; (8008aa4 <eMBPoll+0x16c>)
 8008a64:	8008      	strh	r0, [r1, #0]
 8008a66:	4413      	add	r3, r2
 8008a68:	4a13      	ldr	r2, [pc, #76]	; (8008ab8 <eMBPoll+0x180>)
 8008a6a:	7812      	ldrb	r2, [r2, #0]
 8008a6c:	701a      	strb	r2, [r3, #0]
                }


                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
 8008a6e:	4b14      	ldr	r3, [pc, #80]	; (8008ac0 <eMBPoll+0x188>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4a0f      	ldr	r2, [pc, #60]	; (8008ab0 <eMBPoll+0x178>)
 8008a74:	7810      	ldrb	r0, [r2, #0]
 8008a76:	4a0c      	ldr	r2, [pc, #48]	; (8008aa8 <eMBPoll+0x170>)
 8008a78:	6811      	ldr	r1, [r2, #0]
 8008a7a:	4a0a      	ldr	r2, [pc, #40]	; (8008aa4 <eMBPoll+0x16c>)
 8008a7c:	8812      	ldrh	r2, [r2, #0]
 8008a7e:	4798      	blx	r3
 8008a80:	4603      	mov	r3, r0
 8008a82:	70fb      	strb	r3, [r7, #3]
            }
            break;
 8008a84:	e003      	b.n	8008a8e <eMBPoll+0x156>

        case EV_FRAME_SENT:
            break;
        }
    }
 8008a86:	bf00      	nop
 8008a88:	e002      	b.n	8008a90 <eMBPoll+0x158>
            break;
 8008a8a:	bf00      	nop
 8008a8c:	e000      	b.n	8008a90 <eMBPoll+0x158>
            break;
 8008a8e:	bf00      	nop
    return MB_ENOERR;
 8008a90:	2300      	movs	r3, #0
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	370c      	adds	r7, #12
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd90      	pop	{r4, r7, pc}
 8008a9a:	bf00      	nop
 8008a9c:	20000010 	.word	0x20000010
 8008aa0:	20004b94 	.word	0x20004b94
 8008aa4:	20004ba4 	.word	0x20004ba4
 8008aa8:	20004ba0 	.word	0x20004ba0
 8008aac:	20004b9c 	.word	0x20004b9c
 8008ab0:	20004b86 	.word	0x20004b86
 8008ab4:	20004ba6 	.word	0x20004ba6
 8008ab8:	20004ba7 	.word	0x20004ba7
 8008abc:	20000014 	.word	0x20000014
 8008ac0:	20004b88 	.word	0x20004b88

08008ac4 <eMBMasterInit>:
};

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBMasterInit( eMBMode eMode, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b084      	sub	sp, #16
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	603a      	str	r2, [r7, #0]
 8008acc:	461a      	mov	r2, r3
 8008ace:	4603      	mov	r3, r0
 8008ad0:	71fb      	strb	r3, [r7, #7]
 8008ad2:	460b      	mov	r3, r1
 8008ad4:	71bb      	strb	r3, [r7, #6]
 8008ad6:	4613      	mov	r3, r2
 8008ad8:	717b      	strb	r3, [r7, #5]
    eMBErrorCode    eStatus = MB_ENOERR;
 8008ada:	2300      	movs	r3, #0
 8008adc:	73fb      	strb	r3, [r7, #15]

	switch (eMode)
 8008ade:	79fb      	ldrb	r3, [r7, #7]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d120      	bne.n	8008b26 <eMBMasterInit+0x62>
	{
#if MB_MASTER_RTU_ENABLED > 0
	case MB_RTU:
		pvMBMasterFrameStartCur = eMBMasterRTUStart;
 8008ae4:	4b1c      	ldr	r3, [pc, #112]	; (8008b58 <eMBMasterInit+0x94>)
 8008ae6:	4a1d      	ldr	r2, [pc, #116]	; (8008b5c <eMBMasterInit+0x98>)
 8008ae8:	601a      	str	r2, [r3, #0]
		pvMBMasterFrameStopCur = eMBMasterRTUStop;
 8008aea:	4b1d      	ldr	r3, [pc, #116]	; (8008b60 <eMBMasterInit+0x9c>)
 8008aec:	4a1d      	ldr	r2, [pc, #116]	; (8008b64 <eMBMasterInit+0xa0>)
 8008aee:	601a      	str	r2, [r3, #0]
		peMBMasterFrameSendCur = eMBMasterRTUSend;
 8008af0:	4b1d      	ldr	r3, [pc, #116]	; (8008b68 <eMBMasterInit+0xa4>)
 8008af2:	4a1e      	ldr	r2, [pc, #120]	; (8008b6c <eMBMasterInit+0xa8>)
 8008af4:	601a      	str	r2, [r3, #0]
		peMBMasterFrameReceiveCur = eMBMasterRTUReceive;
 8008af6:	4b1e      	ldr	r3, [pc, #120]	; (8008b70 <eMBMasterInit+0xac>)
 8008af8:	4a1e      	ldr	r2, [pc, #120]	; (8008b74 <eMBMasterInit+0xb0>)
 8008afa:	601a      	str	r2, [r3, #0]
		pvMBMasterFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBMasterPortClose : NULL;
 8008afc:	4b1e      	ldr	r3, [pc, #120]	; (8008b78 <eMBMasterInit+0xb4>)
 8008afe:	2200      	movs	r2, #0
 8008b00:	601a      	str	r2, [r3, #0]
		pxMBMasterFrameCBByteReceived = xMBMasterRTUReceiveFSM;
 8008b02:	4b1e      	ldr	r3, [pc, #120]	; (8008b7c <eMBMasterInit+0xb8>)
 8008b04:	4a1e      	ldr	r2, [pc, #120]	; (8008b80 <eMBMasterInit+0xbc>)
 8008b06:	601a      	str	r2, [r3, #0]
		pxMBMasterFrameCBTransmitterEmpty = xMBMasterRTUTransmitFSM;
 8008b08:	4b1e      	ldr	r3, [pc, #120]	; (8008b84 <eMBMasterInit+0xc0>)
 8008b0a:	4a1f      	ldr	r2, [pc, #124]	; (8008b88 <eMBMasterInit+0xc4>)
 8008b0c:	601a      	str	r2, [r3, #0]
		pxMBMasterPortCBTimerExpired = xMBMasterRTUTimerExpired;
 8008b0e:	4b1f      	ldr	r3, [pc, #124]	; (8008b8c <eMBMasterInit+0xc8>)
 8008b10:	4a1f      	ldr	r2, [pc, #124]	; (8008b90 <eMBMasterInit+0xcc>)
 8008b12:	601a      	str	r2, [r3, #0]

		eStatus = eMBMasterRTUInit(ucPort, ulBaudRate, eParity);
 8008b14:	797a      	ldrb	r2, [r7, #5]
 8008b16:	79bb      	ldrb	r3, [r7, #6]
 8008b18:	6839      	ldr	r1, [r7, #0]
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f001 fe18 	bl	800a750 <eMBMasterRTUInit>
 8008b20:	4603      	mov	r3, r0
 8008b22:	73fb      	strb	r3, [r7, #15]
		break;
 8008b24:	e002      	b.n	8008b2c <eMBMasterInit+0x68>

		eStatus = eMBMasterASCIIInit(ucPort, ulBaudRate, eParity );
		break;
#endif
	default:
		eStatus = MB_EINVAL;
 8008b26:	2302      	movs	r3, #2
 8008b28:	73fb      	strb	r3, [r7, #15]
		break;
 8008b2a:	bf00      	nop
	}

	if (eStatus == MB_ENOERR)
 8008b2c:	7bfb      	ldrb	r3, [r7, #15]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d10c      	bne.n	8008b4c <eMBMasterInit+0x88>
	{
		if (!xMBMasterPortEventInit())
 8008b32:	f000 fbad 	bl	8009290 <xMBMasterPortEventInit>
 8008b36:	4603      	mov	r3, r0
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d102      	bne.n	8008b42 <eMBMasterInit+0x7e>
		{
			/* port dependent event module initalization failed. */
			eStatus = MB_EPORTERR;
 8008b3c:	2303      	movs	r3, #3
 8008b3e:	73fb      	strb	r3, [r7, #15]
 8008b40:	e002      	b.n	8008b48 <eMBMasterInit+0x84>
		}
		else
		{
			eMBState = STATE_DISABLED;
 8008b42:	4b14      	ldr	r3, [pc, #80]	; (8008b94 <eMBMasterInit+0xd0>)
 8008b44:	2201      	movs	r2, #1
 8008b46:	701a      	strb	r2, [r3, #0]
		}
		/* initialize the OS resource for modbus master. */
		vMBMasterOsResInit();
 8008b48:	f000 fc30 	bl	80093ac <vMBMasterOsResInit>
	}
	return eStatus;
 8008b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3710      	adds	r7, #16
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}
 8008b56:	bf00      	nop
 8008b58:	20004bb0 	.word	0x20004bb0
 8008b5c:	0800a7c1 	.word	0x0800a7c1
 8008b60:	20004bb4 	.word	0x20004bb4
 8008b64:	0800a7e9 	.word	0x0800a7e9
 8008b68:	20004bac 	.word	0x20004bac
 8008b6c:	0800a899 	.word	0x0800a899
 8008b70:	20004bb8 	.word	0x20004bb8
 8008b74:	0800a805 	.word	0x0800a805
 8008b78:	20004bbc 	.word	0x20004bbc
 8008b7c:	2000506c 	.word	0x2000506c
 8008b80:	0800a96d 	.word	0x0800a96d
 8008b84:	20005068 	.word	0x20005068
 8008b88:	0800aa61 	.word	0x0800aa61
 8008b8c:	20005070 	.word	0x20005070
 8008b90:	0800ab39 	.word	0x0800ab39
 8008b94:	20000094 	.word	0x20000094

08008b98 <eMBMasterEnable>:
    return eStatus;
}

eMBErrorCode
eMBMasterEnable( void )
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b082      	sub	sp, #8
 8008b9c:	af00      	add	r7, sp, #0
    eMBErrorCode    eStatus = MB_ENOERR;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	71fb      	strb	r3, [r7, #7]

    if( eMBState == STATE_DISABLED )
 8008ba2:	4b09      	ldr	r3, [pc, #36]	; (8008bc8 <eMBMasterEnable+0x30>)
 8008ba4:	781b      	ldrb	r3, [r3, #0]
 8008ba6:	2b01      	cmp	r3, #1
 8008ba8:	d106      	bne.n	8008bb8 <eMBMasterEnable+0x20>
    {
        /* Activate the protocol stack. */
        pvMBMasterFrameStartCur(  );
 8008baa:	4b08      	ldr	r3, [pc, #32]	; (8008bcc <eMBMasterEnable+0x34>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 8008bb0:	4b05      	ldr	r3, [pc, #20]	; (8008bc8 <eMBMasterEnable+0x30>)
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	701a      	strb	r2, [r3, #0]
 8008bb6:	e001      	b.n	8008bbc <eMBMasterEnable+0x24>
    }
    else
    {
        eStatus = MB_EILLSTATE;
 8008bb8:	2306      	movs	r3, #6
 8008bba:	71fb      	strb	r3, [r7, #7]
    }
    return eStatus;
 8008bbc:	79fb      	ldrb	r3, [r7, #7]
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3708      	adds	r7, #8
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}
 8008bc6:	bf00      	nop
 8008bc8:	20000094 	.word	0x20000094
 8008bcc:	20004bb0 	.word	0x20004bb0

08008bd0 <eMBMasterPoll>:
    }
}

eMBErrorCode
eMBMasterPoll( void )
{
 8008bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bd2:	b085      	sub	sp, #20
 8008bd4:	af00      	add	r7, sp, #0
    static UCHAR    ucFunctionCode;
    static USHORT   usLength;
    static eMBException eException;

    int             i , j;
    eMBErrorCode    eStatus = MB_ENOERR;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	71fb      	strb	r3, [r7, #7]
    eMBMasterEventType    eEvent;
    eMBMasterErrorEventType errorType;

    /* Check if the protocol stack is ready. */
    if(( eMBState != STATE_ENABLED ) && ( eMBState != STATE_ESTABLISHED))
 8008bda:	4b9b      	ldr	r3, [pc, #620]	; (8008e48 <eMBMasterPoll+0x278>)
 8008bdc:	781b      	ldrb	r3, [r3, #0]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d005      	beq.n	8008bee <eMBMasterPoll+0x1e>
 8008be2:	4b99      	ldr	r3, [pc, #612]	; (8008e48 <eMBMasterPoll+0x278>)
 8008be4:	781b      	ldrb	r3, [r3, #0]
 8008be6:	2b03      	cmp	r3, #3
 8008be8:	d001      	beq.n	8008bee <eMBMasterPoll+0x1e>
    {
        return MB_EILLSTATE;
 8008bea:	2306      	movs	r3, #6
 8008bec:	e127      	b.n	8008e3e <eMBMasterPoll+0x26e>
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBMasterPortEventGet( &eEvent ) == TRUE )
 8008bee:	1d3b      	adds	r3, r7, #4
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f000 fb89 	bl	8009308 <xMBMasterPortEventGet>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	2b01      	cmp	r3, #1
 8008bfa:	f040 811c 	bne.w	8008e36 <eMBMasterPoll+0x266>
    {
        switch ( eEvent )
 8008bfe:	88bb      	ldrh	r3, [r7, #4]
 8008c00:	3b01      	subs	r3, #1
 8008c02:	2b0f      	cmp	r3, #15
 8008c04:	f200 8119 	bhi.w	8008e3a <eMBMasterPoll+0x26a>
 8008c08:	a201      	add	r2, pc, #4	; (adr r2, 8008c10 <eMBMasterPoll+0x40>)
 8008c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c0e:	bf00      	nop
 8008c10:	08008c51 	.word	0x08008c51
 8008c14:	08008c59 	.word	0x08008c59
 8008c18:	08008e3b 	.word	0x08008e3b
 8008c1c:	08008c97 	.word	0x08008c97
 8008c20:	08008e3b 	.word	0x08008e3b
 8008c24:	08008e3b 	.word	0x08008e3b
 8008c28:	08008e3b 	.word	0x08008e3b
 8008c2c:	08008d8b 	.word	0x08008d8b
 8008c30:	08008e3b 	.word	0x08008e3b
 8008c34:	08008e3b 	.word	0x08008e3b
 8008c38:	08008e3b 	.word	0x08008e3b
 8008c3c:	08008e3b 	.word	0x08008e3b
 8008c40:	08008e3b 	.word	0x08008e3b
 8008c44:	08008e3b 	.word	0x08008e3b
 8008c48:	08008e3b 	.word	0x08008e3b
 8008c4c:	08008db5 	.word	0x08008db5
        {
        case EV_MASTER_READY:
            eMBState = STATE_ESTABLISHED;
 8008c50:	4b7d      	ldr	r3, [pc, #500]	; (8008e48 <eMBMasterPoll+0x278>)
 8008c52:	2203      	movs	r2, #3
 8008c54:	701a      	strb	r2, [r3, #0]
            break;
 8008c56:	e0f1      	b.n	8008e3c <eMBMasterPoll+0x26c>

        case EV_MASTER_FRAME_RECEIVED:
            eStatus = peMBMasterFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 8008c58:	4b7c      	ldr	r3, [pc, #496]	; (8008e4c <eMBMasterPoll+0x27c>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4a7c      	ldr	r2, [pc, #496]	; (8008e50 <eMBMasterPoll+0x280>)
 8008c5e:	497d      	ldr	r1, [pc, #500]	; (8008e54 <eMBMasterPoll+0x284>)
 8008c60:	487d      	ldr	r0, [pc, #500]	; (8008e58 <eMBMasterPoll+0x288>)
 8008c62:	4798      	blx	r3
 8008c64:	4603      	mov	r3, r0
 8008c66:	71fb      	strb	r3, [r7, #7]
            /* Check if the frame is for us. If not ,send an error process event. */
            if ( ( eStatus == MB_ENOERR ) && ( ucRcvAddress == ucMBMasterGetDestAddress() ) )
 8008c68:	79fb      	ldrb	r3, [r7, #7]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d10c      	bne.n	8008c88 <eMBMasterPoll+0xb8>
 8008c6e:	f000 f90d 	bl	8008e8c <ucMBMasterGetDestAddress>
 8008c72:	4603      	mov	r3, r0
 8008c74:	461a      	mov	r2, r3
 8008c76:	4b78      	ldr	r3, [pc, #480]	; (8008e58 <eMBMasterPoll+0x288>)
 8008c78:	781b      	ldrb	r3, [r3, #0]
 8008c7a:	429a      	cmp	r2, r3
 8008c7c:	d104      	bne.n	8008c88 <eMBMasterPoll+0xb8>
            {
                ( void ) xMBMasterPortEventPost( EV_MASTER_EXECUTE );
 8008c7e:	2004      	movs	r0, #4
 8008c80:	f000 fb18 	bl	80092b4 <xMBMasterPortEventPost>
 8008c84:	bf00      	nop
            else
            {
                vMBMasterSetErrorType(EV_ERROR_RECEIVE_DATA);
                ( void ) xMBMasterPortEventPost( EV_MASTER_ERROR_PROCESS );
            }
            break;
 8008c86:	e0d9      	b.n	8008e3c <eMBMasterPoll+0x26c>
                vMBMasterSetErrorType(EV_ERROR_RECEIVE_DATA);
 8008c88:	2001      	movs	r0, #1
 8008c8a:	f000 f927 	bl	8008edc <vMBMasterSetErrorType>
                ( void ) xMBMasterPortEventPost( EV_MASTER_ERROR_PROCESS );
 8008c8e:	2010      	movs	r0, #16
 8008c90:	f000 fb10 	bl	80092b4 <xMBMasterPortEventPost>
            break;
 8008c94:	e0d2      	b.n	8008e3c <eMBMasterPoll+0x26c>

        case EV_MASTER_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 8008c96:	4b6f      	ldr	r3, [pc, #444]	; (8008e54 <eMBMasterPoll+0x284>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	781a      	ldrb	r2, [r3, #0]
 8008c9c:	4b6f      	ldr	r3, [pc, #444]	; (8008e5c <eMBMasterPoll+0x28c>)
 8008c9e:	701a      	strb	r2, [r3, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 8008ca0:	4b6f      	ldr	r3, [pc, #444]	; (8008e60 <eMBMasterPoll+0x290>)
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	701a      	strb	r2, [r3, #0]
            /* If receive frame has exception .The receive function code highest bit is 1.*/
            if(ucFunctionCode >> 7) {
 8008ca6:	4b6d      	ldr	r3, [pc, #436]	; (8008e5c <eMBMasterPoll+0x28c>)
 8008ca8:	781b      	ldrb	r3, [r3, #0]
 8008caa:	b25b      	sxtb	r3, r3
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	da06      	bge.n	8008cbe <eMBMasterPoll+0xee>
            	eException = (eMBException)ucMBFrame[MB_PDU_DATA_OFF];
 8008cb0:	4b68      	ldr	r3, [pc, #416]	; (8008e54 <eMBMasterPoll+0x284>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	3301      	adds	r3, #1
 8008cb6:	781a      	ldrb	r2, [r3, #0]
 8008cb8:	4b69      	ldr	r3, [pc, #420]	; (8008e60 <eMBMasterPoll+0x290>)
 8008cba:	701a      	strb	r2, [r3, #0]
 8008cbc:	e055      	b.n	8008d6a <eMBMasterPoll+0x19a>
            }
			else
			{
				for (i = 0; i < MB_FUNC_HANDLERS_MAX; i++)
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	60fb      	str	r3, [r7, #12]
 8008cc2:	e04d      	b.n	8008d60 <eMBMasterPoll+0x190>
				{
					/* No more function handlers registered. Abort. */
					if (xMasterFuncHandlers[i].ucFunctionCode == 0)	{
 8008cc4:	4a67      	ldr	r2, [pc, #412]	; (8008e64 <eMBMasterPoll+0x294>)
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d04b      	beq.n	8008d68 <eMBMasterPoll+0x198>
						break;
					}
					else if (xMasterFuncHandlers[i].ucFunctionCode == ucFunctionCode) {
 8008cd0:	4a64      	ldr	r2, [pc, #400]	; (8008e64 <eMBMasterPoll+0x294>)
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8008cd8:	4b60      	ldr	r3, [pc, #384]	; (8008e5c <eMBMasterPoll+0x28c>)
 8008cda:	781b      	ldrb	r3, [r3, #0]
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d13c      	bne.n	8008d5a <eMBMasterPoll+0x18a>
						vMBMasterSetCBRunInMasterMode(TRUE);
 8008ce0:	2001      	movs	r0, #1
 8008ce2:	f000 f8c3 	bl	8008e6c <vMBMasterSetCBRunInMasterMode>
						/* If master request is broadcast,
						 * the master need execute function for all slave.
						 */
						if ( xMBMasterRequestIsBroadcast() ) {
 8008ce6:	f001 fff1 	bl	800accc <xMBMasterRequestIsBroadcast>
 8008cea:	4603      	mov	r3, r0
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d022      	beq.n	8008d36 <eMBMasterPoll+0x166>
							usLength = usMBMasterGetPDUSndLength();
 8008cf0:	f001 ffe0 	bl	800acb4 <usMBMasterGetPDUSndLength>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	461a      	mov	r2, r3
 8008cf8:	4b55      	ldr	r3, [pc, #340]	; (8008e50 <eMBMasterPoll+0x280>)
 8008cfa:	801a      	strh	r2, [r3, #0]
							for(j = 1; j <= MB_MASTER_TOTAL_SLAVE_NUM; j++){
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	60bb      	str	r3, [r7, #8]
 8008d00:	e015      	b.n	8008d2e <eMBMasterPoll+0x15e>
								vMBMasterSetDestAddress(j);
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	b2db      	uxtb	r3, r3
 8008d06:	4618      	mov	r0, r3
 8008d08:	f000 f8cc 	bl	8008ea4 <vMBMasterSetDestAddress>
								eException = xMasterFuncHandlers[i].pxHandler(ucMBFrame, &usLength);
 8008d0c:	4a55      	ldr	r2, [pc, #340]	; (8008e64 <eMBMasterPoll+0x294>)
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	00db      	lsls	r3, r3, #3
 8008d12:	4413      	add	r3, r2
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	4a4f      	ldr	r2, [pc, #316]	; (8008e54 <eMBMasterPoll+0x284>)
 8008d18:	6812      	ldr	r2, [r2, #0]
 8008d1a:	494d      	ldr	r1, [pc, #308]	; (8008e50 <eMBMasterPoll+0x280>)
 8008d1c:	4610      	mov	r0, r2
 8008d1e:	4798      	blx	r3
 8008d20:	4603      	mov	r3, r0
 8008d22:	461a      	mov	r2, r3
 8008d24:	4b4e      	ldr	r3, [pc, #312]	; (8008e60 <eMBMasterPoll+0x290>)
 8008d26:	701a      	strb	r2, [r3, #0]
							for(j = 1; j <= MB_MASTER_TOTAL_SLAVE_NUM; j++){
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	3301      	adds	r3, #1
 8008d2c:	60bb      	str	r3, [r7, #8]
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	2b10      	cmp	r3, #16
 8008d32:	dde6      	ble.n	8008d02 <eMBMasterPoll+0x132>
 8008d34:	e00d      	b.n	8008d52 <eMBMasterPoll+0x182>
							}
						}
						else {
							eException = xMasterFuncHandlers[i].pxHandler(ucMBFrame, &usLength);
 8008d36:	4a4b      	ldr	r2, [pc, #300]	; (8008e64 <eMBMasterPoll+0x294>)
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	00db      	lsls	r3, r3, #3
 8008d3c:	4413      	add	r3, r2
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	4a44      	ldr	r2, [pc, #272]	; (8008e54 <eMBMasterPoll+0x284>)
 8008d42:	6812      	ldr	r2, [r2, #0]
 8008d44:	4942      	ldr	r1, [pc, #264]	; (8008e50 <eMBMasterPoll+0x280>)
 8008d46:	4610      	mov	r0, r2
 8008d48:	4798      	blx	r3
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	461a      	mov	r2, r3
 8008d4e:	4b44      	ldr	r3, [pc, #272]	; (8008e60 <eMBMasterPoll+0x290>)
 8008d50:	701a      	strb	r2, [r3, #0]
						}
						vMBMasterSetCBRunInMasterMode(FALSE);
 8008d52:	2000      	movs	r0, #0
 8008d54:	f000 f88a 	bl	8008e6c <vMBMasterSetCBRunInMasterMode>
						break;
 8008d58:	e007      	b.n	8008d6a <eMBMasterPoll+0x19a>
				for (i = 0; i < MB_FUNC_HANDLERS_MAX; i++)
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	3301      	adds	r3, #1
 8008d5e:	60fb      	str	r3, [r7, #12]
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	2b0f      	cmp	r3, #15
 8008d64:	ddae      	ble.n	8008cc4 <eMBMasterPoll+0xf4>
 8008d66:	e000      	b.n	8008d6a <eMBMasterPoll+0x19a>
						break;
 8008d68:	bf00      	nop
					}
				}
			}
            /* If master has exception ,Master will send error process.Otherwise the Master is idle.*/
            if (eException != MB_EX_NONE) {
 8008d6a:	4b3d      	ldr	r3, [pc, #244]	; (8008e60 <eMBMasterPoll+0x290>)
 8008d6c:	781b      	ldrb	r3, [r3, #0]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d006      	beq.n	8008d80 <eMBMasterPoll+0x1b0>
            	vMBMasterSetErrorType(EV_ERROR_EXECUTE_FUNCTION);
 8008d72:	2002      	movs	r0, #2
 8008d74:	f000 f8b2 	bl	8008edc <vMBMasterSetErrorType>
            	( void ) xMBMasterPortEventPost( EV_MASTER_ERROR_PROCESS );
 8008d78:	2010      	movs	r0, #16
 8008d7a:	f000 fa9b 	bl	80092b4 <xMBMasterPortEventPost>
            }
            else {
            	vMBMasterCBRequestScuuess( );	//post event to request function that is being called
            	vMBMasterRunResRelease( );
            }
            break;
 8008d7e:	e05d      	b.n	8008e3c <eMBMasterPoll+0x26c>
            	vMBMasterCBRequestScuuess( );	//post event to request function that is being called
 8008d80:	f000 fb92 	bl	80094a8 <vMBMasterCBRequestScuuess>
            	vMBMasterRunResRelease( );
 8008d84:	f000 fb44 	bl	8009410 <vMBMasterRunResRelease>
            break;
 8008d88:	e058      	b.n	8008e3c <eMBMasterPoll+0x26c>

        case EV_MASTER_FRAME_SENT:
        	/* Master is busy now. */
        	vMBMasterGetPDUSndBuf( &ucMBFrame );
 8008d8a:	4832      	ldr	r0, [pc, #200]	; (8008e54 <eMBMasterPoll+0x284>)
 8008d8c:	f001 ff72 	bl	800ac74 <vMBMasterGetPDUSndBuf>
			eStatus = peMBMasterFrameSendCur( ucMBMasterGetDestAddress(), ucMBFrame, usMBMasterGetPDUSndLength() );
 8008d90:	4b35      	ldr	r3, [pc, #212]	; (8008e68 <eMBMasterPoll+0x298>)
 8008d92:	681c      	ldr	r4, [r3, #0]
 8008d94:	f000 f87a 	bl	8008e8c <ucMBMasterGetDestAddress>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	461e      	mov	r6, r3
 8008d9c:	4b2d      	ldr	r3, [pc, #180]	; (8008e54 <eMBMasterPoll+0x284>)
 8008d9e:	681d      	ldr	r5, [r3, #0]
 8008da0:	f001 ff88 	bl	800acb4 <usMBMasterGetPDUSndLength>
 8008da4:	4603      	mov	r3, r0
 8008da6:	461a      	mov	r2, r3
 8008da8:	4629      	mov	r1, r5
 8008daa:	4630      	mov	r0, r6
 8008dac:	47a0      	blx	r4
 8008dae:	4603      	mov	r3, r0
 8008db0:	71fb      	strb	r3, [r7, #7]
            break;
 8008db2:	e043      	b.n	8008e3c <eMBMasterPoll+0x26c>

        case EV_MASTER_ERROR_PROCESS:
        	/* Execute specified error process callback function. */
			errorType = eMBMasterGetErrorType();
 8008db4:	f000 f886 	bl	8008ec4 <eMBMasterGetErrorType>
 8008db8:	4603      	mov	r3, r0
 8008dba:	71bb      	strb	r3, [r7, #6]
			vMBMasterGetPDUSndBuf( &ucMBFrame );
 8008dbc:	4825      	ldr	r0, [pc, #148]	; (8008e54 <eMBMasterPoll+0x284>)
 8008dbe:	f001 ff59 	bl	800ac74 <vMBMasterGetPDUSndBuf>
			switch (errorType) {
 8008dc2:	79bb      	ldrb	r3, [r7, #6]
 8008dc4:	2b02      	cmp	r3, #2
 8008dc6:	d024      	beq.n	8008e12 <eMBMasterPoll+0x242>
 8008dc8:	2b02      	cmp	r3, #2
 8008dca:	dc31      	bgt.n	8008e30 <eMBMasterPoll+0x260>
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d002      	beq.n	8008dd6 <eMBMasterPoll+0x206>
 8008dd0:	2b01      	cmp	r3, #1
 8008dd2:	d00f      	beq.n	8008df4 <eMBMasterPoll+0x224>
 8008dd4:	e02c      	b.n	8008e30 <eMBMasterPoll+0x260>
			case EV_ERROR_RESPOND_TIMEOUT:
				vMBMasterErrorCBRespondTimeout(ucMBMasterGetDestAddress(),
 8008dd6:	f000 f859 	bl	8008e8c <ucMBMasterGetDestAddress>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	461d      	mov	r5, r3
 8008dde:	4b1d      	ldr	r3, [pc, #116]	; (8008e54 <eMBMasterPoll+0x284>)
 8008de0:	681c      	ldr	r4, [r3, #0]
 8008de2:	f001 ff67 	bl	800acb4 <usMBMasterGetPDUSndLength>
 8008de6:	4603      	mov	r3, r0
 8008de8:	461a      	mov	r2, r3
 8008dea:	4621      	mov	r1, r4
 8008dec:	4628      	mov	r0, r5
 8008dee:	f000 fb1d 	bl	800942c <vMBMasterErrorCBRespondTimeout>
						ucMBFrame, usMBMasterGetPDUSndLength());
				break;
 8008df2:	e01d      	b.n	8008e30 <eMBMasterPoll+0x260>
			case EV_ERROR_RECEIVE_DATA:
				vMBMasterErrorCBReceiveData(ucMBMasterGetDestAddress(),
 8008df4:	f000 f84a 	bl	8008e8c <ucMBMasterGetDestAddress>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	461d      	mov	r5, r3
 8008dfc:	4b15      	ldr	r3, [pc, #84]	; (8008e54 <eMBMasterPoll+0x284>)
 8008dfe:	681c      	ldr	r4, [r3, #0]
 8008e00:	f001 ff58 	bl	800acb4 <usMBMasterGetPDUSndLength>
 8008e04:	4603      	mov	r3, r0
 8008e06:	461a      	mov	r2, r3
 8008e08:	4621      	mov	r1, r4
 8008e0a:	4628      	mov	r0, r5
 8008e0c:	f000 fb22 	bl	8009454 <vMBMasterErrorCBReceiveData>
						ucMBFrame, usMBMasterGetPDUSndLength());
				break;
 8008e10:	e00e      	b.n	8008e30 <eMBMasterPoll+0x260>
			case EV_ERROR_EXECUTE_FUNCTION:
				vMBMasterErrorCBExecuteFunction(ucMBMasterGetDestAddress(),
 8008e12:	f000 f83b 	bl	8008e8c <ucMBMasterGetDestAddress>
 8008e16:	4603      	mov	r3, r0
 8008e18:	461d      	mov	r5, r3
 8008e1a:	4b0e      	ldr	r3, [pc, #56]	; (8008e54 <eMBMasterPoll+0x284>)
 8008e1c:	681c      	ldr	r4, [r3, #0]
 8008e1e:	f001 ff49 	bl	800acb4 <usMBMasterGetPDUSndLength>
 8008e22:	4603      	mov	r3, r0
 8008e24:	461a      	mov	r2, r3
 8008e26:	4621      	mov	r1, r4
 8008e28:	4628      	mov	r0, r5
 8008e2a:	f000 fb27 	bl	800947c <vMBMasterErrorCBExecuteFunction>
						ucMBFrame, usMBMasterGetPDUSndLength());
				break;
 8008e2e:	bf00      	nop
			}
			vMBMasterRunResRelease();
 8008e30:	f000 faee 	bl	8009410 <vMBMasterRunResRelease>
        	break;
 8008e34:	e002      	b.n	8008e3c <eMBMasterPoll+0x26c>
            
        default:
            break;
        }

    }
 8008e36:	bf00      	nop
 8008e38:	e000      	b.n	8008e3c <eMBMasterPoll+0x26c>
            break;
 8008e3a:	bf00      	nop
    //return MB_ENOERR;
    return eStatus;
 8008e3c:	79fb      	ldrb	r3, [r7, #7]
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3714      	adds	r7, #20
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e46:	bf00      	nop
 8008e48:	20000094 	.word	0x20000094
 8008e4c:	20004bb8 	.word	0x20004bb8
 8008e50:	20004bc8 	.word	0x20004bc8
 8008e54:	20004bc4 	.word	0x20004bc4
 8008e58:	20004bc0 	.word	0x20004bc0
 8008e5c:	20004bca 	.word	0x20004bca
 8008e60:	20004bcb 	.word	0x20004bcb
 8008e64:	20000098 	.word	0x20000098
 8008e68:	20004bac 	.word	0x20004bac

08008e6c <vMBMasterSetCBRunInMasterMode>:
{
	return xMBRunInMasterMode;
}
/* Set whether the Modbus Master is run in master mode.*/
void vMBMasterSetCBRunInMasterMode( BOOL IsMasterMode )
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b083      	sub	sp, #12
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	4603      	mov	r3, r0
 8008e74:	71fb      	strb	r3, [r7, #7]
	xMBRunInMasterMode = IsMasterMode;
 8008e76:	4a04      	ldr	r2, [pc, #16]	; (8008e88 <vMBMasterSetCBRunInMasterMode+0x1c>)
 8008e78:	79fb      	ldrb	r3, [r7, #7]
 8008e7a:	7013      	strb	r3, [r2, #0]
}
 8008e7c:	bf00      	nop
 8008e7e:	370c      	adds	r7, #12
 8008e80:	46bd      	mov	sp, r7
 8008e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e86:	4770      	bx	lr
 8008e88:	20004ba9 	.word	0x20004ba9

08008e8c <ucMBMasterGetDestAddress>:
/* Get Modbus Master send destination address. */
UCHAR ucMBMasterGetDestAddress( void )
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	af00      	add	r7, sp, #0
	return ucMBMasterDestAddress;
 8008e90:	4b03      	ldr	r3, [pc, #12]	; (8008ea0 <ucMBMasterGetDestAddress+0x14>)
 8008e92:	781b      	ldrb	r3, [r3, #0]
 }
 8008e94:	4618      	mov	r0, r3
 8008e96:	46bd      	mov	sp, r7
 8008e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9c:	4770      	bx	lr
 8008e9e:	bf00      	nop
 8008ea0:	20004ba8 	.word	0x20004ba8

08008ea4 <vMBMasterSetDestAddress>:
/* Set Modbus Master send destination address. */
void vMBMasterSetDestAddress( UCHAR Address )
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b083      	sub	sp, #12
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	4603      	mov	r3, r0
 8008eac:	71fb      	strb	r3, [r7, #7]
	ucMBMasterDestAddress = Address;
 8008eae:	4a04      	ldr	r2, [pc, #16]	; (8008ec0 <vMBMasterSetDestAddress+0x1c>)
 8008eb0:	79fb      	ldrb	r3, [r7, #7]
 8008eb2:	7013      	strb	r3, [r2, #0]
}
 8008eb4:	bf00      	nop
 8008eb6:	370c      	adds	r7, #12
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr
 8008ec0:	20004ba8 	.word	0x20004ba8

08008ec4 <eMBMasterGetErrorType>:
/* Get Modbus Master current error event type. */
eMBMasterErrorEventType eMBMasterGetErrorType( void )
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	af00      	add	r7, sp, #0
	return eMBMasterCurErrorType;
 8008ec8:	4b03      	ldr	r3, [pc, #12]	; (8008ed8 <eMBMasterGetErrorType+0x14>)
 8008eca:	781b      	ldrb	r3, [r3, #0]
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed4:	4770      	bx	lr
 8008ed6:	bf00      	nop
 8008ed8:	20004baa 	.word	0x20004baa

08008edc <vMBMasterSetErrorType>:
/* Set Modbus Master current error event type. */
void vMBMasterSetErrorType( eMBMasterErrorEventType errorType )
{
 8008edc:	b480      	push	{r7}
 8008ede:	b083      	sub	sp, #12
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	71fb      	strb	r3, [r7, #7]
	eMBMasterCurErrorType = errorType;
 8008ee6:	4a04      	ldr	r2, [pc, #16]	; (8008ef8 <vMBMasterSetErrorType+0x1c>)
 8008ee8:	79fb      	ldrb	r3, [r7, #7]
 8008eea:	7013      	strb	r3, [r2, #0]
}
 8008eec:	bf00      	nop
 8008eee:	370c      	adds	r7, #12
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef6:	4770      	bx	lr
 8008ef8:	20004baa 	.word	0x20004baa

08008efc <vInitMBTask>:
TaskHandle_t MasterMonitorHandle = NULL;
TaskHandle_t MasterPollHandle = NULL;
TaskHandle_t SlavePollHandle = NULL;
TaskHandle_t LedTaskHandle = NULL;

void vInitMBTask(void){
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b088      	sub	sp, #32
 8008f00:	af02      	add	r7, sp, #8
	BaseType_t status;

#if MB_MASTER_RTU_ENABLED
	status = xTaskCreate(mastermonitor_task, "master monitor task", 600, NULL, 2, &MasterMonitorHandle);
 8008f02:	4b39      	ldr	r3, [pc, #228]	; (8008fe8 <vInitMBTask+0xec>)
 8008f04:	9301      	str	r3, [sp, #4]
 8008f06:	2302      	movs	r3, #2
 8008f08:	9300      	str	r3, [sp, #0]
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8008f10:	4936      	ldr	r1, [pc, #216]	; (8008fec <vInitMBTask+0xf0>)
 8008f12:	4837      	ldr	r0, [pc, #220]	; (8008ff0 <vInitMBTask+0xf4>)
 8008f14:	f7fc fab9 	bl	800548a <xTaskCreate>
 8008f18:	6178      	str	r0, [r7, #20]
	configASSERT(status == pdPASS);
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	2b01      	cmp	r3, #1
 8008f1e:	d00c      	beq.n	8008f3a <vInitMBTask+0x3e>
	__asm volatile
 8008f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f24:	b672      	cpsid	i
 8008f26:	f383 8811 	msr	BASEPRI, r3
 8008f2a:	f3bf 8f6f 	isb	sy
 8008f2e:	f3bf 8f4f 	dsb	sy
 8008f32:	b662      	cpsie	i
 8008f34:	613b      	str	r3, [r7, #16]
}
 8008f36:	bf00      	nop
 8008f38:	e7fe      	b.n	8008f38 <vInitMBTask+0x3c>

	status = xTaskCreate(masterpoll_task, "master poll task", 600, NULL, 3, &MasterPollHandle);
 8008f3a:	4b2e      	ldr	r3, [pc, #184]	; (8008ff4 <vInitMBTask+0xf8>)
 8008f3c:	9301      	str	r3, [sp, #4]
 8008f3e:	2303      	movs	r3, #3
 8008f40:	9300      	str	r3, [sp, #0]
 8008f42:	2300      	movs	r3, #0
 8008f44:	f44f 7216 	mov.w	r2, #600	; 0x258
 8008f48:	492b      	ldr	r1, [pc, #172]	; (8008ff8 <vInitMBTask+0xfc>)
 8008f4a:	482c      	ldr	r0, [pc, #176]	; (8008ffc <vInitMBTask+0x100>)
 8008f4c:	f7fc fa9d 	bl	800548a <xTaskCreate>
 8008f50:	6178      	str	r0, [r7, #20]
	configASSERT(status == pdPASS);
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	2b01      	cmp	r3, #1
 8008f56:	d00c      	beq.n	8008f72 <vInitMBTask+0x76>
	__asm volatile
 8008f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f5c:	b672      	cpsid	i
 8008f5e:	f383 8811 	msr	BASEPRI, r3
 8008f62:	f3bf 8f6f 	isb	sy
 8008f66:	f3bf 8f4f 	dsb	sy
 8008f6a:	b662      	cpsie	i
 8008f6c:	60fb      	str	r3, [r7, #12]
}
 8008f6e:	bf00      	nop
 8008f70:	e7fe      	b.n	8008f70 <vInitMBTask+0x74>
#endif

#if MB_SLAVE_RTU_ENABLED

	status = xTaskCreate(slavepoll_task, "slave poll task", 600, NULL, 2, &SlavePollHandle);
 8008f72:	4b23      	ldr	r3, [pc, #140]	; (8009000 <vInitMBTask+0x104>)
 8008f74:	9301      	str	r3, [sp, #4]
 8008f76:	2302      	movs	r3, #2
 8008f78:	9300      	str	r3, [sp, #0]
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8008f80:	4920      	ldr	r1, [pc, #128]	; (8009004 <vInitMBTask+0x108>)
 8008f82:	4821      	ldr	r0, [pc, #132]	; (8009008 <vInitMBTask+0x10c>)
 8008f84:	f7fc fa81 	bl	800548a <xTaskCreate>
 8008f88:	6178      	str	r0, [r7, #20]
	configASSERT(status == pdPASS);
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	2b01      	cmp	r3, #1
 8008f8e:	d00c      	beq.n	8008faa <vInitMBTask+0xae>
	__asm volatile
 8008f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f94:	b672      	cpsid	i
 8008f96:	f383 8811 	msr	BASEPRI, r3
 8008f9a:	f3bf 8f6f 	isb	sy
 8008f9e:	f3bf 8f4f 	dsb	sy
 8008fa2:	b662      	cpsie	i
 8008fa4:	60bb      	str	r3, [r7, #8]
}
 8008fa6:	bf00      	nop
 8008fa8:	e7fe      	b.n	8008fa8 <vInitMBTask+0xac>

#endif

	status = xTaskCreate(led_task, "LED task", 200, NULL, 2, &LedTaskHandle);
 8008faa:	4b18      	ldr	r3, [pc, #96]	; (800900c <vInitMBTask+0x110>)
 8008fac:	9301      	str	r3, [sp, #4]
 8008fae:	2302      	movs	r3, #2
 8008fb0:	9300      	str	r3, [sp, #0]
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	22c8      	movs	r2, #200	; 0xc8
 8008fb6:	4916      	ldr	r1, [pc, #88]	; (8009010 <vInitMBTask+0x114>)
 8008fb8:	4816      	ldr	r0, [pc, #88]	; (8009014 <vInitMBTask+0x118>)
 8008fba:	f7fc fa66 	bl	800548a <xTaskCreate>
 8008fbe:	6178      	str	r0, [r7, #20]
	configASSERT(status == pdPASS);
 8008fc0:	697b      	ldr	r3, [r7, #20]
 8008fc2:	2b01      	cmp	r3, #1
 8008fc4:	d00c      	beq.n	8008fe0 <vInitMBTask+0xe4>
	__asm volatile
 8008fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fca:	b672      	cpsid	i
 8008fcc:	f383 8811 	msr	BASEPRI, r3
 8008fd0:	f3bf 8f6f 	isb	sy
 8008fd4:	f3bf 8f4f 	dsb	sy
 8008fd8:	b662      	cpsie	i
 8008fda:	607b      	str	r3, [r7, #4]
}
 8008fdc:	bf00      	nop
 8008fde:	e7fe      	b.n	8008fde <vInitMBTask+0xe2>
}
 8008fe0:	bf00      	nop
 8008fe2:	3718      	adds	r7, #24
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}
 8008fe8:	20004bcc 	.word	0x20004bcc
 8008fec:	0800be28 	.word	0x0800be28
 8008ff0:	08009019 	.word	0x08009019
 8008ff4:	20004bd0 	.word	0x20004bd0
 8008ff8:	0800be3c 	.word	0x0800be3c
 8008ffc:	080090a9 	.word	0x080090a9
 8009000:	20004bd4 	.word	0x20004bd4
 8009004:	0800be50 	.word	0x0800be50
 8009008:	080090d1 	.word	0x080090d1
 800900c:	20004bd8 	.word	0x20004bd8
 8009010:	0800be60 	.word	0x0800be60
 8009014:	08009141 	.word	0x08009141

08009018 <mastermonitor_task>:


USHORT usModbusUserData[10];
UCHAR  ucModbusUserData[10];

void mastermonitor_task(void*p){
 8009018:	b580      	push	{r7, lr}
 800901a:	b086      	sub	sp, #24
 800901c:	af02      	add	r7, sp, #8
 800901e:	6078      	str	r0, [r7, #4]
    eMBMasterReqErrCode    errorCode = MB_MRE_NO_ERR;
 8009020:	2300      	movs	r3, #0
 8009022:	73fb      	strb	r3, [r7, #15]
    usModbusUserData[0] = 0x1000;
 8009024:	4b1f      	ldr	r3, [pc, #124]	; (80090a4 <mastermonitor_task+0x8c>)
 8009026:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800902a:	801a      	strh	r2, [r3, #0]
    usModbusUserData[1] = 0x1111;
 800902c:	4b1d      	ldr	r3, [pc, #116]	; (80090a4 <mastermonitor_task+0x8c>)
 800902e:	f241 1211 	movw	r2, #4369	; 0x1111
 8009032:	805a      	strh	r2, [r3, #2]
    usModbusUserData[2] = 0x2222;
 8009034:	4b1b      	ldr	r3, [pc, #108]	; (80090a4 <mastermonitor_task+0x8c>)
 8009036:	f242 2222 	movw	r2, #8738	; 0x2222
 800903a:	809a      	strh	r2, [r3, #4]
    usModbusUserData[3] = 0x3333;
 800903c:	4b19      	ldr	r3, [pc, #100]	; (80090a4 <mastermonitor_task+0x8c>)
 800903e:	f243 3233 	movw	r2, #13107	; 0x3333
 8009042:	80da      	strh	r2, [r3, #6]
    usModbusUserData[4] = 0x4444;
 8009044:	4b17      	ldr	r3, [pc, #92]	; (80090a4 <mastermonitor_task+0x8c>)
 8009046:	f244 4244 	movw	r2, #17476	; 0x4444
 800904a:	811a      	strh	r2, [r3, #8]
	while(1)
	{
				//GHI 1 vào bit thứ 8 của slave modbus (function code = 05)
		        errorCode = eMBMasterReqWriteCoil(1,8,0xFF00, portMAX_DELAY);
 800904c:	f04f 33ff 	mov.w	r3, #4294967295
 8009050:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8009054:	2108      	movs	r1, #8
 8009056:	2001      	movs	r0, #1
 8009058:	f7fe fbfc 	bl	8007854 <eMBMasterReqWriteCoil>
 800905c:	4603      	mov	r3, r0
 800905e:	73fb      	strb	r3, [r7, #15]

		        //đọc 8 bit đầu tiên của slave modbus	(function code = 02)
		        errorCode = eMBMasterReqReadDiscreteInputs(1, 0, 8, portMAX_DELAY);
 8009060:	f04f 33ff 	mov.w	r3, #4294967295
 8009064:	2208      	movs	r2, #8
 8009066:	2100      	movs	r1, #0
 8009068:	2001      	movs	r0, #1
 800906a:	f7fe fd87 	bl	8007b7c <eMBMasterReqReadDiscreteInputs>
 800906e:	4603      	mov	r3, r0
 8009070:	73fb      	strb	r3, [r7, #15]

		        //Đọc 16 thanh ghi INPUT đầu tiên của slave modbus  (function code = 04)
		     	errorCode = eMBMasterReqReadInputRegister(1,0,16,portMAX_DELAY);
 8009072:	f04f 33ff 	mov.w	r3, #4294967295
 8009076:	2210      	movs	r2, #16
 8009078:	2100      	movs	r1, #0
 800907a:	2001      	movs	r0, #1
 800907c:	f7ff fa36 	bl	80084ec <eMBMasterReqReadInputRegister>
 8009080:	4603      	mov	r3, r0
 8009082:	73fb      	strb	r3, [r7, #15]

		     	//ghi vào 4 thanh ghi đầu tiên của slave modbus  (function code = 10)
		     	errorCode = eMBMasterReqWriteMultipleHoldingRegister(1,0,2,usModbusUserData,portMAX_DELAY);
 8009084:	f04f 33ff 	mov.w	r3, #4294967295
 8009088:	9300      	str	r3, [sp, #0]
 800908a:	4b06      	ldr	r3, [pc, #24]	; (80090a4 <mastermonitor_task+0x8c>)
 800908c:	2202      	movs	r2, #2
 800908e:	2100      	movs	r1, #0
 8009090:	2001      	movs	r0, #1
 8009092:	f7ff f808 	bl	80080a6 <eMBMasterReqWriteMultipleHoldingRegister>
 8009096:	4603      	mov	r3, r0
 8009098:	73fb      	strb	r3, [r7, #15]

		     	vTaskDelay(2000);
 800909a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800909e:	f7fc fb51 	bl	8005744 <vTaskDelay>
		        errorCode = eMBMasterReqWriteCoil(1,8,0xFF00, portMAX_DELAY);
 80090a2:	e7d3      	b.n	800904c <mastermonitor_task+0x34>
 80090a4:	20005080 	.word	0x20005080

080090a8 <masterpoll_task>:
	}


}

void masterpoll_task(void*p){
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b082      	sub	sp, #8
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]

    eMBMasterInit(MB_RTU, 2, 115200,  MB_PAR_EVEN);
 80090b0:	2302      	movs	r3, #2
 80090b2:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80090b6:	2102      	movs	r1, #2
 80090b8:	2000      	movs	r0, #0
 80090ba:	f7ff fd03 	bl	8008ac4 <eMBMasterInit>
    eMBMasterEnable();
 80090be:	f7ff fd6b 	bl	8008b98 <eMBMasterEnable>
    HAL_Delay(10);// delay for startup master modbus
 80090c2:	200a      	movs	r0, #10
 80090c4:	f7f8 f804 	bl	80010d0 <HAL_Delay>

	while(1)
	{
		eMBMasterPoll();
 80090c8:	f7ff fd82 	bl	8008bd0 <eMBMasterPoll>
 80090cc:	e7fc      	b.n	80090c8 <masterpoll_task+0x20>
	...

080090d0 <slavepoll_task>:
}

#define PORT_MODBUS_RTU		0


void slavepoll_task(void*p){
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b084      	sub	sp, #16
 80090d4:	af02      	add	r7, sp, #8
 80090d6:	6078      	str	r0, [r7, #4]

	  usSRegInBuf[0] 	= 0x11;
 80090d8:	4b15      	ldr	r3, [pc, #84]	; (8009130 <slavepoll_task+0x60>)
 80090da:	2211      	movs	r2, #17
 80090dc:	801a      	strh	r2, [r3, #0]
	  usSRegInBuf[1] 	= 0x22;
 80090de:	4b14      	ldr	r3, [pc, #80]	; (8009130 <slavepoll_task+0x60>)
 80090e0:	2222      	movs	r2, #34	; 0x22
 80090e2:	805a      	strh	r2, [r3, #2]
	  usSRegInBuf[2] 	= 0x33;
 80090e4:	4b12      	ldr	r3, [pc, #72]	; (8009130 <slavepoll_task+0x60>)
 80090e6:	2233      	movs	r2, #51	; 0x33
 80090e8:	809a      	strh	r2, [r3, #4]
	  usSRegInBuf[3] 	= 0x44;
 80090ea:	4b11      	ldr	r3, [pc, #68]	; (8009130 <slavepoll_task+0x60>)
 80090ec:	2244      	movs	r2, #68	; 0x44
 80090ee:	80da      	strh	r2, [r3, #6]
	  usSRegHoldBuf[0] 	= 0x1111;
 80090f0:	4b10      	ldr	r3, [pc, #64]	; (8009134 <slavepoll_task+0x64>)
 80090f2:	f241 1211 	movw	r2, #4369	; 0x1111
 80090f6:	801a      	strh	r2, [r3, #0]
	  usSRegHoldBuf[1] 	= 0x2222;
 80090f8:	4b0e      	ldr	r3, [pc, #56]	; (8009134 <slavepoll_task+0x64>)
 80090fa:	f242 2222 	movw	r2, #8738	; 0x2222
 80090fe:	805a      	strh	r2, [r3, #2]
	  ucSDiscInBuf[0] 	= 0xAA;
 8009100:	4b0d      	ldr	r3, [pc, #52]	; (8009138 <slavepoll_task+0x68>)
 8009102:	22aa      	movs	r2, #170	; 0xaa
 8009104:	701a      	strb	r2, [r3, #0]
	  ucSCoilBuf[0] 	= 0xf4;
 8009106:	4b0d      	ldr	r3, [pc, #52]	; (800913c <slavepoll_task+0x6c>)
 8009108:	22f4      	movs	r2, #244	; 0xf4
 800910a:	701a      	strb	r2, [r3, #0]

	eMBInit(MB_RTU, 1, PORT_MODBUS_RTU, 115200, MB_PAR_NONE);
 800910c:	2300      	movs	r3, #0
 800910e:	9300      	str	r3, [sp, #0]
 8009110:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8009114:	2200      	movs	r2, #0
 8009116:	2101      	movs	r1, #1
 8009118:	2000      	movs	r0, #0
 800911a:	f7ff fb75 	bl	8008808 <eMBInit>
	eMBEnable();
 800911e:	f7ff fbef 	bl	8008900 <eMBEnable>
	HAL_Delay(2);
 8009122:	2002      	movs	r0, #2
 8009124:	f7f7 ffd4 	bl	80010d0 <HAL_Delay>

	while(1){

		eMBPoll();
 8009128:	f7ff fc06 	bl	8008938 <eMBPoll>
 800912c:	e7fc      	b.n	8009128 <slavepoll_task+0x58>
 800912e:	bf00      	nop
 8009130:	200050ac 	.word	0x200050ac
 8009134:	2000509c 	.word	0x2000509c
 8009138:	20005098 	.word	0x20005098
 800913c:	20005094 	.word	0x20005094

08009140 <led_task>:

	}

}

void led_task(void*p){
 8009140:	b580      	push	{r7, lr}
 8009142:	b082      	sub	sp, #8
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]

	while(1){
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8009148:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800914c:	4803      	ldr	r0, [pc, #12]	; (800915c <led_task+0x1c>)
 800914e:	f7f8 fb1c 	bl	800178a <HAL_GPIO_TogglePin>
		vTaskDelay(500);
 8009152:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009156:	f7fc faf5 	bl	8005744 <vTaskDelay>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800915a:	e7f5      	b.n	8009148 <led_task+0x8>
 800915c:	40020400 	.word	0x40020400

08009160 <EnterCriticalSection>:

/* ----------------------- Variables ----------------------------------------*/

/* ----------------------- Start implementation -----------------------------*/
void EnterCriticalSection(void)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	af00      	add	r7, sp, #0
    taskENTER_CRITICAL();
 8009164:	f7fd fec2 	bl	8006eec <vPortEnterCritical>
}
 8009168:	bf00      	nop
 800916a:	bd80      	pop	{r7, pc}

0800916c <ExitCriticalSection>:

void ExitCriticalSection(void)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	af00      	add	r7, sp, #0
    taskEXIT_CRITICAL();
 8009170:	f7fd fef0 	bl	8006f54 <vPortExitCritical>
}
 8009174:	bf00      	nop
 8009176:	bd80      	pop	{r7, pc}

08009178 <xMBPortEventInit>:


/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortEventInit( void )
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b082      	sub	sp, #8
 800917c:	af00      	add	r7, sp, #0
	xSlaveOsEvent = xEventGroupCreate();
 800917e:	f7fb f833 	bl	80041e8 <xEventGroupCreate>
 8009182:	4603      	mov	r3, r0
 8009184:	4a0b      	ldr	r2, [pc, #44]	; (80091b4 <xMBPortEventInit+0x3c>)
 8009186:	6013      	str	r3, [r2, #0]

	configASSERT(xSlaveOsEvent != NULL);
 8009188:	4b0a      	ldr	r3, [pc, #40]	; (80091b4 <xMBPortEventInit+0x3c>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d10c      	bne.n	80091aa <xMBPortEventInit+0x32>
	__asm volatile
 8009190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009194:	b672      	cpsid	i
 8009196:	f383 8811 	msr	BASEPRI, r3
 800919a:	f3bf 8f6f 	isb	sy
 800919e:	f3bf 8f4f 	dsb	sy
 80091a2:	b662      	cpsie	i
 80091a4:	607b      	str	r3, [r7, #4]
}
 80091a6:	bf00      	nop
 80091a8:	e7fe      	b.n	80091a8 <xMBPortEventInit+0x30>

    return TRUE;
 80091aa:	2301      	movs	r3, #1
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	3708      	adds	r7, #8
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}
 80091b4:	20004bdc 	.word	0x20004bdc

080091b8 <xMBPortEventPost>:

BOOL
xMBPortEventPost( eMBEventType eEvent )
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b082      	sub	sp, #8
 80091bc:	af00      	add	r7, sp, #0
 80091be:	4603      	mov	r3, r0
 80091c0:	71fb      	strb	r3, [r7, #7]
	xEventGroupSetBits(xSlaveOsEvent, eEvent);
 80091c2:	4b06      	ldr	r3, [pc, #24]	; (80091dc <xMBPortEventPost+0x24>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	79fa      	ldrb	r2, [r7, #7]
 80091c8:	4611      	mov	r1, r2
 80091ca:	4618      	mov	r0, r3
 80091cc:	f7fb f8fc 	bl	80043c8 <xEventGroupSetBits>
    return TRUE;
 80091d0:	2301      	movs	r3, #1
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	3708      	adds	r7, #8
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}
 80091da:	bf00      	nop
 80091dc:	20004bdc 	.word	0x20004bdc

080091e0 <xMBPortEventPostFromISR>:

BOOL
xMBPortEventPostFromISR( eMBEventType eEvent )
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b084      	sub	sp, #16
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	4603      	mov	r3, r0
 80091e8:	71fb      	strb	r3, [r7, #7]
	BaseType_t xresult = pdFAIL;
 80091ea:	2300      	movs	r3, #0
 80091ec:	60fb      	str	r3, [r7, #12]
	xresult = xEventGroupSetBitsFromISR(xSlaveOsEvent, eEvent, NULL);
 80091ee:	4b08      	ldr	r3, [pc, #32]	; (8009210 <xMBPortEventPostFromISR+0x30>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	79f9      	ldrb	r1, [r7, #7]
 80091f4:	2200      	movs	r2, #0
 80091f6:	4618      	mov	r0, r3
 80091f8:	f7fb f9a4 	bl	8004544 <xEventGroupSetBitsFromISR>
 80091fc:	60f8      	str	r0, [r7, #12]
	if(xresult == pdFAIL){
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d100      	bne.n	8009206 <xMBPortEventPostFromISR+0x26>
		while(1);
 8009204:	e7fe      	b.n	8009204 <xMBPortEventPostFromISR+0x24>
	}
	return TRUE;
 8009206:	2301      	movs	r3, #1
}
 8009208:	4618      	mov	r0, r3
 800920a:	3710      	adds	r7, #16
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}
 8009210:	20004bdc 	.word	0x20004bdc

08009214 <xMBPortEventGet>:

BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b086      	sub	sp, #24
 8009218:	af02      	add	r7, sp, #8
 800921a:	6078      	str	r0, [r7, #4]
	EventBits_t recEvent;
	recEvent = xEventGroupWaitBits(	xSlaveOsEvent,
 800921c:	4b1b      	ldr	r3, [pc, #108]	; (800928c <xMBPortEventGet+0x78>)
 800921e:	6818      	ldr	r0, [r3, #0]
 8009220:	f04f 33ff 	mov.w	r3, #4294967295
 8009224:	9300      	str	r3, [sp, #0]
 8009226:	2300      	movs	r3, #0
 8009228:	2201      	movs	r2, #1
 800922a:	210f      	movs	r1, #15
 800922c:	f7fa fff6 	bl	800421c <xEventGroupWaitBits>
 8009230:	60f8      	str	r0, [r7, #12]
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	3b01      	subs	r3, #1
 8009236:	2b07      	cmp	r3, #7
 8009238:	d822      	bhi.n	8009280 <xMBPortEventGet+0x6c>
 800923a:	a201      	add	r2, pc, #4	; (adr r2, 8009240 <xMBPortEventGet+0x2c>)
 800923c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009240:	08009261 	.word	0x08009261
 8009244:	08009269 	.word	0x08009269
 8009248:	08009281 	.word	0x08009281
 800924c:	08009271 	.word	0x08009271
 8009250:	08009281 	.word	0x08009281
 8009254:	08009281 	.word	0x08009281
 8009258:	08009281 	.word	0x08009281
 800925c:	08009279 	.word	0x08009279
									portMAX_DELAY);

    switch (recEvent)
    {
    case EV_READY:
        *eEvent = EV_READY;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2201      	movs	r2, #1
 8009264:	701a      	strb	r2, [r3, #0]
        break;
 8009266:	e00b      	b.n	8009280 <xMBPortEventGet+0x6c>
    case EV_FRAME_RECEIVED:
        *eEvent = EV_FRAME_RECEIVED;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2202      	movs	r2, #2
 800926c:	701a      	strb	r2, [r3, #0]
        break;
 800926e:	e007      	b.n	8009280 <xMBPortEventGet+0x6c>
    case EV_EXECUTE:
        *eEvent = EV_EXECUTE;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2204      	movs	r2, #4
 8009274:	701a      	strb	r2, [r3, #0]
        break;
 8009276:	e003      	b.n	8009280 <xMBPortEventGet+0x6c>
    case EV_FRAME_SENT:
        *eEvent = EV_FRAME_SENT;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2208      	movs	r2, #8
 800927c:	701a      	strb	r2, [r3, #0]
        break;
 800927e:	bf00      	nop
    }
    return TRUE;
 8009280:	2301      	movs	r3, #1
}
 8009282:	4618      	mov	r0, r3
 8009284:	3710      	adds	r7, #16
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}
 800928a:	bf00      	nop
 800928c:	20004bdc 	.word	0x20004bdc

08009290 <xMBMasterPortEventInit>:
static SemaphoreHandle_t	xMasterRunRes;

/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBMasterPortEventInit( void )
{
 8009290:	b580      	push	{r7, lr}
 8009292:	af00      	add	r7, sp, #0
	xMasterOsEvent = xEventGroupCreate();
 8009294:	f7fa ffa8 	bl	80041e8 <xEventGroupCreate>
 8009298:	4603      	mov	r3, r0
 800929a:	4a05      	ldr	r2, [pc, #20]	; (80092b0 <xMBMasterPortEventInit+0x20>)
 800929c:	6013      	str	r3, [r2, #0]
	if(xMasterOsEvent == NULL) return FALSE;
 800929e:	4b04      	ldr	r3, [pc, #16]	; (80092b0 <xMBMasterPortEventInit+0x20>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d101      	bne.n	80092aa <xMBMasterPortEventInit+0x1a>
 80092a6:	2300      	movs	r3, #0
 80092a8:	e000      	b.n	80092ac <xMBMasterPortEventInit+0x1c>
	return TRUE;
 80092aa:	2301      	movs	r3, #1
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	bd80      	pop	{r7, pc}
 80092b0:	20004be0 	.word	0x20004be0

080092b4 <xMBMasterPortEventPost>:

BOOL
xMBMasterPortEventPost( eMBMasterEventType eEvent )
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b082      	sub	sp, #8
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	4603      	mov	r3, r0
 80092bc:	80fb      	strh	r3, [r7, #6]
	xEventGroupSetBits(xMasterOsEvent, eEvent);
 80092be:	4b06      	ldr	r3, [pc, #24]	; (80092d8 <xMBMasterPortEventPost+0x24>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	88fa      	ldrh	r2, [r7, #6]
 80092c4:	4611      	mov	r1, r2
 80092c6:	4618      	mov	r0, r3
 80092c8:	f7fb f87e 	bl	80043c8 <xEventGroupSetBits>
	return TRUE;
 80092cc:	2301      	movs	r3, #1
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3708      	adds	r7, #8
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}
 80092d6:	bf00      	nop
 80092d8:	20004be0 	.word	0x20004be0

080092dc <xMBMasterPortEventPostFromISR>:

BOOL
xMBMasterPortEventPostFromISR( eMBMasterEventType eEvent )
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b084      	sub	sp, #16
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	4603      	mov	r3, r0
 80092e4:	80fb      	strh	r3, [r7, #6]
	BaseType_t xresult = pdFAIL;
 80092e6:	2300      	movs	r3, #0
 80092e8:	60fb      	str	r3, [r7, #12]
	xresult = xEventGroupSetBitsFromISR(xMasterOsEvent, eEvent, NULL);
 80092ea:	4b06      	ldr	r3, [pc, #24]	; (8009304 <xMBMasterPortEventPostFromISR+0x28>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	88f9      	ldrh	r1, [r7, #6]
 80092f0:	2200      	movs	r2, #0
 80092f2:	4618      	mov	r0, r3
 80092f4:	f7fb f926 	bl	8004544 <xEventGroupSetBitsFromISR>
 80092f8:	60f8      	str	r0, [r7, #12]
	if(xresult == pdFAIL){

	}
	return TRUE;
 80092fa:	2301      	movs	r3, #1
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	3710      	adds	r7, #16
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}
 8009304:	20004be0 	.word	0x20004be0

08009308 <xMBMasterPortEventGet>:

BOOL
xMBMasterPortEventGet( eMBMasterEventType * eEvent )
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b086      	sub	sp, #24
 800930c:	af02      	add	r7, sp, #8
 800930e:	6078      	str	r0, [r7, #4]
	EventBits_t recEvent;
	recEvent = xEventGroupWaitBits(	xMasterOsEvent,
 8009310:	4b25      	ldr	r3, [pc, #148]	; (80093a8 <xMBMasterPortEventGet+0xa0>)
 8009312:	6818      	ldr	r0, [r3, #0]
 8009314:	f04f 33ff 	mov.w	r3, #4294967295
 8009318:	9300      	str	r3, [sp, #0]
 800931a:	2300      	movs	r3, #0
 800931c:	2201      	movs	r2, #1
 800931e:	211f      	movs	r1, #31
 8009320:	f7fa ff7c 	bl	800421c <xEventGroupWaitBits>
 8009324:	60f8      	str	r0, [r7, #12]
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	3b01      	subs	r3, #1
 800932a:	2b0f      	cmp	r3, #15
 800932c:	d836      	bhi.n	800939c <xMBMasterPortEventGet+0x94>
 800932e:	a201      	add	r2, pc, #4	; (adr r2, 8009334 <xMBMasterPortEventGet+0x2c>)
 8009330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009334:	08009375 	.word	0x08009375
 8009338:	0800937d 	.word	0x0800937d
 800933c:	0800939d 	.word	0x0800939d
 8009340:	08009385 	.word	0x08009385
 8009344:	0800939d 	.word	0x0800939d
 8009348:	0800939d 	.word	0x0800939d
 800934c:	0800939d 	.word	0x0800939d
 8009350:	0800938d 	.word	0x0800938d
 8009354:	0800939d 	.word	0x0800939d
 8009358:	0800939d 	.word	0x0800939d
 800935c:	0800939d 	.word	0x0800939d
 8009360:	0800939d 	.word	0x0800939d
 8009364:	0800939d 	.word	0x0800939d
 8009368:	0800939d 	.word	0x0800939d
 800936c:	0800939d 	.word	0x0800939d
 8009370:	08009395 	.word	0x08009395

    /* the enum type couldn't convert to int type */
    switch (recEvent)
    {
    case EV_MASTER_READY:
        *eEvent = EV_MASTER_READY;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2201      	movs	r2, #1
 8009378:	801a      	strh	r2, [r3, #0]
        break;
 800937a:	e00f      	b.n	800939c <xMBMasterPortEventGet+0x94>
    case EV_MASTER_FRAME_RECEIVED:
        *eEvent = EV_MASTER_FRAME_RECEIVED;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2202      	movs	r2, #2
 8009380:	801a      	strh	r2, [r3, #0]
        break;
 8009382:	e00b      	b.n	800939c <xMBMasterPortEventGet+0x94>
    case EV_MASTER_EXECUTE:
        *eEvent = EV_MASTER_EXECUTE;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2204      	movs	r2, #4
 8009388:	801a      	strh	r2, [r3, #0]
        break;
 800938a:	e007      	b.n	800939c <xMBMasterPortEventGet+0x94>
    case EV_MASTER_FRAME_SENT:
        *eEvent = EV_MASTER_FRAME_SENT;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2208      	movs	r2, #8
 8009390:	801a      	strh	r2, [r3, #0]
        break;
 8009392:	e003      	b.n	800939c <xMBMasterPortEventGet+0x94>
    case EV_MASTER_ERROR_PROCESS:
        *eEvent = EV_MASTER_ERROR_PROCESS;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2210      	movs	r2, #16
 8009398:	801a      	strh	r2, [r3, #0]
        break;
 800939a:	bf00      	nop
    }
    return TRUE;
 800939c:	2301      	movs	r3, #1
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3710      	adds	r7, #16
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}
 80093a6:	bf00      	nop
 80093a8:	20004be0 	.word	0x20004be0

080093ac <vMBMasterOsResInit>:
 * This function is initialize the OS resource for modbus master.
 * Note:The resource is define by OS.If you not use OS this function can be empty.
 *
 */
void vMBMasterOsResInit( void )
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	af00      	add	r7, sp, #0
	xMasterRunRes  = xSemaphoreCreateBinary();
 80093b0:	2203      	movs	r2, #3
 80093b2:	2100      	movs	r1, #0
 80093b4:	2001      	movs	r0, #1
 80093b6:	f7fb fa79 	bl	80048ac <xQueueGenericCreate>
 80093ba:	4603      	mov	r3, r0
 80093bc:	4a07      	ldr	r2, [pc, #28]	; (80093dc <vMBMasterOsResInit+0x30>)
 80093be:	6013      	str	r3, [r2, #0]

	if(xMasterRunRes == NULL) while (1);
 80093c0:	4b06      	ldr	r3, [pc, #24]	; (80093dc <vMBMasterOsResInit+0x30>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d100      	bne.n	80093ca <vMBMasterOsResInit+0x1e>
 80093c8:	e7fe      	b.n	80093c8 <vMBMasterOsResInit+0x1c>

	//first realse semaphore
	xSemaphoreGive(xMasterRunRes);
 80093ca:	4b04      	ldr	r3, [pc, #16]	; (80093dc <vMBMasterOsResInit+0x30>)
 80093cc:	6818      	ldr	r0, [r3, #0]
 80093ce:	2300      	movs	r3, #0
 80093d0:	2200      	movs	r2, #0
 80093d2:	2100      	movs	r1, #0
 80093d4:	f7fb fad0 	bl	8004978 <xQueueGenericSend>
	return;
 80093d8:	bf00      	nop
}
 80093da:	bd80      	pop	{r7, pc}
 80093dc:	20004be4 	.word	0x20004be4

080093e0 <xMBMasterRunResTake>:
 * @param lTimeOut the waiting time.
 *
 * @return resource taked result
 */
BOOL xMBMasterRunResTake( LONG lTimeOut )
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b082      	sub	sp, #8
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
	return (xSemaphoreTake(xMasterRunRes, lTimeOut) ? TRUE : FALSE);
 80093e8:	4b08      	ldr	r3, [pc, #32]	; (800940c <xMBMasterRunResTake+0x2c>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	687a      	ldr	r2, [r7, #4]
 80093ee:	4611      	mov	r1, r2
 80093f0:	4618      	mov	r0, r3
 80093f2:	f7fb fd4d 	bl	8004e90 <xQueueSemaphoreTake>
 80093f6:	4603      	mov	r3, r0
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	bf14      	ite	ne
 80093fc:	2301      	movne	r3, #1
 80093fe:	2300      	moveq	r3, #0
 8009400:	b2db      	uxtb	r3, r3

}
 8009402:	4618      	mov	r0, r3
 8009404:	3708      	adds	r7, #8
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}
 800940a:	bf00      	nop
 800940c:	20004be4 	.word	0x20004be4

08009410 <vMBMasterRunResRelease>:
 * This function is release Mobus Master running resource.
 * Note:The resource is define by Operating System.If you not use OS this function can be empty.
 *
 */
void vMBMasterRunResRelease( void )
{
 8009410:	b580      	push	{r7, lr}
 8009412:	af00      	add	r7, sp, #0
    /* release resource */
	xSemaphoreGive(xMasterRunRes);
 8009414:	4b04      	ldr	r3, [pc, #16]	; (8009428 <vMBMasterRunResRelease+0x18>)
 8009416:	6818      	ldr	r0, [r3, #0]
 8009418:	2300      	movs	r3, #0
 800941a:	2200      	movs	r2, #0
 800941c:	2100      	movs	r1, #0
 800941e:	f7fb faab 	bl	8004978 <xQueueGenericSend>
}
 8009422:	bf00      	nop
 8009424:	bd80      	pop	{r7, pc}
 8009426:	bf00      	nop
 8009428:	20004be4 	.word	0x20004be4

0800942c <vMBMasterErrorCBRespondTimeout>:
 * @param pucPDUData PDU buffer data
 * @param ucPDULength PDU buffer length
 *
 */
void vMBMasterErrorCBRespondTimeout(UCHAR ucDestAddress, const UCHAR* pucPDUData,
        USHORT ucPDULength) {
 800942c:	b580      	push	{r7, lr}
 800942e:	b082      	sub	sp, #8
 8009430:	af00      	add	r7, sp, #0
 8009432:	4603      	mov	r3, r0
 8009434:	6039      	str	r1, [r7, #0]
 8009436:	71fb      	strb	r3, [r7, #7]
 8009438:	4613      	mov	r3, r2
 800943a:	80bb      	strh	r3, [r7, #4]
    /**
     * @note This code is use OS's event mechanism for modbus master protocol stack.
     * If you don't use OS, you can change it.
     */
	xEventGroupSetBits(xMasterOsEvent, EV_MASTER_ERROR_RESPOND_TIMEOUT);
 800943c:	4b04      	ldr	r3, [pc, #16]	; (8009450 <vMBMasterErrorCBRespondTimeout+0x24>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	2140      	movs	r1, #64	; 0x40
 8009442:	4618      	mov	r0, r3
 8009444:	f7fa ffc0 	bl	80043c8 <xEventGroupSetBits>
    /* You can add your code under here. */

}
 8009448:	bf00      	nop
 800944a:	3708      	adds	r7, #8
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}
 8009450:	20004be0 	.word	0x20004be0

08009454 <vMBMasterErrorCBReceiveData>:
 * @param pucPDUData PDU buffer data
 * @param ucPDULength PDU buffer length
 *
 */
void vMBMasterErrorCBReceiveData(UCHAR ucDestAddress, const UCHAR* pucPDUData,
        USHORT ucPDULength) {
 8009454:	b580      	push	{r7, lr}
 8009456:	b082      	sub	sp, #8
 8009458:	af00      	add	r7, sp, #0
 800945a:	4603      	mov	r3, r0
 800945c:	6039      	str	r1, [r7, #0]
 800945e:	71fb      	strb	r3, [r7, #7]
 8009460:	4613      	mov	r3, r2
 8009462:	80bb      	strh	r3, [r7, #4]
    /**
     * @note This code is use OS's event mechanism for modbus master protocol stack.
     * If you don't use OS, you can change it.
     */
	xEventGroupSetBits(xMasterOsEvent, EV_MASTER_ERROR_RECEIVE_DATA);
 8009464:	4b04      	ldr	r3, [pc, #16]	; (8009478 <vMBMasterErrorCBReceiveData+0x24>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	2180      	movs	r1, #128	; 0x80
 800946a:	4618      	mov	r0, r3
 800946c:	f7fa ffac 	bl	80043c8 <xEventGroupSetBits>
    /* You can add your code under here. */

}
 8009470:	bf00      	nop
 8009472:	3708      	adds	r7, #8
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}
 8009478:	20004be0 	.word	0x20004be0

0800947c <vMBMasterErrorCBExecuteFunction>:
 * @param pucPDUData PDU buffer data
 * @param ucPDULength PDU buffer length
 *
 */
void vMBMasterErrorCBExecuteFunction(UCHAR ucDestAddress, const UCHAR* pucPDUData,
        USHORT ucPDULength) {
 800947c:	b580      	push	{r7, lr}
 800947e:	b082      	sub	sp, #8
 8009480:	af00      	add	r7, sp, #0
 8009482:	4603      	mov	r3, r0
 8009484:	6039      	str	r1, [r7, #0]
 8009486:	71fb      	strb	r3, [r7, #7]
 8009488:	4613      	mov	r3, r2
 800948a:	80bb      	strh	r3, [r7, #4]
    /**
     * @note This code is use OS's event mechanism for modbus master protocol stack.
     * If you don't use OS, you can change it.
     */
	xEventGroupSetBits(xMasterOsEvent, EV_MASTER_ERROR_EXECUTE_FUNCTION);
 800948c:	4b05      	ldr	r3, [pc, #20]	; (80094a4 <vMBMasterErrorCBExecuteFunction+0x28>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009494:	4618      	mov	r0, r3
 8009496:	f7fa ff97 	bl	80043c8 <xEventGroupSetBits>
    /* You can add your code under here. */

}
 800949a:	bf00      	nop
 800949c:	3708      	adds	r7, #8
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}
 80094a2:	bf00      	nop
 80094a4:	20004be0 	.word	0x20004be0

080094a8 <vMBMasterCBRequestScuuess>:
 * This is modbus master request process success callback function.
 * @note There functions will block modbus master poll while execute OS waiting.
 * So,for real-time of system.Do not execute too much waiting process.
 *
 */
void vMBMasterCBRequestScuuess( void ) {
 80094a8:	b580      	push	{r7, lr}
 80094aa:	af00      	add	r7, sp, #0
    /**
     * @note This code is use OS's event mechanism for modbus master protocol stack.
     * If you don't use OS, you can change it.EV_MASTER_PROCESS_SUCESS
     */
	xEventGroupSetBits(xMasterOsEvent, EV_MASTER_PROCESS_SUCESS);
 80094ac:	4b03      	ldr	r3, [pc, #12]	; (80094bc <vMBMasterCBRequestScuuess+0x14>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	2120      	movs	r1, #32
 80094b2:	4618      	mov	r0, r3
 80094b4:	f7fa ff88 	bl	80043c8 <xEventGroupSetBits>
    /* You can add your code under here. */

}
 80094b8:	bf00      	nop
 80094ba:	bd80      	pop	{r7, pc}
 80094bc:	20004be0 	.word	0x20004be0

080094c0 <eMBMasterWaitRequestFinish>:
 * @note If you are use OS, you can use OS's event mechanism. Otherwise you have to run
 * much user custom delay for waiting.
 *
 * @return request error code
 */
eMBMasterReqErrCode eMBMasterWaitRequestFinish( void ) {
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b084      	sub	sp, #16
 80094c4:	af02      	add	r7, sp, #8
    eMBMasterReqErrCode    eErrStatus = MB_MRE_NO_ERR;
 80094c6:	2300      	movs	r3, #0
 80094c8:	71fb      	strb	r3, [r7, #7]
    EventBits_t recvedEvent;

    recvedEvent = xEventGroupWaitBits(	xMasterOsEvent,
 80094ca:	4b17      	ldr	r3, [pc, #92]	; (8009528 <eMBMasterWaitRequestFinish+0x68>)
 80094cc:	6818      	ldr	r0, [r3, #0]
 80094ce:	f04f 33ff 	mov.w	r3, #4294967295
 80094d2:	9300      	str	r3, [sp, #0]
 80094d4:	2300      	movs	r3, #0
 80094d6:	2201      	movs	r2, #1
 80094d8:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80094dc:	f7fa fe9e 	bl	800421c <xEventGroupWaitBits>
 80094e0:	6038      	str	r0, [r7, #0]
												EV_MASTER_ERROR_EXECUTE_FUNCTION),
									pdTRUE, //clear on exit
									pdFALSE,//wait for any bits
									portMAX_DELAY);

    switch (recvedEvent)
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094e8:	d015      	beq.n	8009516 <eMBMasterWaitRequestFinish+0x56>
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094f0:	d815      	bhi.n	800951e <eMBMasterWaitRequestFinish+0x5e>
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	2b80      	cmp	r3, #128	; 0x80
 80094f6:	d00b      	beq.n	8009510 <eMBMasterWaitRequestFinish+0x50>
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	2b80      	cmp	r3, #128	; 0x80
 80094fc:	d80f      	bhi.n	800951e <eMBMasterWaitRequestFinish+0x5e>
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	2b20      	cmp	r3, #32
 8009502:	d00b      	beq.n	800951c <eMBMasterWaitRequestFinish+0x5c>
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	2b40      	cmp	r3, #64	; 0x40
 8009508:	d109      	bne.n	800951e <eMBMasterWaitRequestFinish+0x5e>
    {
			case EV_MASTER_PROCESS_SUCESS:
					break;
			case EV_MASTER_ERROR_RESPOND_TIMEOUT:
			{
					eErrStatus = MB_MRE_TIMEDOUT;
 800950a:	2304      	movs	r3, #4
 800950c:	71fb      	strb	r3, [r7, #7]
					break;
 800950e:	e006      	b.n	800951e <eMBMasterWaitRequestFinish+0x5e>
			}
			case EV_MASTER_ERROR_RECEIVE_DATA:
			{
					eErrStatus = MB_MRE_REV_DATA;
 8009510:	2303      	movs	r3, #3
 8009512:	71fb      	strb	r3, [r7, #7]
					break;
 8009514:	e003      	b.n	800951e <eMBMasterWaitRequestFinish+0x5e>
			}
			case EV_MASTER_ERROR_EXECUTE_FUNCTION:
			{
					eErrStatus = MB_MRE_EXE_FUN;
 8009516:	2306      	movs	r3, #6
 8009518:	71fb      	strb	r3, [r7, #7]
					break;
 800951a:	e000      	b.n	800951e <eMBMasterWaitRequestFinish+0x5e>
					break;
 800951c:	bf00      	nop
			}
    }
    return eErrStatus;
 800951e:	79fb      	ldrb	r3, [r7, #7]

}
 8009520:	4618      	mov	r0, r3
 8009522:	3708      	adds	r7, #8
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}
 8009528:	20004be0 	.word	0x20004be0

0800952c <vMBPortSerialEnable>:
 
/* ----------------------- Start implementation -----------------------------*/

void
vMBPortSerialEnable( BOOL xRxEnable, BOOL xTxEnable )
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b082      	sub	sp, #8
 8009530:	af00      	add	r7, sp, #0
 8009532:	4603      	mov	r3, r0
 8009534:	460a      	mov	r2, r1
 8009536:	71fb      	strb	r3, [r7, #7]
 8009538:	4613      	mov	r3, r2
 800953a:	71bb      	strb	r3, [r7, #6]
  /* If xRXEnable enable serial receive interrupts. If xTxENable enable
  * transmitter empty interrupts.
  */
  
  if (xRxEnable) {        
 800953c:	79fb      	ldrb	r3, [r7, #7]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d00e      	beq.n	8009560 <vMBPortSerialEnable+0x34>
	  SET_BIT((&huartslave)->Instance->CR1, ( USART_CR1_RXNEIE) );
 8009542:	4b20      	ldr	r3, [pc, #128]	; (80095c4 <vMBPortSerialEnable+0x98>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	681a      	ldr	r2, [r3, #0]
 8009548:	4b1e      	ldr	r3, [pc, #120]	; (80095c4 <vMBPortSerialEnable+0x98>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f042 0220 	orr.w	r2, r2, #32
 8009550:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(RE_GPIO_Port, RE_Pin, GPIO_PIN_RESET);// PC10 <=> RE..Receiver Output Enable (Low to enable)
 8009552:	2200      	movs	r2, #0
 8009554:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009558:	481b      	ldr	r0, [pc, #108]	; (80095c8 <vMBPortSerialEnable+0x9c>)
 800955a:	f7f8 f8fd 	bl	8001758 <HAL_GPIO_WritePin>
 800955e:	e00d      	b.n	800957c <vMBPortSerialEnable+0x50>
  } else {    
	 CLEAR_BIT((&huartslave)->Instance->CR1, ( USART_CR1_RXNEIE) );
 8009560:	4b18      	ldr	r3, [pc, #96]	; (80095c4 <vMBPortSerialEnable+0x98>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	681a      	ldr	r2, [r3, #0]
 8009566:	4b17      	ldr	r3, [pc, #92]	; (80095c4 <vMBPortSerialEnable+0x98>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f022 0220 	bic.w	r2, r2, #32
 800956e:	601a      	str	r2, [r3, #0]
	 HAL_GPIO_WritePin(RE_GPIO_Port, RE_Pin, GPIO_PIN_SET);
 8009570:	2201      	movs	r2, #1
 8009572:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009576:	4814      	ldr	r0, [pc, #80]	; (80095c8 <vMBPortSerialEnable+0x9c>)
 8009578:	f7f8 f8ee 	bl	8001758 <HAL_GPIO_WritePin>
  }
  if (xTxEnable) {
 800957c:	79bb      	ldrb	r3, [r7, #6]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d00e      	beq.n	80095a0 <vMBPortSerialEnable+0x74>
	  SET_BIT((&huartslave)->Instance->CR1, USART_CR1_TXEIE);
 8009582:	4b10      	ldr	r3, [pc, #64]	; (80095c4 <vMBPortSerialEnable+0x98>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	681a      	ldr	r2, [r3, #0]
 8009588:	4b0e      	ldr	r3, [pc, #56]	; (80095c4 <vMBPortSerialEnable+0x98>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009590:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(DE_GPIO_Port, DE_Pin, GPIO_PIN_SET);// PC11 <=> DE……….Driver Output Enable (high to enable)
 8009592:	2201      	movs	r2, #1
 8009594:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009598:	480b      	ldr	r0, [pc, #44]	; (80095c8 <vMBPortSerialEnable+0x9c>)
 800959a:	f7f8 f8dd 	bl	8001758 <HAL_GPIO_WritePin>
  } else {
	  CLEAR_BIT((&huartslave)->Instance->CR1, USART_CR1_TXEIE);
	  HAL_GPIO_WritePin(DE_GPIO_Port, DE_Pin, GPIO_PIN_RESET);
  }  
  
}
 800959e:	e00d      	b.n	80095bc <vMBPortSerialEnable+0x90>
	  CLEAR_BIT((&huartslave)->Instance->CR1, USART_CR1_TXEIE);
 80095a0:	4b08      	ldr	r3, [pc, #32]	; (80095c4 <vMBPortSerialEnable+0x98>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	681a      	ldr	r2, [r3, #0]
 80095a6:	4b07      	ldr	r3, [pc, #28]	; (80095c4 <vMBPortSerialEnable+0x98>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80095ae:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(DE_GPIO_Port, DE_Pin, GPIO_PIN_RESET);
 80095b0:	2200      	movs	r2, #0
 80095b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80095b6:	4804      	ldr	r0, [pc, #16]	; (80095c8 <vMBPortSerialEnable+0x9c>)
 80095b8:	f7f8 f8ce 	bl	8001758 <HAL_GPIO_WritePin>
}
 80095bc:	bf00      	nop
 80095be:	3708      	adds	r7, #8
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}
 80095c4:	20004efc 	.word	0x20004efc
 80095c8:	40020400 	.word	0x40020400

080095cc <xMBPortSerialInit>:
 
BOOL
xMBPortSerialInit( UCHAR ucPORT, ULONG ulBaudRate, UCHAR ucDataBits, eMBParity eParity )
{
 80095cc:	b480      	push	{r7}
 80095ce:	b083      	sub	sp, #12
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6039      	str	r1, [r7, #0]
 80095d4:	4611      	mov	r1, r2
 80095d6:	461a      	mov	r2, r3
 80095d8:	4603      	mov	r3, r0
 80095da:	71fb      	strb	r3, [r7, #7]
 80095dc:	460b      	mov	r3, r1
 80095de:	71bb      	strb	r3, [r7, #6]
 80095e0:	4613      	mov	r3, r2
 80095e2:	717b      	strb	r3, [r7, #5]

	/*
	 * Please note: when user uses EVEN or ODD parity the Data bit value chose
	 * in CubeMx initialize must be 9 bit
	 */
  return TRUE;
 80095e4:	2301      	movs	r3, #1
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	370c      	adds	r7, #12
 80095ea:	46bd      	mov	sp, r7
 80095ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f0:	4770      	bx	lr
	...

080095f4 <xMBPortSerialPutByte>:
 
BOOL
xMBPortSerialPutByte( CHAR ucByte )
{
 80095f4:	b480      	push	{r7}
 80095f6:	b083      	sub	sp, #12
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	4603      	mov	r3, r0
 80095fc:	71fb      	strb	r3, [r7, #7]
  /* Put a byte in the UARTs transmit buffer. This function is called
  * by the protocol stack if pxMBFrameCBTransmitterEmpty( ) has been
  * called. */
	huartslave.Instance->TDR = (uint8_t)(ucByte & 0xFFU);
 80095fe:	4b05      	ldr	r3, [pc, #20]	; (8009614 <xMBPortSerialPutByte+0x20>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	79fa      	ldrb	r2, [r7, #7]
 8009604:	629a      	str	r2, [r3, #40]	; 0x28
	return TRUE;
 8009606:	2301      	movs	r3, #1
}
 8009608:	4618      	mov	r0, r3
 800960a:	370c      	adds	r7, #12
 800960c:	46bd      	mov	sp, r7
 800960e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009612:	4770      	bx	lr
 8009614:	20004efc 	.word	0x20004efc

08009618 <xMBPortSerialGetByte>:
 
BOOL
xMBPortSerialGetByte( CHAR * pucByte )
{
 8009618:	b480      	push	{r7}
 800961a:	b083      	sub	sp, #12
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
  /* Return the byte in the UARTs receive buffer. This function is called
  * by the protocol stack after pxMBFrameCBByteReceived( ) has been called.
  */
  *pucByte = (uint8_t)(huartslave.Instance->RDR & (uint8_t)0x00FF);
 8009620:	4b06      	ldr	r3, [pc, #24]	; (800963c <xMBPortSerialGetByte+0x24>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009626:	b2da      	uxtb	r2, r3
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	701a      	strb	r2, [r3, #0]
  return TRUE;
 800962c:	2301      	movs	r3, #1
}
 800962e:	4618      	mov	r0, r3
 8009630:	370c      	adds	r7, #12
 8009632:	46bd      	mov	sp, r7
 8009634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009638:	4770      	bx	lr
 800963a:	bf00      	nop
 800963c:	20004efc 	.word	0x20004efc

08009640 <USART2_IRQHandler>:
void USART3_IRQHandler(void)

#else
void USART2_IRQHandler(void)
#endif
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b082      	sub	sp, #8
 8009644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	uint32_t isrflags   = READ_REG(huartslave.Instance->ISR);
 8009646:	4b1b      	ldr	r3, [pc, #108]	; (80096b4 <USART2_IRQHandler+0x74>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	69db      	ldr	r3, [r3, #28]
 800964c:	607b      	str	r3, [r7, #4]
	uint32_t cr1its     = READ_REG(huartslave.Instance->CR1);
 800964e:	4b19      	ldr	r3, [pc, #100]	; (80096b4 <USART2_IRQHandler+0x74>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	603b      	str	r3, [r7, #0]

    if ( ((isrflags & USART_ISR_RXNE) != 0U)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f003 0320 	and.w	r3, r3, #32
 800965c:	2b00      	cmp	r3, #0
 800965e:	d010      	beq.n	8009682 <USART2_IRQHandler+0x42>
         && ((cr1its & USART_CR1_RXNEIE) != 0U) )
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	f003 0320 	and.w	r3, r3, #32
 8009666:	2b00      	cmp	r3, #0
 8009668:	d00b      	beq.n	8009682 <USART2_IRQHandler+0x42>
    {

		  pxMBFrameCBByteReceived();	  //xMBRTUReceiveFSM() in mbrtu.c
 800966a:	4b13      	ldr	r3, [pc, #76]	; (80096b8 <USART2_IRQHandler+0x78>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	4798      	blx	r3

		  SET_BIT((&huartslave)->Instance->RQR,  USART_RQR_RXFRQ );
 8009670:	4b10      	ldr	r3, [pc, #64]	; (80096b4 <USART2_IRQHandler+0x74>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	699a      	ldr	r2, [r3, #24]
 8009676:	4b0f      	ldr	r3, [pc, #60]	; (80096b4 <USART2_IRQHandler+0x74>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f042 0208 	orr.w	r2, r2, #8
 800967e:	619a      	str	r2, [r3, #24]

		return;
 8009680:	e014      	b.n	80096ac <USART2_IRQHandler+0x6c>
    }

  if((__HAL_UART_GET_FLAG(&huartslave, UART_FLAG_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(&huartslave, UART_IT_TXE) != RESET)) {
 8009682:	4b0c      	ldr	r3, [pc, #48]	; (80096b4 <USART2_IRQHandler+0x74>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	69db      	ldr	r3, [r3, #28]
 8009688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800968c:	2b80      	cmp	r3, #128	; 0x80
 800968e:	d10a      	bne.n	80096a6 <USART2_IRQHandler+0x66>
 8009690:	4b08      	ldr	r3, [pc, #32]	; (80096b4 <USART2_IRQHandler+0x74>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800969a:	2b00      	cmp	r3, #0
 800969c:	d003      	beq.n	80096a6 <USART2_IRQHandler+0x66>

	  pxMBFrameCBTransmitterEmpty(); 	  //xMBRTUTransmitFSM() in mbrtu.c
 800969e:	4b07      	ldr	r3, [pc, #28]	; (80096bc <USART2_IRQHandler+0x7c>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	4798      	blx	r3

    return ;
 80096a4:	e002      	b.n	80096ac <USART2_IRQHandler+0x6c>
  }

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huartslave);
 80096a6:	4803      	ldr	r0, [pc, #12]	; (80096b4 <USART2_IRQHandler+0x74>)
 80096a8:	f7f9 fdd4 	bl	8003254 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80096ac:	3708      	adds	r7, #8
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}
 80096b2:	bf00      	nop
 80096b4:	20004efc 	.word	0x20004efc
 80096b8:	20005064 	.word	0x20005064
 80096bc:	2000505c 	.word	0x2000505c

080096c0 <xMBMasterPortSerialInit>:


/* ----------------------- Start implementation -----------------------------*/
BOOL xMBMasterPortSerialInit( UCHAR ucPORT, ULONG ulBaudRate, UCHAR ucDataBits,
							  eMBParity eParity)
{
 80096c0:	b480      	push	{r7}
 80096c2:	b083      	sub	sp, #12
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6039      	str	r1, [r7, #0]
 80096c8:	4611      	mov	r1, r2
 80096ca:	461a      	mov	r2, r3
 80096cc:	4603      	mov	r3, r0
 80096ce:	71fb      	strb	r3, [r7, #7]
 80096d0:	460b      	mov	r3, r1
 80096d2:	71bb      	strb	r3, [r7, #6]
 80096d4:	4613      	mov	r3, r2
 80096d6:	717b      	strb	r3, [r7, #5]
		/*
		 * Please note: when user uses EVEN or ODD parity, the Data bit value chose
		 * in CubeMx initialize must be 9 bit
		 */

	return TRUE;
 80096d8:	2301      	movs	r3, #1
}
 80096da:	4618      	mov	r0, r3
 80096dc:	370c      	adds	r7, #12
 80096de:	46bd      	mov	sp, r7
 80096e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e4:	4770      	bx	lr
	...

080096e8 <vMBMasterPortSerialEnable>:

void vMBMasterPortSerialEnable(BOOL xRxEnable, BOOL xTxEnable)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b083      	sub	sp, #12
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	4603      	mov	r3, r0
 80096f0:	460a      	mov	r2, r1
 80096f2:	71fb      	strb	r3, [r7, #7]
 80096f4:	4613      	mov	r3, r2
 80096f6:	71bb      	strb	r3, [r7, #6]

	  /* If xRXEnable enable serial receive interrupts. If xTxENable enable
	  * transmitter empty interrupts.
	  */
	  if (xRxEnable) {
 80096f8:	79fb      	ldrb	r3, [r7, #7]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d008      	beq.n	8009710 <vMBMasterPortSerialEnable+0x28>
	    __HAL_UART_ENABLE_IT(&huartmaster, UART_IT_RXNE);
 80096fe:	4b15      	ldr	r3, [pc, #84]	; (8009754 <vMBMasterPortSerialEnable+0x6c>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	681a      	ldr	r2, [r3, #0]
 8009704:	4b13      	ldr	r3, [pc, #76]	; (8009754 <vMBMasterPortSerialEnable+0x6c>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f042 0220 	orr.w	r2, r2, #32
 800970c:	601a      	str	r2, [r3, #0]
 800970e:	e007      	b.n	8009720 <vMBMasterPortSerialEnable+0x38>
//	    HAL_GPIO_WritePin(RE_GPIO_Port, RE_Pin, GPIO_PIN_RESET);// PC10 <=> RE..Receiver Output Enable (Low to enable)
	  } else {
	    __HAL_UART_DISABLE_IT(&huartmaster, UART_IT_RXNE);
 8009710:	4b10      	ldr	r3, [pc, #64]	; (8009754 <vMBMasterPortSerialEnable+0x6c>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	681a      	ldr	r2, [r3, #0]
 8009716:	4b0f      	ldr	r3, [pc, #60]	; (8009754 <vMBMasterPortSerialEnable+0x6c>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f022 0220 	bic.w	r2, r2, #32
 800971e:	601a      	str	r2, [r3, #0]
//	    HAL_GPIO_WritePin(RE_GPIO_Port, RE_Pin, GPIO_PIN_SET);
	  }

	  if (xTxEnable) {
 8009720:	79bb      	ldrb	r3, [r7, #6]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d008      	beq.n	8009738 <vMBMasterPortSerialEnable+0x50>
	    __HAL_UART_ENABLE_IT(&huartmaster, UART_IT_TXE);
 8009726:	4b0b      	ldr	r3, [pc, #44]	; (8009754 <vMBMasterPortSerialEnable+0x6c>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	681a      	ldr	r2, [r3, #0]
 800972c:	4b09      	ldr	r3, [pc, #36]	; (8009754 <vMBMasterPortSerialEnable+0x6c>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009734:	601a      	str	r2, [r3, #0]
	  } else {
	    __HAL_UART_DISABLE_IT(&huartmaster, UART_IT_TXE);
//	    HAL_GPIO_WritePin(DE_GPIO_Port, DE_Pin, GPIO_PIN_RESET);
	  }

}
 8009736:	e007      	b.n	8009748 <vMBMasterPortSerialEnable+0x60>
	    __HAL_UART_DISABLE_IT(&huartmaster, UART_IT_TXE);
 8009738:	4b06      	ldr	r3, [pc, #24]	; (8009754 <vMBMasterPortSerialEnable+0x6c>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	681a      	ldr	r2, [r3, #0]
 800973e:	4b05      	ldr	r3, [pc, #20]	; (8009754 <vMBMasterPortSerialEnable+0x6c>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009746:	601a      	str	r2, [r3, #0]
}
 8009748:	bf00      	nop
 800974a:	370c      	adds	r7, #12
 800974c:	46bd      	mov	sp, r7
 800974e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009752:	4770      	bx	lr
 8009754:	20004e2c 	.word	0x20004e2c

08009758 <xMBMasterPortSerialPutByte>:
	//..
	return;
}

BOOL xMBMasterPortSerialPutByte(CHAR ucByte)
{
 8009758:	b480      	push	{r7}
 800975a:	b083      	sub	sp, #12
 800975c:	af00      	add	r7, sp, #0
 800975e:	4603      	mov	r3, r0
 8009760:	71fb      	strb	r3, [r7, #7]
	  /* Put a byte in the UARTs transmit buffer. This function is called
	  * by the protocol stack if pxMBFrameCBTransmitterEmpty( ) has been
	  * called. */
	huartmaster.Instance->TDR = (uint8_t)(ucByte & 0xFFU);
 8009762:	4b05      	ldr	r3, [pc, #20]	; (8009778 <xMBMasterPortSerialPutByte+0x20>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	79fa      	ldrb	r2, [r7, #7]
 8009768:	629a      	str	r2, [r3, #40]	; 0x28
	return TRUE;
 800976a:	2301      	movs	r3, #1
}
 800976c:	4618      	mov	r0, r3
 800976e:	370c      	adds	r7, #12
 8009770:	46bd      	mov	sp, r7
 8009772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009776:	4770      	bx	lr
 8009778:	20004e2c 	.word	0x20004e2c

0800977c <xMBMasterPortSerialGetByte>:

BOOL xMBMasterPortSerialGetByte(CHAR * pucByte)
{
 800977c:	b480      	push	{r7}
 800977e:	b083      	sub	sp, #12
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]

	  /* Return the byte in the UARTs receive buffer. This function is called
	  *  by the protocol stack after pxMBFrameCBByteReceived( ) has been called.
	  */

	*pucByte = (uint8_t)(huartmaster.Instance->RDR & (uint8_t)0x00FF);
 8009784:	4b06      	ldr	r3, [pc, #24]	; (80097a0 <xMBMasterPortSerialGetByte+0x24>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800978a:	b2da      	uxtb	r2, r3
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	701a      	strb	r2, [r3, #0]

	  return TRUE;
 8009790:	2301      	movs	r3, #1
}
 8009792:	4618      	mov	r0, r3
 8009794:	370c      	adds	r7, #12
 8009796:	46bd      	mov	sp, r7
 8009798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979c:	4770      	bx	lr
 800979e:	bf00      	nop
 80097a0:	20004e2c 	.word	0x20004e2c

080097a4 <USART3_IRQHandler>:
#if MASTER_USE_UART2
void USART2_IRQHandler(void)
#else
void USART3_IRQHandler(void)
#endif
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b082      	sub	sp, #8
 80097a8:	af00      	add	r7, sp, #0

	uint32_t isrflags   = READ_REG(huartmaster.Instance->ISR);
 80097aa:	4b1b      	ldr	r3, [pc, #108]	; (8009818 <USART3_IRQHandler+0x74>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	69db      	ldr	r3, [r3, #28]
 80097b0:	607b      	str	r3, [r7, #4]
	uint32_t cr1its     = READ_REG(huartmaster.Instance->CR1);
 80097b2:	4b19      	ldr	r3, [pc, #100]	; (8009818 <USART3_IRQHandler+0x74>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	603b      	str	r3, [r7, #0]

    if ( ((isrflags & USART_ISR_RXNE) != 0U)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f003 0320 	and.w	r3, r3, #32
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d010      	beq.n	80097e6 <USART3_IRQHandler+0x42>
         && ((cr1its & USART_CR1_RXNEIE) != 0U) )
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	f003 0320 	and.w	r3, r3, #32
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d00b      	beq.n	80097e6 <USART3_IRQHandler+0x42>
    {

		//xMBMasterRTUReceiveFSM();
		pxMBMasterFrameCBByteReceived();
 80097ce:	4b13      	ldr	r3, [pc, #76]	; (800981c <USART3_IRQHandler+0x78>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	4798      	blx	r3

		SET_BIT((&huartmaster)->Instance->RQR,  USART_RQR_RXFRQ );
 80097d4:	4b10      	ldr	r3, [pc, #64]	; (8009818 <USART3_IRQHandler+0x74>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	699a      	ldr	r2, [r3, #24]
 80097da:	4b0f      	ldr	r3, [pc, #60]	; (8009818 <USART3_IRQHandler+0x74>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f042 0208 	orr.w	r2, r2, #8
 80097e2:	619a      	str	r2, [r3, #24]

		return;
 80097e4:	e014      	b.n	8009810 <USART3_IRQHandler+0x6c>

	}

	if((__HAL_UART_GET_FLAG(&huartmaster, UART_FLAG_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(&huartmaster, UART_IT_TXE) != RESET)) {
 80097e6:	4b0c      	ldr	r3, [pc, #48]	; (8009818 <USART3_IRQHandler+0x74>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	69db      	ldr	r3, [r3, #28]
 80097ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097f0:	2b80      	cmp	r3, #128	; 0x80
 80097f2:	d10a      	bne.n	800980a <USART3_IRQHandler+0x66>
 80097f4:	4b08      	ldr	r3, [pc, #32]	; (8009818 <USART3_IRQHandler+0x74>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d003      	beq.n	800980a <USART3_IRQHandler+0x66>

		//xMBMasterRTUTransmitFSM();
		pxMBMasterFrameCBTransmitterEmpty();
 8009802:	4b07      	ldr	r3, [pc, #28]	; (8009820 <USART3_IRQHandler+0x7c>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	4798      	blx	r3
		return ;
 8009808:	e002      	b.n	8009810 <USART3_IRQHandler+0x6c>

	}

	HAL_UART_IRQHandler(&huartmaster);
 800980a:	4803      	ldr	r0, [pc, #12]	; (8009818 <USART3_IRQHandler+0x74>)
 800980c:	f7f9 fd22 	bl	8003254 <HAL_UART_IRQHandler>
}
 8009810:	3708      	adds	r7, #8
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}
 8009816:	bf00      	nop
 8009818:	20004e2c 	.word	0x20004e2c
 800981c:	2000506c 	.word	0x2000506c
 8009820:	20005068 	.word	0x20005068

08009824 <xMBPortTimersInit>:
static uint16_t downcounter = 0;		//20000 = 1s for test timer
 
/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortTimersInit( USHORT usTim1Timerout50us )
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b086      	sub	sp, #24
 8009828:	af00      	add	r7, sp, #0
 800982a:	4603      	mov	r3, r0
 800982c:	80fb      	strh	r3, [r7, #6]
  TIM_MasterConfigTypeDef sMasterConfig;
  
  htim6.Instance = TIM6;
 800982e:	4b19      	ldr	r3, [pc, #100]	; (8009894 <xMBPortTimersInit+0x70>)
 8009830:	4a19      	ldr	r2, [pc, #100]	; (8009898 <xMBPortTimersInit+0x74>)
 8009832:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = (2 * HAL_RCC_GetPCLK1Freq() / 1000000) - 1; //TIMx_CLK = 216Mhz, PCLK1 = 108MHz
 8009834:	f7f8 fcac 	bl	8002190 <HAL_RCC_GetPCLK1Freq>
 8009838:	4603      	mov	r3, r0
 800983a:	005b      	lsls	r3, r3, #1
 800983c:	4a17      	ldr	r2, [pc, #92]	; (800989c <xMBPortTimersInit+0x78>)
 800983e:	fba2 2303 	umull	r2, r3, r2, r3
 8009842:	0c9b      	lsrs	r3, r3, #18
 8009844:	3b01      	subs	r3, #1
 8009846:	4a13      	ldr	r2, [pc, #76]	; (8009894 <xMBPortTimersInit+0x70>)
 8009848:	6053      	str	r3, [r2, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800984a:	4b12      	ldr	r3, [pc, #72]	; (8009894 <xMBPortTimersInit+0x70>)
 800984c:	2200      	movs	r2, #0
 800984e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 50 - 1;
 8009850:	4b10      	ldr	r3, [pc, #64]	; (8009894 <xMBPortTimersInit+0x70>)
 8009852:	2231      	movs	r2, #49	; 0x31
 8009854:	60da      	str	r2, [r3, #12]
  
  timeout = usTim1Timerout50us;
 8009856:	4a12      	ldr	r2, [pc, #72]	; (80098a0 <xMBPortTimersInit+0x7c>)
 8009858:	88fb      	ldrh	r3, [r7, #6]
 800985a:	8013      	strh	r3, [r2, #0]
  
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800985c:	480d      	ldr	r0, [pc, #52]	; (8009894 <xMBPortTimersInit+0x70>)
 800985e:	f7f9 f919 	bl	8002a94 <HAL_TIM_Base_Init>
 8009862:	4603      	mov	r3, r0
 8009864:	2b00      	cmp	r3, #0
 8009866:	d001      	beq.n	800986c <xMBPortTimersInit+0x48>
  {
    return FALSE;
 8009868:	2300      	movs	r3, #0
 800986a:	e00f      	b.n	800988c <xMBPortTimersInit+0x68>
  }
  
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800986c:	2320      	movs	r3, #32
 800986e:	60fb      	str	r3, [r7, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009870:	2300      	movs	r3, #0
 8009872:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8009874:	f107 030c 	add.w	r3, r7, #12
 8009878:	4619      	mov	r1, r3
 800987a:	4806      	ldr	r0, [pc, #24]	; (8009894 <xMBPortTimersInit+0x70>)
 800987c:	f7f9 fbf0 	bl	8003060 <HAL_TIMEx_MasterConfigSynchronization>
 8009880:	4603      	mov	r3, r0
 8009882:	2b00      	cmp	r3, #0
 8009884:	d001      	beq.n	800988a <xMBPortTimersInit+0x66>
  {
    return FALSE;
 8009886:	2300      	movs	r3, #0
 8009888:	e000      	b.n	800988c <xMBPortTimersInit+0x68>
  }
  
  return TRUE;
 800988a:	2301      	movs	r3, #1
}
 800988c:	4618      	mov	r0, r3
 800988e:	3718      	adds	r7, #24
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}
 8009894:	20004eb0 	.word	0x20004eb0
 8009898:	40001000 	.word	0x40001000
 800989c:	431bde83 	.word	0x431bde83
 80098a0:	20004be8 	.word	0x20004be8

080098a4 <vMBPortTimersEnable>:
 
void
vMBPortTimersEnable(  )
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	af00      	add	r7, sp, #0
  /* Enable the timer with the timeout passed to xMBPortTimersInit( ) */
  downcounter = timeout;
 80098a8:	4b04      	ldr	r3, [pc, #16]	; (80098bc <vMBPortTimersEnable+0x18>)
 80098aa:	881a      	ldrh	r2, [r3, #0]
 80098ac:	4b04      	ldr	r3, [pc, #16]	; (80098c0 <vMBPortTimersEnable+0x1c>)
 80098ae:	801a      	strh	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim6);
 80098b0:	4804      	ldr	r0, [pc, #16]	; (80098c4 <vMBPortTimersEnable+0x20>)
 80098b2:	f7f9 f947 	bl	8002b44 <HAL_TIM_Base_Start_IT>
}
 80098b6:	bf00      	nop
 80098b8:	bd80      	pop	{r7, pc}
 80098ba:	bf00      	nop
 80098bc:	20004be8 	.word	0x20004be8
 80098c0:	20004bea 	.word	0x20004bea
 80098c4:	20004eb0 	.word	0x20004eb0

080098c8 <vMBPortTimersDisable>:
 
void
vMBPortTimersDisable(  )
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	af00      	add	r7, sp, #0
  /* Disable any pending timers. */
  HAL_TIM_Base_Stop_IT(&htim6);
 80098cc:	4802      	ldr	r0, [pc, #8]	; (80098d8 <vMBPortTimersDisable+0x10>)
 80098ce:	f7f9 f9b1 	bl	8002c34 <HAL_TIM_Base_Stop_IT>
}
 80098d2:	bf00      	nop
 80098d4:	bd80      	pop	{r7, pc}
 80098d6:	bf00      	nop
 80098d8:	20004eb0 	.word	0x20004eb0

080098dc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	if(__HAL_TIM_GET_FLAG(&htim6, TIM_FLAG_UPDATE) != RESET
 80098e0:	4b12      	ldr	r3, [pc, #72]	; (800992c <TIM6_DAC_IRQHandler+0x50>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	691b      	ldr	r3, [r3, #16]
 80098e6:	f003 0301 	and.w	r3, r3, #1
 80098ea:	2b01      	cmp	r3, #1
 80098ec:	d118      	bne.n	8009920 <TIM6_DAC_IRQHandler+0x44>
	   && __HAL_TIM_GET_IT_SOURCE(&htim6, TIM_IT_UPDATE) !=RESET)
 80098ee:	4b0f      	ldr	r3, [pc, #60]	; (800992c <TIM6_DAC_IRQHandler+0x50>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	68db      	ldr	r3, [r3, #12]
 80098f4:	f003 0301 	and.w	r3, r3, #1
 80098f8:	2b01      	cmp	r3, #1
 80098fa:	d111      	bne.n	8009920 <TIM6_DAC_IRQHandler+0x44>
	{
		__HAL_TIM_CLEAR_IT(&htim6, TIM_IT_UPDATE);
 80098fc:	4b0b      	ldr	r3, [pc, #44]	; (800992c <TIM6_DAC_IRQHandler+0x50>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f06f 0201 	mvn.w	r2, #1
 8009904:	611a      	str	r2, [r3, #16]
		if (!--downcounter)
 8009906:	4b0a      	ldr	r3, [pc, #40]	; (8009930 <TIM6_DAC_IRQHandler+0x54>)
 8009908:	881b      	ldrh	r3, [r3, #0]
 800990a:	3b01      	subs	r3, #1
 800990c:	b29a      	uxth	r2, r3
 800990e:	4b08      	ldr	r3, [pc, #32]	; (8009930 <TIM6_DAC_IRQHandler+0x54>)
 8009910:	801a      	strh	r2, [r3, #0]
 8009912:	4b07      	ldr	r3, [pc, #28]	; (8009930 <TIM6_DAC_IRQHandler+0x54>)
 8009914:	881b      	ldrh	r3, [r3, #0]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d102      	bne.n	8009920 <TIM6_DAC_IRQHandler+0x44>
		{
			pxMBPortCBTimerExpired();	// it is "xMBRTUTimerT35Expired()"
 800991a:	4b06      	ldr	r3, [pc, #24]	; (8009934 <TIM6_DAC_IRQHandler+0x58>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	4798      	blx	r3
			//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
			//todo return;
		}
	}
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8009920:	4802      	ldr	r0, [pc, #8]	; (800992c <TIM6_DAC_IRQHandler+0x50>)
 8009922:	f7f9 f9b6 	bl	8002c92 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8009926:	bf00      	nop
 8009928:	bd80      	pop	{r7, pc}
 800992a:	bf00      	nop
 800992c:	20004eb0 	.word	0x20004eb0
 8009930:	20004bea 	.word	0x20004bea
 8009934:	20005060 	.word	0x20005060

08009938 <xMBMasterPortTimersInit>:
 void TIM7_IRQHandler(void);

/* ----------------------- Start implementation -----------------------------*/

BOOL xMBMasterPortTimersInit(USHORT usTim7Timerout50us)	//each entering ISRTIM7 is 50us
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b086      	sub	sp, #24
 800993c:	af00      	add	r7, sp, #0
 800993e:	4603      	mov	r3, r0
 8009940:	80fb      	strh	r3, [r7, #6]
	  TIM_MasterConfigTypeDef sMasterConfig;

	  htim7.Instance = TIM7;
 8009942:	4b19      	ldr	r3, [pc, #100]	; (80099a8 <xMBMasterPortTimersInit+0x70>)
 8009944:	4a19      	ldr	r2, [pc, #100]	; (80099ac <xMBMasterPortTimersInit+0x74>)
 8009946:	601a      	str	r2, [r3, #0]
	  htim7.Init.Prescaler = (2 * HAL_RCC_GetPCLK1Freq() / 1000000) - 1;
 8009948:	f7f8 fc22 	bl	8002190 <HAL_RCC_GetPCLK1Freq>
 800994c:	4603      	mov	r3, r0
 800994e:	005b      	lsls	r3, r3, #1
 8009950:	4a17      	ldr	r2, [pc, #92]	; (80099b0 <xMBMasterPortTimersInit+0x78>)
 8009952:	fba2 2303 	umull	r2, r3, r2, r3
 8009956:	0c9b      	lsrs	r3, r3, #18
 8009958:	3b01      	subs	r3, #1
 800995a:	4a13      	ldr	r2, [pc, #76]	; (80099a8 <xMBMasterPortTimersInit+0x70>)
 800995c:	6053      	str	r3, [r2, #4]
	  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800995e:	4b12      	ldr	r3, [pc, #72]	; (80099a8 <xMBMasterPortTimersInit+0x70>)
 8009960:	2200      	movs	r2, #0
 8009962:	609a      	str	r2, [r3, #8]
	  htim7.Init.Period = 50 - 1;
 8009964:	4b10      	ldr	r3, [pc, #64]	; (80099a8 <xMBMasterPortTimersInit+0x70>)
 8009966:	2231      	movs	r2, #49	; 0x31
 8009968:	60da      	str	r2, [r3, #12]

	  t35timer = usTim7Timerout50us;	//1.75 ms for t35 timeout
 800996a:	4a12      	ldr	r2, [pc, #72]	; (80099b4 <xMBMasterPortTimersInit+0x7c>)
 800996c:	88fb      	ldrh	r3, [r7, #6]
 800996e:	8013      	strh	r3, [r2, #0]
	  	  	  	  	  	  	  	  	  	//user should set t35timer = 36 <=> 1800 us

	  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8009970:	480d      	ldr	r0, [pc, #52]	; (80099a8 <xMBMasterPortTimersInit+0x70>)
 8009972:	f7f9 f88f 	bl	8002a94 <HAL_TIM_Base_Init>
 8009976:	4603      	mov	r3, r0
 8009978:	2b00      	cmp	r3, #0
 800997a:	d001      	beq.n	8009980 <xMBMasterPortTimersInit+0x48>
	  {
	    return FALSE;
 800997c:	2300      	movs	r3, #0
 800997e:	e00f      	b.n	80099a0 <xMBMasterPortTimersInit+0x68>
	  }

	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8009980:	2320      	movs	r3, #32
 8009982:	60fb      	str	r3, [r7, #12]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009984:	2300      	movs	r3, #0
 8009986:	617b      	str	r3, [r7, #20]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8009988:	f107 030c 	add.w	r3, r7, #12
 800998c:	4619      	mov	r1, r3
 800998e:	4806      	ldr	r0, [pc, #24]	; (80099a8 <xMBMasterPortTimersInit+0x70>)
 8009990:	f7f9 fb66 	bl	8003060 <HAL_TIMEx_MasterConfigSynchronization>
 8009994:	4603      	mov	r3, r0
 8009996:	2b00      	cmp	r3, #0
 8009998:	d001      	beq.n	800999e <xMBMasterPortTimersInit+0x66>
	  {
	    return FALSE;
 800999a:	2300      	movs	r3, #0
 800999c:	e000      	b.n	80099a0 <xMBMasterPortTimersInit+0x68>
	  }

	  return TRUE;
 800999e:	2301      	movs	r3, #1
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	3718      	adds	r7, #24
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}
 80099a8:	20004f80 	.word	0x20004f80
 80099ac:	40001400 	.word	0x40001400
 80099b0:	431bde83 	.word	0x431bde83
 80099b4:	20004bec 	.word	0x20004bec

080099b8 <vMBMasterPortTimersT35Enable>:

void vMBMasterPortTimersT35Enable(void)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	af00      	add	r7, sp, #0
	  /* Enable the timer with the t35timer passed to xMBMasterPortTimersInit( ) */
	  mdowncounter = t35timer;
 80099bc:	4b04      	ldr	r3, [pc, #16]	; (80099d0 <vMBMasterPortTimersT35Enable+0x18>)
 80099be:	881a      	ldrh	r2, [r3, #0]
 80099c0:	4b04      	ldr	r3, [pc, #16]	; (80099d4 <vMBMasterPortTimersT35Enable+0x1c>)
 80099c2:	801a      	strh	r2, [r3, #0]
	  HAL_TIM_Base_Start_IT(&htim7);
 80099c4:	4804      	ldr	r0, [pc, #16]	; (80099d8 <vMBMasterPortTimersT35Enable+0x20>)
 80099c6:	f7f9 f8bd 	bl	8002b44 <HAL_TIM_Base_Start_IT>

}
 80099ca:	bf00      	nop
 80099cc:	bd80      	pop	{r7, pc}
 80099ce:	bf00      	nop
 80099d0:	20004bec 	.word	0x20004bec
 80099d4:	20004bee 	.word	0x20004bee
 80099d8:	20004f80 	.word	0x20004f80

080099dc <vMBMasterPortTimersConvertDelayEnable>:

void vMBMasterPortTimersConvertDelayEnable(void)	//be called from UART_ISR
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	af00      	add	r7, sp, #0
	mdowncounter = CONVERTTIMER_PERIOD;		//200ms
 80099e0:	4b04      	ldr	r3, [pc, #16]	; (80099f4 <vMBMasterPortTimersConvertDelayEnable+0x18>)
 80099e2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80099e6:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim7);
 80099e8:	4803      	ldr	r0, [pc, #12]	; (80099f8 <vMBMasterPortTimersConvertDelayEnable+0x1c>)
 80099ea:	f7f9 f8ab 	bl	8002b44 <HAL_TIM_Base_Start_IT>

}
 80099ee:	bf00      	nop
 80099f0:	bd80      	pop	{r7, pc}
 80099f2:	bf00      	nop
 80099f4:	20004bee 	.word	0x20004bee
 80099f8:	20004f80 	.word	0x20004f80

080099fc <vMBMasterPortTimersRespondTimeoutEnable>:

void vMBMasterPortTimersRespondTimeoutEnable(void)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	af00      	add	r7, sp, #0
	mdowncounter = RESPONSETIMER_PERIOD;	//900ms
 8009a00:	4b04      	ldr	r3, [pc, #16]	; (8009a14 <vMBMasterPortTimersRespondTimeoutEnable+0x18>)
 8009a02:	f244 6250 	movw	r2, #18000	; 0x4650
 8009a06:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim7);
 8009a08:	4803      	ldr	r0, [pc, #12]	; (8009a18 <vMBMasterPortTimersRespondTimeoutEnable+0x1c>)
 8009a0a:	f7f9 f89b 	bl	8002b44 <HAL_TIM_Base_Start_IT>
}
 8009a0e:	bf00      	nop
 8009a10:	bd80      	pop	{r7, pc}
 8009a12:	bf00      	nop
 8009a14:	20004bee 	.word	0x20004bee
 8009a18:	20004f80 	.word	0x20004f80

08009a1c <vMBMasterPortTimersDisable>:

void vMBMasterPortTimersDisable(void)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	af00      	add	r7, sp, #0
	  /* Disable any pending timers. */
	  HAL_TIM_Base_Stop_IT(&htim7);
 8009a20:	4802      	ldr	r0, [pc, #8]	; (8009a2c <vMBMasterPortTimersDisable+0x10>)
 8009a22:	f7f9 f907 	bl	8002c34 <HAL_TIM_Base_Stop_IT>
}
 8009a26:	bf00      	nop
 8009a28:	bd80      	pop	{r7, pc}
 8009a2a:	bf00      	nop
 8009a2c:	20004f80 	.word	0x20004f80

08009a30 <TIM7_IRQHandler>:
/**
  * @brief This function handles TIM7 global interrupt.
  */

 void TIM7_IRQHandler(void)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	if(__HAL_TIM_GET_FLAG(&htim7, TIM_FLAG_UPDATE) != RESET
 8009a34:	4b12      	ldr	r3, [pc, #72]	; (8009a80 <TIM7_IRQHandler+0x50>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	691b      	ldr	r3, [r3, #16]
 8009a3a:	f003 0301 	and.w	r3, r3, #1
 8009a3e:	2b01      	cmp	r3, #1
 8009a40:	d118      	bne.n	8009a74 <TIM7_IRQHandler+0x44>
	   && __HAL_TIM_GET_IT_SOURCE(&htim7, TIM_IT_UPDATE) !=RESET)
 8009a42:	4b0f      	ldr	r3, [pc, #60]	; (8009a80 <TIM7_IRQHandler+0x50>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	68db      	ldr	r3, [r3, #12]
 8009a48:	f003 0301 	and.w	r3, r3, #1
 8009a4c:	2b01      	cmp	r3, #1
 8009a4e:	d111      	bne.n	8009a74 <TIM7_IRQHandler+0x44>
	{
		__HAL_TIM_CLEAR_IT(&htim7, TIM_IT_UPDATE);
 8009a50:	4b0b      	ldr	r3, [pc, #44]	; (8009a80 <TIM7_IRQHandler+0x50>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f06f 0201 	mvn.w	r2, #1
 8009a58:	611a      	str	r2, [r3, #16]
		if (!--mdowncounter)
 8009a5a:	4b0a      	ldr	r3, [pc, #40]	; (8009a84 <TIM7_IRQHandler+0x54>)
 8009a5c:	881b      	ldrh	r3, [r3, #0]
 8009a5e:	3b01      	subs	r3, #1
 8009a60:	b29a      	uxth	r2, r3
 8009a62:	4b08      	ldr	r3, [pc, #32]	; (8009a84 <TIM7_IRQHandler+0x54>)
 8009a64:	801a      	strh	r2, [r3, #0]
 8009a66:	4b07      	ldr	r3, [pc, #28]	; (8009a84 <TIM7_IRQHandler+0x54>)
 8009a68:	881b      	ldrh	r3, [r3, #0]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d102      	bne.n	8009a74 <TIM7_IRQHandler+0x44>
		{
			pxMBMasterPortCBTimerExpired();	// it is "xMBMasterRTUTimerExpired()"
 8009a6e:	4b06      	ldr	r3, [pc, #24]	; (8009a88 <TIM7_IRQHandler+0x58>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	4798      	blx	r3
		}
	}
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8009a74:	4802      	ldr	r0, [pc, #8]	; (8009a80 <TIM7_IRQHandler+0x50>)
 8009a76:	f7f9 f90c 	bl	8002c92 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8009a7a:	bf00      	nop
 8009a7c:	bd80      	pop	{r7, pc}
 8009a7e:	bf00      	nop
 8009a80:	20004f80 	.word	0x20004f80
 8009a84:	20004bee 	.word	0x20004bee
 8009a88:	20005070 	.word	0x20005070

08009a8c <eMBRegInputCB>:
 *
 * @return result
 */

eMBErrorCode eMBRegInputCB(UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b087      	sub	sp, #28
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
 8009a94:	460b      	mov	r3, r1
 8009a96:	807b      	strh	r3, [r7, #2]
 8009a98:	4613      	mov	r3, r2
 8009a9a:	803b      	strh	r3, [r7, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	75fb      	strb	r3, [r7, #23]
    USHORT *        pusRegInputBuf;
    USHORT          REG_INPUT_START;
    USHORT          REG_INPUT_NREGS;
    USHORT          usRegInStart;

    pusRegInputBuf = usSRegInBuf;
 8009aa0:	4b22      	ldr	r3, [pc, #136]	; (8009b2c <eMBRegInputCB+0xa0>)
 8009aa2:	613b      	str	r3, [r7, #16]
    REG_INPUT_START = S_REG_INPUT_START;
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	81fb      	strh	r3, [r7, #14]
    REG_INPUT_NREGS = S_REG_INPUT_NREGS;
 8009aa8:	2308      	movs	r3, #8
 8009aaa:	81bb      	strh	r3, [r7, #12]
    usRegInStart = usSRegInStart;
 8009aac:	4b20      	ldr	r3, [pc, #128]	; (8009b30 <eMBRegInputCB+0xa4>)
 8009aae:	881b      	ldrh	r3, [r3, #0]
 8009ab0:	817b      	strh	r3, [r7, #10]

    /* it already plus one in modbus function method. */
    usAddress--;
 8009ab2:	887b      	ldrh	r3, [r7, #2]
 8009ab4:	3b01      	subs	r3, #1
 8009ab6:	807b      	strh	r3, [r7, #2]

    if ((usAddress >= REG_INPUT_START)
 8009ab8:	887a      	ldrh	r2, [r7, #2]
 8009aba:	89fb      	ldrh	r3, [r7, #14]
 8009abc:	429a      	cmp	r2, r3
 8009abe:	d32c      	bcc.n	8009b1a <eMBRegInputCB+0x8e>
            && (usAddress + usNRegs <= REG_INPUT_START + REG_INPUT_NREGS))
 8009ac0:	887a      	ldrh	r2, [r7, #2]
 8009ac2:	883b      	ldrh	r3, [r7, #0]
 8009ac4:	441a      	add	r2, r3
 8009ac6:	89f9      	ldrh	r1, [r7, #14]
 8009ac8:	89bb      	ldrh	r3, [r7, #12]
 8009aca:	440b      	add	r3, r1
 8009acc:	429a      	cmp	r2, r3
 8009ace:	dc24      	bgt.n	8009b1a <eMBRegInputCB+0x8e>
    {
        iRegIndex = usAddress - usRegInStart;
 8009ad0:	887a      	ldrh	r2, [r7, #2]
 8009ad2:	897b      	ldrh	r3, [r7, #10]
 8009ad4:	1ad3      	subs	r3, r2, r3
 8009ad6:	82bb      	strh	r3, [r7, #20]
        while (usNRegs > 0)
 8009ad8:	e01b      	b.n	8009b12 <eMBRegInputCB+0x86>
        {
            *pucRegBuffer++ = (UCHAR) (pusRegInputBuf[iRegIndex] >> 8);
 8009ada:	8abb      	ldrh	r3, [r7, #20]
 8009adc:	005b      	lsls	r3, r3, #1
 8009ade:	693a      	ldr	r2, [r7, #16]
 8009ae0:	4413      	add	r3, r2
 8009ae2:	881b      	ldrh	r3, [r3, #0]
 8009ae4:	0a1b      	lsrs	r3, r3, #8
 8009ae6:	b299      	uxth	r1, r3
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	1c5a      	adds	r2, r3, #1
 8009aec:	607a      	str	r2, [r7, #4]
 8009aee:	b2ca      	uxtb	r2, r1
 8009af0:	701a      	strb	r2, [r3, #0]
            *pucRegBuffer++ = (UCHAR) (pusRegInputBuf[iRegIndex] & 0xFF);
 8009af2:	8abb      	ldrh	r3, [r7, #20]
 8009af4:	005b      	lsls	r3, r3, #1
 8009af6:	693a      	ldr	r2, [r7, #16]
 8009af8:	4413      	add	r3, r2
 8009afa:	8819      	ldrh	r1, [r3, #0]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	1c5a      	adds	r2, r3, #1
 8009b00:	607a      	str	r2, [r7, #4]
 8009b02:	b2ca      	uxtb	r2, r1
 8009b04:	701a      	strb	r2, [r3, #0]
            iRegIndex++;
 8009b06:	8abb      	ldrh	r3, [r7, #20]
 8009b08:	3301      	adds	r3, #1
 8009b0a:	82bb      	strh	r3, [r7, #20]
            usNRegs--;
 8009b0c:	883b      	ldrh	r3, [r7, #0]
 8009b0e:	3b01      	subs	r3, #1
 8009b10:	803b      	strh	r3, [r7, #0]
        while (usNRegs > 0)
 8009b12:	883b      	ldrh	r3, [r7, #0]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d1e0      	bne.n	8009ada <eMBRegInputCB+0x4e>
    if ((usAddress >= REG_INPUT_START)
 8009b18:	e001      	b.n	8009b1e <eMBRegInputCB+0x92>
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	75fb      	strb	r3, [r7, #23]
    }

    return eStatus;
 8009b1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	371c      	adds	r7, #28
 8009b24:	46bd      	mov	sp, r7
 8009b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2a:	4770      	bx	lr
 8009b2c:	200050ac 	.word	0x200050ac
 8009b30:	20004bf4 	.word	0x20004bf4

08009b34 <eMBRegHoldingCB>:
 *
 * @return result
 */
eMBErrorCode eMBRegHoldingCB(UCHAR * pucRegBuffer, USHORT usAddress,
        USHORT usNRegs, eMBRegisterMode eMode)
{
 8009b34:	b480      	push	{r7}
 8009b36:	b089      	sub	sp, #36	; 0x24
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	60f8      	str	r0, [r7, #12]
 8009b3c:	4608      	mov	r0, r1
 8009b3e:	4611      	mov	r1, r2
 8009b40:	461a      	mov	r2, r3
 8009b42:	4603      	mov	r3, r0
 8009b44:	817b      	strh	r3, [r7, #10]
 8009b46:	460b      	mov	r3, r1
 8009b48:	813b      	strh	r3, [r7, #8]
 8009b4a:	4613      	mov	r3, r2
 8009b4c:	71fb      	strb	r3, [r7, #7]
    eMBErrorCode    eStatus = MB_ENOERR;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	77fb      	strb	r3, [r7, #31]
    USHORT *        pusRegHoldingBuf;
    USHORT          REG_HOLDING_START;
    USHORT          REG_HOLDING_NREGS;
    USHORT          usRegHoldStart;

    pusRegHoldingBuf = usSRegHoldBuf;
 8009b52:	4b39      	ldr	r3, [pc, #228]	; (8009c38 <eMBRegHoldingCB+0x104>)
 8009b54:	61bb      	str	r3, [r7, #24]
    REG_HOLDING_START = S_REG_HOLDING_START;
 8009b56:	2300      	movs	r3, #0
 8009b58:	82fb      	strh	r3, [r7, #22]
    REG_HOLDING_NREGS = S_REG_HOLDING_NREGS;
 8009b5a:	2308      	movs	r3, #8
 8009b5c:	82bb      	strh	r3, [r7, #20]
    usRegHoldStart = usSRegHoldStart;
 8009b5e:	4b37      	ldr	r3, [pc, #220]	; (8009c3c <eMBRegHoldingCB+0x108>)
 8009b60:	881b      	ldrh	r3, [r3, #0]
 8009b62:	827b      	strh	r3, [r7, #18]

    /* it already plus one in modbus function method. */
    usAddress--;
 8009b64:	897b      	ldrh	r3, [r7, #10]
 8009b66:	3b01      	subs	r3, #1
 8009b68:	817b      	strh	r3, [r7, #10]

    if ((usAddress >= REG_HOLDING_START)
 8009b6a:	897a      	ldrh	r2, [r7, #10]
 8009b6c:	8afb      	ldrh	r3, [r7, #22]
 8009b6e:	429a      	cmp	r2, r3
 8009b70:	d359      	bcc.n	8009c26 <eMBRegHoldingCB+0xf2>
            && (usAddress + usNRegs <= REG_HOLDING_START + REG_HOLDING_NREGS))
 8009b72:	897a      	ldrh	r2, [r7, #10]
 8009b74:	893b      	ldrh	r3, [r7, #8]
 8009b76:	441a      	add	r2, r3
 8009b78:	8af9      	ldrh	r1, [r7, #22]
 8009b7a:	8abb      	ldrh	r3, [r7, #20]
 8009b7c:	440b      	add	r3, r1
 8009b7e:	429a      	cmp	r2, r3
 8009b80:	dc51      	bgt.n	8009c26 <eMBRegHoldingCB+0xf2>
    {
        iRegIndex = usAddress - usRegHoldStart;
 8009b82:	897a      	ldrh	r2, [r7, #10]
 8009b84:	8a7b      	ldrh	r3, [r7, #18]
 8009b86:	1ad3      	subs	r3, r2, r3
 8009b88:	83bb      	strh	r3, [r7, #28]
        switch (eMode)
 8009b8a:	79fb      	ldrb	r3, [r7, #7]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d01e      	beq.n	8009bce <eMBRegHoldingCB+0x9a>
 8009b90:	2b01      	cmp	r3, #1
 8009b92:	d043      	beq.n	8009c1c <eMBRegHoldingCB+0xe8>
 8009b94:	e049      	b.n	8009c2a <eMBRegHoldingCB+0xf6>
        {
        /* read current register values from the protocol stack. */
        case MB_REG_READ:
            while (usNRegs > 0)
            {
                *pucRegBuffer++ = (UCHAR) (pusRegHoldingBuf[iRegIndex] >> 8);
 8009b96:	8bbb      	ldrh	r3, [r7, #28]
 8009b98:	005b      	lsls	r3, r3, #1
 8009b9a:	69ba      	ldr	r2, [r7, #24]
 8009b9c:	4413      	add	r3, r2
 8009b9e:	881b      	ldrh	r3, [r3, #0]
 8009ba0:	0a1b      	lsrs	r3, r3, #8
 8009ba2:	b299      	uxth	r1, r3
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	1c5a      	adds	r2, r3, #1
 8009ba8:	60fa      	str	r2, [r7, #12]
 8009baa:	b2ca      	uxtb	r2, r1
 8009bac:	701a      	strb	r2, [r3, #0]
                *pucRegBuffer++ = (UCHAR) (pusRegHoldingBuf[iRegIndex] & 0xFF);
 8009bae:	8bbb      	ldrh	r3, [r7, #28]
 8009bb0:	005b      	lsls	r3, r3, #1
 8009bb2:	69ba      	ldr	r2, [r7, #24]
 8009bb4:	4413      	add	r3, r2
 8009bb6:	8819      	ldrh	r1, [r3, #0]
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	1c5a      	adds	r2, r3, #1
 8009bbc:	60fa      	str	r2, [r7, #12]
 8009bbe:	b2ca      	uxtb	r2, r1
 8009bc0:	701a      	strb	r2, [r3, #0]
                iRegIndex++;
 8009bc2:	8bbb      	ldrh	r3, [r7, #28]
 8009bc4:	3301      	adds	r3, #1
 8009bc6:	83bb      	strh	r3, [r7, #28]
                usNRegs--;
 8009bc8:	893b      	ldrh	r3, [r7, #8]
 8009bca:	3b01      	subs	r3, #1
 8009bcc:	813b      	strh	r3, [r7, #8]
            while (usNRegs > 0)
 8009bce:	893b      	ldrh	r3, [r7, #8]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d1e0      	bne.n	8009b96 <eMBRegHoldingCB+0x62>
            }
            break;
 8009bd4:	e026      	b.n	8009c24 <eMBRegHoldingCB+0xf0>

        /* write current register values with new values from the protocol stack. */
        case MB_REG_WRITE:
            while (usNRegs > 0)
            {
                pusRegHoldingBuf[iRegIndex] = *pucRegBuffer++ << 8;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	1c5a      	adds	r2, r3, #1
 8009bda:	60fa      	str	r2, [r7, #12]
 8009bdc:	781b      	ldrb	r3, [r3, #0]
 8009bde:	b29a      	uxth	r2, r3
 8009be0:	8bbb      	ldrh	r3, [r7, #28]
 8009be2:	005b      	lsls	r3, r3, #1
 8009be4:	69b9      	ldr	r1, [r7, #24]
 8009be6:	440b      	add	r3, r1
 8009be8:	0212      	lsls	r2, r2, #8
 8009bea:	b292      	uxth	r2, r2
 8009bec:	801a      	strh	r2, [r3, #0]
                pusRegHoldingBuf[iRegIndex] |= *pucRegBuffer++;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	1c5a      	adds	r2, r3, #1
 8009bf2:	60fa      	str	r2, [r7, #12]
 8009bf4:	7818      	ldrb	r0, [r3, #0]
 8009bf6:	8bbb      	ldrh	r3, [r7, #28]
 8009bf8:	005b      	lsls	r3, r3, #1
 8009bfa:	69ba      	ldr	r2, [r7, #24]
 8009bfc:	4413      	add	r3, r2
 8009bfe:	8819      	ldrh	r1, [r3, #0]
 8009c00:	b282      	uxth	r2, r0
 8009c02:	8bbb      	ldrh	r3, [r7, #28]
 8009c04:	005b      	lsls	r3, r3, #1
 8009c06:	69b8      	ldr	r0, [r7, #24]
 8009c08:	4403      	add	r3, r0
 8009c0a:	430a      	orrs	r2, r1
 8009c0c:	b292      	uxth	r2, r2
 8009c0e:	801a      	strh	r2, [r3, #0]
                iRegIndex++;
 8009c10:	8bbb      	ldrh	r3, [r7, #28]
 8009c12:	3301      	adds	r3, #1
 8009c14:	83bb      	strh	r3, [r7, #28]
                usNRegs--;
 8009c16:	893b      	ldrh	r3, [r7, #8]
 8009c18:	3b01      	subs	r3, #1
 8009c1a:	813b      	strh	r3, [r7, #8]
            while (usNRegs > 0)
 8009c1c:	893b      	ldrh	r3, [r7, #8]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d1d9      	bne.n	8009bd6 <eMBRegHoldingCB+0xa2>
            }
            break;
 8009c22:	bf00      	nop
        switch (eMode)
 8009c24:	e001      	b.n	8009c2a <eMBRegHoldingCB+0xf6>
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 8009c26:	2301      	movs	r3, #1
 8009c28:	77fb      	strb	r3, [r7, #31]
    }
    return eStatus;
 8009c2a:	7ffb      	ldrb	r3, [r7, #31]
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3724      	adds	r7, #36	; 0x24
 8009c30:	46bd      	mov	sp, r7
 8009c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c36:	4770      	bx	lr
 8009c38:	2000509c 	.word	0x2000509c
 8009c3c:	20004bf6 	.word	0x20004bf6

08009c40 <eMBRegCoilsCB>:
 *
 * @return result
 */
eMBErrorCode eMBRegCoilsCB(UCHAR * pucRegBuffer, USHORT usAddress,
        USHORT usNCoils, eMBRegisterMode eMode)
{
 8009c40:	b590      	push	{r4, r7, lr}
 8009c42:	b08b      	sub	sp, #44	; 0x2c
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	60f8      	str	r0, [r7, #12]
 8009c48:	4608      	mov	r0, r1
 8009c4a:	4611      	mov	r1, r2
 8009c4c:	461a      	mov	r2, r3
 8009c4e:	4603      	mov	r3, r0
 8009c50:	817b      	strh	r3, [r7, #10]
 8009c52:	460b      	mov	r3, r1
 8009c54:	813b      	strh	r3, [r7, #8]
 8009c56:	4613      	mov	r3, r2
 8009c58:	71fb      	strb	r3, [r7, #7]
    eMBErrorCode    eStatus = MB_ENOERR;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    USHORT          iRegIndex , iRegBitIndex , iNReg;
    UCHAR *         pucCoilBuf;
    USHORT          COIL_START;
    USHORT          COIL_NCOILS;
    USHORT          usCoilStart;
    iNReg =  usNCoils / 8 + 1;
 8009c60:	893b      	ldrh	r3, [r7, #8]
 8009c62:	08db      	lsrs	r3, r3, #3
 8009c64:	b29b      	uxth	r3, r3
 8009c66:	3301      	adds	r3, #1
 8009c68:	847b      	strh	r3, [r7, #34]	; 0x22

    pucCoilBuf = ucSCoilBuf;
 8009c6a:	4b4a      	ldr	r3, [pc, #296]	; (8009d94 <eMBRegCoilsCB+0x154>)
 8009c6c:	61fb      	str	r3, [r7, #28]
    COIL_START = S_COIL_START;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	837b      	strh	r3, [r7, #26]
    COIL_NCOILS = S_COIL_NCOILS;
 8009c72:	2308      	movs	r3, #8
 8009c74:	833b      	strh	r3, [r7, #24]
    usCoilStart = usSCoilStart;
 8009c76:	4b48      	ldr	r3, [pc, #288]	; (8009d98 <eMBRegCoilsCB+0x158>)
 8009c78:	881b      	ldrh	r3, [r3, #0]
 8009c7a:	82fb      	strh	r3, [r7, #22]

    /* it already plus one in modbus function method. */
    usAddress--;
 8009c7c:	897b      	ldrh	r3, [r7, #10]
 8009c7e:	3b01      	subs	r3, #1
 8009c80:	817b      	strh	r3, [r7, #10]

    if( ( usAddress >= COIL_START ) &&
 8009c82:	897a      	ldrh	r2, [r7, #10]
 8009c84:	8b7b      	ldrh	r3, [r7, #26]
 8009c86:	429a      	cmp	r2, r3
 8009c88:	d37b      	bcc.n	8009d82 <eMBRegCoilsCB+0x142>
        ( usAddress + usNCoils <= COIL_START + COIL_NCOILS ) )
 8009c8a:	897a      	ldrh	r2, [r7, #10]
 8009c8c:	893b      	ldrh	r3, [r7, #8]
 8009c8e:	441a      	add	r2, r3
 8009c90:	8b79      	ldrh	r1, [r7, #26]
 8009c92:	8b3b      	ldrh	r3, [r7, #24]
 8009c94:	440b      	add	r3, r1
    if( ( usAddress >= COIL_START ) &&
 8009c96:	429a      	cmp	r2, r3
 8009c98:	dc73      	bgt.n	8009d82 <eMBRegCoilsCB+0x142>
    {
        iRegIndex = (USHORT) (usAddress - usCoilStart) / 8;
 8009c9a:	897a      	ldrh	r2, [r7, #10]
 8009c9c:	8afb      	ldrh	r3, [r7, #22]
 8009c9e:	1ad3      	subs	r3, r2, r3
 8009ca0:	b29b      	uxth	r3, r3
 8009ca2:	08db      	lsrs	r3, r3, #3
 8009ca4:	84bb      	strh	r3, [r7, #36]	; 0x24
        iRegBitIndex = (USHORT) (usAddress - usCoilStart) % 8;
 8009ca6:	897a      	ldrh	r2, [r7, #10]
 8009ca8:	8afb      	ldrh	r3, [r7, #22]
 8009caa:	1ad3      	subs	r3, r2, r3
 8009cac:	b29b      	uxth	r3, r3
 8009cae:	f003 0307 	and.w	r3, r3, #7
 8009cb2:	82bb      	strh	r3, [r7, #20]
        switch ( eMode )
 8009cb4:	79fb      	ldrb	r3, [r7, #7]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d015      	beq.n	8009ce6 <eMBRegCoilsCB+0xa6>
 8009cba:	2b01      	cmp	r3, #1
 8009cbc:	d045      	beq.n	8009d4a <eMBRegCoilsCB+0x10a>
 8009cbe:	e063      	b.n	8009d88 <eMBRegCoilsCB+0x148>
        {
        /* read current coil values from the protocol stack. */
        case MB_REG_READ:
            while (iNReg > 0)
            {
                *pucRegBuffer++ = xMBUtilGetBits(&pucCoilBuf[iRegIndex++],
 8009cc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009cc2:	1c5a      	adds	r2, r3, #1
 8009cc4:	84ba      	strh	r2, [r7, #36]	; 0x24
 8009cc6:	461a      	mov	r2, r3
 8009cc8:	69fb      	ldr	r3, [r7, #28]
 8009cca:	1898      	adds	r0, r3, r2
 8009ccc:	68fc      	ldr	r4, [r7, #12]
 8009cce:	1c63      	adds	r3, r4, #1
 8009cd0:	60fb      	str	r3, [r7, #12]
 8009cd2:	8abb      	ldrh	r3, [r7, #20]
 8009cd4:	2208      	movs	r2, #8
 8009cd6:	4619      	mov	r1, r3
 8009cd8:	f7fe fd3a 	bl	8008750 <xMBUtilGetBits>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	7023      	strb	r3, [r4, #0]
                        iRegBitIndex, 8);
                iNReg--;
 8009ce0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009ce2:	3b01      	subs	r3, #1
 8009ce4:	847b      	strh	r3, [r7, #34]	; 0x22
            while (iNReg > 0)
 8009ce6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d1e9      	bne.n	8009cc0 <eMBRegCoilsCB+0x80>
            }
            pucRegBuffer--;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	3b01      	subs	r3, #1
 8009cf0:	60fb      	str	r3, [r7, #12]
            /* last coils */
            usNCoils = usNCoils % 8;
 8009cf2:	893b      	ldrh	r3, [r7, #8]
 8009cf4:	f003 0307 	and.w	r3, r3, #7
 8009cf8:	813b      	strh	r3, [r7, #8]
            /* filling zero to high bit */
            *pucRegBuffer = *pucRegBuffer << (8 - usNCoils);
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	781b      	ldrb	r3, [r3, #0]
 8009cfe:	461a      	mov	r2, r3
 8009d00:	893b      	ldrh	r3, [r7, #8]
 8009d02:	f1c3 0308 	rsb	r3, r3, #8
 8009d06:	fa02 f303 	lsl.w	r3, r2, r3
 8009d0a:	b2da      	uxtb	r2, r3
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	701a      	strb	r2, [r3, #0]
            *pucRegBuffer = *pucRegBuffer >> (8 - usNCoils);
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	781b      	ldrb	r3, [r3, #0]
 8009d14:	461a      	mov	r2, r3
 8009d16:	893b      	ldrh	r3, [r7, #8]
 8009d18:	f1c3 0308 	rsb	r3, r3, #8
 8009d1c:	fa42 f303 	asr.w	r3, r2, r3
 8009d20:	b2da      	uxtb	r2, r3
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	701a      	strb	r2, [r3, #0]
            break;
 8009d26:	e02b      	b.n	8009d80 <eMBRegCoilsCB+0x140>

            /* write current coil values with new values from the protocol stack. */
        case MB_REG_WRITE:
            while (iNReg > 1)
            {
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, 8,
 8009d28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d2a:	1c5a      	adds	r2, r3, #1
 8009d2c:	84ba      	strh	r2, [r7, #36]	; 0x24
 8009d2e:	461a      	mov	r2, r3
 8009d30:	69fb      	ldr	r3, [r7, #28]
 8009d32:	1898      	adds	r0, r3, r2
                        *pucRegBuffer++);
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	1c5a      	adds	r2, r3, #1
 8009d38:	60fa      	str	r2, [r7, #12]
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, 8,
 8009d3a:	781b      	ldrb	r3, [r3, #0]
 8009d3c:	8ab9      	ldrh	r1, [r7, #20]
 8009d3e:	2208      	movs	r2, #8
 8009d40:	f7fe fc9a 	bl	8008678 <xMBUtilSetBits>
                iNReg--;
 8009d44:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009d46:	3b01      	subs	r3, #1
 8009d48:	847b      	strh	r3, [r7, #34]	; 0x22
            while (iNReg > 1)
 8009d4a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009d4c:	2b01      	cmp	r3, #1
 8009d4e:	d8eb      	bhi.n	8009d28 <eMBRegCoilsCB+0xe8>
            }
            /* last coils */
            usNCoils = usNCoils % 8;
 8009d50:	893b      	ldrh	r3, [r7, #8]
 8009d52:	f003 0307 	and.w	r3, r3, #7
 8009d56:	813b      	strh	r3, [r7, #8]
            /* xMBUtilSetBits has bug when ucNBits is zero */
            if (usNCoils != 0)
 8009d58:	893b      	ldrh	r3, [r7, #8]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d00f      	beq.n	8009d7e <eMBRegCoilsCB+0x13e>
            {
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, usNCoils,
 8009d5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d60:	1c5a      	adds	r2, r3, #1
 8009d62:	84ba      	strh	r2, [r7, #36]	; 0x24
 8009d64:	461a      	mov	r2, r3
 8009d66:	69fb      	ldr	r3, [r7, #28]
 8009d68:	1898      	adds	r0, r3, r2
 8009d6a:	893b      	ldrh	r3, [r7, #8]
 8009d6c:	b2dc      	uxtb	r4, r3
                        *pucRegBuffer++);
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	1c5a      	adds	r2, r3, #1
 8009d72:	60fa      	str	r2, [r7, #12]
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, usNCoils,
 8009d74:	781b      	ldrb	r3, [r3, #0]
 8009d76:	8ab9      	ldrh	r1, [r7, #20]
 8009d78:	4622      	mov	r2, r4
 8009d7a:	f7fe fc7d 	bl	8008678 <xMBUtilSetBits>
            }
            break;
 8009d7e:	bf00      	nop
        switch ( eMode )
 8009d80:	e002      	b.n	8009d88 <eMBRegCoilsCB+0x148>
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 8009d82:	2301      	movs	r3, #1
 8009d84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    return eStatus;
 8009d88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	372c      	adds	r7, #44	; 0x2c
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd90      	pop	{r4, r7, pc}
 8009d94:	20005094 	.word	0x20005094
 8009d98:	20004bf2 	.word	0x20004bf2

08009d9c <eMBRegDiscreteCB>:
 * @param usNDiscrete discrete number
 *
 * @return result
 */
eMBErrorCode eMBRegDiscreteCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete )
{
 8009d9c:	b590      	push	{r4, r7, lr}
 8009d9e:	b089      	sub	sp, #36	; 0x24
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
 8009da4:	460b      	mov	r3, r1
 8009da6:	807b      	strh	r3, [r7, #2]
 8009da8:	4613      	mov	r3, r2
 8009daa:	803b      	strh	r3, [r7, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 8009dac:	2300      	movs	r3, #0
 8009dae:	77fb      	strb	r3, [r7, #31]
    USHORT          iRegIndex , iRegBitIndex , iNReg;
    UCHAR *         pucDiscreteInputBuf;
    USHORT          DISCRETE_INPUT_START;
    USHORT          DISCRETE_INPUT_NDISCRETES;
    USHORT          usDiscreteInputStart;
    iNReg =  usNDiscrete / 8 + 1;
 8009db0:	883b      	ldrh	r3, [r7, #0]
 8009db2:	08db      	lsrs	r3, r3, #3
 8009db4:	b29b      	uxth	r3, r3
 8009db6:	3301      	adds	r3, #1
 8009db8:	837b      	strh	r3, [r7, #26]

    pucDiscreteInputBuf = ucSDiscInBuf;
 8009dba:	4b30      	ldr	r3, [pc, #192]	; (8009e7c <eMBRegDiscreteCB+0xe0>)
 8009dbc:	617b      	str	r3, [r7, #20]
    DISCRETE_INPUT_START = S_DISCRETE_INPUT_START;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	827b      	strh	r3, [r7, #18]
    DISCRETE_INPUT_NDISCRETES = S_DISCRETE_INPUT_NDISCRETES;
 8009dc2:	2308      	movs	r3, #8
 8009dc4:	823b      	strh	r3, [r7, #16]
    usDiscreteInputStart = usSDiscInStart;
 8009dc6:	4b2e      	ldr	r3, [pc, #184]	; (8009e80 <eMBRegDiscreteCB+0xe4>)
 8009dc8:	881b      	ldrh	r3, [r3, #0]
 8009dca:	81fb      	strh	r3, [r7, #14]

    /* it already plus one in modbus function method. */
    usAddress--;
 8009dcc:	887b      	ldrh	r3, [r7, #2]
 8009dce:	3b01      	subs	r3, #1
 8009dd0:	807b      	strh	r3, [r7, #2]

    if ((usAddress >= DISCRETE_INPUT_START)
 8009dd2:	887a      	ldrh	r2, [r7, #2]
 8009dd4:	8a7b      	ldrh	r3, [r7, #18]
 8009dd6:	429a      	cmp	r2, r3
 8009dd8:	d349      	bcc.n	8009e6e <eMBRegDiscreteCB+0xd2>
            && (usAddress + usNDiscrete    <= DISCRETE_INPUT_START + DISCRETE_INPUT_NDISCRETES))
 8009dda:	887a      	ldrh	r2, [r7, #2]
 8009ddc:	883b      	ldrh	r3, [r7, #0]
 8009dde:	441a      	add	r2, r3
 8009de0:	8a79      	ldrh	r1, [r7, #18]
 8009de2:	8a3b      	ldrh	r3, [r7, #16]
 8009de4:	440b      	add	r3, r1
 8009de6:	429a      	cmp	r2, r3
 8009de8:	dc41      	bgt.n	8009e6e <eMBRegDiscreteCB+0xd2>
    {
        iRegIndex = (USHORT) (usAddress - usDiscreteInputStart) / 8;
 8009dea:	887a      	ldrh	r2, [r7, #2]
 8009dec:	89fb      	ldrh	r3, [r7, #14]
 8009dee:	1ad3      	subs	r3, r2, r3
 8009df0:	b29b      	uxth	r3, r3
 8009df2:	08db      	lsrs	r3, r3, #3
 8009df4:	83bb      	strh	r3, [r7, #28]
        iRegBitIndex = (USHORT) (usAddress - usDiscreteInputStart) % 8;
 8009df6:	887a      	ldrh	r2, [r7, #2]
 8009df8:	89fb      	ldrh	r3, [r7, #14]
 8009dfa:	1ad3      	subs	r3, r2, r3
 8009dfc:	b29b      	uxth	r3, r3
 8009dfe:	f003 0307 	and.w	r3, r3, #7
 8009e02:	81bb      	strh	r3, [r7, #12]

        while (iNReg > 0)
 8009e04:	e012      	b.n	8009e2c <eMBRegDiscreteCB+0x90>
        {
            *pucRegBuffer++ = xMBUtilGetBits(&pucDiscreteInputBuf[iRegIndex++],
 8009e06:	8bbb      	ldrh	r3, [r7, #28]
 8009e08:	1c5a      	adds	r2, r3, #1
 8009e0a:	83ba      	strh	r2, [r7, #28]
 8009e0c:	461a      	mov	r2, r3
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	1898      	adds	r0, r3, r2
 8009e12:	687c      	ldr	r4, [r7, #4]
 8009e14:	1c63      	adds	r3, r4, #1
 8009e16:	607b      	str	r3, [r7, #4]
 8009e18:	89bb      	ldrh	r3, [r7, #12]
 8009e1a:	2208      	movs	r2, #8
 8009e1c:	4619      	mov	r1, r3
 8009e1e:	f7fe fc97 	bl	8008750 <xMBUtilGetBits>
 8009e22:	4603      	mov	r3, r0
 8009e24:	7023      	strb	r3, [r4, #0]
                    iRegBitIndex, 8);
            iNReg--;
 8009e26:	8b7b      	ldrh	r3, [r7, #26]
 8009e28:	3b01      	subs	r3, #1
 8009e2a:	837b      	strh	r3, [r7, #26]
        while (iNReg > 0)
 8009e2c:	8b7b      	ldrh	r3, [r7, #26]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d1e9      	bne.n	8009e06 <eMBRegDiscreteCB+0x6a>
        }
        pucRegBuffer--;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	3b01      	subs	r3, #1
 8009e36:	607b      	str	r3, [r7, #4]
        /* last discrete */
        usNDiscrete = usNDiscrete % 8;
 8009e38:	883b      	ldrh	r3, [r7, #0]
 8009e3a:	f003 0307 	and.w	r3, r3, #7
 8009e3e:	803b      	strh	r3, [r7, #0]
        /* filling zero to high bit */
        *pucRegBuffer = *pucRegBuffer << (8 - usNDiscrete);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	781b      	ldrb	r3, [r3, #0]
 8009e44:	461a      	mov	r2, r3
 8009e46:	883b      	ldrh	r3, [r7, #0]
 8009e48:	f1c3 0308 	rsb	r3, r3, #8
 8009e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8009e50:	b2da      	uxtb	r2, r3
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	701a      	strb	r2, [r3, #0]
        *pucRegBuffer = *pucRegBuffer >> (8 - usNDiscrete);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	781b      	ldrb	r3, [r3, #0]
 8009e5a:	461a      	mov	r2, r3
 8009e5c:	883b      	ldrh	r3, [r7, #0]
 8009e5e:	f1c3 0308 	rsb	r3, r3, #8
 8009e62:	fa42 f303 	asr.w	r3, r2, r3
 8009e66:	b2da      	uxtb	r2, r3
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	701a      	strb	r2, [r3, #0]
 8009e6c:	e001      	b.n	8009e72 <eMBRegDiscreteCB+0xd6>
    }
    else
    {
        eStatus = MB_ENOREG;
 8009e6e:	2301      	movs	r3, #1
 8009e70:	77fb      	strb	r3, [r7, #31]
    }

    return eStatus;
 8009e72:	7ffb      	ldrb	r3, [r7, #31]
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	3724      	adds	r7, #36	; 0x24
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd90      	pop	{r4, r7, pc}
 8009e7c:	20005098 	.word	0x20005098
 8009e80:	20004bf0 	.word	0x20004bf0

08009e84 <eMBMasterRegInputCB>:
 * @param usNRegs input register number
 *
 * @return result
 */
eMBErrorCode eMBMasterRegInputCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b086      	sub	sp, #24
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
 8009e8c:	460b      	mov	r3, r1
 8009e8e:	807b      	strh	r3, [r7, #2]
 8009e90:	4613      	mov	r3, r2
 8009e92:	803b      	strh	r3, [r7, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 8009e94:	2300      	movs	r3, #0
 8009e96:	75fb      	strb	r3, [r7, #23]
    USHORT *        pusRegInputBuf;
    USHORT          REG_INPUT_START;
    USHORT          REG_INPUT_NREGS;
    USHORT          usRegInStart;

    pusRegInputBuf = usMRegInBuf[ucMBMasterGetDestAddress() - 1];
 8009e98:	f7fe fff8 	bl	8008e8c <ucMBMasterGetDestAddress>
 8009e9c:	4b25      	ldr	r3, [pc, #148]	; (8009f34 <eMBMasterRegInputCB+0xb0>)
 8009e9e:	613b      	str	r3, [r7, #16]
    REG_INPUT_START = M_REG_INPUT_START;
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	81fb      	strh	r3, [r7, #14]
    REG_INPUT_NREGS = M_REG_INPUT_NREGS;
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	81bb      	strh	r3, [r7, #12]
    usRegInStart = usMRegInStart;
 8009ea8:	4b23      	ldr	r3, [pc, #140]	; (8009f38 <eMBMasterRegInputCB+0xb4>)
 8009eaa:	881b      	ldrh	r3, [r3, #0]
 8009eac:	817b      	strh	r3, [r7, #10]

    /* it already plus one in modbus function method. */
    usAddress--;
 8009eae:	887b      	ldrh	r3, [r7, #2]
 8009eb0:	3b01      	subs	r3, #1
 8009eb2:	807b      	strh	r3, [r7, #2]

    if ((usAddress >= REG_INPUT_START)
 8009eb4:	887a      	ldrh	r2, [r7, #2]
 8009eb6:	89fb      	ldrh	r3, [r7, #14]
 8009eb8:	429a      	cmp	r2, r3
 8009eba:	d333      	bcc.n	8009f24 <eMBMasterRegInputCB+0xa0>
            && (usAddress + usNRegs <= REG_INPUT_START + REG_INPUT_NREGS))
 8009ebc:	887a      	ldrh	r2, [r7, #2]
 8009ebe:	883b      	ldrh	r3, [r7, #0]
 8009ec0:	441a      	add	r2, r3
 8009ec2:	89f9      	ldrh	r1, [r7, #14]
 8009ec4:	89bb      	ldrh	r3, [r7, #12]
 8009ec6:	440b      	add	r3, r1
 8009ec8:	429a      	cmp	r2, r3
 8009eca:	dc2b      	bgt.n	8009f24 <eMBMasterRegInputCB+0xa0>
    {
        iRegIndex = usAddress - usRegInStart;
 8009ecc:	887a      	ldrh	r2, [r7, #2]
 8009ece:	897b      	ldrh	r3, [r7, #10]
 8009ed0:	1ad3      	subs	r3, r2, r3
 8009ed2:	82bb      	strh	r3, [r7, #20]
        while (usNRegs > 0)
 8009ed4:	e022      	b.n	8009f1c <eMBMasterRegInputCB+0x98>
        {
            pusRegInputBuf[iRegIndex] = *pucRegBuffer++ << 8;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	1c5a      	adds	r2, r3, #1
 8009eda:	607a      	str	r2, [r7, #4]
 8009edc:	781b      	ldrb	r3, [r3, #0]
 8009ede:	b29a      	uxth	r2, r3
 8009ee0:	8abb      	ldrh	r3, [r7, #20]
 8009ee2:	005b      	lsls	r3, r3, #1
 8009ee4:	6939      	ldr	r1, [r7, #16]
 8009ee6:	440b      	add	r3, r1
 8009ee8:	0212      	lsls	r2, r2, #8
 8009eea:	b292      	uxth	r2, r2
 8009eec:	801a      	strh	r2, [r3, #0]
            pusRegInputBuf[iRegIndex] |= *pucRegBuffer++;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	1c5a      	adds	r2, r3, #1
 8009ef2:	607a      	str	r2, [r7, #4]
 8009ef4:	7818      	ldrb	r0, [r3, #0]
 8009ef6:	8abb      	ldrh	r3, [r7, #20]
 8009ef8:	005b      	lsls	r3, r3, #1
 8009efa:	693a      	ldr	r2, [r7, #16]
 8009efc:	4413      	add	r3, r2
 8009efe:	8819      	ldrh	r1, [r3, #0]
 8009f00:	b282      	uxth	r2, r0
 8009f02:	8abb      	ldrh	r3, [r7, #20]
 8009f04:	005b      	lsls	r3, r3, #1
 8009f06:	6938      	ldr	r0, [r7, #16]
 8009f08:	4403      	add	r3, r0
 8009f0a:	430a      	orrs	r2, r1
 8009f0c:	b292      	uxth	r2, r2
 8009f0e:	801a      	strh	r2, [r3, #0]
            iRegIndex++;
 8009f10:	8abb      	ldrh	r3, [r7, #20]
 8009f12:	3301      	adds	r3, #1
 8009f14:	82bb      	strh	r3, [r7, #20]
            usNRegs--;
 8009f16:	883b      	ldrh	r3, [r7, #0]
 8009f18:	3b01      	subs	r3, #1
 8009f1a:	803b      	strh	r3, [r7, #0]
        while (usNRegs > 0)
 8009f1c:	883b      	ldrh	r3, [r7, #0]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d1d9      	bne.n	8009ed6 <eMBMasterRegInputCB+0x52>
    if ((usAddress >= REG_INPUT_START)
 8009f22:	e001      	b.n	8009f28 <eMBMasterRegInputCB+0xa4>
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 8009f24:	2301      	movs	r3, #1
 8009f26:	75fb      	strb	r3, [r7, #23]
    }

    return eStatus;
 8009f28:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	3718      	adds	r7, #24
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}
 8009f32:	bf00      	nop
 8009f34:	200050dc 	.word	0x200050dc
 8009f38:	20004bfc 	.word	0x20004bfc

08009f3c <eMBMasterRegHoldingCB>:
 *
 * @return result
 */
eMBErrorCode eMBMasterRegHoldingCB(UCHAR * pucRegBuffer, USHORT usAddress,
        USHORT usNRegs, eMBRegisterMode eMode)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b088      	sub	sp, #32
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	60f8      	str	r0, [r7, #12]
 8009f44:	4608      	mov	r0, r1
 8009f46:	4611      	mov	r1, r2
 8009f48:	461a      	mov	r2, r3
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	817b      	strh	r3, [r7, #10]
 8009f4e:	460b      	mov	r3, r1
 8009f50:	813b      	strh	r3, [r7, #8]
 8009f52:	4613      	mov	r3, r2
 8009f54:	71fb      	strb	r3, [r7, #7]
    eMBErrorCode    eStatus = MB_ENOERR;
 8009f56:	2300      	movs	r3, #0
 8009f58:	77fb      	strb	r3, [r7, #31]
    USHORT *        pusRegHoldingBuf;
    USHORT          REG_HOLDING_START;
    USHORT          REG_HOLDING_NREGS;
    USHORT          usRegHoldStart;

    pusRegHoldingBuf = usMRegHoldBuf[ucMBMasterGetDestAddress() - 1];
 8009f5a:	f7fe ff97 	bl	8008e8c <ucMBMasterGetDestAddress>
 8009f5e:	4b39      	ldr	r3, [pc, #228]	; (800a044 <eMBMasterRegHoldingCB+0x108>)
 8009f60:	61bb      	str	r3, [r7, #24]
    REG_HOLDING_START = M_REG_HOLDING_START;
 8009f62:	2300      	movs	r3, #0
 8009f64:	82fb      	strh	r3, [r7, #22]
    REG_HOLDING_NREGS = M_REG_HOLDING_NREGS;
 8009f66:	2300      	movs	r3, #0
 8009f68:	82bb      	strh	r3, [r7, #20]
    usRegHoldStart = usMRegHoldStart;
 8009f6a:	4b37      	ldr	r3, [pc, #220]	; (800a048 <eMBMasterRegHoldingCB+0x10c>)
 8009f6c:	881b      	ldrh	r3, [r3, #0]
 8009f6e:	827b      	strh	r3, [r7, #18]
    /* if mode is read, the master will write the received date to buffer. */
    eMode = MB_REG_WRITE;
 8009f70:	2301      	movs	r3, #1
 8009f72:	71fb      	strb	r3, [r7, #7]

    /* it already plus one in modbus function method. */
    usAddress--;
 8009f74:	897b      	ldrh	r3, [r7, #10]
 8009f76:	3b01      	subs	r3, #1
 8009f78:	817b      	strh	r3, [r7, #10]

    if ((usAddress >= REG_HOLDING_START)
 8009f7a:	897a      	ldrh	r2, [r7, #10]
 8009f7c:	8afb      	ldrh	r3, [r7, #22]
 8009f7e:	429a      	cmp	r2, r3
 8009f80:	d359      	bcc.n	800a036 <eMBMasterRegHoldingCB+0xfa>
            && (usAddress + usNRegs <= REG_HOLDING_START + REG_HOLDING_NREGS))
 8009f82:	897a      	ldrh	r2, [r7, #10]
 8009f84:	893b      	ldrh	r3, [r7, #8]
 8009f86:	441a      	add	r2, r3
 8009f88:	8af9      	ldrh	r1, [r7, #22]
 8009f8a:	8abb      	ldrh	r3, [r7, #20]
 8009f8c:	440b      	add	r3, r1
 8009f8e:	429a      	cmp	r2, r3
 8009f90:	dc51      	bgt.n	800a036 <eMBMasterRegHoldingCB+0xfa>
    {
        iRegIndex = usAddress - usRegHoldStart;
 8009f92:	897a      	ldrh	r2, [r7, #10]
 8009f94:	8a7b      	ldrh	r3, [r7, #18]
 8009f96:	1ad3      	subs	r3, r2, r3
 8009f98:	83bb      	strh	r3, [r7, #28]
        switch (eMode)
 8009f9a:	79fb      	ldrb	r3, [r7, #7]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d01e      	beq.n	8009fde <eMBMasterRegHoldingCB+0xa2>
 8009fa0:	2b01      	cmp	r3, #1
 8009fa2:	d043      	beq.n	800a02c <eMBMasterRegHoldingCB+0xf0>
 8009fa4:	e049      	b.n	800a03a <eMBMasterRegHoldingCB+0xfe>
        {
        /* read current register values from the protocol stack. */
        case MB_REG_READ:
            while (usNRegs > 0)
            {
                *pucRegBuffer++ = (UCHAR) (pusRegHoldingBuf[iRegIndex] >> 8);
 8009fa6:	8bbb      	ldrh	r3, [r7, #28]
 8009fa8:	005b      	lsls	r3, r3, #1
 8009faa:	69ba      	ldr	r2, [r7, #24]
 8009fac:	4413      	add	r3, r2
 8009fae:	881b      	ldrh	r3, [r3, #0]
 8009fb0:	0a1b      	lsrs	r3, r3, #8
 8009fb2:	b299      	uxth	r1, r3
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	1c5a      	adds	r2, r3, #1
 8009fb8:	60fa      	str	r2, [r7, #12]
 8009fba:	b2ca      	uxtb	r2, r1
 8009fbc:	701a      	strb	r2, [r3, #0]
                *pucRegBuffer++ = (UCHAR) (pusRegHoldingBuf[iRegIndex] & 0xFF);
 8009fbe:	8bbb      	ldrh	r3, [r7, #28]
 8009fc0:	005b      	lsls	r3, r3, #1
 8009fc2:	69ba      	ldr	r2, [r7, #24]
 8009fc4:	4413      	add	r3, r2
 8009fc6:	8819      	ldrh	r1, [r3, #0]
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	1c5a      	adds	r2, r3, #1
 8009fcc:	60fa      	str	r2, [r7, #12]
 8009fce:	b2ca      	uxtb	r2, r1
 8009fd0:	701a      	strb	r2, [r3, #0]
                iRegIndex++;
 8009fd2:	8bbb      	ldrh	r3, [r7, #28]
 8009fd4:	3301      	adds	r3, #1
 8009fd6:	83bb      	strh	r3, [r7, #28]
                usNRegs--;
 8009fd8:	893b      	ldrh	r3, [r7, #8]
 8009fda:	3b01      	subs	r3, #1
 8009fdc:	813b      	strh	r3, [r7, #8]
            while (usNRegs > 0)
 8009fde:	893b      	ldrh	r3, [r7, #8]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d1e0      	bne.n	8009fa6 <eMBMasterRegHoldingCB+0x6a>
            }
            break;
 8009fe4:	e026      	b.n	800a034 <eMBMasterRegHoldingCB+0xf8>
        /* write current register values with new values from the protocol stack. */
        case MB_REG_WRITE:
            while (usNRegs > 0)
            {
                pusRegHoldingBuf[iRegIndex] = *pucRegBuffer++ << 8;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	1c5a      	adds	r2, r3, #1
 8009fea:	60fa      	str	r2, [r7, #12]
 8009fec:	781b      	ldrb	r3, [r3, #0]
 8009fee:	b29a      	uxth	r2, r3
 8009ff0:	8bbb      	ldrh	r3, [r7, #28]
 8009ff2:	005b      	lsls	r3, r3, #1
 8009ff4:	69b9      	ldr	r1, [r7, #24]
 8009ff6:	440b      	add	r3, r1
 8009ff8:	0212      	lsls	r2, r2, #8
 8009ffa:	b292      	uxth	r2, r2
 8009ffc:	801a      	strh	r2, [r3, #0]
                pusRegHoldingBuf[iRegIndex] |= *pucRegBuffer++;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	1c5a      	adds	r2, r3, #1
 800a002:	60fa      	str	r2, [r7, #12]
 800a004:	7818      	ldrb	r0, [r3, #0]
 800a006:	8bbb      	ldrh	r3, [r7, #28]
 800a008:	005b      	lsls	r3, r3, #1
 800a00a:	69ba      	ldr	r2, [r7, #24]
 800a00c:	4413      	add	r3, r2
 800a00e:	8819      	ldrh	r1, [r3, #0]
 800a010:	b282      	uxth	r2, r0
 800a012:	8bbb      	ldrh	r3, [r7, #28]
 800a014:	005b      	lsls	r3, r3, #1
 800a016:	69b8      	ldr	r0, [r7, #24]
 800a018:	4403      	add	r3, r0
 800a01a:	430a      	orrs	r2, r1
 800a01c:	b292      	uxth	r2, r2
 800a01e:	801a      	strh	r2, [r3, #0]
                iRegIndex++;
 800a020:	8bbb      	ldrh	r3, [r7, #28]
 800a022:	3301      	adds	r3, #1
 800a024:	83bb      	strh	r3, [r7, #28]
                usNRegs--;
 800a026:	893b      	ldrh	r3, [r7, #8]
 800a028:	3b01      	subs	r3, #1
 800a02a:	813b      	strh	r3, [r7, #8]
            while (usNRegs > 0)
 800a02c:	893b      	ldrh	r3, [r7, #8]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d1d9      	bne.n	8009fe6 <eMBMasterRegHoldingCB+0xaa>
            }
            break;
 800a032:	bf00      	nop
        switch (eMode)
 800a034:	e001      	b.n	800a03a <eMBMasterRegHoldingCB+0xfe>
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 800a036:	2301      	movs	r3, #1
 800a038:	77fb      	strb	r3, [r7, #31]
    }
    return eStatus;
 800a03a:	7ffb      	ldrb	r3, [r7, #31]
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	3720      	adds	r7, #32
 800a040:	46bd      	mov	sp, r7
 800a042:	bd80      	pop	{r7, pc}
 800a044:	200050dc 	.word	0x200050dc
 800a048:	20004bfe 	.word	0x20004bfe

0800a04c <eMBMasterRegCoilsCB>:
 *
 * @return result
 */
eMBErrorCode eMBMasterRegCoilsCB(UCHAR * pucRegBuffer, USHORT usAddress,
        USHORT usNCoils, eMBRegisterMode eMode)
{
 800a04c:	b590      	push	{r4, r7, lr}
 800a04e:	b08b      	sub	sp, #44	; 0x2c
 800a050:	af00      	add	r7, sp, #0
 800a052:	60f8      	str	r0, [r7, #12]
 800a054:	4608      	mov	r0, r1
 800a056:	4611      	mov	r1, r2
 800a058:	461a      	mov	r2, r3
 800a05a:	4603      	mov	r3, r0
 800a05c:	817b      	strh	r3, [r7, #10]
 800a05e:	460b      	mov	r3, r1
 800a060:	813b      	strh	r3, [r7, #8]
 800a062:	4613      	mov	r3, r2
 800a064:	71fb      	strb	r3, [r7, #7]
    eMBErrorCode    eStatus = MB_ENOERR;
 800a066:	2300      	movs	r3, #0
 800a068:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    USHORT          iRegIndex , iRegBitIndex , iNReg;
    UCHAR *         pucCoilBuf;
    USHORT          COIL_START;
    USHORT          COIL_NCOILS;
    USHORT          usCoilStart;
    iNReg =  usNCoils / 8 + 1;
 800a06c:	893b      	ldrh	r3, [r7, #8]
 800a06e:	08db      	lsrs	r3, r3, #3
 800a070:	b29b      	uxth	r3, r3
 800a072:	3301      	adds	r3, #1
 800a074:	847b      	strh	r3, [r7, #34]	; 0x22

    pucCoilBuf = ucMCoilBuf[ucMBMasterGetDestAddress() - 1];
 800a076:	f7fe ff09 	bl	8008e8c <ucMBMasterGetDestAddress>
 800a07a:	4603      	mov	r3, r0
 800a07c:	3b01      	subs	r3, #1
 800a07e:	4a4c      	ldr	r2, [pc, #304]	; (800a1b0 <eMBMasterRegCoilsCB+0x164>)
 800a080:	4413      	add	r3, r2
 800a082:	61fb      	str	r3, [r7, #28]
    COIL_START = M_COIL_START;
 800a084:	2300      	movs	r3, #0
 800a086:	837b      	strh	r3, [r7, #26]
    COIL_NCOILS = M_COIL_NCOILS;
 800a088:	2308      	movs	r3, #8
 800a08a:	833b      	strh	r3, [r7, #24]
    usCoilStart = usMCoilStart;
 800a08c:	4b49      	ldr	r3, [pc, #292]	; (800a1b4 <eMBMasterRegCoilsCB+0x168>)
 800a08e:	881b      	ldrh	r3, [r3, #0]
 800a090:	82fb      	strh	r3, [r7, #22]

    /* if mode is read,the master will write the received date to buffer. */
    eMode = MB_REG_WRITE;
 800a092:	2301      	movs	r3, #1
 800a094:	71fb      	strb	r3, [r7, #7]

    /* it already plus one in modbus function method. */
    usAddress--;
 800a096:	897b      	ldrh	r3, [r7, #10]
 800a098:	3b01      	subs	r3, #1
 800a09a:	817b      	strh	r3, [r7, #10]

    if ((usAddress >= COIL_START)
 800a09c:	897a      	ldrh	r2, [r7, #10]
 800a09e:	8b7b      	ldrh	r3, [r7, #26]
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	d37b      	bcc.n	800a19c <eMBMasterRegCoilsCB+0x150>
            && (usAddress + usNCoils <= COIL_START + COIL_NCOILS))
 800a0a4:	897a      	ldrh	r2, [r7, #10]
 800a0a6:	893b      	ldrh	r3, [r7, #8]
 800a0a8:	441a      	add	r2, r3
 800a0aa:	8b79      	ldrh	r1, [r7, #26]
 800a0ac:	8b3b      	ldrh	r3, [r7, #24]
 800a0ae:	440b      	add	r3, r1
 800a0b0:	429a      	cmp	r2, r3
 800a0b2:	dc73      	bgt.n	800a19c <eMBMasterRegCoilsCB+0x150>
    {
        iRegIndex = (USHORT) (usAddress - usCoilStart) / 8;
 800a0b4:	897a      	ldrh	r2, [r7, #10]
 800a0b6:	8afb      	ldrh	r3, [r7, #22]
 800a0b8:	1ad3      	subs	r3, r2, r3
 800a0ba:	b29b      	uxth	r3, r3
 800a0bc:	08db      	lsrs	r3, r3, #3
 800a0be:	84bb      	strh	r3, [r7, #36]	; 0x24
        iRegBitIndex = (USHORT) (usAddress - usCoilStart) % 8;
 800a0c0:	897a      	ldrh	r2, [r7, #10]
 800a0c2:	8afb      	ldrh	r3, [r7, #22]
 800a0c4:	1ad3      	subs	r3, r2, r3
 800a0c6:	b29b      	uxth	r3, r3
 800a0c8:	f003 0307 	and.w	r3, r3, #7
 800a0cc:	82bb      	strh	r3, [r7, #20]
        switch (eMode)
 800a0ce:	79fb      	ldrb	r3, [r7, #7]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d015      	beq.n	800a100 <eMBMasterRegCoilsCB+0xb4>
 800a0d4:	2b01      	cmp	r3, #1
 800a0d6:	d045      	beq.n	800a164 <eMBMasterRegCoilsCB+0x118>
 800a0d8:	e063      	b.n	800a1a2 <eMBMasterRegCoilsCB+0x156>
        {
         /* read current coil values from the protocol stack. */
        case MB_REG_READ:
            while (iNReg > 0)
            {
                *pucRegBuffer++ = xMBUtilGetBits(&pucCoilBuf[iRegIndex++],
 800a0da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a0dc:	1c5a      	adds	r2, r3, #1
 800a0de:	84ba      	strh	r2, [r7, #36]	; 0x24
 800a0e0:	461a      	mov	r2, r3
 800a0e2:	69fb      	ldr	r3, [r7, #28]
 800a0e4:	1898      	adds	r0, r3, r2
 800a0e6:	68fc      	ldr	r4, [r7, #12]
 800a0e8:	1c63      	adds	r3, r4, #1
 800a0ea:	60fb      	str	r3, [r7, #12]
 800a0ec:	8abb      	ldrh	r3, [r7, #20]
 800a0ee:	2208      	movs	r2, #8
 800a0f0:	4619      	mov	r1, r3
 800a0f2:	f7fe fb2d 	bl	8008750 <xMBUtilGetBits>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	7023      	strb	r3, [r4, #0]
                        						 iRegBitIndex, 8);
                iNReg--;
 800a0fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a0fc:	3b01      	subs	r3, #1
 800a0fe:	847b      	strh	r3, [r7, #34]	; 0x22
            while (iNReg > 0)
 800a100:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a102:	2b00      	cmp	r3, #0
 800a104:	d1e9      	bne.n	800a0da <eMBMasterRegCoilsCB+0x8e>
            }
            pucRegBuffer--;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	3b01      	subs	r3, #1
 800a10a:	60fb      	str	r3, [r7, #12]
            /* last coils */
            usNCoils = usNCoils % 8;
 800a10c:	893b      	ldrh	r3, [r7, #8]
 800a10e:	f003 0307 	and.w	r3, r3, #7
 800a112:	813b      	strh	r3, [r7, #8]
            /* filling zero to high bit */
            *pucRegBuffer = *pucRegBuffer << (8 - usNCoils);
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	781b      	ldrb	r3, [r3, #0]
 800a118:	461a      	mov	r2, r3
 800a11a:	893b      	ldrh	r3, [r7, #8]
 800a11c:	f1c3 0308 	rsb	r3, r3, #8
 800a120:	fa02 f303 	lsl.w	r3, r2, r3
 800a124:	b2da      	uxtb	r2, r3
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	701a      	strb	r2, [r3, #0]
            *pucRegBuffer = *pucRegBuffer >> (8 - usNCoils);
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	781b      	ldrb	r3, [r3, #0]
 800a12e:	461a      	mov	r2, r3
 800a130:	893b      	ldrh	r3, [r7, #8]
 800a132:	f1c3 0308 	rsb	r3, r3, #8
 800a136:	fa42 f303 	asr.w	r3, r2, r3
 800a13a:	b2da      	uxtb	r2, r3
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	701a      	strb	r2, [r3, #0]
            break;
 800a140:	e02b      	b.n	800a19a <eMBMasterRegCoilsCB+0x14e>

        /* write current coil values with new values from the protocol stack. */
        case MB_REG_WRITE:
            while (iNReg > 1)
            {
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, 8,
 800a142:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a144:	1c5a      	adds	r2, r3, #1
 800a146:	84ba      	strh	r2, [r7, #36]	; 0x24
 800a148:	461a      	mov	r2, r3
 800a14a:	69fb      	ldr	r3, [r7, #28]
 800a14c:	1898      	adds	r0, r3, r2
                        *pucRegBuffer++);
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	1c5a      	adds	r2, r3, #1
 800a152:	60fa      	str	r2, [r7, #12]
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, 8,
 800a154:	781b      	ldrb	r3, [r3, #0]
 800a156:	8ab9      	ldrh	r1, [r7, #20]
 800a158:	2208      	movs	r2, #8
 800a15a:	f7fe fa8d 	bl	8008678 <xMBUtilSetBits>
                iNReg--;
 800a15e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a160:	3b01      	subs	r3, #1
 800a162:	847b      	strh	r3, [r7, #34]	; 0x22
            while (iNReg > 1)
 800a164:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a166:	2b01      	cmp	r3, #1
 800a168:	d8eb      	bhi.n	800a142 <eMBMasterRegCoilsCB+0xf6>
            }
            /* last coils */
            usNCoils = usNCoils % 8;
 800a16a:	893b      	ldrh	r3, [r7, #8]
 800a16c:	f003 0307 	and.w	r3, r3, #7
 800a170:	813b      	strh	r3, [r7, #8]
            /* xMBUtilSetBits has bug when ucNBits is zero */
            if (usNCoils != 0)
 800a172:	893b      	ldrh	r3, [r7, #8]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d00f      	beq.n	800a198 <eMBMasterRegCoilsCB+0x14c>
            {
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, usNCoils,
 800a178:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a17a:	1c5a      	adds	r2, r3, #1
 800a17c:	84ba      	strh	r2, [r7, #36]	; 0x24
 800a17e:	461a      	mov	r2, r3
 800a180:	69fb      	ldr	r3, [r7, #28]
 800a182:	1898      	adds	r0, r3, r2
 800a184:	893b      	ldrh	r3, [r7, #8]
 800a186:	b2dc      	uxtb	r4, r3
                        *pucRegBuffer++);
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	1c5a      	adds	r2, r3, #1
 800a18c:	60fa      	str	r2, [r7, #12]
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, usNCoils,
 800a18e:	781b      	ldrb	r3, [r3, #0]
 800a190:	8ab9      	ldrh	r1, [r7, #20]
 800a192:	4622      	mov	r2, r4
 800a194:	f7fe fa70 	bl	8008678 <xMBUtilSetBits>
            }
            break;
 800a198:	bf00      	nop
        switch (eMode)
 800a19a:	e002      	b.n	800a1a2 <eMBMasterRegCoilsCB+0x156>
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 800a19c:	2301      	movs	r3, #1
 800a19e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    return eStatus;
 800a1a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	372c      	adds	r7, #44	; 0x2c
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd90      	pop	{r4, r7, pc}
 800a1ae:	bf00      	nop
 800a1b0:	200050cc 	.word	0x200050cc
 800a1b4:	20004bfa 	.word	0x20004bfa

0800a1b8 <eMBMasterRegDiscreteCB>:
 * @param usNDiscrete discrete number
 *
 * @return result
 */
eMBErrorCode eMBMasterRegDiscreteCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete )
{
 800a1b8:	b590      	push	{r4, r7, lr}
 800a1ba:	b089      	sub	sp, #36	; 0x24
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
 800a1c0:	460b      	mov	r3, r1
 800a1c2:	807b      	strh	r3, [r7, #2]
 800a1c4:	4613      	mov	r3, r2
 800a1c6:	803b      	strh	r3, [r7, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	77fb      	strb	r3, [r7, #31]
    USHORT          iRegIndex , iRegBitIndex , iNReg;
    UCHAR *         pucDiscreteInputBuf;
    USHORT          DISCRETE_INPUT_START;
    USHORT          DISCRETE_INPUT_NDISCRETES;
    USHORT          usDiscreteInputStart;
    iNReg =  usNDiscrete / 8 + 1;
 800a1cc:	883b      	ldrh	r3, [r7, #0]
 800a1ce:	08db      	lsrs	r3, r3, #3
 800a1d0:	b29b      	uxth	r3, r3
 800a1d2:	3301      	adds	r3, #1
 800a1d4:	837b      	strh	r3, [r7, #26]

    pucDiscreteInputBuf = ucMDiscInBuf[ucMBMasterGetDestAddress() - 1];
 800a1d6:	f7fe fe59 	bl	8008e8c <ucMBMasterGetDestAddress>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	3b01      	subs	r3, #1
 800a1de:	4a2d      	ldr	r2, [pc, #180]	; (800a294 <eMBMasterRegDiscreteCB+0xdc>)
 800a1e0:	4413      	add	r3, r2
 800a1e2:	617b      	str	r3, [r7, #20]
    DISCRETE_INPUT_START = M_DISCRETE_INPUT_START;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	827b      	strh	r3, [r7, #18]
    DISCRETE_INPUT_NDISCRETES = M_DISCRETE_INPUT_NDISCRETES;
 800a1e8:	2308      	movs	r3, #8
 800a1ea:	823b      	strh	r3, [r7, #16]
    usDiscreteInputStart = usMDiscInStart;
 800a1ec:	4b2a      	ldr	r3, [pc, #168]	; (800a298 <eMBMasterRegDiscreteCB+0xe0>)
 800a1ee:	881b      	ldrh	r3, [r3, #0]
 800a1f0:	81fb      	strh	r3, [r7, #14]

    /* it already plus one in modbus function method. */
    usAddress--;
 800a1f2:	887b      	ldrh	r3, [r7, #2]
 800a1f4:	3b01      	subs	r3, #1
 800a1f6:	807b      	strh	r3, [r7, #2]

    if ((usAddress >= DISCRETE_INPUT_START)
 800a1f8:	887a      	ldrh	r2, [r7, #2]
 800a1fa:	8a7b      	ldrh	r3, [r7, #18]
 800a1fc:	429a      	cmp	r2, r3
 800a1fe:	d341      	bcc.n	800a284 <eMBMasterRegDiscreteCB+0xcc>
            && (usAddress + usNDiscrete    <= DISCRETE_INPUT_START + DISCRETE_INPUT_NDISCRETES))
 800a200:	887a      	ldrh	r2, [r7, #2]
 800a202:	883b      	ldrh	r3, [r7, #0]
 800a204:	441a      	add	r2, r3
 800a206:	8a79      	ldrh	r1, [r7, #18]
 800a208:	8a3b      	ldrh	r3, [r7, #16]
 800a20a:	440b      	add	r3, r1
 800a20c:	429a      	cmp	r2, r3
 800a20e:	dc39      	bgt.n	800a284 <eMBMasterRegDiscreteCB+0xcc>
    {
        iRegIndex = (USHORT) (usAddress - usDiscreteInputStart) / 8;
 800a210:	887a      	ldrh	r2, [r7, #2]
 800a212:	89fb      	ldrh	r3, [r7, #14]
 800a214:	1ad3      	subs	r3, r2, r3
 800a216:	b29b      	uxth	r3, r3
 800a218:	08db      	lsrs	r3, r3, #3
 800a21a:	83bb      	strh	r3, [r7, #28]
        iRegBitIndex = (USHORT) (usAddress - usDiscreteInputStart) % 8;
 800a21c:	887a      	ldrh	r2, [r7, #2]
 800a21e:	89fb      	ldrh	r3, [r7, #14]
 800a220:	1ad3      	subs	r3, r2, r3
 800a222:	b29b      	uxth	r3, r3
 800a224:	f003 0307 	and.w	r3, r3, #7
 800a228:	81bb      	strh	r3, [r7, #12]

        /* write current discrete values with new values from the protocol stack. */
        while (iNReg > 1)
 800a22a:	e010      	b.n	800a24e <eMBMasterRegDiscreteCB+0x96>
        {
            xMBUtilSetBits(&pucDiscreteInputBuf[iRegIndex++], iRegBitIndex, 8,
 800a22c:	8bbb      	ldrh	r3, [r7, #28]
 800a22e:	1c5a      	adds	r2, r3, #1
 800a230:	83ba      	strh	r2, [r7, #28]
 800a232:	461a      	mov	r2, r3
 800a234:	697b      	ldr	r3, [r7, #20]
 800a236:	1898      	adds	r0, r3, r2
                    *pucRegBuffer++);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	1c5a      	adds	r2, r3, #1
 800a23c:	607a      	str	r2, [r7, #4]
            xMBUtilSetBits(&pucDiscreteInputBuf[iRegIndex++], iRegBitIndex, 8,
 800a23e:	781b      	ldrb	r3, [r3, #0]
 800a240:	89b9      	ldrh	r1, [r7, #12]
 800a242:	2208      	movs	r2, #8
 800a244:	f7fe fa18 	bl	8008678 <xMBUtilSetBits>
            iNReg--;
 800a248:	8b7b      	ldrh	r3, [r7, #26]
 800a24a:	3b01      	subs	r3, #1
 800a24c:	837b      	strh	r3, [r7, #26]
        while (iNReg > 1)
 800a24e:	8b7b      	ldrh	r3, [r7, #26]
 800a250:	2b01      	cmp	r3, #1
 800a252:	d8eb      	bhi.n	800a22c <eMBMasterRegDiscreteCB+0x74>
        }
        /* last discrete */
        usNDiscrete = usNDiscrete % 8;
 800a254:	883b      	ldrh	r3, [r7, #0]
 800a256:	f003 0307 	and.w	r3, r3, #7
 800a25a:	803b      	strh	r3, [r7, #0]
        /* xMBUtilSetBits has bug when ucNBits is zero */
        if (usNDiscrete != 0)
 800a25c:	883b      	ldrh	r3, [r7, #0]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d012      	beq.n	800a288 <eMBMasterRegDiscreteCB+0xd0>
        {
            xMBUtilSetBits(&pucDiscreteInputBuf[iRegIndex++], iRegBitIndex,
 800a262:	8bbb      	ldrh	r3, [r7, #28]
 800a264:	1c5a      	adds	r2, r3, #1
 800a266:	83ba      	strh	r2, [r7, #28]
 800a268:	461a      	mov	r2, r3
 800a26a:	697b      	ldr	r3, [r7, #20]
 800a26c:	1898      	adds	r0, r3, r2
 800a26e:	883b      	ldrh	r3, [r7, #0]
 800a270:	b2dc      	uxtb	r4, r3
                    usNDiscrete, *pucRegBuffer++);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	1c5a      	adds	r2, r3, #1
 800a276:	607a      	str	r2, [r7, #4]
            xMBUtilSetBits(&pucDiscreteInputBuf[iRegIndex++], iRegBitIndex,
 800a278:	781b      	ldrb	r3, [r3, #0]
 800a27a:	89b9      	ldrh	r1, [r7, #12]
 800a27c:	4622      	mov	r2, r4
 800a27e:	f7fe f9fb 	bl	8008678 <xMBUtilSetBits>
        if (usNDiscrete != 0)
 800a282:	e001      	b.n	800a288 <eMBMasterRegDiscreteCB+0xd0>
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 800a284:	2301      	movs	r3, #1
 800a286:	77fb      	strb	r3, [r7, #31]
    }

    return eStatus;
 800a288:	7ffb      	ldrb	r3, [r7, #31]
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	3724      	adds	r7, #36	; 0x24
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd90      	pop	{r4, r7, pc}
 800a292:	bf00      	nop
 800a294:	200050bc 	.word	0x200050bc
 800a298:	20004bf8 	.word	0x20004bf8

0800a29c <usMBCRC16>:
    0x41, 0x81, 0x80, 0x40
};

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
 800a29c:	b480      	push	{r7}
 800a29e:	b085      	sub	sp, #20
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
 800a2a4:	460b      	mov	r3, r1
 800a2a6:	807b      	strh	r3, [r7, #2]
    UCHAR           ucCRCHi = 0xFF;
 800a2a8:	23ff      	movs	r3, #255	; 0xff
 800a2aa:	73fb      	strb	r3, [r7, #15]
    UCHAR           ucCRCLo = 0xFF;
 800a2ac:	23ff      	movs	r3, #255	; 0xff
 800a2ae:	73bb      	strb	r3, [r7, #14]
    int             iIndex;

    while( usLen-- )
 800a2b0:	e013      	b.n	800a2da <usMBCRC16+0x3e>
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	1c5a      	adds	r2, r3, #1
 800a2b6:	607a      	str	r2, [r7, #4]
 800a2b8:	781a      	ldrb	r2, [r3, #0]
 800a2ba:	7bbb      	ldrb	r3, [r7, #14]
 800a2bc:	4053      	eors	r3, r2
 800a2be:	b2db      	uxtb	r3, r3
 800a2c0:	60bb      	str	r3, [r7, #8]
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 800a2c2:	4a0f      	ldr	r2, [pc, #60]	; (800a300 <usMBCRC16+0x64>)
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	4413      	add	r3, r2
 800a2c8:	781a      	ldrb	r2, [r3, #0]
 800a2ca:	7bfb      	ldrb	r3, [r7, #15]
 800a2cc:	4053      	eors	r3, r2
 800a2ce:	73bb      	strb	r3, [r7, #14]
        ucCRCHi = aucCRCLo[iIndex];
 800a2d0:	4a0c      	ldr	r2, [pc, #48]	; (800a304 <usMBCRC16+0x68>)
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	4413      	add	r3, r2
 800a2d6:	781b      	ldrb	r3, [r3, #0]
 800a2d8:	73fb      	strb	r3, [r7, #15]
    while( usLen-- )
 800a2da:	887b      	ldrh	r3, [r7, #2]
 800a2dc:	1e5a      	subs	r2, r3, #1
 800a2de:	807a      	strh	r2, [r7, #2]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d1e6      	bne.n	800a2b2 <usMBCRC16+0x16>
    }
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
 800a2e4:	7bfb      	ldrb	r3, [r7, #15]
 800a2e6:	021b      	lsls	r3, r3, #8
 800a2e8:	b21a      	sxth	r2, r3
 800a2ea:	7bbb      	ldrb	r3, [r7, #14]
 800a2ec:	b21b      	sxth	r3, r3
 800a2ee:	4313      	orrs	r3, r2
 800a2f0:	b21b      	sxth	r3, r3
 800a2f2:	b29b      	uxth	r3, r3
}
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	3714      	adds	r7, #20
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fe:	4770      	bx	lr
 800a300:	0800bfa0 	.word	0x0800bfa0
 800a304:	0800c0a0 	.word	0x0800c0a0

0800a308 <eMBRTUInit>:
static volatile USHORT usRcvBufferPos;

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBRTUInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b084      	sub	sp, #16
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	603a      	str	r2, [r7, #0]
 800a310:	461a      	mov	r2, r3
 800a312:	4603      	mov	r3, r0
 800a314:	71fb      	strb	r3, [r7, #7]
 800a316:	460b      	mov	r3, r1
 800a318:	71bb      	strb	r3, [r7, #6]
 800a31a:	4613      	mov	r3, r2
 800a31c:	717b      	strb	r3, [r7, #5]
    eMBErrorCode    eStatus = MB_ENOERR;
 800a31e:	2300      	movs	r3, #0
 800a320:	73fb      	strb	r3, [r7, #15]
    ULONG           usTimerT35_50us;

    ( void )ucSlaveAddress;
    ENTER_CRITICAL_SECTION(  );
 800a322:	f7fe ff1d 	bl	8009160 <EnterCriticalSection>

    /* Modbus RTU uses 8 Databits. */
    if( xMBPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
 800a326:	797b      	ldrb	r3, [r7, #5]
 800a328:	79b8      	ldrb	r0, [r7, #6]
 800a32a:	2208      	movs	r2, #8
 800a32c:	6839      	ldr	r1, [r7, #0]
 800a32e:	f7ff f94d 	bl	80095cc <xMBPortSerialInit>
 800a332:	4603      	mov	r3, r0
 800a334:	2b01      	cmp	r3, #1
 800a336:	d002      	beq.n	800a33e <eMBRTUInit+0x36>
    {
        eStatus = MB_EPORTERR;
 800a338:	2303      	movs	r3, #3
 800a33a:	73fb      	strb	r3, [r7, #15]
 800a33c:	e016      	b.n	800a36c <eMBRTUInit+0x64>
    else
    {
        /* If baudrate > 19200 then we should use the fixed timer values
         * t35 = 1750us. Otherwise t35 must be 3.5 times the character time.
         */
        if( ulBaudRate > 19200 )
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
 800a344:	d902      	bls.n	800a34c <eMBRTUInit+0x44>
        {
            usTimerT35_50us = 35;       /* 1800us. */
 800a346:	2323      	movs	r3, #35	; 0x23
 800a348:	60bb      	str	r3, [r7, #8]
 800a34a:	e005      	b.n	800a358 <eMBRTUInit+0x50>
             *             = 11 * Ticks_per_1s / Baudrate
             *             = 220000 / Baudrate
             * The reload for t3.5 is 1.5 times this value and similary
             * for t3.5.
             */
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	005b      	lsls	r3, r3, #1
 800a350:	4a0a      	ldr	r2, [pc, #40]	; (800a37c <eMBRTUInit+0x74>)
 800a352:	fbb2 f3f3 	udiv	r3, r2, r3
 800a356:	60bb      	str	r3, [r7, #8]
        }
        if( xMBPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	b29b      	uxth	r3, r3
 800a35c:	4618      	mov	r0, r3
 800a35e:	f7ff fa61 	bl	8009824 <xMBPortTimersInit>
 800a362:	4603      	mov	r3, r0
 800a364:	2b01      	cmp	r3, #1
 800a366:	d001      	beq.n	800a36c <eMBRTUInit+0x64>
        {
            eStatus = MB_EPORTERR;
 800a368:	2303      	movs	r3, #3
 800a36a:	73fb      	strb	r3, [r7, #15]
        }
    }
    EXIT_CRITICAL_SECTION(  );
 800a36c:	f7fe fefe 	bl	800916c <ExitCriticalSection>

    return eStatus;
 800a370:	7bfb      	ldrb	r3, [r7, #15]
}
 800a372:	4618      	mov	r0, r3
 800a374:	3710      	adds	r7, #16
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}
 800a37a:	bf00      	nop
 800a37c:	00177fa0 	.word	0x00177fa0

0800a380 <eMBRTUStart>:

void
eMBRTUStart( void )
{
 800a380:	b580      	push	{r7, lr}
 800a382:	af00      	add	r7, sp, #0
    ENTER_CRITICAL_SECTION(  );
 800a384:	f7fe feec 	bl	8009160 <EnterCriticalSection>
    /* Initially the receiver is in the state STATE_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_RX_INIT;
 800a388:	4b06      	ldr	r3, [pc, #24]	; (800a3a4 <eMBRTUStart+0x24>)
 800a38a:	2200      	movs	r2, #0
 800a38c:	701a      	strb	r2, [r3, #0]
    vMBPortSerialEnable( TRUE, FALSE );
 800a38e:	2100      	movs	r1, #0
 800a390:	2001      	movs	r0, #1
 800a392:	f7ff f8cb 	bl	800952c <vMBPortSerialEnable>
    vMBPortTimersEnable(  );
 800a396:	f7ff fa85 	bl	80098a4 <vMBPortTimersEnable>

    EXIT_CRITICAL_SECTION(  );
 800a39a:	f7fe fee7 	bl	800916c <ExitCriticalSection>
}
 800a39e:	bf00      	nop
 800a3a0:	bd80      	pop	{r7, pc}
 800a3a2:	bf00      	nop
 800a3a4:	20004c01 	.word	0x20004c01

0800a3a8 <eMBRTUStop>:

void
eMBRTUStop( void )
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	af00      	add	r7, sp, #0
    ENTER_CRITICAL_SECTION(  );
 800a3ac:	f7fe fed8 	bl	8009160 <EnterCriticalSection>
    vMBPortSerialEnable( FALSE, FALSE );
 800a3b0:	2100      	movs	r1, #0
 800a3b2:	2000      	movs	r0, #0
 800a3b4:	f7ff f8ba 	bl	800952c <vMBPortSerialEnable>
    vMBPortTimersDisable(  );
 800a3b8:	f7ff fa86 	bl	80098c8 <vMBPortTimersDisable>
    EXIT_CRITICAL_SECTION(  );
 800a3bc:	f7fe fed6 	bl	800916c <ExitCriticalSection>
}
 800a3c0:	bf00      	nop
 800a3c2:	bd80      	pop	{r7, pc}

0800a3c4 <eMBRTUReceive>:

eMBErrorCode
eMBRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b086      	sub	sp, #24
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	60f8      	str	r0, [r7, #12]
 800a3cc:	60b9      	str	r1, [r7, #8]
 800a3ce:	607a      	str	r2, [r7, #4]
    BOOL            xFrameReceived = FALSE;
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eStatus = MB_ENOERR;
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	75fb      	strb	r3, [r7, #23]

    (void)(xFrameReceived);

    ENTER_CRITICAL_SECTION(  );
 800a3d8:	f7fe fec2 	bl	8009160 <EnterCriticalSection>
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );
 800a3dc:	4b1a      	ldr	r3, [pc, #104]	; (800a448 <eMBRTUReceive+0x84>)
 800a3de:	881b      	ldrh	r3, [r3, #0]
 800a3e0:	b29b      	uxth	r3, r3
 800a3e2:	2bff      	cmp	r3, #255	; 0xff
 800a3e4:	d905      	bls.n	800a3f2 <eMBRTUReceive+0x2e>
 800a3e6:	4b19      	ldr	r3, [pc, #100]	; (800a44c <eMBRTUReceive+0x88>)
 800a3e8:	4a19      	ldr	r2, [pc, #100]	; (800a450 <eMBRTUReceive+0x8c>)
 800a3ea:	21a0      	movs	r1, #160	; 0xa0
 800a3ec:	4819      	ldr	r0, [pc, #100]	; (800a454 <eMBRTUReceive+0x90>)
 800a3ee:	f000 fc79 	bl	800ace4 <__assert_func>

    /* Length and CRC check */
    if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
 800a3f2:	4b15      	ldr	r3, [pc, #84]	; (800a448 <eMBRTUReceive+0x84>)
 800a3f4:	881b      	ldrh	r3, [r3, #0]
 800a3f6:	b29b      	uxth	r3, r3
 800a3f8:	2b03      	cmp	r3, #3
 800a3fa:	d91b      	bls.n	800a434 <eMBRTUReceive+0x70>
        && ( usMBCRC16( ( UCHAR * ) ucRTUBuf, usRcvBufferPos ) == 0 ) )
 800a3fc:	4b12      	ldr	r3, [pc, #72]	; (800a448 <eMBRTUReceive+0x84>)
 800a3fe:	881b      	ldrh	r3, [r3, #0]
 800a400:	b29b      	uxth	r3, r3
 800a402:	4619      	mov	r1, r3
 800a404:	4814      	ldr	r0, [pc, #80]	; (800a458 <eMBRTUReceive+0x94>)
 800a406:	f7ff ff49 	bl	800a29c <usMBCRC16>
 800a40a:	4603      	mov	r3, r0
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d111      	bne.n	800a434 <eMBRTUReceive+0x70>
    {
        /* Save the address field. All frames are passed to the upper layed
         * and the decision if a frame is used is done there.
         */
        *pucRcvAddress = ucRTUBuf[MB_SER_PDU_ADDR_OFF];
 800a410:	4b11      	ldr	r3, [pc, #68]	; (800a458 <eMBRTUReceive+0x94>)
 800a412:	781b      	ldrb	r3, [r3, #0]
 800a414:	b2da      	uxtb	r2, r3
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	701a      	strb	r2, [r3, #0]

        /* Total length of Modbus-PDU is Modbus-Serial-Line-PDU minus
         * size of address field and CRC checksum.
         */
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 800a41a:	4b0b      	ldr	r3, [pc, #44]	; (800a448 <eMBRTUReceive+0x84>)
 800a41c:	881b      	ldrh	r3, [r3, #0]
 800a41e:	b29b      	uxth	r3, r3
 800a420:	3b03      	subs	r3, #3
 800a422:	b29a      	uxth	r2, r3
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	801a      	strh	r2, [r3, #0]

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	4a0c      	ldr	r2, [pc, #48]	; (800a45c <eMBRTUReceive+0x98>)
 800a42c:	601a      	str	r2, [r3, #0]
        xFrameReceived = TRUE;
 800a42e:	2301      	movs	r3, #1
 800a430:	75bb      	strb	r3, [r7, #22]
 800a432:	e001      	b.n	800a438 <eMBRTUReceive+0x74>
    }
    else
    {
        eStatus = MB_EIO;
 800a434:	2305      	movs	r3, #5
 800a436:	75fb      	strb	r3, [r7, #23]
    }

    EXIT_CRITICAL_SECTION(  );
 800a438:	f7fe fe98 	bl	800916c <ExitCriticalSection>
    return eStatus;
 800a43c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a43e:	4618      	mov	r0, r3
 800a440:	3718      	adds	r7, #24
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}
 800a446:	bf00      	nop
 800a448:	20004c0a 	.word	0x20004c0a
 800a44c:	0800be6c 	.word	0x0800be6c
 800a450:	0800c1a0 	.word	0x0800c1a0
 800a454:	0800be94 	.word	0x0800be94
 800a458:	200050dc 	.word	0x200050dc
 800a45c:	200050dd 	.word	0x200050dd

0800a460 <eMBRTUSend>:

eMBErrorCode
eMBRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b084      	sub	sp, #16
 800a464:	af00      	add	r7, sp, #0
 800a466:	4603      	mov	r3, r0
 800a468:	6039      	str	r1, [r7, #0]
 800a46a:	71fb      	strb	r3, [r7, #7]
 800a46c:	4613      	mov	r3, r2
 800a46e:	80bb      	strh	r3, [r7, #4]
    eMBErrorCode    eStatus = MB_ENOERR;
 800a470:	2300      	movs	r3, #0
 800a472:	73fb      	strb	r3, [r7, #15]
    USHORT          usCRC16;

    ENTER_CRITICAL_SECTION(  );
 800a474:	f7fe fe74 	bl	8009160 <EnterCriticalSection>

    /* Check if the receiver is still in idle state. If not we where to
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_RX_IDLE )
 800a478:	4b2d      	ldr	r3, [pc, #180]	; (800a530 <eMBRTUSend+0xd0>)
 800a47a:	781b      	ldrb	r3, [r3, #0]
 800a47c:	b2db      	uxtb	r3, r3
 800a47e:	2b01      	cmp	r3, #1
 800a480:	d14d      	bne.n	800a51e <eMBRTUSend+0xbe>
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	3b01      	subs	r3, #1
 800a486:	4a2b      	ldr	r2, [pc, #172]	; (800a534 <eMBRTUSend+0xd4>)
 800a488:	6013      	str	r3, [r2, #0]
        usSndBufferCount = 1;
 800a48a:	4b2b      	ldr	r3, [pc, #172]	; (800a538 <eMBRTUSend+0xd8>)
 800a48c:	2201      	movs	r2, #1
 800a48e:	801a      	strh	r2, [r3, #0]

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
        pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
 800a490:	4b28      	ldr	r3, [pc, #160]	; (800a534 <eMBRTUSend+0xd4>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	79fa      	ldrb	r2, [r7, #7]
 800a496:	701a      	strb	r2, [r3, #0]
        usSndBufferCount += usLength;
 800a498:	4b27      	ldr	r3, [pc, #156]	; (800a538 <eMBRTUSend+0xd8>)
 800a49a:	881b      	ldrh	r3, [r3, #0]
 800a49c:	b29a      	uxth	r2, r3
 800a49e:	88bb      	ldrh	r3, [r7, #4]
 800a4a0:	4413      	add	r3, r2
 800a4a2:	b29a      	uxth	r2, r3
 800a4a4:	4b24      	ldr	r3, [pc, #144]	; (800a538 <eMBRTUSend+0xd8>)
 800a4a6:	801a      	strh	r2, [r3, #0]

        /* Calculate CRC16 checksum for Modbus-Serial-Line-PDU. */
        usCRC16 = usMBCRC16( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );
 800a4a8:	4b22      	ldr	r3, [pc, #136]	; (800a534 <eMBRTUSend+0xd4>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	4a22      	ldr	r2, [pc, #136]	; (800a538 <eMBRTUSend+0xd8>)
 800a4ae:	8812      	ldrh	r2, [r2, #0]
 800a4b0:	b292      	uxth	r2, r2
 800a4b2:	4611      	mov	r1, r2
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	f7ff fef1 	bl	800a29c <usMBCRC16>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	81bb      	strh	r3, [r7, #12]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
 800a4be:	4b1e      	ldr	r3, [pc, #120]	; (800a538 <eMBRTUSend+0xd8>)
 800a4c0:	881b      	ldrh	r3, [r3, #0]
 800a4c2:	b29b      	uxth	r3, r3
 800a4c4:	1c5a      	adds	r2, r3, #1
 800a4c6:	b291      	uxth	r1, r2
 800a4c8:	4a1b      	ldr	r2, [pc, #108]	; (800a538 <eMBRTUSend+0xd8>)
 800a4ca:	8011      	strh	r1, [r2, #0]
 800a4cc:	461a      	mov	r2, r3
 800a4ce:	89bb      	ldrh	r3, [r7, #12]
 800a4d0:	b2d9      	uxtb	r1, r3
 800a4d2:	4b1a      	ldr	r3, [pc, #104]	; (800a53c <eMBRTUSend+0xdc>)
 800a4d4:	5499      	strb	r1, [r3, r2]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 800a4d6:	89bb      	ldrh	r3, [r7, #12]
 800a4d8:	0a1b      	lsrs	r3, r3, #8
 800a4da:	b299      	uxth	r1, r3
 800a4dc:	4b16      	ldr	r3, [pc, #88]	; (800a538 <eMBRTUSend+0xd8>)
 800a4de:	881b      	ldrh	r3, [r3, #0]
 800a4e0:	b29b      	uxth	r3, r3
 800a4e2:	1c5a      	adds	r2, r3, #1
 800a4e4:	b290      	uxth	r0, r2
 800a4e6:	4a14      	ldr	r2, [pc, #80]	; (800a538 <eMBRTUSend+0xd8>)
 800a4e8:	8010      	strh	r0, [r2, #0]
 800a4ea:	461a      	mov	r2, r3
 800a4ec:	b2c9      	uxtb	r1, r1
 800a4ee:	4b13      	ldr	r3, [pc, #76]	; (800a53c <eMBRTUSend+0xdc>)
 800a4f0:	5499      	strb	r1, [r3, r2]
        /*NOTE: the following instruction must be added when use RS485 module
         * cause when MB Poll receive response frame, it lose the last byte which is
         * High byte CRC
         */
		#if MB_RTU_SLAVE_USE_RS485
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 800a4f2:	89bb      	ldrh	r3, [r7, #12]
 800a4f4:	0a1b      	lsrs	r3, r3, #8
 800a4f6:	b299      	uxth	r1, r3
 800a4f8:	4b0f      	ldr	r3, [pc, #60]	; (800a538 <eMBRTUSend+0xd8>)
 800a4fa:	881b      	ldrh	r3, [r3, #0]
 800a4fc:	b29b      	uxth	r3, r3
 800a4fe:	1c5a      	adds	r2, r3, #1
 800a500:	b290      	uxth	r0, r2
 800a502:	4a0d      	ldr	r2, [pc, #52]	; (800a538 <eMBRTUSend+0xd8>)
 800a504:	8010      	strh	r0, [r2, #0]
 800a506:	461a      	mov	r2, r3
 800a508:	b2c9      	uxtb	r1, r1
 800a50a:	4b0c      	ldr	r3, [pc, #48]	; (800a53c <eMBRTUSend+0xdc>)
 800a50c:	5499      	strb	r1, [r3, r2]
		#endif

        /*  Activate the transmitter. */
        eSndState = STATE_TX_XMIT;
 800a50e:	4b0c      	ldr	r3, [pc, #48]	; (800a540 <eMBRTUSend+0xe0>)
 800a510:	2201      	movs	r2, #1
 800a512:	701a      	strb	r2, [r3, #0]
        vMBPortSerialEnable( FALSE, TRUE );
 800a514:	2101      	movs	r1, #1
 800a516:	2000      	movs	r0, #0
 800a518:	f7ff f808 	bl	800952c <vMBPortSerialEnable>
 800a51c:	e001      	b.n	800a522 <eMBRTUSend+0xc2>
    }
    else
    {
        eStatus = MB_EIO;
 800a51e:	2305      	movs	r3, #5
 800a520:	73fb      	strb	r3, [r7, #15]
    }
    EXIT_CRITICAL_SECTION(  );
 800a522:	f7fe fe23 	bl	800916c <ExitCriticalSection>
    return eStatus;
 800a526:	7bfb      	ldrb	r3, [r7, #15]
}
 800a528:	4618      	mov	r0, r3
 800a52a:	3710      	adds	r7, #16
 800a52c:	46bd      	mov	sp, r7
 800a52e:	bd80      	pop	{r7, pc}
 800a530:	20004c01 	.word	0x20004c01
 800a534:	20004c04 	.word	0x20004c04
 800a538:	20004c08 	.word	0x20004c08
 800a53c:	200050dc 	.word	0x200050dc
 800a540:	20004c00 	.word	0x20004c00

0800a544 <xMBRTUReceiveFSM>:

BOOL
xMBRTUReceiveFSM( void )		//run in UART_ISR - thread mode
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b082      	sub	sp, #8
 800a548:	af00      	add	r7, sp, #0
    BOOL            xTaskNeedSwitch = FALSE;
 800a54a:	2300      	movs	r3, #0
 800a54c:	71fb      	strb	r3, [r7, #7]
    UCHAR           ucByte;

    assert( eSndState == STATE_TX_IDLE );
 800a54e:	4b2a      	ldr	r3, [pc, #168]	; (800a5f8 <xMBRTUReceiveFSM+0xb4>)
 800a550:	781b      	ldrb	r3, [r3, #0]
 800a552:	b2db      	uxtb	r3, r3
 800a554:	2b00      	cmp	r3, #0
 800a556:	d005      	beq.n	800a564 <xMBRTUReceiveFSM+0x20>
 800a558:	4b28      	ldr	r3, [pc, #160]	; (800a5fc <xMBRTUReceiveFSM+0xb8>)
 800a55a:	4a29      	ldr	r2, [pc, #164]	; (800a600 <xMBRTUReceiveFSM+0xbc>)
 800a55c:	21f2      	movs	r1, #242	; 0xf2
 800a55e:	4829      	ldr	r0, [pc, #164]	; (800a604 <xMBRTUReceiveFSM+0xc0>)
 800a560:	f000 fbc0 	bl	800ace4 <__assert_func>

    /* Always read the character. */
    ( void )xMBPortSerialGetByte( ( CHAR * ) & ucByte );
 800a564:	1dbb      	adds	r3, r7, #6
 800a566:	4618      	mov	r0, r3
 800a568:	f7ff f856 	bl	8009618 <xMBPortSerialGetByte>

    switch ( eRcvState )
 800a56c:	4b26      	ldr	r3, [pc, #152]	; (800a608 <xMBRTUReceiveFSM+0xc4>)
 800a56e:	781b      	ldrb	r3, [r3, #0]
 800a570:	b2db      	uxtb	r3, r3
 800a572:	2b03      	cmp	r3, #3
 800a574:	d83b      	bhi.n	800a5ee <xMBRTUReceiveFSM+0xaa>
 800a576:	a201      	add	r2, pc, #4	; (adr r2, 800a57c <xMBRTUReceiveFSM+0x38>)
 800a578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a57c:	0800a58d 	.word	0x0800a58d
 800a580:	0800a599 	.word	0x0800a599
 800a584:	0800a5c1 	.word	0x0800a5c1
 800a588:	0800a593 	.word	0x0800a593
    {
        /* If we have received a character in the init state we have to
         * wait until the frame is finished.
         */
    case STATE_RX_INIT:
        vMBPortTimersEnable(  );
 800a58c:	f7ff f98a 	bl	80098a4 <vMBPortTimersEnable>
        break;
 800a590:	e02d      	b.n	800a5ee <xMBRTUReceiveFSM+0xaa>

        /* In the error state we wait until all characters in the
         * damaged frame are transmitted.
         */
    case STATE_RX_ERROR:
        vMBPortTimersEnable(  );
 800a592:	f7ff f987 	bl	80098a4 <vMBPortTimersEnable>
        break;
 800a596:	e02a      	b.n	800a5ee <xMBRTUReceiveFSM+0xaa>
        /* In the idle state we wait for a new character. If a character
         * is received the t1.5 and t3.5 timers are started and the
         * receiver is in the state STATE_RX_RECEIVCE.
         */
    case STATE_RX_IDLE:
        usRcvBufferPos = 0;
 800a598:	4b1c      	ldr	r3, [pc, #112]	; (800a60c <xMBRTUReceiveFSM+0xc8>)
 800a59a:	2200      	movs	r2, #0
 800a59c:	801a      	strh	r2, [r3, #0]
        ucRTUBuf[usRcvBufferPos++] = ucByte;
 800a59e:	4b1b      	ldr	r3, [pc, #108]	; (800a60c <xMBRTUReceiveFSM+0xc8>)
 800a5a0:	881b      	ldrh	r3, [r3, #0]
 800a5a2:	b29b      	uxth	r3, r3
 800a5a4:	1c5a      	adds	r2, r3, #1
 800a5a6:	b291      	uxth	r1, r2
 800a5a8:	4a18      	ldr	r2, [pc, #96]	; (800a60c <xMBRTUReceiveFSM+0xc8>)
 800a5aa:	8011      	strh	r1, [r2, #0]
 800a5ac:	461a      	mov	r2, r3
 800a5ae:	79b9      	ldrb	r1, [r7, #6]
 800a5b0:	4b17      	ldr	r3, [pc, #92]	; (800a610 <xMBRTUReceiveFSM+0xcc>)
 800a5b2:	5499      	strb	r1, [r3, r2]
        eRcvState = STATE_RX_RCV;
 800a5b4:	4b14      	ldr	r3, [pc, #80]	; (800a608 <xMBRTUReceiveFSM+0xc4>)
 800a5b6:	2202      	movs	r2, #2
 800a5b8:	701a      	strb	r2, [r3, #0]

        /* Enable t3.5 timers. */
        vMBPortTimersEnable(  );
 800a5ba:	f7ff f973 	bl	80098a4 <vMBPortTimersEnable>
        break;
 800a5be:	e016      	b.n	800a5ee <xMBRTUReceiveFSM+0xaa>
         * every character received. If more than the maximum possible
         * number of bytes in a modbus frame is received the frame is
         * ignored.
         */
    case STATE_RX_RCV:
        if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
 800a5c0:	4b12      	ldr	r3, [pc, #72]	; (800a60c <xMBRTUReceiveFSM+0xc8>)
 800a5c2:	881b      	ldrh	r3, [r3, #0]
 800a5c4:	b29b      	uxth	r3, r3
 800a5c6:	2bff      	cmp	r3, #255	; 0xff
 800a5c8:	d80b      	bhi.n	800a5e2 <xMBRTUReceiveFSM+0x9e>
        {
            ucRTUBuf[usRcvBufferPos++] = ucByte;
 800a5ca:	4b10      	ldr	r3, [pc, #64]	; (800a60c <xMBRTUReceiveFSM+0xc8>)
 800a5cc:	881b      	ldrh	r3, [r3, #0]
 800a5ce:	b29b      	uxth	r3, r3
 800a5d0:	1c5a      	adds	r2, r3, #1
 800a5d2:	b291      	uxth	r1, r2
 800a5d4:	4a0d      	ldr	r2, [pc, #52]	; (800a60c <xMBRTUReceiveFSM+0xc8>)
 800a5d6:	8011      	strh	r1, [r2, #0]
 800a5d8:	461a      	mov	r2, r3
 800a5da:	79b9      	ldrb	r1, [r7, #6]
 800a5dc:	4b0c      	ldr	r3, [pc, #48]	; (800a610 <xMBRTUReceiveFSM+0xcc>)
 800a5de:	5499      	strb	r1, [r3, r2]
 800a5e0:	e002      	b.n	800a5e8 <xMBRTUReceiveFSM+0xa4>
        }
        else
        {
            eRcvState = STATE_RX_ERROR;
 800a5e2:	4b09      	ldr	r3, [pc, #36]	; (800a608 <xMBRTUReceiveFSM+0xc4>)
 800a5e4:	2203      	movs	r2, #3
 800a5e6:	701a      	strb	r2, [r3, #0]
        }
        vMBPortTimersEnable(  );
 800a5e8:	f7ff f95c 	bl	80098a4 <vMBPortTimersEnable>
        break;
 800a5ec:	bf00      	nop
    }
    return xTaskNeedSwitch;
 800a5ee:	79fb      	ldrb	r3, [r7, #7]
}
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	3708      	adds	r7, #8
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bd80      	pop	{r7, pc}
 800a5f8:	20004c00 	.word	0x20004c00
 800a5fc:	0800beb8 	.word	0x0800beb8
 800a600:	0800c1b0 	.word	0x0800c1b0
 800a604:	0800be94 	.word	0x0800be94
 800a608:	20004c01 	.word	0x20004c01
 800a60c:	20004c0a 	.word	0x20004c0a
 800a610:	200050dc 	.word	0x200050dc

0800a614 <xMBRTUTransmitFSM>:

BOOL
xMBRTUTransmitFSM( void )	//run in UART_ISR - thread mode
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b082      	sub	sp, #8
 800a618:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 800a61a:	2300      	movs	r3, #0
 800a61c:	71fb      	strb	r3, [r7, #7]

    assert( eRcvState == STATE_RX_IDLE );
 800a61e:	4b22      	ldr	r3, [pc, #136]	; (800a6a8 <xMBRTUTransmitFSM+0x94>)
 800a620:	781b      	ldrb	r3, [r3, #0]
 800a622:	b2db      	uxtb	r3, r3
 800a624:	2b01      	cmp	r3, #1
 800a626:	d006      	beq.n	800a636 <xMBRTUTransmitFSM+0x22>
 800a628:	4b20      	ldr	r3, [pc, #128]	; (800a6ac <xMBRTUTransmitFSM+0x98>)
 800a62a:	4a21      	ldr	r2, [pc, #132]	; (800a6b0 <xMBRTUTransmitFSM+0x9c>)
 800a62c:	f240 112d 	movw	r1, #301	; 0x12d
 800a630:	4820      	ldr	r0, [pc, #128]	; (800a6b4 <xMBRTUTransmitFSM+0xa0>)
 800a632:	f000 fb57 	bl	800ace4 <__assert_func>

    switch ( eSndState )
 800a636:	4b20      	ldr	r3, [pc, #128]	; (800a6b8 <xMBRTUTransmitFSM+0xa4>)
 800a638:	781b      	ldrb	r3, [r3, #0]
 800a63a:	b2db      	uxtb	r3, r3
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d002      	beq.n	800a646 <xMBRTUTransmitFSM+0x32>
 800a640:	2b01      	cmp	r3, #1
 800a642:	d005      	beq.n	800a650 <xMBRTUTransmitFSM+0x3c>
 800a644:	e02a      	b.n	800a69c <xMBRTUTransmitFSM+0x88>
    {
        /* We should not get a transmitter event if the transmitter is in
         * idle state.  */
    case STATE_TX_IDLE:
        /* enable receiver/disable transmitter. */
        vMBPortSerialEnable( TRUE, FALSE );
 800a646:	2100      	movs	r1, #0
 800a648:	2001      	movs	r0, #1
 800a64a:	f7fe ff6f 	bl	800952c <vMBPortSerialEnable>
        break;
 800a64e:	e025      	b.n	800a69c <xMBRTUTransmitFSM+0x88>

    case STATE_TX_XMIT:
        /* check if we are finished. */
        if( usSndBufferCount != 0 )
 800a650:	4b1a      	ldr	r3, [pc, #104]	; (800a6bc <xMBRTUTransmitFSM+0xa8>)
 800a652:	881b      	ldrh	r3, [r3, #0]
 800a654:	b29b      	uxth	r3, r3
 800a656:	2b00      	cmp	r3, #0
 800a658:	d013      	beq.n	800a682 <xMBRTUTransmitFSM+0x6e>
        {
            xMBPortSerialPutByte( ( CHAR )*pucSndBufferCur );
 800a65a:	4b19      	ldr	r3, [pc, #100]	; (800a6c0 <xMBRTUTransmitFSM+0xac>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	781b      	ldrb	r3, [r3, #0]
 800a660:	b2db      	uxtb	r3, r3
 800a662:	4618      	mov	r0, r3
 800a664:	f7fe ffc6 	bl	80095f4 <xMBPortSerialPutByte>
            pucSndBufferCur++;  /* next byte in sendbuffer. */
 800a668:	4b15      	ldr	r3, [pc, #84]	; (800a6c0 <xMBRTUTransmitFSM+0xac>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	3301      	adds	r3, #1
 800a66e:	4a14      	ldr	r2, [pc, #80]	; (800a6c0 <xMBRTUTransmitFSM+0xac>)
 800a670:	6013      	str	r3, [r2, #0]
            usSndBufferCount--;
 800a672:	4b12      	ldr	r3, [pc, #72]	; (800a6bc <xMBRTUTransmitFSM+0xa8>)
 800a674:	881b      	ldrh	r3, [r3, #0]
 800a676:	b29b      	uxth	r3, r3
 800a678:	3b01      	subs	r3, #1
 800a67a:	b29a      	uxth	r2, r3
 800a67c:	4b0f      	ldr	r3, [pc, #60]	; (800a6bc <xMBRTUTransmitFSM+0xa8>)
 800a67e:	801a      	strh	r2, [r3, #0]
            /* Disable transmitter. This prevents another transmit buffer
             * empty interrupt. */
            vMBPortSerialEnable( TRUE, FALSE );
            eSndState = STATE_TX_IDLE;
        }
        break;
 800a680:	e00b      	b.n	800a69a <xMBRTUTransmitFSM+0x86>
            xNeedPoll = xMBPortEventPostFromISR( EV_FRAME_SENT );
 800a682:	2008      	movs	r0, #8
 800a684:	f7fe fdac 	bl	80091e0 <xMBPortEventPostFromISR>
 800a688:	4603      	mov	r3, r0
 800a68a:	71fb      	strb	r3, [r7, #7]
            vMBPortSerialEnable( TRUE, FALSE );
 800a68c:	2100      	movs	r1, #0
 800a68e:	2001      	movs	r0, #1
 800a690:	f7fe ff4c 	bl	800952c <vMBPortSerialEnable>
            eSndState = STATE_TX_IDLE;
 800a694:	4b08      	ldr	r3, [pc, #32]	; (800a6b8 <xMBRTUTransmitFSM+0xa4>)
 800a696:	2200      	movs	r2, #0
 800a698:	701a      	strb	r2, [r3, #0]
        break;
 800a69a:	bf00      	nop
    }

    return xNeedPoll;
 800a69c:	79fb      	ldrb	r3, [r7, #7]
}
 800a69e:	4618      	mov	r0, r3
 800a6a0:	3708      	adds	r7, #8
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}
 800a6a6:	bf00      	nop
 800a6a8:	20004c01 	.word	0x20004c01
 800a6ac:	0800bed4 	.word	0x0800bed4
 800a6b0:	0800c1c4 	.word	0x0800c1c4
 800a6b4:	0800be94 	.word	0x0800be94
 800a6b8:	20004c00 	.word	0x20004c00
 800a6bc:	20004c08 	.word	0x20004c08
 800a6c0:	20004c04 	.word	0x20004c04

0800a6c4 <xMBRTUTimerT35Expired>:

BOOL
xMBRTUTimerT35Expired( void )
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b082      	sub	sp, #8
 800a6c8:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	71fb      	strb	r3, [r7, #7]

    switch ( eRcvState )
 800a6ce:	4b1c      	ldr	r3, [pc, #112]	; (800a740 <xMBRTUTimerT35Expired+0x7c>)
 800a6d0:	781b      	ldrb	r3, [r3, #0]
 800a6d2:	b2db      	uxtb	r3, r3
 800a6d4:	2b03      	cmp	r3, #3
 800a6d6:	d028      	beq.n	800a72a <xMBRTUTimerT35Expired+0x66>
 800a6d8:	2b03      	cmp	r3, #3
 800a6da:	dc10      	bgt.n	800a6fe <xMBRTUTimerT35Expired+0x3a>
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d002      	beq.n	800a6e6 <xMBRTUTimerT35Expired+0x22>
 800a6e0:	2b02      	cmp	r3, #2
 800a6e2:	d006      	beq.n	800a6f2 <xMBRTUTimerT35Expired+0x2e>
 800a6e4:	e00b      	b.n	800a6fe <xMBRTUTimerT35Expired+0x3a>
    {
        /* Timer t35 expired. Startup phase is finished. */
    case STATE_RX_INIT:
        xNeedPoll = xMBPortEventPostFromISR( EV_READY );
 800a6e6:	2001      	movs	r0, #1
 800a6e8:	f7fe fd7a 	bl	80091e0 <xMBPortEventPostFromISR>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	71fb      	strb	r3, [r7, #7]
        break;
 800a6f0:	e01c      	b.n	800a72c <xMBRTUTimerT35Expired+0x68>

        /* A frame was received and t35 expired. Notify the listener that
         * a new frame was received. */
    case STATE_RX_RCV:
    	//vMBPortSerialEnable( FALSE, FALSE );
        xNeedPoll = xMBPortEventPostFromISR( EV_FRAME_RECEIVED );
 800a6f2:	2002      	movs	r0, #2
 800a6f4:	f7fe fd74 	bl	80091e0 <xMBPortEventPostFromISR>
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	71fb      	strb	r3, [r7, #7]
        break;
 800a6fc:	e016      	b.n	800a72c <xMBRTUTimerT35Expired+0x68>
    case STATE_RX_ERROR:
        break;

        /* Function called in an illegal state. */
    default:
        assert( ( eRcvState == STATE_RX_INIT ) ||
 800a6fe:	4b10      	ldr	r3, [pc, #64]	; (800a740 <xMBRTUTimerT35Expired+0x7c>)
 800a700:	781b      	ldrb	r3, [r3, #0]
 800a702:	b2db      	uxtb	r3, r3
 800a704:	2b00      	cmp	r3, #0
 800a706:	d011      	beq.n	800a72c <xMBRTUTimerT35Expired+0x68>
 800a708:	4b0d      	ldr	r3, [pc, #52]	; (800a740 <xMBRTUTimerT35Expired+0x7c>)
 800a70a:	781b      	ldrb	r3, [r3, #0]
 800a70c:	b2db      	uxtb	r3, r3
 800a70e:	2b02      	cmp	r3, #2
 800a710:	d00c      	beq.n	800a72c <xMBRTUTimerT35Expired+0x68>
 800a712:	4b0b      	ldr	r3, [pc, #44]	; (800a740 <xMBRTUTimerT35Expired+0x7c>)
 800a714:	781b      	ldrb	r3, [r3, #0]
 800a716:	b2db      	uxtb	r3, r3
 800a718:	2b03      	cmp	r3, #3
 800a71a:	d007      	beq.n	800a72c <xMBRTUTimerT35Expired+0x68>
 800a71c:	4b09      	ldr	r3, [pc, #36]	; (800a744 <xMBRTUTimerT35Expired+0x80>)
 800a71e:	4a0a      	ldr	r2, [pc, #40]	; (800a748 <xMBRTUTimerT35Expired+0x84>)
 800a720:	f240 1167 	movw	r1, #359	; 0x167
 800a724:	4809      	ldr	r0, [pc, #36]	; (800a74c <xMBRTUTimerT35Expired+0x88>)
 800a726:	f000 fadd 	bl	800ace4 <__assert_func>
        break;
 800a72a:	bf00      	nop
                ( eRcvState == STATE_RX_RCV ) || ( eRcvState == STATE_RX_ERROR ) );
    }

    vMBPortTimersDisable(  );
 800a72c:	f7ff f8cc 	bl	80098c8 <vMBPortTimersDisable>
    eRcvState = STATE_RX_IDLE;
 800a730:	4b03      	ldr	r3, [pc, #12]	; (800a740 <xMBRTUTimerT35Expired+0x7c>)
 800a732:	2201      	movs	r2, #1
 800a734:	701a      	strb	r2, [r3, #0]

    return xNeedPoll;
 800a736:	79fb      	ldrb	r3, [r7, #7]
}
 800a738:	4618      	mov	r0, r3
 800a73a:	3708      	adds	r7, #8
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}
 800a740:	20004c01 	.word	0x20004c01
 800a744:	0800bef0 	.word	0x0800bef0
 800a748:	0800c1d8 	.word	0x0800c1d8
 800a74c:	0800be94 	.word	0x0800be94

0800a750 <eMBMasterRTUInit>:
static volatile eMBMasterTimerMode eMasterCurTimerMode;

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBMasterRTUInit(UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b084      	sub	sp, #16
 800a754:	af00      	add	r7, sp, #0
 800a756:	4603      	mov	r3, r0
 800a758:	6039      	str	r1, [r7, #0]
 800a75a:	71fb      	strb	r3, [r7, #7]
 800a75c:	4613      	mov	r3, r2
 800a75e:	71bb      	strb	r3, [r7, #6]
    eMBErrorCode    eStatus = MB_ENOERR;
 800a760:	2300      	movs	r3, #0
 800a762:	73fb      	strb	r3, [r7, #15]
    ULONG           usTimerT35_50us;

    ENTER_CRITICAL_SECTION(  );
 800a764:	f7fe fcfc 	bl	8009160 <EnterCriticalSection>

    /* Modbus RTU uses 8 Databits. */
    if( xMBMasterPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
 800a768:	79bb      	ldrb	r3, [r7, #6]
 800a76a:	79f8      	ldrb	r0, [r7, #7]
 800a76c:	2208      	movs	r2, #8
 800a76e:	6839      	ldr	r1, [r7, #0]
 800a770:	f7fe ffa6 	bl	80096c0 <xMBMasterPortSerialInit>
 800a774:	4603      	mov	r3, r0
 800a776:	2b01      	cmp	r3, #1
 800a778:	d002      	beq.n	800a780 <eMBMasterRTUInit+0x30>
    {
        eStatus = MB_EPORTERR;
 800a77a:	2303      	movs	r3, #3
 800a77c:	73fb      	strb	r3, [r7, #15]
 800a77e:	e016      	b.n	800a7ae <eMBMasterRTUInit+0x5e>
    else
    {
        /* If baudrate > 19200 then we should use the fixed timer values
         * t35 = 1750us. Otherwise t35 must be 3.5 times the character time.
         */
        if( ulBaudRate > 19200 )
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
 800a786:	d902      	bls.n	800a78e <eMBMasterRTUInit+0x3e>
        {
            usTimerT35_50us = 35;       /* 1800us. */
 800a788:	2323      	movs	r3, #35	; 0x23
 800a78a:	60bb      	str	r3, [r7, #8]
 800a78c:	e005      	b.n	800a79a <eMBMasterRTUInit+0x4a>
             *             = 11 * Ticks_per_1s / Baudrate
             *             = 220000 / Baudrate
             * The reload for t3.5 is 1.5 times this value and similary
             * for t3.5.
             */
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	005b      	lsls	r3, r3, #1
 800a792:	4a0a      	ldr	r2, [pc, #40]	; (800a7bc <eMBMasterRTUInit+0x6c>)
 800a794:	fbb2 f3f3 	udiv	r3, r2, r3
 800a798:	60bb      	str	r3, [r7, #8]
        }
        if( xMBMasterPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
 800a79a:	68bb      	ldr	r3, [r7, #8]
 800a79c:	b29b      	uxth	r3, r3
 800a79e:	4618      	mov	r0, r3
 800a7a0:	f7ff f8ca 	bl	8009938 <xMBMasterPortTimersInit>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	2b01      	cmp	r3, #1
 800a7a8:	d001      	beq.n	800a7ae <eMBMasterRTUInit+0x5e>
        {
            eStatus = MB_EPORTERR;
 800a7aa:	2303      	movs	r3, #3
 800a7ac:	73fb      	strb	r3, [r7, #15]
        }
    }
    EXIT_CRITICAL_SECTION(  );
 800a7ae:	f7fe fcdd 	bl	800916c <ExitCriticalSection>

    return eStatus;
 800a7b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	3710      	adds	r7, #16
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	bd80      	pop	{r7, pc}
 800a7bc:	00177fa0 	.word	0x00177fa0

0800a7c0 <eMBMasterRTUStart>:

void
eMBMasterRTUStart( void )
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	af00      	add	r7, sp, #0
    ENTER_CRITICAL_SECTION(  );
 800a7c4:	f7fe fccc 	bl	8009160 <EnterCriticalSection>
    /* Initially the receiver is in the state STATE_M_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_M_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_M_RX_INIT;
 800a7c8:	4b06      	ldr	r3, [pc, #24]	; (800a7e4 <eMBMasterRTUStart+0x24>)
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	701a      	strb	r2, [r3, #0]
    vMBMasterPortSerialEnable( TRUE, FALSE );
 800a7ce:	2100      	movs	r1, #0
 800a7d0:	2001      	movs	r0, #1
 800a7d2:	f7fe ff89 	bl	80096e8 <vMBMasterPortSerialEnable>
    vMBMasterPortTimersT35Enable(  );
 800a7d6:	f7ff f8ef 	bl	80099b8 <vMBMasterPortTimersT35Enable>

    EXIT_CRITICAL_SECTION(  );
 800a7da:	f7fe fcc7 	bl	800916c <ExitCriticalSection>
}
 800a7de:	bf00      	nop
 800a7e0:	bd80      	pop	{r7, pc}
 800a7e2:	bf00      	nop
 800a7e4:	20004c0d 	.word	0x20004c0d

0800a7e8 <eMBMasterRTUStop>:

void
eMBMasterRTUStop( void )
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	af00      	add	r7, sp, #0
    ENTER_CRITICAL_SECTION(  );
 800a7ec:	f7fe fcb8 	bl	8009160 <EnterCriticalSection>
    vMBMasterPortSerialEnable( FALSE, FALSE );
 800a7f0:	2100      	movs	r1, #0
 800a7f2:	2000      	movs	r0, #0
 800a7f4:	f7fe ff78 	bl	80096e8 <vMBMasterPortSerialEnable>
    vMBMasterPortTimersDisable(  );
 800a7f8:	f7ff f910 	bl	8009a1c <vMBMasterPortTimersDisable>
    EXIT_CRITICAL_SECTION(  );
 800a7fc:	f7fe fcb6 	bl	800916c <ExitCriticalSection>
}
 800a800:	bf00      	nop
 800a802:	bd80      	pop	{r7, pc}

0800a804 <eMBMasterRTUReceive>:

eMBErrorCode
eMBMasterRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b086      	sub	sp, #24
 800a808:	af00      	add	r7, sp, #0
 800a80a:	60f8      	str	r0, [r7, #12]
 800a80c:	60b9      	str	r1, [r7, #8]
 800a80e:	607a      	str	r2, [r7, #4]
    eMBErrorCode    eStatus = MB_ENOERR;
 800a810:	2300      	movs	r3, #0
 800a812:	75fb      	strb	r3, [r7, #23]

    ENTER_CRITICAL_SECTION(  );
 800a814:	f7fe fca4 	bl	8009160 <EnterCriticalSection>
    //RT_ASSERT( usMasterRcvBufferPos < MB_SER_PDU_SIZE_MAX );
    configASSERT(usMasterRcvBufferPos < MB_SER_PDU_SIZE_MAX);
 800a818:	4b1c      	ldr	r3, [pc, #112]	; (800a88c <eMBMasterRTUReceive+0x88>)
 800a81a:	881b      	ldrh	r3, [r3, #0]
 800a81c:	b29b      	uxth	r3, r3
 800a81e:	2bff      	cmp	r3, #255	; 0xff
 800a820:	d90c      	bls.n	800a83c <eMBMasterRTUReceive+0x38>
	__asm volatile
 800a822:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a826:	b672      	cpsid	i
 800a828:	f383 8811 	msr	BASEPRI, r3
 800a82c:	f3bf 8f6f 	isb	sy
 800a830:	f3bf 8f4f 	dsb	sy
 800a834:	b662      	cpsie	i
 800a836:	613b      	str	r3, [r7, #16]
}
 800a838:	bf00      	nop
 800a83a:	e7fe      	b.n	800a83a <eMBMasterRTUReceive+0x36>

    /* Length and CRC check */
    if( ( usMasterRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
 800a83c:	4b13      	ldr	r3, [pc, #76]	; (800a88c <eMBMasterRTUReceive+0x88>)
 800a83e:	881b      	ldrh	r3, [r3, #0]
 800a840:	b29b      	uxth	r3, r3
 800a842:	2b03      	cmp	r3, #3
 800a844:	d919      	bls.n	800a87a <eMBMasterRTUReceive+0x76>
        && ( usMBCRC16( ( UCHAR * ) ucMasterRTURcvBuf, usMasterRcvBufferPos ) == 0 ) )
 800a846:	4b11      	ldr	r3, [pc, #68]	; (800a88c <eMBMasterRTUReceive+0x88>)
 800a848:	881b      	ldrh	r3, [r3, #0]
 800a84a:	b29b      	uxth	r3, r3
 800a84c:	4619      	mov	r1, r3
 800a84e:	4810      	ldr	r0, [pc, #64]	; (800a890 <eMBMasterRTUReceive+0x8c>)
 800a850:	f7ff fd24 	bl	800a29c <usMBCRC16>
 800a854:	4603      	mov	r3, r0
 800a856:	2b00      	cmp	r3, #0
 800a858:	d10f      	bne.n	800a87a <eMBMasterRTUReceive+0x76>
    {
        /* Save the address field. All frames are passed to the upper layed
         * and the decision if a frame is used is done there.
         */
        *pucRcvAddress = ucMasterRTURcvBuf[MB_SER_PDU_ADDR_OFF];
 800a85a:	4b0d      	ldr	r3, [pc, #52]	; (800a890 <eMBMasterRTUReceive+0x8c>)
 800a85c:	781b      	ldrb	r3, [r3, #0]
 800a85e:	b2da      	uxtb	r2, r3
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	701a      	strb	r2, [r3, #0]

        /* Total length of Modbus-PDU is Modbus-Serial-Line-PDU minus
         * size of address field and CRC checksum.
         */
        *pusLength = ( USHORT )( usMasterRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 800a864:	4b09      	ldr	r3, [pc, #36]	; (800a88c <eMBMasterRTUReceive+0x88>)
 800a866:	881b      	ldrh	r3, [r3, #0]
 800a868:	b29b      	uxth	r3, r3
 800a86a:	3b03      	subs	r3, #3
 800a86c:	b29a      	uxth	r2, r3
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	801a      	strh	r2, [r3, #0]

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucMasterRTURcvBuf[MB_SER_PDU_PDU_OFF];
 800a872:	68bb      	ldr	r3, [r7, #8]
 800a874:	4a07      	ldr	r2, [pc, #28]	; (800a894 <eMBMasterRTUReceive+0x90>)
 800a876:	601a      	str	r2, [r3, #0]
 800a878:	e001      	b.n	800a87e <eMBMasterRTUReceive+0x7a>
    }
    else
    {
        eStatus = MB_EIO;
 800a87a:	2305      	movs	r3, #5
 800a87c:	75fb      	strb	r3, [r7, #23]
    }

    EXIT_CRITICAL_SECTION(  );
 800a87e:	f7fe fc75 	bl	800916c <ExitCriticalSection>
    return eStatus;
 800a882:	7dfb      	ldrb	r3, [r7, #23]
}
 800a884:	4618      	mov	r0, r3
 800a886:	3718      	adds	r7, #24
 800a888:	46bd      	mov	sp, r7
 800a88a:	bd80      	pop	{r7, pc}
 800a88c:	20004e1a 	.word	0x20004e1a
 800a890:	20004d10 	.word	0x20004d10
 800a894:	20004d11 	.word	0x20004d11

0800a898 <eMBMasterRTUSend>:

eMBErrorCode
eMBMasterRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )//peMBMasterFrameSendCur from modbus POLL
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b084      	sub	sp, #16
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	4603      	mov	r3, r0
 800a8a0:	6039      	str	r1, [r7, #0]
 800a8a2:	71fb      	strb	r3, [r7, #7]
 800a8a4:	4613      	mov	r3, r2
 800a8a6:	80bb      	strh	r3, [r7, #4]
    eMBErrorCode    eStatus = MB_ENOERR;
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	73fb      	strb	r3, [r7, #15]
    USHORT          usCRC16;

    if ( ucSlaveAddress > MB_MASTER_TOTAL_SLAVE_NUM ) return MB_EINVAL;
 800a8ac:	79fb      	ldrb	r3, [r7, #7]
 800a8ae:	2b10      	cmp	r3, #16
 800a8b0:	d901      	bls.n	800a8b6 <eMBMasterRTUSend+0x1e>
 800a8b2:	2302      	movs	r3, #2
 800a8b4:	e04b      	b.n	800a94e <eMBMasterRTUSend+0xb6>

    ENTER_CRITICAL_SECTION(  );
 800a8b6:	f7fe fc53 	bl	8009160 <EnterCriticalSection>

    /* Check if the receiver is still in idle state. If not we where to
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_M_RX_IDLE )
 800a8ba:	4b27      	ldr	r3, [pc, #156]	; (800a958 <eMBMasterRTUSend+0xc0>)
 800a8bc:	781b      	ldrb	r3, [r3, #0]
 800a8be:	b2db      	uxtb	r3, r3
 800a8c0:	2b01      	cmp	r3, #1
 800a8c2:	d13f      	bne.n	800a944 <eMBMasterRTUSend+0xac>
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucMasterSndBufferCur = ( UCHAR * ) pucFrame - 1;
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	3b01      	subs	r3, #1
 800a8c8:	4a24      	ldr	r2, [pc, #144]	; (800a95c <eMBMasterRTUSend+0xc4>)
 800a8ca:	6013      	str	r3, [r2, #0]
        usMasterSndBufferCount = 1;
 800a8cc:	4b24      	ldr	r3, [pc, #144]	; (800a960 <eMBMasterRTUSend+0xc8>)
 800a8ce:	2201      	movs	r2, #1
 800a8d0:	801a      	strh	r2, [r3, #0]

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
        pucMasterSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
 800a8d2:	4b22      	ldr	r3, [pc, #136]	; (800a95c <eMBMasterRTUSend+0xc4>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	79fa      	ldrb	r2, [r7, #7]
 800a8d8:	701a      	strb	r2, [r3, #0]
        usMasterSndBufferCount += usLength;
 800a8da:	4b21      	ldr	r3, [pc, #132]	; (800a960 <eMBMasterRTUSend+0xc8>)
 800a8dc:	881b      	ldrh	r3, [r3, #0]
 800a8de:	b29a      	uxth	r2, r3
 800a8e0:	88bb      	ldrh	r3, [r7, #4]
 800a8e2:	4413      	add	r3, r2
 800a8e4:	b29a      	uxth	r2, r3
 800a8e6:	4b1e      	ldr	r3, [pc, #120]	; (800a960 <eMBMasterRTUSend+0xc8>)
 800a8e8:	801a      	strh	r2, [r3, #0]

        /* Calculate CRC16 checksum for Modbus-Serial-Line-PDU. */
        usCRC16 = usMBCRC16( ( UCHAR * ) pucMasterSndBufferCur, usMasterSndBufferCount );
 800a8ea:	4b1c      	ldr	r3, [pc, #112]	; (800a95c <eMBMasterRTUSend+0xc4>)
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	4a1c      	ldr	r2, [pc, #112]	; (800a960 <eMBMasterRTUSend+0xc8>)
 800a8f0:	8812      	ldrh	r2, [r2, #0]
 800a8f2:	b292      	uxth	r2, r2
 800a8f4:	4611      	mov	r1, r2
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f7ff fcd0 	bl	800a29c <usMBCRC16>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	81bb      	strh	r3, [r7, #12]
        ucMasterRTUSndBuf[usMasterSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
 800a900:	4b17      	ldr	r3, [pc, #92]	; (800a960 <eMBMasterRTUSend+0xc8>)
 800a902:	881b      	ldrh	r3, [r3, #0]
 800a904:	b29b      	uxth	r3, r3
 800a906:	1c5a      	adds	r2, r3, #1
 800a908:	b291      	uxth	r1, r2
 800a90a:	4a15      	ldr	r2, [pc, #84]	; (800a960 <eMBMasterRTUSend+0xc8>)
 800a90c:	8011      	strh	r1, [r2, #0]
 800a90e:	461a      	mov	r2, r3
 800a910:	89bb      	ldrh	r3, [r7, #12]
 800a912:	b2d9      	uxtb	r1, r3
 800a914:	4b13      	ldr	r3, [pc, #76]	; (800a964 <eMBMasterRTUSend+0xcc>)
 800a916:	5499      	strb	r1, [r3, r2]
        ucMasterRTUSndBuf[usMasterSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 800a918:	89bb      	ldrh	r3, [r7, #12]
 800a91a:	0a1b      	lsrs	r3, r3, #8
 800a91c:	b299      	uxth	r1, r3
 800a91e:	4b10      	ldr	r3, [pc, #64]	; (800a960 <eMBMasterRTUSend+0xc8>)
 800a920:	881b      	ldrh	r3, [r3, #0]
 800a922:	b29b      	uxth	r3, r3
 800a924:	1c5a      	adds	r2, r3, #1
 800a926:	b290      	uxth	r0, r2
 800a928:	4a0d      	ldr	r2, [pc, #52]	; (800a960 <eMBMasterRTUSend+0xc8>)
 800a92a:	8010      	strh	r0, [r2, #0]
 800a92c:	461a      	mov	r2, r3
 800a92e:	b2c9      	uxtb	r1, r1
 800a930:	4b0c      	ldr	r3, [pc, #48]	; (800a964 <eMBMasterRTUSend+0xcc>)
 800a932:	5499      	strb	r1, [r3, r2]
         */
		#if MB_RTU_MASTER_USE_RS485
        ucMasterRTUSndBuf[usMasterSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
		#endif
        /* Activate the transmitter. */
        eSndState = STATE_M_TX_XMIT;
 800a934:	4b0c      	ldr	r3, [pc, #48]	; (800a968 <eMBMasterRTUSend+0xd0>)
 800a936:	2201      	movs	r2, #1
 800a938:	701a      	strb	r2, [r3, #0]
        vMBMasterPortSerialEnable( FALSE, TRUE );
 800a93a:	2101      	movs	r1, #1
 800a93c:	2000      	movs	r0, #0
 800a93e:	f7fe fed3 	bl	80096e8 <vMBMasterPortSerialEnable>
 800a942:	e001      	b.n	800a948 <eMBMasterRTUSend+0xb0>
    }
    else
    {
        eStatus = MB_EIO;
 800a944:	2305      	movs	r3, #5
 800a946:	73fb      	strb	r3, [r7, #15]
    }
    EXIT_CRITICAL_SECTION(  );
 800a948:	f7fe fc10 	bl	800916c <ExitCriticalSection>
    return eStatus;
 800a94c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a94e:	4618      	mov	r0, r3
 800a950:	3710      	adds	r7, #16
 800a952:	46bd      	mov	sp, r7
 800a954:	bd80      	pop	{r7, pc}
 800a956:	bf00      	nop
 800a958:	20004c0d 	.word	0x20004c0d
 800a95c:	20004e14 	.word	0x20004e14
 800a960:	20004e18 	.word	0x20004e18
 800a964:	20004c10 	.word	0x20004c10
 800a968:	20004c0c 	.word	0x20004c0c

0800a96c <xMBMasterRTUReceiveFSM>:

BOOL
xMBMasterRTUReceiveFSM( void )				/* ISR handler*/
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b084      	sub	sp, #16
 800a970:	af00      	add	r7, sp, #0
    BOOL            xTaskNeedSwitch = FALSE;
 800a972:	2300      	movs	r3, #0
 800a974:	73fb      	strb	r3, [r7, #15]
    UCHAR           ucByte;

    configASSERT(( eSndState == STATE_M_TX_IDLE ) || ( eSndState == STATE_M_TX_XFWR ));
 800a976:	4b36      	ldr	r3, [pc, #216]	; (800aa50 <xMBMasterRTUReceiveFSM+0xe4>)
 800a978:	781b      	ldrb	r3, [r3, #0]
 800a97a:	b2db      	uxtb	r3, r3
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d004      	beq.n	800a98a <xMBMasterRTUReceiveFSM+0x1e>
 800a980:	4b33      	ldr	r3, [pc, #204]	; (800aa50 <xMBMasterRTUReceiveFSM+0xe4>)
 800a982:	781b      	ldrb	r3, [r3, #0]
 800a984:	b2db      	uxtb	r3, r3
 800a986:	2b02      	cmp	r3, #2
 800a988:	d101      	bne.n	800a98e <xMBMasterRTUReceiveFSM+0x22>
 800a98a:	2301      	movs	r3, #1
 800a98c:	e000      	b.n	800a990 <xMBMasterRTUReceiveFSM+0x24>
 800a98e:	2300      	movs	r3, #0
 800a990:	2b00      	cmp	r3, #0
 800a992:	d10c      	bne.n	800a9ae <xMBMasterRTUReceiveFSM+0x42>
	__asm volatile
 800a994:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a998:	b672      	cpsid	i
 800a99a:	f383 8811 	msr	BASEPRI, r3
 800a99e:	f3bf 8f6f 	isb	sy
 800a9a2:	f3bf 8f4f 	dsb	sy
 800a9a6:	b662      	cpsie	i
 800a9a8:	60bb      	str	r3, [r7, #8]
}
 800a9aa:	bf00      	nop
 800a9ac:	e7fe      	b.n	800a9ac <xMBMasterRTUReceiveFSM+0x40>

    /* Always read the character. */
    ( void )xMBMasterPortSerialGetByte( ( CHAR * ) & ucByte );
 800a9ae:	1dfb      	adds	r3, r7, #7
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	f7fe fee3 	bl	800977c <xMBMasterPortSerialGetByte>

    switch ( eRcvState )
 800a9b6:	4b27      	ldr	r3, [pc, #156]	; (800aa54 <xMBMasterRTUReceiveFSM+0xe8>)
 800a9b8:	781b      	ldrb	r3, [r3, #0]
 800a9ba:	b2db      	uxtb	r3, r3
 800a9bc:	2b03      	cmp	r3, #3
 800a9be:	d841      	bhi.n	800aa44 <xMBMasterRTUReceiveFSM+0xd8>
 800a9c0:	a201      	add	r2, pc, #4	; (adr r2, 800a9c8 <xMBMasterRTUReceiveFSM+0x5c>)
 800a9c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9c6:	bf00      	nop
 800a9c8:	0800a9d9 	.word	0x0800a9d9
 800a9cc:	0800a9e5 	.word	0x0800a9e5
 800a9d0:	0800aa17 	.word	0x0800aa17
 800a9d4:	0800a9df 	.word	0x0800a9df
    {
        /* If we have received a character in the init state we have to
         * wait until the frame is finished.
         */
    case STATE_M_RX_INIT:
        vMBMasterPortTimersT35Enable( );
 800a9d8:	f7fe ffee 	bl	80099b8 <vMBMasterPortTimersT35Enable>
        break;
 800a9dc:	e032      	b.n	800aa44 <xMBMasterRTUReceiveFSM+0xd8>

        /* In the error state we wait until all characters in the
         * damaged frame are transmitted.
         */
    case STATE_M_RX_ERROR:
        vMBMasterPortTimersT35Enable( );
 800a9de:	f7fe ffeb 	bl	80099b8 <vMBMasterPortTimersT35Enable>
        break;
 800a9e2:	e02f      	b.n	800aa44 <xMBMasterRTUReceiveFSM+0xd8>
         */
    case STATE_M_RX_IDLE:
    	/* In time of respond timeout,the receiver receive a frame.
    	 * Disable timer of respond timeout and change the transmiter state to idle.
    	 */
    	vMBMasterPortTimersDisable( );
 800a9e4:	f7ff f81a 	bl	8009a1c <vMBMasterPortTimersDisable>
    	eSndState = STATE_M_TX_IDLE;
 800a9e8:	4b19      	ldr	r3, [pc, #100]	; (800aa50 <xMBMasterRTUReceiveFSM+0xe4>)
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	701a      	strb	r2, [r3, #0]

        usMasterRcvBufferPos = 0;
 800a9ee:	4b1a      	ldr	r3, [pc, #104]	; (800aa58 <xMBMasterRTUReceiveFSM+0xec>)
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	801a      	strh	r2, [r3, #0]
        ucMasterRTURcvBuf[usMasterRcvBufferPos++] = ucByte;
 800a9f4:	4b18      	ldr	r3, [pc, #96]	; (800aa58 <xMBMasterRTUReceiveFSM+0xec>)
 800a9f6:	881b      	ldrh	r3, [r3, #0]
 800a9f8:	b29b      	uxth	r3, r3
 800a9fa:	1c5a      	adds	r2, r3, #1
 800a9fc:	b291      	uxth	r1, r2
 800a9fe:	4a16      	ldr	r2, [pc, #88]	; (800aa58 <xMBMasterRTUReceiveFSM+0xec>)
 800aa00:	8011      	strh	r1, [r2, #0]
 800aa02:	461a      	mov	r2, r3
 800aa04:	79f9      	ldrb	r1, [r7, #7]
 800aa06:	4b15      	ldr	r3, [pc, #84]	; (800aa5c <xMBMasterRTUReceiveFSM+0xf0>)
 800aa08:	5499      	strb	r1, [r3, r2]
        eRcvState = STATE_M_RX_RCV;
 800aa0a:	4b12      	ldr	r3, [pc, #72]	; (800aa54 <xMBMasterRTUReceiveFSM+0xe8>)
 800aa0c:	2202      	movs	r2, #2
 800aa0e:	701a      	strb	r2, [r3, #0]

        /* Enable t3.5 timers. */
        vMBMasterPortTimersT35Enable( );
 800aa10:	f7fe ffd2 	bl	80099b8 <vMBMasterPortTimersT35Enable>
        break;
 800aa14:	e016      	b.n	800aa44 <xMBMasterRTUReceiveFSM+0xd8>
         * every character received. If more than the maximum possible
         * number of bytes in a modbus frame is received the frame is
         * ignored.
         */
    case STATE_M_RX_RCV:
        if( usMasterRcvBufferPos < MB_SER_PDU_SIZE_MAX )
 800aa16:	4b10      	ldr	r3, [pc, #64]	; (800aa58 <xMBMasterRTUReceiveFSM+0xec>)
 800aa18:	881b      	ldrh	r3, [r3, #0]
 800aa1a:	b29b      	uxth	r3, r3
 800aa1c:	2bff      	cmp	r3, #255	; 0xff
 800aa1e:	d80b      	bhi.n	800aa38 <xMBMasterRTUReceiveFSM+0xcc>
        {
            ucMasterRTURcvBuf[usMasterRcvBufferPos++] = ucByte;
 800aa20:	4b0d      	ldr	r3, [pc, #52]	; (800aa58 <xMBMasterRTUReceiveFSM+0xec>)
 800aa22:	881b      	ldrh	r3, [r3, #0]
 800aa24:	b29b      	uxth	r3, r3
 800aa26:	1c5a      	adds	r2, r3, #1
 800aa28:	b291      	uxth	r1, r2
 800aa2a:	4a0b      	ldr	r2, [pc, #44]	; (800aa58 <xMBMasterRTUReceiveFSM+0xec>)
 800aa2c:	8011      	strh	r1, [r2, #0]
 800aa2e:	461a      	mov	r2, r3
 800aa30:	79f9      	ldrb	r1, [r7, #7]
 800aa32:	4b0a      	ldr	r3, [pc, #40]	; (800aa5c <xMBMasterRTUReceiveFSM+0xf0>)
 800aa34:	5499      	strb	r1, [r3, r2]
 800aa36:	e002      	b.n	800aa3e <xMBMasterRTUReceiveFSM+0xd2>
        }
        else
        {
            eRcvState = STATE_M_RX_ERROR;
 800aa38:	4b06      	ldr	r3, [pc, #24]	; (800aa54 <xMBMasterRTUReceiveFSM+0xe8>)
 800aa3a:	2203      	movs	r2, #3
 800aa3c:	701a      	strb	r2, [r3, #0]
        }
        vMBMasterPortTimersT35Enable();
 800aa3e:	f7fe ffbb 	bl	80099b8 <vMBMasterPortTimersT35Enable>
        break;
 800aa42:	bf00      	nop
    }
    return xTaskNeedSwitch;
 800aa44:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa46:	4618      	mov	r0, r3
 800aa48:	3710      	adds	r7, #16
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bd80      	pop	{r7, pc}
 800aa4e:	bf00      	nop
 800aa50:	20004c0c 	.word	0x20004c0c
 800aa54:	20004c0d 	.word	0x20004c0d
 800aa58:	20004e1a 	.word	0x20004e1a
 800aa5c:	20004d10 	.word	0x20004d10

0800aa60 <xMBMasterRTUTransmitFSM>:

BOOL
xMBMasterRTUTransmitFSM( void )
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b082      	sub	sp, #8
 800aa64:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 800aa66:	2300      	movs	r3, #0
 800aa68:	71fb      	strb	r3, [r7, #7]

    //RT_ASSERT( eRcvState == STATE_M_RX_IDLE );
    configASSERT(eRcvState == STATE_M_RX_IDLE);
 800aa6a:	4b2d      	ldr	r3, [pc, #180]	; (800ab20 <xMBMasterRTUTransmitFSM+0xc0>)
 800aa6c:	781b      	ldrb	r3, [r3, #0]
 800aa6e:	b2db      	uxtb	r3, r3
 800aa70:	2b01      	cmp	r3, #1
 800aa72:	d00c      	beq.n	800aa8e <xMBMasterRTUTransmitFSM+0x2e>
	__asm volatile
 800aa74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa78:	b672      	cpsid	i
 800aa7a:	f383 8811 	msr	BASEPRI, r3
 800aa7e:	f3bf 8f6f 	isb	sy
 800aa82:	f3bf 8f4f 	dsb	sy
 800aa86:	b662      	cpsie	i
 800aa88:	603b      	str	r3, [r7, #0]
}
 800aa8a:	bf00      	nop
 800aa8c:	e7fe      	b.n	800aa8c <xMBMasterRTUTransmitFSM+0x2c>
    switch ( eSndState )
 800aa8e:	4b25      	ldr	r3, [pc, #148]	; (800ab24 <xMBMasterRTUTransmitFSM+0xc4>)
 800aa90:	781b      	ldrb	r3, [r3, #0]
 800aa92:	b2db      	uxtb	r3, r3
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d002      	beq.n	800aa9e <xMBMasterRTUTransmitFSM+0x3e>
 800aa98:	2b01      	cmp	r3, #1
 800aa9a:	d005      	beq.n	800aaa8 <xMBMasterRTUTransmitFSM+0x48>
            }
        }
        break;

    default:
        break;
 800aa9c:	e03a      	b.n	800ab14 <xMBMasterRTUTransmitFSM+0xb4>
        vMBMasterPortSerialEnable( TRUE, FALSE );
 800aa9e:	2100      	movs	r1, #0
 800aaa0:	2001      	movs	r0, #1
 800aaa2:	f7fe fe21 	bl	80096e8 <vMBMasterPortSerialEnable>
        break;
 800aaa6:	e035      	b.n	800ab14 <xMBMasterRTUTransmitFSM+0xb4>
        if( usMasterSndBufferCount != 0 )
 800aaa8:	4b1f      	ldr	r3, [pc, #124]	; (800ab28 <xMBMasterRTUTransmitFSM+0xc8>)
 800aaaa:	881b      	ldrh	r3, [r3, #0]
 800aaac:	b29b      	uxth	r3, r3
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d013      	beq.n	800aada <xMBMasterRTUTransmitFSM+0x7a>
            xMBMasterPortSerialPutByte( ( CHAR )*pucMasterSndBufferCur );
 800aab2:	4b1e      	ldr	r3, [pc, #120]	; (800ab2c <xMBMasterRTUTransmitFSM+0xcc>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	781b      	ldrb	r3, [r3, #0]
 800aab8:	b2db      	uxtb	r3, r3
 800aaba:	4618      	mov	r0, r3
 800aabc:	f7fe fe4c 	bl	8009758 <xMBMasterPortSerialPutByte>
            pucMasterSndBufferCur++;  /* next byte in sendbuffer. */
 800aac0:	4b1a      	ldr	r3, [pc, #104]	; (800ab2c <xMBMasterRTUTransmitFSM+0xcc>)
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	3301      	adds	r3, #1
 800aac6:	4a19      	ldr	r2, [pc, #100]	; (800ab2c <xMBMasterRTUTransmitFSM+0xcc>)
 800aac8:	6013      	str	r3, [r2, #0]
            usMasterSndBufferCount--;
 800aaca:	4b17      	ldr	r3, [pc, #92]	; (800ab28 <xMBMasterRTUTransmitFSM+0xc8>)
 800aacc:	881b      	ldrh	r3, [r3, #0]
 800aace:	b29b      	uxth	r3, r3
 800aad0:	3b01      	subs	r3, #1
 800aad2:	b29a      	uxth	r2, r3
 800aad4:	4b14      	ldr	r3, [pc, #80]	; (800ab28 <xMBMasterRTUTransmitFSM+0xc8>)
 800aad6:	801a      	strh	r2, [r3, #0]
        break;
 800aad8:	e01b      	b.n	800ab12 <xMBMasterRTUTransmitFSM+0xb2>
            xFrameIsBroadcast = ( ucMasterRTUSndBuf[MB_SER_PDU_ADDR_OFF] == MB_ADDRESS_BROADCAST ) ? TRUE : FALSE;
 800aada:	4b15      	ldr	r3, [pc, #84]	; (800ab30 <xMBMasterRTUTransmitFSM+0xd0>)
 800aadc:	781b      	ldrb	r3, [r3, #0]
 800aade:	b2db      	uxtb	r3, r3
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	bf0c      	ite	eq
 800aae4:	2301      	moveq	r3, #1
 800aae6:	2300      	movne	r3, #0
 800aae8:	b2db      	uxtb	r3, r3
 800aaea:	461a      	mov	r2, r3
 800aaec:	4b11      	ldr	r3, [pc, #68]	; (800ab34 <xMBMasterRTUTransmitFSM+0xd4>)
 800aaee:	701a      	strb	r2, [r3, #0]
            vMBMasterPortSerialEnable( TRUE, FALSE );
 800aaf0:	2100      	movs	r1, #0
 800aaf2:	2001      	movs	r0, #1
 800aaf4:	f7fe fdf8 	bl	80096e8 <vMBMasterPortSerialEnable>
            eSndState = STATE_M_TX_XFWR;
 800aaf8:	4b0a      	ldr	r3, [pc, #40]	; (800ab24 <xMBMasterRTUTransmitFSM+0xc4>)
 800aafa:	2202      	movs	r2, #2
 800aafc:	701a      	strb	r2, [r3, #0]
            if ( xFrameIsBroadcast == TRUE )
 800aafe:	4b0d      	ldr	r3, [pc, #52]	; (800ab34 <xMBMasterRTUTransmitFSM+0xd4>)
 800ab00:	781b      	ldrb	r3, [r3, #0]
 800ab02:	b2db      	uxtb	r3, r3
 800ab04:	2b01      	cmp	r3, #1
 800ab06:	d102      	bne.n	800ab0e <xMBMasterRTUTransmitFSM+0xae>
            	vMBMasterPortTimersConvertDelayEnable( );
 800ab08:	f7fe ff68 	bl	80099dc <vMBMasterPortTimersConvertDelayEnable>
        break;
 800ab0c:	e001      	b.n	800ab12 <xMBMasterRTUTransmitFSM+0xb2>
            	vMBMasterPortTimersRespondTimeoutEnable( );
 800ab0e:	f7fe ff75 	bl	80099fc <vMBMasterPortTimersRespondTimeoutEnable>
        break;
 800ab12:	bf00      	nop
    }

    return xNeedPoll;
 800ab14:	79fb      	ldrb	r3, [r7, #7]
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	3708      	adds	r7, #8
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}
 800ab1e:	bf00      	nop
 800ab20:	20004c0d 	.word	0x20004c0d
 800ab24:	20004c0c 	.word	0x20004c0c
 800ab28:	20004e18 	.word	0x20004e18
 800ab2c:	20004e14 	.word	0x20004e14
 800ab30:	20004c10 	.word	0x20004c10
 800ab34:	20004e1c 	.word	0x20004e1c

0800ab38 <xMBMasterRTUTimerExpired>:

BOOL
xMBMasterRTUTimerExpired(void)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b084      	sub	sp, #16
 800ab3c:	af00      	add	r7, sp, #0
	BOOL xNeedPoll = FALSE;
 800ab3e:	2300      	movs	r3, #0
 800ab40:	73fb      	strb	r3, [r7, #15]

	switch (eRcvState)
 800ab42:	4b48      	ldr	r3, [pc, #288]	; (800ac64 <xMBMasterRTUTimerExpired+0x12c>)
 800ab44:	781b      	ldrb	r3, [r3, #0]
 800ab46:	b2db      	uxtb	r3, r3
 800ab48:	2b03      	cmp	r3, #3
 800ab4a:	d012      	beq.n	800ab72 <xMBMasterRTUTimerExpired+0x3a>
 800ab4c:	2b03      	cmp	r3, #3
 800ab4e:	dc19      	bgt.n	800ab84 <xMBMasterRTUTimerExpired+0x4c>
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d002      	beq.n	800ab5a <xMBMasterRTUTimerExpired+0x22>
 800ab54:	2b02      	cmp	r3, #2
 800ab56:	d006      	beq.n	800ab66 <xMBMasterRTUTimerExpired+0x2e>
 800ab58:	e014      	b.n	800ab84 <xMBMasterRTUTimerExpired+0x4c>
	{
		/* Timer t35 expired. Startup phase is finished. */
	case STATE_M_RX_INIT:
		xNeedPoll = xMBMasterPortEventPostFromISR(EV_MASTER_READY);
 800ab5a:	2001      	movs	r0, #1
 800ab5c:	f7fe fbbe 	bl	80092dc <xMBMasterPortEventPostFromISR>
 800ab60:	4603      	mov	r3, r0
 800ab62:	73fb      	strb	r3, [r7, #15]
		break;
 800ab64:	e035      	b.n	800abd2 <xMBMasterRTUTimerExpired+0x9a>

		/* A frame was received and t35 expired. Notify the listener that
		 * a new frame was received. */
	case STATE_M_RX_RCV:
		xNeedPoll = xMBMasterPortEventPostFromISR(EV_MASTER_FRAME_RECEIVED);
 800ab66:	2002      	movs	r0, #2
 800ab68:	f7fe fbb8 	bl	80092dc <xMBMasterPortEventPostFromISR>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	73fb      	strb	r3, [r7, #15]
		break;
 800ab70:	e02f      	b.n	800abd2 <xMBMasterRTUTimerExpired+0x9a>

		/* An error occured while receiving the frame. */
	case STATE_M_RX_ERROR:
		vMBMasterSetErrorType(EV_ERROR_RECEIVE_DATA);
 800ab72:	2001      	movs	r0, #1
 800ab74:	f7fe f9b2 	bl	8008edc <vMBMasterSetErrorType>
		xNeedPoll = xMBMasterPortEventPostFromISR( EV_MASTER_ERROR_PROCESS );
 800ab78:	2010      	movs	r0, #16
 800ab7a:	f7fe fbaf 	bl	80092dc <xMBMasterPortEventPostFromISR>
 800ab7e:	4603      	mov	r3, r0
 800ab80:	73fb      	strb	r3, [r7, #15]
		break;
 800ab82:	e026      	b.n	800abd2 <xMBMasterRTUTimerExpired+0x9a>

		/* Function called in an illegal state. */
	default:
		//RT_ASSERT
		configASSERT(
 800ab84:	4b37      	ldr	r3, [pc, #220]	; (800ac64 <xMBMasterRTUTimerExpired+0x12c>)
 800ab86:	781b      	ldrb	r3, [r3, #0]
 800ab88:	b2db      	uxtb	r3, r3
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d00e      	beq.n	800abac <xMBMasterRTUTimerExpired+0x74>
 800ab8e:	4b35      	ldr	r3, [pc, #212]	; (800ac64 <xMBMasterRTUTimerExpired+0x12c>)
 800ab90:	781b      	ldrb	r3, [r3, #0]
 800ab92:	b2db      	uxtb	r3, r3
 800ab94:	2b02      	cmp	r3, #2
 800ab96:	d009      	beq.n	800abac <xMBMasterRTUTimerExpired+0x74>
 800ab98:	4b32      	ldr	r3, [pc, #200]	; (800ac64 <xMBMasterRTUTimerExpired+0x12c>)
 800ab9a:	781b      	ldrb	r3, [r3, #0]
 800ab9c:	b2db      	uxtb	r3, r3
 800ab9e:	2b03      	cmp	r3, #3
 800aba0:	d004      	beq.n	800abac <xMBMasterRTUTimerExpired+0x74>
 800aba2:	4b30      	ldr	r3, [pc, #192]	; (800ac64 <xMBMasterRTUTimerExpired+0x12c>)
 800aba4:	781b      	ldrb	r3, [r3, #0]
 800aba6:	b2db      	uxtb	r3, r3
 800aba8:	2b01      	cmp	r3, #1
 800abaa:	d101      	bne.n	800abb0 <xMBMasterRTUTimerExpired+0x78>
 800abac:	2301      	movs	r3, #1
 800abae:	e000      	b.n	800abb2 <xMBMasterRTUTimerExpired+0x7a>
 800abb0:	2300      	movs	r3, #0
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d10c      	bne.n	800abd0 <xMBMasterRTUTimerExpired+0x98>
	__asm volatile
 800abb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abba:	b672      	cpsid	i
 800abbc:	f383 8811 	msr	BASEPRI, r3
 800abc0:	f3bf 8f6f 	isb	sy
 800abc4:	f3bf 8f4f 	dsb	sy
 800abc8:	b662      	cpsie	i
 800abca:	60bb      	str	r3, [r7, #8]
}
 800abcc:	bf00      	nop
 800abce:	e7fe      	b.n	800abce <xMBMasterRTUTimerExpired+0x96>
				( eRcvState == STATE_M_RX_INIT ) || ( eRcvState == STATE_M_RX_RCV ) ||
				( eRcvState == STATE_M_RX_ERROR ) || ( eRcvState == STATE_M_RX_IDLE ));
		break;
 800abd0:	bf00      	nop
	}
	eRcvState = STATE_M_RX_IDLE;
 800abd2:	4b24      	ldr	r3, [pc, #144]	; (800ac64 <xMBMasterRTUTimerExpired+0x12c>)
 800abd4:	2201      	movs	r2, #1
 800abd6:	701a      	strb	r2, [r3, #0]

	switch (eSndState)
 800abd8:	4b23      	ldr	r3, [pc, #140]	; (800ac68 <xMBMasterRTUTimerExpired+0x130>)
 800abda:	781b      	ldrb	r3, [r3, #0]
 800abdc:	b2db      	uxtb	r3, r3
 800abde:	2b02      	cmp	r3, #2
 800abe0:	d10d      	bne.n	800abfe <xMBMasterRTUTimerExpired+0xc6>
	{
		/* A frame was send finish and convert delay or respond timeout expired.
		 * If the frame is broadcast,The master will idle,and if the frame is not
		 * broadcast.Notify the listener process error.*/
	case STATE_M_TX_XFWR:
		if ( xFrameIsBroadcast == FALSE ) {
 800abe2:	4b22      	ldr	r3, [pc, #136]	; (800ac6c <xMBMasterRTUTimerExpired+0x134>)
 800abe4:	781b      	ldrb	r3, [r3, #0]
 800abe6:	b2db      	uxtb	r3, r3
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d124      	bne.n	800ac36 <xMBMasterRTUTimerExpired+0xfe>
			vMBMasterSetErrorType(EV_ERROR_RESPOND_TIMEOUT);
 800abec:	2000      	movs	r0, #0
 800abee:	f7fe f975 	bl	8008edc <vMBMasterSetErrorType>
			xNeedPoll = xMBMasterPortEventPostFromISR(EV_MASTER_ERROR_PROCESS);
 800abf2:	2010      	movs	r0, #16
 800abf4:	f7fe fb72 	bl	80092dc <xMBMasterPortEventPostFromISR>
 800abf8:	4603      	mov	r3, r0
 800abfa:	73fb      	strb	r3, [r7, #15]
		}
		break;
 800abfc:	e01b      	b.n	800ac36 <xMBMasterRTUTimerExpired+0xfe>
		/* Function called in an illegal state. */
	default:
		//RT_ASSERT
		//NOTE: assert_param(x)
		configASSERT(
 800abfe:	4b1a      	ldr	r3, [pc, #104]	; (800ac68 <xMBMasterRTUTimerExpired+0x130>)
 800ac00:	781b      	ldrb	r3, [r3, #0]
 800ac02:	b2db      	uxtb	r3, r3
 800ac04:	2b02      	cmp	r3, #2
 800ac06:	d004      	beq.n	800ac12 <xMBMasterRTUTimerExpired+0xda>
 800ac08:	4b17      	ldr	r3, [pc, #92]	; (800ac68 <xMBMasterRTUTimerExpired+0x130>)
 800ac0a:	781b      	ldrb	r3, [r3, #0]
 800ac0c:	b2db      	uxtb	r3, r3
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d101      	bne.n	800ac16 <xMBMasterRTUTimerExpired+0xde>
 800ac12:	2301      	movs	r3, #1
 800ac14:	e000      	b.n	800ac18 <xMBMasterRTUTimerExpired+0xe0>
 800ac16:	2300      	movs	r3, #0
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d10e      	bne.n	800ac3a <xMBMasterRTUTimerExpired+0x102>
	__asm volatile
 800ac1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac20:	b672      	cpsid	i
 800ac22:	f383 8811 	msr	BASEPRI, r3
 800ac26:	f3bf 8f6f 	isb	sy
 800ac2a:	f3bf 8f4f 	dsb	sy
 800ac2e:	b662      	cpsie	i
 800ac30:	607b      	str	r3, [r7, #4]
}
 800ac32:	bf00      	nop
 800ac34:	e7fe      	b.n	800ac34 <xMBMasterRTUTimerExpired+0xfc>
		break;
 800ac36:	bf00      	nop
 800ac38:	e000      	b.n	800ac3c <xMBMasterRTUTimerExpired+0x104>
					( eSndState == STATE_M_TX_XFWR ) || ( eSndState == STATE_M_TX_IDLE ));
		break;
 800ac3a:	bf00      	nop
	}
	eSndState = STATE_M_TX_IDLE;
 800ac3c:	4b0a      	ldr	r3, [pc, #40]	; (800ac68 <xMBMasterRTUTimerExpired+0x130>)
 800ac3e:	2200      	movs	r2, #0
 800ac40:	701a      	strb	r2, [r3, #0]

	vMBMasterPortTimersDisable( );
 800ac42:	f7fe feeb 	bl	8009a1c <vMBMasterPortTimersDisable>
	/* If timer mode is convert delay, the master event then turns EV_MASTER_EXECUTE status. */
	if (eMasterCurTimerMode == MB_TMODE_CONVERT_DELAY) {
 800ac46:	4b0a      	ldr	r3, [pc, #40]	; (800ac70 <xMBMasterRTUTimerExpired+0x138>)
 800ac48:	781b      	ldrb	r3, [r3, #0]
 800ac4a:	b2db      	uxtb	r3, r3
 800ac4c:	2b02      	cmp	r3, #2
 800ac4e:	d104      	bne.n	800ac5a <xMBMasterRTUTimerExpired+0x122>
		xNeedPoll = xMBMasterPortEventPostFromISR( EV_MASTER_EXECUTE );
 800ac50:	2004      	movs	r0, #4
 800ac52:	f7fe fb43 	bl	80092dc <xMBMasterPortEventPostFromISR>
 800ac56:	4603      	mov	r3, r0
 800ac58:	73fb      	strb	r3, [r7, #15]
	}

	return xNeedPoll;
 800ac5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	3710      	adds	r7, #16
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bd80      	pop	{r7, pc}
 800ac64:	20004c0d 	.word	0x20004c0d
 800ac68:	20004c0c 	.word	0x20004c0c
 800ac6c:	20004e1c 	.word	0x20004e1c
 800ac70:	20004e1d 	.word	0x20004e1d

0800ac74 <vMBMasterGetPDUSndBuf>:
	*pucFrame = ( UCHAR * ) ucMasterRTUSndBuf;
}

/* Get Modbus Master send PDU's buffer address pointer.*/
void vMBMasterGetPDUSndBuf( UCHAR ** pucFrame )
{
 800ac74:	b480      	push	{r7}
 800ac76:	b083      	sub	sp, #12
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
	*pucFrame = ( UCHAR * ) &ucMasterRTUSndBuf[MB_SER_PDU_PDU_OFF];
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	4a04      	ldr	r2, [pc, #16]	; (800ac90 <vMBMasterGetPDUSndBuf+0x1c>)
 800ac80:	601a      	str	r2, [r3, #0]
}
 800ac82:	bf00      	nop
 800ac84:	370c      	adds	r7, #12
 800ac86:	46bd      	mov	sp, r7
 800ac88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8c:	4770      	bx	lr
 800ac8e:	bf00      	nop
 800ac90:	20004c11 	.word	0x20004c11

0800ac94 <vMBMasterSetPDUSndLength>:

/* Set Modbus Master send PDU's buffer length.*/
void vMBMasterSetPDUSndLength( USHORT SendPDULength )
{
 800ac94:	b480      	push	{r7}
 800ac96:	b083      	sub	sp, #12
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	80fb      	strh	r3, [r7, #6]
	usMasterSendPDULength = SendPDULength;
 800ac9e:	4a04      	ldr	r2, [pc, #16]	; (800acb0 <vMBMasterSetPDUSndLength+0x1c>)
 800aca0:	88fb      	ldrh	r3, [r7, #6]
 800aca2:	8013      	strh	r3, [r2, #0]
}
 800aca4:	bf00      	nop
 800aca6:	370c      	adds	r7, #12
 800aca8:	46bd      	mov	sp, r7
 800acaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acae:	4770      	bx	lr
 800acb0:	20004e10 	.word	0x20004e10

0800acb4 <usMBMasterGetPDUSndLength>:

/* Get Modbus Master send PDU's buffer length.*/
USHORT usMBMasterGetPDUSndLength( void )
{
 800acb4:	b480      	push	{r7}
 800acb6:	af00      	add	r7, sp, #0
	return usMasterSendPDULength;
 800acb8:	4b03      	ldr	r3, [pc, #12]	; (800acc8 <usMBMasterGetPDUSndLength+0x14>)
 800acba:	881b      	ldrh	r3, [r3, #0]
 800acbc:	b29b      	uxth	r3, r3
}
 800acbe:	4618      	mov	r0, r3
 800acc0:	46bd      	mov	sp, r7
 800acc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc6:	4770      	bx	lr
 800acc8:	20004e10 	.word	0x20004e10

0800accc <xMBMasterRequestIsBroadcast>:
{
	eMasterCurTimerMode = eMBTimerMode;
}

/* The master request is broadcast? */
BOOL xMBMasterRequestIsBroadcast( void ){
 800accc:	b480      	push	{r7}
 800acce:	af00      	add	r7, sp, #0
	return xFrameIsBroadcast;
 800acd0:	4b03      	ldr	r3, [pc, #12]	; (800ace0 <xMBMasterRequestIsBroadcast+0x14>)
 800acd2:	781b      	ldrb	r3, [r3, #0]
 800acd4:	b2db      	uxtb	r3, r3
}
 800acd6:	4618      	mov	r0, r3
 800acd8:	46bd      	mov	sp, r7
 800acda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acde:	4770      	bx	lr
 800ace0:	20004e1c 	.word	0x20004e1c

0800ace4 <__assert_func>:
 800ace4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ace6:	4614      	mov	r4, r2
 800ace8:	461a      	mov	r2, r3
 800acea:	4b09      	ldr	r3, [pc, #36]	; (800ad10 <__assert_func+0x2c>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	4605      	mov	r5, r0
 800acf0:	68d8      	ldr	r0, [r3, #12]
 800acf2:	b14c      	cbz	r4, 800ad08 <__assert_func+0x24>
 800acf4:	4b07      	ldr	r3, [pc, #28]	; (800ad14 <__assert_func+0x30>)
 800acf6:	9100      	str	r1, [sp, #0]
 800acf8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800acfc:	4906      	ldr	r1, [pc, #24]	; (800ad18 <__assert_func+0x34>)
 800acfe:	462b      	mov	r3, r5
 800ad00:	f000 f8ea 	bl	800aed8 <fiprintf>
 800ad04:	f000 fe30 	bl	800b968 <abort>
 800ad08:	4b04      	ldr	r3, [pc, #16]	; (800ad1c <__assert_func+0x38>)
 800ad0a:	461c      	mov	r4, r3
 800ad0c:	e7f3      	b.n	800acf6 <__assert_func+0x12>
 800ad0e:	bf00      	nop
 800ad10:	20000118 	.word	0x20000118
 800ad14:	0800c1ee 	.word	0x0800c1ee
 800ad18:	0800c1fb 	.word	0x0800c1fb
 800ad1c:	0800c229 	.word	0x0800c229

0800ad20 <__errno>:
 800ad20:	4b01      	ldr	r3, [pc, #4]	; (800ad28 <__errno+0x8>)
 800ad22:	6818      	ldr	r0, [r3, #0]
 800ad24:	4770      	bx	lr
 800ad26:	bf00      	nop
 800ad28:	20000118 	.word	0x20000118

0800ad2c <std>:
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	b510      	push	{r4, lr}
 800ad30:	4604      	mov	r4, r0
 800ad32:	e9c0 3300 	strd	r3, r3, [r0]
 800ad36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ad3a:	6083      	str	r3, [r0, #8]
 800ad3c:	8181      	strh	r1, [r0, #12]
 800ad3e:	6643      	str	r3, [r0, #100]	; 0x64
 800ad40:	81c2      	strh	r2, [r0, #14]
 800ad42:	6183      	str	r3, [r0, #24]
 800ad44:	4619      	mov	r1, r3
 800ad46:	2208      	movs	r2, #8
 800ad48:	305c      	adds	r0, #92	; 0x5c
 800ad4a:	f000 f92c 	bl	800afa6 <memset>
 800ad4e:	4b05      	ldr	r3, [pc, #20]	; (800ad64 <std+0x38>)
 800ad50:	6263      	str	r3, [r4, #36]	; 0x24
 800ad52:	4b05      	ldr	r3, [pc, #20]	; (800ad68 <std+0x3c>)
 800ad54:	62a3      	str	r3, [r4, #40]	; 0x28
 800ad56:	4b05      	ldr	r3, [pc, #20]	; (800ad6c <std+0x40>)
 800ad58:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ad5a:	4b05      	ldr	r3, [pc, #20]	; (800ad70 <std+0x44>)
 800ad5c:	6224      	str	r4, [r4, #32]
 800ad5e:	6323      	str	r3, [r4, #48]	; 0x30
 800ad60:	bd10      	pop	{r4, pc}
 800ad62:	bf00      	nop
 800ad64:	0800b73d 	.word	0x0800b73d
 800ad68:	0800b75f 	.word	0x0800b75f
 800ad6c:	0800b797 	.word	0x0800b797
 800ad70:	0800b7bb 	.word	0x0800b7bb

0800ad74 <_cleanup_r>:
 800ad74:	4901      	ldr	r1, [pc, #4]	; (800ad7c <_cleanup_r+0x8>)
 800ad76:	f000 b8c1 	b.w	800aefc <_fwalk_reent>
 800ad7a:	bf00      	nop
 800ad7c:	0800baa5 	.word	0x0800baa5

0800ad80 <__sfmoreglue>:
 800ad80:	b570      	push	{r4, r5, r6, lr}
 800ad82:	1e4a      	subs	r2, r1, #1
 800ad84:	2568      	movs	r5, #104	; 0x68
 800ad86:	4355      	muls	r5, r2
 800ad88:	460e      	mov	r6, r1
 800ad8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ad8e:	f000 f913 	bl	800afb8 <_malloc_r>
 800ad92:	4604      	mov	r4, r0
 800ad94:	b140      	cbz	r0, 800ada8 <__sfmoreglue+0x28>
 800ad96:	2100      	movs	r1, #0
 800ad98:	e9c0 1600 	strd	r1, r6, [r0]
 800ad9c:	300c      	adds	r0, #12
 800ad9e:	60a0      	str	r0, [r4, #8]
 800ada0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ada4:	f000 f8ff 	bl	800afa6 <memset>
 800ada8:	4620      	mov	r0, r4
 800adaa:	bd70      	pop	{r4, r5, r6, pc}

0800adac <__sfp_lock_acquire>:
 800adac:	4801      	ldr	r0, [pc, #4]	; (800adb4 <__sfp_lock_acquire+0x8>)
 800adae:	f000 b8ea 	b.w	800af86 <__retarget_lock_acquire_recursive>
 800adb2:	bf00      	nop
 800adb4:	200051e4 	.word	0x200051e4

0800adb8 <__sfp_lock_release>:
 800adb8:	4801      	ldr	r0, [pc, #4]	; (800adc0 <__sfp_lock_release+0x8>)
 800adba:	f000 b8e5 	b.w	800af88 <__retarget_lock_release_recursive>
 800adbe:	bf00      	nop
 800adc0:	200051e4 	.word	0x200051e4

0800adc4 <__sinit_lock_acquire>:
 800adc4:	4801      	ldr	r0, [pc, #4]	; (800adcc <__sinit_lock_acquire+0x8>)
 800adc6:	f000 b8de 	b.w	800af86 <__retarget_lock_acquire_recursive>
 800adca:	bf00      	nop
 800adcc:	200051df 	.word	0x200051df

0800add0 <__sinit_lock_release>:
 800add0:	4801      	ldr	r0, [pc, #4]	; (800add8 <__sinit_lock_release+0x8>)
 800add2:	f000 b8d9 	b.w	800af88 <__retarget_lock_release_recursive>
 800add6:	bf00      	nop
 800add8:	200051df 	.word	0x200051df

0800addc <__sinit>:
 800addc:	b510      	push	{r4, lr}
 800adde:	4604      	mov	r4, r0
 800ade0:	f7ff fff0 	bl	800adc4 <__sinit_lock_acquire>
 800ade4:	69a3      	ldr	r3, [r4, #24]
 800ade6:	b11b      	cbz	r3, 800adf0 <__sinit+0x14>
 800ade8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800adec:	f7ff bff0 	b.w	800add0 <__sinit_lock_release>
 800adf0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800adf4:	6523      	str	r3, [r4, #80]	; 0x50
 800adf6:	4b13      	ldr	r3, [pc, #76]	; (800ae44 <__sinit+0x68>)
 800adf8:	4a13      	ldr	r2, [pc, #76]	; (800ae48 <__sinit+0x6c>)
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	62a2      	str	r2, [r4, #40]	; 0x28
 800adfe:	42a3      	cmp	r3, r4
 800ae00:	bf04      	itt	eq
 800ae02:	2301      	moveq	r3, #1
 800ae04:	61a3      	streq	r3, [r4, #24]
 800ae06:	4620      	mov	r0, r4
 800ae08:	f000 f820 	bl	800ae4c <__sfp>
 800ae0c:	6060      	str	r0, [r4, #4]
 800ae0e:	4620      	mov	r0, r4
 800ae10:	f000 f81c 	bl	800ae4c <__sfp>
 800ae14:	60a0      	str	r0, [r4, #8]
 800ae16:	4620      	mov	r0, r4
 800ae18:	f000 f818 	bl	800ae4c <__sfp>
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	60e0      	str	r0, [r4, #12]
 800ae20:	2104      	movs	r1, #4
 800ae22:	6860      	ldr	r0, [r4, #4]
 800ae24:	f7ff ff82 	bl	800ad2c <std>
 800ae28:	68a0      	ldr	r0, [r4, #8]
 800ae2a:	2201      	movs	r2, #1
 800ae2c:	2109      	movs	r1, #9
 800ae2e:	f7ff ff7d 	bl	800ad2c <std>
 800ae32:	68e0      	ldr	r0, [r4, #12]
 800ae34:	2202      	movs	r2, #2
 800ae36:	2112      	movs	r1, #18
 800ae38:	f7ff ff78 	bl	800ad2c <std>
 800ae3c:	2301      	movs	r3, #1
 800ae3e:	61a3      	str	r3, [r4, #24]
 800ae40:	e7d2      	b.n	800ade8 <__sinit+0xc>
 800ae42:	bf00      	nop
 800ae44:	0800c28c 	.word	0x0800c28c
 800ae48:	0800ad75 	.word	0x0800ad75

0800ae4c <__sfp>:
 800ae4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae4e:	4607      	mov	r7, r0
 800ae50:	f7ff ffac 	bl	800adac <__sfp_lock_acquire>
 800ae54:	4b1e      	ldr	r3, [pc, #120]	; (800aed0 <__sfp+0x84>)
 800ae56:	681e      	ldr	r6, [r3, #0]
 800ae58:	69b3      	ldr	r3, [r6, #24]
 800ae5a:	b913      	cbnz	r3, 800ae62 <__sfp+0x16>
 800ae5c:	4630      	mov	r0, r6
 800ae5e:	f7ff ffbd 	bl	800addc <__sinit>
 800ae62:	3648      	adds	r6, #72	; 0x48
 800ae64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ae68:	3b01      	subs	r3, #1
 800ae6a:	d503      	bpl.n	800ae74 <__sfp+0x28>
 800ae6c:	6833      	ldr	r3, [r6, #0]
 800ae6e:	b30b      	cbz	r3, 800aeb4 <__sfp+0x68>
 800ae70:	6836      	ldr	r6, [r6, #0]
 800ae72:	e7f7      	b.n	800ae64 <__sfp+0x18>
 800ae74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ae78:	b9d5      	cbnz	r5, 800aeb0 <__sfp+0x64>
 800ae7a:	4b16      	ldr	r3, [pc, #88]	; (800aed4 <__sfp+0x88>)
 800ae7c:	60e3      	str	r3, [r4, #12]
 800ae7e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ae82:	6665      	str	r5, [r4, #100]	; 0x64
 800ae84:	f000 f87e 	bl	800af84 <__retarget_lock_init_recursive>
 800ae88:	f7ff ff96 	bl	800adb8 <__sfp_lock_release>
 800ae8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ae90:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ae94:	6025      	str	r5, [r4, #0]
 800ae96:	61a5      	str	r5, [r4, #24]
 800ae98:	2208      	movs	r2, #8
 800ae9a:	4629      	mov	r1, r5
 800ae9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aea0:	f000 f881 	bl	800afa6 <memset>
 800aea4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800aea8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800aeac:	4620      	mov	r0, r4
 800aeae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aeb0:	3468      	adds	r4, #104	; 0x68
 800aeb2:	e7d9      	b.n	800ae68 <__sfp+0x1c>
 800aeb4:	2104      	movs	r1, #4
 800aeb6:	4638      	mov	r0, r7
 800aeb8:	f7ff ff62 	bl	800ad80 <__sfmoreglue>
 800aebc:	4604      	mov	r4, r0
 800aebe:	6030      	str	r0, [r6, #0]
 800aec0:	2800      	cmp	r0, #0
 800aec2:	d1d5      	bne.n	800ae70 <__sfp+0x24>
 800aec4:	f7ff ff78 	bl	800adb8 <__sfp_lock_release>
 800aec8:	230c      	movs	r3, #12
 800aeca:	603b      	str	r3, [r7, #0]
 800aecc:	e7ee      	b.n	800aeac <__sfp+0x60>
 800aece:	bf00      	nop
 800aed0:	0800c28c 	.word	0x0800c28c
 800aed4:	ffff0001 	.word	0xffff0001

0800aed8 <fiprintf>:
 800aed8:	b40e      	push	{r1, r2, r3}
 800aeda:	b503      	push	{r0, r1, lr}
 800aedc:	4601      	mov	r1, r0
 800aede:	ab03      	add	r3, sp, #12
 800aee0:	4805      	ldr	r0, [pc, #20]	; (800aef8 <fiprintf+0x20>)
 800aee2:	f853 2b04 	ldr.w	r2, [r3], #4
 800aee6:	6800      	ldr	r0, [r0, #0]
 800aee8:	9301      	str	r3, [sp, #4]
 800aeea:	f000 f8e9 	bl	800b0c0 <_vfiprintf_r>
 800aeee:	b002      	add	sp, #8
 800aef0:	f85d eb04 	ldr.w	lr, [sp], #4
 800aef4:	b003      	add	sp, #12
 800aef6:	4770      	bx	lr
 800aef8:	20000118 	.word	0x20000118

0800aefc <_fwalk_reent>:
 800aefc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af00:	4606      	mov	r6, r0
 800af02:	4688      	mov	r8, r1
 800af04:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800af08:	2700      	movs	r7, #0
 800af0a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800af0e:	f1b9 0901 	subs.w	r9, r9, #1
 800af12:	d505      	bpl.n	800af20 <_fwalk_reent+0x24>
 800af14:	6824      	ldr	r4, [r4, #0]
 800af16:	2c00      	cmp	r4, #0
 800af18:	d1f7      	bne.n	800af0a <_fwalk_reent+0xe>
 800af1a:	4638      	mov	r0, r7
 800af1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af20:	89ab      	ldrh	r3, [r5, #12]
 800af22:	2b01      	cmp	r3, #1
 800af24:	d907      	bls.n	800af36 <_fwalk_reent+0x3a>
 800af26:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800af2a:	3301      	adds	r3, #1
 800af2c:	d003      	beq.n	800af36 <_fwalk_reent+0x3a>
 800af2e:	4629      	mov	r1, r5
 800af30:	4630      	mov	r0, r6
 800af32:	47c0      	blx	r8
 800af34:	4307      	orrs	r7, r0
 800af36:	3568      	adds	r5, #104	; 0x68
 800af38:	e7e9      	b.n	800af0e <_fwalk_reent+0x12>
	...

0800af3c <__libc_init_array>:
 800af3c:	b570      	push	{r4, r5, r6, lr}
 800af3e:	4d0d      	ldr	r5, [pc, #52]	; (800af74 <__libc_init_array+0x38>)
 800af40:	4c0d      	ldr	r4, [pc, #52]	; (800af78 <__libc_init_array+0x3c>)
 800af42:	1b64      	subs	r4, r4, r5
 800af44:	10a4      	asrs	r4, r4, #2
 800af46:	2600      	movs	r6, #0
 800af48:	42a6      	cmp	r6, r4
 800af4a:	d109      	bne.n	800af60 <__libc_init_array+0x24>
 800af4c:	4d0b      	ldr	r5, [pc, #44]	; (800af7c <__libc_init_array+0x40>)
 800af4e:	4c0c      	ldr	r4, [pc, #48]	; (800af80 <__libc_init_array+0x44>)
 800af50:	f000 ff2e 	bl	800bdb0 <_init>
 800af54:	1b64      	subs	r4, r4, r5
 800af56:	10a4      	asrs	r4, r4, #2
 800af58:	2600      	movs	r6, #0
 800af5a:	42a6      	cmp	r6, r4
 800af5c:	d105      	bne.n	800af6a <__libc_init_array+0x2e>
 800af5e:	bd70      	pop	{r4, r5, r6, pc}
 800af60:	f855 3b04 	ldr.w	r3, [r5], #4
 800af64:	4798      	blx	r3
 800af66:	3601      	adds	r6, #1
 800af68:	e7ee      	b.n	800af48 <__libc_init_array+0xc>
 800af6a:	f855 3b04 	ldr.w	r3, [r5], #4
 800af6e:	4798      	blx	r3
 800af70:	3601      	adds	r6, #1
 800af72:	e7f2      	b.n	800af5a <__libc_init_array+0x1e>
 800af74:	0800c2cc 	.word	0x0800c2cc
 800af78:	0800c2cc 	.word	0x0800c2cc
 800af7c:	0800c2cc 	.word	0x0800c2cc
 800af80:	0800c2d0 	.word	0x0800c2d0

0800af84 <__retarget_lock_init_recursive>:
 800af84:	4770      	bx	lr

0800af86 <__retarget_lock_acquire_recursive>:
 800af86:	4770      	bx	lr

0800af88 <__retarget_lock_release_recursive>:
 800af88:	4770      	bx	lr

0800af8a <memcpy>:
 800af8a:	440a      	add	r2, r1
 800af8c:	4291      	cmp	r1, r2
 800af8e:	f100 33ff 	add.w	r3, r0, #4294967295
 800af92:	d100      	bne.n	800af96 <memcpy+0xc>
 800af94:	4770      	bx	lr
 800af96:	b510      	push	{r4, lr}
 800af98:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800afa0:	4291      	cmp	r1, r2
 800afa2:	d1f9      	bne.n	800af98 <memcpy+0xe>
 800afa4:	bd10      	pop	{r4, pc}

0800afa6 <memset>:
 800afa6:	4402      	add	r2, r0
 800afa8:	4603      	mov	r3, r0
 800afaa:	4293      	cmp	r3, r2
 800afac:	d100      	bne.n	800afb0 <memset+0xa>
 800afae:	4770      	bx	lr
 800afb0:	f803 1b01 	strb.w	r1, [r3], #1
 800afb4:	e7f9      	b.n	800afaa <memset+0x4>
	...

0800afb8 <_malloc_r>:
 800afb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afba:	1ccd      	adds	r5, r1, #3
 800afbc:	f025 0503 	bic.w	r5, r5, #3
 800afc0:	3508      	adds	r5, #8
 800afc2:	2d0c      	cmp	r5, #12
 800afc4:	bf38      	it	cc
 800afc6:	250c      	movcc	r5, #12
 800afc8:	2d00      	cmp	r5, #0
 800afca:	4606      	mov	r6, r0
 800afcc:	db01      	blt.n	800afd2 <_malloc_r+0x1a>
 800afce:	42a9      	cmp	r1, r5
 800afd0:	d903      	bls.n	800afda <_malloc_r+0x22>
 800afd2:	230c      	movs	r3, #12
 800afd4:	6033      	str	r3, [r6, #0]
 800afd6:	2000      	movs	r0, #0
 800afd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afda:	f000 fe15 	bl	800bc08 <__malloc_lock>
 800afde:	4921      	ldr	r1, [pc, #132]	; (800b064 <_malloc_r+0xac>)
 800afe0:	680a      	ldr	r2, [r1, #0]
 800afe2:	4614      	mov	r4, r2
 800afe4:	b99c      	cbnz	r4, 800b00e <_malloc_r+0x56>
 800afe6:	4f20      	ldr	r7, [pc, #128]	; (800b068 <_malloc_r+0xb0>)
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	b923      	cbnz	r3, 800aff6 <_malloc_r+0x3e>
 800afec:	4621      	mov	r1, r4
 800afee:	4630      	mov	r0, r6
 800aff0:	f000 fb94 	bl	800b71c <_sbrk_r>
 800aff4:	6038      	str	r0, [r7, #0]
 800aff6:	4629      	mov	r1, r5
 800aff8:	4630      	mov	r0, r6
 800affa:	f000 fb8f 	bl	800b71c <_sbrk_r>
 800affe:	1c43      	adds	r3, r0, #1
 800b000:	d123      	bne.n	800b04a <_malloc_r+0x92>
 800b002:	230c      	movs	r3, #12
 800b004:	6033      	str	r3, [r6, #0]
 800b006:	4630      	mov	r0, r6
 800b008:	f000 fe04 	bl	800bc14 <__malloc_unlock>
 800b00c:	e7e3      	b.n	800afd6 <_malloc_r+0x1e>
 800b00e:	6823      	ldr	r3, [r4, #0]
 800b010:	1b5b      	subs	r3, r3, r5
 800b012:	d417      	bmi.n	800b044 <_malloc_r+0x8c>
 800b014:	2b0b      	cmp	r3, #11
 800b016:	d903      	bls.n	800b020 <_malloc_r+0x68>
 800b018:	6023      	str	r3, [r4, #0]
 800b01a:	441c      	add	r4, r3
 800b01c:	6025      	str	r5, [r4, #0]
 800b01e:	e004      	b.n	800b02a <_malloc_r+0x72>
 800b020:	6863      	ldr	r3, [r4, #4]
 800b022:	42a2      	cmp	r2, r4
 800b024:	bf0c      	ite	eq
 800b026:	600b      	streq	r3, [r1, #0]
 800b028:	6053      	strne	r3, [r2, #4]
 800b02a:	4630      	mov	r0, r6
 800b02c:	f000 fdf2 	bl	800bc14 <__malloc_unlock>
 800b030:	f104 000b 	add.w	r0, r4, #11
 800b034:	1d23      	adds	r3, r4, #4
 800b036:	f020 0007 	bic.w	r0, r0, #7
 800b03a:	1ac2      	subs	r2, r0, r3
 800b03c:	d0cc      	beq.n	800afd8 <_malloc_r+0x20>
 800b03e:	1a1b      	subs	r3, r3, r0
 800b040:	50a3      	str	r3, [r4, r2]
 800b042:	e7c9      	b.n	800afd8 <_malloc_r+0x20>
 800b044:	4622      	mov	r2, r4
 800b046:	6864      	ldr	r4, [r4, #4]
 800b048:	e7cc      	b.n	800afe4 <_malloc_r+0x2c>
 800b04a:	1cc4      	adds	r4, r0, #3
 800b04c:	f024 0403 	bic.w	r4, r4, #3
 800b050:	42a0      	cmp	r0, r4
 800b052:	d0e3      	beq.n	800b01c <_malloc_r+0x64>
 800b054:	1a21      	subs	r1, r4, r0
 800b056:	4630      	mov	r0, r6
 800b058:	f000 fb60 	bl	800b71c <_sbrk_r>
 800b05c:	3001      	adds	r0, #1
 800b05e:	d1dd      	bne.n	800b01c <_malloc_r+0x64>
 800b060:	e7cf      	b.n	800b002 <_malloc_r+0x4a>
 800b062:	bf00      	nop
 800b064:	20004e20 	.word	0x20004e20
 800b068:	20004e24 	.word	0x20004e24

0800b06c <__sfputc_r>:
 800b06c:	6893      	ldr	r3, [r2, #8]
 800b06e:	3b01      	subs	r3, #1
 800b070:	2b00      	cmp	r3, #0
 800b072:	b410      	push	{r4}
 800b074:	6093      	str	r3, [r2, #8]
 800b076:	da08      	bge.n	800b08a <__sfputc_r+0x1e>
 800b078:	6994      	ldr	r4, [r2, #24]
 800b07a:	42a3      	cmp	r3, r4
 800b07c:	db01      	blt.n	800b082 <__sfputc_r+0x16>
 800b07e:	290a      	cmp	r1, #10
 800b080:	d103      	bne.n	800b08a <__sfputc_r+0x1e>
 800b082:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b086:	f000 bb9d 	b.w	800b7c4 <__swbuf_r>
 800b08a:	6813      	ldr	r3, [r2, #0]
 800b08c:	1c58      	adds	r0, r3, #1
 800b08e:	6010      	str	r0, [r2, #0]
 800b090:	7019      	strb	r1, [r3, #0]
 800b092:	4608      	mov	r0, r1
 800b094:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b098:	4770      	bx	lr

0800b09a <__sfputs_r>:
 800b09a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b09c:	4606      	mov	r6, r0
 800b09e:	460f      	mov	r7, r1
 800b0a0:	4614      	mov	r4, r2
 800b0a2:	18d5      	adds	r5, r2, r3
 800b0a4:	42ac      	cmp	r4, r5
 800b0a6:	d101      	bne.n	800b0ac <__sfputs_r+0x12>
 800b0a8:	2000      	movs	r0, #0
 800b0aa:	e007      	b.n	800b0bc <__sfputs_r+0x22>
 800b0ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0b0:	463a      	mov	r2, r7
 800b0b2:	4630      	mov	r0, r6
 800b0b4:	f7ff ffda 	bl	800b06c <__sfputc_r>
 800b0b8:	1c43      	adds	r3, r0, #1
 800b0ba:	d1f3      	bne.n	800b0a4 <__sfputs_r+0xa>
 800b0bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b0c0 <_vfiprintf_r>:
 800b0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0c4:	460d      	mov	r5, r1
 800b0c6:	b09d      	sub	sp, #116	; 0x74
 800b0c8:	4614      	mov	r4, r2
 800b0ca:	4698      	mov	r8, r3
 800b0cc:	4606      	mov	r6, r0
 800b0ce:	b118      	cbz	r0, 800b0d8 <_vfiprintf_r+0x18>
 800b0d0:	6983      	ldr	r3, [r0, #24]
 800b0d2:	b90b      	cbnz	r3, 800b0d8 <_vfiprintf_r+0x18>
 800b0d4:	f7ff fe82 	bl	800addc <__sinit>
 800b0d8:	4b89      	ldr	r3, [pc, #548]	; (800b300 <_vfiprintf_r+0x240>)
 800b0da:	429d      	cmp	r5, r3
 800b0dc:	d11b      	bne.n	800b116 <_vfiprintf_r+0x56>
 800b0de:	6875      	ldr	r5, [r6, #4]
 800b0e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b0e2:	07d9      	lsls	r1, r3, #31
 800b0e4:	d405      	bmi.n	800b0f2 <_vfiprintf_r+0x32>
 800b0e6:	89ab      	ldrh	r3, [r5, #12]
 800b0e8:	059a      	lsls	r2, r3, #22
 800b0ea:	d402      	bmi.n	800b0f2 <_vfiprintf_r+0x32>
 800b0ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b0ee:	f7ff ff4a 	bl	800af86 <__retarget_lock_acquire_recursive>
 800b0f2:	89ab      	ldrh	r3, [r5, #12]
 800b0f4:	071b      	lsls	r3, r3, #28
 800b0f6:	d501      	bpl.n	800b0fc <_vfiprintf_r+0x3c>
 800b0f8:	692b      	ldr	r3, [r5, #16]
 800b0fa:	b9eb      	cbnz	r3, 800b138 <_vfiprintf_r+0x78>
 800b0fc:	4629      	mov	r1, r5
 800b0fe:	4630      	mov	r0, r6
 800b100:	f000 fbc4 	bl	800b88c <__swsetup_r>
 800b104:	b1c0      	cbz	r0, 800b138 <_vfiprintf_r+0x78>
 800b106:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b108:	07dc      	lsls	r4, r3, #31
 800b10a:	d50e      	bpl.n	800b12a <_vfiprintf_r+0x6a>
 800b10c:	f04f 30ff 	mov.w	r0, #4294967295
 800b110:	b01d      	add	sp, #116	; 0x74
 800b112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b116:	4b7b      	ldr	r3, [pc, #492]	; (800b304 <_vfiprintf_r+0x244>)
 800b118:	429d      	cmp	r5, r3
 800b11a:	d101      	bne.n	800b120 <_vfiprintf_r+0x60>
 800b11c:	68b5      	ldr	r5, [r6, #8]
 800b11e:	e7df      	b.n	800b0e0 <_vfiprintf_r+0x20>
 800b120:	4b79      	ldr	r3, [pc, #484]	; (800b308 <_vfiprintf_r+0x248>)
 800b122:	429d      	cmp	r5, r3
 800b124:	bf08      	it	eq
 800b126:	68f5      	ldreq	r5, [r6, #12]
 800b128:	e7da      	b.n	800b0e0 <_vfiprintf_r+0x20>
 800b12a:	89ab      	ldrh	r3, [r5, #12]
 800b12c:	0598      	lsls	r0, r3, #22
 800b12e:	d4ed      	bmi.n	800b10c <_vfiprintf_r+0x4c>
 800b130:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b132:	f7ff ff29 	bl	800af88 <__retarget_lock_release_recursive>
 800b136:	e7e9      	b.n	800b10c <_vfiprintf_r+0x4c>
 800b138:	2300      	movs	r3, #0
 800b13a:	9309      	str	r3, [sp, #36]	; 0x24
 800b13c:	2320      	movs	r3, #32
 800b13e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b142:	f8cd 800c 	str.w	r8, [sp, #12]
 800b146:	2330      	movs	r3, #48	; 0x30
 800b148:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b30c <_vfiprintf_r+0x24c>
 800b14c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b150:	f04f 0901 	mov.w	r9, #1
 800b154:	4623      	mov	r3, r4
 800b156:	469a      	mov	sl, r3
 800b158:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b15c:	b10a      	cbz	r2, 800b162 <_vfiprintf_r+0xa2>
 800b15e:	2a25      	cmp	r2, #37	; 0x25
 800b160:	d1f9      	bne.n	800b156 <_vfiprintf_r+0x96>
 800b162:	ebba 0b04 	subs.w	fp, sl, r4
 800b166:	d00b      	beq.n	800b180 <_vfiprintf_r+0xc0>
 800b168:	465b      	mov	r3, fp
 800b16a:	4622      	mov	r2, r4
 800b16c:	4629      	mov	r1, r5
 800b16e:	4630      	mov	r0, r6
 800b170:	f7ff ff93 	bl	800b09a <__sfputs_r>
 800b174:	3001      	adds	r0, #1
 800b176:	f000 80aa 	beq.w	800b2ce <_vfiprintf_r+0x20e>
 800b17a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b17c:	445a      	add	r2, fp
 800b17e:	9209      	str	r2, [sp, #36]	; 0x24
 800b180:	f89a 3000 	ldrb.w	r3, [sl]
 800b184:	2b00      	cmp	r3, #0
 800b186:	f000 80a2 	beq.w	800b2ce <_vfiprintf_r+0x20e>
 800b18a:	2300      	movs	r3, #0
 800b18c:	f04f 32ff 	mov.w	r2, #4294967295
 800b190:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b194:	f10a 0a01 	add.w	sl, sl, #1
 800b198:	9304      	str	r3, [sp, #16]
 800b19a:	9307      	str	r3, [sp, #28]
 800b19c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b1a0:	931a      	str	r3, [sp, #104]	; 0x68
 800b1a2:	4654      	mov	r4, sl
 800b1a4:	2205      	movs	r2, #5
 800b1a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1aa:	4858      	ldr	r0, [pc, #352]	; (800b30c <_vfiprintf_r+0x24c>)
 800b1ac:	f7f5 f848 	bl	8000240 <memchr>
 800b1b0:	9a04      	ldr	r2, [sp, #16]
 800b1b2:	b9d8      	cbnz	r0, 800b1ec <_vfiprintf_r+0x12c>
 800b1b4:	06d1      	lsls	r1, r2, #27
 800b1b6:	bf44      	itt	mi
 800b1b8:	2320      	movmi	r3, #32
 800b1ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b1be:	0713      	lsls	r3, r2, #28
 800b1c0:	bf44      	itt	mi
 800b1c2:	232b      	movmi	r3, #43	; 0x2b
 800b1c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b1c8:	f89a 3000 	ldrb.w	r3, [sl]
 800b1cc:	2b2a      	cmp	r3, #42	; 0x2a
 800b1ce:	d015      	beq.n	800b1fc <_vfiprintf_r+0x13c>
 800b1d0:	9a07      	ldr	r2, [sp, #28]
 800b1d2:	4654      	mov	r4, sl
 800b1d4:	2000      	movs	r0, #0
 800b1d6:	f04f 0c0a 	mov.w	ip, #10
 800b1da:	4621      	mov	r1, r4
 800b1dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b1e0:	3b30      	subs	r3, #48	; 0x30
 800b1e2:	2b09      	cmp	r3, #9
 800b1e4:	d94e      	bls.n	800b284 <_vfiprintf_r+0x1c4>
 800b1e6:	b1b0      	cbz	r0, 800b216 <_vfiprintf_r+0x156>
 800b1e8:	9207      	str	r2, [sp, #28]
 800b1ea:	e014      	b.n	800b216 <_vfiprintf_r+0x156>
 800b1ec:	eba0 0308 	sub.w	r3, r0, r8
 800b1f0:	fa09 f303 	lsl.w	r3, r9, r3
 800b1f4:	4313      	orrs	r3, r2
 800b1f6:	9304      	str	r3, [sp, #16]
 800b1f8:	46a2      	mov	sl, r4
 800b1fa:	e7d2      	b.n	800b1a2 <_vfiprintf_r+0xe2>
 800b1fc:	9b03      	ldr	r3, [sp, #12]
 800b1fe:	1d19      	adds	r1, r3, #4
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	9103      	str	r1, [sp, #12]
 800b204:	2b00      	cmp	r3, #0
 800b206:	bfbb      	ittet	lt
 800b208:	425b      	neglt	r3, r3
 800b20a:	f042 0202 	orrlt.w	r2, r2, #2
 800b20e:	9307      	strge	r3, [sp, #28]
 800b210:	9307      	strlt	r3, [sp, #28]
 800b212:	bfb8      	it	lt
 800b214:	9204      	strlt	r2, [sp, #16]
 800b216:	7823      	ldrb	r3, [r4, #0]
 800b218:	2b2e      	cmp	r3, #46	; 0x2e
 800b21a:	d10c      	bne.n	800b236 <_vfiprintf_r+0x176>
 800b21c:	7863      	ldrb	r3, [r4, #1]
 800b21e:	2b2a      	cmp	r3, #42	; 0x2a
 800b220:	d135      	bne.n	800b28e <_vfiprintf_r+0x1ce>
 800b222:	9b03      	ldr	r3, [sp, #12]
 800b224:	1d1a      	adds	r2, r3, #4
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	9203      	str	r2, [sp, #12]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	bfb8      	it	lt
 800b22e:	f04f 33ff 	movlt.w	r3, #4294967295
 800b232:	3402      	adds	r4, #2
 800b234:	9305      	str	r3, [sp, #20]
 800b236:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b31c <_vfiprintf_r+0x25c>
 800b23a:	7821      	ldrb	r1, [r4, #0]
 800b23c:	2203      	movs	r2, #3
 800b23e:	4650      	mov	r0, sl
 800b240:	f7f4 fffe 	bl	8000240 <memchr>
 800b244:	b140      	cbz	r0, 800b258 <_vfiprintf_r+0x198>
 800b246:	2340      	movs	r3, #64	; 0x40
 800b248:	eba0 000a 	sub.w	r0, r0, sl
 800b24c:	fa03 f000 	lsl.w	r0, r3, r0
 800b250:	9b04      	ldr	r3, [sp, #16]
 800b252:	4303      	orrs	r3, r0
 800b254:	3401      	adds	r4, #1
 800b256:	9304      	str	r3, [sp, #16]
 800b258:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b25c:	482c      	ldr	r0, [pc, #176]	; (800b310 <_vfiprintf_r+0x250>)
 800b25e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b262:	2206      	movs	r2, #6
 800b264:	f7f4 ffec 	bl	8000240 <memchr>
 800b268:	2800      	cmp	r0, #0
 800b26a:	d03f      	beq.n	800b2ec <_vfiprintf_r+0x22c>
 800b26c:	4b29      	ldr	r3, [pc, #164]	; (800b314 <_vfiprintf_r+0x254>)
 800b26e:	bb1b      	cbnz	r3, 800b2b8 <_vfiprintf_r+0x1f8>
 800b270:	9b03      	ldr	r3, [sp, #12]
 800b272:	3307      	adds	r3, #7
 800b274:	f023 0307 	bic.w	r3, r3, #7
 800b278:	3308      	adds	r3, #8
 800b27a:	9303      	str	r3, [sp, #12]
 800b27c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b27e:	443b      	add	r3, r7
 800b280:	9309      	str	r3, [sp, #36]	; 0x24
 800b282:	e767      	b.n	800b154 <_vfiprintf_r+0x94>
 800b284:	fb0c 3202 	mla	r2, ip, r2, r3
 800b288:	460c      	mov	r4, r1
 800b28a:	2001      	movs	r0, #1
 800b28c:	e7a5      	b.n	800b1da <_vfiprintf_r+0x11a>
 800b28e:	2300      	movs	r3, #0
 800b290:	3401      	adds	r4, #1
 800b292:	9305      	str	r3, [sp, #20]
 800b294:	4619      	mov	r1, r3
 800b296:	f04f 0c0a 	mov.w	ip, #10
 800b29a:	4620      	mov	r0, r4
 800b29c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b2a0:	3a30      	subs	r2, #48	; 0x30
 800b2a2:	2a09      	cmp	r2, #9
 800b2a4:	d903      	bls.n	800b2ae <_vfiprintf_r+0x1ee>
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d0c5      	beq.n	800b236 <_vfiprintf_r+0x176>
 800b2aa:	9105      	str	r1, [sp, #20]
 800b2ac:	e7c3      	b.n	800b236 <_vfiprintf_r+0x176>
 800b2ae:	fb0c 2101 	mla	r1, ip, r1, r2
 800b2b2:	4604      	mov	r4, r0
 800b2b4:	2301      	movs	r3, #1
 800b2b6:	e7f0      	b.n	800b29a <_vfiprintf_r+0x1da>
 800b2b8:	ab03      	add	r3, sp, #12
 800b2ba:	9300      	str	r3, [sp, #0]
 800b2bc:	462a      	mov	r2, r5
 800b2be:	4b16      	ldr	r3, [pc, #88]	; (800b318 <_vfiprintf_r+0x258>)
 800b2c0:	a904      	add	r1, sp, #16
 800b2c2:	4630      	mov	r0, r6
 800b2c4:	f3af 8000 	nop.w
 800b2c8:	4607      	mov	r7, r0
 800b2ca:	1c78      	adds	r0, r7, #1
 800b2cc:	d1d6      	bne.n	800b27c <_vfiprintf_r+0x1bc>
 800b2ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b2d0:	07d9      	lsls	r1, r3, #31
 800b2d2:	d405      	bmi.n	800b2e0 <_vfiprintf_r+0x220>
 800b2d4:	89ab      	ldrh	r3, [r5, #12]
 800b2d6:	059a      	lsls	r2, r3, #22
 800b2d8:	d402      	bmi.n	800b2e0 <_vfiprintf_r+0x220>
 800b2da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b2dc:	f7ff fe54 	bl	800af88 <__retarget_lock_release_recursive>
 800b2e0:	89ab      	ldrh	r3, [r5, #12]
 800b2e2:	065b      	lsls	r3, r3, #25
 800b2e4:	f53f af12 	bmi.w	800b10c <_vfiprintf_r+0x4c>
 800b2e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b2ea:	e711      	b.n	800b110 <_vfiprintf_r+0x50>
 800b2ec:	ab03      	add	r3, sp, #12
 800b2ee:	9300      	str	r3, [sp, #0]
 800b2f0:	462a      	mov	r2, r5
 800b2f2:	4b09      	ldr	r3, [pc, #36]	; (800b318 <_vfiprintf_r+0x258>)
 800b2f4:	a904      	add	r1, sp, #16
 800b2f6:	4630      	mov	r0, r6
 800b2f8:	f000 f880 	bl	800b3fc <_printf_i>
 800b2fc:	e7e4      	b.n	800b2c8 <_vfiprintf_r+0x208>
 800b2fe:	bf00      	nop
 800b300:	0800c24c 	.word	0x0800c24c
 800b304:	0800c26c 	.word	0x0800c26c
 800b308:	0800c22c 	.word	0x0800c22c
 800b30c:	0800c290 	.word	0x0800c290
 800b310:	0800c29a 	.word	0x0800c29a
 800b314:	00000000 	.word	0x00000000
 800b318:	0800b09b 	.word	0x0800b09b
 800b31c:	0800c296 	.word	0x0800c296

0800b320 <_printf_common>:
 800b320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b324:	4616      	mov	r6, r2
 800b326:	4699      	mov	r9, r3
 800b328:	688a      	ldr	r2, [r1, #8]
 800b32a:	690b      	ldr	r3, [r1, #16]
 800b32c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b330:	4293      	cmp	r3, r2
 800b332:	bfb8      	it	lt
 800b334:	4613      	movlt	r3, r2
 800b336:	6033      	str	r3, [r6, #0]
 800b338:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b33c:	4607      	mov	r7, r0
 800b33e:	460c      	mov	r4, r1
 800b340:	b10a      	cbz	r2, 800b346 <_printf_common+0x26>
 800b342:	3301      	adds	r3, #1
 800b344:	6033      	str	r3, [r6, #0]
 800b346:	6823      	ldr	r3, [r4, #0]
 800b348:	0699      	lsls	r1, r3, #26
 800b34a:	bf42      	ittt	mi
 800b34c:	6833      	ldrmi	r3, [r6, #0]
 800b34e:	3302      	addmi	r3, #2
 800b350:	6033      	strmi	r3, [r6, #0]
 800b352:	6825      	ldr	r5, [r4, #0]
 800b354:	f015 0506 	ands.w	r5, r5, #6
 800b358:	d106      	bne.n	800b368 <_printf_common+0x48>
 800b35a:	f104 0a19 	add.w	sl, r4, #25
 800b35e:	68e3      	ldr	r3, [r4, #12]
 800b360:	6832      	ldr	r2, [r6, #0]
 800b362:	1a9b      	subs	r3, r3, r2
 800b364:	42ab      	cmp	r3, r5
 800b366:	dc26      	bgt.n	800b3b6 <_printf_common+0x96>
 800b368:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b36c:	1e13      	subs	r3, r2, #0
 800b36e:	6822      	ldr	r2, [r4, #0]
 800b370:	bf18      	it	ne
 800b372:	2301      	movne	r3, #1
 800b374:	0692      	lsls	r2, r2, #26
 800b376:	d42b      	bmi.n	800b3d0 <_printf_common+0xb0>
 800b378:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b37c:	4649      	mov	r1, r9
 800b37e:	4638      	mov	r0, r7
 800b380:	47c0      	blx	r8
 800b382:	3001      	adds	r0, #1
 800b384:	d01e      	beq.n	800b3c4 <_printf_common+0xa4>
 800b386:	6823      	ldr	r3, [r4, #0]
 800b388:	68e5      	ldr	r5, [r4, #12]
 800b38a:	6832      	ldr	r2, [r6, #0]
 800b38c:	f003 0306 	and.w	r3, r3, #6
 800b390:	2b04      	cmp	r3, #4
 800b392:	bf08      	it	eq
 800b394:	1aad      	subeq	r5, r5, r2
 800b396:	68a3      	ldr	r3, [r4, #8]
 800b398:	6922      	ldr	r2, [r4, #16]
 800b39a:	bf0c      	ite	eq
 800b39c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b3a0:	2500      	movne	r5, #0
 800b3a2:	4293      	cmp	r3, r2
 800b3a4:	bfc4      	itt	gt
 800b3a6:	1a9b      	subgt	r3, r3, r2
 800b3a8:	18ed      	addgt	r5, r5, r3
 800b3aa:	2600      	movs	r6, #0
 800b3ac:	341a      	adds	r4, #26
 800b3ae:	42b5      	cmp	r5, r6
 800b3b0:	d11a      	bne.n	800b3e8 <_printf_common+0xc8>
 800b3b2:	2000      	movs	r0, #0
 800b3b4:	e008      	b.n	800b3c8 <_printf_common+0xa8>
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	4652      	mov	r2, sl
 800b3ba:	4649      	mov	r1, r9
 800b3bc:	4638      	mov	r0, r7
 800b3be:	47c0      	blx	r8
 800b3c0:	3001      	adds	r0, #1
 800b3c2:	d103      	bne.n	800b3cc <_printf_common+0xac>
 800b3c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b3c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3cc:	3501      	adds	r5, #1
 800b3ce:	e7c6      	b.n	800b35e <_printf_common+0x3e>
 800b3d0:	18e1      	adds	r1, r4, r3
 800b3d2:	1c5a      	adds	r2, r3, #1
 800b3d4:	2030      	movs	r0, #48	; 0x30
 800b3d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b3da:	4422      	add	r2, r4
 800b3dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b3e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b3e4:	3302      	adds	r3, #2
 800b3e6:	e7c7      	b.n	800b378 <_printf_common+0x58>
 800b3e8:	2301      	movs	r3, #1
 800b3ea:	4622      	mov	r2, r4
 800b3ec:	4649      	mov	r1, r9
 800b3ee:	4638      	mov	r0, r7
 800b3f0:	47c0      	blx	r8
 800b3f2:	3001      	adds	r0, #1
 800b3f4:	d0e6      	beq.n	800b3c4 <_printf_common+0xa4>
 800b3f6:	3601      	adds	r6, #1
 800b3f8:	e7d9      	b.n	800b3ae <_printf_common+0x8e>
	...

0800b3fc <_printf_i>:
 800b3fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b400:	460c      	mov	r4, r1
 800b402:	4691      	mov	r9, r2
 800b404:	7e27      	ldrb	r7, [r4, #24]
 800b406:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b408:	2f78      	cmp	r7, #120	; 0x78
 800b40a:	4680      	mov	r8, r0
 800b40c:	469a      	mov	sl, r3
 800b40e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b412:	d807      	bhi.n	800b424 <_printf_i+0x28>
 800b414:	2f62      	cmp	r7, #98	; 0x62
 800b416:	d80a      	bhi.n	800b42e <_printf_i+0x32>
 800b418:	2f00      	cmp	r7, #0
 800b41a:	f000 80d8 	beq.w	800b5ce <_printf_i+0x1d2>
 800b41e:	2f58      	cmp	r7, #88	; 0x58
 800b420:	f000 80a3 	beq.w	800b56a <_printf_i+0x16e>
 800b424:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b428:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b42c:	e03a      	b.n	800b4a4 <_printf_i+0xa8>
 800b42e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b432:	2b15      	cmp	r3, #21
 800b434:	d8f6      	bhi.n	800b424 <_printf_i+0x28>
 800b436:	a001      	add	r0, pc, #4	; (adr r0, 800b43c <_printf_i+0x40>)
 800b438:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b43c:	0800b495 	.word	0x0800b495
 800b440:	0800b4a9 	.word	0x0800b4a9
 800b444:	0800b425 	.word	0x0800b425
 800b448:	0800b425 	.word	0x0800b425
 800b44c:	0800b425 	.word	0x0800b425
 800b450:	0800b425 	.word	0x0800b425
 800b454:	0800b4a9 	.word	0x0800b4a9
 800b458:	0800b425 	.word	0x0800b425
 800b45c:	0800b425 	.word	0x0800b425
 800b460:	0800b425 	.word	0x0800b425
 800b464:	0800b425 	.word	0x0800b425
 800b468:	0800b5b5 	.word	0x0800b5b5
 800b46c:	0800b4d9 	.word	0x0800b4d9
 800b470:	0800b597 	.word	0x0800b597
 800b474:	0800b425 	.word	0x0800b425
 800b478:	0800b425 	.word	0x0800b425
 800b47c:	0800b5d7 	.word	0x0800b5d7
 800b480:	0800b425 	.word	0x0800b425
 800b484:	0800b4d9 	.word	0x0800b4d9
 800b488:	0800b425 	.word	0x0800b425
 800b48c:	0800b425 	.word	0x0800b425
 800b490:	0800b59f 	.word	0x0800b59f
 800b494:	680b      	ldr	r3, [r1, #0]
 800b496:	1d1a      	adds	r2, r3, #4
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	600a      	str	r2, [r1, #0]
 800b49c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b4a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b4a4:	2301      	movs	r3, #1
 800b4a6:	e0a3      	b.n	800b5f0 <_printf_i+0x1f4>
 800b4a8:	6825      	ldr	r5, [r4, #0]
 800b4aa:	6808      	ldr	r0, [r1, #0]
 800b4ac:	062e      	lsls	r6, r5, #24
 800b4ae:	f100 0304 	add.w	r3, r0, #4
 800b4b2:	d50a      	bpl.n	800b4ca <_printf_i+0xce>
 800b4b4:	6805      	ldr	r5, [r0, #0]
 800b4b6:	600b      	str	r3, [r1, #0]
 800b4b8:	2d00      	cmp	r5, #0
 800b4ba:	da03      	bge.n	800b4c4 <_printf_i+0xc8>
 800b4bc:	232d      	movs	r3, #45	; 0x2d
 800b4be:	426d      	negs	r5, r5
 800b4c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b4c4:	485e      	ldr	r0, [pc, #376]	; (800b640 <_printf_i+0x244>)
 800b4c6:	230a      	movs	r3, #10
 800b4c8:	e019      	b.n	800b4fe <_printf_i+0x102>
 800b4ca:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b4ce:	6805      	ldr	r5, [r0, #0]
 800b4d0:	600b      	str	r3, [r1, #0]
 800b4d2:	bf18      	it	ne
 800b4d4:	b22d      	sxthne	r5, r5
 800b4d6:	e7ef      	b.n	800b4b8 <_printf_i+0xbc>
 800b4d8:	680b      	ldr	r3, [r1, #0]
 800b4da:	6825      	ldr	r5, [r4, #0]
 800b4dc:	1d18      	adds	r0, r3, #4
 800b4de:	6008      	str	r0, [r1, #0]
 800b4e0:	0628      	lsls	r0, r5, #24
 800b4e2:	d501      	bpl.n	800b4e8 <_printf_i+0xec>
 800b4e4:	681d      	ldr	r5, [r3, #0]
 800b4e6:	e002      	b.n	800b4ee <_printf_i+0xf2>
 800b4e8:	0669      	lsls	r1, r5, #25
 800b4ea:	d5fb      	bpl.n	800b4e4 <_printf_i+0xe8>
 800b4ec:	881d      	ldrh	r5, [r3, #0]
 800b4ee:	4854      	ldr	r0, [pc, #336]	; (800b640 <_printf_i+0x244>)
 800b4f0:	2f6f      	cmp	r7, #111	; 0x6f
 800b4f2:	bf0c      	ite	eq
 800b4f4:	2308      	moveq	r3, #8
 800b4f6:	230a      	movne	r3, #10
 800b4f8:	2100      	movs	r1, #0
 800b4fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b4fe:	6866      	ldr	r6, [r4, #4]
 800b500:	60a6      	str	r6, [r4, #8]
 800b502:	2e00      	cmp	r6, #0
 800b504:	bfa2      	ittt	ge
 800b506:	6821      	ldrge	r1, [r4, #0]
 800b508:	f021 0104 	bicge.w	r1, r1, #4
 800b50c:	6021      	strge	r1, [r4, #0]
 800b50e:	b90d      	cbnz	r5, 800b514 <_printf_i+0x118>
 800b510:	2e00      	cmp	r6, #0
 800b512:	d04d      	beq.n	800b5b0 <_printf_i+0x1b4>
 800b514:	4616      	mov	r6, r2
 800b516:	fbb5 f1f3 	udiv	r1, r5, r3
 800b51a:	fb03 5711 	mls	r7, r3, r1, r5
 800b51e:	5dc7      	ldrb	r7, [r0, r7]
 800b520:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b524:	462f      	mov	r7, r5
 800b526:	42bb      	cmp	r3, r7
 800b528:	460d      	mov	r5, r1
 800b52a:	d9f4      	bls.n	800b516 <_printf_i+0x11a>
 800b52c:	2b08      	cmp	r3, #8
 800b52e:	d10b      	bne.n	800b548 <_printf_i+0x14c>
 800b530:	6823      	ldr	r3, [r4, #0]
 800b532:	07df      	lsls	r7, r3, #31
 800b534:	d508      	bpl.n	800b548 <_printf_i+0x14c>
 800b536:	6923      	ldr	r3, [r4, #16]
 800b538:	6861      	ldr	r1, [r4, #4]
 800b53a:	4299      	cmp	r1, r3
 800b53c:	bfde      	ittt	le
 800b53e:	2330      	movle	r3, #48	; 0x30
 800b540:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b544:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b548:	1b92      	subs	r2, r2, r6
 800b54a:	6122      	str	r2, [r4, #16]
 800b54c:	f8cd a000 	str.w	sl, [sp]
 800b550:	464b      	mov	r3, r9
 800b552:	aa03      	add	r2, sp, #12
 800b554:	4621      	mov	r1, r4
 800b556:	4640      	mov	r0, r8
 800b558:	f7ff fee2 	bl	800b320 <_printf_common>
 800b55c:	3001      	adds	r0, #1
 800b55e:	d14c      	bne.n	800b5fa <_printf_i+0x1fe>
 800b560:	f04f 30ff 	mov.w	r0, #4294967295
 800b564:	b004      	add	sp, #16
 800b566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b56a:	4835      	ldr	r0, [pc, #212]	; (800b640 <_printf_i+0x244>)
 800b56c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b570:	6823      	ldr	r3, [r4, #0]
 800b572:	680e      	ldr	r6, [r1, #0]
 800b574:	061f      	lsls	r7, r3, #24
 800b576:	f856 5b04 	ldr.w	r5, [r6], #4
 800b57a:	600e      	str	r6, [r1, #0]
 800b57c:	d514      	bpl.n	800b5a8 <_printf_i+0x1ac>
 800b57e:	07d9      	lsls	r1, r3, #31
 800b580:	bf44      	itt	mi
 800b582:	f043 0320 	orrmi.w	r3, r3, #32
 800b586:	6023      	strmi	r3, [r4, #0]
 800b588:	b91d      	cbnz	r5, 800b592 <_printf_i+0x196>
 800b58a:	6823      	ldr	r3, [r4, #0]
 800b58c:	f023 0320 	bic.w	r3, r3, #32
 800b590:	6023      	str	r3, [r4, #0]
 800b592:	2310      	movs	r3, #16
 800b594:	e7b0      	b.n	800b4f8 <_printf_i+0xfc>
 800b596:	6823      	ldr	r3, [r4, #0]
 800b598:	f043 0320 	orr.w	r3, r3, #32
 800b59c:	6023      	str	r3, [r4, #0]
 800b59e:	2378      	movs	r3, #120	; 0x78
 800b5a0:	4828      	ldr	r0, [pc, #160]	; (800b644 <_printf_i+0x248>)
 800b5a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b5a6:	e7e3      	b.n	800b570 <_printf_i+0x174>
 800b5a8:	065e      	lsls	r6, r3, #25
 800b5aa:	bf48      	it	mi
 800b5ac:	b2ad      	uxthmi	r5, r5
 800b5ae:	e7e6      	b.n	800b57e <_printf_i+0x182>
 800b5b0:	4616      	mov	r6, r2
 800b5b2:	e7bb      	b.n	800b52c <_printf_i+0x130>
 800b5b4:	680b      	ldr	r3, [r1, #0]
 800b5b6:	6826      	ldr	r6, [r4, #0]
 800b5b8:	6960      	ldr	r0, [r4, #20]
 800b5ba:	1d1d      	adds	r5, r3, #4
 800b5bc:	600d      	str	r5, [r1, #0]
 800b5be:	0635      	lsls	r5, r6, #24
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	d501      	bpl.n	800b5c8 <_printf_i+0x1cc>
 800b5c4:	6018      	str	r0, [r3, #0]
 800b5c6:	e002      	b.n	800b5ce <_printf_i+0x1d2>
 800b5c8:	0671      	lsls	r1, r6, #25
 800b5ca:	d5fb      	bpl.n	800b5c4 <_printf_i+0x1c8>
 800b5cc:	8018      	strh	r0, [r3, #0]
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	6123      	str	r3, [r4, #16]
 800b5d2:	4616      	mov	r6, r2
 800b5d4:	e7ba      	b.n	800b54c <_printf_i+0x150>
 800b5d6:	680b      	ldr	r3, [r1, #0]
 800b5d8:	1d1a      	adds	r2, r3, #4
 800b5da:	600a      	str	r2, [r1, #0]
 800b5dc:	681e      	ldr	r6, [r3, #0]
 800b5de:	6862      	ldr	r2, [r4, #4]
 800b5e0:	2100      	movs	r1, #0
 800b5e2:	4630      	mov	r0, r6
 800b5e4:	f7f4 fe2c 	bl	8000240 <memchr>
 800b5e8:	b108      	cbz	r0, 800b5ee <_printf_i+0x1f2>
 800b5ea:	1b80      	subs	r0, r0, r6
 800b5ec:	6060      	str	r0, [r4, #4]
 800b5ee:	6863      	ldr	r3, [r4, #4]
 800b5f0:	6123      	str	r3, [r4, #16]
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b5f8:	e7a8      	b.n	800b54c <_printf_i+0x150>
 800b5fa:	6923      	ldr	r3, [r4, #16]
 800b5fc:	4632      	mov	r2, r6
 800b5fe:	4649      	mov	r1, r9
 800b600:	4640      	mov	r0, r8
 800b602:	47d0      	blx	sl
 800b604:	3001      	adds	r0, #1
 800b606:	d0ab      	beq.n	800b560 <_printf_i+0x164>
 800b608:	6823      	ldr	r3, [r4, #0]
 800b60a:	079b      	lsls	r3, r3, #30
 800b60c:	d413      	bmi.n	800b636 <_printf_i+0x23a>
 800b60e:	68e0      	ldr	r0, [r4, #12]
 800b610:	9b03      	ldr	r3, [sp, #12]
 800b612:	4298      	cmp	r0, r3
 800b614:	bfb8      	it	lt
 800b616:	4618      	movlt	r0, r3
 800b618:	e7a4      	b.n	800b564 <_printf_i+0x168>
 800b61a:	2301      	movs	r3, #1
 800b61c:	4632      	mov	r2, r6
 800b61e:	4649      	mov	r1, r9
 800b620:	4640      	mov	r0, r8
 800b622:	47d0      	blx	sl
 800b624:	3001      	adds	r0, #1
 800b626:	d09b      	beq.n	800b560 <_printf_i+0x164>
 800b628:	3501      	adds	r5, #1
 800b62a:	68e3      	ldr	r3, [r4, #12]
 800b62c:	9903      	ldr	r1, [sp, #12]
 800b62e:	1a5b      	subs	r3, r3, r1
 800b630:	42ab      	cmp	r3, r5
 800b632:	dcf2      	bgt.n	800b61a <_printf_i+0x21e>
 800b634:	e7eb      	b.n	800b60e <_printf_i+0x212>
 800b636:	2500      	movs	r5, #0
 800b638:	f104 0619 	add.w	r6, r4, #25
 800b63c:	e7f5      	b.n	800b62a <_printf_i+0x22e>
 800b63e:	bf00      	nop
 800b640:	0800c2a1 	.word	0x0800c2a1
 800b644:	0800c2b2 	.word	0x0800c2b2

0800b648 <cleanup_glue>:
 800b648:	b538      	push	{r3, r4, r5, lr}
 800b64a:	460c      	mov	r4, r1
 800b64c:	6809      	ldr	r1, [r1, #0]
 800b64e:	4605      	mov	r5, r0
 800b650:	b109      	cbz	r1, 800b656 <cleanup_glue+0xe>
 800b652:	f7ff fff9 	bl	800b648 <cleanup_glue>
 800b656:	4621      	mov	r1, r4
 800b658:	4628      	mov	r0, r5
 800b65a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b65e:	f000 badf 	b.w	800bc20 <_free_r>
	...

0800b664 <_reclaim_reent>:
 800b664:	4b2c      	ldr	r3, [pc, #176]	; (800b718 <_reclaim_reent+0xb4>)
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	4283      	cmp	r3, r0
 800b66a:	b570      	push	{r4, r5, r6, lr}
 800b66c:	4604      	mov	r4, r0
 800b66e:	d051      	beq.n	800b714 <_reclaim_reent+0xb0>
 800b670:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b672:	b143      	cbz	r3, 800b686 <_reclaim_reent+0x22>
 800b674:	68db      	ldr	r3, [r3, #12]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d14a      	bne.n	800b710 <_reclaim_reent+0xac>
 800b67a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b67c:	6819      	ldr	r1, [r3, #0]
 800b67e:	b111      	cbz	r1, 800b686 <_reclaim_reent+0x22>
 800b680:	4620      	mov	r0, r4
 800b682:	f000 facd 	bl	800bc20 <_free_r>
 800b686:	6961      	ldr	r1, [r4, #20]
 800b688:	b111      	cbz	r1, 800b690 <_reclaim_reent+0x2c>
 800b68a:	4620      	mov	r0, r4
 800b68c:	f000 fac8 	bl	800bc20 <_free_r>
 800b690:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b692:	b111      	cbz	r1, 800b69a <_reclaim_reent+0x36>
 800b694:	4620      	mov	r0, r4
 800b696:	f000 fac3 	bl	800bc20 <_free_r>
 800b69a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b69c:	b111      	cbz	r1, 800b6a4 <_reclaim_reent+0x40>
 800b69e:	4620      	mov	r0, r4
 800b6a0:	f000 fabe 	bl	800bc20 <_free_r>
 800b6a4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b6a6:	b111      	cbz	r1, 800b6ae <_reclaim_reent+0x4a>
 800b6a8:	4620      	mov	r0, r4
 800b6aa:	f000 fab9 	bl	800bc20 <_free_r>
 800b6ae:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b6b0:	b111      	cbz	r1, 800b6b8 <_reclaim_reent+0x54>
 800b6b2:	4620      	mov	r0, r4
 800b6b4:	f000 fab4 	bl	800bc20 <_free_r>
 800b6b8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b6ba:	b111      	cbz	r1, 800b6c2 <_reclaim_reent+0x5e>
 800b6bc:	4620      	mov	r0, r4
 800b6be:	f000 faaf 	bl	800bc20 <_free_r>
 800b6c2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b6c4:	b111      	cbz	r1, 800b6cc <_reclaim_reent+0x68>
 800b6c6:	4620      	mov	r0, r4
 800b6c8:	f000 faaa 	bl	800bc20 <_free_r>
 800b6cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b6ce:	b111      	cbz	r1, 800b6d6 <_reclaim_reent+0x72>
 800b6d0:	4620      	mov	r0, r4
 800b6d2:	f000 faa5 	bl	800bc20 <_free_r>
 800b6d6:	69a3      	ldr	r3, [r4, #24]
 800b6d8:	b1e3      	cbz	r3, 800b714 <_reclaim_reent+0xb0>
 800b6da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b6dc:	4620      	mov	r0, r4
 800b6de:	4798      	blx	r3
 800b6e0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b6e2:	b1b9      	cbz	r1, 800b714 <_reclaim_reent+0xb0>
 800b6e4:	4620      	mov	r0, r4
 800b6e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b6ea:	f7ff bfad 	b.w	800b648 <cleanup_glue>
 800b6ee:	5949      	ldr	r1, [r1, r5]
 800b6f0:	b941      	cbnz	r1, 800b704 <_reclaim_reent+0xa0>
 800b6f2:	3504      	adds	r5, #4
 800b6f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b6f6:	2d80      	cmp	r5, #128	; 0x80
 800b6f8:	68d9      	ldr	r1, [r3, #12]
 800b6fa:	d1f8      	bne.n	800b6ee <_reclaim_reent+0x8a>
 800b6fc:	4620      	mov	r0, r4
 800b6fe:	f000 fa8f 	bl	800bc20 <_free_r>
 800b702:	e7ba      	b.n	800b67a <_reclaim_reent+0x16>
 800b704:	680e      	ldr	r6, [r1, #0]
 800b706:	4620      	mov	r0, r4
 800b708:	f000 fa8a 	bl	800bc20 <_free_r>
 800b70c:	4631      	mov	r1, r6
 800b70e:	e7ef      	b.n	800b6f0 <_reclaim_reent+0x8c>
 800b710:	2500      	movs	r5, #0
 800b712:	e7ef      	b.n	800b6f4 <_reclaim_reent+0x90>
 800b714:	bd70      	pop	{r4, r5, r6, pc}
 800b716:	bf00      	nop
 800b718:	20000118 	.word	0x20000118

0800b71c <_sbrk_r>:
 800b71c:	b538      	push	{r3, r4, r5, lr}
 800b71e:	4d06      	ldr	r5, [pc, #24]	; (800b738 <_sbrk_r+0x1c>)
 800b720:	2300      	movs	r3, #0
 800b722:	4604      	mov	r4, r0
 800b724:	4608      	mov	r0, r1
 800b726:	602b      	str	r3, [r5, #0]
 800b728:	f7f5 fc34 	bl	8000f94 <_sbrk>
 800b72c:	1c43      	adds	r3, r0, #1
 800b72e:	d102      	bne.n	800b736 <_sbrk_r+0x1a>
 800b730:	682b      	ldr	r3, [r5, #0]
 800b732:	b103      	cbz	r3, 800b736 <_sbrk_r+0x1a>
 800b734:	6023      	str	r3, [r4, #0]
 800b736:	bd38      	pop	{r3, r4, r5, pc}
 800b738:	200051e8 	.word	0x200051e8

0800b73c <__sread>:
 800b73c:	b510      	push	{r4, lr}
 800b73e:	460c      	mov	r4, r1
 800b740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b744:	f000 fabc 	bl	800bcc0 <_read_r>
 800b748:	2800      	cmp	r0, #0
 800b74a:	bfab      	itete	ge
 800b74c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b74e:	89a3      	ldrhlt	r3, [r4, #12]
 800b750:	181b      	addge	r3, r3, r0
 800b752:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b756:	bfac      	ite	ge
 800b758:	6563      	strge	r3, [r4, #84]	; 0x54
 800b75a:	81a3      	strhlt	r3, [r4, #12]
 800b75c:	bd10      	pop	{r4, pc}

0800b75e <__swrite>:
 800b75e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b762:	461f      	mov	r7, r3
 800b764:	898b      	ldrh	r3, [r1, #12]
 800b766:	05db      	lsls	r3, r3, #23
 800b768:	4605      	mov	r5, r0
 800b76a:	460c      	mov	r4, r1
 800b76c:	4616      	mov	r6, r2
 800b76e:	d505      	bpl.n	800b77c <__swrite+0x1e>
 800b770:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b774:	2302      	movs	r3, #2
 800b776:	2200      	movs	r2, #0
 800b778:	f000 f9d0 	bl	800bb1c <_lseek_r>
 800b77c:	89a3      	ldrh	r3, [r4, #12]
 800b77e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b782:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b786:	81a3      	strh	r3, [r4, #12]
 800b788:	4632      	mov	r2, r6
 800b78a:	463b      	mov	r3, r7
 800b78c:	4628      	mov	r0, r5
 800b78e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b792:	f000 b869 	b.w	800b868 <_write_r>

0800b796 <__sseek>:
 800b796:	b510      	push	{r4, lr}
 800b798:	460c      	mov	r4, r1
 800b79a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b79e:	f000 f9bd 	bl	800bb1c <_lseek_r>
 800b7a2:	1c43      	adds	r3, r0, #1
 800b7a4:	89a3      	ldrh	r3, [r4, #12]
 800b7a6:	bf15      	itete	ne
 800b7a8:	6560      	strne	r0, [r4, #84]	; 0x54
 800b7aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b7ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b7b2:	81a3      	strheq	r3, [r4, #12]
 800b7b4:	bf18      	it	ne
 800b7b6:	81a3      	strhne	r3, [r4, #12]
 800b7b8:	bd10      	pop	{r4, pc}

0800b7ba <__sclose>:
 800b7ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7be:	f000 b8db 	b.w	800b978 <_close_r>
	...

0800b7c4 <__swbuf_r>:
 800b7c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7c6:	460e      	mov	r6, r1
 800b7c8:	4614      	mov	r4, r2
 800b7ca:	4605      	mov	r5, r0
 800b7cc:	b118      	cbz	r0, 800b7d6 <__swbuf_r+0x12>
 800b7ce:	6983      	ldr	r3, [r0, #24]
 800b7d0:	b90b      	cbnz	r3, 800b7d6 <__swbuf_r+0x12>
 800b7d2:	f7ff fb03 	bl	800addc <__sinit>
 800b7d6:	4b21      	ldr	r3, [pc, #132]	; (800b85c <__swbuf_r+0x98>)
 800b7d8:	429c      	cmp	r4, r3
 800b7da:	d12b      	bne.n	800b834 <__swbuf_r+0x70>
 800b7dc:	686c      	ldr	r4, [r5, #4]
 800b7de:	69a3      	ldr	r3, [r4, #24]
 800b7e0:	60a3      	str	r3, [r4, #8]
 800b7e2:	89a3      	ldrh	r3, [r4, #12]
 800b7e4:	071a      	lsls	r2, r3, #28
 800b7e6:	d52f      	bpl.n	800b848 <__swbuf_r+0x84>
 800b7e8:	6923      	ldr	r3, [r4, #16]
 800b7ea:	b36b      	cbz	r3, 800b848 <__swbuf_r+0x84>
 800b7ec:	6923      	ldr	r3, [r4, #16]
 800b7ee:	6820      	ldr	r0, [r4, #0]
 800b7f0:	1ac0      	subs	r0, r0, r3
 800b7f2:	6963      	ldr	r3, [r4, #20]
 800b7f4:	b2f6      	uxtb	r6, r6
 800b7f6:	4283      	cmp	r3, r0
 800b7f8:	4637      	mov	r7, r6
 800b7fa:	dc04      	bgt.n	800b806 <__swbuf_r+0x42>
 800b7fc:	4621      	mov	r1, r4
 800b7fe:	4628      	mov	r0, r5
 800b800:	f000 f950 	bl	800baa4 <_fflush_r>
 800b804:	bb30      	cbnz	r0, 800b854 <__swbuf_r+0x90>
 800b806:	68a3      	ldr	r3, [r4, #8]
 800b808:	3b01      	subs	r3, #1
 800b80a:	60a3      	str	r3, [r4, #8]
 800b80c:	6823      	ldr	r3, [r4, #0]
 800b80e:	1c5a      	adds	r2, r3, #1
 800b810:	6022      	str	r2, [r4, #0]
 800b812:	701e      	strb	r6, [r3, #0]
 800b814:	6963      	ldr	r3, [r4, #20]
 800b816:	3001      	adds	r0, #1
 800b818:	4283      	cmp	r3, r0
 800b81a:	d004      	beq.n	800b826 <__swbuf_r+0x62>
 800b81c:	89a3      	ldrh	r3, [r4, #12]
 800b81e:	07db      	lsls	r3, r3, #31
 800b820:	d506      	bpl.n	800b830 <__swbuf_r+0x6c>
 800b822:	2e0a      	cmp	r6, #10
 800b824:	d104      	bne.n	800b830 <__swbuf_r+0x6c>
 800b826:	4621      	mov	r1, r4
 800b828:	4628      	mov	r0, r5
 800b82a:	f000 f93b 	bl	800baa4 <_fflush_r>
 800b82e:	b988      	cbnz	r0, 800b854 <__swbuf_r+0x90>
 800b830:	4638      	mov	r0, r7
 800b832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b834:	4b0a      	ldr	r3, [pc, #40]	; (800b860 <__swbuf_r+0x9c>)
 800b836:	429c      	cmp	r4, r3
 800b838:	d101      	bne.n	800b83e <__swbuf_r+0x7a>
 800b83a:	68ac      	ldr	r4, [r5, #8]
 800b83c:	e7cf      	b.n	800b7de <__swbuf_r+0x1a>
 800b83e:	4b09      	ldr	r3, [pc, #36]	; (800b864 <__swbuf_r+0xa0>)
 800b840:	429c      	cmp	r4, r3
 800b842:	bf08      	it	eq
 800b844:	68ec      	ldreq	r4, [r5, #12]
 800b846:	e7ca      	b.n	800b7de <__swbuf_r+0x1a>
 800b848:	4621      	mov	r1, r4
 800b84a:	4628      	mov	r0, r5
 800b84c:	f000 f81e 	bl	800b88c <__swsetup_r>
 800b850:	2800      	cmp	r0, #0
 800b852:	d0cb      	beq.n	800b7ec <__swbuf_r+0x28>
 800b854:	f04f 37ff 	mov.w	r7, #4294967295
 800b858:	e7ea      	b.n	800b830 <__swbuf_r+0x6c>
 800b85a:	bf00      	nop
 800b85c:	0800c24c 	.word	0x0800c24c
 800b860:	0800c26c 	.word	0x0800c26c
 800b864:	0800c22c 	.word	0x0800c22c

0800b868 <_write_r>:
 800b868:	b538      	push	{r3, r4, r5, lr}
 800b86a:	4d07      	ldr	r5, [pc, #28]	; (800b888 <_write_r+0x20>)
 800b86c:	4604      	mov	r4, r0
 800b86e:	4608      	mov	r0, r1
 800b870:	4611      	mov	r1, r2
 800b872:	2200      	movs	r2, #0
 800b874:	602a      	str	r2, [r5, #0]
 800b876:	461a      	mov	r2, r3
 800b878:	f7f5 fb3b 	bl	8000ef2 <_write>
 800b87c:	1c43      	adds	r3, r0, #1
 800b87e:	d102      	bne.n	800b886 <_write_r+0x1e>
 800b880:	682b      	ldr	r3, [r5, #0]
 800b882:	b103      	cbz	r3, 800b886 <_write_r+0x1e>
 800b884:	6023      	str	r3, [r4, #0]
 800b886:	bd38      	pop	{r3, r4, r5, pc}
 800b888:	200051e8 	.word	0x200051e8

0800b88c <__swsetup_r>:
 800b88c:	4b32      	ldr	r3, [pc, #200]	; (800b958 <__swsetup_r+0xcc>)
 800b88e:	b570      	push	{r4, r5, r6, lr}
 800b890:	681d      	ldr	r5, [r3, #0]
 800b892:	4606      	mov	r6, r0
 800b894:	460c      	mov	r4, r1
 800b896:	b125      	cbz	r5, 800b8a2 <__swsetup_r+0x16>
 800b898:	69ab      	ldr	r3, [r5, #24]
 800b89a:	b913      	cbnz	r3, 800b8a2 <__swsetup_r+0x16>
 800b89c:	4628      	mov	r0, r5
 800b89e:	f7ff fa9d 	bl	800addc <__sinit>
 800b8a2:	4b2e      	ldr	r3, [pc, #184]	; (800b95c <__swsetup_r+0xd0>)
 800b8a4:	429c      	cmp	r4, r3
 800b8a6:	d10f      	bne.n	800b8c8 <__swsetup_r+0x3c>
 800b8a8:	686c      	ldr	r4, [r5, #4]
 800b8aa:	89a3      	ldrh	r3, [r4, #12]
 800b8ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b8b0:	0719      	lsls	r1, r3, #28
 800b8b2:	d42c      	bmi.n	800b90e <__swsetup_r+0x82>
 800b8b4:	06dd      	lsls	r5, r3, #27
 800b8b6:	d411      	bmi.n	800b8dc <__swsetup_r+0x50>
 800b8b8:	2309      	movs	r3, #9
 800b8ba:	6033      	str	r3, [r6, #0]
 800b8bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b8c0:	81a3      	strh	r3, [r4, #12]
 800b8c2:	f04f 30ff 	mov.w	r0, #4294967295
 800b8c6:	e03e      	b.n	800b946 <__swsetup_r+0xba>
 800b8c8:	4b25      	ldr	r3, [pc, #148]	; (800b960 <__swsetup_r+0xd4>)
 800b8ca:	429c      	cmp	r4, r3
 800b8cc:	d101      	bne.n	800b8d2 <__swsetup_r+0x46>
 800b8ce:	68ac      	ldr	r4, [r5, #8]
 800b8d0:	e7eb      	b.n	800b8aa <__swsetup_r+0x1e>
 800b8d2:	4b24      	ldr	r3, [pc, #144]	; (800b964 <__swsetup_r+0xd8>)
 800b8d4:	429c      	cmp	r4, r3
 800b8d6:	bf08      	it	eq
 800b8d8:	68ec      	ldreq	r4, [r5, #12]
 800b8da:	e7e6      	b.n	800b8aa <__swsetup_r+0x1e>
 800b8dc:	0758      	lsls	r0, r3, #29
 800b8de:	d512      	bpl.n	800b906 <__swsetup_r+0x7a>
 800b8e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b8e2:	b141      	cbz	r1, 800b8f6 <__swsetup_r+0x6a>
 800b8e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b8e8:	4299      	cmp	r1, r3
 800b8ea:	d002      	beq.n	800b8f2 <__swsetup_r+0x66>
 800b8ec:	4630      	mov	r0, r6
 800b8ee:	f000 f997 	bl	800bc20 <_free_r>
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	6363      	str	r3, [r4, #52]	; 0x34
 800b8f6:	89a3      	ldrh	r3, [r4, #12]
 800b8f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b8fc:	81a3      	strh	r3, [r4, #12]
 800b8fe:	2300      	movs	r3, #0
 800b900:	6063      	str	r3, [r4, #4]
 800b902:	6923      	ldr	r3, [r4, #16]
 800b904:	6023      	str	r3, [r4, #0]
 800b906:	89a3      	ldrh	r3, [r4, #12]
 800b908:	f043 0308 	orr.w	r3, r3, #8
 800b90c:	81a3      	strh	r3, [r4, #12]
 800b90e:	6923      	ldr	r3, [r4, #16]
 800b910:	b94b      	cbnz	r3, 800b926 <__swsetup_r+0x9a>
 800b912:	89a3      	ldrh	r3, [r4, #12]
 800b914:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b918:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b91c:	d003      	beq.n	800b926 <__swsetup_r+0x9a>
 800b91e:	4621      	mov	r1, r4
 800b920:	4630      	mov	r0, r6
 800b922:	f000 f931 	bl	800bb88 <__smakebuf_r>
 800b926:	89a0      	ldrh	r0, [r4, #12]
 800b928:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b92c:	f010 0301 	ands.w	r3, r0, #1
 800b930:	d00a      	beq.n	800b948 <__swsetup_r+0xbc>
 800b932:	2300      	movs	r3, #0
 800b934:	60a3      	str	r3, [r4, #8]
 800b936:	6963      	ldr	r3, [r4, #20]
 800b938:	425b      	negs	r3, r3
 800b93a:	61a3      	str	r3, [r4, #24]
 800b93c:	6923      	ldr	r3, [r4, #16]
 800b93e:	b943      	cbnz	r3, 800b952 <__swsetup_r+0xc6>
 800b940:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b944:	d1ba      	bne.n	800b8bc <__swsetup_r+0x30>
 800b946:	bd70      	pop	{r4, r5, r6, pc}
 800b948:	0781      	lsls	r1, r0, #30
 800b94a:	bf58      	it	pl
 800b94c:	6963      	ldrpl	r3, [r4, #20]
 800b94e:	60a3      	str	r3, [r4, #8]
 800b950:	e7f4      	b.n	800b93c <__swsetup_r+0xb0>
 800b952:	2000      	movs	r0, #0
 800b954:	e7f7      	b.n	800b946 <__swsetup_r+0xba>
 800b956:	bf00      	nop
 800b958:	20000118 	.word	0x20000118
 800b95c:	0800c24c 	.word	0x0800c24c
 800b960:	0800c26c 	.word	0x0800c26c
 800b964:	0800c22c 	.word	0x0800c22c

0800b968 <abort>:
 800b968:	b508      	push	{r3, lr}
 800b96a:	2006      	movs	r0, #6
 800b96c:	f000 f9e2 	bl	800bd34 <raise>
 800b970:	2001      	movs	r0, #1
 800b972:	f7f5 fa97 	bl	8000ea4 <_exit>
	...

0800b978 <_close_r>:
 800b978:	b538      	push	{r3, r4, r5, lr}
 800b97a:	4d06      	ldr	r5, [pc, #24]	; (800b994 <_close_r+0x1c>)
 800b97c:	2300      	movs	r3, #0
 800b97e:	4604      	mov	r4, r0
 800b980:	4608      	mov	r0, r1
 800b982:	602b      	str	r3, [r5, #0]
 800b984:	f7f5 fad1 	bl	8000f2a <_close>
 800b988:	1c43      	adds	r3, r0, #1
 800b98a:	d102      	bne.n	800b992 <_close_r+0x1a>
 800b98c:	682b      	ldr	r3, [r5, #0]
 800b98e:	b103      	cbz	r3, 800b992 <_close_r+0x1a>
 800b990:	6023      	str	r3, [r4, #0]
 800b992:	bd38      	pop	{r3, r4, r5, pc}
 800b994:	200051e8 	.word	0x200051e8

0800b998 <__sflush_r>:
 800b998:	898a      	ldrh	r2, [r1, #12]
 800b99a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b99e:	4605      	mov	r5, r0
 800b9a0:	0710      	lsls	r0, r2, #28
 800b9a2:	460c      	mov	r4, r1
 800b9a4:	d458      	bmi.n	800ba58 <__sflush_r+0xc0>
 800b9a6:	684b      	ldr	r3, [r1, #4]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	dc05      	bgt.n	800b9b8 <__sflush_r+0x20>
 800b9ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	dc02      	bgt.n	800b9b8 <__sflush_r+0x20>
 800b9b2:	2000      	movs	r0, #0
 800b9b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b9ba:	2e00      	cmp	r6, #0
 800b9bc:	d0f9      	beq.n	800b9b2 <__sflush_r+0x1a>
 800b9be:	2300      	movs	r3, #0
 800b9c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b9c4:	682f      	ldr	r7, [r5, #0]
 800b9c6:	602b      	str	r3, [r5, #0]
 800b9c8:	d032      	beq.n	800ba30 <__sflush_r+0x98>
 800b9ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b9cc:	89a3      	ldrh	r3, [r4, #12]
 800b9ce:	075a      	lsls	r2, r3, #29
 800b9d0:	d505      	bpl.n	800b9de <__sflush_r+0x46>
 800b9d2:	6863      	ldr	r3, [r4, #4]
 800b9d4:	1ac0      	subs	r0, r0, r3
 800b9d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b9d8:	b10b      	cbz	r3, 800b9de <__sflush_r+0x46>
 800b9da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b9dc:	1ac0      	subs	r0, r0, r3
 800b9de:	2300      	movs	r3, #0
 800b9e0:	4602      	mov	r2, r0
 800b9e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b9e4:	6a21      	ldr	r1, [r4, #32]
 800b9e6:	4628      	mov	r0, r5
 800b9e8:	47b0      	blx	r6
 800b9ea:	1c43      	adds	r3, r0, #1
 800b9ec:	89a3      	ldrh	r3, [r4, #12]
 800b9ee:	d106      	bne.n	800b9fe <__sflush_r+0x66>
 800b9f0:	6829      	ldr	r1, [r5, #0]
 800b9f2:	291d      	cmp	r1, #29
 800b9f4:	d82c      	bhi.n	800ba50 <__sflush_r+0xb8>
 800b9f6:	4a2a      	ldr	r2, [pc, #168]	; (800baa0 <__sflush_r+0x108>)
 800b9f8:	40ca      	lsrs	r2, r1
 800b9fa:	07d6      	lsls	r6, r2, #31
 800b9fc:	d528      	bpl.n	800ba50 <__sflush_r+0xb8>
 800b9fe:	2200      	movs	r2, #0
 800ba00:	6062      	str	r2, [r4, #4]
 800ba02:	04d9      	lsls	r1, r3, #19
 800ba04:	6922      	ldr	r2, [r4, #16]
 800ba06:	6022      	str	r2, [r4, #0]
 800ba08:	d504      	bpl.n	800ba14 <__sflush_r+0x7c>
 800ba0a:	1c42      	adds	r2, r0, #1
 800ba0c:	d101      	bne.n	800ba12 <__sflush_r+0x7a>
 800ba0e:	682b      	ldr	r3, [r5, #0]
 800ba10:	b903      	cbnz	r3, 800ba14 <__sflush_r+0x7c>
 800ba12:	6560      	str	r0, [r4, #84]	; 0x54
 800ba14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ba16:	602f      	str	r7, [r5, #0]
 800ba18:	2900      	cmp	r1, #0
 800ba1a:	d0ca      	beq.n	800b9b2 <__sflush_r+0x1a>
 800ba1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ba20:	4299      	cmp	r1, r3
 800ba22:	d002      	beq.n	800ba2a <__sflush_r+0x92>
 800ba24:	4628      	mov	r0, r5
 800ba26:	f000 f8fb 	bl	800bc20 <_free_r>
 800ba2a:	2000      	movs	r0, #0
 800ba2c:	6360      	str	r0, [r4, #52]	; 0x34
 800ba2e:	e7c1      	b.n	800b9b4 <__sflush_r+0x1c>
 800ba30:	6a21      	ldr	r1, [r4, #32]
 800ba32:	2301      	movs	r3, #1
 800ba34:	4628      	mov	r0, r5
 800ba36:	47b0      	blx	r6
 800ba38:	1c41      	adds	r1, r0, #1
 800ba3a:	d1c7      	bne.n	800b9cc <__sflush_r+0x34>
 800ba3c:	682b      	ldr	r3, [r5, #0]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d0c4      	beq.n	800b9cc <__sflush_r+0x34>
 800ba42:	2b1d      	cmp	r3, #29
 800ba44:	d001      	beq.n	800ba4a <__sflush_r+0xb2>
 800ba46:	2b16      	cmp	r3, #22
 800ba48:	d101      	bne.n	800ba4e <__sflush_r+0xb6>
 800ba4a:	602f      	str	r7, [r5, #0]
 800ba4c:	e7b1      	b.n	800b9b2 <__sflush_r+0x1a>
 800ba4e:	89a3      	ldrh	r3, [r4, #12]
 800ba50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba54:	81a3      	strh	r3, [r4, #12]
 800ba56:	e7ad      	b.n	800b9b4 <__sflush_r+0x1c>
 800ba58:	690f      	ldr	r7, [r1, #16]
 800ba5a:	2f00      	cmp	r7, #0
 800ba5c:	d0a9      	beq.n	800b9b2 <__sflush_r+0x1a>
 800ba5e:	0793      	lsls	r3, r2, #30
 800ba60:	680e      	ldr	r6, [r1, #0]
 800ba62:	bf08      	it	eq
 800ba64:	694b      	ldreq	r3, [r1, #20]
 800ba66:	600f      	str	r7, [r1, #0]
 800ba68:	bf18      	it	ne
 800ba6a:	2300      	movne	r3, #0
 800ba6c:	eba6 0807 	sub.w	r8, r6, r7
 800ba70:	608b      	str	r3, [r1, #8]
 800ba72:	f1b8 0f00 	cmp.w	r8, #0
 800ba76:	dd9c      	ble.n	800b9b2 <__sflush_r+0x1a>
 800ba78:	6a21      	ldr	r1, [r4, #32]
 800ba7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ba7c:	4643      	mov	r3, r8
 800ba7e:	463a      	mov	r2, r7
 800ba80:	4628      	mov	r0, r5
 800ba82:	47b0      	blx	r6
 800ba84:	2800      	cmp	r0, #0
 800ba86:	dc06      	bgt.n	800ba96 <__sflush_r+0xfe>
 800ba88:	89a3      	ldrh	r3, [r4, #12]
 800ba8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba8e:	81a3      	strh	r3, [r4, #12]
 800ba90:	f04f 30ff 	mov.w	r0, #4294967295
 800ba94:	e78e      	b.n	800b9b4 <__sflush_r+0x1c>
 800ba96:	4407      	add	r7, r0
 800ba98:	eba8 0800 	sub.w	r8, r8, r0
 800ba9c:	e7e9      	b.n	800ba72 <__sflush_r+0xda>
 800ba9e:	bf00      	nop
 800baa0:	20400001 	.word	0x20400001

0800baa4 <_fflush_r>:
 800baa4:	b538      	push	{r3, r4, r5, lr}
 800baa6:	690b      	ldr	r3, [r1, #16]
 800baa8:	4605      	mov	r5, r0
 800baaa:	460c      	mov	r4, r1
 800baac:	b913      	cbnz	r3, 800bab4 <_fflush_r+0x10>
 800baae:	2500      	movs	r5, #0
 800bab0:	4628      	mov	r0, r5
 800bab2:	bd38      	pop	{r3, r4, r5, pc}
 800bab4:	b118      	cbz	r0, 800babe <_fflush_r+0x1a>
 800bab6:	6983      	ldr	r3, [r0, #24]
 800bab8:	b90b      	cbnz	r3, 800babe <_fflush_r+0x1a>
 800baba:	f7ff f98f 	bl	800addc <__sinit>
 800babe:	4b14      	ldr	r3, [pc, #80]	; (800bb10 <_fflush_r+0x6c>)
 800bac0:	429c      	cmp	r4, r3
 800bac2:	d11b      	bne.n	800bafc <_fflush_r+0x58>
 800bac4:	686c      	ldr	r4, [r5, #4]
 800bac6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d0ef      	beq.n	800baae <_fflush_r+0xa>
 800bace:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bad0:	07d0      	lsls	r0, r2, #31
 800bad2:	d404      	bmi.n	800bade <_fflush_r+0x3a>
 800bad4:	0599      	lsls	r1, r3, #22
 800bad6:	d402      	bmi.n	800bade <_fflush_r+0x3a>
 800bad8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bada:	f7ff fa54 	bl	800af86 <__retarget_lock_acquire_recursive>
 800bade:	4628      	mov	r0, r5
 800bae0:	4621      	mov	r1, r4
 800bae2:	f7ff ff59 	bl	800b998 <__sflush_r>
 800bae6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bae8:	07da      	lsls	r2, r3, #31
 800baea:	4605      	mov	r5, r0
 800baec:	d4e0      	bmi.n	800bab0 <_fflush_r+0xc>
 800baee:	89a3      	ldrh	r3, [r4, #12]
 800baf0:	059b      	lsls	r3, r3, #22
 800baf2:	d4dd      	bmi.n	800bab0 <_fflush_r+0xc>
 800baf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800baf6:	f7ff fa47 	bl	800af88 <__retarget_lock_release_recursive>
 800bafa:	e7d9      	b.n	800bab0 <_fflush_r+0xc>
 800bafc:	4b05      	ldr	r3, [pc, #20]	; (800bb14 <_fflush_r+0x70>)
 800bafe:	429c      	cmp	r4, r3
 800bb00:	d101      	bne.n	800bb06 <_fflush_r+0x62>
 800bb02:	68ac      	ldr	r4, [r5, #8]
 800bb04:	e7df      	b.n	800bac6 <_fflush_r+0x22>
 800bb06:	4b04      	ldr	r3, [pc, #16]	; (800bb18 <_fflush_r+0x74>)
 800bb08:	429c      	cmp	r4, r3
 800bb0a:	bf08      	it	eq
 800bb0c:	68ec      	ldreq	r4, [r5, #12]
 800bb0e:	e7da      	b.n	800bac6 <_fflush_r+0x22>
 800bb10:	0800c24c 	.word	0x0800c24c
 800bb14:	0800c26c 	.word	0x0800c26c
 800bb18:	0800c22c 	.word	0x0800c22c

0800bb1c <_lseek_r>:
 800bb1c:	b538      	push	{r3, r4, r5, lr}
 800bb1e:	4d07      	ldr	r5, [pc, #28]	; (800bb3c <_lseek_r+0x20>)
 800bb20:	4604      	mov	r4, r0
 800bb22:	4608      	mov	r0, r1
 800bb24:	4611      	mov	r1, r2
 800bb26:	2200      	movs	r2, #0
 800bb28:	602a      	str	r2, [r5, #0]
 800bb2a:	461a      	mov	r2, r3
 800bb2c:	f7f5 fa24 	bl	8000f78 <_lseek>
 800bb30:	1c43      	adds	r3, r0, #1
 800bb32:	d102      	bne.n	800bb3a <_lseek_r+0x1e>
 800bb34:	682b      	ldr	r3, [r5, #0]
 800bb36:	b103      	cbz	r3, 800bb3a <_lseek_r+0x1e>
 800bb38:	6023      	str	r3, [r4, #0]
 800bb3a:	bd38      	pop	{r3, r4, r5, pc}
 800bb3c:	200051e8 	.word	0x200051e8

0800bb40 <__swhatbuf_r>:
 800bb40:	b570      	push	{r4, r5, r6, lr}
 800bb42:	460e      	mov	r6, r1
 800bb44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb48:	2900      	cmp	r1, #0
 800bb4a:	b096      	sub	sp, #88	; 0x58
 800bb4c:	4614      	mov	r4, r2
 800bb4e:	461d      	mov	r5, r3
 800bb50:	da07      	bge.n	800bb62 <__swhatbuf_r+0x22>
 800bb52:	2300      	movs	r3, #0
 800bb54:	602b      	str	r3, [r5, #0]
 800bb56:	89b3      	ldrh	r3, [r6, #12]
 800bb58:	061a      	lsls	r2, r3, #24
 800bb5a:	d410      	bmi.n	800bb7e <__swhatbuf_r+0x3e>
 800bb5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb60:	e00e      	b.n	800bb80 <__swhatbuf_r+0x40>
 800bb62:	466a      	mov	r2, sp
 800bb64:	f000 f902 	bl	800bd6c <_fstat_r>
 800bb68:	2800      	cmp	r0, #0
 800bb6a:	dbf2      	blt.n	800bb52 <__swhatbuf_r+0x12>
 800bb6c:	9a01      	ldr	r2, [sp, #4]
 800bb6e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bb72:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bb76:	425a      	negs	r2, r3
 800bb78:	415a      	adcs	r2, r3
 800bb7a:	602a      	str	r2, [r5, #0]
 800bb7c:	e7ee      	b.n	800bb5c <__swhatbuf_r+0x1c>
 800bb7e:	2340      	movs	r3, #64	; 0x40
 800bb80:	2000      	movs	r0, #0
 800bb82:	6023      	str	r3, [r4, #0]
 800bb84:	b016      	add	sp, #88	; 0x58
 800bb86:	bd70      	pop	{r4, r5, r6, pc}

0800bb88 <__smakebuf_r>:
 800bb88:	898b      	ldrh	r3, [r1, #12]
 800bb8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bb8c:	079d      	lsls	r5, r3, #30
 800bb8e:	4606      	mov	r6, r0
 800bb90:	460c      	mov	r4, r1
 800bb92:	d507      	bpl.n	800bba4 <__smakebuf_r+0x1c>
 800bb94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bb98:	6023      	str	r3, [r4, #0]
 800bb9a:	6123      	str	r3, [r4, #16]
 800bb9c:	2301      	movs	r3, #1
 800bb9e:	6163      	str	r3, [r4, #20]
 800bba0:	b002      	add	sp, #8
 800bba2:	bd70      	pop	{r4, r5, r6, pc}
 800bba4:	ab01      	add	r3, sp, #4
 800bba6:	466a      	mov	r2, sp
 800bba8:	f7ff ffca 	bl	800bb40 <__swhatbuf_r>
 800bbac:	9900      	ldr	r1, [sp, #0]
 800bbae:	4605      	mov	r5, r0
 800bbb0:	4630      	mov	r0, r6
 800bbb2:	f7ff fa01 	bl	800afb8 <_malloc_r>
 800bbb6:	b948      	cbnz	r0, 800bbcc <__smakebuf_r+0x44>
 800bbb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbbc:	059a      	lsls	r2, r3, #22
 800bbbe:	d4ef      	bmi.n	800bba0 <__smakebuf_r+0x18>
 800bbc0:	f023 0303 	bic.w	r3, r3, #3
 800bbc4:	f043 0302 	orr.w	r3, r3, #2
 800bbc8:	81a3      	strh	r3, [r4, #12]
 800bbca:	e7e3      	b.n	800bb94 <__smakebuf_r+0xc>
 800bbcc:	4b0d      	ldr	r3, [pc, #52]	; (800bc04 <__smakebuf_r+0x7c>)
 800bbce:	62b3      	str	r3, [r6, #40]	; 0x28
 800bbd0:	89a3      	ldrh	r3, [r4, #12]
 800bbd2:	6020      	str	r0, [r4, #0]
 800bbd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bbd8:	81a3      	strh	r3, [r4, #12]
 800bbda:	9b00      	ldr	r3, [sp, #0]
 800bbdc:	6163      	str	r3, [r4, #20]
 800bbde:	9b01      	ldr	r3, [sp, #4]
 800bbe0:	6120      	str	r0, [r4, #16]
 800bbe2:	b15b      	cbz	r3, 800bbfc <__smakebuf_r+0x74>
 800bbe4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bbe8:	4630      	mov	r0, r6
 800bbea:	f000 f8d1 	bl	800bd90 <_isatty_r>
 800bbee:	b128      	cbz	r0, 800bbfc <__smakebuf_r+0x74>
 800bbf0:	89a3      	ldrh	r3, [r4, #12]
 800bbf2:	f023 0303 	bic.w	r3, r3, #3
 800bbf6:	f043 0301 	orr.w	r3, r3, #1
 800bbfa:	81a3      	strh	r3, [r4, #12]
 800bbfc:	89a0      	ldrh	r0, [r4, #12]
 800bbfe:	4305      	orrs	r5, r0
 800bc00:	81a5      	strh	r5, [r4, #12]
 800bc02:	e7cd      	b.n	800bba0 <__smakebuf_r+0x18>
 800bc04:	0800ad75 	.word	0x0800ad75

0800bc08 <__malloc_lock>:
 800bc08:	4801      	ldr	r0, [pc, #4]	; (800bc10 <__malloc_lock+0x8>)
 800bc0a:	f7ff b9bc 	b.w	800af86 <__retarget_lock_acquire_recursive>
 800bc0e:	bf00      	nop
 800bc10:	200051e0 	.word	0x200051e0

0800bc14 <__malloc_unlock>:
 800bc14:	4801      	ldr	r0, [pc, #4]	; (800bc1c <__malloc_unlock+0x8>)
 800bc16:	f7ff b9b7 	b.w	800af88 <__retarget_lock_release_recursive>
 800bc1a:	bf00      	nop
 800bc1c:	200051e0 	.word	0x200051e0

0800bc20 <_free_r>:
 800bc20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bc22:	2900      	cmp	r1, #0
 800bc24:	d048      	beq.n	800bcb8 <_free_r+0x98>
 800bc26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc2a:	9001      	str	r0, [sp, #4]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	f1a1 0404 	sub.w	r4, r1, #4
 800bc32:	bfb8      	it	lt
 800bc34:	18e4      	addlt	r4, r4, r3
 800bc36:	f7ff ffe7 	bl	800bc08 <__malloc_lock>
 800bc3a:	4a20      	ldr	r2, [pc, #128]	; (800bcbc <_free_r+0x9c>)
 800bc3c:	9801      	ldr	r0, [sp, #4]
 800bc3e:	6813      	ldr	r3, [r2, #0]
 800bc40:	4615      	mov	r5, r2
 800bc42:	b933      	cbnz	r3, 800bc52 <_free_r+0x32>
 800bc44:	6063      	str	r3, [r4, #4]
 800bc46:	6014      	str	r4, [r2, #0]
 800bc48:	b003      	add	sp, #12
 800bc4a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bc4e:	f7ff bfe1 	b.w	800bc14 <__malloc_unlock>
 800bc52:	42a3      	cmp	r3, r4
 800bc54:	d90b      	bls.n	800bc6e <_free_r+0x4e>
 800bc56:	6821      	ldr	r1, [r4, #0]
 800bc58:	1862      	adds	r2, r4, r1
 800bc5a:	4293      	cmp	r3, r2
 800bc5c:	bf04      	itt	eq
 800bc5e:	681a      	ldreq	r2, [r3, #0]
 800bc60:	685b      	ldreq	r3, [r3, #4]
 800bc62:	6063      	str	r3, [r4, #4]
 800bc64:	bf04      	itt	eq
 800bc66:	1852      	addeq	r2, r2, r1
 800bc68:	6022      	streq	r2, [r4, #0]
 800bc6a:	602c      	str	r4, [r5, #0]
 800bc6c:	e7ec      	b.n	800bc48 <_free_r+0x28>
 800bc6e:	461a      	mov	r2, r3
 800bc70:	685b      	ldr	r3, [r3, #4]
 800bc72:	b10b      	cbz	r3, 800bc78 <_free_r+0x58>
 800bc74:	42a3      	cmp	r3, r4
 800bc76:	d9fa      	bls.n	800bc6e <_free_r+0x4e>
 800bc78:	6811      	ldr	r1, [r2, #0]
 800bc7a:	1855      	adds	r5, r2, r1
 800bc7c:	42a5      	cmp	r5, r4
 800bc7e:	d10b      	bne.n	800bc98 <_free_r+0x78>
 800bc80:	6824      	ldr	r4, [r4, #0]
 800bc82:	4421      	add	r1, r4
 800bc84:	1854      	adds	r4, r2, r1
 800bc86:	42a3      	cmp	r3, r4
 800bc88:	6011      	str	r1, [r2, #0]
 800bc8a:	d1dd      	bne.n	800bc48 <_free_r+0x28>
 800bc8c:	681c      	ldr	r4, [r3, #0]
 800bc8e:	685b      	ldr	r3, [r3, #4]
 800bc90:	6053      	str	r3, [r2, #4]
 800bc92:	4421      	add	r1, r4
 800bc94:	6011      	str	r1, [r2, #0]
 800bc96:	e7d7      	b.n	800bc48 <_free_r+0x28>
 800bc98:	d902      	bls.n	800bca0 <_free_r+0x80>
 800bc9a:	230c      	movs	r3, #12
 800bc9c:	6003      	str	r3, [r0, #0]
 800bc9e:	e7d3      	b.n	800bc48 <_free_r+0x28>
 800bca0:	6825      	ldr	r5, [r4, #0]
 800bca2:	1961      	adds	r1, r4, r5
 800bca4:	428b      	cmp	r3, r1
 800bca6:	bf04      	itt	eq
 800bca8:	6819      	ldreq	r1, [r3, #0]
 800bcaa:	685b      	ldreq	r3, [r3, #4]
 800bcac:	6063      	str	r3, [r4, #4]
 800bcae:	bf04      	itt	eq
 800bcb0:	1949      	addeq	r1, r1, r5
 800bcb2:	6021      	streq	r1, [r4, #0]
 800bcb4:	6054      	str	r4, [r2, #4]
 800bcb6:	e7c7      	b.n	800bc48 <_free_r+0x28>
 800bcb8:	b003      	add	sp, #12
 800bcba:	bd30      	pop	{r4, r5, pc}
 800bcbc:	20004e20 	.word	0x20004e20

0800bcc0 <_read_r>:
 800bcc0:	b538      	push	{r3, r4, r5, lr}
 800bcc2:	4d07      	ldr	r5, [pc, #28]	; (800bce0 <_read_r+0x20>)
 800bcc4:	4604      	mov	r4, r0
 800bcc6:	4608      	mov	r0, r1
 800bcc8:	4611      	mov	r1, r2
 800bcca:	2200      	movs	r2, #0
 800bccc:	602a      	str	r2, [r5, #0]
 800bcce:	461a      	mov	r2, r3
 800bcd0:	f7f5 f8f2 	bl	8000eb8 <_read>
 800bcd4:	1c43      	adds	r3, r0, #1
 800bcd6:	d102      	bne.n	800bcde <_read_r+0x1e>
 800bcd8:	682b      	ldr	r3, [r5, #0]
 800bcda:	b103      	cbz	r3, 800bcde <_read_r+0x1e>
 800bcdc:	6023      	str	r3, [r4, #0]
 800bcde:	bd38      	pop	{r3, r4, r5, pc}
 800bce0:	200051e8 	.word	0x200051e8

0800bce4 <_raise_r>:
 800bce4:	291f      	cmp	r1, #31
 800bce6:	b538      	push	{r3, r4, r5, lr}
 800bce8:	4604      	mov	r4, r0
 800bcea:	460d      	mov	r5, r1
 800bcec:	d904      	bls.n	800bcf8 <_raise_r+0x14>
 800bcee:	2316      	movs	r3, #22
 800bcf0:	6003      	str	r3, [r0, #0]
 800bcf2:	f04f 30ff 	mov.w	r0, #4294967295
 800bcf6:	bd38      	pop	{r3, r4, r5, pc}
 800bcf8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bcfa:	b112      	cbz	r2, 800bd02 <_raise_r+0x1e>
 800bcfc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bd00:	b94b      	cbnz	r3, 800bd16 <_raise_r+0x32>
 800bd02:	4620      	mov	r0, r4
 800bd04:	f000 f830 	bl	800bd68 <_getpid_r>
 800bd08:	462a      	mov	r2, r5
 800bd0a:	4601      	mov	r1, r0
 800bd0c:	4620      	mov	r0, r4
 800bd0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd12:	f000 b817 	b.w	800bd44 <_kill_r>
 800bd16:	2b01      	cmp	r3, #1
 800bd18:	d00a      	beq.n	800bd30 <_raise_r+0x4c>
 800bd1a:	1c59      	adds	r1, r3, #1
 800bd1c:	d103      	bne.n	800bd26 <_raise_r+0x42>
 800bd1e:	2316      	movs	r3, #22
 800bd20:	6003      	str	r3, [r0, #0]
 800bd22:	2001      	movs	r0, #1
 800bd24:	e7e7      	b.n	800bcf6 <_raise_r+0x12>
 800bd26:	2400      	movs	r4, #0
 800bd28:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bd2c:	4628      	mov	r0, r5
 800bd2e:	4798      	blx	r3
 800bd30:	2000      	movs	r0, #0
 800bd32:	e7e0      	b.n	800bcf6 <_raise_r+0x12>

0800bd34 <raise>:
 800bd34:	4b02      	ldr	r3, [pc, #8]	; (800bd40 <raise+0xc>)
 800bd36:	4601      	mov	r1, r0
 800bd38:	6818      	ldr	r0, [r3, #0]
 800bd3a:	f7ff bfd3 	b.w	800bce4 <_raise_r>
 800bd3e:	bf00      	nop
 800bd40:	20000118 	.word	0x20000118

0800bd44 <_kill_r>:
 800bd44:	b538      	push	{r3, r4, r5, lr}
 800bd46:	4d07      	ldr	r5, [pc, #28]	; (800bd64 <_kill_r+0x20>)
 800bd48:	2300      	movs	r3, #0
 800bd4a:	4604      	mov	r4, r0
 800bd4c:	4608      	mov	r0, r1
 800bd4e:	4611      	mov	r1, r2
 800bd50:	602b      	str	r3, [r5, #0]
 800bd52:	f7f5 f897 	bl	8000e84 <_kill>
 800bd56:	1c43      	adds	r3, r0, #1
 800bd58:	d102      	bne.n	800bd60 <_kill_r+0x1c>
 800bd5a:	682b      	ldr	r3, [r5, #0]
 800bd5c:	b103      	cbz	r3, 800bd60 <_kill_r+0x1c>
 800bd5e:	6023      	str	r3, [r4, #0]
 800bd60:	bd38      	pop	{r3, r4, r5, pc}
 800bd62:	bf00      	nop
 800bd64:	200051e8 	.word	0x200051e8

0800bd68 <_getpid_r>:
 800bd68:	f7f5 b884 	b.w	8000e74 <_getpid>

0800bd6c <_fstat_r>:
 800bd6c:	b538      	push	{r3, r4, r5, lr}
 800bd6e:	4d07      	ldr	r5, [pc, #28]	; (800bd8c <_fstat_r+0x20>)
 800bd70:	2300      	movs	r3, #0
 800bd72:	4604      	mov	r4, r0
 800bd74:	4608      	mov	r0, r1
 800bd76:	4611      	mov	r1, r2
 800bd78:	602b      	str	r3, [r5, #0]
 800bd7a:	f7f5 f8e2 	bl	8000f42 <_fstat>
 800bd7e:	1c43      	adds	r3, r0, #1
 800bd80:	d102      	bne.n	800bd88 <_fstat_r+0x1c>
 800bd82:	682b      	ldr	r3, [r5, #0]
 800bd84:	b103      	cbz	r3, 800bd88 <_fstat_r+0x1c>
 800bd86:	6023      	str	r3, [r4, #0]
 800bd88:	bd38      	pop	{r3, r4, r5, pc}
 800bd8a:	bf00      	nop
 800bd8c:	200051e8 	.word	0x200051e8

0800bd90 <_isatty_r>:
 800bd90:	b538      	push	{r3, r4, r5, lr}
 800bd92:	4d06      	ldr	r5, [pc, #24]	; (800bdac <_isatty_r+0x1c>)
 800bd94:	2300      	movs	r3, #0
 800bd96:	4604      	mov	r4, r0
 800bd98:	4608      	mov	r0, r1
 800bd9a:	602b      	str	r3, [r5, #0]
 800bd9c:	f7f5 f8e1 	bl	8000f62 <_isatty>
 800bda0:	1c43      	adds	r3, r0, #1
 800bda2:	d102      	bne.n	800bdaa <_isatty_r+0x1a>
 800bda4:	682b      	ldr	r3, [r5, #0]
 800bda6:	b103      	cbz	r3, 800bdaa <_isatty_r+0x1a>
 800bda8:	6023      	str	r3, [r4, #0]
 800bdaa:	bd38      	pop	{r3, r4, r5, pc}
 800bdac:	200051e8 	.word	0x200051e8

0800bdb0 <_init>:
 800bdb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdb2:	bf00      	nop
 800bdb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdb6:	bc08      	pop	{r3}
 800bdb8:	469e      	mov	lr, r3
 800bdba:	4770      	bx	lr

0800bdbc <_fini>:
 800bdbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdbe:	bf00      	nop
 800bdc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdc2:	bc08      	pop	{r3}
 800bdc4:	469e      	mov	lr, r3
 800bdc6:	4770      	bx	lr
