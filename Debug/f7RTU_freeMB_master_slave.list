
f7RTU_freeMB_master_slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b744  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003bd0  0801b944  0801b944  0002b944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f514  0801f514  00030180  2**0
                  CONTENTS
  4 .ARM          00000008  0801f514  0801f514  0002f514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f51c  0801f51c  00030180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f51c  0801f51c  0002f51c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801f520  0801f520  0002f520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0801f524  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000db44  20000180  0801f6a4  00030180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000dcc4  0801f6a4  0003dcc4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030180  2**0
                  CONTENTS, READONLY
 12 .debug_info   00068222  00000000  00000000  000301ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000bf45  00000000  00000000  000983d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002b20  00000000  00000000  000a4318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002830  00000000  00000000  000a6e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000188af  00000000  00000000  000a9668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0004b1f9  00000000  00000000  000c1f17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001268f3  00000000  00000000  0010d110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00233a03  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b404  00000000  00000000  00233a58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000180 	.word	0x20000180
 800021c:	00000000 	.word	0x00000000
 8000220:	0801b92c 	.word	0x0801b92c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000184 	.word	0x20000184
 800023c:	0801b92c 	.word	0x0801b92c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005dc:	f000 fd1b 	bl	8001016 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e0:	f000 f81e 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e4:	f000 f97e 	bl	80008e4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005e8:	f000 f94c 	bl	8000884 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 80005ec:	f000 f8ae 	bl	800074c <MX_TIM6_Init>
  MX_TIM7_Init();
 80005f0:	f000 f8e2 	bl	80007b8 <MX_TIM7_Init>
  MX_USART2_UART_Init();
 80005f4:	f000 f916 	bl	8000824 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005f8:	f005 fb60 	bl	8005cbc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005fc:	4a05      	ldr	r2, [pc, #20]	; (8000614 <main+0x3c>)
 80005fe:	2100      	movs	r1, #0
 8000600:	4805      	ldr	r0, [pc, #20]	; (8000618 <main+0x40>)
 8000602:	f005 fbed 	bl	8005de0 <osThreadNew>
 8000606:	4603      	mov	r3, r0
 8000608:	4a04      	ldr	r2, [pc, #16]	; (800061c <main+0x44>)
 800060a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800060c:	f005 fb8a 	bl	8005d24 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000610:	e7fe      	b.n	8000610 <main+0x38>
 8000612:	bf00      	nop
 8000614:	0801f004 	.word	0x0801f004
 8000618:	08000a95 	.word	0x08000a95
 800061c:	20004ea0 	.word	0x20004ea0

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b0b8      	sub	sp, #224	; 0xe0
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800062a:	2234      	movs	r2, #52	; 0x34
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f01a fa17 	bl	801aa62 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000644:	f107 0308 	add.w	r3, r7, #8
 8000648:	2290      	movs	r2, #144	; 0x90
 800064a:	2100      	movs	r1, #0
 800064c:	4618      	mov	r0, r3
 800064e:	f01a fa08 	bl	801aa62 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000652:	f002 fa09 	bl	8002a68 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000656:	4b3b      	ldr	r3, [pc, #236]	; (8000744 <SystemClock_Config+0x124>)
 8000658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065a:	4a3a      	ldr	r2, [pc, #232]	; (8000744 <SystemClock_Config+0x124>)
 800065c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000660:	6413      	str	r3, [r2, #64]	; 0x40
 8000662:	4b38      	ldr	r3, [pc, #224]	; (8000744 <SystemClock_Config+0x124>)
 8000664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800066e:	4b36      	ldr	r3, [pc, #216]	; (8000748 <SystemClock_Config+0x128>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4a35      	ldr	r2, [pc, #212]	; (8000748 <SystemClock_Config+0x128>)
 8000674:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000678:	6013      	str	r3, [r2, #0]
 800067a:	4b33      	ldr	r3, [pc, #204]	; (8000748 <SystemClock_Config+0x128>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000682:	603b      	str	r3, [r7, #0]
 8000684:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000686:	2301      	movs	r3, #1
 8000688:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800068c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000690:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000694:	2302      	movs	r3, #2
 8000696:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800069a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800069e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006a2:	2304      	movs	r3, #4
 80006a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 80006a8:	23d8      	movs	r3, #216	; 0xd8
 80006aa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ae:	2302      	movs	r3, #2
 80006b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006b4:	2304      	movs	r3, #4
 80006b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006ba:	2302      	movs	r3, #2
 80006bc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80006c4:	4618      	mov	r0, r3
 80006c6:	f002 fa2f 	bl	8002b28 <HAL_RCC_OscConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80006d0:	f000 f9fe 	bl	8000ad0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006d4:	f002 f9d8 	bl	8002a88 <HAL_PWREx_EnableOverDrive>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006de:	f000 f9f7 	bl	8000ad0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e2:	230f      	movs	r3, #15
 80006e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e8:	2302      	movs	r3, #2
 80006ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006f4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000700:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000704:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000708:	2107      	movs	r1, #7
 800070a:	4618      	mov	r0, r3
 800070c:	f002 fcba 	bl	8003084 <HAL_RCC_ClockConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8000716:	f000 f9db 	bl	8000ad0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
 800071a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800071e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000720:	2300      	movs	r3, #0
 8000722:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000724:	2300      	movs	r3, #0
 8000726:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000728:	f107 0308 	add.w	r3, r7, #8
 800072c:	4618      	mov	r0, r3
 800072e:	f002 fedd 	bl	80034ec <HAL_RCCEx_PeriphCLKConfig>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <SystemClock_Config+0x11c>
  {
    Error_Handler();
 8000738:	f000 f9ca 	bl	8000ad0 <Error_Handler>
  }
}
 800073c:	bf00      	nop
 800073e:	37e0      	adds	r7, #224	; 0xe0
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40023800 	.word	0x40023800
 8000748:	40007000 	.word	0x40007000

0800074c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800075c:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <MX_TIM6_Init+0x64>)
 800075e:	4a15      	ldr	r2, [pc, #84]	; (80007b4 <MX_TIM6_Init+0x68>)
 8000760:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000762:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <MX_TIM6_Init+0x64>)
 8000764:	2200      	movs	r2, #0
 8000766:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000768:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <MX_TIM6_Init+0x64>)
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800076e:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <MX_TIM6_Init+0x64>)
 8000770:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000774:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000776:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <MX_TIM6_Init+0x64>)
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800077c:	480c      	ldr	r0, [pc, #48]	; (80007b0 <MX_TIM6_Init+0x64>)
 800077e:	f003 fadd 	bl	8003d3c <HAL_TIM_Base_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000788:	f000 f9a2 	bl	8000ad0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800078c:	2300      	movs	r3, #0
 800078e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000790:	2300      	movs	r3, #0
 8000792:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	4619      	mov	r1, r3
 8000798:	4805      	ldr	r0, [pc, #20]	; (80007b0 <MX_TIM6_Init+0x64>)
 800079a:	f003 fdb5 	bl	8004308 <HAL_TIMEx_MasterConfigSynchronization>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80007a4:	f000 f994 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80007a8:	bf00      	nop
 80007aa:	3710      	adds	r7, #16
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20004f28 	.word	0x20004f28
 80007b4:	40001000 	.word	0x40001000

080007b8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80007c8:	4b14      	ldr	r3, [pc, #80]	; (800081c <MX_TIM7_Init+0x64>)
 80007ca:	4a15      	ldr	r2, [pc, #84]	; (8000820 <MX_TIM7_Init+0x68>)
 80007cc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80007ce:	4b13      	ldr	r3, [pc, #76]	; (800081c <MX_TIM7_Init+0x64>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d4:	4b11      	ldr	r3, [pc, #68]	; (800081c <MX_TIM7_Init+0x64>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80007da:	4b10      	ldr	r3, [pc, #64]	; (800081c <MX_TIM7_Init+0x64>)
 80007dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007e0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <MX_TIM7_Init+0x64>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80007e8:	480c      	ldr	r0, [pc, #48]	; (800081c <MX_TIM7_Init+0x64>)
 80007ea:	f003 faa7 	bl	8003d3c <HAL_TIM_Base_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80007f4:	f000 f96c 	bl	8000ad0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007f8:	2300      	movs	r3, #0
 80007fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007fc:	2300      	movs	r3, #0
 80007fe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	4619      	mov	r1, r3
 8000804:	4805      	ldr	r0, [pc, #20]	; (800081c <MX_TIM7_Init+0x64>)
 8000806:	f003 fd7f 	bl	8004308 <HAL_TIMEx_MasterConfigSynchronization>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000810:	f000 f95e 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000814:	bf00      	nop
 8000816:	3710      	adds	r7, #16
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20004ff8 	.word	0x20004ff8
 8000820:	40001400 	.word	0x40001400

08000824 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000828:	4b14      	ldr	r3, [pc, #80]	; (800087c <MX_USART2_UART_Init+0x58>)
 800082a:	4a15      	ldr	r2, [pc, #84]	; (8000880 <MX_USART2_UART_Init+0x5c>)
 800082c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800082e:	4b13      	ldr	r3, [pc, #76]	; (800087c <MX_USART2_UART_Init+0x58>)
 8000830:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000834:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000836:	4b11      	ldr	r3, [pc, #68]	; (800087c <MX_USART2_UART_Init+0x58>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800083c:	4b0f      	ldr	r3, [pc, #60]	; (800087c <MX_USART2_UART_Init+0x58>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <MX_USART2_UART_Init+0x58>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000848:	4b0c      	ldr	r3, [pc, #48]	; (800087c <MX_USART2_UART_Init+0x58>)
 800084a:	220c      	movs	r2, #12
 800084c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084e:	4b0b      	ldr	r3, [pc, #44]	; (800087c <MX_USART2_UART_Init+0x58>)
 8000850:	2200      	movs	r2, #0
 8000852:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000854:	4b09      	ldr	r3, [pc, #36]	; (800087c <MX_USART2_UART_Init+0x58>)
 8000856:	2200      	movs	r2, #0
 8000858:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800085a:	4b08      	ldr	r3, [pc, #32]	; (800087c <MX_USART2_UART_Init+0x58>)
 800085c:	2200      	movs	r2, #0
 800085e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <MX_USART2_UART_Init+0x58>)
 8000862:	2200      	movs	r2, #0
 8000864:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000866:	4805      	ldr	r0, [pc, #20]	; (800087c <MX_USART2_UART_Init+0x58>)
 8000868:	f003 fdfa 	bl	8004460 <HAL_UART_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000872:	f000 f92d 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20004f74 	.word	0x20004f74
 8000880:	40004400 	.word	0x40004400

08000884 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000888:	4b14      	ldr	r3, [pc, #80]	; (80008dc <MX_USART3_UART_Init+0x58>)
 800088a:	4a15      	ldr	r2, [pc, #84]	; (80008e0 <MX_USART3_UART_Init+0x5c>)
 800088c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800088e:	4b13      	ldr	r3, [pc, #76]	; (80008dc <MX_USART3_UART_Init+0x58>)
 8000890:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000894:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000896:	4b11      	ldr	r3, [pc, #68]	; (80008dc <MX_USART3_UART_Init+0x58>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800089c:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <MX_USART3_UART_Init+0x58>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008a2:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <MX_USART3_UART_Init+0x58>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008a8:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <MX_USART3_UART_Init+0x58>)
 80008aa:	220c      	movs	r2, #12
 80008ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ae:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <MX_USART3_UART_Init+0x58>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b4:	4b09      	ldr	r3, [pc, #36]	; (80008dc <MX_USART3_UART_Init+0x58>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ba:	4b08      	ldr	r3, [pc, #32]	; (80008dc <MX_USART3_UART_Init+0x58>)
 80008bc:	2200      	movs	r2, #0
 80008be:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008c0:	4b06      	ldr	r3, [pc, #24]	; (80008dc <MX_USART3_UART_Init+0x58>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008c6:	4805      	ldr	r0, [pc, #20]	; (80008dc <MX_USART3_UART_Init+0x58>)
 80008c8:	f003 fdca 	bl	8004460 <HAL_UART_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80008d2:	f000 f8fd 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20004ea4 	.word	0x20004ea4
 80008e0:	40004800 	.word	0x40004800

080008e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08c      	sub	sp, #48	; 0x30
 80008e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
 80008f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fa:	4b60      	ldr	r3, [pc, #384]	; (8000a7c <MX_GPIO_Init+0x198>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a5f      	ldr	r2, [pc, #380]	; (8000a7c <MX_GPIO_Init+0x198>)
 8000900:	f043 0304 	orr.w	r3, r3, #4
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b5d      	ldr	r3, [pc, #372]	; (8000a7c <MX_GPIO_Init+0x198>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0304 	and.w	r3, r3, #4
 800090e:	61bb      	str	r3, [r7, #24]
 8000910:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000912:	4b5a      	ldr	r3, [pc, #360]	; (8000a7c <MX_GPIO_Init+0x198>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a59      	ldr	r2, [pc, #356]	; (8000a7c <MX_GPIO_Init+0x198>)
 8000918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b57      	ldr	r3, [pc, #348]	; (8000a7c <MX_GPIO_Init+0x198>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000926:	617b      	str	r3, [r7, #20]
 8000928:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092a:	4b54      	ldr	r3, [pc, #336]	; (8000a7c <MX_GPIO_Init+0x198>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a53      	ldr	r2, [pc, #332]	; (8000a7c <MX_GPIO_Init+0x198>)
 8000930:	f043 0301 	orr.w	r3, r3, #1
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b51      	ldr	r3, [pc, #324]	; (8000a7c <MX_GPIO_Init+0x198>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	613b      	str	r3, [r7, #16]
 8000940:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000942:	4b4e      	ldr	r3, [pc, #312]	; (8000a7c <MX_GPIO_Init+0x198>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a4d      	ldr	r2, [pc, #308]	; (8000a7c <MX_GPIO_Init+0x198>)
 8000948:	f043 0302 	orr.w	r3, r3, #2
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b4b      	ldr	r3, [pc, #300]	; (8000a7c <MX_GPIO_Init+0x198>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0302 	and.w	r3, r3, #2
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800095a:	4b48      	ldr	r3, [pc, #288]	; (8000a7c <MX_GPIO_Init+0x198>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a47      	ldr	r2, [pc, #284]	; (8000a7c <MX_GPIO_Init+0x198>)
 8000960:	f043 0308 	orr.w	r3, r3, #8
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b45      	ldr	r3, [pc, #276]	; (8000a7c <MX_GPIO_Init+0x198>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0308 	and.w	r3, r3, #8
 800096e:	60bb      	str	r3, [r7, #8]
 8000970:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000972:	4b42      	ldr	r3, [pc, #264]	; (8000a7c <MX_GPIO_Init+0x198>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a41      	ldr	r2, [pc, #260]	; (8000a7c <MX_GPIO_Init+0x198>)
 8000978:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b3f      	ldr	r3, [pc, #252]	; (8000a7c <MX_GPIO_Init+0x198>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|DE_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800098a:	2200      	movs	r2, #0
 800098c:	f644 0181 	movw	r1, #18561	; 0x4881
 8000990:	483b      	ldr	r0, [pc, #236]	; (8000a80 <MX_GPIO_Init+0x19c>)
 8000992:	f002 f835 	bl	8002a00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RE_GPIO_Port, RE_Pin, GPIO_PIN_SET);
 8000996:	2201      	movs	r2, #1
 8000998:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800099c:	4838      	ldr	r0, [pc, #224]	; (8000a80 <MX_GPIO_Init+0x19c>)
 800099e:	f002 f82f 	bl	8002a00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2140      	movs	r1, #64	; 0x40
 80009a6:	4837      	ldr	r0, [pc, #220]	; (8000a84 <MX_GPIO_Init+0x1a0>)
 80009a8:	f002 f82a 	bl	8002a00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009b2:	4b35      	ldr	r3, [pc, #212]	; (8000a88 <MX_GPIO_Init+0x1a4>)
 80009b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009ba:	f107 031c 	add.w	r3, r7, #28
 80009be:	4619      	mov	r1, r3
 80009c0:	4832      	ldr	r0, [pc, #200]	; (8000a8c <MX_GPIO_Init+0x1a8>)
 80009c2:	f001 fe71 	bl	80026a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009c6:	f244 0381 	movw	r3, #16513	; 0x4081
 80009ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009cc:	2301      	movs	r3, #1
 80009ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d4:	2300      	movs	r3, #0
 80009d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d8:	f107 031c 	add.w	r3, r7, #28
 80009dc:	4619      	mov	r1, r3
 80009de:	4828      	ldr	r0, [pc, #160]	; (8000a80 <MX_GPIO_Init+0x19c>)
 80009e0:	f001 fe62 	bl	80026a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RE_Pin DE_Pin */
  GPIO_InitStruct.Pin = RE_Pin|DE_Pin;
 80009e4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80009e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ea:	2301      	movs	r3, #1
 80009ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f2:	2303      	movs	r3, #3
 80009f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	4619      	mov	r1, r3
 80009fc:	4820      	ldr	r0, [pc, #128]	; (8000a80 <MX_GPIO_Init+0x19c>)
 80009fe:	f001 fe53 	bl	80026a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a02:	2340      	movs	r3, #64	; 0x40
 8000a04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a06:	2301      	movs	r3, #1
 8000a08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a12:	f107 031c 	add.w	r3, r7, #28
 8000a16:	4619      	mov	r1, r3
 8000a18:	481a      	ldr	r0, [pc, #104]	; (8000a84 <MX_GPIO_Init+0x1a0>)
 8000a1a:	f001 fe45 	bl	80026a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a1e:	2380      	movs	r3, #128	; 0x80
 8000a20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a22:	2300      	movs	r3, #0
 8000a24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a2a:	f107 031c 	add.w	r3, r7, #28
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4814      	ldr	r0, [pc, #80]	; (8000a84 <MX_GPIO_Init+0x1a0>)
 8000a32:	f001 fe39 	bl	80026a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000a36:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000a3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a44:	2303      	movs	r3, #3
 8000a46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a48:	230a      	movs	r3, #10
 8000a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4c:	f107 031c 	add.w	r3, r7, #28
 8000a50:	4619      	mov	r1, r3
 8000a52:	480f      	ldr	r0, [pc, #60]	; (8000a90 <MX_GPIO_Init+0x1ac>)
 8000a54:	f001 fe28 	bl	80026a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000a58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a66:	f107 031c 	add.w	r3, r7, #28
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4808      	ldr	r0, [pc, #32]	; (8000a90 <MX_GPIO_Init+0x1ac>)
 8000a6e:	f001 fe1b 	bl	80026a8 <HAL_GPIO_Init>

}
 8000a72:	bf00      	nop
 8000a74:	3730      	adds	r7, #48	; 0x30
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40023800 	.word	0x40023800
 8000a80:	40020400 	.word	0x40020400
 8000a84:	40021800 	.word	0x40021800
 8000a88:	10110000 	.word	0x10110000
 8000a8c:	40020800 	.word	0x40020800
 8000a90:	40020000 	.word	0x40020000

08000a94 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000a9c:	f004 fb80 	bl	80051a0 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	vInitMBTask();
 8000aa0:	f018 f8a8 	bl	8018bf4 <vInitMBTask>
  for(;;)
  {
    osDelay(1);
 8000aa4:	2001      	movs	r0, #1
 8000aa6:	f005 fa41 	bl	8005f2c <osDelay>
 8000aaa:	e7fb      	b.n	8000aa4 <StartDefaultTask+0x10>

08000aac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM13) {
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a04      	ldr	r2, [pc, #16]	; (8000acc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d101      	bne.n	8000ac2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000abe:	f000 fab7 	bl	8001030 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40001c00 	.word	0x40001c00

08000ad0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad4:	b672      	cpsid	i
}
 8000ad6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <Error_Handler+0x8>
	...

08000adc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae2:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <HAL_MspInit+0x4c>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	4a10      	ldr	r2, [pc, #64]	; (8000b28 <HAL_MspInit+0x4c>)
 8000ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aec:	6413      	str	r3, [r2, #64]	; 0x40
 8000aee:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <HAL_MspInit+0x4c>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afa:	4b0b      	ldr	r3, [pc, #44]	; (8000b28 <HAL_MspInit+0x4c>)
 8000afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afe:	4a0a      	ldr	r2, [pc, #40]	; (8000b28 <HAL_MspInit+0x4c>)
 8000b00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b04:	6453      	str	r3, [r2, #68]	; 0x44
 8000b06:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <HAL_MspInit+0x4c>)
 8000b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b0e:	603b      	str	r3, [r7, #0]
 8000b10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b12:	2200      	movs	r2, #0
 8000b14:	210f      	movs	r1, #15
 8000b16:	f06f 0001 	mvn.w	r0, #1
 8000b1a:	f000 fb85 	bl	8001228 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40023800 	.word	0x40023800

08000b2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a1a      	ldr	r2, [pc, #104]	; (8000ba4 <HAL_TIM_Base_MspInit+0x78>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d114      	bne.n	8000b68 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000b3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ba8 <HAL_TIM_Base_MspInit+0x7c>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b42:	4a19      	ldr	r2, [pc, #100]	; (8000ba8 <HAL_TIM_Base_MspInit+0x7c>)
 8000b44:	f043 0310 	orr.w	r3, r3, #16
 8000b48:	6413      	str	r3, [r2, #64]	; 0x40
 8000b4a:	4b17      	ldr	r3, [pc, #92]	; (8000ba8 <HAL_TIM_Base_MspInit+0x7c>)
 8000b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4e:	f003 0310 	and.w	r3, r3, #16
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000b56:	2200      	movs	r2, #0
 8000b58:	2105      	movs	r1, #5
 8000b5a:	2036      	movs	r0, #54	; 0x36
 8000b5c:	f000 fb64 	bl	8001228 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b60:	2036      	movs	r0, #54	; 0x36
 8000b62:	f000 fb7d 	bl	8001260 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000b66:	e018      	b.n	8000b9a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM7)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a0f      	ldr	r2, [pc, #60]	; (8000bac <HAL_TIM_Base_MspInit+0x80>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d113      	bne.n	8000b9a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000b72:	4b0d      	ldr	r3, [pc, #52]	; (8000ba8 <HAL_TIM_Base_MspInit+0x7c>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b76:	4a0c      	ldr	r2, [pc, #48]	; (8000ba8 <HAL_TIM_Base_MspInit+0x7c>)
 8000b78:	f043 0320 	orr.w	r3, r3, #32
 8000b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ba8 <HAL_TIM_Base_MspInit+0x7c>)
 8000b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b82:	f003 0320 	and.w	r3, r3, #32
 8000b86:	60bb      	str	r3, [r7, #8]
 8000b88:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2105      	movs	r1, #5
 8000b8e:	2037      	movs	r0, #55	; 0x37
 8000b90:	f000 fb4a 	bl	8001228 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000b94:	2037      	movs	r0, #55	; 0x37
 8000b96:	f000 fb63 	bl	8001260 <HAL_NVIC_EnableIRQ>
}
 8000b9a:	bf00      	nop
 8000b9c:	3710      	adds	r7, #16
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40001000 	.word	0x40001000
 8000ba8:	40023800 	.word	0x40023800
 8000bac:	40001400 	.word	0x40001400

08000bb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08c      	sub	sp, #48	; 0x30
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb8:	f107 031c 	add.w	r3, r7, #28
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a44      	ldr	r2, [pc, #272]	; (8000ce0 <HAL_UART_MspInit+0x130>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d14c      	bne.n	8000c6c <HAL_UART_MspInit+0xbc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bd2:	4b44      	ldr	r3, [pc, #272]	; (8000ce4 <HAL_UART_MspInit+0x134>)
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd6:	4a43      	ldr	r2, [pc, #268]	; (8000ce4 <HAL_UART_MspInit+0x134>)
 8000bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bdc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bde:	4b41      	ldr	r3, [pc, #260]	; (8000ce4 <HAL_UART_MspInit+0x134>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000be6:	61bb      	str	r3, [r7, #24]
 8000be8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bea:	4b3e      	ldr	r3, [pc, #248]	; (8000ce4 <HAL_UART_MspInit+0x134>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	4a3d      	ldr	r2, [pc, #244]	; (8000ce4 <HAL_UART_MspInit+0x134>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf6:	4b3b      	ldr	r3, [pc, #236]	; (8000ce4 <HAL_UART_MspInit+0x134>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	617b      	str	r3, [r7, #20]
 8000c00:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c02:	4b38      	ldr	r3, [pc, #224]	; (8000ce4 <HAL_UART_MspInit+0x134>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	4a37      	ldr	r2, [pc, #220]	; (8000ce4 <HAL_UART_MspInit+0x134>)
 8000c08:	f043 0308 	orr.w	r3, r3, #8
 8000c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0e:	4b35      	ldr	r3, [pc, #212]	; (8000ce4 <HAL_UART_MspInit+0x134>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	f003 0308 	and.w	r3, r3, #8
 8000c16:	613b      	str	r3, [r7, #16]
 8000c18:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c1a:	2308      	movs	r3, #8
 8000c1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c26:	2303      	movs	r3, #3
 8000c28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c2a:	2307      	movs	r3, #7
 8000c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2e:	f107 031c 	add.w	r3, r7, #28
 8000c32:	4619      	mov	r1, r3
 8000c34:	482c      	ldr	r0, [pc, #176]	; (8000ce8 <HAL_UART_MspInit+0x138>)
 8000c36:	f001 fd37 	bl	80026a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c3a:	2320      	movs	r3, #32
 8000c3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c46:	2303      	movs	r3, #3
 8000c48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c4a:	2307      	movs	r3, #7
 8000c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c4e:	f107 031c 	add.w	r3, r7, #28
 8000c52:	4619      	mov	r1, r3
 8000c54:	4825      	ldr	r0, [pc, #148]	; (8000cec <HAL_UART_MspInit+0x13c>)
 8000c56:	f001 fd27 	bl	80026a8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2105      	movs	r1, #5
 8000c5e:	2026      	movs	r0, #38	; 0x26
 8000c60:	f000 fae2 	bl	8001228 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c64:	2026      	movs	r0, #38	; 0x26
 8000c66:	f000 fafb 	bl	8001260 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c6a:	e035      	b.n	8000cd8 <HAL_UART_MspInit+0x128>
  else if(huart->Instance==USART3)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a1f      	ldr	r2, [pc, #124]	; (8000cf0 <HAL_UART_MspInit+0x140>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d130      	bne.n	8000cd8 <HAL_UART_MspInit+0x128>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c76:	4b1b      	ldr	r3, [pc, #108]	; (8000ce4 <HAL_UART_MspInit+0x134>)
 8000c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7a:	4a1a      	ldr	r2, [pc, #104]	; (8000ce4 <HAL_UART_MspInit+0x134>)
 8000c7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c80:	6413      	str	r3, [r2, #64]	; 0x40
 8000c82:	4b18      	ldr	r3, [pc, #96]	; (8000ce4 <HAL_UART_MspInit+0x134>)
 8000c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c8e:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <HAL_UART_MspInit+0x134>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	4a14      	ldr	r2, [pc, #80]	; (8000ce4 <HAL_UART_MspInit+0x134>)
 8000c94:	f043 0308 	orr.w	r3, r3, #8
 8000c98:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9a:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <HAL_UART_MspInit+0x134>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	f003 0308 	and.w	r3, r3, #8
 8000ca2:	60bb      	str	r3, [r7, #8]
 8000ca4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000ca6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000caa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cac:	2302      	movs	r3, #2
 8000cae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cb8:	2307      	movs	r3, #7
 8000cba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cbc:	f107 031c 	add.w	r3, r7, #28
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	480a      	ldr	r0, [pc, #40]	; (8000cec <HAL_UART_MspInit+0x13c>)
 8000cc4:	f001 fcf0 	bl	80026a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2105      	movs	r1, #5
 8000ccc:	2027      	movs	r0, #39	; 0x27
 8000cce:	f000 faab 	bl	8001228 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000cd2:	2027      	movs	r0, #39	; 0x27
 8000cd4:	f000 fac4 	bl	8001260 <HAL_NVIC_EnableIRQ>
}
 8000cd8:	bf00      	nop
 8000cda:	3730      	adds	r7, #48	; 0x30
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40004400 	.word	0x40004400
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	40020000 	.word	0x40020000
 8000cec:	40020c00 	.word	0x40020c00
 8000cf0:	40004800 	.word	0x40004800

08000cf4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08c      	sub	sp, #48	; 0x30
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d00:	2300      	movs	r3, #0
 8000d02:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM13 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0);
 8000d04:	2200      	movs	r2, #0
 8000d06:	6879      	ldr	r1, [r7, #4]
 8000d08:	202c      	movs	r0, #44	; 0x2c
 8000d0a:	f000 fa8d 	bl	8001228 <HAL_NVIC_SetPriority>

  /* Enable the TIM13 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8000d0e:	202c      	movs	r0, #44	; 0x2c
 8000d10:	f000 faa6 	bl	8001260 <HAL_NVIC_EnableIRQ>

  /* Enable TIM13 clock */
  __HAL_RCC_TIM13_CLK_ENABLE();
 8000d14:	4b1f      	ldr	r3, [pc, #124]	; (8000d94 <HAL_InitTick+0xa0>)
 8000d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d18:	4a1e      	ldr	r2, [pc, #120]	; (8000d94 <HAL_InitTick+0xa0>)
 8000d1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d20:	4b1c      	ldr	r3, [pc, #112]	; (8000d94 <HAL_InitTick+0xa0>)
 8000d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d2c:	f107 0210 	add.w	r2, r7, #16
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	4611      	mov	r1, r2
 8000d36:	4618      	mov	r0, r3
 8000d38:	f002 fba6 	bl	8003488 <HAL_RCC_GetClockConfig>

  /* Compute TIM13 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000d3c:	f002 fb7c 	bl	8003438 <HAL_RCC_GetPCLK1Freq>
 8000d40:	4603      	mov	r3, r0
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM13 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d48:	4a13      	ldr	r2, [pc, #76]	; (8000d98 <HAL_InitTick+0xa4>)
 8000d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d4e:	0c9b      	lsrs	r3, r3, #18
 8000d50:	3b01      	subs	r3, #1
 8000d52:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM13 */
  htim13.Instance = TIM13;
 8000d54:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <HAL_InitTick+0xa8>)
 8000d56:	4a12      	ldr	r2, [pc, #72]	; (8000da0 <HAL_InitTick+0xac>)
 8000d58:	601a      	str	r2, [r3, #0]
  + Period = [(TIM13CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim13.Init.Period = (1000000U / 1000U) - 1U;
 8000d5a:	4b10      	ldr	r3, [pc, #64]	; (8000d9c <HAL_InitTick+0xa8>)
 8000d5c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d60:	60da      	str	r2, [r3, #12]
  htim13.Init.Prescaler = uwPrescalerValue;
 8000d62:	4a0e      	ldr	r2, [pc, #56]	; (8000d9c <HAL_InitTick+0xa8>)
 8000d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d66:	6053      	str	r3, [r2, #4]
  htim13.Init.ClockDivision = 0;
 8000d68:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <HAL_InitTick+0xa8>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	611a      	str	r2, [r3, #16]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d6e:	4b0b      	ldr	r3, [pc, #44]	; (8000d9c <HAL_InitTick+0xa8>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim13) == HAL_OK)
 8000d74:	4809      	ldr	r0, [pc, #36]	; (8000d9c <HAL_InitTick+0xa8>)
 8000d76:	f002 ffe1 	bl	8003d3c <HAL_TIM_Base_Init>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d104      	bne.n	8000d8a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim13);
 8000d80:	4806      	ldr	r0, [pc, #24]	; (8000d9c <HAL_InitTick+0xa8>)
 8000d82:	f003 f833 	bl	8003dec <HAL_TIM_Base_Start_IT>
 8000d86:	4603      	mov	r3, r0
 8000d88:	e000      	b.n	8000d8c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3730      	adds	r7, #48	; 0x30
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	40023800 	.word	0x40023800
 8000d98:	431bde83 	.word	0x431bde83
 8000d9c:	20005044 	.word	0x20005044
 8000da0:	40001c00 	.word	0x40001c00

08000da4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000da8:	e7fe      	b.n	8000da8 <NMI_Handler+0x4>

08000daa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dae:	e7fe      	b.n	8000dae <HardFault_Handler+0x4>

08000db0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <MemManage_Handler+0x4>

08000db6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dba:	e7fe      	b.n	8000dba <BusFault_Handler+0x4>

08000dbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dc0:	e7fe      	b.n	8000dc0 <UsageFault_Handler+0x4>

08000dc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr

08000dd0 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8000dd4:	4802      	ldr	r0, [pc, #8]	; (8000de0 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8000dd6:	f003 f8b0 	bl	8003f3a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	20005044 	.word	0x20005044

08000de4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
////
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000de8:	4802      	ldr	r0, [pc, #8]	; (8000df4 <TIM7_IRQHandler+0x10>)
 8000dea:	f003 f8a6 	bl	8003f3a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
////
  /* USER CODE END TIM7_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20004ff8 	.word	0x20004ff8

08000df8 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000dfc:	4802      	ldr	r0, [pc, #8]	; (8000e08 <ETH_IRQHandler+0x10>)
 8000dfe:	f000 feb1 	bl	8001b64 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	200069dc 	.word	0x200069dc

08000e0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
	return 1;
 8000e10:	2301      	movs	r3, #1
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <_kill>:

int _kill(int pid, int sig)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000e26:	4b05      	ldr	r3, [pc, #20]	; (8000e3c <_kill+0x20>)
 8000e28:	2216      	movs	r2, #22
 8000e2a:	601a      	str	r2, [r3, #0]
	return -1;
 8000e2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	2000db38 	.word	0x2000db38

08000e40 <_exit>:

void _exit (int status)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000e48:	f04f 31ff 	mov.w	r1, #4294967295
 8000e4c:	6878      	ldr	r0, [r7, #4]
 8000e4e:	f7ff ffe5 	bl	8000e1c <_kill>
	while (1) {}		/* Make sure we hang here */
 8000e52:	e7fe      	b.n	8000e52 <_exit+0x12>

08000e54 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b086      	sub	sp, #24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e60:	2300      	movs	r3, #0
 8000e62:	617b      	str	r3, [r7, #20]
 8000e64:	e00a      	b.n	8000e7c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e66:	f3af 8000 	nop.w
 8000e6a:	4601      	mov	r1, r0
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	1c5a      	adds	r2, r3, #1
 8000e70:	60ba      	str	r2, [r7, #8]
 8000e72:	b2ca      	uxtb	r2, r1
 8000e74:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	617b      	str	r3, [r7, #20]
 8000e7c:	697a      	ldr	r2, [r7, #20]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	dbf0      	blt.n	8000e66 <_read+0x12>
	}

return len;
 8000e84:	687b      	ldr	r3, [r7, #4]
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3718      	adds	r7, #24
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b086      	sub	sp, #24
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	60f8      	str	r0, [r7, #12]
 8000e96:	60b9      	str	r1, [r7, #8]
 8000e98:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	617b      	str	r3, [r7, #20]
 8000e9e:	e009      	b.n	8000eb4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	1c5a      	adds	r2, r3, #1
 8000ea4:	60ba      	str	r2, [r7, #8]
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	617b      	str	r3, [r7, #20]
 8000eb4:	697a      	ldr	r2, [r7, #20]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	dbf1      	blt.n	8000ea0 <_write+0x12>
	}
	return len;
 8000ebc:	687b      	ldr	r3, [r7, #4]
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3718      	adds	r7, #24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <_close>:

int _close(int file)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	b083      	sub	sp, #12
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
	return -1;
 8000ece:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	b083      	sub	sp, #12
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
 8000ee6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000eee:	605a      	str	r2, [r3, #4]
	return 0;
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr

08000efe <_isatty>:

int _isatty(int file)
{
 8000efe:	b480      	push	{r7}
 8000f00:	b083      	sub	sp, #12
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
	return 1;
 8000f06:	2301      	movs	r3, #1
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
	return 0;
 8000f20:	2300      	movs	r3, #0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3714      	adds	r7, #20
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
	...

08000f30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b087      	sub	sp, #28
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f38:	4a14      	ldr	r2, [pc, #80]	; (8000f8c <_sbrk+0x5c>)
 8000f3a:	4b15      	ldr	r3, [pc, #84]	; (8000f90 <_sbrk+0x60>)
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f44:	4b13      	ldr	r3, [pc, #76]	; (8000f94 <_sbrk+0x64>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d102      	bne.n	8000f52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f4c:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <_sbrk+0x64>)
 8000f4e:	4a12      	ldr	r2, [pc, #72]	; (8000f98 <_sbrk+0x68>)
 8000f50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f52:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <_sbrk+0x64>)
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4413      	add	r3, r2
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d205      	bcs.n	8000f6c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000f60:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <_sbrk+0x6c>)
 8000f62:	220c      	movs	r2, #12
 8000f64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f66:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6a:	e009      	b.n	8000f80 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f6c:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <_sbrk+0x64>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f72:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <_sbrk+0x64>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4413      	add	r3, r2
 8000f7a:	4a06      	ldr	r2, [pc, #24]	; (8000f94 <_sbrk+0x64>)
 8000f7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	371c      	adds	r7, #28
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	20080000 	.word	0x20080000
 8000f90:	00000400 	.word	0x00000400
 8000f94:	2000019c 	.word	0x2000019c
 8000f98:	2000dcc8 	.word	0x2000dcc8
 8000f9c:	2000db38 	.word	0x2000db38

08000fa0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fa4:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <SystemInit+0x20>)
 8000fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000faa:	4a05      	ldr	r2, [pc, #20]	; (8000fc0 <SystemInit+0x20>)
 8000fac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ffc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fc8:	480d      	ldr	r0, [pc, #52]	; (8001000 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fca:	490e      	ldr	r1, [pc, #56]	; (8001004 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fcc:	4a0e      	ldr	r2, [pc, #56]	; (8001008 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fd0:	e002      	b.n	8000fd8 <LoopCopyDataInit>

08000fd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fd6:	3304      	adds	r3, #4

08000fd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fdc:	d3f9      	bcc.n	8000fd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fde:	4a0b      	ldr	r2, [pc, #44]	; (800100c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fe0:	4c0b      	ldr	r4, [pc, #44]	; (8001010 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fe2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fe4:	e001      	b.n	8000fea <LoopFillZerobss>

08000fe6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fe6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe8:	3204      	adds	r2, #4

08000fea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fec:	d3fb      	bcc.n	8000fe6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fee:	f7ff ffd7 	bl	8000fa0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ff2:	f019 fcf3 	bl	801a9dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ff6:	f7ff faef 	bl	80005d8 <main>
  bx  lr    
 8000ffa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ffc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001000:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001004:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8001008:	0801f524 	.word	0x0801f524
  ldr r2, =_sbss
 800100c:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8001010:	2000dcc4 	.word	0x2000dcc4

08001014 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001014:	e7fe      	b.n	8001014 <ADC_IRQHandler>

08001016 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800101a:	2003      	movs	r0, #3
 800101c:	f000 f8f9 	bl	8001212 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001020:	200f      	movs	r0, #15
 8001022:	f7ff fe67 	bl	8000cf4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001026:	f7ff fd59 	bl	8000adc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800102a:	2300      	movs	r3, #0
}
 800102c:	4618      	mov	r0, r3
 800102e:	bd80      	pop	{r7, pc}

08001030 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001034:	4b06      	ldr	r3, [pc, #24]	; (8001050 <HAL_IncTick+0x20>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	461a      	mov	r2, r3
 800103a:	4b06      	ldr	r3, [pc, #24]	; (8001054 <HAL_IncTick+0x24>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4413      	add	r3, r2
 8001040:	4a04      	ldr	r2, [pc, #16]	; (8001054 <HAL_IncTick+0x24>)
 8001042:	6013      	str	r3, [r2, #0]
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	20000008 	.word	0x20000008
 8001054:	20005090 	.word	0x20005090

08001058 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  return uwTick;
 800105c:	4b03      	ldr	r3, [pc, #12]	; (800106c <HAL_GetTick+0x14>)
 800105e:	681b      	ldr	r3, [r3, #0]
}
 8001060:	4618      	mov	r0, r3
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	20005090 	.word	0x20005090

08001070 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001078:	f7ff ffee 	bl	8001058 <HAL_GetTick>
 800107c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001088:	d005      	beq.n	8001096 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800108a:	4b0a      	ldr	r3, [pc, #40]	; (80010b4 <HAL_Delay+0x44>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	461a      	mov	r2, r3
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	4413      	add	r3, r2
 8001094:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001096:	bf00      	nop
 8001098:	f7ff ffde 	bl	8001058 <HAL_GetTick>
 800109c:	4602      	mov	r2, r0
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	68fa      	ldr	r2, [r7, #12]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d8f7      	bhi.n	8001098 <HAL_Delay+0x28>
  {
  }
}
 80010a8:	bf00      	nop
 80010aa:	bf00      	nop
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000008 	.word	0x20000008

080010b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010c8:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <__NVIC_SetPriorityGrouping+0x40>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ce:	68ba      	ldr	r2, [r7, #8]
 80010d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010d4:	4013      	ands	r3, r2
 80010d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <__NVIC_SetPriorityGrouping+0x44>)
 80010e2:	4313      	orrs	r3, r2
 80010e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010e6:	4a04      	ldr	r2, [pc, #16]	; (80010f8 <__NVIC_SetPriorityGrouping+0x40>)
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	60d3      	str	r3, [r2, #12]
}
 80010ec:	bf00      	nop
 80010ee:	3714      	adds	r7, #20
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	e000ed00 	.word	0xe000ed00
 80010fc:	05fa0000 	.word	0x05fa0000

08001100 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001104:	4b04      	ldr	r3, [pc, #16]	; (8001118 <__NVIC_GetPriorityGrouping+0x18>)
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	0a1b      	lsrs	r3, r3, #8
 800110a:	f003 0307 	and.w	r3, r3, #7
}
 800110e:	4618      	mov	r0, r3
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112a:	2b00      	cmp	r3, #0
 800112c:	db0b      	blt.n	8001146 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	f003 021f 	and.w	r2, r3, #31
 8001134:	4907      	ldr	r1, [pc, #28]	; (8001154 <__NVIC_EnableIRQ+0x38>)
 8001136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113a:	095b      	lsrs	r3, r3, #5
 800113c:	2001      	movs	r0, #1
 800113e:	fa00 f202 	lsl.w	r2, r0, r2
 8001142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	e000e100 	.word	0xe000e100

08001158 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	6039      	str	r1, [r7, #0]
 8001162:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001168:	2b00      	cmp	r3, #0
 800116a:	db0a      	blt.n	8001182 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	b2da      	uxtb	r2, r3
 8001170:	490c      	ldr	r1, [pc, #48]	; (80011a4 <__NVIC_SetPriority+0x4c>)
 8001172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001176:	0112      	lsls	r2, r2, #4
 8001178:	b2d2      	uxtb	r2, r2
 800117a:	440b      	add	r3, r1
 800117c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001180:	e00a      	b.n	8001198 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	b2da      	uxtb	r2, r3
 8001186:	4908      	ldr	r1, [pc, #32]	; (80011a8 <__NVIC_SetPriority+0x50>)
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	f003 030f 	and.w	r3, r3, #15
 800118e:	3b04      	subs	r3, #4
 8001190:	0112      	lsls	r2, r2, #4
 8001192:	b2d2      	uxtb	r2, r2
 8001194:	440b      	add	r3, r1
 8001196:	761a      	strb	r2, [r3, #24]
}
 8001198:	bf00      	nop
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	e000e100 	.word	0xe000e100
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b089      	sub	sp, #36	; 0x24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	f1c3 0307 	rsb	r3, r3, #7
 80011c6:	2b04      	cmp	r3, #4
 80011c8:	bf28      	it	cs
 80011ca:	2304      	movcs	r3, #4
 80011cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	3304      	adds	r3, #4
 80011d2:	2b06      	cmp	r3, #6
 80011d4:	d902      	bls.n	80011dc <NVIC_EncodePriority+0x30>
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	3b03      	subs	r3, #3
 80011da:	e000      	b.n	80011de <NVIC_EncodePriority+0x32>
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e0:	f04f 32ff 	mov.w	r2, #4294967295
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	43da      	mvns	r2, r3
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	401a      	ands	r2, r3
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f4:	f04f 31ff 	mov.w	r1, #4294967295
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	fa01 f303 	lsl.w	r3, r1, r3
 80011fe:	43d9      	mvns	r1, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001204:	4313      	orrs	r3, r2
         );
}
 8001206:	4618      	mov	r0, r3
 8001208:	3724      	adds	r7, #36	; 0x24
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr

08001212 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b082      	sub	sp, #8
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff ff4c 	bl	80010b8 <__NVIC_SetPriorityGrouping>
}
 8001220:	bf00      	nop
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
 8001234:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001236:	2300      	movs	r3, #0
 8001238:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800123a:	f7ff ff61 	bl	8001100 <__NVIC_GetPriorityGrouping>
 800123e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	68b9      	ldr	r1, [r7, #8]
 8001244:	6978      	ldr	r0, [r7, #20]
 8001246:	f7ff ffb1 	bl	80011ac <NVIC_EncodePriority>
 800124a:	4602      	mov	r2, r0
 800124c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001250:	4611      	mov	r1, r2
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff ff80 	bl	8001158 <__NVIC_SetPriority>
}
 8001258:	bf00      	nop
 800125a:	3718      	adds	r7, #24
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800126a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff ff54 	bl	800111c <__NVIC_EnableIRQ>
}
 8001274:	bf00      	nop
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001288:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800128a:	f7ff fee5 	bl	8001058 <HAL_GetTick>
 800128e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001296:	b2db      	uxtb	r3, r3
 8001298:	2b02      	cmp	r3, #2
 800129a:	d008      	beq.n	80012ae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2280      	movs	r2, #128	; 0x80
 80012a0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2200      	movs	r2, #0
 80012a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e052      	b.n	8001354 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f022 0216 	bic.w	r2, r2, #22
 80012bc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	695a      	ldr	r2, [r3, #20]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012cc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d103      	bne.n	80012de <HAL_DMA_Abort+0x62>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d007      	beq.n	80012ee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f022 0208 	bic.w	r2, r2, #8
 80012ec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f022 0201 	bic.w	r2, r2, #1
 80012fc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012fe:	e013      	b.n	8001328 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001300:	f7ff feaa 	bl	8001058 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b05      	cmp	r3, #5
 800130c:	d90c      	bls.n	8001328 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2220      	movs	r2, #32
 8001312:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2200      	movs	r2, #0
 8001318:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2203      	movs	r2, #3
 8001320:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001324:	2303      	movs	r3, #3
 8001326:	e015      	b.n	8001354 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	2b00      	cmp	r3, #0
 8001334:	d1e4      	bne.n	8001300 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800133a:	223f      	movs	r2, #63	; 0x3f
 800133c:	409a      	lsls	r2, r3
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2201      	movs	r2, #1
 800134e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001352:	2300      	movs	r3, #0
}
 8001354:	4618      	mov	r0, r3
 8001356:	3710      	adds	r7, #16
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}

0800135c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800136a:	b2db      	uxtb	r3, r3
 800136c:	2b02      	cmp	r3, #2
 800136e:	d004      	beq.n	800137a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2280      	movs	r2, #128	; 0x80
 8001374:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e00c      	b.n	8001394 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2205      	movs	r2, #5
 800137e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f022 0201 	bic.w	r2, r2, #1
 8001390:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001392:	2300      	movs	r3, #0
}
 8001394:	4618      	mov	r0, r3
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b088      	sub	sp, #32
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	61fb      	str	r3, [r7, #28]
 80013ac:	2300      	movs	r3, #0
 80013ae:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 80013b0:	4ba9      	ldr	r3, [pc, #676]	; (8001658 <HAL_ETH_Init+0x2b8>)
 80013b2:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80013b8:	2300      	movs	r3, #0
 80013ba:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d101      	bne.n	80013c6 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e181      	b.n	80016ca <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d106      	bne.n	80013e0 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2200      	movs	r2, #0
 80013d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f004 f842 	bl	8005464 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e0:	4b9e      	ldr	r3, [pc, #632]	; (800165c <HAL_ETH_Init+0x2bc>)
 80013e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e4:	4a9d      	ldr	r2, [pc, #628]	; (800165c <HAL_ETH_Init+0x2bc>)
 80013e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013ea:	6453      	str	r3, [r2, #68]	; 0x44
 80013ec:	4b9b      	ldr	r3, [pc, #620]	; (800165c <HAL_ETH_Init+0x2bc>)
 80013ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013f4:	60bb      	str	r3, [r7, #8]
 80013f6:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80013f8:	4b99      	ldr	r3, [pc, #612]	; (8001660 <HAL_ETH_Init+0x2c0>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	4a98      	ldr	r2, [pc, #608]	; (8001660 <HAL_ETH_Init+0x2c0>)
 80013fe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001402:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001404:	4b96      	ldr	r3, [pc, #600]	; (8001660 <HAL_ETH_Init+0x2c0>)
 8001406:	685a      	ldr	r2, [r3, #4]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6a1b      	ldr	r3, [r3, #32]
 800140c:	4994      	ldr	r1, [pc, #592]	; (8001660 <HAL_ETH_Init+0x2c0>)
 800140e:	4313      	orrs	r3, r2
 8001410:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f042 0201 	orr.w	r2, r2, #1
 8001424:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001428:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800142a:	f7ff fe15 	bl	8001058 <HAL_GetTick>
 800142e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001430:	e011      	b.n	8001456 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001432:	f7ff fe11 	bl	8001058 <HAL_GetTick>
 8001436:	4602      	mov	r2, r0
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001440:	d909      	bls.n	8001456 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2203      	movs	r2, #3
 8001446:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2200      	movs	r2, #0
 800144e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e139      	b.n	80016ca <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0301 	and.w	r3, r3, #1
 8001464:	2b00      	cmp	r3, #0
 8001466:	d1e4      	bne.n	8001432 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	691b      	ldr	r3, [r3, #16]
 800146e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	f023 031c 	bic.w	r3, r3, #28
 8001476:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001478:	f001 ffd2 	bl	8003420 <HAL_RCC_GetHCLKFreq>
 800147c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	4a78      	ldr	r2, [pc, #480]	; (8001664 <HAL_ETH_Init+0x2c4>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d908      	bls.n	8001498 <HAL_ETH_Init+0xf8>
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	4a77      	ldr	r2, [pc, #476]	; (8001668 <HAL_ETH_Init+0x2c8>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d804      	bhi.n	8001498 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	f043 0308 	orr.w	r3, r3, #8
 8001494:	61fb      	str	r3, [r7, #28]
 8001496:	e027      	b.n	80014e8 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	4a73      	ldr	r2, [pc, #460]	; (8001668 <HAL_ETH_Init+0x2c8>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d908      	bls.n	80014b2 <HAL_ETH_Init+0x112>
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	4a6d      	ldr	r2, [pc, #436]	; (8001658 <HAL_ETH_Init+0x2b8>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d204      	bcs.n	80014b2 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	f043 030c 	orr.w	r3, r3, #12
 80014ae:	61fb      	str	r3, [r7, #28]
 80014b0:	e01a      	b.n	80014e8 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	4a68      	ldr	r2, [pc, #416]	; (8001658 <HAL_ETH_Init+0x2b8>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d303      	bcc.n	80014c2 <HAL_ETH_Init+0x122>
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	4a6b      	ldr	r2, [pc, #428]	; (800166c <HAL_ETH_Init+0x2cc>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d911      	bls.n	80014e6 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	4a69      	ldr	r2, [pc, #420]	; (800166c <HAL_ETH_Init+0x2cc>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d908      	bls.n	80014dc <HAL_ETH_Init+0x13c>
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	4a68      	ldr	r2, [pc, #416]	; (8001670 <HAL_ETH_Init+0x2d0>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d804      	bhi.n	80014dc <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	f043 0304 	orr.w	r3, r3, #4
 80014d8:	61fb      	str	r3, [r7, #28]
 80014da:	e005      	b.n	80014e8 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	f043 0310 	orr.w	r3, r3, #16
 80014e2:	61fb      	str	r3, [r7, #28]
 80014e4:	e000      	b.n	80014e8 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80014e6:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	69fa      	ldr	r2, [r7, #28]
 80014ee:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80014f0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80014f4:	2100      	movs	r1, #0
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f000 fc17 	bl	8001d2a <HAL_ETH_WritePHYRegister>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d00b      	beq.n	800151a <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001506:	6939      	ldr	r1, [r7, #16]
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f000 fdcd 	bl	80020a8 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2201      	movs	r2, #1
 8001512:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e0d7      	b.n	80016ca <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800151a:	20ff      	movs	r0, #255	; 0xff
 800151c:	f7ff fda8 	bl	8001070 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	2b00      	cmp	r3, #0
 8001526:	f000 80a5 	beq.w	8001674 <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800152a:	f7ff fd95 	bl	8001058 <HAL_GetTick>
 800152e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001530:	f107 030c 	add.w	r3, r7, #12
 8001534:	461a      	mov	r2, r3
 8001536:	2101      	movs	r1, #1
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f000 fb8e 	bl	8001c5a <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800153e:	f7ff fd8b 	bl	8001058 <HAL_GetTick>
 8001542:	4602      	mov	r2, r0
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	f241 3288 	movw	r2, #5000	; 0x1388
 800154c:	4293      	cmp	r3, r2
 800154e:	d90f      	bls.n	8001570 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001554:	6939      	ldr	r1, [r7, #16]
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f000 fda6 	bl	80020a8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2201      	movs	r2, #1
 8001560:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2200      	movs	r2, #0
 8001568:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e0ac      	b.n	80016ca <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f003 0304 	and.w	r3, r3, #4
 8001576:	2b00      	cmp	r3, #0
 8001578:	d0da      	beq.n	8001530 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800157a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800157e:	2100      	movs	r1, #0
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f000 fbd2 	bl	8001d2a <HAL_ETH_WritePHYRegister>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d00b      	beq.n	80015a4 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001590:	6939      	ldr	r1, [r7, #16]
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f000 fd88 	bl	80020a8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2201      	movs	r2, #1
 800159c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80015a0:	2301      	movs	r3, #1
 80015a2:	e092      	b.n	80016ca <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80015a4:	f7ff fd58 	bl	8001058 <HAL_GetTick>
 80015a8:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80015aa:	f107 030c 	add.w	r3, r7, #12
 80015ae:	461a      	mov	r2, r3
 80015b0:	2101      	movs	r1, #1
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f000 fb51 	bl	8001c5a <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80015b8:	f7ff fd4e 	bl	8001058 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d90f      	bls.n	80015ea <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80015ce:	6939      	ldr	r1, [r7, #16]
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f000 fd69 	bl	80020a8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2201      	movs	r2, #1
 80015da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e06f      	b.n	80016ca <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f003 0320 	and.w	r3, r3, #32
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d0da      	beq.n	80015aa <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80015f4:	f107 030c 	add.w	r3, r7, #12
 80015f8:	461a      	mov	r2, r3
 80015fa:	2110      	movs	r1, #16
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f000 fb2c 	bl	8001c5a <HAL_ETH_ReadPHYRegister>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d00b      	beq.n	8001620 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800160c:	6939      	ldr	r1, [r7, #16]
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f000 fd4a 	bl	80020a8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2201      	movs	r2, #1
 8001618:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800161c:	2301      	movs	r3, #1
 800161e:	e054      	b.n	80016ca <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f003 0304 	and.w	r3, r3, #4
 8001626:	2b00      	cmp	r3, #0
 8001628:	d004      	beq.n	8001634 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001630:	60da      	str	r2, [r3, #12]
 8001632:	e002      	b.n	800163a <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	f003 0302 	and.w	r3, r3, #2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d003      	beq.n	800164c <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2200      	movs	r2, #0
 8001648:	609a      	str	r2, [r3, #8]
 800164a:	e035      	b.n	80016b8 <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	e030      	b.n	80016b8 <HAL_ETH_Init+0x318>
 8001656:	bf00      	nop
 8001658:	03938700 	.word	0x03938700
 800165c:	40023800 	.word	0x40023800
 8001660:	40013800 	.word	0x40013800
 8001664:	01312cff 	.word	0x01312cff
 8001668:	02160ebf 	.word	0x02160ebf
 800166c:	05f5e0ff 	.word	0x05f5e0ff
 8001670:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	08db      	lsrs	r3, r3, #3
 800167a:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	085b      	lsrs	r3, r3, #1
 8001682:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001684:	4313      	orrs	r3, r2
 8001686:	b29b      	uxth	r3, r3
 8001688:	461a      	mov	r2, r3
 800168a:	2100      	movs	r1, #0
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f000 fb4c 	bl	8001d2a <HAL_ETH_WritePHYRegister>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d00b      	beq.n	80016b0 <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800169c:	6939      	ldr	r1, [r7, #16]
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f000 fd02 	bl	80020a8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2201      	movs	r2, #1
 80016a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e00c      	b.n	80016ca <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80016b0:	f640 70ff 	movw	r0, #4095	; 0xfff
 80016b4:	f7ff fcdc 	bl	8001070 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80016b8:	6939      	ldr	r1, [r7, #16]
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f000 fcf4 	bl	80020a8 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2201      	movs	r2, #1
 80016c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3720      	adds	r7, #32
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop

080016d4 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b087      	sub	sp, #28
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
 80016e0:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80016e2:	2300      	movs	r3, #0
 80016e4:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d101      	bne.n	80016f4 <HAL_ETH_DMATxDescListInit+0x20>
 80016f0:	2302      	movs	r3, #2
 80016f2:	e052      	b.n	800179a <HAL_ETH_DMATxDescListInit+0xc6>
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2201      	movs	r2, #1
 80016f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2202      	movs	r2, #2
 8001700:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	68ba      	ldr	r2, [r7, #8]
 8001708:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 800170a:	2300      	movs	r3, #0
 800170c:	617b      	str	r3, [r7, #20]
 800170e:	e030      	b.n	8001772 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	015b      	lsls	r3, r3, #5
 8001714:	68ba      	ldr	r2, [r7, #8]
 8001716:	4413      	add	r3, r2
 8001718:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001720:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001728:	fb02 f303 	mul.w	r3, r2, r3
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	4413      	add	r3, r2
 8001730:	461a      	mov	r2, r3
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	69db      	ldr	r3, [r3, #28]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d105      	bne.n	800174a <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	3b01      	subs	r3, #1
 800174e:	697a      	ldr	r2, [r7, #20]
 8001750:	429a      	cmp	r2, r3
 8001752:	d208      	bcs.n	8001766 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	3301      	adds	r3, #1
 8001758:	015b      	lsls	r3, r3, #5
 800175a:	68ba      	ldr	r2, [r7, #8]
 800175c:	4413      	add	r3, r2
 800175e:	461a      	mov	r2, r3
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	60da      	str	r2, [r3, #12]
 8001764:	e002      	b.n	800176c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001766:	68ba      	ldr	r2, [r7, #8]
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	3301      	adds	r3, #1
 8001770:	617b      	str	r3, [r7, #20]
 8001772:	697a      	ldr	r2, [r7, #20]
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	429a      	cmp	r2, r3
 8001778:	d3ca      	bcc.n	8001710 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	6819      	ldr	r1, [r3, #0]
 800177e:	68ba      	ldr	r2, [r7, #8]
 8001780:	f241 0310 	movw	r3, #4112	; 0x1010
 8001784:	440b      	add	r3, r1
 8001786:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2201      	movs	r2, #1
 800178c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2200      	movs	r2, #0
 8001794:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	371c      	adds	r7, #28
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80017a6:	b480      	push	{r7}
 80017a8:	b087      	sub	sp, #28
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	60f8      	str	r0, [r7, #12]
 80017ae:	60b9      	str	r1, [r7, #8]
 80017b0:	607a      	str	r2, [r7, #4]
 80017b2:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80017b4:	2300      	movs	r3, #0
 80017b6:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d101      	bne.n	80017c6 <HAL_ETH_DMARxDescListInit+0x20>
 80017c2:	2302      	movs	r3, #2
 80017c4:	e056      	b.n	8001874 <HAL_ETH_DMARxDescListInit+0xce>
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2201      	movs	r2, #1
 80017ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2202      	movs	r2, #2
 80017d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	68ba      	ldr	r2, [r7, #8]
 80017da:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 80017dc:	2300      	movs	r3, #0
 80017de:	617b      	str	r3, [r7, #20]
 80017e0:	e034      	b.n	800184c <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	015b      	lsls	r3, r3, #5
 80017e6:	68ba      	ldr	r2, [r7, #8]
 80017e8:	4413      	add	r3, r2
 80017ea:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80017f2:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80017fa:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001802:	fb02 f303 	mul.w	r3, r2, r3
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	4413      	add	r3, r2
 800180a:	461a      	mov	r2, r3
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d105      	bne.n	8001824 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	3b01      	subs	r3, #1
 8001828:	697a      	ldr	r2, [r7, #20]
 800182a:	429a      	cmp	r2, r3
 800182c:	d208      	bcs.n	8001840 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	3301      	adds	r3, #1
 8001832:	015b      	lsls	r3, r3, #5
 8001834:	68ba      	ldr	r2, [r7, #8]
 8001836:	4413      	add	r3, r2
 8001838:	461a      	mov	r2, r3
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	60da      	str	r2, [r3, #12]
 800183e:	e002      	b.n	8001846 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001840:	68ba      	ldr	r2, [r7, #8]
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	3301      	adds	r3, #1
 800184a:	617b      	str	r3, [r7, #20]
 800184c:	697a      	ldr	r2, [r7, #20]
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	429a      	cmp	r2, r3
 8001852:	d3c6      	bcc.n	80017e2 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	6819      	ldr	r1, [r3, #0]
 8001858:	68ba      	ldr	r2, [r7, #8]
 800185a:	f241 030c 	movw	r3, #4108	; 0x100c
 800185e:	440b      	add	r3, r1
 8001860:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2201      	movs	r2, #1
 8001866:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2200      	movs	r2, #0
 800186e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001872:	2300      	movs	r3, #0
}
 8001874:	4618      	mov	r0, r3
 8001876:	371c      	adds	r7, #28
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001880:	b480      	push	{r7}
 8001882:	b087      	sub	sp, #28
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 800188a:	2300      	movs	r3, #0
 800188c:	617b      	str	r3, [r7, #20]
 800188e:	2300      	movs	r3, #0
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	2300      	movs	r3, #0
 8001894:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800189c:	2b01      	cmp	r3, #1
 800189e:	d101      	bne.n	80018a4 <HAL_ETH_TransmitFrame+0x24>
 80018a0:	2302      	movs	r3, #2
 80018a2:	e0cd      	b.n	8001a40 <HAL_ETH_TransmitFrame+0x1c0>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2201      	movs	r2, #1
 80018a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2202      	movs	r2, #2
 80018b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d109      	bne.n	80018ce <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2201      	movs	r2, #1
 80018be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80018ca:	2301      	movs	r3, #1
 80018cc:	e0b8      	b.n	8001a40 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	da09      	bge.n	80018ec <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2212      	movs	r2, #18
 80018dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2200      	movs	r2, #0
 80018e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e0a9      	b.n	8001a40 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d915      	bls.n	8001922 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	4a54      	ldr	r2, [pc, #336]	; (8001a4c <HAL_ETH_TransmitFrame+0x1cc>)
 80018fa:	fba2 2303 	umull	r2, r3, r2, r3
 80018fe:	0a9b      	lsrs	r3, r3, #10
 8001900:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001902:	683a      	ldr	r2, [r7, #0]
 8001904:	4b51      	ldr	r3, [pc, #324]	; (8001a4c <HAL_ETH_TransmitFrame+0x1cc>)
 8001906:	fba3 1302 	umull	r1, r3, r3, r2
 800190a:	0a9b      	lsrs	r3, r3, #10
 800190c:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001910:	fb01 f303 	mul.w	r3, r1, r3
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b00      	cmp	r3, #0
 8001918:	d005      	beq.n	8001926 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	3301      	adds	r3, #1
 800191e:	617b      	str	r3, [r7, #20]
 8001920:	e001      	b.n	8001926 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 8001922:	2301      	movs	r3, #1
 8001924:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d11c      	bne.n	8001966 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001936:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800193a:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001940:	683a      	ldr	r2, [r7, #0]
 8001942:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001946:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001952:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001956:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	461a      	mov	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	62da      	str	r2, [r3, #44]	; 0x2c
 8001964:	e04b      	b.n	80019fe <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 8001966:	2300      	movs	r3, #0
 8001968:	613b      	str	r3, [r7, #16]
 800196a:	e044      	b.n	80019f6 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001976:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800197a:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d107      	bne.n	8001992 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001990:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001996:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800199a:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	3b01      	subs	r3, #1
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d116      	bne.n	80019d4 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80019b4:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	4a25      	ldr	r2, [pc, #148]	; (8001a50 <HAL_ETH_TransmitFrame+0x1d0>)
 80019ba:	fb02 f203 	mul.w	r2, r2, r3
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	4413      	add	r3, r2
 80019c2:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80019c6:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019cc:	68fa      	ldr	r2, [r7, #12]
 80019ce:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80019d2:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019de:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80019e2:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	461a      	mov	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	3301      	adds	r3, #1
 80019f4:	613b      	str	r3, [r7, #16]
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d3b6      	bcc.n	800196c <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	f241 0314 	movw	r3, #4116	; 0x1014
 8001a06:	4413      	add	r3, r2
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0304 	and.w	r3, r3, #4
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d00d      	beq.n	8001a2e <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	f241 0314 	movw	r3, #4116	; 0x1014
 8001a1a:	4413      	add	r3, r2
 8001a1c:	2204      	movs	r2, #4
 8001a1e:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	f241 0304 	movw	r3, #4100	; 0x1004
 8001a28:	4413      	add	r3, r2
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2201      	movs	r2, #1
 8001a32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001a3e:	2300      	movs	r3, #0
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	371c      	adds	r7, #28
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	ac02b00b 	.word	0xac02b00b
 8001a50:	fffffa0c 	.word	0xfffffa0c

08001a54 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d101      	bne.n	8001a6e <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	e074      	b.n	8001b58 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2201      	movs	r2, #1
 8001a72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2202      	movs	r2, #2
 8001a7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001a7e:	e05a      	b.n	8001b36 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	3301      	adds	r3, #1
 8001a84:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a94:	d10d      	bne.n	8001ab2 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	461a      	mov	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	629a      	str	r2, [r3, #40]	; 0x28
 8001ab0:	e041      	b.n	8001b36 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d10b      	bne.n	8001ad8 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ac4:	1c5a      	adds	r2, r3, #1
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	629a      	str	r2, [r3, #40]	; 0x28
 8001ad6:	e02e      	b.n	8001b36 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ae4:	1c5a      	adds	r2, r3, #1
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d103      	bne.n	8001afa <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	0c1b      	lsrs	r3, r3, #16
 8001b02:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001b06:	1f1a      	subs	r2, r3, #4
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b10:	689a      	ldr	r2, [r3, #8]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2201      	movs	r2, #1
 8001b26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8001b32:	2300      	movs	r3, #0
 8001b34:	e010      	b.n	8001b58 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	db02      	blt.n	8001b46 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2b03      	cmp	r3, #3
 8001b44:	d99c      	bls.n	8001a80 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3714      	adds	r7, #20
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	f241 0314 	movw	r3, #4116	; 0x1014
 8001b74:	4413      	add	r3, r2
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b7c:	2b40      	cmp	r3, #64	; 0x40
 8001b7e:	d112      	bne.n	8001ba6 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f003 fd2f 	bl	80055e4 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	f241 0314 	movw	r3, #4116	; 0x1014
 8001b8e:	4413      	add	r3, r2
 8001b90:	2240      	movs	r2, #64	; 0x40
 8001b92:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001ba4:	e01b      	b.n	8001bde <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	f241 0314 	movw	r3, #4116	; 0x1014
 8001bae:	4413      	add	r3, r2
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d111      	bne.n	8001bde <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f000 f839 	bl	8001c32 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	f241 0314 	movw	r3, #4116	; 0x1014
 8001bc8:	4413      	add	r3, r2
 8001bca:	2201      	movs	r2, #1
 8001bcc:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	f241 0314 	movw	r3, #4116	; 0x1014
 8001be6:	4413      	add	r3, r2
 8001be8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001bec:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	f241 0314 	movw	r3, #4116	; 0x1014
 8001bf6:	4413      	add	r3, r2
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c02:	d112      	bne.n	8001c2a <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f000 f81e 	bl	8001c46 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	f241 0314 	movw	r3, #4116	; 0x1014
 8001c12:	4413      	add	r3, r2
 8001c14:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001c18:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001c2a:	bf00      	nop
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001c32:	b480      	push	{r7}
 8001c34:	b083      	sub	sp, #12
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001c46:	b480      	push	{r7}
 8001c48:	b083      	sub	sp, #12
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8001c4e:	bf00      	nop
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr

08001c5a <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b086      	sub	sp, #24
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	60f8      	str	r0, [r7, #12]
 8001c62:	460b      	mov	r3, r1
 8001c64:	607a      	str	r2, [r7, #4]
 8001c66:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001c68:	2300      	movs	r3, #0
 8001c6a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	2b82      	cmp	r3, #130	; 0x82
 8001c7a:	d101      	bne.n	8001c80 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	e050      	b.n	8001d22 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2282      	movs	r2, #130	; 0x82
 8001c84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	f003 031c 	and.w	r3, r3, #28
 8001c96:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	8a1b      	ldrh	r3, [r3, #16]
 8001c9c:	02db      	lsls	r3, r3, #11
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	697a      	ldr	r2, [r7, #20]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001ca6:	897b      	ldrh	r3, [r7, #10]
 8001ca8:	019b      	lsls	r3, r3, #6
 8001caa:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001cae:	697a      	ldr	r2, [r7, #20]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	f023 0302 	bic.w	r3, r3, #2
 8001cba:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	f043 0301 	orr.w	r3, r3, #1
 8001cc2:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	697a      	ldr	r2, [r7, #20]
 8001cca:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001ccc:	f7ff f9c4 	bl	8001058 <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001cd2:	e015      	b.n	8001d00 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001cd4:	f7ff f9c0 	bl	8001058 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ce2:	d309      	bcc.n	8001cf8 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e014      	b.n	8001d22 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	691b      	ldr	r3, [r3, #16]
 8001cfe:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1e4      	bne.n	8001cd4 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	695b      	ldr	r3, [r3, #20]
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	461a      	mov	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3718      	adds	r7, #24
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b086      	sub	sp, #24
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	60f8      	str	r0, [r7, #12]
 8001d32:	460b      	mov	r3, r1
 8001d34:	607a      	str	r2, [r7, #4]
 8001d36:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	2b42      	cmp	r3, #66	; 0x42
 8001d4a:	d101      	bne.n	8001d50 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	e04e      	b.n	8001dee <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2242      	movs	r2, #66	; 0x42
 8001d54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	f003 031c 	and.w	r3, r3, #28
 8001d66:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	8a1b      	ldrh	r3, [r3, #16]
 8001d6c:	02db      	lsls	r3, r3, #11
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	697a      	ldr	r2, [r7, #20]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001d76:	897b      	ldrh	r3, [r7, #10]
 8001d78:	019b      	lsls	r3, r3, #6
 8001d7a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001d7e:	697a      	ldr	r2, [r7, #20]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	f043 0302 	orr.w	r3, r3, #2
 8001d8a:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	f043 0301 	orr.w	r3, r3, #1
 8001d92:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	697a      	ldr	r2, [r7, #20]
 8001da4:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001da6:	f7ff f957 	bl	8001058 <HAL_GetTick>
 8001daa:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001dac:	e015      	b.n	8001dda <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001dae:	f7ff f953 	bl	8001058 <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dbc:	d309      	bcc.n	8001dd2 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e00d      	b.n	8001dee <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d1e4      	bne.n	8001dae <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3718      	adds	r7, #24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b082      	sub	sp, #8
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d101      	bne.n	8001e0c <HAL_ETH_Start+0x16>
 8001e08:	2302      	movs	r3, #2
 8001e0a:	e01f      	b.n	8001e4c <HAL_ETH_Start+0x56>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2202      	movs	r2, #2
 8001e18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f000 fb45 	bl	80024ac <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 fb7c 	bl	8002520 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f000 fc13 	bl	8002654 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 fbb0 	bl	8002594 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f000 fbdd 	bl	80025f4 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d101      	bne.n	8001e6a <HAL_ETH_Stop+0x16>
 8001e66:	2302      	movs	r3, #2
 8001e68:	e01f      	b.n	8001eaa <HAL_ETH_Stop+0x56>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2202      	movs	r2, #2
 8001e76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 fba2 	bl	80025c4 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f000 fbcf 	bl	8002624 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 fb67 	bl	800255a <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f000 fbe1 	bl	8002654 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 fb27 	bl	80024e6 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
	...

08001eb4 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d101      	bne.n	8001ed0 <HAL_ETH_ConfigMAC+0x1c>
 8001ecc:	2302      	movs	r3, #2
 8001ece:	e0e4      	b.n	800209a <HAL_ETH_ConfigMAC+0x1e6>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2202      	movs	r2, #2
 8001edc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	f000 80b1 	beq.w	800204a <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001ef0:	68fa      	ldr	r2, [r7, #12]
 8001ef2:	4b6c      	ldr	r3, [pc, #432]	; (80020a4 <HAL_ETH_ConfigMAC+0x1f0>)
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001f00:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001f06:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001f0c:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001f12:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001f18:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001f1e:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001f24:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001f2a:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001f30:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001f36:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001f3c:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001f42:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001f44:	68fa      	ldr	r2, [r7, #12]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f5a:	2001      	movs	r0, #1
 8001f5c:	f7ff f888 	bl	8001070 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	68fa      	ldr	r2, [r7, #12]
 8001f66:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001f70:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001f76:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001f7c:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001f82:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001f88:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001f8e:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001f9a:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001f9c:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fa6:	2001      	movs	r0, #1
 8001fa8:	f7ff f862 	bl	8001070 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	68fa      	ldr	r2, [r7, #12]
 8001fb2:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	683a      	ldr	r2, [r7, #0]
 8001fba:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001fbc:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	683a      	ldr	r2, [r7, #0]
 8001fc4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001fc6:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fde:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001fe4:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001fea:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001ff0:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001ff6:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001ffc:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	4313      	orrs	r3, r2
 8002002:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	68fa      	ldr	r2, [r7, #12]
 800200a:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002014:	2001      	movs	r0, #1
 8002016:	f7ff f82b 	bl	8001070 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	430a      	orrs	r2, r1
 8002030:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	69db      	ldr	r3, [r3, #28]
 8002038:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800203a:	2001      	movs	r0, #1
 800203c:	f7ff f818 	bl	8001070 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	61da      	str	r2, [r3, #28]
 8002048:	e01e      	b.n	8002088 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002058:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	689a      	ldr	r2, [r3, #8]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	4313      	orrs	r3, r2
 8002064:	68fa      	ldr	r2, [r7, #12]
 8002066:	4313      	orrs	r3, r2
 8002068:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800207a:	2001      	movs	r0, #1
 800207c:	f7fe fff8 	bl	8001070 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	ff20810f 	.word	0xff20810f

080020a8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b0b0      	sub	sp, #192	; 0xc0
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 80020b2:	2300      	movs	r3, #0
 80020b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d007      	beq.n	80020ce <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020c4:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80020ce:	2300      	movs	r3, #0
 80020d0:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80020d2:	2300      	movs	r3, #0
 80020d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80020d6:	2300      	movs	r3, #0
 80020d8:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80020da:	2300      	movs	r3, #0
 80020dc:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80020de:	2300      	movs	r3, #0
 80020e0:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80020e2:	2300      	movs	r3, #0
 80020e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	69db      	ldr	r3, [r3, #28]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d103      	bne.n	80020f6 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80020ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020f2:	663b      	str	r3, [r7, #96]	; 0x60
 80020f4:	e001      	b.n	80020fa <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80020f6:	2300      	movs	r3, #0
 80020f8:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80020fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020fe:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002100:	2300      	movs	r3, #0
 8002102:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002104:	2300      	movs	r3, #0
 8002106:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002108:	2300      	movs	r3, #0
 800210a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800210c:	2300      	movs	r3, #0
 800210e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002110:	2300      	movs	r3, #0
 8002112:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002114:	2340      	movs	r3, #64	; 0x40
 8002116:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002118:	2300      	movs	r3, #0
 800211a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800211e:	2300      	movs	r3, #0
 8002120:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002124:	2300      	movs	r3, #0
 8002126:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800212a:	2300      	movs	r3, #0
 800212c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002130:	2300      	movs	r3, #0
 8002132:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8002136:	2300      	movs	r3, #0
 8002138:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 800213c:	2300      	movs	r3, #0
 800213e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8002142:	2300      	movs	r3, #0
 8002144:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002148:	2380      	movs	r3, #128	; 0x80
 800214a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800214e:	2300      	movs	r3, #0
 8002150:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002154:	2300      	movs	r3, #0
 8002156:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800215a:	2300      	movs	r3, #0
 800215c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002160:	2300      	movs	r3, #0
 8002162:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002166:	2300      	movs	r3, #0
 8002168:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 800216c:	2300      	movs	r3, #0
 800216e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 800217c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002180:	4bab      	ldr	r3, [pc, #684]	; (8002430 <ETH_MACDMAConfig+0x388>)
 8002182:	4013      	ands	r3, r2
 8002184:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002188:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800218a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800218c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800218e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002190:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002192:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002194:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800219a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 800219c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800219e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80021a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80021a2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80021a8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80021aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80021ac:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80021ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80021b0:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80021b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80021b4:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80021b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80021b8:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80021ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80021bc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80021be:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021c2:	4313      	orrs	r3, r2
 80021c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021d0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021dc:	2001      	movs	r0, #1
 80021de:	f7fe ff47 	bl	8001070 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021ea:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80021ec:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80021ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80021f0:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80021f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80021f4:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80021f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80021fa:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80021fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002200:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002202:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002206:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002208:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800220c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002210:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002218:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800221a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002226:	2001      	movs	r0, #1
 8002228:	f7fe ff22 	bl	8001070 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002234:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800223e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002248:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002254:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002258:	f64f 7341 	movw	r3, #65345	; 0xff41
 800225c:	4013      	ands	r3, r2
 800225e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002262:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002266:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002268:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800226c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800226e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002272:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002274:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002278:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800227a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800227e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002280:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002284:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002286:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800228a:	4313      	orrs	r3, r2
 800228c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002298:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80022a4:	2001      	movs	r0, #1
 80022a6:	f7fe fee3 	bl	8001070 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022b2:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80022b4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80022b8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	430a      	orrs	r2, r1
 80022c2:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	69db      	ldr	r3, [r3, #28]
 80022ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80022ce:	2001      	movs	r0, #1
 80022d0:	f7fe fece 	bl	8001070 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022dc:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80022de:	2300      	movs	r3, #0
 80022e0:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80022e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022e6:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80022e8:	2300      	movs	r3, #0
 80022ea:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80022ec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80022f0:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80022f2:	2300      	movs	r3, #0
 80022f4:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80022f6:	2300      	movs	r3, #0
 80022f8:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80022fa:	2300      	movs	r3, #0
 80022fc:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80022fe:	2300      	movs	r3, #0
 8002300:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002302:	2304      	movs	r3, #4
 8002304:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002306:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800230a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800230c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002310:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002312:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002316:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002318:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800231c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800231e:	2380      	movs	r3, #128	; 0x80
 8002320:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8002322:	2300      	movs	r3, #0
 8002324:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002326:	2300      	movs	r3, #0
 8002328:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	f241 0318 	movw	r3, #4120	; 0x1018
 8002332:	4413      	add	r3, r2
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800233a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800233e:	4b3d      	ldr	r3, [pc, #244]	; (8002434 <ETH_MACDMAConfig+0x38c>)
 8002340:	4013      	ands	r3, r2
 8002342:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002346:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002348:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800234a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800234c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800234e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002350:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002352:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002354:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002356:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002358:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800235a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800235c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800235e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002362:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002364:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002366:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002368:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800236c:	4313      	orrs	r3, r2
 800236e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	f241 0318 	movw	r3, #4120	; 0x1018
 800237a:	4413      	add	r3, r2
 800237c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002380:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	f241 0318 	movw	r3, #4120	; 0x1018
 800238a:	4413      	add	r3, r2
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002392:	2001      	movs	r0, #1
 8002394:	f7fe fe6c 	bl	8001070 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	f241 0318 	movw	r3, #4120	; 0x1018
 80023a0:	4413      	add	r3, r2
 80023a2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023a6:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80023a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80023aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80023ac:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80023ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80023b0:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80023b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80023b4:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80023b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80023b8:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 80023ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023bc:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80023be:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80023c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 80023c2:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80023cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023d0:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80023e0:	2001      	movs	r0, #1
 80023e2:	f7fe fe45 	bl	8001070 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023ee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023f2:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d10d      	bne.n	8002418 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	f241 031c 	movw	r3, #4124	; 0x101c
 8002404:	4413      	add	r3, r2
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	6811      	ldr	r1, [r2, #0]
 800240c:	4a0a      	ldr	r2, [pc, #40]	; (8002438 <ETH_MACDMAConfig+0x390>)
 800240e:	431a      	orrs	r2, r3
 8002410:	f241 031c 	movw	r3, #4124	; 0x101c
 8002414:	440b      	add	r3, r1
 8002416:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	695b      	ldr	r3, [r3, #20]
 800241c:	461a      	mov	r2, r3
 800241e:	2100      	movs	r1, #0
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f000 f80b 	bl	800243c <ETH_MACAddressConfig>
}
 8002426:	bf00      	nop
 8002428:	37c0      	adds	r7, #192	; 0xc0
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	ff20810f 	.word	0xff20810f
 8002434:	f8de3f23 	.word	0xf8de3f23
 8002438:	00010040 	.word	0x00010040

0800243c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800243c:	b480      	push	{r7}
 800243e:	b087      	sub	sp, #28
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	3305      	adds	r3, #5
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	021b      	lsls	r3, r3, #8
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	3204      	adds	r2, #4
 8002454:	7812      	ldrb	r2, [r2, #0]
 8002456:	4313      	orrs	r3, r2
 8002458:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800245a:	68ba      	ldr	r2, [r7, #8]
 800245c:	4b11      	ldr	r3, [pc, #68]	; (80024a4 <ETH_MACAddressConfig+0x68>)
 800245e:	4413      	add	r3, r2
 8002460:	461a      	mov	r2, r3
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	3303      	adds	r3, #3
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	061a      	lsls	r2, r3, #24
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	3302      	adds	r3, #2
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	041b      	lsls	r3, r3, #16
 8002476:	431a      	orrs	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	3301      	adds	r3, #1
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	021b      	lsls	r3, r3, #8
 8002480:	4313      	orrs	r3, r2
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	7812      	ldrb	r2, [r2, #0]
 8002486:	4313      	orrs	r3, r2
 8002488:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800248a:	68ba      	ldr	r2, [r7, #8]
 800248c:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <ETH_MACAddressConfig+0x6c>)
 800248e:	4413      	add	r3, r2
 8002490:	461a      	mov	r2, r3
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	6013      	str	r3, [r2, #0]
}
 8002496:	bf00      	nop
 8002498:	371c      	adds	r7, #28
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	40028040 	.word	0x40028040
 80024a8:	40028044 	.word	0x40028044

080024ac <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80024b4:	2300      	movs	r3, #0
 80024b6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f042 0208 	orr.w	r2, r2, #8
 80024c6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024d0:	2001      	movs	r0, #1
 80024d2:	f7fe fdcd 	bl	8001070 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	601a      	str	r2, [r3, #0]
}
 80024de:	bf00      	nop
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b084      	sub	sp, #16
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80024ee:	2300      	movs	r3, #0
 80024f0:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 0208 	bic.w	r2, r2, #8
 8002500:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800250a:	2001      	movs	r0, #1
 800250c:	f7fe fdb0 	bl	8001070 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	601a      	str	r2, [r3, #0]
}
 8002518:	bf00      	nop
 800251a:	3710      	adds	r7, #16
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002528:	2300      	movs	r3, #0
 800252a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f042 0204 	orr.w	r2, r2, #4
 800253a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002544:	2001      	movs	r0, #1
 8002546:	f7fe fd93 	bl	8001070 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	601a      	str	r2, [r3, #0]
}
 8002552:	bf00      	nop
 8002554:	3710      	adds	r7, #16
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800255a:	b580      	push	{r7, lr}
 800255c:	b084      	sub	sp, #16
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002562:	2300      	movs	r3, #0
 8002564:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 0204 	bic.w	r2, r2, #4
 8002574:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800257e:	2001      	movs	r0, #1
 8002580:	f7fe fd76 	bl	8001070 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	68fa      	ldr	r2, [r7, #12]
 800258a:	601a      	str	r2, [r3, #0]
}
 800258c:	bf00      	nop
 800258e:	3710      	adds	r7, #16
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	f241 0318 	movw	r3, #4120	; 0x1018
 80025a4:	4413      	add	r3, r2
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	6811      	ldr	r1, [r2, #0]
 80025ac:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80025b0:	f241 0318 	movw	r3, #4120	; 0x1018
 80025b4:	440b      	add	r3, r1
 80025b6:	601a      	str	r2, [r3, #0]
}
 80025b8:	bf00      	nop
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	f241 0318 	movw	r3, #4120	; 0x1018
 80025d4:	4413      	add	r3, r2
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	6811      	ldr	r1, [r2, #0]
 80025dc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80025e0:	f241 0318 	movw	r3, #4120	; 0x1018
 80025e4:	440b      	add	r3, r1
 80025e6:	601a      	str	r2, [r3, #0]
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	f241 0318 	movw	r3, #4120	; 0x1018
 8002604:	4413      	add	r3, r2
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	6811      	ldr	r1, [r2, #0]
 800260c:	f043 0202 	orr.w	r2, r3, #2
 8002610:	f241 0318 	movw	r3, #4120	; 0x1018
 8002614:	440b      	add	r3, r1
 8002616:	601a      	str	r2, [r3, #0]
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	f241 0318 	movw	r3, #4120	; 0x1018
 8002634:	4413      	add	r3, r2
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	6811      	ldr	r1, [r2, #0]
 800263c:	f023 0202 	bic.w	r2, r3, #2
 8002640:	f241 0318 	movw	r3, #4120	; 0x1018
 8002644:	440b      	add	r3, r1
 8002646:	601a      	str	r2, [r3, #0]
}
 8002648:	bf00      	nop
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800265c:	2300      	movs	r3, #0
 800265e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	f241 0318 	movw	r3, #4120	; 0x1018
 8002668:	4413      	add	r3, r2
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	6811      	ldr	r1, [r2, #0]
 8002670:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002674:	f241 0318 	movw	r3, #4120	; 0x1018
 8002678:	440b      	add	r3, r1
 800267a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	f241 0318 	movw	r3, #4120	; 0x1018
 8002684:	4413      	add	r3, r2
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800268a:	2001      	movs	r0, #1
 800268c:	f7fe fcf0 	bl	8001070 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6819      	ldr	r1, [r3, #0]
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	f241 0318 	movw	r3, #4120	; 0x1018
 800269a:	440b      	add	r3, r1
 800269c:	601a      	str	r2, [r3, #0]
}
 800269e:	bf00      	nop
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
	...

080026a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b089      	sub	sp, #36	; 0x24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80026b2:	2300      	movs	r3, #0
 80026b4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80026b6:	2300      	movs	r3, #0
 80026b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80026ba:	2300      	movs	r3, #0
 80026bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80026be:	2300      	movs	r3, #0
 80026c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80026c2:	2300      	movs	r3, #0
 80026c4:	61fb      	str	r3, [r7, #28]
 80026c6:	e175      	b.n	80029b4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80026c8:	2201      	movs	r2, #1
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	697a      	ldr	r2, [r7, #20]
 80026d8:	4013      	ands	r3, r2
 80026da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	f040 8164 	bne.w	80029ae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d00b      	beq.n	8002706 <HAL_GPIO_Init+0x5e>
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d007      	beq.n	8002706 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026fa:	2b11      	cmp	r3, #17
 80026fc:	d003      	beq.n	8002706 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	2b12      	cmp	r3, #18
 8002704:	d130      	bne.n	8002768 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	2203      	movs	r2, #3
 8002712:	fa02 f303 	lsl.w	r3, r2, r3
 8002716:	43db      	mvns	r3, r3
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	4013      	ands	r3, r2
 800271c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	68da      	ldr	r2, [r3, #12]
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	4313      	orrs	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800273c:	2201      	movs	r2, #1
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	43db      	mvns	r3, r3
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	4013      	ands	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	091b      	lsrs	r3, r3, #4
 8002752:	f003 0201 	and.w	r2, r3, #1
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	4313      	orrs	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	2203      	movs	r2, #3
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	43db      	mvns	r3, r3
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	4013      	ands	r3, r2
 800277e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	689a      	ldr	r2, [r3, #8]
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	4313      	orrs	r3, r2
 8002790:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	2b02      	cmp	r3, #2
 800279e:	d003      	beq.n	80027a8 <HAL_GPIO_Init+0x100>
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	2b12      	cmp	r3, #18
 80027a6:	d123      	bne.n	80027f0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	08da      	lsrs	r2, r3, #3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	3208      	adds	r2, #8
 80027b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	f003 0307 	and.w	r3, r3, #7
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	220f      	movs	r2, #15
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	43db      	mvns	r3, r3
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	4013      	ands	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	691a      	ldr	r2, [r3, #16]
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	f003 0307 	and.w	r3, r3, #7
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	4313      	orrs	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	08da      	lsrs	r2, r3, #3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	3208      	adds	r2, #8
 80027ea:	69b9      	ldr	r1, [r7, #24]
 80027ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	2203      	movs	r2, #3
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	43db      	mvns	r3, r3
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	4013      	ands	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f003 0203 	and.w	r2, r3, #3
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	4313      	orrs	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800282c:	2b00      	cmp	r3, #0
 800282e:	f000 80be 	beq.w	80029ae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002832:	4b66      	ldr	r3, [pc, #408]	; (80029cc <HAL_GPIO_Init+0x324>)
 8002834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002836:	4a65      	ldr	r2, [pc, #404]	; (80029cc <HAL_GPIO_Init+0x324>)
 8002838:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800283c:	6453      	str	r3, [r2, #68]	; 0x44
 800283e:	4b63      	ldr	r3, [pc, #396]	; (80029cc <HAL_GPIO_Init+0x324>)
 8002840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002842:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002846:	60fb      	str	r3, [r7, #12]
 8002848:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800284a:	4a61      	ldr	r2, [pc, #388]	; (80029d0 <HAL_GPIO_Init+0x328>)
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	089b      	lsrs	r3, r3, #2
 8002850:	3302      	adds	r3, #2
 8002852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002856:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	f003 0303 	and.w	r3, r3, #3
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	220f      	movs	r2, #15
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	43db      	mvns	r3, r3
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	4013      	ands	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a58      	ldr	r2, [pc, #352]	; (80029d4 <HAL_GPIO_Init+0x32c>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d037      	beq.n	80028e6 <HAL_GPIO_Init+0x23e>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a57      	ldr	r2, [pc, #348]	; (80029d8 <HAL_GPIO_Init+0x330>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d031      	beq.n	80028e2 <HAL_GPIO_Init+0x23a>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a56      	ldr	r2, [pc, #344]	; (80029dc <HAL_GPIO_Init+0x334>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d02b      	beq.n	80028de <HAL_GPIO_Init+0x236>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a55      	ldr	r2, [pc, #340]	; (80029e0 <HAL_GPIO_Init+0x338>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d025      	beq.n	80028da <HAL_GPIO_Init+0x232>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a54      	ldr	r2, [pc, #336]	; (80029e4 <HAL_GPIO_Init+0x33c>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d01f      	beq.n	80028d6 <HAL_GPIO_Init+0x22e>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a53      	ldr	r2, [pc, #332]	; (80029e8 <HAL_GPIO_Init+0x340>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d019      	beq.n	80028d2 <HAL_GPIO_Init+0x22a>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a52      	ldr	r2, [pc, #328]	; (80029ec <HAL_GPIO_Init+0x344>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d013      	beq.n	80028ce <HAL_GPIO_Init+0x226>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a51      	ldr	r2, [pc, #324]	; (80029f0 <HAL_GPIO_Init+0x348>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d00d      	beq.n	80028ca <HAL_GPIO_Init+0x222>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a50      	ldr	r2, [pc, #320]	; (80029f4 <HAL_GPIO_Init+0x34c>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d007      	beq.n	80028c6 <HAL_GPIO_Init+0x21e>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a4f      	ldr	r2, [pc, #316]	; (80029f8 <HAL_GPIO_Init+0x350>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d101      	bne.n	80028c2 <HAL_GPIO_Init+0x21a>
 80028be:	2309      	movs	r3, #9
 80028c0:	e012      	b.n	80028e8 <HAL_GPIO_Init+0x240>
 80028c2:	230a      	movs	r3, #10
 80028c4:	e010      	b.n	80028e8 <HAL_GPIO_Init+0x240>
 80028c6:	2308      	movs	r3, #8
 80028c8:	e00e      	b.n	80028e8 <HAL_GPIO_Init+0x240>
 80028ca:	2307      	movs	r3, #7
 80028cc:	e00c      	b.n	80028e8 <HAL_GPIO_Init+0x240>
 80028ce:	2306      	movs	r3, #6
 80028d0:	e00a      	b.n	80028e8 <HAL_GPIO_Init+0x240>
 80028d2:	2305      	movs	r3, #5
 80028d4:	e008      	b.n	80028e8 <HAL_GPIO_Init+0x240>
 80028d6:	2304      	movs	r3, #4
 80028d8:	e006      	b.n	80028e8 <HAL_GPIO_Init+0x240>
 80028da:	2303      	movs	r3, #3
 80028dc:	e004      	b.n	80028e8 <HAL_GPIO_Init+0x240>
 80028de:	2302      	movs	r3, #2
 80028e0:	e002      	b.n	80028e8 <HAL_GPIO_Init+0x240>
 80028e2:	2301      	movs	r3, #1
 80028e4:	e000      	b.n	80028e8 <HAL_GPIO_Init+0x240>
 80028e6:	2300      	movs	r3, #0
 80028e8:	69fa      	ldr	r2, [r7, #28]
 80028ea:	f002 0203 	and.w	r2, r2, #3
 80028ee:	0092      	lsls	r2, r2, #2
 80028f0:	4093      	lsls	r3, r2
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80028f8:	4935      	ldr	r1, [pc, #212]	; (80029d0 <HAL_GPIO_Init+0x328>)
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	089b      	lsrs	r3, r3, #2
 80028fe:	3302      	adds	r3, #2
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002906:	4b3d      	ldr	r3, [pc, #244]	; (80029fc <HAL_GPIO_Init+0x354>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	43db      	mvns	r3, r3
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	4013      	ands	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	4313      	orrs	r3, r2
 8002928:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800292a:	4a34      	ldr	r2, [pc, #208]	; (80029fc <HAL_GPIO_Init+0x354>)
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002930:	4b32      	ldr	r3, [pc, #200]	; (80029fc <HAL_GPIO_Init+0x354>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	43db      	mvns	r3, r3
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	4013      	ands	r3, r2
 800293e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d003      	beq.n	8002954 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	4313      	orrs	r3, r2
 8002952:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002954:	4a29      	ldr	r2, [pc, #164]	; (80029fc <HAL_GPIO_Init+0x354>)
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800295a:	4b28      	ldr	r3, [pc, #160]	; (80029fc <HAL_GPIO_Init+0x354>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	43db      	mvns	r3, r3
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	4013      	ands	r3, r2
 8002968:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d003      	beq.n	800297e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	4313      	orrs	r3, r2
 800297c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800297e:	4a1f      	ldr	r2, [pc, #124]	; (80029fc <HAL_GPIO_Init+0x354>)
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002984:	4b1d      	ldr	r3, [pc, #116]	; (80029fc <HAL_GPIO_Init+0x354>)
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	43db      	mvns	r3, r3
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	4013      	ands	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d003      	beq.n	80029a8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029a8:	4a14      	ldr	r2, [pc, #80]	; (80029fc <HAL_GPIO_Init+0x354>)
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	3301      	adds	r3, #1
 80029b2:	61fb      	str	r3, [r7, #28]
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	2b0f      	cmp	r3, #15
 80029b8:	f67f ae86 	bls.w	80026c8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80029bc:	bf00      	nop
 80029be:	bf00      	nop
 80029c0:	3724      	adds	r7, #36	; 0x24
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	40023800 	.word	0x40023800
 80029d0:	40013800 	.word	0x40013800
 80029d4:	40020000 	.word	0x40020000
 80029d8:	40020400 	.word	0x40020400
 80029dc:	40020800 	.word	0x40020800
 80029e0:	40020c00 	.word	0x40020c00
 80029e4:	40021000 	.word	0x40021000
 80029e8:	40021400 	.word	0x40021400
 80029ec:	40021800 	.word	0x40021800
 80029f0:	40021c00 	.word	0x40021c00
 80029f4:	40022000 	.word	0x40022000
 80029f8:	40022400 	.word	0x40022400
 80029fc:	40013c00 	.word	0x40013c00

08002a00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	460b      	mov	r3, r1
 8002a0a:	807b      	strh	r3, [r7, #2]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a10:	787b      	ldrb	r3, [r7, #1]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d003      	beq.n	8002a1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a16:	887a      	ldrh	r2, [r7, #2]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002a1c:	e003      	b.n	8002a26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002a1e:	887b      	ldrh	r3, [r7, #2]
 8002a20:	041a      	lsls	r2, r3, #16
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	619a      	str	r2, [r3, #24]
}
 8002a26:	bf00      	nop
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr

08002a32 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a32:	b480      	push	{r7}
 8002a34:	b085      	sub	sp, #20
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a44:	887a      	ldrh	r2, [r7, #2]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	4013      	ands	r3, r2
 8002a4a:	041a      	lsls	r2, r3, #16
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	43d9      	mvns	r1, r3
 8002a50:	887b      	ldrh	r3, [r7, #2]
 8002a52:	400b      	ands	r3, r1
 8002a54:	431a      	orrs	r2, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	619a      	str	r2, [r3, #24]
}
 8002a5a:	bf00      	nop
 8002a5c:	3714      	adds	r7, #20
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
	...

08002a68 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a6c:	4b05      	ldr	r3, [pc, #20]	; (8002a84 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a04      	ldr	r2, [pc, #16]	; (8002a84 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a76:	6013      	str	r3, [r2, #0]
}
 8002a78:	bf00      	nop
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	40007000 	.word	0x40007000

08002a88 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002a92:	4b23      	ldr	r3, [pc, #140]	; (8002b20 <HAL_PWREx_EnableOverDrive+0x98>)
 8002a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a96:	4a22      	ldr	r2, [pc, #136]	; (8002b20 <HAL_PWREx_EnableOverDrive+0x98>)
 8002a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a9e:	4b20      	ldr	r3, [pc, #128]	; (8002b20 <HAL_PWREx_EnableOverDrive+0x98>)
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa6:	603b      	str	r3, [r7, #0]
 8002aa8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002aaa:	4b1e      	ldr	r3, [pc, #120]	; (8002b24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a1d      	ldr	r2, [pc, #116]	; (8002b24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ab4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ab6:	f7fe facf 	bl	8001058 <HAL_GetTick>
 8002aba:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002abc:	e009      	b.n	8002ad2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002abe:	f7fe facb 	bl	8001058 <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002acc:	d901      	bls.n	8002ad2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e022      	b.n	8002b18 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ad2:	4b14      	ldr	r3, [pc, #80]	; (8002b24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ada:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ade:	d1ee      	bne.n	8002abe <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002ae0:	4b10      	ldr	r3, [pc, #64]	; (8002b24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a0f      	ldr	r2, [pc, #60]	; (8002b24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ae6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002aec:	f7fe fab4 	bl	8001058 <HAL_GetTick>
 8002af0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002af2:	e009      	b.n	8002b08 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002af4:	f7fe fab0 	bl	8001058 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b02:	d901      	bls.n	8002b08 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e007      	b.n	8002b18 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b08:	4b06      	ldr	r3, [pc, #24]	; (8002b24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b14:	d1ee      	bne.n	8002af4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3708      	adds	r7, #8
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	40023800 	.word	0x40023800
 8002b24:	40007000 	.word	0x40007000

08002b28 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002b30:	2300      	movs	r3, #0
 8002b32:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e29b      	b.n	8003076 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f000 8087 	beq.w	8002c5a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b4c:	4b96      	ldr	r3, [pc, #600]	; (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f003 030c 	and.w	r3, r3, #12
 8002b54:	2b04      	cmp	r3, #4
 8002b56:	d00c      	beq.n	8002b72 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b58:	4b93      	ldr	r3, [pc, #588]	; (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f003 030c 	and.w	r3, r3, #12
 8002b60:	2b08      	cmp	r3, #8
 8002b62:	d112      	bne.n	8002b8a <HAL_RCC_OscConfig+0x62>
 8002b64:	4b90      	ldr	r3, [pc, #576]	; (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b70:	d10b      	bne.n	8002b8a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b72:	4b8d      	ldr	r3, [pc, #564]	; (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d06c      	beq.n	8002c58 <HAL_RCC_OscConfig+0x130>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d168      	bne.n	8002c58 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e275      	b.n	8003076 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b92:	d106      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x7a>
 8002b94:	4b84      	ldr	r3, [pc, #528]	; (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a83      	ldr	r2, [pc, #524]	; (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002b9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b9e:	6013      	str	r3, [r2, #0]
 8002ba0:	e02e      	b.n	8002c00 <HAL_RCC_OscConfig+0xd8>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10c      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x9c>
 8002baa:	4b7f      	ldr	r3, [pc, #508]	; (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a7e      	ldr	r2, [pc, #504]	; (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002bb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bb4:	6013      	str	r3, [r2, #0]
 8002bb6:	4b7c      	ldr	r3, [pc, #496]	; (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a7b      	ldr	r2, [pc, #492]	; (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002bbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bc0:	6013      	str	r3, [r2, #0]
 8002bc2:	e01d      	b.n	8002c00 <HAL_RCC_OscConfig+0xd8>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bcc:	d10c      	bne.n	8002be8 <HAL_RCC_OscConfig+0xc0>
 8002bce:	4b76      	ldr	r3, [pc, #472]	; (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a75      	ldr	r2, [pc, #468]	; (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002bd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bd8:	6013      	str	r3, [r2, #0]
 8002bda:	4b73      	ldr	r3, [pc, #460]	; (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a72      	ldr	r2, [pc, #456]	; (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002be4:	6013      	str	r3, [r2, #0]
 8002be6:	e00b      	b.n	8002c00 <HAL_RCC_OscConfig+0xd8>
 8002be8:	4b6f      	ldr	r3, [pc, #444]	; (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a6e      	ldr	r2, [pc, #440]	; (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002bee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bf2:	6013      	str	r3, [r2, #0]
 8002bf4:	4b6c      	ldr	r3, [pc, #432]	; (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a6b      	ldr	r2, [pc, #428]	; (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002bfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d013      	beq.n	8002c30 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c08:	f7fe fa26 	bl	8001058 <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c10:	f7fe fa22 	bl	8001058 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b64      	cmp	r3, #100	; 0x64
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e229      	b.n	8003076 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c22:	4b61      	ldr	r3, [pc, #388]	; (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d0f0      	beq.n	8002c10 <HAL_RCC_OscConfig+0xe8>
 8002c2e:	e014      	b.n	8002c5a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c30:	f7fe fa12 	bl	8001058 <HAL_GetTick>
 8002c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c36:	e008      	b.n	8002c4a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c38:	f7fe fa0e 	bl	8001058 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b64      	cmp	r3, #100	; 0x64
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e215      	b.n	8003076 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c4a:	4b57      	ldr	r3, [pc, #348]	; (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1f0      	bne.n	8002c38 <HAL_RCC_OscConfig+0x110>
 8002c56:	e000      	b.n	8002c5a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d069      	beq.n	8002d3a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c66:	4b50      	ldr	r3, [pc, #320]	; (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 030c 	and.w	r3, r3, #12
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00b      	beq.n	8002c8a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c72:	4b4d      	ldr	r3, [pc, #308]	; (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f003 030c 	and.w	r3, r3, #12
 8002c7a:	2b08      	cmp	r3, #8
 8002c7c:	d11c      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x190>
 8002c7e:	4b4a      	ldr	r3, [pc, #296]	; (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d116      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c8a:	4b47      	ldr	r3, [pc, #284]	; (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d005      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x17a>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d001      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e1e9      	b.n	8003076 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ca2:	4b41      	ldr	r3, [pc, #260]	; (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	493d      	ldr	r1, [pc, #244]	; (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cb6:	e040      	b.n	8002d3a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d023      	beq.n	8002d08 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cc0:	4b39      	ldr	r3, [pc, #228]	; (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a38      	ldr	r2, [pc, #224]	; (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002cc6:	f043 0301 	orr.w	r3, r3, #1
 8002cca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ccc:	f7fe f9c4 	bl	8001058 <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd2:	e008      	b.n	8002ce6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cd4:	f7fe f9c0 	bl	8001058 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e1c7      	b.n	8003076 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ce6:	4b30      	ldr	r3, [pc, #192]	; (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d0f0      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cf2:	4b2d      	ldr	r3, [pc, #180]	; (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	4929      	ldr	r1, [pc, #164]	; (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	600b      	str	r3, [r1, #0]
 8002d06:	e018      	b.n	8002d3a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d08:	4b27      	ldr	r3, [pc, #156]	; (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a26      	ldr	r2, [pc, #152]	; (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002d0e:	f023 0301 	bic.w	r3, r3, #1
 8002d12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d14:	f7fe f9a0 	bl	8001058 <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d1c:	f7fe f99c 	bl	8001058 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e1a3      	b.n	8003076 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d2e:	4b1e      	ldr	r3, [pc, #120]	; (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1f0      	bne.n	8002d1c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0308 	and.w	r3, r3, #8
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d038      	beq.n	8002db8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d019      	beq.n	8002d82 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d4e:	4b16      	ldr	r3, [pc, #88]	; (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002d50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d52:	4a15      	ldr	r2, [pc, #84]	; (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002d54:	f043 0301 	orr.w	r3, r3, #1
 8002d58:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d5a:	f7fe f97d 	bl	8001058 <HAL_GetTick>
 8002d5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d60:	e008      	b.n	8002d74 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d62:	f7fe f979 	bl	8001058 <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d901      	bls.n	8002d74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e180      	b.n	8003076 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d74:	4b0c      	ldr	r3, [pc, #48]	; (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002d76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d78:	f003 0302 	and.w	r3, r3, #2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d0f0      	beq.n	8002d62 <HAL_RCC_OscConfig+0x23a>
 8002d80:	e01a      	b.n	8002db8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d82:	4b09      	ldr	r3, [pc, #36]	; (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002d84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d86:	4a08      	ldr	r2, [pc, #32]	; (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002d88:	f023 0301 	bic.w	r3, r3, #1
 8002d8c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d8e:	f7fe f963 	bl	8001058 <HAL_GetTick>
 8002d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d94:	e00a      	b.n	8002dac <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d96:	f7fe f95f 	bl	8001058 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d903      	bls.n	8002dac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e166      	b.n	8003076 <HAL_RCC_OscConfig+0x54e>
 8002da8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dac:	4b92      	ldr	r3, [pc, #584]	; (8002ff8 <HAL_RCC_OscConfig+0x4d0>)
 8002dae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002db0:	f003 0302 	and.w	r3, r3, #2
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d1ee      	bne.n	8002d96 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0304 	and.w	r3, r3, #4
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f000 80a4 	beq.w	8002f0e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dc6:	4b8c      	ldr	r3, [pc, #560]	; (8002ff8 <HAL_RCC_OscConfig+0x4d0>)
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d10d      	bne.n	8002dee <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dd2:	4b89      	ldr	r3, [pc, #548]	; (8002ff8 <HAL_RCC_OscConfig+0x4d0>)
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	4a88      	ldr	r2, [pc, #544]	; (8002ff8 <HAL_RCC_OscConfig+0x4d0>)
 8002dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8002dde:	4b86      	ldr	r3, [pc, #536]	; (8002ff8 <HAL_RCC_OscConfig+0x4d0>)
 8002de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de6:	60bb      	str	r3, [r7, #8]
 8002de8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dea:	2301      	movs	r3, #1
 8002dec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dee:	4b83      	ldr	r3, [pc, #524]	; (8002ffc <HAL_RCC_OscConfig+0x4d4>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d118      	bne.n	8002e2c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002dfa:	4b80      	ldr	r3, [pc, #512]	; (8002ffc <HAL_RCC_OscConfig+0x4d4>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a7f      	ldr	r2, [pc, #508]	; (8002ffc <HAL_RCC_OscConfig+0x4d4>)
 8002e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e06:	f7fe f927 	bl	8001058 <HAL_GetTick>
 8002e0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e0c:	e008      	b.n	8002e20 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e0e:	f7fe f923 	bl	8001058 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	2b64      	cmp	r3, #100	; 0x64
 8002e1a:	d901      	bls.n	8002e20 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e12a      	b.n	8003076 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e20:	4b76      	ldr	r3, [pc, #472]	; (8002ffc <HAL_RCC_OscConfig+0x4d4>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d0f0      	beq.n	8002e0e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d106      	bne.n	8002e42 <HAL_RCC_OscConfig+0x31a>
 8002e34:	4b70      	ldr	r3, [pc, #448]	; (8002ff8 <HAL_RCC_OscConfig+0x4d0>)
 8002e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e38:	4a6f      	ldr	r2, [pc, #444]	; (8002ff8 <HAL_RCC_OscConfig+0x4d0>)
 8002e3a:	f043 0301 	orr.w	r3, r3, #1
 8002e3e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e40:	e02d      	b.n	8002e9e <HAL_RCC_OscConfig+0x376>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d10c      	bne.n	8002e64 <HAL_RCC_OscConfig+0x33c>
 8002e4a:	4b6b      	ldr	r3, [pc, #428]	; (8002ff8 <HAL_RCC_OscConfig+0x4d0>)
 8002e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4e:	4a6a      	ldr	r2, [pc, #424]	; (8002ff8 <HAL_RCC_OscConfig+0x4d0>)
 8002e50:	f023 0301 	bic.w	r3, r3, #1
 8002e54:	6713      	str	r3, [r2, #112]	; 0x70
 8002e56:	4b68      	ldr	r3, [pc, #416]	; (8002ff8 <HAL_RCC_OscConfig+0x4d0>)
 8002e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e5a:	4a67      	ldr	r2, [pc, #412]	; (8002ff8 <HAL_RCC_OscConfig+0x4d0>)
 8002e5c:	f023 0304 	bic.w	r3, r3, #4
 8002e60:	6713      	str	r3, [r2, #112]	; 0x70
 8002e62:	e01c      	b.n	8002e9e <HAL_RCC_OscConfig+0x376>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	2b05      	cmp	r3, #5
 8002e6a:	d10c      	bne.n	8002e86 <HAL_RCC_OscConfig+0x35e>
 8002e6c:	4b62      	ldr	r3, [pc, #392]	; (8002ff8 <HAL_RCC_OscConfig+0x4d0>)
 8002e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e70:	4a61      	ldr	r2, [pc, #388]	; (8002ff8 <HAL_RCC_OscConfig+0x4d0>)
 8002e72:	f043 0304 	orr.w	r3, r3, #4
 8002e76:	6713      	str	r3, [r2, #112]	; 0x70
 8002e78:	4b5f      	ldr	r3, [pc, #380]	; (8002ff8 <HAL_RCC_OscConfig+0x4d0>)
 8002e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e7c:	4a5e      	ldr	r2, [pc, #376]	; (8002ff8 <HAL_RCC_OscConfig+0x4d0>)
 8002e7e:	f043 0301 	orr.w	r3, r3, #1
 8002e82:	6713      	str	r3, [r2, #112]	; 0x70
 8002e84:	e00b      	b.n	8002e9e <HAL_RCC_OscConfig+0x376>
 8002e86:	4b5c      	ldr	r3, [pc, #368]	; (8002ff8 <HAL_RCC_OscConfig+0x4d0>)
 8002e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8a:	4a5b      	ldr	r2, [pc, #364]	; (8002ff8 <HAL_RCC_OscConfig+0x4d0>)
 8002e8c:	f023 0301 	bic.w	r3, r3, #1
 8002e90:	6713      	str	r3, [r2, #112]	; 0x70
 8002e92:	4b59      	ldr	r3, [pc, #356]	; (8002ff8 <HAL_RCC_OscConfig+0x4d0>)
 8002e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e96:	4a58      	ldr	r2, [pc, #352]	; (8002ff8 <HAL_RCC_OscConfig+0x4d0>)
 8002e98:	f023 0304 	bic.w	r3, r3, #4
 8002e9c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d015      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea6:	f7fe f8d7 	bl	8001058 <HAL_GetTick>
 8002eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eac:	e00a      	b.n	8002ec4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eae:	f7fe f8d3 	bl	8001058 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d901      	bls.n	8002ec4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e0d8      	b.n	8003076 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ec4:	4b4c      	ldr	r3, [pc, #304]	; (8002ff8 <HAL_RCC_OscConfig+0x4d0>)
 8002ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d0ee      	beq.n	8002eae <HAL_RCC_OscConfig+0x386>
 8002ed0:	e014      	b.n	8002efc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed2:	f7fe f8c1 	bl	8001058 <HAL_GetTick>
 8002ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ed8:	e00a      	b.n	8002ef0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eda:	f7fe f8bd 	bl	8001058 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d901      	bls.n	8002ef0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e0c2      	b.n	8003076 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ef0:	4b41      	ldr	r3, [pc, #260]	; (8002ff8 <HAL_RCC_OscConfig+0x4d0>)
 8002ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d1ee      	bne.n	8002eda <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002efc:	7dfb      	ldrb	r3, [r7, #23]
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d105      	bne.n	8002f0e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f02:	4b3d      	ldr	r3, [pc, #244]	; (8002ff8 <HAL_RCC_OscConfig+0x4d0>)
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	4a3c      	ldr	r2, [pc, #240]	; (8002ff8 <HAL_RCC_OscConfig+0x4d0>)
 8002f08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f0c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f000 80ae 	beq.w	8003074 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f18:	4b37      	ldr	r3, [pc, #220]	; (8002ff8 <HAL_RCC_OscConfig+0x4d0>)
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f003 030c 	and.w	r3, r3, #12
 8002f20:	2b08      	cmp	r3, #8
 8002f22:	d06d      	beq.n	8003000 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d14b      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f2c:	4b32      	ldr	r3, [pc, #200]	; (8002ff8 <HAL_RCC_OscConfig+0x4d0>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a31      	ldr	r2, [pc, #196]	; (8002ff8 <HAL_RCC_OscConfig+0x4d0>)
 8002f32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f38:	f7fe f88e 	bl	8001058 <HAL_GetTick>
 8002f3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f3e:	e008      	b.n	8002f52 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f40:	f7fe f88a 	bl	8001058 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e091      	b.n	8003076 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f52:	4b29      	ldr	r3, [pc, #164]	; (8002ff8 <HAL_RCC_OscConfig+0x4d0>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1f0      	bne.n	8002f40 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	69da      	ldr	r2, [r3, #28]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a1b      	ldr	r3, [r3, #32]
 8002f66:	431a      	orrs	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6c:	019b      	lsls	r3, r3, #6
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f74:	085b      	lsrs	r3, r3, #1
 8002f76:	3b01      	subs	r3, #1
 8002f78:	041b      	lsls	r3, r3, #16
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f80:	061b      	lsls	r3, r3, #24
 8002f82:	431a      	orrs	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f88:	071b      	lsls	r3, r3, #28
 8002f8a:	491b      	ldr	r1, [pc, #108]	; (8002ff8 <HAL_RCC_OscConfig+0x4d0>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f90:	4b19      	ldr	r3, [pc, #100]	; (8002ff8 <HAL_RCC_OscConfig+0x4d0>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a18      	ldr	r2, [pc, #96]	; (8002ff8 <HAL_RCC_OscConfig+0x4d0>)
 8002f96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f9c:	f7fe f85c 	bl	8001058 <HAL_GetTick>
 8002fa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fa2:	e008      	b.n	8002fb6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fa4:	f7fe f858 	bl	8001058 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e05f      	b.n	8003076 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fb6:	4b10      	ldr	r3, [pc, #64]	; (8002ff8 <HAL_RCC_OscConfig+0x4d0>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d0f0      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x47c>
 8002fc2:	e057      	b.n	8003074 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fc4:	4b0c      	ldr	r3, [pc, #48]	; (8002ff8 <HAL_RCC_OscConfig+0x4d0>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a0b      	ldr	r2, [pc, #44]	; (8002ff8 <HAL_RCC_OscConfig+0x4d0>)
 8002fca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd0:	f7fe f842 	bl	8001058 <HAL_GetTick>
 8002fd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fd6:	e008      	b.n	8002fea <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fd8:	f7fe f83e 	bl	8001058 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e045      	b.n	8003076 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fea:	4b03      	ldr	r3, [pc, #12]	; (8002ff8 <HAL_RCC_OscConfig+0x4d0>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1f0      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x4b0>
 8002ff6:	e03d      	b.n	8003074 <HAL_RCC_OscConfig+0x54c>
 8002ff8:	40023800 	.word	0x40023800
 8002ffc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003000:	4b1f      	ldr	r3, [pc, #124]	; (8003080 <HAL_RCC_OscConfig+0x558>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d030      	beq.n	8003070 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003018:	429a      	cmp	r2, r3
 800301a:	d129      	bne.n	8003070 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003026:	429a      	cmp	r2, r3
 8003028:	d122      	bne.n	8003070 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800302a:	68fa      	ldr	r2, [r7, #12]
 800302c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003030:	4013      	ands	r3, r2
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003036:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003038:	4293      	cmp	r3, r2
 800303a:	d119      	bne.n	8003070 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003046:	085b      	lsrs	r3, r3, #1
 8003048:	3b01      	subs	r3, #1
 800304a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800304c:	429a      	cmp	r2, r3
 800304e:	d10f      	bne.n	8003070 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800305c:	429a      	cmp	r2, r3
 800305e:	d107      	bne.n	8003070 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800306c:	429a      	cmp	r2, r3
 800306e:	d001      	beq.n	8003074 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e000      	b.n	8003076 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3718      	adds	r7, #24
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	40023800 	.word	0x40023800

08003084 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800308e:	2300      	movs	r3, #0
 8003090:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d101      	bne.n	800309c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e0d0      	b.n	800323e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800309c:	4b6a      	ldr	r3, [pc, #424]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 030f 	and.w	r3, r3, #15
 80030a4:	683a      	ldr	r2, [r7, #0]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d910      	bls.n	80030cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030aa:	4b67      	ldr	r3, [pc, #412]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f023 020f 	bic.w	r2, r3, #15
 80030b2:	4965      	ldr	r1, [pc, #404]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ba:	4b63      	ldr	r3, [pc, #396]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 030f 	and.w	r3, r3, #15
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d001      	beq.n	80030cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e0b8      	b.n	800323e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d020      	beq.n	800311a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0304 	and.w	r3, r3, #4
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d005      	beq.n	80030f0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030e4:	4b59      	ldr	r3, [pc, #356]	; (800324c <HAL_RCC_ClockConfig+0x1c8>)
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	4a58      	ldr	r2, [pc, #352]	; (800324c <HAL_RCC_ClockConfig+0x1c8>)
 80030ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0308 	and.w	r3, r3, #8
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d005      	beq.n	8003108 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030fc:	4b53      	ldr	r3, [pc, #332]	; (800324c <HAL_RCC_ClockConfig+0x1c8>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	4a52      	ldr	r2, [pc, #328]	; (800324c <HAL_RCC_ClockConfig+0x1c8>)
 8003102:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003106:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003108:	4b50      	ldr	r3, [pc, #320]	; (800324c <HAL_RCC_ClockConfig+0x1c8>)
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	494d      	ldr	r1, [pc, #308]	; (800324c <HAL_RCC_ClockConfig+0x1c8>)
 8003116:	4313      	orrs	r3, r2
 8003118:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	2b00      	cmp	r3, #0
 8003124:	d040      	beq.n	80031a8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d107      	bne.n	800313e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800312e:	4b47      	ldr	r3, [pc, #284]	; (800324c <HAL_RCC_ClockConfig+0x1c8>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d115      	bne.n	8003166 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e07f      	b.n	800323e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	2b02      	cmp	r3, #2
 8003144:	d107      	bne.n	8003156 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003146:	4b41      	ldr	r3, [pc, #260]	; (800324c <HAL_RCC_ClockConfig+0x1c8>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d109      	bne.n	8003166 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e073      	b.n	800323e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003156:	4b3d      	ldr	r3, [pc, #244]	; (800324c <HAL_RCC_ClockConfig+0x1c8>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e06b      	b.n	800323e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003166:	4b39      	ldr	r3, [pc, #228]	; (800324c <HAL_RCC_ClockConfig+0x1c8>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f023 0203 	bic.w	r2, r3, #3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	4936      	ldr	r1, [pc, #216]	; (800324c <HAL_RCC_ClockConfig+0x1c8>)
 8003174:	4313      	orrs	r3, r2
 8003176:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003178:	f7fd ff6e 	bl	8001058 <HAL_GetTick>
 800317c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800317e:	e00a      	b.n	8003196 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003180:	f7fd ff6a 	bl	8001058 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	f241 3288 	movw	r2, #5000	; 0x1388
 800318e:	4293      	cmp	r3, r2
 8003190:	d901      	bls.n	8003196 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e053      	b.n	800323e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003196:	4b2d      	ldr	r3, [pc, #180]	; (800324c <HAL_RCC_ClockConfig+0x1c8>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f003 020c 	and.w	r2, r3, #12
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d1eb      	bne.n	8003180 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031a8:	4b27      	ldr	r3, [pc, #156]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 030f 	and.w	r3, r3, #15
 80031b0:	683a      	ldr	r2, [r7, #0]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d210      	bcs.n	80031d8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031b6:	4b24      	ldr	r3, [pc, #144]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f023 020f 	bic.w	r2, r3, #15
 80031be:	4922      	ldr	r1, [pc, #136]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031c6:	4b20      	ldr	r3, [pc, #128]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 030f 	and.w	r3, r3, #15
 80031ce:	683a      	ldr	r2, [r7, #0]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d001      	beq.n	80031d8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e032      	b.n	800323e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0304 	and.w	r3, r3, #4
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d008      	beq.n	80031f6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031e4:	4b19      	ldr	r3, [pc, #100]	; (800324c <HAL_RCC_ClockConfig+0x1c8>)
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	4916      	ldr	r1, [pc, #88]	; (800324c <HAL_RCC_ClockConfig+0x1c8>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0308 	and.w	r3, r3, #8
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d009      	beq.n	8003216 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003202:	4b12      	ldr	r3, [pc, #72]	; (800324c <HAL_RCC_ClockConfig+0x1c8>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	490e      	ldr	r1, [pc, #56]	; (800324c <HAL_RCC_ClockConfig+0x1c8>)
 8003212:	4313      	orrs	r3, r2
 8003214:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003216:	f000 f821 	bl	800325c <HAL_RCC_GetSysClockFreq>
 800321a:	4602      	mov	r2, r0
 800321c:	4b0b      	ldr	r3, [pc, #44]	; (800324c <HAL_RCC_ClockConfig+0x1c8>)
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	091b      	lsrs	r3, r3, #4
 8003222:	f003 030f 	and.w	r3, r3, #15
 8003226:	490a      	ldr	r1, [pc, #40]	; (8003250 <HAL_RCC_ClockConfig+0x1cc>)
 8003228:	5ccb      	ldrb	r3, [r1, r3]
 800322a:	fa22 f303 	lsr.w	r3, r2, r3
 800322e:	4a09      	ldr	r2, [pc, #36]	; (8003254 <HAL_RCC_ClockConfig+0x1d0>)
 8003230:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003232:	4b09      	ldr	r3, [pc, #36]	; (8003258 <HAL_RCC_ClockConfig+0x1d4>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4618      	mov	r0, r3
 8003238:	f7fd fd5c 	bl	8000cf4 <HAL_InitTick>

  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	40023c00 	.word	0x40023c00
 800324c:	40023800 	.word	0x40023800
 8003250:	0801f028 	.word	0x0801f028
 8003254:	20000000 	.word	0x20000000
 8003258:	20000004 	.word	0x20000004

0800325c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800325c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003260:	b084      	sub	sp, #16
 8003262:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003264:	2300      	movs	r3, #0
 8003266:	607b      	str	r3, [r7, #4]
 8003268:	2300      	movs	r3, #0
 800326a:	60fb      	str	r3, [r7, #12]
 800326c:	2300      	movs	r3, #0
 800326e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003270:	2300      	movs	r3, #0
 8003272:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003274:	4b67      	ldr	r3, [pc, #412]	; (8003414 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f003 030c 	and.w	r3, r3, #12
 800327c:	2b08      	cmp	r3, #8
 800327e:	d00d      	beq.n	800329c <HAL_RCC_GetSysClockFreq+0x40>
 8003280:	2b08      	cmp	r3, #8
 8003282:	f200 80bd 	bhi.w	8003400 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003286:	2b00      	cmp	r3, #0
 8003288:	d002      	beq.n	8003290 <HAL_RCC_GetSysClockFreq+0x34>
 800328a:	2b04      	cmp	r3, #4
 800328c:	d003      	beq.n	8003296 <HAL_RCC_GetSysClockFreq+0x3a>
 800328e:	e0b7      	b.n	8003400 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003290:	4b61      	ldr	r3, [pc, #388]	; (8003418 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003292:	60bb      	str	r3, [r7, #8]
      break;
 8003294:	e0b7      	b.n	8003406 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003296:	4b61      	ldr	r3, [pc, #388]	; (800341c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003298:	60bb      	str	r3, [r7, #8]
      break;
 800329a:	e0b4      	b.n	8003406 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800329c:	4b5d      	ldr	r3, [pc, #372]	; (8003414 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032a4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80032a6:	4b5b      	ldr	r3, [pc, #364]	; (8003414 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d04d      	beq.n	800334e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032b2:	4b58      	ldr	r3, [pc, #352]	; (8003414 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	099b      	lsrs	r3, r3, #6
 80032b8:	461a      	mov	r2, r3
 80032ba:	f04f 0300 	mov.w	r3, #0
 80032be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80032c2:	f04f 0100 	mov.w	r1, #0
 80032c6:	ea02 0800 	and.w	r8, r2, r0
 80032ca:	ea03 0901 	and.w	r9, r3, r1
 80032ce:	4640      	mov	r0, r8
 80032d0:	4649      	mov	r1, r9
 80032d2:	f04f 0200 	mov.w	r2, #0
 80032d6:	f04f 0300 	mov.w	r3, #0
 80032da:	014b      	lsls	r3, r1, #5
 80032dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80032e0:	0142      	lsls	r2, r0, #5
 80032e2:	4610      	mov	r0, r2
 80032e4:	4619      	mov	r1, r3
 80032e6:	ebb0 0008 	subs.w	r0, r0, r8
 80032ea:	eb61 0109 	sbc.w	r1, r1, r9
 80032ee:	f04f 0200 	mov.w	r2, #0
 80032f2:	f04f 0300 	mov.w	r3, #0
 80032f6:	018b      	lsls	r3, r1, #6
 80032f8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80032fc:	0182      	lsls	r2, r0, #6
 80032fe:	1a12      	subs	r2, r2, r0
 8003300:	eb63 0301 	sbc.w	r3, r3, r1
 8003304:	f04f 0000 	mov.w	r0, #0
 8003308:	f04f 0100 	mov.w	r1, #0
 800330c:	00d9      	lsls	r1, r3, #3
 800330e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003312:	00d0      	lsls	r0, r2, #3
 8003314:	4602      	mov	r2, r0
 8003316:	460b      	mov	r3, r1
 8003318:	eb12 0208 	adds.w	r2, r2, r8
 800331c:	eb43 0309 	adc.w	r3, r3, r9
 8003320:	f04f 0000 	mov.w	r0, #0
 8003324:	f04f 0100 	mov.w	r1, #0
 8003328:	0259      	lsls	r1, r3, #9
 800332a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800332e:	0250      	lsls	r0, r2, #9
 8003330:	4602      	mov	r2, r0
 8003332:	460b      	mov	r3, r1
 8003334:	4610      	mov	r0, r2
 8003336:	4619      	mov	r1, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	461a      	mov	r2, r3
 800333c:	f04f 0300 	mov.w	r3, #0
 8003340:	f7fc ffce 	bl	80002e0 <__aeabi_uldivmod>
 8003344:	4602      	mov	r2, r0
 8003346:	460b      	mov	r3, r1
 8003348:	4613      	mov	r3, r2
 800334a:	60fb      	str	r3, [r7, #12]
 800334c:	e04a      	b.n	80033e4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800334e:	4b31      	ldr	r3, [pc, #196]	; (8003414 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	099b      	lsrs	r3, r3, #6
 8003354:	461a      	mov	r2, r3
 8003356:	f04f 0300 	mov.w	r3, #0
 800335a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800335e:	f04f 0100 	mov.w	r1, #0
 8003362:	ea02 0400 	and.w	r4, r2, r0
 8003366:	ea03 0501 	and.w	r5, r3, r1
 800336a:	4620      	mov	r0, r4
 800336c:	4629      	mov	r1, r5
 800336e:	f04f 0200 	mov.w	r2, #0
 8003372:	f04f 0300 	mov.w	r3, #0
 8003376:	014b      	lsls	r3, r1, #5
 8003378:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800337c:	0142      	lsls	r2, r0, #5
 800337e:	4610      	mov	r0, r2
 8003380:	4619      	mov	r1, r3
 8003382:	1b00      	subs	r0, r0, r4
 8003384:	eb61 0105 	sbc.w	r1, r1, r5
 8003388:	f04f 0200 	mov.w	r2, #0
 800338c:	f04f 0300 	mov.w	r3, #0
 8003390:	018b      	lsls	r3, r1, #6
 8003392:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003396:	0182      	lsls	r2, r0, #6
 8003398:	1a12      	subs	r2, r2, r0
 800339a:	eb63 0301 	sbc.w	r3, r3, r1
 800339e:	f04f 0000 	mov.w	r0, #0
 80033a2:	f04f 0100 	mov.w	r1, #0
 80033a6:	00d9      	lsls	r1, r3, #3
 80033a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80033ac:	00d0      	lsls	r0, r2, #3
 80033ae:	4602      	mov	r2, r0
 80033b0:	460b      	mov	r3, r1
 80033b2:	1912      	adds	r2, r2, r4
 80033b4:	eb45 0303 	adc.w	r3, r5, r3
 80033b8:	f04f 0000 	mov.w	r0, #0
 80033bc:	f04f 0100 	mov.w	r1, #0
 80033c0:	0299      	lsls	r1, r3, #10
 80033c2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80033c6:	0290      	lsls	r0, r2, #10
 80033c8:	4602      	mov	r2, r0
 80033ca:	460b      	mov	r3, r1
 80033cc:	4610      	mov	r0, r2
 80033ce:	4619      	mov	r1, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	461a      	mov	r2, r3
 80033d4:	f04f 0300 	mov.w	r3, #0
 80033d8:	f7fc ff82 	bl	80002e0 <__aeabi_uldivmod>
 80033dc:	4602      	mov	r2, r0
 80033de:	460b      	mov	r3, r1
 80033e0:	4613      	mov	r3, r2
 80033e2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80033e4:	4b0b      	ldr	r3, [pc, #44]	; (8003414 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	0c1b      	lsrs	r3, r3, #16
 80033ea:	f003 0303 	and.w	r3, r3, #3
 80033ee:	3301      	adds	r3, #1
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033fc:	60bb      	str	r3, [r7, #8]
      break;
 80033fe:	e002      	b.n	8003406 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003400:	4b05      	ldr	r3, [pc, #20]	; (8003418 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003402:	60bb      	str	r3, [r7, #8]
      break;
 8003404:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003406:	68bb      	ldr	r3, [r7, #8]
}
 8003408:	4618      	mov	r0, r3
 800340a:	3710      	adds	r7, #16
 800340c:	46bd      	mov	sp, r7
 800340e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003412:	bf00      	nop
 8003414:	40023800 	.word	0x40023800
 8003418:	00f42400 	.word	0x00f42400
 800341c:	007a1200 	.word	0x007a1200

08003420 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003420:	b480      	push	{r7}
 8003422:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003424:	4b03      	ldr	r3, [pc, #12]	; (8003434 <HAL_RCC_GetHCLKFreq+0x14>)
 8003426:	681b      	ldr	r3, [r3, #0]
}
 8003428:	4618      	mov	r0, r3
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	20000000 	.word	0x20000000

08003438 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800343c:	f7ff fff0 	bl	8003420 <HAL_RCC_GetHCLKFreq>
 8003440:	4602      	mov	r2, r0
 8003442:	4b05      	ldr	r3, [pc, #20]	; (8003458 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	0a9b      	lsrs	r3, r3, #10
 8003448:	f003 0307 	and.w	r3, r3, #7
 800344c:	4903      	ldr	r1, [pc, #12]	; (800345c <HAL_RCC_GetPCLK1Freq+0x24>)
 800344e:	5ccb      	ldrb	r3, [r1, r3]
 8003450:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003454:	4618      	mov	r0, r3
 8003456:	bd80      	pop	{r7, pc}
 8003458:	40023800 	.word	0x40023800
 800345c:	0801f038 	.word	0x0801f038

08003460 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003464:	f7ff ffdc 	bl	8003420 <HAL_RCC_GetHCLKFreq>
 8003468:	4602      	mov	r2, r0
 800346a:	4b05      	ldr	r3, [pc, #20]	; (8003480 <HAL_RCC_GetPCLK2Freq+0x20>)
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	0b5b      	lsrs	r3, r3, #13
 8003470:	f003 0307 	and.w	r3, r3, #7
 8003474:	4903      	ldr	r1, [pc, #12]	; (8003484 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003476:	5ccb      	ldrb	r3, [r1, r3]
 8003478:	fa22 f303 	lsr.w	r3, r2, r3
}
 800347c:	4618      	mov	r0, r3
 800347e:	bd80      	pop	{r7, pc}
 8003480:	40023800 	.word	0x40023800
 8003484:	0801f038 	.word	0x0801f038

08003488 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	220f      	movs	r2, #15
 8003496:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003498:	4b12      	ldr	r3, [pc, #72]	; (80034e4 <HAL_RCC_GetClockConfig+0x5c>)
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f003 0203 	and.w	r2, r3, #3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80034a4:	4b0f      	ldr	r3, [pc, #60]	; (80034e4 <HAL_RCC_GetClockConfig+0x5c>)
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80034b0:	4b0c      	ldr	r3, [pc, #48]	; (80034e4 <HAL_RCC_GetClockConfig+0x5c>)
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80034bc:	4b09      	ldr	r3, [pc, #36]	; (80034e4 <HAL_RCC_GetClockConfig+0x5c>)
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	08db      	lsrs	r3, r3, #3
 80034c2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80034ca:	4b07      	ldr	r3, [pc, #28]	; (80034e8 <HAL_RCC_GetClockConfig+0x60>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 020f 	and.w	r2, r3, #15
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	601a      	str	r2, [r3, #0]
}
 80034d6:	bf00      	nop
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	40023800 	.word	0x40023800
 80034e8:	40023c00 	.word	0x40023c00

080034ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b088      	sub	sp, #32
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80034f4:	2300      	movs	r3, #0
 80034f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80034f8:	2300      	movs	r3, #0
 80034fa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80034fc:	2300      	movs	r3, #0
 80034fe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003500:	2300      	movs	r3, #0
 8003502:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003504:	2300      	movs	r3, #0
 8003506:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0301 	and.w	r3, r3, #1
 8003510:	2b00      	cmp	r3, #0
 8003512:	d012      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003514:	4b69      	ldr	r3, [pc, #420]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	4a68      	ldr	r2, [pc, #416]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800351a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800351e:	6093      	str	r3, [r2, #8]
 8003520:	4b66      	ldr	r3, [pc, #408]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003522:	689a      	ldr	r2, [r3, #8]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003528:	4964      	ldr	r1, [pc, #400]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800352a:	4313      	orrs	r3, r2
 800352c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003536:	2301      	movs	r3, #1
 8003538:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d017      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003546:	4b5d      	ldr	r3, [pc, #372]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003548:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800354c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003554:	4959      	ldr	r1, [pc, #356]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003556:	4313      	orrs	r3, r2
 8003558:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003560:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003564:	d101      	bne.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003566:	2301      	movs	r3, #1
 8003568:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800356e:	2b00      	cmp	r3, #0
 8003570:	d101      	bne.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003572:	2301      	movs	r3, #1
 8003574:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d017      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003582:	4b4e      	ldr	r3, [pc, #312]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003584:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003588:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003590:	494a      	ldr	r1, [pc, #296]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003592:	4313      	orrs	r3, r2
 8003594:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035a0:	d101      	bne.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80035a2:	2301      	movs	r3, #1
 80035a4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d101      	bne.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80035ae:	2301      	movs	r3, #1
 80035b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d001      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80035be:	2301      	movs	r3, #1
 80035c0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0320 	and.w	r3, r3, #32
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	f000 808b 	beq.w	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80035d0:	4b3a      	ldr	r3, [pc, #232]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d4:	4a39      	ldr	r2, [pc, #228]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035da:	6413      	str	r3, [r2, #64]	; 0x40
 80035dc:	4b37      	ldr	r3, [pc, #220]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e4:	60bb      	str	r3, [r7, #8]
 80035e6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80035e8:	4b35      	ldr	r3, [pc, #212]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a34      	ldr	r2, [pc, #208]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80035ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035f4:	f7fd fd30 	bl	8001058 <HAL_GetTick>
 80035f8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80035fa:	e008      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035fc:	f7fd fd2c 	bl	8001058 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b64      	cmp	r3, #100	; 0x64
 8003608:	d901      	bls.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e38f      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800360e:	4b2c      	ldr	r3, [pc, #176]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003616:	2b00      	cmp	r3, #0
 8003618:	d0f0      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800361a:	4b28      	ldr	r3, [pc, #160]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800361c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003622:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d035      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	429a      	cmp	r2, r3
 8003636:	d02e      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003638:	4b20      	ldr	r3, [pc, #128]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800363a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003640:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003642:	4b1e      	ldr	r3, [pc, #120]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003646:	4a1d      	ldr	r2, [pc, #116]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003648:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800364c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800364e:	4b1b      	ldr	r3, [pc, #108]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003652:	4a1a      	ldr	r2, [pc, #104]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003654:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003658:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800365a:	4a18      	ldr	r2, [pc, #96]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003660:	4b16      	ldr	r3, [pc, #88]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003664:	f003 0301 	and.w	r3, r3, #1
 8003668:	2b01      	cmp	r3, #1
 800366a:	d114      	bne.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800366c:	f7fd fcf4 	bl	8001058 <HAL_GetTick>
 8003670:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003672:	e00a      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003674:	f7fd fcf0 	bl	8001058 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003682:	4293      	cmp	r3, r2
 8003684:	d901      	bls.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e351      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800368a:	4b0c      	ldr	r3, [pc, #48]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800368c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d0ee      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800369e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036a2:	d111      	bne.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80036a4:	4b05      	ldr	r3, [pc, #20]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80036b0:	4b04      	ldr	r3, [pc, #16]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80036b2:	400b      	ands	r3, r1
 80036b4:	4901      	ldr	r1, [pc, #4]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	608b      	str	r3, [r1, #8]
 80036ba:	e00b      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80036bc:	40023800 	.word	0x40023800
 80036c0:	40007000 	.word	0x40007000
 80036c4:	0ffffcff 	.word	0x0ffffcff
 80036c8:	4bb3      	ldr	r3, [pc, #716]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	4ab2      	ldr	r2, [pc, #712]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036ce:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80036d2:	6093      	str	r3, [r2, #8]
 80036d4:	4bb0      	ldr	r3, [pc, #704]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036e0:	49ad      	ldr	r1, [pc, #692]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0310 	and.w	r3, r3, #16
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d010      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80036f2:	4ba9      	ldr	r3, [pc, #676]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036f8:	4aa7      	ldr	r2, [pc, #668]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036fe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003702:	4ba5      	ldr	r3, [pc, #660]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003704:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800370c:	49a2      	ldr	r1, [pc, #648]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800370e:	4313      	orrs	r3, r2
 8003710:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00a      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003720:	4b9d      	ldr	r3, [pc, #628]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003726:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800372e:	499a      	ldr	r1, [pc, #616]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003730:	4313      	orrs	r3, r2
 8003732:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00a      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003742:	4b95      	ldr	r3, [pc, #596]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003748:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003750:	4991      	ldr	r1, [pc, #580]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003752:	4313      	orrs	r3, r2
 8003754:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00a      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003764:	4b8c      	ldr	r3, [pc, #560]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800376a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003772:	4989      	ldr	r1, [pc, #548]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003774:	4313      	orrs	r3, r2
 8003776:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00a      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003786:	4b84      	ldr	r3, [pc, #528]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800378c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003794:	4980      	ldr	r1, [pc, #512]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003796:	4313      	orrs	r3, r2
 8003798:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d00a      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037a8:	4b7b      	ldr	r3, [pc, #492]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ae:	f023 0203 	bic.w	r2, r3, #3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b6:	4978      	ldr	r1, [pc, #480]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00a      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037ca:	4b73      	ldr	r3, [pc, #460]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037d0:	f023 020c 	bic.w	r2, r3, #12
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037d8:	496f      	ldr	r1, [pc, #444]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00a      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037ec:	4b6a      	ldr	r3, [pc, #424]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037fa:	4967      	ldr	r1, [pc, #412]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00a      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800380e:	4b62      	ldr	r3, [pc, #392]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003814:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800381c:	495e      	ldr	r1, [pc, #376]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800381e:	4313      	orrs	r3, r2
 8003820:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00a      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003830:	4b59      	ldr	r3, [pc, #356]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003836:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800383e:	4956      	ldr	r1, [pc, #344]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003840:	4313      	orrs	r3, r2
 8003842:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00a      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003852:	4b51      	ldr	r3, [pc, #324]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003858:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003860:	494d      	ldr	r1, [pc, #308]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003862:	4313      	orrs	r3, r2
 8003864:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d00a      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003874:	4b48      	ldr	r3, [pc, #288]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800387a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003882:	4945      	ldr	r1, [pc, #276]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003884:	4313      	orrs	r3, r2
 8003886:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00a      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003896:	4b40      	ldr	r3, [pc, #256]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800389c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038a4:	493c      	ldr	r1, [pc, #240]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00a      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80038b8:	4b37      	ldr	r3, [pc, #220]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038be:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038c6:	4934      	ldr	r1, [pc, #208]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d011      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80038da:	4b2f      	ldr	r3, [pc, #188]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038e8:	492b      	ldr	r1, [pc, #172]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038f8:	d101      	bne.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80038fa:	2301      	movs	r3, #1
 80038fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0308 	and.w	r3, r3, #8
 8003906:	2b00      	cmp	r3, #0
 8003908:	d001      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800390a:	2301      	movs	r3, #1
 800390c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00a      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800391a:	4b1f      	ldr	r3, [pc, #124]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800391c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003920:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003928:	491b      	ldr	r1, [pc, #108]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800392a:	4313      	orrs	r3, r2
 800392c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d00b      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800393c:	4b16      	ldr	r3, [pc, #88]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800393e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003942:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800394c:	4912      	ldr	r1, [pc, #72]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800394e:	4313      	orrs	r3, r2
 8003950:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00b      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003960:	4b0d      	ldr	r3, [pc, #52]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003966:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003970:	4909      	ldr	r1, [pc, #36]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003972:	4313      	orrs	r3, r2
 8003974:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d00f      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003984:	4b04      	ldr	r3, [pc, #16]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003986:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800398a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003994:	e002      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003996:	bf00      	nop
 8003998:	40023800 	.word	0x40023800
 800399c:	4986      	ldr	r1, [pc, #536]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00b      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80039b0:	4b81      	ldr	r3, [pc, #516]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039b6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039c0:	497d      	ldr	r1, [pc, #500]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d006      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	f000 80d6 	beq.w	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80039dc:	4b76      	ldr	r3, [pc, #472]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a75      	ldr	r2, [pc, #468]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80039e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039e8:	f7fd fb36 	bl	8001058 <HAL_GetTick>
 80039ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039ee:	e008      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80039f0:	f7fd fb32 	bl	8001058 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b64      	cmp	r3, #100	; 0x64
 80039fc:	d901      	bls.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e195      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a02:	4b6d      	ldr	r3, [pc, #436]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1f0      	bne.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d021      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d11d      	bne.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a22:	4b65      	ldr	r3, [pc, #404]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a28:	0c1b      	lsrs	r3, r3, #16
 8003a2a:	f003 0303 	and.w	r3, r3, #3
 8003a2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a30:	4b61      	ldr	r3, [pc, #388]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a36:	0e1b      	lsrs	r3, r3, #24
 8003a38:	f003 030f 	and.w	r3, r3, #15
 8003a3c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	019a      	lsls	r2, r3, #6
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	041b      	lsls	r3, r3, #16
 8003a48:	431a      	orrs	r2, r3
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	061b      	lsls	r3, r3, #24
 8003a4e:	431a      	orrs	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	071b      	lsls	r3, r3, #28
 8003a56:	4958      	ldr	r1, [pc, #352]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d004      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a72:	d00a      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d02e      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a88:	d129      	bne.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a8a:	4b4b      	ldr	r3, [pc, #300]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a90:	0c1b      	lsrs	r3, r3, #16
 8003a92:	f003 0303 	and.w	r3, r3, #3
 8003a96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a98:	4b47      	ldr	r3, [pc, #284]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a9e:	0f1b      	lsrs	r3, r3, #28
 8003aa0:	f003 0307 	and.w	r3, r3, #7
 8003aa4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	019a      	lsls	r2, r3, #6
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	041b      	lsls	r3, r3, #16
 8003ab0:	431a      	orrs	r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	061b      	lsls	r3, r3, #24
 8003ab8:	431a      	orrs	r2, r3
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	071b      	lsls	r3, r3, #28
 8003abe:	493e      	ldr	r1, [pc, #248]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003ac6:	4b3c      	ldr	r3, [pc, #240]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ac8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003acc:	f023 021f 	bic.w	r2, r3, #31
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	4938      	ldr	r1, [pc, #224]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d01d      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003aea:	4b33      	ldr	r3, [pc, #204]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003aec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003af0:	0e1b      	lsrs	r3, r3, #24
 8003af2:	f003 030f 	and.w	r3, r3, #15
 8003af6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003af8:	4b2f      	ldr	r3, [pc, #188]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003afa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003afe:	0f1b      	lsrs	r3, r3, #28
 8003b00:	f003 0307 	and.w	r3, r3, #7
 8003b04:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	019a      	lsls	r2, r3, #6
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	041b      	lsls	r3, r3, #16
 8003b12:	431a      	orrs	r2, r3
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	061b      	lsls	r3, r3, #24
 8003b18:	431a      	orrs	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	071b      	lsls	r3, r3, #28
 8003b1e:	4926      	ldr	r1, [pc, #152]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d011      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	019a      	lsls	r2, r3, #6
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	041b      	lsls	r3, r3, #16
 8003b3e:	431a      	orrs	r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	061b      	lsls	r3, r3, #24
 8003b46:	431a      	orrs	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	071b      	lsls	r3, r3, #28
 8003b4e:	491a      	ldr	r1, [pc, #104]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003b56:	4b18      	ldr	r3, [pc, #96]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a17      	ldr	r2, [pc, #92]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b5c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b62:	f7fd fa79 	bl	8001058 <HAL_GetTick>
 8003b66:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b68:	e008      	b.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b6a:	f7fd fa75 	bl	8001058 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b64      	cmp	r3, #100	; 0x64
 8003b76:	d901      	bls.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e0d8      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b7c:	4b0e      	ldr	r3, [pc, #56]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d0f0      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	f040 80ce 	bne.w	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003b90:	4b09      	ldr	r3, [pc, #36]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a08      	ldr	r2, [pc, #32]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b9c:	f7fd fa5c 	bl	8001058 <HAL_GetTick>
 8003ba0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003ba2:	e00b      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003ba4:	f7fd fa58 	bl	8001058 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	2b64      	cmp	r3, #100	; 0x64
 8003bb0:	d904      	bls.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e0bb      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003bb6:	bf00      	nop
 8003bb8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003bbc:	4b5e      	ldr	r3, [pc, #376]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bc8:	d0ec      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d003      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d009      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d02e      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d12a      	bne.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003bf2:	4b51      	ldr	r3, [pc, #324]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf8:	0c1b      	lsrs	r3, r3, #16
 8003bfa:	f003 0303 	and.w	r3, r3, #3
 8003bfe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c00:	4b4d      	ldr	r3, [pc, #308]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c06:	0f1b      	lsrs	r3, r3, #28
 8003c08:	f003 0307 	and.w	r3, r3, #7
 8003c0c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	019a      	lsls	r2, r3, #6
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	041b      	lsls	r3, r3, #16
 8003c18:	431a      	orrs	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	699b      	ldr	r3, [r3, #24]
 8003c1e:	061b      	lsls	r3, r3, #24
 8003c20:	431a      	orrs	r2, r3
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	071b      	lsls	r3, r3, #28
 8003c26:	4944      	ldr	r1, [pc, #272]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003c2e:	4b42      	ldr	r3, [pc, #264]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c34:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3c:	3b01      	subs	r3, #1
 8003c3e:	021b      	lsls	r3, r3, #8
 8003c40:	493d      	ldr	r1, [pc, #244]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d022      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c5c:	d11d      	bne.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c5e:	4b36      	ldr	r3, [pc, #216]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c64:	0e1b      	lsrs	r3, r3, #24
 8003c66:	f003 030f 	and.w	r3, r3, #15
 8003c6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c6c:	4b32      	ldr	r3, [pc, #200]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c72:	0f1b      	lsrs	r3, r3, #28
 8003c74:	f003 0307 	and.w	r3, r3, #7
 8003c78:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	019a      	lsls	r2, r3, #6
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a1b      	ldr	r3, [r3, #32]
 8003c84:	041b      	lsls	r3, r3, #16
 8003c86:	431a      	orrs	r2, r3
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	061b      	lsls	r3, r3, #24
 8003c8c:	431a      	orrs	r2, r3
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	071b      	lsls	r3, r3, #28
 8003c92:	4929      	ldr	r1, [pc, #164]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0308 	and.w	r3, r3, #8
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d028      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003ca6:	4b24      	ldr	r3, [pc, #144]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cac:	0e1b      	lsrs	r3, r3, #24
 8003cae:	f003 030f 	and.w	r3, r3, #15
 8003cb2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003cb4:	4b20      	ldr	r3, [pc, #128]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cba:	0c1b      	lsrs	r3, r3, #16
 8003cbc:	f003 0303 	and.w	r3, r3, #3
 8003cc0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	019a      	lsls	r2, r3, #6
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	041b      	lsls	r3, r3, #16
 8003ccc:	431a      	orrs	r2, r3
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	061b      	lsls	r3, r3, #24
 8003cd2:	431a      	orrs	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	69db      	ldr	r3, [r3, #28]
 8003cd8:	071b      	lsls	r3, r3, #28
 8003cda:	4917      	ldr	r1, [pc, #92]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003ce2:	4b15      	ldr	r3, [pc, #84]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ce4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ce8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf0:	4911      	ldr	r1, [pc, #68]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003cf8:	4b0f      	ldr	r3, [pc, #60]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a0e      	ldr	r2, [pc, #56]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d04:	f7fd f9a8 	bl	8001058 <HAL_GetTick>
 8003d08:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d0a:	e008      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003d0c:	f7fd f9a4 	bl	8001058 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b64      	cmp	r3, #100	; 0x64
 8003d18:	d901      	bls.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e007      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d1e:	4b06      	ldr	r3, [pc, #24]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d2a:	d1ef      	bne.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3720      	adds	r7, #32
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	40023800 	.word	0x40023800

08003d3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d101      	bne.n	8003d4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e049      	b.n	8003de2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d106      	bne.n	8003d68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f7fc fee2 	bl	8000b2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2202      	movs	r2, #2
 8003d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	3304      	adds	r3, #4
 8003d78:	4619      	mov	r1, r3
 8003d7a:	4610      	mov	r0, r2
 8003d7c:	f000 fa24 	bl	80041c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3708      	adds	r7, #8
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
	...

08003dec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b085      	sub	sp, #20
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d001      	beq.n	8003e04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e054      	b.n	8003eae <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2202      	movs	r2, #2
 8003e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68da      	ldr	r2, [r3, #12]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f042 0201 	orr.w	r2, r2, #1
 8003e1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a26      	ldr	r2, [pc, #152]	; (8003ebc <HAL_TIM_Base_Start_IT+0xd0>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d022      	beq.n	8003e6c <HAL_TIM_Base_Start_IT+0x80>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e2e:	d01d      	beq.n	8003e6c <HAL_TIM_Base_Start_IT+0x80>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a22      	ldr	r2, [pc, #136]	; (8003ec0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d018      	beq.n	8003e6c <HAL_TIM_Base_Start_IT+0x80>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a21      	ldr	r2, [pc, #132]	; (8003ec4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d013      	beq.n	8003e6c <HAL_TIM_Base_Start_IT+0x80>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a1f      	ldr	r2, [pc, #124]	; (8003ec8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d00e      	beq.n	8003e6c <HAL_TIM_Base_Start_IT+0x80>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a1e      	ldr	r2, [pc, #120]	; (8003ecc <HAL_TIM_Base_Start_IT+0xe0>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d009      	beq.n	8003e6c <HAL_TIM_Base_Start_IT+0x80>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a1c      	ldr	r2, [pc, #112]	; (8003ed0 <HAL_TIM_Base_Start_IT+0xe4>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d004      	beq.n	8003e6c <HAL_TIM_Base_Start_IT+0x80>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a1b      	ldr	r2, [pc, #108]	; (8003ed4 <HAL_TIM_Base_Start_IT+0xe8>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d115      	bne.n	8003e98 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	689a      	ldr	r2, [r3, #8]
 8003e72:	4b19      	ldr	r3, [pc, #100]	; (8003ed8 <HAL_TIM_Base_Start_IT+0xec>)
 8003e74:	4013      	ands	r3, r2
 8003e76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2b06      	cmp	r3, #6
 8003e7c:	d015      	beq.n	8003eaa <HAL_TIM_Base_Start_IT+0xbe>
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e84:	d011      	beq.n	8003eaa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f042 0201 	orr.w	r2, r2, #1
 8003e94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e96:	e008      	b.n	8003eaa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f042 0201 	orr.w	r2, r2, #1
 8003ea6:	601a      	str	r2, [r3, #0]
 8003ea8:	e000      	b.n	8003eac <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eaa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3714      	adds	r7, #20
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop
 8003ebc:	40010000 	.word	0x40010000
 8003ec0:	40000400 	.word	0x40000400
 8003ec4:	40000800 	.word	0x40000800
 8003ec8:	40000c00 	.word	0x40000c00
 8003ecc:	40010400 	.word	0x40010400
 8003ed0:	40014000 	.word	0x40014000
 8003ed4:	40001800 	.word	0x40001800
 8003ed8:	00010007 	.word	0x00010007

08003edc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68da      	ldr	r2, [r3, #12]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f022 0201 	bic.w	r2, r2, #1
 8003ef2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	6a1a      	ldr	r2, [r3, #32]
 8003efa:	f241 1311 	movw	r3, #4369	; 0x1111
 8003efe:	4013      	ands	r3, r2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d10f      	bne.n	8003f24 <HAL_TIM_Base_Stop_IT+0x48>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	6a1a      	ldr	r2, [r3, #32]
 8003f0a:	f240 4344 	movw	r3, #1092	; 0x444
 8003f0e:	4013      	ands	r3, r2
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d107      	bne.n	8003f24 <HAL_TIM_Base_Stop_IT+0x48>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f022 0201 	bic.w	r2, r2, #1
 8003f22:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	370c      	adds	r7, #12
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr

08003f3a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f3a:	b580      	push	{r7, lr}
 8003f3c:	b082      	sub	sp, #8
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	f003 0302 	and.w	r3, r3, #2
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d122      	bne.n	8003f96 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	f003 0302 	and.w	r3, r3, #2
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d11b      	bne.n	8003f96 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f06f 0202 	mvn.w	r2, #2
 8003f66:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	f003 0303 	and.w	r3, r3, #3
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d003      	beq.n	8003f84 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f000 f905 	bl	800418c <HAL_TIM_IC_CaptureCallback>
 8003f82:	e005      	b.n	8003f90 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f000 f8f7 	bl	8004178 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f000 f908 	bl	80041a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	691b      	ldr	r3, [r3, #16]
 8003f9c:	f003 0304 	and.w	r3, r3, #4
 8003fa0:	2b04      	cmp	r3, #4
 8003fa2:	d122      	bne.n	8003fea <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	f003 0304 	and.w	r3, r3, #4
 8003fae:	2b04      	cmp	r3, #4
 8003fb0:	d11b      	bne.n	8003fea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f06f 0204 	mvn.w	r2, #4
 8003fba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2202      	movs	r2, #2
 8003fc0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d003      	beq.n	8003fd8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f000 f8db 	bl	800418c <HAL_TIM_IC_CaptureCallback>
 8003fd6:	e005      	b.n	8003fe4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 f8cd 	bl	8004178 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 f8de 	bl	80041a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	f003 0308 	and.w	r3, r3, #8
 8003ff4:	2b08      	cmp	r3, #8
 8003ff6:	d122      	bne.n	800403e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	f003 0308 	and.w	r3, r3, #8
 8004002:	2b08      	cmp	r3, #8
 8004004:	d11b      	bne.n	800403e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f06f 0208 	mvn.w	r2, #8
 800400e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2204      	movs	r2, #4
 8004014:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	69db      	ldr	r3, [r3, #28]
 800401c:	f003 0303 	and.w	r3, r3, #3
 8004020:	2b00      	cmp	r3, #0
 8004022:	d003      	beq.n	800402c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f000 f8b1 	bl	800418c <HAL_TIM_IC_CaptureCallback>
 800402a:	e005      	b.n	8004038 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f000 f8a3 	bl	8004178 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 f8b4 	bl	80041a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	f003 0310 	and.w	r3, r3, #16
 8004048:	2b10      	cmp	r3, #16
 800404a:	d122      	bne.n	8004092 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	f003 0310 	and.w	r3, r3, #16
 8004056:	2b10      	cmp	r3, #16
 8004058:	d11b      	bne.n	8004092 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f06f 0210 	mvn.w	r2, #16
 8004062:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2208      	movs	r2, #8
 8004068:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	69db      	ldr	r3, [r3, #28]
 8004070:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004074:	2b00      	cmp	r3, #0
 8004076:	d003      	beq.n	8004080 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 f887 	bl	800418c <HAL_TIM_IC_CaptureCallback>
 800407e:	e005      	b.n	800408c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f000 f879 	bl	8004178 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 f88a 	bl	80041a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	f003 0301 	and.w	r3, r3, #1
 800409c:	2b01      	cmp	r3, #1
 800409e:	d10e      	bne.n	80040be <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	f003 0301 	and.w	r3, r3, #1
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d107      	bne.n	80040be <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f06f 0201 	mvn.w	r2, #1
 80040b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f7fc fcf7 	bl	8000aac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040c8:	2b80      	cmp	r3, #128	; 0x80
 80040ca:	d10e      	bne.n	80040ea <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040d6:	2b80      	cmp	r3, #128	; 0x80
 80040d8:	d107      	bne.n	80040ea <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80040e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f000 f9a7 	bl	8004438 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040f8:	d10e      	bne.n	8004118 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004104:	2b80      	cmp	r3, #128	; 0x80
 8004106:	d107      	bne.n	8004118 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 f99a 	bl	800444c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004122:	2b40      	cmp	r3, #64	; 0x40
 8004124:	d10e      	bne.n	8004144 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004130:	2b40      	cmp	r3, #64	; 0x40
 8004132:	d107      	bne.n	8004144 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800413c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 f838 	bl	80041b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	f003 0320 	and.w	r3, r3, #32
 800414e:	2b20      	cmp	r3, #32
 8004150:	d10e      	bne.n	8004170 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	f003 0320 	and.w	r3, r3, #32
 800415c:	2b20      	cmp	r3, #32
 800415e:	d107      	bne.n	8004170 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f06f 0220 	mvn.w	r2, #32
 8004168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f95a 	bl	8004424 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004170:	bf00      	nop
 8004172:	3708      	adds	r7, #8
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004180:	bf00      	nop
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004194:	bf00      	nop
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041bc:	bf00      	nop
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b085      	sub	sp, #20
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4a40      	ldr	r2, [pc, #256]	; (80042dc <TIM_Base_SetConfig+0x114>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d013      	beq.n	8004208 <TIM_Base_SetConfig+0x40>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041e6:	d00f      	beq.n	8004208 <TIM_Base_SetConfig+0x40>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a3d      	ldr	r2, [pc, #244]	; (80042e0 <TIM_Base_SetConfig+0x118>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d00b      	beq.n	8004208 <TIM_Base_SetConfig+0x40>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a3c      	ldr	r2, [pc, #240]	; (80042e4 <TIM_Base_SetConfig+0x11c>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d007      	beq.n	8004208 <TIM_Base_SetConfig+0x40>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4a3b      	ldr	r2, [pc, #236]	; (80042e8 <TIM_Base_SetConfig+0x120>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d003      	beq.n	8004208 <TIM_Base_SetConfig+0x40>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4a3a      	ldr	r2, [pc, #232]	; (80042ec <TIM_Base_SetConfig+0x124>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d108      	bne.n	800421a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800420e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	68fa      	ldr	r2, [r7, #12]
 8004216:	4313      	orrs	r3, r2
 8004218:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a2f      	ldr	r2, [pc, #188]	; (80042dc <TIM_Base_SetConfig+0x114>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d02b      	beq.n	800427a <TIM_Base_SetConfig+0xb2>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004228:	d027      	beq.n	800427a <TIM_Base_SetConfig+0xb2>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a2c      	ldr	r2, [pc, #176]	; (80042e0 <TIM_Base_SetConfig+0x118>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d023      	beq.n	800427a <TIM_Base_SetConfig+0xb2>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a2b      	ldr	r2, [pc, #172]	; (80042e4 <TIM_Base_SetConfig+0x11c>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d01f      	beq.n	800427a <TIM_Base_SetConfig+0xb2>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a2a      	ldr	r2, [pc, #168]	; (80042e8 <TIM_Base_SetConfig+0x120>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d01b      	beq.n	800427a <TIM_Base_SetConfig+0xb2>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a29      	ldr	r2, [pc, #164]	; (80042ec <TIM_Base_SetConfig+0x124>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d017      	beq.n	800427a <TIM_Base_SetConfig+0xb2>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a28      	ldr	r2, [pc, #160]	; (80042f0 <TIM_Base_SetConfig+0x128>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d013      	beq.n	800427a <TIM_Base_SetConfig+0xb2>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a27      	ldr	r2, [pc, #156]	; (80042f4 <TIM_Base_SetConfig+0x12c>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d00f      	beq.n	800427a <TIM_Base_SetConfig+0xb2>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a26      	ldr	r2, [pc, #152]	; (80042f8 <TIM_Base_SetConfig+0x130>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d00b      	beq.n	800427a <TIM_Base_SetConfig+0xb2>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a25      	ldr	r2, [pc, #148]	; (80042fc <TIM_Base_SetConfig+0x134>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d007      	beq.n	800427a <TIM_Base_SetConfig+0xb2>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a24      	ldr	r2, [pc, #144]	; (8004300 <TIM_Base_SetConfig+0x138>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d003      	beq.n	800427a <TIM_Base_SetConfig+0xb2>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a23      	ldr	r2, [pc, #140]	; (8004304 <TIM_Base_SetConfig+0x13c>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d108      	bne.n	800428c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004280:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	4313      	orrs	r3, r2
 800428a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	695b      	ldr	r3, [r3, #20]
 8004296:	4313      	orrs	r3, r2
 8004298:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	689a      	ldr	r2, [r3, #8]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a0a      	ldr	r2, [pc, #40]	; (80042dc <TIM_Base_SetConfig+0x114>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d003      	beq.n	80042c0 <TIM_Base_SetConfig+0xf8>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4a0c      	ldr	r2, [pc, #48]	; (80042ec <TIM_Base_SetConfig+0x124>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d103      	bne.n	80042c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	691a      	ldr	r2, [r3, #16]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	615a      	str	r2, [r3, #20]
}
 80042ce:	bf00      	nop
 80042d0:	3714      	adds	r7, #20
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	40010000 	.word	0x40010000
 80042e0:	40000400 	.word	0x40000400
 80042e4:	40000800 	.word	0x40000800
 80042e8:	40000c00 	.word	0x40000c00
 80042ec:	40010400 	.word	0x40010400
 80042f0:	40014000 	.word	0x40014000
 80042f4:	40014400 	.word	0x40014400
 80042f8:	40014800 	.word	0x40014800
 80042fc:	40001800 	.word	0x40001800
 8004300:	40001c00 	.word	0x40001c00
 8004304:	40002000 	.word	0x40002000

08004308 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004308:	b480      	push	{r7}
 800430a:	b085      	sub	sp, #20
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004318:	2b01      	cmp	r3, #1
 800431a:	d101      	bne.n	8004320 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800431c:	2302      	movs	r3, #2
 800431e:	e06d      	b.n	80043fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2202      	movs	r2, #2
 800432c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a30      	ldr	r2, [pc, #192]	; (8004408 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d004      	beq.n	8004354 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a2f      	ldr	r2, [pc, #188]	; (800440c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d108      	bne.n	8004366 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800435a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	4313      	orrs	r3, r2
 8004364:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800436c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	4313      	orrs	r3, r2
 8004376:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	68fa      	ldr	r2, [r7, #12]
 800437e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a20      	ldr	r2, [pc, #128]	; (8004408 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d022      	beq.n	80043d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004392:	d01d      	beq.n	80043d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a1d      	ldr	r2, [pc, #116]	; (8004410 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d018      	beq.n	80043d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a1c      	ldr	r2, [pc, #112]	; (8004414 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d013      	beq.n	80043d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a1a      	ldr	r2, [pc, #104]	; (8004418 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d00e      	beq.n	80043d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a15      	ldr	r2, [pc, #84]	; (800440c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d009      	beq.n	80043d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a16      	ldr	r2, [pc, #88]	; (800441c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d004      	beq.n	80043d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a15      	ldr	r2, [pc, #84]	; (8004420 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d10c      	bne.n	80043ea <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	68ba      	ldr	r2, [r7, #8]
 80043de:	4313      	orrs	r3, r2
 80043e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2201      	movs	r2, #1
 80043ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3714      	adds	r7, #20
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr
 8004408:	40010000 	.word	0x40010000
 800440c:	40010400 	.word	0x40010400
 8004410:	40000400 	.word	0x40000400
 8004414:	40000800 	.word	0x40000800
 8004418:	40000c00 	.word	0x40000c00
 800441c:	40014000 	.word	0x40014000
 8004420:	40001800 	.word	0x40001800

08004424 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004440:	bf00      	nop
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004454:	bf00      	nop
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e040      	b.n	80044f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004476:	2b00      	cmp	r3, #0
 8004478:	d106      	bne.n	8004488 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f7fc fb94 	bl	8000bb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2224      	movs	r2, #36	; 0x24
 800448c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f022 0201 	bic.w	r2, r2, #1
 800449c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 fa56 	bl	8004950 <UART_SetConfig>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d101      	bne.n	80044ae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e022      	b.n	80044f4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d002      	beq.n	80044bc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 fcac 	bl	8004e14 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	685a      	ldr	r2, [r3, #4]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	689a      	ldr	r2, [r3, #8]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f042 0201 	orr.w	r2, r2, #1
 80044ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 fd33 	bl	8004f58 <UART_CheckIdleState>
 80044f2:	4603      	mov	r3, r0
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3708      	adds	r7, #8
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}

080044fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b088      	sub	sp, #32
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	69db      	ldr	r3, [r3, #28]
 800450a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800451c:	69fa      	ldr	r2, [r7, #28]
 800451e:	f640 030f 	movw	r3, #2063	; 0x80f
 8004522:	4013      	ands	r3, r2
 8004524:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d113      	bne.n	8004554 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	f003 0320 	and.w	r3, r3, #32
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00e      	beq.n	8004554 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	f003 0320 	and.w	r3, r3, #32
 800453c:	2b00      	cmp	r3, #0
 800453e:	d009      	beq.n	8004554 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004544:	2b00      	cmp	r3, #0
 8004546:	f000 81cc 	beq.w	80048e2 <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	4798      	blx	r3
      }
      return;
 8004552:	e1c6      	b.n	80048e2 <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	2b00      	cmp	r3, #0
 8004558:	f000 80e3 	beq.w	8004722 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	2b00      	cmp	r3, #0
 8004564:	d105      	bne.n	8004572 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004566:	69ba      	ldr	r2, [r7, #24]
 8004568:	4ba5      	ldr	r3, [pc, #660]	; (8004800 <HAL_UART_IRQHandler+0x304>)
 800456a:	4013      	ands	r3, r2
 800456c:	2b00      	cmp	r3, #0
 800456e:	f000 80d8 	beq.w	8004722 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	f003 0301 	and.w	r3, r3, #1
 8004578:	2b00      	cmp	r3, #0
 800457a:	d010      	beq.n	800459e <HAL_UART_IRQHandler+0xa2>
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00b      	beq.n	800459e <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2201      	movs	r2, #1
 800458c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004594:	f043 0201 	orr.w	r2, r3, #1
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	f003 0302 	and.w	r3, r3, #2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d010      	beq.n	80045ca <HAL_UART_IRQHandler+0xce>
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	f003 0301 	and.w	r3, r3, #1
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00b      	beq.n	80045ca <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2202      	movs	r2, #2
 80045b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045c0:	f043 0204 	orr.w	r2, r3, #4
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	f003 0304 	and.w	r3, r3, #4
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d010      	beq.n	80045f6 <HAL_UART_IRQHandler+0xfa>
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	f003 0301 	and.w	r3, r3, #1
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00b      	beq.n	80045f6 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2204      	movs	r2, #4
 80045e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045ec:	f043 0202 	orr.w	r2, r3, #2
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	f003 0308 	and.w	r3, r3, #8
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d015      	beq.n	800462c <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	f003 0320 	and.w	r3, r3, #32
 8004606:	2b00      	cmp	r3, #0
 8004608:	d104      	bne.n	8004614 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004610:	2b00      	cmp	r3, #0
 8004612:	d00b      	beq.n	800462c <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2208      	movs	r2, #8
 800461a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004622:	f043 0208 	orr.w	r2, r3, #8
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004632:	2b00      	cmp	r3, #0
 8004634:	d011      	beq.n	800465a <HAL_UART_IRQHandler+0x15e>
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d00c      	beq.n	800465a <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004648:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004650:	f043 0220 	orr.w	r2, r3, #32
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004660:	2b00      	cmp	r3, #0
 8004662:	f000 8140 	beq.w	80048e6 <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	f003 0320 	and.w	r3, r3, #32
 800466c:	2b00      	cmp	r3, #0
 800466e:	d00c      	beq.n	800468a <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	f003 0320 	and.w	r3, r3, #32
 8004676:	2b00      	cmp	r3, #0
 8004678:	d007      	beq.n	800468a <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800467e:	2b00      	cmp	r3, #0
 8004680:	d003      	beq.n	800468a <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004690:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800469c:	2b40      	cmp	r3, #64	; 0x40
 800469e:	d004      	beq.n	80046aa <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d031      	beq.n	800470e <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 fd19 	bl	80050e2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ba:	2b40      	cmp	r3, #64	; 0x40
 80046bc:	d123      	bne.n	8004706 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	689a      	ldr	r2, [r3, #8]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046cc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d013      	beq.n	80046fe <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046da:	4a4a      	ldr	r2, [pc, #296]	; (8004804 <HAL_UART_IRQHandler+0x308>)
 80046dc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7fc fe3a 	bl	800135c <HAL_DMA_Abort_IT>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d017      	beq.n	800471e <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80046f8:	4610      	mov	r0, r2
 80046fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046fc:	e00f      	b.n	800471e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 f906 	bl	8004910 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004704:	e00b      	b.n	800471e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 f902 	bl	8004910 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800470c:	e007      	b.n	800471e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 f8fe 	bl	8004910 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800471c:	e0e3      	b.n	80048e6 <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800471e:	bf00      	nop
    return;
 8004720:	e0e1      	b.n	80048e6 <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004726:	2b01      	cmp	r3, #1
 8004728:	f040 80a7 	bne.w	800487a <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	f003 0310 	and.w	r3, r3, #16
 8004732:	2b00      	cmp	r3, #0
 8004734:	f000 80a1 	beq.w	800487a <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	f003 0310 	and.w	r3, r3, #16
 800473e:	2b00      	cmp	r3, #0
 8004740:	f000 809b 	beq.w	800487a <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2210      	movs	r2, #16
 800474a:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004756:	2b40      	cmp	r3, #64	; 0x40
 8004758:	d156      	bne.n	8004808 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8004764:	893b      	ldrh	r3, [r7, #8]
 8004766:	2b00      	cmp	r3, #0
 8004768:	f000 80bf 	beq.w	80048ea <HAL_UART_IRQHandler+0x3ee>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004772:	893a      	ldrh	r2, [r7, #8]
 8004774:	429a      	cmp	r2, r3
 8004776:	f080 80b8 	bcs.w	80048ea <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	893a      	ldrh	r2, [r7, #8]
 800477e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004786:	69db      	ldr	r3, [r3, #28]
 8004788:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800478c:	d02a      	beq.n	80047e4 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800479c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	689a      	ldr	r2, [r3, #8]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f022 0201 	bic.w	r2, r2, #1
 80047ac:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	689a      	ldr	r2, [r3, #8]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047bc:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2220      	movs	r2, #32
 80047c2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f022 0210 	bic.w	r2, r2, #16
 80047d8:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047de:	4618      	mov	r0, r3
 80047e0:	f7fc fd4c 	bl	800127c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	4619      	mov	r1, r3
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f000 f893 	bl	8004924 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80047fe:	e074      	b.n	80048ea <HAL_UART_IRQHandler+0x3ee>
 8004800:	04000120 	.word	0x04000120
 8004804:	08005141 	.word	0x08005141
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004814:	b29b      	uxth	r3, r3
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004820:	b29b      	uxth	r3, r3
 8004822:	2b00      	cmp	r3, #0
 8004824:	d063      	beq.n	80048ee <HAL_UART_IRQHandler+0x3f2>
          && (nb_rx_data > 0U))
 8004826:	897b      	ldrh	r3, [r7, #10]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d060      	beq.n	80048ee <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800483a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	689a      	ldr	r2, [r3, #8]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f022 0201 	bic.w	r2, r2, #1
 800484a:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2220      	movs	r2, #32
 8004850:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f022 0210 	bic.w	r2, r2, #16
 800486c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800486e:	897b      	ldrh	r3, [r7, #10]
 8004870:	4619      	mov	r1, r3
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 f856 	bl	8004924 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004878:	e039      	b.n	80048ee <HAL_UART_IRQHandler+0x3f2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00d      	beq.n	80048a0 <HAL_UART_IRQHandler+0x3a4>
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d008      	beq.n	80048a0 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004896:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f000 f84f 	bl	800493c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800489e:	e029      	b.n	80048f4 <HAL_UART_IRQHandler+0x3f8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00d      	beq.n	80048c6 <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d008      	beq.n	80048c6 <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d01a      	beq.n	80048f2 <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	4798      	blx	r3
    }
    return;
 80048c4:	e015      	b.n	80048f2 <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d011      	beq.n	80048f4 <HAL_UART_IRQHandler+0x3f8>
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00c      	beq.n	80048f4 <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 fc46 	bl	800516c <UART_EndTransmit_IT>
    return;
 80048e0:	e008      	b.n	80048f4 <HAL_UART_IRQHandler+0x3f8>
      return;
 80048e2:	bf00      	nop
 80048e4:	e006      	b.n	80048f4 <HAL_UART_IRQHandler+0x3f8>
    return;
 80048e6:	bf00      	nop
 80048e8:	e004      	b.n	80048f4 <HAL_UART_IRQHandler+0x3f8>
      return;
 80048ea:	bf00      	nop
 80048ec:	e002      	b.n	80048f4 <HAL_UART_IRQHandler+0x3f8>
      return;
 80048ee:	bf00      	nop
 80048f0:	e000      	b.n	80048f4 <HAL_UART_IRQHandler+0x3f8>
    return;
 80048f2:	bf00      	nop
  }

}
 80048f4:	3720      	adds	r7, #32
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop

080048fc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004904:	bf00      	nop
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004918:	bf00      	nop
 800491a:	370c      	adds	r7, #12
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	460b      	mov	r3, r1
 800492e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004930:	bf00      	nop
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004944:	bf00      	nop
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b088      	sub	sp, #32
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004958:	2300      	movs	r3, #0
 800495a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	689a      	ldr	r2, [r3, #8]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	691b      	ldr	r3, [r3, #16]
 8004964:	431a      	orrs	r2, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	431a      	orrs	r2, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	69db      	ldr	r3, [r3, #28]
 8004970:	4313      	orrs	r3, r2
 8004972:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	4ba7      	ldr	r3, [pc, #668]	; (8004c18 <UART_SetConfig+0x2c8>)
 800497c:	4013      	ands	r3, r2
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	6812      	ldr	r2, [r2, #0]
 8004982:	6979      	ldr	r1, [r7, #20]
 8004984:	430b      	orrs	r3, r1
 8004986:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	68da      	ldr	r2, [r3, #12]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	430a      	orrs	r2, r1
 800499c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	699b      	ldr	r3, [r3, #24]
 80049a2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a1b      	ldr	r3, [r3, #32]
 80049a8:	697a      	ldr	r2, [r7, #20]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	697a      	ldr	r2, [r7, #20]
 80049be:	430a      	orrs	r2, r1
 80049c0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a95      	ldr	r2, [pc, #596]	; (8004c1c <UART_SetConfig+0x2cc>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d120      	bne.n	8004a0e <UART_SetConfig+0xbe>
 80049cc:	4b94      	ldr	r3, [pc, #592]	; (8004c20 <UART_SetConfig+0x2d0>)
 80049ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049d2:	f003 0303 	and.w	r3, r3, #3
 80049d6:	2b03      	cmp	r3, #3
 80049d8:	d816      	bhi.n	8004a08 <UART_SetConfig+0xb8>
 80049da:	a201      	add	r2, pc, #4	; (adr r2, 80049e0 <UART_SetConfig+0x90>)
 80049dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049e0:	080049f1 	.word	0x080049f1
 80049e4:	080049fd 	.word	0x080049fd
 80049e8:	080049f7 	.word	0x080049f7
 80049ec:	08004a03 	.word	0x08004a03
 80049f0:	2301      	movs	r3, #1
 80049f2:	77fb      	strb	r3, [r7, #31]
 80049f4:	e14f      	b.n	8004c96 <UART_SetConfig+0x346>
 80049f6:	2302      	movs	r3, #2
 80049f8:	77fb      	strb	r3, [r7, #31]
 80049fa:	e14c      	b.n	8004c96 <UART_SetConfig+0x346>
 80049fc:	2304      	movs	r3, #4
 80049fe:	77fb      	strb	r3, [r7, #31]
 8004a00:	e149      	b.n	8004c96 <UART_SetConfig+0x346>
 8004a02:	2308      	movs	r3, #8
 8004a04:	77fb      	strb	r3, [r7, #31]
 8004a06:	e146      	b.n	8004c96 <UART_SetConfig+0x346>
 8004a08:	2310      	movs	r3, #16
 8004a0a:	77fb      	strb	r3, [r7, #31]
 8004a0c:	e143      	b.n	8004c96 <UART_SetConfig+0x346>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a84      	ldr	r2, [pc, #528]	; (8004c24 <UART_SetConfig+0x2d4>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d132      	bne.n	8004a7e <UART_SetConfig+0x12e>
 8004a18:	4b81      	ldr	r3, [pc, #516]	; (8004c20 <UART_SetConfig+0x2d0>)
 8004a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a1e:	f003 030c 	and.w	r3, r3, #12
 8004a22:	2b0c      	cmp	r3, #12
 8004a24:	d828      	bhi.n	8004a78 <UART_SetConfig+0x128>
 8004a26:	a201      	add	r2, pc, #4	; (adr r2, 8004a2c <UART_SetConfig+0xdc>)
 8004a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a2c:	08004a61 	.word	0x08004a61
 8004a30:	08004a79 	.word	0x08004a79
 8004a34:	08004a79 	.word	0x08004a79
 8004a38:	08004a79 	.word	0x08004a79
 8004a3c:	08004a6d 	.word	0x08004a6d
 8004a40:	08004a79 	.word	0x08004a79
 8004a44:	08004a79 	.word	0x08004a79
 8004a48:	08004a79 	.word	0x08004a79
 8004a4c:	08004a67 	.word	0x08004a67
 8004a50:	08004a79 	.word	0x08004a79
 8004a54:	08004a79 	.word	0x08004a79
 8004a58:	08004a79 	.word	0x08004a79
 8004a5c:	08004a73 	.word	0x08004a73
 8004a60:	2300      	movs	r3, #0
 8004a62:	77fb      	strb	r3, [r7, #31]
 8004a64:	e117      	b.n	8004c96 <UART_SetConfig+0x346>
 8004a66:	2302      	movs	r3, #2
 8004a68:	77fb      	strb	r3, [r7, #31]
 8004a6a:	e114      	b.n	8004c96 <UART_SetConfig+0x346>
 8004a6c:	2304      	movs	r3, #4
 8004a6e:	77fb      	strb	r3, [r7, #31]
 8004a70:	e111      	b.n	8004c96 <UART_SetConfig+0x346>
 8004a72:	2308      	movs	r3, #8
 8004a74:	77fb      	strb	r3, [r7, #31]
 8004a76:	e10e      	b.n	8004c96 <UART_SetConfig+0x346>
 8004a78:	2310      	movs	r3, #16
 8004a7a:	77fb      	strb	r3, [r7, #31]
 8004a7c:	e10b      	b.n	8004c96 <UART_SetConfig+0x346>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a69      	ldr	r2, [pc, #420]	; (8004c28 <UART_SetConfig+0x2d8>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d120      	bne.n	8004aca <UART_SetConfig+0x17a>
 8004a88:	4b65      	ldr	r3, [pc, #404]	; (8004c20 <UART_SetConfig+0x2d0>)
 8004a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a8e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004a92:	2b30      	cmp	r3, #48	; 0x30
 8004a94:	d013      	beq.n	8004abe <UART_SetConfig+0x16e>
 8004a96:	2b30      	cmp	r3, #48	; 0x30
 8004a98:	d814      	bhi.n	8004ac4 <UART_SetConfig+0x174>
 8004a9a:	2b20      	cmp	r3, #32
 8004a9c:	d009      	beq.n	8004ab2 <UART_SetConfig+0x162>
 8004a9e:	2b20      	cmp	r3, #32
 8004aa0:	d810      	bhi.n	8004ac4 <UART_SetConfig+0x174>
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d002      	beq.n	8004aac <UART_SetConfig+0x15c>
 8004aa6:	2b10      	cmp	r3, #16
 8004aa8:	d006      	beq.n	8004ab8 <UART_SetConfig+0x168>
 8004aaa:	e00b      	b.n	8004ac4 <UART_SetConfig+0x174>
 8004aac:	2300      	movs	r3, #0
 8004aae:	77fb      	strb	r3, [r7, #31]
 8004ab0:	e0f1      	b.n	8004c96 <UART_SetConfig+0x346>
 8004ab2:	2302      	movs	r3, #2
 8004ab4:	77fb      	strb	r3, [r7, #31]
 8004ab6:	e0ee      	b.n	8004c96 <UART_SetConfig+0x346>
 8004ab8:	2304      	movs	r3, #4
 8004aba:	77fb      	strb	r3, [r7, #31]
 8004abc:	e0eb      	b.n	8004c96 <UART_SetConfig+0x346>
 8004abe:	2308      	movs	r3, #8
 8004ac0:	77fb      	strb	r3, [r7, #31]
 8004ac2:	e0e8      	b.n	8004c96 <UART_SetConfig+0x346>
 8004ac4:	2310      	movs	r3, #16
 8004ac6:	77fb      	strb	r3, [r7, #31]
 8004ac8:	e0e5      	b.n	8004c96 <UART_SetConfig+0x346>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a57      	ldr	r2, [pc, #348]	; (8004c2c <UART_SetConfig+0x2dc>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d120      	bne.n	8004b16 <UART_SetConfig+0x1c6>
 8004ad4:	4b52      	ldr	r3, [pc, #328]	; (8004c20 <UART_SetConfig+0x2d0>)
 8004ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ada:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004ade:	2bc0      	cmp	r3, #192	; 0xc0
 8004ae0:	d013      	beq.n	8004b0a <UART_SetConfig+0x1ba>
 8004ae2:	2bc0      	cmp	r3, #192	; 0xc0
 8004ae4:	d814      	bhi.n	8004b10 <UART_SetConfig+0x1c0>
 8004ae6:	2b80      	cmp	r3, #128	; 0x80
 8004ae8:	d009      	beq.n	8004afe <UART_SetConfig+0x1ae>
 8004aea:	2b80      	cmp	r3, #128	; 0x80
 8004aec:	d810      	bhi.n	8004b10 <UART_SetConfig+0x1c0>
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d002      	beq.n	8004af8 <UART_SetConfig+0x1a8>
 8004af2:	2b40      	cmp	r3, #64	; 0x40
 8004af4:	d006      	beq.n	8004b04 <UART_SetConfig+0x1b4>
 8004af6:	e00b      	b.n	8004b10 <UART_SetConfig+0x1c0>
 8004af8:	2300      	movs	r3, #0
 8004afa:	77fb      	strb	r3, [r7, #31]
 8004afc:	e0cb      	b.n	8004c96 <UART_SetConfig+0x346>
 8004afe:	2302      	movs	r3, #2
 8004b00:	77fb      	strb	r3, [r7, #31]
 8004b02:	e0c8      	b.n	8004c96 <UART_SetConfig+0x346>
 8004b04:	2304      	movs	r3, #4
 8004b06:	77fb      	strb	r3, [r7, #31]
 8004b08:	e0c5      	b.n	8004c96 <UART_SetConfig+0x346>
 8004b0a:	2308      	movs	r3, #8
 8004b0c:	77fb      	strb	r3, [r7, #31]
 8004b0e:	e0c2      	b.n	8004c96 <UART_SetConfig+0x346>
 8004b10:	2310      	movs	r3, #16
 8004b12:	77fb      	strb	r3, [r7, #31]
 8004b14:	e0bf      	b.n	8004c96 <UART_SetConfig+0x346>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a45      	ldr	r2, [pc, #276]	; (8004c30 <UART_SetConfig+0x2e0>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d125      	bne.n	8004b6c <UART_SetConfig+0x21c>
 8004b20:	4b3f      	ldr	r3, [pc, #252]	; (8004c20 <UART_SetConfig+0x2d0>)
 8004b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b2e:	d017      	beq.n	8004b60 <UART_SetConfig+0x210>
 8004b30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b34:	d817      	bhi.n	8004b66 <UART_SetConfig+0x216>
 8004b36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b3a:	d00b      	beq.n	8004b54 <UART_SetConfig+0x204>
 8004b3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b40:	d811      	bhi.n	8004b66 <UART_SetConfig+0x216>
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d003      	beq.n	8004b4e <UART_SetConfig+0x1fe>
 8004b46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b4a:	d006      	beq.n	8004b5a <UART_SetConfig+0x20a>
 8004b4c:	e00b      	b.n	8004b66 <UART_SetConfig+0x216>
 8004b4e:	2300      	movs	r3, #0
 8004b50:	77fb      	strb	r3, [r7, #31]
 8004b52:	e0a0      	b.n	8004c96 <UART_SetConfig+0x346>
 8004b54:	2302      	movs	r3, #2
 8004b56:	77fb      	strb	r3, [r7, #31]
 8004b58:	e09d      	b.n	8004c96 <UART_SetConfig+0x346>
 8004b5a:	2304      	movs	r3, #4
 8004b5c:	77fb      	strb	r3, [r7, #31]
 8004b5e:	e09a      	b.n	8004c96 <UART_SetConfig+0x346>
 8004b60:	2308      	movs	r3, #8
 8004b62:	77fb      	strb	r3, [r7, #31]
 8004b64:	e097      	b.n	8004c96 <UART_SetConfig+0x346>
 8004b66:	2310      	movs	r3, #16
 8004b68:	77fb      	strb	r3, [r7, #31]
 8004b6a:	e094      	b.n	8004c96 <UART_SetConfig+0x346>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a30      	ldr	r2, [pc, #192]	; (8004c34 <UART_SetConfig+0x2e4>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d125      	bne.n	8004bc2 <UART_SetConfig+0x272>
 8004b76:	4b2a      	ldr	r3, [pc, #168]	; (8004c20 <UART_SetConfig+0x2d0>)
 8004b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b7c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004b80:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b84:	d017      	beq.n	8004bb6 <UART_SetConfig+0x266>
 8004b86:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b8a:	d817      	bhi.n	8004bbc <UART_SetConfig+0x26c>
 8004b8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b90:	d00b      	beq.n	8004baa <UART_SetConfig+0x25a>
 8004b92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b96:	d811      	bhi.n	8004bbc <UART_SetConfig+0x26c>
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d003      	beq.n	8004ba4 <UART_SetConfig+0x254>
 8004b9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ba0:	d006      	beq.n	8004bb0 <UART_SetConfig+0x260>
 8004ba2:	e00b      	b.n	8004bbc <UART_SetConfig+0x26c>
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	77fb      	strb	r3, [r7, #31]
 8004ba8:	e075      	b.n	8004c96 <UART_SetConfig+0x346>
 8004baa:	2302      	movs	r3, #2
 8004bac:	77fb      	strb	r3, [r7, #31]
 8004bae:	e072      	b.n	8004c96 <UART_SetConfig+0x346>
 8004bb0:	2304      	movs	r3, #4
 8004bb2:	77fb      	strb	r3, [r7, #31]
 8004bb4:	e06f      	b.n	8004c96 <UART_SetConfig+0x346>
 8004bb6:	2308      	movs	r3, #8
 8004bb8:	77fb      	strb	r3, [r7, #31]
 8004bba:	e06c      	b.n	8004c96 <UART_SetConfig+0x346>
 8004bbc:	2310      	movs	r3, #16
 8004bbe:	77fb      	strb	r3, [r7, #31]
 8004bc0:	e069      	b.n	8004c96 <UART_SetConfig+0x346>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a1c      	ldr	r2, [pc, #112]	; (8004c38 <UART_SetConfig+0x2e8>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d137      	bne.n	8004c3c <UART_SetConfig+0x2ec>
 8004bcc:	4b14      	ldr	r3, [pc, #80]	; (8004c20 <UART_SetConfig+0x2d0>)
 8004bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bd2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004bd6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004bda:	d017      	beq.n	8004c0c <UART_SetConfig+0x2bc>
 8004bdc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004be0:	d817      	bhi.n	8004c12 <UART_SetConfig+0x2c2>
 8004be2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004be6:	d00b      	beq.n	8004c00 <UART_SetConfig+0x2b0>
 8004be8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bec:	d811      	bhi.n	8004c12 <UART_SetConfig+0x2c2>
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d003      	beq.n	8004bfa <UART_SetConfig+0x2aa>
 8004bf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bf6:	d006      	beq.n	8004c06 <UART_SetConfig+0x2b6>
 8004bf8:	e00b      	b.n	8004c12 <UART_SetConfig+0x2c2>
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	77fb      	strb	r3, [r7, #31]
 8004bfe:	e04a      	b.n	8004c96 <UART_SetConfig+0x346>
 8004c00:	2302      	movs	r3, #2
 8004c02:	77fb      	strb	r3, [r7, #31]
 8004c04:	e047      	b.n	8004c96 <UART_SetConfig+0x346>
 8004c06:	2304      	movs	r3, #4
 8004c08:	77fb      	strb	r3, [r7, #31]
 8004c0a:	e044      	b.n	8004c96 <UART_SetConfig+0x346>
 8004c0c:	2308      	movs	r3, #8
 8004c0e:	77fb      	strb	r3, [r7, #31]
 8004c10:	e041      	b.n	8004c96 <UART_SetConfig+0x346>
 8004c12:	2310      	movs	r3, #16
 8004c14:	77fb      	strb	r3, [r7, #31]
 8004c16:	e03e      	b.n	8004c96 <UART_SetConfig+0x346>
 8004c18:	efff69f3 	.word	0xefff69f3
 8004c1c:	40011000 	.word	0x40011000
 8004c20:	40023800 	.word	0x40023800
 8004c24:	40004400 	.word	0x40004400
 8004c28:	40004800 	.word	0x40004800
 8004c2c:	40004c00 	.word	0x40004c00
 8004c30:	40005000 	.word	0x40005000
 8004c34:	40011400 	.word	0x40011400
 8004c38:	40007800 	.word	0x40007800
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a71      	ldr	r2, [pc, #452]	; (8004e08 <UART_SetConfig+0x4b8>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d125      	bne.n	8004c92 <UART_SetConfig+0x342>
 8004c46:	4b71      	ldr	r3, [pc, #452]	; (8004e0c <UART_SetConfig+0x4bc>)
 8004c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004c50:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004c54:	d017      	beq.n	8004c86 <UART_SetConfig+0x336>
 8004c56:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004c5a:	d817      	bhi.n	8004c8c <UART_SetConfig+0x33c>
 8004c5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c60:	d00b      	beq.n	8004c7a <UART_SetConfig+0x32a>
 8004c62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c66:	d811      	bhi.n	8004c8c <UART_SetConfig+0x33c>
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d003      	beq.n	8004c74 <UART_SetConfig+0x324>
 8004c6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c70:	d006      	beq.n	8004c80 <UART_SetConfig+0x330>
 8004c72:	e00b      	b.n	8004c8c <UART_SetConfig+0x33c>
 8004c74:	2300      	movs	r3, #0
 8004c76:	77fb      	strb	r3, [r7, #31]
 8004c78:	e00d      	b.n	8004c96 <UART_SetConfig+0x346>
 8004c7a:	2302      	movs	r3, #2
 8004c7c:	77fb      	strb	r3, [r7, #31]
 8004c7e:	e00a      	b.n	8004c96 <UART_SetConfig+0x346>
 8004c80:	2304      	movs	r3, #4
 8004c82:	77fb      	strb	r3, [r7, #31]
 8004c84:	e007      	b.n	8004c96 <UART_SetConfig+0x346>
 8004c86:	2308      	movs	r3, #8
 8004c88:	77fb      	strb	r3, [r7, #31]
 8004c8a:	e004      	b.n	8004c96 <UART_SetConfig+0x346>
 8004c8c:	2310      	movs	r3, #16
 8004c8e:	77fb      	strb	r3, [r7, #31]
 8004c90:	e001      	b.n	8004c96 <UART_SetConfig+0x346>
 8004c92:	2310      	movs	r3, #16
 8004c94:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	69db      	ldr	r3, [r3, #28]
 8004c9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c9e:	d15b      	bne.n	8004d58 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8004ca0:	7ffb      	ldrb	r3, [r7, #31]
 8004ca2:	2b08      	cmp	r3, #8
 8004ca4:	d827      	bhi.n	8004cf6 <UART_SetConfig+0x3a6>
 8004ca6:	a201      	add	r2, pc, #4	; (adr r2, 8004cac <UART_SetConfig+0x35c>)
 8004ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cac:	08004cd1 	.word	0x08004cd1
 8004cb0:	08004cd9 	.word	0x08004cd9
 8004cb4:	08004ce1 	.word	0x08004ce1
 8004cb8:	08004cf7 	.word	0x08004cf7
 8004cbc:	08004ce7 	.word	0x08004ce7
 8004cc0:	08004cf7 	.word	0x08004cf7
 8004cc4:	08004cf7 	.word	0x08004cf7
 8004cc8:	08004cf7 	.word	0x08004cf7
 8004ccc:	08004cef 	.word	0x08004cef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cd0:	f7fe fbb2 	bl	8003438 <HAL_RCC_GetPCLK1Freq>
 8004cd4:	61b8      	str	r0, [r7, #24]
        break;
 8004cd6:	e013      	b.n	8004d00 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cd8:	f7fe fbc2 	bl	8003460 <HAL_RCC_GetPCLK2Freq>
 8004cdc:	61b8      	str	r0, [r7, #24]
        break;
 8004cde:	e00f      	b.n	8004d00 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ce0:	4b4b      	ldr	r3, [pc, #300]	; (8004e10 <UART_SetConfig+0x4c0>)
 8004ce2:	61bb      	str	r3, [r7, #24]
        break;
 8004ce4:	e00c      	b.n	8004d00 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ce6:	f7fe fab9 	bl	800325c <HAL_RCC_GetSysClockFreq>
 8004cea:	61b8      	str	r0, [r7, #24]
        break;
 8004cec:	e008      	b.n	8004d00 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cf2:	61bb      	str	r3, [r7, #24]
        break;
 8004cf4:	e004      	b.n	8004d00 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	77bb      	strb	r3, [r7, #30]
        break;
 8004cfe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d074      	beq.n	8004df0 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	005a      	lsls	r2, r3, #1
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	085b      	lsrs	r3, r3, #1
 8004d10:	441a      	add	r2, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	2b0f      	cmp	r3, #15
 8004d22:	d916      	bls.n	8004d52 <UART_SetConfig+0x402>
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d2a:	d212      	bcs.n	8004d52 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	f023 030f 	bic.w	r3, r3, #15
 8004d34:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	085b      	lsrs	r3, r3, #1
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	f003 0307 	and.w	r3, r3, #7
 8004d40:	b29a      	uxth	r2, r3
 8004d42:	89fb      	ldrh	r3, [r7, #14]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	89fa      	ldrh	r2, [r7, #14]
 8004d4e:	60da      	str	r2, [r3, #12]
 8004d50:	e04e      	b.n	8004df0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	77bb      	strb	r3, [r7, #30]
 8004d56:	e04b      	b.n	8004df0 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d58:	7ffb      	ldrb	r3, [r7, #31]
 8004d5a:	2b08      	cmp	r3, #8
 8004d5c:	d827      	bhi.n	8004dae <UART_SetConfig+0x45e>
 8004d5e:	a201      	add	r2, pc, #4	; (adr r2, 8004d64 <UART_SetConfig+0x414>)
 8004d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d64:	08004d89 	.word	0x08004d89
 8004d68:	08004d91 	.word	0x08004d91
 8004d6c:	08004d99 	.word	0x08004d99
 8004d70:	08004daf 	.word	0x08004daf
 8004d74:	08004d9f 	.word	0x08004d9f
 8004d78:	08004daf 	.word	0x08004daf
 8004d7c:	08004daf 	.word	0x08004daf
 8004d80:	08004daf 	.word	0x08004daf
 8004d84:	08004da7 	.word	0x08004da7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d88:	f7fe fb56 	bl	8003438 <HAL_RCC_GetPCLK1Freq>
 8004d8c:	61b8      	str	r0, [r7, #24]
        break;
 8004d8e:	e013      	b.n	8004db8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d90:	f7fe fb66 	bl	8003460 <HAL_RCC_GetPCLK2Freq>
 8004d94:	61b8      	str	r0, [r7, #24]
        break;
 8004d96:	e00f      	b.n	8004db8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d98:	4b1d      	ldr	r3, [pc, #116]	; (8004e10 <UART_SetConfig+0x4c0>)
 8004d9a:	61bb      	str	r3, [r7, #24]
        break;
 8004d9c:	e00c      	b.n	8004db8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d9e:	f7fe fa5d 	bl	800325c <HAL_RCC_GetSysClockFreq>
 8004da2:	61b8      	str	r0, [r7, #24]
        break;
 8004da4:	e008      	b.n	8004db8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004da6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004daa:	61bb      	str	r3, [r7, #24]
        break;
 8004dac:	e004      	b.n	8004db8 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8004dae:	2300      	movs	r3, #0
 8004db0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	77bb      	strb	r3, [r7, #30]
        break;
 8004db6:	bf00      	nop
    }

    if (pclk != 0U)
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d018      	beq.n	8004df0 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	085a      	lsrs	r2, r3, #1
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	441a      	add	r2, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	2b0f      	cmp	r3, #15
 8004dd8:	d908      	bls.n	8004dec <UART_SetConfig+0x49c>
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004de0:	d204      	bcs.n	8004dec <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	693a      	ldr	r2, [r7, #16]
 8004de8:	60da      	str	r2, [r3, #12]
 8004dea:	e001      	b.n	8004df0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004dfc:	7fbb      	ldrb	r3, [r7, #30]
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3720      	adds	r7, #32
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	40007c00 	.word	0x40007c00
 8004e0c:	40023800 	.word	0x40023800
 8004e10:	00f42400 	.word	0x00f42400

08004e14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e20:	f003 0301 	and.w	r3, r3, #1
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00a      	beq.n	8004e3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e42:	f003 0302 	and.w	r3, r3, #2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00a      	beq.n	8004e60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e64:	f003 0304 	and.w	r3, r3, #4
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d00a      	beq.n	8004e82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e86:	f003 0308 	and.w	r3, r3, #8
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00a      	beq.n	8004ea4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea8:	f003 0310 	and.w	r3, r3, #16
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00a      	beq.n	8004ec6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eca:	f003 0320 	and.w	r3, r3, #32
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d00a      	beq.n	8004ee8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d01a      	beq.n	8004f2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	430a      	orrs	r2, r1
 8004f08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f12:	d10a      	bne.n	8004f2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	430a      	orrs	r2, r1
 8004f28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00a      	beq.n	8004f4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	430a      	orrs	r2, r1
 8004f4a:	605a      	str	r2, [r3, #4]
  }
}
 8004f4c:	bf00      	nop
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b086      	sub	sp, #24
 8004f5c:	af02      	add	r7, sp, #8
 8004f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f68:	f7fc f876 	bl	8001058 <HAL_GetTick>
 8004f6c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0308 	and.w	r3, r3, #8
 8004f78:	2b08      	cmp	r3, #8
 8004f7a:	d10e      	bne.n	8004f9a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f80:	9300      	str	r3, [sp, #0]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 f82d 	bl	8004fea <UART_WaitOnFlagUntilTimeout>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d001      	beq.n	8004f9a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e023      	b.n	8004fe2 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0304 	and.w	r3, r3, #4
 8004fa4:	2b04      	cmp	r3, #4
 8004fa6:	d10e      	bne.n	8004fc6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fa8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004fac:	9300      	str	r3, [sp, #0]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 f817 	bl	8004fea <UART_WaitOnFlagUntilTimeout>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d001      	beq.n	8004fc6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e00d      	b.n	8004fe2 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2220      	movs	r2, #32
 8004fca:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2220      	movs	r2, #32
 8004fd0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3710      	adds	r7, #16
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004fea:	b580      	push	{r7, lr}
 8004fec:	b084      	sub	sp, #16
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	60f8      	str	r0, [r7, #12]
 8004ff2:	60b9      	str	r1, [r7, #8]
 8004ff4:	603b      	str	r3, [r7, #0]
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ffa:	e05e      	b.n	80050ba <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ffc:	69bb      	ldr	r3, [r7, #24]
 8004ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005002:	d05a      	beq.n	80050ba <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005004:	f7fc f828 	bl	8001058 <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	69ba      	ldr	r2, [r7, #24]
 8005010:	429a      	cmp	r2, r3
 8005012:	d302      	bcc.n	800501a <UART_WaitOnFlagUntilTimeout+0x30>
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d11b      	bne.n	8005052 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005028:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	689a      	ldr	r2, [r3, #8]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f022 0201 	bic.w	r2, r2, #1
 8005038:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2220      	movs	r2, #32
 800503e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2220      	movs	r2, #32
 8005044:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800504e:	2303      	movs	r3, #3
 8005050:	e043      	b.n	80050da <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0304 	and.w	r3, r3, #4
 800505c:	2b00      	cmp	r3, #0
 800505e:	d02c      	beq.n	80050ba <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	69db      	ldr	r3, [r3, #28]
 8005066:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800506a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800506e:	d124      	bne.n	80050ba <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005078:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005088:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	689a      	ldr	r2, [r3, #8]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f022 0201 	bic.w	r2, r2, #1
 8005098:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2220      	movs	r2, #32
 800509e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2220      	movs	r2, #32
 80050a4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2220      	movs	r2, #32
 80050aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e00f      	b.n	80050da <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	69da      	ldr	r2, [r3, #28]
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	4013      	ands	r3, r2
 80050c4:	68ba      	ldr	r2, [r7, #8]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	bf0c      	ite	eq
 80050ca:	2301      	moveq	r3, #1
 80050cc:	2300      	movne	r3, #0
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	461a      	mov	r2, r3
 80050d2:	79fb      	ldrb	r3, [r7, #7]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d091      	beq.n	8004ffc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050d8:	2300      	movs	r3, #0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3710      	adds	r7, #16
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}

080050e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050e2:	b480      	push	{r7}
 80050e4:	b083      	sub	sp, #12
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80050f8:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	689a      	ldr	r2, [r3, #8]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f022 0201 	bic.w	r2, r2, #1
 8005108:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800510e:	2b01      	cmp	r3, #1
 8005110:	d107      	bne.n	8005122 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f022 0210 	bic.w	r2, r2, #16
 8005120:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2220      	movs	r2, #32
 8005126:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005134:	bf00      	nop
 8005136:	370c      	adds	r7, #12
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr

08005140 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800514c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2200      	movs	r2, #0
 8005152:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800515e:	68f8      	ldr	r0, [r7, #12]
 8005160:	f7ff fbd6 	bl	8004910 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005164:	bf00      	nop
 8005166:	3710      	adds	r7, #16
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005182:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2220      	movs	r2, #32
 8005188:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f7ff fbb3 	bl	80048fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005196:	bf00      	nop
 8005198:	3708      	adds	r7, #8
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
	...

080051a0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80051a6:	4ba0      	ldr	r3, [pc, #640]	; (8005428 <MX_LWIP_Init+0x288>)
 80051a8:	22c0      	movs	r2, #192	; 0xc0
 80051aa:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80051ac:	4b9e      	ldr	r3, [pc, #632]	; (8005428 <MX_LWIP_Init+0x288>)
 80051ae:	22a8      	movs	r2, #168	; 0xa8
 80051b0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 80051b2:	4b9d      	ldr	r3, [pc, #628]	; (8005428 <MX_LWIP_Init+0x288>)
 80051b4:	2200      	movs	r2, #0
 80051b6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 80051b8:	4b9b      	ldr	r3, [pc, #620]	; (8005428 <MX_LWIP_Init+0x288>)
 80051ba:	220a      	movs	r2, #10
 80051bc:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80051be:	4b9b      	ldr	r3, [pc, #620]	; (800542c <MX_LWIP_Init+0x28c>)
 80051c0:	22ff      	movs	r2, #255	; 0xff
 80051c2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80051c4:	4b99      	ldr	r3, [pc, #612]	; (800542c <MX_LWIP_Init+0x28c>)
 80051c6:	22ff      	movs	r2, #255	; 0xff
 80051c8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80051ca:	4b98      	ldr	r3, [pc, #608]	; (800542c <MX_LWIP_Init+0x28c>)
 80051cc:	22ff      	movs	r2, #255	; 0xff
 80051ce:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80051d0:	4b96      	ldr	r3, [pc, #600]	; (800542c <MX_LWIP_Init+0x28c>)
 80051d2:	2200      	movs	r2, #0
 80051d4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80051d6:	4b96      	ldr	r3, [pc, #600]	; (8005430 <MX_LWIP_Init+0x290>)
 80051d8:	22c0      	movs	r2, #192	; 0xc0
 80051da:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80051dc:	4b94      	ldr	r3, [pc, #592]	; (8005430 <MX_LWIP_Init+0x290>)
 80051de:	22a8      	movs	r2, #168	; 0xa8
 80051e0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 80051e2:	4b93      	ldr	r3, [pc, #588]	; (8005430 <MX_LWIP_Init+0x290>)
 80051e4:	2200      	movs	r2, #0
 80051e6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80051e8:	4b91      	ldr	r3, [pc, #580]	; (8005430 <MX_LWIP_Init+0x290>)
 80051ea:	2201      	movs	r2, #1
 80051ec:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80051ee:	2100      	movs	r1, #0
 80051f0:	2000      	movs	r0, #0
 80051f2:	f007 f9fd 	bl	800c5f0 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80051f6:	4b8c      	ldr	r3, [pc, #560]	; (8005428 <MX_LWIP_Init+0x288>)
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	061a      	lsls	r2, r3, #24
 80051fc:	4b8a      	ldr	r3, [pc, #552]	; (8005428 <MX_LWIP_Init+0x288>)
 80051fe:	785b      	ldrb	r3, [r3, #1]
 8005200:	041b      	lsls	r3, r3, #16
 8005202:	431a      	orrs	r2, r3
 8005204:	4b88      	ldr	r3, [pc, #544]	; (8005428 <MX_LWIP_Init+0x288>)
 8005206:	789b      	ldrb	r3, [r3, #2]
 8005208:	021b      	lsls	r3, r3, #8
 800520a:	4313      	orrs	r3, r2
 800520c:	4a86      	ldr	r2, [pc, #536]	; (8005428 <MX_LWIP_Init+0x288>)
 800520e:	78d2      	ldrb	r2, [r2, #3]
 8005210:	4313      	orrs	r3, r2
 8005212:	061a      	lsls	r2, r3, #24
 8005214:	4b84      	ldr	r3, [pc, #528]	; (8005428 <MX_LWIP_Init+0x288>)
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	0619      	lsls	r1, r3, #24
 800521a:	4b83      	ldr	r3, [pc, #524]	; (8005428 <MX_LWIP_Init+0x288>)
 800521c:	785b      	ldrb	r3, [r3, #1]
 800521e:	041b      	lsls	r3, r3, #16
 8005220:	4319      	orrs	r1, r3
 8005222:	4b81      	ldr	r3, [pc, #516]	; (8005428 <MX_LWIP_Init+0x288>)
 8005224:	789b      	ldrb	r3, [r3, #2]
 8005226:	021b      	lsls	r3, r3, #8
 8005228:	430b      	orrs	r3, r1
 800522a:	497f      	ldr	r1, [pc, #508]	; (8005428 <MX_LWIP_Init+0x288>)
 800522c:	78c9      	ldrb	r1, [r1, #3]
 800522e:	430b      	orrs	r3, r1
 8005230:	021b      	lsls	r3, r3, #8
 8005232:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005236:	431a      	orrs	r2, r3
 8005238:	4b7b      	ldr	r3, [pc, #492]	; (8005428 <MX_LWIP_Init+0x288>)
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	0619      	lsls	r1, r3, #24
 800523e:	4b7a      	ldr	r3, [pc, #488]	; (8005428 <MX_LWIP_Init+0x288>)
 8005240:	785b      	ldrb	r3, [r3, #1]
 8005242:	041b      	lsls	r3, r3, #16
 8005244:	4319      	orrs	r1, r3
 8005246:	4b78      	ldr	r3, [pc, #480]	; (8005428 <MX_LWIP_Init+0x288>)
 8005248:	789b      	ldrb	r3, [r3, #2]
 800524a:	021b      	lsls	r3, r3, #8
 800524c:	430b      	orrs	r3, r1
 800524e:	4976      	ldr	r1, [pc, #472]	; (8005428 <MX_LWIP_Init+0x288>)
 8005250:	78c9      	ldrb	r1, [r1, #3]
 8005252:	430b      	orrs	r3, r1
 8005254:	0a1b      	lsrs	r3, r3, #8
 8005256:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800525a:	431a      	orrs	r2, r3
 800525c:	4b72      	ldr	r3, [pc, #456]	; (8005428 <MX_LWIP_Init+0x288>)
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	0619      	lsls	r1, r3, #24
 8005262:	4b71      	ldr	r3, [pc, #452]	; (8005428 <MX_LWIP_Init+0x288>)
 8005264:	785b      	ldrb	r3, [r3, #1]
 8005266:	041b      	lsls	r3, r3, #16
 8005268:	4319      	orrs	r1, r3
 800526a:	4b6f      	ldr	r3, [pc, #444]	; (8005428 <MX_LWIP_Init+0x288>)
 800526c:	789b      	ldrb	r3, [r3, #2]
 800526e:	021b      	lsls	r3, r3, #8
 8005270:	430b      	orrs	r3, r1
 8005272:	496d      	ldr	r1, [pc, #436]	; (8005428 <MX_LWIP_Init+0x288>)
 8005274:	78c9      	ldrb	r1, [r1, #3]
 8005276:	430b      	orrs	r3, r1
 8005278:	0e1b      	lsrs	r3, r3, #24
 800527a:	4313      	orrs	r3, r2
 800527c:	4a6d      	ldr	r2, [pc, #436]	; (8005434 <MX_LWIP_Init+0x294>)
 800527e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8005280:	4b6a      	ldr	r3, [pc, #424]	; (800542c <MX_LWIP_Init+0x28c>)
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	061a      	lsls	r2, r3, #24
 8005286:	4b69      	ldr	r3, [pc, #420]	; (800542c <MX_LWIP_Init+0x28c>)
 8005288:	785b      	ldrb	r3, [r3, #1]
 800528a:	041b      	lsls	r3, r3, #16
 800528c:	431a      	orrs	r2, r3
 800528e:	4b67      	ldr	r3, [pc, #412]	; (800542c <MX_LWIP_Init+0x28c>)
 8005290:	789b      	ldrb	r3, [r3, #2]
 8005292:	021b      	lsls	r3, r3, #8
 8005294:	4313      	orrs	r3, r2
 8005296:	4a65      	ldr	r2, [pc, #404]	; (800542c <MX_LWIP_Init+0x28c>)
 8005298:	78d2      	ldrb	r2, [r2, #3]
 800529a:	4313      	orrs	r3, r2
 800529c:	061a      	lsls	r2, r3, #24
 800529e:	4b63      	ldr	r3, [pc, #396]	; (800542c <MX_LWIP_Init+0x28c>)
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	0619      	lsls	r1, r3, #24
 80052a4:	4b61      	ldr	r3, [pc, #388]	; (800542c <MX_LWIP_Init+0x28c>)
 80052a6:	785b      	ldrb	r3, [r3, #1]
 80052a8:	041b      	lsls	r3, r3, #16
 80052aa:	4319      	orrs	r1, r3
 80052ac:	4b5f      	ldr	r3, [pc, #380]	; (800542c <MX_LWIP_Init+0x28c>)
 80052ae:	789b      	ldrb	r3, [r3, #2]
 80052b0:	021b      	lsls	r3, r3, #8
 80052b2:	430b      	orrs	r3, r1
 80052b4:	495d      	ldr	r1, [pc, #372]	; (800542c <MX_LWIP_Init+0x28c>)
 80052b6:	78c9      	ldrb	r1, [r1, #3]
 80052b8:	430b      	orrs	r3, r1
 80052ba:	021b      	lsls	r3, r3, #8
 80052bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80052c0:	431a      	orrs	r2, r3
 80052c2:	4b5a      	ldr	r3, [pc, #360]	; (800542c <MX_LWIP_Init+0x28c>)
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	0619      	lsls	r1, r3, #24
 80052c8:	4b58      	ldr	r3, [pc, #352]	; (800542c <MX_LWIP_Init+0x28c>)
 80052ca:	785b      	ldrb	r3, [r3, #1]
 80052cc:	041b      	lsls	r3, r3, #16
 80052ce:	4319      	orrs	r1, r3
 80052d0:	4b56      	ldr	r3, [pc, #344]	; (800542c <MX_LWIP_Init+0x28c>)
 80052d2:	789b      	ldrb	r3, [r3, #2]
 80052d4:	021b      	lsls	r3, r3, #8
 80052d6:	430b      	orrs	r3, r1
 80052d8:	4954      	ldr	r1, [pc, #336]	; (800542c <MX_LWIP_Init+0x28c>)
 80052da:	78c9      	ldrb	r1, [r1, #3]
 80052dc:	430b      	orrs	r3, r1
 80052de:	0a1b      	lsrs	r3, r3, #8
 80052e0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80052e4:	431a      	orrs	r2, r3
 80052e6:	4b51      	ldr	r3, [pc, #324]	; (800542c <MX_LWIP_Init+0x28c>)
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	0619      	lsls	r1, r3, #24
 80052ec:	4b4f      	ldr	r3, [pc, #316]	; (800542c <MX_LWIP_Init+0x28c>)
 80052ee:	785b      	ldrb	r3, [r3, #1]
 80052f0:	041b      	lsls	r3, r3, #16
 80052f2:	4319      	orrs	r1, r3
 80052f4:	4b4d      	ldr	r3, [pc, #308]	; (800542c <MX_LWIP_Init+0x28c>)
 80052f6:	789b      	ldrb	r3, [r3, #2]
 80052f8:	021b      	lsls	r3, r3, #8
 80052fa:	430b      	orrs	r3, r1
 80052fc:	494b      	ldr	r1, [pc, #300]	; (800542c <MX_LWIP_Init+0x28c>)
 80052fe:	78c9      	ldrb	r1, [r1, #3]
 8005300:	430b      	orrs	r3, r1
 8005302:	0e1b      	lsrs	r3, r3, #24
 8005304:	4313      	orrs	r3, r2
 8005306:	4a4c      	ldr	r2, [pc, #304]	; (8005438 <MX_LWIP_Init+0x298>)
 8005308:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800530a:	4b49      	ldr	r3, [pc, #292]	; (8005430 <MX_LWIP_Init+0x290>)
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	061a      	lsls	r2, r3, #24
 8005310:	4b47      	ldr	r3, [pc, #284]	; (8005430 <MX_LWIP_Init+0x290>)
 8005312:	785b      	ldrb	r3, [r3, #1]
 8005314:	041b      	lsls	r3, r3, #16
 8005316:	431a      	orrs	r2, r3
 8005318:	4b45      	ldr	r3, [pc, #276]	; (8005430 <MX_LWIP_Init+0x290>)
 800531a:	789b      	ldrb	r3, [r3, #2]
 800531c:	021b      	lsls	r3, r3, #8
 800531e:	4313      	orrs	r3, r2
 8005320:	4a43      	ldr	r2, [pc, #268]	; (8005430 <MX_LWIP_Init+0x290>)
 8005322:	78d2      	ldrb	r2, [r2, #3]
 8005324:	4313      	orrs	r3, r2
 8005326:	061a      	lsls	r2, r3, #24
 8005328:	4b41      	ldr	r3, [pc, #260]	; (8005430 <MX_LWIP_Init+0x290>)
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	0619      	lsls	r1, r3, #24
 800532e:	4b40      	ldr	r3, [pc, #256]	; (8005430 <MX_LWIP_Init+0x290>)
 8005330:	785b      	ldrb	r3, [r3, #1]
 8005332:	041b      	lsls	r3, r3, #16
 8005334:	4319      	orrs	r1, r3
 8005336:	4b3e      	ldr	r3, [pc, #248]	; (8005430 <MX_LWIP_Init+0x290>)
 8005338:	789b      	ldrb	r3, [r3, #2]
 800533a:	021b      	lsls	r3, r3, #8
 800533c:	430b      	orrs	r3, r1
 800533e:	493c      	ldr	r1, [pc, #240]	; (8005430 <MX_LWIP_Init+0x290>)
 8005340:	78c9      	ldrb	r1, [r1, #3]
 8005342:	430b      	orrs	r3, r1
 8005344:	021b      	lsls	r3, r3, #8
 8005346:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800534a:	431a      	orrs	r2, r3
 800534c:	4b38      	ldr	r3, [pc, #224]	; (8005430 <MX_LWIP_Init+0x290>)
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	0619      	lsls	r1, r3, #24
 8005352:	4b37      	ldr	r3, [pc, #220]	; (8005430 <MX_LWIP_Init+0x290>)
 8005354:	785b      	ldrb	r3, [r3, #1]
 8005356:	041b      	lsls	r3, r3, #16
 8005358:	4319      	orrs	r1, r3
 800535a:	4b35      	ldr	r3, [pc, #212]	; (8005430 <MX_LWIP_Init+0x290>)
 800535c:	789b      	ldrb	r3, [r3, #2]
 800535e:	021b      	lsls	r3, r3, #8
 8005360:	430b      	orrs	r3, r1
 8005362:	4933      	ldr	r1, [pc, #204]	; (8005430 <MX_LWIP_Init+0x290>)
 8005364:	78c9      	ldrb	r1, [r1, #3]
 8005366:	430b      	orrs	r3, r1
 8005368:	0a1b      	lsrs	r3, r3, #8
 800536a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800536e:	431a      	orrs	r2, r3
 8005370:	4b2f      	ldr	r3, [pc, #188]	; (8005430 <MX_LWIP_Init+0x290>)
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	0619      	lsls	r1, r3, #24
 8005376:	4b2e      	ldr	r3, [pc, #184]	; (8005430 <MX_LWIP_Init+0x290>)
 8005378:	785b      	ldrb	r3, [r3, #1]
 800537a:	041b      	lsls	r3, r3, #16
 800537c:	4319      	orrs	r1, r3
 800537e:	4b2c      	ldr	r3, [pc, #176]	; (8005430 <MX_LWIP_Init+0x290>)
 8005380:	789b      	ldrb	r3, [r3, #2]
 8005382:	021b      	lsls	r3, r3, #8
 8005384:	430b      	orrs	r3, r1
 8005386:	492a      	ldr	r1, [pc, #168]	; (8005430 <MX_LWIP_Init+0x290>)
 8005388:	78c9      	ldrb	r1, [r1, #3]
 800538a:	430b      	orrs	r3, r1
 800538c:	0e1b      	lsrs	r3, r3, #24
 800538e:	4313      	orrs	r3, r2
 8005390:	4a2a      	ldr	r2, [pc, #168]	; (800543c <MX_LWIP_Init+0x29c>)
 8005392:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8005394:	4b2a      	ldr	r3, [pc, #168]	; (8005440 <MX_LWIP_Init+0x2a0>)
 8005396:	9302      	str	r3, [sp, #8]
 8005398:	4b2a      	ldr	r3, [pc, #168]	; (8005444 <MX_LWIP_Init+0x2a4>)
 800539a:	9301      	str	r3, [sp, #4]
 800539c:	2300      	movs	r3, #0
 800539e:	9300      	str	r3, [sp, #0]
 80053a0:	4b26      	ldr	r3, [pc, #152]	; (800543c <MX_LWIP_Init+0x29c>)
 80053a2:	4a25      	ldr	r2, [pc, #148]	; (8005438 <MX_LWIP_Init+0x298>)
 80053a4:	4923      	ldr	r1, [pc, #140]	; (8005434 <MX_LWIP_Init+0x294>)
 80053a6:	4828      	ldr	r0, [pc, #160]	; (8005448 <MX_LWIP_Init+0x2a8>)
 80053a8:	f007 fea6 	bl	800d0f8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80053ac:	4826      	ldr	r0, [pc, #152]	; (8005448 <MX_LWIP_Init+0x2a8>)
 80053ae:	f008 f855 	bl	800d45c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80053b2:	4b25      	ldr	r3, [pc, #148]	; (8005448 <MX_LWIP_Init+0x2a8>)
 80053b4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80053b8:	089b      	lsrs	r3, r3, #2
 80053ba:	f003 0301 	and.w	r3, r3, #1
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d003      	beq.n	80053cc <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80053c4:	4820      	ldr	r0, [pc, #128]	; (8005448 <MX_LWIP_Init+0x2a8>)
 80053c6:	f008 f859 	bl	800d47c <netif_set_up>
 80053ca:	e002      	b.n	80053d2 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80053cc:	481e      	ldr	r0, [pc, #120]	; (8005448 <MX_LWIP_Init+0x2a8>)
 80053ce:	f008 f8c1 	bl	800d554 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80053d2:	491e      	ldr	r1, [pc, #120]	; (800544c <MX_LWIP_Init+0x2ac>)
 80053d4:	481c      	ldr	r0, [pc, #112]	; (8005448 <MX_LWIP_Init+0x2a8>)
 80053d6:	f008 f953 	bl	800d680 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  Netif_LinkSemaphore = osSemaphoreNew(1, 1, NULL);
 80053da:	2200      	movs	r2, #0
 80053dc:	2101      	movs	r1, #1
 80053de:	2001      	movs	r0, #1
 80053e0:	f000 ff1a 	bl	8006218 <osSemaphoreNew>
 80053e4:	4603      	mov	r3, r0
 80053e6:	4a1a      	ldr	r2, [pc, #104]	; (8005450 <MX_LWIP_Init+0x2b0>)
 80053e8:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 80053ea:	4b1a      	ldr	r3, [pc, #104]	; (8005454 <MX_LWIP_Init+0x2b4>)
 80053ec:	4a16      	ldr	r2, [pc, #88]	; (8005448 <MX_LWIP_Init+0x2a8>)
 80053ee:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 80053f0:	4b17      	ldr	r3, [pc, #92]	; (8005450 <MX_LWIP_Init+0x2b0>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a17      	ldr	r2, [pc, #92]	; (8005454 <MX_LWIP_Init+0x2b4>)
 80053f6:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80053f8:	2224      	movs	r2, #36	; 0x24
 80053fa:	2100      	movs	r1, #0
 80053fc:	4816      	ldr	r0, [pc, #88]	; (8005458 <MX_LWIP_Init+0x2b8>)
 80053fe:	f015 fb30 	bl	801aa62 <memset>
  attributes.name = "LinkThr";
 8005402:	4b15      	ldr	r3, [pc, #84]	; (8005458 <MX_LWIP_Init+0x2b8>)
 8005404:	4a15      	ldr	r2, [pc, #84]	; (800545c <MX_LWIP_Init+0x2bc>)
 8005406:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8005408:	4b13      	ldr	r3, [pc, #76]	; (8005458 <MX_LWIP_Init+0x2b8>)
 800540a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800540e:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8005410:	4b11      	ldr	r3, [pc, #68]	; (8005458 <MX_LWIP_Init+0x2b8>)
 8005412:	2210      	movs	r2, #16
 8005414:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernetif_set_link, &link_arg, &attributes);
 8005416:	4a10      	ldr	r2, [pc, #64]	; (8005458 <MX_LWIP_Init+0x2b8>)
 8005418:	490e      	ldr	r1, [pc, #56]	; (8005454 <MX_LWIP_Init+0x2b4>)
 800541a:	4811      	ldr	r0, [pc, #68]	; (8005460 <MX_LWIP_Init+0x2c0>)
 800541c:	f000 fce0 	bl	8005de0 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8005420:	bf00      	nop
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	20005100 	.word	0x20005100
 800542c:	200050fc 	.word	0x200050fc
 8005430:	2000509c 	.word	0x2000509c
 8005434:	200050f8 	.word	0x200050f8
 8005438:	20005104 	.word	0x20005104
 800543c:	20005108 	.word	0x20005108
 8005440:	0800c501 	.word	0x0800c501
 8005444:	08005abd 	.word	0x08005abd
 8005448:	200050c4 	.word	0x200050c4
 800544c:	08005ba1 	.word	0x08005ba1
 8005450:	200001a0 	.word	0x200001a0
 8005454:	20005094 	.word	0x20005094
 8005458:	200050a0 	.word	0x200050a0
 800545c:	0801b950 	.word	0x0801b950
 8005460:	08005b29 	.word	0x08005b29

08005464 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b08e      	sub	sp, #56	; 0x38
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800546c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005470:	2200      	movs	r2, #0
 8005472:	601a      	str	r2, [r3, #0]
 8005474:	605a      	str	r2, [r3, #4]
 8005476:	609a      	str	r2, [r3, #8]
 8005478:	60da      	str	r2, [r3, #12]
 800547a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a52      	ldr	r2, [pc, #328]	; (80055cc <HAL_ETH_MspInit+0x168>)
 8005482:	4293      	cmp	r3, r2
 8005484:	f040 809e 	bne.w	80055c4 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005488:	4b51      	ldr	r3, [pc, #324]	; (80055d0 <HAL_ETH_MspInit+0x16c>)
 800548a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800548c:	4a50      	ldr	r2, [pc, #320]	; (80055d0 <HAL_ETH_MspInit+0x16c>)
 800548e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005492:	6313      	str	r3, [r2, #48]	; 0x30
 8005494:	4b4e      	ldr	r3, [pc, #312]	; (80055d0 <HAL_ETH_MspInit+0x16c>)
 8005496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800549c:	623b      	str	r3, [r7, #32]
 800549e:	6a3b      	ldr	r3, [r7, #32]
 80054a0:	4b4b      	ldr	r3, [pc, #300]	; (80055d0 <HAL_ETH_MspInit+0x16c>)
 80054a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a4:	4a4a      	ldr	r2, [pc, #296]	; (80055d0 <HAL_ETH_MspInit+0x16c>)
 80054a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80054aa:	6313      	str	r3, [r2, #48]	; 0x30
 80054ac:	4b48      	ldr	r3, [pc, #288]	; (80055d0 <HAL_ETH_MspInit+0x16c>)
 80054ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80054b4:	61fb      	str	r3, [r7, #28]
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	4b45      	ldr	r3, [pc, #276]	; (80055d0 <HAL_ETH_MspInit+0x16c>)
 80054ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054bc:	4a44      	ldr	r2, [pc, #272]	; (80055d0 <HAL_ETH_MspInit+0x16c>)
 80054be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80054c2:	6313      	str	r3, [r2, #48]	; 0x30
 80054c4:	4b42      	ldr	r3, [pc, #264]	; (80055d0 <HAL_ETH_MspInit+0x16c>)
 80054c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054cc:	61bb      	str	r3, [r7, #24]
 80054ce:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80054d0:	4b3f      	ldr	r3, [pc, #252]	; (80055d0 <HAL_ETH_MspInit+0x16c>)
 80054d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d4:	4a3e      	ldr	r2, [pc, #248]	; (80055d0 <HAL_ETH_MspInit+0x16c>)
 80054d6:	f043 0304 	orr.w	r3, r3, #4
 80054da:	6313      	str	r3, [r2, #48]	; 0x30
 80054dc:	4b3c      	ldr	r3, [pc, #240]	; (80055d0 <HAL_ETH_MspInit+0x16c>)
 80054de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e0:	f003 0304 	and.w	r3, r3, #4
 80054e4:	617b      	str	r3, [r7, #20]
 80054e6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054e8:	4b39      	ldr	r3, [pc, #228]	; (80055d0 <HAL_ETH_MspInit+0x16c>)
 80054ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ec:	4a38      	ldr	r2, [pc, #224]	; (80055d0 <HAL_ETH_MspInit+0x16c>)
 80054ee:	f043 0301 	orr.w	r3, r3, #1
 80054f2:	6313      	str	r3, [r2, #48]	; 0x30
 80054f4:	4b36      	ldr	r3, [pc, #216]	; (80055d0 <HAL_ETH_MspInit+0x16c>)
 80054f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f8:	f003 0301 	and.w	r3, r3, #1
 80054fc:	613b      	str	r3, [r7, #16]
 80054fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005500:	4b33      	ldr	r3, [pc, #204]	; (80055d0 <HAL_ETH_MspInit+0x16c>)
 8005502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005504:	4a32      	ldr	r2, [pc, #200]	; (80055d0 <HAL_ETH_MspInit+0x16c>)
 8005506:	f043 0302 	orr.w	r3, r3, #2
 800550a:	6313      	str	r3, [r2, #48]	; 0x30
 800550c:	4b30      	ldr	r3, [pc, #192]	; (80055d0 <HAL_ETH_MspInit+0x16c>)
 800550e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005510:	f003 0302 	and.w	r3, r3, #2
 8005514:	60fb      	str	r3, [r7, #12]
 8005516:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005518:	4b2d      	ldr	r3, [pc, #180]	; (80055d0 <HAL_ETH_MspInit+0x16c>)
 800551a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800551c:	4a2c      	ldr	r2, [pc, #176]	; (80055d0 <HAL_ETH_MspInit+0x16c>)
 800551e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005522:	6313      	str	r3, [r2, #48]	; 0x30
 8005524:	4b2a      	ldr	r3, [pc, #168]	; (80055d0 <HAL_ETH_MspInit+0x16c>)
 8005526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800552c:	60bb      	str	r3, [r7, #8]
 800552e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8005530:	2332      	movs	r3, #50	; 0x32
 8005532:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005534:	2302      	movs	r3, #2
 8005536:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005538:	2300      	movs	r3, #0
 800553a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800553c:	2303      	movs	r3, #3
 800553e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005540:	230b      	movs	r3, #11
 8005542:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005544:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005548:	4619      	mov	r1, r3
 800554a:	4822      	ldr	r0, [pc, #136]	; (80055d4 <HAL_ETH_MspInit+0x170>)
 800554c:	f7fd f8ac 	bl	80026a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8005550:	2386      	movs	r3, #134	; 0x86
 8005552:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005554:	2302      	movs	r3, #2
 8005556:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005558:	2300      	movs	r3, #0
 800555a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800555c:	2303      	movs	r3, #3
 800555e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005560:	230b      	movs	r3, #11
 8005562:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005564:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005568:	4619      	mov	r1, r3
 800556a:	481b      	ldr	r0, [pc, #108]	; (80055d8 <HAL_ETH_MspInit+0x174>)
 800556c:	f7fd f89c 	bl	80026a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8005570:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005574:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005576:	2302      	movs	r3, #2
 8005578:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800557a:	2300      	movs	r3, #0
 800557c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800557e:	2303      	movs	r3, #3
 8005580:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005582:	230b      	movs	r3, #11
 8005584:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8005586:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800558a:	4619      	mov	r1, r3
 800558c:	4813      	ldr	r0, [pc, #76]	; (80055dc <HAL_ETH_MspInit+0x178>)
 800558e:	f7fd f88b 	bl	80026a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8005592:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005596:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005598:	2302      	movs	r3, #2
 800559a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800559c:	2300      	movs	r3, #0
 800559e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055a0:	2303      	movs	r3, #3
 80055a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80055a4:	230b      	movs	r3, #11
 80055a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80055a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055ac:	4619      	mov	r1, r3
 80055ae:	480c      	ldr	r0, [pc, #48]	; (80055e0 <HAL_ETH_MspInit+0x17c>)
 80055b0:	f7fd f87a 	bl	80026a8 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80055b4:	2200      	movs	r2, #0
 80055b6:	2105      	movs	r1, #5
 80055b8:	203d      	movs	r0, #61	; 0x3d
 80055ba:	f7fb fe35 	bl	8001228 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80055be:	203d      	movs	r0, #61	; 0x3d
 80055c0:	f7fb fe4e 	bl	8001260 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80055c4:	bf00      	nop
 80055c6:	3738      	adds	r7, #56	; 0x38
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	40028000 	.word	0x40028000
 80055d0:	40023800 	.word	0x40023800
 80055d4:	40020800 	.word	0x40020800
 80055d8:	40020000 	.word	0x40020000
 80055dc:	40020400 	.word	0x40020400
 80055e0:	40021800 	.word	0x40021800

080055e4 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b082      	sub	sp, #8
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 80055ec:	4b04      	ldr	r3, [pc, #16]	; (8005600 <HAL_ETH_RxCpltCallback+0x1c>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4618      	mov	r0, r3
 80055f2:	f000 ff13 	bl	800641c <osSemaphoreRelease>
}
 80055f6:	bf00      	nop
 80055f8:	3708      	adds	r7, #8
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
 80055fe:	bf00      	nop
 8005600:	200001a4 	.word	0x200001a4

08005604 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b090      	sub	sp, #64	; 0x40
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800560c:	2300      	movs	r3, #0
 800560e:	63bb      	str	r3, [r7, #56]	; 0x38
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005610:	4b5d      	ldr	r3, [pc, #372]	; (8005788 <low_level_init+0x184>)
 8005612:	4a5e      	ldr	r2, [pc, #376]	; (800578c <low_level_init+0x188>)
 8005614:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8005616:	4b5c      	ldr	r3, [pc, #368]	; (8005788 <low_level_init+0x184>)
 8005618:	2201      	movs	r2, #1
 800561a:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 800561c:	4b5a      	ldr	r3, [pc, #360]	; (8005788 <low_level_init+0x184>)
 800561e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005622:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8005624:	4b58      	ldr	r3, [pc, #352]	; (8005788 <low_level_init+0x184>)
 8005626:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800562a:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800562c:	4b56      	ldr	r3, [pc, #344]	; (8005788 <low_level_init+0x184>)
 800562e:	2201      	movs	r2, #1
 8005630:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8005632:	2300      	movs	r3, #0
 8005634:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 8005636:	2380      	movs	r3, #128	; 0x80
 8005638:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 800563a:	23e1      	movs	r3, #225	; 0xe1
 800563c:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 800563e:	2300      	movs	r3, #0
 8005640:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 8005642:	2300      	movs	r3, #0
 8005644:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 8005646:	2300      	movs	r3, #0
 8005648:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 800564a:	4a4f      	ldr	r2, [pc, #316]	; (8005788 <low_level_init+0x184>)
 800564c:	f107 030c 	add.w	r3, r7, #12
 8005650:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8005652:	4b4d      	ldr	r3, [pc, #308]	; (8005788 <low_level_init+0x184>)
 8005654:	2201      	movs	r2, #1
 8005656:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8005658:	4b4b      	ldr	r3, [pc, #300]	; (8005788 <low_level_init+0x184>)
 800565a:	2200      	movs	r2, #0
 800565c:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800565e:	4b4a      	ldr	r3, [pc, #296]	; (8005788 <low_level_init+0x184>)
 8005660:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005664:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005666:	4848      	ldr	r0, [pc, #288]	; (8005788 <low_level_init+0x184>)
 8005668:	f7fb fe9a 	bl	80013a0 <HAL_ETH_Init>
 800566c:	4603      	mov	r3, r0
 800566e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8005672:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005676:	2b00      	cmp	r3, #0
 8005678:	d108      	bne.n	800568c <low_level_init+0x88>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005680:	f043 0304 	orr.w	r3, r3, #4
 8005684:	b2da      	uxtb	r2, r3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800568c:	2304      	movs	r3, #4
 800568e:	4a40      	ldr	r2, [pc, #256]	; (8005790 <low_level_init+0x18c>)
 8005690:	4940      	ldr	r1, [pc, #256]	; (8005794 <low_level_init+0x190>)
 8005692:	483d      	ldr	r0, [pc, #244]	; (8005788 <low_level_init+0x184>)
 8005694:	f7fc f81e 	bl	80016d4 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8005698:	2304      	movs	r3, #4
 800569a:	4a3f      	ldr	r2, [pc, #252]	; (8005798 <low_level_init+0x194>)
 800569c:	493f      	ldr	r1, [pc, #252]	; (800579c <low_level_init+0x198>)
 800569e:	483a      	ldr	r0, [pc, #232]	; (8005788 <low_level_init+0x184>)
 80056a0:	f7fc f881 	bl	80017a6 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2206      	movs	r2, #6
 80056a8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80056ac:	4b36      	ldr	r3, [pc, #216]	; (8005788 <low_level_init+0x184>)
 80056ae:	695b      	ldr	r3, [r3, #20]
 80056b0:	781a      	ldrb	r2, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80056b8:	4b33      	ldr	r3, [pc, #204]	; (8005788 <low_level_init+0x184>)
 80056ba:	695b      	ldr	r3, [r3, #20]
 80056bc:	785a      	ldrb	r2, [r3, #1]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80056c4:	4b30      	ldr	r3, [pc, #192]	; (8005788 <low_level_init+0x184>)
 80056c6:	695b      	ldr	r3, [r3, #20]
 80056c8:	789a      	ldrb	r2, [r3, #2]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80056d0:	4b2d      	ldr	r3, [pc, #180]	; (8005788 <low_level_init+0x184>)
 80056d2:	695b      	ldr	r3, [r3, #20]
 80056d4:	78da      	ldrb	r2, [r3, #3]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80056dc:	4b2a      	ldr	r3, [pc, #168]	; (8005788 <low_level_init+0x184>)
 80056de:	695b      	ldr	r3, [r3, #20]
 80056e0:	791a      	ldrb	r2, [r3, #4]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80056e8:	4b27      	ldr	r3, [pc, #156]	; (8005788 <low_level_init+0x184>)
 80056ea:	695b      	ldr	r3, [r3, #20]
 80056ec:	795a      	ldrb	r2, [r3, #5]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80056fa:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005702:	f043 030a 	orr.w	r3, r3, #10
 8005706:	b2da      	uxtb	r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
 800570e:	2200      	movs	r2, #0
 8005710:	2101      	movs	r1, #1
 8005712:	2001      	movs	r0, #1
 8005714:	f000 fd80 	bl	8006218 <osSemaphoreNew>
 8005718:	4603      	mov	r3, r0
 800571a:	4a21      	ldr	r2, [pc, #132]	; (80057a0 <low_level_init+0x19c>)
 800571c:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800571e:	f107 0314 	add.w	r3, r7, #20
 8005722:	2224      	movs	r2, #36	; 0x24
 8005724:	2100      	movs	r1, #0
 8005726:	4618      	mov	r0, r3
 8005728:	f015 f99b 	bl	801aa62 <memset>
  attributes.name = "EthIf";
 800572c:	4b1d      	ldr	r3, [pc, #116]	; (80057a4 <low_level_init+0x1a0>)
 800572e:	617b      	str	r3, [r7, #20]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8005730:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8005734:	62bb      	str	r3, [r7, #40]	; 0x28
  attributes.priority = osPriorityRealtime;
 8005736:	2330      	movs	r3, #48	; 0x30
 8005738:	62fb      	str	r3, [r7, #44]	; 0x2c
  osThreadNew(ethernetif_input, netif, &attributes);
 800573a:	f107 0314 	add.w	r3, r7, #20
 800573e:	461a      	mov	r2, r3
 8005740:	6879      	ldr	r1, [r7, #4]
 8005742:	4819      	ldr	r0, [pc, #100]	; (80057a8 <low_level_init+0x1a4>)
 8005744:	f000 fb4c 	bl	8005de0 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8005748:	480f      	ldr	r0, [pc, #60]	; (8005788 <low_level_init+0x184>)
 800574a:	f7fc fb54 	bl	8001df6 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800574e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005752:	461a      	mov	r2, r3
 8005754:	211d      	movs	r1, #29
 8005756:	480c      	ldr	r0, [pc, #48]	; (8005788 <low_level_init+0x184>)
 8005758:	f7fc fa7f 	bl	8001c5a <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800575c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800575e:	f043 030b 	orr.w	r3, r3, #11
 8005762:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8005764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005766:	461a      	mov	r2, r3
 8005768:	211d      	movs	r1, #29
 800576a:	4807      	ldr	r0, [pc, #28]	; (8005788 <low_level_init+0x184>)
 800576c:	f7fc fadd 	bl	8001d2a <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8005770:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005774:	461a      	mov	r2, r3
 8005776:	211d      	movs	r1, #29
 8005778:	4803      	ldr	r0, [pc, #12]	; (8005788 <low_level_init+0x184>)
 800577a:	f7fc fa6e 	bl	8001c5a <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800577e:	bf00      	nop
 8005780:	3740      	adds	r7, #64	; 0x40
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	200069dc 	.word	0x200069dc
 800578c:	40028000 	.word	0x40028000
 8005790:	20006a24 	.word	0x20006a24
 8005794:	2000510c 	.word	0x2000510c
 8005798:	2000518c 	.word	0x2000518c
 800579c:	2000695c 	.word	0x2000695c
 80057a0:	200001a4 	.word	0x200001a4
 80057a4:	0801b958 	.word	0x0801b958
 80057a8:	08005a5d 	.word	0x08005a5d

080057ac <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b08a      	sub	sp, #40	; 0x28
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80057b6:	4b4b      	ldr	r3, [pc, #300]	; (80058e4 <low_level_output+0x138>)
 80057b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80057be:	2300      	movs	r3, #0
 80057c0:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80057c2:	2300      	movs	r3, #0
 80057c4:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80057c6:	2300      	movs	r3, #0
 80057c8:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80057ca:	2300      	movs	r3, #0
 80057cc:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80057ce:	4b45      	ldr	r3, [pc, #276]	; (80058e4 <low_level_output+0x138>)
 80057d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d2:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80057d4:	2300      	movs	r3, #0
 80057d6:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	623b      	str	r3, [r7, #32]
 80057dc:	e05a      	b.n	8005894 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	da03      	bge.n	80057ee <low_level_output+0x42>
      {
        errval = ERR_USE;
 80057e6:	23f8      	movs	r3, #248	; 0xf8
 80057e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80057ec:	e05c      	b.n	80058a8 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80057ee:	6a3b      	ldr	r3, [r7, #32]
 80057f0:	895b      	ldrh	r3, [r3, #10]
 80057f2:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80057f4:	2300      	movs	r3, #0
 80057f6:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80057f8:	e02f      	b.n	800585a <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80057fa:	69fa      	ldr	r2, [r7, #28]
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	18d0      	adds	r0, r2, r3
 8005800:	6a3b      	ldr	r3, [r7, #32]
 8005802:	685a      	ldr	r2, [r3, #4]
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	18d1      	adds	r1, r2, r3
 8005808:	693a      	ldr	r2, [r7, #16]
 800580a:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800580e:	1a9b      	subs	r3, r3, r2
 8005810:	461a      	mov	r2, r3
 8005812:	f015 f918 	bl	801aa46 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8005816:	69bb      	ldr	r3, [r7, #24]
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800581c:	69bb      	ldr	r3, [r7, #24]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2b00      	cmp	r3, #0
 8005822:	da03      	bge.n	800582c <low_level_output+0x80>
        {
          errval = ERR_USE;
 8005824:	23f8      	movs	r3, #248	; 0xf8
 8005826:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800582a:	e03d      	b.n	80058a8 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800582c:	69bb      	ldr	r3, [r7, #24]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8005832:	693a      	ldr	r2, [r7, #16]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	4413      	add	r3, r2
 8005838:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800583c:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800583e:	68ba      	ldr	r2, [r7, #8]
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	1ad3      	subs	r3, r2, r3
 8005844:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005848:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800584a:	697a      	ldr	r2, [r7, #20]
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	1ad3      	subs	r3, r2, r3
 8005850:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005854:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8005856:	2300      	movs	r3, #0
 8005858:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	4413      	add	r3, r2
 8005860:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005864:	4293      	cmp	r3, r2
 8005866:	d8c8      	bhi.n	80057fa <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8005868:	69fa      	ldr	r2, [r7, #28]
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	18d0      	adds	r0, r2, r3
 800586e:	6a3b      	ldr	r3, [r7, #32]
 8005870:	685a      	ldr	r2, [r3, #4]
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	4413      	add	r3, r2
 8005876:	68fa      	ldr	r2, [r7, #12]
 8005878:	4619      	mov	r1, r3
 800587a:	f015 f8e4 	bl	801aa46 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800587e:	693a      	ldr	r2, [r7, #16]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	4413      	add	r3, r2
 8005884:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8005886:	697a      	ldr	r2, [r7, #20]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	4413      	add	r3, r2
 800588c:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800588e:	6a3b      	ldr	r3, [r7, #32]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	623b      	str	r3, [r7, #32]
 8005894:	6a3b      	ldr	r3, [r7, #32]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d1a1      	bne.n	80057de <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800589a:	6979      	ldr	r1, [r7, #20]
 800589c:	4811      	ldr	r0, [pc, #68]	; (80058e4 <low_level_output+0x138>)
 800589e:	f7fb ffef 	bl	8001880 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 80058a2:	2300      	movs	r3, #0
 80058a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80058a8:	4b0e      	ldr	r3, [pc, #56]	; (80058e4 <low_level_output+0x138>)
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	f241 0314 	movw	r3, #4116	; 0x1014
 80058b0:	4413      	add	r3, r2
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 0320 	and.w	r3, r3, #32
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d00d      	beq.n	80058d8 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80058bc:	4b09      	ldr	r3, [pc, #36]	; (80058e4 <low_level_output+0x138>)
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	f241 0314 	movw	r3, #4116	; 0x1014
 80058c4:	4413      	add	r3, r2
 80058c6:	2220      	movs	r2, #32
 80058c8:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80058ca:	4b06      	ldr	r3, [pc, #24]	; (80058e4 <low_level_output+0x138>)
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	f241 0304 	movw	r3, #4100	; 0x1004
 80058d2:	4413      	add	r3, r2
 80058d4:	2200      	movs	r2, #0
 80058d6:	601a      	str	r2, [r3, #0]
  }
  return errval;
 80058d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3728      	adds	r7, #40	; 0x28
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	200069dc 	.word	0x200069dc

080058e8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b08c      	sub	sp, #48	; 0x30
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80058f0:	2300      	movs	r3, #0
 80058f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80058f4:	2300      	movs	r3, #0
 80058f6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80058f8:	2300      	movs	r3, #0
 80058fa:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80058fc:	2300      	movs	r3, #0
 80058fe:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8005900:	2300      	movs	r3, #0
 8005902:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8005904:	2300      	movs	r3, #0
 8005906:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8005908:	2300      	movs	r3, #0
 800590a:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 800590c:	4851      	ldr	r0, [pc, #324]	; (8005a54 <low_level_input+0x16c>)
 800590e:	f7fc f8a1 	bl	8001a54 <HAL_ETH_GetReceivedFrame_IT>
 8005912:	4603      	mov	r3, r0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d005      	beq.n	8005924 <low_level_input+0x3c>
  {
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8005918:	2101      	movs	r1, #1
 800591a:	484f      	ldr	r0, [pc, #316]	; (8005a58 <low_level_input+0x170>)
 800591c:	f7fd f889 	bl	8002a32 <HAL_GPIO_TogglePin>
	    return NULL;
 8005920:	2300      	movs	r3, #0
 8005922:	e092      	b.n	8005a4a <low_level_input+0x162>

  }


  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8005924:	4b4b      	ldr	r3, [pc, #300]	; (8005a54 <low_level_input+0x16c>)
 8005926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005928:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800592a:	4b4a      	ldr	r3, [pc, #296]	; (8005a54 <low_level_input+0x16c>)
 800592c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592e:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8005930:	89fb      	ldrh	r3, [r7, #14]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d007      	beq.n	8005946 <low_level_input+0x5e>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8005936:	89fb      	ldrh	r3, [r7, #14]
 8005938:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800593c:	4619      	mov	r1, r3
 800593e:	2000      	movs	r0, #0
 8005940:	f007 ff68 	bl	800d814 <pbuf_alloc>
 8005944:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8005946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005948:	2b00      	cmp	r3, #0
 800594a:	d04b      	beq.n	80059e4 <low_level_input+0xfc>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800594c:	4b41      	ldr	r3, [pc, #260]	; (8005a54 <low_level_input+0x16c>)
 800594e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005950:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8005952:	2300      	movs	r3, #0
 8005954:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8005956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005958:	62bb      	str	r3, [r7, #40]	; 0x28
 800595a:	e040      	b.n	80059de <low_level_input+0xf6>
    {
      byteslefttocopy = q->len;
 800595c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595e:	895b      	ldrh	r3, [r3, #10]
 8005960:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8005962:	2300      	movs	r3, #0
 8005964:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8005966:	e021      	b.n	80059ac <low_level_input+0xc4>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8005968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800596a:	685a      	ldr	r2, [r3, #4]
 800596c:	69bb      	ldr	r3, [r7, #24]
 800596e:	18d0      	adds	r0, r2, r3
 8005970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	18d1      	adds	r1, r2, r3
 8005976:	69fa      	ldr	r2, [r7, #28]
 8005978:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800597c:	1a9b      	subs	r3, r3, r2
 800597e:	461a      	mov	r2, r3
 8005980:	f015 f861 	bl	801aa46 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8005984:	6a3b      	ldr	r3, [r7, #32]
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800598a:	6a3b      	ldr	r3, [r7, #32]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8005990:	69fa      	ldr	r2, [r7, #28]
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	4413      	add	r3, r2
 8005996:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800599a:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800599c:	69ba      	ldr	r2, [r7, #24]
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80059a6:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 80059a8:	2300      	movs	r3, #0
 80059aa:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80059ac:	697a      	ldr	r2, [r7, #20]
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	4413      	add	r3, r2
 80059b2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d8d6      	bhi.n	8005968 <low_level_input+0x80>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80059ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059bc:	685a      	ldr	r2, [r3, #4]
 80059be:	69bb      	ldr	r3, [r7, #24]
 80059c0:	18d0      	adds	r0, r2, r3
 80059c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	4413      	add	r3, r2
 80059c8:	697a      	ldr	r2, [r7, #20]
 80059ca:	4619      	mov	r1, r3
 80059cc:	f015 f83b 	bl	801aa46 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80059d0:	69fa      	ldr	r2, [r7, #28]
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	4413      	add	r3, r2
 80059d6:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80059d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80059de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d1bb      	bne.n	800595c <low_level_input+0x74>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80059e4:	4b1b      	ldr	r3, [pc, #108]	; (8005a54 <low_level_input+0x16c>)
 80059e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e8:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80059ea:	2300      	movs	r3, #0
 80059ec:	613b      	str	r3, [r7, #16]
 80059ee:	e00b      	b.n	8005a08 <low_level_input+0x120>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80059f0:	6a3b      	ldr	r3, [r7, #32]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80059f8:	6a3b      	ldr	r3, [r7, #32]
 80059fa:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80059fc:	6a3b      	ldr	r3, [r7, #32]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	3301      	adds	r3, #1
 8005a06:	613b      	str	r3, [r7, #16]
 8005a08:	4b12      	ldr	r3, [pc, #72]	; (8005a54 <low_level_input+0x16c>)
 8005a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0c:	693a      	ldr	r2, [r7, #16]
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d3ee      	bcc.n	80059f0 <low_level_input+0x108>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8005a12:	4b10      	ldr	r3, [pc, #64]	; (8005a54 <low_level_input+0x16c>)
 8005a14:	2200      	movs	r2, #0
 8005a16:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8005a18:	4b0e      	ldr	r3, [pc, #56]	; (8005a54 <low_level_input+0x16c>)
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	f241 0314 	movw	r3, #4116	; 0x1014
 8005a20:	4413      	add	r3, r2
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d00d      	beq.n	8005a48 <low_level_input+0x160>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8005a2c:	4b09      	ldr	r3, [pc, #36]	; (8005a54 <low_level_input+0x16c>)
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	f241 0314 	movw	r3, #4116	; 0x1014
 8005a34:	4413      	add	r3, r2
 8005a36:	2280      	movs	r2, #128	; 0x80
 8005a38:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8005a3a:	4b06      	ldr	r3, [pc, #24]	; (8005a54 <low_level_input+0x16c>)
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	f241 0308 	movw	r3, #4104	; 0x1008
 8005a42:	4413      	add	r3, r2
 8005a44:	2200      	movs	r2, #0
 8005a46:	601a      	str	r2, [r3, #0]
  }
  return p;
 8005a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3730      	adds	r7, #48	; 0x30
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	bf00      	nop
 8005a54:	200069dc 	.word	0x200069dc
 8005a58:	40020400 	.word	0x40020400

08005a5c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005a68:	4b12      	ldr	r3, [pc, #72]	; (8005ab4 <ethernetif_input+0x58>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f04f 31ff 	mov.w	r1, #4294967295
 8005a70:	4618      	mov	r0, r3
 8005a72:	f000 fc6d 	bl	8006350 <osSemaphoreAcquire>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d1f5      	bne.n	8005a68 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8005a7c:	480e      	ldr	r0, [pc, #56]	; (8005ab8 <ethernetif_input+0x5c>)
 8005a7e:	f011 fd83 	bl	8017588 <sys_mutex_lock>
        p = low_level_input( netif );
 8005a82:	68f8      	ldr	r0, [r7, #12]
 8005a84:	f7ff ff30 	bl	80058e8 <low_level_input>
 8005a88:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d00a      	beq.n	8005aa6 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	68f9      	ldr	r1, [r7, #12]
 8005a96:	68b8      	ldr	r0, [r7, #8]
 8005a98:	4798      	blx	r3
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d002      	beq.n	8005aa6 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8005aa0:	68b8      	ldr	r0, [r7, #8]
 8005aa2:	f008 f99b 	bl	800dddc <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8005aa6:	4804      	ldr	r0, [pc, #16]	; (8005ab8 <ethernetif_input+0x5c>)
 8005aa8:	f011 fd7d 	bl	80175a6 <sys_mutex_unlock>
      } while(p!=NULL);
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d1e4      	bne.n	8005a7c <ethernetif_input+0x20>
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005ab2:	e7d9      	b.n	8005a68 <ethernetif_input+0xc>
 8005ab4:	200001a4 	.word	0x200001a4
 8005ab8:	20008234 	.word	0x20008234

08005abc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d106      	bne.n	8005ad8 <ethernetif_init+0x1c>
 8005aca:	4b0e      	ldr	r3, [pc, #56]	; (8005b04 <ethernetif_init+0x48>)
 8005acc:	f240 223e 	movw	r2, #574	; 0x23e
 8005ad0:	490d      	ldr	r1, [pc, #52]	; (8005b08 <ethernetif_init+0x4c>)
 8005ad2:	480e      	ldr	r0, [pc, #56]	; (8005b0c <ethernetif_init+0x50>)
 8005ad4:	f015 fb16 	bl	801b104 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2273      	movs	r2, #115	; 0x73
 8005adc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2274      	movs	r2, #116	; 0x74
 8005ae4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4a09      	ldr	r2, [pc, #36]	; (8005b10 <ethernetif_init+0x54>)
 8005aec:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a08      	ldr	r2, [pc, #32]	; (8005b14 <ethernetif_init+0x58>)
 8005af2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f7ff fd85 	bl	8005604 <low_level_init>

  return ERR_OK;
 8005afa:	2300      	movs	r3, #0
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3708      	adds	r7, #8
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	0801b960 	.word	0x0801b960
 8005b08:	0801b97c 	.word	0x0801b97c
 8005b0c:	0801b98c 	.word	0x0801b98c
 8005b10:	080155e9 	.word	0x080155e9
 8005b14:	080057ad 	.word	0x080057ad

08005b18 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005b1c:	f7fb fa9c 	bl	8001058 <HAL_GetTick>
 8005b20:	4603      	mov	r3, r0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	bd80      	pop	{r7, pc}
	...

08005b28 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void* argument)

{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8005b30:	2300      	movs	r3, #0
 8005b32:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005b38:	f107 0308 	add.w	r3, r7, #8
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	2101      	movs	r1, #1
 8005b40:	4816      	ldr	r0, [pc, #88]	; (8005b9c <ethernetif_set_link+0x74>)
 8005b42:	f7fc f88a 	bl	8001c5a <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	f003 0304 	and.w	r3, r3, #4
 8005b4c:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005b56:	f003 0304 	and.w	r3, r3, #4
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d108      	bne.n	8005b70 <ethernetif_set_link+0x48>
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d005      	beq.n	8005b70 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f007 fd25 	bl	800d5b8 <netif_set_link_up>
 8005b6e:	e011      	b.n	8005b94 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005b78:	089b      	lsrs	r3, r3, #2
 8005b7a:	f003 0301 	and.w	r3, r3, #1
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d007      	beq.n	8005b94 <ethernetif_set_link+0x6c>
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d104      	bne.n	8005b94 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f007 fd46 	bl	800d620 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8005b94:	20c8      	movs	r0, #200	; 0xc8
 8005b96:	f000 f9c9 	bl	8005f2c <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005b9a:	e7cd      	b.n	8005b38 <ethernetif_set_link+0x10>
 8005b9c:	200069dc 	.word	0x200069dc

08005ba0 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8005bac:	2300      	movs	r3, #0
 8005bae:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005bb6:	089b      	lsrs	r3, r3, #2
 8005bb8:	f003 0301 	and.w	r3, r3, #1
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d05d      	beq.n	8005c7e <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8005bc2:	4b34      	ldr	r3, [pc, #208]	; (8005c94 <ethernetif_update_config+0xf4>)
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d03f      	beq.n	8005c4a <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8005bca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005bce:	2100      	movs	r1, #0
 8005bd0:	4830      	ldr	r0, [pc, #192]	; (8005c94 <ethernetif_update_config+0xf4>)
 8005bd2:	f7fc f8aa 	bl	8001d2a <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8005bd6:	f7fb fa3f 	bl	8001058 <HAL_GetTick>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005bde:	f107 0308 	add.w	r3, r7, #8
 8005be2:	461a      	mov	r2, r3
 8005be4:	2101      	movs	r1, #1
 8005be6:	482b      	ldr	r0, [pc, #172]	; (8005c94 <ethernetif_update_config+0xf4>)
 8005be8:	f7fc f837 	bl	8001c5a <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8005bec:	f7fb fa34 	bl	8001058 <HAL_GetTick>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005bfa:	d828      	bhi.n	8005c4e <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	f003 0320 	and.w	r3, r3, #32
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d0eb      	beq.n	8005bde <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8005c06:	f107 0308 	add.w	r3, r7, #8
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	2110      	movs	r1, #16
 8005c0e:	4821      	ldr	r0, [pc, #132]	; (8005c94 <ethernetif_update_config+0xf4>)
 8005c10:	f7fc f823 	bl	8001c5a <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	f003 0304 	and.w	r3, r3, #4
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d004      	beq.n	8005c28 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8005c1e:	4b1d      	ldr	r3, [pc, #116]	; (8005c94 <ethernetif_update_config+0xf4>)
 8005c20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c24:	60da      	str	r2, [r3, #12]
 8005c26:	e002      	b.n	8005c2e <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8005c28:	4b1a      	ldr	r3, [pc, #104]	; (8005c94 <ethernetif_update_config+0xf4>)
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	f003 0302 	and.w	r3, r3, #2
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d003      	beq.n	8005c40 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8005c38:	4b16      	ldr	r3, [pc, #88]	; (8005c94 <ethernetif_update_config+0xf4>)
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	609a      	str	r2, [r3, #8]
 8005c3e:	e016      	b.n	8005c6e <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8005c40:	4b14      	ldr	r3, [pc, #80]	; (8005c94 <ethernetif_update_config+0xf4>)
 8005c42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005c46:	609a      	str	r2, [r3, #8]
 8005c48:	e011      	b.n	8005c6e <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8005c4a:	bf00      	nop
 8005c4c:	e000      	b.n	8005c50 <ethernetif_update_config+0xb0>
          goto error;
 8005c4e:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005c50:	4b10      	ldr	r3, [pc, #64]	; (8005c94 <ethernetif_update_config+0xf4>)
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	08db      	lsrs	r3, r3, #3
 8005c56:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8005c58:	4b0e      	ldr	r3, [pc, #56]	; (8005c94 <ethernetif_update_config+0xf4>)
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	085b      	lsrs	r3, r3, #1
 8005c5e:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005c60:	4313      	orrs	r3, r2
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	461a      	mov	r2, r3
 8005c66:	2100      	movs	r1, #0
 8005c68:	480a      	ldr	r0, [pc, #40]	; (8005c94 <ethernetif_update_config+0xf4>)
 8005c6a:	f7fc f85e 	bl	8001d2a <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8005c6e:	2100      	movs	r1, #0
 8005c70:	4808      	ldr	r0, [pc, #32]	; (8005c94 <ethernetif_update_config+0xf4>)
 8005c72:	f7fc f91f 	bl	8001eb4 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8005c76:	4807      	ldr	r0, [pc, #28]	; (8005c94 <ethernetif_update_config+0xf4>)
 8005c78:	f7fc f8bd 	bl	8001df6 <HAL_ETH_Start>
 8005c7c:	e002      	b.n	8005c84 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8005c7e:	4805      	ldr	r0, [pc, #20]	; (8005c94 <ethernetif_update_config+0xf4>)
 8005c80:	f7fc f8e8 	bl	8001e54 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f000 f807 	bl	8005c98 <ethernetif_notify_conn_changed>
}
 8005c8a:	bf00      	nop
 8005c8c:	3710      	adds	r7, #16
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	bf00      	nop
 8005c94:	200069dc 	.word	0x200069dc

08005c98 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b083      	sub	sp, #12
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8005ca0:	bf00      	nop
 8005ca2:	370c      	adds	r7, #12
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr

08005cac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005cac:	b480      	push	{r7}
 8005cae:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8005cb0:	bf00      	nop
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr
	...

08005cbc <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005cbc:	b480      	push	{r7}
 8005cbe:	b085      	sub	sp, #20
 8005cc0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cc2:	f3ef 8305 	mrs	r3, IPSR
 8005cc6:	60bb      	str	r3, [r7, #8]
  return(result);
 8005cc8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d10f      	bne.n	8005cee <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cce:	f3ef 8310 	mrs	r3, PRIMASK
 8005cd2:	607b      	str	r3, [r7, #4]
  return(result);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d105      	bne.n	8005ce6 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005cda:	f3ef 8311 	mrs	r3, BASEPRI
 8005cde:	603b      	str	r3, [r7, #0]
  return(result);
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d007      	beq.n	8005cf6 <osKernelInitialize+0x3a>
 8005ce6:	4b0e      	ldr	r3, [pc, #56]	; (8005d20 <osKernelInitialize+0x64>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	d103      	bne.n	8005cf6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005cee:	f06f 0305 	mvn.w	r3, #5
 8005cf2:	60fb      	str	r3, [r7, #12]
 8005cf4:	e00c      	b.n	8005d10 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005cf6:	4b0a      	ldr	r3, [pc, #40]	; (8005d20 <osKernelInitialize+0x64>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d105      	bne.n	8005d0a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005cfe:	4b08      	ldr	r3, [pc, #32]	; (8005d20 <osKernelInitialize+0x64>)
 8005d00:	2201      	movs	r2, #1
 8005d02:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005d04:	2300      	movs	r3, #0
 8005d06:	60fb      	str	r3, [r7, #12]
 8005d08:	e002      	b.n	8005d10 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8005d0e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005d10:	68fb      	ldr	r3, [r7, #12]
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3714      	adds	r7, #20
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr
 8005d1e:	bf00      	nop
 8005d20:	200001a8 	.word	0x200001a8

08005d24 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d2a:	f3ef 8305 	mrs	r3, IPSR
 8005d2e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d30:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d10f      	bne.n	8005d56 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d36:	f3ef 8310 	mrs	r3, PRIMASK
 8005d3a:	607b      	str	r3, [r7, #4]
  return(result);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d105      	bne.n	8005d4e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005d42:	f3ef 8311 	mrs	r3, BASEPRI
 8005d46:	603b      	str	r3, [r7, #0]
  return(result);
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d007      	beq.n	8005d5e <osKernelStart+0x3a>
 8005d4e:	4b0f      	ldr	r3, [pc, #60]	; (8005d8c <osKernelStart+0x68>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d103      	bne.n	8005d5e <osKernelStart+0x3a>
    stat = osErrorISR;
 8005d56:	f06f 0305 	mvn.w	r3, #5
 8005d5a:	60fb      	str	r3, [r7, #12]
 8005d5c:	e010      	b.n	8005d80 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005d5e:	4b0b      	ldr	r3, [pc, #44]	; (8005d8c <osKernelStart+0x68>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d109      	bne.n	8005d7a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005d66:	f7ff ffa1 	bl	8005cac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005d6a:	4b08      	ldr	r3, [pc, #32]	; (8005d8c <osKernelStart+0x68>)
 8005d6c:	2202      	movs	r2, #2
 8005d6e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005d70:	f002 fba6 	bl	80084c0 <vTaskStartScheduler>
      stat = osOK;
 8005d74:	2300      	movs	r3, #0
 8005d76:	60fb      	str	r3, [r7, #12]
 8005d78:	e002      	b.n	8005d80 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8005d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8005d7e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005d80:	68fb      	ldr	r3, [r7, #12]
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3710      	adds	r7, #16
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	200001a8 	.word	0x200001a8

08005d90 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d96:	f3ef 8305 	mrs	r3, IPSR
 8005d9a:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d9c:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d10f      	bne.n	8005dc2 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005da2:	f3ef 8310 	mrs	r3, PRIMASK
 8005da6:	607b      	str	r3, [r7, #4]
  return(result);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d105      	bne.n	8005dba <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005dae:	f3ef 8311 	mrs	r3, BASEPRI
 8005db2:	603b      	str	r3, [r7, #0]
  return(result);
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d007      	beq.n	8005dca <osKernelGetTickCount+0x3a>
 8005dba:	4b08      	ldr	r3, [pc, #32]	; (8005ddc <osKernelGetTickCount+0x4c>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2b02      	cmp	r3, #2
 8005dc0:	d103      	bne.n	8005dca <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8005dc2:	f002 fcaf 	bl	8008724 <xTaskGetTickCountFromISR>
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	e002      	b.n	8005dd0 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8005dca:	f002 fc9b 	bl	8008704 <xTaskGetTickCount>
 8005dce:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3710      	adds	r7, #16
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	200001a8 	.word	0x200001a8

08005de0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b090      	sub	sp, #64	; 0x40
 8005de4:	af04      	add	r7, sp, #16
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005dec:	2300      	movs	r3, #0
 8005dee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005df0:	f3ef 8305 	mrs	r3, IPSR
 8005df4:	61fb      	str	r3, [r7, #28]
  return(result);
 8005df6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	f040 808f 	bne.w	8005f1c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dfe:	f3ef 8310 	mrs	r3, PRIMASK
 8005e02:	61bb      	str	r3, [r7, #24]
  return(result);
 8005e04:	69bb      	ldr	r3, [r7, #24]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d105      	bne.n	8005e16 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005e0a:	f3ef 8311 	mrs	r3, BASEPRI
 8005e0e:	617b      	str	r3, [r7, #20]
  return(result);
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d003      	beq.n	8005e1e <osThreadNew+0x3e>
 8005e16:	4b44      	ldr	r3, [pc, #272]	; (8005f28 <osThreadNew+0x148>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2b02      	cmp	r3, #2
 8005e1c:	d07e      	beq.n	8005f1c <osThreadNew+0x13c>
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d07b      	beq.n	8005f1c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8005e24:	2380      	movs	r3, #128	; 0x80
 8005e26:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005e28:	2318      	movs	r3, #24
 8005e2a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8005e30:	f04f 33ff 	mov.w	r3, #4294967295
 8005e34:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d045      	beq.n	8005ec8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d002      	beq.n	8005e4a <osThreadNew+0x6a>
        name = attr->name;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	699b      	ldr	r3, [r3, #24]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d002      	beq.n	8005e58 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	699b      	ldr	r3, [r3, #24]
 8005e56:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d008      	beq.n	8005e70 <osThreadNew+0x90>
 8005e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e60:	2b38      	cmp	r3, #56	; 0x38
 8005e62:	d805      	bhi.n	8005e70 <osThreadNew+0x90>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	f003 0301 	and.w	r3, r3, #1
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d001      	beq.n	8005e74 <osThreadNew+0x94>
        return (NULL);
 8005e70:	2300      	movs	r3, #0
 8005e72:	e054      	b.n	8005f1e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	695b      	ldr	r3, [r3, #20]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d003      	beq.n	8005e84 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	695b      	ldr	r3, [r3, #20]
 8005e80:	089b      	lsrs	r3, r3, #2
 8005e82:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d00e      	beq.n	8005eaa <osThreadNew+0xca>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	2bbb      	cmp	r3, #187	; 0xbb
 8005e92:	d90a      	bls.n	8005eaa <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d006      	beq.n	8005eaa <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	695b      	ldr	r3, [r3, #20]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d002      	beq.n	8005eaa <osThreadNew+0xca>
        mem = 1;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	623b      	str	r3, [r7, #32]
 8005ea8:	e010      	b.n	8005ecc <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d10c      	bne.n	8005ecc <osThreadNew+0xec>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d108      	bne.n	8005ecc <osThreadNew+0xec>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d104      	bne.n	8005ecc <osThreadNew+0xec>
          mem = 0;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	623b      	str	r3, [r7, #32]
 8005ec6:	e001      	b.n	8005ecc <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005ecc:	6a3b      	ldr	r3, [r7, #32]
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d110      	bne.n	8005ef4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005eda:	9202      	str	r2, [sp, #8]
 8005edc:	9301      	str	r3, [sp, #4]
 8005ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee0:	9300      	str	r3, [sp, #0]
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ee6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ee8:	68f8      	ldr	r0, [r7, #12]
 8005eea:	f002 f8f3 	bl	80080d4 <xTaskCreateStatic>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	613b      	str	r3, [r7, #16]
 8005ef2:	e013      	b.n	8005f1c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8005ef4:	6a3b      	ldr	r3, [r7, #32]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d110      	bne.n	8005f1c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005efc:	b29a      	uxth	r2, r3
 8005efe:	f107 0310 	add.w	r3, r7, #16
 8005f02:	9301      	str	r3, [sp, #4]
 8005f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f06:	9300      	str	r3, [sp, #0]
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f0c:	68f8      	ldr	r0, [r7, #12]
 8005f0e:	f002 f944 	bl	800819a <xTaskCreate>
 8005f12:	4603      	mov	r3, r0
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d001      	beq.n	8005f1c <osThreadNew+0x13c>
          hTask = NULL;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005f1c:	693b      	ldr	r3, [r7, #16]
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3730      	adds	r7, #48	; 0x30
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	bf00      	nop
 8005f28:	200001a8 	.word	0x200001a8

08005f2c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b086      	sub	sp, #24
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f34:	f3ef 8305 	mrs	r3, IPSR
 8005f38:	613b      	str	r3, [r7, #16]
  return(result);
 8005f3a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d10f      	bne.n	8005f60 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f40:	f3ef 8310 	mrs	r3, PRIMASK
 8005f44:	60fb      	str	r3, [r7, #12]
  return(result);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d105      	bne.n	8005f58 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005f4c:	f3ef 8311 	mrs	r3, BASEPRI
 8005f50:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d007      	beq.n	8005f68 <osDelay+0x3c>
 8005f58:	4b0a      	ldr	r3, [pc, #40]	; (8005f84 <osDelay+0x58>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2b02      	cmp	r3, #2
 8005f5e:	d103      	bne.n	8005f68 <osDelay+0x3c>
    stat = osErrorISR;
 8005f60:	f06f 0305 	mvn.w	r3, #5
 8005f64:	617b      	str	r3, [r7, #20]
 8005f66:	e007      	b.n	8005f78 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d002      	beq.n	8005f78 <osDelay+0x4c>
      vTaskDelay(ticks);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f002 fa6e 	bl	8008454 <vTaskDelay>
    }
  }

  return (stat);
 8005f78:	697b      	ldr	r3, [r7, #20]
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3718      	adds	r7, #24
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	200001a8 	.word	0x200001a8

08005f88 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b08a      	sub	sp, #40	; 0x28
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005f90:	2300      	movs	r3, #0
 8005f92:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f94:	f3ef 8305 	mrs	r3, IPSR
 8005f98:	613b      	str	r3, [r7, #16]
  return(result);
 8005f9a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	f040 8085 	bne.w	80060ac <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fa2:	f3ef 8310 	mrs	r3, PRIMASK
 8005fa6:	60fb      	str	r3, [r7, #12]
  return(result);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d105      	bne.n	8005fba <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005fae:	f3ef 8311 	mrs	r3, BASEPRI
 8005fb2:	60bb      	str	r3, [r7, #8]
  return(result);
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d003      	beq.n	8005fc2 <osMutexNew+0x3a>
 8005fba:	4b3f      	ldr	r3, [pc, #252]	; (80060b8 <osMutexNew+0x130>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	d074      	beq.n	80060ac <osMutexNew+0x124>
    if (attr != NULL) {
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d003      	beq.n	8005fd0 <osMutexNew+0x48>
      type = attr->attr_bits;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	623b      	str	r3, [r7, #32]
 8005fce:	e001      	b.n	8005fd4 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005fd4:	6a3b      	ldr	r3, [r7, #32]
 8005fd6:	f003 0301 	and.w	r3, r3, #1
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d002      	beq.n	8005fe4 <osMutexNew+0x5c>
      rmtx = 1U;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	61fb      	str	r3, [r7, #28]
 8005fe2:	e001      	b.n	8005fe8 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8005fe8:	6a3b      	ldr	r3, [r7, #32]
 8005fea:	f003 0308 	and.w	r3, r3, #8
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d15c      	bne.n	80060ac <osMutexNew+0x124>
      mem = -1;
 8005ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ff6:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d015      	beq.n	800602a <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d006      	beq.n	8006014 <osMutexNew+0x8c>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	2b4f      	cmp	r3, #79	; 0x4f
 800600c:	d902      	bls.n	8006014 <osMutexNew+0x8c>
          mem = 1;
 800600e:	2301      	movs	r3, #1
 8006010:	61bb      	str	r3, [r7, #24]
 8006012:	e00c      	b.n	800602e <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d108      	bne.n	800602e <osMutexNew+0xa6>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d104      	bne.n	800602e <osMutexNew+0xa6>
            mem = 0;
 8006024:	2300      	movs	r3, #0
 8006026:	61bb      	str	r3, [r7, #24]
 8006028:	e001      	b.n	800602e <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800602a:	2300      	movs	r3, #0
 800602c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	2b01      	cmp	r3, #1
 8006032:	d112      	bne.n	800605a <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d007      	beq.n	800604a <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	4619      	mov	r1, r3
 8006040:	2004      	movs	r0, #4
 8006042:	f001 f87a 	bl	800713a <xQueueCreateMutexStatic>
 8006046:	6278      	str	r0, [r7, #36]	; 0x24
 8006048:	e016      	b.n	8006078 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	4619      	mov	r1, r3
 8006050:	2001      	movs	r0, #1
 8006052:	f001 f872 	bl	800713a <xQueueCreateMutexStatic>
 8006056:	6278      	str	r0, [r7, #36]	; 0x24
 8006058:	e00e      	b.n	8006078 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d10b      	bne.n	8006078 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8006060:	69fb      	ldr	r3, [r7, #28]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d004      	beq.n	8006070 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8006066:	2004      	movs	r0, #4
 8006068:	f001 f84f 	bl	800710a <xQueueCreateMutex>
 800606c:	6278      	str	r0, [r7, #36]	; 0x24
 800606e:	e003      	b.n	8006078 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8006070:	2001      	movs	r0, #1
 8006072:	f001 f84a 	bl	800710a <xQueueCreateMutex>
 8006076:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8006078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607a:	2b00      	cmp	r3, #0
 800607c:	d00c      	beq.n	8006098 <osMutexNew+0x110>
        if (attr != NULL) {
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d003      	beq.n	800608c <osMutexNew+0x104>
          name = attr->name;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	617b      	str	r3, [r7, #20]
 800608a:	e001      	b.n	8006090 <osMutexNew+0x108>
        } else {
          name = NULL;
 800608c:	2300      	movs	r3, #0
 800608e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8006090:	6979      	ldr	r1, [r7, #20]
 8006092:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006094:	f001 ff96 	bl	8007fc4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609a:	2b00      	cmp	r3, #0
 800609c:	d006      	beq.n	80060ac <osMutexNew+0x124>
 800609e:	69fb      	ldr	r3, [r7, #28]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d003      	beq.n	80060ac <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80060a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a6:	f043 0301 	orr.w	r3, r3, #1
 80060aa:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80060ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3728      	adds	r7, #40	; 0x28
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}
 80060b6:	bf00      	nop
 80060b8:	200001a8 	.word	0x200001a8

080060bc <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80060bc:	b580      	push	{r7, lr}
 80060be:	b088      	sub	sp, #32
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f023 0301 	bic.w	r3, r3, #1
 80060cc:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f003 0301 	and.w	r3, r3, #1
 80060d4:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80060d6:	2300      	movs	r3, #0
 80060d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060da:	f3ef 8305 	mrs	r3, IPSR
 80060de:	613b      	str	r3, [r7, #16]
  return(result);
 80060e0:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d10f      	bne.n	8006106 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060e6:	f3ef 8310 	mrs	r3, PRIMASK
 80060ea:	60fb      	str	r3, [r7, #12]
  return(result);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d105      	bne.n	80060fe <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80060f2:	f3ef 8311 	mrs	r3, BASEPRI
 80060f6:	60bb      	str	r3, [r7, #8]
  return(result);
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d007      	beq.n	800610e <osMutexAcquire+0x52>
 80060fe:	4b1d      	ldr	r3, [pc, #116]	; (8006174 <osMutexAcquire+0xb8>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2b02      	cmp	r3, #2
 8006104:	d103      	bne.n	800610e <osMutexAcquire+0x52>
    stat = osErrorISR;
 8006106:	f06f 0305 	mvn.w	r3, #5
 800610a:	61fb      	str	r3, [r7, #28]
 800610c:	e02c      	b.n	8006168 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d103      	bne.n	800611c <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8006114:	f06f 0303 	mvn.w	r3, #3
 8006118:	61fb      	str	r3, [r7, #28]
 800611a:	e025      	b.n	8006168 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d011      	beq.n	8006146 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006122:	6839      	ldr	r1, [r7, #0]
 8006124:	69b8      	ldr	r0, [r7, #24]
 8006126:	f001 f859 	bl	80071dc <xQueueTakeMutexRecursive>
 800612a:	4603      	mov	r3, r0
 800612c:	2b01      	cmp	r3, #1
 800612e:	d01b      	beq.n	8006168 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d003      	beq.n	800613e <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8006136:	f06f 0301 	mvn.w	r3, #1
 800613a:	61fb      	str	r3, [r7, #28]
 800613c:	e014      	b.n	8006168 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800613e:	f06f 0302 	mvn.w	r3, #2
 8006142:	61fb      	str	r3, [r7, #28]
 8006144:	e010      	b.n	8006168 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8006146:	6839      	ldr	r1, [r7, #0]
 8006148:	69b8      	ldr	r0, [r7, #24]
 800614a:	f001 fc13 	bl	8007974 <xQueueSemaphoreTake>
 800614e:	4603      	mov	r3, r0
 8006150:	2b01      	cmp	r3, #1
 8006152:	d009      	beq.n	8006168 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d003      	beq.n	8006162 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800615a:	f06f 0301 	mvn.w	r3, #1
 800615e:	61fb      	str	r3, [r7, #28]
 8006160:	e002      	b.n	8006168 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8006162:	f06f 0302 	mvn.w	r3, #2
 8006166:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006168:	69fb      	ldr	r3, [r7, #28]
}
 800616a:	4618      	mov	r0, r3
 800616c:	3720      	adds	r7, #32
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	200001a8 	.word	0x200001a8

08006178 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006178:	b580      	push	{r7, lr}
 800617a:	b088      	sub	sp, #32
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f023 0301 	bic.w	r3, r3, #1
 8006186:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f003 0301 	and.w	r3, r3, #1
 800618e:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8006190:	2300      	movs	r3, #0
 8006192:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006194:	f3ef 8305 	mrs	r3, IPSR
 8006198:	613b      	str	r3, [r7, #16]
  return(result);
 800619a:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800619c:	2b00      	cmp	r3, #0
 800619e:	d10f      	bne.n	80061c0 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061a0:	f3ef 8310 	mrs	r3, PRIMASK
 80061a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d105      	bne.n	80061b8 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80061ac:	f3ef 8311 	mrs	r3, BASEPRI
 80061b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d007      	beq.n	80061c8 <osMutexRelease+0x50>
 80061b8:	4b16      	ldr	r3, [pc, #88]	; (8006214 <osMutexRelease+0x9c>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	2b02      	cmp	r3, #2
 80061be:	d103      	bne.n	80061c8 <osMutexRelease+0x50>
    stat = osErrorISR;
 80061c0:	f06f 0305 	mvn.w	r3, #5
 80061c4:	61fb      	str	r3, [r7, #28]
 80061c6:	e01f      	b.n	8006208 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d103      	bne.n	80061d6 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 80061ce:	f06f 0303 	mvn.w	r3, #3
 80061d2:	61fb      	str	r3, [r7, #28]
 80061d4:	e018      	b.n	8006208 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d009      	beq.n	80061f0 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80061dc:	69b8      	ldr	r0, [r7, #24]
 80061de:	f000 ffc7 	bl	8007170 <xQueueGiveMutexRecursive>
 80061e2:	4603      	mov	r3, r0
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d00f      	beq.n	8006208 <osMutexRelease+0x90>
        stat = osErrorResource;
 80061e8:	f06f 0302 	mvn.w	r3, #2
 80061ec:	61fb      	str	r3, [r7, #28]
 80061ee:	e00b      	b.n	8006208 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80061f0:	2300      	movs	r3, #0
 80061f2:	2200      	movs	r2, #0
 80061f4:	2100      	movs	r1, #0
 80061f6:	69b8      	ldr	r0, [r7, #24]
 80061f8:	f001 f89a 	bl	8007330 <xQueueGenericSend>
 80061fc:	4603      	mov	r3, r0
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d002      	beq.n	8006208 <osMutexRelease+0x90>
        stat = osErrorResource;
 8006202:	f06f 0302 	mvn.w	r3, #2
 8006206:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8006208:	69fb      	ldr	r3, [r7, #28]
}
 800620a:	4618      	mov	r0, r3
 800620c:	3720      	adds	r7, #32
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
 8006212:	bf00      	nop
 8006214:	200001a8 	.word	0x200001a8

08006218 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006218:	b580      	push	{r7, lr}
 800621a:	b08c      	sub	sp, #48	; 0x30
 800621c:	af02      	add	r7, sp, #8
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8006224:	2300      	movs	r3, #0
 8006226:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006228:	f3ef 8305 	mrs	r3, IPSR
 800622c:	61bb      	str	r3, [r7, #24]
  return(result);
 800622e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006230:	2b00      	cmp	r3, #0
 8006232:	f040 8086 	bne.w	8006342 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006236:	f3ef 8310 	mrs	r3, PRIMASK
 800623a:	617b      	str	r3, [r7, #20]
  return(result);
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d105      	bne.n	800624e <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006242:	f3ef 8311 	mrs	r3, BASEPRI
 8006246:	613b      	str	r3, [r7, #16]
  return(result);
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d003      	beq.n	8006256 <osSemaphoreNew+0x3e>
 800624e:	4b3f      	ldr	r3, [pc, #252]	; (800634c <osSemaphoreNew+0x134>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	2b02      	cmp	r3, #2
 8006254:	d075      	beq.n	8006342 <osSemaphoreNew+0x12a>
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d072      	beq.n	8006342 <osSemaphoreNew+0x12a>
 800625c:	68ba      	ldr	r2, [r7, #8]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	429a      	cmp	r2, r3
 8006262:	d86e      	bhi.n	8006342 <osSemaphoreNew+0x12a>
    mem = -1;
 8006264:	f04f 33ff 	mov.w	r3, #4294967295
 8006268:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d015      	beq.n	800629c <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d006      	beq.n	8006286 <osSemaphoreNew+0x6e>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	2b4f      	cmp	r3, #79	; 0x4f
 800627e:	d902      	bls.n	8006286 <osSemaphoreNew+0x6e>
        mem = 1;
 8006280:	2301      	movs	r3, #1
 8006282:	623b      	str	r3, [r7, #32]
 8006284:	e00c      	b.n	80062a0 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d108      	bne.n	80062a0 <osSemaphoreNew+0x88>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d104      	bne.n	80062a0 <osSemaphoreNew+0x88>
          mem = 0;
 8006296:	2300      	movs	r3, #0
 8006298:	623b      	str	r3, [r7, #32]
 800629a:	e001      	b.n	80062a0 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800629c:	2300      	movs	r3, #0
 800629e:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80062a0:	6a3b      	ldr	r3, [r7, #32]
 80062a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062a6:	d04c      	beq.n	8006342 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d128      	bne.n	8006300 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 80062ae:	6a3b      	ldr	r3, [r7, #32]
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d10a      	bne.n	80062ca <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	2203      	movs	r2, #3
 80062ba:	9200      	str	r2, [sp, #0]
 80062bc:	2200      	movs	r2, #0
 80062be:	2100      	movs	r1, #0
 80062c0:	2001      	movs	r0, #1
 80062c2:	f000 fe21 	bl	8006f08 <xQueueGenericCreateStatic>
 80062c6:	6278      	str	r0, [r7, #36]	; 0x24
 80062c8:	e005      	b.n	80062d6 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80062ca:	2203      	movs	r2, #3
 80062cc:	2100      	movs	r1, #0
 80062ce:	2001      	movs	r0, #1
 80062d0:	f000 fe9c 	bl	800700c <xQueueGenericCreate>
 80062d4:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80062d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d022      	beq.n	8006322 <osSemaphoreNew+0x10a>
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d01f      	beq.n	8006322 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80062e2:	2300      	movs	r3, #0
 80062e4:	2200      	movs	r2, #0
 80062e6:	2100      	movs	r1, #0
 80062e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80062ea:	f001 f821 	bl	8007330 <xQueueGenericSend>
 80062ee:	4603      	mov	r3, r0
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d016      	beq.n	8006322 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 80062f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80062f6:	f001 fd17 	bl	8007d28 <vQueueDelete>
            hSemaphore = NULL;
 80062fa:	2300      	movs	r3, #0
 80062fc:	627b      	str	r3, [r7, #36]	; 0x24
 80062fe:	e010      	b.n	8006322 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8006300:	6a3b      	ldr	r3, [r7, #32]
 8006302:	2b01      	cmp	r3, #1
 8006304:	d108      	bne.n	8006318 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	461a      	mov	r2, r3
 800630c:	68b9      	ldr	r1, [r7, #8]
 800630e:	68f8      	ldr	r0, [r7, #12]
 8006310:	f000 ff9c 	bl	800724c <xQueueCreateCountingSemaphoreStatic>
 8006314:	6278      	str	r0, [r7, #36]	; 0x24
 8006316:	e004      	b.n	8006322 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006318:	68b9      	ldr	r1, [r7, #8]
 800631a:	68f8      	ldr	r0, [r7, #12]
 800631c:	f000 ffd1 	bl	80072c2 <xQueueCreateCountingSemaphore>
 8006320:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006324:	2b00      	cmp	r3, #0
 8006326:	d00c      	beq.n	8006342 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d003      	beq.n	8006336 <osSemaphoreNew+0x11e>
          name = attr->name;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	61fb      	str	r3, [r7, #28]
 8006334:	e001      	b.n	800633a <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8006336:	2300      	movs	r3, #0
 8006338:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800633a:	69f9      	ldr	r1, [r7, #28]
 800633c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800633e:	f001 fe41 	bl	8007fc4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8006342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006344:	4618      	mov	r0, r3
 8006346:	3728      	adds	r7, #40	; 0x28
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}
 800634c:	200001a8 	.word	0x200001a8

08006350 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006350:	b580      	push	{r7, lr}
 8006352:	b088      	sub	sp, #32
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800635e:	2300      	movs	r3, #0
 8006360:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d103      	bne.n	8006370 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8006368:	f06f 0303 	mvn.w	r3, #3
 800636c:	61fb      	str	r3, [r7, #28]
 800636e:	e04b      	b.n	8006408 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006370:	f3ef 8305 	mrs	r3, IPSR
 8006374:	617b      	str	r3, [r7, #20]
  return(result);
 8006376:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006378:	2b00      	cmp	r3, #0
 800637a:	d10f      	bne.n	800639c <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800637c:	f3ef 8310 	mrs	r3, PRIMASK
 8006380:	613b      	str	r3, [r7, #16]
  return(result);
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d105      	bne.n	8006394 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006388:	f3ef 8311 	mrs	r3, BASEPRI
 800638c:	60fb      	str	r3, [r7, #12]
  return(result);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d026      	beq.n	80063e2 <osSemaphoreAcquire+0x92>
 8006394:	4b1f      	ldr	r3, [pc, #124]	; (8006414 <osSemaphoreAcquire+0xc4>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	2b02      	cmp	r3, #2
 800639a:	d122      	bne.n	80063e2 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d003      	beq.n	80063aa <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 80063a2:	f06f 0303 	mvn.w	r3, #3
 80063a6:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80063a8:	e02d      	b.n	8006406 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 80063aa:	2300      	movs	r3, #0
 80063ac:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80063ae:	f107 0308 	add.w	r3, r7, #8
 80063b2:	461a      	mov	r2, r3
 80063b4:	2100      	movs	r1, #0
 80063b6:	69b8      	ldr	r0, [r7, #24]
 80063b8:	f001 fbf0 	bl	8007b9c <xQueueReceiveFromISR>
 80063bc:	4603      	mov	r3, r0
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d003      	beq.n	80063ca <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 80063c2:	f06f 0302 	mvn.w	r3, #2
 80063c6:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80063c8:	e01d      	b.n	8006406 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d01a      	beq.n	8006406 <osSemaphoreAcquire+0xb6>
 80063d0:	4b11      	ldr	r3, [pc, #68]	; (8006418 <osSemaphoreAcquire+0xc8>)
 80063d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063d6:	601a      	str	r2, [r3, #0]
 80063d8:	f3bf 8f4f 	dsb	sy
 80063dc:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 80063e0:	e011      	b.n	8006406 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80063e2:	6839      	ldr	r1, [r7, #0]
 80063e4:	69b8      	ldr	r0, [r7, #24]
 80063e6:	f001 fac5 	bl	8007974 <xQueueSemaphoreTake>
 80063ea:	4603      	mov	r3, r0
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d00b      	beq.n	8006408 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d003      	beq.n	80063fe <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 80063f6:	f06f 0301 	mvn.w	r3, #1
 80063fa:	61fb      	str	r3, [r7, #28]
 80063fc:	e004      	b.n	8006408 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 80063fe:	f06f 0302 	mvn.w	r3, #2
 8006402:	61fb      	str	r3, [r7, #28]
 8006404:	e000      	b.n	8006408 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8006406:	bf00      	nop
      }
    }
  }

  return (stat);
 8006408:	69fb      	ldr	r3, [r7, #28]
}
 800640a:	4618      	mov	r0, r3
 800640c:	3720      	adds	r7, #32
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop
 8006414:	200001a8 	.word	0x200001a8
 8006418:	e000ed04 	.word	0xe000ed04

0800641c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800641c:	b580      	push	{r7, lr}
 800641e:	b088      	sub	sp, #32
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006428:	2300      	movs	r3, #0
 800642a:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800642c:	69bb      	ldr	r3, [r7, #24]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d103      	bne.n	800643a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8006432:	f06f 0303 	mvn.w	r3, #3
 8006436:	61fb      	str	r3, [r7, #28]
 8006438:	e03e      	b.n	80064b8 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800643a:	f3ef 8305 	mrs	r3, IPSR
 800643e:	617b      	str	r3, [r7, #20]
  return(result);
 8006440:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006442:	2b00      	cmp	r3, #0
 8006444:	d10f      	bne.n	8006466 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006446:	f3ef 8310 	mrs	r3, PRIMASK
 800644a:	613b      	str	r3, [r7, #16]
  return(result);
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d105      	bne.n	800645e <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006452:	f3ef 8311 	mrs	r3, BASEPRI
 8006456:	60fb      	str	r3, [r7, #12]
  return(result);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d01e      	beq.n	800649c <osSemaphoreRelease+0x80>
 800645e:	4b19      	ldr	r3, [pc, #100]	; (80064c4 <osSemaphoreRelease+0xa8>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	2b02      	cmp	r3, #2
 8006464:	d11a      	bne.n	800649c <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8006466:	2300      	movs	r3, #0
 8006468:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800646a:	f107 0308 	add.w	r3, r7, #8
 800646e:	4619      	mov	r1, r3
 8006470:	69b8      	ldr	r0, [r7, #24]
 8006472:	f001 f903 	bl	800767c <xQueueGiveFromISR>
 8006476:	4603      	mov	r3, r0
 8006478:	2b01      	cmp	r3, #1
 800647a:	d003      	beq.n	8006484 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800647c:	f06f 0302 	mvn.w	r3, #2
 8006480:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006482:	e018      	b.n	80064b6 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d015      	beq.n	80064b6 <osSemaphoreRelease+0x9a>
 800648a:	4b0f      	ldr	r3, [pc, #60]	; (80064c8 <osSemaphoreRelease+0xac>)
 800648c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006490:	601a      	str	r2, [r3, #0]
 8006492:	f3bf 8f4f 	dsb	sy
 8006496:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800649a:	e00c      	b.n	80064b6 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800649c:	2300      	movs	r3, #0
 800649e:	2200      	movs	r2, #0
 80064a0:	2100      	movs	r1, #0
 80064a2:	69b8      	ldr	r0, [r7, #24]
 80064a4:	f000 ff44 	bl	8007330 <xQueueGenericSend>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d004      	beq.n	80064b8 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 80064ae:	f06f 0302 	mvn.w	r3, #2
 80064b2:	61fb      	str	r3, [r7, #28]
 80064b4:	e000      	b.n	80064b8 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80064b6:	bf00      	nop
    }
  }

  return (stat);
 80064b8:	69fb      	ldr	r3, [r7, #28]
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3720      	adds	r7, #32
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	bf00      	nop
 80064c4:	200001a8 	.word	0x200001a8
 80064c8:	e000ed04 	.word	0xe000ed04

080064cc <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b088      	sub	sp, #32
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064d8:	f3ef 8305 	mrs	r3, IPSR
 80064dc:	617b      	str	r3, [r7, #20]
  return(result);
 80064de:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d10f      	bne.n	8006504 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064e4:	f3ef 8310 	mrs	r3, PRIMASK
 80064e8:	613b      	str	r3, [r7, #16]
  return(result);
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d105      	bne.n	80064fc <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80064f0:	f3ef 8311 	mrs	r3, BASEPRI
 80064f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d007      	beq.n	800650c <osSemaphoreDelete+0x40>
 80064fc:	4b0d      	ldr	r3, [pc, #52]	; (8006534 <osSemaphoreDelete+0x68>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	2b02      	cmp	r3, #2
 8006502:	d103      	bne.n	800650c <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 8006504:	f06f 0305 	mvn.w	r3, #5
 8006508:	61fb      	str	r3, [r7, #28]
 800650a:	e00e      	b.n	800652a <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d103      	bne.n	800651a <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 8006512:	f06f 0303 	mvn.w	r3, #3
 8006516:	61fb      	str	r3, [r7, #28]
 8006518:	e007      	b.n	800652a <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800651a:	69b8      	ldr	r0, [r7, #24]
 800651c:	f001 fd7c 	bl	8008018 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8006520:	2300      	movs	r3, #0
 8006522:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 8006524:	69b8      	ldr	r0, [r7, #24]
 8006526:	f001 fbff 	bl	8007d28 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800652a:	69fb      	ldr	r3, [r7, #28]
}
 800652c:	4618      	mov	r0, r3
 800652e:	3720      	adds	r7, #32
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}
 8006534:	200001a8 	.word	0x200001a8

08006538 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006538:	b580      	push	{r7, lr}
 800653a:	b08c      	sub	sp, #48	; 0x30
 800653c:	af02      	add	r7, sp, #8
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	60b9      	str	r1, [r7, #8]
 8006542:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006544:	2300      	movs	r3, #0
 8006546:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006548:	f3ef 8305 	mrs	r3, IPSR
 800654c:	61bb      	str	r3, [r7, #24]
  return(result);
 800654e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006550:	2b00      	cmp	r3, #0
 8006552:	d16f      	bne.n	8006634 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006554:	f3ef 8310 	mrs	r3, PRIMASK
 8006558:	617b      	str	r3, [r7, #20]
  return(result);
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d105      	bne.n	800656c <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006560:	f3ef 8311 	mrs	r3, BASEPRI
 8006564:	613b      	str	r3, [r7, #16]
  return(result);
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d003      	beq.n	8006574 <osMessageQueueNew+0x3c>
 800656c:	4b34      	ldr	r3, [pc, #208]	; (8006640 <osMessageQueueNew+0x108>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2b02      	cmp	r3, #2
 8006572:	d05f      	beq.n	8006634 <osMessageQueueNew+0xfc>
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d05c      	beq.n	8006634 <osMessageQueueNew+0xfc>
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d059      	beq.n	8006634 <osMessageQueueNew+0xfc>
    mem = -1;
 8006580:	f04f 33ff 	mov.w	r3, #4294967295
 8006584:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d029      	beq.n	80065e0 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d012      	beq.n	80065ba <osMessageQueueNew+0x82>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	68db      	ldr	r3, [r3, #12]
 8006598:	2b4f      	cmp	r3, #79	; 0x4f
 800659a:	d90e      	bls.n	80065ba <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d00a      	beq.n	80065ba <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	695a      	ldr	r2, [r3, #20]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	68b9      	ldr	r1, [r7, #8]
 80065ac:	fb01 f303 	mul.w	r3, r1, r3
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d302      	bcc.n	80065ba <osMessageQueueNew+0x82>
        mem = 1;
 80065b4:	2301      	movs	r3, #1
 80065b6:	623b      	str	r3, [r7, #32]
 80065b8:	e014      	b.n	80065e4 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d110      	bne.n	80065e4 <osMessageQueueNew+0xac>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	68db      	ldr	r3, [r3, #12]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d10c      	bne.n	80065e4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d108      	bne.n	80065e4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	695b      	ldr	r3, [r3, #20]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d104      	bne.n	80065e4 <osMessageQueueNew+0xac>
          mem = 0;
 80065da:	2300      	movs	r3, #0
 80065dc:	623b      	str	r3, [r7, #32]
 80065de:	e001      	b.n	80065e4 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80065e0:	2300      	movs	r3, #0
 80065e2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80065e4:	6a3b      	ldr	r3, [r7, #32]
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d10b      	bne.n	8006602 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	691a      	ldr	r2, [r3, #16]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	2100      	movs	r1, #0
 80065f4:	9100      	str	r1, [sp, #0]
 80065f6:	68b9      	ldr	r1, [r7, #8]
 80065f8:	68f8      	ldr	r0, [r7, #12]
 80065fa:	f000 fc85 	bl	8006f08 <xQueueGenericCreateStatic>
 80065fe:	6278      	str	r0, [r7, #36]	; 0x24
 8006600:	e008      	b.n	8006614 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8006602:	6a3b      	ldr	r3, [r7, #32]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d105      	bne.n	8006614 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8006608:	2200      	movs	r2, #0
 800660a:	68b9      	ldr	r1, [r7, #8]
 800660c:	68f8      	ldr	r0, [r7, #12]
 800660e:	f000 fcfd 	bl	800700c <xQueueGenericCreate>
 8006612:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006616:	2b00      	cmp	r3, #0
 8006618:	d00c      	beq.n	8006634 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d003      	beq.n	8006628 <osMessageQueueNew+0xf0>
        name = attr->name;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	61fb      	str	r3, [r7, #28]
 8006626:	e001      	b.n	800662c <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8006628:	2300      	movs	r3, #0
 800662a:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800662c:	69f9      	ldr	r1, [r7, #28]
 800662e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006630:	f001 fcc8 	bl	8007fc4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006636:	4618      	mov	r0, r3
 8006638:	3728      	adds	r7, #40	; 0x28
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	200001a8 	.word	0x200001a8

08006644 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006644:	b580      	push	{r7, lr}
 8006646:	b08a      	sub	sp, #40	; 0x28
 8006648:	af00      	add	r7, sp, #0
 800664a:	60f8      	str	r0, [r7, #12]
 800664c:	60b9      	str	r1, [r7, #8]
 800664e:	603b      	str	r3, [r7, #0]
 8006650:	4613      	mov	r3, r2
 8006652:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006658:	2300      	movs	r3, #0
 800665a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800665c:	f3ef 8305 	mrs	r3, IPSR
 8006660:	61fb      	str	r3, [r7, #28]
  return(result);
 8006662:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8006664:	2b00      	cmp	r3, #0
 8006666:	d10f      	bne.n	8006688 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006668:	f3ef 8310 	mrs	r3, PRIMASK
 800666c:	61bb      	str	r3, [r7, #24]
  return(result);
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d105      	bne.n	8006680 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006674:	f3ef 8311 	mrs	r3, BASEPRI
 8006678:	617b      	str	r3, [r7, #20]
  return(result);
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d02c      	beq.n	80066da <osMessageQueuePut+0x96>
 8006680:	4b28      	ldr	r3, [pc, #160]	; (8006724 <osMessageQueuePut+0xe0>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	2b02      	cmp	r3, #2
 8006686:	d128      	bne.n	80066da <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006688:	6a3b      	ldr	r3, [r7, #32]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d005      	beq.n	800669a <osMessageQueuePut+0x56>
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d002      	beq.n	800669a <osMessageQueuePut+0x56>
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d003      	beq.n	80066a2 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800669a:	f06f 0303 	mvn.w	r3, #3
 800669e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80066a0:	e039      	b.n	8006716 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 80066a2:	2300      	movs	r3, #0
 80066a4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80066a6:	f107 0210 	add.w	r2, r7, #16
 80066aa:	2300      	movs	r3, #0
 80066ac:	68b9      	ldr	r1, [r7, #8]
 80066ae:	6a38      	ldr	r0, [r7, #32]
 80066b0:	f000 ff44 	bl	800753c <xQueueGenericSendFromISR>
 80066b4:	4603      	mov	r3, r0
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d003      	beq.n	80066c2 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 80066ba:	f06f 0302 	mvn.w	r3, #2
 80066be:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80066c0:	e029      	b.n	8006716 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d026      	beq.n	8006716 <osMessageQueuePut+0xd2>
 80066c8:	4b17      	ldr	r3, [pc, #92]	; (8006728 <osMessageQueuePut+0xe4>)
 80066ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066ce:	601a      	str	r2, [r3, #0]
 80066d0:	f3bf 8f4f 	dsb	sy
 80066d4:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80066d8:	e01d      	b.n	8006716 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80066da:	6a3b      	ldr	r3, [r7, #32]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d002      	beq.n	80066e6 <osMessageQueuePut+0xa2>
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d103      	bne.n	80066ee <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80066e6:	f06f 0303 	mvn.w	r3, #3
 80066ea:	627b      	str	r3, [r7, #36]	; 0x24
 80066ec:	e014      	b.n	8006718 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80066ee:	2300      	movs	r3, #0
 80066f0:	683a      	ldr	r2, [r7, #0]
 80066f2:	68b9      	ldr	r1, [r7, #8]
 80066f4:	6a38      	ldr	r0, [r7, #32]
 80066f6:	f000 fe1b 	bl	8007330 <xQueueGenericSend>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d00b      	beq.n	8006718 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d003      	beq.n	800670e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8006706:	f06f 0301 	mvn.w	r3, #1
 800670a:	627b      	str	r3, [r7, #36]	; 0x24
 800670c:	e004      	b.n	8006718 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800670e:	f06f 0302 	mvn.w	r3, #2
 8006712:	627b      	str	r3, [r7, #36]	; 0x24
 8006714:	e000      	b.n	8006718 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006716:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800671a:	4618      	mov	r0, r3
 800671c:	3728      	adds	r7, #40	; 0x28
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}
 8006722:	bf00      	nop
 8006724:	200001a8 	.word	0x200001a8
 8006728:	e000ed04 	.word	0xe000ed04

0800672c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800672c:	b580      	push	{r7, lr}
 800672e:	b08a      	sub	sp, #40	; 0x28
 8006730:	af00      	add	r7, sp, #0
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	60b9      	str	r1, [r7, #8]
 8006736:	607a      	str	r2, [r7, #4]
 8006738:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800673e:	2300      	movs	r3, #0
 8006740:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006742:	f3ef 8305 	mrs	r3, IPSR
 8006746:	61fb      	str	r3, [r7, #28]
  return(result);
 8006748:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800674a:	2b00      	cmp	r3, #0
 800674c:	d10f      	bne.n	800676e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800674e:	f3ef 8310 	mrs	r3, PRIMASK
 8006752:	61bb      	str	r3, [r7, #24]
  return(result);
 8006754:	69bb      	ldr	r3, [r7, #24]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d105      	bne.n	8006766 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800675a:	f3ef 8311 	mrs	r3, BASEPRI
 800675e:	617b      	str	r3, [r7, #20]
  return(result);
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d02c      	beq.n	80067c0 <osMessageQueueGet+0x94>
 8006766:	4b28      	ldr	r3, [pc, #160]	; (8006808 <osMessageQueueGet+0xdc>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2b02      	cmp	r3, #2
 800676c:	d128      	bne.n	80067c0 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800676e:	6a3b      	ldr	r3, [r7, #32]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d005      	beq.n	8006780 <osMessageQueueGet+0x54>
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d002      	beq.n	8006780 <osMessageQueueGet+0x54>
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d003      	beq.n	8006788 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8006780:	f06f 0303 	mvn.w	r3, #3
 8006784:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006786:	e038      	b.n	80067fa <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8006788:	2300      	movs	r3, #0
 800678a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800678c:	f107 0310 	add.w	r3, r7, #16
 8006790:	461a      	mov	r2, r3
 8006792:	68b9      	ldr	r1, [r7, #8]
 8006794:	6a38      	ldr	r0, [r7, #32]
 8006796:	f001 fa01 	bl	8007b9c <xQueueReceiveFromISR>
 800679a:	4603      	mov	r3, r0
 800679c:	2b01      	cmp	r3, #1
 800679e:	d003      	beq.n	80067a8 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80067a0:	f06f 0302 	mvn.w	r3, #2
 80067a4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80067a6:	e028      	b.n	80067fa <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d025      	beq.n	80067fa <osMessageQueueGet+0xce>
 80067ae:	4b17      	ldr	r3, [pc, #92]	; (800680c <osMessageQueueGet+0xe0>)
 80067b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067b4:	601a      	str	r2, [r3, #0]
 80067b6:	f3bf 8f4f 	dsb	sy
 80067ba:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80067be:	e01c      	b.n	80067fa <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80067c0:	6a3b      	ldr	r3, [r7, #32]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d002      	beq.n	80067cc <osMessageQueueGet+0xa0>
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d103      	bne.n	80067d4 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 80067cc:	f06f 0303 	mvn.w	r3, #3
 80067d0:	627b      	str	r3, [r7, #36]	; 0x24
 80067d2:	e013      	b.n	80067fc <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80067d4:	683a      	ldr	r2, [r7, #0]
 80067d6:	68b9      	ldr	r1, [r7, #8]
 80067d8:	6a38      	ldr	r0, [r7, #32]
 80067da:	f000 ffe5 	bl	80077a8 <xQueueReceive>
 80067de:	4603      	mov	r3, r0
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d00b      	beq.n	80067fc <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d003      	beq.n	80067f2 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80067ea:	f06f 0301 	mvn.w	r3, #1
 80067ee:	627b      	str	r3, [r7, #36]	; 0x24
 80067f0:	e004      	b.n	80067fc <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80067f2:	f06f 0302 	mvn.w	r3, #2
 80067f6:	627b      	str	r3, [r7, #36]	; 0x24
 80067f8:	e000      	b.n	80067fc <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80067fa:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80067fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3728      	adds	r7, #40	; 0x28
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	200001a8 	.word	0x200001a8
 800680c:	e000ed04 	.word	0xe000ed04

08006810 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8006810:	b580      	push	{r7, lr}
 8006812:	b088      	sub	sp, #32
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 800681c:	69bb      	ldr	r3, [r7, #24]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d102      	bne.n	8006828 <osMessageQueueGetCount+0x18>
    count = 0U;
 8006822:	2300      	movs	r3, #0
 8006824:	61fb      	str	r3, [r7, #28]
 8006826:	e01e      	b.n	8006866 <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006828:	f3ef 8305 	mrs	r3, IPSR
 800682c:	617b      	str	r3, [r7, #20]
  return(result);
 800682e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006830:	2b00      	cmp	r3, #0
 8006832:	d10f      	bne.n	8006854 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006834:	f3ef 8310 	mrs	r3, PRIMASK
 8006838:	613b      	str	r3, [r7, #16]
  return(result);
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d105      	bne.n	800684c <osMessageQueueGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006840:	f3ef 8311 	mrs	r3, BASEPRI
 8006844:	60fb      	str	r3, [r7, #12]
  return(result);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d008      	beq.n	800685e <osMessageQueueGetCount+0x4e>
 800684c:	4b08      	ldr	r3, [pc, #32]	; (8006870 <osMessageQueueGetCount+0x60>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	2b02      	cmp	r3, #2
 8006852:	d104      	bne.n	800685e <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8006854:	69b8      	ldr	r0, [r7, #24]
 8006856:	f001 fa47 	bl	8007ce8 <uxQueueMessagesWaitingFromISR>
 800685a:	61f8      	str	r0, [r7, #28]
 800685c:	e003      	b.n	8006866 <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800685e:	69b8      	ldr	r0, [r7, #24]
 8006860:	f001 fa22 	bl	8007ca8 <uxQueueMessagesWaiting>
 8006864:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 8006866:	69fb      	ldr	r3, [r7, #28]
}
 8006868:	4618      	mov	r0, r3
 800686a:	3720      	adds	r7, #32
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}
 8006870:	200001a8 	.word	0x200001a8

08006874 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 8006874:	b580      	push	{r7, lr}
 8006876:	b088      	sub	sp, #32
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006880:	f3ef 8305 	mrs	r3, IPSR
 8006884:	617b      	str	r3, [r7, #20]
  return(result);
 8006886:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8006888:	2b00      	cmp	r3, #0
 800688a:	d10f      	bne.n	80068ac <osMessageQueueDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800688c:	f3ef 8310 	mrs	r3, PRIMASK
 8006890:	613b      	str	r3, [r7, #16]
  return(result);
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d105      	bne.n	80068a4 <osMessageQueueDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006898:	f3ef 8311 	mrs	r3, BASEPRI
 800689c:	60fb      	str	r3, [r7, #12]
  return(result);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d007      	beq.n	80068b4 <osMessageQueueDelete+0x40>
 80068a4:	4b0d      	ldr	r3, [pc, #52]	; (80068dc <osMessageQueueDelete+0x68>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2b02      	cmp	r3, #2
 80068aa:	d103      	bne.n	80068b4 <osMessageQueueDelete+0x40>
    stat = osErrorISR;
 80068ac:	f06f 0305 	mvn.w	r3, #5
 80068b0:	61fb      	str	r3, [r7, #28]
 80068b2:	e00e      	b.n	80068d2 <osMessageQueueDelete+0x5e>
  }
  else if (hQueue == NULL) {
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d103      	bne.n	80068c2 <osMessageQueueDelete+0x4e>
    stat = osErrorParameter;
 80068ba:	f06f 0303 	mvn.w	r3, #3
 80068be:	61fb      	str	r3, [r7, #28]
 80068c0:	e007      	b.n	80068d2 <osMessageQueueDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 80068c2:	69b8      	ldr	r0, [r7, #24]
 80068c4:	f001 fba8 	bl	8008018 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 80068c8:	2300      	movs	r3, #0
 80068ca:	61fb      	str	r3, [r7, #28]
    vQueueDelete (hQueue);
 80068cc:	69b8      	ldr	r0, [r7, #24]
 80068ce:	f001 fa2b 	bl	8007d28 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 80068d2:	69fb      	ldr	r3, [r7, #28]
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3720      	adds	r7, #32
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}
 80068dc:	200001a8 	.word	0x200001a8

080068e0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80068e0:	b480      	push	{r7}
 80068e2:	b085      	sub	sp, #20
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	60b9      	str	r1, [r7, #8]
 80068ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	4a07      	ldr	r2, [pc, #28]	; (800690c <vApplicationGetIdleTaskMemory+0x2c>)
 80068f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	4a06      	ldr	r2, [pc, #24]	; (8006910 <vApplicationGetIdleTaskMemory+0x30>)
 80068f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2280      	movs	r2, #128	; 0x80
 80068fc:	601a      	str	r2, [r3, #0]
}
 80068fe:	bf00      	nop
 8006900:	3714      	adds	r7, #20
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr
 800690a:	bf00      	nop
 800690c:	200001ac 	.word	0x200001ac
 8006910:	20000268 	.word	0x20000268

08006914 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006914:	b480      	push	{r7}
 8006916:	b085      	sub	sp, #20
 8006918:	af00      	add	r7, sp, #0
 800691a:	60f8      	str	r0, [r7, #12]
 800691c:	60b9      	str	r1, [r7, #8]
 800691e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	4a07      	ldr	r2, [pc, #28]	; (8006940 <vApplicationGetTimerTaskMemory+0x2c>)
 8006924:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	4a06      	ldr	r2, [pc, #24]	; (8006944 <vApplicationGetTimerTaskMemory+0x30>)
 800692a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006932:	601a      	str	r2, [r3, #0]
}
 8006934:	bf00      	nop
 8006936:	3714      	adds	r7, #20
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr
 8006940:	20000468 	.word	0x20000468
 8006944:	20000524 	.word	0x20000524

08006948 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8006948:	b580      	push	{r7, lr}
 800694a:	b082      	sub	sp, #8
 800694c:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800694e:	2020      	movs	r0, #32
 8006950:	f003 faa0 	bl	8009e94 <pvPortMalloc>
 8006954:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d00a      	beq.n	8006972 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	3304      	adds	r3, #4
 8006966:	4618      	mov	r0, r3
 8006968:	f000 f9b0 	bl	8006ccc <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8006972:	687b      	ldr	r3, [r7, #4]
	}
 8006974:	4618      	mov	r0, r3
 8006976:	3708      	adds	r7, #8
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b090      	sub	sp, #64	; 0x40
 8006980:	af00      	add	r7, sp, #0
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	60b9      	str	r1, [r7, #8]
 8006986:	607a      	str	r2, [r7, #4]
 8006988:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800698e:	2300      	movs	r3, #0
 8006990:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8006992:	2300      	movs	r3, #0
 8006994:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d10c      	bne.n	80069b6 <xEventGroupWaitBits+0x3a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800699c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a0:	b672      	cpsid	i
 80069a2:	f383 8811 	msr	BASEPRI, r3
 80069a6:	f3bf 8f6f 	isb	sy
 80069aa:	f3bf 8f4f 	dsb	sy
 80069ae:	b662      	cpsie	i
 80069b0:	623b      	str	r3, [r7, #32]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80069b2:	bf00      	nop
 80069b4:	e7fe      	b.n	80069b4 <xEventGroupWaitBits+0x38>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d00c      	beq.n	80069da <xEventGroupWaitBits+0x5e>
	__asm volatile
 80069c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c4:	b672      	cpsid	i
 80069c6:	f383 8811 	msr	BASEPRI, r3
 80069ca:	f3bf 8f6f 	isb	sy
 80069ce:	f3bf 8f4f 	dsb	sy
 80069d2:	b662      	cpsie	i
 80069d4:	61fb      	str	r3, [r7, #28]
}
 80069d6:	bf00      	nop
 80069d8:	e7fe      	b.n	80069d8 <xEventGroupWaitBits+0x5c>
	configASSERT( uxBitsToWaitFor != 0 );
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d10c      	bne.n	80069fa <xEventGroupWaitBits+0x7e>
	__asm volatile
 80069e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e4:	b672      	cpsid	i
 80069e6:	f383 8811 	msr	BASEPRI, r3
 80069ea:	f3bf 8f6f 	isb	sy
 80069ee:	f3bf 8f4f 	dsb	sy
 80069f2:	b662      	cpsie	i
 80069f4:	61bb      	str	r3, [r7, #24]
}
 80069f6:	bf00      	nop
 80069f8:	e7fe      	b.n	80069f8 <xEventGroupWaitBits+0x7c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80069fa:	f002 fa9b 	bl	8008f34 <xTaskGetSchedulerState>
 80069fe:	4603      	mov	r3, r0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d102      	bne.n	8006a0a <xEventGroupWaitBits+0x8e>
 8006a04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d101      	bne.n	8006a0e <xEventGroupWaitBits+0x92>
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e000      	b.n	8006a10 <xEventGroupWaitBits+0x94>
 8006a0e:	2300      	movs	r3, #0
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d10c      	bne.n	8006a2e <xEventGroupWaitBits+0xb2>
	__asm volatile
 8006a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a18:	b672      	cpsid	i
 8006a1a:	f383 8811 	msr	BASEPRI, r3
 8006a1e:	f3bf 8f6f 	isb	sy
 8006a22:	f3bf 8f4f 	dsb	sy
 8006a26:	b662      	cpsie	i
 8006a28:	617b      	str	r3, [r7, #20]
}
 8006a2a:	bf00      	nop
 8006a2c:	e7fe      	b.n	8006a2c <xEventGroupWaitBits+0xb0>
	}
	#endif

	vTaskSuspendAll();
 8006a2e:	f001 fdbb 	bl	80085a8 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8006a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8006a38:	683a      	ldr	r2, [r7, #0]
 8006a3a:	68b9      	ldr	r1, [r7, #8]
 8006a3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a3e:	f000 f90f 	bl	8006c60 <prvTestWaitCondition>
 8006a42:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8006a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d00e      	beq.n	8006a68 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8006a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d028      	beq.n	8006aaa <xEventGroupWaitBits+0x12e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8006a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	43db      	mvns	r3, r3
 8006a60:	401a      	ands	r2, r3
 8006a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a64:	601a      	str	r2, [r3, #0]
 8006a66:	e020      	b.n	8006aaa <xEventGroupWaitBits+0x12e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8006a68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d104      	bne.n	8006a78 <xEventGroupWaitBits+0xfc>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8006a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a70:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8006a72:	2301      	movs	r3, #1
 8006a74:	633b      	str	r3, [r7, #48]	; 0x30
 8006a76:	e018      	b.n	8006aaa <xEventGroupWaitBits+0x12e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d003      	beq.n	8006a86 <xEventGroupWaitBits+0x10a>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8006a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a84:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d003      	beq.n	8006a94 <xEventGroupWaitBits+0x118>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8006a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a8e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006a92:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8006a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a96:	1d18      	adds	r0, r3, #4
 8006a98:	68ba      	ldr	r2, [r7, #8]
 8006a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006aa0:	4619      	mov	r1, r3
 8006aa2:	f001 ff99 	bl	80089d8 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8006aaa:	f001 fd8b 	bl	80085c4 <xTaskResumeAll>
 8006aae:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8006ab0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d031      	beq.n	8006b1a <xEventGroupWaitBits+0x19e>
	{
		if( xAlreadyYielded == pdFALSE )
 8006ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d107      	bne.n	8006acc <xEventGroupWaitBits+0x150>
		{
			portYIELD_WITHIN_API();
 8006abc:	4b19      	ldr	r3, [pc, #100]	; (8006b24 <xEventGroupWaitBits+0x1a8>)
 8006abe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ac2:	601a      	str	r2, [r3, #0]
 8006ac4:	f3bf 8f4f 	dsb	sy
 8006ac8:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8006acc:	f002 fbb0 	bl	8009230 <uxTaskResetEventItemValue>
 8006ad0:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8006ad2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ad4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d11a      	bne.n	8006b12 <xEventGroupWaitBits+0x196>
		{
			taskENTER_CRITICAL();
 8006adc:	f003 f8ae 	bl	8009c3c <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8006ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8006ae6:	683a      	ldr	r2, [r7, #0]
 8006ae8:	68b9      	ldr	r1, [r7, #8]
 8006aea:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006aec:	f000 f8b8 	bl	8006c60 <prvTestWaitCondition>
 8006af0:	4603      	mov	r3, r0
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d009      	beq.n	8006b0a <xEventGroupWaitBits+0x18e>
				{
					if( xClearOnExit != pdFALSE )
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d006      	beq.n	8006b0a <xEventGroupWaitBits+0x18e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8006afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	43db      	mvns	r3, r3
 8006b04:	401a      	ands	r2, r3
 8006b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b08:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8006b0e:	f003 f8c9 	bl	8009ca4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8006b12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b14:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006b18:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8006b1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3740      	adds	r7, #64	; 0x40
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}
 8006b24:	e000ed04 	.word	0xe000ed04

08006b28 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b08e      	sub	sp, #56	; 0x38
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8006b32:	2300      	movs	r3, #0
 8006b34:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d10c      	bne.n	8006b5e <xEventGroupSetBits+0x36>
	__asm volatile
 8006b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b48:	b672      	cpsid	i
 8006b4a:	f383 8811 	msr	BASEPRI, r3
 8006b4e:	f3bf 8f6f 	isb	sy
 8006b52:	f3bf 8f4f 	dsb	sy
 8006b56:	b662      	cpsie	i
 8006b58:	613b      	str	r3, [r7, #16]
}
 8006b5a:	bf00      	nop
 8006b5c:	e7fe      	b.n	8006b5c <xEventGroupSetBits+0x34>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d00c      	beq.n	8006b82 <xEventGroupSetBits+0x5a>
	__asm volatile
 8006b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b6c:	b672      	cpsid	i
 8006b6e:	f383 8811 	msr	BASEPRI, r3
 8006b72:	f3bf 8f6f 	isb	sy
 8006b76:	f3bf 8f4f 	dsb	sy
 8006b7a:	b662      	cpsie	i
 8006b7c:	60fb      	str	r3, [r7, #12]
}
 8006b7e:	bf00      	nop
 8006b80:	e7fe      	b.n	8006b80 <xEventGroupSetBits+0x58>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8006b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b84:	3304      	adds	r3, #4
 8006b86:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8a:	3308      	adds	r3, #8
 8006b8c:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8006b8e:	f001 fd0b 	bl	80085a8 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8006b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8006b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	431a      	orrs	r2, r3
 8006ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba2:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8006ba4:	e03c      	b.n	8006c20 <xEventGroupSetBits+0xf8>
		{
			pxNext = listGET_NEXT( pxListItem );
 8006ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8006bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006bbc:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8006bbe:	69bb      	ldr	r3, [r7, #24]
 8006bc0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006bc4:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d108      	bne.n	8006be2 <xEventGroupSetBits+0xba>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8006bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	69bb      	ldr	r3, [r7, #24]
 8006bd6:	4013      	ands	r3, r2
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d00b      	beq.n	8006bf4 <xEventGroupSetBits+0xcc>
				{
					xMatchFound = pdTRUE;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006be0:	e008      	b.n	8006bf4 <xEventGroupSetBits+0xcc>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8006be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	69bb      	ldr	r3, [r7, #24]
 8006be8:	4013      	ands	r3, r2
 8006bea:	69ba      	ldr	r2, [r7, #24]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d101      	bne.n	8006bf4 <xEventGroupSetBits+0xcc>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8006bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d010      	beq.n	8006c1c <xEventGroupSetBits+0xf4>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d003      	beq.n	8006c0c <xEventGroupSetBits+0xe4>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8006c04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8006c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006c14:	4619      	mov	r1, r3
 8006c16:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006c18:	f001 ffb2 	bl	8008b80 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8006c1c:	69fb      	ldr	r3, [r7, #28]
 8006c1e:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8006c20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c22:	6a3b      	ldr	r3, [r7, #32]
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d1be      	bne.n	8006ba6 <xEventGroupSetBits+0x7e>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8006c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c2e:	43db      	mvns	r3, r3
 8006c30:	401a      	ands	r2, r3
 8006c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c34:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8006c36:	f001 fcc5 	bl	80085c4 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8006c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c3c:	681b      	ldr	r3, [r3, #0]
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3738      	adds	r7, #56	; 0x38
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}

08006c46 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8006c46:	b580      	push	{r7, lr}
 8006c48:	b082      	sub	sp, #8
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	6078      	str	r0, [r7, #4]
 8006c4e:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8006c50:	6839      	ldr	r1, [r7, #0]
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f7ff ff68 	bl	8006b28 <xEventGroupSetBits>
}
 8006c58:	bf00      	nop
 8006c5a:	3708      	adds	r7, #8
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8006c60:	b480      	push	{r7}
 8006c62:	b087      	sub	sp, #28
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	60f8      	str	r0, [r7, #12]
 8006c68:	60b9      	str	r1, [r7, #8]
 8006c6a:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d107      	bne.n	8006c86 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8006c76:	68fa      	ldr	r2, [r7, #12]
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	4013      	ands	r3, r2
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d00a      	beq.n	8006c96 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8006c80:	2301      	movs	r3, #1
 8006c82:	617b      	str	r3, [r7, #20]
 8006c84:	e007      	b.n	8006c96 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8006c86:	68fa      	ldr	r2, [r7, #12]
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	4013      	ands	r3, r2
 8006c8c:	68ba      	ldr	r2, [r7, #8]
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d101      	bne.n	8006c96 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8006c92:	2301      	movs	r3, #1
 8006c94:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8006c96:	697b      	ldr	r3, [r7, #20]
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	371c      	adds	r7, #28
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr

08006ca4 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b086      	sub	sp, #24
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	60f8      	str	r0, [r7, #12]
 8006cac:	60b9      	str	r1, [r7, #8]
 8006cae:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	68ba      	ldr	r2, [r7, #8]
 8006cb4:	68f9      	ldr	r1, [r7, #12]
 8006cb6:	4804      	ldr	r0, [pc, #16]	; (8006cc8 <xEventGroupSetBitsFromISR+0x24>)
 8006cb8:	f002 fe96 	bl	80099e8 <xTimerPendFunctionCallFromISR>
 8006cbc:	6178      	str	r0, [r7, #20]

		return xReturn;
 8006cbe:	697b      	ldr	r3, [r7, #20]
	}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3718      	adds	r7, #24
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}
 8006cc8:	08006c47 	.word	0x08006c47

08006ccc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b083      	sub	sp, #12
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f103 0208 	add.w	r2, r3, #8
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ce4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f103 0208 	add.w	r2, r3, #8
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f103 0208 	add.w	r2, r3, #8
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006d00:	bf00      	nop
 8006d02:	370c      	adds	r7, #12
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr

08006d0c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b083      	sub	sp, #12
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2200      	movs	r2, #0
 8006d18:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006d1a:	bf00      	nop
 8006d1c:	370c      	adds	r7, #12
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr

08006d26 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d26:	b480      	push	{r7}
 8006d28:	b085      	sub	sp, #20
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6078      	str	r0, [r7, #4]
 8006d2e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	68fa      	ldr	r2, [r7, #12]
 8006d3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	689a      	ldr	r2, [r3, #8]
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	683a      	ldr	r2, [r7, #0]
 8006d4a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	683a      	ldr	r2, [r7, #0]
 8006d50:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	1c5a      	adds	r2, r3, #1
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	601a      	str	r2, [r3, #0]
}
 8006d62:	bf00      	nop
 8006d64:	3714      	adds	r7, #20
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr

08006d6e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d6e:	b480      	push	{r7}
 8006d70:	b085      	sub	sp, #20
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	6078      	str	r0, [r7, #4]
 8006d76:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d84:	d103      	bne.n	8006d8e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	691b      	ldr	r3, [r3, #16]
 8006d8a:	60fb      	str	r3, [r7, #12]
 8006d8c:	e00c      	b.n	8006da8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	3308      	adds	r3, #8
 8006d92:	60fb      	str	r3, [r7, #12]
 8006d94:	e002      	b.n	8006d9c <vListInsert+0x2e>
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	60fb      	str	r3, [r7, #12]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	68ba      	ldr	r2, [r7, #8]
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d2f6      	bcs.n	8006d96 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	685a      	ldr	r2, [r3, #4]
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	683a      	ldr	r2, [r7, #0]
 8006db6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	68fa      	ldr	r2, [r7, #12]
 8006dbc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	683a      	ldr	r2, [r7, #0]
 8006dc2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	1c5a      	adds	r2, r3, #1
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	601a      	str	r2, [r3, #0]
}
 8006dd4:	bf00      	nop
 8006dd6:	3714      	adds	r7, #20
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr

08006de0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006de0:	b480      	push	{r7}
 8006de2:	b085      	sub	sp, #20
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	691b      	ldr	r3, [r3, #16]
 8006dec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	6892      	ldr	r2, [r2, #8]
 8006df6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	6852      	ldr	r2, [r2, #4]
 8006e00:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d103      	bne.n	8006e14 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	689a      	ldr	r2, [r3, #8]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	1e5a      	subs	r2, r3, #1
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3714      	adds	r7, #20
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr

08006e34 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b084      	sub	sp, #16
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d10c      	bne.n	8006e62 <xQueueGenericReset+0x2e>
	__asm volatile
 8006e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e4c:	b672      	cpsid	i
 8006e4e:	f383 8811 	msr	BASEPRI, r3
 8006e52:	f3bf 8f6f 	isb	sy
 8006e56:	f3bf 8f4f 	dsb	sy
 8006e5a:	b662      	cpsie	i
 8006e5c:	60bb      	str	r3, [r7, #8]
}
 8006e5e:	bf00      	nop
 8006e60:	e7fe      	b.n	8006e60 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8006e62:	f002 feeb 	bl	8009c3c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e6e:	68f9      	ldr	r1, [r7, #12]
 8006e70:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006e72:	fb01 f303 	mul.w	r3, r1, r3
 8006e76:	441a      	add	r2, r3
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e92:	3b01      	subs	r3, #1
 8006e94:	68f9      	ldr	r1, [r7, #12]
 8006e96:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006e98:	fb01 f303 	mul.w	r3, r1, r3
 8006e9c:	441a      	add	r2, r3
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	22ff      	movs	r2, #255	; 0xff
 8006ea6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	22ff      	movs	r2, #255	; 0xff
 8006eae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d114      	bne.n	8006ee2 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	691b      	ldr	r3, [r3, #16]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d01a      	beq.n	8006ef6 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	3310      	adds	r3, #16
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f001 fdf5 	bl	8008ab4 <xTaskRemoveFromEventList>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d012      	beq.n	8006ef6 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006ed0:	4b0c      	ldr	r3, [pc, #48]	; (8006f04 <xQueueGenericReset+0xd0>)
 8006ed2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ed6:	601a      	str	r2, [r3, #0]
 8006ed8:	f3bf 8f4f 	dsb	sy
 8006edc:	f3bf 8f6f 	isb	sy
 8006ee0:	e009      	b.n	8006ef6 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	3310      	adds	r3, #16
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f7ff fef0 	bl	8006ccc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	3324      	adds	r3, #36	; 0x24
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f7ff feeb 	bl	8006ccc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006ef6:	f002 fed5 	bl	8009ca4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006efa:	2301      	movs	r3, #1
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3710      	adds	r7, #16
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}
 8006f04:	e000ed04 	.word	0xe000ed04

08006f08 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b08e      	sub	sp, #56	; 0x38
 8006f0c:	af02      	add	r7, sp, #8
 8006f0e:	60f8      	str	r0, [r7, #12]
 8006f10:	60b9      	str	r1, [r7, #8]
 8006f12:	607a      	str	r2, [r7, #4]
 8006f14:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d10c      	bne.n	8006f36 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8006f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f20:	b672      	cpsid	i
 8006f22:	f383 8811 	msr	BASEPRI, r3
 8006f26:	f3bf 8f6f 	isb	sy
 8006f2a:	f3bf 8f4f 	dsb	sy
 8006f2e:	b662      	cpsie	i
 8006f30:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006f32:	bf00      	nop
 8006f34:	e7fe      	b.n	8006f34 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d10c      	bne.n	8006f56 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8006f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f40:	b672      	cpsid	i
 8006f42:	f383 8811 	msr	BASEPRI, r3
 8006f46:	f3bf 8f6f 	isb	sy
 8006f4a:	f3bf 8f4f 	dsb	sy
 8006f4e:	b662      	cpsie	i
 8006f50:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006f52:	bf00      	nop
 8006f54:	e7fe      	b.n	8006f54 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d002      	beq.n	8006f62 <xQueueGenericCreateStatic+0x5a>
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d001      	beq.n	8006f66 <xQueueGenericCreateStatic+0x5e>
 8006f62:	2301      	movs	r3, #1
 8006f64:	e000      	b.n	8006f68 <xQueueGenericCreateStatic+0x60>
 8006f66:	2300      	movs	r3, #0
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d10c      	bne.n	8006f86 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8006f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f70:	b672      	cpsid	i
 8006f72:	f383 8811 	msr	BASEPRI, r3
 8006f76:	f3bf 8f6f 	isb	sy
 8006f7a:	f3bf 8f4f 	dsb	sy
 8006f7e:	b662      	cpsie	i
 8006f80:	623b      	str	r3, [r7, #32]
}
 8006f82:	bf00      	nop
 8006f84:	e7fe      	b.n	8006f84 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d102      	bne.n	8006f92 <xQueueGenericCreateStatic+0x8a>
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d101      	bne.n	8006f96 <xQueueGenericCreateStatic+0x8e>
 8006f92:	2301      	movs	r3, #1
 8006f94:	e000      	b.n	8006f98 <xQueueGenericCreateStatic+0x90>
 8006f96:	2300      	movs	r3, #0
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d10c      	bne.n	8006fb6 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8006f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa0:	b672      	cpsid	i
 8006fa2:	f383 8811 	msr	BASEPRI, r3
 8006fa6:	f3bf 8f6f 	isb	sy
 8006faa:	f3bf 8f4f 	dsb	sy
 8006fae:	b662      	cpsie	i
 8006fb0:	61fb      	str	r3, [r7, #28]
}
 8006fb2:	bf00      	nop
 8006fb4:	e7fe      	b.n	8006fb4 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006fb6:	2350      	movs	r3, #80	; 0x50
 8006fb8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	2b50      	cmp	r3, #80	; 0x50
 8006fbe:	d00c      	beq.n	8006fda <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8006fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc4:	b672      	cpsid	i
 8006fc6:	f383 8811 	msr	BASEPRI, r3
 8006fca:	f3bf 8f6f 	isb	sy
 8006fce:	f3bf 8f4f 	dsb	sy
 8006fd2:	b662      	cpsie	i
 8006fd4:	61bb      	str	r3, [r7, #24]
}
 8006fd6:	bf00      	nop
 8006fd8:	e7fe      	b.n	8006fd8 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006fda:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d00d      	beq.n	8007002 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe8:	2201      	movs	r2, #1
 8006fea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006fee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ff4:	9300      	str	r3, [sp, #0]
 8006ff6:	4613      	mov	r3, r2
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	68b9      	ldr	r1, [r7, #8]
 8006ffc:	68f8      	ldr	r0, [r7, #12]
 8006ffe:	f000 f847 	bl	8007090 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007004:	4618      	mov	r0, r3
 8007006:	3730      	adds	r7, #48	; 0x30
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}

0800700c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800700c:	b580      	push	{r7, lr}
 800700e:	b08a      	sub	sp, #40	; 0x28
 8007010:	af02      	add	r7, sp, #8
 8007012:	60f8      	str	r0, [r7, #12]
 8007014:	60b9      	str	r1, [r7, #8]
 8007016:	4613      	mov	r3, r2
 8007018:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d10c      	bne.n	800703a <xQueueGenericCreate+0x2e>
	__asm volatile
 8007020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007024:	b672      	cpsid	i
 8007026:	f383 8811 	msr	BASEPRI, r3
 800702a:	f3bf 8f6f 	isb	sy
 800702e:	f3bf 8f4f 	dsb	sy
 8007032:	b662      	cpsie	i
 8007034:	613b      	str	r3, [r7, #16]
}
 8007036:	bf00      	nop
 8007038:	e7fe      	b.n	8007038 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d102      	bne.n	8007046 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007040:	2300      	movs	r3, #0
 8007042:	61fb      	str	r3, [r7, #28]
 8007044:	e004      	b.n	8007050 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	68ba      	ldr	r2, [r7, #8]
 800704a:	fb02 f303 	mul.w	r3, r2, r3
 800704e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	3350      	adds	r3, #80	; 0x50
 8007054:	4618      	mov	r0, r3
 8007056:	f002 ff1d 	bl	8009e94 <pvPortMalloc>
 800705a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800705c:	69bb      	ldr	r3, [r7, #24]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d011      	beq.n	8007086 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007062:	69bb      	ldr	r3, [r7, #24]
 8007064:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	3350      	adds	r3, #80	; 0x50
 800706a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800706c:	69bb      	ldr	r3, [r7, #24]
 800706e:	2200      	movs	r2, #0
 8007070:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007074:	79fa      	ldrb	r2, [r7, #7]
 8007076:	69bb      	ldr	r3, [r7, #24]
 8007078:	9300      	str	r3, [sp, #0]
 800707a:	4613      	mov	r3, r2
 800707c:	697a      	ldr	r2, [r7, #20]
 800707e:	68b9      	ldr	r1, [r7, #8]
 8007080:	68f8      	ldr	r0, [r7, #12]
 8007082:	f000 f805 	bl	8007090 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007086:	69bb      	ldr	r3, [r7, #24]
	}
 8007088:	4618      	mov	r0, r3
 800708a:	3720      	adds	r7, #32
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
 8007096:	60f8      	str	r0, [r7, #12]
 8007098:	60b9      	str	r1, [r7, #8]
 800709a:	607a      	str	r2, [r7, #4]
 800709c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d103      	bne.n	80070ac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80070a4:	69bb      	ldr	r3, [r7, #24]
 80070a6:	69ba      	ldr	r2, [r7, #24]
 80070a8:	601a      	str	r2, [r3, #0]
 80070aa:	e002      	b.n	80070b2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80070ac:	69bb      	ldr	r3, [r7, #24]
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80070b2:	69bb      	ldr	r3, [r7, #24]
 80070b4:	68fa      	ldr	r2, [r7, #12]
 80070b6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80070b8:	69bb      	ldr	r3, [r7, #24]
 80070ba:	68ba      	ldr	r2, [r7, #8]
 80070bc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80070be:	2101      	movs	r1, #1
 80070c0:	69b8      	ldr	r0, [r7, #24]
 80070c2:	f7ff feb7 	bl	8006e34 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80070c6:	69bb      	ldr	r3, [r7, #24]
 80070c8:	78fa      	ldrb	r2, [r7, #3]
 80070ca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80070ce:	bf00      	nop
 80070d0:	3710      	adds	r7, #16
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}

080070d6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80070d6:	b580      	push	{r7, lr}
 80070d8:	b082      	sub	sp, #8
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d00e      	beq.n	8007102 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2200      	movs	r2, #0
 80070e8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2200      	movs	r2, #0
 80070ee:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80070f6:	2300      	movs	r3, #0
 80070f8:	2200      	movs	r2, #0
 80070fa:	2100      	movs	r1, #0
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 f917 	bl	8007330 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007102:	bf00      	nop
 8007104:	3708      	adds	r7, #8
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}

0800710a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800710a:	b580      	push	{r7, lr}
 800710c:	b086      	sub	sp, #24
 800710e:	af00      	add	r7, sp, #0
 8007110:	4603      	mov	r3, r0
 8007112:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007114:	2301      	movs	r3, #1
 8007116:	617b      	str	r3, [r7, #20]
 8007118:	2300      	movs	r3, #0
 800711a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800711c:	79fb      	ldrb	r3, [r7, #7]
 800711e:	461a      	mov	r2, r3
 8007120:	6939      	ldr	r1, [r7, #16]
 8007122:	6978      	ldr	r0, [r7, #20]
 8007124:	f7ff ff72 	bl	800700c <xQueueGenericCreate>
 8007128:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800712a:	68f8      	ldr	r0, [r7, #12]
 800712c:	f7ff ffd3 	bl	80070d6 <prvInitialiseMutex>

		return xNewQueue;
 8007130:	68fb      	ldr	r3, [r7, #12]
	}
 8007132:	4618      	mov	r0, r3
 8007134:	3718      	adds	r7, #24
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}

0800713a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800713a:	b580      	push	{r7, lr}
 800713c:	b088      	sub	sp, #32
 800713e:	af02      	add	r7, sp, #8
 8007140:	4603      	mov	r3, r0
 8007142:	6039      	str	r1, [r7, #0]
 8007144:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007146:	2301      	movs	r3, #1
 8007148:	617b      	str	r3, [r7, #20]
 800714a:	2300      	movs	r3, #0
 800714c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800714e:	79fb      	ldrb	r3, [r7, #7]
 8007150:	9300      	str	r3, [sp, #0]
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	2200      	movs	r2, #0
 8007156:	6939      	ldr	r1, [r7, #16]
 8007158:	6978      	ldr	r0, [r7, #20]
 800715a:	f7ff fed5 	bl	8006f08 <xQueueGenericCreateStatic>
 800715e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007160:	68f8      	ldr	r0, [r7, #12]
 8007162:	f7ff ffb8 	bl	80070d6 <prvInitialiseMutex>

		return xNewQueue;
 8007166:	68fb      	ldr	r3, [r7, #12]
	}
 8007168:	4618      	mov	r0, r3
 800716a:	3718      	adds	r7, #24
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8007170:	b590      	push	{r4, r7, lr}
 8007172:	b087      	sub	sp, #28
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d10c      	bne.n	800719c <xQueueGiveMutexRecursive+0x2c>
	__asm volatile
 8007182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007186:	b672      	cpsid	i
 8007188:	f383 8811 	msr	BASEPRI, r3
 800718c:	f3bf 8f6f 	isb	sy
 8007190:	f3bf 8f4f 	dsb	sy
 8007194:	b662      	cpsie	i
 8007196:	60fb      	str	r3, [r7, #12]
}
 8007198:	bf00      	nop
 800719a:	e7fe      	b.n	800719a <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	689c      	ldr	r4, [r3, #8]
 80071a0:	f001 feb8 	bl	8008f14 <xTaskGetCurrentTaskHandle>
 80071a4:	4603      	mov	r3, r0
 80071a6:	429c      	cmp	r4, r3
 80071a8:	d111      	bne.n	80071ce <xQueueGiveMutexRecursive+0x5e>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	68db      	ldr	r3, [r3, #12]
 80071ae:	1e5a      	subs	r2, r3, #1
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d105      	bne.n	80071c8 <xQueueGiveMutexRecursive+0x58>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80071bc:	2300      	movs	r3, #0
 80071be:	2200      	movs	r2, #0
 80071c0:	2100      	movs	r1, #0
 80071c2:	6938      	ldr	r0, [r7, #16]
 80071c4:	f000 f8b4 	bl	8007330 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80071c8:	2301      	movs	r3, #1
 80071ca:	617b      	str	r3, [r7, #20]
 80071cc:	e001      	b.n	80071d2 <xQueueGiveMutexRecursive+0x62>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80071ce:	2300      	movs	r3, #0
 80071d0:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80071d2:	697b      	ldr	r3, [r7, #20]
	}
 80071d4:	4618      	mov	r0, r3
 80071d6:	371c      	adds	r7, #28
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd90      	pop	{r4, r7, pc}

080071dc <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80071dc:	b590      	push	{r4, r7, lr}
 80071de:	b087      	sub	sp, #28
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d10c      	bne.n	800720a <xQueueTakeMutexRecursive+0x2e>
	__asm volatile
 80071f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f4:	b672      	cpsid	i
 80071f6:	f383 8811 	msr	BASEPRI, r3
 80071fa:	f3bf 8f6f 	isb	sy
 80071fe:	f3bf 8f4f 	dsb	sy
 8007202:	b662      	cpsie	i
 8007204:	60fb      	str	r3, [r7, #12]
}
 8007206:	bf00      	nop
 8007208:	e7fe      	b.n	8007208 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	689c      	ldr	r4, [r3, #8]
 800720e:	f001 fe81 	bl	8008f14 <xTaskGetCurrentTaskHandle>
 8007212:	4603      	mov	r3, r0
 8007214:	429c      	cmp	r4, r3
 8007216:	d107      	bne.n	8007228 <xQueueTakeMutexRecursive+0x4c>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	1c5a      	adds	r2, r3, #1
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8007222:	2301      	movs	r3, #1
 8007224:	617b      	str	r3, [r7, #20]
 8007226:	e00c      	b.n	8007242 <xQueueTakeMutexRecursive+0x66>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8007228:	6839      	ldr	r1, [r7, #0]
 800722a:	6938      	ldr	r0, [r7, #16]
 800722c:	f000 fba2 	bl	8007974 <xQueueSemaphoreTake>
 8007230:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d004      	beq.n	8007242 <xQueueTakeMutexRecursive+0x66>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	1c5a      	adds	r2, r3, #1
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8007242:	697b      	ldr	r3, [r7, #20]
	}
 8007244:	4618      	mov	r0, r3
 8007246:	371c      	adds	r7, #28
 8007248:	46bd      	mov	sp, r7
 800724a:	bd90      	pop	{r4, r7, pc}

0800724c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800724c:	b580      	push	{r7, lr}
 800724e:	b08a      	sub	sp, #40	; 0x28
 8007250:	af02      	add	r7, sp, #8
 8007252:	60f8      	str	r0, [r7, #12]
 8007254:	60b9      	str	r1, [r7, #8]
 8007256:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d10c      	bne.n	8007278 <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 800725e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007262:	b672      	cpsid	i
 8007264:	f383 8811 	msr	BASEPRI, r3
 8007268:	f3bf 8f6f 	isb	sy
 800726c:	f3bf 8f4f 	dsb	sy
 8007270:	b662      	cpsie	i
 8007272:	61bb      	str	r3, [r7, #24]
}
 8007274:	bf00      	nop
 8007276:	e7fe      	b.n	8007276 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007278:	68ba      	ldr	r2, [r7, #8]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	429a      	cmp	r2, r3
 800727e:	d90c      	bls.n	800729a <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 8007280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007284:	b672      	cpsid	i
 8007286:	f383 8811 	msr	BASEPRI, r3
 800728a:	f3bf 8f6f 	isb	sy
 800728e:	f3bf 8f4f 	dsb	sy
 8007292:	b662      	cpsie	i
 8007294:	617b      	str	r3, [r7, #20]
}
 8007296:	bf00      	nop
 8007298:	e7fe      	b.n	8007298 <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800729a:	2302      	movs	r3, #2
 800729c:	9300      	str	r3, [sp, #0]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	2100      	movs	r1, #0
 80072a4:	68f8      	ldr	r0, [r7, #12]
 80072a6:	f7ff fe2f 	bl	8006f08 <xQueueGenericCreateStatic>
 80072aa:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80072ac:	69fb      	ldr	r3, [r7, #28]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d002      	beq.n	80072b8 <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80072b2:	69fb      	ldr	r3, [r7, #28]
 80072b4:	68ba      	ldr	r2, [r7, #8]
 80072b6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80072b8:	69fb      	ldr	r3, [r7, #28]
	}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3720      	adds	r7, #32
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}

080072c2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80072c2:	b580      	push	{r7, lr}
 80072c4:	b086      	sub	sp, #24
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	6078      	str	r0, [r7, #4]
 80072ca:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d10c      	bne.n	80072ec <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 80072d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d6:	b672      	cpsid	i
 80072d8:	f383 8811 	msr	BASEPRI, r3
 80072dc:	f3bf 8f6f 	isb	sy
 80072e0:	f3bf 8f4f 	dsb	sy
 80072e4:	b662      	cpsie	i
 80072e6:	613b      	str	r3, [r7, #16]
}
 80072e8:	bf00      	nop
 80072ea:	e7fe      	b.n	80072ea <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 80072ec:	683a      	ldr	r2, [r7, #0]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	429a      	cmp	r2, r3
 80072f2:	d90c      	bls.n	800730e <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 80072f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f8:	b672      	cpsid	i
 80072fa:	f383 8811 	msr	BASEPRI, r3
 80072fe:	f3bf 8f6f 	isb	sy
 8007302:	f3bf 8f4f 	dsb	sy
 8007306:	b662      	cpsie	i
 8007308:	60fb      	str	r3, [r7, #12]
}
 800730a:	bf00      	nop
 800730c:	e7fe      	b.n	800730c <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800730e:	2202      	movs	r2, #2
 8007310:	2100      	movs	r1, #0
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f7ff fe7a 	bl	800700c <xQueueGenericCreate>
 8007318:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d002      	beq.n	8007326 <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	683a      	ldr	r2, [r7, #0]
 8007324:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007326:	697b      	ldr	r3, [r7, #20]
	}
 8007328:	4618      	mov	r0, r3
 800732a:	3718      	adds	r7, #24
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b08e      	sub	sp, #56	; 0x38
 8007334:	af00      	add	r7, sp, #0
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	60b9      	str	r1, [r7, #8]
 800733a:	607a      	str	r2, [r7, #4]
 800733c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800733e:	2300      	movs	r3, #0
 8007340:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007348:	2b00      	cmp	r3, #0
 800734a:	d10c      	bne.n	8007366 <xQueueGenericSend+0x36>
	__asm volatile
 800734c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007350:	b672      	cpsid	i
 8007352:	f383 8811 	msr	BASEPRI, r3
 8007356:	f3bf 8f6f 	isb	sy
 800735a:	f3bf 8f4f 	dsb	sy
 800735e:	b662      	cpsie	i
 8007360:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007362:	bf00      	nop
 8007364:	e7fe      	b.n	8007364 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d103      	bne.n	8007374 <xQueueGenericSend+0x44>
 800736c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800736e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007370:	2b00      	cmp	r3, #0
 8007372:	d101      	bne.n	8007378 <xQueueGenericSend+0x48>
 8007374:	2301      	movs	r3, #1
 8007376:	e000      	b.n	800737a <xQueueGenericSend+0x4a>
 8007378:	2300      	movs	r3, #0
 800737a:	2b00      	cmp	r3, #0
 800737c:	d10c      	bne.n	8007398 <xQueueGenericSend+0x68>
	__asm volatile
 800737e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007382:	b672      	cpsid	i
 8007384:	f383 8811 	msr	BASEPRI, r3
 8007388:	f3bf 8f6f 	isb	sy
 800738c:	f3bf 8f4f 	dsb	sy
 8007390:	b662      	cpsie	i
 8007392:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007394:	bf00      	nop
 8007396:	e7fe      	b.n	8007396 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	2b02      	cmp	r3, #2
 800739c:	d103      	bne.n	80073a6 <xQueueGenericSend+0x76>
 800739e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	d101      	bne.n	80073aa <xQueueGenericSend+0x7a>
 80073a6:	2301      	movs	r3, #1
 80073a8:	e000      	b.n	80073ac <xQueueGenericSend+0x7c>
 80073aa:	2300      	movs	r3, #0
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d10c      	bne.n	80073ca <xQueueGenericSend+0x9a>
	__asm volatile
 80073b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b4:	b672      	cpsid	i
 80073b6:	f383 8811 	msr	BASEPRI, r3
 80073ba:	f3bf 8f6f 	isb	sy
 80073be:	f3bf 8f4f 	dsb	sy
 80073c2:	b662      	cpsie	i
 80073c4:	623b      	str	r3, [r7, #32]
}
 80073c6:	bf00      	nop
 80073c8:	e7fe      	b.n	80073c8 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80073ca:	f001 fdb3 	bl	8008f34 <xTaskGetSchedulerState>
 80073ce:	4603      	mov	r3, r0
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d102      	bne.n	80073da <xQueueGenericSend+0xaa>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d101      	bne.n	80073de <xQueueGenericSend+0xae>
 80073da:	2301      	movs	r3, #1
 80073dc:	e000      	b.n	80073e0 <xQueueGenericSend+0xb0>
 80073de:	2300      	movs	r3, #0
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d10c      	bne.n	80073fe <xQueueGenericSend+0xce>
	__asm volatile
 80073e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e8:	b672      	cpsid	i
 80073ea:	f383 8811 	msr	BASEPRI, r3
 80073ee:	f3bf 8f6f 	isb	sy
 80073f2:	f3bf 8f4f 	dsb	sy
 80073f6:	b662      	cpsie	i
 80073f8:	61fb      	str	r3, [r7, #28]
}
 80073fa:	bf00      	nop
 80073fc:	e7fe      	b.n	80073fc <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80073fe:	f002 fc1d 	bl	8009c3c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007404:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800740a:	429a      	cmp	r2, r3
 800740c:	d302      	bcc.n	8007414 <xQueueGenericSend+0xe4>
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	2b02      	cmp	r3, #2
 8007412:	d129      	bne.n	8007468 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007414:	683a      	ldr	r2, [r7, #0]
 8007416:	68b9      	ldr	r1, [r7, #8]
 8007418:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800741a:	f000 fcc2 	bl	8007da2 <prvCopyDataToQueue>
 800741e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007424:	2b00      	cmp	r3, #0
 8007426:	d010      	beq.n	800744a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800742a:	3324      	adds	r3, #36	; 0x24
 800742c:	4618      	mov	r0, r3
 800742e:	f001 fb41 	bl	8008ab4 <xTaskRemoveFromEventList>
 8007432:	4603      	mov	r3, r0
 8007434:	2b00      	cmp	r3, #0
 8007436:	d013      	beq.n	8007460 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007438:	4b3f      	ldr	r3, [pc, #252]	; (8007538 <xQueueGenericSend+0x208>)
 800743a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800743e:	601a      	str	r2, [r3, #0]
 8007440:	f3bf 8f4f 	dsb	sy
 8007444:	f3bf 8f6f 	isb	sy
 8007448:	e00a      	b.n	8007460 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800744a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800744c:	2b00      	cmp	r3, #0
 800744e:	d007      	beq.n	8007460 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007450:	4b39      	ldr	r3, [pc, #228]	; (8007538 <xQueueGenericSend+0x208>)
 8007452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007456:	601a      	str	r2, [r3, #0]
 8007458:	f3bf 8f4f 	dsb	sy
 800745c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007460:	f002 fc20 	bl	8009ca4 <vPortExitCritical>
				return pdPASS;
 8007464:	2301      	movs	r3, #1
 8007466:	e063      	b.n	8007530 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d103      	bne.n	8007476 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800746e:	f002 fc19 	bl	8009ca4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007472:	2300      	movs	r3, #0
 8007474:	e05c      	b.n	8007530 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007478:	2b00      	cmp	r3, #0
 800747a:	d106      	bne.n	800748a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800747c:	f107 0314 	add.w	r3, r7, #20
 8007480:	4618      	mov	r0, r3
 8007482:	f001 fbe3 	bl	8008c4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007486:	2301      	movs	r3, #1
 8007488:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800748a:	f002 fc0b 	bl	8009ca4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800748e:	f001 f88b 	bl	80085a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007492:	f002 fbd3 	bl	8009c3c <vPortEnterCritical>
 8007496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007498:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800749c:	b25b      	sxtb	r3, r3
 800749e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074a2:	d103      	bne.n	80074ac <xQueueGenericSend+0x17c>
 80074a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a6:	2200      	movs	r2, #0
 80074a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074b2:	b25b      	sxtb	r3, r3
 80074b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074b8:	d103      	bne.n	80074c2 <xQueueGenericSend+0x192>
 80074ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074bc:	2200      	movs	r2, #0
 80074be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074c2:	f002 fbef 	bl	8009ca4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80074c6:	1d3a      	adds	r2, r7, #4
 80074c8:	f107 0314 	add.w	r3, r7, #20
 80074cc:	4611      	mov	r1, r2
 80074ce:	4618      	mov	r0, r3
 80074d0:	f001 fbd2 	bl	8008c78 <xTaskCheckForTimeOut>
 80074d4:	4603      	mov	r3, r0
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d124      	bne.n	8007524 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80074da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074dc:	f000 fd59 	bl	8007f92 <prvIsQueueFull>
 80074e0:	4603      	mov	r3, r0
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d018      	beq.n	8007518 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80074e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e8:	3310      	adds	r3, #16
 80074ea:	687a      	ldr	r2, [r7, #4]
 80074ec:	4611      	mov	r1, r2
 80074ee:	4618      	mov	r0, r3
 80074f0:	f001 fa4c 	bl	800898c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80074f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074f6:	f000 fce4 	bl	8007ec2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80074fa:	f001 f863 	bl	80085c4 <xTaskResumeAll>
 80074fe:	4603      	mov	r3, r0
 8007500:	2b00      	cmp	r3, #0
 8007502:	f47f af7c 	bne.w	80073fe <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8007506:	4b0c      	ldr	r3, [pc, #48]	; (8007538 <xQueueGenericSend+0x208>)
 8007508:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800750c:	601a      	str	r2, [r3, #0]
 800750e:	f3bf 8f4f 	dsb	sy
 8007512:	f3bf 8f6f 	isb	sy
 8007516:	e772      	b.n	80073fe <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007518:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800751a:	f000 fcd2 	bl	8007ec2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800751e:	f001 f851 	bl	80085c4 <xTaskResumeAll>
 8007522:	e76c      	b.n	80073fe <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007524:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007526:	f000 fccc 	bl	8007ec2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800752a:	f001 f84b 	bl	80085c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800752e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007530:	4618      	mov	r0, r3
 8007532:	3738      	adds	r7, #56	; 0x38
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}
 8007538:	e000ed04 	.word	0xe000ed04

0800753c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b08e      	sub	sp, #56	; 0x38
 8007540:	af00      	add	r7, sp, #0
 8007542:	60f8      	str	r0, [r7, #12]
 8007544:	60b9      	str	r1, [r7, #8]
 8007546:	607a      	str	r2, [r7, #4]
 8007548:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800754e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007550:	2b00      	cmp	r3, #0
 8007552:	d10c      	bne.n	800756e <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8007554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007558:	b672      	cpsid	i
 800755a:	f383 8811 	msr	BASEPRI, r3
 800755e:	f3bf 8f6f 	isb	sy
 8007562:	f3bf 8f4f 	dsb	sy
 8007566:	b662      	cpsie	i
 8007568:	627b      	str	r3, [r7, #36]	; 0x24
}
 800756a:	bf00      	nop
 800756c:	e7fe      	b.n	800756c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d103      	bne.n	800757c <xQueueGenericSendFromISR+0x40>
 8007574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007578:	2b00      	cmp	r3, #0
 800757a:	d101      	bne.n	8007580 <xQueueGenericSendFromISR+0x44>
 800757c:	2301      	movs	r3, #1
 800757e:	e000      	b.n	8007582 <xQueueGenericSendFromISR+0x46>
 8007580:	2300      	movs	r3, #0
 8007582:	2b00      	cmp	r3, #0
 8007584:	d10c      	bne.n	80075a0 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8007586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800758a:	b672      	cpsid	i
 800758c:	f383 8811 	msr	BASEPRI, r3
 8007590:	f3bf 8f6f 	isb	sy
 8007594:	f3bf 8f4f 	dsb	sy
 8007598:	b662      	cpsie	i
 800759a:	623b      	str	r3, [r7, #32]
}
 800759c:	bf00      	nop
 800759e:	e7fe      	b.n	800759e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	2b02      	cmp	r3, #2
 80075a4:	d103      	bne.n	80075ae <xQueueGenericSendFromISR+0x72>
 80075a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	d101      	bne.n	80075b2 <xQueueGenericSendFromISR+0x76>
 80075ae:	2301      	movs	r3, #1
 80075b0:	e000      	b.n	80075b4 <xQueueGenericSendFromISR+0x78>
 80075b2:	2300      	movs	r3, #0
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d10c      	bne.n	80075d2 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80075b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075bc:	b672      	cpsid	i
 80075be:	f383 8811 	msr	BASEPRI, r3
 80075c2:	f3bf 8f6f 	isb	sy
 80075c6:	f3bf 8f4f 	dsb	sy
 80075ca:	b662      	cpsie	i
 80075cc:	61fb      	str	r3, [r7, #28]
}
 80075ce:	bf00      	nop
 80075d0:	e7fe      	b.n	80075d0 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80075d2:	f002 fc1b 	bl	8009e0c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80075d6:	f3ef 8211 	mrs	r2, BASEPRI
 80075da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075de:	b672      	cpsid	i
 80075e0:	f383 8811 	msr	BASEPRI, r3
 80075e4:	f3bf 8f6f 	isb	sy
 80075e8:	f3bf 8f4f 	dsb	sy
 80075ec:	b662      	cpsie	i
 80075ee:	61ba      	str	r2, [r7, #24]
 80075f0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80075f2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80075f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80075f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075fe:	429a      	cmp	r2, r3
 8007600:	d302      	bcc.n	8007608 <xQueueGenericSendFromISR+0xcc>
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	2b02      	cmp	r3, #2
 8007606:	d12c      	bne.n	8007662 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800760a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800760e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007612:	683a      	ldr	r2, [r7, #0]
 8007614:	68b9      	ldr	r1, [r7, #8]
 8007616:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007618:	f000 fbc3 	bl	8007da2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800761c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007624:	d112      	bne.n	800764c <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762a:	2b00      	cmp	r3, #0
 800762c:	d016      	beq.n	800765c <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800762e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007630:	3324      	adds	r3, #36	; 0x24
 8007632:	4618      	mov	r0, r3
 8007634:	f001 fa3e 	bl	8008ab4 <xTaskRemoveFromEventList>
 8007638:	4603      	mov	r3, r0
 800763a:	2b00      	cmp	r3, #0
 800763c:	d00e      	beq.n	800765c <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d00b      	beq.n	800765c <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2201      	movs	r2, #1
 8007648:	601a      	str	r2, [r3, #0]
 800764a:	e007      	b.n	800765c <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800764c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007650:	3301      	adds	r3, #1
 8007652:	b2db      	uxtb	r3, r3
 8007654:	b25a      	sxtb	r2, r3
 8007656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007658:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800765c:	2301      	movs	r3, #1
 800765e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007660:	e001      	b.n	8007666 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007662:	2300      	movs	r3, #0
 8007664:	637b      	str	r3, [r7, #52]	; 0x34
 8007666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007668:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007670:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007674:	4618      	mov	r0, r3
 8007676:	3738      	adds	r7, #56	; 0x38
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b08e      	sub	sp, #56	; 0x38
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
 8007684:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800768a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800768c:	2b00      	cmp	r3, #0
 800768e:	d10c      	bne.n	80076aa <xQueueGiveFromISR+0x2e>
	__asm volatile
 8007690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007694:	b672      	cpsid	i
 8007696:	f383 8811 	msr	BASEPRI, r3
 800769a:	f3bf 8f6f 	isb	sy
 800769e:	f3bf 8f4f 	dsb	sy
 80076a2:	b662      	cpsie	i
 80076a4:	623b      	str	r3, [r7, #32]
}
 80076a6:	bf00      	nop
 80076a8:	e7fe      	b.n	80076a8 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80076aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d00c      	beq.n	80076cc <xQueueGiveFromISR+0x50>
	__asm volatile
 80076b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b6:	b672      	cpsid	i
 80076b8:	f383 8811 	msr	BASEPRI, r3
 80076bc:	f3bf 8f6f 	isb	sy
 80076c0:	f3bf 8f4f 	dsb	sy
 80076c4:	b662      	cpsie	i
 80076c6:	61fb      	str	r3, [r7, #28]
}
 80076c8:	bf00      	nop
 80076ca:	e7fe      	b.n	80076ca <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80076cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d103      	bne.n	80076dc <xQueueGiveFromISR+0x60>
 80076d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d101      	bne.n	80076e0 <xQueueGiveFromISR+0x64>
 80076dc:	2301      	movs	r3, #1
 80076de:	e000      	b.n	80076e2 <xQueueGiveFromISR+0x66>
 80076e0:	2300      	movs	r3, #0
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d10c      	bne.n	8007700 <xQueueGiveFromISR+0x84>
	__asm volatile
 80076e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ea:	b672      	cpsid	i
 80076ec:	f383 8811 	msr	BASEPRI, r3
 80076f0:	f3bf 8f6f 	isb	sy
 80076f4:	f3bf 8f4f 	dsb	sy
 80076f8:	b662      	cpsie	i
 80076fa:	61bb      	str	r3, [r7, #24]
}
 80076fc:	bf00      	nop
 80076fe:	e7fe      	b.n	80076fe <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007700:	f002 fb84 	bl	8009e0c <vPortValidateInterruptPriority>
	__asm volatile
 8007704:	f3ef 8211 	mrs	r2, BASEPRI
 8007708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800770c:	b672      	cpsid	i
 800770e:	f383 8811 	msr	BASEPRI, r3
 8007712:	f3bf 8f6f 	isb	sy
 8007716:	f3bf 8f4f 	dsb	sy
 800771a:	b662      	cpsie	i
 800771c:	617a      	str	r2, [r7, #20]
 800771e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007720:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007722:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007728:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800772a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800772c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800772e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007730:	429a      	cmp	r2, r3
 8007732:	d22b      	bcs.n	800778c <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007736:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800773a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800773e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007740:	1c5a      	adds	r2, r3, #1
 8007742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007744:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007746:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800774a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800774e:	d112      	bne.n	8007776 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007754:	2b00      	cmp	r3, #0
 8007756:	d016      	beq.n	8007786 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800775a:	3324      	adds	r3, #36	; 0x24
 800775c:	4618      	mov	r0, r3
 800775e:	f001 f9a9 	bl	8008ab4 <xTaskRemoveFromEventList>
 8007762:	4603      	mov	r3, r0
 8007764:	2b00      	cmp	r3, #0
 8007766:	d00e      	beq.n	8007786 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d00b      	beq.n	8007786 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	2201      	movs	r2, #1
 8007772:	601a      	str	r2, [r3, #0]
 8007774:	e007      	b.n	8007786 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007776:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800777a:	3301      	adds	r3, #1
 800777c:	b2db      	uxtb	r3, r3
 800777e:	b25a      	sxtb	r2, r3
 8007780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007782:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007786:	2301      	movs	r3, #1
 8007788:	637b      	str	r3, [r7, #52]	; 0x34
 800778a:	e001      	b.n	8007790 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800778c:	2300      	movs	r3, #0
 800778e:	637b      	str	r3, [r7, #52]	; 0x34
 8007790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007792:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f383 8811 	msr	BASEPRI, r3
}
 800779a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800779c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3738      	adds	r7, #56	; 0x38
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
	...

080077a8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b08c      	sub	sp, #48	; 0x30
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	60f8      	str	r0, [r7, #12]
 80077b0:	60b9      	str	r1, [r7, #8]
 80077b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80077b4:	2300      	movs	r3, #0
 80077b6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80077bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d10c      	bne.n	80077dc <xQueueReceive+0x34>
	__asm volatile
 80077c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c6:	b672      	cpsid	i
 80077c8:	f383 8811 	msr	BASEPRI, r3
 80077cc:	f3bf 8f6f 	isb	sy
 80077d0:	f3bf 8f4f 	dsb	sy
 80077d4:	b662      	cpsie	i
 80077d6:	623b      	str	r3, [r7, #32]
}
 80077d8:	bf00      	nop
 80077da:	e7fe      	b.n	80077da <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d103      	bne.n	80077ea <xQueueReceive+0x42>
 80077e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d101      	bne.n	80077ee <xQueueReceive+0x46>
 80077ea:	2301      	movs	r3, #1
 80077ec:	e000      	b.n	80077f0 <xQueueReceive+0x48>
 80077ee:	2300      	movs	r3, #0
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d10c      	bne.n	800780e <xQueueReceive+0x66>
	__asm volatile
 80077f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f8:	b672      	cpsid	i
 80077fa:	f383 8811 	msr	BASEPRI, r3
 80077fe:	f3bf 8f6f 	isb	sy
 8007802:	f3bf 8f4f 	dsb	sy
 8007806:	b662      	cpsie	i
 8007808:	61fb      	str	r3, [r7, #28]
}
 800780a:	bf00      	nop
 800780c:	e7fe      	b.n	800780c <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800780e:	f001 fb91 	bl	8008f34 <xTaskGetSchedulerState>
 8007812:	4603      	mov	r3, r0
 8007814:	2b00      	cmp	r3, #0
 8007816:	d102      	bne.n	800781e <xQueueReceive+0x76>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d101      	bne.n	8007822 <xQueueReceive+0x7a>
 800781e:	2301      	movs	r3, #1
 8007820:	e000      	b.n	8007824 <xQueueReceive+0x7c>
 8007822:	2300      	movs	r3, #0
 8007824:	2b00      	cmp	r3, #0
 8007826:	d10c      	bne.n	8007842 <xQueueReceive+0x9a>
	__asm volatile
 8007828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800782c:	b672      	cpsid	i
 800782e:	f383 8811 	msr	BASEPRI, r3
 8007832:	f3bf 8f6f 	isb	sy
 8007836:	f3bf 8f4f 	dsb	sy
 800783a:	b662      	cpsie	i
 800783c:	61bb      	str	r3, [r7, #24]
}
 800783e:	bf00      	nop
 8007840:	e7fe      	b.n	8007840 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007842:	f002 f9fb 	bl	8009c3c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800784a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800784c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784e:	2b00      	cmp	r3, #0
 8007850:	d01f      	beq.n	8007892 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007852:	68b9      	ldr	r1, [r7, #8]
 8007854:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007856:	f000 fb0e 	bl	8007e76 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800785a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785c:	1e5a      	subs	r2, r3, #1
 800785e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007860:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007864:	691b      	ldr	r3, [r3, #16]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d00f      	beq.n	800788a <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800786a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800786c:	3310      	adds	r3, #16
 800786e:	4618      	mov	r0, r3
 8007870:	f001 f920 	bl	8008ab4 <xTaskRemoveFromEventList>
 8007874:	4603      	mov	r3, r0
 8007876:	2b00      	cmp	r3, #0
 8007878:	d007      	beq.n	800788a <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800787a:	4b3d      	ldr	r3, [pc, #244]	; (8007970 <xQueueReceive+0x1c8>)
 800787c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007880:	601a      	str	r2, [r3, #0]
 8007882:	f3bf 8f4f 	dsb	sy
 8007886:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800788a:	f002 fa0b 	bl	8009ca4 <vPortExitCritical>
				return pdPASS;
 800788e:	2301      	movs	r3, #1
 8007890:	e069      	b.n	8007966 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d103      	bne.n	80078a0 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007898:	f002 fa04 	bl	8009ca4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800789c:	2300      	movs	r3, #0
 800789e:	e062      	b.n	8007966 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80078a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d106      	bne.n	80078b4 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80078a6:	f107 0310 	add.w	r3, r7, #16
 80078aa:	4618      	mov	r0, r3
 80078ac:	f001 f9ce 	bl	8008c4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80078b0:	2301      	movs	r3, #1
 80078b2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80078b4:	f002 f9f6 	bl	8009ca4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80078b8:	f000 fe76 	bl	80085a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80078bc:	f002 f9be 	bl	8009c3c <vPortEnterCritical>
 80078c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80078c6:	b25b      	sxtb	r3, r3
 80078c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078cc:	d103      	bne.n	80078d6 <xQueueReceive+0x12e>
 80078ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d0:	2200      	movs	r2, #0
 80078d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078dc:	b25b      	sxtb	r3, r3
 80078de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078e2:	d103      	bne.n	80078ec <xQueueReceive+0x144>
 80078e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e6:	2200      	movs	r2, #0
 80078e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80078ec:	f002 f9da 	bl	8009ca4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80078f0:	1d3a      	adds	r2, r7, #4
 80078f2:	f107 0310 	add.w	r3, r7, #16
 80078f6:	4611      	mov	r1, r2
 80078f8:	4618      	mov	r0, r3
 80078fa:	f001 f9bd 	bl	8008c78 <xTaskCheckForTimeOut>
 80078fe:	4603      	mov	r3, r0
 8007900:	2b00      	cmp	r3, #0
 8007902:	d123      	bne.n	800794c <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007904:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007906:	f000 fb2e 	bl	8007f66 <prvIsQueueEmpty>
 800790a:	4603      	mov	r3, r0
 800790c:	2b00      	cmp	r3, #0
 800790e:	d017      	beq.n	8007940 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007912:	3324      	adds	r3, #36	; 0x24
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	4611      	mov	r1, r2
 8007918:	4618      	mov	r0, r3
 800791a:	f001 f837 	bl	800898c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800791e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007920:	f000 facf 	bl	8007ec2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007924:	f000 fe4e 	bl	80085c4 <xTaskResumeAll>
 8007928:	4603      	mov	r3, r0
 800792a:	2b00      	cmp	r3, #0
 800792c:	d189      	bne.n	8007842 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800792e:	4b10      	ldr	r3, [pc, #64]	; (8007970 <xQueueReceive+0x1c8>)
 8007930:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007934:	601a      	str	r2, [r3, #0]
 8007936:	f3bf 8f4f 	dsb	sy
 800793a:	f3bf 8f6f 	isb	sy
 800793e:	e780      	b.n	8007842 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007940:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007942:	f000 fabe 	bl	8007ec2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007946:	f000 fe3d 	bl	80085c4 <xTaskResumeAll>
 800794a:	e77a      	b.n	8007842 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800794c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800794e:	f000 fab8 	bl	8007ec2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007952:	f000 fe37 	bl	80085c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007956:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007958:	f000 fb05 	bl	8007f66 <prvIsQueueEmpty>
 800795c:	4603      	mov	r3, r0
 800795e:	2b00      	cmp	r3, #0
 8007960:	f43f af6f 	beq.w	8007842 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007964:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007966:	4618      	mov	r0, r3
 8007968:	3730      	adds	r7, #48	; 0x30
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
 800796e:	bf00      	nop
 8007970:	e000ed04 	.word	0xe000ed04

08007974 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b08e      	sub	sp, #56	; 0x38
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800797e:	2300      	movs	r3, #0
 8007980:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007986:	2300      	movs	r3, #0
 8007988:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800798a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800798c:	2b00      	cmp	r3, #0
 800798e:	d10c      	bne.n	80079aa <xQueueSemaphoreTake+0x36>
	__asm volatile
 8007990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007994:	b672      	cpsid	i
 8007996:	f383 8811 	msr	BASEPRI, r3
 800799a:	f3bf 8f6f 	isb	sy
 800799e:	f3bf 8f4f 	dsb	sy
 80079a2:	b662      	cpsie	i
 80079a4:	623b      	str	r3, [r7, #32]
}
 80079a6:	bf00      	nop
 80079a8:	e7fe      	b.n	80079a8 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80079aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d00c      	beq.n	80079cc <xQueueSemaphoreTake+0x58>
	__asm volatile
 80079b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b6:	b672      	cpsid	i
 80079b8:	f383 8811 	msr	BASEPRI, r3
 80079bc:	f3bf 8f6f 	isb	sy
 80079c0:	f3bf 8f4f 	dsb	sy
 80079c4:	b662      	cpsie	i
 80079c6:	61fb      	str	r3, [r7, #28]
}
 80079c8:	bf00      	nop
 80079ca:	e7fe      	b.n	80079ca <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80079cc:	f001 fab2 	bl	8008f34 <xTaskGetSchedulerState>
 80079d0:	4603      	mov	r3, r0
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d102      	bne.n	80079dc <xQueueSemaphoreTake+0x68>
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d101      	bne.n	80079e0 <xQueueSemaphoreTake+0x6c>
 80079dc:	2301      	movs	r3, #1
 80079de:	e000      	b.n	80079e2 <xQueueSemaphoreTake+0x6e>
 80079e0:	2300      	movs	r3, #0
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d10c      	bne.n	8007a00 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 80079e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ea:	b672      	cpsid	i
 80079ec:	f383 8811 	msr	BASEPRI, r3
 80079f0:	f3bf 8f6f 	isb	sy
 80079f4:	f3bf 8f4f 	dsb	sy
 80079f8:	b662      	cpsie	i
 80079fa:	61bb      	str	r3, [r7, #24]
}
 80079fc:	bf00      	nop
 80079fe:	e7fe      	b.n	80079fe <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007a00:	f002 f91c 	bl	8009c3c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a08:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d024      	beq.n	8007a5a <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a12:	1e5a      	subs	r2, r3, #1
 8007a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a16:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d104      	bne.n	8007a2a <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007a20:	f001 fc1e 	bl	8009260 <pvTaskIncrementMutexHeldCount>
 8007a24:	4602      	mov	r2, r0
 8007a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a28:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a2c:	691b      	ldr	r3, [r3, #16]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d00f      	beq.n	8007a52 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a34:	3310      	adds	r3, #16
 8007a36:	4618      	mov	r0, r3
 8007a38:	f001 f83c 	bl	8008ab4 <xTaskRemoveFromEventList>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d007      	beq.n	8007a52 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007a42:	4b55      	ldr	r3, [pc, #340]	; (8007b98 <xQueueSemaphoreTake+0x224>)
 8007a44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a48:	601a      	str	r2, [r3, #0]
 8007a4a:	f3bf 8f4f 	dsb	sy
 8007a4e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007a52:	f002 f927 	bl	8009ca4 <vPortExitCritical>
				return pdPASS;
 8007a56:	2301      	movs	r3, #1
 8007a58:	e099      	b.n	8007b8e <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d113      	bne.n	8007a88 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d00c      	beq.n	8007a80 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8007a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a6a:	b672      	cpsid	i
 8007a6c:	f383 8811 	msr	BASEPRI, r3
 8007a70:	f3bf 8f6f 	isb	sy
 8007a74:	f3bf 8f4f 	dsb	sy
 8007a78:	b662      	cpsie	i
 8007a7a:	617b      	str	r3, [r7, #20]
}
 8007a7c:	bf00      	nop
 8007a7e:	e7fe      	b.n	8007a7e <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007a80:	f002 f910 	bl	8009ca4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007a84:	2300      	movs	r3, #0
 8007a86:	e082      	b.n	8007b8e <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d106      	bne.n	8007a9c <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007a8e:	f107 030c 	add.w	r3, r7, #12
 8007a92:	4618      	mov	r0, r3
 8007a94:	f001 f8da 	bl	8008c4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007a9c:	f002 f902 	bl	8009ca4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007aa0:	f000 fd82 	bl	80085a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007aa4:	f002 f8ca 	bl	8009c3c <vPortEnterCritical>
 8007aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aaa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007aae:	b25b      	sxtb	r3, r3
 8007ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ab4:	d103      	bne.n	8007abe <xQueueSemaphoreTake+0x14a>
 8007ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab8:	2200      	movs	r2, #0
 8007aba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ac0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ac4:	b25b      	sxtb	r3, r3
 8007ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aca:	d103      	bne.n	8007ad4 <xQueueSemaphoreTake+0x160>
 8007acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ace:	2200      	movs	r2, #0
 8007ad0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ad4:	f002 f8e6 	bl	8009ca4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007ad8:	463a      	mov	r2, r7
 8007ada:	f107 030c 	add.w	r3, r7, #12
 8007ade:	4611      	mov	r1, r2
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f001 f8c9 	bl	8008c78 <xTaskCheckForTimeOut>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d132      	bne.n	8007b52 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007aec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007aee:	f000 fa3a 	bl	8007f66 <prvIsQueueEmpty>
 8007af2:	4603      	mov	r3, r0
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d026      	beq.n	8007b46 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d109      	bne.n	8007b14 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8007b00:	f002 f89c 	bl	8009c3c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b06:	689b      	ldr	r3, [r3, #8]
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f001 fa31 	bl	8008f70 <xTaskPriorityInherit>
 8007b0e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007b10:	f002 f8c8 	bl	8009ca4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b16:	3324      	adds	r3, #36	; 0x24
 8007b18:	683a      	ldr	r2, [r7, #0]
 8007b1a:	4611      	mov	r1, r2
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f000 ff35 	bl	800898c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007b22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b24:	f000 f9cd 	bl	8007ec2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007b28:	f000 fd4c 	bl	80085c4 <xTaskResumeAll>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	f47f af66 	bne.w	8007a00 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8007b34:	4b18      	ldr	r3, [pc, #96]	; (8007b98 <xQueueSemaphoreTake+0x224>)
 8007b36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b3a:	601a      	str	r2, [r3, #0]
 8007b3c:	f3bf 8f4f 	dsb	sy
 8007b40:	f3bf 8f6f 	isb	sy
 8007b44:	e75c      	b.n	8007a00 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007b46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b48:	f000 f9bb 	bl	8007ec2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007b4c:	f000 fd3a 	bl	80085c4 <xTaskResumeAll>
 8007b50:	e756      	b.n	8007a00 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007b52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b54:	f000 f9b5 	bl	8007ec2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007b58:	f000 fd34 	bl	80085c4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b5e:	f000 fa02 	bl	8007f66 <prvIsQueueEmpty>
 8007b62:	4603      	mov	r3, r0
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	f43f af4b 	beq.w	8007a00 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d00d      	beq.n	8007b8c <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8007b70:	f002 f864 	bl	8009c3c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007b74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b76:	f000 f8fc 	bl	8007d72 <prvGetDisinheritPriorityAfterTimeout>
 8007b7a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b82:	4618      	mov	r0, r3
 8007b84:	f001 face 	bl	8009124 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007b88:	f002 f88c 	bl	8009ca4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007b8c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3738      	adds	r7, #56	; 0x38
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}
 8007b96:	bf00      	nop
 8007b98:	e000ed04 	.word	0xe000ed04

08007b9c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b08e      	sub	sp, #56	; 0x38
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	60b9      	str	r1, [r7, #8]
 8007ba6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d10c      	bne.n	8007bcc <xQueueReceiveFromISR+0x30>
	__asm volatile
 8007bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb6:	b672      	cpsid	i
 8007bb8:	f383 8811 	msr	BASEPRI, r3
 8007bbc:	f3bf 8f6f 	isb	sy
 8007bc0:	f3bf 8f4f 	dsb	sy
 8007bc4:	b662      	cpsie	i
 8007bc6:	623b      	str	r3, [r7, #32]
}
 8007bc8:	bf00      	nop
 8007bca:	e7fe      	b.n	8007bca <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d103      	bne.n	8007bda <xQueueReceiveFromISR+0x3e>
 8007bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d101      	bne.n	8007bde <xQueueReceiveFromISR+0x42>
 8007bda:	2301      	movs	r3, #1
 8007bdc:	e000      	b.n	8007be0 <xQueueReceiveFromISR+0x44>
 8007bde:	2300      	movs	r3, #0
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d10c      	bne.n	8007bfe <xQueueReceiveFromISR+0x62>
	__asm volatile
 8007be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be8:	b672      	cpsid	i
 8007bea:	f383 8811 	msr	BASEPRI, r3
 8007bee:	f3bf 8f6f 	isb	sy
 8007bf2:	f3bf 8f4f 	dsb	sy
 8007bf6:	b662      	cpsie	i
 8007bf8:	61fb      	str	r3, [r7, #28]
}
 8007bfa:	bf00      	nop
 8007bfc:	e7fe      	b.n	8007bfc <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007bfe:	f002 f905 	bl	8009e0c <vPortValidateInterruptPriority>
	__asm volatile
 8007c02:	f3ef 8211 	mrs	r2, BASEPRI
 8007c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c0a:	b672      	cpsid	i
 8007c0c:	f383 8811 	msr	BASEPRI, r3
 8007c10:	f3bf 8f6f 	isb	sy
 8007c14:	f3bf 8f4f 	dsb	sy
 8007c18:	b662      	cpsie	i
 8007c1a:	61ba      	str	r2, [r7, #24]
 8007c1c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007c1e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007c20:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c26:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d02f      	beq.n	8007c8e <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007c38:	68b9      	ldr	r1, [r7, #8]
 8007c3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c3c:	f000 f91b 	bl	8007e76 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c42:	1e5a      	subs	r2, r3, #1
 8007c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c46:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007c48:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c50:	d112      	bne.n	8007c78 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c54:	691b      	ldr	r3, [r3, #16]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d016      	beq.n	8007c88 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c5c:	3310      	adds	r3, #16
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f000 ff28 	bl	8008ab4 <xTaskRemoveFromEventList>
 8007c64:	4603      	mov	r3, r0
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d00e      	beq.n	8007c88 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d00b      	beq.n	8007c88 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2201      	movs	r2, #1
 8007c74:	601a      	str	r2, [r3, #0]
 8007c76:	e007      	b.n	8007c88 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007c78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c7c:	3301      	adds	r3, #1
 8007c7e:	b2db      	uxtb	r3, r3
 8007c80:	b25a      	sxtb	r2, r3
 8007c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007c88:	2301      	movs	r3, #1
 8007c8a:	637b      	str	r3, [r7, #52]	; 0x34
 8007c8c:	e001      	b.n	8007c92 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	637b      	str	r3, [r7, #52]	; 0x34
 8007c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c94:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	f383 8811 	msr	BASEPRI, r3
}
 8007c9c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3738      	adds	r7, #56	; 0x38
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}

08007ca8 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b084      	sub	sp, #16
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d10c      	bne.n	8007cd0 <uxQueueMessagesWaiting+0x28>
	__asm volatile
 8007cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cba:	b672      	cpsid	i
 8007cbc:	f383 8811 	msr	BASEPRI, r3
 8007cc0:	f3bf 8f6f 	isb	sy
 8007cc4:	f3bf 8f4f 	dsb	sy
 8007cc8:	b662      	cpsie	i
 8007cca:	60bb      	str	r3, [r7, #8]
}
 8007ccc:	bf00      	nop
 8007cce:	e7fe      	b.n	8007cce <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 8007cd0:	f001 ffb4 	bl	8009c3c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd8:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8007cda:	f001 ffe3 	bl	8009ca4 <vPortExitCritical>

	return uxReturn;
 8007cde:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3710      	adds	r7, #16
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b087      	sub	sp, #28
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d10c      	bne.n	8007d14 <uxQueueMessagesWaitingFromISR+0x2c>
	__asm volatile
 8007cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cfe:	b672      	cpsid	i
 8007d00:	f383 8811 	msr	BASEPRI, r3
 8007d04:	f3bf 8f6f 	isb	sy
 8007d08:	f3bf 8f4f 	dsb	sy
 8007d0c:	b662      	cpsie	i
 8007d0e:	60fb      	str	r3, [r7, #12]
}
 8007d10:	bf00      	nop
 8007d12:	e7fe      	b.n	8007d12 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d18:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8007d1a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	371c      	adds	r7, #28
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr

08007d28 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b084      	sub	sp, #16
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d10c      	bne.n	8007d54 <vQueueDelete+0x2c>
	__asm volatile
 8007d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d3e:	b672      	cpsid	i
 8007d40:	f383 8811 	msr	BASEPRI, r3
 8007d44:	f3bf 8f6f 	isb	sy
 8007d48:	f3bf 8f4f 	dsb	sy
 8007d4c:	b662      	cpsie	i
 8007d4e:	60bb      	str	r3, [r7, #8]
}
 8007d50:	bf00      	nop
 8007d52:	e7fe      	b.n	8007d52 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007d54:	68f8      	ldr	r0, [r7, #12]
 8007d56:	f000 f95f 	bl	8008018 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d102      	bne.n	8007d6a <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 8007d64:	68f8      	ldr	r0, [r7, #12]
 8007d66:	f002 f95f 	bl	800a028 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007d6a:	bf00      	nop
 8007d6c:	3710      	adds	r7, #16
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}

08007d72 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007d72:	b480      	push	{r7}
 8007d74:	b085      	sub	sp, #20
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d006      	beq.n	8007d90 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007d8c:	60fb      	str	r3, [r7, #12]
 8007d8e:	e001      	b.n	8007d94 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007d90:	2300      	movs	r3, #0
 8007d92:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007d94:	68fb      	ldr	r3, [r7, #12]
	}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3714      	adds	r7, #20
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr

08007da2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007da2:	b580      	push	{r7, lr}
 8007da4:	b086      	sub	sp, #24
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	60f8      	str	r0, [r7, #12]
 8007daa:	60b9      	str	r1, [r7, #8]
 8007dac:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007dae:	2300      	movs	r3, #0
 8007db0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007db6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d10d      	bne.n	8007ddc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d14d      	bne.n	8007e64 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	689b      	ldr	r3, [r3, #8]
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f001 f937 	bl	8009040 <xTaskPriorityDisinherit>
 8007dd2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	609a      	str	r2, [r3, #8]
 8007dda:	e043      	b.n	8007e64 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d119      	bne.n	8007e16 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	6858      	ldr	r0, [r3, #4]
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dea:	461a      	mov	r2, r3
 8007dec:	68b9      	ldr	r1, [r7, #8]
 8007dee:	f012 fe2a 	bl	801aa46 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	685a      	ldr	r2, [r3, #4]
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dfa:	441a      	add	r2, r3
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	685a      	ldr	r2, [r3, #4]
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	d32b      	bcc.n	8007e64 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681a      	ldr	r2, [r3, #0]
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	605a      	str	r2, [r3, #4]
 8007e14:	e026      	b.n	8007e64 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	68d8      	ldr	r0, [r3, #12]
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e1e:	461a      	mov	r2, r3
 8007e20:	68b9      	ldr	r1, [r7, #8]
 8007e22:	f012 fe10 	bl	801aa46 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	68da      	ldr	r2, [r3, #12]
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e2e:	425b      	negs	r3, r3
 8007e30:	441a      	add	r2, r3
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	68da      	ldr	r2, [r3, #12]
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	d207      	bcs.n	8007e52 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	689a      	ldr	r2, [r3, #8]
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e4a:	425b      	negs	r3, r3
 8007e4c:	441a      	add	r2, r3
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2b02      	cmp	r3, #2
 8007e56:	d105      	bne.n	8007e64 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d002      	beq.n	8007e64 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	3b01      	subs	r3, #1
 8007e62:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	1c5a      	adds	r2, r3, #1
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007e6c:	697b      	ldr	r3, [r7, #20]
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3718      	adds	r7, #24
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}

08007e76 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007e76:	b580      	push	{r7, lr}
 8007e78:	b082      	sub	sp, #8
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	6078      	str	r0, [r7, #4]
 8007e7e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d018      	beq.n	8007eba <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	68da      	ldr	r2, [r3, #12]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e90:	441a      	add	r2, r3
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	68da      	ldr	r2, [r3, #12]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	689b      	ldr	r3, [r3, #8]
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	d303      	bcc.n	8007eaa <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681a      	ldr	r2, [r3, #0]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	68d9      	ldr	r1, [r3, #12]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb2:	461a      	mov	r2, r3
 8007eb4:	6838      	ldr	r0, [r7, #0]
 8007eb6:	f012 fdc6 	bl	801aa46 <memcpy>
	}
}
 8007eba:	bf00      	nop
 8007ebc:	3708      	adds	r7, #8
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}

08007ec2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007ec2:	b580      	push	{r7, lr}
 8007ec4:	b084      	sub	sp, #16
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007eca:	f001 feb7 	bl	8009c3c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ed4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007ed6:	e011      	b.n	8007efc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d012      	beq.n	8007f06 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	3324      	adds	r3, #36	; 0x24
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f000 fde5 	bl	8008ab4 <xTaskRemoveFromEventList>
 8007eea:	4603      	mov	r3, r0
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d001      	beq.n	8007ef4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007ef0:	f000 ff28 	bl	8008d44 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007ef4:	7bfb      	ldrb	r3, [r7, #15]
 8007ef6:	3b01      	subs	r3, #1
 8007ef8:	b2db      	uxtb	r3, r3
 8007efa:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007efc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	dce9      	bgt.n	8007ed8 <prvUnlockQueue+0x16>
 8007f04:	e000      	b.n	8007f08 <prvUnlockQueue+0x46>
					break;
 8007f06:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	22ff      	movs	r2, #255	; 0xff
 8007f0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007f10:	f001 fec8 	bl	8009ca4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007f14:	f001 fe92 	bl	8009c3c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f1e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007f20:	e011      	b.n	8007f46 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	691b      	ldr	r3, [r3, #16]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d012      	beq.n	8007f50 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	3310      	adds	r3, #16
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f000 fdc0 	bl	8008ab4 <xTaskRemoveFromEventList>
 8007f34:	4603      	mov	r3, r0
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d001      	beq.n	8007f3e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007f3a:	f000 ff03 	bl	8008d44 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007f3e:	7bbb      	ldrb	r3, [r7, #14]
 8007f40:	3b01      	subs	r3, #1
 8007f42:	b2db      	uxtb	r3, r3
 8007f44:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007f46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	dce9      	bgt.n	8007f22 <prvUnlockQueue+0x60>
 8007f4e:	e000      	b.n	8007f52 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007f50:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	22ff      	movs	r2, #255	; 0xff
 8007f56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007f5a:	f001 fea3 	bl	8009ca4 <vPortExitCritical>
}
 8007f5e:	bf00      	nop
 8007f60:	3710      	adds	r7, #16
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}

08007f66 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007f66:	b580      	push	{r7, lr}
 8007f68:	b084      	sub	sp, #16
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007f6e:	f001 fe65 	bl	8009c3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d102      	bne.n	8007f80 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	60fb      	str	r3, [r7, #12]
 8007f7e:	e001      	b.n	8007f84 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007f80:	2300      	movs	r3, #0
 8007f82:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007f84:	f001 fe8e 	bl	8009ca4 <vPortExitCritical>

	return xReturn;
 8007f88:	68fb      	ldr	r3, [r7, #12]
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3710      	adds	r7, #16
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}

08007f92 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007f92:	b580      	push	{r7, lr}
 8007f94:	b084      	sub	sp, #16
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007f9a:	f001 fe4f 	bl	8009c3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	d102      	bne.n	8007fb0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007faa:	2301      	movs	r3, #1
 8007fac:	60fb      	str	r3, [r7, #12]
 8007fae:	e001      	b.n	8007fb4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007fb4:	f001 fe76 	bl	8009ca4 <vPortExitCritical>

	return xReturn;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3710      	adds	r7, #16
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
	...

08007fc4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b085      	sub	sp, #20
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007fce:	2300      	movs	r3, #0
 8007fd0:	60fb      	str	r3, [r7, #12]
 8007fd2:	e014      	b.n	8007ffe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007fd4:	4a0f      	ldr	r2, [pc, #60]	; (8008014 <vQueueAddToRegistry+0x50>)
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d10b      	bne.n	8007ff8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007fe0:	490c      	ldr	r1, [pc, #48]	; (8008014 <vQueueAddToRegistry+0x50>)
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	683a      	ldr	r2, [r7, #0]
 8007fe6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007fea:	4a0a      	ldr	r2, [pc, #40]	; (8008014 <vQueueAddToRegistry+0x50>)
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	00db      	lsls	r3, r3, #3
 8007ff0:	4413      	add	r3, r2
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007ff6:	e006      	b.n	8008006 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	3301      	adds	r3, #1
 8007ffc:	60fb      	str	r3, [r7, #12]
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	2b07      	cmp	r3, #7
 8008002:	d9e7      	bls.n	8007fd4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008004:	bf00      	nop
 8008006:	bf00      	nop
 8008008:	3714      	adds	r7, #20
 800800a:	46bd      	mov	sp, r7
 800800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008010:	4770      	bx	lr
 8008012:	bf00      	nop
 8008014:	200081f4 	.word	0x200081f4

08008018 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008018:	b480      	push	{r7}
 800801a:	b085      	sub	sp, #20
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008020:	2300      	movs	r3, #0
 8008022:	60fb      	str	r3, [r7, #12]
 8008024:	e016      	b.n	8008054 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008026:	4a10      	ldr	r2, [pc, #64]	; (8008068 <vQueueUnregisterQueue+0x50>)
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	00db      	lsls	r3, r3, #3
 800802c:	4413      	add	r3, r2
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	687a      	ldr	r2, [r7, #4]
 8008032:	429a      	cmp	r2, r3
 8008034:	d10b      	bne.n	800804e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008036:	4a0c      	ldr	r2, [pc, #48]	; (8008068 <vQueueUnregisterQueue+0x50>)
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2100      	movs	r1, #0
 800803c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008040:	4a09      	ldr	r2, [pc, #36]	; (8008068 <vQueueUnregisterQueue+0x50>)
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	00db      	lsls	r3, r3, #3
 8008046:	4413      	add	r3, r2
 8008048:	2200      	movs	r2, #0
 800804a:	605a      	str	r2, [r3, #4]
				break;
 800804c:	e006      	b.n	800805c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	3301      	adds	r3, #1
 8008052:	60fb      	str	r3, [r7, #12]
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	2b07      	cmp	r3, #7
 8008058:	d9e5      	bls.n	8008026 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800805a:	bf00      	nop
 800805c:	bf00      	nop
 800805e:	3714      	adds	r7, #20
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr
 8008068:	200081f4 	.word	0x200081f4

0800806c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800806c:	b580      	push	{r7, lr}
 800806e:	b086      	sub	sp, #24
 8008070:	af00      	add	r7, sp, #0
 8008072:	60f8      	str	r0, [r7, #12]
 8008074:	60b9      	str	r1, [r7, #8]
 8008076:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800807c:	f001 fdde 	bl	8009c3c <vPortEnterCritical>
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008086:	b25b      	sxtb	r3, r3
 8008088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800808c:	d103      	bne.n	8008096 <vQueueWaitForMessageRestricted+0x2a>
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	2200      	movs	r2, #0
 8008092:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800809c:	b25b      	sxtb	r3, r3
 800809e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080a2:	d103      	bne.n	80080ac <vQueueWaitForMessageRestricted+0x40>
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	2200      	movs	r2, #0
 80080a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80080ac:	f001 fdfa 	bl	8009ca4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d106      	bne.n	80080c6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80080b8:	697b      	ldr	r3, [r7, #20]
 80080ba:	3324      	adds	r3, #36	; 0x24
 80080bc:	687a      	ldr	r2, [r7, #4]
 80080be:	68b9      	ldr	r1, [r7, #8]
 80080c0:	4618      	mov	r0, r3
 80080c2:	f000 fcc9 	bl	8008a58 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80080c6:	6978      	ldr	r0, [r7, #20]
 80080c8:	f7ff fefb 	bl	8007ec2 <prvUnlockQueue>
	}
 80080cc:	bf00      	nop
 80080ce:	3718      	adds	r7, #24
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}

080080d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b08e      	sub	sp, #56	; 0x38
 80080d8:	af04      	add	r7, sp, #16
 80080da:	60f8      	str	r0, [r7, #12]
 80080dc:	60b9      	str	r1, [r7, #8]
 80080de:	607a      	str	r2, [r7, #4]
 80080e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80080e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d10c      	bne.n	8008102 <xTaskCreateStatic+0x2e>
	__asm volatile
 80080e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ec:	b672      	cpsid	i
 80080ee:	f383 8811 	msr	BASEPRI, r3
 80080f2:	f3bf 8f6f 	isb	sy
 80080f6:	f3bf 8f4f 	dsb	sy
 80080fa:	b662      	cpsie	i
 80080fc:	623b      	str	r3, [r7, #32]
}
 80080fe:	bf00      	nop
 8008100:	e7fe      	b.n	8008100 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8008102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008104:	2b00      	cmp	r3, #0
 8008106:	d10c      	bne.n	8008122 <xTaskCreateStatic+0x4e>
	__asm volatile
 8008108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800810c:	b672      	cpsid	i
 800810e:	f383 8811 	msr	BASEPRI, r3
 8008112:	f3bf 8f6f 	isb	sy
 8008116:	f3bf 8f4f 	dsb	sy
 800811a:	b662      	cpsie	i
 800811c:	61fb      	str	r3, [r7, #28]
}
 800811e:	bf00      	nop
 8008120:	e7fe      	b.n	8008120 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008122:	23bc      	movs	r3, #188	; 0xbc
 8008124:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	2bbc      	cmp	r3, #188	; 0xbc
 800812a:	d00c      	beq.n	8008146 <xTaskCreateStatic+0x72>
	__asm volatile
 800812c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008130:	b672      	cpsid	i
 8008132:	f383 8811 	msr	BASEPRI, r3
 8008136:	f3bf 8f6f 	isb	sy
 800813a:	f3bf 8f4f 	dsb	sy
 800813e:	b662      	cpsie	i
 8008140:	61bb      	str	r3, [r7, #24]
}
 8008142:	bf00      	nop
 8008144:	e7fe      	b.n	8008144 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008146:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800814a:	2b00      	cmp	r3, #0
 800814c:	d01e      	beq.n	800818c <xTaskCreateStatic+0xb8>
 800814e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008150:	2b00      	cmp	r3, #0
 8008152:	d01b      	beq.n	800818c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008156:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800815a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800815c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800815e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008160:	2202      	movs	r2, #2
 8008162:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008166:	2300      	movs	r3, #0
 8008168:	9303      	str	r3, [sp, #12]
 800816a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800816c:	9302      	str	r3, [sp, #8]
 800816e:	f107 0314 	add.w	r3, r7, #20
 8008172:	9301      	str	r3, [sp, #4]
 8008174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008176:	9300      	str	r3, [sp, #0]
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	68b9      	ldr	r1, [r7, #8]
 800817e:	68f8      	ldr	r0, [r7, #12]
 8008180:	f000 f850 	bl	8008224 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008184:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008186:	f000 f8f5 	bl	8008374 <prvAddNewTaskToReadyList>
 800818a:	e001      	b.n	8008190 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800818c:	2300      	movs	r3, #0
 800818e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008190:	697b      	ldr	r3, [r7, #20]
	}
 8008192:	4618      	mov	r0, r3
 8008194:	3728      	adds	r7, #40	; 0x28
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}

0800819a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800819a:	b580      	push	{r7, lr}
 800819c:	b08c      	sub	sp, #48	; 0x30
 800819e:	af04      	add	r7, sp, #16
 80081a0:	60f8      	str	r0, [r7, #12]
 80081a2:	60b9      	str	r1, [r7, #8]
 80081a4:	603b      	str	r3, [r7, #0]
 80081a6:	4613      	mov	r3, r2
 80081a8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80081aa:	88fb      	ldrh	r3, [r7, #6]
 80081ac:	009b      	lsls	r3, r3, #2
 80081ae:	4618      	mov	r0, r3
 80081b0:	f001 fe70 	bl	8009e94 <pvPortMalloc>
 80081b4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d00e      	beq.n	80081da <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80081bc:	20bc      	movs	r0, #188	; 0xbc
 80081be:	f001 fe69 	bl	8009e94 <pvPortMalloc>
 80081c2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80081c4:	69fb      	ldr	r3, [r7, #28]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d003      	beq.n	80081d2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80081ca:	69fb      	ldr	r3, [r7, #28]
 80081cc:	697a      	ldr	r2, [r7, #20]
 80081ce:	631a      	str	r2, [r3, #48]	; 0x30
 80081d0:	e005      	b.n	80081de <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80081d2:	6978      	ldr	r0, [r7, #20]
 80081d4:	f001 ff28 	bl	800a028 <vPortFree>
 80081d8:	e001      	b.n	80081de <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80081da:	2300      	movs	r3, #0
 80081dc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80081de:	69fb      	ldr	r3, [r7, #28]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d017      	beq.n	8008214 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80081e4:	69fb      	ldr	r3, [r7, #28]
 80081e6:	2200      	movs	r2, #0
 80081e8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80081ec:	88fa      	ldrh	r2, [r7, #6]
 80081ee:	2300      	movs	r3, #0
 80081f0:	9303      	str	r3, [sp, #12]
 80081f2:	69fb      	ldr	r3, [r7, #28]
 80081f4:	9302      	str	r3, [sp, #8]
 80081f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081f8:	9301      	str	r3, [sp, #4]
 80081fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081fc:	9300      	str	r3, [sp, #0]
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	68b9      	ldr	r1, [r7, #8]
 8008202:	68f8      	ldr	r0, [r7, #12]
 8008204:	f000 f80e 	bl	8008224 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008208:	69f8      	ldr	r0, [r7, #28]
 800820a:	f000 f8b3 	bl	8008374 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800820e:	2301      	movs	r3, #1
 8008210:	61bb      	str	r3, [r7, #24]
 8008212:	e002      	b.n	800821a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008214:	f04f 33ff 	mov.w	r3, #4294967295
 8008218:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800821a:	69bb      	ldr	r3, [r7, #24]
	}
 800821c:	4618      	mov	r0, r3
 800821e:	3720      	adds	r7, #32
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}

08008224 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b088      	sub	sp, #32
 8008228:	af00      	add	r7, sp, #0
 800822a:	60f8      	str	r0, [r7, #12]
 800822c:	60b9      	str	r1, [r7, #8]
 800822e:	607a      	str	r2, [r7, #4]
 8008230:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008234:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	009b      	lsls	r3, r3, #2
 800823a:	461a      	mov	r2, r3
 800823c:	21a5      	movs	r1, #165	; 0xa5
 800823e:	f012 fc10 	bl	801aa62 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008244:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008246:	6879      	ldr	r1, [r7, #4]
 8008248:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800824c:	440b      	add	r3, r1
 800824e:	009b      	lsls	r3, r3, #2
 8008250:	4413      	add	r3, r2
 8008252:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008254:	69bb      	ldr	r3, [r7, #24]
 8008256:	f023 0307 	bic.w	r3, r3, #7
 800825a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800825c:	69bb      	ldr	r3, [r7, #24]
 800825e:	f003 0307 	and.w	r3, r3, #7
 8008262:	2b00      	cmp	r3, #0
 8008264:	d00c      	beq.n	8008280 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8008266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800826a:	b672      	cpsid	i
 800826c:	f383 8811 	msr	BASEPRI, r3
 8008270:	f3bf 8f6f 	isb	sy
 8008274:	f3bf 8f4f 	dsb	sy
 8008278:	b662      	cpsie	i
 800827a:	617b      	str	r3, [r7, #20]
}
 800827c:	bf00      	nop
 800827e:	e7fe      	b.n	800827e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d01f      	beq.n	80082c6 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008286:	2300      	movs	r3, #0
 8008288:	61fb      	str	r3, [r7, #28]
 800828a:	e012      	b.n	80082b2 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800828c:	68ba      	ldr	r2, [r7, #8]
 800828e:	69fb      	ldr	r3, [r7, #28]
 8008290:	4413      	add	r3, r2
 8008292:	7819      	ldrb	r1, [r3, #0]
 8008294:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008296:	69fb      	ldr	r3, [r7, #28]
 8008298:	4413      	add	r3, r2
 800829a:	3334      	adds	r3, #52	; 0x34
 800829c:	460a      	mov	r2, r1
 800829e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80082a0:	68ba      	ldr	r2, [r7, #8]
 80082a2:	69fb      	ldr	r3, [r7, #28]
 80082a4:	4413      	add	r3, r2
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d006      	beq.n	80082ba <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80082ac:	69fb      	ldr	r3, [r7, #28]
 80082ae:	3301      	adds	r3, #1
 80082b0:	61fb      	str	r3, [r7, #28]
 80082b2:	69fb      	ldr	r3, [r7, #28]
 80082b4:	2b0f      	cmp	r3, #15
 80082b6:	d9e9      	bls.n	800828c <prvInitialiseNewTask+0x68>
 80082b8:	e000      	b.n	80082bc <prvInitialiseNewTask+0x98>
			{
				break;
 80082ba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80082bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082be:	2200      	movs	r2, #0
 80082c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80082c4:	e003      	b.n	80082ce <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80082c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c8:	2200      	movs	r2, #0
 80082ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80082ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d0:	2b37      	cmp	r3, #55	; 0x37
 80082d2:	d901      	bls.n	80082d8 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80082d4:	2337      	movs	r3, #55	; 0x37
 80082d6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80082d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082dc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80082de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082e2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80082e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e6:	2200      	movs	r2, #0
 80082e8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80082ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ec:	3304      	adds	r3, #4
 80082ee:	4618      	mov	r0, r3
 80082f0:	f7fe fd0c 	bl	8006d0c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80082f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f6:	3318      	adds	r3, #24
 80082f8:	4618      	mov	r0, r3
 80082fa:	f7fe fd07 	bl	8006d0c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80082fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008300:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008302:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008306:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800830a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800830c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800830e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008310:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008312:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008316:	2200      	movs	r2, #0
 8008318:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800831c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800831e:	2200      	movs	r2, #0
 8008320:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008326:	3354      	adds	r3, #84	; 0x54
 8008328:	2260      	movs	r2, #96	; 0x60
 800832a:	2100      	movs	r1, #0
 800832c:	4618      	mov	r0, r3
 800832e:	f012 fb98 	bl	801aa62 <memset>
 8008332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008334:	4a0c      	ldr	r2, [pc, #48]	; (8008368 <prvInitialiseNewTask+0x144>)
 8008336:	659a      	str	r2, [r3, #88]	; 0x58
 8008338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800833a:	4a0c      	ldr	r2, [pc, #48]	; (800836c <prvInitialiseNewTask+0x148>)
 800833c:	65da      	str	r2, [r3, #92]	; 0x5c
 800833e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008340:	4a0b      	ldr	r2, [pc, #44]	; (8008370 <prvInitialiseNewTask+0x14c>)
 8008342:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008344:	683a      	ldr	r2, [r7, #0]
 8008346:	68f9      	ldr	r1, [r7, #12]
 8008348:	69b8      	ldr	r0, [r7, #24]
 800834a:	f001 fb6d 	bl	8009a28 <pxPortInitialiseStack>
 800834e:	4602      	mov	r2, r0
 8008350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008352:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008356:	2b00      	cmp	r3, #0
 8008358:	d002      	beq.n	8008360 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800835a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800835c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800835e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008360:	bf00      	nop
 8008362:	3720      	adds	r7, #32
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}
 8008368:	0801f424 	.word	0x0801f424
 800836c:	0801f444 	.word	0x0801f444
 8008370:	0801f404 	.word	0x0801f404

08008374 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b082      	sub	sp, #8
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800837c:	f001 fc5e 	bl	8009c3c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008380:	4b2d      	ldr	r3, [pc, #180]	; (8008438 <prvAddNewTaskToReadyList+0xc4>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	3301      	adds	r3, #1
 8008386:	4a2c      	ldr	r2, [pc, #176]	; (8008438 <prvAddNewTaskToReadyList+0xc4>)
 8008388:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800838a:	4b2c      	ldr	r3, [pc, #176]	; (800843c <prvAddNewTaskToReadyList+0xc8>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d109      	bne.n	80083a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008392:	4a2a      	ldr	r2, [pc, #168]	; (800843c <prvAddNewTaskToReadyList+0xc8>)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008398:	4b27      	ldr	r3, [pc, #156]	; (8008438 <prvAddNewTaskToReadyList+0xc4>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	2b01      	cmp	r3, #1
 800839e:	d110      	bne.n	80083c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80083a0:	f000 fcf4 	bl	8008d8c <prvInitialiseTaskLists>
 80083a4:	e00d      	b.n	80083c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80083a6:	4b26      	ldr	r3, [pc, #152]	; (8008440 <prvAddNewTaskToReadyList+0xcc>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d109      	bne.n	80083c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80083ae:	4b23      	ldr	r3, [pc, #140]	; (800843c <prvAddNewTaskToReadyList+0xc8>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083b8:	429a      	cmp	r2, r3
 80083ba:	d802      	bhi.n	80083c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80083bc:	4a1f      	ldr	r2, [pc, #124]	; (800843c <prvAddNewTaskToReadyList+0xc8>)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80083c2:	4b20      	ldr	r3, [pc, #128]	; (8008444 <prvAddNewTaskToReadyList+0xd0>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	3301      	adds	r3, #1
 80083c8:	4a1e      	ldr	r2, [pc, #120]	; (8008444 <prvAddNewTaskToReadyList+0xd0>)
 80083ca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80083cc:	4b1d      	ldr	r3, [pc, #116]	; (8008444 <prvAddNewTaskToReadyList+0xd0>)
 80083ce:	681a      	ldr	r2, [r3, #0]
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083d8:	4b1b      	ldr	r3, [pc, #108]	; (8008448 <prvAddNewTaskToReadyList+0xd4>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	429a      	cmp	r2, r3
 80083de:	d903      	bls.n	80083e8 <prvAddNewTaskToReadyList+0x74>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083e4:	4a18      	ldr	r2, [pc, #96]	; (8008448 <prvAddNewTaskToReadyList+0xd4>)
 80083e6:	6013      	str	r3, [r2, #0]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083ec:	4613      	mov	r3, r2
 80083ee:	009b      	lsls	r3, r3, #2
 80083f0:	4413      	add	r3, r2
 80083f2:	009b      	lsls	r3, r3, #2
 80083f4:	4a15      	ldr	r2, [pc, #84]	; (800844c <prvAddNewTaskToReadyList+0xd8>)
 80083f6:	441a      	add	r2, r3
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	3304      	adds	r3, #4
 80083fc:	4619      	mov	r1, r3
 80083fe:	4610      	mov	r0, r2
 8008400:	f7fe fc91 	bl	8006d26 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008404:	f001 fc4e 	bl	8009ca4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008408:	4b0d      	ldr	r3, [pc, #52]	; (8008440 <prvAddNewTaskToReadyList+0xcc>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d00e      	beq.n	800842e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008410:	4b0a      	ldr	r3, [pc, #40]	; (800843c <prvAddNewTaskToReadyList+0xc8>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800841a:	429a      	cmp	r2, r3
 800841c:	d207      	bcs.n	800842e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800841e:	4b0c      	ldr	r3, [pc, #48]	; (8008450 <prvAddNewTaskToReadyList+0xdc>)
 8008420:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008424:	601a      	str	r2, [r3, #0]
 8008426:	f3bf 8f4f 	dsb	sy
 800842a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800842e:	bf00      	nop
 8008430:	3708      	adds	r7, #8
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}
 8008436:	bf00      	nop
 8008438:	20000df8 	.word	0x20000df8
 800843c:	20000924 	.word	0x20000924
 8008440:	20000e04 	.word	0x20000e04
 8008444:	20000e14 	.word	0x20000e14
 8008448:	20000e00 	.word	0x20000e00
 800844c:	20000928 	.word	0x20000928
 8008450:	e000ed04 	.word	0xe000ed04

08008454 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008454:	b580      	push	{r7, lr}
 8008456:	b084      	sub	sp, #16
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800845c:	2300      	movs	r3, #0
 800845e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d019      	beq.n	800849a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008466:	4b14      	ldr	r3, [pc, #80]	; (80084b8 <vTaskDelay+0x64>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d00c      	beq.n	8008488 <vTaskDelay+0x34>
	__asm volatile
 800846e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008472:	b672      	cpsid	i
 8008474:	f383 8811 	msr	BASEPRI, r3
 8008478:	f3bf 8f6f 	isb	sy
 800847c:	f3bf 8f4f 	dsb	sy
 8008480:	b662      	cpsie	i
 8008482:	60bb      	str	r3, [r7, #8]
}
 8008484:	bf00      	nop
 8008486:	e7fe      	b.n	8008486 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8008488:	f000 f88e 	bl	80085a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800848c:	2100      	movs	r1, #0
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 fefa 	bl	8009288 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008494:	f000 f896 	bl	80085c4 <xTaskResumeAll>
 8008498:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d107      	bne.n	80084b0 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80084a0:	4b06      	ldr	r3, [pc, #24]	; (80084bc <vTaskDelay+0x68>)
 80084a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084a6:	601a      	str	r2, [r3, #0]
 80084a8:	f3bf 8f4f 	dsb	sy
 80084ac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80084b0:	bf00      	nop
 80084b2:	3710      	adds	r7, #16
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}
 80084b8:	20000e20 	.word	0x20000e20
 80084bc:	e000ed04 	.word	0xe000ed04

080084c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b08a      	sub	sp, #40	; 0x28
 80084c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80084c6:	2300      	movs	r3, #0
 80084c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80084ca:	2300      	movs	r3, #0
 80084cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80084ce:	463a      	mov	r2, r7
 80084d0:	1d39      	adds	r1, r7, #4
 80084d2:	f107 0308 	add.w	r3, r7, #8
 80084d6:	4618      	mov	r0, r3
 80084d8:	f7fe fa02 	bl	80068e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80084dc:	6839      	ldr	r1, [r7, #0]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	68ba      	ldr	r2, [r7, #8]
 80084e2:	9202      	str	r2, [sp, #8]
 80084e4:	9301      	str	r3, [sp, #4]
 80084e6:	2300      	movs	r3, #0
 80084e8:	9300      	str	r3, [sp, #0]
 80084ea:	2300      	movs	r3, #0
 80084ec:	460a      	mov	r2, r1
 80084ee:	4926      	ldr	r1, [pc, #152]	; (8008588 <vTaskStartScheduler+0xc8>)
 80084f0:	4826      	ldr	r0, [pc, #152]	; (800858c <vTaskStartScheduler+0xcc>)
 80084f2:	f7ff fdef 	bl	80080d4 <xTaskCreateStatic>
 80084f6:	4603      	mov	r3, r0
 80084f8:	4a25      	ldr	r2, [pc, #148]	; (8008590 <vTaskStartScheduler+0xd0>)
 80084fa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80084fc:	4b24      	ldr	r3, [pc, #144]	; (8008590 <vTaskStartScheduler+0xd0>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d002      	beq.n	800850a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008504:	2301      	movs	r3, #1
 8008506:	617b      	str	r3, [r7, #20]
 8008508:	e001      	b.n	800850e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800850a:	2300      	movs	r3, #0
 800850c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	2b01      	cmp	r3, #1
 8008512:	d102      	bne.n	800851a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008514:	f000 ff0c 	bl	8009330 <xTimerCreateTimerTask>
 8008518:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	2b01      	cmp	r3, #1
 800851e:	d11d      	bne.n	800855c <vTaskStartScheduler+0x9c>
	__asm volatile
 8008520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008524:	b672      	cpsid	i
 8008526:	f383 8811 	msr	BASEPRI, r3
 800852a:	f3bf 8f6f 	isb	sy
 800852e:	f3bf 8f4f 	dsb	sy
 8008532:	b662      	cpsie	i
 8008534:	613b      	str	r3, [r7, #16]
}
 8008536:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008538:	4b16      	ldr	r3, [pc, #88]	; (8008594 <vTaskStartScheduler+0xd4>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	3354      	adds	r3, #84	; 0x54
 800853e:	4a16      	ldr	r2, [pc, #88]	; (8008598 <vTaskStartScheduler+0xd8>)
 8008540:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008542:	4b16      	ldr	r3, [pc, #88]	; (800859c <vTaskStartScheduler+0xdc>)
 8008544:	f04f 32ff 	mov.w	r2, #4294967295
 8008548:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800854a:	4b15      	ldr	r3, [pc, #84]	; (80085a0 <vTaskStartScheduler+0xe0>)
 800854c:	2201      	movs	r2, #1
 800854e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008550:	4b14      	ldr	r3, [pc, #80]	; (80085a4 <vTaskStartScheduler+0xe4>)
 8008552:	2200      	movs	r2, #0
 8008554:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008556:	f001 faf3 	bl	8009b40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800855a:	e010      	b.n	800857e <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008562:	d10c      	bne.n	800857e <vTaskStartScheduler+0xbe>
	__asm volatile
 8008564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008568:	b672      	cpsid	i
 800856a:	f383 8811 	msr	BASEPRI, r3
 800856e:	f3bf 8f6f 	isb	sy
 8008572:	f3bf 8f4f 	dsb	sy
 8008576:	b662      	cpsie	i
 8008578:	60fb      	str	r3, [r7, #12]
}
 800857a:	bf00      	nop
 800857c:	e7fe      	b.n	800857c <vTaskStartScheduler+0xbc>
}
 800857e:	bf00      	nop
 8008580:	3718      	adds	r7, #24
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	0801b9b4 	.word	0x0801b9b4
 800858c:	08008d5d 	.word	0x08008d5d
 8008590:	20000e1c 	.word	0x20000e1c
 8008594:	20000924 	.word	0x20000924
 8008598:	2000011c 	.word	0x2000011c
 800859c:	20000e18 	.word	0x20000e18
 80085a0:	20000e04 	.word	0x20000e04
 80085a4:	20000dfc 	.word	0x20000dfc

080085a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80085a8:	b480      	push	{r7}
 80085aa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80085ac:	4b04      	ldr	r3, [pc, #16]	; (80085c0 <vTaskSuspendAll+0x18>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	3301      	adds	r3, #1
 80085b2:	4a03      	ldr	r2, [pc, #12]	; (80085c0 <vTaskSuspendAll+0x18>)
 80085b4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80085b6:	bf00      	nop
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr
 80085c0:	20000e20 	.word	0x20000e20

080085c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b084      	sub	sp, #16
 80085c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80085ca:	2300      	movs	r3, #0
 80085cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80085ce:	2300      	movs	r3, #0
 80085d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80085d2:	4b43      	ldr	r3, [pc, #268]	; (80086e0 <xTaskResumeAll+0x11c>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d10c      	bne.n	80085f4 <xTaskResumeAll+0x30>
	__asm volatile
 80085da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085de:	b672      	cpsid	i
 80085e0:	f383 8811 	msr	BASEPRI, r3
 80085e4:	f3bf 8f6f 	isb	sy
 80085e8:	f3bf 8f4f 	dsb	sy
 80085ec:	b662      	cpsie	i
 80085ee:	603b      	str	r3, [r7, #0]
}
 80085f0:	bf00      	nop
 80085f2:	e7fe      	b.n	80085f2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80085f4:	f001 fb22 	bl	8009c3c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80085f8:	4b39      	ldr	r3, [pc, #228]	; (80086e0 <xTaskResumeAll+0x11c>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	3b01      	subs	r3, #1
 80085fe:	4a38      	ldr	r2, [pc, #224]	; (80086e0 <xTaskResumeAll+0x11c>)
 8008600:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008602:	4b37      	ldr	r3, [pc, #220]	; (80086e0 <xTaskResumeAll+0x11c>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d162      	bne.n	80086d0 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800860a:	4b36      	ldr	r3, [pc, #216]	; (80086e4 <xTaskResumeAll+0x120>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d05e      	beq.n	80086d0 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008612:	e02f      	b.n	8008674 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008614:	4b34      	ldr	r3, [pc, #208]	; (80086e8 <xTaskResumeAll+0x124>)
 8008616:	68db      	ldr	r3, [r3, #12]
 8008618:	68db      	ldr	r3, [r3, #12]
 800861a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	3318      	adds	r3, #24
 8008620:	4618      	mov	r0, r3
 8008622:	f7fe fbdd 	bl	8006de0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	3304      	adds	r3, #4
 800862a:	4618      	mov	r0, r3
 800862c:	f7fe fbd8 	bl	8006de0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008634:	4b2d      	ldr	r3, [pc, #180]	; (80086ec <xTaskResumeAll+0x128>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	429a      	cmp	r2, r3
 800863a:	d903      	bls.n	8008644 <xTaskResumeAll+0x80>
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008640:	4a2a      	ldr	r2, [pc, #168]	; (80086ec <xTaskResumeAll+0x128>)
 8008642:	6013      	str	r3, [r2, #0]
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008648:	4613      	mov	r3, r2
 800864a:	009b      	lsls	r3, r3, #2
 800864c:	4413      	add	r3, r2
 800864e:	009b      	lsls	r3, r3, #2
 8008650:	4a27      	ldr	r2, [pc, #156]	; (80086f0 <xTaskResumeAll+0x12c>)
 8008652:	441a      	add	r2, r3
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	3304      	adds	r3, #4
 8008658:	4619      	mov	r1, r3
 800865a:	4610      	mov	r0, r2
 800865c:	f7fe fb63 	bl	8006d26 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008664:	4b23      	ldr	r3, [pc, #140]	; (80086f4 <xTaskResumeAll+0x130>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800866a:	429a      	cmp	r2, r3
 800866c:	d302      	bcc.n	8008674 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800866e:	4b22      	ldr	r3, [pc, #136]	; (80086f8 <xTaskResumeAll+0x134>)
 8008670:	2201      	movs	r2, #1
 8008672:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008674:	4b1c      	ldr	r3, [pc, #112]	; (80086e8 <xTaskResumeAll+0x124>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d1cb      	bne.n	8008614 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d001      	beq.n	8008686 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008682:	f000 fc27 	bl	8008ed4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008686:	4b1d      	ldr	r3, [pc, #116]	; (80086fc <xTaskResumeAll+0x138>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d010      	beq.n	80086b4 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008692:	f000 f859 	bl	8008748 <xTaskIncrementTick>
 8008696:	4603      	mov	r3, r0
 8008698:	2b00      	cmp	r3, #0
 800869a:	d002      	beq.n	80086a2 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800869c:	4b16      	ldr	r3, [pc, #88]	; (80086f8 <xTaskResumeAll+0x134>)
 800869e:	2201      	movs	r2, #1
 80086a0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	3b01      	subs	r3, #1
 80086a6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d1f1      	bne.n	8008692 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80086ae:	4b13      	ldr	r3, [pc, #76]	; (80086fc <xTaskResumeAll+0x138>)
 80086b0:	2200      	movs	r2, #0
 80086b2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80086b4:	4b10      	ldr	r3, [pc, #64]	; (80086f8 <xTaskResumeAll+0x134>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d009      	beq.n	80086d0 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80086bc:	2301      	movs	r3, #1
 80086be:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80086c0:	4b0f      	ldr	r3, [pc, #60]	; (8008700 <xTaskResumeAll+0x13c>)
 80086c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086c6:	601a      	str	r2, [r3, #0]
 80086c8:	f3bf 8f4f 	dsb	sy
 80086cc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80086d0:	f001 fae8 	bl	8009ca4 <vPortExitCritical>

	return xAlreadyYielded;
 80086d4:	68bb      	ldr	r3, [r7, #8]
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3710      	adds	r7, #16
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}
 80086de:	bf00      	nop
 80086e0:	20000e20 	.word	0x20000e20
 80086e4:	20000df8 	.word	0x20000df8
 80086e8:	20000db8 	.word	0x20000db8
 80086ec:	20000e00 	.word	0x20000e00
 80086f0:	20000928 	.word	0x20000928
 80086f4:	20000924 	.word	0x20000924
 80086f8:	20000e0c 	.word	0x20000e0c
 80086fc:	20000e08 	.word	0x20000e08
 8008700:	e000ed04 	.word	0xe000ed04

08008704 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008704:	b480      	push	{r7}
 8008706:	b083      	sub	sp, #12
 8008708:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800870a:	4b05      	ldr	r3, [pc, #20]	; (8008720 <xTaskGetTickCount+0x1c>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008710:	687b      	ldr	r3, [r7, #4]
}
 8008712:	4618      	mov	r0, r3
 8008714:	370c      	adds	r7, #12
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr
 800871e:	bf00      	nop
 8008720:	20000dfc 	.word	0x20000dfc

08008724 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b082      	sub	sp, #8
 8008728:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800872a:	f001 fb6f 	bl	8009e0c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800872e:	2300      	movs	r3, #0
 8008730:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8008732:	4b04      	ldr	r3, [pc, #16]	; (8008744 <xTaskGetTickCountFromISR+0x20>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008738:	683b      	ldr	r3, [r7, #0]
}
 800873a:	4618      	mov	r0, r3
 800873c:	3708      	adds	r7, #8
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}
 8008742:	bf00      	nop
 8008744:	20000dfc 	.word	0x20000dfc

08008748 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b086      	sub	sp, #24
 800874c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800874e:	2300      	movs	r3, #0
 8008750:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008752:	4b50      	ldr	r3, [pc, #320]	; (8008894 <xTaskIncrementTick+0x14c>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	2b00      	cmp	r3, #0
 8008758:	f040 808b 	bne.w	8008872 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800875c:	4b4e      	ldr	r3, [pc, #312]	; (8008898 <xTaskIncrementTick+0x150>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	3301      	adds	r3, #1
 8008762:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008764:	4a4c      	ldr	r2, [pc, #304]	; (8008898 <xTaskIncrementTick+0x150>)
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d122      	bne.n	80087b6 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8008770:	4b4a      	ldr	r3, [pc, #296]	; (800889c <xTaskIncrementTick+0x154>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d00c      	beq.n	8008794 <xTaskIncrementTick+0x4c>
	__asm volatile
 800877a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800877e:	b672      	cpsid	i
 8008780:	f383 8811 	msr	BASEPRI, r3
 8008784:	f3bf 8f6f 	isb	sy
 8008788:	f3bf 8f4f 	dsb	sy
 800878c:	b662      	cpsie	i
 800878e:	603b      	str	r3, [r7, #0]
}
 8008790:	bf00      	nop
 8008792:	e7fe      	b.n	8008792 <xTaskIncrementTick+0x4a>
 8008794:	4b41      	ldr	r3, [pc, #260]	; (800889c <xTaskIncrementTick+0x154>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	60fb      	str	r3, [r7, #12]
 800879a:	4b41      	ldr	r3, [pc, #260]	; (80088a0 <xTaskIncrementTick+0x158>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a3f      	ldr	r2, [pc, #252]	; (800889c <xTaskIncrementTick+0x154>)
 80087a0:	6013      	str	r3, [r2, #0]
 80087a2:	4a3f      	ldr	r2, [pc, #252]	; (80088a0 <xTaskIncrementTick+0x158>)
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	6013      	str	r3, [r2, #0]
 80087a8:	4b3e      	ldr	r3, [pc, #248]	; (80088a4 <xTaskIncrementTick+0x15c>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	3301      	adds	r3, #1
 80087ae:	4a3d      	ldr	r2, [pc, #244]	; (80088a4 <xTaskIncrementTick+0x15c>)
 80087b0:	6013      	str	r3, [r2, #0]
 80087b2:	f000 fb8f 	bl	8008ed4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80087b6:	4b3c      	ldr	r3, [pc, #240]	; (80088a8 <xTaskIncrementTick+0x160>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	693a      	ldr	r2, [r7, #16]
 80087bc:	429a      	cmp	r2, r3
 80087be:	d349      	bcc.n	8008854 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80087c0:	4b36      	ldr	r3, [pc, #216]	; (800889c <xTaskIncrementTick+0x154>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d104      	bne.n	80087d4 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087ca:	4b37      	ldr	r3, [pc, #220]	; (80088a8 <xTaskIncrementTick+0x160>)
 80087cc:	f04f 32ff 	mov.w	r2, #4294967295
 80087d0:	601a      	str	r2, [r3, #0]
					break;
 80087d2:	e03f      	b.n	8008854 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087d4:	4b31      	ldr	r3, [pc, #196]	; (800889c <xTaskIncrementTick+0x154>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	68db      	ldr	r3, [r3, #12]
 80087da:	68db      	ldr	r3, [r3, #12]
 80087dc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	685b      	ldr	r3, [r3, #4]
 80087e2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80087e4:	693a      	ldr	r2, [r7, #16]
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	429a      	cmp	r2, r3
 80087ea:	d203      	bcs.n	80087f4 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80087ec:	4a2e      	ldr	r2, [pc, #184]	; (80088a8 <xTaskIncrementTick+0x160>)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80087f2:	e02f      	b.n	8008854 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	3304      	adds	r3, #4
 80087f8:	4618      	mov	r0, r3
 80087fa:	f7fe faf1 	bl	8006de0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008802:	2b00      	cmp	r3, #0
 8008804:	d004      	beq.n	8008810 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	3318      	adds	r3, #24
 800880a:	4618      	mov	r0, r3
 800880c:	f7fe fae8 	bl	8006de0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008814:	4b25      	ldr	r3, [pc, #148]	; (80088ac <xTaskIncrementTick+0x164>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	429a      	cmp	r2, r3
 800881a:	d903      	bls.n	8008824 <xTaskIncrementTick+0xdc>
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008820:	4a22      	ldr	r2, [pc, #136]	; (80088ac <xTaskIncrementTick+0x164>)
 8008822:	6013      	str	r3, [r2, #0]
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008828:	4613      	mov	r3, r2
 800882a:	009b      	lsls	r3, r3, #2
 800882c:	4413      	add	r3, r2
 800882e:	009b      	lsls	r3, r3, #2
 8008830:	4a1f      	ldr	r2, [pc, #124]	; (80088b0 <xTaskIncrementTick+0x168>)
 8008832:	441a      	add	r2, r3
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	3304      	adds	r3, #4
 8008838:	4619      	mov	r1, r3
 800883a:	4610      	mov	r0, r2
 800883c:	f7fe fa73 	bl	8006d26 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008844:	4b1b      	ldr	r3, [pc, #108]	; (80088b4 <xTaskIncrementTick+0x16c>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800884a:	429a      	cmp	r2, r3
 800884c:	d3b8      	bcc.n	80087c0 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800884e:	2301      	movs	r3, #1
 8008850:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008852:	e7b5      	b.n	80087c0 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008854:	4b17      	ldr	r3, [pc, #92]	; (80088b4 <xTaskIncrementTick+0x16c>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800885a:	4915      	ldr	r1, [pc, #84]	; (80088b0 <xTaskIncrementTick+0x168>)
 800885c:	4613      	mov	r3, r2
 800885e:	009b      	lsls	r3, r3, #2
 8008860:	4413      	add	r3, r2
 8008862:	009b      	lsls	r3, r3, #2
 8008864:	440b      	add	r3, r1
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	2b01      	cmp	r3, #1
 800886a:	d907      	bls.n	800887c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800886c:	2301      	movs	r3, #1
 800886e:	617b      	str	r3, [r7, #20]
 8008870:	e004      	b.n	800887c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008872:	4b11      	ldr	r3, [pc, #68]	; (80088b8 <xTaskIncrementTick+0x170>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	3301      	adds	r3, #1
 8008878:	4a0f      	ldr	r2, [pc, #60]	; (80088b8 <xTaskIncrementTick+0x170>)
 800887a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800887c:	4b0f      	ldr	r3, [pc, #60]	; (80088bc <xTaskIncrementTick+0x174>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d001      	beq.n	8008888 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8008884:	2301      	movs	r3, #1
 8008886:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008888:	697b      	ldr	r3, [r7, #20]
}
 800888a:	4618      	mov	r0, r3
 800888c:	3718      	adds	r7, #24
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}
 8008892:	bf00      	nop
 8008894:	20000e20 	.word	0x20000e20
 8008898:	20000dfc 	.word	0x20000dfc
 800889c:	20000db0 	.word	0x20000db0
 80088a0:	20000db4 	.word	0x20000db4
 80088a4:	20000e10 	.word	0x20000e10
 80088a8:	20000e18 	.word	0x20000e18
 80088ac:	20000e00 	.word	0x20000e00
 80088b0:	20000928 	.word	0x20000928
 80088b4:	20000924 	.word	0x20000924
 80088b8:	20000e08 	.word	0x20000e08
 80088bc:	20000e0c 	.word	0x20000e0c

080088c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80088c0:	b480      	push	{r7}
 80088c2:	b085      	sub	sp, #20
 80088c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80088c6:	4b2b      	ldr	r3, [pc, #172]	; (8008974 <vTaskSwitchContext+0xb4>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d003      	beq.n	80088d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80088ce:	4b2a      	ldr	r3, [pc, #168]	; (8008978 <vTaskSwitchContext+0xb8>)
 80088d0:	2201      	movs	r2, #1
 80088d2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80088d4:	e048      	b.n	8008968 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 80088d6:	4b28      	ldr	r3, [pc, #160]	; (8008978 <vTaskSwitchContext+0xb8>)
 80088d8:	2200      	movs	r2, #0
 80088da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088dc:	4b27      	ldr	r3, [pc, #156]	; (800897c <vTaskSwitchContext+0xbc>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	60fb      	str	r3, [r7, #12]
 80088e2:	e012      	b.n	800890a <vTaskSwitchContext+0x4a>
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d10c      	bne.n	8008904 <vTaskSwitchContext+0x44>
	__asm volatile
 80088ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ee:	b672      	cpsid	i
 80088f0:	f383 8811 	msr	BASEPRI, r3
 80088f4:	f3bf 8f6f 	isb	sy
 80088f8:	f3bf 8f4f 	dsb	sy
 80088fc:	b662      	cpsie	i
 80088fe:	607b      	str	r3, [r7, #4]
}
 8008900:	bf00      	nop
 8008902:	e7fe      	b.n	8008902 <vTaskSwitchContext+0x42>
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	3b01      	subs	r3, #1
 8008908:	60fb      	str	r3, [r7, #12]
 800890a:	491d      	ldr	r1, [pc, #116]	; (8008980 <vTaskSwitchContext+0xc0>)
 800890c:	68fa      	ldr	r2, [r7, #12]
 800890e:	4613      	mov	r3, r2
 8008910:	009b      	lsls	r3, r3, #2
 8008912:	4413      	add	r3, r2
 8008914:	009b      	lsls	r3, r3, #2
 8008916:	440b      	add	r3, r1
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d0e2      	beq.n	80088e4 <vTaskSwitchContext+0x24>
 800891e:	68fa      	ldr	r2, [r7, #12]
 8008920:	4613      	mov	r3, r2
 8008922:	009b      	lsls	r3, r3, #2
 8008924:	4413      	add	r3, r2
 8008926:	009b      	lsls	r3, r3, #2
 8008928:	4a15      	ldr	r2, [pc, #84]	; (8008980 <vTaskSwitchContext+0xc0>)
 800892a:	4413      	add	r3, r2
 800892c:	60bb      	str	r3, [r7, #8]
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	685a      	ldr	r2, [r3, #4]
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	605a      	str	r2, [r3, #4]
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	685a      	ldr	r2, [r3, #4]
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	3308      	adds	r3, #8
 8008940:	429a      	cmp	r2, r3
 8008942:	d104      	bne.n	800894e <vTaskSwitchContext+0x8e>
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	685a      	ldr	r2, [r3, #4]
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	605a      	str	r2, [r3, #4]
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	68db      	ldr	r3, [r3, #12]
 8008954:	4a0b      	ldr	r2, [pc, #44]	; (8008984 <vTaskSwitchContext+0xc4>)
 8008956:	6013      	str	r3, [r2, #0]
 8008958:	4a08      	ldr	r2, [pc, #32]	; (800897c <vTaskSwitchContext+0xbc>)
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800895e:	4b09      	ldr	r3, [pc, #36]	; (8008984 <vTaskSwitchContext+0xc4>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	3354      	adds	r3, #84	; 0x54
 8008964:	4a08      	ldr	r2, [pc, #32]	; (8008988 <vTaskSwitchContext+0xc8>)
 8008966:	6013      	str	r3, [r2, #0]
}
 8008968:	bf00      	nop
 800896a:	3714      	adds	r7, #20
 800896c:	46bd      	mov	sp, r7
 800896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008972:	4770      	bx	lr
 8008974:	20000e20 	.word	0x20000e20
 8008978:	20000e0c 	.word	0x20000e0c
 800897c:	20000e00 	.word	0x20000e00
 8008980:	20000928 	.word	0x20000928
 8008984:	20000924 	.word	0x20000924
 8008988:	2000011c 	.word	0x2000011c

0800898c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b084      	sub	sp, #16
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d10c      	bne.n	80089b6 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800899c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a0:	b672      	cpsid	i
 80089a2:	f383 8811 	msr	BASEPRI, r3
 80089a6:	f3bf 8f6f 	isb	sy
 80089aa:	f3bf 8f4f 	dsb	sy
 80089ae:	b662      	cpsie	i
 80089b0:	60fb      	str	r3, [r7, #12]
}
 80089b2:	bf00      	nop
 80089b4:	e7fe      	b.n	80089b4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80089b6:	4b07      	ldr	r3, [pc, #28]	; (80089d4 <vTaskPlaceOnEventList+0x48>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	3318      	adds	r3, #24
 80089bc:	4619      	mov	r1, r3
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f7fe f9d5 	bl	8006d6e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80089c4:	2101      	movs	r1, #1
 80089c6:	6838      	ldr	r0, [r7, #0]
 80089c8:	f000 fc5e 	bl	8009288 <prvAddCurrentTaskToDelayedList>
}
 80089cc:	bf00      	nop
 80089ce:	3710      	adds	r7, #16
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}
 80089d4:	20000924 	.word	0x20000924

080089d8 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b086      	sub	sp, #24
 80089dc:	af00      	add	r7, sp, #0
 80089de:	60f8      	str	r0, [r7, #12]
 80089e0:	60b9      	str	r1, [r7, #8]
 80089e2:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d10c      	bne.n	8008a04 <vTaskPlaceOnUnorderedEventList+0x2c>
	__asm volatile
 80089ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ee:	b672      	cpsid	i
 80089f0:	f383 8811 	msr	BASEPRI, r3
 80089f4:	f3bf 8f6f 	isb	sy
 80089f8:	f3bf 8f4f 	dsb	sy
 80089fc:	b662      	cpsie	i
 80089fe:	617b      	str	r3, [r7, #20]
}
 8008a00:	bf00      	nop
 8008a02:	e7fe      	b.n	8008a02 <vTaskPlaceOnUnorderedEventList+0x2a>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8008a04:	4b12      	ldr	r3, [pc, #72]	; (8008a50 <vTaskPlaceOnUnorderedEventList+0x78>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d10c      	bne.n	8008a26 <vTaskPlaceOnUnorderedEventList+0x4e>
	__asm volatile
 8008a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a10:	b672      	cpsid	i
 8008a12:	f383 8811 	msr	BASEPRI, r3
 8008a16:	f3bf 8f6f 	isb	sy
 8008a1a:	f3bf 8f4f 	dsb	sy
 8008a1e:	b662      	cpsie	i
 8008a20:	613b      	str	r3, [r7, #16]
}
 8008a22:	bf00      	nop
 8008a24:	e7fe      	b.n	8008a24 <vTaskPlaceOnUnorderedEventList+0x4c>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8008a26:	4b0b      	ldr	r3, [pc, #44]	; (8008a54 <vTaskPlaceOnUnorderedEventList+0x7c>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	68ba      	ldr	r2, [r7, #8]
 8008a2c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8008a30:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008a32:	4b08      	ldr	r3, [pc, #32]	; (8008a54 <vTaskPlaceOnUnorderedEventList+0x7c>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	3318      	adds	r3, #24
 8008a38:	4619      	mov	r1, r3
 8008a3a:	68f8      	ldr	r0, [r7, #12]
 8008a3c:	f7fe f973 	bl	8006d26 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008a40:	2101      	movs	r1, #1
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f000 fc20 	bl	8009288 <prvAddCurrentTaskToDelayedList>
}
 8008a48:	bf00      	nop
 8008a4a:	3718      	adds	r7, #24
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}
 8008a50:	20000e20 	.word	0x20000e20
 8008a54:	20000924 	.word	0x20000924

08008a58 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b086      	sub	sp, #24
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	60f8      	str	r0, [r7, #12]
 8008a60:	60b9      	str	r1, [r7, #8]
 8008a62:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d10c      	bne.n	8008a84 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8008a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a6e:	b672      	cpsid	i
 8008a70:	f383 8811 	msr	BASEPRI, r3
 8008a74:	f3bf 8f6f 	isb	sy
 8008a78:	f3bf 8f4f 	dsb	sy
 8008a7c:	b662      	cpsie	i
 8008a7e:	617b      	str	r3, [r7, #20]
}
 8008a80:	bf00      	nop
 8008a82:	e7fe      	b.n	8008a82 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008a84:	4b0a      	ldr	r3, [pc, #40]	; (8008ab0 <vTaskPlaceOnEventListRestricted+0x58>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	3318      	adds	r3, #24
 8008a8a:	4619      	mov	r1, r3
 8008a8c:	68f8      	ldr	r0, [r7, #12]
 8008a8e:	f7fe f94a 	bl	8006d26 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d002      	beq.n	8008a9e <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8008a98:	f04f 33ff 	mov.w	r3, #4294967295
 8008a9c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008a9e:	6879      	ldr	r1, [r7, #4]
 8008aa0:	68b8      	ldr	r0, [r7, #8]
 8008aa2:	f000 fbf1 	bl	8009288 <prvAddCurrentTaskToDelayedList>
	}
 8008aa6:	bf00      	nop
 8008aa8:	3718      	adds	r7, #24
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}
 8008aae:	bf00      	nop
 8008ab0:	20000924 	.word	0x20000924

08008ab4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b086      	sub	sp, #24
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	68db      	ldr	r3, [r3, #12]
 8008ac0:	68db      	ldr	r3, [r3, #12]
 8008ac2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d10c      	bne.n	8008ae4 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8008aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ace:	b672      	cpsid	i
 8008ad0:	f383 8811 	msr	BASEPRI, r3
 8008ad4:	f3bf 8f6f 	isb	sy
 8008ad8:	f3bf 8f4f 	dsb	sy
 8008adc:	b662      	cpsie	i
 8008ade:	60fb      	str	r3, [r7, #12]
}
 8008ae0:	bf00      	nop
 8008ae2:	e7fe      	b.n	8008ae2 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	3318      	adds	r3, #24
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f7fe f979 	bl	8006de0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008aee:	4b1e      	ldr	r3, [pc, #120]	; (8008b68 <xTaskRemoveFromEventList+0xb4>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d11d      	bne.n	8008b32 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	3304      	adds	r3, #4
 8008afa:	4618      	mov	r0, r3
 8008afc:	f7fe f970 	bl	8006de0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b04:	4b19      	ldr	r3, [pc, #100]	; (8008b6c <xTaskRemoveFromEventList+0xb8>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	d903      	bls.n	8008b14 <xTaskRemoveFromEventList+0x60>
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b10:	4a16      	ldr	r2, [pc, #88]	; (8008b6c <xTaskRemoveFromEventList+0xb8>)
 8008b12:	6013      	str	r3, [r2, #0]
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b18:	4613      	mov	r3, r2
 8008b1a:	009b      	lsls	r3, r3, #2
 8008b1c:	4413      	add	r3, r2
 8008b1e:	009b      	lsls	r3, r3, #2
 8008b20:	4a13      	ldr	r2, [pc, #76]	; (8008b70 <xTaskRemoveFromEventList+0xbc>)
 8008b22:	441a      	add	r2, r3
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	3304      	adds	r3, #4
 8008b28:	4619      	mov	r1, r3
 8008b2a:	4610      	mov	r0, r2
 8008b2c:	f7fe f8fb 	bl	8006d26 <vListInsertEnd>
 8008b30:	e005      	b.n	8008b3e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	3318      	adds	r3, #24
 8008b36:	4619      	mov	r1, r3
 8008b38:	480e      	ldr	r0, [pc, #56]	; (8008b74 <xTaskRemoveFromEventList+0xc0>)
 8008b3a:	f7fe f8f4 	bl	8006d26 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008b3e:	693b      	ldr	r3, [r7, #16]
 8008b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b42:	4b0d      	ldr	r3, [pc, #52]	; (8008b78 <xTaskRemoveFromEventList+0xc4>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	d905      	bls.n	8008b58 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008b50:	4b0a      	ldr	r3, [pc, #40]	; (8008b7c <xTaskRemoveFromEventList+0xc8>)
 8008b52:	2201      	movs	r2, #1
 8008b54:	601a      	str	r2, [r3, #0]
 8008b56:	e001      	b.n	8008b5c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008b5c:	697b      	ldr	r3, [r7, #20]
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3718      	adds	r7, #24
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}
 8008b66:	bf00      	nop
 8008b68:	20000e20 	.word	0x20000e20
 8008b6c:	20000e00 	.word	0x20000e00
 8008b70:	20000928 	.word	0x20000928
 8008b74:	20000db8 	.word	0x20000db8
 8008b78:	20000924 	.word	0x20000924
 8008b7c:	20000e0c 	.word	0x20000e0c

08008b80 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b086      	sub	sp, #24
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8008b8a:	4b2b      	ldr	r3, [pc, #172]	; (8008c38 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d10c      	bne.n	8008bac <vTaskRemoveFromUnorderedEventList+0x2c>
	__asm volatile
 8008b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b96:	b672      	cpsid	i
 8008b98:	f383 8811 	msr	BASEPRI, r3
 8008b9c:	f3bf 8f6f 	isb	sy
 8008ba0:	f3bf 8f4f 	dsb	sy
 8008ba4:	b662      	cpsie	i
 8008ba6:	613b      	str	r3, [r7, #16]
}
 8008ba8:	bf00      	nop
 8008baa:	e7fe      	b.n	8008baa <vTaskRemoveFromUnorderedEventList+0x2a>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	68db      	ldr	r3, [r3, #12]
 8008bba:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d10c      	bne.n	8008bdc <vTaskRemoveFromUnorderedEventList+0x5c>
	__asm volatile
 8008bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc6:	b672      	cpsid	i
 8008bc8:	f383 8811 	msr	BASEPRI, r3
 8008bcc:	f3bf 8f6f 	isb	sy
 8008bd0:	f3bf 8f4f 	dsb	sy
 8008bd4:	b662      	cpsie	i
 8008bd6:	60fb      	str	r3, [r7, #12]
}
 8008bd8:	bf00      	nop
 8008bda:	e7fe      	b.n	8008bda <vTaskRemoveFromUnorderedEventList+0x5a>
	( void ) uxListRemove( pxEventListItem );
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f7fe f8ff 	bl	8006de0 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	3304      	adds	r3, #4
 8008be6:	4618      	mov	r0, r3
 8008be8:	f7fe f8fa 	bl	8006de0 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bf0:	4b12      	ldr	r3, [pc, #72]	; (8008c3c <vTaskRemoveFromUnorderedEventList+0xbc>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d903      	bls.n	8008c00 <vTaskRemoveFromUnorderedEventList+0x80>
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bfc:	4a0f      	ldr	r2, [pc, #60]	; (8008c3c <vTaskRemoveFromUnorderedEventList+0xbc>)
 8008bfe:	6013      	str	r3, [r2, #0]
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c04:	4613      	mov	r3, r2
 8008c06:	009b      	lsls	r3, r3, #2
 8008c08:	4413      	add	r3, r2
 8008c0a:	009b      	lsls	r3, r3, #2
 8008c0c:	4a0c      	ldr	r2, [pc, #48]	; (8008c40 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8008c0e:	441a      	add	r2, r3
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	3304      	adds	r3, #4
 8008c14:	4619      	mov	r1, r3
 8008c16:	4610      	mov	r0, r2
 8008c18:	f7fe f885 	bl	8006d26 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c20:	4b08      	ldr	r3, [pc, #32]	; (8008c44 <vTaskRemoveFromUnorderedEventList+0xc4>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c26:	429a      	cmp	r2, r3
 8008c28:	d902      	bls.n	8008c30 <vTaskRemoveFromUnorderedEventList+0xb0>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8008c2a:	4b07      	ldr	r3, [pc, #28]	; (8008c48 <vTaskRemoveFromUnorderedEventList+0xc8>)
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	601a      	str	r2, [r3, #0]
	}
}
 8008c30:	bf00      	nop
 8008c32:	3718      	adds	r7, #24
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}
 8008c38:	20000e20 	.word	0x20000e20
 8008c3c:	20000e00 	.word	0x20000e00
 8008c40:	20000928 	.word	0x20000928
 8008c44:	20000924 	.word	0x20000924
 8008c48:	20000e0c 	.word	0x20000e0c

08008c4c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b083      	sub	sp, #12
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008c54:	4b06      	ldr	r3, [pc, #24]	; (8008c70 <vTaskInternalSetTimeOutState+0x24>)
 8008c56:	681a      	ldr	r2, [r3, #0]
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008c5c:	4b05      	ldr	r3, [pc, #20]	; (8008c74 <vTaskInternalSetTimeOutState+0x28>)
 8008c5e:	681a      	ldr	r2, [r3, #0]
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	605a      	str	r2, [r3, #4]
}
 8008c64:	bf00      	nop
 8008c66:	370c      	adds	r7, #12
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr
 8008c70:	20000e10 	.word	0x20000e10
 8008c74:	20000dfc 	.word	0x20000dfc

08008c78 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b088      	sub	sp, #32
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
 8008c80:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d10c      	bne.n	8008ca2 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8008c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c8c:	b672      	cpsid	i
 8008c8e:	f383 8811 	msr	BASEPRI, r3
 8008c92:	f3bf 8f6f 	isb	sy
 8008c96:	f3bf 8f4f 	dsb	sy
 8008c9a:	b662      	cpsie	i
 8008c9c:	613b      	str	r3, [r7, #16]
}
 8008c9e:	bf00      	nop
 8008ca0:	e7fe      	b.n	8008ca0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d10c      	bne.n	8008cc2 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8008ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cac:	b672      	cpsid	i
 8008cae:	f383 8811 	msr	BASEPRI, r3
 8008cb2:	f3bf 8f6f 	isb	sy
 8008cb6:	f3bf 8f4f 	dsb	sy
 8008cba:	b662      	cpsie	i
 8008cbc:	60fb      	str	r3, [r7, #12]
}
 8008cbe:	bf00      	nop
 8008cc0:	e7fe      	b.n	8008cc0 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8008cc2:	f000 ffbb 	bl	8009c3c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008cc6:	4b1d      	ldr	r3, [pc, #116]	; (8008d3c <xTaskCheckForTimeOut+0xc4>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	685b      	ldr	r3, [r3, #4]
 8008cd0:	69ba      	ldr	r2, [r7, #24]
 8008cd2:	1ad3      	subs	r3, r2, r3
 8008cd4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cde:	d102      	bne.n	8008ce6 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	61fb      	str	r3, [r7, #28]
 8008ce4:	e023      	b.n	8008d2e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681a      	ldr	r2, [r3, #0]
 8008cea:	4b15      	ldr	r3, [pc, #84]	; (8008d40 <xTaskCheckForTimeOut+0xc8>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	d007      	beq.n	8008d02 <xTaskCheckForTimeOut+0x8a>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	69ba      	ldr	r2, [r7, #24]
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	d302      	bcc.n	8008d02 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	61fb      	str	r3, [r7, #28]
 8008d00:	e015      	b.n	8008d2e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	697a      	ldr	r2, [r7, #20]
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d20b      	bcs.n	8008d24 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	681a      	ldr	r2, [r3, #0]
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	1ad2      	subs	r2, r2, r3
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f7ff ff97 	bl	8008c4c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	61fb      	str	r3, [r7, #28]
 8008d22:	e004      	b.n	8008d2e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	2200      	movs	r2, #0
 8008d28:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008d2e:	f000 ffb9 	bl	8009ca4 <vPortExitCritical>

	return xReturn;
 8008d32:	69fb      	ldr	r3, [r7, #28]
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3720      	adds	r7, #32
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}
 8008d3c:	20000dfc 	.word	0x20000dfc
 8008d40:	20000e10 	.word	0x20000e10

08008d44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008d44:	b480      	push	{r7}
 8008d46:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008d48:	4b03      	ldr	r3, [pc, #12]	; (8008d58 <vTaskMissedYield+0x14>)
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	601a      	str	r2, [r3, #0]
}
 8008d4e:	bf00      	nop
 8008d50:	46bd      	mov	sp, r7
 8008d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d56:	4770      	bx	lr
 8008d58:	20000e0c 	.word	0x20000e0c

08008d5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b082      	sub	sp, #8
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008d64:	f000 f852 	bl	8008e0c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008d68:	4b06      	ldr	r3, [pc, #24]	; (8008d84 <prvIdleTask+0x28>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	2b01      	cmp	r3, #1
 8008d6e:	d9f9      	bls.n	8008d64 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008d70:	4b05      	ldr	r3, [pc, #20]	; (8008d88 <prvIdleTask+0x2c>)
 8008d72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d76:	601a      	str	r2, [r3, #0]
 8008d78:	f3bf 8f4f 	dsb	sy
 8008d7c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008d80:	e7f0      	b.n	8008d64 <prvIdleTask+0x8>
 8008d82:	bf00      	nop
 8008d84:	20000928 	.word	0x20000928
 8008d88:	e000ed04 	.word	0xe000ed04

08008d8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b082      	sub	sp, #8
 8008d90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008d92:	2300      	movs	r3, #0
 8008d94:	607b      	str	r3, [r7, #4]
 8008d96:	e00c      	b.n	8008db2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008d98:	687a      	ldr	r2, [r7, #4]
 8008d9a:	4613      	mov	r3, r2
 8008d9c:	009b      	lsls	r3, r3, #2
 8008d9e:	4413      	add	r3, r2
 8008da0:	009b      	lsls	r3, r3, #2
 8008da2:	4a12      	ldr	r2, [pc, #72]	; (8008dec <prvInitialiseTaskLists+0x60>)
 8008da4:	4413      	add	r3, r2
 8008da6:	4618      	mov	r0, r3
 8008da8:	f7fd ff90 	bl	8006ccc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	3301      	adds	r3, #1
 8008db0:	607b      	str	r3, [r7, #4]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2b37      	cmp	r3, #55	; 0x37
 8008db6:	d9ef      	bls.n	8008d98 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008db8:	480d      	ldr	r0, [pc, #52]	; (8008df0 <prvInitialiseTaskLists+0x64>)
 8008dba:	f7fd ff87 	bl	8006ccc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008dbe:	480d      	ldr	r0, [pc, #52]	; (8008df4 <prvInitialiseTaskLists+0x68>)
 8008dc0:	f7fd ff84 	bl	8006ccc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008dc4:	480c      	ldr	r0, [pc, #48]	; (8008df8 <prvInitialiseTaskLists+0x6c>)
 8008dc6:	f7fd ff81 	bl	8006ccc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008dca:	480c      	ldr	r0, [pc, #48]	; (8008dfc <prvInitialiseTaskLists+0x70>)
 8008dcc:	f7fd ff7e 	bl	8006ccc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008dd0:	480b      	ldr	r0, [pc, #44]	; (8008e00 <prvInitialiseTaskLists+0x74>)
 8008dd2:	f7fd ff7b 	bl	8006ccc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008dd6:	4b0b      	ldr	r3, [pc, #44]	; (8008e04 <prvInitialiseTaskLists+0x78>)
 8008dd8:	4a05      	ldr	r2, [pc, #20]	; (8008df0 <prvInitialiseTaskLists+0x64>)
 8008dda:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008ddc:	4b0a      	ldr	r3, [pc, #40]	; (8008e08 <prvInitialiseTaskLists+0x7c>)
 8008dde:	4a05      	ldr	r2, [pc, #20]	; (8008df4 <prvInitialiseTaskLists+0x68>)
 8008de0:	601a      	str	r2, [r3, #0]
}
 8008de2:	bf00      	nop
 8008de4:	3708      	adds	r7, #8
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}
 8008dea:	bf00      	nop
 8008dec:	20000928 	.word	0x20000928
 8008df0:	20000d88 	.word	0x20000d88
 8008df4:	20000d9c 	.word	0x20000d9c
 8008df8:	20000db8 	.word	0x20000db8
 8008dfc:	20000dcc 	.word	0x20000dcc
 8008e00:	20000de4 	.word	0x20000de4
 8008e04:	20000db0 	.word	0x20000db0
 8008e08:	20000db4 	.word	0x20000db4

08008e0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b082      	sub	sp, #8
 8008e10:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e12:	e019      	b.n	8008e48 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008e14:	f000 ff12 	bl	8009c3c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e18:	4b10      	ldr	r3, [pc, #64]	; (8008e5c <prvCheckTasksWaitingTermination+0x50>)
 8008e1a:	68db      	ldr	r3, [r3, #12]
 8008e1c:	68db      	ldr	r3, [r3, #12]
 8008e1e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	3304      	adds	r3, #4
 8008e24:	4618      	mov	r0, r3
 8008e26:	f7fd ffdb 	bl	8006de0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008e2a:	4b0d      	ldr	r3, [pc, #52]	; (8008e60 <prvCheckTasksWaitingTermination+0x54>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	3b01      	subs	r3, #1
 8008e30:	4a0b      	ldr	r2, [pc, #44]	; (8008e60 <prvCheckTasksWaitingTermination+0x54>)
 8008e32:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008e34:	4b0b      	ldr	r3, [pc, #44]	; (8008e64 <prvCheckTasksWaitingTermination+0x58>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	3b01      	subs	r3, #1
 8008e3a:	4a0a      	ldr	r2, [pc, #40]	; (8008e64 <prvCheckTasksWaitingTermination+0x58>)
 8008e3c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008e3e:	f000 ff31 	bl	8009ca4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f000 f810 	bl	8008e68 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e48:	4b06      	ldr	r3, [pc, #24]	; (8008e64 <prvCheckTasksWaitingTermination+0x58>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d1e1      	bne.n	8008e14 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008e50:	bf00      	nop
 8008e52:	bf00      	nop
 8008e54:	3708      	adds	r7, #8
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}
 8008e5a:	bf00      	nop
 8008e5c:	20000dcc 	.word	0x20000dcc
 8008e60:	20000df8 	.word	0x20000df8
 8008e64:	20000de0 	.word	0x20000de0

08008e68 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b084      	sub	sp, #16
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	3354      	adds	r3, #84	; 0x54
 8008e74:	4618      	mov	r0, r3
 8008e76:	f012 f9ab 	bl	801b1d0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d108      	bne.n	8008e96 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f001 f8cd 	bl	800a028 <vPortFree>
				vPortFree( pxTCB );
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f001 f8ca 	bl	800a028 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008e94:	e01a      	b.n	8008ecc <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008e9c:	2b01      	cmp	r3, #1
 8008e9e:	d103      	bne.n	8008ea8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f001 f8c1 	bl	800a028 <vPortFree>
	}
 8008ea6:	e011      	b.n	8008ecc <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008eae:	2b02      	cmp	r3, #2
 8008eb0:	d00c      	beq.n	8008ecc <prvDeleteTCB+0x64>
	__asm volatile
 8008eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb6:	b672      	cpsid	i
 8008eb8:	f383 8811 	msr	BASEPRI, r3
 8008ebc:	f3bf 8f6f 	isb	sy
 8008ec0:	f3bf 8f4f 	dsb	sy
 8008ec4:	b662      	cpsie	i
 8008ec6:	60fb      	str	r3, [r7, #12]
}
 8008ec8:	bf00      	nop
 8008eca:	e7fe      	b.n	8008eca <prvDeleteTCB+0x62>
	}
 8008ecc:	bf00      	nop
 8008ece:	3710      	adds	r7, #16
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}

08008ed4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b083      	sub	sp, #12
 8008ed8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008eda:	4b0c      	ldr	r3, [pc, #48]	; (8008f0c <prvResetNextTaskUnblockTime+0x38>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d104      	bne.n	8008eee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008ee4:	4b0a      	ldr	r3, [pc, #40]	; (8008f10 <prvResetNextTaskUnblockTime+0x3c>)
 8008ee6:	f04f 32ff 	mov.w	r2, #4294967295
 8008eea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008eec:	e008      	b.n	8008f00 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008eee:	4b07      	ldr	r3, [pc, #28]	; (8008f0c <prvResetNextTaskUnblockTime+0x38>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	68db      	ldr	r3, [r3, #12]
 8008ef4:	68db      	ldr	r3, [r3, #12]
 8008ef6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	685b      	ldr	r3, [r3, #4]
 8008efc:	4a04      	ldr	r2, [pc, #16]	; (8008f10 <prvResetNextTaskUnblockTime+0x3c>)
 8008efe:	6013      	str	r3, [r2, #0]
}
 8008f00:	bf00      	nop
 8008f02:	370c      	adds	r7, #12
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr
 8008f0c:	20000db0 	.word	0x20000db0
 8008f10:	20000e18 	.word	0x20000e18

08008f14 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008f14:	b480      	push	{r7}
 8008f16:	b083      	sub	sp, #12
 8008f18:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8008f1a:	4b05      	ldr	r3, [pc, #20]	; (8008f30 <xTaskGetCurrentTaskHandle+0x1c>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008f20:	687b      	ldr	r3, [r7, #4]
	}
 8008f22:	4618      	mov	r0, r3
 8008f24:	370c      	adds	r7, #12
 8008f26:	46bd      	mov	sp, r7
 8008f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2c:	4770      	bx	lr
 8008f2e:	bf00      	nop
 8008f30:	20000924 	.word	0x20000924

08008f34 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008f34:	b480      	push	{r7}
 8008f36:	b083      	sub	sp, #12
 8008f38:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008f3a:	4b0b      	ldr	r3, [pc, #44]	; (8008f68 <xTaskGetSchedulerState+0x34>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d102      	bne.n	8008f48 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008f42:	2301      	movs	r3, #1
 8008f44:	607b      	str	r3, [r7, #4]
 8008f46:	e008      	b.n	8008f5a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f48:	4b08      	ldr	r3, [pc, #32]	; (8008f6c <xTaskGetSchedulerState+0x38>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d102      	bne.n	8008f56 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008f50:	2302      	movs	r3, #2
 8008f52:	607b      	str	r3, [r7, #4]
 8008f54:	e001      	b.n	8008f5a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008f56:	2300      	movs	r3, #0
 8008f58:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008f5a:	687b      	ldr	r3, [r7, #4]
	}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	370c      	adds	r7, #12
 8008f60:	46bd      	mov	sp, r7
 8008f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f66:	4770      	bx	lr
 8008f68:	20000e04 	.word	0x20000e04
 8008f6c:	20000e20 	.word	0x20000e20

08008f70 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b084      	sub	sp, #16
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d051      	beq.n	800902a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f8a:	4b2a      	ldr	r3, [pc, #168]	; (8009034 <xTaskPriorityInherit+0xc4>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f90:	429a      	cmp	r2, r3
 8008f92:	d241      	bcs.n	8009018 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	699b      	ldr	r3, [r3, #24]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	db06      	blt.n	8008faa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f9c:	4b25      	ldr	r3, [pc, #148]	; (8009034 <xTaskPriorityInherit+0xc4>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fa2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	6959      	ldr	r1, [r3, #20]
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fb2:	4613      	mov	r3, r2
 8008fb4:	009b      	lsls	r3, r3, #2
 8008fb6:	4413      	add	r3, r2
 8008fb8:	009b      	lsls	r3, r3, #2
 8008fba:	4a1f      	ldr	r2, [pc, #124]	; (8009038 <xTaskPriorityInherit+0xc8>)
 8008fbc:	4413      	add	r3, r2
 8008fbe:	4299      	cmp	r1, r3
 8008fc0:	d122      	bne.n	8009008 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	3304      	adds	r3, #4
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f7fd ff0a 	bl	8006de0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008fcc:	4b19      	ldr	r3, [pc, #100]	; (8009034 <xTaskPriorityInherit+0xc4>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fda:	4b18      	ldr	r3, [pc, #96]	; (800903c <xTaskPriorityInherit+0xcc>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	429a      	cmp	r2, r3
 8008fe0:	d903      	bls.n	8008fea <xTaskPriorityInherit+0x7a>
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fe6:	4a15      	ldr	r2, [pc, #84]	; (800903c <xTaskPriorityInherit+0xcc>)
 8008fe8:	6013      	str	r3, [r2, #0]
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fee:	4613      	mov	r3, r2
 8008ff0:	009b      	lsls	r3, r3, #2
 8008ff2:	4413      	add	r3, r2
 8008ff4:	009b      	lsls	r3, r3, #2
 8008ff6:	4a10      	ldr	r2, [pc, #64]	; (8009038 <xTaskPriorityInherit+0xc8>)
 8008ff8:	441a      	add	r2, r3
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	3304      	adds	r3, #4
 8008ffe:	4619      	mov	r1, r3
 8009000:	4610      	mov	r0, r2
 8009002:	f7fd fe90 	bl	8006d26 <vListInsertEnd>
 8009006:	e004      	b.n	8009012 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009008:	4b0a      	ldr	r3, [pc, #40]	; (8009034 <xTaskPriorityInherit+0xc4>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009012:	2301      	movs	r3, #1
 8009014:	60fb      	str	r3, [r7, #12]
 8009016:	e008      	b.n	800902a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800901c:	4b05      	ldr	r3, [pc, #20]	; (8009034 <xTaskPriorityInherit+0xc4>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009022:	429a      	cmp	r2, r3
 8009024:	d201      	bcs.n	800902a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009026:	2301      	movs	r3, #1
 8009028:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800902a:	68fb      	ldr	r3, [r7, #12]
	}
 800902c:	4618      	mov	r0, r3
 800902e:	3710      	adds	r7, #16
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}
 8009034:	20000924 	.word	0x20000924
 8009038:	20000928 	.word	0x20000928
 800903c:	20000e00 	.word	0x20000e00

08009040 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009040:	b580      	push	{r7, lr}
 8009042:	b086      	sub	sp, #24
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800904c:	2300      	movs	r3, #0
 800904e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d05a      	beq.n	800910c <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009056:	4b30      	ldr	r3, [pc, #192]	; (8009118 <xTaskPriorityDisinherit+0xd8>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	693a      	ldr	r2, [r7, #16]
 800905c:	429a      	cmp	r2, r3
 800905e:	d00c      	beq.n	800907a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8009060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009064:	b672      	cpsid	i
 8009066:	f383 8811 	msr	BASEPRI, r3
 800906a:	f3bf 8f6f 	isb	sy
 800906e:	f3bf 8f4f 	dsb	sy
 8009072:	b662      	cpsie	i
 8009074:	60fb      	str	r3, [r7, #12]
}
 8009076:	bf00      	nop
 8009078:	e7fe      	b.n	8009078 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800907a:	693b      	ldr	r3, [r7, #16]
 800907c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800907e:	2b00      	cmp	r3, #0
 8009080:	d10c      	bne.n	800909c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8009082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009086:	b672      	cpsid	i
 8009088:	f383 8811 	msr	BASEPRI, r3
 800908c:	f3bf 8f6f 	isb	sy
 8009090:	f3bf 8f4f 	dsb	sy
 8009094:	b662      	cpsie	i
 8009096:	60bb      	str	r3, [r7, #8]
}
 8009098:	bf00      	nop
 800909a:	e7fe      	b.n	800909a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800909c:	693b      	ldr	r3, [r7, #16]
 800909e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090a0:	1e5a      	subs	r2, r3, #1
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090ae:	429a      	cmp	r2, r3
 80090b0:	d02c      	beq.n	800910c <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d128      	bne.n	800910c <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	3304      	adds	r3, #4
 80090be:	4618      	mov	r0, r3
 80090c0:	f7fd fe8e 	bl	8006de0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090cc:	693b      	ldr	r3, [r7, #16]
 80090ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090d0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090dc:	4b0f      	ldr	r3, [pc, #60]	; (800911c <xTaskPriorityDisinherit+0xdc>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	429a      	cmp	r2, r3
 80090e2:	d903      	bls.n	80090ec <xTaskPriorityDisinherit+0xac>
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090e8:	4a0c      	ldr	r2, [pc, #48]	; (800911c <xTaskPriorityDisinherit+0xdc>)
 80090ea:	6013      	str	r3, [r2, #0]
 80090ec:	693b      	ldr	r3, [r7, #16]
 80090ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090f0:	4613      	mov	r3, r2
 80090f2:	009b      	lsls	r3, r3, #2
 80090f4:	4413      	add	r3, r2
 80090f6:	009b      	lsls	r3, r3, #2
 80090f8:	4a09      	ldr	r2, [pc, #36]	; (8009120 <xTaskPriorityDisinherit+0xe0>)
 80090fa:	441a      	add	r2, r3
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	3304      	adds	r3, #4
 8009100:	4619      	mov	r1, r3
 8009102:	4610      	mov	r0, r2
 8009104:	f7fd fe0f 	bl	8006d26 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009108:	2301      	movs	r3, #1
 800910a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800910c:	697b      	ldr	r3, [r7, #20]
	}
 800910e:	4618      	mov	r0, r3
 8009110:	3718      	adds	r7, #24
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}
 8009116:	bf00      	nop
 8009118:	20000924 	.word	0x20000924
 800911c:	20000e00 	.word	0x20000e00
 8009120:	20000928 	.word	0x20000928

08009124 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009124:	b580      	push	{r7, lr}
 8009126:	b088      	sub	sp, #32
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
 800912c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009132:	2301      	movs	r3, #1
 8009134:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d06e      	beq.n	800921a <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800913c:	69bb      	ldr	r3, [r7, #24]
 800913e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009140:	2b00      	cmp	r3, #0
 8009142:	d10c      	bne.n	800915e <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 8009144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009148:	b672      	cpsid	i
 800914a:	f383 8811 	msr	BASEPRI, r3
 800914e:	f3bf 8f6f 	isb	sy
 8009152:	f3bf 8f4f 	dsb	sy
 8009156:	b662      	cpsie	i
 8009158:	60fb      	str	r3, [r7, #12]
}
 800915a:	bf00      	nop
 800915c:	e7fe      	b.n	800915c <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800915e:	69bb      	ldr	r3, [r7, #24]
 8009160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009162:	683a      	ldr	r2, [r7, #0]
 8009164:	429a      	cmp	r2, r3
 8009166:	d902      	bls.n	800916e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	61fb      	str	r3, [r7, #28]
 800916c:	e002      	b.n	8009174 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800916e:	69bb      	ldr	r3, [r7, #24]
 8009170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009172:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009174:	69bb      	ldr	r3, [r7, #24]
 8009176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009178:	69fa      	ldr	r2, [r7, #28]
 800917a:	429a      	cmp	r2, r3
 800917c:	d04d      	beq.n	800921a <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800917e:	69bb      	ldr	r3, [r7, #24]
 8009180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009182:	697a      	ldr	r2, [r7, #20]
 8009184:	429a      	cmp	r2, r3
 8009186:	d148      	bne.n	800921a <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009188:	4b26      	ldr	r3, [pc, #152]	; (8009224 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	69ba      	ldr	r2, [r7, #24]
 800918e:	429a      	cmp	r2, r3
 8009190:	d10c      	bne.n	80091ac <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 8009192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009196:	b672      	cpsid	i
 8009198:	f383 8811 	msr	BASEPRI, r3
 800919c:	f3bf 8f6f 	isb	sy
 80091a0:	f3bf 8f4f 	dsb	sy
 80091a4:	b662      	cpsie	i
 80091a6:	60bb      	str	r3, [r7, #8]
}
 80091a8:	bf00      	nop
 80091aa:	e7fe      	b.n	80091aa <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80091ac:	69bb      	ldr	r3, [r7, #24]
 80091ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091b0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80091b2:	69bb      	ldr	r3, [r7, #24]
 80091b4:	69fa      	ldr	r2, [r7, #28]
 80091b6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80091b8:	69bb      	ldr	r3, [r7, #24]
 80091ba:	699b      	ldr	r3, [r3, #24]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	db04      	blt.n	80091ca <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091c0:	69fb      	ldr	r3, [r7, #28]
 80091c2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80091c6:	69bb      	ldr	r3, [r7, #24]
 80091c8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80091ca:	69bb      	ldr	r3, [r7, #24]
 80091cc:	6959      	ldr	r1, [r3, #20]
 80091ce:	693a      	ldr	r2, [r7, #16]
 80091d0:	4613      	mov	r3, r2
 80091d2:	009b      	lsls	r3, r3, #2
 80091d4:	4413      	add	r3, r2
 80091d6:	009b      	lsls	r3, r3, #2
 80091d8:	4a13      	ldr	r2, [pc, #76]	; (8009228 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80091da:	4413      	add	r3, r2
 80091dc:	4299      	cmp	r1, r3
 80091de:	d11c      	bne.n	800921a <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091e0:	69bb      	ldr	r3, [r7, #24]
 80091e2:	3304      	adds	r3, #4
 80091e4:	4618      	mov	r0, r3
 80091e6:	f7fd fdfb 	bl	8006de0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80091ea:	69bb      	ldr	r3, [r7, #24]
 80091ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091ee:	4b0f      	ldr	r3, [pc, #60]	; (800922c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	429a      	cmp	r2, r3
 80091f4:	d903      	bls.n	80091fe <vTaskPriorityDisinheritAfterTimeout+0xda>
 80091f6:	69bb      	ldr	r3, [r7, #24]
 80091f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091fa:	4a0c      	ldr	r2, [pc, #48]	; (800922c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80091fc:	6013      	str	r3, [r2, #0]
 80091fe:	69bb      	ldr	r3, [r7, #24]
 8009200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009202:	4613      	mov	r3, r2
 8009204:	009b      	lsls	r3, r3, #2
 8009206:	4413      	add	r3, r2
 8009208:	009b      	lsls	r3, r3, #2
 800920a:	4a07      	ldr	r2, [pc, #28]	; (8009228 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800920c:	441a      	add	r2, r3
 800920e:	69bb      	ldr	r3, [r7, #24]
 8009210:	3304      	adds	r3, #4
 8009212:	4619      	mov	r1, r3
 8009214:	4610      	mov	r0, r2
 8009216:	f7fd fd86 	bl	8006d26 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800921a:	bf00      	nop
 800921c:	3720      	adds	r7, #32
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}
 8009222:	bf00      	nop
 8009224:	20000924 	.word	0x20000924
 8009228:	20000928 	.word	0x20000928
 800922c:	20000e00 	.word	0x20000e00

08009230 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8009230:	b480      	push	{r7}
 8009232:	b083      	sub	sp, #12
 8009234:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8009236:	4b09      	ldr	r3, [pc, #36]	; (800925c <uxTaskResetEventItemValue+0x2c>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	699b      	ldr	r3, [r3, #24]
 800923c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800923e:	4b07      	ldr	r3, [pc, #28]	; (800925c <uxTaskResetEventItemValue+0x2c>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009244:	4b05      	ldr	r3, [pc, #20]	; (800925c <uxTaskResetEventItemValue+0x2c>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800924c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800924e:	687b      	ldr	r3, [r7, #4]
}
 8009250:	4618      	mov	r0, r3
 8009252:	370c      	adds	r7, #12
 8009254:	46bd      	mov	sp, r7
 8009256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925a:	4770      	bx	lr
 800925c:	20000924 	.word	0x20000924

08009260 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009260:	b480      	push	{r7}
 8009262:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009264:	4b07      	ldr	r3, [pc, #28]	; (8009284 <pvTaskIncrementMutexHeldCount+0x24>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d004      	beq.n	8009276 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800926c:	4b05      	ldr	r3, [pc, #20]	; (8009284 <pvTaskIncrementMutexHeldCount+0x24>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009272:	3201      	adds	r2, #1
 8009274:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8009276:	4b03      	ldr	r3, [pc, #12]	; (8009284 <pvTaskIncrementMutexHeldCount+0x24>)
 8009278:	681b      	ldr	r3, [r3, #0]
	}
 800927a:	4618      	mov	r0, r3
 800927c:	46bd      	mov	sp, r7
 800927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009282:	4770      	bx	lr
 8009284:	20000924 	.word	0x20000924

08009288 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b084      	sub	sp, #16
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009292:	4b21      	ldr	r3, [pc, #132]	; (8009318 <prvAddCurrentTaskToDelayedList+0x90>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009298:	4b20      	ldr	r3, [pc, #128]	; (800931c <prvAddCurrentTaskToDelayedList+0x94>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	3304      	adds	r3, #4
 800929e:	4618      	mov	r0, r3
 80092a0:	f7fd fd9e 	bl	8006de0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092aa:	d10a      	bne.n	80092c2 <prvAddCurrentTaskToDelayedList+0x3a>
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d007      	beq.n	80092c2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80092b2:	4b1a      	ldr	r3, [pc, #104]	; (800931c <prvAddCurrentTaskToDelayedList+0x94>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	3304      	adds	r3, #4
 80092b8:	4619      	mov	r1, r3
 80092ba:	4819      	ldr	r0, [pc, #100]	; (8009320 <prvAddCurrentTaskToDelayedList+0x98>)
 80092bc:	f7fd fd33 	bl	8006d26 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80092c0:	e026      	b.n	8009310 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80092c2:	68fa      	ldr	r2, [r7, #12]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	4413      	add	r3, r2
 80092c8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80092ca:	4b14      	ldr	r3, [pc, #80]	; (800931c <prvAddCurrentTaskToDelayedList+0x94>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	68ba      	ldr	r2, [r7, #8]
 80092d0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80092d2:	68ba      	ldr	r2, [r7, #8]
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	429a      	cmp	r2, r3
 80092d8:	d209      	bcs.n	80092ee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80092da:	4b12      	ldr	r3, [pc, #72]	; (8009324 <prvAddCurrentTaskToDelayedList+0x9c>)
 80092dc:	681a      	ldr	r2, [r3, #0]
 80092de:	4b0f      	ldr	r3, [pc, #60]	; (800931c <prvAddCurrentTaskToDelayedList+0x94>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	3304      	adds	r3, #4
 80092e4:	4619      	mov	r1, r3
 80092e6:	4610      	mov	r0, r2
 80092e8:	f7fd fd41 	bl	8006d6e <vListInsert>
}
 80092ec:	e010      	b.n	8009310 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80092ee:	4b0e      	ldr	r3, [pc, #56]	; (8009328 <prvAddCurrentTaskToDelayedList+0xa0>)
 80092f0:	681a      	ldr	r2, [r3, #0]
 80092f2:	4b0a      	ldr	r3, [pc, #40]	; (800931c <prvAddCurrentTaskToDelayedList+0x94>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	3304      	adds	r3, #4
 80092f8:	4619      	mov	r1, r3
 80092fa:	4610      	mov	r0, r2
 80092fc:	f7fd fd37 	bl	8006d6e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009300:	4b0a      	ldr	r3, [pc, #40]	; (800932c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	68ba      	ldr	r2, [r7, #8]
 8009306:	429a      	cmp	r2, r3
 8009308:	d202      	bcs.n	8009310 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800930a:	4a08      	ldr	r2, [pc, #32]	; (800932c <prvAddCurrentTaskToDelayedList+0xa4>)
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	6013      	str	r3, [r2, #0]
}
 8009310:	bf00      	nop
 8009312:	3710      	adds	r7, #16
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}
 8009318:	20000dfc 	.word	0x20000dfc
 800931c:	20000924 	.word	0x20000924
 8009320:	20000de4 	.word	0x20000de4
 8009324:	20000db4 	.word	0x20000db4
 8009328:	20000db0 	.word	0x20000db0
 800932c:	20000e18 	.word	0x20000e18

08009330 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b08a      	sub	sp, #40	; 0x28
 8009334:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009336:	2300      	movs	r3, #0
 8009338:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800933a:	f000 fb15 	bl	8009968 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800933e:	4b1d      	ldr	r3, [pc, #116]	; (80093b4 <xTimerCreateTimerTask+0x84>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d021      	beq.n	800938a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009346:	2300      	movs	r3, #0
 8009348:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800934a:	2300      	movs	r3, #0
 800934c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800934e:	1d3a      	adds	r2, r7, #4
 8009350:	f107 0108 	add.w	r1, r7, #8
 8009354:	f107 030c 	add.w	r3, r7, #12
 8009358:	4618      	mov	r0, r3
 800935a:	f7fd fadb 	bl	8006914 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800935e:	6879      	ldr	r1, [r7, #4]
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	68fa      	ldr	r2, [r7, #12]
 8009364:	9202      	str	r2, [sp, #8]
 8009366:	9301      	str	r3, [sp, #4]
 8009368:	2302      	movs	r3, #2
 800936a:	9300      	str	r3, [sp, #0]
 800936c:	2300      	movs	r3, #0
 800936e:	460a      	mov	r2, r1
 8009370:	4911      	ldr	r1, [pc, #68]	; (80093b8 <xTimerCreateTimerTask+0x88>)
 8009372:	4812      	ldr	r0, [pc, #72]	; (80093bc <xTimerCreateTimerTask+0x8c>)
 8009374:	f7fe feae 	bl	80080d4 <xTaskCreateStatic>
 8009378:	4603      	mov	r3, r0
 800937a:	4a11      	ldr	r2, [pc, #68]	; (80093c0 <xTimerCreateTimerTask+0x90>)
 800937c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800937e:	4b10      	ldr	r3, [pc, #64]	; (80093c0 <xTimerCreateTimerTask+0x90>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d001      	beq.n	800938a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009386:	2301      	movs	r3, #1
 8009388:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d10c      	bne.n	80093aa <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8009390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009394:	b672      	cpsid	i
 8009396:	f383 8811 	msr	BASEPRI, r3
 800939a:	f3bf 8f6f 	isb	sy
 800939e:	f3bf 8f4f 	dsb	sy
 80093a2:	b662      	cpsie	i
 80093a4:	613b      	str	r3, [r7, #16]
}
 80093a6:	bf00      	nop
 80093a8:	e7fe      	b.n	80093a8 <xTimerCreateTimerTask+0x78>
	return xReturn;
 80093aa:	697b      	ldr	r3, [r7, #20]
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	3718      	adds	r7, #24
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}
 80093b4:	20000e54 	.word	0x20000e54
 80093b8:	0801b9bc 	.word	0x0801b9bc
 80093bc:	08009501 	.word	0x08009501
 80093c0:	20000e58 	.word	0x20000e58

080093c4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b08a      	sub	sp, #40	; 0x28
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	60f8      	str	r0, [r7, #12]
 80093cc:	60b9      	str	r1, [r7, #8]
 80093ce:	607a      	str	r2, [r7, #4]
 80093d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80093d2:	2300      	movs	r3, #0
 80093d4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d10c      	bne.n	80093f6 <xTimerGenericCommand+0x32>
	__asm volatile
 80093dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e0:	b672      	cpsid	i
 80093e2:	f383 8811 	msr	BASEPRI, r3
 80093e6:	f3bf 8f6f 	isb	sy
 80093ea:	f3bf 8f4f 	dsb	sy
 80093ee:	b662      	cpsie	i
 80093f0:	623b      	str	r3, [r7, #32]
}
 80093f2:	bf00      	nop
 80093f4:	e7fe      	b.n	80093f4 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80093f6:	4b1a      	ldr	r3, [pc, #104]	; (8009460 <xTimerGenericCommand+0x9c>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d02a      	beq.n	8009454 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	2b05      	cmp	r3, #5
 800940e:	dc18      	bgt.n	8009442 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009410:	f7ff fd90 	bl	8008f34 <xTaskGetSchedulerState>
 8009414:	4603      	mov	r3, r0
 8009416:	2b02      	cmp	r3, #2
 8009418:	d109      	bne.n	800942e <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800941a:	4b11      	ldr	r3, [pc, #68]	; (8009460 <xTimerGenericCommand+0x9c>)
 800941c:	6818      	ldr	r0, [r3, #0]
 800941e:	f107 0110 	add.w	r1, r7, #16
 8009422:	2300      	movs	r3, #0
 8009424:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009426:	f7fd ff83 	bl	8007330 <xQueueGenericSend>
 800942a:	6278      	str	r0, [r7, #36]	; 0x24
 800942c:	e012      	b.n	8009454 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800942e:	4b0c      	ldr	r3, [pc, #48]	; (8009460 <xTimerGenericCommand+0x9c>)
 8009430:	6818      	ldr	r0, [r3, #0]
 8009432:	f107 0110 	add.w	r1, r7, #16
 8009436:	2300      	movs	r3, #0
 8009438:	2200      	movs	r2, #0
 800943a:	f7fd ff79 	bl	8007330 <xQueueGenericSend>
 800943e:	6278      	str	r0, [r7, #36]	; 0x24
 8009440:	e008      	b.n	8009454 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009442:	4b07      	ldr	r3, [pc, #28]	; (8009460 <xTimerGenericCommand+0x9c>)
 8009444:	6818      	ldr	r0, [r3, #0]
 8009446:	f107 0110 	add.w	r1, r7, #16
 800944a:	2300      	movs	r3, #0
 800944c:	683a      	ldr	r2, [r7, #0]
 800944e:	f7fe f875 	bl	800753c <xQueueGenericSendFromISR>
 8009452:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009456:	4618      	mov	r0, r3
 8009458:	3728      	adds	r7, #40	; 0x28
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}
 800945e:	bf00      	nop
 8009460:	20000e54 	.word	0x20000e54

08009464 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b088      	sub	sp, #32
 8009468:	af02      	add	r7, sp, #8
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800946e:	4b23      	ldr	r3, [pc, #140]	; (80094fc <prvProcessExpiredTimer+0x98>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	68db      	ldr	r3, [r3, #12]
 8009474:	68db      	ldr	r3, [r3, #12]
 8009476:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009478:	697b      	ldr	r3, [r7, #20]
 800947a:	3304      	adds	r3, #4
 800947c:	4618      	mov	r0, r3
 800947e:	f7fd fcaf 	bl	8006de0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009488:	f003 0304 	and.w	r3, r3, #4
 800948c:	2b00      	cmp	r3, #0
 800948e:	d024      	beq.n	80094da <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	699a      	ldr	r2, [r3, #24]
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	18d1      	adds	r1, r2, r3
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	683a      	ldr	r2, [r7, #0]
 800949c:	6978      	ldr	r0, [r7, #20]
 800949e:	f000 f8d3 	bl	8009648 <prvInsertTimerInActiveList>
 80094a2:	4603      	mov	r3, r0
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d021      	beq.n	80094ec <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80094a8:	2300      	movs	r3, #0
 80094aa:	9300      	str	r3, [sp, #0]
 80094ac:	2300      	movs	r3, #0
 80094ae:	687a      	ldr	r2, [r7, #4]
 80094b0:	2100      	movs	r1, #0
 80094b2:	6978      	ldr	r0, [r7, #20]
 80094b4:	f7ff ff86 	bl	80093c4 <xTimerGenericCommand>
 80094b8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d115      	bne.n	80094ec <prvProcessExpiredTimer+0x88>
	__asm volatile
 80094c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c4:	b672      	cpsid	i
 80094c6:	f383 8811 	msr	BASEPRI, r3
 80094ca:	f3bf 8f6f 	isb	sy
 80094ce:	f3bf 8f4f 	dsb	sy
 80094d2:	b662      	cpsie	i
 80094d4:	60fb      	str	r3, [r7, #12]
}
 80094d6:	bf00      	nop
 80094d8:	e7fe      	b.n	80094d8 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094e0:	f023 0301 	bic.w	r3, r3, #1
 80094e4:	b2da      	uxtb	r2, r3
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	6a1b      	ldr	r3, [r3, #32]
 80094f0:	6978      	ldr	r0, [r7, #20]
 80094f2:	4798      	blx	r3
}
 80094f4:	bf00      	nop
 80094f6:	3718      	adds	r7, #24
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}
 80094fc:	20000e4c 	.word	0x20000e4c

08009500 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b084      	sub	sp, #16
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009508:	f107 0308 	add.w	r3, r7, #8
 800950c:	4618      	mov	r0, r3
 800950e:	f000 f857 	bl	80095c0 <prvGetNextExpireTime>
 8009512:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	4619      	mov	r1, r3
 8009518:	68f8      	ldr	r0, [r7, #12]
 800951a:	f000 f803 	bl	8009524 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800951e:	f000 f8d5 	bl	80096cc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009522:	e7f1      	b.n	8009508 <prvTimerTask+0x8>

08009524 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b084      	sub	sp, #16
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
 800952c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800952e:	f7ff f83b 	bl	80085a8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009532:	f107 0308 	add.w	r3, r7, #8
 8009536:	4618      	mov	r0, r3
 8009538:	f000 f866 	bl	8009608 <prvSampleTimeNow>
 800953c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d130      	bne.n	80095a6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d10a      	bne.n	8009560 <prvProcessTimerOrBlockTask+0x3c>
 800954a:	687a      	ldr	r2, [r7, #4]
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	429a      	cmp	r2, r3
 8009550:	d806      	bhi.n	8009560 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009552:	f7ff f837 	bl	80085c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009556:	68f9      	ldr	r1, [r7, #12]
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f7ff ff83 	bl	8009464 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800955e:	e024      	b.n	80095aa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d008      	beq.n	8009578 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009566:	4b13      	ldr	r3, [pc, #76]	; (80095b4 <prvProcessTimerOrBlockTask+0x90>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d101      	bne.n	8009574 <prvProcessTimerOrBlockTask+0x50>
 8009570:	2301      	movs	r3, #1
 8009572:	e000      	b.n	8009576 <prvProcessTimerOrBlockTask+0x52>
 8009574:	2300      	movs	r3, #0
 8009576:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009578:	4b0f      	ldr	r3, [pc, #60]	; (80095b8 <prvProcessTimerOrBlockTask+0x94>)
 800957a:	6818      	ldr	r0, [r3, #0]
 800957c:	687a      	ldr	r2, [r7, #4]
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	1ad3      	subs	r3, r2, r3
 8009582:	683a      	ldr	r2, [r7, #0]
 8009584:	4619      	mov	r1, r3
 8009586:	f7fe fd71 	bl	800806c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800958a:	f7ff f81b 	bl	80085c4 <xTaskResumeAll>
 800958e:	4603      	mov	r3, r0
 8009590:	2b00      	cmp	r3, #0
 8009592:	d10a      	bne.n	80095aa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009594:	4b09      	ldr	r3, [pc, #36]	; (80095bc <prvProcessTimerOrBlockTask+0x98>)
 8009596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800959a:	601a      	str	r2, [r3, #0]
 800959c:	f3bf 8f4f 	dsb	sy
 80095a0:	f3bf 8f6f 	isb	sy
}
 80095a4:	e001      	b.n	80095aa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80095a6:	f7ff f80d 	bl	80085c4 <xTaskResumeAll>
}
 80095aa:	bf00      	nop
 80095ac:	3710      	adds	r7, #16
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}
 80095b2:	bf00      	nop
 80095b4:	20000e50 	.word	0x20000e50
 80095b8:	20000e54 	.word	0x20000e54
 80095bc:	e000ed04 	.word	0xe000ed04

080095c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80095c0:	b480      	push	{r7}
 80095c2:	b085      	sub	sp, #20
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80095c8:	4b0e      	ldr	r3, [pc, #56]	; (8009604 <prvGetNextExpireTime+0x44>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d101      	bne.n	80095d6 <prvGetNextExpireTime+0x16>
 80095d2:	2201      	movs	r2, #1
 80095d4:	e000      	b.n	80095d8 <prvGetNextExpireTime+0x18>
 80095d6:	2200      	movs	r2, #0
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d105      	bne.n	80095f0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80095e4:	4b07      	ldr	r3, [pc, #28]	; (8009604 <prvGetNextExpireTime+0x44>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	68db      	ldr	r3, [r3, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	60fb      	str	r3, [r7, #12]
 80095ee:	e001      	b.n	80095f4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80095f0:	2300      	movs	r3, #0
 80095f2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80095f4:	68fb      	ldr	r3, [r7, #12]
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	3714      	adds	r7, #20
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr
 8009602:	bf00      	nop
 8009604:	20000e4c 	.word	0x20000e4c

08009608 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b084      	sub	sp, #16
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009610:	f7ff f878 	bl	8008704 <xTaskGetTickCount>
 8009614:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009616:	4b0b      	ldr	r3, [pc, #44]	; (8009644 <prvSampleTimeNow+0x3c>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	68fa      	ldr	r2, [r7, #12]
 800961c:	429a      	cmp	r2, r3
 800961e:	d205      	bcs.n	800962c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009620:	f000 f93c 	bl	800989c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2201      	movs	r2, #1
 8009628:	601a      	str	r2, [r3, #0]
 800962a:	e002      	b.n	8009632 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2200      	movs	r2, #0
 8009630:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009632:	4a04      	ldr	r2, [pc, #16]	; (8009644 <prvSampleTimeNow+0x3c>)
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009638:	68fb      	ldr	r3, [r7, #12]
}
 800963a:	4618      	mov	r0, r3
 800963c:	3710      	adds	r7, #16
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}
 8009642:	bf00      	nop
 8009644:	20000e5c 	.word	0x20000e5c

08009648 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b086      	sub	sp, #24
 800964c:	af00      	add	r7, sp, #0
 800964e:	60f8      	str	r0, [r7, #12]
 8009650:	60b9      	str	r1, [r7, #8]
 8009652:	607a      	str	r2, [r7, #4]
 8009654:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009656:	2300      	movs	r3, #0
 8009658:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	68ba      	ldr	r2, [r7, #8]
 800965e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	68fa      	ldr	r2, [r7, #12]
 8009664:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009666:	68ba      	ldr	r2, [r7, #8]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	429a      	cmp	r2, r3
 800966c:	d812      	bhi.n	8009694 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800966e:	687a      	ldr	r2, [r7, #4]
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	1ad2      	subs	r2, r2, r3
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	699b      	ldr	r3, [r3, #24]
 8009678:	429a      	cmp	r2, r3
 800967a:	d302      	bcc.n	8009682 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800967c:	2301      	movs	r3, #1
 800967e:	617b      	str	r3, [r7, #20]
 8009680:	e01b      	b.n	80096ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009682:	4b10      	ldr	r3, [pc, #64]	; (80096c4 <prvInsertTimerInActiveList+0x7c>)
 8009684:	681a      	ldr	r2, [r3, #0]
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	3304      	adds	r3, #4
 800968a:	4619      	mov	r1, r3
 800968c:	4610      	mov	r0, r2
 800968e:	f7fd fb6e 	bl	8006d6e <vListInsert>
 8009692:	e012      	b.n	80096ba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009694:	687a      	ldr	r2, [r7, #4]
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	429a      	cmp	r2, r3
 800969a:	d206      	bcs.n	80096aa <prvInsertTimerInActiveList+0x62>
 800969c:	68ba      	ldr	r2, [r7, #8]
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	429a      	cmp	r2, r3
 80096a2:	d302      	bcc.n	80096aa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80096a4:	2301      	movs	r3, #1
 80096a6:	617b      	str	r3, [r7, #20]
 80096a8:	e007      	b.n	80096ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80096aa:	4b07      	ldr	r3, [pc, #28]	; (80096c8 <prvInsertTimerInActiveList+0x80>)
 80096ac:	681a      	ldr	r2, [r3, #0]
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	3304      	adds	r3, #4
 80096b2:	4619      	mov	r1, r3
 80096b4:	4610      	mov	r0, r2
 80096b6:	f7fd fb5a 	bl	8006d6e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80096ba:	697b      	ldr	r3, [r7, #20]
}
 80096bc:	4618      	mov	r0, r3
 80096be:	3718      	adds	r7, #24
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}
 80096c4:	20000e50 	.word	0x20000e50
 80096c8:	20000e4c 	.word	0x20000e4c

080096cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b08e      	sub	sp, #56	; 0x38
 80096d0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80096d2:	e0d0      	b.n	8009876 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	da1a      	bge.n	8009710 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80096da:	1d3b      	adds	r3, r7, #4
 80096dc:	3304      	adds	r3, #4
 80096de:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80096e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d10c      	bne.n	8009700 <prvProcessReceivedCommands+0x34>
	__asm volatile
 80096e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ea:	b672      	cpsid	i
 80096ec:	f383 8811 	msr	BASEPRI, r3
 80096f0:	f3bf 8f6f 	isb	sy
 80096f4:	f3bf 8f4f 	dsb	sy
 80096f8:	b662      	cpsie	i
 80096fa:	61fb      	str	r3, [r7, #28]
}
 80096fc:	bf00      	nop
 80096fe:	e7fe      	b.n	80096fe <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009706:	6850      	ldr	r0, [r2, #4]
 8009708:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800970a:	6892      	ldr	r2, [r2, #8]
 800970c:	4611      	mov	r1, r2
 800970e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2b00      	cmp	r3, #0
 8009714:	f2c0 80ae 	blt.w	8009874 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800971c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800971e:	695b      	ldr	r3, [r3, #20]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d004      	beq.n	800972e <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009726:	3304      	adds	r3, #4
 8009728:	4618      	mov	r0, r3
 800972a:	f7fd fb59 	bl	8006de0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800972e:	463b      	mov	r3, r7
 8009730:	4618      	mov	r0, r3
 8009732:	f7ff ff69 	bl	8009608 <prvSampleTimeNow>
 8009736:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2b09      	cmp	r3, #9
 800973c:	f200 809b 	bhi.w	8009876 <prvProcessReceivedCommands+0x1aa>
 8009740:	a201      	add	r2, pc, #4	; (adr r2, 8009748 <prvProcessReceivedCommands+0x7c>)
 8009742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009746:	bf00      	nop
 8009748:	08009771 	.word	0x08009771
 800974c:	08009771 	.word	0x08009771
 8009750:	08009771 	.word	0x08009771
 8009754:	080097e9 	.word	0x080097e9
 8009758:	080097fd 	.word	0x080097fd
 800975c:	0800984b 	.word	0x0800984b
 8009760:	08009771 	.word	0x08009771
 8009764:	08009771 	.word	0x08009771
 8009768:	080097e9 	.word	0x080097e9
 800976c:	080097fd 	.word	0x080097fd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009772:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009776:	f043 0301 	orr.w	r3, r3, #1
 800977a:	b2da      	uxtb	r2, r3
 800977c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800977e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009782:	68ba      	ldr	r2, [r7, #8]
 8009784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009786:	699b      	ldr	r3, [r3, #24]
 8009788:	18d1      	adds	r1, r2, r3
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800978e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009790:	f7ff ff5a 	bl	8009648 <prvInsertTimerInActiveList>
 8009794:	4603      	mov	r3, r0
 8009796:	2b00      	cmp	r3, #0
 8009798:	d06d      	beq.n	8009876 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800979a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800979c:	6a1b      	ldr	r3, [r3, #32]
 800979e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097a0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80097a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80097a8:	f003 0304 	and.w	r3, r3, #4
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d062      	beq.n	8009876 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80097b0:	68ba      	ldr	r2, [r7, #8]
 80097b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097b4:	699b      	ldr	r3, [r3, #24]
 80097b6:	441a      	add	r2, r3
 80097b8:	2300      	movs	r3, #0
 80097ba:	9300      	str	r3, [sp, #0]
 80097bc:	2300      	movs	r3, #0
 80097be:	2100      	movs	r1, #0
 80097c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097c2:	f7ff fdff 	bl	80093c4 <xTimerGenericCommand>
 80097c6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80097c8:	6a3b      	ldr	r3, [r7, #32]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d153      	bne.n	8009876 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 80097ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d2:	b672      	cpsid	i
 80097d4:	f383 8811 	msr	BASEPRI, r3
 80097d8:	f3bf 8f6f 	isb	sy
 80097dc:	f3bf 8f4f 	dsb	sy
 80097e0:	b662      	cpsie	i
 80097e2:	61bb      	str	r3, [r7, #24]
}
 80097e4:	bf00      	nop
 80097e6:	e7fe      	b.n	80097e6 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80097e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80097ee:	f023 0301 	bic.w	r3, r3, #1
 80097f2:	b2da      	uxtb	r2, r3
 80097f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80097fa:	e03c      	b.n	8009876 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80097fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009802:	f043 0301 	orr.w	r3, r3, #1
 8009806:	b2da      	uxtb	r2, r3
 8009808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800980a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800980e:	68ba      	ldr	r2, [r7, #8]
 8009810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009812:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009816:	699b      	ldr	r3, [r3, #24]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d10c      	bne.n	8009836 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800981c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009820:	b672      	cpsid	i
 8009822:	f383 8811 	msr	BASEPRI, r3
 8009826:	f3bf 8f6f 	isb	sy
 800982a:	f3bf 8f4f 	dsb	sy
 800982e:	b662      	cpsie	i
 8009830:	617b      	str	r3, [r7, #20]
}
 8009832:	bf00      	nop
 8009834:	e7fe      	b.n	8009834 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009838:	699a      	ldr	r2, [r3, #24]
 800983a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800983c:	18d1      	adds	r1, r2, r3
 800983e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009842:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009844:	f7ff ff00 	bl	8009648 <prvInsertTimerInActiveList>
					break;
 8009848:	e015      	b.n	8009876 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800984a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800984c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009850:	f003 0302 	and.w	r3, r3, #2
 8009854:	2b00      	cmp	r3, #0
 8009856:	d103      	bne.n	8009860 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8009858:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800985a:	f000 fbe5 	bl	800a028 <vPortFree>
 800985e:	e00a      	b.n	8009876 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009862:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009866:	f023 0301 	bic.w	r3, r3, #1
 800986a:	b2da      	uxtb	r2, r3
 800986c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800986e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009872:	e000      	b.n	8009876 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009874:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009876:	4b08      	ldr	r3, [pc, #32]	; (8009898 <prvProcessReceivedCommands+0x1cc>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	1d39      	adds	r1, r7, #4
 800987c:	2200      	movs	r2, #0
 800987e:	4618      	mov	r0, r3
 8009880:	f7fd ff92 	bl	80077a8 <xQueueReceive>
 8009884:	4603      	mov	r3, r0
 8009886:	2b00      	cmp	r3, #0
 8009888:	f47f af24 	bne.w	80096d4 <prvProcessReceivedCommands+0x8>
	}
}
 800988c:	bf00      	nop
 800988e:	bf00      	nop
 8009890:	3730      	adds	r7, #48	; 0x30
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}
 8009896:	bf00      	nop
 8009898:	20000e54 	.word	0x20000e54

0800989c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b088      	sub	sp, #32
 80098a0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80098a2:	e04a      	b.n	800993a <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80098a4:	4b2e      	ldr	r3, [pc, #184]	; (8009960 <prvSwitchTimerLists+0xc4>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	68db      	ldr	r3, [r3, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098ae:	4b2c      	ldr	r3, [pc, #176]	; (8009960 <prvSwitchTimerLists+0xc4>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	68db      	ldr	r3, [r3, #12]
 80098b4:	68db      	ldr	r3, [r3, #12]
 80098b6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	3304      	adds	r3, #4
 80098bc:	4618      	mov	r0, r3
 80098be:	f7fd fa8f 	bl	8006de0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	6a1b      	ldr	r3, [r3, #32]
 80098c6:	68f8      	ldr	r0, [r7, #12]
 80098c8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80098d0:	f003 0304 	and.w	r3, r3, #4
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d030      	beq.n	800993a <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	699b      	ldr	r3, [r3, #24]
 80098dc:	693a      	ldr	r2, [r7, #16]
 80098de:	4413      	add	r3, r2
 80098e0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80098e2:	68ba      	ldr	r2, [r7, #8]
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	429a      	cmp	r2, r3
 80098e8:	d90e      	bls.n	8009908 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	68ba      	ldr	r2, [r7, #8]
 80098ee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	68fa      	ldr	r2, [r7, #12]
 80098f4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80098f6:	4b1a      	ldr	r3, [pc, #104]	; (8009960 <prvSwitchTimerLists+0xc4>)
 80098f8:	681a      	ldr	r2, [r3, #0]
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	3304      	adds	r3, #4
 80098fe:	4619      	mov	r1, r3
 8009900:	4610      	mov	r0, r2
 8009902:	f7fd fa34 	bl	8006d6e <vListInsert>
 8009906:	e018      	b.n	800993a <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009908:	2300      	movs	r3, #0
 800990a:	9300      	str	r3, [sp, #0]
 800990c:	2300      	movs	r3, #0
 800990e:	693a      	ldr	r2, [r7, #16]
 8009910:	2100      	movs	r1, #0
 8009912:	68f8      	ldr	r0, [r7, #12]
 8009914:	f7ff fd56 	bl	80093c4 <xTimerGenericCommand>
 8009918:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d10c      	bne.n	800993a <prvSwitchTimerLists+0x9e>
	__asm volatile
 8009920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009924:	b672      	cpsid	i
 8009926:	f383 8811 	msr	BASEPRI, r3
 800992a:	f3bf 8f6f 	isb	sy
 800992e:	f3bf 8f4f 	dsb	sy
 8009932:	b662      	cpsie	i
 8009934:	603b      	str	r3, [r7, #0]
}
 8009936:	bf00      	nop
 8009938:	e7fe      	b.n	8009938 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800993a:	4b09      	ldr	r3, [pc, #36]	; (8009960 <prvSwitchTimerLists+0xc4>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d1af      	bne.n	80098a4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009944:	4b06      	ldr	r3, [pc, #24]	; (8009960 <prvSwitchTimerLists+0xc4>)
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800994a:	4b06      	ldr	r3, [pc, #24]	; (8009964 <prvSwitchTimerLists+0xc8>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	4a04      	ldr	r2, [pc, #16]	; (8009960 <prvSwitchTimerLists+0xc4>)
 8009950:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009952:	4a04      	ldr	r2, [pc, #16]	; (8009964 <prvSwitchTimerLists+0xc8>)
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	6013      	str	r3, [r2, #0]
}
 8009958:	bf00      	nop
 800995a:	3718      	adds	r7, #24
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}
 8009960:	20000e4c 	.word	0x20000e4c
 8009964:	20000e50 	.word	0x20000e50

08009968 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b082      	sub	sp, #8
 800996c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800996e:	f000 f965 	bl	8009c3c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009972:	4b15      	ldr	r3, [pc, #84]	; (80099c8 <prvCheckForValidListAndQueue+0x60>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d120      	bne.n	80099bc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800997a:	4814      	ldr	r0, [pc, #80]	; (80099cc <prvCheckForValidListAndQueue+0x64>)
 800997c:	f7fd f9a6 	bl	8006ccc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009980:	4813      	ldr	r0, [pc, #76]	; (80099d0 <prvCheckForValidListAndQueue+0x68>)
 8009982:	f7fd f9a3 	bl	8006ccc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009986:	4b13      	ldr	r3, [pc, #76]	; (80099d4 <prvCheckForValidListAndQueue+0x6c>)
 8009988:	4a10      	ldr	r2, [pc, #64]	; (80099cc <prvCheckForValidListAndQueue+0x64>)
 800998a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800998c:	4b12      	ldr	r3, [pc, #72]	; (80099d8 <prvCheckForValidListAndQueue+0x70>)
 800998e:	4a10      	ldr	r2, [pc, #64]	; (80099d0 <prvCheckForValidListAndQueue+0x68>)
 8009990:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009992:	2300      	movs	r3, #0
 8009994:	9300      	str	r3, [sp, #0]
 8009996:	4b11      	ldr	r3, [pc, #68]	; (80099dc <prvCheckForValidListAndQueue+0x74>)
 8009998:	4a11      	ldr	r2, [pc, #68]	; (80099e0 <prvCheckForValidListAndQueue+0x78>)
 800999a:	2110      	movs	r1, #16
 800999c:	200a      	movs	r0, #10
 800999e:	f7fd fab3 	bl	8006f08 <xQueueGenericCreateStatic>
 80099a2:	4603      	mov	r3, r0
 80099a4:	4a08      	ldr	r2, [pc, #32]	; (80099c8 <prvCheckForValidListAndQueue+0x60>)
 80099a6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80099a8:	4b07      	ldr	r3, [pc, #28]	; (80099c8 <prvCheckForValidListAndQueue+0x60>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d005      	beq.n	80099bc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80099b0:	4b05      	ldr	r3, [pc, #20]	; (80099c8 <prvCheckForValidListAndQueue+0x60>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	490b      	ldr	r1, [pc, #44]	; (80099e4 <prvCheckForValidListAndQueue+0x7c>)
 80099b6:	4618      	mov	r0, r3
 80099b8:	f7fe fb04 	bl	8007fc4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80099bc:	f000 f972 	bl	8009ca4 <vPortExitCritical>
}
 80099c0:	bf00      	nop
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd80      	pop	{r7, pc}
 80099c6:	bf00      	nop
 80099c8:	20000e54 	.word	0x20000e54
 80099cc:	20000e24 	.word	0x20000e24
 80099d0:	20000e38 	.word	0x20000e38
 80099d4:	20000e4c 	.word	0x20000e4c
 80099d8:	20000e50 	.word	0x20000e50
 80099dc:	20000f00 	.word	0x20000f00
 80099e0:	20000e60 	.word	0x20000e60
 80099e4:	0801b9c4 	.word	0x0801b9c4

080099e8 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b08a      	sub	sp, #40	; 0x28
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	60f8      	str	r0, [r7, #12]
 80099f0:	60b9      	str	r1, [r7, #8]
 80099f2:	607a      	str	r2, [r7, #4]
 80099f4:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80099f6:	f06f 0301 	mvn.w	r3, #1
 80099fa:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009a08:	4b06      	ldr	r3, [pc, #24]	; (8009a24 <xTimerPendFunctionCallFromISR+0x3c>)
 8009a0a:	6818      	ldr	r0, [r3, #0]
 8009a0c:	f107 0114 	add.w	r1, r7, #20
 8009a10:	2300      	movs	r3, #0
 8009a12:	683a      	ldr	r2, [r7, #0]
 8009a14:	f7fd fd92 	bl	800753c <xQueueGenericSendFromISR>
 8009a18:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8009a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3728      	adds	r7, #40	; 0x28
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}
 8009a24:	20000e54 	.word	0x20000e54

08009a28 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b085      	sub	sp, #20
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	60f8      	str	r0, [r7, #12]
 8009a30:	60b9      	str	r1, [r7, #8]
 8009a32:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	3b04      	subs	r3, #4
 8009a38:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009a40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	3b04      	subs	r3, #4
 8009a46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	f023 0201 	bic.w	r2, r3, #1
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	3b04      	subs	r3, #4
 8009a56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009a58:	4a0c      	ldr	r2, [pc, #48]	; (8009a8c <pxPortInitialiseStack+0x64>)
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	3b14      	subs	r3, #20
 8009a62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009a64:	687a      	ldr	r2, [r7, #4]
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	3b04      	subs	r3, #4
 8009a6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	f06f 0202 	mvn.w	r2, #2
 8009a76:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	3b20      	subs	r3, #32
 8009a7c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	3714      	adds	r7, #20
 8009a84:	46bd      	mov	sp, r7
 8009a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8a:	4770      	bx	lr
 8009a8c:	08009a91 	.word	0x08009a91

08009a90 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009a90:	b480      	push	{r7}
 8009a92:	b085      	sub	sp, #20
 8009a94:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009a96:	2300      	movs	r3, #0
 8009a98:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009a9a:	4b14      	ldr	r3, [pc, #80]	; (8009aec <prvTaskExitError+0x5c>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aa2:	d00c      	beq.n	8009abe <prvTaskExitError+0x2e>
	__asm volatile
 8009aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa8:	b672      	cpsid	i
 8009aaa:	f383 8811 	msr	BASEPRI, r3
 8009aae:	f3bf 8f6f 	isb	sy
 8009ab2:	f3bf 8f4f 	dsb	sy
 8009ab6:	b662      	cpsie	i
 8009ab8:	60fb      	str	r3, [r7, #12]
}
 8009aba:	bf00      	nop
 8009abc:	e7fe      	b.n	8009abc <prvTaskExitError+0x2c>
	__asm volatile
 8009abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ac2:	b672      	cpsid	i
 8009ac4:	f383 8811 	msr	BASEPRI, r3
 8009ac8:	f3bf 8f6f 	isb	sy
 8009acc:	f3bf 8f4f 	dsb	sy
 8009ad0:	b662      	cpsie	i
 8009ad2:	60bb      	str	r3, [r7, #8]
}
 8009ad4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009ad6:	bf00      	nop
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d0fc      	beq.n	8009ad8 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009ade:	bf00      	nop
 8009ae0:	bf00      	nop
 8009ae2:	3714      	adds	r7, #20
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aea:	4770      	bx	lr
 8009aec:	2000000c 	.word	0x2000000c

08009af0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009af0:	4b07      	ldr	r3, [pc, #28]	; (8009b10 <pxCurrentTCBConst2>)
 8009af2:	6819      	ldr	r1, [r3, #0]
 8009af4:	6808      	ldr	r0, [r1, #0]
 8009af6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009afa:	f380 8809 	msr	PSP, r0
 8009afe:	f3bf 8f6f 	isb	sy
 8009b02:	f04f 0000 	mov.w	r0, #0
 8009b06:	f380 8811 	msr	BASEPRI, r0
 8009b0a:	4770      	bx	lr
 8009b0c:	f3af 8000 	nop.w

08009b10 <pxCurrentTCBConst2>:
 8009b10:	20000924 	.word	0x20000924
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009b14:	bf00      	nop
 8009b16:	bf00      	nop

08009b18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009b18:	4808      	ldr	r0, [pc, #32]	; (8009b3c <prvPortStartFirstTask+0x24>)
 8009b1a:	6800      	ldr	r0, [r0, #0]
 8009b1c:	6800      	ldr	r0, [r0, #0]
 8009b1e:	f380 8808 	msr	MSP, r0
 8009b22:	f04f 0000 	mov.w	r0, #0
 8009b26:	f380 8814 	msr	CONTROL, r0
 8009b2a:	b662      	cpsie	i
 8009b2c:	b661      	cpsie	f
 8009b2e:	f3bf 8f4f 	dsb	sy
 8009b32:	f3bf 8f6f 	isb	sy
 8009b36:	df00      	svc	0
 8009b38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009b3a:	bf00      	nop
 8009b3c:	e000ed08 	.word	0xe000ed08

08009b40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b084      	sub	sp, #16
 8009b44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009b46:	4b37      	ldr	r3, [pc, #220]	; (8009c24 <xPortStartScheduler+0xe4>)
 8009b48:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	781b      	ldrb	r3, [r3, #0]
 8009b4e:	b2db      	uxtb	r3, r3
 8009b50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	22ff      	movs	r2, #255	; 0xff
 8009b56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	781b      	ldrb	r3, [r3, #0]
 8009b5c:	b2db      	uxtb	r3, r3
 8009b5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009b60:	78fb      	ldrb	r3, [r7, #3]
 8009b62:	b2db      	uxtb	r3, r3
 8009b64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009b68:	b2da      	uxtb	r2, r3
 8009b6a:	4b2f      	ldr	r3, [pc, #188]	; (8009c28 <xPortStartScheduler+0xe8>)
 8009b6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009b6e:	4b2f      	ldr	r3, [pc, #188]	; (8009c2c <xPortStartScheduler+0xec>)
 8009b70:	2207      	movs	r2, #7
 8009b72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009b74:	e009      	b.n	8009b8a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009b76:	4b2d      	ldr	r3, [pc, #180]	; (8009c2c <xPortStartScheduler+0xec>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	3b01      	subs	r3, #1
 8009b7c:	4a2b      	ldr	r2, [pc, #172]	; (8009c2c <xPortStartScheduler+0xec>)
 8009b7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009b80:	78fb      	ldrb	r3, [r7, #3]
 8009b82:	b2db      	uxtb	r3, r3
 8009b84:	005b      	lsls	r3, r3, #1
 8009b86:	b2db      	uxtb	r3, r3
 8009b88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009b8a:	78fb      	ldrb	r3, [r7, #3]
 8009b8c:	b2db      	uxtb	r3, r3
 8009b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b92:	2b80      	cmp	r3, #128	; 0x80
 8009b94:	d0ef      	beq.n	8009b76 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009b96:	4b25      	ldr	r3, [pc, #148]	; (8009c2c <xPortStartScheduler+0xec>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f1c3 0307 	rsb	r3, r3, #7
 8009b9e:	2b04      	cmp	r3, #4
 8009ba0:	d00c      	beq.n	8009bbc <xPortStartScheduler+0x7c>
	__asm volatile
 8009ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba6:	b672      	cpsid	i
 8009ba8:	f383 8811 	msr	BASEPRI, r3
 8009bac:	f3bf 8f6f 	isb	sy
 8009bb0:	f3bf 8f4f 	dsb	sy
 8009bb4:	b662      	cpsie	i
 8009bb6:	60bb      	str	r3, [r7, #8]
}
 8009bb8:	bf00      	nop
 8009bba:	e7fe      	b.n	8009bba <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009bbc:	4b1b      	ldr	r3, [pc, #108]	; (8009c2c <xPortStartScheduler+0xec>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	021b      	lsls	r3, r3, #8
 8009bc2:	4a1a      	ldr	r2, [pc, #104]	; (8009c2c <xPortStartScheduler+0xec>)
 8009bc4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009bc6:	4b19      	ldr	r3, [pc, #100]	; (8009c2c <xPortStartScheduler+0xec>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009bce:	4a17      	ldr	r2, [pc, #92]	; (8009c2c <xPortStartScheduler+0xec>)
 8009bd0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	b2da      	uxtb	r2, r3
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009bda:	4b15      	ldr	r3, [pc, #84]	; (8009c30 <xPortStartScheduler+0xf0>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	4a14      	ldr	r2, [pc, #80]	; (8009c30 <xPortStartScheduler+0xf0>)
 8009be0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009be4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009be6:	4b12      	ldr	r3, [pc, #72]	; (8009c30 <xPortStartScheduler+0xf0>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	4a11      	ldr	r2, [pc, #68]	; (8009c30 <xPortStartScheduler+0xf0>)
 8009bec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009bf0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009bf2:	f000 f8dd 	bl	8009db0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009bf6:	4b0f      	ldr	r3, [pc, #60]	; (8009c34 <xPortStartScheduler+0xf4>)
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009bfc:	f000 f8fc 	bl	8009df8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009c00:	4b0d      	ldr	r3, [pc, #52]	; (8009c38 <xPortStartScheduler+0xf8>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	4a0c      	ldr	r2, [pc, #48]	; (8009c38 <xPortStartScheduler+0xf8>)
 8009c06:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009c0a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009c0c:	f7ff ff84 	bl	8009b18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009c10:	f7fe fe56 	bl	80088c0 <vTaskSwitchContext>
	prvTaskExitError();
 8009c14:	f7ff ff3c 	bl	8009a90 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009c18:	2300      	movs	r3, #0
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3710      	adds	r7, #16
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}
 8009c22:	bf00      	nop
 8009c24:	e000e400 	.word	0xe000e400
 8009c28:	20000f50 	.word	0x20000f50
 8009c2c:	20000f54 	.word	0x20000f54
 8009c30:	e000ed20 	.word	0xe000ed20
 8009c34:	2000000c 	.word	0x2000000c
 8009c38:	e000ef34 	.word	0xe000ef34

08009c3c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	b083      	sub	sp, #12
 8009c40:	af00      	add	r7, sp, #0
	__asm volatile
 8009c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c46:	b672      	cpsid	i
 8009c48:	f383 8811 	msr	BASEPRI, r3
 8009c4c:	f3bf 8f6f 	isb	sy
 8009c50:	f3bf 8f4f 	dsb	sy
 8009c54:	b662      	cpsie	i
 8009c56:	607b      	str	r3, [r7, #4]
}
 8009c58:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009c5a:	4b10      	ldr	r3, [pc, #64]	; (8009c9c <vPortEnterCritical+0x60>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	3301      	adds	r3, #1
 8009c60:	4a0e      	ldr	r2, [pc, #56]	; (8009c9c <vPortEnterCritical+0x60>)
 8009c62:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009c64:	4b0d      	ldr	r3, [pc, #52]	; (8009c9c <vPortEnterCritical+0x60>)
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	2b01      	cmp	r3, #1
 8009c6a:	d111      	bne.n	8009c90 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009c6c:	4b0c      	ldr	r3, [pc, #48]	; (8009ca0 <vPortEnterCritical+0x64>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	b2db      	uxtb	r3, r3
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d00c      	beq.n	8009c90 <vPortEnterCritical+0x54>
	__asm volatile
 8009c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c7a:	b672      	cpsid	i
 8009c7c:	f383 8811 	msr	BASEPRI, r3
 8009c80:	f3bf 8f6f 	isb	sy
 8009c84:	f3bf 8f4f 	dsb	sy
 8009c88:	b662      	cpsie	i
 8009c8a:	603b      	str	r3, [r7, #0]
}
 8009c8c:	bf00      	nop
 8009c8e:	e7fe      	b.n	8009c8e <vPortEnterCritical+0x52>
	}
}
 8009c90:	bf00      	nop
 8009c92:	370c      	adds	r7, #12
 8009c94:	46bd      	mov	sp, r7
 8009c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9a:	4770      	bx	lr
 8009c9c:	2000000c 	.word	0x2000000c
 8009ca0:	e000ed04 	.word	0xe000ed04

08009ca4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b083      	sub	sp, #12
 8009ca8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009caa:	4b13      	ldr	r3, [pc, #76]	; (8009cf8 <vPortExitCritical+0x54>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d10c      	bne.n	8009ccc <vPortExitCritical+0x28>
	__asm volatile
 8009cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cb6:	b672      	cpsid	i
 8009cb8:	f383 8811 	msr	BASEPRI, r3
 8009cbc:	f3bf 8f6f 	isb	sy
 8009cc0:	f3bf 8f4f 	dsb	sy
 8009cc4:	b662      	cpsie	i
 8009cc6:	607b      	str	r3, [r7, #4]
}
 8009cc8:	bf00      	nop
 8009cca:	e7fe      	b.n	8009cca <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8009ccc:	4b0a      	ldr	r3, [pc, #40]	; (8009cf8 <vPortExitCritical+0x54>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	3b01      	subs	r3, #1
 8009cd2:	4a09      	ldr	r2, [pc, #36]	; (8009cf8 <vPortExitCritical+0x54>)
 8009cd4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009cd6:	4b08      	ldr	r3, [pc, #32]	; (8009cf8 <vPortExitCritical+0x54>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d105      	bne.n	8009cea <vPortExitCritical+0x46>
 8009cde:	2300      	movs	r3, #0
 8009ce0:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	f383 8811 	msr	BASEPRI, r3
}
 8009ce8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009cea:	bf00      	nop
 8009cec:	370c      	adds	r7, #12
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf4:	4770      	bx	lr
 8009cf6:	bf00      	nop
 8009cf8:	2000000c 	.word	0x2000000c
 8009cfc:	00000000 	.word	0x00000000

08009d00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009d00:	f3ef 8009 	mrs	r0, PSP
 8009d04:	f3bf 8f6f 	isb	sy
 8009d08:	4b15      	ldr	r3, [pc, #84]	; (8009d60 <pxCurrentTCBConst>)
 8009d0a:	681a      	ldr	r2, [r3, #0]
 8009d0c:	f01e 0f10 	tst.w	lr, #16
 8009d10:	bf08      	it	eq
 8009d12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009d16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d1a:	6010      	str	r0, [r2, #0]
 8009d1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009d20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009d24:	b672      	cpsid	i
 8009d26:	f380 8811 	msr	BASEPRI, r0
 8009d2a:	f3bf 8f4f 	dsb	sy
 8009d2e:	f3bf 8f6f 	isb	sy
 8009d32:	b662      	cpsie	i
 8009d34:	f7fe fdc4 	bl	80088c0 <vTaskSwitchContext>
 8009d38:	f04f 0000 	mov.w	r0, #0
 8009d3c:	f380 8811 	msr	BASEPRI, r0
 8009d40:	bc09      	pop	{r0, r3}
 8009d42:	6819      	ldr	r1, [r3, #0]
 8009d44:	6808      	ldr	r0, [r1, #0]
 8009d46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d4a:	f01e 0f10 	tst.w	lr, #16
 8009d4e:	bf08      	it	eq
 8009d50:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009d54:	f380 8809 	msr	PSP, r0
 8009d58:	f3bf 8f6f 	isb	sy
 8009d5c:	4770      	bx	lr
 8009d5e:	bf00      	nop

08009d60 <pxCurrentTCBConst>:
 8009d60:	20000924 	.word	0x20000924
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009d64:	bf00      	nop
 8009d66:	bf00      	nop

08009d68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b082      	sub	sp, #8
 8009d6c:	af00      	add	r7, sp, #0
	__asm volatile
 8009d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d72:	b672      	cpsid	i
 8009d74:	f383 8811 	msr	BASEPRI, r3
 8009d78:	f3bf 8f6f 	isb	sy
 8009d7c:	f3bf 8f4f 	dsb	sy
 8009d80:	b662      	cpsie	i
 8009d82:	607b      	str	r3, [r7, #4]
}
 8009d84:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009d86:	f7fe fcdf 	bl	8008748 <xTaskIncrementTick>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d003      	beq.n	8009d98 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009d90:	4b06      	ldr	r3, [pc, #24]	; (8009dac <SysTick_Handler+0x44>)
 8009d92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d96:	601a      	str	r2, [r3, #0]
 8009d98:	2300      	movs	r3, #0
 8009d9a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	f383 8811 	msr	BASEPRI, r3
}
 8009da2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009da4:	bf00      	nop
 8009da6:	3708      	adds	r7, #8
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}
 8009dac:	e000ed04 	.word	0xe000ed04

08009db0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009db0:	b480      	push	{r7}
 8009db2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009db4:	4b0b      	ldr	r3, [pc, #44]	; (8009de4 <vPortSetupTimerInterrupt+0x34>)
 8009db6:	2200      	movs	r2, #0
 8009db8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009dba:	4b0b      	ldr	r3, [pc, #44]	; (8009de8 <vPortSetupTimerInterrupt+0x38>)
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009dc0:	4b0a      	ldr	r3, [pc, #40]	; (8009dec <vPortSetupTimerInterrupt+0x3c>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	4a0a      	ldr	r2, [pc, #40]	; (8009df0 <vPortSetupTimerInterrupt+0x40>)
 8009dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8009dca:	099b      	lsrs	r3, r3, #6
 8009dcc:	4a09      	ldr	r2, [pc, #36]	; (8009df4 <vPortSetupTimerInterrupt+0x44>)
 8009dce:	3b01      	subs	r3, #1
 8009dd0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009dd2:	4b04      	ldr	r3, [pc, #16]	; (8009de4 <vPortSetupTimerInterrupt+0x34>)
 8009dd4:	2207      	movs	r2, #7
 8009dd6:	601a      	str	r2, [r3, #0]
}
 8009dd8:	bf00      	nop
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de0:	4770      	bx	lr
 8009de2:	bf00      	nop
 8009de4:	e000e010 	.word	0xe000e010
 8009de8:	e000e018 	.word	0xe000e018
 8009dec:	20000000 	.word	0x20000000
 8009df0:	10624dd3 	.word	0x10624dd3
 8009df4:	e000e014 	.word	0xe000e014

08009df8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009df8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009e08 <vPortEnableVFP+0x10>
 8009dfc:	6801      	ldr	r1, [r0, #0]
 8009dfe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009e02:	6001      	str	r1, [r0, #0]
 8009e04:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009e06:	bf00      	nop
 8009e08:	e000ed88 	.word	0xe000ed88

08009e0c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b085      	sub	sp, #20
 8009e10:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009e12:	f3ef 8305 	mrs	r3, IPSR
 8009e16:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	2b0f      	cmp	r3, #15
 8009e1c:	d916      	bls.n	8009e4c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009e1e:	4a19      	ldr	r2, [pc, #100]	; (8009e84 <vPortValidateInterruptPriority+0x78>)
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	4413      	add	r3, r2
 8009e24:	781b      	ldrb	r3, [r3, #0]
 8009e26:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009e28:	4b17      	ldr	r3, [pc, #92]	; (8009e88 <vPortValidateInterruptPriority+0x7c>)
 8009e2a:	781b      	ldrb	r3, [r3, #0]
 8009e2c:	7afa      	ldrb	r2, [r7, #11]
 8009e2e:	429a      	cmp	r2, r3
 8009e30:	d20c      	bcs.n	8009e4c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8009e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e36:	b672      	cpsid	i
 8009e38:	f383 8811 	msr	BASEPRI, r3
 8009e3c:	f3bf 8f6f 	isb	sy
 8009e40:	f3bf 8f4f 	dsb	sy
 8009e44:	b662      	cpsie	i
 8009e46:	607b      	str	r3, [r7, #4]
}
 8009e48:	bf00      	nop
 8009e4a:	e7fe      	b.n	8009e4a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009e4c:	4b0f      	ldr	r3, [pc, #60]	; (8009e8c <vPortValidateInterruptPriority+0x80>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009e54:	4b0e      	ldr	r3, [pc, #56]	; (8009e90 <vPortValidateInterruptPriority+0x84>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	429a      	cmp	r2, r3
 8009e5a:	d90c      	bls.n	8009e76 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8009e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e60:	b672      	cpsid	i
 8009e62:	f383 8811 	msr	BASEPRI, r3
 8009e66:	f3bf 8f6f 	isb	sy
 8009e6a:	f3bf 8f4f 	dsb	sy
 8009e6e:	b662      	cpsie	i
 8009e70:	603b      	str	r3, [r7, #0]
}
 8009e72:	bf00      	nop
 8009e74:	e7fe      	b.n	8009e74 <vPortValidateInterruptPriority+0x68>
	}
 8009e76:	bf00      	nop
 8009e78:	3714      	adds	r7, #20
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e80:	4770      	bx	lr
 8009e82:	bf00      	nop
 8009e84:	e000e3f0 	.word	0xe000e3f0
 8009e88:	20000f50 	.word	0x20000f50
 8009e8c:	e000ed0c 	.word	0xe000ed0c
 8009e90:	20000f54 	.word	0x20000f54

08009e94 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b08a      	sub	sp, #40	; 0x28
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009ea0:	f7fe fb82 	bl	80085a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009ea4:	4b5b      	ldr	r3, [pc, #364]	; (800a014 <pvPortMalloc+0x180>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d101      	bne.n	8009eb0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009eac:	f000 f91a 	bl	800a0e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009eb0:	4b59      	ldr	r3, [pc, #356]	; (800a018 <pvPortMalloc+0x184>)
 8009eb2:	681a      	ldr	r2, [r3, #0]
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	4013      	ands	r3, r2
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	f040 8092 	bne.w	8009fe2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d01f      	beq.n	8009f04 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8009ec4:	2208      	movs	r2, #8
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	4413      	add	r3, r2
 8009eca:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f003 0307 	and.w	r3, r3, #7
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d016      	beq.n	8009f04 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f023 0307 	bic.w	r3, r3, #7
 8009edc:	3308      	adds	r3, #8
 8009ede:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f003 0307 	and.w	r3, r3, #7
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d00c      	beq.n	8009f04 <pvPortMalloc+0x70>
	__asm volatile
 8009eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eee:	b672      	cpsid	i
 8009ef0:	f383 8811 	msr	BASEPRI, r3
 8009ef4:	f3bf 8f6f 	isb	sy
 8009ef8:	f3bf 8f4f 	dsb	sy
 8009efc:	b662      	cpsie	i
 8009efe:	617b      	str	r3, [r7, #20]
}
 8009f00:	bf00      	nop
 8009f02:	e7fe      	b.n	8009f02 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d06b      	beq.n	8009fe2 <pvPortMalloc+0x14e>
 8009f0a:	4b44      	ldr	r3, [pc, #272]	; (800a01c <pvPortMalloc+0x188>)
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	687a      	ldr	r2, [r7, #4]
 8009f10:	429a      	cmp	r2, r3
 8009f12:	d866      	bhi.n	8009fe2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009f14:	4b42      	ldr	r3, [pc, #264]	; (800a020 <pvPortMalloc+0x18c>)
 8009f16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009f18:	4b41      	ldr	r3, [pc, #260]	; (800a020 <pvPortMalloc+0x18c>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009f1e:	e004      	b.n	8009f2a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8009f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f2c:	685b      	ldr	r3, [r3, #4]
 8009f2e:	687a      	ldr	r2, [r7, #4]
 8009f30:	429a      	cmp	r2, r3
 8009f32:	d903      	bls.n	8009f3c <pvPortMalloc+0xa8>
 8009f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d1f1      	bne.n	8009f20 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009f3c:	4b35      	ldr	r3, [pc, #212]	; (800a014 <pvPortMalloc+0x180>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f42:	429a      	cmp	r2, r3
 8009f44:	d04d      	beq.n	8009fe2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009f46:	6a3b      	ldr	r3, [r7, #32]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	2208      	movs	r2, #8
 8009f4c:	4413      	add	r3, r2
 8009f4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f52:	681a      	ldr	r2, [r3, #0]
 8009f54:	6a3b      	ldr	r3, [r7, #32]
 8009f56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f5a:	685a      	ldr	r2, [r3, #4]
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	1ad2      	subs	r2, r2, r3
 8009f60:	2308      	movs	r3, #8
 8009f62:	005b      	lsls	r3, r3, #1
 8009f64:	429a      	cmp	r2, r3
 8009f66:	d921      	bls.n	8009fac <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	4413      	add	r3, r2
 8009f6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009f70:	69bb      	ldr	r3, [r7, #24]
 8009f72:	f003 0307 	and.w	r3, r3, #7
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d00c      	beq.n	8009f94 <pvPortMalloc+0x100>
	__asm volatile
 8009f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f7e:	b672      	cpsid	i
 8009f80:	f383 8811 	msr	BASEPRI, r3
 8009f84:	f3bf 8f6f 	isb	sy
 8009f88:	f3bf 8f4f 	dsb	sy
 8009f8c:	b662      	cpsie	i
 8009f8e:	613b      	str	r3, [r7, #16]
}
 8009f90:	bf00      	nop
 8009f92:	e7fe      	b.n	8009f92 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f96:	685a      	ldr	r2, [r3, #4]
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	1ad2      	subs	r2, r2, r3
 8009f9c:	69bb      	ldr	r3, [r7, #24]
 8009f9e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa2:	687a      	ldr	r2, [r7, #4]
 8009fa4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009fa6:	69b8      	ldr	r0, [r7, #24]
 8009fa8:	f000 f8fe 	bl	800a1a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009fac:	4b1b      	ldr	r3, [pc, #108]	; (800a01c <pvPortMalloc+0x188>)
 8009fae:	681a      	ldr	r2, [r3, #0]
 8009fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fb2:	685b      	ldr	r3, [r3, #4]
 8009fb4:	1ad3      	subs	r3, r2, r3
 8009fb6:	4a19      	ldr	r2, [pc, #100]	; (800a01c <pvPortMalloc+0x188>)
 8009fb8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009fba:	4b18      	ldr	r3, [pc, #96]	; (800a01c <pvPortMalloc+0x188>)
 8009fbc:	681a      	ldr	r2, [r3, #0]
 8009fbe:	4b19      	ldr	r3, [pc, #100]	; (800a024 <pvPortMalloc+0x190>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	429a      	cmp	r2, r3
 8009fc4:	d203      	bcs.n	8009fce <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009fc6:	4b15      	ldr	r3, [pc, #84]	; (800a01c <pvPortMalloc+0x188>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	4a16      	ldr	r2, [pc, #88]	; (800a024 <pvPortMalloc+0x190>)
 8009fcc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd0:	685a      	ldr	r2, [r3, #4]
 8009fd2:	4b11      	ldr	r3, [pc, #68]	; (800a018 <pvPortMalloc+0x184>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	431a      	orrs	r2, r3
 8009fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fda:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fde:	2200      	movs	r2, #0
 8009fe0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009fe2:	f7fe faef 	bl	80085c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009fe6:	69fb      	ldr	r3, [r7, #28]
 8009fe8:	f003 0307 	and.w	r3, r3, #7
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d00c      	beq.n	800a00a <pvPortMalloc+0x176>
	__asm volatile
 8009ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff4:	b672      	cpsid	i
 8009ff6:	f383 8811 	msr	BASEPRI, r3
 8009ffa:	f3bf 8f6f 	isb	sy
 8009ffe:	f3bf 8f4f 	dsb	sy
 800a002:	b662      	cpsie	i
 800a004:	60fb      	str	r3, [r7, #12]
}
 800a006:	bf00      	nop
 800a008:	e7fe      	b.n	800a008 <pvPortMalloc+0x174>
	return pvReturn;
 800a00a:	69fb      	ldr	r3, [r7, #28]
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	3728      	adds	r7, #40	; 0x28
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}
 800a014:	20004b60 	.word	0x20004b60
 800a018:	20004b6c 	.word	0x20004b6c
 800a01c:	20004b64 	.word	0x20004b64
 800a020:	20004b58 	.word	0x20004b58
 800a024:	20004b68 	.word	0x20004b68

0800a028 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b086      	sub	sp, #24
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d04c      	beq.n	800a0d4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a03a:	2308      	movs	r3, #8
 800a03c:	425b      	negs	r3, r3
 800a03e:	697a      	ldr	r2, [r7, #20]
 800a040:	4413      	add	r3, r2
 800a042:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a044:	697b      	ldr	r3, [r7, #20]
 800a046:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a048:	693b      	ldr	r3, [r7, #16]
 800a04a:	685a      	ldr	r2, [r3, #4]
 800a04c:	4b23      	ldr	r3, [pc, #140]	; (800a0dc <vPortFree+0xb4>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	4013      	ands	r3, r2
 800a052:	2b00      	cmp	r3, #0
 800a054:	d10c      	bne.n	800a070 <vPortFree+0x48>
	__asm volatile
 800a056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a05a:	b672      	cpsid	i
 800a05c:	f383 8811 	msr	BASEPRI, r3
 800a060:	f3bf 8f6f 	isb	sy
 800a064:	f3bf 8f4f 	dsb	sy
 800a068:	b662      	cpsie	i
 800a06a:	60fb      	str	r3, [r7, #12]
}
 800a06c:	bf00      	nop
 800a06e:	e7fe      	b.n	800a06e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a070:	693b      	ldr	r3, [r7, #16]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d00c      	beq.n	800a092 <vPortFree+0x6a>
	__asm volatile
 800a078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a07c:	b672      	cpsid	i
 800a07e:	f383 8811 	msr	BASEPRI, r3
 800a082:	f3bf 8f6f 	isb	sy
 800a086:	f3bf 8f4f 	dsb	sy
 800a08a:	b662      	cpsie	i
 800a08c:	60bb      	str	r3, [r7, #8]
}
 800a08e:	bf00      	nop
 800a090:	e7fe      	b.n	800a090 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a092:	693b      	ldr	r3, [r7, #16]
 800a094:	685a      	ldr	r2, [r3, #4]
 800a096:	4b11      	ldr	r3, [pc, #68]	; (800a0dc <vPortFree+0xb4>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	4013      	ands	r3, r2
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d019      	beq.n	800a0d4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a0a0:	693b      	ldr	r3, [r7, #16]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d115      	bne.n	800a0d4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a0a8:	693b      	ldr	r3, [r7, #16]
 800a0aa:	685a      	ldr	r2, [r3, #4]
 800a0ac:	4b0b      	ldr	r3, [pc, #44]	; (800a0dc <vPortFree+0xb4>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	43db      	mvns	r3, r3
 800a0b2:	401a      	ands	r2, r3
 800a0b4:	693b      	ldr	r3, [r7, #16]
 800a0b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a0b8:	f7fe fa76 	bl	80085a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a0bc:	693b      	ldr	r3, [r7, #16]
 800a0be:	685a      	ldr	r2, [r3, #4]
 800a0c0:	4b07      	ldr	r3, [pc, #28]	; (800a0e0 <vPortFree+0xb8>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	4413      	add	r3, r2
 800a0c6:	4a06      	ldr	r2, [pc, #24]	; (800a0e0 <vPortFree+0xb8>)
 800a0c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a0ca:	6938      	ldr	r0, [r7, #16]
 800a0cc:	f000 f86c 	bl	800a1a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a0d0:	f7fe fa78 	bl	80085c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a0d4:	bf00      	nop
 800a0d6:	3718      	adds	r7, #24
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}
 800a0dc:	20004b6c 	.word	0x20004b6c
 800a0e0:	20004b64 	.word	0x20004b64

0800a0e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b085      	sub	sp, #20
 800a0e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a0ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a0ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a0f0:	4b27      	ldr	r3, [pc, #156]	; (800a190 <prvHeapInit+0xac>)
 800a0f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	f003 0307 	and.w	r3, r3, #7
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d00c      	beq.n	800a118 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	3307      	adds	r3, #7
 800a102:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	f023 0307 	bic.w	r3, r3, #7
 800a10a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a10c:	68ba      	ldr	r2, [r7, #8]
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	1ad3      	subs	r3, r2, r3
 800a112:	4a1f      	ldr	r2, [pc, #124]	; (800a190 <prvHeapInit+0xac>)
 800a114:	4413      	add	r3, r2
 800a116:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a11c:	4a1d      	ldr	r2, [pc, #116]	; (800a194 <prvHeapInit+0xb0>)
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a122:	4b1c      	ldr	r3, [pc, #112]	; (800a194 <prvHeapInit+0xb0>)
 800a124:	2200      	movs	r2, #0
 800a126:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	68ba      	ldr	r2, [r7, #8]
 800a12c:	4413      	add	r3, r2
 800a12e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a130:	2208      	movs	r2, #8
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	1a9b      	subs	r3, r3, r2
 800a136:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	f023 0307 	bic.w	r3, r3, #7
 800a13e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	4a15      	ldr	r2, [pc, #84]	; (800a198 <prvHeapInit+0xb4>)
 800a144:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a146:	4b14      	ldr	r3, [pc, #80]	; (800a198 <prvHeapInit+0xb4>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	2200      	movs	r2, #0
 800a14c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a14e:	4b12      	ldr	r3, [pc, #72]	; (800a198 <prvHeapInit+0xb4>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	2200      	movs	r2, #0
 800a154:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	68fa      	ldr	r2, [r7, #12]
 800a15e:	1ad2      	subs	r2, r2, r3
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a164:	4b0c      	ldr	r3, [pc, #48]	; (800a198 <prvHeapInit+0xb4>)
 800a166:	681a      	ldr	r2, [r3, #0]
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	685b      	ldr	r3, [r3, #4]
 800a170:	4a0a      	ldr	r2, [pc, #40]	; (800a19c <prvHeapInit+0xb8>)
 800a172:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	685b      	ldr	r3, [r3, #4]
 800a178:	4a09      	ldr	r2, [pc, #36]	; (800a1a0 <prvHeapInit+0xbc>)
 800a17a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a17c:	4b09      	ldr	r3, [pc, #36]	; (800a1a4 <prvHeapInit+0xc0>)
 800a17e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a182:	601a      	str	r2, [r3, #0]
}
 800a184:	bf00      	nop
 800a186:	3714      	adds	r7, #20
 800a188:	46bd      	mov	sp, r7
 800a18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18e:	4770      	bx	lr
 800a190:	20000f58 	.word	0x20000f58
 800a194:	20004b58 	.word	0x20004b58
 800a198:	20004b60 	.word	0x20004b60
 800a19c:	20004b68 	.word	0x20004b68
 800a1a0:	20004b64 	.word	0x20004b64
 800a1a4:	20004b6c 	.word	0x20004b6c

0800a1a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b085      	sub	sp, #20
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a1b0:	4b28      	ldr	r3, [pc, #160]	; (800a254 <prvInsertBlockIntoFreeList+0xac>)
 800a1b2:	60fb      	str	r3, [r7, #12]
 800a1b4:	e002      	b.n	800a1bc <prvInsertBlockIntoFreeList+0x14>
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	60fb      	str	r3, [r7, #12]
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	687a      	ldr	r2, [r7, #4]
 800a1c2:	429a      	cmp	r2, r3
 800a1c4:	d8f7      	bhi.n	800a1b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	685b      	ldr	r3, [r3, #4]
 800a1ce:	68ba      	ldr	r2, [r7, #8]
 800a1d0:	4413      	add	r3, r2
 800a1d2:	687a      	ldr	r2, [r7, #4]
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	d108      	bne.n	800a1ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	685a      	ldr	r2, [r3, #4]
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	685b      	ldr	r3, [r3, #4]
 800a1e0:	441a      	add	r2, r3
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	685b      	ldr	r3, [r3, #4]
 800a1f2:	68ba      	ldr	r2, [r7, #8]
 800a1f4:	441a      	add	r2, r3
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	429a      	cmp	r2, r3
 800a1fc:	d118      	bne.n	800a230 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	681a      	ldr	r2, [r3, #0]
 800a202:	4b15      	ldr	r3, [pc, #84]	; (800a258 <prvInsertBlockIntoFreeList+0xb0>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	429a      	cmp	r2, r3
 800a208:	d00d      	beq.n	800a226 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	685a      	ldr	r2, [r3, #4]
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	685b      	ldr	r3, [r3, #4]
 800a214:	441a      	add	r2, r3
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	681a      	ldr	r2, [r3, #0]
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	601a      	str	r2, [r3, #0]
 800a224:	e008      	b.n	800a238 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a226:	4b0c      	ldr	r3, [pc, #48]	; (800a258 <prvInsertBlockIntoFreeList+0xb0>)
 800a228:	681a      	ldr	r2, [r3, #0]
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	601a      	str	r2, [r3, #0]
 800a22e:	e003      	b.n	800a238 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	681a      	ldr	r2, [r3, #0]
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a238:	68fa      	ldr	r2, [r7, #12]
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	429a      	cmp	r2, r3
 800a23e:	d002      	beq.n	800a246 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	687a      	ldr	r2, [r7, #4]
 800a244:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a246:	bf00      	nop
 800a248:	3714      	adds	r7, #20
 800a24a:	46bd      	mov	sp, r7
 800a24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a250:	4770      	bx	lr
 800a252:	bf00      	nop
 800a254:	20004b58 	.word	0x20004b58
 800a258:	20004b60 	.word	0x20004b60

0800a25c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b084      	sub	sp, #16
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
 800a264:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	330c      	adds	r3, #12
 800a26c:	461a      	mov	r2, r3
 800a26e:	6839      	ldr	r1, [r7, #0]
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	f002 f9a7 	bl	800c5c4 <tcpip_send_msg_wait_sem>
 800a276:	4603      	mov	r3, r0
 800a278:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800a27a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d103      	bne.n	800a28a <netconn_apimsg+0x2e>
    return apimsg->err;
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800a288:	e001      	b.n	800a28e <netconn_apimsg+0x32>
  }
  return err;
 800a28a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a28e:	4618      	mov	r0, r3
 800a290:	3710      	adds	r7, #16
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}
	...

0800a298 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b08c      	sub	sp, #48	; 0x30
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	4603      	mov	r3, r0
 800a2a0:	603a      	str	r2, [r7, #0]
 800a2a2:	71fb      	strb	r3, [r7, #7]
 800a2a4:	460b      	mov	r3, r1
 800a2a6:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800a2a8:	79fb      	ldrb	r3, [r7, #7]
 800a2aa:	6839      	ldr	r1, [r7, #0]
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	f000 ffcb 	bl	800b248 <netconn_alloc>
 800a2b2:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800a2b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d054      	beq.n	800a364 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800a2ba:	79bb      	ldrb	r3, [r7, #6]
 800a2bc:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800a2be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2c0:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800a2c2:	f107 0308 	add.w	r3, r7, #8
 800a2c6:	4619      	mov	r1, r3
 800a2c8:	4829      	ldr	r0, [pc, #164]	; (800a370 <netconn_new_with_proto_and_callback+0xd8>)
 800a2ca:	f7ff ffc7 	bl	800a25c <netconn_apimsg>
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800a2d4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d043      	beq.n	800a364 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800a2dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2de:	685b      	ldr	r3, [r3, #4]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d005      	beq.n	800a2f0 <netconn_new_with_proto_and_callback+0x58>
 800a2e4:	4b23      	ldr	r3, [pc, #140]	; (800a374 <netconn_new_with_proto_and_callback+0xdc>)
 800a2e6:	22a3      	movs	r2, #163	; 0xa3
 800a2e8:	4923      	ldr	r1, [pc, #140]	; (800a378 <netconn_new_with_proto_and_callback+0xe0>)
 800a2ea:	4824      	ldr	r0, [pc, #144]	; (800a37c <netconn_new_with_proto_and_callback+0xe4>)
 800a2ec:	f010 ff0a 	bl	801b104 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800a2f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2f2:	3310      	adds	r3, #16
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f00d f879 	bl	80173ec <sys_mbox_valid>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d105      	bne.n	800a30c <netconn_new_with_proto_and_callback+0x74>
 800a300:	4b1c      	ldr	r3, [pc, #112]	; (800a374 <netconn_new_with_proto_and_callback+0xdc>)
 800a302:	22a4      	movs	r2, #164	; 0xa4
 800a304:	491e      	ldr	r1, [pc, #120]	; (800a380 <netconn_new_with_proto_and_callback+0xe8>)
 800a306:	481d      	ldr	r0, [pc, #116]	; (800a37c <netconn_new_with_proto_and_callback+0xe4>)
 800a308:	f010 fefc 	bl	801b104 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800a30c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a30e:	3314      	adds	r3, #20
 800a310:	4618      	mov	r0, r3
 800a312:	f00d f86b 	bl	80173ec <sys_mbox_valid>
 800a316:	4603      	mov	r3, r0
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d005      	beq.n	800a328 <netconn_new_with_proto_and_callback+0x90>
 800a31c:	4b15      	ldr	r3, [pc, #84]	; (800a374 <netconn_new_with_proto_and_callback+0xdc>)
 800a31e:	22a6      	movs	r2, #166	; 0xa6
 800a320:	4918      	ldr	r1, [pc, #96]	; (800a384 <netconn_new_with_proto_and_callback+0xec>)
 800a322:	4816      	ldr	r0, [pc, #88]	; (800a37c <netconn_new_with_proto_and_callback+0xe4>)
 800a324:	f010 feee 	bl	801b104 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800a328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a32a:	330c      	adds	r3, #12
 800a32c:	4618      	mov	r0, r3
 800a32e:	f00d f8eb 	bl	8017508 <sys_sem_valid>
 800a332:	4603      	mov	r3, r0
 800a334:	2b00      	cmp	r3, #0
 800a336:	d105      	bne.n	800a344 <netconn_new_with_proto_and_callback+0xac>
 800a338:	4b0e      	ldr	r3, [pc, #56]	; (800a374 <netconn_new_with_proto_and_callback+0xdc>)
 800a33a:	22a9      	movs	r2, #169	; 0xa9
 800a33c:	4912      	ldr	r1, [pc, #72]	; (800a388 <netconn_new_with_proto_and_callback+0xf0>)
 800a33e:	480f      	ldr	r0, [pc, #60]	; (800a37c <netconn_new_with_proto_and_callback+0xe4>)
 800a340:	f010 fee0 	bl	801b104 <iprintf>
      sys_sem_free(&conn->op_completed);
 800a344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a346:	330c      	adds	r3, #12
 800a348:	4618      	mov	r0, r3
 800a34a:	f00d f8d0 	bl	80174ee <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800a34e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a350:	3310      	adds	r3, #16
 800a352:	4618      	mov	r0, r3
 800a354:	f00c ffd6 	bl	8017304 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800a358:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a35a:	2007      	movs	r0, #7
 800a35c:	f002 fe9a 	bl	800d094 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800a360:	2300      	movs	r3, #0
 800a362:	e000      	b.n	800a366 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800a364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800a366:	4618      	mov	r0, r3
 800a368:	3730      	adds	r7, #48	; 0x30
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}
 800a36e:	bf00      	nop
 800a370:	0800b21d 	.word	0x0800b21d
 800a374:	0801b9cc 	.word	0x0801b9cc
 800a378:	0801ba00 	.word	0x0801ba00
 800a37c:	0801ba24 	.word	0x0801ba24
 800a380:	0801ba4c 	.word	0x0801ba4c
 800a384:	0801ba64 	.word	0x0801ba64
 800a388:	0801ba88 	.word	0x0801ba88

0800a38c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b08c      	sub	sp, #48	; 0x30
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d101      	bne.n	800a39e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800a39a:	2300      	movs	r3, #0
 800a39c:	e014      	b.n	800a3c8 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800a3a2:	2329      	movs	r3, #41	; 0x29
 800a3a4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800a3a6:	f107 030c 	add.w	r3, r7, #12
 800a3aa:	4619      	mov	r1, r3
 800a3ac:	4808      	ldr	r0, [pc, #32]	; (800a3d0 <netconn_prepare_delete+0x44>)
 800a3ae:	f7ff ff55 	bl	800a25c <netconn_apimsg>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800a3b8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d002      	beq.n	800a3c6 <netconn_prepare_delete+0x3a>
    return err;
 800a3c0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a3c4:	e000      	b.n	800a3c8 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800a3c6:	2300      	movs	r3, #0
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	3730      	adds	r7, #48	; 0x30
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bd80      	pop	{r7, pc}
 800a3d0:	0800b789 	.word	0x0800b789

0800a3d4 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b084      	sub	sp, #16
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d101      	bne.n	800a3e6 <netconn_delete+0x12>
    return ERR_OK;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	e00d      	b.n	800a402 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800a3e6:	6878      	ldr	r0, [r7, #4]
 800a3e8:	f7ff ffd0 	bl	800a38c <netconn_prepare_delete>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800a3f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d102      	bne.n	800a3fe <netconn_delete+0x2a>
    netconn_free(conn);
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	f000 ff97 	bl	800b32c <netconn_free>
  }
  return err;
 800a3fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a402:	4618      	mov	r0, r3
 800a404:	3710      	adds	r7, #16
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}
	...

0800a40c <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b08e      	sub	sp, #56	; 0x38
 800a410:	af00      	add	r7, sp, #0
 800a412:	60f8      	str	r0, [r7, #12]
 800a414:	60b9      	str	r1, [r7, #8]
 800a416:	4613      	mov	r3, r2
 800a418:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d109      	bne.n	800a434 <netconn_connect+0x28>
 800a420:	4b11      	ldr	r3, [pc, #68]	; (800a468 <netconn_connect+0x5c>)
 800a422:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 800a426:	4911      	ldr	r1, [pc, #68]	; (800a46c <netconn_connect+0x60>)
 800a428:	4811      	ldr	r0, [pc, #68]	; (800a470 <netconn_connect+0x64>)
 800a42a:	f010 fe6b 	bl	801b104 <iprintf>
 800a42e:	f06f 030f 	mvn.w	r3, #15
 800a432:	e015      	b.n	800a460 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d101      	bne.n	800a43e <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 800a43a:	4b0e      	ldr	r3, [pc, #56]	; (800a474 <netconn_connect+0x68>)
 800a43c:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800a446:	88fb      	ldrh	r3, [r7, #6]
 800a448:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 800a44a:	f107 0314 	add.w	r3, r7, #20
 800a44e:	4619      	mov	r1, r3
 800a450:	4809      	ldr	r0, [pc, #36]	; (800a478 <netconn_connect+0x6c>)
 800a452:	f7ff ff03 	bl	800a25c <netconn_apimsg>
 800a456:	4603      	mov	r3, r0
 800a458:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800a45c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800a460:	4618      	mov	r0, r3
 800a462:	3738      	adds	r7, #56	; 0x38
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}
 800a468:	0801b9cc 	.word	0x0801b9cc
 800a46c:	0801bb40 	.word	0x0801bb40
 800a470:	0801ba24 	.word	0x0801ba24
 800a474:	0801f154 	.word	0x0801f154
 800a478:	0800ba7d 	.word	0x0800ba7d

0800a47c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b088      	sub	sp, #32
 800a480:	af00      	add	r7, sp, #0
 800a482:	60f8      	str	r0, [r7, #12]
 800a484:	60b9      	str	r1, [r7, #8]
 800a486:	4613      	mov	r3, r2
 800a488:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800a48a:	2300      	movs	r3, #0
 800a48c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d109      	bne.n	800a4a8 <netconn_recv_data+0x2c>
 800a494:	4b5e      	ldr	r3, [pc, #376]	; (800a610 <netconn_recv_data+0x194>)
 800a496:	f44f 7212 	mov.w	r2, #584	; 0x248
 800a49a:	495e      	ldr	r1, [pc, #376]	; (800a614 <netconn_recv_data+0x198>)
 800a49c:	485e      	ldr	r0, [pc, #376]	; (800a618 <netconn_recv_data+0x19c>)
 800a49e:	f010 fe31 	bl	801b104 <iprintf>
 800a4a2:	f06f 030f 	mvn.w	r3, #15
 800a4a6:	e0ae      	b.n	800a606 <netconn_recv_data+0x18a>
  *new_buf = NULL;
 800a4a8:	68bb      	ldr	r3, [r7, #8]
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d109      	bne.n	800a4c8 <netconn_recv_data+0x4c>
 800a4b4:	4b56      	ldr	r3, [pc, #344]	; (800a610 <netconn_recv_data+0x194>)
 800a4b6:	f240 224a 	movw	r2, #586	; 0x24a
 800a4ba:	4958      	ldr	r1, [pc, #352]	; (800a61c <netconn_recv_data+0x1a0>)
 800a4bc:	4856      	ldr	r0, [pc, #344]	; (800a618 <netconn_recv_data+0x19c>)
 800a4be:	f010 fe21 	bl	801b104 <iprintf>
 800a4c2:	f06f 030f 	mvn.w	r3, #15
 800a4c6:	e09e      	b.n	800a606 <netconn_recv_data+0x18a>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	3310      	adds	r3, #16
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f00c ff8d 	bl	80173ec <sys_mbox_valid>
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d10e      	bne.n	800a4f6 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800a4d8:	68f8      	ldr	r0, [r7, #12]
 800a4da:	f000 fae6 	bl	800aaaa <netconn_err>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800a4e2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d002      	beq.n	800a4f0 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800a4ea:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800a4ee:	e08a      	b.n	800a606 <netconn_recv_data+0x18a>
    }
    return ERR_CONN;
 800a4f0:	f06f 030a 	mvn.w	r3, #10
 800a4f4:	e087      	b.n	800a606 <netconn_recv_data+0x18a>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a4fc:	f003 0302 	and.w	r3, r3, #2
 800a500:	2b00      	cmp	r3, #0
 800a502:	d110      	bne.n	800a526 <netconn_recv_data+0xaa>
 800a504:	79fb      	ldrb	r3, [r7, #7]
 800a506:	f003 0304 	and.w	r3, r3, #4
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d10b      	bne.n	800a526 <netconn_recv_data+0xaa>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a514:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d104      	bne.n	800a526 <netconn_recv_data+0xaa>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d024      	beq.n	800a570 <netconn_recv_data+0xf4>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	3310      	adds	r3, #16
 800a52a:	f107 0218 	add.w	r2, r7, #24
 800a52e:	4611      	mov	r1, r2
 800a530:	4618      	mov	r0, r3
 800a532:	f00c ff44 	bl	80173be <sys_arch_mbox_tryfetch>
 800a536:	4603      	mov	r3, r0
 800a538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a53c:	d129      	bne.n	800a592 <netconn_recv_data+0x116>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800a53e:	68f8      	ldr	r0, [r7, #12]
 800a540:	f000 fab3 	bl	800aaaa <netconn_err>
 800a544:	4603      	mov	r3, r0
 800a546:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800a548:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d002      	beq.n	800a556 <netconn_recv_data+0xda>
        /* return pending error */
        return err;
 800a550:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800a554:	e057      	b.n	800a606 <netconn_recv_data+0x18a>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a55c:	f003 0301 	and.w	r3, r3, #1
 800a560:	2b00      	cmp	r3, #0
 800a562:	d002      	beq.n	800a56a <netconn_recv_data+0xee>
        return ERR_CONN;
 800a564:	f06f 030a 	mvn.w	r3, #10
 800a568:	e04d      	b.n	800a606 <netconn_recv_data+0x18a>
      }
      return ERR_WOULDBLOCK;
 800a56a:	f06f 0306 	mvn.w	r3, #6
 800a56e:	e04a      	b.n	800a606 <netconn_recv_data+0x18a>
    }
  } else {
#if LWIP_SO_RCVTIMEO
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	f103 0010 	add.w	r0, r3, #16
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	69da      	ldr	r2, [r3, #28]
 800a57a:	f107 0318 	add.w	r3, r7, #24
 800a57e:	4619      	mov	r1, r3
 800a580:	f00c feec 	bl	801735c <sys_arch_mbox_fetch>
 800a584:	4603      	mov	r3, r0
 800a586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a58a:	d102      	bne.n	800a592 <netconn_recv_data+0x116>
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
 800a58c:	f06f 0302 	mvn.w	r3, #2
 800a590:	e039      	b.n	800a606 <netconn_recv_data+0x18a>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	781b      	ldrb	r3, [r3, #0]
 800a596:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a59a:	2b10      	cmp	r3, #16
 800a59c:	d117      	bne.n	800a5ce <netconn_recv_data+0x152>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800a59e:	69bb      	ldr	r3, [r7, #24]
 800a5a0:	f107 0217 	add.w	r2, r7, #23
 800a5a4:	4611      	mov	r1, r2
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f000 fad0 	bl	800ab4c <lwip_netconn_is_err_msg>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d009      	beq.n	800a5c6 <netconn_recv_data+0x14a>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800a5b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a5b6:	f113 0f0f 	cmn.w	r3, #15
 800a5ba:	d101      	bne.n	800a5c0 <netconn_recv_data+0x144>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	e022      	b.n	800a606 <netconn_recv_data+0x18a>
      }
      return err;
 800a5c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a5c4:	e01f      	b.n	800a606 <netconn_recv_data+0x18a>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800a5c6:	69bb      	ldr	r3, [r7, #24]
 800a5c8:	891b      	ldrh	r3, [r3, #8]
 800a5ca:	83fb      	strh	r3, [r7, #30]
 800a5cc:	e00d      	b.n	800a5ea <netconn_recv_data+0x16e>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800a5ce:	69bb      	ldr	r3, [r7, #24]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d106      	bne.n	800a5e2 <netconn_recv_data+0x166>
 800a5d4:	4b0e      	ldr	r3, [pc, #56]	; (800a610 <netconn_recv_data+0x194>)
 800a5d6:	f240 2291 	movw	r2, #657	; 0x291
 800a5da:	4911      	ldr	r1, [pc, #68]	; (800a620 <netconn_recv_data+0x1a4>)
 800a5dc:	480e      	ldr	r0, [pc, #56]	; (800a618 <netconn_recv_data+0x19c>)
 800a5de:	f010 fd91 	bl	801b104 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800a5e2:	69bb      	ldr	r3, [r7, #24]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	891b      	ldrh	r3, [r3, #8]
 800a5e8:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d005      	beq.n	800a5fe <netconn_recv_data+0x182>
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5f6:	8bfa      	ldrh	r2, [r7, #30]
 800a5f8:	2101      	movs	r1, #1
 800a5fa:	68f8      	ldr	r0, [r7, #12]
 800a5fc:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800a5fe:	69ba      	ldr	r2, [r7, #24]
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800a604:	2300      	movs	r3, #0
}
 800a606:	4618      	mov	r0, r3
 800a608:	3720      	adds	r7, #32
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}
 800a60e:	bf00      	nop
 800a610:	0801b9cc 	.word	0x0801b9cc
 800a614:	0801bbe4 	.word	0x0801bbe4
 800a618:	0801ba24 	.word	0x0801ba24
 800a61c:	0801bc04 	.word	0x0801bc04
 800a620:	0801bc20 	.word	0x0801bc20

0800a624 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b084      	sub	sp, #16
 800a628:	af00      	add	r7, sp, #0
 800a62a:	60f8      	str	r0, [r7, #12]
 800a62c:	60b9      	str	r1, [r7, #8]
 800a62e:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d005      	beq.n	800a642 <netconn_tcp_recvd_msg+0x1e>
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	781b      	ldrb	r3, [r3, #0]
 800a63a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a63e:	2b10      	cmp	r3, #16
 800a640:	d009      	beq.n	800a656 <netconn_tcp_recvd_msg+0x32>
 800a642:	4b0c      	ldr	r3, [pc, #48]	; (800a674 <netconn_tcp_recvd_msg+0x50>)
 800a644:	f240 22a7 	movw	r2, #679	; 0x2a7
 800a648:	490b      	ldr	r1, [pc, #44]	; (800a678 <netconn_tcp_recvd_msg+0x54>)
 800a64a:	480c      	ldr	r0, [pc, #48]	; (800a67c <netconn_tcp_recvd_msg+0x58>)
 800a64c:	f010 fd5a 	bl	801b104 <iprintf>
 800a650:	f06f 030f 	mvn.w	r3, #15
 800a654:	e00a      	b.n	800a66c <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	68fa      	ldr	r2, [r7, #12]
 800a65a:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	68ba      	ldr	r2, [r7, #8]
 800a660:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800a662:	6879      	ldr	r1, [r7, #4]
 800a664:	4806      	ldr	r0, [pc, #24]	; (800a680 <netconn_tcp_recvd_msg+0x5c>)
 800a666:	f7ff fdf9 	bl	800a25c <netconn_apimsg>
 800a66a:	4603      	mov	r3, r0
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	3710      	adds	r7, #16
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}
 800a674:	0801b9cc 	.word	0x0801b9cc
 800a678:	0801bc2c 	.word	0x0801bc2c
 800a67c:	0801ba24 	.word	0x0801ba24
 800a680:	0800bc05 	.word	0x0800bc05

0800a684 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b090      	sub	sp, #64	; 0x40
 800a688:	af00      	add	r7, sp, #0
 800a68a:	60f8      	str	r0, [r7, #12]
 800a68c:	60b9      	str	r1, [r7, #8]
 800a68e:	4613      	mov	r3, r2
 800a690:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	3310      	adds	r3, #16
 800a696:	4618      	mov	r0, r3
 800a698:	f00c fea8 	bl	80173ec <sys_mbox_valid>
 800a69c:	4603      	mov	r3, r0
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d102      	bne.n	800a6a8 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800a6a2:	f06f 030a 	mvn.w	r3, #10
 800a6a6:	e072      	b.n	800a78e <netconn_recv_data_tcp+0x10a>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a6ae:	b25b      	sxtb	r3, r3
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	da09      	bge.n	800a6c8 <netconn_recv_data_tcp+0x44>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a6ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6be:	b2da      	uxtb	r2, r3
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	f883 2020 	strb.w	r2, [r3, #32]
    goto handle_fin;
 800a6c6:	e03b      	b.n	800a740 <netconn_recv_data_tcp+0xbc>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800a6c8:	79fb      	ldrb	r3, [r7, #7]
 800a6ca:	461a      	mov	r2, r3
 800a6cc:	68b9      	ldr	r1, [r7, #8]
 800a6ce:	68f8      	ldr	r0, [r7, #12]
 800a6d0:	f7ff fed4 	bl	800a47c <netconn_recv_data>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800a6da:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d002      	beq.n	800a6e8 <netconn_recv_data_tcp+0x64>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800a6e2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a6e6:	e052      	b.n	800a78e <netconn_recv_data_tcp+0x10a>
  }
  buf = *new_buf;
 800a6e8:	68bb      	ldr	r3, [r7, #8]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800a6ee:	79fb      	ldrb	r3, [r7, #7]
 800a6f0:	f003 0308 	and.w	r3, r3, #8
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d10e      	bne.n	800a716 <netconn_recv_data_tcp+0x92>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800a6f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d002      	beq.n	800a704 <netconn_recv_data_tcp+0x80>
 800a6fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a700:	891b      	ldrh	r3, [r3, #8]
 800a702:	e000      	b.n	800a706 <netconn_recv_data_tcp+0x82>
 800a704:	2301      	movs	r3, #1
 800a706:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800a708:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a70a:	f107 0214 	add.w	r2, r7, #20
 800a70e:	4619      	mov	r1, r3
 800a710:	68f8      	ldr	r0, [r7, #12]
 800a712:	f7ff ff87 	bl	800a624 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800a716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d136      	bne.n	800a78a <netconn_recv_data_tcp+0x106>
    if (apiflags & NETCONN_NOFIN) {
 800a71c:	79fb      	ldrb	r3, [r7, #7]
 800a71e:	f003 0310 	and.w	r3, r3, #16
 800a722:	2b00      	cmp	r3, #0
 800a724:	d00b      	beq.n	800a73e <netconn_recv_data_tcp+0xba>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a72c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a730:	b2da      	uxtb	r2, r3
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	f883 2020 	strb.w	r2, [r3, #32]
      return ERR_WOULDBLOCK;
 800a738:	f06f 0306 	mvn.w	r3, #6
 800a73c:	e027      	b.n	800a78e <netconn_recv_data_tcp+0x10a>
    } else {
handle_fin:
 800a73e:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a744:	2b00      	cmp	r3, #0
 800a746:	d005      	beq.n	800a754 <netconn_recv_data_tcp+0xd0>
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a74c:	2200      	movs	r2, #0
 800a74e:	2101      	movs	r1, #1
 800a750:	68f8      	ldr	r0, [r7, #12]
 800a752:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	685b      	ldr	r3, [r3, #4]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d10f      	bne.n	800a77c <netconn_recv_data_tcp+0xf8>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800a75c:	68f8      	ldr	r0, [r7, #12]
 800a75e:	f000 f9a4 	bl	800aaaa <netconn_err>
 800a762:	4603      	mov	r3, r0
 800a764:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800a768:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d002      	beq.n	800a776 <netconn_recv_data_tcp+0xf2>
          return err;
 800a770:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a774:	e00b      	b.n	800a78e <netconn_recv_data_tcp+0x10a>
        }
        return ERR_RST;
 800a776:	f06f 030d 	mvn.w	r3, #13
 800a77a:	e008      	b.n	800a78e <netconn_recv_data_tcp+0x10a>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800a77c:	2101      	movs	r1, #1
 800a77e:	68f8      	ldr	r0, [r7, #12]
 800a780:	f000 f956 	bl	800aa30 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800a784:	f06f 030e 	mvn.w	r3, #14
 800a788:	e001      	b.n	800a78e <netconn_recv_data_tcp+0x10a>
    }
  }
  return err;
 800a78a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800a78e:	4618      	mov	r0, r3
 800a790:	3740      	adds	r7, #64	; 0x40
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}
	...

0800a798 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b086      	sub	sp, #24
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
 800a7a0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d109      	bne.n	800a7c0 <netconn_recv+0x28>
 800a7ac:	4b32      	ldr	r3, [pc, #200]	; (800a878 <netconn_recv+0xe0>)
 800a7ae:	f240 3263 	movw	r2, #867	; 0x363
 800a7b2:	4932      	ldr	r1, [pc, #200]	; (800a87c <netconn_recv+0xe4>)
 800a7b4:	4832      	ldr	r0, [pc, #200]	; (800a880 <netconn_recv+0xe8>)
 800a7b6:	f010 fca5 	bl	801b104 <iprintf>
 800a7ba:	f06f 030f 	mvn.w	r3, #15
 800a7be:	e056      	b.n	800a86e <netconn_recv+0xd6>
  *new_buf = NULL;
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d109      	bne.n	800a7e0 <netconn_recv+0x48>
 800a7cc:	4b2a      	ldr	r3, [pc, #168]	; (800a878 <netconn_recv+0xe0>)
 800a7ce:	f240 3265 	movw	r2, #869	; 0x365
 800a7d2:	492c      	ldr	r1, [pc, #176]	; (800a884 <netconn_recv+0xec>)
 800a7d4:	482a      	ldr	r0, [pc, #168]	; (800a880 <netconn_recv+0xe8>)
 800a7d6:	f010 fc95 	bl	801b104 <iprintf>
 800a7da:	f06f 030f 	mvn.w	r3, #15
 800a7de:	e046      	b.n	800a86e <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	781b      	ldrb	r3, [r3, #0]
 800a7e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a7e8:	2b10      	cmp	r3, #16
 800a7ea:	d13a      	bne.n	800a862 <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800a7f0:	2006      	movs	r0, #6
 800a7f2:	f002 fbfd 	bl	800cff0 <memp_malloc>
 800a7f6:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800a7f8:	697b      	ldr	r3, [r7, #20]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d102      	bne.n	800a804 <netconn_recv+0x6c>
      return ERR_MEM;
 800a7fe:	f04f 33ff 	mov.w	r3, #4294967295
 800a802:	e034      	b.n	800a86e <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800a804:	f107 030c 	add.w	r3, r7, #12
 800a808:	2200      	movs	r2, #0
 800a80a:	4619      	mov	r1, r3
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	f7ff ff39 	bl	800a684 <netconn_recv_data_tcp>
 800a812:	4603      	mov	r3, r0
 800a814:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800a816:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d006      	beq.n	800a82c <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800a81e:	6979      	ldr	r1, [r7, #20]
 800a820:	2006      	movs	r0, #6
 800a822:	f002 fc37 	bl	800d094 <memp_free>
      return err;
 800a826:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a82a:	e020      	b.n	800a86e <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d106      	bne.n	800a840 <netconn_recv+0xa8>
 800a832:	4b11      	ldr	r3, [pc, #68]	; (800a878 <netconn_recv+0xe0>)
 800a834:	f240 3279 	movw	r2, #889	; 0x379
 800a838:	4913      	ldr	r1, [pc, #76]	; (800a888 <netconn_recv+0xf0>)
 800a83a:	4811      	ldr	r0, [pc, #68]	; (800a880 <netconn_recv+0xe8>)
 800a83c:	f010 fc62 	bl	801b104 <iprintf>

    buf->p = p;
 800a840:	68fa      	ldr	r2, [r7, #12]
 800a842:	697b      	ldr	r3, [r7, #20]
 800a844:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800a846:	68fa      	ldr	r2, [r7, #12]
 800a848:	697b      	ldr	r3, [r7, #20]
 800a84a:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800a84c:	697b      	ldr	r3, [r7, #20]
 800a84e:	2200      	movs	r2, #0
 800a850:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800a852:	697b      	ldr	r3, [r7, #20]
 800a854:	2200      	movs	r2, #0
 800a856:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	697a      	ldr	r2, [r7, #20]
 800a85c:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800a85e:	2300      	movs	r3, #0
 800a860:	e005      	b.n	800a86e <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800a862:	2200      	movs	r2, #0
 800a864:	6839      	ldr	r1, [r7, #0]
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	f7ff fe08 	bl	800a47c <netconn_recv_data>
 800a86c:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800a86e:	4618      	mov	r0, r3
 800a870:	3718      	adds	r7, #24
 800a872:	46bd      	mov	sp, r7
 800a874:	bd80      	pop	{r7, pc}
 800a876:	bf00      	nop
 800a878:	0801b9cc 	.word	0x0801b9cc
 800a87c:	0801bbe4 	.word	0x0801bbe4
 800a880:	0801ba24 	.word	0x0801ba24
 800a884:	0801bc04 	.word	0x0801bc04
 800a888:	0801bc7c 	.word	0x0801bc7c

0800a88c <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b088      	sub	sp, #32
 800a890:	af02      	add	r7, sp, #8
 800a892:	60f8      	str	r0, [r7, #12]
 800a894:	60b9      	str	r1, [r7, #8]
 800a896:	607a      	str	r2, [r7, #4]
 800a898:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800a89a:	68bb      	ldr	r3, [r7, #8]
 800a89c:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800a8a2:	78fa      	ldrb	r2, [r7, #3]
 800a8a4:	f107 0110 	add.w	r1, r7, #16
 800a8a8:	6a3b      	ldr	r3, [r7, #32]
 800a8aa:	9300      	str	r3, [sp, #0]
 800a8ac:	4613      	mov	r3, r2
 800a8ae:	2201      	movs	r2, #1
 800a8b0:	68f8      	ldr	r0, [r7, #12]
 800a8b2:	f000 f805 	bl	800a8c0 <netconn_write_vectors_partly>
 800a8b6:	4603      	mov	r3, r0
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	3718      	adds	r7, #24
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	bd80      	pop	{r7, pc}

0800a8c0 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b092      	sub	sp, #72	; 0x48
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	60f8      	str	r0, [r7, #12]
 800a8c8:	60b9      	str	r1, [r7, #8]
 800a8ca:	4611      	mov	r1, r2
 800a8cc:	461a      	mov	r2, r3
 800a8ce:	460b      	mov	r3, r1
 800a8d0:	80fb      	strh	r3, [r7, #6]
 800a8d2:	4613      	mov	r3, r2
 800a8d4:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d109      	bne.n	800a8f0 <netconn_write_vectors_partly+0x30>
 800a8dc:	4b4e      	ldr	r3, [pc, #312]	; (800aa18 <netconn_write_vectors_partly+0x158>)
 800a8de:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800a8e2:	494e      	ldr	r1, [pc, #312]	; (800aa1c <netconn_write_vectors_partly+0x15c>)
 800a8e4:	484e      	ldr	r0, [pc, #312]	; (800aa20 <netconn_write_vectors_partly+0x160>)
 800a8e6:	f010 fc0d 	bl	801b104 <iprintf>
 800a8ea:	f06f 030f 	mvn.w	r3, #15
 800a8ee:	e08f      	b.n	800aa10 <netconn_write_vectors_partly+0x150>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	781b      	ldrb	r3, [r3, #0]
 800a8f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a8f8:	2b10      	cmp	r3, #16
 800a8fa:	d009      	beq.n	800a910 <netconn_write_vectors_partly+0x50>
 800a8fc:	4b46      	ldr	r3, [pc, #280]	; (800aa18 <netconn_write_vectors_partly+0x158>)
 800a8fe:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800a902:	4948      	ldr	r1, [pc, #288]	; (800aa24 <netconn_write_vectors_partly+0x164>)
 800a904:	4846      	ldr	r0, [pc, #280]	; (800aa20 <netconn_write_vectors_partly+0x160>)
 800a906:	f010 fbfd 	bl	801b104 <iprintf>
 800a90a:	f06f 0305 	mvn.w	r3, #5
 800a90e:	e07f      	b.n	800aa10 <netconn_write_vectors_partly+0x150>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a916:	f003 0302 	and.w	r3, r3, #2
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d104      	bne.n	800a928 <netconn_write_vectors_partly+0x68>
 800a91e:	797b      	ldrb	r3, [r7, #5]
 800a920:	f003 0304 	and.w	r3, r3, #4
 800a924:	2b00      	cmp	r3, #0
 800a926:	d001      	beq.n	800a92c <netconn_write_vectors_partly+0x6c>
 800a928:	2301      	movs	r3, #1
 800a92a:	e000      	b.n	800a92e <netconn_write_vectors_partly+0x6e>
 800a92c:	2300      	movs	r3, #0
 800a92e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800a932:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a936:	2b00      	cmp	r3, #0
 800a938:	d005      	beq.n	800a946 <netconn_write_vectors_partly+0x86>
 800a93a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d102      	bne.n	800a946 <netconn_write_vectors_partly+0x86>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800a940:	f06f 0305 	mvn.w	r3, #5
 800a944:	e064      	b.n	800aa10 <netconn_write_vectors_partly+0x150>
  }

  /* sum up the total size */
  size = 0;
 800a946:	2300      	movs	r3, #0
 800a948:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 800a94a:	2300      	movs	r3, #0
 800a94c:	643b      	str	r3, [r7, #64]	; 0x40
 800a94e:	e015      	b.n	800a97c <netconn_write_vectors_partly+0xbc>
    size += vectors[i].len;
 800a950:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a952:	00db      	lsls	r3, r3, #3
 800a954:	68ba      	ldr	r2, [r7, #8]
 800a956:	4413      	add	r3, r2
 800a958:	685b      	ldr	r3, [r3, #4]
 800a95a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a95c:	4413      	add	r3, r2
 800a95e:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 800a960:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a962:	00db      	lsls	r3, r3, #3
 800a964:	68ba      	ldr	r2, [r7, #8]
 800a966:	4413      	add	r3, r2
 800a968:	685b      	ldr	r3, [r3, #4]
 800a96a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a96c:	429a      	cmp	r2, r3
 800a96e:	d202      	bcs.n	800a976 <netconn_write_vectors_partly+0xb6>
      /* overflow */
      return ERR_VAL;
 800a970:	f06f 0305 	mvn.w	r3, #5
 800a974:	e04c      	b.n	800aa10 <netconn_write_vectors_partly+0x150>
  for (i = 0; i < vectorcnt; i++) {
 800a976:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a978:	3301      	adds	r3, #1
 800a97a:	643b      	str	r3, [r7, #64]	; 0x40
 800a97c:	88fb      	ldrh	r3, [r7, #6]
 800a97e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a980:	429a      	cmp	r2, r3
 800a982:	dbe5      	blt.n	800a950 <netconn_write_vectors_partly+0x90>
    }
  }
  if (size == 0) {
 800a984:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a986:	2b00      	cmp	r3, #0
 800a988:	d101      	bne.n	800a98e <netconn_write_vectors_partly+0xce>
    return ERR_OK;
 800a98a:	2300      	movs	r3, #0
 800a98c:	e040      	b.n	800aa10 <netconn_write_vectors_partly+0x150>
  } else if (size > SSIZE_MAX) {
 800a98e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a990:	2b00      	cmp	r3, #0
 800a992:	da0a      	bge.n	800a9aa <netconn_write_vectors_partly+0xea>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800a994:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a996:	2b00      	cmp	r3, #0
 800a998:	d102      	bne.n	800a9a0 <netconn_write_vectors_partly+0xe0>
      return ERR_VAL;
 800a99a:	f06f 0305 	mvn.w	r3, #5
 800a99e:	e037      	b.n	800aa10 <netconn_write_vectors_partly+0x150>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800a9a0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800a9a4:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 800a9a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9a8:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800a9ae:	68bb      	ldr	r3, [r7, #8]
 800a9b0:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800a9b2:	88fb      	ldrh	r3, [r7, #6]
 800a9b4:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800a9ba:	797b      	ldrb	r3, [r7, #5]
 800a9bc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800a9c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9c2:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800a9c8:	f107 0314 	add.w	r3, r7, #20
 800a9cc:	4619      	mov	r1, r3
 800a9ce:	4816      	ldr	r0, [pc, #88]	; (800aa28 <netconn_write_vectors_partly+0x168>)
 800a9d0:	f7ff fc44 	bl	800a25c <netconn_apimsg>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 800a9da:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d114      	bne.n	800aa0c <netconn_write_vectors_partly+0x14c>
    if (bytes_written != NULL) {
 800a9e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d002      	beq.n	800a9ee <netconn_write_vectors_partly+0x12e>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800a9e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a9ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a9ec:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800a9ee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d10a      	bne.n	800aa0c <netconn_write_vectors_partly+0x14c>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800a9f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a9fa:	429a      	cmp	r2, r3
 800a9fc:	d006      	beq.n	800aa0c <netconn_write_vectors_partly+0x14c>
 800a9fe:	4b06      	ldr	r3, [pc, #24]	; (800aa18 <netconn_write_vectors_partly+0x158>)
 800aa00:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800aa04:	4909      	ldr	r1, [pc, #36]	; (800aa2c <netconn_write_vectors_partly+0x16c>)
 800aa06:	4806      	ldr	r0, [pc, #24]	; (800aa20 <netconn_write_vectors_partly+0x160>)
 800aa08:	f010 fb7c 	bl	801b104 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800aa0c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800aa10:	4618      	mov	r0, r3
 800aa12:	3748      	adds	r7, #72	; 0x48
 800aa14:	46bd      	mov	sp, r7
 800aa16:	bd80      	pop	{r7, pc}
 800aa18:	0801b9cc 	.word	0x0801b9cc
 800aa1c:	0801bca4 	.word	0x0801bca4
 800aa20:	0801ba24 	.word	0x0801ba24
 800aa24:	0801bcc0 	.word	0x0801bcc0
 800aa28:	0800c011 	.word	0x0800c011
 800aa2c:	0801bce4 	.word	0x0801bce4

0800aa30 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b08c      	sub	sp, #48	; 0x30
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
 800aa38:	460b      	mov	r3, r1
 800aa3a:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d109      	bne.n	800aa56 <netconn_close_shutdown+0x26>
 800aa42:	4b0f      	ldr	r3, [pc, #60]	; (800aa80 <netconn_close_shutdown+0x50>)
 800aa44:	f240 4247 	movw	r2, #1095	; 0x447
 800aa48:	490e      	ldr	r1, [pc, #56]	; (800aa84 <netconn_close_shutdown+0x54>)
 800aa4a:	480f      	ldr	r0, [pc, #60]	; (800aa88 <netconn_close_shutdown+0x58>)
 800aa4c:	f010 fb5a 	bl	801b104 <iprintf>
 800aa50:	f06f 030f 	mvn.w	r3, #15
 800aa54:	e010      	b.n	800aa78 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800aa5a:	78fb      	ldrb	r3, [r7, #3]
 800aa5c:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800aa5e:	2329      	movs	r3, #41	; 0x29
 800aa60:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800aa62:	f107 030c 	add.w	r3, r7, #12
 800aa66:	4619      	mov	r1, r3
 800aa68:	4808      	ldr	r0, [pc, #32]	; (800aa8c <netconn_close_shutdown+0x5c>)
 800aa6a:	f7ff fbf7 	bl	800a25c <netconn_apimsg>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800aa74:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800aa78:	4618      	mov	r0, r3
 800aa7a:	3730      	adds	r7, #48	; 0x30
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	bd80      	pop	{r7, pc}
 800aa80:	0801b9cc 	.word	0x0801b9cc
 800aa84:	0801bd08 	.word	0x0801bd08
 800aa88:	0801ba24 	.word	0x0801ba24
 800aa8c:	0800c129 	.word	0x0800c129

0800aa90 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b082      	sub	sp, #8
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 800aa98:	2103      	movs	r1, #3
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f7ff ffc8 	bl	800aa30 <netconn_close_shutdown>
 800aaa0:	4603      	mov	r3, r0
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	3708      	adds	r7, #8
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}

0800aaaa <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800aaaa:	b580      	push	{r7, lr}
 800aaac:	b084      	sub	sp, #16
 800aaae:	af00      	add	r7, sp, #0
 800aab0:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d101      	bne.n	800aabc <netconn_err+0x12>
    return ERR_OK;
 800aab8:	2300      	movs	r3, #0
 800aaba:	e00d      	b.n	800aad8 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800aabc:	f00c fda0 	bl	8017600 <sys_arch_protect>
 800aac0:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	7a1b      	ldrb	r3, [r3, #8]
 800aac6:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2200      	movs	r2, #0
 800aacc:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800aace:	68f8      	ldr	r0, [r7, #12]
 800aad0:	f00c fda4 	bl	801761c <sys_arch_unprotect>
  return err;
 800aad4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800aad8:	4618      	mov	r0, r3
 800aada:	3710      	adds	r7, #16
 800aadc:	46bd      	mov	sp, r7
 800aade:	bd80      	pop	{r7, pc}

0800aae0 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b082      	sub	sp, #8
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	4603      	mov	r3, r0
 800aae8:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800aaea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aaee:	f113 0f0d 	cmn.w	r3, #13
 800aaf2:	d009      	beq.n	800ab08 <lwip_netconn_err_to_msg+0x28>
 800aaf4:	f113 0f0d 	cmn.w	r3, #13
 800aaf8:	dc0c      	bgt.n	800ab14 <lwip_netconn_err_to_msg+0x34>
 800aafa:	f113 0f0f 	cmn.w	r3, #15
 800aafe:	d007      	beq.n	800ab10 <lwip_netconn_err_to_msg+0x30>
 800ab00:	f113 0f0e 	cmn.w	r3, #14
 800ab04:	d002      	beq.n	800ab0c <lwip_netconn_err_to_msg+0x2c>
 800ab06:	e005      	b.n	800ab14 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800ab08:	4b0a      	ldr	r3, [pc, #40]	; (800ab34 <lwip_netconn_err_to_msg+0x54>)
 800ab0a:	e00e      	b.n	800ab2a <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800ab0c:	4b0a      	ldr	r3, [pc, #40]	; (800ab38 <lwip_netconn_err_to_msg+0x58>)
 800ab0e:	e00c      	b.n	800ab2a <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800ab10:	4b0a      	ldr	r3, [pc, #40]	; (800ab3c <lwip_netconn_err_to_msg+0x5c>)
 800ab12:	e00a      	b.n	800ab2a <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800ab14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d005      	beq.n	800ab28 <lwip_netconn_err_to_msg+0x48>
 800ab1c:	4b08      	ldr	r3, [pc, #32]	; (800ab40 <lwip_netconn_err_to_msg+0x60>)
 800ab1e:	227d      	movs	r2, #125	; 0x7d
 800ab20:	4908      	ldr	r1, [pc, #32]	; (800ab44 <lwip_netconn_err_to_msg+0x64>)
 800ab22:	4809      	ldr	r0, [pc, #36]	; (800ab48 <lwip_netconn_err_to_msg+0x68>)
 800ab24:	f010 faee 	bl	801b104 <iprintf>
      return NULL;
 800ab28:	2300      	movs	r3, #0
  }
}
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	3708      	adds	r7, #8
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	bd80      	pop	{r7, pc}
 800ab32:	bf00      	nop
 800ab34:	0801f040 	.word	0x0801f040
 800ab38:	0801f041 	.word	0x0801f041
 800ab3c:	0801f042 	.word	0x0801f042
 800ab40:	0801bd24 	.word	0x0801bd24
 800ab44:	0801bd58 	.word	0x0801bd58
 800ab48:	0801bd68 	.word	0x0801bd68

0800ab4c <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b082      	sub	sp, #8
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
 800ab54:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d105      	bne.n	800ab68 <lwip_netconn_is_err_msg+0x1c>
 800ab5c:	4b12      	ldr	r3, [pc, #72]	; (800aba8 <lwip_netconn_is_err_msg+0x5c>)
 800ab5e:	2285      	movs	r2, #133	; 0x85
 800ab60:	4912      	ldr	r1, [pc, #72]	; (800abac <lwip_netconn_is_err_msg+0x60>)
 800ab62:	4813      	ldr	r0, [pc, #76]	; (800abb0 <lwip_netconn_is_err_msg+0x64>)
 800ab64:	f010 face 	bl	801b104 <iprintf>

  if (msg == &netconn_aborted) {
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	4a12      	ldr	r2, [pc, #72]	; (800abb4 <lwip_netconn_is_err_msg+0x68>)
 800ab6c:	4293      	cmp	r3, r2
 800ab6e:	d104      	bne.n	800ab7a <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	22f3      	movs	r2, #243	; 0xf3
 800ab74:	701a      	strb	r2, [r3, #0]
    return 1;
 800ab76:	2301      	movs	r3, #1
 800ab78:	e012      	b.n	800aba0 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	4a0e      	ldr	r2, [pc, #56]	; (800abb8 <lwip_netconn_is_err_msg+0x6c>)
 800ab7e:	4293      	cmp	r3, r2
 800ab80:	d104      	bne.n	800ab8c <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	22f2      	movs	r2, #242	; 0xf2
 800ab86:	701a      	strb	r2, [r3, #0]
    return 1;
 800ab88:	2301      	movs	r3, #1
 800ab8a:	e009      	b.n	800aba0 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	4a0b      	ldr	r2, [pc, #44]	; (800abbc <lwip_netconn_is_err_msg+0x70>)
 800ab90:	4293      	cmp	r3, r2
 800ab92:	d104      	bne.n	800ab9e <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	22f1      	movs	r2, #241	; 0xf1
 800ab98:	701a      	strb	r2, [r3, #0]
    return 1;
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	e000      	b.n	800aba0 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800ab9e:	2300      	movs	r3, #0
}
 800aba0:	4618      	mov	r0, r3
 800aba2:	3708      	adds	r7, #8
 800aba4:	46bd      	mov	sp, r7
 800aba6:	bd80      	pop	{r7, pc}
 800aba8:	0801bd24 	.word	0x0801bd24
 800abac:	0801bd90 	.word	0x0801bd90
 800abb0:	0801bd68 	.word	0x0801bd68
 800abb4:	0801f040 	.word	0x0801f040
 800abb8:	0801f041 	.word	0x0801f041
 800abbc:	0801f042 	.word	0x0801f042

0800abc0 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b088      	sub	sp, #32
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	60f8      	str	r0, [r7, #12]
 800abc8:	60b9      	str	r1, [r7, #8]
 800abca:	607a      	str	r2, [r7, #4]
 800abcc:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800abce:	68bb      	ldr	r3, [r7, #8]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d105      	bne.n	800abe0 <recv_udp+0x20>
 800abd4:	4b34      	ldr	r3, [pc, #208]	; (800aca8 <recv_udp+0xe8>)
 800abd6:	22e5      	movs	r2, #229	; 0xe5
 800abd8:	4934      	ldr	r1, [pc, #208]	; (800acac <recv_udp+0xec>)
 800abda:	4835      	ldr	r0, [pc, #212]	; (800acb0 <recv_udp+0xf0>)
 800abdc:	f010 fa92 	bl	801b104 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d105      	bne.n	800abf2 <recv_udp+0x32>
 800abe6:	4b30      	ldr	r3, [pc, #192]	; (800aca8 <recv_udp+0xe8>)
 800abe8:	22e6      	movs	r2, #230	; 0xe6
 800abea:	4932      	ldr	r1, [pc, #200]	; (800acb4 <recv_udp+0xf4>)
 800abec:	4830      	ldr	r0, [pc, #192]	; (800acb0 <recv_udp+0xf0>)
 800abee:	f010 fa89 	bl	801b104 <iprintf>
  conn = (struct netconn *)arg;
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800abf6:	69fb      	ldr	r3, [r7, #28]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d103      	bne.n	800ac04 <recv_udp+0x44>
    pbuf_free(p);
 800abfc:	6878      	ldr	r0, [r7, #4]
 800abfe:	f003 f8ed 	bl	800dddc <pbuf_free>
    return;
 800ac02:	e04d      	b.n	800aca0 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800ac04:	69fb      	ldr	r3, [r7, #28]
 800ac06:	685b      	ldr	r3, [r3, #4]
 800ac08:	68ba      	ldr	r2, [r7, #8]
 800ac0a:	429a      	cmp	r2, r3
 800ac0c:	d005      	beq.n	800ac1a <recv_udp+0x5a>
 800ac0e:	4b26      	ldr	r3, [pc, #152]	; (800aca8 <recv_udp+0xe8>)
 800ac10:	22ee      	movs	r2, #238	; 0xee
 800ac12:	4929      	ldr	r1, [pc, #164]	; (800acb8 <recv_udp+0xf8>)
 800ac14:	4826      	ldr	r0, [pc, #152]	; (800acb0 <recv_udp+0xf0>)
 800ac16:	f010 fa75 	bl	801b104 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800ac1a:	69fb      	ldr	r3, [r7, #28]
 800ac1c:	3310      	adds	r3, #16
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f00c fbe4 	bl	80173ec <sys_mbox_valid>
 800ac24:	4603      	mov	r3, r0
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d103      	bne.n	800ac32 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f003 f8d6 	bl	800dddc <pbuf_free>
    return;
 800ac30:	e036      	b.n	800aca0 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800ac32:	2006      	movs	r0, #6
 800ac34:	f002 f9dc 	bl	800cff0 <memp_malloc>
 800ac38:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800ac3a:	69bb      	ldr	r3, [r7, #24]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d103      	bne.n	800ac48 <recv_udp+0x88>
    pbuf_free(p);
 800ac40:	6878      	ldr	r0, [r7, #4]
 800ac42:	f003 f8cb 	bl	800dddc <pbuf_free>
    return;
 800ac46:	e02b      	b.n	800aca0 <recv_udp+0xe0>
  } else {
    buf->p = p;
 800ac48:	69bb      	ldr	r3, [r7, #24]
 800ac4a:	687a      	ldr	r2, [r7, #4]
 800ac4c:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800ac4e:	69bb      	ldr	r3, [r7, #24]
 800ac50:	687a      	ldr	r2, [r7, #4]
 800ac52:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d002      	beq.n	800ac60 <recv_udp+0xa0>
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	e000      	b.n	800ac62 <recv_udp+0xa2>
 800ac60:	2300      	movs	r3, #0
 800ac62:	69ba      	ldr	r2, [r7, #24]
 800ac64:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800ac66:	69bb      	ldr	r3, [r7, #24]
 800ac68:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800ac6a:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	891b      	ldrh	r3, [r3, #8]
 800ac70:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800ac72:	69fb      	ldr	r3, [r7, #28]
 800ac74:	3310      	adds	r3, #16
 800ac76:	69b9      	ldr	r1, [r7, #24]
 800ac78:	4618      	mov	r0, r3
 800ac7a:	f00c fb55 	bl	8017328 <sys_mbox_trypost>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d003      	beq.n	800ac8c <recv_udp+0xcc>
    netbuf_delete(buf);
 800ac84:	69b8      	ldr	r0, [r7, #24]
 800ac86:	f001 fadb 	bl	800c240 <netbuf_delete>
    return;
 800ac8a:	e009      	b.n	800aca0 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800ac8c:	69fb      	ldr	r3, [r7, #28]
 800ac8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d005      	beq.n	800aca0 <recv_udp+0xe0>
 800ac94:	69fb      	ldr	r3, [r7, #28]
 800ac96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac98:	8afa      	ldrh	r2, [r7, #22]
 800ac9a:	2100      	movs	r1, #0
 800ac9c:	69f8      	ldr	r0, [r7, #28]
 800ac9e:	4798      	blx	r3
  }
}
 800aca0:	3720      	adds	r7, #32
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bd80      	pop	{r7, pc}
 800aca6:	bf00      	nop
 800aca8:	0801bd24 	.word	0x0801bd24
 800acac:	0801bd9c 	.word	0x0801bd9c
 800acb0:	0801bd68 	.word	0x0801bd68
 800acb4:	0801bdc0 	.word	0x0801bdc0
 800acb8:	0801bde0 	.word	0x0801bde0

0800acbc <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b088      	sub	sp, #32
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	60f8      	str	r0, [r7, #12]
 800acc4:	60b9      	str	r1, [r7, #8]
 800acc6:	607a      	str	r2, [r7, #4]
 800acc8:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800acca:	68bb      	ldr	r3, [r7, #8]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d106      	bne.n	800acde <recv_tcp+0x22>
 800acd0:	4b36      	ldr	r3, [pc, #216]	; (800adac <recv_tcp+0xf0>)
 800acd2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800acd6:	4936      	ldr	r1, [pc, #216]	; (800adb0 <recv_tcp+0xf4>)
 800acd8:	4836      	ldr	r0, [pc, #216]	; (800adb4 <recv_tcp+0xf8>)
 800acda:	f010 fa13 	bl	801b104 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d106      	bne.n	800acf2 <recv_tcp+0x36>
 800ace4:	4b31      	ldr	r3, [pc, #196]	; (800adac <recv_tcp+0xf0>)
 800ace6:	f240 122d 	movw	r2, #301	; 0x12d
 800acea:	4933      	ldr	r1, [pc, #204]	; (800adb8 <recv_tcp+0xfc>)
 800acec:	4831      	ldr	r0, [pc, #196]	; (800adb4 <recv_tcp+0xf8>)
 800acee:	f010 fa09 	bl	801b104 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800acf2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d006      	beq.n	800ad08 <recv_tcp+0x4c>
 800acfa:	4b2c      	ldr	r3, [pc, #176]	; (800adac <recv_tcp+0xf0>)
 800acfc:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800ad00:	492e      	ldr	r1, [pc, #184]	; (800adbc <recv_tcp+0x100>)
 800ad02:	482c      	ldr	r0, [pc, #176]	; (800adb4 <recv_tcp+0xf8>)
 800ad04:	f010 f9fe 	bl	801b104 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800ad0c:	697b      	ldr	r3, [r7, #20]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d102      	bne.n	800ad18 <recv_tcp+0x5c>
    return ERR_VAL;
 800ad12:	f06f 0305 	mvn.w	r3, #5
 800ad16:	e045      	b.n	800ada4 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800ad18:	697b      	ldr	r3, [r7, #20]
 800ad1a:	685b      	ldr	r3, [r3, #4]
 800ad1c:	68ba      	ldr	r2, [r7, #8]
 800ad1e:	429a      	cmp	r2, r3
 800ad20:	d006      	beq.n	800ad30 <recv_tcp+0x74>
 800ad22:	4b22      	ldr	r3, [pc, #136]	; (800adac <recv_tcp+0xf0>)
 800ad24:	f240 1235 	movw	r2, #309	; 0x135
 800ad28:	4925      	ldr	r1, [pc, #148]	; (800adc0 <recv_tcp+0x104>)
 800ad2a:	4822      	ldr	r0, [pc, #136]	; (800adb4 <recv_tcp+0xf8>)
 800ad2c:	f010 f9ea 	bl	801b104 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800ad30:	697b      	ldr	r3, [r7, #20]
 800ad32:	3310      	adds	r3, #16
 800ad34:	4618      	mov	r0, r3
 800ad36:	f00c fb59 	bl	80173ec <sys_mbox_valid>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d10d      	bne.n	800ad5c <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d008      	beq.n	800ad58 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	891b      	ldrh	r3, [r3, #8]
 800ad4a:	4619      	mov	r1, r3
 800ad4c:	68b8      	ldr	r0, [r7, #8]
 800ad4e:	f003 fe9b 	bl	800ea88 <tcp_recved>
      pbuf_free(p);
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f003 f842 	bl	800dddc <pbuf_free>
    }
    return ERR_OK;
 800ad58:	2300      	movs	r3, #0
 800ad5a:	e023      	b.n	800ada4 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d005      	beq.n	800ad6e <recv_tcp+0xb2>
    msg = p;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	891b      	ldrh	r3, [r3, #8]
 800ad6a:	83fb      	strh	r3, [r7, #30]
 800ad6c:	e003      	b.n	800ad76 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800ad6e:	4b15      	ldr	r3, [pc, #84]	; (800adc4 <recv_tcp+0x108>)
 800ad70:	61bb      	str	r3, [r7, #24]
    len = 0;
 800ad72:	2300      	movs	r3, #0
 800ad74:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800ad76:	697b      	ldr	r3, [r7, #20]
 800ad78:	3310      	adds	r3, #16
 800ad7a:	69b9      	ldr	r1, [r7, #24]
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	f00c fad3 	bl	8017328 <sys_mbox_trypost>
 800ad82:	4603      	mov	r3, r0
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d002      	beq.n	800ad8e <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800ad88:	f04f 33ff 	mov.w	r3, #4294967295
 800ad8c:	e00a      	b.n	800ada4 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800ad8e:	697b      	ldr	r3, [r7, #20]
 800ad90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d005      	beq.n	800ada2 <recv_tcp+0xe6>
 800ad96:	697b      	ldr	r3, [r7, #20]
 800ad98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad9a:	8bfa      	ldrh	r2, [r7, #30]
 800ad9c:	2100      	movs	r1, #0
 800ad9e:	6978      	ldr	r0, [r7, #20]
 800ada0:	4798      	blx	r3
  }

  return ERR_OK;
 800ada2:	2300      	movs	r3, #0
}
 800ada4:	4618      	mov	r0, r3
 800ada6:	3720      	adds	r7, #32
 800ada8:	46bd      	mov	sp, r7
 800adaa:	bd80      	pop	{r7, pc}
 800adac:	0801bd24 	.word	0x0801bd24
 800adb0:	0801be00 	.word	0x0801be00
 800adb4:	0801bd68 	.word	0x0801bd68
 800adb8:	0801be24 	.word	0x0801be24
 800adbc:	0801be44 	.word	0x0801be44
 800adc0:	0801be5c 	.word	0x0801be5c
 800adc4:	0801f042 	.word	0x0801f042

0800adc8 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b084      	sub	sp, #16
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
 800add0:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d106      	bne.n	800adea <poll_tcp+0x22>
 800addc:	4b2b      	ldr	r3, [pc, #172]	; (800ae8c <poll_tcp+0xc4>)
 800adde:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800ade2:	492b      	ldr	r1, [pc, #172]	; (800ae90 <poll_tcp+0xc8>)
 800ade4:	482b      	ldr	r0, [pc, #172]	; (800ae94 <poll_tcp+0xcc>)
 800ade6:	f010 f98d 	bl	801b104 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	785b      	ldrb	r3, [r3, #1]
 800adee:	2b01      	cmp	r3, #1
 800adf0:	d104      	bne.n	800adfc <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800adf2:	2101      	movs	r1, #1
 800adf4:	68f8      	ldr	r0, [r7, #12]
 800adf6:	f000 ff3b 	bl	800bc70 <lwip_netconn_do_writemore>
 800adfa:	e016      	b.n	800ae2a <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	785b      	ldrb	r3, [r3, #1]
 800ae00:	2b04      	cmp	r3, #4
 800ae02:	d112      	bne.n	800ae2a <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d00a      	beq.n	800ae22 <poll_tcp+0x5a>
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae10:	7a5b      	ldrb	r3, [r3, #9]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d005      	beq.n	800ae22 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae1a:	7a5a      	ldrb	r2, [r3, #9]
 800ae1c:	3a01      	subs	r2, #1
 800ae1e:	b2d2      	uxtb	r2, r2
 800ae20:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800ae22:	2101      	movs	r1, #1
 800ae24:	68f8      	ldr	r0, [r7, #12]
 800ae26:	f000 fb49 	bl	800b4bc <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ae30:	f003 0310 	and.w	r3, r3, #16
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d023      	beq.n	800ae80 <poll_tcp+0xb8>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	685b      	ldr	r3, [r3, #4]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d01f      	beq.n	800ae80 <poll_tcp+0xb8>
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	685b      	ldr	r3, [r3, #4]
 800ae44:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ae48:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800ae4c:	d318      	bcc.n	800ae80 <poll_tcp+0xb8>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	685b      	ldr	r3, [r3, #4]
 800ae52:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800ae56:	2b04      	cmp	r3, #4
 800ae58:	d812      	bhi.n	800ae80 <poll_tcp+0xb8>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ae60:	f023 0310 	bic.w	r3, r3, #16
 800ae64:	b2da      	uxtb	r2, r3
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	f883 2020 	strb.w	r2, [r3, #32]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d005      	beq.n	800ae80 <poll_tcp+0xb8>
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae78:	2200      	movs	r2, #0
 800ae7a:	2102      	movs	r1, #2
 800ae7c:	68f8      	ldr	r0, [r7, #12]
 800ae7e:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800ae80:	2300      	movs	r3, #0
}
 800ae82:	4618      	mov	r0, r3
 800ae84:	3710      	adds	r7, #16
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bd80      	pop	{r7, pc}
 800ae8a:	bf00      	nop
 800ae8c:	0801bd24 	.word	0x0801bd24
 800ae90:	0801be7c 	.word	0x0801be7c
 800ae94:	0801bd68 	.word	0x0801bd68

0800ae98 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b086      	sub	sp, #24
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	60f8      	str	r0, [r7, #12]
 800aea0:	60b9      	str	r1, [r7, #8]
 800aea2:	4613      	mov	r3, r2
 800aea4:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800aeaa:	697b      	ldr	r3, [r7, #20]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d106      	bne.n	800aebe <sent_tcp+0x26>
 800aeb0:	4b21      	ldr	r3, [pc, #132]	; (800af38 <sent_tcp+0xa0>)
 800aeb2:	f240 1293 	movw	r2, #403	; 0x193
 800aeb6:	4921      	ldr	r1, [pc, #132]	; (800af3c <sent_tcp+0xa4>)
 800aeb8:	4821      	ldr	r0, [pc, #132]	; (800af40 <sent_tcp+0xa8>)
 800aeba:	f010 f923 	bl	801b104 <iprintf>

  if (conn) {
 800aebe:	697b      	ldr	r3, [r7, #20]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d034      	beq.n	800af2e <sent_tcp+0x96>
    if (conn->state == NETCONN_WRITE) {
 800aec4:	697b      	ldr	r3, [r7, #20]
 800aec6:	785b      	ldrb	r3, [r3, #1]
 800aec8:	2b01      	cmp	r3, #1
 800aeca:	d104      	bne.n	800aed6 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800aecc:	2101      	movs	r1, #1
 800aece:	6978      	ldr	r0, [r7, #20]
 800aed0:	f000 fece 	bl	800bc70 <lwip_netconn_do_writemore>
 800aed4:	e007      	b.n	800aee6 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800aed6:	697b      	ldr	r3, [r7, #20]
 800aed8:	785b      	ldrb	r3, [r3, #1]
 800aeda:	2b04      	cmp	r3, #4
 800aedc:	d103      	bne.n	800aee6 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800aede:	2101      	movs	r1, #1
 800aee0:	6978      	ldr	r0, [r7, #20]
 800aee2:	f000 faeb 	bl	800b4bc <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800aee6:	697b      	ldr	r3, [r7, #20]
 800aee8:	685b      	ldr	r3, [r3, #4]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d01f      	beq.n	800af2e <sent_tcp+0x96>
 800aeee:	697b      	ldr	r3, [r7, #20]
 800aef0:	685b      	ldr	r3, [r3, #4]
 800aef2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800aef6:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800aefa:	d318      	bcc.n	800af2e <sent_tcp+0x96>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800aefc:	697b      	ldr	r3, [r7, #20]
 800aefe:	685b      	ldr	r3, [r3, #4]
 800af00:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800af04:	2b04      	cmp	r3, #4
 800af06:	d812      	bhi.n	800af2e <sent_tcp+0x96>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800af08:	697b      	ldr	r3, [r7, #20]
 800af0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800af0e:	f023 0310 	bic.w	r3, r3, #16
 800af12:	b2da      	uxtb	r2, r3
 800af14:	697b      	ldr	r3, [r7, #20]
 800af16:	f883 2020 	strb.w	r2, [r3, #32]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800af1a:	697b      	ldr	r3, [r7, #20]
 800af1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d005      	beq.n	800af2e <sent_tcp+0x96>
 800af22:	697b      	ldr	r3, [r7, #20]
 800af24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af26:	88fa      	ldrh	r2, [r7, #6]
 800af28:	2102      	movs	r1, #2
 800af2a:	6978      	ldr	r0, [r7, #20]
 800af2c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800af2e:	2300      	movs	r3, #0
}
 800af30:	4618      	mov	r0, r3
 800af32:	3718      	adds	r7, #24
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}
 800af38:	0801bd24 	.word	0x0801bd24
 800af3c:	0801be7c 	.word	0x0801be7c
 800af40:	0801bd68 	.word	0x0801bd68

0800af44 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b088      	sub	sp, #32
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
 800af4c:	460b      	mov	r3, r1
 800af4e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800af54:	69fb      	ldr	r3, [r7, #28]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d106      	bne.n	800af68 <err_tcp+0x24>
 800af5a:	4b61      	ldr	r3, [pc, #388]	; (800b0e0 <err_tcp+0x19c>)
 800af5c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800af60:	4960      	ldr	r1, [pc, #384]	; (800b0e4 <err_tcp+0x1a0>)
 800af62:	4861      	ldr	r0, [pc, #388]	; (800b0e8 <err_tcp+0x1a4>)
 800af64:	f010 f8ce 	bl	801b104 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800af68:	f00c fb4a 	bl	8017600 <sys_arch_protect>
 800af6c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800af6e:	69fb      	ldr	r3, [r7, #28]
 800af70:	2200      	movs	r2, #0
 800af72:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800af74:	69fb      	ldr	r3, [r7, #28]
 800af76:	78fa      	ldrb	r2, [r7, #3]
 800af78:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800af7a:	69fb      	ldr	r3, [r7, #28]
 800af7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800af80:	f043 0301 	orr.w	r3, r3, #1
 800af84:	b2da      	uxtb	r2, r3
 800af86:	69fb      	ldr	r3, [r7, #28]
 800af88:	f883 2020 	strb.w	r2, [r3, #32]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800af8c:	69fb      	ldr	r3, [r7, #28]
 800af8e:	785b      	ldrb	r3, [r3, #1]
 800af90:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800af92:	69fb      	ldr	r3, [r7, #28]
 800af94:	2200      	movs	r2, #0
 800af96:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800af98:	69b8      	ldr	r0, [r7, #24]
 800af9a:	f00c fb3f 	bl	801761c <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800af9e:	69fb      	ldr	r3, [r7, #28]
 800afa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d005      	beq.n	800afb2 <err_tcp+0x6e>
 800afa6:	69fb      	ldr	r3, [r7, #28]
 800afa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afaa:	2200      	movs	r2, #0
 800afac:	2104      	movs	r1, #4
 800afae:	69f8      	ldr	r0, [r7, #28]
 800afb0:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800afb2:	69fb      	ldr	r3, [r7, #28]
 800afb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d005      	beq.n	800afc6 <err_tcp+0x82>
 800afba:	69fb      	ldr	r3, [r7, #28]
 800afbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afbe:	2200      	movs	r2, #0
 800afc0:	2100      	movs	r1, #0
 800afc2:	69f8      	ldr	r0, [r7, #28]
 800afc4:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800afc6:	69fb      	ldr	r3, [r7, #28]
 800afc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d005      	beq.n	800afda <err_tcp+0x96>
 800afce:	69fb      	ldr	r3, [r7, #28]
 800afd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afd2:	2200      	movs	r2, #0
 800afd4:	2102      	movs	r1, #2
 800afd6:	69f8      	ldr	r0, [r7, #28]
 800afd8:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800afda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800afde:	4618      	mov	r0, r3
 800afe0:	f7ff fd7e 	bl	800aae0 <lwip_netconn_err_to_msg>
 800afe4:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800afe6:	69fb      	ldr	r3, [r7, #28]
 800afe8:	3310      	adds	r3, #16
 800afea:	4618      	mov	r0, r3
 800afec:	f00c f9fe 	bl	80173ec <sys_mbox_valid>
 800aff0:	4603      	mov	r3, r0
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d005      	beq.n	800b002 <err_tcp+0xbe>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800aff6:	69fb      	ldr	r3, [r7, #28]
 800aff8:	3310      	adds	r3, #16
 800affa:	6939      	ldr	r1, [r7, #16]
 800affc:	4618      	mov	r0, r3
 800affe:	f00c f993 	bl	8017328 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800b002:	69fb      	ldr	r3, [r7, #28]
 800b004:	3314      	adds	r3, #20
 800b006:	4618      	mov	r0, r3
 800b008:	f00c f9f0 	bl	80173ec <sys_mbox_valid>
 800b00c:	4603      	mov	r3, r0
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d005      	beq.n	800b01e <err_tcp+0xda>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800b012:	69fb      	ldr	r3, [r7, #28]
 800b014:	3314      	adds	r3, #20
 800b016:	6939      	ldr	r1, [r7, #16]
 800b018:	4618      	mov	r0, r3
 800b01a:	f00c f985 	bl	8017328 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800b01e:	7dfb      	ldrb	r3, [r7, #23]
 800b020:	2b01      	cmp	r3, #1
 800b022:	d005      	beq.n	800b030 <err_tcp+0xec>
 800b024:	7dfb      	ldrb	r3, [r7, #23]
 800b026:	2b04      	cmp	r3, #4
 800b028:	d002      	beq.n	800b030 <err_tcp+0xec>
 800b02a:	7dfb      	ldrb	r3, [r7, #23]
 800b02c:	2b03      	cmp	r3, #3
 800b02e:	d146      	bne.n	800b0be <err_tcp+0x17a>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800b030:	69fb      	ldr	r3, [r7, #28]
 800b032:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b036:	f003 0304 	and.w	r3, r3, #4
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	bf14      	ite	ne
 800b03e:	2301      	movne	r3, #1
 800b040:	2300      	moveq	r3, #0
 800b042:	b2db      	uxtb	r3, r3
 800b044:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800b046:	69fb      	ldr	r3, [r7, #28]
 800b048:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b04c:	f023 0304 	bic.w	r3, r3, #4
 800b050:	b2da      	uxtb	r2, r3
 800b052:	69fb      	ldr	r3, [r7, #28]
 800b054:	f883 2020 	strb.w	r2, [r3, #32]

    if (!was_nonblocking_connect) {
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d13b      	bne.n	800b0d6 <err_tcp+0x192>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800b05e:	69fb      	ldr	r3, [r7, #28]
 800b060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b062:	2b00      	cmp	r3, #0
 800b064:	d106      	bne.n	800b074 <err_tcp+0x130>
 800b066:	4b1e      	ldr	r3, [pc, #120]	; (800b0e0 <err_tcp+0x19c>)
 800b068:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800b06c:	491f      	ldr	r1, [pc, #124]	; (800b0ec <err_tcp+0x1a8>)
 800b06e:	481e      	ldr	r0, [pc, #120]	; (800b0e8 <err_tcp+0x1a4>)
 800b070:	f010 f848 	bl	801b104 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800b074:	7dfb      	ldrb	r3, [r7, #23]
 800b076:	2b04      	cmp	r3, #4
 800b078:	d104      	bne.n	800b084 <err_tcp+0x140>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800b07a:	69fb      	ldr	r3, [r7, #28]
 800b07c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b07e:	2200      	movs	r2, #0
 800b080:	711a      	strb	r2, [r3, #4]
 800b082:	e003      	b.n	800b08c <err_tcp+0x148>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800b084:	69fb      	ldr	r3, [r7, #28]
 800b086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b088:	78fa      	ldrb	r2, [r7, #3]
 800b08a:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b08c:	69fb      	ldr	r3, [r7, #28]
 800b08e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	330c      	adds	r3, #12
 800b094:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800b096:	68b8      	ldr	r0, [r7, #8]
 800b098:	f00c fa36 	bl	8017508 <sys_sem_valid>
 800b09c:	4603      	mov	r3, r0
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d106      	bne.n	800b0b0 <err_tcp+0x16c>
 800b0a2:	4b0f      	ldr	r3, [pc, #60]	; (800b0e0 <err_tcp+0x19c>)
 800b0a4:	f240 12ef 	movw	r2, #495	; 0x1ef
 800b0a8:	4911      	ldr	r1, [pc, #68]	; (800b0f0 <err_tcp+0x1ac>)
 800b0aa:	480f      	ldr	r0, [pc, #60]	; (800b0e8 <err_tcp+0x1a4>)
 800b0ac:	f010 f82a 	bl	801b104 <iprintf>
      conn->current_msg = NULL;
 800b0b0:	69fb      	ldr	r3, [r7, #28]
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	625a      	str	r2, [r3, #36]	; 0x24
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800b0b6:	68b8      	ldr	r0, [r7, #8]
 800b0b8:	f00c fa0c 	bl	80174d4 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800b0bc:	e00b      	b.n	800b0d6 <err_tcp+0x192>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800b0be:	69fb      	ldr	r3, [r7, #28]
 800b0c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d008      	beq.n	800b0d8 <err_tcp+0x194>
 800b0c6:	4b06      	ldr	r3, [pc, #24]	; (800b0e0 <err_tcp+0x19c>)
 800b0c8:	f240 12f7 	movw	r2, #503	; 0x1f7
 800b0cc:	4909      	ldr	r1, [pc, #36]	; (800b0f4 <err_tcp+0x1b0>)
 800b0ce:	4806      	ldr	r0, [pc, #24]	; (800b0e8 <err_tcp+0x1a4>)
 800b0d0:	f010 f818 	bl	801b104 <iprintf>
  }
}
 800b0d4:	e000      	b.n	800b0d8 <err_tcp+0x194>
      (old_state == NETCONN_CONNECT)) {
 800b0d6:	bf00      	nop
}
 800b0d8:	bf00      	nop
 800b0da:	3720      	adds	r7, #32
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd80      	pop	{r7, pc}
 800b0e0:	0801bd24 	.word	0x0801bd24
 800b0e4:	0801be7c 	.word	0x0801be7c
 800b0e8:	0801bd68 	.word	0x0801bd68
 800b0ec:	0801be8c 	.word	0x0801be8c
 800b0f0:	0801bea8 	.word	0x0801bea8
 800b0f4:	0801bec4 	.word	0x0801bec4

0800b0f8 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b084      	sub	sp, #16
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	685b      	ldr	r3, [r3, #4]
 800b104:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800b106:	6879      	ldr	r1, [r7, #4]
 800b108:	68f8      	ldr	r0, [r7, #12]
 800b10a:	f004 fc9b 	bl	800fa44 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800b10e:	490a      	ldr	r1, [pc, #40]	; (800b138 <setup_tcp+0x40>)
 800b110:	68f8      	ldr	r0, [r7, #12]
 800b112:	f004 fca9 	bl	800fa68 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800b116:	4909      	ldr	r1, [pc, #36]	; (800b13c <setup_tcp+0x44>)
 800b118:	68f8      	ldr	r0, [r7, #12]
 800b11a:	f004 fcc7 	bl	800faac <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800b11e:	2202      	movs	r2, #2
 800b120:	4907      	ldr	r1, [pc, #28]	; (800b140 <setup_tcp+0x48>)
 800b122:	68f8      	ldr	r0, [r7, #12]
 800b124:	f004 fd1e 	bl	800fb64 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800b128:	4906      	ldr	r1, [pc, #24]	; (800b144 <setup_tcp+0x4c>)
 800b12a:	68f8      	ldr	r0, [r7, #12]
 800b12c:	f004 fce0 	bl	800faf0 <tcp_err>
}
 800b130:	bf00      	nop
 800b132:	3710      	adds	r7, #16
 800b134:	46bd      	mov	sp, r7
 800b136:	bd80      	pop	{r7, pc}
 800b138:	0800acbd 	.word	0x0800acbd
 800b13c:	0800ae99 	.word	0x0800ae99
 800b140:	0800adc9 	.word	0x0800adc9
 800b144:	0800af45 	.word	0x0800af45

0800b148 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800b148:	b590      	push	{r4, r7, lr}
 800b14a:	b085      	sub	sp, #20
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800b150:	2300      	movs	r3, #0
 800b152:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	685b      	ldr	r3, [r3, #4]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d006      	beq.n	800b16c <pcb_new+0x24>
 800b15e:	4b2b      	ldr	r3, [pc, #172]	; (800b20c <pcb_new+0xc4>)
 800b160:	f240 2265 	movw	r2, #613	; 0x265
 800b164:	492a      	ldr	r1, [pc, #168]	; (800b210 <pcb_new+0xc8>)
 800b166:	482b      	ldr	r0, [pc, #172]	; (800b214 <pcb_new+0xcc>)
 800b168:	f00f ffcc 	bl	801b104 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	781b      	ldrb	r3, [r3, #0]
 800b172:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b176:	2b10      	cmp	r3, #16
 800b178:	d022      	beq.n	800b1c0 <pcb_new+0x78>
 800b17a:	2b20      	cmp	r3, #32
 800b17c:	d133      	bne.n	800b1e6 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681c      	ldr	r4, [r3, #0]
 800b182:	7bfb      	ldrb	r3, [r7, #15]
 800b184:	4618      	mov	r0, r3
 800b186:	f009 fda6 	bl	8014cd6 <udp_new_ip_type>
 800b18a:	4603      	mov	r3, r0
 800b18c:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	685b      	ldr	r3, [r3, #4]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d02a      	beq.n	800b1ee <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	781b      	ldrb	r3, [r3, #0]
 800b19e:	2b22      	cmp	r3, #34	; 0x22
 800b1a0:	d104      	bne.n	800b1ac <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	685b      	ldr	r3, [r3, #4]
 800b1a8:	2201      	movs	r2, #1
 800b1aa:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	6858      	ldr	r0, [r3, #4]
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	461a      	mov	r2, r3
 800b1b8:	4917      	ldr	r1, [pc, #92]	; (800b218 <pcb_new+0xd0>)
 800b1ba:	f009 fd13 	bl	8014be4 <udp_recv>
      }
      break;
 800b1be:	e016      	b.n	800b1ee <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681c      	ldr	r4, [r3, #0]
 800b1c4:	7bfb      	ldrb	r3, [r7, #15]
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	f004 fc2e 	bl	800fa28 <tcp_new_ip_type>
 800b1cc:	4603      	mov	r3, r0
 800b1ce:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	685b      	ldr	r3, [r3, #4]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d00b      	beq.n	800b1f2 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	4618      	mov	r0, r3
 800b1e0:	f7ff ff8a 	bl	800b0f8 <setup_tcp>
      }
      break;
 800b1e4:	e005      	b.n	800b1f2 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	22fa      	movs	r2, #250	; 0xfa
 800b1ea:	711a      	strb	r2, [r3, #4]
      return;
 800b1ec:	e00a      	b.n	800b204 <pcb_new+0xbc>
      break;
 800b1ee:	bf00      	nop
 800b1f0:	e000      	b.n	800b1f4 <pcb_new+0xac>
      break;
 800b1f2:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	685b      	ldr	r3, [r3, #4]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d102      	bne.n	800b204 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	22ff      	movs	r2, #255	; 0xff
 800b202:	711a      	strb	r2, [r3, #4]
  }
}
 800b204:	3714      	adds	r7, #20
 800b206:	46bd      	mov	sp, r7
 800b208:	bd90      	pop	{r4, r7, pc}
 800b20a:	bf00      	nop
 800b20c:	0801bd24 	.word	0x0801bd24
 800b210:	0801bf08 	.word	0x0801bf08
 800b214:	0801bd68 	.word	0x0801bd68
 800b218:	0800abc1 	.word	0x0800abc1

0800b21c <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b084      	sub	sp, #16
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	2200      	movs	r2, #0
 800b22c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	685b      	ldr	r3, [r3, #4]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d102      	bne.n	800b23e <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800b238:	68f8      	ldr	r0, [r7, #12]
 800b23a:	f7ff ff85 	bl	800b148 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800b23e:	bf00      	nop
 800b240:	3710      	adds	r7, #16
 800b242:	46bd      	mov	sp, r7
 800b244:	bd80      	pop	{r7, pc}
	...

0800b248 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b086      	sub	sp, #24
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	4603      	mov	r3, r0
 800b250:	6039      	str	r1, [r7, #0]
 800b252:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800b254:	2300      	movs	r3, #0
 800b256:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800b258:	2007      	movs	r0, #7
 800b25a:	f001 fec9 	bl	800cff0 <memp_malloc>
 800b25e:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d101      	bne.n	800b26a <netconn_alloc+0x22>
    return NULL;
 800b266:	2300      	movs	r3, #0
 800b268:	e056      	b.n	800b318 <netconn_alloc+0xd0>
  }

  conn->pending_err = ERR_OK;
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	2200      	movs	r2, #0
 800b26e:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	79fa      	ldrb	r2, [r7, #7]
 800b274:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	2200      	movs	r2, #0
 800b27a:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800b27c:	79fb      	ldrb	r3, [r7, #7]
 800b27e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b282:	2b10      	cmp	r3, #16
 800b284:	d004      	beq.n	800b290 <netconn_alloc+0x48>
 800b286:	2b20      	cmp	r3, #32
 800b288:	d105      	bne.n	800b296 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800b28a:	2306      	movs	r3, #6
 800b28c:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800b28e:	e00a      	b.n	800b2a6 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800b290:	2306      	movs	r3, #6
 800b292:	617b      	str	r3, [r7, #20]
      break;
 800b294:	e007      	b.n	800b2a6 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800b296:	4b22      	ldr	r3, [pc, #136]	; (800b320 <netconn_alloc+0xd8>)
 800b298:	f240 22e5 	movw	r2, #741	; 0x2e5
 800b29c:	4921      	ldr	r1, [pc, #132]	; (800b324 <netconn_alloc+0xdc>)
 800b29e:	4822      	ldr	r0, [pc, #136]	; (800b328 <netconn_alloc+0xe0>)
 800b2a0:	f00f ff30 	bl	801b104 <iprintf>
      goto free_and_return;
 800b2a4:	e033      	b.n	800b30e <netconn_alloc+0xc6>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	3310      	adds	r3, #16
 800b2aa:	6979      	ldr	r1, [r7, #20]
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	f00c f80f 	bl	80172d0 <sys_mbox_new>
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d129      	bne.n	800b30c <netconn_alloc+0xc4>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	330c      	adds	r3, #12
 800b2bc:	2100      	movs	r1, #0
 800b2be:	4618      	mov	r0, r3
 800b2c0:	f00c f8b2 	bl	8017428 <sys_sem_new>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d005      	beq.n	800b2d6 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	3310      	adds	r3, #16
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	f00c f818 	bl	8017304 <sys_mbox_free>
    goto free_and_return;
 800b2d4:	e01b      	b.n	800b30e <netconn_alloc+0xc6>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	3314      	adds	r3, #20
 800b2da:	4618      	mov	r0, r3
 800b2dc:	f00c f897 	bl	801740e <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	f04f 32ff 	mov.w	r2, #4294967295
 800b2ec:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	683a      	ldr	r2, [r7, #0]
 800b2f2:	629a      	str	r2, [r3, #40]	; 0x28
#if LWIP_TCP
  conn->current_msg  = NULL;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	625a      	str	r2, [r3, #36]	; 0x24
#endif /* LWIP_TCP */
#if LWIP_SO_SNDTIMEO
  conn->send_timeout = 0;
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
  conn->recv_timeout = 0;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	61da      	str	r2, [r3, #28]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	7cfa      	ldrb	r2, [r7, #19]
 800b304:	f883 2020 	strb.w	r2, [r3, #32]
  return conn;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	e005      	b.n	800b318 <netconn_alloc+0xd0>
    goto free_and_return;
 800b30c:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800b30e:	68f9      	ldr	r1, [r7, #12]
 800b310:	2007      	movs	r0, #7
 800b312:	f001 febf 	bl	800d094 <memp_free>
  return NULL;
 800b316:	2300      	movs	r3, #0
}
 800b318:	4618      	mov	r0, r3
 800b31a:	3718      	adds	r7, #24
 800b31c:	46bd      	mov	sp, r7
 800b31e:	bd80      	pop	{r7, pc}
 800b320:	0801bd24 	.word	0x0801bd24
 800b324:	0801bf28 	.word	0x0801bf28
 800b328:	0801bd68 	.word	0x0801bd68

0800b32c <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b082      	sub	sp, #8
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	685b      	ldr	r3, [r3, #4]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d006      	beq.n	800b34a <netconn_free+0x1e>
 800b33c:	4b1b      	ldr	r3, [pc, #108]	; (800b3ac <netconn_free+0x80>)
 800b33e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800b342:	491b      	ldr	r1, [pc, #108]	; (800b3b0 <netconn_free+0x84>)
 800b344:	481b      	ldr	r0, [pc, #108]	; (800b3b4 <netconn_free+0x88>)
 800b346:	f00f fedd 	bl	801b104 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	3310      	adds	r3, #16
 800b34e:	4618      	mov	r0, r3
 800b350:	f00c f84c 	bl	80173ec <sys_mbox_valid>
 800b354:	4603      	mov	r3, r0
 800b356:	2b00      	cmp	r3, #0
 800b358:	d006      	beq.n	800b368 <netconn_free+0x3c>
 800b35a:	4b14      	ldr	r3, [pc, #80]	; (800b3ac <netconn_free+0x80>)
 800b35c:	f240 3223 	movw	r2, #803	; 0x323
 800b360:	4915      	ldr	r1, [pc, #84]	; (800b3b8 <netconn_free+0x8c>)
 800b362:	4814      	ldr	r0, [pc, #80]	; (800b3b4 <netconn_free+0x88>)
 800b364:	f00f fece 	bl	801b104 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	3314      	adds	r3, #20
 800b36c:	4618      	mov	r0, r3
 800b36e:	f00c f83d 	bl	80173ec <sys_mbox_valid>
 800b372:	4603      	mov	r3, r0
 800b374:	2b00      	cmp	r3, #0
 800b376:	d006      	beq.n	800b386 <netconn_free+0x5a>
 800b378:	4b0c      	ldr	r3, [pc, #48]	; (800b3ac <netconn_free+0x80>)
 800b37a:	f240 3226 	movw	r2, #806	; 0x326
 800b37e:	490f      	ldr	r1, [pc, #60]	; (800b3bc <netconn_free+0x90>)
 800b380:	480c      	ldr	r0, [pc, #48]	; (800b3b4 <netconn_free+0x88>)
 800b382:	f00f febf 	bl	801b104 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	330c      	adds	r3, #12
 800b38a:	4618      	mov	r0, r3
 800b38c:	f00c f8af 	bl	80174ee <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	330c      	adds	r3, #12
 800b394:	4618      	mov	r0, r3
 800b396:	f00c f8c8 	bl	801752a <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800b39a:	6879      	ldr	r1, [r7, #4]
 800b39c:	2007      	movs	r0, #7
 800b39e:	f001 fe79 	bl	800d094 <memp_free>
}
 800b3a2:	bf00      	nop
 800b3a4:	3708      	adds	r7, #8
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	bd80      	pop	{r7, pc}
 800b3aa:	bf00      	nop
 800b3ac:	0801bd24 	.word	0x0801bd24
 800b3b0:	0801bf50 	.word	0x0801bf50
 800b3b4:	0801bd68 	.word	0x0801bd68
 800b3b8:	0801bf80 	.word	0x0801bf80
 800b3bc:	0801bfbc 	.word	0x0801bfbc

0800b3c0 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b086      	sub	sp, #24
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	3310      	adds	r3, #16
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	f00c f80d 	bl	80173ec <sys_mbox_valid>
 800b3d2:	4603      	mov	r3, r0
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d02f      	beq.n	800b438 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800b3d8:	e018      	b.n	800b40c <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	781b      	ldrb	r3, [r3, #0]
 800b3de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b3e2:	2b10      	cmp	r3, #16
 800b3e4:	d10e      	bne.n	800b404 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800b3e6:	693b      	ldr	r3, [r7, #16]
 800b3e8:	f107 020f 	add.w	r2, r7, #15
 800b3ec:	4611      	mov	r1, r2
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	f7ff fbac 	bl	800ab4c <lwip_netconn_is_err_msg>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d108      	bne.n	800b40c <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800b3fa:	693b      	ldr	r3, [r7, #16]
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	f002 fced 	bl	800dddc <pbuf_free>
 800b402:	e003      	b.n	800b40c <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800b404:	693b      	ldr	r3, [r7, #16]
 800b406:	4618      	mov	r0, r3
 800b408:	f000 ff1a 	bl	800c240 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	3310      	adds	r3, #16
 800b410:	f107 0210 	add.w	r2, r7, #16
 800b414:	4611      	mov	r1, r2
 800b416:	4618      	mov	r0, r3
 800b418:	f00b ffd1 	bl	80173be <sys_arch_mbox_tryfetch>
 800b41c:	4603      	mov	r3, r0
 800b41e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b422:	d1da      	bne.n	800b3da <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	3310      	adds	r3, #16
 800b428:	4618      	mov	r0, r3
 800b42a:	f00b ff6b 	bl	8017304 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	3310      	adds	r3, #16
 800b432:	4618      	mov	r0, r3
 800b434:	f00b ffeb 	bl	801740e <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	3314      	adds	r3, #20
 800b43c:	4618      	mov	r0, r3
 800b43e:	f00b ffd5 	bl	80173ec <sys_mbox_valid>
 800b442:	4603      	mov	r3, r0
 800b444:	2b00      	cmp	r3, #0
 800b446:	d034      	beq.n	800b4b2 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800b448:	e01d      	b.n	800b486 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800b44a:	693b      	ldr	r3, [r7, #16]
 800b44c:	f107 020e 	add.w	r2, r7, #14
 800b450:	4611      	mov	r1, r2
 800b452:	4618      	mov	r0, r3
 800b454:	f7ff fb7a 	bl	800ab4c <lwip_netconn_is_err_msg>
 800b458:	4603      	mov	r3, r0
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d113      	bne.n	800b486 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800b45e:	693b      	ldr	r3, [r7, #16]
 800b460:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800b462:	6978      	ldr	r0, [r7, #20]
 800b464:	f7ff ffac 	bl	800b3c0 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800b468:	697b      	ldr	r3, [r7, #20]
 800b46a:	685b      	ldr	r3, [r3, #4]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d007      	beq.n	800b480 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800b470:	697b      	ldr	r3, [r7, #20]
 800b472:	685b      	ldr	r3, [r3, #4]
 800b474:	4618      	mov	r0, r3
 800b476:	f003 faa1 	bl	800e9bc <tcp_abort>
            newconn->pcb.tcp = NULL;
 800b47a:	697b      	ldr	r3, [r7, #20]
 800b47c:	2200      	movs	r2, #0
 800b47e:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800b480:	6978      	ldr	r0, [r7, #20]
 800b482:	f7ff ff53 	bl	800b32c <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	3314      	adds	r3, #20
 800b48a:	f107 0210 	add.w	r2, r7, #16
 800b48e:	4611      	mov	r1, r2
 800b490:	4618      	mov	r0, r3
 800b492:	f00b ff94 	bl	80173be <sys_arch_mbox_tryfetch>
 800b496:	4603      	mov	r3, r0
 800b498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b49c:	d1d5      	bne.n	800b44a <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	3314      	adds	r3, #20
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	f00b ff2e 	bl	8017304 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	3314      	adds	r3, #20
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	f00b ffae 	bl	801740e <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800b4b2:	bf00      	nop
 800b4b4:	3718      	adds	r7, #24
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bd80      	pop	{r7, pc}
	...

0800b4bc <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b086      	sub	sp, #24
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
 800b4c4:	460b      	mov	r3, r1
 800b4c6:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d106      	bne.n	800b4e0 <lwip_netconn_do_close_internal+0x24>
 800b4d2:	4ba1      	ldr	r3, [pc, #644]	; (800b758 <lwip_netconn_do_close_internal+0x29c>)
 800b4d4:	f240 32a2 	movw	r2, #930	; 0x3a2
 800b4d8:	49a0      	ldr	r1, [pc, #640]	; (800b75c <lwip_netconn_do_close_internal+0x2a0>)
 800b4da:	48a1      	ldr	r0, [pc, #644]	; (800b760 <lwip_netconn_do_close_internal+0x2a4>)
 800b4dc:	f00f fe12 	bl	801b104 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	781b      	ldrb	r3, [r3, #0]
 800b4e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b4e8:	2b10      	cmp	r3, #16
 800b4ea:	d006      	beq.n	800b4fa <lwip_netconn_do_close_internal+0x3e>
 800b4ec:	4b9a      	ldr	r3, [pc, #616]	; (800b758 <lwip_netconn_do_close_internal+0x29c>)
 800b4ee:	f240 32a3 	movw	r2, #931	; 0x3a3
 800b4f2:	499c      	ldr	r1, [pc, #624]	; (800b764 <lwip_netconn_do_close_internal+0x2a8>)
 800b4f4:	489a      	ldr	r0, [pc, #616]	; (800b760 <lwip_netconn_do_close_internal+0x2a4>)
 800b4f6:	f00f fe05 	bl	801b104 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	785b      	ldrb	r3, [r3, #1]
 800b4fe:	2b04      	cmp	r3, #4
 800b500:	d006      	beq.n	800b510 <lwip_netconn_do_close_internal+0x54>
 800b502:	4b95      	ldr	r3, [pc, #596]	; (800b758 <lwip_netconn_do_close_internal+0x29c>)
 800b504:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800b508:	4997      	ldr	r1, [pc, #604]	; (800b768 <lwip_netconn_do_close_internal+0x2ac>)
 800b50a:	4895      	ldr	r0, [pc, #596]	; (800b760 <lwip_netconn_do_close_internal+0x2a4>)
 800b50c:	f00f fdfa 	bl	801b104 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	685b      	ldr	r3, [r3, #4]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d106      	bne.n	800b526 <lwip_netconn_do_close_internal+0x6a>
 800b518:	4b8f      	ldr	r3, [pc, #572]	; (800b758 <lwip_netconn_do_close_internal+0x29c>)
 800b51a:	f240 32a5 	movw	r2, #933	; 0x3a5
 800b51e:	4993      	ldr	r1, [pc, #588]	; (800b76c <lwip_netconn_do_close_internal+0x2b0>)
 800b520:	488f      	ldr	r0, [pc, #572]	; (800b760 <lwip_netconn_do_close_internal+0x2a4>)
 800b522:	f00f fdef 	bl	801b104 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d106      	bne.n	800b53c <lwip_netconn_do_close_internal+0x80>
 800b52e:	4b8a      	ldr	r3, [pc, #552]	; (800b758 <lwip_netconn_do_close_internal+0x29c>)
 800b530:	f240 32a6 	movw	r2, #934	; 0x3a6
 800b534:	498e      	ldr	r1, [pc, #568]	; (800b770 <lwip_netconn_do_close_internal+0x2b4>)
 800b536:	488a      	ldr	r0, [pc, #552]	; (800b760 <lwip_netconn_do_close_internal+0x2a4>)
 800b538:	f00f fde4 	bl	801b104 <iprintf>

  tpcb = conn->pcb.tcp;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	685b      	ldr	r3, [r3, #4]
 800b540:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b546:	7a1b      	ldrb	r3, [r3, #8]
 800b548:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800b54a:	7bfb      	ldrb	r3, [r7, #15]
 800b54c:	f003 0301 	and.w	r3, r3, #1
 800b550:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800b552:	7bfb      	ldrb	r3, [r7, #15]
 800b554:	f003 0302 	and.w	r3, r3, #2
 800b558:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800b55a:	7bfb      	ldrb	r3, [r7, #15]
 800b55c:	2b03      	cmp	r3, #3
 800b55e:	d102      	bne.n	800b566 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800b560:	2301      	movs	r3, #1
 800b562:	75bb      	strb	r3, [r7, #22]
 800b564:	e01f      	b.n	800b5a6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800b566:	7bbb      	ldrb	r3, [r7, #14]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d00e      	beq.n	800b58a <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800b56c:	693b      	ldr	r3, [r7, #16]
 800b56e:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800b570:	2b05      	cmp	r3, #5
 800b572:	d007      	beq.n	800b584 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800b574:	693b      	ldr	r3, [r7, #16]
 800b576:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800b578:	2b06      	cmp	r3, #6
 800b57a:	d003      	beq.n	800b584 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800b57c:	693b      	ldr	r3, [r7, #16]
 800b57e:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800b580:	2b08      	cmp	r3, #8
 800b582:	d102      	bne.n	800b58a <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800b584:	2301      	movs	r3, #1
 800b586:	75bb      	strb	r3, [r7, #22]
 800b588:	e00d      	b.n	800b5a6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800b58a:	7b7b      	ldrb	r3, [r7, #13]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d008      	beq.n	800b5a2 <lwip_netconn_do_close_internal+0xe6>
 800b590:	693b      	ldr	r3, [r7, #16]
 800b592:	8b5b      	ldrh	r3, [r3, #26]
 800b594:	f003 0310 	and.w	r3, r3, #16
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d002      	beq.n	800b5a2 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800b59c:	2301      	movs	r3, #1
 800b59e:	75bb      	strb	r3, [r7, #22]
 800b5a0:	e001      	b.n	800b5a6 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800b5a6:	7dbb      	ldrb	r3, [r7, #22]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d003      	beq.n	800b5b4 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800b5ac:	2100      	movs	r1, #0
 800b5ae:	6938      	ldr	r0, [r7, #16]
 800b5b0:	f004 fa48 	bl	800fa44 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800b5b4:	693b      	ldr	r3, [r7, #16]
 800b5b6:	7d1b      	ldrb	r3, [r3, #20]
 800b5b8:	2b01      	cmp	r3, #1
 800b5ba:	d104      	bne.n	800b5c6 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800b5bc:	2100      	movs	r1, #0
 800b5be:	6938      	ldr	r0, [r7, #16]
 800b5c0:	f004 fab8 	bl	800fb34 <tcp_accept>
 800b5c4:	e01d      	b.n	800b602 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800b5c6:	7bbb      	ldrb	r3, [r7, #14]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d007      	beq.n	800b5dc <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800b5cc:	2100      	movs	r1, #0
 800b5ce:	6938      	ldr	r0, [r7, #16]
 800b5d0:	f004 fa4a 	bl	800fa68 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800b5d4:	2100      	movs	r1, #0
 800b5d6:	6938      	ldr	r0, [r7, #16]
 800b5d8:	f004 faac 	bl	800fb34 <tcp_accept>
    }
    if (shut_tx) {
 800b5dc:	7b7b      	ldrb	r3, [r7, #13]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d003      	beq.n	800b5ea <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800b5e2:	2100      	movs	r1, #0
 800b5e4:	6938      	ldr	r0, [r7, #16]
 800b5e6:	f004 fa61 	bl	800faac <tcp_sent>
    }
    if (shut_close) {
 800b5ea:	7dbb      	ldrb	r3, [r7, #22]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d008      	beq.n	800b602 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	2100      	movs	r1, #0
 800b5f4:	6938      	ldr	r0, [r7, #16]
 800b5f6:	f004 fab5 	bl	800fb64 <tcp_poll>
      tcp_err(tpcb, NULL);
 800b5fa:	2100      	movs	r1, #0
 800b5fc:	6938      	ldr	r0, [r7, #16]
 800b5fe:	f004 fa77 	bl	800faf0 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800b602:	7dbb      	ldrb	r3, [r7, #22]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d005      	beq.n	800b614 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800b608:	6938      	ldr	r0, [r7, #16]
 800b60a:	f003 f891 	bl	800e730 <tcp_close>
 800b60e:	4603      	mov	r3, r0
 800b610:	75fb      	strb	r3, [r7, #23]
 800b612:	e007      	b.n	800b624 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800b614:	7bbb      	ldrb	r3, [r7, #14]
 800b616:	7b7a      	ldrb	r2, [r7, #13]
 800b618:	4619      	mov	r1, r3
 800b61a:	6938      	ldr	r0, [r7, #16]
 800b61c:	f003 f8b4 	bl	800e788 <tcp_shutdown>
 800b620:	4603      	mov	r3, r0
 800b622:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800b624:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d102      	bne.n	800b632 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800b62c:	2301      	movs	r3, #1
 800b62e:	757b      	strb	r3, [r7, #21]
 800b630:	e016      	b.n	800b660 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800b632:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b63a:	d10f      	bne.n	800b65c <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b640:	7a5b      	ldrb	r3, [r3, #9]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d10c      	bne.n	800b660 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800b646:	2301      	movs	r3, #1
 800b648:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800b64a:	7dbb      	ldrb	r3, [r7, #22]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d007      	beq.n	800b660 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800b650:	6938      	ldr	r0, [r7, #16]
 800b652:	f003 f9b3 	bl	800e9bc <tcp_abort>
          err = ERR_OK;
 800b656:	2300      	movs	r3, #0
 800b658:	75fb      	strb	r3, [r7, #23]
 800b65a:	e001      	b.n	800b660 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800b65c:	2301      	movs	r3, #1
 800b65e:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800b660:	7d7b      	ldrb	r3, [r7, #21]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d044      	beq.n	800b6f0 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	330c      	adds	r3, #12
 800b66e:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b674:	7dfa      	ldrb	r2, [r7, #23]
 800b676:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2200      	movs	r2, #0
 800b67c:	625a      	str	r2, [r3, #36]	; 0x24
    conn->state = NETCONN_NONE;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2200      	movs	r2, #0
 800b682:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800b684:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d129      	bne.n	800b6e0 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800b68c:	7dbb      	ldrb	r3, [r7, #22]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d00c      	beq.n	800b6ac <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2200      	movs	r2, #0
 800b696:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d005      	beq.n	800b6ac <lwip_netconn_do_close_internal+0x1f0>
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	2104      	movs	r1, #4
 800b6a8:	6878      	ldr	r0, [r7, #4]
 800b6aa:	4798      	blx	r3
      }
      if (shut_rx) {
 800b6ac:	7bbb      	ldrb	r3, [r7, #14]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d009      	beq.n	800b6c6 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d005      	beq.n	800b6c6 <lwip_netconn_do_close_internal+0x20a>
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6be:	2200      	movs	r2, #0
 800b6c0:	2100      	movs	r1, #0
 800b6c2:	6878      	ldr	r0, [r7, #4]
 800b6c4:	4798      	blx	r3
      }
      if (shut_tx) {
 800b6c6:	7b7b      	ldrb	r3, [r7, #13]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d009      	beq.n	800b6e0 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d005      	beq.n	800b6e0 <lwip_netconn_do_close_internal+0x224>
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6d8:	2200      	movs	r2, #0
 800b6da:	2102      	movs	r1, #2
 800b6dc:	6878      	ldr	r0, [r7, #4]
 800b6de:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800b6e0:	78fb      	ldrb	r3, [r7, #3]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d002      	beq.n	800b6ec <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800b6e6:	68b8      	ldr	r0, [r7, #8]
 800b6e8:	f00b fef4 	bl	80174d4 <sys_sem_signal>
    }
    return ERR_OK;
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	e02e      	b.n	800b74e <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 800b6f0:	7d7b      	ldrb	r3, [r7, #21]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d11e      	bne.n	800b734 <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800b6f6:	693b      	ldr	r3, [r7, #16]
 800b6f8:	7d1b      	ldrb	r3, [r3, #20]
 800b6fa:	2b01      	cmp	r3, #1
 800b6fc:	d106      	bne.n	800b70c <lwip_netconn_do_close_internal+0x250>
 800b6fe:	4b16      	ldr	r3, [pc, #88]	; (800b758 <lwip_netconn_do_close_internal+0x29c>)
 800b700:	f240 4241 	movw	r2, #1089	; 0x441
 800b704:	491b      	ldr	r1, [pc, #108]	; (800b774 <lwip_netconn_do_close_internal+0x2b8>)
 800b706:	4816      	ldr	r0, [pc, #88]	; (800b760 <lwip_netconn_do_close_internal+0x2a4>)
 800b708:	f00f fcfc 	bl	801b104 <iprintf>
    if (shut_tx) {
 800b70c:	7b7b      	ldrb	r3, [r7, #13]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d003      	beq.n	800b71a <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 800b712:	4919      	ldr	r1, [pc, #100]	; (800b778 <lwip_netconn_do_close_internal+0x2bc>)
 800b714:	6938      	ldr	r0, [r7, #16]
 800b716:	f004 f9c9 	bl	800faac <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800b71a:	2201      	movs	r2, #1
 800b71c:	4917      	ldr	r1, [pc, #92]	; (800b77c <lwip_netconn_do_close_internal+0x2c0>)
 800b71e:	6938      	ldr	r0, [r7, #16]
 800b720:	f004 fa20 	bl	800fb64 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800b724:	4916      	ldr	r1, [pc, #88]	; (800b780 <lwip_netconn_do_close_internal+0x2c4>)
 800b726:	6938      	ldr	r0, [r7, #16]
 800b728:	f004 f9e2 	bl	800faf0 <tcp_err>
    tcp_arg(tpcb, conn);
 800b72c:	6879      	ldr	r1, [r7, #4]
 800b72e:	6938      	ldr	r0, [r7, #16]
 800b730:	f004 f988 	bl	800fa44 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800b734:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d106      	bne.n	800b74a <lwip_netconn_do_close_internal+0x28e>
 800b73c:	4b06      	ldr	r3, [pc, #24]	; (800b758 <lwip_netconn_do_close_internal+0x29c>)
 800b73e:	f240 424d 	movw	r2, #1101	; 0x44d
 800b742:	4910      	ldr	r1, [pc, #64]	; (800b784 <lwip_netconn_do_close_internal+0x2c8>)
 800b744:	4806      	ldr	r0, [pc, #24]	; (800b760 <lwip_netconn_do_close_internal+0x2a4>)
 800b746:	f00f fcdd 	bl	801b104 <iprintf>
  return err;
 800b74a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b74e:	4618      	mov	r0, r3
 800b750:	3718      	adds	r7, #24
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}
 800b756:	bf00      	nop
 800b758:	0801bd24 	.word	0x0801bd24
 800b75c:	0801bff8 	.word	0x0801bff8
 800b760:	0801bd68 	.word	0x0801bd68
 800b764:	0801c008 	.word	0x0801c008
 800b768:	0801c028 	.word	0x0801c028
 800b76c:	0801c04c 	.word	0x0801c04c
 800b770:	0801be8c 	.word	0x0801be8c
 800b774:	0801c060 	.word	0x0801c060
 800b778:	0800ae99 	.word	0x0800ae99
 800b77c:	0800adc9 	.word	0x0800adc9
 800b780:	0800af45 	.word	0x0800af45
 800b784:	0801c084 	.word	0x0801c084

0800b788 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b084      	sub	sp, #16
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	785b      	ldrb	r3, [r3, #1]
 800b79a:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800b79c:	7afb      	ldrb	r3, [r7, #11]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d00d      	beq.n	800b7be <lwip_netconn_do_delconn+0x36>
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	781b      	ldrb	r3, [r3, #0]
 800b7a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b7ac:	2b10      	cmp	r3, #16
 800b7ae:	d006      	beq.n	800b7be <lwip_netconn_do_delconn+0x36>
 800b7b0:	4b61      	ldr	r3, [pc, #388]	; (800b938 <lwip_netconn_do_delconn+0x1b0>)
 800b7b2:	f240 425e 	movw	r2, #1118	; 0x45e
 800b7b6:	4961      	ldr	r1, [pc, #388]	; (800b93c <lwip_netconn_do_delconn+0x1b4>)
 800b7b8:	4861      	ldr	r0, [pc, #388]	; (800b940 <lwip_netconn_do_delconn+0x1b8>)
 800b7ba:	f00f fca3 	bl	801b104 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800b7be:	7afb      	ldrb	r3, [r7, #11]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d005      	beq.n	800b7d0 <lwip_netconn_do_delconn+0x48>
 800b7c4:	7afb      	ldrb	r3, [r7, #11]
 800b7c6:	2b02      	cmp	r3, #2
 800b7c8:	d002      	beq.n	800b7d0 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800b7ca:	7afb      	ldrb	r3, [r7, #11]
 800b7cc:	2b03      	cmp	r3, #3
 800b7ce:	d10a      	bne.n	800b7e6 <lwip_netconn_do_delconn+0x5e>
       (state != NETCONN_CONNECT)) ||
 800b7d0:	7afb      	ldrb	r3, [r7, #11]
 800b7d2:	2b03      	cmp	r3, #3
 800b7d4:	d10b      	bne.n	800b7ee <lwip_netconn_do_delconn+0x66>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b7de:	f003 0304 	and.w	r3, r3, #4
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d103      	bne.n	800b7ee <lwip_netconn_do_delconn+0x66>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	22fb      	movs	r2, #251	; 0xfb
 800b7ea:	711a      	strb	r2, [r3, #4]
 800b7ec:	e098      	b.n	800b920 <lwip_netconn_do_delconn+0x198>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800b7ee:	7afb      	ldrb	r3, [r7, #11]
 800b7f0:	2b03      	cmp	r3, #3
 800b7f2:	d10e      	bne.n	800b812 <lwip_netconn_do_delconn+0x8a>
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b7fc:	f003 0304 	and.w	r3, r3, #4
 800b800:	2b00      	cmp	r3, #0
 800b802:	d106      	bne.n	800b812 <lwip_netconn_do_delconn+0x8a>
 800b804:	4b4c      	ldr	r3, [pc, #304]	; (800b938 <lwip_netconn_do_delconn+0x1b0>)
 800b806:	f240 427a 	movw	r2, #1146	; 0x47a
 800b80a:	494e      	ldr	r1, [pc, #312]	; (800b944 <lwip_netconn_do_delconn+0x1bc>)
 800b80c:	484c      	ldr	r0, [pc, #304]	; (800b940 <lwip_netconn_do_delconn+0x1b8>)
 800b80e:	f00f fc79 	bl	801b104 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	2200      	movs	r2, #0
 800b816:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	4618      	mov	r0, r3
 800b81e:	f7ff fdcf 	bl	800b3c0 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	685b      	ldr	r3, [r3, #4]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d05f      	beq.n	800b8ec <lwip_netconn_do_delconn+0x164>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	781b      	ldrb	r3, [r3, #0]
 800b832:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b836:	2b10      	cmp	r3, #16
 800b838:	d00d      	beq.n	800b856 <lwip_netconn_do_delconn+0xce>
 800b83a:	2b20      	cmp	r3, #32
 800b83c:	d151      	bne.n	800b8e2 <lwip_netconn_do_delconn+0x15a>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	685b      	ldr	r3, [r3, #4]
 800b844:	2200      	movs	r2, #0
 800b846:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	685b      	ldr	r3, [r3, #4]
 800b84e:	4618      	mov	r0, r3
 800b850:	f009 f9e8 	bl	8014c24 <udp_remove>
          break;
 800b854:	e046      	b.n	800b8e4 <lwip_netconn_do_delconn+0x15c>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d006      	beq.n	800b86e <lwip_netconn_do_delconn+0xe6>
 800b860:	4b35      	ldr	r3, [pc, #212]	; (800b938 <lwip_netconn_do_delconn+0x1b0>)
 800b862:	f240 4294 	movw	r2, #1172	; 0x494
 800b866:	4938      	ldr	r1, [pc, #224]	; (800b948 <lwip_netconn_do_delconn+0x1c0>)
 800b868:	4835      	ldr	r0, [pc, #212]	; (800b940 <lwip_netconn_do_delconn+0x1b8>)
 800b86a:	f00f fc4b 	bl	801b104 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	2204      	movs	r2, #4
 800b874:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	2203      	movs	r2, #3
 800b87a:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	68fa      	ldr	r2, [r7, #12]
 800b882:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	2100      	movs	r1, #0
 800b88a:	4618      	mov	r0, r3
 800b88c:	f7ff fe16 	bl	800b4bc <lwip_netconn_do_close_internal>
 800b890:	4603      	mov	r3, r0
 800b892:	2b00      	cmp	r3, #0
 800b894:	d04b      	beq.n	800b92e <lwip_netconn_do_delconn+0x1a6>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	785b      	ldrb	r3, [r3, #1]
 800b89c:	2b04      	cmp	r3, #4
 800b89e:	d006      	beq.n	800b8ae <lwip_netconn_do_delconn+0x126>
 800b8a0:	4b25      	ldr	r3, [pc, #148]	; (800b938 <lwip_netconn_do_delconn+0x1b0>)
 800b8a2:	f240 429a 	movw	r2, #1178	; 0x49a
 800b8a6:	4929      	ldr	r1, [pc, #164]	; (800b94c <lwip_netconn_do_delconn+0x1c4>)
 800b8a8:	4825      	ldr	r0, [pc, #148]	; (800b940 <lwip_netconn_do_delconn+0x1b8>)
 800b8aa:	f00f fc2b 	bl	801b104 <iprintf>
            UNLOCK_TCPIP_CORE();
 800b8ae:	4828      	ldr	r0, [pc, #160]	; (800b950 <lwip_netconn_do_delconn+0x1c8>)
 800b8b0:	f00b fe79 	bl	80175a6 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	330c      	adds	r3, #12
 800b8ba:	2100      	movs	r1, #0
 800b8bc:	4618      	mov	r0, r3
 800b8be:	f00b fdd8 	bl	8017472 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800b8c2:	4823      	ldr	r0, [pc, #140]	; (800b950 <lwip_netconn_do_delconn+0x1c8>)
 800b8c4:	f00b fe60 	bl	8017588 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	785b      	ldrb	r3, [r3, #1]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d02d      	beq.n	800b92e <lwip_netconn_do_delconn+0x1a6>
 800b8d2:	4b19      	ldr	r3, [pc, #100]	; (800b938 <lwip_netconn_do_delconn+0x1b0>)
 800b8d4:	f240 429e 	movw	r2, #1182	; 0x49e
 800b8d8:	491c      	ldr	r1, [pc, #112]	; (800b94c <lwip_netconn_do_delconn+0x1c4>)
 800b8da:	4819      	ldr	r0, [pc, #100]	; (800b940 <lwip_netconn_do_delconn+0x1b8>)
 800b8dc:	f00f fc12 	bl	801b104 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800b8e0:	e025      	b.n	800b92e <lwip_netconn_do_delconn+0x1a6>
#endif /* LWIP_TCP */
        default:
          break;
 800b8e2:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d007      	beq.n	800b906 <lwip_netconn_do_delconn+0x17e>
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8fc:	68fa      	ldr	r2, [r7, #12]
 800b8fe:	6810      	ldr	r0, [r2, #0]
 800b900:	2200      	movs	r2, #0
 800b902:	2100      	movs	r1, #0
 800b904:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d007      	beq.n	800b920 <lwip_netconn_do_delconn+0x198>
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b916:	68fa      	ldr	r2, [r7, #12]
 800b918:	6810      	ldr	r0, [r2, #0]
 800b91a:	2200      	movs	r2, #0
 800b91c:	2102      	movs	r1, #2
 800b91e:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	330c      	adds	r3, #12
 800b926:	4618      	mov	r0, r3
 800b928:	f00b fdee 	bl	8017508 <sys_sem_valid>
 800b92c:	e000      	b.n	800b930 <lwip_netconn_do_delconn+0x1a8>
          return;
 800b92e:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800b930:	3710      	adds	r7, #16
 800b932:	46bd      	mov	sp, r7
 800b934:	bd80      	pop	{r7, pc}
 800b936:	bf00      	nop
 800b938:	0801bd24 	.word	0x0801bd24
 800b93c:	0801c094 	.word	0x0801c094
 800b940:	0801bd68 	.word	0x0801bd68
 800b944:	0801c0a8 	.word	0x0801c0a8
 800b948:	0801c0c8 	.word	0x0801c0c8
 800b94c:	0801c0e4 	.word	0x0801c0e4
 800b950:	20008234 	.word	0x20008234

0800b954 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b088      	sub	sp, #32
 800b958:	af00      	add	r7, sp, #0
 800b95a:	60f8      	str	r0, [r7, #12]
 800b95c:	60b9      	str	r1, [r7, #8]
 800b95e:	4613      	mov	r3, r2
 800b960:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 800b962:	2300      	movs	r3, #0
 800b964:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800b96a:	69bb      	ldr	r3, [r7, #24]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d102      	bne.n	800b976 <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 800b970:	f06f 0305 	mvn.w	r3, #5
 800b974:	e074      	b.n	800ba60 <lwip_netconn_do_connected+0x10c>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 800b976:	69bb      	ldr	r3, [r7, #24]
 800b978:	785b      	ldrb	r3, [r3, #1]
 800b97a:	2b03      	cmp	r3, #3
 800b97c:	d006      	beq.n	800b98c <lwip_netconn_do_connected+0x38>
 800b97e:	4b3a      	ldr	r3, [pc, #232]	; (800ba68 <lwip_netconn_do_connected+0x114>)
 800b980:	f240 5223 	movw	r2, #1315	; 0x523
 800b984:	4939      	ldr	r1, [pc, #228]	; (800ba6c <lwip_netconn_do_connected+0x118>)
 800b986:	483a      	ldr	r0, [pc, #232]	; (800ba70 <lwip_netconn_do_connected+0x11c>)
 800b988:	f00f fbbc 	bl	801b104 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 800b98c:	69bb      	ldr	r3, [r7, #24]
 800b98e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b990:	2b00      	cmp	r3, #0
 800b992:	d10d      	bne.n	800b9b0 <lwip_netconn_do_connected+0x5c>
 800b994:	69bb      	ldr	r3, [r7, #24]
 800b996:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b99a:	f003 0304 	and.w	r3, r3, #4
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d106      	bne.n	800b9b0 <lwip_netconn_do_connected+0x5c>
 800b9a2:	4b31      	ldr	r3, [pc, #196]	; (800ba68 <lwip_netconn_do_connected+0x114>)
 800b9a4:	f240 5224 	movw	r2, #1316	; 0x524
 800b9a8:	4932      	ldr	r1, [pc, #200]	; (800ba74 <lwip_netconn_do_connected+0x120>)
 800b9aa:	4831      	ldr	r0, [pc, #196]	; (800ba70 <lwip_netconn_do_connected+0x11c>)
 800b9ac:	f00f fbaa 	bl	801b104 <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 800b9b0:	69bb      	ldr	r3, [r7, #24]
 800b9b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d008      	beq.n	800b9ca <lwip_netconn_do_connected+0x76>
    conn->current_msg->err = err;
 800b9b8:	69bb      	ldr	r3, [r7, #24]
 800b9ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9bc:	79fa      	ldrb	r2, [r7, #7]
 800b9be:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b9c0:	69bb      	ldr	r3, [r7, #24]
 800b9c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	330c      	adds	r3, #12
 800b9c8:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 800b9ca:	69bb      	ldr	r3, [r7, #24]
 800b9cc:	781b      	ldrb	r3, [r3, #0]
 800b9ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b9d2:	2b10      	cmp	r3, #16
 800b9d4:	d106      	bne.n	800b9e4 <lwip_netconn_do_connected+0x90>
 800b9d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d102      	bne.n	800b9e4 <lwip_netconn_do_connected+0x90>
    setup_tcp(conn);
 800b9de:	69b8      	ldr	r0, [r7, #24]
 800b9e0:	f7ff fb8a 	bl	800b0f8 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 800b9e4:	69bb      	ldr	r3, [r7, #24]
 800b9e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b9ea:	f003 0304 	and.w	r3, r3, #4
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	bf0c      	ite	eq
 800b9f2:	2301      	moveq	r3, #1
 800b9f4:	2300      	movne	r3, #0
 800b9f6:	b2db      	uxtb	r3, r3
 800b9f8:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 800b9fa:	69bb      	ldr	r3, [r7, #24]
 800b9fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ba00:	f023 0304 	bic.w	r3, r3, #4
 800ba04:	b2da      	uxtb	r2, r3
 800ba06:	69bb      	ldr	r3, [r7, #24]
 800ba08:	f883 2020 	strb.w	r2, [r3, #32]
  LWIP_ASSERT("blocking connect state error",
 800ba0c:	697b      	ldr	r3, [r7, #20]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d002      	beq.n	800ba18 <lwip_netconn_do_connected+0xc4>
 800ba12:	69fb      	ldr	r3, [r7, #28]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d10c      	bne.n	800ba32 <lwip_netconn_do_connected+0xde>
 800ba18:	697b      	ldr	r3, [r7, #20]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d102      	bne.n	800ba24 <lwip_netconn_do_connected+0xd0>
 800ba1e:	69fb      	ldr	r3, [r7, #28]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d006      	beq.n	800ba32 <lwip_netconn_do_connected+0xde>
 800ba24:	4b10      	ldr	r3, [pc, #64]	; (800ba68 <lwip_netconn_do_connected+0x114>)
 800ba26:	f44f 62a6 	mov.w	r2, #1328	; 0x530
 800ba2a:	4913      	ldr	r1, [pc, #76]	; (800ba78 <lwip_netconn_do_connected+0x124>)
 800ba2c:	4810      	ldr	r0, [pc, #64]	; (800ba70 <lwip_netconn_do_connected+0x11c>)
 800ba2e:	f00f fb69 	bl	801b104 <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 800ba32:	69bb      	ldr	r3, [r7, #24]
 800ba34:	2200      	movs	r2, #0
 800ba36:	625a      	str	r2, [r3, #36]	; 0x24
  conn->state = NETCONN_NONE;
 800ba38:	69bb      	ldr	r3, [r7, #24]
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800ba3e:	69bb      	ldr	r3, [r7, #24]
 800ba40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d005      	beq.n	800ba52 <lwip_netconn_do_connected+0xfe>
 800ba46:	69bb      	ldr	r3, [r7, #24]
 800ba48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	2102      	movs	r1, #2
 800ba4e:	69b8      	ldr	r0, [r7, #24]
 800ba50:	4798      	blx	r3

  if (was_blocking) {
 800ba52:	697b      	ldr	r3, [r7, #20]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d002      	beq.n	800ba5e <lwip_netconn_do_connected+0x10a>
    sys_sem_signal(op_completed_sem);
 800ba58:	69f8      	ldr	r0, [r7, #28]
 800ba5a:	f00b fd3b 	bl	80174d4 <sys_sem_signal>
  }
  return ERR_OK;
 800ba5e:	2300      	movs	r3, #0
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	3720      	adds	r7, #32
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bd80      	pop	{r7, pc}
 800ba68:	0801bd24 	.word	0x0801bd24
 800ba6c:	0801c0ec 	.word	0x0801c0ec
 800ba70:	0801bd68 	.word	0x0801bd68
 800ba74:	0801c10c 	.word	0x0801c10c
 800ba78:	0801c14c 	.word	0x0801c14c

0800ba7c <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b086      	sub	sp, #24
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 800ba88:	693b      	ldr	r3, [r7, #16]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	685b      	ldr	r3, [r3, #4]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d102      	bne.n	800ba98 <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 800ba92:	23f1      	movs	r3, #241	; 0xf1
 800ba94:	75fb      	strb	r3, [r7, #23]
 800ba96:	e0a0      	b.n	800bbda <lwip_netconn_do_connect+0x15e>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800ba98:	693b      	ldr	r3, [r7, #16]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	781b      	ldrb	r3, [r3, #0]
 800ba9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800baa2:	2b10      	cmp	r3, #16
 800baa4:	d00f      	beq.n	800bac6 <lwip_netconn_do_connect+0x4a>
 800baa6:	2b20      	cmp	r3, #32
 800baa8:	f040 808c 	bne.w	800bbc4 <lwip_netconn_do_connect+0x148>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800baac:	693b      	ldr	r3, [r7, #16]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	6858      	ldr	r0, [r3, #4]
 800bab2:	693b      	ldr	r3, [r7, #16]
 800bab4:	6899      	ldr	r1, [r3, #8]
 800bab6:	693b      	ldr	r3, [r7, #16]
 800bab8:	899b      	ldrh	r3, [r3, #12]
 800baba:	461a      	mov	r2, r3
 800babc:	f009 f824 	bl	8014b08 <udp_connect>
 800bac0:	4603      	mov	r3, r0
 800bac2:	75fb      	strb	r3, [r7, #23]
        break;
 800bac4:	e089      	b.n	800bbda <lwip_netconn_do_connect+0x15e>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 800bac6:	693b      	ldr	r3, [r7, #16]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	785b      	ldrb	r3, [r3, #1]
 800bacc:	2b03      	cmp	r3, #3
 800bace:	d102      	bne.n	800bad6 <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 800bad0:	23f7      	movs	r3, #247	; 0xf7
 800bad2:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 800bad4:	e080      	b.n	800bbd8 <lwip_netconn_do_connect+0x15c>
        } else if (msg->conn->state != NETCONN_NONE) {
 800bad6:	693b      	ldr	r3, [r7, #16]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	785b      	ldrb	r3, [r3, #1]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d002      	beq.n	800bae6 <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 800bae0:	23f6      	movs	r3, #246	; 0xf6
 800bae2:	75fb      	strb	r3, [r7, #23]
        break;
 800bae4:	e078      	b.n	800bbd8 <lwip_netconn_do_connect+0x15c>
          setup_tcp(msg->conn);
 800bae6:	693b      	ldr	r3, [r7, #16]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	4618      	mov	r0, r3
 800baec:	f7ff fb04 	bl	800b0f8 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 800baf0:	693b      	ldr	r3, [r7, #16]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	6858      	ldr	r0, [r3, #4]
 800baf6:	693b      	ldr	r3, [r7, #16]
 800baf8:	6899      	ldr	r1, [r3, #8]
 800bafa:	693b      	ldr	r3, [r7, #16]
 800bafc:	899a      	ldrh	r2, [r3, #12]
 800bafe:	4b3b      	ldr	r3, [pc, #236]	; (800bbec <lwip_netconn_do_connect+0x170>)
 800bb00:	f003 f858 	bl	800ebb4 <tcp_connect>
 800bb04:	4603      	mov	r3, r0
 800bb06:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 800bb08:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d163      	bne.n	800bbd8 <lwip_netconn_do_connect+0x15c>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 800bb10:	693b      	ldr	r3, [r7, #16]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bb18:	f003 0302 	and.w	r3, r3, #2
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	bf14      	ite	ne
 800bb20:	2301      	movne	r3, #1
 800bb22:	2300      	moveq	r3, #0
 800bb24:	b2db      	uxtb	r3, r3
 800bb26:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 800bb28:	693b      	ldr	r3, [r7, #16]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	2203      	movs	r2, #3
 800bb2e:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 800bb30:	7bfb      	ldrb	r3, [r7, #15]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d00b      	beq.n	800bb4e <lwip_netconn_do_connect+0xd2>
 800bb36:	693b      	ldr	r3, [r7, #16]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	f893 2020 	ldrb.w	r2, [r3, #32]
 800bb3e:	693b      	ldr	r3, [r7, #16]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	f042 0204 	orr.w	r2, r2, #4
 800bb46:	b2d2      	uxtb	r2, r2
 800bb48:	f883 2020 	strb.w	r2, [r3, #32]
 800bb4c:	e00a      	b.n	800bb64 <lwip_netconn_do_connect+0xe8>
 800bb4e:	693b      	ldr	r3, [r7, #16]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	f893 2020 	ldrb.w	r2, [r3, #32]
 800bb56:	693b      	ldr	r3, [r7, #16]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	f022 0204 	bic.w	r2, r2, #4
 800bb5e:	b2d2      	uxtb	r2, r2
 800bb60:	f883 2020 	strb.w	r2, [r3, #32]
            if (non_blocking) {
 800bb64:	7bfb      	ldrb	r3, [r7, #15]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d002      	beq.n	800bb70 <lwip_netconn_do_connect+0xf4>
              err = ERR_INPROGRESS;
 800bb6a:	23fb      	movs	r3, #251	; 0xfb
 800bb6c:	75fb      	strb	r3, [r7, #23]
        break;
 800bb6e:	e033      	b.n	800bbd8 <lwip_netconn_do_connect+0x15c>
              msg->conn->current_msg = msg;
 800bb70:	693b      	ldr	r3, [r7, #16]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	693a      	ldr	r2, [r7, #16]
 800bb76:	625a      	str	r2, [r3, #36]	; 0x24
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 800bb78:	693b      	ldr	r3, [r7, #16]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	785b      	ldrb	r3, [r3, #1]
 800bb7e:	2b03      	cmp	r3, #3
 800bb80:	d006      	beq.n	800bb90 <lwip_netconn_do_connect+0x114>
 800bb82:	4b1b      	ldr	r3, [pc, #108]	; (800bbf0 <lwip_netconn_do_connect+0x174>)
 800bb84:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 800bb88:	491a      	ldr	r1, [pc, #104]	; (800bbf4 <lwip_netconn_do_connect+0x178>)
 800bb8a:	481b      	ldr	r0, [pc, #108]	; (800bbf8 <lwip_netconn_do_connect+0x17c>)
 800bb8c:	f00f faba 	bl	801b104 <iprintf>
              UNLOCK_TCPIP_CORE();
 800bb90:	481a      	ldr	r0, [pc, #104]	; (800bbfc <lwip_netconn_do_connect+0x180>)
 800bb92:	f00b fd08 	bl	80175a6 <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800bb96:	693b      	ldr	r3, [r7, #16]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	330c      	adds	r3, #12
 800bb9c:	2100      	movs	r1, #0
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f00b fc67 	bl	8017472 <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 800bba4:	4815      	ldr	r0, [pc, #84]	; (800bbfc <lwip_netconn_do_connect+0x180>)
 800bba6:	f00b fcef 	bl	8017588 <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 800bbaa:	693b      	ldr	r3, [r7, #16]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	785b      	ldrb	r3, [r3, #1]
 800bbb0:	2b03      	cmp	r3, #3
 800bbb2:	d116      	bne.n	800bbe2 <lwip_netconn_do_connect+0x166>
 800bbb4:	4b0e      	ldr	r3, [pc, #56]	; (800bbf0 <lwip_netconn_do_connect+0x174>)
 800bbb6:	f240 5274 	movw	r2, #1396	; 0x574
 800bbba:	490e      	ldr	r1, [pc, #56]	; (800bbf4 <lwip_netconn_do_connect+0x178>)
 800bbbc:	480e      	ldr	r0, [pc, #56]	; (800bbf8 <lwip_netconn_do_connect+0x17c>)
 800bbbe:	f00f faa1 	bl	801b104 <iprintf>
              return;
 800bbc2:	e00e      	b.n	800bbe2 <lwip_netconn_do_connect+0x166>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 800bbc4:	4b0a      	ldr	r3, [pc, #40]	; (800bbf0 <lwip_netconn_do_connect+0x174>)
 800bbc6:	f240 527d 	movw	r2, #1405	; 0x57d
 800bbca:	490d      	ldr	r1, [pc, #52]	; (800bc00 <lwip_netconn_do_connect+0x184>)
 800bbcc:	480a      	ldr	r0, [pc, #40]	; (800bbf8 <lwip_netconn_do_connect+0x17c>)
 800bbce:	f00f fa99 	bl	801b104 <iprintf>
 800bbd2:	23fa      	movs	r3, #250	; 0xfa
 800bbd4:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 800bbd6:	e000      	b.n	800bbda <lwip_netconn_do_connect+0x15e>
        break;
 800bbd8:	bf00      	nop
    }
  }
  msg->err = err;
 800bbda:	693b      	ldr	r3, [r7, #16]
 800bbdc:	7dfa      	ldrb	r2, [r7, #23]
 800bbde:	711a      	strb	r2, [r3, #4]
 800bbe0:	e000      	b.n	800bbe4 <lwip_netconn_do_connect+0x168>
              return;
 800bbe2:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 800bbe4:	3718      	adds	r7, #24
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bd80      	pop	{r7, pc}
 800bbea:	bf00      	nop
 800bbec:	0800b955 	.word	0x0800b955
 800bbf0:	0801bd24 	.word	0x0801bd24
 800bbf4:	0801c0e4 	.word	0x0801c0e4
 800bbf8:	0801bd68 	.word	0x0801bd68
 800bbfc:	20008234 	.word	0x20008234
 800bc00:	0801c16c 	.word	0x0801c16c

0800bc04 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b086      	sub	sp, #24
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800bc10:	693b      	ldr	r3, [r7, #16]
 800bc12:	2200      	movs	r2, #0
 800bc14:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800bc16:	693b      	ldr	r3, [r7, #16]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	685b      	ldr	r3, [r3, #4]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d022      	beq.n	800bc66 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800bc20:	693b      	ldr	r3, [r7, #16]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	781b      	ldrb	r3, [r3, #0]
 800bc26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bc2a:	2b10      	cmp	r3, #16
 800bc2c:	d11b      	bne.n	800bc66 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800bc2e:	693b      	ldr	r3, [r7, #16]
 800bc30:	689b      	ldr	r3, [r3, #8]
 800bc32:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800bc34:	697b      	ldr	r3, [r7, #20]
 800bc36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc3a:	d202      	bcs.n	800bc42 <lwip_netconn_do_recv+0x3e>
 800bc3c:	697b      	ldr	r3, [r7, #20]
 800bc3e:	b29b      	uxth	r3, r3
 800bc40:	e001      	b.n	800bc46 <lwip_netconn_do_recv+0x42>
 800bc42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bc46:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800bc48:	693b      	ldr	r3, [r7, #16]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	685b      	ldr	r3, [r3, #4]
 800bc4e:	89fa      	ldrh	r2, [r7, #14]
 800bc50:	4611      	mov	r1, r2
 800bc52:	4618      	mov	r0, r3
 800bc54:	f002 ff18 	bl	800ea88 <tcp_recved>
        remaining -= recved;
 800bc58:	89fb      	ldrh	r3, [r7, #14]
 800bc5a:	697a      	ldr	r2, [r7, #20]
 800bc5c:	1ad3      	subs	r3, r2, r3
 800bc5e:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800bc60:	697b      	ldr	r3, [r7, #20]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d1e6      	bne.n	800bc34 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800bc66:	bf00      	nop
 800bc68:	3718      	adds	r7, #24
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	bd80      	pop	{r7, pc}
	...

0800bc70 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b088      	sub	sp, #32
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
 800bc78:	460b      	mov	r3, r1
 800bc7a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d106      	bne.n	800bc94 <lwip_netconn_do_writemore+0x24>
 800bc86:	4b98      	ldr	r3, [pc, #608]	; (800bee8 <lwip_netconn_do_writemore+0x278>)
 800bc88:	f240 6273 	movw	r2, #1651	; 0x673
 800bc8c:	4997      	ldr	r1, [pc, #604]	; (800beec <lwip_netconn_do_writemore+0x27c>)
 800bc8e:	4898      	ldr	r0, [pc, #608]	; (800bef0 <lwip_netconn_do_writemore+0x280>)
 800bc90:	f00f fa38 	bl	801b104 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	785b      	ldrb	r3, [r3, #1]
 800bc98:	2b01      	cmp	r3, #1
 800bc9a:	d006      	beq.n	800bcaa <lwip_netconn_do_writemore+0x3a>
 800bc9c:	4b92      	ldr	r3, [pc, #584]	; (800bee8 <lwip_netconn_do_writemore+0x278>)
 800bc9e:	f240 6274 	movw	r2, #1652	; 0x674
 800bca2:	4994      	ldr	r1, [pc, #592]	; (800bef4 <lwip_netconn_do_writemore+0x284>)
 800bca4:	4892      	ldr	r0, [pc, #584]	; (800bef0 <lwip_netconn_do_writemore+0x280>)
 800bca6:	f00f fa2d 	bl	801b104 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d106      	bne.n	800bcc0 <lwip_netconn_do_writemore+0x50>
 800bcb2:	4b8d      	ldr	r3, [pc, #564]	; (800bee8 <lwip_netconn_do_writemore+0x278>)
 800bcb4:	f240 6275 	movw	r2, #1653	; 0x675
 800bcb8:	498f      	ldr	r1, [pc, #572]	; (800bef8 <lwip_netconn_do_writemore+0x288>)
 800bcba:	488d      	ldr	r0, [pc, #564]	; (800bef0 <lwip_netconn_do_writemore+0x280>)
 800bcbc:	f00f fa22 	bl	801b104 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	685b      	ldr	r3, [r3, #4]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d106      	bne.n	800bcd6 <lwip_netconn_do_writemore+0x66>
 800bcc8:	4b87      	ldr	r3, [pc, #540]	; (800bee8 <lwip_netconn_do_writemore+0x278>)
 800bcca:	f240 6276 	movw	r2, #1654	; 0x676
 800bcce:	498b      	ldr	r1, [pc, #556]	; (800befc <lwip_netconn_do_writemore+0x28c>)
 800bcd0:	4887      	ldr	r0, [pc, #540]	; (800bef0 <lwip_netconn_do_writemore+0x280>)
 800bcd2:	f00f fa17 	bl	801b104 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcda:	699a      	ldr	r2, [r3, #24]
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bce0:	695b      	ldr	r3, [r3, #20]
 800bce2:	429a      	cmp	r2, r3
 800bce4:	d306      	bcc.n	800bcf4 <lwip_netconn_do_writemore+0x84>
 800bce6:	4b80      	ldr	r3, [pc, #512]	; (800bee8 <lwip_netconn_do_writemore+0x278>)
 800bce8:	f240 6277 	movw	r2, #1655	; 0x677
 800bcec:	4984      	ldr	r1, [pc, #528]	; (800bf00 <lwip_netconn_do_writemore+0x290>)
 800bcee:	4880      	ldr	r0, [pc, #512]	; (800bef0 <lwip_netconn_do_writemore+0x280>)
 800bcf0:	f00f fa08 	bl	801b104 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcf8:	899b      	ldrh	r3, [r3, #12]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d106      	bne.n	800bd0c <lwip_netconn_do_writemore+0x9c>
 800bcfe:	4b7a      	ldr	r3, [pc, #488]	; (800bee8 <lwip_netconn_do_writemore+0x278>)
 800bd00:	f240 6279 	movw	r2, #1657	; 0x679
 800bd04:	497f      	ldr	r1, [pc, #508]	; (800bf04 <lwip_netconn_do_writemore+0x294>)
 800bd06:	487a      	ldr	r0, [pc, #488]	; (800bef0 <lwip_netconn_do_writemore+0x280>)
 800bd08:	f00f f9fc 	bl	801b104 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd10:	7f1b      	ldrb	r3, [r3, #28]
 800bd12:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bd1a:	f003 0302 	and.w	r3, r3, #2
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d104      	bne.n	800bd2c <lwip_netconn_do_writemore+0xbc>
 800bd22:	7ebb      	ldrb	r3, [r7, #26]
 800bd24:	f003 0304 	and.w	r3, r3, #4
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d001      	beq.n	800bd30 <lwip_netconn_do_writemore+0xc0>
 800bd2c:	2301      	movs	r3, #1
 800bd2e:	e000      	b.n	800bd32 <lwip_netconn_do_writemore+0xc2>
 800bd30:	2300      	movs	r3, #0
 800bd32:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd38:	689b      	ldr	r3, [r3, #8]
 800bd3a:	681a      	ldr	r2, [r3, #0]
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd40:	691b      	ldr	r3, [r3, #16]
 800bd42:	4413      	add	r3, r2
 800bd44:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd4a:	689b      	ldr	r3, [r3, #8]
 800bd4c:	685a      	ldr	r2, [r3, #4]
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd52:	691b      	ldr	r3, [r3, #16]
 800bd54:	1ad3      	subs	r3, r2, r3
 800bd56:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800bd58:	693b      	ldr	r3, [r7, #16]
 800bd5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd5e:	d307      	bcc.n	800bd70 <lwip_netconn_do_writemore+0x100>
        len = 0xffff;
 800bd60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bd64:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800bd66:	7ebb      	ldrb	r3, [r7, #26]
 800bd68:	f043 0302 	orr.w	r3, r3, #2
 800bd6c:	76bb      	strb	r3, [r7, #26]
 800bd6e:	e001      	b.n	800bd74 <lwip_netconn_do_writemore+0x104>
      } else {
        len = (u16_t)diff;
 800bd70:	693b      	ldr	r3, [r7, #16]
 800bd72:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	685b      	ldr	r3, [r3, #4]
 800bd78:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800bd7c:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800bd7e:	89fa      	ldrh	r2, [r7, #14]
 800bd80:	8bbb      	ldrh	r3, [r7, #28]
 800bd82:	429a      	cmp	r2, r3
 800bd84:	d216      	bcs.n	800bdb4 <lwip_netconn_do_writemore+0x144>
        /* don't try to write more than sendbuf */
        len = available;
 800bd86:	89fb      	ldrh	r3, [r7, #14]
 800bd88:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800bd8a:	7e3b      	ldrb	r3, [r7, #24]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d00d      	beq.n	800bdac <lwip_netconn_do_writemore+0x13c>
          if (!len) {
 800bd90:	8bbb      	ldrh	r3, [r7, #28]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d10e      	bne.n	800bdb4 <lwip_netconn_do_writemore+0x144>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd9a:	699b      	ldr	r3, [r3, #24]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d102      	bne.n	800bda6 <lwip_netconn_do_writemore+0x136>
 800bda0:	f06f 0306 	mvn.w	r3, #6
 800bda4:	e000      	b.n	800bda8 <lwip_netconn_do_writemore+0x138>
 800bda6:	2300      	movs	r3, #0
 800bda8:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800bdaa:	e07d      	b.n	800bea8 <lwip_netconn_do_writemore+0x238>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800bdac:	7ebb      	ldrb	r3, [r7, #26]
 800bdae:	f043 0302 	orr.w	r3, r3, #2
 800bdb2:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdb8:	691a      	ldr	r2, [r3, #16]
 800bdba:	8bbb      	ldrh	r3, [r7, #28]
 800bdbc:	441a      	add	r2, r3
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdc2:	689b      	ldr	r3, [r3, #8]
 800bdc4:	685b      	ldr	r3, [r3, #4]
 800bdc6:	429a      	cmp	r2, r3
 800bdc8:	d906      	bls.n	800bdd8 <lwip_netconn_do_writemore+0x168>
 800bdca:	4b47      	ldr	r3, [pc, #284]	; (800bee8 <lwip_netconn_do_writemore+0x278>)
 800bdcc:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800bdd0:	494d      	ldr	r1, [pc, #308]	; (800bf08 <lwip_netconn_do_writemore+0x298>)
 800bdd2:	4847      	ldr	r0, [pc, #284]	; (800bef0 <lwip_netconn_do_writemore+0x280>)
 800bdd4:	f00f f996 	bl	801b104 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800bdd8:	8bbb      	ldrh	r3, [r7, #28]
 800bdda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bdde:	4293      	cmp	r3, r2
 800bde0:	d103      	bne.n	800bdea <lwip_netconn_do_writemore+0x17a>
 800bde2:	693b      	ldr	r3, [r7, #16]
 800bde4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bde8:	d209      	bcs.n	800bdfe <lwip_netconn_do_writemore+0x18e>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800bdea:	693b      	ldr	r3, [r7, #16]
 800bdec:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800bdee:	8bba      	ldrh	r2, [r7, #28]
 800bdf0:	429a      	cmp	r2, r3
 800bdf2:	d10b      	bne.n	800be0c <lwip_netconn_do_writemore+0x19c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdf8:	899b      	ldrh	r3, [r3, #12]
 800bdfa:	2b01      	cmp	r3, #1
 800bdfc:	d906      	bls.n	800be0c <lwip_netconn_do_writemore+0x19c>
        write_more = 1;
 800bdfe:	2301      	movs	r3, #1
 800be00:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800be02:	7ebb      	ldrb	r3, [r7, #26]
 800be04:	f043 0302 	orr.w	r3, r3, #2
 800be08:	76bb      	strb	r3, [r7, #26]
 800be0a:	e001      	b.n	800be10 <lwip_netconn_do_writemore+0x1a0>
      } else {
        write_more = 0;
 800be0c:	2300      	movs	r3, #0
 800be0e:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	6858      	ldr	r0, [r3, #4]
 800be14:	7ebb      	ldrb	r3, [r7, #26]
 800be16:	8bba      	ldrh	r2, [r7, #28]
 800be18:	6979      	ldr	r1, [r7, #20]
 800be1a:	f006 fd51 	bl	80128c0 <tcp_write>
 800be1e:	4603      	mov	r3, r0
 800be20:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800be22:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d12c      	bne.n	800be84 <lwip_netconn_do_writemore+0x214>
        conn->current_msg->msg.w.offset += len;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be2e:	6999      	ldr	r1, [r3, #24]
 800be30:	8bba      	ldrh	r2, [r7, #28]
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be36:	440a      	add	r2, r1
 800be38:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be3e:	6919      	ldr	r1, [r3, #16]
 800be40:	8bba      	ldrh	r2, [r7, #28]
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be46:	440a      	add	r2, r1
 800be48:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be4e:	691a      	ldr	r2, [r3, #16]
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be54:	689b      	ldr	r3, [r3, #8]
 800be56:	685b      	ldr	r3, [r3, #4]
 800be58:	429a      	cmp	r2, r3
 800be5a:	d113      	bne.n	800be84 <lwip_netconn_do_writemore+0x214>
          conn->current_msg->msg.w.vector_cnt--;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be60:	899a      	ldrh	r2, [r3, #12]
 800be62:	3a01      	subs	r2, #1
 800be64:	b292      	uxth	r2, r2
 800be66:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be6c:	899b      	ldrh	r3, [r3, #12]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d008      	beq.n	800be84 <lwip_netconn_do_writemore+0x214>
            conn->current_msg->msg.w.vector++;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be76:	689a      	ldr	r2, [r3, #8]
 800be78:	3208      	adds	r2, #8
 800be7a:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be80:	2200      	movs	r2, #0
 800be82:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800be84:	7e7b      	ldrb	r3, [r7, #25]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d004      	beq.n	800be94 <lwip_netconn_do_writemore+0x224>
 800be8a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	f43f af50 	beq.w	800bd34 <lwip_netconn_do_writemore+0xc4>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800be94:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d004      	beq.n	800bea6 <lwip_netconn_do_writemore+0x236>
 800be9c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bea4:	d149      	bne.n	800bf3a <lwip_netconn_do_writemore+0x2ca>
err_mem:
 800bea6:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800bea8:	7e3b      	ldrb	r3, [r7, #24]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d02e      	beq.n	800bf0c <lwip_netconn_do_writemore+0x29c>
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beb2:	699a      	ldr	r2, [r3, #24]
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beb8:	695b      	ldr	r3, [r3, #20]
 800beba:	429a      	cmp	r2, r3
 800bebc:	d226      	bcs.n	800bf0c <lwip_netconn_do_writemore+0x29c>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d005      	beq.n	800bed2 <lwip_netconn_do_writemore+0x262>
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800beca:	2200      	movs	r2, #0
 800becc:	2103      	movs	r1, #3
 800bece:	6878      	ldr	r0, [r7, #4]
 800bed0:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bed8:	f043 0310 	orr.w	r3, r3, #16
 800bedc:	b2da      	uxtb	r2, r3
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	f883 2020 	strb.w	r2, [r3, #32]
 800bee4:	e029      	b.n	800bf3a <lwip_netconn_do_writemore+0x2ca>
 800bee6:	bf00      	nop
 800bee8:	0801bd24 	.word	0x0801bd24
 800beec:	0801be7c 	.word	0x0801be7c
 800bef0:	0801bd68 	.word	0x0801bd68
 800bef4:	0801c184 	.word	0x0801c184
 800bef8:	0801be8c 	.word	0x0801be8c
 800befc:	0801c1a4 	.word	0x0801c1a4
 800bf00:	0801c1bc 	.word	0x0801c1bc
 800bf04:	0801c1fc 	.word	0x0801c1fc
 800bf08:	0801c224 	.word	0x0801c224
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	685b      	ldr	r3, [r3, #4]
 800bf10:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800bf14:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800bf18:	d305      	bcc.n	800bf26 <lwip_netconn_do_writemore+0x2b6>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	685b      	ldr	r3, [r3, #4]
 800bf1e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800bf22:	2b04      	cmp	r3, #4
 800bf24:	d909      	bls.n	800bf3a <lwip_netconn_do_writemore+0x2ca>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d005      	beq.n	800bf3a <lwip_netconn_do_writemore+0x2ca>
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf32:	2200      	movs	r2, #0
 800bf34:	2103      	movs	r1, #3
 800bf36:	6878      	ldr	r0, [r7, #4]
 800bf38:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800bf3a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d11d      	bne.n	800bf7e <lwip_netconn_do_writemore+0x30e>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf46:	699a      	ldr	r2, [r3, #24]
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf4c:	695b      	ldr	r3, [r3, #20]
 800bf4e:	429a      	cmp	r2, r3
 800bf50:	d002      	beq.n	800bf58 <lwip_netconn_do_writemore+0x2e8>
 800bf52:	7e3b      	ldrb	r3, [r7, #24]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d001      	beq.n	800bf5c <lwip_netconn_do_writemore+0x2ec>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800bf58:	2301      	movs	r3, #1
 800bf5a:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	685b      	ldr	r3, [r3, #4]
 800bf60:	4618      	mov	r0, r3
 800bf62:	f007 fa97 	bl	8013494 <tcp_output>
 800bf66:	4603      	mov	r3, r0
 800bf68:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800bf6a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800bf6e:	f113 0f04 	cmn.w	r3, #4
 800bf72:	d12c      	bne.n	800bfce <lwip_netconn_do_writemore+0x35e>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800bf74:	7b3b      	ldrb	r3, [r7, #12]
 800bf76:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800bf78:	2301      	movs	r3, #1
 800bf7a:	76fb      	strb	r3, [r7, #27]
 800bf7c:	e027      	b.n	800bfce <lwip_netconn_do_writemore+0x35e>
      }
    } else if (err == ERR_MEM) {
 800bf7e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bf82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf86:	d120      	bne.n	800bfca <lwip_netconn_do_writemore+0x35a>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	685b      	ldr	r3, [r3, #4]
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	f007 fa81 	bl	8013494 <tcp_output>
 800bf92:	4603      	mov	r3, r0
 800bf94:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800bf96:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800bf9a:	f113 0f04 	cmn.w	r3, #4
 800bf9e:	d104      	bne.n	800bfaa <lwip_netconn_do_writemore+0x33a>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800bfa0:	7b7b      	ldrb	r3, [r7, #13]
 800bfa2:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800bfa4:	2301      	movs	r3, #1
 800bfa6:	76fb      	strb	r3, [r7, #27]
 800bfa8:	e011      	b.n	800bfce <lwip_netconn_do_writemore+0x35e>
      } else if (dontblock) {
 800bfaa:	7e3b      	ldrb	r3, [r7, #24]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d00e      	beq.n	800bfce <lwip_netconn_do_writemore+0x35e>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfb4:	699b      	ldr	r3, [r3, #24]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d102      	bne.n	800bfc0 <lwip_netconn_do_writemore+0x350>
 800bfba:	f06f 0306 	mvn.w	r3, #6
 800bfbe:	e000      	b.n	800bfc2 <lwip_netconn_do_writemore+0x352>
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800bfc4:	2301      	movs	r3, #1
 800bfc6:	76fb      	strb	r3, [r7, #27]
 800bfc8:	e001      	b.n	800bfce <lwip_netconn_do_writemore+0x35e>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800bfca:	2301      	movs	r3, #1
 800bfcc:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800bfce:	7efb      	ldrb	r3, [r7, #27]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d015      	beq.n	800c000 <lwip_netconn_do_writemore+0x390>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	330c      	adds	r3, #12
 800bfdc:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfe2:	7ffa      	ldrb	r2, [r7, #31]
 800bfe4:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	2200      	movs	r2, #0
 800bfea:	625a      	str	r2, [r3, #36]	; 0x24
    conn->state = NETCONN_NONE;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	2200      	movs	r2, #0
 800bff0:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800bff2:	78fb      	ldrb	r3, [r7, #3]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d006      	beq.n	800c006 <lwip_netconn_do_writemore+0x396>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800bff8:	68b8      	ldr	r0, [r7, #8]
 800bffa:	f00b fa6b 	bl	80174d4 <sys_sem_signal>
 800bffe:	e002      	b.n	800c006 <lwip_netconn_do_writemore+0x396>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800c000:	f04f 33ff 	mov.w	r3, #4294967295
 800c004:	e000      	b.n	800c008 <lwip_netconn_do_writemore+0x398>
  }
#endif
  return ERR_OK;
 800c006:	2300      	movs	r3, #0
}
 800c008:	4618      	mov	r0, r3
 800c00a:	3720      	adds	r7, #32
 800c00c:	46bd      	mov	sp, r7
 800c00e:	bd80      	pop	{r7, pc}

0800c010 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b084      	sub	sp, #16
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800c01c:	68bb      	ldr	r3, [r7, #8]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	4618      	mov	r0, r3
 800c022:	f7fe fd42 	bl	800aaaa <netconn_err>
 800c026:	4603      	mov	r3, r0
 800c028:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800c02a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d166      	bne.n	800c100 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800c032:	68bb      	ldr	r3, [r7, #8]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	781b      	ldrb	r3, [r3, #0]
 800c038:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c03c:	2b10      	cmp	r3, #16
 800c03e:	d15d      	bne.n	800c0fc <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800c040:	68bb      	ldr	r3, [r7, #8]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	785b      	ldrb	r3, [r3, #1]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d002      	beq.n	800c050 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800c04a:	23fb      	movs	r3, #251	; 0xfb
 800c04c:	73fb      	strb	r3, [r7, #15]
 800c04e:	e057      	b.n	800c100 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800c050:	68bb      	ldr	r3, [r7, #8]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	685b      	ldr	r3, [r3, #4]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d04d      	beq.n	800c0f6 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800c05a:	68bb      	ldr	r3, [r7, #8]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	2201      	movs	r2, #1
 800c060:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800c062:	68bb      	ldr	r3, [r7, #8]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d006      	beq.n	800c07a <lwip_netconn_do_write+0x6a>
 800c06c:	4b28      	ldr	r3, [pc, #160]	; (800c110 <lwip_netconn_do_write+0x100>)
 800c06e:	f240 7223 	movw	r2, #1827	; 0x723
 800c072:	4928      	ldr	r1, [pc, #160]	; (800c114 <lwip_netconn_do_write+0x104>)
 800c074:	4828      	ldr	r0, [pc, #160]	; (800c118 <lwip_netconn_do_write+0x108>)
 800c076:	f00f f845 	bl	801b104 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800c07a:	68bb      	ldr	r3, [r7, #8]
 800c07c:	695b      	ldr	r3, [r3, #20]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d106      	bne.n	800c090 <lwip_netconn_do_write+0x80>
 800c082:	4b23      	ldr	r3, [pc, #140]	; (800c110 <lwip_netconn_do_write+0x100>)
 800c084:	f240 7224 	movw	r2, #1828	; 0x724
 800c088:	4924      	ldr	r1, [pc, #144]	; (800c11c <lwip_netconn_do_write+0x10c>)
 800c08a:	4823      	ldr	r0, [pc, #140]	; (800c118 <lwip_netconn_do_write+0x108>)
 800c08c:	f00f f83a 	bl	801b104 <iprintf>
        msg->conn->current_msg = msg;
 800c090:	68bb      	ldr	r3, [r7, #8]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	68ba      	ldr	r2, [r7, #8]
 800c096:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800c098:	68bb      	ldr	r3, [r7, #8]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	2100      	movs	r1, #0
 800c09e:	4618      	mov	r0, r3
 800c0a0:	f7ff fde6 	bl	800bc70 <lwip_netconn_do_writemore>
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d02e      	beq.n	800c108 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800c0aa:	68bb      	ldr	r3, [r7, #8]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	785b      	ldrb	r3, [r3, #1]
 800c0b0:	2b01      	cmp	r3, #1
 800c0b2:	d006      	beq.n	800c0c2 <lwip_netconn_do_write+0xb2>
 800c0b4:	4b16      	ldr	r3, [pc, #88]	; (800c110 <lwip_netconn_do_write+0x100>)
 800c0b6:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800c0ba:	4919      	ldr	r1, [pc, #100]	; (800c120 <lwip_netconn_do_write+0x110>)
 800c0bc:	4816      	ldr	r0, [pc, #88]	; (800c118 <lwip_netconn_do_write+0x108>)
 800c0be:	f00f f821 	bl	801b104 <iprintf>
          UNLOCK_TCPIP_CORE();
 800c0c2:	4818      	ldr	r0, [pc, #96]	; (800c124 <lwip_netconn_do_write+0x114>)
 800c0c4:	f00b fa6f 	bl	80175a6 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800c0c8:	68bb      	ldr	r3, [r7, #8]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	330c      	adds	r3, #12
 800c0ce:	2100      	movs	r1, #0
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	f00b f9ce 	bl	8017472 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800c0d6:	4813      	ldr	r0, [pc, #76]	; (800c124 <lwip_netconn_do_write+0x114>)
 800c0d8:	f00b fa56 	bl	8017588 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800c0dc:	68bb      	ldr	r3, [r7, #8]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	785b      	ldrb	r3, [r3, #1]
 800c0e2:	2b01      	cmp	r3, #1
 800c0e4:	d110      	bne.n	800c108 <lwip_netconn_do_write+0xf8>
 800c0e6:	4b0a      	ldr	r3, [pc, #40]	; (800c110 <lwip_netconn_do_write+0x100>)
 800c0e8:	f240 722c 	movw	r2, #1836	; 0x72c
 800c0ec:	490c      	ldr	r1, [pc, #48]	; (800c120 <lwip_netconn_do_write+0x110>)
 800c0ee:	480a      	ldr	r0, [pc, #40]	; (800c118 <lwip_netconn_do_write+0x108>)
 800c0f0:	f00f f808 	bl	801b104 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800c0f4:	e008      	b.n	800c108 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800c0f6:	23f5      	movs	r3, #245	; 0xf5
 800c0f8:	73fb      	strb	r3, [r7, #15]
 800c0fa:	e001      	b.n	800c100 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800c0fc:	23fa      	movs	r3, #250	; 0xfa
 800c0fe:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800c100:	68bb      	ldr	r3, [r7, #8]
 800c102:	7bfa      	ldrb	r2, [r7, #15]
 800c104:	711a      	strb	r2, [r3, #4]
 800c106:	e000      	b.n	800c10a <lwip_netconn_do_write+0xfa>
        return;
 800c108:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800c10a:	3710      	adds	r7, #16
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bd80      	pop	{r7, pc}
 800c110:	0801bd24 	.word	0x0801bd24
 800c114:	0801c0c8 	.word	0x0801c0c8
 800c118:	0801bd68 	.word	0x0801bd68
 800c11c:	0801c250 	.word	0x0801c250
 800c120:	0801c0e4 	.word	0x0801c0e4
 800c124:	20008234 	.word	0x20008234

0800c128 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b084      	sub	sp, #16
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	785b      	ldrb	r3, [r3, #1]
 800c13a:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	685b      	ldr	r3, [r3, #4]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d069      	beq.n	800c21a <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	781b      	ldrb	r3, [r3, #0]
 800c14c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800c150:	2b10      	cmp	r3, #16
 800c152:	d162      	bne.n	800c21a <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800c158:	2b03      	cmp	r3, #3
 800c15a:	d002      	beq.n	800c162 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800c15c:	7afb      	ldrb	r3, [r7, #11]
 800c15e:	2b02      	cmp	r3, #2
 800c160:	d05b      	beq.n	800c21a <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800c162:	7afb      	ldrb	r3, [r7, #11]
 800c164:	2b03      	cmp	r3, #3
 800c166:	d103      	bne.n	800c170 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	22f5      	movs	r2, #245	; 0xf5
 800c16c:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800c16e:	e059      	b.n	800c224 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800c170:	7afb      	ldrb	r3, [r7, #11]
 800c172:	2b01      	cmp	r3, #1
 800c174:	d103      	bne.n	800c17e <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	22fb      	movs	r2, #251	; 0xfb
 800c17a:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800c17c:	e052      	b.n	800c224 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	7a1b      	ldrb	r3, [r3, #8]
 800c182:	f003 0301 	and.w	r3, r3, #1
 800c186:	2b00      	cmp	r3, #0
 800c188:	d004      	beq.n	800c194 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	4618      	mov	r0, r3
 800c190:	f7ff f916 	bl	800b3c0 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d006      	beq.n	800c1ac <lwip_netconn_do_close+0x84>
 800c19e:	4b23      	ldr	r3, [pc, #140]	; (800c22c <lwip_netconn_do_close+0x104>)
 800c1a0:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800c1a4:	4922      	ldr	r1, [pc, #136]	; (800c230 <lwip_netconn_do_close+0x108>)
 800c1a6:	4823      	ldr	r0, [pc, #140]	; (800c234 <lwip_netconn_do_close+0x10c>)
 800c1a8:	f00e ffac 	bl	801b104 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	2204      	movs	r2, #4
 800c1b2:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	68fa      	ldr	r2, [r7, #12]
 800c1ba:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	2100      	movs	r1, #0
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	f7ff f97a 	bl	800b4bc <lwip_netconn_do_close_internal>
 800c1c8:	4603      	mov	r3, r0
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d029      	beq.n	800c222 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	785b      	ldrb	r3, [r3, #1]
 800c1d4:	2b04      	cmp	r3, #4
 800c1d6:	d006      	beq.n	800c1e6 <lwip_netconn_do_close+0xbe>
 800c1d8:	4b14      	ldr	r3, [pc, #80]	; (800c22c <lwip_netconn_do_close+0x104>)
 800c1da:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800c1de:	4916      	ldr	r1, [pc, #88]	; (800c238 <lwip_netconn_do_close+0x110>)
 800c1e0:	4814      	ldr	r0, [pc, #80]	; (800c234 <lwip_netconn_do_close+0x10c>)
 800c1e2:	f00e ff8f 	bl	801b104 <iprintf>
        UNLOCK_TCPIP_CORE();
 800c1e6:	4815      	ldr	r0, [pc, #84]	; (800c23c <lwip_netconn_do_close+0x114>)
 800c1e8:	f00b f9dd 	bl	80175a6 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	330c      	adds	r3, #12
 800c1f2:	2100      	movs	r1, #0
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	f00b f93c 	bl	8017472 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800c1fa:	4810      	ldr	r0, [pc, #64]	; (800c23c <lwip_netconn_do_close+0x114>)
 800c1fc:	f00b f9c4 	bl	8017588 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	785b      	ldrb	r3, [r3, #1]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d00b      	beq.n	800c222 <lwip_netconn_do_close+0xfa>
 800c20a:	4b08      	ldr	r3, [pc, #32]	; (800c22c <lwip_netconn_do_close+0x104>)
 800c20c:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800c210:	4909      	ldr	r1, [pc, #36]	; (800c238 <lwip_netconn_do_close+0x110>)
 800c212:	4808      	ldr	r0, [pc, #32]	; (800c234 <lwip_netconn_do_close+0x10c>)
 800c214:	f00e ff76 	bl	801b104 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800c218:	e003      	b.n	800c222 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	22f5      	movs	r2, #245	; 0xf5
 800c21e:	711a      	strb	r2, [r3, #4]
 800c220:	e000      	b.n	800c224 <lwip_netconn_do_close+0xfc>
      return;
 800c222:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800c224:	3710      	adds	r7, #16
 800c226:	46bd      	mov	sp, r7
 800c228:	bd80      	pop	{r7, pc}
 800c22a:	bf00      	nop
 800c22c:	0801bd24 	.word	0x0801bd24
 800c230:	0801c0c8 	.word	0x0801c0c8
 800c234:	0801bd68 	.word	0x0801bd68
 800c238:	0801c0e4 	.word	0x0801c0e4
 800c23c:	20008234 	.word	0x20008234

0800c240 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b082      	sub	sp, #8
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d013      	beq.n	800c276 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d00b      	beq.n	800c26e <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	4618      	mov	r0, r3
 800c25c:	f001 fdbe 	bl	800dddc <pbuf_free>
      buf->p = buf->ptr = NULL;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2200      	movs	r2, #0
 800c264:	605a      	str	r2, [r3, #4]
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	685a      	ldr	r2, [r3, #4]
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800c26e:	6879      	ldr	r1, [r7, #4]
 800c270:	2006      	movs	r0, #6
 800c272:	f000 ff0f 	bl	800d094 <memp_free>
  }
}
 800c276:	bf00      	nop
 800c278:	3708      	adds	r7, #8
 800c27a:	46bd      	mov	sp, r7
 800c27c:	bd80      	pop	{r7, pc}
	...

0800c280 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b084      	sub	sp, #16
 800c284:	af00      	add	r7, sp, #0
 800c286:	60f8      	str	r0, [r7, #12]
 800c288:	60b9      	str	r1, [r7, #8]
 800c28a:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d108      	bne.n	800c2a4 <netbuf_data+0x24>
 800c292:	4b1b      	ldr	r3, [pc, #108]	; (800c300 <netbuf_data+0x80>)
 800c294:	22c6      	movs	r2, #198	; 0xc6
 800c296:	491b      	ldr	r1, [pc, #108]	; (800c304 <netbuf_data+0x84>)
 800c298:	481b      	ldr	r0, [pc, #108]	; (800c308 <netbuf_data+0x88>)
 800c29a:	f00e ff33 	bl	801b104 <iprintf>
 800c29e:	f06f 030f 	mvn.w	r3, #15
 800c2a2:	e029      	b.n	800c2f8 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800c2a4:	68bb      	ldr	r3, [r7, #8]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d108      	bne.n	800c2bc <netbuf_data+0x3c>
 800c2aa:	4b15      	ldr	r3, [pc, #84]	; (800c300 <netbuf_data+0x80>)
 800c2ac:	22c7      	movs	r2, #199	; 0xc7
 800c2ae:	4917      	ldr	r1, [pc, #92]	; (800c30c <netbuf_data+0x8c>)
 800c2b0:	4815      	ldr	r0, [pc, #84]	; (800c308 <netbuf_data+0x88>)
 800c2b2:	f00e ff27 	bl	801b104 <iprintf>
 800c2b6:	f06f 030f 	mvn.w	r3, #15
 800c2ba:	e01d      	b.n	800c2f8 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d108      	bne.n	800c2d4 <netbuf_data+0x54>
 800c2c2:	4b0f      	ldr	r3, [pc, #60]	; (800c300 <netbuf_data+0x80>)
 800c2c4:	22c8      	movs	r2, #200	; 0xc8
 800c2c6:	4912      	ldr	r1, [pc, #72]	; (800c310 <netbuf_data+0x90>)
 800c2c8:	480f      	ldr	r0, [pc, #60]	; (800c308 <netbuf_data+0x88>)
 800c2ca:	f00e ff1b 	bl	801b104 <iprintf>
 800c2ce:	f06f 030f 	mvn.w	r3, #15
 800c2d2:	e011      	b.n	800c2f8 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	685b      	ldr	r3, [r3, #4]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d102      	bne.n	800c2e2 <netbuf_data+0x62>
    return ERR_BUF;
 800c2dc:	f06f 0301 	mvn.w	r3, #1
 800c2e0:	e00a      	b.n	800c2f8 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	685b      	ldr	r3, [r3, #4]
 800c2e6:	685a      	ldr	r2, [r3, #4]
 800c2e8:	68bb      	ldr	r3, [r7, #8]
 800c2ea:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	685b      	ldr	r3, [r3, #4]
 800c2f0:	895a      	ldrh	r2, [r3, #10]
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 800c2f6:	2300      	movs	r3, #0
}
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	3710      	adds	r7, #16
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	bd80      	pop	{r7, pc}
 800c300:	0801c27c 	.word	0x0801c27c
 800c304:	0801c384 	.word	0x0801c384
 800c308:	0801c2cc 	.word	0x0801c2cc
 800c30c:	0801c3a0 	.word	0x0801c3a0
 800c310:	0801c3c0 	.word	0x0801c3c0

0800c314 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b084      	sub	sp, #16
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
 800c31c:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800c31e:	f008 f971 	bl	8014604 <sys_timeouts_sleeptime>
 800c322:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c32a:	d10b      	bne.n	800c344 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800c32c:	4813      	ldr	r0, [pc, #76]	; (800c37c <tcpip_timeouts_mbox_fetch+0x68>)
 800c32e:	f00b f93a 	bl	80175a6 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800c332:	2200      	movs	r2, #0
 800c334:	6839      	ldr	r1, [r7, #0]
 800c336:	6878      	ldr	r0, [r7, #4]
 800c338:	f00b f810 	bl	801735c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800c33c:	480f      	ldr	r0, [pc, #60]	; (800c37c <tcpip_timeouts_mbox_fetch+0x68>)
 800c33e:	f00b f923 	bl	8017588 <sys_mutex_lock>
    return;
 800c342:	e018      	b.n	800c376 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d102      	bne.n	800c350 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800c34a:	f008 f921 	bl	8014590 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800c34e:	e7e6      	b.n	800c31e <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800c350:	480a      	ldr	r0, [pc, #40]	; (800c37c <tcpip_timeouts_mbox_fetch+0x68>)
 800c352:	f00b f928 	bl	80175a6 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800c356:	68fa      	ldr	r2, [r7, #12]
 800c358:	6839      	ldr	r1, [r7, #0]
 800c35a:	6878      	ldr	r0, [r7, #4]
 800c35c:	f00a fffe 	bl	801735c <sys_arch_mbox_fetch>
 800c360:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800c362:	4806      	ldr	r0, [pc, #24]	; (800c37c <tcpip_timeouts_mbox_fetch+0x68>)
 800c364:	f00b f910 	bl	8017588 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800c368:	68bb      	ldr	r3, [r7, #8]
 800c36a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c36e:	d102      	bne.n	800c376 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800c370:	f008 f90e 	bl	8014590 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800c374:	e7d3      	b.n	800c31e <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800c376:	3710      	adds	r7, #16
 800c378:	46bd      	mov	sp, r7
 800c37a:	bd80      	pop	{r7, pc}
 800c37c:	20008234 	.word	0x20008234

0800c380 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b084      	sub	sp, #16
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800c388:	4810      	ldr	r0, [pc, #64]	; (800c3cc <tcpip_thread+0x4c>)
 800c38a:	f00b f8fd 	bl	8017588 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800c38e:	4b10      	ldr	r3, [pc, #64]	; (800c3d0 <tcpip_thread+0x50>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d005      	beq.n	800c3a2 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800c396:	4b0e      	ldr	r3, [pc, #56]	; (800c3d0 <tcpip_thread+0x50>)
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	4a0e      	ldr	r2, [pc, #56]	; (800c3d4 <tcpip_thread+0x54>)
 800c39c:	6812      	ldr	r2, [r2, #0]
 800c39e:	4610      	mov	r0, r2
 800c3a0:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800c3a2:	f107 030c 	add.w	r3, r7, #12
 800c3a6:	4619      	mov	r1, r3
 800c3a8:	480b      	ldr	r0, [pc, #44]	; (800c3d8 <tcpip_thread+0x58>)
 800c3aa:	f7ff ffb3 	bl	800c314 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d106      	bne.n	800c3c2 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800c3b4:	4b09      	ldr	r3, [pc, #36]	; (800c3dc <tcpip_thread+0x5c>)
 800c3b6:	2291      	movs	r2, #145	; 0x91
 800c3b8:	4909      	ldr	r1, [pc, #36]	; (800c3e0 <tcpip_thread+0x60>)
 800c3ba:	480a      	ldr	r0, [pc, #40]	; (800c3e4 <tcpip_thread+0x64>)
 800c3bc:	f00e fea2 	bl	801b104 <iprintf>
      continue;
 800c3c0:	e003      	b.n	800c3ca <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	f000 f80f 	bl	800c3e8 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800c3ca:	e7ea      	b.n	800c3a2 <tcpip_thread+0x22>
 800c3cc:	20008234 	.word	0x20008234
 800c3d0:	20004b70 	.word	0x20004b70
 800c3d4:	20004b74 	.word	0x20004b74
 800c3d8:	20004b78 	.word	0x20004b78
 800c3dc:	0801c414 	.word	0x0801c414
 800c3e0:	0801c444 	.word	0x0801c444
 800c3e4:	0801c464 	.word	0x0801c464

0800c3e8 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b082      	sub	sp, #8
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	781b      	ldrb	r3, [r3, #0]
 800c3f4:	2b02      	cmp	r3, #2
 800c3f6:	d026      	beq.n	800c446 <tcpip_thread_handle_msg+0x5e>
 800c3f8:	2b02      	cmp	r3, #2
 800c3fa:	dc2b      	bgt.n	800c454 <tcpip_thread_handle_msg+0x6c>
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d002      	beq.n	800c406 <tcpip_thread_handle_msg+0x1e>
 800c400:	2b01      	cmp	r3, #1
 800c402:	d015      	beq.n	800c430 <tcpip_thread_handle_msg+0x48>
 800c404:	e026      	b.n	800c454 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	68db      	ldr	r3, [r3, #12]
 800c40a:	687a      	ldr	r2, [r7, #4]
 800c40c:	6850      	ldr	r0, [r2, #4]
 800c40e:	687a      	ldr	r2, [r7, #4]
 800c410:	6892      	ldr	r2, [r2, #8]
 800c412:	4611      	mov	r1, r2
 800c414:	4798      	blx	r3
 800c416:	4603      	mov	r3, r0
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d004      	beq.n	800c426 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	685b      	ldr	r3, [r3, #4]
 800c420:	4618      	mov	r0, r3
 800c422:	f001 fcdb 	bl	800dddc <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800c426:	6879      	ldr	r1, [r7, #4]
 800c428:	2009      	movs	r0, #9
 800c42a:	f000 fe33 	bl	800d094 <memp_free>
      break;
 800c42e:	e018      	b.n	800c462 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	685b      	ldr	r3, [r3, #4]
 800c434:	687a      	ldr	r2, [r7, #4]
 800c436:	6892      	ldr	r2, [r2, #8]
 800c438:	4610      	mov	r0, r2
 800c43a:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800c43c:	6879      	ldr	r1, [r7, #4]
 800c43e:	2008      	movs	r0, #8
 800c440:	f000 fe28 	bl	800d094 <memp_free>
      break;
 800c444:	e00d      	b.n	800c462 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	685b      	ldr	r3, [r3, #4]
 800c44a:	687a      	ldr	r2, [r7, #4]
 800c44c:	6892      	ldr	r2, [r2, #8]
 800c44e:	4610      	mov	r0, r2
 800c450:	4798      	blx	r3
      break;
 800c452:	e006      	b.n	800c462 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800c454:	4b05      	ldr	r3, [pc, #20]	; (800c46c <tcpip_thread_handle_msg+0x84>)
 800c456:	22cf      	movs	r2, #207	; 0xcf
 800c458:	4905      	ldr	r1, [pc, #20]	; (800c470 <tcpip_thread_handle_msg+0x88>)
 800c45a:	4806      	ldr	r0, [pc, #24]	; (800c474 <tcpip_thread_handle_msg+0x8c>)
 800c45c:	f00e fe52 	bl	801b104 <iprintf>
      break;
 800c460:	bf00      	nop
  }
}
 800c462:	bf00      	nop
 800c464:	3708      	adds	r7, #8
 800c466:	46bd      	mov	sp, r7
 800c468:	bd80      	pop	{r7, pc}
 800c46a:	bf00      	nop
 800c46c:	0801c414 	.word	0x0801c414
 800c470:	0801c444 	.word	0x0801c444
 800c474:	0801c464 	.word	0x0801c464

0800c478 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b086      	sub	sp, #24
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	60f8      	str	r0, [r7, #12]
 800c480:	60b9      	str	r1, [r7, #8]
 800c482:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800c484:	481a      	ldr	r0, [pc, #104]	; (800c4f0 <tcpip_inpkt+0x78>)
 800c486:	f00a ffb1 	bl	80173ec <sys_mbox_valid>
 800c48a:	4603      	mov	r3, r0
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d105      	bne.n	800c49c <tcpip_inpkt+0x24>
 800c490:	4b18      	ldr	r3, [pc, #96]	; (800c4f4 <tcpip_inpkt+0x7c>)
 800c492:	22fc      	movs	r2, #252	; 0xfc
 800c494:	4918      	ldr	r1, [pc, #96]	; (800c4f8 <tcpip_inpkt+0x80>)
 800c496:	4819      	ldr	r0, [pc, #100]	; (800c4fc <tcpip_inpkt+0x84>)
 800c498:	f00e fe34 	bl	801b104 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800c49c:	2009      	movs	r0, #9
 800c49e:	f000 fda7 	bl	800cff0 <memp_malloc>
 800c4a2:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800c4a4:	697b      	ldr	r3, [r7, #20]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d102      	bne.n	800c4b0 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800c4aa:	f04f 33ff 	mov.w	r3, #4294967295
 800c4ae:	e01a      	b.n	800c4e6 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800c4b0:	697b      	ldr	r3, [r7, #20]
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800c4b6:	697b      	ldr	r3, [r7, #20]
 800c4b8:	68fa      	ldr	r2, [r7, #12]
 800c4ba:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800c4bc:	697b      	ldr	r3, [r7, #20]
 800c4be:	68ba      	ldr	r2, [r7, #8]
 800c4c0:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800c4c2:	697b      	ldr	r3, [r7, #20]
 800c4c4:	687a      	ldr	r2, [r7, #4]
 800c4c6:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800c4c8:	6979      	ldr	r1, [r7, #20]
 800c4ca:	4809      	ldr	r0, [pc, #36]	; (800c4f0 <tcpip_inpkt+0x78>)
 800c4cc:	f00a ff2c 	bl	8017328 <sys_mbox_trypost>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d006      	beq.n	800c4e4 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800c4d6:	6979      	ldr	r1, [r7, #20]
 800c4d8:	2009      	movs	r0, #9
 800c4da:	f000 fddb 	bl	800d094 <memp_free>
    return ERR_MEM;
 800c4de:	f04f 33ff 	mov.w	r3, #4294967295
 800c4e2:	e000      	b.n	800c4e6 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800c4e4:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	3718      	adds	r7, #24
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd80      	pop	{r7, pc}
 800c4ee:	bf00      	nop
 800c4f0:	20004b78 	.word	0x20004b78
 800c4f4:	0801c414 	.word	0x0801c414
 800c4f8:	0801c48c 	.word	0x0801c48c
 800c4fc:	0801c464 	.word	0x0801c464

0800c500 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b082      	sub	sp, #8
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
 800c508:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800c50a:	683b      	ldr	r3, [r7, #0]
 800c50c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c510:	f003 0318 	and.w	r3, r3, #24
 800c514:	2b00      	cmp	r3, #0
 800c516:	d006      	beq.n	800c526 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800c518:	4a08      	ldr	r2, [pc, #32]	; (800c53c <tcpip_input+0x3c>)
 800c51a:	6839      	ldr	r1, [r7, #0]
 800c51c:	6878      	ldr	r0, [r7, #4]
 800c51e:	f7ff ffab 	bl	800c478 <tcpip_inpkt>
 800c522:	4603      	mov	r3, r0
 800c524:	e005      	b.n	800c532 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800c526:	4a06      	ldr	r2, [pc, #24]	; (800c540 <tcpip_input+0x40>)
 800c528:	6839      	ldr	r1, [r7, #0]
 800c52a:	6878      	ldr	r0, [r7, #4]
 800c52c:	f7ff ffa4 	bl	800c478 <tcpip_inpkt>
 800c530:	4603      	mov	r3, r0
}
 800c532:	4618      	mov	r0, r3
 800c534:	3708      	adds	r7, #8
 800c536:	46bd      	mov	sp, r7
 800c538:	bd80      	pop	{r7, pc}
 800c53a:	bf00      	nop
 800c53c:	08017125 	.word	0x08017125
 800c540:	08016039 	.word	0x08016039

0800c544 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b084      	sub	sp, #16
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
 800c54c:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800c54e:	4819      	ldr	r0, [pc, #100]	; (800c5b4 <tcpip_try_callback+0x70>)
 800c550:	f00a ff4c 	bl	80173ec <sys_mbox_valid>
 800c554:	4603      	mov	r3, r0
 800c556:	2b00      	cmp	r3, #0
 800c558:	d106      	bne.n	800c568 <tcpip_try_callback+0x24>
 800c55a:	4b17      	ldr	r3, [pc, #92]	; (800c5b8 <tcpip_try_callback+0x74>)
 800c55c:	f240 125d 	movw	r2, #349	; 0x15d
 800c560:	4916      	ldr	r1, [pc, #88]	; (800c5bc <tcpip_try_callback+0x78>)
 800c562:	4817      	ldr	r0, [pc, #92]	; (800c5c0 <tcpip_try_callback+0x7c>)
 800c564:	f00e fdce 	bl	801b104 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800c568:	2008      	movs	r0, #8
 800c56a:	f000 fd41 	bl	800cff0 <memp_malloc>
 800c56e:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d102      	bne.n	800c57c <tcpip_try_callback+0x38>
    return ERR_MEM;
 800c576:	f04f 33ff 	mov.w	r3, #4294967295
 800c57a:	e017      	b.n	800c5ac <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	2201      	movs	r2, #1
 800c580:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	687a      	ldr	r2, [r7, #4]
 800c586:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	683a      	ldr	r2, [r7, #0]
 800c58c:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800c58e:	68f9      	ldr	r1, [r7, #12]
 800c590:	4808      	ldr	r0, [pc, #32]	; (800c5b4 <tcpip_try_callback+0x70>)
 800c592:	f00a fec9 	bl	8017328 <sys_mbox_trypost>
 800c596:	4603      	mov	r3, r0
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d006      	beq.n	800c5aa <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800c59c:	68f9      	ldr	r1, [r7, #12]
 800c59e:	2008      	movs	r0, #8
 800c5a0:	f000 fd78 	bl	800d094 <memp_free>
    return ERR_MEM;
 800c5a4:	f04f 33ff 	mov.w	r3, #4294967295
 800c5a8:	e000      	b.n	800c5ac <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800c5aa:	2300      	movs	r3, #0
}
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	3710      	adds	r7, #16
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	bd80      	pop	{r7, pc}
 800c5b4:	20004b78 	.word	0x20004b78
 800c5b8:	0801c414 	.word	0x0801c414
 800c5bc:	0801c48c 	.word	0x0801c48c
 800c5c0:	0801c464 	.word	0x0801c464

0800c5c4 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b084      	sub	sp, #16
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	60f8      	str	r0, [r7, #12]
 800c5cc:	60b9      	str	r1, [r7, #8]
 800c5ce:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800c5d0:	4806      	ldr	r0, [pc, #24]	; (800c5ec <tcpip_send_msg_wait_sem+0x28>)
 800c5d2:	f00a ffd9 	bl	8017588 <sys_mutex_lock>
  fn(apimsg);
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	68b8      	ldr	r0, [r7, #8]
 800c5da:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800c5dc:	4803      	ldr	r0, [pc, #12]	; (800c5ec <tcpip_send_msg_wait_sem+0x28>)
 800c5de:	f00a ffe2 	bl	80175a6 <sys_mutex_unlock>
  return ERR_OK;
 800c5e2:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	3710      	adds	r7, #16
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	bd80      	pop	{r7, pc}
 800c5ec:	20008234 	.word	0x20008234

0800c5f0 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b084      	sub	sp, #16
 800c5f4:	af02      	add	r7, sp, #8
 800c5f6:	6078      	str	r0, [r7, #4]
 800c5f8:	6039      	str	r1, [r7, #0]
  lwip_init();
 800c5fa:	f000 f871 	bl	800c6e0 <lwip_init>

  tcpip_init_done = initfunc;
 800c5fe:	4a17      	ldr	r2, [pc, #92]	; (800c65c <tcpip_init+0x6c>)
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800c604:	4a16      	ldr	r2, [pc, #88]	; (800c660 <tcpip_init+0x70>)
 800c606:	683b      	ldr	r3, [r7, #0]
 800c608:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800c60a:	210c      	movs	r1, #12
 800c60c:	4815      	ldr	r0, [pc, #84]	; (800c664 <tcpip_init+0x74>)
 800c60e:	f00a fe5f 	bl	80172d0 <sys_mbox_new>
 800c612:	4603      	mov	r3, r0
 800c614:	2b00      	cmp	r3, #0
 800c616:	d006      	beq.n	800c626 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800c618:	4b13      	ldr	r3, [pc, #76]	; (800c668 <tcpip_init+0x78>)
 800c61a:	f240 2261 	movw	r2, #609	; 0x261
 800c61e:	4913      	ldr	r1, [pc, #76]	; (800c66c <tcpip_init+0x7c>)
 800c620:	4813      	ldr	r0, [pc, #76]	; (800c670 <tcpip_init+0x80>)
 800c622:	f00e fd6f 	bl	801b104 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800c626:	4813      	ldr	r0, [pc, #76]	; (800c674 <tcpip_init+0x84>)
 800c628:	f00a ff98 	bl	801755c <sys_mutex_new>
 800c62c:	4603      	mov	r3, r0
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d006      	beq.n	800c640 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800c632:	4b0d      	ldr	r3, [pc, #52]	; (800c668 <tcpip_init+0x78>)
 800c634:	f240 2265 	movw	r2, #613	; 0x265
 800c638:	490f      	ldr	r1, [pc, #60]	; (800c678 <tcpip_init+0x88>)
 800c63a:	480d      	ldr	r0, [pc, #52]	; (800c670 <tcpip_init+0x80>)
 800c63c:	f00e fd62 	bl	801b104 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800c640:	2318      	movs	r3, #24
 800c642:	9300      	str	r3, [sp, #0]
 800c644:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c648:	2200      	movs	r2, #0
 800c64a:	490c      	ldr	r1, [pc, #48]	; (800c67c <tcpip_init+0x8c>)
 800c64c:	480c      	ldr	r0, [pc, #48]	; (800c680 <tcpip_init+0x90>)
 800c64e:	f00a ffb7 	bl	80175c0 <sys_thread_new>
}
 800c652:	bf00      	nop
 800c654:	3708      	adds	r7, #8
 800c656:	46bd      	mov	sp, r7
 800c658:	bd80      	pop	{r7, pc}
 800c65a:	bf00      	nop
 800c65c:	20004b70 	.word	0x20004b70
 800c660:	20004b74 	.word	0x20004b74
 800c664:	20004b78 	.word	0x20004b78
 800c668:	0801c414 	.word	0x0801c414
 800c66c:	0801c49c 	.word	0x0801c49c
 800c670:	0801c464 	.word	0x0801c464
 800c674:	20008234 	.word	0x20008234
 800c678:	0801c4c0 	.word	0x0801c4c0
 800c67c:	0800c381 	.word	0x0800c381
 800c680:	0801c4e4 	.word	0x0801c4e4

0800c684 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800c684:	b480      	push	{r7}
 800c686:	b083      	sub	sp, #12
 800c688:	af00      	add	r7, sp, #0
 800c68a:	4603      	mov	r3, r0
 800c68c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800c68e:	88fb      	ldrh	r3, [r7, #6]
 800c690:	021b      	lsls	r3, r3, #8
 800c692:	b21a      	sxth	r2, r3
 800c694:	88fb      	ldrh	r3, [r7, #6]
 800c696:	0a1b      	lsrs	r3, r3, #8
 800c698:	b29b      	uxth	r3, r3
 800c69a:	b21b      	sxth	r3, r3
 800c69c:	4313      	orrs	r3, r2
 800c69e:	b21b      	sxth	r3, r3
 800c6a0:	b29b      	uxth	r3, r3
}
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	370c      	adds	r7, #12
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ac:	4770      	bx	lr

0800c6ae <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800c6ae:	b480      	push	{r7}
 800c6b0:	b083      	sub	sp, #12
 800c6b2:	af00      	add	r7, sp, #0
 800c6b4:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	061a      	lsls	r2, r3, #24
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	021b      	lsls	r3, r3, #8
 800c6be:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c6c2:	431a      	orrs	r2, r3
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	0a1b      	lsrs	r3, r3, #8
 800c6c8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c6cc:	431a      	orrs	r2, r3
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	0e1b      	lsrs	r3, r3, #24
 800c6d2:	4313      	orrs	r3, r2
}
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	370c      	adds	r7, #12
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6de:	4770      	bx	lr

0800c6e0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b082      	sub	sp, #8
 800c6e4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800c6ea:	f00a ff2b 	bl	8017544 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800c6ee:	f000 f8d5 	bl	800c89c <mem_init>
  memp_init();
 800c6f2:	f000 fc31 	bl	800cf58 <memp_init>
  pbuf_init();
  netif_init();
 800c6f6:	f000 fcf7 	bl	800d0e8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800c6fa:	f007 ffbb 	bl	8014674 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800c6fe:	f001 fe07 	bl	800e310 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800c702:	f007 fefd 	bl	8014500 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800c706:	bf00      	nop
 800c708:	3708      	adds	r7, #8
 800c70a:	46bd      	mov	sp, r7
 800c70c:	bd80      	pop	{r7, pc}
	...

0800c710 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800c710:	b480      	push	{r7}
 800c712:	b083      	sub	sp, #12
 800c714:	af00      	add	r7, sp, #0
 800c716:	4603      	mov	r3, r0
 800c718:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800c71a:	4b05      	ldr	r3, [pc, #20]	; (800c730 <ptr_to_mem+0x20>)
 800c71c:	681a      	ldr	r2, [r3, #0]
 800c71e:	88fb      	ldrh	r3, [r7, #6]
 800c720:	4413      	add	r3, r2
}
 800c722:	4618      	mov	r0, r3
 800c724:	370c      	adds	r7, #12
 800c726:	46bd      	mov	sp, r7
 800c728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72c:	4770      	bx	lr
 800c72e:	bf00      	nop
 800c730:	20004b7c 	.word	0x20004b7c

0800c734 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800c734:	b480      	push	{r7}
 800c736:	b083      	sub	sp, #12
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800c73c:	4b05      	ldr	r3, [pc, #20]	; (800c754 <mem_to_ptr+0x20>)
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	687a      	ldr	r2, [r7, #4]
 800c742:	1ad3      	subs	r3, r2, r3
 800c744:	b29b      	uxth	r3, r3
}
 800c746:	4618      	mov	r0, r3
 800c748:	370c      	adds	r7, #12
 800c74a:	46bd      	mov	sp, r7
 800c74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c750:	4770      	bx	lr
 800c752:	bf00      	nop
 800c754:	20004b7c 	.word	0x20004b7c

0800c758 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800c758:	b590      	push	{r4, r7, lr}
 800c75a:	b085      	sub	sp, #20
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800c760:	4b45      	ldr	r3, [pc, #276]	; (800c878 <plug_holes+0x120>)
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	687a      	ldr	r2, [r7, #4]
 800c766:	429a      	cmp	r2, r3
 800c768:	d206      	bcs.n	800c778 <plug_holes+0x20>
 800c76a:	4b44      	ldr	r3, [pc, #272]	; (800c87c <plug_holes+0x124>)
 800c76c:	f240 12df 	movw	r2, #479	; 0x1df
 800c770:	4943      	ldr	r1, [pc, #268]	; (800c880 <plug_holes+0x128>)
 800c772:	4844      	ldr	r0, [pc, #272]	; (800c884 <plug_holes+0x12c>)
 800c774:	f00e fcc6 	bl	801b104 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800c778:	4b43      	ldr	r3, [pc, #268]	; (800c888 <plug_holes+0x130>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	687a      	ldr	r2, [r7, #4]
 800c77e:	429a      	cmp	r2, r3
 800c780:	d306      	bcc.n	800c790 <plug_holes+0x38>
 800c782:	4b3e      	ldr	r3, [pc, #248]	; (800c87c <plug_holes+0x124>)
 800c784:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800c788:	4940      	ldr	r1, [pc, #256]	; (800c88c <plug_holes+0x134>)
 800c78a:	483e      	ldr	r0, [pc, #248]	; (800c884 <plug_holes+0x12c>)
 800c78c:	f00e fcba 	bl	801b104 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	791b      	ldrb	r3, [r3, #4]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d006      	beq.n	800c7a6 <plug_holes+0x4e>
 800c798:	4b38      	ldr	r3, [pc, #224]	; (800c87c <plug_holes+0x124>)
 800c79a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800c79e:	493c      	ldr	r1, [pc, #240]	; (800c890 <plug_holes+0x138>)
 800c7a0:	4838      	ldr	r0, [pc, #224]	; (800c884 <plug_holes+0x12c>)
 800c7a2:	f00e fcaf 	bl	801b104 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	881b      	ldrh	r3, [r3, #0]
 800c7aa:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800c7ae:	d906      	bls.n	800c7be <plug_holes+0x66>
 800c7b0:	4b32      	ldr	r3, [pc, #200]	; (800c87c <plug_holes+0x124>)
 800c7b2:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800c7b6:	4937      	ldr	r1, [pc, #220]	; (800c894 <plug_holes+0x13c>)
 800c7b8:	4832      	ldr	r0, [pc, #200]	; (800c884 <plug_holes+0x12c>)
 800c7ba:	f00e fca3 	bl	801b104 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	881b      	ldrh	r3, [r3, #0]
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	f7ff ffa4 	bl	800c710 <ptr_to_mem>
 800c7c8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800c7ca:	687a      	ldr	r2, [r7, #4]
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	429a      	cmp	r2, r3
 800c7d0:	d024      	beq.n	800c81c <plug_holes+0xc4>
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	791b      	ldrb	r3, [r3, #4]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d120      	bne.n	800c81c <plug_holes+0xc4>
 800c7da:	4b2b      	ldr	r3, [pc, #172]	; (800c888 <plug_holes+0x130>)
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	68fa      	ldr	r2, [r7, #12]
 800c7e0:	429a      	cmp	r2, r3
 800c7e2:	d01b      	beq.n	800c81c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800c7e4:	4b2c      	ldr	r3, [pc, #176]	; (800c898 <plug_holes+0x140>)
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	68fa      	ldr	r2, [r7, #12]
 800c7ea:	429a      	cmp	r2, r3
 800c7ec:	d102      	bne.n	800c7f4 <plug_holes+0x9c>
      lfree = mem;
 800c7ee:	4a2a      	ldr	r2, [pc, #168]	; (800c898 <plug_holes+0x140>)
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	881a      	ldrh	r2, [r3, #0]
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	881b      	ldrh	r3, [r3, #0]
 800c800:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800c804:	d00a      	beq.n	800c81c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	881b      	ldrh	r3, [r3, #0]
 800c80a:	4618      	mov	r0, r3
 800c80c:	f7ff ff80 	bl	800c710 <ptr_to_mem>
 800c810:	4604      	mov	r4, r0
 800c812:	6878      	ldr	r0, [r7, #4]
 800c814:	f7ff ff8e 	bl	800c734 <mem_to_ptr>
 800c818:	4603      	mov	r3, r0
 800c81a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	885b      	ldrh	r3, [r3, #2]
 800c820:	4618      	mov	r0, r3
 800c822:	f7ff ff75 	bl	800c710 <ptr_to_mem>
 800c826:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800c828:	68ba      	ldr	r2, [r7, #8]
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	429a      	cmp	r2, r3
 800c82e:	d01f      	beq.n	800c870 <plug_holes+0x118>
 800c830:	68bb      	ldr	r3, [r7, #8]
 800c832:	791b      	ldrb	r3, [r3, #4]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d11b      	bne.n	800c870 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800c838:	4b17      	ldr	r3, [pc, #92]	; (800c898 <plug_holes+0x140>)
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	687a      	ldr	r2, [r7, #4]
 800c83e:	429a      	cmp	r2, r3
 800c840:	d102      	bne.n	800c848 <plug_holes+0xf0>
      lfree = pmem;
 800c842:	4a15      	ldr	r2, [pc, #84]	; (800c898 <plug_holes+0x140>)
 800c844:	68bb      	ldr	r3, [r7, #8]
 800c846:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	881a      	ldrh	r2, [r3, #0]
 800c84c:	68bb      	ldr	r3, [r7, #8]
 800c84e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	881b      	ldrh	r3, [r3, #0]
 800c854:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800c858:	d00a      	beq.n	800c870 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	881b      	ldrh	r3, [r3, #0]
 800c85e:	4618      	mov	r0, r3
 800c860:	f7ff ff56 	bl	800c710 <ptr_to_mem>
 800c864:	4604      	mov	r4, r0
 800c866:	68b8      	ldr	r0, [r7, #8]
 800c868:	f7ff ff64 	bl	800c734 <mem_to_ptr>
 800c86c:	4603      	mov	r3, r0
 800c86e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800c870:	bf00      	nop
 800c872:	3714      	adds	r7, #20
 800c874:	46bd      	mov	sp, r7
 800c876:	bd90      	pop	{r4, r7, pc}
 800c878:	20004b7c 	.word	0x20004b7c
 800c87c:	0801c4f4 	.word	0x0801c4f4
 800c880:	0801c524 	.word	0x0801c524
 800c884:	0801c53c 	.word	0x0801c53c
 800c888:	20004b80 	.word	0x20004b80
 800c88c:	0801c564 	.word	0x0801c564
 800c890:	0801c580 	.word	0x0801c580
 800c894:	0801c59c 	.word	0x0801c59c
 800c898:	20004b88 	.word	0x20004b88

0800c89c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b082      	sub	sp, #8
 800c8a0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800c8a2:	4b1f      	ldr	r3, [pc, #124]	; (800c920 <mem_init+0x84>)
 800c8a4:	3303      	adds	r3, #3
 800c8a6:	f023 0303 	bic.w	r3, r3, #3
 800c8aa:	461a      	mov	r2, r3
 800c8ac:	4b1d      	ldr	r3, [pc, #116]	; (800c924 <mem_init+0x88>)
 800c8ae:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800c8b0:	4b1c      	ldr	r3, [pc, #112]	; (800c924 <mem_init+0x88>)
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800c8bc:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800c8ca:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 800c8ce:	f7ff ff1f 	bl	800c710 <ptr_to_mem>
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	4a14      	ldr	r2, [pc, #80]	; (800c928 <mem_init+0x8c>)
 800c8d6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800c8d8:	4b13      	ldr	r3, [pc, #76]	; (800c928 <mem_init+0x8c>)
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	2201      	movs	r2, #1
 800c8de:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800c8e0:	4b11      	ldr	r3, [pc, #68]	; (800c928 <mem_init+0x8c>)
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800c8e8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800c8ea:	4b0f      	ldr	r3, [pc, #60]	; (800c928 <mem_init+0x8c>)
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800c8f2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800c8f4:	4b0b      	ldr	r3, [pc, #44]	; (800c924 <mem_init+0x88>)
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	4a0c      	ldr	r2, [pc, #48]	; (800c92c <mem_init+0x90>)
 800c8fa:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800c8fc:	480c      	ldr	r0, [pc, #48]	; (800c930 <mem_init+0x94>)
 800c8fe:	f00a fe2d 	bl	801755c <sys_mutex_new>
 800c902:	4603      	mov	r3, r0
 800c904:	2b00      	cmp	r3, #0
 800c906:	d006      	beq.n	800c916 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800c908:	4b0a      	ldr	r3, [pc, #40]	; (800c934 <mem_init+0x98>)
 800c90a:	f240 221f 	movw	r2, #543	; 0x21f
 800c90e:	490a      	ldr	r1, [pc, #40]	; (800c938 <mem_init+0x9c>)
 800c910:	480a      	ldr	r0, [pc, #40]	; (800c93c <mem_init+0xa0>)
 800c912:	f00e fbf7 	bl	801b104 <iprintf>
  }
}
 800c916:	bf00      	nop
 800c918:	3708      	adds	r7, #8
 800c91a:	46bd      	mov	sp, r7
 800c91c:	bd80      	pop	{r7, pc}
 800c91e:	bf00      	nop
 800c920:	20008250 	.word	0x20008250
 800c924:	20004b7c 	.word	0x20004b7c
 800c928:	20004b80 	.word	0x20004b80
 800c92c:	20004b88 	.word	0x20004b88
 800c930:	20004b84 	.word	0x20004b84
 800c934:	0801c4f4 	.word	0x0801c4f4
 800c938:	0801c5c8 	.word	0x0801c5c8
 800c93c:	0801c53c 	.word	0x0801c53c

0800c940 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800c940:	b580      	push	{r7, lr}
 800c942:	b086      	sub	sp, #24
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800c948:	6878      	ldr	r0, [r7, #4]
 800c94a:	f7ff fef3 	bl	800c734 <mem_to_ptr>
 800c94e:	4603      	mov	r3, r0
 800c950:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	881b      	ldrh	r3, [r3, #0]
 800c956:	4618      	mov	r0, r3
 800c958:	f7ff feda 	bl	800c710 <ptr_to_mem>
 800c95c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	885b      	ldrh	r3, [r3, #2]
 800c962:	4618      	mov	r0, r3
 800c964:	f7ff fed4 	bl	800c710 <ptr_to_mem>
 800c968:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	881b      	ldrh	r3, [r3, #0]
 800c96e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800c972:	d818      	bhi.n	800c9a6 <mem_link_valid+0x66>
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	885b      	ldrh	r3, [r3, #2]
 800c978:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800c97c:	d813      	bhi.n	800c9a6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c982:	8afa      	ldrh	r2, [r7, #22]
 800c984:	429a      	cmp	r2, r3
 800c986:	d004      	beq.n	800c992 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	881b      	ldrh	r3, [r3, #0]
 800c98c:	8afa      	ldrh	r2, [r7, #22]
 800c98e:	429a      	cmp	r2, r3
 800c990:	d109      	bne.n	800c9a6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c992:	4b08      	ldr	r3, [pc, #32]	; (800c9b4 <mem_link_valid+0x74>)
 800c994:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c996:	693a      	ldr	r2, [r7, #16]
 800c998:	429a      	cmp	r2, r3
 800c99a:	d006      	beq.n	800c9aa <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c99c:	693b      	ldr	r3, [r7, #16]
 800c99e:	885b      	ldrh	r3, [r3, #2]
 800c9a0:	8afa      	ldrh	r2, [r7, #22]
 800c9a2:	429a      	cmp	r2, r3
 800c9a4:	d001      	beq.n	800c9aa <mem_link_valid+0x6a>
    return 0;
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	e000      	b.n	800c9ac <mem_link_valid+0x6c>
  }
  return 1;
 800c9aa:	2301      	movs	r3, #1
}
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	3718      	adds	r7, #24
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	bd80      	pop	{r7, pc}
 800c9b4:	20004b80 	.word	0x20004b80

0800c9b8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b088      	sub	sp, #32
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d070      	beq.n	800caa8 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	f003 0303 	and.w	r3, r3, #3
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d00d      	beq.n	800c9ec <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800c9d0:	4b37      	ldr	r3, [pc, #220]	; (800cab0 <mem_free+0xf8>)
 800c9d2:	f240 2273 	movw	r2, #627	; 0x273
 800c9d6:	4937      	ldr	r1, [pc, #220]	; (800cab4 <mem_free+0xfc>)
 800c9d8:	4837      	ldr	r0, [pc, #220]	; (800cab8 <mem_free+0x100>)
 800c9da:	f00e fb93 	bl	801b104 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c9de:	f00a fe0f 	bl	8017600 <sys_arch_protect>
 800c9e2:	60f8      	str	r0, [r7, #12]
 800c9e4:	68f8      	ldr	r0, [r7, #12]
 800c9e6:	f00a fe19 	bl	801761c <sys_arch_unprotect>
    return;
 800c9ea:	e05e      	b.n	800caaa <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	3b08      	subs	r3, #8
 800c9f0:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800c9f2:	4b32      	ldr	r3, [pc, #200]	; (800cabc <mem_free+0x104>)
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	69fa      	ldr	r2, [r7, #28]
 800c9f8:	429a      	cmp	r2, r3
 800c9fa:	d306      	bcc.n	800ca0a <mem_free+0x52>
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	f103 020c 	add.w	r2, r3, #12
 800ca02:	4b2f      	ldr	r3, [pc, #188]	; (800cac0 <mem_free+0x108>)
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	429a      	cmp	r2, r3
 800ca08:	d90d      	bls.n	800ca26 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800ca0a:	4b29      	ldr	r3, [pc, #164]	; (800cab0 <mem_free+0xf8>)
 800ca0c:	f240 227f 	movw	r2, #639	; 0x27f
 800ca10:	492c      	ldr	r1, [pc, #176]	; (800cac4 <mem_free+0x10c>)
 800ca12:	4829      	ldr	r0, [pc, #164]	; (800cab8 <mem_free+0x100>)
 800ca14:	f00e fb76 	bl	801b104 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ca18:	f00a fdf2 	bl	8017600 <sys_arch_protect>
 800ca1c:	6138      	str	r0, [r7, #16]
 800ca1e:	6938      	ldr	r0, [r7, #16]
 800ca20:	f00a fdfc 	bl	801761c <sys_arch_unprotect>
    return;
 800ca24:	e041      	b.n	800caaa <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800ca26:	4828      	ldr	r0, [pc, #160]	; (800cac8 <mem_free+0x110>)
 800ca28:	f00a fdae 	bl	8017588 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800ca2c:	69fb      	ldr	r3, [r7, #28]
 800ca2e:	791b      	ldrb	r3, [r3, #4]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d110      	bne.n	800ca56 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800ca34:	4b1e      	ldr	r3, [pc, #120]	; (800cab0 <mem_free+0xf8>)
 800ca36:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800ca3a:	4924      	ldr	r1, [pc, #144]	; (800cacc <mem_free+0x114>)
 800ca3c:	481e      	ldr	r0, [pc, #120]	; (800cab8 <mem_free+0x100>)
 800ca3e:	f00e fb61 	bl	801b104 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800ca42:	4821      	ldr	r0, [pc, #132]	; (800cac8 <mem_free+0x110>)
 800ca44:	f00a fdaf 	bl	80175a6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ca48:	f00a fdda 	bl	8017600 <sys_arch_protect>
 800ca4c:	6178      	str	r0, [r7, #20]
 800ca4e:	6978      	ldr	r0, [r7, #20]
 800ca50:	f00a fde4 	bl	801761c <sys_arch_unprotect>
    return;
 800ca54:	e029      	b.n	800caaa <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800ca56:	69f8      	ldr	r0, [r7, #28]
 800ca58:	f7ff ff72 	bl	800c940 <mem_link_valid>
 800ca5c:	4603      	mov	r3, r0
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d110      	bne.n	800ca84 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800ca62:	4b13      	ldr	r3, [pc, #76]	; (800cab0 <mem_free+0xf8>)
 800ca64:	f240 2295 	movw	r2, #661	; 0x295
 800ca68:	4919      	ldr	r1, [pc, #100]	; (800cad0 <mem_free+0x118>)
 800ca6a:	4813      	ldr	r0, [pc, #76]	; (800cab8 <mem_free+0x100>)
 800ca6c:	f00e fb4a 	bl	801b104 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800ca70:	4815      	ldr	r0, [pc, #84]	; (800cac8 <mem_free+0x110>)
 800ca72:	f00a fd98 	bl	80175a6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ca76:	f00a fdc3 	bl	8017600 <sys_arch_protect>
 800ca7a:	61b8      	str	r0, [r7, #24]
 800ca7c:	69b8      	ldr	r0, [r7, #24]
 800ca7e:	f00a fdcd 	bl	801761c <sys_arch_unprotect>
    return;
 800ca82:	e012      	b.n	800caaa <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800ca84:	69fb      	ldr	r3, [r7, #28]
 800ca86:	2200      	movs	r2, #0
 800ca88:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800ca8a:	4b12      	ldr	r3, [pc, #72]	; (800cad4 <mem_free+0x11c>)
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	69fa      	ldr	r2, [r7, #28]
 800ca90:	429a      	cmp	r2, r3
 800ca92:	d202      	bcs.n	800ca9a <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800ca94:	4a0f      	ldr	r2, [pc, #60]	; (800cad4 <mem_free+0x11c>)
 800ca96:	69fb      	ldr	r3, [r7, #28]
 800ca98:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800ca9a:	69f8      	ldr	r0, [r7, #28]
 800ca9c:	f7ff fe5c 	bl	800c758 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800caa0:	4809      	ldr	r0, [pc, #36]	; (800cac8 <mem_free+0x110>)
 800caa2:	f00a fd80 	bl	80175a6 <sys_mutex_unlock>
 800caa6:	e000      	b.n	800caaa <mem_free+0xf2>
    return;
 800caa8:	bf00      	nop
}
 800caaa:	3720      	adds	r7, #32
 800caac:	46bd      	mov	sp, r7
 800caae:	bd80      	pop	{r7, pc}
 800cab0:	0801c4f4 	.word	0x0801c4f4
 800cab4:	0801c5e4 	.word	0x0801c5e4
 800cab8:	0801c53c 	.word	0x0801c53c
 800cabc:	20004b7c 	.word	0x20004b7c
 800cac0:	20004b80 	.word	0x20004b80
 800cac4:	0801c608 	.word	0x0801c608
 800cac8:	20004b84 	.word	0x20004b84
 800cacc:	0801c624 	.word	0x0801c624
 800cad0:	0801c64c 	.word	0x0801c64c
 800cad4:	20004b88 	.word	0x20004b88

0800cad8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b088      	sub	sp, #32
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
 800cae0:	460b      	mov	r3, r1
 800cae2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800cae4:	887b      	ldrh	r3, [r7, #2]
 800cae6:	3303      	adds	r3, #3
 800cae8:	b29b      	uxth	r3, r3
 800caea:	f023 0303 	bic.w	r3, r3, #3
 800caee:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800caf0:	8bfb      	ldrh	r3, [r7, #30]
 800caf2:	2b0b      	cmp	r3, #11
 800caf4:	d801      	bhi.n	800cafa <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800caf6:	230c      	movs	r3, #12
 800caf8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800cafa:	8bfb      	ldrh	r3, [r7, #30]
 800cafc:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800cb00:	d803      	bhi.n	800cb0a <mem_trim+0x32>
 800cb02:	8bfa      	ldrh	r2, [r7, #30]
 800cb04:	887b      	ldrh	r3, [r7, #2]
 800cb06:	429a      	cmp	r2, r3
 800cb08:	d201      	bcs.n	800cb0e <mem_trim+0x36>
    return NULL;
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	e0d8      	b.n	800ccc0 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800cb0e:	4b6e      	ldr	r3, [pc, #440]	; (800ccc8 <mem_trim+0x1f0>)
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	687a      	ldr	r2, [r7, #4]
 800cb14:	429a      	cmp	r2, r3
 800cb16:	d304      	bcc.n	800cb22 <mem_trim+0x4a>
 800cb18:	4b6c      	ldr	r3, [pc, #432]	; (800cccc <mem_trim+0x1f4>)
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	687a      	ldr	r2, [r7, #4]
 800cb1e:	429a      	cmp	r2, r3
 800cb20:	d306      	bcc.n	800cb30 <mem_trim+0x58>
 800cb22:	4b6b      	ldr	r3, [pc, #428]	; (800ccd0 <mem_trim+0x1f8>)
 800cb24:	f240 22d1 	movw	r2, #721	; 0x2d1
 800cb28:	496a      	ldr	r1, [pc, #424]	; (800ccd4 <mem_trim+0x1fc>)
 800cb2a:	486b      	ldr	r0, [pc, #428]	; (800ccd8 <mem_trim+0x200>)
 800cb2c:	f00e faea 	bl	801b104 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800cb30:	4b65      	ldr	r3, [pc, #404]	; (800ccc8 <mem_trim+0x1f0>)
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	687a      	ldr	r2, [r7, #4]
 800cb36:	429a      	cmp	r2, r3
 800cb38:	d304      	bcc.n	800cb44 <mem_trim+0x6c>
 800cb3a:	4b64      	ldr	r3, [pc, #400]	; (800cccc <mem_trim+0x1f4>)
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	687a      	ldr	r2, [r7, #4]
 800cb40:	429a      	cmp	r2, r3
 800cb42:	d307      	bcc.n	800cb54 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800cb44:	f00a fd5c 	bl	8017600 <sys_arch_protect>
 800cb48:	60b8      	str	r0, [r7, #8]
 800cb4a:	68b8      	ldr	r0, [r7, #8]
 800cb4c:	f00a fd66 	bl	801761c <sys_arch_unprotect>
    return rmem;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	e0b5      	b.n	800ccc0 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	3b08      	subs	r3, #8
 800cb58:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800cb5a:	69b8      	ldr	r0, [r7, #24]
 800cb5c:	f7ff fdea 	bl	800c734 <mem_to_ptr>
 800cb60:	4603      	mov	r3, r0
 800cb62:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800cb64:	69bb      	ldr	r3, [r7, #24]
 800cb66:	881a      	ldrh	r2, [r3, #0]
 800cb68:	8afb      	ldrh	r3, [r7, #22]
 800cb6a:	1ad3      	subs	r3, r2, r3
 800cb6c:	b29b      	uxth	r3, r3
 800cb6e:	3b08      	subs	r3, #8
 800cb70:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800cb72:	8bfa      	ldrh	r2, [r7, #30]
 800cb74:	8abb      	ldrh	r3, [r7, #20]
 800cb76:	429a      	cmp	r2, r3
 800cb78:	d906      	bls.n	800cb88 <mem_trim+0xb0>
 800cb7a:	4b55      	ldr	r3, [pc, #340]	; (800ccd0 <mem_trim+0x1f8>)
 800cb7c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800cb80:	4956      	ldr	r1, [pc, #344]	; (800ccdc <mem_trim+0x204>)
 800cb82:	4855      	ldr	r0, [pc, #340]	; (800ccd8 <mem_trim+0x200>)
 800cb84:	f00e fabe 	bl	801b104 <iprintf>
  if (newsize > size) {
 800cb88:	8bfa      	ldrh	r2, [r7, #30]
 800cb8a:	8abb      	ldrh	r3, [r7, #20]
 800cb8c:	429a      	cmp	r2, r3
 800cb8e:	d901      	bls.n	800cb94 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800cb90:	2300      	movs	r3, #0
 800cb92:	e095      	b.n	800ccc0 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800cb94:	8bfa      	ldrh	r2, [r7, #30]
 800cb96:	8abb      	ldrh	r3, [r7, #20]
 800cb98:	429a      	cmp	r2, r3
 800cb9a:	d101      	bne.n	800cba0 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	e08f      	b.n	800ccc0 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800cba0:	484f      	ldr	r0, [pc, #316]	; (800cce0 <mem_trim+0x208>)
 800cba2:	f00a fcf1 	bl	8017588 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800cba6:	69bb      	ldr	r3, [r7, #24]
 800cba8:	881b      	ldrh	r3, [r3, #0]
 800cbaa:	4618      	mov	r0, r3
 800cbac:	f7ff fdb0 	bl	800c710 <ptr_to_mem>
 800cbb0:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800cbb2:	693b      	ldr	r3, [r7, #16]
 800cbb4:	791b      	ldrb	r3, [r3, #4]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d13f      	bne.n	800cc3a <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800cbba:	69bb      	ldr	r3, [r7, #24]
 800cbbc:	881b      	ldrh	r3, [r3, #0]
 800cbbe:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800cbc2:	d106      	bne.n	800cbd2 <mem_trim+0xfa>
 800cbc4:	4b42      	ldr	r3, [pc, #264]	; (800ccd0 <mem_trim+0x1f8>)
 800cbc6:	f240 22f5 	movw	r2, #757	; 0x2f5
 800cbca:	4946      	ldr	r1, [pc, #280]	; (800cce4 <mem_trim+0x20c>)
 800cbcc:	4842      	ldr	r0, [pc, #264]	; (800ccd8 <mem_trim+0x200>)
 800cbce:	f00e fa99 	bl	801b104 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800cbd2:	693b      	ldr	r3, [r7, #16]
 800cbd4:	881b      	ldrh	r3, [r3, #0]
 800cbd6:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800cbd8:	8afa      	ldrh	r2, [r7, #22]
 800cbda:	8bfb      	ldrh	r3, [r7, #30]
 800cbdc:	4413      	add	r3, r2
 800cbde:	b29b      	uxth	r3, r3
 800cbe0:	3308      	adds	r3, #8
 800cbe2:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800cbe4:	4b40      	ldr	r3, [pc, #256]	; (800cce8 <mem_trim+0x210>)
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	693a      	ldr	r2, [r7, #16]
 800cbea:	429a      	cmp	r2, r3
 800cbec:	d106      	bne.n	800cbfc <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800cbee:	89fb      	ldrh	r3, [r7, #14]
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	f7ff fd8d 	bl	800c710 <ptr_to_mem>
 800cbf6:	4603      	mov	r3, r0
 800cbf8:	4a3b      	ldr	r2, [pc, #236]	; (800cce8 <mem_trim+0x210>)
 800cbfa:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800cbfc:	89fb      	ldrh	r3, [r7, #14]
 800cbfe:	4618      	mov	r0, r3
 800cc00:	f7ff fd86 	bl	800c710 <ptr_to_mem>
 800cc04:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800cc06:	693b      	ldr	r3, [r7, #16]
 800cc08:	2200      	movs	r2, #0
 800cc0a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800cc0c:	693b      	ldr	r3, [r7, #16]
 800cc0e:	89ba      	ldrh	r2, [r7, #12]
 800cc10:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800cc12:	693b      	ldr	r3, [r7, #16]
 800cc14:	8afa      	ldrh	r2, [r7, #22]
 800cc16:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800cc18:	69bb      	ldr	r3, [r7, #24]
 800cc1a:	89fa      	ldrh	r2, [r7, #14]
 800cc1c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800cc1e:	693b      	ldr	r3, [r7, #16]
 800cc20:	881b      	ldrh	r3, [r3, #0]
 800cc22:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800cc26:	d047      	beq.n	800ccb8 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800cc28:	693b      	ldr	r3, [r7, #16]
 800cc2a:	881b      	ldrh	r3, [r3, #0]
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	f7ff fd6f 	bl	800c710 <ptr_to_mem>
 800cc32:	4602      	mov	r2, r0
 800cc34:	89fb      	ldrh	r3, [r7, #14]
 800cc36:	8053      	strh	r3, [r2, #2]
 800cc38:	e03e      	b.n	800ccb8 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800cc3a:	8bfb      	ldrh	r3, [r7, #30]
 800cc3c:	f103 0214 	add.w	r2, r3, #20
 800cc40:	8abb      	ldrh	r3, [r7, #20]
 800cc42:	429a      	cmp	r2, r3
 800cc44:	d838      	bhi.n	800ccb8 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800cc46:	8afa      	ldrh	r2, [r7, #22]
 800cc48:	8bfb      	ldrh	r3, [r7, #30]
 800cc4a:	4413      	add	r3, r2
 800cc4c:	b29b      	uxth	r3, r3
 800cc4e:	3308      	adds	r3, #8
 800cc50:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800cc52:	69bb      	ldr	r3, [r7, #24]
 800cc54:	881b      	ldrh	r3, [r3, #0]
 800cc56:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800cc5a:	d106      	bne.n	800cc6a <mem_trim+0x192>
 800cc5c:	4b1c      	ldr	r3, [pc, #112]	; (800ccd0 <mem_trim+0x1f8>)
 800cc5e:	f240 3216 	movw	r2, #790	; 0x316
 800cc62:	4920      	ldr	r1, [pc, #128]	; (800cce4 <mem_trim+0x20c>)
 800cc64:	481c      	ldr	r0, [pc, #112]	; (800ccd8 <mem_trim+0x200>)
 800cc66:	f00e fa4d 	bl	801b104 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800cc6a:	89fb      	ldrh	r3, [r7, #14]
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	f7ff fd4f 	bl	800c710 <ptr_to_mem>
 800cc72:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800cc74:	4b1c      	ldr	r3, [pc, #112]	; (800cce8 <mem_trim+0x210>)
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	693a      	ldr	r2, [r7, #16]
 800cc7a:	429a      	cmp	r2, r3
 800cc7c:	d202      	bcs.n	800cc84 <mem_trim+0x1ac>
      lfree = mem2;
 800cc7e:	4a1a      	ldr	r2, [pc, #104]	; (800cce8 <mem_trim+0x210>)
 800cc80:	693b      	ldr	r3, [r7, #16]
 800cc82:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800cc84:	693b      	ldr	r3, [r7, #16]
 800cc86:	2200      	movs	r2, #0
 800cc88:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800cc8a:	69bb      	ldr	r3, [r7, #24]
 800cc8c:	881a      	ldrh	r2, [r3, #0]
 800cc8e:	693b      	ldr	r3, [r7, #16]
 800cc90:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800cc92:	693b      	ldr	r3, [r7, #16]
 800cc94:	8afa      	ldrh	r2, [r7, #22]
 800cc96:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800cc98:	69bb      	ldr	r3, [r7, #24]
 800cc9a:	89fa      	ldrh	r2, [r7, #14]
 800cc9c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800cc9e:	693b      	ldr	r3, [r7, #16]
 800cca0:	881b      	ldrh	r3, [r3, #0]
 800cca2:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800cca6:	d007      	beq.n	800ccb8 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800cca8:	693b      	ldr	r3, [r7, #16]
 800ccaa:	881b      	ldrh	r3, [r3, #0]
 800ccac:	4618      	mov	r0, r3
 800ccae:	f7ff fd2f 	bl	800c710 <ptr_to_mem>
 800ccb2:	4602      	mov	r2, r0
 800ccb4:	89fb      	ldrh	r3, [r7, #14]
 800ccb6:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800ccb8:	4809      	ldr	r0, [pc, #36]	; (800cce0 <mem_trim+0x208>)
 800ccba:	f00a fc74 	bl	80175a6 <sys_mutex_unlock>
  return rmem;
 800ccbe:	687b      	ldr	r3, [r7, #4]
}
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	3720      	adds	r7, #32
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	bd80      	pop	{r7, pc}
 800ccc8:	20004b7c 	.word	0x20004b7c
 800cccc:	20004b80 	.word	0x20004b80
 800ccd0:	0801c4f4 	.word	0x0801c4f4
 800ccd4:	0801c680 	.word	0x0801c680
 800ccd8:	0801c53c 	.word	0x0801c53c
 800ccdc:	0801c698 	.word	0x0801c698
 800cce0:	20004b84 	.word	0x20004b84
 800cce4:	0801c6b8 	.word	0x0801c6b8
 800cce8:	20004b88 	.word	0x20004b88

0800ccec <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b088      	sub	sp, #32
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800ccf6:	88fb      	ldrh	r3, [r7, #6]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d101      	bne.n	800cd00 <mem_malloc+0x14>
    return NULL;
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	e0e2      	b.n	800cec6 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800cd00:	88fb      	ldrh	r3, [r7, #6]
 800cd02:	3303      	adds	r3, #3
 800cd04:	b29b      	uxth	r3, r3
 800cd06:	f023 0303 	bic.w	r3, r3, #3
 800cd0a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800cd0c:	8bbb      	ldrh	r3, [r7, #28]
 800cd0e:	2b0b      	cmp	r3, #11
 800cd10:	d801      	bhi.n	800cd16 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800cd12:	230c      	movs	r3, #12
 800cd14:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800cd16:	8bbb      	ldrh	r3, [r7, #28]
 800cd18:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800cd1c:	d803      	bhi.n	800cd26 <mem_malloc+0x3a>
 800cd1e:	8bba      	ldrh	r2, [r7, #28]
 800cd20:	88fb      	ldrh	r3, [r7, #6]
 800cd22:	429a      	cmp	r2, r3
 800cd24:	d201      	bcs.n	800cd2a <mem_malloc+0x3e>
    return NULL;
 800cd26:	2300      	movs	r3, #0
 800cd28:	e0cd      	b.n	800cec6 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800cd2a:	4869      	ldr	r0, [pc, #420]	; (800ced0 <mem_malloc+0x1e4>)
 800cd2c:	f00a fc2c 	bl	8017588 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800cd30:	4b68      	ldr	r3, [pc, #416]	; (800ced4 <mem_malloc+0x1e8>)
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	4618      	mov	r0, r3
 800cd36:	f7ff fcfd 	bl	800c734 <mem_to_ptr>
 800cd3a:	4603      	mov	r3, r0
 800cd3c:	83fb      	strh	r3, [r7, #30]
 800cd3e:	e0b7      	b.n	800ceb0 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800cd40:	8bfb      	ldrh	r3, [r7, #30]
 800cd42:	4618      	mov	r0, r3
 800cd44:	f7ff fce4 	bl	800c710 <ptr_to_mem>
 800cd48:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800cd4a:	697b      	ldr	r3, [r7, #20]
 800cd4c:	791b      	ldrb	r3, [r3, #4]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	f040 80a7 	bne.w	800cea2 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800cd54:	697b      	ldr	r3, [r7, #20]
 800cd56:	881b      	ldrh	r3, [r3, #0]
 800cd58:	461a      	mov	r2, r3
 800cd5a:	8bfb      	ldrh	r3, [r7, #30]
 800cd5c:	1ad3      	subs	r3, r2, r3
 800cd5e:	f1a3 0208 	sub.w	r2, r3, #8
 800cd62:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800cd64:	429a      	cmp	r2, r3
 800cd66:	f0c0 809c 	bcc.w	800cea2 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800cd6a:	697b      	ldr	r3, [r7, #20]
 800cd6c:	881b      	ldrh	r3, [r3, #0]
 800cd6e:	461a      	mov	r2, r3
 800cd70:	8bfb      	ldrh	r3, [r7, #30]
 800cd72:	1ad3      	subs	r3, r2, r3
 800cd74:	f1a3 0208 	sub.w	r2, r3, #8
 800cd78:	8bbb      	ldrh	r3, [r7, #28]
 800cd7a:	3314      	adds	r3, #20
 800cd7c:	429a      	cmp	r2, r3
 800cd7e:	d333      	bcc.n	800cde8 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800cd80:	8bfa      	ldrh	r2, [r7, #30]
 800cd82:	8bbb      	ldrh	r3, [r7, #28]
 800cd84:	4413      	add	r3, r2
 800cd86:	b29b      	uxth	r3, r3
 800cd88:	3308      	adds	r3, #8
 800cd8a:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800cd8c:	8a7b      	ldrh	r3, [r7, #18]
 800cd8e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800cd92:	d106      	bne.n	800cda2 <mem_malloc+0xb6>
 800cd94:	4b50      	ldr	r3, [pc, #320]	; (800ced8 <mem_malloc+0x1ec>)
 800cd96:	f240 3287 	movw	r2, #903	; 0x387
 800cd9a:	4950      	ldr	r1, [pc, #320]	; (800cedc <mem_malloc+0x1f0>)
 800cd9c:	4850      	ldr	r0, [pc, #320]	; (800cee0 <mem_malloc+0x1f4>)
 800cd9e:	f00e f9b1 	bl	801b104 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800cda2:	8a7b      	ldrh	r3, [r7, #18]
 800cda4:	4618      	mov	r0, r3
 800cda6:	f7ff fcb3 	bl	800c710 <ptr_to_mem>
 800cdaa:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	2200      	movs	r2, #0
 800cdb0:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800cdb2:	697b      	ldr	r3, [r7, #20]
 800cdb4:	881a      	ldrh	r2, [r3, #0]
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	8bfa      	ldrh	r2, [r7, #30]
 800cdbe:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800cdc0:	697b      	ldr	r3, [r7, #20]
 800cdc2:	8a7a      	ldrh	r2, [r7, #18]
 800cdc4:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800cdc6:	697b      	ldr	r3, [r7, #20]
 800cdc8:	2201      	movs	r2, #1
 800cdca:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	881b      	ldrh	r3, [r3, #0]
 800cdd0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800cdd4:	d00b      	beq.n	800cdee <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	881b      	ldrh	r3, [r3, #0]
 800cdda:	4618      	mov	r0, r3
 800cddc:	f7ff fc98 	bl	800c710 <ptr_to_mem>
 800cde0:	4602      	mov	r2, r0
 800cde2:	8a7b      	ldrh	r3, [r7, #18]
 800cde4:	8053      	strh	r3, [r2, #2]
 800cde6:	e002      	b.n	800cdee <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800cde8:	697b      	ldr	r3, [r7, #20]
 800cdea:	2201      	movs	r2, #1
 800cdec:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800cdee:	4b39      	ldr	r3, [pc, #228]	; (800ced4 <mem_malloc+0x1e8>)
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	697a      	ldr	r2, [r7, #20]
 800cdf4:	429a      	cmp	r2, r3
 800cdf6:	d127      	bne.n	800ce48 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800cdf8:	4b36      	ldr	r3, [pc, #216]	; (800ced4 <mem_malloc+0x1e8>)
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800cdfe:	e005      	b.n	800ce0c <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800ce00:	69bb      	ldr	r3, [r7, #24]
 800ce02:	881b      	ldrh	r3, [r3, #0]
 800ce04:	4618      	mov	r0, r3
 800ce06:	f7ff fc83 	bl	800c710 <ptr_to_mem>
 800ce0a:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800ce0c:	69bb      	ldr	r3, [r7, #24]
 800ce0e:	791b      	ldrb	r3, [r3, #4]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d004      	beq.n	800ce1e <mem_malloc+0x132>
 800ce14:	4b33      	ldr	r3, [pc, #204]	; (800cee4 <mem_malloc+0x1f8>)
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	69ba      	ldr	r2, [r7, #24]
 800ce1a:	429a      	cmp	r2, r3
 800ce1c:	d1f0      	bne.n	800ce00 <mem_malloc+0x114>
          }
          lfree = cur;
 800ce1e:	4a2d      	ldr	r2, [pc, #180]	; (800ced4 <mem_malloc+0x1e8>)
 800ce20:	69bb      	ldr	r3, [r7, #24]
 800ce22:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800ce24:	4b2b      	ldr	r3, [pc, #172]	; (800ced4 <mem_malloc+0x1e8>)
 800ce26:	681a      	ldr	r2, [r3, #0]
 800ce28:	4b2e      	ldr	r3, [pc, #184]	; (800cee4 <mem_malloc+0x1f8>)
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	429a      	cmp	r2, r3
 800ce2e:	d00b      	beq.n	800ce48 <mem_malloc+0x15c>
 800ce30:	4b28      	ldr	r3, [pc, #160]	; (800ced4 <mem_malloc+0x1e8>)
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	791b      	ldrb	r3, [r3, #4]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d006      	beq.n	800ce48 <mem_malloc+0x15c>
 800ce3a:	4b27      	ldr	r3, [pc, #156]	; (800ced8 <mem_malloc+0x1ec>)
 800ce3c:	f240 32b5 	movw	r2, #949	; 0x3b5
 800ce40:	4929      	ldr	r1, [pc, #164]	; (800cee8 <mem_malloc+0x1fc>)
 800ce42:	4827      	ldr	r0, [pc, #156]	; (800cee0 <mem_malloc+0x1f4>)
 800ce44:	f00e f95e 	bl	801b104 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800ce48:	4821      	ldr	r0, [pc, #132]	; (800ced0 <mem_malloc+0x1e4>)
 800ce4a:	f00a fbac 	bl	80175a6 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800ce4e:	8bba      	ldrh	r2, [r7, #28]
 800ce50:	697b      	ldr	r3, [r7, #20]
 800ce52:	4413      	add	r3, r2
 800ce54:	3308      	adds	r3, #8
 800ce56:	4a23      	ldr	r2, [pc, #140]	; (800cee4 <mem_malloc+0x1f8>)
 800ce58:	6812      	ldr	r2, [r2, #0]
 800ce5a:	4293      	cmp	r3, r2
 800ce5c:	d906      	bls.n	800ce6c <mem_malloc+0x180>
 800ce5e:	4b1e      	ldr	r3, [pc, #120]	; (800ced8 <mem_malloc+0x1ec>)
 800ce60:	f240 32b9 	movw	r2, #953	; 0x3b9
 800ce64:	4921      	ldr	r1, [pc, #132]	; (800ceec <mem_malloc+0x200>)
 800ce66:	481e      	ldr	r0, [pc, #120]	; (800cee0 <mem_malloc+0x1f4>)
 800ce68:	f00e f94c 	bl	801b104 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800ce6c:	697b      	ldr	r3, [r7, #20]
 800ce6e:	f003 0303 	and.w	r3, r3, #3
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d006      	beq.n	800ce84 <mem_malloc+0x198>
 800ce76:	4b18      	ldr	r3, [pc, #96]	; (800ced8 <mem_malloc+0x1ec>)
 800ce78:	f240 32bb 	movw	r2, #955	; 0x3bb
 800ce7c:	491c      	ldr	r1, [pc, #112]	; (800cef0 <mem_malloc+0x204>)
 800ce7e:	4818      	ldr	r0, [pc, #96]	; (800cee0 <mem_malloc+0x1f4>)
 800ce80:	f00e f940 	bl	801b104 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800ce84:	697b      	ldr	r3, [r7, #20]
 800ce86:	f003 0303 	and.w	r3, r3, #3
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d006      	beq.n	800ce9c <mem_malloc+0x1b0>
 800ce8e:	4b12      	ldr	r3, [pc, #72]	; (800ced8 <mem_malloc+0x1ec>)
 800ce90:	f240 32bd 	movw	r2, #957	; 0x3bd
 800ce94:	4917      	ldr	r1, [pc, #92]	; (800cef4 <mem_malloc+0x208>)
 800ce96:	4812      	ldr	r0, [pc, #72]	; (800cee0 <mem_malloc+0x1f4>)
 800ce98:	f00e f934 	bl	801b104 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800ce9c:	697b      	ldr	r3, [r7, #20]
 800ce9e:	3308      	adds	r3, #8
 800cea0:	e011      	b.n	800cec6 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800cea2:	8bfb      	ldrh	r3, [r7, #30]
 800cea4:	4618      	mov	r0, r3
 800cea6:	f7ff fc33 	bl	800c710 <ptr_to_mem>
 800ceaa:	4603      	mov	r3, r0
 800ceac:	881b      	ldrh	r3, [r3, #0]
 800ceae:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800ceb0:	8bfa      	ldrh	r2, [r7, #30]
 800ceb2:	8bbb      	ldrh	r3, [r7, #28]
 800ceb4:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 800ceb8:	429a      	cmp	r2, r3
 800ceba:	f4ff af41 	bcc.w	800cd40 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800cebe:	4804      	ldr	r0, [pc, #16]	; (800ced0 <mem_malloc+0x1e4>)
 800cec0:	f00a fb71 	bl	80175a6 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800cec4:	2300      	movs	r3, #0
}
 800cec6:	4618      	mov	r0, r3
 800cec8:	3720      	adds	r7, #32
 800ceca:	46bd      	mov	sp, r7
 800cecc:	bd80      	pop	{r7, pc}
 800cece:	bf00      	nop
 800ced0:	20004b84 	.word	0x20004b84
 800ced4:	20004b88 	.word	0x20004b88
 800ced8:	0801c4f4 	.word	0x0801c4f4
 800cedc:	0801c6b8 	.word	0x0801c6b8
 800cee0:	0801c53c 	.word	0x0801c53c
 800cee4:	20004b80 	.word	0x20004b80
 800cee8:	0801c6cc 	.word	0x0801c6cc
 800ceec:	0801c6e8 	.word	0x0801c6e8
 800cef0:	0801c718 	.word	0x0801c718
 800cef4:	0801c748 	.word	0x0801c748

0800cef8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800cef8:	b480      	push	{r7}
 800cefa:	b085      	sub	sp, #20
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	689b      	ldr	r3, [r3, #8]
 800cf04:	2200      	movs	r2, #0
 800cf06:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	685b      	ldr	r3, [r3, #4]
 800cf0c:	3303      	adds	r3, #3
 800cf0e:	f023 0303 	bic.w	r3, r3, #3
 800cf12:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800cf14:	2300      	movs	r3, #0
 800cf16:	60fb      	str	r3, [r7, #12]
 800cf18:	e011      	b.n	800cf3e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	689b      	ldr	r3, [r3, #8]
 800cf1e:	681a      	ldr	r2, [r3, #0]
 800cf20:	68bb      	ldr	r3, [r7, #8]
 800cf22:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	689b      	ldr	r3, [r3, #8]
 800cf28:	68ba      	ldr	r2, [r7, #8]
 800cf2a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	881b      	ldrh	r3, [r3, #0]
 800cf30:	461a      	mov	r2, r3
 800cf32:	68bb      	ldr	r3, [r7, #8]
 800cf34:	4413      	add	r3, r2
 800cf36:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	3301      	adds	r3, #1
 800cf3c:	60fb      	str	r3, [r7, #12]
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	885b      	ldrh	r3, [r3, #2]
 800cf42:	461a      	mov	r2, r3
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	4293      	cmp	r3, r2
 800cf48:	dbe7      	blt.n	800cf1a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800cf4a:	bf00      	nop
 800cf4c:	bf00      	nop
 800cf4e:	3714      	adds	r7, #20
 800cf50:	46bd      	mov	sp, r7
 800cf52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf56:	4770      	bx	lr

0800cf58 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b082      	sub	sp, #8
 800cf5c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800cf5e:	2300      	movs	r3, #0
 800cf60:	80fb      	strh	r3, [r7, #6]
 800cf62:	e009      	b.n	800cf78 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800cf64:	88fb      	ldrh	r3, [r7, #6]
 800cf66:	4a08      	ldr	r2, [pc, #32]	; (800cf88 <memp_init+0x30>)
 800cf68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	f7ff ffc3 	bl	800cef8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800cf72:	88fb      	ldrh	r3, [r7, #6]
 800cf74:	3301      	adds	r3, #1
 800cf76:	80fb      	strh	r3, [r7, #6]
 800cf78:	88fb      	ldrh	r3, [r7, #6]
 800cf7a:	2b0c      	cmp	r3, #12
 800cf7c:	d9f2      	bls.n	800cf64 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800cf7e:	bf00      	nop
 800cf80:	bf00      	nop
 800cf82:	3708      	adds	r7, #8
 800cf84:	46bd      	mov	sp, r7
 800cf86:	bd80      	pop	{r7, pc}
 800cf88:	0801f0e0 	.word	0x0801f0e0

0800cf8c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b084      	sub	sp, #16
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800cf94:	f00a fb34 	bl	8017600 <sys_arch_protect>
 800cf98:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	689b      	ldr	r3, [r3, #8]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800cfa2:	68bb      	ldr	r3, [r7, #8]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d015      	beq.n	800cfd4 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	689b      	ldr	r3, [r3, #8]
 800cfac:	68ba      	ldr	r2, [r7, #8]
 800cfae:	6812      	ldr	r2, [r2, #0]
 800cfb0:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800cfb2:	68bb      	ldr	r3, [r7, #8]
 800cfb4:	f003 0303 	and.w	r3, r3, #3
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d006      	beq.n	800cfca <do_memp_malloc_pool+0x3e>
 800cfbc:	4b09      	ldr	r3, [pc, #36]	; (800cfe4 <do_memp_malloc_pool+0x58>)
 800cfbe:	f44f 728c 	mov.w	r2, #280	; 0x118
 800cfc2:	4909      	ldr	r1, [pc, #36]	; (800cfe8 <do_memp_malloc_pool+0x5c>)
 800cfc4:	4809      	ldr	r0, [pc, #36]	; (800cfec <do_memp_malloc_pool+0x60>)
 800cfc6:	f00e f89d 	bl	801b104 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800cfca:	68f8      	ldr	r0, [r7, #12]
 800cfcc:	f00a fb26 	bl	801761c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800cfd0:	68bb      	ldr	r3, [r7, #8]
 800cfd2:	e003      	b.n	800cfdc <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800cfd4:	68f8      	ldr	r0, [r7, #12]
 800cfd6:	f00a fb21 	bl	801761c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800cfda:	2300      	movs	r3, #0
}
 800cfdc:	4618      	mov	r0, r3
 800cfde:	3710      	adds	r7, #16
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	bd80      	pop	{r7, pc}
 800cfe4:	0801c76c 	.word	0x0801c76c
 800cfe8:	0801c79c 	.word	0x0801c79c
 800cfec:	0801c7c0 	.word	0x0801c7c0

0800cff0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b084      	sub	sp, #16
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	4603      	mov	r3, r0
 800cff8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800cffa:	79fb      	ldrb	r3, [r7, #7]
 800cffc:	2b0c      	cmp	r3, #12
 800cffe:	d908      	bls.n	800d012 <memp_malloc+0x22>
 800d000:	4b0a      	ldr	r3, [pc, #40]	; (800d02c <memp_malloc+0x3c>)
 800d002:	f240 1257 	movw	r2, #343	; 0x157
 800d006:	490a      	ldr	r1, [pc, #40]	; (800d030 <memp_malloc+0x40>)
 800d008:	480a      	ldr	r0, [pc, #40]	; (800d034 <memp_malloc+0x44>)
 800d00a:	f00e f87b 	bl	801b104 <iprintf>
 800d00e:	2300      	movs	r3, #0
 800d010:	e008      	b.n	800d024 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800d012:	79fb      	ldrb	r3, [r7, #7]
 800d014:	4a08      	ldr	r2, [pc, #32]	; (800d038 <memp_malloc+0x48>)
 800d016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d01a:	4618      	mov	r0, r3
 800d01c:	f7ff ffb6 	bl	800cf8c <do_memp_malloc_pool>
 800d020:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800d022:	68fb      	ldr	r3, [r7, #12]
}
 800d024:	4618      	mov	r0, r3
 800d026:	3710      	adds	r7, #16
 800d028:	46bd      	mov	sp, r7
 800d02a:	bd80      	pop	{r7, pc}
 800d02c:	0801c76c 	.word	0x0801c76c
 800d030:	0801c7fc 	.word	0x0801c7fc
 800d034:	0801c7c0 	.word	0x0801c7c0
 800d038:	0801f0e0 	.word	0x0801f0e0

0800d03c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b084      	sub	sp, #16
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
 800d044:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800d046:	683b      	ldr	r3, [r7, #0]
 800d048:	f003 0303 	and.w	r3, r3, #3
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d006      	beq.n	800d05e <do_memp_free_pool+0x22>
 800d050:	4b0d      	ldr	r3, [pc, #52]	; (800d088 <do_memp_free_pool+0x4c>)
 800d052:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800d056:	490d      	ldr	r1, [pc, #52]	; (800d08c <do_memp_free_pool+0x50>)
 800d058:	480d      	ldr	r0, [pc, #52]	; (800d090 <do_memp_free_pool+0x54>)
 800d05a:	f00e f853 	bl	801b104 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800d05e:	683b      	ldr	r3, [r7, #0]
 800d060:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800d062:	f00a facd 	bl	8017600 <sys_arch_protect>
 800d066:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	689b      	ldr	r3, [r3, #8]
 800d06c:	681a      	ldr	r2, [r3, #0]
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	689b      	ldr	r3, [r3, #8]
 800d076:	68fa      	ldr	r2, [r7, #12]
 800d078:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800d07a:	68b8      	ldr	r0, [r7, #8]
 800d07c:	f00a face 	bl	801761c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800d080:	bf00      	nop
 800d082:	3710      	adds	r7, #16
 800d084:	46bd      	mov	sp, r7
 800d086:	bd80      	pop	{r7, pc}
 800d088:	0801c76c 	.word	0x0801c76c
 800d08c:	0801c81c 	.word	0x0801c81c
 800d090:	0801c7c0 	.word	0x0801c7c0

0800d094 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b082      	sub	sp, #8
 800d098:	af00      	add	r7, sp, #0
 800d09a:	4603      	mov	r3, r0
 800d09c:	6039      	str	r1, [r7, #0]
 800d09e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800d0a0:	79fb      	ldrb	r3, [r7, #7]
 800d0a2:	2b0c      	cmp	r3, #12
 800d0a4:	d907      	bls.n	800d0b6 <memp_free+0x22>
 800d0a6:	4b0c      	ldr	r3, [pc, #48]	; (800d0d8 <memp_free+0x44>)
 800d0a8:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800d0ac:	490b      	ldr	r1, [pc, #44]	; (800d0dc <memp_free+0x48>)
 800d0ae:	480c      	ldr	r0, [pc, #48]	; (800d0e0 <memp_free+0x4c>)
 800d0b0:	f00e f828 	bl	801b104 <iprintf>
 800d0b4:	e00c      	b.n	800d0d0 <memp_free+0x3c>

  if (mem == NULL) {
 800d0b6:	683b      	ldr	r3, [r7, #0]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d008      	beq.n	800d0ce <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800d0bc:	79fb      	ldrb	r3, [r7, #7]
 800d0be:	4a09      	ldr	r2, [pc, #36]	; (800d0e4 <memp_free+0x50>)
 800d0c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d0c4:	6839      	ldr	r1, [r7, #0]
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	f7ff ffb8 	bl	800d03c <do_memp_free_pool>
 800d0cc:	e000      	b.n	800d0d0 <memp_free+0x3c>
    return;
 800d0ce:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800d0d0:	3708      	adds	r7, #8
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bd80      	pop	{r7, pc}
 800d0d6:	bf00      	nop
 800d0d8:	0801c76c 	.word	0x0801c76c
 800d0dc:	0801c83c 	.word	0x0801c83c
 800d0e0:	0801c7c0 	.word	0x0801c7c0
 800d0e4:	0801f0e0 	.word	0x0801f0e0

0800d0e8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800d0e8:	b480      	push	{r7}
 800d0ea:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800d0ec:	bf00      	nop
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f4:	4770      	bx	lr
	...

0800d0f8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b086      	sub	sp, #24
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	60f8      	str	r0, [r7, #12]
 800d100:	60b9      	str	r1, [r7, #8]
 800d102:	607a      	str	r2, [r7, #4]
 800d104:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d108      	bne.n	800d11e <netif_add+0x26>
 800d10c:	4b57      	ldr	r3, [pc, #348]	; (800d26c <netif_add+0x174>)
 800d10e:	f240 1227 	movw	r2, #295	; 0x127
 800d112:	4957      	ldr	r1, [pc, #348]	; (800d270 <netif_add+0x178>)
 800d114:	4857      	ldr	r0, [pc, #348]	; (800d274 <netif_add+0x17c>)
 800d116:	f00d fff5 	bl	801b104 <iprintf>
 800d11a:	2300      	movs	r3, #0
 800d11c:	e0a2      	b.n	800d264 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800d11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d120:	2b00      	cmp	r3, #0
 800d122:	d108      	bne.n	800d136 <netif_add+0x3e>
 800d124:	4b51      	ldr	r3, [pc, #324]	; (800d26c <netif_add+0x174>)
 800d126:	f44f 7294 	mov.w	r2, #296	; 0x128
 800d12a:	4953      	ldr	r1, [pc, #332]	; (800d278 <netif_add+0x180>)
 800d12c:	4851      	ldr	r0, [pc, #324]	; (800d274 <netif_add+0x17c>)
 800d12e:	f00d ffe9 	bl	801b104 <iprintf>
 800d132:	2300      	movs	r3, #0
 800d134:	e096      	b.n	800d264 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800d136:	68bb      	ldr	r3, [r7, #8]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d101      	bne.n	800d140 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800d13c:	4b4f      	ldr	r3, [pc, #316]	; (800d27c <netif_add+0x184>)
 800d13e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d101      	bne.n	800d14a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800d146:	4b4d      	ldr	r3, [pc, #308]	; (800d27c <netif_add+0x184>)
 800d148:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d14a:	683b      	ldr	r3, [r7, #0]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d101      	bne.n	800d154 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800d150:	4b4a      	ldr	r3, [pc, #296]	; (800d27c <netif_add+0x184>)
 800d152:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	2200      	movs	r2, #0
 800d158:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	2200      	movs	r2, #0
 800d15e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	2200      	movs	r2, #0
 800d164:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	4a45      	ldr	r2, [pc, #276]	; (800d280 <netif_add+0x188>)
 800d16a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	2200      	movs	r2, #0
 800d170:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	2200      	movs	r2, #0
 800d176:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	2200      	movs	r2, #0
 800d17e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	6a3a      	ldr	r2, [r7, #32]
 800d184:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800d186:	4b3f      	ldr	r3, [pc, #252]	; (800d284 <netif_add+0x18c>)
 800d188:	781a      	ldrb	r2, [r3, #0]
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d194:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800d196:	683b      	ldr	r3, [r7, #0]
 800d198:	687a      	ldr	r2, [r7, #4]
 800d19a:	68b9      	ldr	r1, [r7, #8]
 800d19c:	68f8      	ldr	r0, [r7, #12]
 800d19e:	f000 f913 	bl	800d3c8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800d1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1a4:	68f8      	ldr	r0, [r7, #12]
 800d1a6:	4798      	blx	r3
 800d1a8:	4603      	mov	r3, r0
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d001      	beq.n	800d1b2 <netif_add+0xba>
    return NULL;
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	e058      	b.n	800d264 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d1b8:	2bff      	cmp	r3, #255	; 0xff
 800d1ba:	d103      	bne.n	800d1c4 <netif_add+0xcc>
        netif->num = 0;
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	2200      	movs	r2, #0
 800d1c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d1c8:	4b2f      	ldr	r3, [pc, #188]	; (800d288 <netif_add+0x190>)
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	617b      	str	r3, [r7, #20]
 800d1ce:	e02b      	b.n	800d228 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800d1d0:	697a      	ldr	r2, [r7, #20]
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	429a      	cmp	r2, r3
 800d1d6:	d106      	bne.n	800d1e6 <netif_add+0xee>
 800d1d8:	4b24      	ldr	r3, [pc, #144]	; (800d26c <netif_add+0x174>)
 800d1da:	f240 128b 	movw	r2, #395	; 0x18b
 800d1de:	492b      	ldr	r1, [pc, #172]	; (800d28c <netif_add+0x194>)
 800d1e0:	4824      	ldr	r0, [pc, #144]	; (800d274 <netif_add+0x17c>)
 800d1e2:	f00d ff8f 	bl	801b104 <iprintf>
        num_netifs++;
 800d1e6:	693b      	ldr	r3, [r7, #16]
 800d1e8:	3301      	adds	r3, #1
 800d1ea:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800d1ec:	693b      	ldr	r3, [r7, #16]
 800d1ee:	2bff      	cmp	r3, #255	; 0xff
 800d1f0:	dd06      	ble.n	800d200 <netif_add+0x108>
 800d1f2:	4b1e      	ldr	r3, [pc, #120]	; (800d26c <netif_add+0x174>)
 800d1f4:	f240 128d 	movw	r2, #397	; 0x18d
 800d1f8:	4925      	ldr	r1, [pc, #148]	; (800d290 <netif_add+0x198>)
 800d1fa:	481e      	ldr	r0, [pc, #120]	; (800d274 <netif_add+0x17c>)
 800d1fc:	f00d ff82 	bl	801b104 <iprintf>
        if (netif2->num == netif->num) {
 800d200:	697b      	ldr	r3, [r7, #20]
 800d202:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d20c:	429a      	cmp	r2, r3
 800d20e:	d108      	bne.n	800d222 <netif_add+0x12a>
          netif->num++;
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d216:	3301      	adds	r3, #1
 800d218:	b2da      	uxtb	r2, r3
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800d220:	e005      	b.n	800d22e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d222:	697b      	ldr	r3, [r7, #20]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	617b      	str	r3, [r7, #20]
 800d228:	697b      	ldr	r3, [r7, #20]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d1d0      	bne.n	800d1d0 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800d22e:	697b      	ldr	r3, [r7, #20]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d1be      	bne.n	800d1b2 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d23a:	2bfe      	cmp	r3, #254	; 0xfe
 800d23c:	d103      	bne.n	800d246 <netif_add+0x14e>
    netif_num = 0;
 800d23e:	4b11      	ldr	r3, [pc, #68]	; (800d284 <netif_add+0x18c>)
 800d240:	2200      	movs	r2, #0
 800d242:	701a      	strb	r2, [r3, #0]
 800d244:	e006      	b.n	800d254 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d24c:	3301      	adds	r3, #1
 800d24e:	b2da      	uxtb	r2, r3
 800d250:	4b0c      	ldr	r3, [pc, #48]	; (800d284 <netif_add+0x18c>)
 800d252:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800d254:	4b0c      	ldr	r3, [pc, #48]	; (800d288 <netif_add+0x190>)
 800d256:	681a      	ldr	r2, [r3, #0]
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800d25c:	4a0a      	ldr	r2, [pc, #40]	; (800d288 <netif_add+0x190>)
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800d262:	68fb      	ldr	r3, [r7, #12]
}
 800d264:	4618      	mov	r0, r3
 800d266:	3718      	adds	r7, #24
 800d268:	46bd      	mov	sp, r7
 800d26a:	bd80      	pop	{r7, pc}
 800d26c:	0801c858 	.word	0x0801c858
 800d270:	0801c8ec 	.word	0x0801c8ec
 800d274:	0801c8a8 	.word	0x0801c8a8
 800d278:	0801c908 	.word	0x0801c908
 800d27c:	0801f154 	.word	0x0801f154
 800d280:	0800d6a3 	.word	0x0800d6a3
 800d284:	20004bc0 	.word	0x20004bc0
 800d288:	2000db0c 	.word	0x2000db0c
 800d28c:	0801c92c 	.word	0x0801c92c
 800d290:	0801c940 	.word	0x0801c940

0800d294 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d294:	b580      	push	{r7, lr}
 800d296:	b082      	sub	sp, #8
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
 800d29c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800d29e:	6839      	ldr	r1, [r7, #0]
 800d2a0:	6878      	ldr	r0, [r7, #4]
 800d2a2:	f002 fe05 	bl	800feb0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800d2a6:	6839      	ldr	r1, [r7, #0]
 800d2a8:	6878      	ldr	r0, [r7, #4]
 800d2aa:	f007 fd21 	bl	8014cf0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800d2ae:	bf00      	nop
 800d2b0:	3708      	adds	r7, #8
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	bd80      	pop	{r7, pc}
	...

0800d2b8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	b086      	sub	sp, #24
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	60f8      	str	r0, [r7, #12]
 800d2c0:	60b9      	str	r1, [r7, #8]
 800d2c2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800d2c4:	68bb      	ldr	r3, [r7, #8]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d106      	bne.n	800d2d8 <netif_do_set_ipaddr+0x20>
 800d2ca:	4b1d      	ldr	r3, [pc, #116]	; (800d340 <netif_do_set_ipaddr+0x88>)
 800d2cc:	f240 12cb 	movw	r2, #459	; 0x1cb
 800d2d0:	491c      	ldr	r1, [pc, #112]	; (800d344 <netif_do_set_ipaddr+0x8c>)
 800d2d2:	481d      	ldr	r0, [pc, #116]	; (800d348 <netif_do_set_ipaddr+0x90>)
 800d2d4:	f00d ff16 	bl	801b104 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d106      	bne.n	800d2ec <netif_do_set_ipaddr+0x34>
 800d2de:	4b18      	ldr	r3, [pc, #96]	; (800d340 <netif_do_set_ipaddr+0x88>)
 800d2e0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800d2e4:	4917      	ldr	r1, [pc, #92]	; (800d344 <netif_do_set_ipaddr+0x8c>)
 800d2e6:	4818      	ldr	r0, [pc, #96]	; (800d348 <netif_do_set_ipaddr+0x90>)
 800d2e8:	f00d ff0c 	bl	801b104 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800d2ec:	68bb      	ldr	r3, [r7, #8]
 800d2ee:	681a      	ldr	r2, [r3, #0]
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	3304      	adds	r3, #4
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	429a      	cmp	r2, r3
 800d2f8:	d01c      	beq.n	800d334 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800d2fa:	68bb      	ldr	r3, [r7, #8]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	3304      	adds	r3, #4
 800d304:	681a      	ldr	r2, [r3, #0]
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800d30a:	f107 0314 	add.w	r3, r7, #20
 800d30e:	4619      	mov	r1, r3
 800d310:	6878      	ldr	r0, [r7, #4]
 800d312:	f7ff ffbf 	bl	800d294 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800d316:	68bb      	ldr	r3, [r7, #8]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d002      	beq.n	800d322 <netif_do_set_ipaddr+0x6a>
 800d31c:	68bb      	ldr	r3, [r7, #8]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	e000      	b.n	800d324 <netif_do_set_ipaddr+0x6c>
 800d322:	2300      	movs	r3, #0
 800d324:	68fa      	ldr	r2, [r7, #12]
 800d326:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800d328:	2101      	movs	r1, #1
 800d32a:	68f8      	ldr	r0, [r7, #12]
 800d32c:	f000 f8d2 	bl	800d4d4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800d330:	2301      	movs	r3, #1
 800d332:	e000      	b.n	800d336 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800d334:	2300      	movs	r3, #0
}
 800d336:	4618      	mov	r0, r3
 800d338:	3718      	adds	r7, #24
 800d33a:	46bd      	mov	sp, r7
 800d33c:	bd80      	pop	{r7, pc}
 800d33e:	bf00      	nop
 800d340:	0801c858 	.word	0x0801c858
 800d344:	0801c970 	.word	0x0801c970
 800d348:	0801c8a8 	.word	0x0801c8a8

0800d34c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800d34c:	b480      	push	{r7}
 800d34e:	b085      	sub	sp, #20
 800d350:	af00      	add	r7, sp, #0
 800d352:	60f8      	str	r0, [r7, #12]
 800d354:	60b9      	str	r1, [r7, #8]
 800d356:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800d358:	68bb      	ldr	r3, [r7, #8]
 800d35a:	681a      	ldr	r2, [r3, #0]
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	3308      	adds	r3, #8
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	429a      	cmp	r2, r3
 800d364:	d00a      	beq.n	800d37c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800d366:	68bb      	ldr	r3, [r7, #8]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d002      	beq.n	800d372 <netif_do_set_netmask+0x26>
 800d36c:	68bb      	ldr	r3, [r7, #8]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	e000      	b.n	800d374 <netif_do_set_netmask+0x28>
 800d372:	2300      	movs	r3, #0
 800d374:	68fa      	ldr	r2, [r7, #12]
 800d376:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800d378:	2301      	movs	r3, #1
 800d37a:	e000      	b.n	800d37e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800d37c:	2300      	movs	r3, #0
}
 800d37e:	4618      	mov	r0, r3
 800d380:	3714      	adds	r7, #20
 800d382:	46bd      	mov	sp, r7
 800d384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d388:	4770      	bx	lr

0800d38a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800d38a:	b480      	push	{r7}
 800d38c:	b085      	sub	sp, #20
 800d38e:	af00      	add	r7, sp, #0
 800d390:	60f8      	str	r0, [r7, #12]
 800d392:	60b9      	str	r1, [r7, #8]
 800d394:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800d396:	68bb      	ldr	r3, [r7, #8]
 800d398:	681a      	ldr	r2, [r3, #0]
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	330c      	adds	r3, #12
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	429a      	cmp	r2, r3
 800d3a2:	d00a      	beq.n	800d3ba <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800d3a4:	68bb      	ldr	r3, [r7, #8]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d002      	beq.n	800d3b0 <netif_do_set_gw+0x26>
 800d3aa:	68bb      	ldr	r3, [r7, #8]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	e000      	b.n	800d3b2 <netif_do_set_gw+0x28>
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	68fa      	ldr	r2, [r7, #12]
 800d3b4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800d3b6:	2301      	movs	r3, #1
 800d3b8:	e000      	b.n	800d3bc <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800d3ba:	2300      	movs	r3, #0
}
 800d3bc:	4618      	mov	r0, r3
 800d3be:	3714      	adds	r7, #20
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c6:	4770      	bx	lr

0800d3c8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b088      	sub	sp, #32
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	60f8      	str	r0, [r7, #12]
 800d3d0:	60b9      	str	r1, [r7, #8]
 800d3d2:	607a      	str	r2, [r7, #4]
 800d3d4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800d3da:	2300      	movs	r3, #0
 800d3dc:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d3de:	68bb      	ldr	r3, [r7, #8]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d101      	bne.n	800d3e8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800d3e4:	4b1c      	ldr	r3, [pc, #112]	; (800d458 <netif_set_addr+0x90>)
 800d3e6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d101      	bne.n	800d3f2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800d3ee:	4b1a      	ldr	r3, [pc, #104]	; (800d458 <netif_set_addr+0x90>)
 800d3f0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d3f2:	683b      	ldr	r3, [r7, #0]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d101      	bne.n	800d3fc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800d3f8:	4b17      	ldr	r3, [pc, #92]	; (800d458 <netif_set_addr+0x90>)
 800d3fa:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800d3fc:	68bb      	ldr	r3, [r7, #8]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d003      	beq.n	800d40a <netif_set_addr+0x42>
 800d402:	68bb      	ldr	r3, [r7, #8]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d101      	bne.n	800d40e <netif_set_addr+0x46>
 800d40a:	2301      	movs	r3, #1
 800d40c:	e000      	b.n	800d410 <netif_set_addr+0x48>
 800d40e:	2300      	movs	r3, #0
 800d410:	617b      	str	r3, [r7, #20]
  if (remove) {
 800d412:	697b      	ldr	r3, [r7, #20]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d006      	beq.n	800d426 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d418:	f107 0310 	add.w	r3, r7, #16
 800d41c:	461a      	mov	r2, r3
 800d41e:	68b9      	ldr	r1, [r7, #8]
 800d420:	68f8      	ldr	r0, [r7, #12]
 800d422:	f7ff ff49 	bl	800d2b8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800d426:	69fa      	ldr	r2, [r7, #28]
 800d428:	6879      	ldr	r1, [r7, #4]
 800d42a:	68f8      	ldr	r0, [r7, #12]
 800d42c:	f7ff ff8e 	bl	800d34c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800d430:	69ba      	ldr	r2, [r7, #24]
 800d432:	6839      	ldr	r1, [r7, #0]
 800d434:	68f8      	ldr	r0, [r7, #12]
 800d436:	f7ff ffa8 	bl	800d38a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800d43a:	697b      	ldr	r3, [r7, #20]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d106      	bne.n	800d44e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d440:	f107 0310 	add.w	r3, r7, #16
 800d444:	461a      	mov	r2, r3
 800d446:	68b9      	ldr	r1, [r7, #8]
 800d448:	68f8      	ldr	r0, [r7, #12]
 800d44a:	f7ff ff35 	bl	800d2b8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800d44e:	bf00      	nop
 800d450:	3720      	adds	r7, #32
 800d452:	46bd      	mov	sp, r7
 800d454:	bd80      	pop	{r7, pc}
 800d456:	bf00      	nop
 800d458:	0801f154 	.word	0x0801f154

0800d45c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800d45c:	b480      	push	{r7}
 800d45e:	b083      	sub	sp, #12
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800d464:	4a04      	ldr	r2, [pc, #16]	; (800d478 <netif_set_default+0x1c>)
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800d46a:	bf00      	nop
 800d46c:	370c      	adds	r7, #12
 800d46e:	46bd      	mov	sp, r7
 800d470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d474:	4770      	bx	lr
 800d476:	bf00      	nop
 800d478:	2000db10 	.word	0x2000db10

0800d47c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b082      	sub	sp, #8
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d107      	bne.n	800d49a <netif_set_up+0x1e>
 800d48a:	4b0f      	ldr	r3, [pc, #60]	; (800d4c8 <netif_set_up+0x4c>)
 800d48c:	f44f 7254 	mov.w	r2, #848	; 0x350
 800d490:	490e      	ldr	r1, [pc, #56]	; (800d4cc <netif_set_up+0x50>)
 800d492:	480f      	ldr	r0, [pc, #60]	; (800d4d0 <netif_set_up+0x54>)
 800d494:	f00d fe36 	bl	801b104 <iprintf>
 800d498:	e013      	b.n	800d4c2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d4a0:	f003 0301 	and.w	r3, r3, #1
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d10c      	bne.n	800d4c2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d4ae:	f043 0301 	orr.w	r3, r3, #1
 800d4b2:	b2da      	uxtb	r2, r3
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d4ba:	2103      	movs	r1, #3
 800d4bc:	6878      	ldr	r0, [r7, #4]
 800d4be:	f000 f809 	bl	800d4d4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800d4c2:	3708      	adds	r7, #8
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	bd80      	pop	{r7, pc}
 800d4c8:	0801c858 	.word	0x0801c858
 800d4cc:	0801c9e0 	.word	0x0801c9e0
 800d4d0:	0801c8a8 	.word	0x0801c8a8

0800d4d4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b082      	sub	sp, #8
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
 800d4dc:	460b      	mov	r3, r1
 800d4de:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d106      	bne.n	800d4f4 <netif_issue_reports+0x20>
 800d4e6:	4b18      	ldr	r3, [pc, #96]	; (800d548 <netif_issue_reports+0x74>)
 800d4e8:	f240 326d 	movw	r2, #877	; 0x36d
 800d4ec:	4917      	ldr	r1, [pc, #92]	; (800d54c <netif_issue_reports+0x78>)
 800d4ee:	4818      	ldr	r0, [pc, #96]	; (800d550 <netif_issue_reports+0x7c>)
 800d4f0:	f00d fe08 	bl	801b104 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d4fa:	f003 0304 	and.w	r3, r3, #4
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d01e      	beq.n	800d540 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d508:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d017      	beq.n	800d540 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d510:	78fb      	ldrb	r3, [r7, #3]
 800d512:	f003 0301 	and.w	r3, r3, #1
 800d516:	2b00      	cmp	r3, #0
 800d518:	d013      	beq.n	800d542 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	3304      	adds	r3, #4
 800d51e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d520:	2b00      	cmp	r3, #0
 800d522:	d00e      	beq.n	800d542 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d52a:	f003 0308 	and.w	r3, r3, #8
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d007      	beq.n	800d542 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	3304      	adds	r3, #4
 800d536:	4619      	mov	r1, r3
 800d538:	6878      	ldr	r0, [r7, #4]
 800d53a:	f008 fb43 	bl	8015bc4 <etharp_request>
 800d53e:	e000      	b.n	800d542 <netif_issue_reports+0x6e>
    return;
 800d540:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800d542:	3708      	adds	r7, #8
 800d544:	46bd      	mov	sp, r7
 800d546:	bd80      	pop	{r7, pc}
 800d548:	0801c858 	.word	0x0801c858
 800d54c:	0801c9fc 	.word	0x0801c9fc
 800d550:	0801c8a8 	.word	0x0801c8a8

0800d554 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800d554:	b580      	push	{r7, lr}
 800d556:	b082      	sub	sp, #8
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d107      	bne.n	800d572 <netif_set_down+0x1e>
 800d562:	4b12      	ldr	r3, [pc, #72]	; (800d5ac <netif_set_down+0x58>)
 800d564:	f240 329b 	movw	r2, #923	; 0x39b
 800d568:	4911      	ldr	r1, [pc, #68]	; (800d5b0 <netif_set_down+0x5c>)
 800d56a:	4812      	ldr	r0, [pc, #72]	; (800d5b4 <netif_set_down+0x60>)
 800d56c:	f00d fdca 	bl	801b104 <iprintf>
 800d570:	e019      	b.n	800d5a6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d578:	f003 0301 	and.w	r3, r3, #1
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d012      	beq.n	800d5a6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d586:	f023 0301 	bic.w	r3, r3, #1
 800d58a:	b2da      	uxtb	r2, r3
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d598:	f003 0308 	and.w	r3, r3, #8
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d002      	beq.n	800d5a6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800d5a0:	6878      	ldr	r0, [r7, #4]
 800d5a2:	f007 fecd 	bl	8015340 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800d5a6:	3708      	adds	r7, #8
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	bd80      	pop	{r7, pc}
 800d5ac:	0801c858 	.word	0x0801c858
 800d5b0:	0801ca20 	.word	0x0801ca20
 800d5b4:	0801c8a8 	.word	0x0801c8a8

0800d5b8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b082      	sub	sp, #8
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d107      	bne.n	800d5d6 <netif_set_link_up+0x1e>
 800d5c6:	4b13      	ldr	r3, [pc, #76]	; (800d614 <netif_set_link_up+0x5c>)
 800d5c8:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800d5cc:	4912      	ldr	r1, [pc, #72]	; (800d618 <netif_set_link_up+0x60>)
 800d5ce:	4813      	ldr	r0, [pc, #76]	; (800d61c <netif_set_link_up+0x64>)
 800d5d0:	f00d fd98 	bl	801b104 <iprintf>
 800d5d4:	e01b      	b.n	800d60e <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d5dc:	f003 0304 	and.w	r3, r3, #4
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d114      	bne.n	800d60e <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d5ea:	f043 0304 	orr.w	r3, r3, #4
 800d5ee:	b2da      	uxtb	r2, r3
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d5f6:	2103      	movs	r1, #3
 800d5f8:	6878      	ldr	r0, [r7, #4]
 800d5fa:	f7ff ff6b 	bl	800d4d4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	69db      	ldr	r3, [r3, #28]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d003      	beq.n	800d60e <netif_set_link_up+0x56>
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	69db      	ldr	r3, [r3, #28]
 800d60a:	6878      	ldr	r0, [r7, #4]
 800d60c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d60e:	3708      	adds	r7, #8
 800d610:	46bd      	mov	sp, r7
 800d612:	bd80      	pop	{r7, pc}
 800d614:	0801c858 	.word	0x0801c858
 800d618:	0801ca40 	.word	0x0801ca40
 800d61c:	0801c8a8 	.word	0x0801c8a8

0800d620 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b082      	sub	sp, #8
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d107      	bne.n	800d63e <netif_set_link_down+0x1e>
 800d62e:	4b11      	ldr	r3, [pc, #68]	; (800d674 <netif_set_link_down+0x54>)
 800d630:	f240 4206 	movw	r2, #1030	; 0x406
 800d634:	4910      	ldr	r1, [pc, #64]	; (800d678 <netif_set_link_down+0x58>)
 800d636:	4811      	ldr	r0, [pc, #68]	; (800d67c <netif_set_link_down+0x5c>)
 800d638:	f00d fd64 	bl	801b104 <iprintf>
 800d63c:	e017      	b.n	800d66e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d644:	f003 0304 	and.w	r3, r3, #4
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d010      	beq.n	800d66e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d652:	f023 0304 	bic.w	r3, r3, #4
 800d656:	b2da      	uxtb	r2, r3
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	69db      	ldr	r3, [r3, #28]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d003      	beq.n	800d66e <netif_set_link_down+0x4e>
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	69db      	ldr	r3, [r3, #28]
 800d66a:	6878      	ldr	r0, [r7, #4]
 800d66c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d66e:	3708      	adds	r7, #8
 800d670:	46bd      	mov	sp, r7
 800d672:	bd80      	pop	{r7, pc}
 800d674:	0801c858 	.word	0x0801c858
 800d678:	0801ca64 	.word	0x0801ca64
 800d67c:	0801c8a8 	.word	0x0801c8a8

0800d680 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800d680:	b480      	push	{r7}
 800d682:	b083      	sub	sp, #12
 800d684:	af00      	add	r7, sp, #0
 800d686:	6078      	str	r0, [r7, #4]
 800d688:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d002      	beq.n	800d696 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	683a      	ldr	r2, [r7, #0]
 800d694:	61da      	str	r2, [r3, #28]
  }
}
 800d696:	bf00      	nop
 800d698:	370c      	adds	r7, #12
 800d69a:	46bd      	mov	sp, r7
 800d69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a0:	4770      	bx	lr

0800d6a2 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800d6a2:	b480      	push	{r7}
 800d6a4:	b085      	sub	sp, #20
 800d6a6:	af00      	add	r7, sp, #0
 800d6a8:	60f8      	str	r0, [r7, #12]
 800d6aa:	60b9      	str	r1, [r7, #8]
 800d6ac:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800d6ae:	f06f 030b 	mvn.w	r3, #11
}
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	3714      	adds	r7, #20
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6bc:	4770      	bx	lr
	...

0800d6c0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800d6c0:	b480      	push	{r7}
 800d6c2:	b085      	sub	sp, #20
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	4603      	mov	r3, r0
 800d6c8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800d6ca:	79fb      	ldrb	r3, [r7, #7]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d013      	beq.n	800d6f8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800d6d0:	4b0d      	ldr	r3, [pc, #52]	; (800d708 <netif_get_by_index+0x48>)
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	60fb      	str	r3, [r7, #12]
 800d6d6:	e00c      	b.n	800d6f2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d6de:	3301      	adds	r3, #1
 800d6e0:	b2db      	uxtb	r3, r3
 800d6e2:	79fa      	ldrb	r2, [r7, #7]
 800d6e4:	429a      	cmp	r2, r3
 800d6e6:	d101      	bne.n	800d6ec <netif_get_by_index+0x2c>
        return netif; /* found! */
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	e006      	b.n	800d6fa <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	60fb      	str	r3, [r7, #12]
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d1ef      	bne.n	800d6d8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800d6f8:	2300      	movs	r3, #0
}
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	3714      	adds	r7, #20
 800d6fe:	46bd      	mov	sp, r7
 800d700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d704:	4770      	bx	lr
 800d706:	bf00      	nop
 800d708:	2000db0c 	.word	0x2000db0c

0800d70c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b082      	sub	sp, #8
 800d710:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800d712:	f009 ff75 	bl	8017600 <sys_arch_protect>
 800d716:	6038      	str	r0, [r7, #0]
 800d718:	4b0d      	ldr	r3, [pc, #52]	; (800d750 <pbuf_free_ooseq+0x44>)
 800d71a:	2200      	movs	r2, #0
 800d71c:	701a      	strb	r2, [r3, #0]
 800d71e:	6838      	ldr	r0, [r7, #0]
 800d720:	f009 ff7c 	bl	801761c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d724:	4b0b      	ldr	r3, [pc, #44]	; (800d754 <pbuf_free_ooseq+0x48>)
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	607b      	str	r3, [r7, #4]
 800d72a:	e00a      	b.n	800d742 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d730:	2b00      	cmp	r3, #0
 800d732:	d003      	beq.n	800d73c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800d734:	6878      	ldr	r0, [r7, #4]
 800d736:	f002 fbf9 	bl	800ff2c <tcp_free_ooseq>
      return;
 800d73a:	e005      	b.n	800d748 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	68db      	ldr	r3, [r3, #12]
 800d740:	607b      	str	r3, [r7, #4]
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d1f1      	bne.n	800d72c <pbuf_free_ooseq+0x20>
    }
  }
}
 800d748:	3708      	adds	r7, #8
 800d74a:	46bd      	mov	sp, r7
 800d74c:	bd80      	pop	{r7, pc}
 800d74e:	bf00      	nop
 800d750:	2000db14 	.word	0x2000db14
 800d754:	2000db1c 	.word	0x2000db1c

0800d758 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b082      	sub	sp, #8
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800d760:	f7ff ffd4 	bl	800d70c <pbuf_free_ooseq>
}
 800d764:	bf00      	nop
 800d766:	3708      	adds	r7, #8
 800d768:	46bd      	mov	sp, r7
 800d76a:	bd80      	pop	{r7, pc}

0800d76c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800d76c:	b580      	push	{r7, lr}
 800d76e:	b082      	sub	sp, #8
 800d770:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800d772:	f009 ff45 	bl	8017600 <sys_arch_protect>
 800d776:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800d778:	4b0f      	ldr	r3, [pc, #60]	; (800d7b8 <pbuf_pool_is_empty+0x4c>)
 800d77a:	781b      	ldrb	r3, [r3, #0]
 800d77c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800d77e:	4b0e      	ldr	r3, [pc, #56]	; (800d7b8 <pbuf_pool_is_empty+0x4c>)
 800d780:	2201      	movs	r2, #1
 800d782:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800d784:	6878      	ldr	r0, [r7, #4]
 800d786:	f009 ff49 	bl	801761c <sys_arch_unprotect>

  if (!queued) {
 800d78a:	78fb      	ldrb	r3, [r7, #3]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d10f      	bne.n	800d7b0 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800d790:	2100      	movs	r1, #0
 800d792:	480a      	ldr	r0, [pc, #40]	; (800d7bc <pbuf_pool_is_empty+0x50>)
 800d794:	f7fe fed6 	bl	800c544 <tcpip_try_callback>
 800d798:	4603      	mov	r3, r0
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d008      	beq.n	800d7b0 <pbuf_pool_is_empty+0x44>
 800d79e:	f009 ff2f 	bl	8017600 <sys_arch_protect>
 800d7a2:	6078      	str	r0, [r7, #4]
 800d7a4:	4b04      	ldr	r3, [pc, #16]	; (800d7b8 <pbuf_pool_is_empty+0x4c>)
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	701a      	strb	r2, [r3, #0]
 800d7aa:	6878      	ldr	r0, [r7, #4]
 800d7ac:	f009 ff36 	bl	801761c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800d7b0:	bf00      	nop
 800d7b2:	3708      	adds	r7, #8
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	bd80      	pop	{r7, pc}
 800d7b8:	2000db14 	.word	0x2000db14
 800d7bc:	0800d759 	.word	0x0800d759

0800d7c0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800d7c0:	b480      	push	{r7}
 800d7c2:	b085      	sub	sp, #20
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	60f8      	str	r0, [r7, #12]
 800d7c8:	60b9      	str	r1, [r7, #8]
 800d7ca:	4611      	mov	r1, r2
 800d7cc:	461a      	mov	r2, r3
 800d7ce:	460b      	mov	r3, r1
 800d7d0:	80fb      	strh	r3, [r7, #6]
 800d7d2:	4613      	mov	r3, r2
 800d7d4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	2200      	movs	r2, #0
 800d7da:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	68ba      	ldr	r2, [r7, #8]
 800d7e0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	88fa      	ldrh	r2, [r7, #6]
 800d7e6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	88ba      	ldrh	r2, [r7, #4]
 800d7ec:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800d7ee:	8b3b      	ldrh	r3, [r7, #24]
 800d7f0:	b2da      	uxtb	r2, r3
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	7f3a      	ldrb	r2, [r7, #28]
 800d7fa:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	2201      	movs	r2, #1
 800d800:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	2200      	movs	r2, #0
 800d806:	73da      	strb	r2, [r3, #15]
}
 800d808:	bf00      	nop
 800d80a:	3714      	adds	r7, #20
 800d80c:	46bd      	mov	sp, r7
 800d80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d812:	4770      	bx	lr

0800d814 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800d814:	b580      	push	{r7, lr}
 800d816:	b08c      	sub	sp, #48	; 0x30
 800d818:	af02      	add	r7, sp, #8
 800d81a:	4603      	mov	r3, r0
 800d81c:	71fb      	strb	r3, [r7, #7]
 800d81e:	460b      	mov	r3, r1
 800d820:	80bb      	strh	r3, [r7, #4]
 800d822:	4613      	mov	r3, r2
 800d824:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800d826:	79fb      	ldrb	r3, [r7, #7]
 800d828:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800d82a:	887b      	ldrh	r3, [r7, #2]
 800d82c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800d830:	d07f      	beq.n	800d932 <pbuf_alloc+0x11e>
 800d832:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800d836:	f300 80c8 	bgt.w	800d9ca <pbuf_alloc+0x1b6>
 800d83a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800d83e:	d010      	beq.n	800d862 <pbuf_alloc+0x4e>
 800d840:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800d844:	f300 80c1 	bgt.w	800d9ca <pbuf_alloc+0x1b6>
 800d848:	2b01      	cmp	r3, #1
 800d84a:	d002      	beq.n	800d852 <pbuf_alloc+0x3e>
 800d84c:	2b41      	cmp	r3, #65	; 0x41
 800d84e:	f040 80bc 	bne.w	800d9ca <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800d852:	887a      	ldrh	r2, [r7, #2]
 800d854:	88bb      	ldrh	r3, [r7, #4]
 800d856:	4619      	mov	r1, r3
 800d858:	2000      	movs	r0, #0
 800d85a:	f000 f8d1 	bl	800da00 <pbuf_alloc_reference>
 800d85e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800d860:	e0bd      	b.n	800d9de <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800d862:	2300      	movs	r3, #0
 800d864:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800d866:	2300      	movs	r3, #0
 800d868:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800d86a:	88bb      	ldrh	r3, [r7, #4]
 800d86c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800d86e:	200c      	movs	r0, #12
 800d870:	f7ff fbbe 	bl	800cff0 <memp_malloc>
 800d874:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800d876:	693b      	ldr	r3, [r7, #16]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d109      	bne.n	800d890 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800d87c:	f7ff ff76 	bl	800d76c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800d880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d882:	2b00      	cmp	r3, #0
 800d884:	d002      	beq.n	800d88c <pbuf_alloc+0x78>
            pbuf_free(p);
 800d886:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d888:	f000 faa8 	bl	800dddc <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800d88c:	2300      	movs	r3, #0
 800d88e:	e0a7      	b.n	800d9e0 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800d890:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d892:	3303      	adds	r3, #3
 800d894:	b29b      	uxth	r3, r3
 800d896:	f023 0303 	bic.w	r3, r3, #3
 800d89a:	b29b      	uxth	r3, r3
 800d89c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800d8a0:	b29b      	uxth	r3, r3
 800d8a2:	8b7a      	ldrh	r2, [r7, #26]
 800d8a4:	4293      	cmp	r3, r2
 800d8a6:	bf28      	it	cs
 800d8a8:	4613      	movcs	r3, r2
 800d8aa:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800d8ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d8ae:	3310      	adds	r3, #16
 800d8b0:	693a      	ldr	r2, [r7, #16]
 800d8b2:	4413      	add	r3, r2
 800d8b4:	3303      	adds	r3, #3
 800d8b6:	f023 0303 	bic.w	r3, r3, #3
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	89f9      	ldrh	r1, [r7, #14]
 800d8be:	8b7a      	ldrh	r2, [r7, #26]
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	9301      	str	r3, [sp, #4]
 800d8c4:	887b      	ldrh	r3, [r7, #2]
 800d8c6:	9300      	str	r3, [sp, #0]
 800d8c8:	460b      	mov	r3, r1
 800d8ca:	4601      	mov	r1, r0
 800d8cc:	6938      	ldr	r0, [r7, #16]
 800d8ce:	f7ff ff77 	bl	800d7c0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800d8d2:	693b      	ldr	r3, [r7, #16]
 800d8d4:	685b      	ldr	r3, [r3, #4]
 800d8d6:	f003 0303 	and.w	r3, r3, #3
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d006      	beq.n	800d8ec <pbuf_alloc+0xd8>
 800d8de:	4b42      	ldr	r3, [pc, #264]	; (800d9e8 <pbuf_alloc+0x1d4>)
 800d8e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d8e4:	4941      	ldr	r1, [pc, #260]	; (800d9ec <pbuf_alloc+0x1d8>)
 800d8e6:	4842      	ldr	r0, [pc, #264]	; (800d9f0 <pbuf_alloc+0x1dc>)
 800d8e8:	f00d fc0c 	bl	801b104 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800d8ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d8ee:	3303      	adds	r3, #3
 800d8f0:	f023 0303 	bic.w	r3, r3, #3
 800d8f4:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800d8f8:	d106      	bne.n	800d908 <pbuf_alloc+0xf4>
 800d8fa:	4b3b      	ldr	r3, [pc, #236]	; (800d9e8 <pbuf_alloc+0x1d4>)
 800d8fc:	f44f 7281 	mov.w	r2, #258	; 0x102
 800d900:	493c      	ldr	r1, [pc, #240]	; (800d9f4 <pbuf_alloc+0x1e0>)
 800d902:	483b      	ldr	r0, [pc, #236]	; (800d9f0 <pbuf_alloc+0x1dc>)
 800d904:	f00d fbfe 	bl	801b104 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800d908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d102      	bne.n	800d914 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800d90e:	693b      	ldr	r3, [r7, #16]
 800d910:	627b      	str	r3, [r7, #36]	; 0x24
 800d912:	e002      	b.n	800d91a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800d914:	69fb      	ldr	r3, [r7, #28]
 800d916:	693a      	ldr	r2, [r7, #16]
 800d918:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800d91a:	693b      	ldr	r3, [r7, #16]
 800d91c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800d91e:	8b7a      	ldrh	r2, [r7, #26]
 800d920:	89fb      	ldrh	r3, [r7, #14]
 800d922:	1ad3      	subs	r3, r2, r3
 800d924:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800d926:	2300      	movs	r3, #0
 800d928:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800d92a:	8b7b      	ldrh	r3, [r7, #26]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d19e      	bne.n	800d86e <pbuf_alloc+0x5a>
      break;
 800d930:	e055      	b.n	800d9de <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800d932:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d934:	3303      	adds	r3, #3
 800d936:	b29b      	uxth	r3, r3
 800d938:	f023 0303 	bic.w	r3, r3, #3
 800d93c:	b29a      	uxth	r2, r3
 800d93e:	88bb      	ldrh	r3, [r7, #4]
 800d940:	3303      	adds	r3, #3
 800d942:	b29b      	uxth	r3, r3
 800d944:	f023 0303 	bic.w	r3, r3, #3
 800d948:	b29b      	uxth	r3, r3
 800d94a:	4413      	add	r3, r2
 800d94c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800d94e:	8b3b      	ldrh	r3, [r7, #24]
 800d950:	3310      	adds	r3, #16
 800d952:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d954:	8b3a      	ldrh	r2, [r7, #24]
 800d956:	88bb      	ldrh	r3, [r7, #4]
 800d958:	3303      	adds	r3, #3
 800d95a:	f023 0303 	bic.w	r3, r3, #3
 800d95e:	429a      	cmp	r2, r3
 800d960:	d306      	bcc.n	800d970 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800d962:	8afa      	ldrh	r2, [r7, #22]
 800d964:	88bb      	ldrh	r3, [r7, #4]
 800d966:	3303      	adds	r3, #3
 800d968:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d96c:	429a      	cmp	r2, r3
 800d96e:	d201      	bcs.n	800d974 <pbuf_alloc+0x160>
        return NULL;
 800d970:	2300      	movs	r3, #0
 800d972:	e035      	b.n	800d9e0 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800d974:	8afb      	ldrh	r3, [r7, #22]
 800d976:	4618      	mov	r0, r3
 800d978:	f7ff f9b8 	bl	800ccec <mem_malloc>
 800d97c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800d97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d980:	2b00      	cmp	r3, #0
 800d982:	d101      	bne.n	800d988 <pbuf_alloc+0x174>
        return NULL;
 800d984:	2300      	movs	r3, #0
 800d986:	e02b      	b.n	800d9e0 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800d988:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d98a:	3310      	adds	r3, #16
 800d98c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d98e:	4413      	add	r3, r2
 800d990:	3303      	adds	r3, #3
 800d992:	f023 0303 	bic.w	r3, r3, #3
 800d996:	4618      	mov	r0, r3
 800d998:	88b9      	ldrh	r1, [r7, #4]
 800d99a:	88ba      	ldrh	r2, [r7, #4]
 800d99c:	2300      	movs	r3, #0
 800d99e:	9301      	str	r3, [sp, #4]
 800d9a0:	887b      	ldrh	r3, [r7, #2]
 800d9a2:	9300      	str	r3, [sp, #0]
 800d9a4:	460b      	mov	r3, r1
 800d9a6:	4601      	mov	r1, r0
 800d9a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d9aa:	f7ff ff09 	bl	800d7c0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800d9ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9b0:	685b      	ldr	r3, [r3, #4]
 800d9b2:	f003 0303 	and.w	r3, r3, #3
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d010      	beq.n	800d9dc <pbuf_alloc+0x1c8>
 800d9ba:	4b0b      	ldr	r3, [pc, #44]	; (800d9e8 <pbuf_alloc+0x1d4>)
 800d9bc:	f44f 7291 	mov.w	r2, #290	; 0x122
 800d9c0:	490d      	ldr	r1, [pc, #52]	; (800d9f8 <pbuf_alloc+0x1e4>)
 800d9c2:	480b      	ldr	r0, [pc, #44]	; (800d9f0 <pbuf_alloc+0x1dc>)
 800d9c4:	f00d fb9e 	bl	801b104 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800d9c8:	e008      	b.n	800d9dc <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800d9ca:	4b07      	ldr	r3, [pc, #28]	; (800d9e8 <pbuf_alloc+0x1d4>)
 800d9cc:	f240 1227 	movw	r2, #295	; 0x127
 800d9d0:	490a      	ldr	r1, [pc, #40]	; (800d9fc <pbuf_alloc+0x1e8>)
 800d9d2:	4807      	ldr	r0, [pc, #28]	; (800d9f0 <pbuf_alloc+0x1dc>)
 800d9d4:	f00d fb96 	bl	801b104 <iprintf>
      return NULL;
 800d9d8:	2300      	movs	r3, #0
 800d9da:	e001      	b.n	800d9e0 <pbuf_alloc+0x1cc>
      break;
 800d9dc:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800d9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	3728      	adds	r7, #40	; 0x28
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	bd80      	pop	{r7, pc}
 800d9e8:	0801ca88 	.word	0x0801ca88
 800d9ec:	0801cab8 	.word	0x0801cab8
 800d9f0:	0801cae8 	.word	0x0801cae8
 800d9f4:	0801cb10 	.word	0x0801cb10
 800d9f8:	0801cb44 	.word	0x0801cb44
 800d9fc:	0801cb70 	.word	0x0801cb70

0800da00 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800da00:	b580      	push	{r7, lr}
 800da02:	b086      	sub	sp, #24
 800da04:	af02      	add	r7, sp, #8
 800da06:	6078      	str	r0, [r7, #4]
 800da08:	460b      	mov	r3, r1
 800da0a:	807b      	strh	r3, [r7, #2]
 800da0c:	4613      	mov	r3, r2
 800da0e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800da10:	883b      	ldrh	r3, [r7, #0]
 800da12:	2b41      	cmp	r3, #65	; 0x41
 800da14:	d009      	beq.n	800da2a <pbuf_alloc_reference+0x2a>
 800da16:	883b      	ldrh	r3, [r7, #0]
 800da18:	2b01      	cmp	r3, #1
 800da1a:	d006      	beq.n	800da2a <pbuf_alloc_reference+0x2a>
 800da1c:	4b0f      	ldr	r3, [pc, #60]	; (800da5c <pbuf_alloc_reference+0x5c>)
 800da1e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800da22:	490f      	ldr	r1, [pc, #60]	; (800da60 <pbuf_alloc_reference+0x60>)
 800da24:	480f      	ldr	r0, [pc, #60]	; (800da64 <pbuf_alloc_reference+0x64>)
 800da26:	f00d fb6d 	bl	801b104 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800da2a:	200b      	movs	r0, #11
 800da2c:	f7ff fae0 	bl	800cff0 <memp_malloc>
 800da30:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d101      	bne.n	800da3c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800da38:	2300      	movs	r3, #0
 800da3a:	e00b      	b.n	800da54 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800da3c:	8879      	ldrh	r1, [r7, #2]
 800da3e:	887a      	ldrh	r2, [r7, #2]
 800da40:	2300      	movs	r3, #0
 800da42:	9301      	str	r3, [sp, #4]
 800da44:	883b      	ldrh	r3, [r7, #0]
 800da46:	9300      	str	r3, [sp, #0]
 800da48:	460b      	mov	r3, r1
 800da4a:	6879      	ldr	r1, [r7, #4]
 800da4c:	68f8      	ldr	r0, [r7, #12]
 800da4e:	f7ff feb7 	bl	800d7c0 <pbuf_init_alloced_pbuf>
  return p;
 800da52:	68fb      	ldr	r3, [r7, #12]
}
 800da54:	4618      	mov	r0, r3
 800da56:	3710      	adds	r7, #16
 800da58:	46bd      	mov	sp, r7
 800da5a:	bd80      	pop	{r7, pc}
 800da5c:	0801ca88 	.word	0x0801ca88
 800da60:	0801cb8c 	.word	0x0801cb8c
 800da64:	0801cae8 	.word	0x0801cae8

0800da68 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b088      	sub	sp, #32
 800da6c:	af02      	add	r7, sp, #8
 800da6e:	607b      	str	r3, [r7, #4]
 800da70:	4603      	mov	r3, r0
 800da72:	73fb      	strb	r3, [r7, #15]
 800da74:	460b      	mov	r3, r1
 800da76:	81bb      	strh	r3, [r7, #12]
 800da78:	4613      	mov	r3, r2
 800da7a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800da7c:	7bfb      	ldrb	r3, [r7, #15]
 800da7e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800da80:	8a7b      	ldrh	r3, [r7, #18]
 800da82:	3303      	adds	r3, #3
 800da84:	f023 0203 	bic.w	r2, r3, #3
 800da88:	89bb      	ldrh	r3, [r7, #12]
 800da8a:	441a      	add	r2, r3
 800da8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da8e:	429a      	cmp	r2, r3
 800da90:	d901      	bls.n	800da96 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800da92:	2300      	movs	r3, #0
 800da94:	e018      	b.n	800dac8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800da96:	6a3b      	ldr	r3, [r7, #32]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d007      	beq.n	800daac <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800da9c:	8a7b      	ldrh	r3, [r7, #18]
 800da9e:	3303      	adds	r3, #3
 800daa0:	f023 0303 	bic.w	r3, r3, #3
 800daa4:	6a3a      	ldr	r2, [r7, #32]
 800daa6:	4413      	add	r3, r2
 800daa8:	617b      	str	r3, [r7, #20]
 800daaa:	e001      	b.n	800dab0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800daac:	2300      	movs	r3, #0
 800daae:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800dab0:	6878      	ldr	r0, [r7, #4]
 800dab2:	89b9      	ldrh	r1, [r7, #12]
 800dab4:	89ba      	ldrh	r2, [r7, #12]
 800dab6:	2302      	movs	r3, #2
 800dab8:	9301      	str	r3, [sp, #4]
 800daba:	897b      	ldrh	r3, [r7, #10]
 800dabc:	9300      	str	r3, [sp, #0]
 800dabe:	460b      	mov	r3, r1
 800dac0:	6979      	ldr	r1, [r7, #20]
 800dac2:	f7ff fe7d 	bl	800d7c0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800dac6:	687b      	ldr	r3, [r7, #4]
}
 800dac8:	4618      	mov	r0, r3
 800daca:	3718      	adds	r7, #24
 800dacc:	46bd      	mov	sp, r7
 800dace:	bd80      	pop	{r7, pc}

0800dad0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b084      	sub	sp, #16
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]
 800dad8:	460b      	mov	r3, r1
 800dada:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d106      	bne.n	800daf0 <pbuf_realloc+0x20>
 800dae2:	4b3a      	ldr	r3, [pc, #232]	; (800dbcc <pbuf_realloc+0xfc>)
 800dae4:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800dae8:	4939      	ldr	r1, [pc, #228]	; (800dbd0 <pbuf_realloc+0x100>)
 800daea:	483a      	ldr	r0, [pc, #232]	; (800dbd4 <pbuf_realloc+0x104>)
 800daec:	f00d fb0a 	bl	801b104 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	891b      	ldrh	r3, [r3, #8]
 800daf4:	887a      	ldrh	r2, [r7, #2]
 800daf6:	429a      	cmp	r2, r3
 800daf8:	d263      	bcs.n	800dbc2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	891a      	ldrh	r2, [r3, #8]
 800dafe:	887b      	ldrh	r3, [r7, #2]
 800db00:	1ad3      	subs	r3, r2, r3
 800db02:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800db04:	887b      	ldrh	r3, [r7, #2]
 800db06:	817b      	strh	r3, [r7, #10]
  q = p;
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800db0c:	e018      	b.n	800db40 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	895b      	ldrh	r3, [r3, #10]
 800db12:	897a      	ldrh	r2, [r7, #10]
 800db14:	1ad3      	subs	r3, r2, r3
 800db16:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	891a      	ldrh	r2, [r3, #8]
 800db1c:	893b      	ldrh	r3, [r7, #8]
 800db1e:	1ad3      	subs	r3, r2, r3
 800db20:	b29a      	uxth	r2, r3
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d106      	bne.n	800db40 <pbuf_realloc+0x70>
 800db32:	4b26      	ldr	r3, [pc, #152]	; (800dbcc <pbuf_realloc+0xfc>)
 800db34:	f240 12af 	movw	r2, #431	; 0x1af
 800db38:	4927      	ldr	r1, [pc, #156]	; (800dbd8 <pbuf_realloc+0x108>)
 800db3a:	4826      	ldr	r0, [pc, #152]	; (800dbd4 <pbuf_realloc+0x104>)
 800db3c:	f00d fae2 	bl	801b104 <iprintf>
  while (rem_len > q->len) {
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	895b      	ldrh	r3, [r3, #10]
 800db44:	897a      	ldrh	r2, [r7, #10]
 800db46:	429a      	cmp	r2, r3
 800db48:	d8e1      	bhi.n	800db0e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	7b1b      	ldrb	r3, [r3, #12]
 800db4e:	f003 030f 	and.w	r3, r3, #15
 800db52:	2b00      	cmp	r3, #0
 800db54:	d121      	bne.n	800db9a <pbuf_realloc+0xca>
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	895b      	ldrh	r3, [r3, #10]
 800db5a:	897a      	ldrh	r2, [r7, #10]
 800db5c:	429a      	cmp	r2, r3
 800db5e:	d01c      	beq.n	800db9a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	7b5b      	ldrb	r3, [r3, #13]
 800db64:	f003 0302 	and.w	r3, r3, #2
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d116      	bne.n	800db9a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	685a      	ldr	r2, [r3, #4]
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	1ad3      	subs	r3, r2, r3
 800db74:	b29a      	uxth	r2, r3
 800db76:	897b      	ldrh	r3, [r7, #10]
 800db78:	4413      	add	r3, r2
 800db7a:	b29b      	uxth	r3, r3
 800db7c:	4619      	mov	r1, r3
 800db7e:	68f8      	ldr	r0, [r7, #12]
 800db80:	f7fe ffaa 	bl	800cad8 <mem_trim>
 800db84:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d106      	bne.n	800db9a <pbuf_realloc+0xca>
 800db8c:	4b0f      	ldr	r3, [pc, #60]	; (800dbcc <pbuf_realloc+0xfc>)
 800db8e:	f240 12bd 	movw	r2, #445	; 0x1bd
 800db92:	4912      	ldr	r1, [pc, #72]	; (800dbdc <pbuf_realloc+0x10c>)
 800db94:	480f      	ldr	r0, [pc, #60]	; (800dbd4 <pbuf_realloc+0x104>)
 800db96:	f00d fab5 	bl	801b104 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	897a      	ldrh	r2, [r7, #10]
 800db9e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	895a      	ldrh	r2, [r3, #10]
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d004      	beq.n	800dbba <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	f000 f911 	bl	800dddc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	2200      	movs	r2, #0
 800dbbe:	601a      	str	r2, [r3, #0]
 800dbc0:	e000      	b.n	800dbc4 <pbuf_realloc+0xf4>
    return;
 800dbc2:	bf00      	nop

}
 800dbc4:	3710      	adds	r7, #16
 800dbc6:	46bd      	mov	sp, r7
 800dbc8:	bd80      	pop	{r7, pc}
 800dbca:	bf00      	nop
 800dbcc:	0801ca88 	.word	0x0801ca88
 800dbd0:	0801cba0 	.word	0x0801cba0
 800dbd4:	0801cae8 	.word	0x0801cae8
 800dbd8:	0801cbb8 	.word	0x0801cbb8
 800dbdc:	0801cbd0 	.word	0x0801cbd0

0800dbe0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	b086      	sub	sp, #24
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	60f8      	str	r0, [r7, #12]
 800dbe8:	60b9      	str	r1, [r7, #8]
 800dbea:	4613      	mov	r3, r2
 800dbec:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d106      	bne.n	800dc02 <pbuf_add_header_impl+0x22>
 800dbf4:	4b2b      	ldr	r3, [pc, #172]	; (800dca4 <pbuf_add_header_impl+0xc4>)
 800dbf6:	f240 12df 	movw	r2, #479	; 0x1df
 800dbfa:	492b      	ldr	r1, [pc, #172]	; (800dca8 <pbuf_add_header_impl+0xc8>)
 800dbfc:	482b      	ldr	r0, [pc, #172]	; (800dcac <pbuf_add_header_impl+0xcc>)
 800dbfe:	f00d fa81 	bl	801b104 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d003      	beq.n	800dc10 <pbuf_add_header_impl+0x30>
 800dc08:	68bb      	ldr	r3, [r7, #8]
 800dc0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dc0e:	d301      	bcc.n	800dc14 <pbuf_add_header_impl+0x34>
    return 1;
 800dc10:	2301      	movs	r3, #1
 800dc12:	e043      	b.n	800dc9c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800dc14:	68bb      	ldr	r3, [r7, #8]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d101      	bne.n	800dc1e <pbuf_add_header_impl+0x3e>
    return 0;
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	e03e      	b.n	800dc9c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800dc1e:	68bb      	ldr	r3, [r7, #8]
 800dc20:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	891a      	ldrh	r2, [r3, #8]
 800dc26:	8a7b      	ldrh	r3, [r7, #18]
 800dc28:	4413      	add	r3, r2
 800dc2a:	b29b      	uxth	r3, r3
 800dc2c:	8a7a      	ldrh	r2, [r7, #18]
 800dc2e:	429a      	cmp	r2, r3
 800dc30:	d901      	bls.n	800dc36 <pbuf_add_header_impl+0x56>
    return 1;
 800dc32:	2301      	movs	r3, #1
 800dc34:	e032      	b.n	800dc9c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	7b1b      	ldrb	r3, [r3, #12]
 800dc3a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800dc3c:	8a3b      	ldrh	r3, [r7, #16]
 800dc3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d00c      	beq.n	800dc60 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	685a      	ldr	r2, [r3, #4]
 800dc4a:	68bb      	ldr	r3, [r7, #8]
 800dc4c:	425b      	negs	r3, r3
 800dc4e:	4413      	add	r3, r2
 800dc50:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	3310      	adds	r3, #16
 800dc56:	697a      	ldr	r2, [r7, #20]
 800dc58:	429a      	cmp	r2, r3
 800dc5a:	d20d      	bcs.n	800dc78 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800dc5c:	2301      	movs	r3, #1
 800dc5e:	e01d      	b.n	800dc9c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800dc60:	79fb      	ldrb	r3, [r7, #7]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d006      	beq.n	800dc74 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	685a      	ldr	r2, [r3, #4]
 800dc6a:	68bb      	ldr	r3, [r7, #8]
 800dc6c:	425b      	negs	r3, r3
 800dc6e:	4413      	add	r3, r2
 800dc70:	617b      	str	r3, [r7, #20]
 800dc72:	e001      	b.n	800dc78 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800dc74:	2301      	movs	r3, #1
 800dc76:	e011      	b.n	800dc9c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	697a      	ldr	r2, [r7, #20]
 800dc7c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	895a      	ldrh	r2, [r3, #10]
 800dc82:	8a7b      	ldrh	r3, [r7, #18]
 800dc84:	4413      	add	r3, r2
 800dc86:	b29a      	uxth	r2, r3
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	891a      	ldrh	r2, [r3, #8]
 800dc90:	8a7b      	ldrh	r3, [r7, #18]
 800dc92:	4413      	add	r3, r2
 800dc94:	b29a      	uxth	r2, r3
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	811a      	strh	r2, [r3, #8]


  return 0;
 800dc9a:	2300      	movs	r3, #0
}
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	3718      	adds	r7, #24
 800dca0:	46bd      	mov	sp, r7
 800dca2:	bd80      	pop	{r7, pc}
 800dca4:	0801ca88 	.word	0x0801ca88
 800dca8:	0801cbec 	.word	0x0801cbec
 800dcac:	0801cae8 	.word	0x0801cae8

0800dcb0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800dcb0:	b580      	push	{r7, lr}
 800dcb2:	b082      	sub	sp, #8
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	6078      	str	r0, [r7, #4]
 800dcb8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800dcba:	2200      	movs	r2, #0
 800dcbc:	6839      	ldr	r1, [r7, #0]
 800dcbe:	6878      	ldr	r0, [r7, #4]
 800dcc0:	f7ff ff8e 	bl	800dbe0 <pbuf_add_header_impl>
 800dcc4:	4603      	mov	r3, r0
}
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	3708      	adds	r7, #8
 800dcca:	46bd      	mov	sp, r7
 800dccc:	bd80      	pop	{r7, pc}
	...

0800dcd0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800dcd0:	b580      	push	{r7, lr}
 800dcd2:	b084      	sub	sp, #16
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	6078      	str	r0, [r7, #4]
 800dcd8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d106      	bne.n	800dcee <pbuf_remove_header+0x1e>
 800dce0:	4b20      	ldr	r3, [pc, #128]	; (800dd64 <pbuf_remove_header+0x94>)
 800dce2:	f240 224b 	movw	r2, #587	; 0x24b
 800dce6:	4920      	ldr	r1, [pc, #128]	; (800dd68 <pbuf_remove_header+0x98>)
 800dce8:	4820      	ldr	r0, [pc, #128]	; (800dd6c <pbuf_remove_header+0x9c>)
 800dcea:	f00d fa0b 	bl	801b104 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d003      	beq.n	800dcfc <pbuf_remove_header+0x2c>
 800dcf4:	683b      	ldr	r3, [r7, #0]
 800dcf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dcfa:	d301      	bcc.n	800dd00 <pbuf_remove_header+0x30>
    return 1;
 800dcfc:	2301      	movs	r3, #1
 800dcfe:	e02c      	b.n	800dd5a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800dd00:	683b      	ldr	r3, [r7, #0]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d101      	bne.n	800dd0a <pbuf_remove_header+0x3a>
    return 0;
 800dd06:	2300      	movs	r3, #0
 800dd08:	e027      	b.n	800dd5a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800dd0a:	683b      	ldr	r3, [r7, #0]
 800dd0c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	895b      	ldrh	r3, [r3, #10]
 800dd12:	89fa      	ldrh	r2, [r7, #14]
 800dd14:	429a      	cmp	r2, r3
 800dd16:	d908      	bls.n	800dd2a <pbuf_remove_header+0x5a>
 800dd18:	4b12      	ldr	r3, [pc, #72]	; (800dd64 <pbuf_remove_header+0x94>)
 800dd1a:	f240 2255 	movw	r2, #597	; 0x255
 800dd1e:	4914      	ldr	r1, [pc, #80]	; (800dd70 <pbuf_remove_header+0xa0>)
 800dd20:	4812      	ldr	r0, [pc, #72]	; (800dd6c <pbuf_remove_header+0x9c>)
 800dd22:	f00d f9ef 	bl	801b104 <iprintf>
 800dd26:	2301      	movs	r3, #1
 800dd28:	e017      	b.n	800dd5a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	685b      	ldr	r3, [r3, #4]
 800dd2e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	685a      	ldr	r2, [r3, #4]
 800dd34:	683b      	ldr	r3, [r7, #0]
 800dd36:	441a      	add	r2, r3
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	895a      	ldrh	r2, [r3, #10]
 800dd40:	89fb      	ldrh	r3, [r7, #14]
 800dd42:	1ad3      	subs	r3, r2, r3
 800dd44:	b29a      	uxth	r2, r3
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	891a      	ldrh	r2, [r3, #8]
 800dd4e:	89fb      	ldrh	r3, [r7, #14]
 800dd50:	1ad3      	subs	r3, r2, r3
 800dd52:	b29a      	uxth	r2, r3
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800dd58:	2300      	movs	r3, #0
}
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	3710      	adds	r7, #16
 800dd5e:	46bd      	mov	sp, r7
 800dd60:	bd80      	pop	{r7, pc}
 800dd62:	bf00      	nop
 800dd64:	0801ca88 	.word	0x0801ca88
 800dd68:	0801cbec 	.word	0x0801cbec
 800dd6c:	0801cae8 	.word	0x0801cae8
 800dd70:	0801cbf8 	.word	0x0801cbf8

0800dd74 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b082      	sub	sp, #8
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	6078      	str	r0, [r7, #4]
 800dd7c:	460b      	mov	r3, r1
 800dd7e:	807b      	strh	r3, [r7, #2]
 800dd80:	4613      	mov	r3, r2
 800dd82:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800dd84:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	da08      	bge.n	800dd9e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800dd8c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dd90:	425b      	negs	r3, r3
 800dd92:	4619      	mov	r1, r3
 800dd94:	6878      	ldr	r0, [r7, #4]
 800dd96:	f7ff ff9b 	bl	800dcd0 <pbuf_remove_header>
 800dd9a:	4603      	mov	r3, r0
 800dd9c:	e007      	b.n	800ddae <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800dd9e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dda2:	787a      	ldrb	r2, [r7, #1]
 800dda4:	4619      	mov	r1, r3
 800dda6:	6878      	ldr	r0, [r7, #4]
 800dda8:	f7ff ff1a 	bl	800dbe0 <pbuf_add_header_impl>
 800ddac:	4603      	mov	r3, r0
  }
}
 800ddae:	4618      	mov	r0, r3
 800ddb0:	3708      	adds	r7, #8
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	bd80      	pop	{r7, pc}

0800ddb6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800ddb6:	b580      	push	{r7, lr}
 800ddb8:	b082      	sub	sp, #8
 800ddba:	af00      	add	r7, sp, #0
 800ddbc:	6078      	str	r0, [r7, #4]
 800ddbe:	460b      	mov	r3, r1
 800ddc0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800ddc2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ddc6:	2201      	movs	r2, #1
 800ddc8:	4619      	mov	r1, r3
 800ddca:	6878      	ldr	r0, [r7, #4]
 800ddcc:	f7ff ffd2 	bl	800dd74 <pbuf_header_impl>
 800ddd0:	4603      	mov	r3, r0
}
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	3708      	adds	r7, #8
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	bd80      	pop	{r7, pc}
	...

0800dddc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b088      	sub	sp, #32
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d10b      	bne.n	800de02 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d106      	bne.n	800ddfe <pbuf_free+0x22>
 800ddf0:	4b3b      	ldr	r3, [pc, #236]	; (800dee0 <pbuf_free+0x104>)
 800ddf2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800ddf6:	493b      	ldr	r1, [pc, #236]	; (800dee4 <pbuf_free+0x108>)
 800ddf8:	483b      	ldr	r0, [pc, #236]	; (800dee8 <pbuf_free+0x10c>)
 800ddfa:	f00d f983 	bl	801b104 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800ddfe:	2300      	movs	r3, #0
 800de00:	e069      	b.n	800ded6 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800de02:	2300      	movs	r3, #0
 800de04:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800de06:	e062      	b.n	800dece <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800de08:	f009 fbfa 	bl	8017600 <sys_arch_protect>
 800de0c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	7b9b      	ldrb	r3, [r3, #14]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d106      	bne.n	800de24 <pbuf_free+0x48>
 800de16:	4b32      	ldr	r3, [pc, #200]	; (800dee0 <pbuf_free+0x104>)
 800de18:	f240 22f1 	movw	r2, #753	; 0x2f1
 800de1c:	4933      	ldr	r1, [pc, #204]	; (800deec <pbuf_free+0x110>)
 800de1e:	4832      	ldr	r0, [pc, #200]	; (800dee8 <pbuf_free+0x10c>)
 800de20:	f00d f970 	bl	801b104 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	7b9b      	ldrb	r3, [r3, #14]
 800de28:	3b01      	subs	r3, #1
 800de2a:	b2da      	uxtb	r2, r3
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	739a      	strb	r2, [r3, #14]
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	7b9b      	ldrb	r3, [r3, #14]
 800de34:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800de36:	69b8      	ldr	r0, [r7, #24]
 800de38:	f009 fbf0 	bl	801761c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800de3c:	7dfb      	ldrb	r3, [r7, #23]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d143      	bne.n	800deca <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	7b1b      	ldrb	r3, [r3, #12]
 800de4c:	f003 030f 	and.w	r3, r3, #15
 800de50:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	7b5b      	ldrb	r3, [r3, #13]
 800de56:	f003 0302 	and.w	r3, r3, #2
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d011      	beq.n	800de82 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800de62:	68bb      	ldr	r3, [r7, #8]
 800de64:	691b      	ldr	r3, [r3, #16]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d106      	bne.n	800de78 <pbuf_free+0x9c>
 800de6a:	4b1d      	ldr	r3, [pc, #116]	; (800dee0 <pbuf_free+0x104>)
 800de6c:	f240 22ff 	movw	r2, #767	; 0x2ff
 800de70:	491f      	ldr	r1, [pc, #124]	; (800def0 <pbuf_free+0x114>)
 800de72:	481d      	ldr	r0, [pc, #116]	; (800dee8 <pbuf_free+0x10c>)
 800de74:	f00d f946 	bl	801b104 <iprintf>
        pc->custom_free_function(p);
 800de78:	68bb      	ldr	r3, [r7, #8]
 800de7a:	691b      	ldr	r3, [r3, #16]
 800de7c:	6878      	ldr	r0, [r7, #4]
 800de7e:	4798      	blx	r3
 800de80:	e01d      	b.n	800debe <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800de82:	7bfb      	ldrb	r3, [r7, #15]
 800de84:	2b02      	cmp	r3, #2
 800de86:	d104      	bne.n	800de92 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800de88:	6879      	ldr	r1, [r7, #4]
 800de8a:	200c      	movs	r0, #12
 800de8c:	f7ff f902 	bl	800d094 <memp_free>
 800de90:	e015      	b.n	800debe <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800de92:	7bfb      	ldrb	r3, [r7, #15]
 800de94:	2b01      	cmp	r3, #1
 800de96:	d104      	bne.n	800dea2 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800de98:	6879      	ldr	r1, [r7, #4]
 800de9a:	200b      	movs	r0, #11
 800de9c:	f7ff f8fa 	bl	800d094 <memp_free>
 800dea0:	e00d      	b.n	800debe <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800dea2:	7bfb      	ldrb	r3, [r7, #15]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d103      	bne.n	800deb0 <pbuf_free+0xd4>
          mem_free(p);
 800dea8:	6878      	ldr	r0, [r7, #4]
 800deaa:	f7fe fd85 	bl	800c9b8 <mem_free>
 800deae:	e006      	b.n	800debe <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800deb0:	4b0b      	ldr	r3, [pc, #44]	; (800dee0 <pbuf_free+0x104>)
 800deb2:	f240 320f 	movw	r2, #783	; 0x30f
 800deb6:	490f      	ldr	r1, [pc, #60]	; (800def4 <pbuf_free+0x118>)
 800deb8:	480b      	ldr	r0, [pc, #44]	; (800dee8 <pbuf_free+0x10c>)
 800deba:	f00d f923 	bl	801b104 <iprintf>
        }
      }
      count++;
 800debe:	7ffb      	ldrb	r3, [r7, #31]
 800dec0:	3301      	adds	r3, #1
 800dec2:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800dec4:	693b      	ldr	r3, [r7, #16]
 800dec6:	607b      	str	r3, [r7, #4]
 800dec8:	e001      	b.n	800dece <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800deca:	2300      	movs	r3, #0
 800decc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d199      	bne.n	800de08 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800ded4:	7ffb      	ldrb	r3, [r7, #31]
}
 800ded6:	4618      	mov	r0, r3
 800ded8:	3720      	adds	r7, #32
 800deda:	46bd      	mov	sp, r7
 800dedc:	bd80      	pop	{r7, pc}
 800dede:	bf00      	nop
 800dee0:	0801ca88 	.word	0x0801ca88
 800dee4:	0801cbec 	.word	0x0801cbec
 800dee8:	0801cae8 	.word	0x0801cae8
 800deec:	0801cc18 	.word	0x0801cc18
 800def0:	0801cc30 	.word	0x0801cc30
 800def4:	0801cc54 	.word	0x0801cc54

0800def8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800def8:	b480      	push	{r7}
 800defa:	b085      	sub	sp, #20
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800df00:	2300      	movs	r3, #0
 800df02:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800df04:	e005      	b.n	800df12 <pbuf_clen+0x1a>
    ++len;
 800df06:	89fb      	ldrh	r3, [r7, #14]
 800df08:	3301      	adds	r3, #1
 800df0a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d1f6      	bne.n	800df06 <pbuf_clen+0xe>
  }
  return len;
 800df18:	89fb      	ldrh	r3, [r7, #14]
}
 800df1a:	4618      	mov	r0, r3
 800df1c:	3714      	adds	r7, #20
 800df1e:	46bd      	mov	sp, r7
 800df20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df24:	4770      	bx	lr
	...

0800df28 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800df28:	b580      	push	{r7, lr}
 800df2a:	b084      	sub	sp, #16
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d016      	beq.n	800df64 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800df36:	f009 fb63 	bl	8017600 <sys_arch_protect>
 800df3a:	60f8      	str	r0, [r7, #12]
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	7b9b      	ldrb	r3, [r3, #14]
 800df40:	3301      	adds	r3, #1
 800df42:	b2da      	uxtb	r2, r3
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	739a      	strb	r2, [r3, #14]
 800df48:	68f8      	ldr	r0, [r7, #12]
 800df4a:	f009 fb67 	bl	801761c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	7b9b      	ldrb	r3, [r3, #14]
 800df52:	2b00      	cmp	r3, #0
 800df54:	d106      	bne.n	800df64 <pbuf_ref+0x3c>
 800df56:	4b05      	ldr	r3, [pc, #20]	; (800df6c <pbuf_ref+0x44>)
 800df58:	f240 3242 	movw	r2, #834	; 0x342
 800df5c:	4904      	ldr	r1, [pc, #16]	; (800df70 <pbuf_ref+0x48>)
 800df5e:	4805      	ldr	r0, [pc, #20]	; (800df74 <pbuf_ref+0x4c>)
 800df60:	f00d f8d0 	bl	801b104 <iprintf>
  }
}
 800df64:	bf00      	nop
 800df66:	3710      	adds	r7, #16
 800df68:	46bd      	mov	sp, r7
 800df6a:	bd80      	pop	{r7, pc}
 800df6c:	0801ca88 	.word	0x0801ca88
 800df70:	0801cc68 	.word	0x0801cc68
 800df74:	0801cae8 	.word	0x0801cae8

0800df78 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800df78:	b580      	push	{r7, lr}
 800df7a:	b084      	sub	sp, #16
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	6078      	str	r0, [r7, #4]
 800df80:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	2b00      	cmp	r3, #0
 800df86:	d002      	beq.n	800df8e <pbuf_cat+0x16>
 800df88:	683b      	ldr	r3, [r7, #0]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d107      	bne.n	800df9e <pbuf_cat+0x26>
 800df8e:	4b20      	ldr	r3, [pc, #128]	; (800e010 <pbuf_cat+0x98>)
 800df90:	f240 3259 	movw	r2, #857	; 0x359
 800df94:	491f      	ldr	r1, [pc, #124]	; (800e014 <pbuf_cat+0x9c>)
 800df96:	4820      	ldr	r0, [pc, #128]	; (800e018 <pbuf_cat+0xa0>)
 800df98:	f00d f8b4 	bl	801b104 <iprintf>
 800df9c:	e034      	b.n	800e008 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	60fb      	str	r3, [r7, #12]
 800dfa2:	e00a      	b.n	800dfba <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	891a      	ldrh	r2, [r3, #8]
 800dfa8:	683b      	ldr	r3, [r7, #0]
 800dfaa:	891b      	ldrh	r3, [r3, #8]
 800dfac:	4413      	add	r3, r2
 800dfae:	b29a      	uxth	r2, r3
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	60fb      	str	r3, [r7, #12]
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d1f0      	bne.n	800dfa4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	891a      	ldrh	r2, [r3, #8]
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	895b      	ldrh	r3, [r3, #10]
 800dfca:	429a      	cmp	r2, r3
 800dfcc:	d006      	beq.n	800dfdc <pbuf_cat+0x64>
 800dfce:	4b10      	ldr	r3, [pc, #64]	; (800e010 <pbuf_cat+0x98>)
 800dfd0:	f240 3262 	movw	r2, #866	; 0x362
 800dfd4:	4911      	ldr	r1, [pc, #68]	; (800e01c <pbuf_cat+0xa4>)
 800dfd6:	4810      	ldr	r0, [pc, #64]	; (800e018 <pbuf_cat+0xa0>)
 800dfd8:	f00d f894 	bl	801b104 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d006      	beq.n	800dff2 <pbuf_cat+0x7a>
 800dfe4:	4b0a      	ldr	r3, [pc, #40]	; (800e010 <pbuf_cat+0x98>)
 800dfe6:	f240 3263 	movw	r2, #867	; 0x363
 800dfea:	490d      	ldr	r1, [pc, #52]	; (800e020 <pbuf_cat+0xa8>)
 800dfec:	480a      	ldr	r0, [pc, #40]	; (800e018 <pbuf_cat+0xa0>)
 800dfee:	f00d f889 	bl	801b104 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	891a      	ldrh	r2, [r3, #8]
 800dff6:	683b      	ldr	r3, [r7, #0]
 800dff8:	891b      	ldrh	r3, [r3, #8]
 800dffa:	4413      	add	r3, r2
 800dffc:	b29a      	uxth	r2, r3
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	683a      	ldr	r2, [r7, #0]
 800e006:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800e008:	3710      	adds	r7, #16
 800e00a:	46bd      	mov	sp, r7
 800e00c:	bd80      	pop	{r7, pc}
 800e00e:	bf00      	nop
 800e010:	0801ca88 	.word	0x0801ca88
 800e014:	0801cc7c 	.word	0x0801cc7c
 800e018:	0801cae8 	.word	0x0801cae8
 800e01c:	0801ccb4 	.word	0x0801ccb4
 800e020:	0801cce4 	.word	0x0801cce4

0800e024 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800e024:	b580      	push	{r7, lr}
 800e026:	b086      	sub	sp, #24
 800e028:	af00      	add	r7, sp, #0
 800e02a:	6078      	str	r0, [r7, #4]
 800e02c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800e02e:	2300      	movs	r3, #0
 800e030:	617b      	str	r3, [r7, #20]
 800e032:	2300      	movs	r3, #0
 800e034:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d008      	beq.n	800e04e <pbuf_copy+0x2a>
 800e03c:	683b      	ldr	r3, [r7, #0]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d005      	beq.n	800e04e <pbuf_copy+0x2a>
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	891a      	ldrh	r2, [r3, #8]
 800e046:	683b      	ldr	r3, [r7, #0]
 800e048:	891b      	ldrh	r3, [r3, #8]
 800e04a:	429a      	cmp	r2, r3
 800e04c:	d209      	bcs.n	800e062 <pbuf_copy+0x3e>
 800e04e:	4b57      	ldr	r3, [pc, #348]	; (800e1ac <pbuf_copy+0x188>)
 800e050:	f240 32c9 	movw	r2, #969	; 0x3c9
 800e054:	4956      	ldr	r1, [pc, #344]	; (800e1b0 <pbuf_copy+0x18c>)
 800e056:	4857      	ldr	r0, [pc, #348]	; (800e1b4 <pbuf_copy+0x190>)
 800e058:	f00d f854 	bl	801b104 <iprintf>
 800e05c:	f06f 030f 	mvn.w	r3, #15
 800e060:	e09f      	b.n	800e1a2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	895b      	ldrh	r3, [r3, #10]
 800e066:	461a      	mov	r2, r3
 800e068:	697b      	ldr	r3, [r7, #20]
 800e06a:	1ad2      	subs	r2, r2, r3
 800e06c:	683b      	ldr	r3, [r7, #0]
 800e06e:	895b      	ldrh	r3, [r3, #10]
 800e070:	4619      	mov	r1, r3
 800e072:	693b      	ldr	r3, [r7, #16]
 800e074:	1acb      	subs	r3, r1, r3
 800e076:	429a      	cmp	r2, r3
 800e078:	d306      	bcc.n	800e088 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800e07a:	683b      	ldr	r3, [r7, #0]
 800e07c:	895b      	ldrh	r3, [r3, #10]
 800e07e:	461a      	mov	r2, r3
 800e080:	693b      	ldr	r3, [r7, #16]
 800e082:	1ad3      	subs	r3, r2, r3
 800e084:	60fb      	str	r3, [r7, #12]
 800e086:	e005      	b.n	800e094 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	895b      	ldrh	r3, [r3, #10]
 800e08c:	461a      	mov	r2, r3
 800e08e:	697b      	ldr	r3, [r7, #20]
 800e090:	1ad3      	subs	r3, r2, r3
 800e092:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	685a      	ldr	r2, [r3, #4]
 800e098:	697b      	ldr	r3, [r7, #20]
 800e09a:	18d0      	adds	r0, r2, r3
 800e09c:	683b      	ldr	r3, [r7, #0]
 800e09e:	685a      	ldr	r2, [r3, #4]
 800e0a0:	693b      	ldr	r3, [r7, #16]
 800e0a2:	4413      	add	r3, r2
 800e0a4:	68fa      	ldr	r2, [r7, #12]
 800e0a6:	4619      	mov	r1, r3
 800e0a8:	f00c fccd 	bl	801aa46 <memcpy>
    offset_to += len;
 800e0ac:	697a      	ldr	r2, [r7, #20]
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	4413      	add	r3, r2
 800e0b2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800e0b4:	693a      	ldr	r2, [r7, #16]
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	4413      	add	r3, r2
 800e0ba:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	895b      	ldrh	r3, [r3, #10]
 800e0c0:	461a      	mov	r2, r3
 800e0c2:	697b      	ldr	r3, [r7, #20]
 800e0c4:	4293      	cmp	r3, r2
 800e0c6:	d906      	bls.n	800e0d6 <pbuf_copy+0xb2>
 800e0c8:	4b38      	ldr	r3, [pc, #224]	; (800e1ac <pbuf_copy+0x188>)
 800e0ca:	f240 32d9 	movw	r2, #985	; 0x3d9
 800e0ce:	493a      	ldr	r1, [pc, #232]	; (800e1b8 <pbuf_copy+0x194>)
 800e0d0:	4838      	ldr	r0, [pc, #224]	; (800e1b4 <pbuf_copy+0x190>)
 800e0d2:	f00d f817 	bl	801b104 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800e0d6:	683b      	ldr	r3, [r7, #0]
 800e0d8:	895b      	ldrh	r3, [r3, #10]
 800e0da:	461a      	mov	r2, r3
 800e0dc:	693b      	ldr	r3, [r7, #16]
 800e0de:	4293      	cmp	r3, r2
 800e0e0:	d906      	bls.n	800e0f0 <pbuf_copy+0xcc>
 800e0e2:	4b32      	ldr	r3, [pc, #200]	; (800e1ac <pbuf_copy+0x188>)
 800e0e4:	f240 32da 	movw	r2, #986	; 0x3da
 800e0e8:	4934      	ldr	r1, [pc, #208]	; (800e1bc <pbuf_copy+0x198>)
 800e0ea:	4832      	ldr	r0, [pc, #200]	; (800e1b4 <pbuf_copy+0x190>)
 800e0ec:	f00d f80a 	bl	801b104 <iprintf>
    if (offset_from >= p_from->len) {
 800e0f0:	683b      	ldr	r3, [r7, #0]
 800e0f2:	895b      	ldrh	r3, [r3, #10]
 800e0f4:	461a      	mov	r2, r3
 800e0f6:	693b      	ldr	r3, [r7, #16]
 800e0f8:	4293      	cmp	r3, r2
 800e0fa:	d304      	bcc.n	800e106 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800e100:	683b      	ldr	r3, [r7, #0]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	895b      	ldrh	r3, [r3, #10]
 800e10a:	461a      	mov	r2, r3
 800e10c:	697b      	ldr	r3, [r7, #20]
 800e10e:	4293      	cmp	r3, r2
 800e110:	d114      	bne.n	800e13c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800e112:	2300      	movs	r3, #0
 800e114:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d10c      	bne.n	800e13c <pbuf_copy+0x118>
 800e122:	683b      	ldr	r3, [r7, #0]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d009      	beq.n	800e13c <pbuf_copy+0x118>
 800e128:	4b20      	ldr	r3, [pc, #128]	; (800e1ac <pbuf_copy+0x188>)
 800e12a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800e12e:	4924      	ldr	r1, [pc, #144]	; (800e1c0 <pbuf_copy+0x19c>)
 800e130:	4820      	ldr	r0, [pc, #128]	; (800e1b4 <pbuf_copy+0x190>)
 800e132:	f00c ffe7 	bl	801b104 <iprintf>
 800e136:	f06f 030f 	mvn.w	r3, #15
 800e13a:	e032      	b.n	800e1a2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800e13c:	683b      	ldr	r3, [r7, #0]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d013      	beq.n	800e16a <pbuf_copy+0x146>
 800e142:	683b      	ldr	r3, [r7, #0]
 800e144:	895a      	ldrh	r2, [r3, #10]
 800e146:	683b      	ldr	r3, [r7, #0]
 800e148:	891b      	ldrh	r3, [r3, #8]
 800e14a:	429a      	cmp	r2, r3
 800e14c:	d10d      	bne.n	800e16a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e14e:	683b      	ldr	r3, [r7, #0]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d009      	beq.n	800e16a <pbuf_copy+0x146>
 800e156:	4b15      	ldr	r3, [pc, #84]	; (800e1ac <pbuf_copy+0x188>)
 800e158:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800e15c:	4919      	ldr	r1, [pc, #100]	; (800e1c4 <pbuf_copy+0x1a0>)
 800e15e:	4815      	ldr	r0, [pc, #84]	; (800e1b4 <pbuf_copy+0x190>)
 800e160:	f00c ffd0 	bl	801b104 <iprintf>
 800e164:	f06f 0305 	mvn.w	r3, #5
 800e168:	e01b      	b.n	800e1a2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d013      	beq.n	800e198 <pbuf_copy+0x174>
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	895a      	ldrh	r2, [r3, #10]
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	891b      	ldrh	r3, [r3, #8]
 800e178:	429a      	cmp	r2, r3
 800e17a:	d10d      	bne.n	800e198 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	2b00      	cmp	r3, #0
 800e182:	d009      	beq.n	800e198 <pbuf_copy+0x174>
 800e184:	4b09      	ldr	r3, [pc, #36]	; (800e1ac <pbuf_copy+0x188>)
 800e186:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800e18a:	490e      	ldr	r1, [pc, #56]	; (800e1c4 <pbuf_copy+0x1a0>)
 800e18c:	4809      	ldr	r0, [pc, #36]	; (800e1b4 <pbuf_copy+0x190>)
 800e18e:	f00c ffb9 	bl	801b104 <iprintf>
 800e192:	f06f 0305 	mvn.w	r3, #5
 800e196:	e004      	b.n	800e1a2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800e198:	683b      	ldr	r3, [r7, #0]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	f47f af61 	bne.w	800e062 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800e1a0:	2300      	movs	r3, #0
}
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	3718      	adds	r7, #24
 800e1a6:	46bd      	mov	sp, r7
 800e1a8:	bd80      	pop	{r7, pc}
 800e1aa:	bf00      	nop
 800e1ac:	0801ca88 	.word	0x0801ca88
 800e1b0:	0801cd30 	.word	0x0801cd30
 800e1b4:	0801cae8 	.word	0x0801cae8
 800e1b8:	0801cd60 	.word	0x0801cd60
 800e1bc:	0801cd78 	.word	0x0801cd78
 800e1c0:	0801cd94 	.word	0x0801cd94
 800e1c4:	0801cda4 	.word	0x0801cda4

0800e1c8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b088      	sub	sp, #32
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	60f8      	str	r0, [r7, #12]
 800e1d0:	60b9      	str	r1, [r7, #8]
 800e1d2:	4611      	mov	r1, r2
 800e1d4:	461a      	mov	r2, r3
 800e1d6:	460b      	mov	r3, r1
 800e1d8:	80fb      	strh	r3, [r7, #6]
 800e1da:	4613      	mov	r3, r2
 800e1dc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800e1de:	2300      	movs	r3, #0
 800e1e0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d108      	bne.n	800e1fe <pbuf_copy_partial+0x36>
 800e1ec:	4b2b      	ldr	r3, [pc, #172]	; (800e29c <pbuf_copy_partial+0xd4>)
 800e1ee:	f240 420a 	movw	r2, #1034	; 0x40a
 800e1f2:	492b      	ldr	r1, [pc, #172]	; (800e2a0 <pbuf_copy_partial+0xd8>)
 800e1f4:	482b      	ldr	r0, [pc, #172]	; (800e2a4 <pbuf_copy_partial+0xdc>)
 800e1f6:	f00c ff85 	bl	801b104 <iprintf>
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	e04a      	b.n	800e294 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800e1fe:	68bb      	ldr	r3, [r7, #8]
 800e200:	2b00      	cmp	r3, #0
 800e202:	d108      	bne.n	800e216 <pbuf_copy_partial+0x4e>
 800e204:	4b25      	ldr	r3, [pc, #148]	; (800e29c <pbuf_copy_partial+0xd4>)
 800e206:	f240 420b 	movw	r2, #1035	; 0x40b
 800e20a:	4927      	ldr	r1, [pc, #156]	; (800e2a8 <pbuf_copy_partial+0xe0>)
 800e20c:	4825      	ldr	r0, [pc, #148]	; (800e2a4 <pbuf_copy_partial+0xdc>)
 800e20e:	f00c ff79 	bl	801b104 <iprintf>
 800e212:	2300      	movs	r3, #0
 800e214:	e03e      	b.n	800e294 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	61fb      	str	r3, [r7, #28]
 800e21a:	e034      	b.n	800e286 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800e21c:	88bb      	ldrh	r3, [r7, #4]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d00a      	beq.n	800e238 <pbuf_copy_partial+0x70>
 800e222:	69fb      	ldr	r3, [r7, #28]
 800e224:	895b      	ldrh	r3, [r3, #10]
 800e226:	88ba      	ldrh	r2, [r7, #4]
 800e228:	429a      	cmp	r2, r3
 800e22a:	d305      	bcc.n	800e238 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800e22c:	69fb      	ldr	r3, [r7, #28]
 800e22e:	895b      	ldrh	r3, [r3, #10]
 800e230:	88ba      	ldrh	r2, [r7, #4]
 800e232:	1ad3      	subs	r3, r2, r3
 800e234:	80bb      	strh	r3, [r7, #4]
 800e236:	e023      	b.n	800e280 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800e238:	69fb      	ldr	r3, [r7, #28]
 800e23a:	895a      	ldrh	r2, [r3, #10]
 800e23c:	88bb      	ldrh	r3, [r7, #4]
 800e23e:	1ad3      	subs	r3, r2, r3
 800e240:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800e242:	8b3a      	ldrh	r2, [r7, #24]
 800e244:	88fb      	ldrh	r3, [r7, #6]
 800e246:	429a      	cmp	r2, r3
 800e248:	d901      	bls.n	800e24e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800e24a:	88fb      	ldrh	r3, [r7, #6]
 800e24c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800e24e:	8b7b      	ldrh	r3, [r7, #26]
 800e250:	68ba      	ldr	r2, [r7, #8]
 800e252:	18d0      	adds	r0, r2, r3
 800e254:	69fb      	ldr	r3, [r7, #28]
 800e256:	685a      	ldr	r2, [r3, #4]
 800e258:	88bb      	ldrh	r3, [r7, #4]
 800e25a:	4413      	add	r3, r2
 800e25c:	8b3a      	ldrh	r2, [r7, #24]
 800e25e:	4619      	mov	r1, r3
 800e260:	f00c fbf1 	bl	801aa46 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800e264:	8afa      	ldrh	r2, [r7, #22]
 800e266:	8b3b      	ldrh	r3, [r7, #24]
 800e268:	4413      	add	r3, r2
 800e26a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800e26c:	8b7a      	ldrh	r2, [r7, #26]
 800e26e:	8b3b      	ldrh	r3, [r7, #24]
 800e270:	4413      	add	r3, r2
 800e272:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800e274:	88fa      	ldrh	r2, [r7, #6]
 800e276:	8b3b      	ldrh	r3, [r7, #24]
 800e278:	1ad3      	subs	r3, r2, r3
 800e27a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800e27c:	2300      	movs	r3, #0
 800e27e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e280:	69fb      	ldr	r3, [r7, #28]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	61fb      	str	r3, [r7, #28]
 800e286:	88fb      	ldrh	r3, [r7, #6]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d002      	beq.n	800e292 <pbuf_copy_partial+0xca>
 800e28c:	69fb      	ldr	r3, [r7, #28]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d1c4      	bne.n	800e21c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800e292:	8afb      	ldrh	r3, [r7, #22]
}
 800e294:	4618      	mov	r0, r3
 800e296:	3720      	adds	r7, #32
 800e298:	46bd      	mov	sp, r7
 800e29a:	bd80      	pop	{r7, pc}
 800e29c:	0801ca88 	.word	0x0801ca88
 800e2a0:	0801cdd0 	.word	0x0801cdd0
 800e2a4:	0801cae8 	.word	0x0801cae8
 800e2a8:	0801cdf0 	.word	0x0801cdf0

0800e2ac <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800e2ac:	b580      	push	{r7, lr}
 800e2ae:	b084      	sub	sp, #16
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	4603      	mov	r3, r0
 800e2b4:	603a      	str	r2, [r7, #0]
 800e2b6:	71fb      	strb	r3, [r7, #7]
 800e2b8:	460b      	mov	r3, r1
 800e2ba:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800e2bc:	683b      	ldr	r3, [r7, #0]
 800e2be:	8919      	ldrh	r1, [r3, #8]
 800e2c0:	88ba      	ldrh	r2, [r7, #4]
 800e2c2:	79fb      	ldrb	r3, [r7, #7]
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	f7ff faa5 	bl	800d814 <pbuf_alloc>
 800e2ca:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d101      	bne.n	800e2d6 <pbuf_clone+0x2a>
    return NULL;
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	e011      	b.n	800e2fa <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800e2d6:	6839      	ldr	r1, [r7, #0]
 800e2d8:	68f8      	ldr	r0, [r7, #12]
 800e2da:	f7ff fea3 	bl	800e024 <pbuf_copy>
 800e2de:	4603      	mov	r3, r0
 800e2e0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800e2e2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d006      	beq.n	800e2f8 <pbuf_clone+0x4c>
 800e2ea:	4b06      	ldr	r3, [pc, #24]	; (800e304 <pbuf_clone+0x58>)
 800e2ec:	f240 5224 	movw	r2, #1316	; 0x524
 800e2f0:	4905      	ldr	r1, [pc, #20]	; (800e308 <pbuf_clone+0x5c>)
 800e2f2:	4806      	ldr	r0, [pc, #24]	; (800e30c <pbuf_clone+0x60>)
 800e2f4:	f00c ff06 	bl	801b104 <iprintf>
  return q;
 800e2f8:	68fb      	ldr	r3, [r7, #12]
}
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	3710      	adds	r7, #16
 800e2fe:	46bd      	mov	sp, r7
 800e300:	bd80      	pop	{r7, pc}
 800e302:	bf00      	nop
 800e304:	0801ca88 	.word	0x0801ca88
 800e308:	0801cefc 	.word	0x0801cefc
 800e30c:	0801cae8 	.word	0x0801cae8

0800e310 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800e310:	b580      	push	{r7, lr}
 800e312:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e314:	f00c ff0e 	bl	801b134 <rand>
 800e318:	4603      	mov	r3, r0
 800e31a:	b29b      	uxth	r3, r3
 800e31c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e320:	b29b      	uxth	r3, r3
 800e322:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800e326:	b29a      	uxth	r2, r3
 800e328:	4b01      	ldr	r3, [pc, #4]	; (800e330 <tcp_init+0x20>)
 800e32a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e32c:	bf00      	nop
 800e32e:	bd80      	pop	{r7, pc}
 800e330:	20000010 	.word	0x20000010

0800e334 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800e334:	b580      	push	{r7, lr}
 800e336:	b082      	sub	sp, #8
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	7d1b      	ldrb	r3, [r3, #20]
 800e340:	2b01      	cmp	r3, #1
 800e342:	d105      	bne.n	800e350 <tcp_free+0x1c>
 800e344:	4b06      	ldr	r3, [pc, #24]	; (800e360 <tcp_free+0x2c>)
 800e346:	22d4      	movs	r2, #212	; 0xd4
 800e348:	4906      	ldr	r1, [pc, #24]	; (800e364 <tcp_free+0x30>)
 800e34a:	4807      	ldr	r0, [pc, #28]	; (800e368 <tcp_free+0x34>)
 800e34c:	f00c feda 	bl	801b104 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800e350:	6879      	ldr	r1, [r7, #4]
 800e352:	2001      	movs	r0, #1
 800e354:	f7fe fe9e 	bl	800d094 <memp_free>
}
 800e358:	bf00      	nop
 800e35a:	3708      	adds	r7, #8
 800e35c:	46bd      	mov	sp, r7
 800e35e:	bd80      	pop	{r7, pc}
 800e360:	0801cf88 	.word	0x0801cf88
 800e364:	0801cfb8 	.word	0x0801cfb8
 800e368:	0801cfcc 	.word	0x0801cfcc

0800e36c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800e36c:	b580      	push	{r7, lr}
 800e36e:	b082      	sub	sp, #8
 800e370:	af00      	add	r7, sp, #0
 800e372:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	7d1b      	ldrb	r3, [r3, #20]
 800e378:	2b01      	cmp	r3, #1
 800e37a:	d105      	bne.n	800e388 <tcp_free_listen+0x1c>
 800e37c:	4b06      	ldr	r3, [pc, #24]	; (800e398 <tcp_free_listen+0x2c>)
 800e37e:	22df      	movs	r2, #223	; 0xdf
 800e380:	4906      	ldr	r1, [pc, #24]	; (800e39c <tcp_free_listen+0x30>)
 800e382:	4807      	ldr	r0, [pc, #28]	; (800e3a0 <tcp_free_listen+0x34>)
 800e384:	f00c febe 	bl	801b104 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800e388:	6879      	ldr	r1, [r7, #4]
 800e38a:	2002      	movs	r0, #2
 800e38c:	f7fe fe82 	bl	800d094 <memp_free>
}
 800e390:	bf00      	nop
 800e392:	3708      	adds	r7, #8
 800e394:	46bd      	mov	sp, r7
 800e396:	bd80      	pop	{r7, pc}
 800e398:	0801cf88 	.word	0x0801cf88
 800e39c:	0801cff4 	.word	0x0801cff4
 800e3a0:	0801cfcc 	.word	0x0801cfcc

0800e3a4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800e3a8:	f001 f85c 	bl	800f464 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800e3ac:	4b07      	ldr	r3, [pc, #28]	; (800e3cc <tcp_tmr+0x28>)
 800e3ae:	781b      	ldrb	r3, [r3, #0]
 800e3b0:	3301      	adds	r3, #1
 800e3b2:	b2da      	uxtb	r2, r3
 800e3b4:	4b05      	ldr	r3, [pc, #20]	; (800e3cc <tcp_tmr+0x28>)
 800e3b6:	701a      	strb	r2, [r3, #0]
 800e3b8:	4b04      	ldr	r3, [pc, #16]	; (800e3cc <tcp_tmr+0x28>)
 800e3ba:	781b      	ldrb	r3, [r3, #0]
 800e3bc:	f003 0301 	and.w	r3, r3, #1
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d001      	beq.n	800e3c8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800e3c4:	f000 fd0e 	bl	800ede4 <tcp_slowtmr>
  }
}
 800e3c8:	bf00      	nop
 800e3ca:	bd80      	pop	{r7, pc}
 800e3cc:	20004bc1 	.word	0x20004bc1

0800e3d0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	b084      	sub	sp, #16
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	6078      	str	r0, [r7, #4]
 800e3d8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800e3da:	683b      	ldr	r3, [r7, #0]
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d105      	bne.n	800e3ec <tcp_remove_listener+0x1c>
 800e3e0:	4b0d      	ldr	r3, [pc, #52]	; (800e418 <tcp_remove_listener+0x48>)
 800e3e2:	22ff      	movs	r2, #255	; 0xff
 800e3e4:	490d      	ldr	r1, [pc, #52]	; (800e41c <tcp_remove_listener+0x4c>)
 800e3e6:	480e      	ldr	r0, [pc, #56]	; (800e420 <tcp_remove_listener+0x50>)
 800e3e8:	f00c fe8c 	bl	801b104 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	60fb      	str	r3, [r7, #12]
 800e3f0:	e00a      	b.n	800e408 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e3f6:	683a      	ldr	r2, [r7, #0]
 800e3f8:	429a      	cmp	r2, r3
 800e3fa:	d102      	bne.n	800e402 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	2200      	movs	r2, #0
 800e400:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	68db      	ldr	r3, [r3, #12]
 800e406:	60fb      	str	r3, [r7, #12]
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d1f1      	bne.n	800e3f2 <tcp_remove_listener+0x22>
    }
  }
}
 800e40e:	bf00      	nop
 800e410:	bf00      	nop
 800e412:	3710      	adds	r7, #16
 800e414:	46bd      	mov	sp, r7
 800e416:	bd80      	pop	{r7, pc}
 800e418:	0801cf88 	.word	0x0801cf88
 800e41c:	0801d010 	.word	0x0801d010
 800e420:	0801cfcc 	.word	0x0801cfcc

0800e424 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800e424:	b580      	push	{r7, lr}
 800e426:	b084      	sub	sp, #16
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d106      	bne.n	800e440 <tcp_listen_closed+0x1c>
 800e432:	4b14      	ldr	r3, [pc, #80]	; (800e484 <tcp_listen_closed+0x60>)
 800e434:	f240 1211 	movw	r2, #273	; 0x111
 800e438:	4913      	ldr	r1, [pc, #76]	; (800e488 <tcp_listen_closed+0x64>)
 800e43a:	4814      	ldr	r0, [pc, #80]	; (800e48c <tcp_listen_closed+0x68>)
 800e43c:	f00c fe62 	bl	801b104 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	7d1b      	ldrb	r3, [r3, #20]
 800e444:	2b01      	cmp	r3, #1
 800e446:	d006      	beq.n	800e456 <tcp_listen_closed+0x32>
 800e448:	4b0e      	ldr	r3, [pc, #56]	; (800e484 <tcp_listen_closed+0x60>)
 800e44a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800e44e:	4910      	ldr	r1, [pc, #64]	; (800e490 <tcp_listen_closed+0x6c>)
 800e450:	480e      	ldr	r0, [pc, #56]	; (800e48c <tcp_listen_closed+0x68>)
 800e452:	f00c fe57 	bl	801b104 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e456:	2301      	movs	r3, #1
 800e458:	60fb      	str	r3, [r7, #12]
 800e45a:	e00b      	b.n	800e474 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800e45c:	4a0d      	ldr	r2, [pc, #52]	; (800e494 <tcp_listen_closed+0x70>)
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	6879      	ldr	r1, [r7, #4]
 800e468:	4618      	mov	r0, r3
 800e46a:	f7ff ffb1 	bl	800e3d0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	3301      	adds	r3, #1
 800e472:	60fb      	str	r3, [r7, #12]
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	2b03      	cmp	r3, #3
 800e478:	d9f0      	bls.n	800e45c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800e47a:	bf00      	nop
 800e47c:	bf00      	nop
 800e47e:	3710      	adds	r7, #16
 800e480:	46bd      	mov	sp, r7
 800e482:	bd80      	pop	{r7, pc}
 800e484:	0801cf88 	.word	0x0801cf88
 800e488:	0801d038 	.word	0x0801d038
 800e48c:	0801cfcc 	.word	0x0801cfcc
 800e490:	0801d044 	.word	0x0801d044
 800e494:	0801f12c 	.word	0x0801f12c

0800e498 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800e498:	b5b0      	push	{r4, r5, r7, lr}
 800e49a:	b088      	sub	sp, #32
 800e49c:	af04      	add	r7, sp, #16
 800e49e:	6078      	str	r0, [r7, #4]
 800e4a0:	460b      	mov	r3, r1
 800e4a2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d106      	bne.n	800e4b8 <tcp_close_shutdown+0x20>
 800e4aa:	4b63      	ldr	r3, [pc, #396]	; (800e638 <tcp_close_shutdown+0x1a0>)
 800e4ac:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800e4b0:	4962      	ldr	r1, [pc, #392]	; (800e63c <tcp_close_shutdown+0x1a4>)
 800e4b2:	4863      	ldr	r0, [pc, #396]	; (800e640 <tcp_close_shutdown+0x1a8>)
 800e4b4:	f00c fe26 	bl	801b104 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800e4b8:	78fb      	ldrb	r3, [r7, #3]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d066      	beq.n	800e58c <tcp_close_shutdown+0xf4>
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	7d1b      	ldrb	r3, [r3, #20]
 800e4c2:	2b04      	cmp	r3, #4
 800e4c4:	d003      	beq.n	800e4ce <tcp_close_shutdown+0x36>
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	7d1b      	ldrb	r3, [r3, #20]
 800e4ca:	2b07      	cmp	r3, #7
 800e4cc:	d15e      	bne.n	800e58c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d104      	bne.n	800e4e0 <tcp_close_shutdown+0x48>
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e4da:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e4de:	d055      	beq.n	800e58c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	8b5b      	ldrh	r3, [r3, #26]
 800e4e4:	f003 0310 	and.w	r3, r3, #16
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d106      	bne.n	800e4fa <tcp_close_shutdown+0x62>
 800e4ec:	4b52      	ldr	r3, [pc, #328]	; (800e638 <tcp_close_shutdown+0x1a0>)
 800e4ee:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800e4f2:	4954      	ldr	r1, [pc, #336]	; (800e644 <tcp_close_shutdown+0x1ac>)
 800e4f4:	4852      	ldr	r0, [pc, #328]	; (800e640 <tcp_close_shutdown+0x1a8>)
 800e4f6:	f00c fe05 	bl	801b104 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e502:	687d      	ldr	r5, [r7, #4]
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	3304      	adds	r3, #4
 800e508:	687a      	ldr	r2, [r7, #4]
 800e50a:	8ad2      	ldrh	r2, [r2, #22]
 800e50c:	6879      	ldr	r1, [r7, #4]
 800e50e:	8b09      	ldrh	r1, [r1, #24]
 800e510:	9102      	str	r1, [sp, #8]
 800e512:	9201      	str	r2, [sp, #4]
 800e514:	9300      	str	r3, [sp, #0]
 800e516:	462b      	mov	r3, r5
 800e518:	4622      	mov	r2, r4
 800e51a:	4601      	mov	r1, r0
 800e51c:	6878      	ldr	r0, [r7, #4]
 800e51e:	f005 fd6d 	bl	8013ffc <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800e522:	6878      	ldr	r0, [r7, #4]
 800e524:	f001 fb4e 	bl	800fbc4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800e528:	4b47      	ldr	r3, [pc, #284]	; (800e648 <tcp_close_shutdown+0x1b0>)
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	687a      	ldr	r2, [r7, #4]
 800e52e:	429a      	cmp	r2, r3
 800e530:	d105      	bne.n	800e53e <tcp_close_shutdown+0xa6>
 800e532:	4b45      	ldr	r3, [pc, #276]	; (800e648 <tcp_close_shutdown+0x1b0>)
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	68db      	ldr	r3, [r3, #12]
 800e538:	4a43      	ldr	r2, [pc, #268]	; (800e648 <tcp_close_shutdown+0x1b0>)
 800e53a:	6013      	str	r3, [r2, #0]
 800e53c:	e013      	b.n	800e566 <tcp_close_shutdown+0xce>
 800e53e:	4b42      	ldr	r3, [pc, #264]	; (800e648 <tcp_close_shutdown+0x1b0>)
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	60fb      	str	r3, [r7, #12]
 800e544:	e00c      	b.n	800e560 <tcp_close_shutdown+0xc8>
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	68db      	ldr	r3, [r3, #12]
 800e54a:	687a      	ldr	r2, [r7, #4]
 800e54c:	429a      	cmp	r2, r3
 800e54e:	d104      	bne.n	800e55a <tcp_close_shutdown+0xc2>
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	68da      	ldr	r2, [r3, #12]
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	60da      	str	r2, [r3, #12]
 800e558:	e005      	b.n	800e566 <tcp_close_shutdown+0xce>
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	68db      	ldr	r3, [r3, #12]
 800e55e:	60fb      	str	r3, [r7, #12]
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	2b00      	cmp	r3, #0
 800e564:	d1ef      	bne.n	800e546 <tcp_close_shutdown+0xae>
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	2200      	movs	r2, #0
 800e56a:	60da      	str	r2, [r3, #12]
 800e56c:	4b37      	ldr	r3, [pc, #220]	; (800e64c <tcp_close_shutdown+0x1b4>)
 800e56e:	2201      	movs	r2, #1
 800e570:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800e572:	4b37      	ldr	r3, [pc, #220]	; (800e650 <tcp_close_shutdown+0x1b8>)
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	687a      	ldr	r2, [r7, #4]
 800e578:	429a      	cmp	r2, r3
 800e57a:	d102      	bne.n	800e582 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800e57c:	f003 ffe2 	bl	8012544 <tcp_trigger_input_pcb_close>
 800e580:	e002      	b.n	800e588 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800e582:	6878      	ldr	r0, [r7, #4]
 800e584:	f7ff fed6 	bl	800e334 <tcp_free>
      }
      return ERR_OK;
 800e588:	2300      	movs	r3, #0
 800e58a:	e050      	b.n	800e62e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	7d1b      	ldrb	r3, [r3, #20]
 800e590:	2b02      	cmp	r3, #2
 800e592:	d03b      	beq.n	800e60c <tcp_close_shutdown+0x174>
 800e594:	2b02      	cmp	r3, #2
 800e596:	dc44      	bgt.n	800e622 <tcp_close_shutdown+0x18a>
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d002      	beq.n	800e5a2 <tcp_close_shutdown+0x10a>
 800e59c:	2b01      	cmp	r3, #1
 800e59e:	d02a      	beq.n	800e5f6 <tcp_close_shutdown+0x15e>
 800e5a0:	e03f      	b.n	800e622 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	8adb      	ldrh	r3, [r3, #22]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d021      	beq.n	800e5ee <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e5aa:	4b2a      	ldr	r3, [pc, #168]	; (800e654 <tcp_close_shutdown+0x1bc>)
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	687a      	ldr	r2, [r7, #4]
 800e5b0:	429a      	cmp	r2, r3
 800e5b2:	d105      	bne.n	800e5c0 <tcp_close_shutdown+0x128>
 800e5b4:	4b27      	ldr	r3, [pc, #156]	; (800e654 <tcp_close_shutdown+0x1bc>)
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	68db      	ldr	r3, [r3, #12]
 800e5ba:	4a26      	ldr	r2, [pc, #152]	; (800e654 <tcp_close_shutdown+0x1bc>)
 800e5bc:	6013      	str	r3, [r2, #0]
 800e5be:	e013      	b.n	800e5e8 <tcp_close_shutdown+0x150>
 800e5c0:	4b24      	ldr	r3, [pc, #144]	; (800e654 <tcp_close_shutdown+0x1bc>)
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	60bb      	str	r3, [r7, #8]
 800e5c6:	e00c      	b.n	800e5e2 <tcp_close_shutdown+0x14a>
 800e5c8:	68bb      	ldr	r3, [r7, #8]
 800e5ca:	68db      	ldr	r3, [r3, #12]
 800e5cc:	687a      	ldr	r2, [r7, #4]
 800e5ce:	429a      	cmp	r2, r3
 800e5d0:	d104      	bne.n	800e5dc <tcp_close_shutdown+0x144>
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	68da      	ldr	r2, [r3, #12]
 800e5d6:	68bb      	ldr	r3, [r7, #8]
 800e5d8:	60da      	str	r2, [r3, #12]
 800e5da:	e005      	b.n	800e5e8 <tcp_close_shutdown+0x150>
 800e5dc:	68bb      	ldr	r3, [r7, #8]
 800e5de:	68db      	ldr	r3, [r3, #12]
 800e5e0:	60bb      	str	r3, [r7, #8]
 800e5e2:	68bb      	ldr	r3, [r7, #8]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d1ef      	bne.n	800e5c8 <tcp_close_shutdown+0x130>
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	2200      	movs	r2, #0
 800e5ec:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800e5ee:	6878      	ldr	r0, [r7, #4]
 800e5f0:	f7ff fea0 	bl	800e334 <tcp_free>
      break;
 800e5f4:	e01a      	b.n	800e62c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800e5f6:	6878      	ldr	r0, [r7, #4]
 800e5f8:	f7ff ff14 	bl	800e424 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800e5fc:	6879      	ldr	r1, [r7, #4]
 800e5fe:	4816      	ldr	r0, [pc, #88]	; (800e658 <tcp_close_shutdown+0x1c0>)
 800e600:	f001 fb30 	bl	800fc64 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800e604:	6878      	ldr	r0, [r7, #4]
 800e606:	f7ff feb1 	bl	800e36c <tcp_free_listen>
      break;
 800e60a:	e00f      	b.n	800e62c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e60c:	6879      	ldr	r1, [r7, #4]
 800e60e:	480e      	ldr	r0, [pc, #56]	; (800e648 <tcp_close_shutdown+0x1b0>)
 800e610:	f001 fb28 	bl	800fc64 <tcp_pcb_remove>
 800e614:	4b0d      	ldr	r3, [pc, #52]	; (800e64c <tcp_close_shutdown+0x1b4>)
 800e616:	2201      	movs	r2, #1
 800e618:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800e61a:	6878      	ldr	r0, [r7, #4]
 800e61c:	f7ff fe8a 	bl	800e334 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800e620:	e004      	b.n	800e62c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800e622:	6878      	ldr	r0, [r7, #4]
 800e624:	f000 f81a 	bl	800e65c <tcp_close_shutdown_fin>
 800e628:	4603      	mov	r3, r0
 800e62a:	e000      	b.n	800e62e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800e62c:	2300      	movs	r3, #0
}
 800e62e:	4618      	mov	r0, r3
 800e630:	3710      	adds	r7, #16
 800e632:	46bd      	mov	sp, r7
 800e634:	bdb0      	pop	{r4, r5, r7, pc}
 800e636:	bf00      	nop
 800e638:	0801cf88 	.word	0x0801cf88
 800e63c:	0801d05c 	.word	0x0801d05c
 800e640:	0801cfcc 	.word	0x0801cfcc
 800e644:	0801d07c 	.word	0x0801d07c
 800e648:	2000db1c 	.word	0x2000db1c
 800e64c:	2000db18 	.word	0x2000db18
 800e650:	2000db30 	.word	0x2000db30
 800e654:	2000db28 	.word	0x2000db28
 800e658:	2000db24 	.word	0x2000db24

0800e65c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800e65c:	b580      	push	{r7, lr}
 800e65e:	b084      	sub	sp, #16
 800e660:	af00      	add	r7, sp, #0
 800e662:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d106      	bne.n	800e678 <tcp_close_shutdown_fin+0x1c>
 800e66a:	4b2e      	ldr	r3, [pc, #184]	; (800e724 <tcp_close_shutdown_fin+0xc8>)
 800e66c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800e670:	492d      	ldr	r1, [pc, #180]	; (800e728 <tcp_close_shutdown_fin+0xcc>)
 800e672:	482e      	ldr	r0, [pc, #184]	; (800e72c <tcp_close_shutdown_fin+0xd0>)
 800e674:	f00c fd46 	bl	801b104 <iprintf>

  switch (pcb->state) {
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	7d1b      	ldrb	r3, [r3, #20]
 800e67c:	2b07      	cmp	r3, #7
 800e67e:	d020      	beq.n	800e6c2 <tcp_close_shutdown_fin+0x66>
 800e680:	2b07      	cmp	r3, #7
 800e682:	dc2b      	bgt.n	800e6dc <tcp_close_shutdown_fin+0x80>
 800e684:	2b03      	cmp	r3, #3
 800e686:	d002      	beq.n	800e68e <tcp_close_shutdown_fin+0x32>
 800e688:	2b04      	cmp	r3, #4
 800e68a:	d00d      	beq.n	800e6a8 <tcp_close_shutdown_fin+0x4c>
 800e68c:	e026      	b.n	800e6dc <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800e68e:	6878      	ldr	r0, [r7, #4]
 800e690:	f004 fdc2 	bl	8013218 <tcp_send_fin>
 800e694:	4603      	mov	r3, r0
 800e696:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e698:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d11f      	bne.n	800e6e0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	2205      	movs	r2, #5
 800e6a4:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e6a6:	e01b      	b.n	800e6e0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800e6a8:	6878      	ldr	r0, [r7, #4]
 800e6aa:	f004 fdb5 	bl	8013218 <tcp_send_fin>
 800e6ae:	4603      	mov	r3, r0
 800e6b0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e6b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d114      	bne.n	800e6e4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	2205      	movs	r2, #5
 800e6be:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e6c0:	e010      	b.n	800e6e4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800e6c2:	6878      	ldr	r0, [r7, #4]
 800e6c4:	f004 fda8 	bl	8013218 <tcp_send_fin>
 800e6c8:	4603      	mov	r3, r0
 800e6ca:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e6cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d109      	bne.n	800e6e8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	2209      	movs	r2, #9
 800e6d8:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e6da:	e005      	b.n	800e6e8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800e6dc:	2300      	movs	r3, #0
 800e6de:	e01c      	b.n	800e71a <tcp_close_shutdown_fin+0xbe>
      break;
 800e6e0:	bf00      	nop
 800e6e2:	e002      	b.n	800e6ea <tcp_close_shutdown_fin+0x8e>
      break;
 800e6e4:	bf00      	nop
 800e6e6:	e000      	b.n	800e6ea <tcp_close_shutdown_fin+0x8e>
      break;
 800e6e8:	bf00      	nop
  }

  if (err == ERR_OK) {
 800e6ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d103      	bne.n	800e6fa <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800e6f2:	6878      	ldr	r0, [r7, #4]
 800e6f4:	f004 fece 	bl	8013494 <tcp_output>
 800e6f8:	e00d      	b.n	800e716 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800e6fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e6fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e702:	d108      	bne.n	800e716 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	8b5b      	ldrh	r3, [r3, #26]
 800e708:	f043 0308 	orr.w	r3, r3, #8
 800e70c:	b29a      	uxth	r2, r3
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800e712:	2300      	movs	r3, #0
 800e714:	e001      	b.n	800e71a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800e716:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e71a:	4618      	mov	r0, r3
 800e71c:	3710      	adds	r7, #16
 800e71e:	46bd      	mov	sp, r7
 800e720:	bd80      	pop	{r7, pc}
 800e722:	bf00      	nop
 800e724:	0801cf88 	.word	0x0801cf88
 800e728:	0801d038 	.word	0x0801d038
 800e72c:	0801cfcc 	.word	0x0801cfcc

0800e730 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800e730:	b580      	push	{r7, lr}
 800e732:	b082      	sub	sp, #8
 800e734:	af00      	add	r7, sp, #0
 800e736:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d109      	bne.n	800e752 <tcp_close+0x22>
 800e73e:	4b0f      	ldr	r3, [pc, #60]	; (800e77c <tcp_close+0x4c>)
 800e740:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800e744:	490e      	ldr	r1, [pc, #56]	; (800e780 <tcp_close+0x50>)
 800e746:	480f      	ldr	r0, [pc, #60]	; (800e784 <tcp_close+0x54>)
 800e748:	f00c fcdc 	bl	801b104 <iprintf>
 800e74c:	f06f 030f 	mvn.w	r3, #15
 800e750:	e00f      	b.n	800e772 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	7d1b      	ldrb	r3, [r3, #20]
 800e756:	2b01      	cmp	r3, #1
 800e758:	d006      	beq.n	800e768 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	8b5b      	ldrh	r3, [r3, #26]
 800e75e:	f043 0310 	orr.w	r3, r3, #16
 800e762:	b29a      	uxth	r2, r3
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800e768:	2101      	movs	r1, #1
 800e76a:	6878      	ldr	r0, [r7, #4]
 800e76c:	f7ff fe94 	bl	800e498 <tcp_close_shutdown>
 800e770:	4603      	mov	r3, r0
}
 800e772:	4618      	mov	r0, r3
 800e774:	3708      	adds	r7, #8
 800e776:	46bd      	mov	sp, r7
 800e778:	bd80      	pop	{r7, pc}
 800e77a:	bf00      	nop
 800e77c:	0801cf88 	.word	0x0801cf88
 800e780:	0801d098 	.word	0x0801d098
 800e784:	0801cfcc 	.word	0x0801cfcc

0800e788 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800e788:	b580      	push	{r7, lr}
 800e78a:	b084      	sub	sp, #16
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	60f8      	str	r0, [r7, #12]
 800e790:	60b9      	str	r1, [r7, #8]
 800e792:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d109      	bne.n	800e7ae <tcp_shutdown+0x26>
 800e79a:	4b26      	ldr	r3, [pc, #152]	; (800e834 <tcp_shutdown+0xac>)
 800e79c:	f240 2207 	movw	r2, #519	; 0x207
 800e7a0:	4925      	ldr	r1, [pc, #148]	; (800e838 <tcp_shutdown+0xb0>)
 800e7a2:	4826      	ldr	r0, [pc, #152]	; (800e83c <tcp_shutdown+0xb4>)
 800e7a4:	f00c fcae 	bl	801b104 <iprintf>
 800e7a8:	f06f 030f 	mvn.w	r3, #15
 800e7ac:	e03d      	b.n	800e82a <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	7d1b      	ldrb	r3, [r3, #20]
 800e7b2:	2b01      	cmp	r3, #1
 800e7b4:	d102      	bne.n	800e7bc <tcp_shutdown+0x34>
    return ERR_CONN;
 800e7b6:	f06f 030a 	mvn.w	r3, #10
 800e7ba:	e036      	b.n	800e82a <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800e7bc:	68bb      	ldr	r3, [r7, #8]
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d01b      	beq.n	800e7fa <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	8b5b      	ldrh	r3, [r3, #26]
 800e7c6:	f043 0310 	orr.w	r3, r3, #16
 800e7ca:	b29a      	uxth	r2, r3
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d005      	beq.n	800e7e2 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800e7d6:	2101      	movs	r1, #1
 800e7d8:	68f8      	ldr	r0, [r7, #12]
 800e7da:	f7ff fe5d 	bl	800e498 <tcp_close_shutdown>
 800e7de:	4603      	mov	r3, r0
 800e7e0:	e023      	b.n	800e82a <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d007      	beq.n	800e7fa <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	f7ff faf4 	bl	800dddc <pbuf_free>
      pcb->refused_data = NULL;
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	2200      	movs	r2, #0
 800e7f8:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d013      	beq.n	800e828 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	7d1b      	ldrb	r3, [r3, #20]
 800e804:	2b04      	cmp	r3, #4
 800e806:	dc02      	bgt.n	800e80e <tcp_shutdown+0x86>
 800e808:	2b03      	cmp	r3, #3
 800e80a:	da02      	bge.n	800e812 <tcp_shutdown+0x8a>
 800e80c:	e009      	b.n	800e822 <tcp_shutdown+0x9a>
 800e80e:	2b07      	cmp	r3, #7
 800e810:	d107      	bne.n	800e822 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800e812:	68bb      	ldr	r3, [r7, #8]
 800e814:	b2db      	uxtb	r3, r3
 800e816:	4619      	mov	r1, r3
 800e818:	68f8      	ldr	r0, [r7, #12]
 800e81a:	f7ff fe3d 	bl	800e498 <tcp_close_shutdown>
 800e81e:	4603      	mov	r3, r0
 800e820:	e003      	b.n	800e82a <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800e822:	f06f 030a 	mvn.w	r3, #10
 800e826:	e000      	b.n	800e82a <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800e828:	2300      	movs	r3, #0
}
 800e82a:	4618      	mov	r0, r3
 800e82c:	3710      	adds	r7, #16
 800e82e:	46bd      	mov	sp, r7
 800e830:	bd80      	pop	{r7, pc}
 800e832:	bf00      	nop
 800e834:	0801cf88 	.word	0x0801cf88
 800e838:	0801d0b0 	.word	0x0801d0b0
 800e83c:	0801cfcc 	.word	0x0801cfcc

0800e840 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800e840:	b580      	push	{r7, lr}
 800e842:	b08e      	sub	sp, #56	; 0x38
 800e844:	af04      	add	r7, sp, #16
 800e846:	6078      	str	r0, [r7, #4]
 800e848:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d107      	bne.n	800e860 <tcp_abandon+0x20>
 800e850:	4b52      	ldr	r3, [pc, #328]	; (800e99c <tcp_abandon+0x15c>)
 800e852:	f240 223d 	movw	r2, #573	; 0x23d
 800e856:	4952      	ldr	r1, [pc, #328]	; (800e9a0 <tcp_abandon+0x160>)
 800e858:	4852      	ldr	r0, [pc, #328]	; (800e9a4 <tcp_abandon+0x164>)
 800e85a:	f00c fc53 	bl	801b104 <iprintf>
 800e85e:	e099      	b.n	800e994 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	7d1b      	ldrb	r3, [r3, #20]
 800e864:	2b01      	cmp	r3, #1
 800e866:	d106      	bne.n	800e876 <tcp_abandon+0x36>
 800e868:	4b4c      	ldr	r3, [pc, #304]	; (800e99c <tcp_abandon+0x15c>)
 800e86a:	f44f 7210 	mov.w	r2, #576	; 0x240
 800e86e:	494e      	ldr	r1, [pc, #312]	; (800e9a8 <tcp_abandon+0x168>)
 800e870:	484c      	ldr	r0, [pc, #304]	; (800e9a4 <tcp_abandon+0x164>)
 800e872:	f00c fc47 	bl	801b104 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	7d1b      	ldrb	r3, [r3, #20]
 800e87a:	2b0a      	cmp	r3, #10
 800e87c:	d107      	bne.n	800e88e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800e87e:	6879      	ldr	r1, [r7, #4]
 800e880:	484a      	ldr	r0, [pc, #296]	; (800e9ac <tcp_abandon+0x16c>)
 800e882:	f001 f9ef 	bl	800fc64 <tcp_pcb_remove>
    tcp_free(pcb);
 800e886:	6878      	ldr	r0, [r7, #4]
 800e888:	f7ff fd54 	bl	800e334 <tcp_free>
 800e88c:	e082      	b.n	800e994 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800e88e:	2300      	movs	r3, #0
 800e890:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800e892:	2300      	movs	r3, #0
 800e894:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e89a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8a0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e8a8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	691b      	ldr	r3, [r3, #16]
 800e8ae:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	7d1b      	ldrb	r3, [r3, #20]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d126      	bne.n	800e906 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	8adb      	ldrh	r3, [r3, #22]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d02e      	beq.n	800e91e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e8c0:	4b3b      	ldr	r3, [pc, #236]	; (800e9b0 <tcp_abandon+0x170>)
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	687a      	ldr	r2, [r7, #4]
 800e8c6:	429a      	cmp	r2, r3
 800e8c8:	d105      	bne.n	800e8d6 <tcp_abandon+0x96>
 800e8ca:	4b39      	ldr	r3, [pc, #228]	; (800e9b0 <tcp_abandon+0x170>)
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	68db      	ldr	r3, [r3, #12]
 800e8d0:	4a37      	ldr	r2, [pc, #220]	; (800e9b0 <tcp_abandon+0x170>)
 800e8d2:	6013      	str	r3, [r2, #0]
 800e8d4:	e013      	b.n	800e8fe <tcp_abandon+0xbe>
 800e8d6:	4b36      	ldr	r3, [pc, #216]	; (800e9b0 <tcp_abandon+0x170>)
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	61fb      	str	r3, [r7, #28]
 800e8dc:	e00c      	b.n	800e8f8 <tcp_abandon+0xb8>
 800e8de:	69fb      	ldr	r3, [r7, #28]
 800e8e0:	68db      	ldr	r3, [r3, #12]
 800e8e2:	687a      	ldr	r2, [r7, #4]
 800e8e4:	429a      	cmp	r2, r3
 800e8e6:	d104      	bne.n	800e8f2 <tcp_abandon+0xb2>
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	68da      	ldr	r2, [r3, #12]
 800e8ec:	69fb      	ldr	r3, [r7, #28]
 800e8ee:	60da      	str	r2, [r3, #12]
 800e8f0:	e005      	b.n	800e8fe <tcp_abandon+0xbe>
 800e8f2:	69fb      	ldr	r3, [r7, #28]
 800e8f4:	68db      	ldr	r3, [r3, #12]
 800e8f6:	61fb      	str	r3, [r7, #28]
 800e8f8:	69fb      	ldr	r3, [r7, #28]
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d1ef      	bne.n	800e8de <tcp_abandon+0x9e>
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	2200      	movs	r2, #0
 800e902:	60da      	str	r2, [r3, #12]
 800e904:	e00b      	b.n	800e91e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800e906:	683b      	ldr	r3, [r7, #0]
 800e908:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	8adb      	ldrh	r3, [r3, #22]
 800e90e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e910:	6879      	ldr	r1, [r7, #4]
 800e912:	4828      	ldr	r0, [pc, #160]	; (800e9b4 <tcp_abandon+0x174>)
 800e914:	f001 f9a6 	bl	800fc64 <tcp_pcb_remove>
 800e918:	4b27      	ldr	r3, [pc, #156]	; (800e9b8 <tcp_abandon+0x178>)
 800e91a:	2201      	movs	r2, #1
 800e91c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e922:	2b00      	cmp	r3, #0
 800e924:	d004      	beq.n	800e930 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e92a:	4618      	mov	r0, r3
 800e92c:	f000 fe7a 	bl	800f624 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e934:	2b00      	cmp	r3, #0
 800e936:	d004      	beq.n	800e942 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e93c:	4618      	mov	r0, r3
 800e93e:	f000 fe71 	bl	800f624 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e946:	2b00      	cmp	r3, #0
 800e948:	d004      	beq.n	800e954 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e94e:	4618      	mov	r0, r3
 800e950:	f000 fe68 	bl	800f624 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800e954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e956:	2b00      	cmp	r3, #0
 800e958:	d00e      	beq.n	800e978 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800e95a:	6879      	ldr	r1, [r7, #4]
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	3304      	adds	r3, #4
 800e960:	687a      	ldr	r2, [r7, #4]
 800e962:	8b12      	ldrh	r2, [r2, #24]
 800e964:	9202      	str	r2, [sp, #8]
 800e966:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e968:	9201      	str	r2, [sp, #4]
 800e96a:	9300      	str	r3, [sp, #0]
 800e96c:	460b      	mov	r3, r1
 800e96e:	697a      	ldr	r2, [r7, #20]
 800e970:	69b9      	ldr	r1, [r7, #24]
 800e972:	6878      	ldr	r0, [r7, #4]
 800e974:	f005 fb42 	bl	8013ffc <tcp_rst>
    }
    last_state = pcb->state;
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	7d1b      	ldrb	r3, [r3, #20]
 800e97c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800e97e:	6878      	ldr	r0, [r7, #4]
 800e980:	f7ff fcd8 	bl	800e334 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800e984:	693b      	ldr	r3, [r7, #16]
 800e986:	2b00      	cmp	r3, #0
 800e988:	d004      	beq.n	800e994 <tcp_abandon+0x154>
 800e98a:	693b      	ldr	r3, [r7, #16]
 800e98c:	f06f 010c 	mvn.w	r1, #12
 800e990:	68f8      	ldr	r0, [r7, #12]
 800e992:	4798      	blx	r3
  }
}
 800e994:	3728      	adds	r7, #40	; 0x28
 800e996:	46bd      	mov	sp, r7
 800e998:	bd80      	pop	{r7, pc}
 800e99a:	bf00      	nop
 800e99c:	0801cf88 	.word	0x0801cf88
 800e9a0:	0801d0cc 	.word	0x0801d0cc
 800e9a4:	0801cfcc 	.word	0x0801cfcc
 800e9a8:	0801d0e8 	.word	0x0801d0e8
 800e9ac:	2000db2c 	.word	0x2000db2c
 800e9b0:	2000db28 	.word	0x2000db28
 800e9b4:	2000db1c 	.word	0x2000db1c
 800e9b8:	2000db18 	.word	0x2000db18

0800e9bc <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	b082      	sub	sp, #8
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800e9c4:	2101      	movs	r1, #1
 800e9c6:	6878      	ldr	r0, [r7, #4]
 800e9c8:	f7ff ff3a 	bl	800e840 <tcp_abandon>
}
 800e9cc:	bf00      	nop
 800e9ce:	3708      	adds	r7, #8
 800e9d0:	46bd      	mov	sp, r7
 800e9d2:	bd80      	pop	{r7, pc}

0800e9d4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800e9d4:	b580      	push	{r7, lr}
 800e9d6:	b084      	sub	sp, #16
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d106      	bne.n	800e9f0 <tcp_update_rcv_ann_wnd+0x1c>
 800e9e2:	4b25      	ldr	r3, [pc, #148]	; (800ea78 <tcp_update_rcv_ann_wnd+0xa4>)
 800e9e4:	f240 32a6 	movw	r2, #934	; 0x3a6
 800e9e8:	4924      	ldr	r1, [pc, #144]	; (800ea7c <tcp_update_rcv_ann_wnd+0xa8>)
 800e9ea:	4825      	ldr	r0, [pc, #148]	; (800ea80 <tcp_update_rcv_ann_wnd+0xac>)
 800e9ec:	f00c fb8a 	bl	801b104 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9f4:	687a      	ldr	r2, [r7, #4]
 800e9f6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800e9f8:	4413      	add	r3, r2
 800e9fa:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea00:	687a      	ldr	r2, [r7, #4]
 800ea02:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800ea04:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800ea08:	bf28      	it	cs
 800ea0a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800ea0e:	b292      	uxth	r2, r2
 800ea10:	4413      	add	r3, r2
 800ea12:	68fa      	ldr	r2, [r7, #12]
 800ea14:	1ad3      	subs	r3, r2, r3
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	db08      	blt.n	800ea2c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea26:	68fa      	ldr	r2, [r7, #12]
 800ea28:	1ad3      	subs	r3, r2, r3
 800ea2a:	e020      	b.n	800ea6e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea34:	1ad3      	subs	r3, r2, r3
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	dd03      	ble.n	800ea42 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	2200      	movs	r2, #0
 800ea3e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ea40:	e014      	b.n	800ea6c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea4a:	1ad3      	subs	r3, r2, r3
 800ea4c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800ea4e:	68bb      	ldr	r3, [r7, #8]
 800ea50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ea54:	d306      	bcc.n	800ea64 <tcp_update_rcv_ann_wnd+0x90>
 800ea56:	4b08      	ldr	r3, [pc, #32]	; (800ea78 <tcp_update_rcv_ann_wnd+0xa4>)
 800ea58:	f240 32b6 	movw	r2, #950	; 0x3b6
 800ea5c:	4909      	ldr	r1, [pc, #36]	; (800ea84 <tcp_update_rcv_ann_wnd+0xb0>)
 800ea5e:	4808      	ldr	r0, [pc, #32]	; (800ea80 <tcp_update_rcv_ann_wnd+0xac>)
 800ea60:	f00c fb50 	bl	801b104 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800ea64:	68bb      	ldr	r3, [r7, #8]
 800ea66:	b29a      	uxth	r2, r3
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800ea6c:	2300      	movs	r3, #0
  }
}
 800ea6e:	4618      	mov	r0, r3
 800ea70:	3710      	adds	r7, #16
 800ea72:	46bd      	mov	sp, r7
 800ea74:	bd80      	pop	{r7, pc}
 800ea76:	bf00      	nop
 800ea78:	0801cf88 	.word	0x0801cf88
 800ea7c:	0801d1e4 	.word	0x0801d1e4
 800ea80:	0801cfcc 	.word	0x0801cfcc
 800ea84:	0801d208 	.word	0x0801d208

0800ea88 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800ea88:	b580      	push	{r7, lr}
 800ea8a:	b084      	sub	sp, #16
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	6078      	str	r0, [r7, #4]
 800ea90:	460b      	mov	r3, r1
 800ea92:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d107      	bne.n	800eaaa <tcp_recved+0x22>
 800ea9a:	4b1f      	ldr	r3, [pc, #124]	; (800eb18 <tcp_recved+0x90>)
 800ea9c:	f240 32cf 	movw	r2, #975	; 0x3cf
 800eaa0:	491e      	ldr	r1, [pc, #120]	; (800eb1c <tcp_recved+0x94>)
 800eaa2:	481f      	ldr	r0, [pc, #124]	; (800eb20 <tcp_recved+0x98>)
 800eaa4:	f00c fb2e 	bl	801b104 <iprintf>
 800eaa8:	e032      	b.n	800eb10 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	7d1b      	ldrb	r3, [r3, #20]
 800eaae:	2b01      	cmp	r3, #1
 800eab0:	d106      	bne.n	800eac0 <tcp_recved+0x38>
 800eab2:	4b19      	ldr	r3, [pc, #100]	; (800eb18 <tcp_recved+0x90>)
 800eab4:	f240 32d2 	movw	r2, #978	; 0x3d2
 800eab8:	491a      	ldr	r1, [pc, #104]	; (800eb24 <tcp_recved+0x9c>)
 800eaba:	4819      	ldr	r0, [pc, #100]	; (800eb20 <tcp_recved+0x98>)
 800eabc:	f00c fb22 	bl	801b104 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800eac4:	887b      	ldrh	r3, [r7, #2]
 800eac6:	4413      	add	r3, r2
 800eac8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800eaca:	89fb      	ldrh	r3, [r7, #14]
 800eacc:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ead0:	d804      	bhi.n	800eadc <tcp_recved+0x54>
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ead6:	89fa      	ldrh	r2, [r7, #14]
 800ead8:	429a      	cmp	r2, r3
 800eada:	d204      	bcs.n	800eae6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800eae2:	851a      	strh	r2, [r3, #40]	; 0x28
 800eae4:	e002      	b.n	800eaec <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	89fa      	ldrh	r2, [r7, #14]
 800eaea:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800eaec:	6878      	ldr	r0, [r7, #4]
 800eaee:	f7ff ff71 	bl	800e9d4 <tcp_update_rcv_ann_wnd>
 800eaf2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800eaf4:	68bb      	ldr	r3, [r7, #8]
 800eaf6:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800eafa:	d309      	bcc.n	800eb10 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	8b5b      	ldrh	r3, [r3, #26]
 800eb00:	f043 0302 	orr.w	r3, r3, #2
 800eb04:	b29a      	uxth	r2, r3
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800eb0a:	6878      	ldr	r0, [r7, #4]
 800eb0c:	f004 fcc2 	bl	8013494 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800eb10:	3710      	adds	r7, #16
 800eb12:	46bd      	mov	sp, r7
 800eb14:	bd80      	pop	{r7, pc}
 800eb16:	bf00      	nop
 800eb18:	0801cf88 	.word	0x0801cf88
 800eb1c:	0801d224 	.word	0x0801d224
 800eb20:	0801cfcc 	.word	0x0801cfcc
 800eb24:	0801d23c 	.word	0x0801d23c

0800eb28 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800eb28:	b480      	push	{r7}
 800eb2a:	b083      	sub	sp, #12
 800eb2c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800eb2e:	2300      	movs	r3, #0
 800eb30:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800eb32:	4b1e      	ldr	r3, [pc, #120]	; (800ebac <tcp_new_port+0x84>)
 800eb34:	881b      	ldrh	r3, [r3, #0]
 800eb36:	3301      	adds	r3, #1
 800eb38:	b29a      	uxth	r2, r3
 800eb3a:	4b1c      	ldr	r3, [pc, #112]	; (800ebac <tcp_new_port+0x84>)
 800eb3c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800eb3e:	4b1b      	ldr	r3, [pc, #108]	; (800ebac <tcp_new_port+0x84>)
 800eb40:	881b      	ldrh	r3, [r3, #0]
 800eb42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eb46:	4293      	cmp	r3, r2
 800eb48:	d103      	bne.n	800eb52 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800eb4a:	4b18      	ldr	r3, [pc, #96]	; (800ebac <tcp_new_port+0x84>)
 800eb4c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800eb50:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800eb52:	2300      	movs	r3, #0
 800eb54:	71fb      	strb	r3, [r7, #7]
 800eb56:	e01e      	b.n	800eb96 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800eb58:	79fb      	ldrb	r3, [r7, #7]
 800eb5a:	4a15      	ldr	r2, [pc, #84]	; (800ebb0 <tcp_new_port+0x88>)
 800eb5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	603b      	str	r3, [r7, #0]
 800eb64:	e011      	b.n	800eb8a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800eb66:	683b      	ldr	r3, [r7, #0]
 800eb68:	8ada      	ldrh	r2, [r3, #22]
 800eb6a:	4b10      	ldr	r3, [pc, #64]	; (800ebac <tcp_new_port+0x84>)
 800eb6c:	881b      	ldrh	r3, [r3, #0]
 800eb6e:	429a      	cmp	r2, r3
 800eb70:	d108      	bne.n	800eb84 <tcp_new_port+0x5c>
        n++;
 800eb72:	88bb      	ldrh	r3, [r7, #4]
 800eb74:	3301      	adds	r3, #1
 800eb76:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800eb78:	88bb      	ldrh	r3, [r7, #4]
 800eb7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800eb7e:	d3d8      	bcc.n	800eb32 <tcp_new_port+0xa>
          return 0;
 800eb80:	2300      	movs	r3, #0
 800eb82:	e00d      	b.n	800eba0 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800eb84:	683b      	ldr	r3, [r7, #0]
 800eb86:	68db      	ldr	r3, [r3, #12]
 800eb88:	603b      	str	r3, [r7, #0]
 800eb8a:	683b      	ldr	r3, [r7, #0]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d1ea      	bne.n	800eb66 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800eb90:	79fb      	ldrb	r3, [r7, #7]
 800eb92:	3301      	adds	r3, #1
 800eb94:	71fb      	strb	r3, [r7, #7]
 800eb96:	79fb      	ldrb	r3, [r7, #7]
 800eb98:	2b03      	cmp	r3, #3
 800eb9a:	d9dd      	bls.n	800eb58 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800eb9c:	4b03      	ldr	r3, [pc, #12]	; (800ebac <tcp_new_port+0x84>)
 800eb9e:	881b      	ldrh	r3, [r3, #0]
}
 800eba0:	4618      	mov	r0, r3
 800eba2:	370c      	adds	r7, #12
 800eba4:	46bd      	mov	sp, r7
 800eba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebaa:	4770      	bx	lr
 800ebac:	20000010 	.word	0x20000010
 800ebb0:	0801f12c 	.word	0x0801f12c

0800ebb4 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800ebb4:	b580      	push	{r7, lr}
 800ebb6:	b08a      	sub	sp, #40	; 0x28
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	60f8      	str	r0, [r7, #12]
 800ebbc:	60b9      	str	r1, [r7, #8]
 800ebbe:	603b      	str	r3, [r7, #0]
 800ebc0:	4613      	mov	r3, r2
 800ebc2:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d109      	bne.n	800ebe2 <tcp_connect+0x2e>
 800ebce:	4b7d      	ldr	r3, [pc, #500]	; (800edc4 <tcp_connect+0x210>)
 800ebd0:	f240 4235 	movw	r2, #1077	; 0x435
 800ebd4:	497c      	ldr	r1, [pc, #496]	; (800edc8 <tcp_connect+0x214>)
 800ebd6:	487d      	ldr	r0, [pc, #500]	; (800edcc <tcp_connect+0x218>)
 800ebd8:	f00c fa94 	bl	801b104 <iprintf>
 800ebdc:	f06f 030f 	mvn.w	r3, #15
 800ebe0:	e0ec      	b.n	800edbc <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800ebe2:	68bb      	ldr	r3, [r7, #8]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d109      	bne.n	800ebfc <tcp_connect+0x48>
 800ebe8:	4b76      	ldr	r3, [pc, #472]	; (800edc4 <tcp_connect+0x210>)
 800ebea:	f240 4236 	movw	r2, #1078	; 0x436
 800ebee:	4978      	ldr	r1, [pc, #480]	; (800edd0 <tcp_connect+0x21c>)
 800ebf0:	4876      	ldr	r0, [pc, #472]	; (800edcc <tcp_connect+0x218>)
 800ebf2:	f00c fa87 	bl	801b104 <iprintf>
 800ebf6:	f06f 030f 	mvn.w	r3, #15
 800ebfa:	e0df      	b.n	800edbc <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	7d1b      	ldrb	r3, [r3, #20]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d009      	beq.n	800ec18 <tcp_connect+0x64>
 800ec04:	4b6f      	ldr	r3, [pc, #444]	; (800edc4 <tcp_connect+0x210>)
 800ec06:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800ec0a:	4972      	ldr	r1, [pc, #456]	; (800edd4 <tcp_connect+0x220>)
 800ec0c:	486f      	ldr	r0, [pc, #444]	; (800edcc <tcp_connect+0x218>)
 800ec0e:	f00c fa79 	bl	801b104 <iprintf>
 800ec12:	f06f 0309 	mvn.w	r3, #9
 800ec16:	e0d1      	b.n	800edbc <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800ec18:	68bb      	ldr	r3, [r7, #8]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d002      	beq.n	800ec24 <tcp_connect+0x70>
 800ec1e:	68bb      	ldr	r3, [r7, #8]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	e000      	b.n	800ec26 <tcp_connect+0x72>
 800ec24:	2300      	movs	r3, #0
 800ec26:	68fa      	ldr	r2, [r7, #12]
 800ec28:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	88fa      	ldrh	r2, [r7, #6]
 800ec2e:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	7a1b      	ldrb	r3, [r3, #8]
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d006      	beq.n	800ec46 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	7a1b      	ldrb	r3, [r3, #8]
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	f7fe fd3f 	bl	800d6c0 <netif_get_by_index>
 800ec42:	6278      	str	r0, [r7, #36]	; 0x24
 800ec44:	e005      	b.n	800ec52 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	3304      	adds	r3, #4
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	f007 f95a 	bl	8015f04 <ip4_route>
 800ec50:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 800ec52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d102      	bne.n	800ec5e <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800ec58:	f06f 0303 	mvn.w	r3, #3
 800ec5c:	e0ae      	b.n	800edbc <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d003      	beq.n	800ec6c <tcp_connect+0xb8>
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d111      	bne.n	800ec90 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800ec6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d002      	beq.n	800ec78 <tcp_connect+0xc4>
 800ec72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec74:	3304      	adds	r3, #4
 800ec76:	e000      	b.n	800ec7a <tcp_connect+0xc6>
 800ec78:	2300      	movs	r3, #0
 800ec7a:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800ec7c:	69fb      	ldr	r3, [r7, #28]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d102      	bne.n	800ec88 <tcp_connect+0xd4>
      return ERR_RTE;
 800ec82:	f06f 0303 	mvn.w	r3, #3
 800ec86:	e099      	b.n	800edbc <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800ec88:	69fb      	ldr	r3, [r7, #28]
 800ec8a:	681a      	ldr	r2, [r3, #0]
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	8adb      	ldrh	r3, [r3, #22]
 800ec94:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	8adb      	ldrh	r3, [r3, #22]
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d10c      	bne.n	800ecb8 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800ec9e:	f7ff ff43 	bl	800eb28 <tcp_new_port>
 800eca2:	4603      	mov	r3, r0
 800eca4:	461a      	mov	r2, r3
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	8adb      	ldrh	r3, [r3, #22]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d102      	bne.n	800ecb8 <tcp_connect+0x104>
      return ERR_BUF;
 800ecb2:	f06f 0301 	mvn.w	r3, #1
 800ecb6:	e081      	b.n	800edbc <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800ecb8:	68f8      	ldr	r0, [r7, #12]
 800ecba:	f001 f867 	bl	800fd8c <tcp_next_iss>
 800ecbe:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	2200      	movs	r2, #0
 800ecc4:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	697a      	ldr	r2, [r7, #20]
 800ecca:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 800eccc:	697b      	ldr	r3, [r7, #20]
 800ecce:	1e5a      	subs	r2, r3, #1
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800ecd4:	697b      	ldr	r3, [r7, #20]
 800ecd6:	1e5a      	subs	r2, r3, #1
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 800ecdc:	697b      	ldr	r3, [r7, #20]
 800ecde:	1e5a      	subs	r2, r3, #1
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ecea:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ed02:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ed0c:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	3304      	adds	r3, #4
 800ed16:	461a      	mov	r2, r3
 800ed18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ed1a:	f001 f85d 	bl	800fdd8 <tcp_eff_send_mss_netif>
 800ed1e:	4603      	mov	r3, r0
 800ed20:	461a      	mov	r2, r3
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	2201      	movs	r2, #1
 800ed2a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	683a      	ldr	r2, [r7, #0]
 800ed32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800ed36:	2102      	movs	r1, #2
 800ed38:	68f8      	ldr	r0, [r7, #12]
 800ed3a:	f004 fabd 	bl	80132b8 <tcp_enqueue_flags>
 800ed3e:	4603      	mov	r3, r0
 800ed40:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800ed42:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d136      	bne.n	800edb8 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	2202      	movs	r2, #2
 800ed4e:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800ed50:	8b7b      	ldrh	r3, [r7, #26]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d021      	beq.n	800ed9a <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800ed56:	4b20      	ldr	r3, [pc, #128]	; (800edd8 <tcp_connect+0x224>)
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	68fa      	ldr	r2, [r7, #12]
 800ed5c:	429a      	cmp	r2, r3
 800ed5e:	d105      	bne.n	800ed6c <tcp_connect+0x1b8>
 800ed60:	4b1d      	ldr	r3, [pc, #116]	; (800edd8 <tcp_connect+0x224>)
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	68db      	ldr	r3, [r3, #12]
 800ed66:	4a1c      	ldr	r2, [pc, #112]	; (800edd8 <tcp_connect+0x224>)
 800ed68:	6013      	str	r3, [r2, #0]
 800ed6a:	e013      	b.n	800ed94 <tcp_connect+0x1e0>
 800ed6c:	4b1a      	ldr	r3, [pc, #104]	; (800edd8 <tcp_connect+0x224>)
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	623b      	str	r3, [r7, #32]
 800ed72:	e00c      	b.n	800ed8e <tcp_connect+0x1da>
 800ed74:	6a3b      	ldr	r3, [r7, #32]
 800ed76:	68db      	ldr	r3, [r3, #12]
 800ed78:	68fa      	ldr	r2, [r7, #12]
 800ed7a:	429a      	cmp	r2, r3
 800ed7c:	d104      	bne.n	800ed88 <tcp_connect+0x1d4>
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	68da      	ldr	r2, [r3, #12]
 800ed82:	6a3b      	ldr	r3, [r7, #32]
 800ed84:	60da      	str	r2, [r3, #12]
 800ed86:	e005      	b.n	800ed94 <tcp_connect+0x1e0>
 800ed88:	6a3b      	ldr	r3, [r7, #32]
 800ed8a:	68db      	ldr	r3, [r3, #12]
 800ed8c:	623b      	str	r3, [r7, #32]
 800ed8e:	6a3b      	ldr	r3, [r7, #32]
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d1ef      	bne.n	800ed74 <tcp_connect+0x1c0>
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	2200      	movs	r2, #0
 800ed98:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800ed9a:	4b10      	ldr	r3, [pc, #64]	; (800eddc <tcp_connect+0x228>)
 800ed9c:	681a      	ldr	r2, [r3, #0]
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	60da      	str	r2, [r3, #12]
 800eda2:	4a0e      	ldr	r2, [pc, #56]	; (800eddc <tcp_connect+0x228>)
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	6013      	str	r3, [r2, #0]
 800eda8:	f005 faea 	bl	8014380 <tcp_timer_needed>
 800edac:	4b0c      	ldr	r3, [pc, #48]	; (800ede0 <tcp_connect+0x22c>)
 800edae:	2201      	movs	r2, #1
 800edb0:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800edb2:	68f8      	ldr	r0, [r7, #12]
 800edb4:	f004 fb6e 	bl	8013494 <tcp_output>
  }
  return ret;
 800edb8:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800edbc:	4618      	mov	r0, r3
 800edbe:	3728      	adds	r7, #40	; 0x28
 800edc0:	46bd      	mov	sp, r7
 800edc2:	bd80      	pop	{r7, pc}
 800edc4:	0801cf88 	.word	0x0801cf88
 800edc8:	0801d264 	.word	0x0801d264
 800edcc:	0801cfcc 	.word	0x0801cfcc
 800edd0:	0801d280 	.word	0x0801d280
 800edd4:	0801d29c 	.word	0x0801d29c
 800edd8:	2000db28 	.word	0x2000db28
 800eddc:	2000db1c 	.word	0x2000db1c
 800ede0:	2000db18 	.word	0x2000db18

0800ede4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800ede4:	b5b0      	push	{r4, r5, r7, lr}
 800ede6:	b090      	sub	sp, #64	; 0x40
 800ede8:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800edea:	2300      	movs	r3, #0
 800edec:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800edf0:	4b94      	ldr	r3, [pc, #592]	; (800f044 <tcp_slowtmr+0x260>)
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	3301      	adds	r3, #1
 800edf6:	4a93      	ldr	r2, [pc, #588]	; (800f044 <tcp_slowtmr+0x260>)
 800edf8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800edfa:	4b93      	ldr	r3, [pc, #588]	; (800f048 <tcp_slowtmr+0x264>)
 800edfc:	781b      	ldrb	r3, [r3, #0]
 800edfe:	3301      	adds	r3, #1
 800ee00:	b2da      	uxtb	r2, r3
 800ee02:	4b91      	ldr	r3, [pc, #580]	; (800f048 <tcp_slowtmr+0x264>)
 800ee04:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800ee06:	2300      	movs	r3, #0
 800ee08:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800ee0a:	4b90      	ldr	r3, [pc, #576]	; (800f04c <tcp_slowtmr+0x268>)
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800ee10:	e29d      	b.n	800f34e <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800ee12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee14:	7d1b      	ldrb	r3, [r3, #20]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d106      	bne.n	800ee28 <tcp_slowtmr+0x44>
 800ee1a:	4b8d      	ldr	r3, [pc, #564]	; (800f050 <tcp_slowtmr+0x26c>)
 800ee1c:	f240 42be 	movw	r2, #1214	; 0x4be
 800ee20:	498c      	ldr	r1, [pc, #560]	; (800f054 <tcp_slowtmr+0x270>)
 800ee22:	488d      	ldr	r0, [pc, #564]	; (800f058 <tcp_slowtmr+0x274>)
 800ee24:	f00c f96e 	bl	801b104 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800ee28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee2a:	7d1b      	ldrb	r3, [r3, #20]
 800ee2c:	2b01      	cmp	r3, #1
 800ee2e:	d106      	bne.n	800ee3e <tcp_slowtmr+0x5a>
 800ee30:	4b87      	ldr	r3, [pc, #540]	; (800f050 <tcp_slowtmr+0x26c>)
 800ee32:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800ee36:	4989      	ldr	r1, [pc, #548]	; (800f05c <tcp_slowtmr+0x278>)
 800ee38:	4887      	ldr	r0, [pc, #540]	; (800f058 <tcp_slowtmr+0x274>)
 800ee3a:	f00c f963 	bl	801b104 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800ee3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee40:	7d1b      	ldrb	r3, [r3, #20]
 800ee42:	2b0a      	cmp	r3, #10
 800ee44:	d106      	bne.n	800ee54 <tcp_slowtmr+0x70>
 800ee46:	4b82      	ldr	r3, [pc, #520]	; (800f050 <tcp_slowtmr+0x26c>)
 800ee48:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800ee4c:	4984      	ldr	r1, [pc, #528]	; (800f060 <tcp_slowtmr+0x27c>)
 800ee4e:	4882      	ldr	r0, [pc, #520]	; (800f058 <tcp_slowtmr+0x274>)
 800ee50:	f00c f958 	bl	801b104 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800ee54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee56:	7f9a      	ldrb	r2, [r3, #30]
 800ee58:	4b7b      	ldr	r3, [pc, #492]	; (800f048 <tcp_slowtmr+0x264>)
 800ee5a:	781b      	ldrb	r3, [r3, #0]
 800ee5c:	429a      	cmp	r2, r3
 800ee5e:	d105      	bne.n	800ee6c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800ee60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee62:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ee64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee66:	68db      	ldr	r3, [r3, #12]
 800ee68:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800ee6a:	e270      	b.n	800f34e <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800ee6c:	4b76      	ldr	r3, [pc, #472]	; (800f048 <tcp_slowtmr+0x264>)
 800ee6e:	781a      	ldrb	r2, [r3, #0]
 800ee70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee72:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800ee74:	2300      	movs	r3, #0
 800ee76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800ee7a:	2300      	movs	r3, #0
 800ee7c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800ee80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee82:	7d1b      	ldrb	r3, [r3, #20]
 800ee84:	2b02      	cmp	r3, #2
 800ee86:	d10a      	bne.n	800ee9e <tcp_slowtmr+0xba>
 800ee88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee8a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ee8e:	2b05      	cmp	r3, #5
 800ee90:	d905      	bls.n	800ee9e <tcp_slowtmr+0xba>
      ++pcb_remove;
 800ee92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee96:	3301      	adds	r3, #1
 800ee98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ee9c:	e11e      	b.n	800f0dc <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800ee9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eea0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800eea4:	2b0b      	cmp	r3, #11
 800eea6:	d905      	bls.n	800eeb4 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800eea8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eeac:	3301      	adds	r3, #1
 800eeae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800eeb2:	e113      	b.n	800f0dc <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800eeb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeb6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d075      	beq.n	800efaa <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800eebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d006      	beq.n	800eed4 <tcp_slowtmr+0xf0>
 800eec6:	4b62      	ldr	r3, [pc, #392]	; (800f050 <tcp_slowtmr+0x26c>)
 800eec8:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800eecc:	4965      	ldr	r1, [pc, #404]	; (800f064 <tcp_slowtmr+0x280>)
 800eece:	4862      	ldr	r0, [pc, #392]	; (800f058 <tcp_slowtmr+0x274>)
 800eed0:	f00c f918 	bl	801b104 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800eed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eed6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d106      	bne.n	800eeea <tcp_slowtmr+0x106>
 800eedc:	4b5c      	ldr	r3, [pc, #368]	; (800f050 <tcp_slowtmr+0x26c>)
 800eede:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800eee2:	4961      	ldr	r1, [pc, #388]	; (800f068 <tcp_slowtmr+0x284>)
 800eee4:	485c      	ldr	r0, [pc, #368]	; (800f058 <tcp_slowtmr+0x274>)
 800eee6:	f00c f90d 	bl	801b104 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800eeea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeec:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800eef0:	2b0b      	cmp	r3, #11
 800eef2:	d905      	bls.n	800ef00 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800eef4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eef8:	3301      	adds	r3, #1
 800eefa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800eefe:	e0ed      	b.n	800f0dc <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800ef00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef02:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ef06:	3b01      	subs	r3, #1
 800ef08:	4a58      	ldr	r2, [pc, #352]	; (800f06c <tcp_slowtmr+0x288>)
 800ef0a:	5cd3      	ldrb	r3, [r2, r3]
 800ef0c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800ef0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef10:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ef14:	7c7a      	ldrb	r2, [r7, #17]
 800ef16:	429a      	cmp	r2, r3
 800ef18:	d907      	bls.n	800ef2a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800ef1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef1c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ef20:	3301      	adds	r3, #1
 800ef22:	b2da      	uxtb	r2, r3
 800ef24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef26:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800ef2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef2c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ef30:	7c7a      	ldrb	r2, [r7, #17]
 800ef32:	429a      	cmp	r2, r3
 800ef34:	f200 80d2 	bhi.w	800f0dc <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800ef38:	2301      	movs	r3, #1
 800ef3a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800ef3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef3e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d108      	bne.n	800ef58 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800ef46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ef48:	f005 f94c 	bl	80141e4 <tcp_zero_window_probe>
 800ef4c:	4603      	mov	r3, r0
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d014      	beq.n	800ef7c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800ef52:	2300      	movs	r3, #0
 800ef54:	623b      	str	r3, [r7, #32]
 800ef56:	e011      	b.n	800ef7c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800ef58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef5a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ef5e:	4619      	mov	r1, r3
 800ef60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ef62:	f004 f811 	bl	8012f88 <tcp_split_unsent_seg>
 800ef66:	4603      	mov	r3, r0
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d107      	bne.n	800ef7c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800ef6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ef6e:	f004 fa91 	bl	8013494 <tcp_output>
 800ef72:	4603      	mov	r3, r0
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d101      	bne.n	800ef7c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800ef78:	2300      	movs	r3, #0
 800ef7a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800ef7c:	6a3b      	ldr	r3, [r7, #32]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	f000 80ac 	beq.w	800f0dc <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800ef84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef86:	2200      	movs	r2, #0
 800ef88:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800ef8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef8e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ef92:	2b06      	cmp	r3, #6
 800ef94:	f200 80a2 	bhi.w	800f0dc <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800ef98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef9a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ef9e:	3301      	adds	r3, #1
 800efa0:	b2da      	uxtb	r2, r3
 800efa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efa4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800efa8:	e098      	b.n	800f0dc <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800efaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efac:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	db0f      	blt.n	800efd4 <tcp_slowtmr+0x1f0>
 800efb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efb6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800efba:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800efbe:	4293      	cmp	r3, r2
 800efc0:	d008      	beq.n	800efd4 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800efc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efc4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800efc8:	b29b      	uxth	r3, r3
 800efca:	3301      	adds	r3, #1
 800efcc:	b29b      	uxth	r3, r3
 800efce:	b21a      	sxth	r2, r3
 800efd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efd2:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800efd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efd6:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800efda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efdc:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800efe0:	429a      	cmp	r2, r3
 800efe2:	db7b      	blt.n	800f0dc <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800efe4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800efe6:	f004 fd47 	bl	8013a78 <tcp_rexmit_rto_prepare>
 800efea:	4603      	mov	r3, r0
 800efec:	2b00      	cmp	r3, #0
 800efee:	d007      	beq.n	800f000 <tcp_slowtmr+0x21c>
 800eff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d171      	bne.n	800f0dc <tcp_slowtmr+0x2f8>
 800eff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800effa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800effc:	2b00      	cmp	r3, #0
 800effe:	d06d      	beq.n	800f0dc <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800f000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f002:	7d1b      	ldrb	r3, [r3, #20]
 800f004:	2b02      	cmp	r3, #2
 800f006:	d03a      	beq.n	800f07e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800f008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f00a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f00e:	2b0c      	cmp	r3, #12
 800f010:	bf28      	it	cs
 800f012:	230c      	movcs	r3, #12
 800f014:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800f016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f018:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f01c:	10db      	asrs	r3, r3, #3
 800f01e:	b21b      	sxth	r3, r3
 800f020:	461a      	mov	r2, r3
 800f022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f024:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f028:	4413      	add	r3, r2
 800f02a:	7efa      	ldrb	r2, [r7, #27]
 800f02c:	4910      	ldr	r1, [pc, #64]	; (800f070 <tcp_slowtmr+0x28c>)
 800f02e:	5c8a      	ldrb	r2, [r1, r2]
 800f030:	4093      	lsls	r3, r2
 800f032:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800f034:	697b      	ldr	r3, [r7, #20]
 800f036:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800f03a:	4293      	cmp	r3, r2
 800f03c:	dc1a      	bgt.n	800f074 <tcp_slowtmr+0x290>
 800f03e:	697b      	ldr	r3, [r7, #20]
 800f040:	b21a      	sxth	r2, r3
 800f042:	e019      	b.n	800f078 <tcp_slowtmr+0x294>
 800f044:	2000db20 	.word	0x2000db20
 800f048:	20004bc2 	.word	0x20004bc2
 800f04c:	2000db1c 	.word	0x2000db1c
 800f050:	0801cf88 	.word	0x0801cf88
 800f054:	0801d2cc 	.word	0x0801d2cc
 800f058:	0801cfcc 	.word	0x0801cfcc
 800f05c:	0801d2f8 	.word	0x0801d2f8
 800f060:	0801d324 	.word	0x0801d324
 800f064:	0801d354 	.word	0x0801d354
 800f068:	0801d388 	.word	0x0801d388
 800f06c:	0801f124 	.word	0x0801f124
 800f070:	0801f114 	.word	0x0801f114
 800f074:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f07a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800f07e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f080:	2200      	movs	r2, #0
 800f082:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800f084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f086:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f08a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f08c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f090:	4293      	cmp	r3, r2
 800f092:	bf28      	it	cs
 800f094:	4613      	movcs	r3, r2
 800f096:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800f098:	8a7b      	ldrh	r3, [r7, #18]
 800f09a:	085b      	lsrs	r3, r3, #1
 800f09c:	b29a      	uxth	r2, r3
 800f09e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0a0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800f0a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0a6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f0aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f0ae:	005b      	lsls	r3, r3, #1
 800f0b0:	b29b      	uxth	r3, r3
 800f0b2:	429a      	cmp	r2, r3
 800f0b4:	d206      	bcs.n	800f0c4 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800f0b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f0ba:	005b      	lsls	r3, r3, #1
 800f0bc:	b29a      	uxth	r2, r3
 800f0be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0c0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800f0c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0c6:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800f0c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0ca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800f0ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0d0:	2200      	movs	r2, #0
 800f0d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800f0d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f0d8:	f004 fd3e 	bl	8013b58 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800f0dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0de:	7d1b      	ldrb	r3, [r3, #20]
 800f0e0:	2b06      	cmp	r3, #6
 800f0e2:	d111      	bne.n	800f108 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800f0e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0e6:	8b5b      	ldrh	r3, [r3, #26]
 800f0e8:	f003 0310 	and.w	r3, r3, #16
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d00b      	beq.n	800f108 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f0f0:	4b9c      	ldr	r3, [pc, #624]	; (800f364 <tcp_slowtmr+0x580>)
 800f0f2:	681a      	ldr	r2, [r3, #0]
 800f0f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0f6:	6a1b      	ldr	r3, [r3, #32]
 800f0f8:	1ad3      	subs	r3, r2, r3
 800f0fa:	2b28      	cmp	r3, #40	; 0x28
 800f0fc:	d904      	bls.n	800f108 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800f0fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f102:	3301      	adds	r3, #1
 800f104:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f10a:	7a5b      	ldrb	r3, [r3, #9]
 800f10c:	f003 0308 	and.w	r3, r3, #8
 800f110:	2b00      	cmp	r3, #0
 800f112:	d04a      	beq.n	800f1aa <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800f114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f116:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f118:	2b04      	cmp	r3, #4
 800f11a:	d003      	beq.n	800f124 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800f11c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f11e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800f120:	2b07      	cmp	r3, #7
 800f122:	d142      	bne.n	800f1aa <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f124:	4b8f      	ldr	r3, [pc, #572]	; (800f364 <tcp_slowtmr+0x580>)
 800f126:	681a      	ldr	r2, [r3, #0]
 800f128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f12a:	6a1b      	ldr	r3, [r3, #32]
 800f12c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800f12e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f130:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800f134:	4b8c      	ldr	r3, [pc, #560]	; (800f368 <tcp_slowtmr+0x584>)
 800f136:	440b      	add	r3, r1
 800f138:	498c      	ldr	r1, [pc, #560]	; (800f36c <tcp_slowtmr+0x588>)
 800f13a:	fba1 1303 	umull	r1, r3, r1, r3
 800f13e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f140:	429a      	cmp	r2, r3
 800f142:	d90a      	bls.n	800f15a <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800f144:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f148:	3301      	adds	r3, #1
 800f14a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800f14e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f152:	3301      	adds	r3, #1
 800f154:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f158:	e027      	b.n	800f1aa <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f15a:	4b82      	ldr	r3, [pc, #520]	; (800f364 <tcp_slowtmr+0x580>)
 800f15c:	681a      	ldr	r2, [r3, #0]
 800f15e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f160:	6a1b      	ldr	r3, [r3, #32]
 800f162:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800f164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f166:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800f16a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f16c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800f170:	4618      	mov	r0, r3
 800f172:	4b7f      	ldr	r3, [pc, #508]	; (800f370 <tcp_slowtmr+0x58c>)
 800f174:	fb03 f300 	mul.w	r3, r3, r0
 800f178:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800f17a:	497c      	ldr	r1, [pc, #496]	; (800f36c <tcp_slowtmr+0x588>)
 800f17c:	fba1 1303 	umull	r1, r3, r1, r3
 800f180:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f182:	429a      	cmp	r2, r3
 800f184:	d911      	bls.n	800f1aa <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800f186:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f188:	f004 ffec 	bl	8014164 <tcp_keepalive>
 800f18c:	4603      	mov	r3, r0
 800f18e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800f192:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800f196:	2b00      	cmp	r3, #0
 800f198:	d107      	bne.n	800f1aa <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800f19a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f19c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800f1a0:	3301      	adds	r3, #1
 800f1a2:	b2da      	uxtb	r2, r3
 800f1a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1a6:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800f1aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d011      	beq.n	800f1d6 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800f1b2:	4b6c      	ldr	r3, [pc, #432]	; (800f364 <tcp_slowtmr+0x580>)
 800f1b4:	681a      	ldr	r2, [r3, #0]
 800f1b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1b8:	6a1b      	ldr	r3, [r3, #32]
 800f1ba:	1ad2      	subs	r2, r2, r3
 800f1bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1be:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800f1c2:	4619      	mov	r1, r3
 800f1c4:	460b      	mov	r3, r1
 800f1c6:	005b      	lsls	r3, r3, #1
 800f1c8:	440b      	add	r3, r1
 800f1ca:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800f1cc:	429a      	cmp	r2, r3
 800f1ce:	d302      	bcc.n	800f1d6 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800f1d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f1d2:	f000 feab 	bl	800ff2c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800f1d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1d8:	7d1b      	ldrb	r3, [r3, #20]
 800f1da:	2b03      	cmp	r3, #3
 800f1dc:	d10b      	bne.n	800f1f6 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f1de:	4b61      	ldr	r3, [pc, #388]	; (800f364 <tcp_slowtmr+0x580>)
 800f1e0:	681a      	ldr	r2, [r3, #0]
 800f1e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1e4:	6a1b      	ldr	r3, [r3, #32]
 800f1e6:	1ad3      	subs	r3, r2, r3
 800f1e8:	2b28      	cmp	r3, #40	; 0x28
 800f1ea:	d904      	bls.n	800f1f6 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800f1ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f1f0:	3301      	adds	r3, #1
 800f1f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800f1f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1f8:	7d1b      	ldrb	r3, [r3, #20]
 800f1fa:	2b09      	cmp	r3, #9
 800f1fc:	d10b      	bne.n	800f216 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f1fe:	4b59      	ldr	r3, [pc, #356]	; (800f364 <tcp_slowtmr+0x580>)
 800f200:	681a      	ldr	r2, [r3, #0]
 800f202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f204:	6a1b      	ldr	r3, [r3, #32]
 800f206:	1ad3      	subs	r3, r2, r3
 800f208:	2bf0      	cmp	r3, #240	; 0xf0
 800f20a:	d904      	bls.n	800f216 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800f20c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f210:	3301      	adds	r3, #1
 800f212:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f216:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d060      	beq.n	800f2e0 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800f21e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f224:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800f226:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f228:	f000 fccc 	bl	800fbc4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800f22c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d010      	beq.n	800f254 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800f232:	4b50      	ldr	r3, [pc, #320]	; (800f374 <tcp_slowtmr+0x590>)
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f238:	429a      	cmp	r2, r3
 800f23a:	d106      	bne.n	800f24a <tcp_slowtmr+0x466>
 800f23c:	4b4e      	ldr	r3, [pc, #312]	; (800f378 <tcp_slowtmr+0x594>)
 800f23e:	f240 526d 	movw	r2, #1389	; 0x56d
 800f242:	494e      	ldr	r1, [pc, #312]	; (800f37c <tcp_slowtmr+0x598>)
 800f244:	484e      	ldr	r0, [pc, #312]	; (800f380 <tcp_slowtmr+0x59c>)
 800f246:	f00b ff5d 	bl	801b104 <iprintf>
        prev->next = pcb->next;
 800f24a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f24c:	68da      	ldr	r2, [r3, #12]
 800f24e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f250:	60da      	str	r2, [r3, #12]
 800f252:	e00f      	b.n	800f274 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800f254:	4b47      	ldr	r3, [pc, #284]	; (800f374 <tcp_slowtmr+0x590>)
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f25a:	429a      	cmp	r2, r3
 800f25c:	d006      	beq.n	800f26c <tcp_slowtmr+0x488>
 800f25e:	4b46      	ldr	r3, [pc, #280]	; (800f378 <tcp_slowtmr+0x594>)
 800f260:	f240 5271 	movw	r2, #1393	; 0x571
 800f264:	4947      	ldr	r1, [pc, #284]	; (800f384 <tcp_slowtmr+0x5a0>)
 800f266:	4846      	ldr	r0, [pc, #280]	; (800f380 <tcp_slowtmr+0x59c>)
 800f268:	f00b ff4c 	bl	801b104 <iprintf>
        tcp_active_pcbs = pcb->next;
 800f26c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f26e:	68db      	ldr	r3, [r3, #12]
 800f270:	4a40      	ldr	r2, [pc, #256]	; (800f374 <tcp_slowtmr+0x590>)
 800f272:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800f274:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d013      	beq.n	800f2a4 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f27c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f27e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800f280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f282:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800f284:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800f286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f288:	3304      	adds	r3, #4
 800f28a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f28c:	8ad2      	ldrh	r2, [r2, #22]
 800f28e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f290:	8b09      	ldrh	r1, [r1, #24]
 800f292:	9102      	str	r1, [sp, #8]
 800f294:	9201      	str	r2, [sp, #4]
 800f296:	9300      	str	r3, [sp, #0]
 800f298:	462b      	mov	r3, r5
 800f29a:	4622      	mov	r2, r4
 800f29c:	4601      	mov	r1, r0
 800f29e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f2a0:	f004 feac 	bl	8013ffc <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800f2a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2a6:	691b      	ldr	r3, [r3, #16]
 800f2a8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800f2aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2ac:	7d1b      	ldrb	r3, [r3, #20]
 800f2ae:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800f2b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2b2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800f2b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2b6:	68db      	ldr	r3, [r3, #12]
 800f2b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800f2ba:	6838      	ldr	r0, [r7, #0]
 800f2bc:	f7ff f83a 	bl	800e334 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800f2c0:	4b31      	ldr	r3, [pc, #196]	; (800f388 <tcp_slowtmr+0x5a4>)
 800f2c2:	2200      	movs	r2, #0
 800f2c4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d004      	beq.n	800f2d6 <tcp_slowtmr+0x4f2>
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	f06f 010c 	mvn.w	r1, #12
 800f2d2:	68b8      	ldr	r0, [r7, #8]
 800f2d4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800f2d6:	4b2c      	ldr	r3, [pc, #176]	; (800f388 <tcp_slowtmr+0x5a4>)
 800f2d8:	781b      	ldrb	r3, [r3, #0]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d037      	beq.n	800f34e <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800f2de:	e592      	b.n	800ee06 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800f2e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2e2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f2e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2e6:	68db      	ldr	r3, [r3, #12]
 800f2e8:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800f2ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2ec:	7f1b      	ldrb	r3, [r3, #28]
 800f2ee:	3301      	adds	r3, #1
 800f2f0:	b2da      	uxtb	r2, r3
 800f2f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2f4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800f2f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2f8:	7f1a      	ldrb	r2, [r3, #28]
 800f2fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2fc:	7f5b      	ldrb	r3, [r3, #29]
 800f2fe:	429a      	cmp	r2, r3
 800f300:	d325      	bcc.n	800f34e <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800f302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f304:	2200      	movs	r2, #0
 800f306:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800f308:	4b1f      	ldr	r3, [pc, #124]	; (800f388 <tcp_slowtmr+0x5a4>)
 800f30a:	2200      	movs	r2, #0
 800f30c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800f30e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f310:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f314:	2b00      	cmp	r3, #0
 800f316:	d00b      	beq.n	800f330 <tcp_slowtmr+0x54c>
 800f318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f31a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f31e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f320:	6912      	ldr	r2, [r2, #16]
 800f322:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f324:	4610      	mov	r0, r2
 800f326:	4798      	blx	r3
 800f328:	4603      	mov	r3, r0
 800f32a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800f32e:	e002      	b.n	800f336 <tcp_slowtmr+0x552>
 800f330:	2300      	movs	r3, #0
 800f332:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800f336:	4b14      	ldr	r3, [pc, #80]	; (800f388 <tcp_slowtmr+0x5a4>)
 800f338:	781b      	ldrb	r3, [r3, #0]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d000      	beq.n	800f340 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800f33e:	e562      	b.n	800ee06 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800f340:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800f344:	2b00      	cmp	r3, #0
 800f346:	d102      	bne.n	800f34e <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800f348:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f34a:	f004 f8a3 	bl	8013494 <tcp_output>
  while (pcb != NULL) {
 800f34e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f350:	2b00      	cmp	r3, #0
 800f352:	f47f ad5e 	bne.w	800ee12 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800f356:	2300      	movs	r3, #0
 800f358:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800f35a:	4b0c      	ldr	r3, [pc, #48]	; (800f38c <tcp_slowtmr+0x5a8>)
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800f360:	e069      	b.n	800f436 <tcp_slowtmr+0x652>
 800f362:	bf00      	nop
 800f364:	2000db20 	.word	0x2000db20
 800f368:	000a4cb8 	.word	0x000a4cb8
 800f36c:	10624dd3 	.word	0x10624dd3
 800f370:	000124f8 	.word	0x000124f8
 800f374:	2000db1c 	.word	0x2000db1c
 800f378:	0801cf88 	.word	0x0801cf88
 800f37c:	0801d3c0 	.word	0x0801d3c0
 800f380:	0801cfcc 	.word	0x0801cfcc
 800f384:	0801d3ec 	.word	0x0801d3ec
 800f388:	2000db18 	.word	0x2000db18
 800f38c:	2000db2c 	.word	0x2000db2c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f392:	7d1b      	ldrb	r3, [r3, #20]
 800f394:	2b0a      	cmp	r3, #10
 800f396:	d006      	beq.n	800f3a6 <tcp_slowtmr+0x5c2>
 800f398:	4b2b      	ldr	r3, [pc, #172]	; (800f448 <tcp_slowtmr+0x664>)
 800f39a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800f39e:	492b      	ldr	r1, [pc, #172]	; (800f44c <tcp_slowtmr+0x668>)
 800f3a0:	482b      	ldr	r0, [pc, #172]	; (800f450 <tcp_slowtmr+0x66c>)
 800f3a2:	f00b feaf 	bl	801b104 <iprintf>
    pcb_remove = 0;
 800f3a6:	2300      	movs	r3, #0
 800f3a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f3ac:	4b29      	ldr	r3, [pc, #164]	; (800f454 <tcp_slowtmr+0x670>)
 800f3ae:	681a      	ldr	r2, [r3, #0]
 800f3b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3b2:	6a1b      	ldr	r3, [r3, #32]
 800f3b4:	1ad3      	subs	r3, r2, r3
 800f3b6:	2bf0      	cmp	r3, #240	; 0xf0
 800f3b8:	d904      	bls.n	800f3c4 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800f3ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f3be:	3301      	adds	r3, #1
 800f3c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f3c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d02f      	beq.n	800f42c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800f3cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f3ce:	f000 fbf9 	bl	800fbc4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800f3d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d010      	beq.n	800f3fa <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800f3d8:	4b1f      	ldr	r3, [pc, #124]	; (800f458 <tcp_slowtmr+0x674>)
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f3de:	429a      	cmp	r2, r3
 800f3e0:	d106      	bne.n	800f3f0 <tcp_slowtmr+0x60c>
 800f3e2:	4b19      	ldr	r3, [pc, #100]	; (800f448 <tcp_slowtmr+0x664>)
 800f3e4:	f240 52af 	movw	r2, #1455	; 0x5af
 800f3e8:	491c      	ldr	r1, [pc, #112]	; (800f45c <tcp_slowtmr+0x678>)
 800f3ea:	4819      	ldr	r0, [pc, #100]	; (800f450 <tcp_slowtmr+0x66c>)
 800f3ec:	f00b fe8a 	bl	801b104 <iprintf>
        prev->next = pcb->next;
 800f3f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3f2:	68da      	ldr	r2, [r3, #12]
 800f3f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3f6:	60da      	str	r2, [r3, #12]
 800f3f8:	e00f      	b.n	800f41a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800f3fa:	4b17      	ldr	r3, [pc, #92]	; (800f458 <tcp_slowtmr+0x674>)
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f400:	429a      	cmp	r2, r3
 800f402:	d006      	beq.n	800f412 <tcp_slowtmr+0x62e>
 800f404:	4b10      	ldr	r3, [pc, #64]	; (800f448 <tcp_slowtmr+0x664>)
 800f406:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800f40a:	4915      	ldr	r1, [pc, #84]	; (800f460 <tcp_slowtmr+0x67c>)
 800f40c:	4810      	ldr	r0, [pc, #64]	; (800f450 <tcp_slowtmr+0x66c>)
 800f40e:	f00b fe79 	bl	801b104 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800f412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f414:	68db      	ldr	r3, [r3, #12]
 800f416:	4a10      	ldr	r2, [pc, #64]	; (800f458 <tcp_slowtmr+0x674>)
 800f418:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800f41a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f41c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800f41e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f420:	68db      	ldr	r3, [r3, #12]
 800f422:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800f424:	69f8      	ldr	r0, [r7, #28]
 800f426:	f7fe ff85 	bl	800e334 <tcp_free>
 800f42a:	e004      	b.n	800f436 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800f42c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f42e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f432:	68db      	ldr	r3, [r3, #12]
 800f434:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800f436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d1a9      	bne.n	800f390 <tcp_slowtmr+0x5ac>
    }
  }
}
 800f43c:	bf00      	nop
 800f43e:	bf00      	nop
 800f440:	3730      	adds	r7, #48	; 0x30
 800f442:	46bd      	mov	sp, r7
 800f444:	bdb0      	pop	{r4, r5, r7, pc}
 800f446:	bf00      	nop
 800f448:	0801cf88 	.word	0x0801cf88
 800f44c:	0801d418 	.word	0x0801d418
 800f450:	0801cfcc 	.word	0x0801cfcc
 800f454:	2000db20 	.word	0x2000db20
 800f458:	2000db2c 	.word	0x2000db2c
 800f45c:	0801d448 	.word	0x0801d448
 800f460:	0801d470 	.word	0x0801d470

0800f464 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800f464:	b580      	push	{r7, lr}
 800f466:	b082      	sub	sp, #8
 800f468:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800f46a:	4b2d      	ldr	r3, [pc, #180]	; (800f520 <tcp_fasttmr+0xbc>)
 800f46c:	781b      	ldrb	r3, [r3, #0]
 800f46e:	3301      	adds	r3, #1
 800f470:	b2da      	uxtb	r2, r3
 800f472:	4b2b      	ldr	r3, [pc, #172]	; (800f520 <tcp_fasttmr+0xbc>)
 800f474:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800f476:	4b2b      	ldr	r3, [pc, #172]	; (800f524 <tcp_fasttmr+0xc0>)
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f47c:	e048      	b.n	800f510 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	7f9a      	ldrb	r2, [r3, #30]
 800f482:	4b27      	ldr	r3, [pc, #156]	; (800f520 <tcp_fasttmr+0xbc>)
 800f484:	781b      	ldrb	r3, [r3, #0]
 800f486:	429a      	cmp	r2, r3
 800f488:	d03f      	beq.n	800f50a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800f48a:	4b25      	ldr	r3, [pc, #148]	; (800f520 <tcp_fasttmr+0xbc>)
 800f48c:	781a      	ldrb	r2, [r3, #0]
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	8b5b      	ldrh	r3, [r3, #26]
 800f496:	f003 0301 	and.w	r3, r3, #1
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d010      	beq.n	800f4c0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	8b5b      	ldrh	r3, [r3, #26]
 800f4a2:	f043 0302 	orr.w	r3, r3, #2
 800f4a6:	b29a      	uxth	r2, r3
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800f4ac:	6878      	ldr	r0, [r7, #4]
 800f4ae:	f003 fff1 	bl	8013494 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	8b5b      	ldrh	r3, [r3, #26]
 800f4b6:	f023 0303 	bic.w	r3, r3, #3
 800f4ba:	b29a      	uxth	r2, r3
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	8b5b      	ldrh	r3, [r3, #26]
 800f4c4:	f003 0308 	and.w	r3, r3, #8
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d009      	beq.n	800f4e0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	8b5b      	ldrh	r3, [r3, #26]
 800f4d0:	f023 0308 	bic.w	r3, r3, #8
 800f4d4:	b29a      	uxth	r2, r3
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800f4da:	6878      	ldr	r0, [r7, #4]
 800f4dc:	f7ff f8be 	bl	800e65c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	68db      	ldr	r3, [r3, #12]
 800f4e4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d00a      	beq.n	800f504 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800f4ee:	4b0e      	ldr	r3, [pc, #56]	; (800f528 <tcp_fasttmr+0xc4>)
 800f4f0:	2200      	movs	r2, #0
 800f4f2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800f4f4:	6878      	ldr	r0, [r7, #4]
 800f4f6:	f000 f819 	bl	800f52c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800f4fa:	4b0b      	ldr	r3, [pc, #44]	; (800f528 <tcp_fasttmr+0xc4>)
 800f4fc:	781b      	ldrb	r3, [r3, #0]
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d000      	beq.n	800f504 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800f502:	e7b8      	b.n	800f476 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800f504:	683b      	ldr	r3, [r7, #0]
 800f506:	607b      	str	r3, [r7, #4]
 800f508:	e002      	b.n	800f510 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	68db      	ldr	r3, [r3, #12]
 800f50e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	2b00      	cmp	r3, #0
 800f514:	d1b3      	bne.n	800f47e <tcp_fasttmr+0x1a>
    }
  }
}
 800f516:	bf00      	nop
 800f518:	bf00      	nop
 800f51a:	3708      	adds	r7, #8
 800f51c:	46bd      	mov	sp, r7
 800f51e:	bd80      	pop	{r7, pc}
 800f520:	20004bc2 	.word	0x20004bc2
 800f524:	2000db1c 	.word	0x2000db1c
 800f528:	2000db18 	.word	0x2000db18

0800f52c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800f52c:	b590      	push	{r4, r7, lr}
 800f52e:	b085      	sub	sp, #20
 800f530:	af00      	add	r7, sp, #0
 800f532:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	2b00      	cmp	r3, #0
 800f538:	d109      	bne.n	800f54e <tcp_process_refused_data+0x22>
 800f53a:	4b37      	ldr	r3, [pc, #220]	; (800f618 <tcp_process_refused_data+0xec>)
 800f53c:	f240 6209 	movw	r2, #1545	; 0x609
 800f540:	4936      	ldr	r1, [pc, #216]	; (800f61c <tcp_process_refused_data+0xf0>)
 800f542:	4837      	ldr	r0, [pc, #220]	; (800f620 <tcp_process_refused_data+0xf4>)
 800f544:	f00b fdde 	bl	801b104 <iprintf>
 800f548:	f06f 030f 	mvn.w	r3, #15
 800f54c:	e060      	b.n	800f610 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f552:	7b5b      	ldrb	r3, [r3, #13]
 800f554:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f55a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	2200      	movs	r2, #0
 800f560:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d00b      	beq.n	800f584 <tcp_process_refused_data+0x58>
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	6918      	ldr	r0, [r3, #16]
 800f576:	2300      	movs	r3, #0
 800f578:	68ba      	ldr	r2, [r7, #8]
 800f57a:	6879      	ldr	r1, [r7, #4]
 800f57c:	47a0      	blx	r4
 800f57e:	4603      	mov	r3, r0
 800f580:	73fb      	strb	r3, [r7, #15]
 800f582:	e007      	b.n	800f594 <tcp_process_refused_data+0x68>
 800f584:	2300      	movs	r3, #0
 800f586:	68ba      	ldr	r2, [r7, #8]
 800f588:	6879      	ldr	r1, [r7, #4]
 800f58a:	2000      	movs	r0, #0
 800f58c:	f000 f8a4 	bl	800f6d8 <tcp_recv_null>
 800f590:	4603      	mov	r3, r0
 800f592:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800f594:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d12a      	bne.n	800f5f2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800f59c:	7bbb      	ldrb	r3, [r7, #14]
 800f59e:	f003 0320 	and.w	r3, r3, #32
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d033      	beq.n	800f60e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f5aa:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f5ae:	d005      	beq.n	800f5bc <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f5b4:	3301      	adds	r3, #1
 800f5b6:	b29a      	uxth	r2, r3
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d00b      	beq.n	800f5de <tcp_process_refused_data+0xb2>
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	6918      	ldr	r0, [r3, #16]
 800f5d0:	2300      	movs	r3, #0
 800f5d2:	2200      	movs	r2, #0
 800f5d4:	6879      	ldr	r1, [r7, #4]
 800f5d6:	47a0      	blx	r4
 800f5d8:	4603      	mov	r3, r0
 800f5da:	73fb      	strb	r3, [r7, #15]
 800f5dc:	e001      	b.n	800f5e2 <tcp_process_refused_data+0xb6>
 800f5de:	2300      	movs	r3, #0
 800f5e0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800f5e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f5e6:	f113 0f0d 	cmn.w	r3, #13
 800f5ea:	d110      	bne.n	800f60e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800f5ec:	f06f 030c 	mvn.w	r3, #12
 800f5f0:	e00e      	b.n	800f610 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800f5f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f5f6:	f113 0f0d 	cmn.w	r3, #13
 800f5fa:	d102      	bne.n	800f602 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800f5fc:	f06f 030c 	mvn.w	r3, #12
 800f600:	e006      	b.n	800f610 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	68ba      	ldr	r2, [r7, #8]
 800f606:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800f608:	f06f 0304 	mvn.w	r3, #4
 800f60c:	e000      	b.n	800f610 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800f60e:	2300      	movs	r3, #0
}
 800f610:	4618      	mov	r0, r3
 800f612:	3714      	adds	r7, #20
 800f614:	46bd      	mov	sp, r7
 800f616:	bd90      	pop	{r4, r7, pc}
 800f618:	0801cf88 	.word	0x0801cf88
 800f61c:	0801d498 	.word	0x0801d498
 800f620:	0801cfcc 	.word	0x0801cfcc

0800f624 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800f624:	b580      	push	{r7, lr}
 800f626:	b084      	sub	sp, #16
 800f628:	af00      	add	r7, sp, #0
 800f62a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800f62c:	e007      	b.n	800f63e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800f634:	6878      	ldr	r0, [r7, #4]
 800f636:	f000 f80a 	bl	800f64e <tcp_seg_free>
    seg = next;
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	2b00      	cmp	r3, #0
 800f642:	d1f4      	bne.n	800f62e <tcp_segs_free+0xa>
  }
}
 800f644:	bf00      	nop
 800f646:	bf00      	nop
 800f648:	3710      	adds	r7, #16
 800f64a:	46bd      	mov	sp, r7
 800f64c:	bd80      	pop	{r7, pc}

0800f64e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800f64e:	b580      	push	{r7, lr}
 800f650:	b082      	sub	sp, #8
 800f652:	af00      	add	r7, sp, #0
 800f654:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d00c      	beq.n	800f676 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	685b      	ldr	r3, [r3, #4]
 800f660:	2b00      	cmp	r3, #0
 800f662:	d004      	beq.n	800f66e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	685b      	ldr	r3, [r3, #4]
 800f668:	4618      	mov	r0, r3
 800f66a:	f7fe fbb7 	bl	800dddc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800f66e:	6879      	ldr	r1, [r7, #4]
 800f670:	2003      	movs	r0, #3
 800f672:	f7fd fd0f 	bl	800d094 <memp_free>
  }
}
 800f676:	bf00      	nop
 800f678:	3708      	adds	r7, #8
 800f67a:	46bd      	mov	sp, r7
 800f67c:	bd80      	pop	{r7, pc}
	...

0800f680 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800f680:	b580      	push	{r7, lr}
 800f682:	b084      	sub	sp, #16
 800f684:	af00      	add	r7, sp, #0
 800f686:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d106      	bne.n	800f69c <tcp_seg_copy+0x1c>
 800f68e:	4b0f      	ldr	r3, [pc, #60]	; (800f6cc <tcp_seg_copy+0x4c>)
 800f690:	f240 6282 	movw	r2, #1666	; 0x682
 800f694:	490e      	ldr	r1, [pc, #56]	; (800f6d0 <tcp_seg_copy+0x50>)
 800f696:	480f      	ldr	r0, [pc, #60]	; (800f6d4 <tcp_seg_copy+0x54>)
 800f698:	f00b fd34 	bl	801b104 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800f69c:	2003      	movs	r0, #3
 800f69e:	f7fd fca7 	bl	800cff0 <memp_malloc>
 800f6a2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d101      	bne.n	800f6ae <tcp_seg_copy+0x2e>
    return NULL;
 800f6aa:	2300      	movs	r3, #0
 800f6ac:	e00a      	b.n	800f6c4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800f6ae:	2210      	movs	r2, #16
 800f6b0:	6879      	ldr	r1, [r7, #4]
 800f6b2:	68f8      	ldr	r0, [r7, #12]
 800f6b4:	f00b f9c7 	bl	801aa46 <memcpy>
  pbuf_ref(cseg->p);
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	685b      	ldr	r3, [r3, #4]
 800f6bc:	4618      	mov	r0, r3
 800f6be:	f7fe fc33 	bl	800df28 <pbuf_ref>
  return cseg;
 800f6c2:	68fb      	ldr	r3, [r7, #12]
}
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	3710      	adds	r7, #16
 800f6c8:	46bd      	mov	sp, r7
 800f6ca:	bd80      	pop	{r7, pc}
 800f6cc:	0801cf88 	.word	0x0801cf88
 800f6d0:	0801d4dc 	.word	0x0801d4dc
 800f6d4:	0801cfcc 	.word	0x0801cfcc

0800f6d8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800f6d8:	b580      	push	{r7, lr}
 800f6da:	b084      	sub	sp, #16
 800f6dc:	af00      	add	r7, sp, #0
 800f6de:	60f8      	str	r0, [r7, #12]
 800f6e0:	60b9      	str	r1, [r7, #8]
 800f6e2:	607a      	str	r2, [r7, #4]
 800f6e4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800f6e6:	68bb      	ldr	r3, [r7, #8]
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d109      	bne.n	800f700 <tcp_recv_null+0x28>
 800f6ec:	4b12      	ldr	r3, [pc, #72]	; (800f738 <tcp_recv_null+0x60>)
 800f6ee:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800f6f2:	4912      	ldr	r1, [pc, #72]	; (800f73c <tcp_recv_null+0x64>)
 800f6f4:	4812      	ldr	r0, [pc, #72]	; (800f740 <tcp_recv_null+0x68>)
 800f6f6:	f00b fd05 	bl	801b104 <iprintf>
 800f6fa:	f06f 030f 	mvn.w	r3, #15
 800f6fe:	e016      	b.n	800f72e <tcp_recv_null+0x56>

  if (p != NULL) {
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	2b00      	cmp	r3, #0
 800f704:	d009      	beq.n	800f71a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	891b      	ldrh	r3, [r3, #8]
 800f70a:	4619      	mov	r1, r3
 800f70c:	68b8      	ldr	r0, [r7, #8]
 800f70e:	f7ff f9bb 	bl	800ea88 <tcp_recved>
    pbuf_free(p);
 800f712:	6878      	ldr	r0, [r7, #4]
 800f714:	f7fe fb62 	bl	800dddc <pbuf_free>
 800f718:	e008      	b.n	800f72c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800f71a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d104      	bne.n	800f72c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800f722:	68b8      	ldr	r0, [r7, #8]
 800f724:	f7ff f804 	bl	800e730 <tcp_close>
 800f728:	4603      	mov	r3, r0
 800f72a:	e000      	b.n	800f72e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800f72c:	2300      	movs	r3, #0
}
 800f72e:	4618      	mov	r0, r3
 800f730:	3710      	adds	r7, #16
 800f732:	46bd      	mov	sp, r7
 800f734:	bd80      	pop	{r7, pc}
 800f736:	bf00      	nop
 800f738:	0801cf88 	.word	0x0801cf88
 800f73c:	0801d4f8 	.word	0x0801d4f8
 800f740:	0801cfcc 	.word	0x0801cfcc

0800f744 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800f744:	b580      	push	{r7, lr}
 800f746:	b086      	sub	sp, #24
 800f748:	af00      	add	r7, sp, #0
 800f74a:	4603      	mov	r3, r0
 800f74c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800f74e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f752:	2b00      	cmp	r3, #0
 800f754:	db01      	blt.n	800f75a <tcp_kill_prio+0x16>
 800f756:	79fb      	ldrb	r3, [r7, #7]
 800f758:	e000      	b.n	800f75c <tcp_kill_prio+0x18>
 800f75a:	237f      	movs	r3, #127	; 0x7f
 800f75c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800f75e:	7afb      	ldrb	r3, [r7, #11]
 800f760:	2b00      	cmp	r3, #0
 800f762:	d034      	beq.n	800f7ce <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800f764:	7afb      	ldrb	r3, [r7, #11]
 800f766:	3b01      	subs	r3, #1
 800f768:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800f76a:	2300      	movs	r3, #0
 800f76c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f76e:	2300      	movs	r3, #0
 800f770:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f772:	4b19      	ldr	r3, [pc, #100]	; (800f7d8 <tcp_kill_prio+0x94>)
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	617b      	str	r3, [r7, #20]
 800f778:	e01f      	b.n	800f7ba <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800f77a:	697b      	ldr	r3, [r7, #20]
 800f77c:	7d5b      	ldrb	r3, [r3, #21]
 800f77e:	7afa      	ldrb	r2, [r7, #11]
 800f780:	429a      	cmp	r2, r3
 800f782:	d80c      	bhi.n	800f79e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f784:	697b      	ldr	r3, [r7, #20]
 800f786:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800f788:	7afa      	ldrb	r2, [r7, #11]
 800f78a:	429a      	cmp	r2, r3
 800f78c:	d112      	bne.n	800f7b4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f78e:	4b13      	ldr	r3, [pc, #76]	; (800f7dc <tcp_kill_prio+0x98>)
 800f790:	681a      	ldr	r2, [r3, #0]
 800f792:	697b      	ldr	r3, [r7, #20]
 800f794:	6a1b      	ldr	r3, [r3, #32]
 800f796:	1ad3      	subs	r3, r2, r3
 800f798:	68fa      	ldr	r2, [r7, #12]
 800f79a:	429a      	cmp	r2, r3
 800f79c:	d80a      	bhi.n	800f7b4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800f79e:	4b0f      	ldr	r3, [pc, #60]	; (800f7dc <tcp_kill_prio+0x98>)
 800f7a0:	681a      	ldr	r2, [r3, #0]
 800f7a2:	697b      	ldr	r3, [r7, #20]
 800f7a4:	6a1b      	ldr	r3, [r3, #32]
 800f7a6:	1ad3      	subs	r3, r2, r3
 800f7a8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800f7aa:	697b      	ldr	r3, [r7, #20]
 800f7ac:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800f7ae:	697b      	ldr	r3, [r7, #20]
 800f7b0:	7d5b      	ldrb	r3, [r3, #21]
 800f7b2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f7b4:	697b      	ldr	r3, [r7, #20]
 800f7b6:	68db      	ldr	r3, [r3, #12]
 800f7b8:	617b      	str	r3, [r7, #20]
 800f7ba:	697b      	ldr	r3, [r7, #20]
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d1dc      	bne.n	800f77a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800f7c0:	693b      	ldr	r3, [r7, #16]
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d004      	beq.n	800f7d0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f7c6:	6938      	ldr	r0, [r7, #16]
 800f7c8:	f7ff f8f8 	bl	800e9bc <tcp_abort>
 800f7cc:	e000      	b.n	800f7d0 <tcp_kill_prio+0x8c>
    return;
 800f7ce:	bf00      	nop
  }
}
 800f7d0:	3718      	adds	r7, #24
 800f7d2:	46bd      	mov	sp, r7
 800f7d4:	bd80      	pop	{r7, pc}
 800f7d6:	bf00      	nop
 800f7d8:	2000db1c 	.word	0x2000db1c
 800f7dc:	2000db20 	.word	0x2000db20

0800f7e0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800f7e0:	b580      	push	{r7, lr}
 800f7e2:	b086      	sub	sp, #24
 800f7e4:	af00      	add	r7, sp, #0
 800f7e6:	4603      	mov	r3, r0
 800f7e8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800f7ea:	79fb      	ldrb	r3, [r7, #7]
 800f7ec:	2b08      	cmp	r3, #8
 800f7ee:	d009      	beq.n	800f804 <tcp_kill_state+0x24>
 800f7f0:	79fb      	ldrb	r3, [r7, #7]
 800f7f2:	2b09      	cmp	r3, #9
 800f7f4:	d006      	beq.n	800f804 <tcp_kill_state+0x24>
 800f7f6:	4b1a      	ldr	r3, [pc, #104]	; (800f860 <tcp_kill_state+0x80>)
 800f7f8:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800f7fc:	4919      	ldr	r1, [pc, #100]	; (800f864 <tcp_kill_state+0x84>)
 800f7fe:	481a      	ldr	r0, [pc, #104]	; (800f868 <tcp_kill_state+0x88>)
 800f800:	f00b fc80 	bl	801b104 <iprintf>

  inactivity = 0;
 800f804:	2300      	movs	r3, #0
 800f806:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f808:	2300      	movs	r3, #0
 800f80a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f80c:	4b17      	ldr	r3, [pc, #92]	; (800f86c <tcp_kill_state+0x8c>)
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	617b      	str	r3, [r7, #20]
 800f812:	e017      	b.n	800f844 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800f814:	697b      	ldr	r3, [r7, #20]
 800f816:	7d1b      	ldrb	r3, [r3, #20]
 800f818:	79fa      	ldrb	r2, [r7, #7]
 800f81a:	429a      	cmp	r2, r3
 800f81c:	d10f      	bne.n	800f83e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f81e:	4b14      	ldr	r3, [pc, #80]	; (800f870 <tcp_kill_state+0x90>)
 800f820:	681a      	ldr	r2, [r3, #0]
 800f822:	697b      	ldr	r3, [r7, #20]
 800f824:	6a1b      	ldr	r3, [r3, #32]
 800f826:	1ad3      	subs	r3, r2, r3
 800f828:	68fa      	ldr	r2, [r7, #12]
 800f82a:	429a      	cmp	r2, r3
 800f82c:	d807      	bhi.n	800f83e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800f82e:	4b10      	ldr	r3, [pc, #64]	; (800f870 <tcp_kill_state+0x90>)
 800f830:	681a      	ldr	r2, [r3, #0]
 800f832:	697b      	ldr	r3, [r7, #20]
 800f834:	6a1b      	ldr	r3, [r3, #32]
 800f836:	1ad3      	subs	r3, r2, r3
 800f838:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800f83a:	697b      	ldr	r3, [r7, #20]
 800f83c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f83e:	697b      	ldr	r3, [r7, #20]
 800f840:	68db      	ldr	r3, [r3, #12]
 800f842:	617b      	str	r3, [r7, #20]
 800f844:	697b      	ldr	r3, [r7, #20]
 800f846:	2b00      	cmp	r3, #0
 800f848:	d1e4      	bne.n	800f814 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800f84a:	693b      	ldr	r3, [r7, #16]
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d003      	beq.n	800f858 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800f850:	2100      	movs	r1, #0
 800f852:	6938      	ldr	r0, [r7, #16]
 800f854:	f7fe fff4 	bl	800e840 <tcp_abandon>
  }
}
 800f858:	bf00      	nop
 800f85a:	3718      	adds	r7, #24
 800f85c:	46bd      	mov	sp, r7
 800f85e:	bd80      	pop	{r7, pc}
 800f860:	0801cf88 	.word	0x0801cf88
 800f864:	0801d514 	.word	0x0801d514
 800f868:	0801cfcc 	.word	0x0801cfcc
 800f86c:	2000db1c 	.word	0x2000db1c
 800f870:	2000db20 	.word	0x2000db20

0800f874 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800f874:	b580      	push	{r7, lr}
 800f876:	b084      	sub	sp, #16
 800f878:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800f87a:	2300      	movs	r3, #0
 800f87c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800f87e:	2300      	movs	r3, #0
 800f880:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f882:	4b12      	ldr	r3, [pc, #72]	; (800f8cc <tcp_kill_timewait+0x58>)
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	60fb      	str	r3, [r7, #12]
 800f888:	e012      	b.n	800f8b0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f88a:	4b11      	ldr	r3, [pc, #68]	; (800f8d0 <tcp_kill_timewait+0x5c>)
 800f88c:	681a      	ldr	r2, [r3, #0]
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	6a1b      	ldr	r3, [r3, #32]
 800f892:	1ad3      	subs	r3, r2, r3
 800f894:	687a      	ldr	r2, [r7, #4]
 800f896:	429a      	cmp	r2, r3
 800f898:	d807      	bhi.n	800f8aa <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800f89a:	4b0d      	ldr	r3, [pc, #52]	; (800f8d0 <tcp_kill_timewait+0x5c>)
 800f89c:	681a      	ldr	r2, [r3, #0]
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	6a1b      	ldr	r3, [r3, #32]
 800f8a2:	1ad3      	subs	r3, r2, r3
 800f8a4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	68db      	ldr	r3, [r3, #12]
 800f8ae:	60fb      	str	r3, [r7, #12]
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d1e9      	bne.n	800f88a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800f8b6:	68bb      	ldr	r3, [r7, #8]
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d002      	beq.n	800f8c2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f8bc:	68b8      	ldr	r0, [r7, #8]
 800f8be:	f7ff f87d 	bl	800e9bc <tcp_abort>
  }
}
 800f8c2:	bf00      	nop
 800f8c4:	3710      	adds	r7, #16
 800f8c6:	46bd      	mov	sp, r7
 800f8c8:	bd80      	pop	{r7, pc}
 800f8ca:	bf00      	nop
 800f8cc:	2000db2c 	.word	0x2000db2c
 800f8d0:	2000db20 	.word	0x2000db20

0800f8d4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800f8d4:	b580      	push	{r7, lr}
 800f8d6:	b082      	sub	sp, #8
 800f8d8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800f8da:	4b10      	ldr	r3, [pc, #64]	; (800f91c <tcp_handle_closepend+0x48>)
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f8e0:	e014      	b.n	800f90c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	68db      	ldr	r3, [r3, #12]
 800f8e6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	8b5b      	ldrh	r3, [r3, #26]
 800f8ec:	f003 0308 	and.w	r3, r3, #8
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d009      	beq.n	800f908 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	8b5b      	ldrh	r3, [r3, #26]
 800f8f8:	f023 0308 	bic.w	r3, r3, #8
 800f8fc:	b29a      	uxth	r2, r3
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800f902:	6878      	ldr	r0, [r7, #4]
 800f904:	f7fe feaa 	bl	800e65c <tcp_close_shutdown_fin>
    }
    pcb = next;
 800f908:	683b      	ldr	r3, [r7, #0]
 800f90a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d1e7      	bne.n	800f8e2 <tcp_handle_closepend+0xe>
  }
}
 800f912:	bf00      	nop
 800f914:	bf00      	nop
 800f916:	3708      	adds	r7, #8
 800f918:	46bd      	mov	sp, r7
 800f91a:	bd80      	pop	{r7, pc}
 800f91c:	2000db1c 	.word	0x2000db1c

0800f920 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800f920:	b580      	push	{r7, lr}
 800f922:	b084      	sub	sp, #16
 800f924:	af00      	add	r7, sp, #0
 800f926:	4603      	mov	r3, r0
 800f928:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f92a:	2001      	movs	r0, #1
 800f92c:	f7fd fb60 	bl	800cff0 <memp_malloc>
 800f930:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	2b00      	cmp	r3, #0
 800f936:	d126      	bne.n	800f986 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800f938:	f7ff ffcc 	bl	800f8d4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800f93c:	f7ff ff9a 	bl	800f874 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f940:	2001      	movs	r0, #1
 800f942:	f7fd fb55 	bl	800cff0 <memp_malloc>
 800f946:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d11b      	bne.n	800f986 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800f94e:	2009      	movs	r0, #9
 800f950:	f7ff ff46 	bl	800f7e0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f954:	2001      	movs	r0, #1
 800f956:	f7fd fb4b 	bl	800cff0 <memp_malloc>
 800f95a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d111      	bne.n	800f986 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800f962:	2008      	movs	r0, #8
 800f964:	f7ff ff3c 	bl	800f7e0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f968:	2001      	movs	r0, #1
 800f96a:	f7fd fb41 	bl	800cff0 <memp_malloc>
 800f96e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	2b00      	cmp	r3, #0
 800f974:	d107      	bne.n	800f986 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800f976:	79fb      	ldrb	r3, [r7, #7]
 800f978:	4618      	mov	r0, r3
 800f97a:	f7ff fee3 	bl	800f744 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f97e:	2001      	movs	r0, #1
 800f980:	f7fd fb36 	bl	800cff0 <memp_malloc>
 800f984:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d03f      	beq.n	800fa0c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800f98c:	229c      	movs	r2, #156	; 0x9c
 800f98e:	2100      	movs	r1, #0
 800f990:	68f8      	ldr	r0, [r7, #12]
 800f992:	f00b f866 	bl	801aa62 <memset>
    pcb->prio = prio;
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	79fa      	ldrb	r2, [r7, #7]
 800f99a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f9a2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f9ac:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	22ff      	movs	r2, #255	; 0xff
 800f9ba:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f9c2:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	2206      	movs	r2, #6
 800f9c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	2206      	movs	r2, #6
 800f9d0:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f9d8:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	2201      	movs	r2, #1
 800f9de:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800f9e2:	4b0d      	ldr	r3, [pc, #52]	; (800fa18 <tcp_alloc+0xf8>)
 800f9e4:	681a      	ldr	r2, [r3, #0]
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800f9ea:	4b0c      	ldr	r3, [pc, #48]	; (800fa1c <tcp_alloc+0xfc>)
 800f9ec:	781a      	ldrb	r2, [r3, #0]
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f9f8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	4a08      	ldr	r2, [pc, #32]	; (800fa20 <tcp_alloc+0x100>)
 800fa00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	4a07      	ldr	r2, [pc, #28]	; (800fa24 <tcp_alloc+0x104>)
 800fa08:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800fa0c:	68fb      	ldr	r3, [r7, #12]
}
 800fa0e:	4618      	mov	r0, r3
 800fa10:	3710      	adds	r7, #16
 800fa12:	46bd      	mov	sp, r7
 800fa14:	bd80      	pop	{r7, pc}
 800fa16:	bf00      	nop
 800fa18:	2000db20 	.word	0x2000db20
 800fa1c:	20004bc2 	.word	0x20004bc2
 800fa20:	0800f6d9 	.word	0x0800f6d9
 800fa24:	006ddd00 	.word	0x006ddd00

0800fa28 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800fa28:	b580      	push	{r7, lr}
 800fa2a:	b084      	sub	sp, #16
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	4603      	mov	r3, r0
 800fa30:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800fa32:	2040      	movs	r0, #64	; 0x40
 800fa34:	f7ff ff74 	bl	800f920 <tcp_alloc>
 800fa38:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800fa3a:	68fb      	ldr	r3, [r7, #12]
}
 800fa3c:	4618      	mov	r0, r3
 800fa3e:	3710      	adds	r7, #16
 800fa40:	46bd      	mov	sp, r7
 800fa42:	bd80      	pop	{r7, pc}

0800fa44 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800fa44:	b480      	push	{r7}
 800fa46:	b083      	sub	sp, #12
 800fa48:	af00      	add	r7, sp, #0
 800fa4a:	6078      	str	r0, [r7, #4]
 800fa4c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d002      	beq.n	800fa5a <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	683a      	ldr	r2, [r7, #0]
 800fa58:	611a      	str	r2, [r3, #16]
  }
}
 800fa5a:	bf00      	nop
 800fa5c:	370c      	adds	r7, #12
 800fa5e:	46bd      	mov	sp, r7
 800fa60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa64:	4770      	bx	lr
	...

0800fa68 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800fa68:	b580      	push	{r7, lr}
 800fa6a:	b082      	sub	sp, #8
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	6078      	str	r0, [r7, #4]
 800fa70:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d00e      	beq.n	800fa96 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	7d1b      	ldrb	r3, [r3, #20]
 800fa7c:	2b01      	cmp	r3, #1
 800fa7e:	d106      	bne.n	800fa8e <tcp_recv+0x26>
 800fa80:	4b07      	ldr	r3, [pc, #28]	; (800faa0 <tcp_recv+0x38>)
 800fa82:	f240 72df 	movw	r2, #2015	; 0x7df
 800fa86:	4907      	ldr	r1, [pc, #28]	; (800faa4 <tcp_recv+0x3c>)
 800fa88:	4807      	ldr	r0, [pc, #28]	; (800faa8 <tcp_recv+0x40>)
 800fa8a:	f00b fb3b 	bl	801b104 <iprintf>
    pcb->recv = recv;
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	683a      	ldr	r2, [r7, #0]
 800fa92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800fa96:	bf00      	nop
 800fa98:	3708      	adds	r7, #8
 800fa9a:	46bd      	mov	sp, r7
 800fa9c:	bd80      	pop	{r7, pc}
 800fa9e:	bf00      	nop
 800faa0:	0801cf88 	.word	0x0801cf88
 800faa4:	0801d524 	.word	0x0801d524
 800faa8:	0801cfcc 	.word	0x0801cfcc

0800faac <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800faac:	b580      	push	{r7, lr}
 800faae:	b082      	sub	sp, #8
 800fab0:	af00      	add	r7, sp, #0
 800fab2:	6078      	str	r0, [r7, #4]
 800fab4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d00e      	beq.n	800fada <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	7d1b      	ldrb	r3, [r3, #20]
 800fac0:	2b01      	cmp	r3, #1
 800fac2:	d106      	bne.n	800fad2 <tcp_sent+0x26>
 800fac4:	4b07      	ldr	r3, [pc, #28]	; (800fae4 <tcp_sent+0x38>)
 800fac6:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800faca:	4907      	ldr	r1, [pc, #28]	; (800fae8 <tcp_sent+0x3c>)
 800facc:	4807      	ldr	r0, [pc, #28]	; (800faec <tcp_sent+0x40>)
 800face:	f00b fb19 	bl	801b104 <iprintf>
    pcb->sent = sent;
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	683a      	ldr	r2, [r7, #0]
 800fad6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800fada:	bf00      	nop
 800fadc:	3708      	adds	r7, #8
 800fade:	46bd      	mov	sp, r7
 800fae0:	bd80      	pop	{r7, pc}
 800fae2:	bf00      	nop
 800fae4:	0801cf88 	.word	0x0801cf88
 800fae8:	0801d54c 	.word	0x0801d54c
 800faec:	0801cfcc 	.word	0x0801cfcc

0800faf0 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800faf0:	b580      	push	{r7, lr}
 800faf2:	b082      	sub	sp, #8
 800faf4:	af00      	add	r7, sp, #0
 800faf6:	6078      	str	r0, [r7, #4]
 800faf8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d00e      	beq.n	800fb1e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	7d1b      	ldrb	r3, [r3, #20]
 800fb04:	2b01      	cmp	r3, #1
 800fb06:	d106      	bne.n	800fb16 <tcp_err+0x26>
 800fb08:	4b07      	ldr	r3, [pc, #28]	; (800fb28 <tcp_err+0x38>)
 800fb0a:	f640 020d 	movw	r2, #2061	; 0x80d
 800fb0e:	4907      	ldr	r1, [pc, #28]	; (800fb2c <tcp_err+0x3c>)
 800fb10:	4807      	ldr	r0, [pc, #28]	; (800fb30 <tcp_err+0x40>)
 800fb12:	f00b faf7 	bl	801b104 <iprintf>
    pcb->errf = err;
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	683a      	ldr	r2, [r7, #0]
 800fb1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800fb1e:	bf00      	nop
 800fb20:	3708      	adds	r7, #8
 800fb22:	46bd      	mov	sp, r7
 800fb24:	bd80      	pop	{r7, pc}
 800fb26:	bf00      	nop
 800fb28:	0801cf88 	.word	0x0801cf88
 800fb2c:	0801d574 	.word	0x0801d574
 800fb30:	0801cfcc 	.word	0x0801cfcc

0800fb34 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800fb34:	b480      	push	{r7}
 800fb36:	b085      	sub	sp, #20
 800fb38:	af00      	add	r7, sp, #0
 800fb3a:	6078      	str	r0, [r7, #4]
 800fb3c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d008      	beq.n	800fb56 <tcp_accept+0x22>
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	7d1b      	ldrb	r3, [r3, #20]
 800fb48:	2b01      	cmp	r3, #1
 800fb4a:	d104      	bne.n	800fb56 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	683a      	ldr	r2, [r7, #0]
 800fb54:	619a      	str	r2, [r3, #24]
  }
}
 800fb56:	bf00      	nop
 800fb58:	3714      	adds	r7, #20
 800fb5a:	46bd      	mov	sp, r7
 800fb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb60:	4770      	bx	lr
	...

0800fb64 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800fb64:	b580      	push	{r7, lr}
 800fb66:	b084      	sub	sp, #16
 800fb68:	af00      	add	r7, sp, #0
 800fb6a:	60f8      	str	r0, [r7, #12]
 800fb6c:	60b9      	str	r1, [r7, #8]
 800fb6e:	4613      	mov	r3, r2
 800fb70:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d107      	bne.n	800fb88 <tcp_poll+0x24>
 800fb78:	4b0e      	ldr	r3, [pc, #56]	; (800fbb4 <tcp_poll+0x50>)
 800fb7a:	f640 023d 	movw	r2, #2109	; 0x83d
 800fb7e:	490e      	ldr	r1, [pc, #56]	; (800fbb8 <tcp_poll+0x54>)
 800fb80:	480e      	ldr	r0, [pc, #56]	; (800fbbc <tcp_poll+0x58>)
 800fb82:	f00b fabf 	bl	801b104 <iprintf>
 800fb86:	e011      	b.n	800fbac <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	7d1b      	ldrb	r3, [r3, #20]
 800fb8c:	2b01      	cmp	r3, #1
 800fb8e:	d106      	bne.n	800fb9e <tcp_poll+0x3a>
 800fb90:	4b08      	ldr	r3, [pc, #32]	; (800fbb4 <tcp_poll+0x50>)
 800fb92:	f640 023e 	movw	r2, #2110	; 0x83e
 800fb96:	490a      	ldr	r1, [pc, #40]	; (800fbc0 <tcp_poll+0x5c>)
 800fb98:	4808      	ldr	r0, [pc, #32]	; (800fbbc <tcp_poll+0x58>)
 800fb9a:	f00b fab3 	bl	801b104 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	68ba      	ldr	r2, [r7, #8]
 800fba2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	79fa      	ldrb	r2, [r7, #7]
 800fbaa:	775a      	strb	r2, [r3, #29]
}
 800fbac:	3710      	adds	r7, #16
 800fbae:	46bd      	mov	sp, r7
 800fbb0:	bd80      	pop	{r7, pc}
 800fbb2:	bf00      	nop
 800fbb4:	0801cf88 	.word	0x0801cf88
 800fbb8:	0801d59c 	.word	0x0801d59c
 800fbbc:	0801cfcc 	.word	0x0801cfcc
 800fbc0:	0801d5b4 	.word	0x0801d5b4

0800fbc4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800fbc4:	b580      	push	{r7, lr}
 800fbc6:	b082      	sub	sp, #8
 800fbc8:	af00      	add	r7, sp, #0
 800fbca:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d107      	bne.n	800fbe2 <tcp_pcb_purge+0x1e>
 800fbd2:	4b21      	ldr	r3, [pc, #132]	; (800fc58 <tcp_pcb_purge+0x94>)
 800fbd4:	f640 0251 	movw	r2, #2129	; 0x851
 800fbd8:	4920      	ldr	r1, [pc, #128]	; (800fc5c <tcp_pcb_purge+0x98>)
 800fbda:	4821      	ldr	r0, [pc, #132]	; (800fc60 <tcp_pcb_purge+0x9c>)
 800fbdc:	f00b fa92 	bl	801b104 <iprintf>
 800fbe0:	e037      	b.n	800fc52 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	7d1b      	ldrb	r3, [r3, #20]
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d033      	beq.n	800fc52 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800fbee:	2b0a      	cmp	r3, #10
 800fbf0:	d02f      	beq.n	800fc52 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800fbf6:	2b01      	cmp	r3, #1
 800fbf8:	d02b      	beq.n	800fc52 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d007      	beq.n	800fc12 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fc06:	4618      	mov	r0, r3
 800fc08:	f7fe f8e8 	bl	800dddc <pbuf_free>
      pcb->refused_data = NULL;
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	2200      	movs	r2, #0
 800fc10:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d002      	beq.n	800fc20 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800fc1a:	6878      	ldr	r0, [r7, #4]
 800fc1c:	f000 f986 	bl	800ff2c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fc26:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc2c:	4618      	mov	r0, r3
 800fc2e:	f7ff fcf9 	bl	800f624 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc36:	4618      	mov	r0, r3
 800fc38:	f7ff fcf4 	bl	800f624 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	2200      	movs	r2, #0
 800fc40:	66da      	str	r2, [r3, #108]	; 0x6c
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	2200      	movs	r2, #0
 800fc4e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800fc52:	3708      	adds	r7, #8
 800fc54:	46bd      	mov	sp, r7
 800fc56:	bd80      	pop	{r7, pc}
 800fc58:	0801cf88 	.word	0x0801cf88
 800fc5c:	0801d5d4 	.word	0x0801d5d4
 800fc60:	0801cfcc 	.word	0x0801cfcc

0800fc64 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800fc64:	b580      	push	{r7, lr}
 800fc66:	b084      	sub	sp, #16
 800fc68:	af00      	add	r7, sp, #0
 800fc6a:	6078      	str	r0, [r7, #4]
 800fc6c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800fc6e:	683b      	ldr	r3, [r7, #0]
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d106      	bne.n	800fc82 <tcp_pcb_remove+0x1e>
 800fc74:	4b3e      	ldr	r3, [pc, #248]	; (800fd70 <tcp_pcb_remove+0x10c>)
 800fc76:	f640 0283 	movw	r2, #2179	; 0x883
 800fc7a:	493e      	ldr	r1, [pc, #248]	; (800fd74 <tcp_pcb_remove+0x110>)
 800fc7c:	483e      	ldr	r0, [pc, #248]	; (800fd78 <tcp_pcb_remove+0x114>)
 800fc7e:	f00b fa41 	bl	801b104 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d106      	bne.n	800fc96 <tcp_pcb_remove+0x32>
 800fc88:	4b39      	ldr	r3, [pc, #228]	; (800fd70 <tcp_pcb_remove+0x10c>)
 800fc8a:	f640 0284 	movw	r2, #2180	; 0x884
 800fc8e:	493b      	ldr	r1, [pc, #236]	; (800fd7c <tcp_pcb_remove+0x118>)
 800fc90:	4839      	ldr	r0, [pc, #228]	; (800fd78 <tcp_pcb_remove+0x114>)
 800fc92:	f00b fa37 	bl	801b104 <iprintf>

  TCP_RMV(pcblist, pcb);
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	683a      	ldr	r2, [r7, #0]
 800fc9c:	429a      	cmp	r2, r3
 800fc9e:	d105      	bne.n	800fcac <tcp_pcb_remove+0x48>
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	68da      	ldr	r2, [r3, #12]
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	601a      	str	r2, [r3, #0]
 800fcaa:	e013      	b.n	800fcd4 <tcp_pcb_remove+0x70>
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	60fb      	str	r3, [r7, #12]
 800fcb2:	e00c      	b.n	800fcce <tcp_pcb_remove+0x6a>
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	68db      	ldr	r3, [r3, #12]
 800fcb8:	683a      	ldr	r2, [r7, #0]
 800fcba:	429a      	cmp	r2, r3
 800fcbc:	d104      	bne.n	800fcc8 <tcp_pcb_remove+0x64>
 800fcbe:	683b      	ldr	r3, [r7, #0]
 800fcc0:	68da      	ldr	r2, [r3, #12]
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	60da      	str	r2, [r3, #12]
 800fcc6:	e005      	b.n	800fcd4 <tcp_pcb_remove+0x70>
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	68db      	ldr	r3, [r3, #12]
 800fccc:	60fb      	str	r3, [r7, #12]
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d1ef      	bne.n	800fcb4 <tcp_pcb_remove+0x50>
 800fcd4:	683b      	ldr	r3, [r7, #0]
 800fcd6:	2200      	movs	r2, #0
 800fcd8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800fcda:	6838      	ldr	r0, [r7, #0]
 800fcdc:	f7ff ff72 	bl	800fbc4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800fce0:	683b      	ldr	r3, [r7, #0]
 800fce2:	7d1b      	ldrb	r3, [r3, #20]
 800fce4:	2b0a      	cmp	r3, #10
 800fce6:	d013      	beq.n	800fd10 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800fce8:	683b      	ldr	r3, [r7, #0]
 800fcea:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800fcec:	2b01      	cmp	r3, #1
 800fcee:	d00f      	beq.n	800fd10 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800fcf0:	683b      	ldr	r3, [r7, #0]
 800fcf2:	8b5b      	ldrh	r3, [r3, #26]
 800fcf4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d009      	beq.n	800fd10 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800fcfc:	683b      	ldr	r3, [r7, #0]
 800fcfe:	8b5b      	ldrh	r3, [r3, #26]
 800fd00:	f043 0302 	orr.w	r3, r3, #2
 800fd04:	b29a      	uxth	r2, r3
 800fd06:	683b      	ldr	r3, [r7, #0]
 800fd08:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fd0a:	6838      	ldr	r0, [r7, #0]
 800fd0c:	f003 fbc2 	bl	8013494 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800fd10:	683b      	ldr	r3, [r7, #0]
 800fd12:	7d1b      	ldrb	r3, [r3, #20]
 800fd14:	2b01      	cmp	r3, #1
 800fd16:	d020      	beq.n	800fd5a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800fd18:	683b      	ldr	r3, [r7, #0]
 800fd1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d006      	beq.n	800fd2e <tcp_pcb_remove+0xca>
 800fd20:	4b13      	ldr	r3, [pc, #76]	; (800fd70 <tcp_pcb_remove+0x10c>)
 800fd22:	f640 0293 	movw	r2, #2195	; 0x893
 800fd26:	4916      	ldr	r1, [pc, #88]	; (800fd80 <tcp_pcb_remove+0x11c>)
 800fd28:	4813      	ldr	r0, [pc, #76]	; (800fd78 <tcp_pcb_remove+0x114>)
 800fd2a:	f00b f9eb 	bl	801b104 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800fd2e:	683b      	ldr	r3, [r7, #0]
 800fd30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d006      	beq.n	800fd44 <tcp_pcb_remove+0xe0>
 800fd36:	4b0e      	ldr	r3, [pc, #56]	; (800fd70 <tcp_pcb_remove+0x10c>)
 800fd38:	f640 0294 	movw	r2, #2196	; 0x894
 800fd3c:	4911      	ldr	r1, [pc, #68]	; (800fd84 <tcp_pcb_remove+0x120>)
 800fd3e:	480e      	ldr	r0, [pc, #56]	; (800fd78 <tcp_pcb_remove+0x114>)
 800fd40:	f00b f9e0 	bl	801b104 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800fd44:	683b      	ldr	r3, [r7, #0]
 800fd46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d006      	beq.n	800fd5a <tcp_pcb_remove+0xf6>
 800fd4c:	4b08      	ldr	r3, [pc, #32]	; (800fd70 <tcp_pcb_remove+0x10c>)
 800fd4e:	f640 0296 	movw	r2, #2198	; 0x896
 800fd52:	490d      	ldr	r1, [pc, #52]	; (800fd88 <tcp_pcb_remove+0x124>)
 800fd54:	4808      	ldr	r0, [pc, #32]	; (800fd78 <tcp_pcb_remove+0x114>)
 800fd56:	f00b f9d5 	bl	801b104 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800fd5a:	683b      	ldr	r3, [r7, #0]
 800fd5c:	2200      	movs	r2, #0
 800fd5e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800fd60:	683b      	ldr	r3, [r7, #0]
 800fd62:	2200      	movs	r2, #0
 800fd64:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800fd66:	bf00      	nop
 800fd68:	3710      	adds	r7, #16
 800fd6a:	46bd      	mov	sp, r7
 800fd6c:	bd80      	pop	{r7, pc}
 800fd6e:	bf00      	nop
 800fd70:	0801cf88 	.word	0x0801cf88
 800fd74:	0801d5f0 	.word	0x0801d5f0
 800fd78:	0801cfcc 	.word	0x0801cfcc
 800fd7c:	0801d60c 	.word	0x0801d60c
 800fd80:	0801d62c 	.word	0x0801d62c
 800fd84:	0801d644 	.word	0x0801d644
 800fd88:	0801d660 	.word	0x0801d660

0800fd8c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800fd8c:	b580      	push	{r7, lr}
 800fd8e:	b082      	sub	sp, #8
 800fd90:	af00      	add	r7, sp, #0
 800fd92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d106      	bne.n	800fda8 <tcp_next_iss+0x1c>
 800fd9a:	4b0a      	ldr	r3, [pc, #40]	; (800fdc4 <tcp_next_iss+0x38>)
 800fd9c:	f640 02af 	movw	r2, #2223	; 0x8af
 800fda0:	4909      	ldr	r1, [pc, #36]	; (800fdc8 <tcp_next_iss+0x3c>)
 800fda2:	480a      	ldr	r0, [pc, #40]	; (800fdcc <tcp_next_iss+0x40>)
 800fda4:	f00b f9ae 	bl	801b104 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800fda8:	4b09      	ldr	r3, [pc, #36]	; (800fdd0 <tcp_next_iss+0x44>)
 800fdaa:	681a      	ldr	r2, [r3, #0]
 800fdac:	4b09      	ldr	r3, [pc, #36]	; (800fdd4 <tcp_next_iss+0x48>)
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	4413      	add	r3, r2
 800fdb2:	4a07      	ldr	r2, [pc, #28]	; (800fdd0 <tcp_next_iss+0x44>)
 800fdb4:	6013      	str	r3, [r2, #0]
  return iss;
 800fdb6:	4b06      	ldr	r3, [pc, #24]	; (800fdd0 <tcp_next_iss+0x44>)
 800fdb8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800fdba:	4618      	mov	r0, r3
 800fdbc:	3708      	adds	r7, #8
 800fdbe:	46bd      	mov	sp, r7
 800fdc0:	bd80      	pop	{r7, pc}
 800fdc2:	bf00      	nop
 800fdc4:	0801cf88 	.word	0x0801cf88
 800fdc8:	0801d678 	.word	0x0801d678
 800fdcc:	0801cfcc 	.word	0x0801cfcc
 800fdd0:	20000014 	.word	0x20000014
 800fdd4:	2000db20 	.word	0x2000db20

0800fdd8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800fdd8:	b580      	push	{r7, lr}
 800fdda:	b086      	sub	sp, #24
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	4603      	mov	r3, r0
 800fde0:	60b9      	str	r1, [r7, #8]
 800fde2:	607a      	str	r2, [r7, #4]
 800fde4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d106      	bne.n	800fdfa <tcp_eff_send_mss_netif+0x22>
 800fdec:	4b14      	ldr	r3, [pc, #80]	; (800fe40 <tcp_eff_send_mss_netif+0x68>)
 800fdee:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800fdf2:	4914      	ldr	r1, [pc, #80]	; (800fe44 <tcp_eff_send_mss_netif+0x6c>)
 800fdf4:	4814      	ldr	r0, [pc, #80]	; (800fe48 <tcp_eff_send_mss_netif+0x70>)
 800fdf6:	f00b f985 	bl	801b104 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800fdfa:	68bb      	ldr	r3, [r7, #8]
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d101      	bne.n	800fe04 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800fe00:	89fb      	ldrh	r3, [r7, #14]
 800fe02:	e019      	b.n	800fe38 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800fe04:	68bb      	ldr	r3, [r7, #8]
 800fe06:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800fe08:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800fe0a:	8afb      	ldrh	r3, [r7, #22]
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d012      	beq.n	800fe36 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800fe10:	2328      	movs	r3, #40	; 0x28
 800fe12:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800fe14:	8afa      	ldrh	r2, [r7, #22]
 800fe16:	8abb      	ldrh	r3, [r7, #20]
 800fe18:	429a      	cmp	r2, r3
 800fe1a:	d904      	bls.n	800fe26 <tcp_eff_send_mss_netif+0x4e>
 800fe1c:	8afa      	ldrh	r2, [r7, #22]
 800fe1e:	8abb      	ldrh	r3, [r7, #20]
 800fe20:	1ad3      	subs	r3, r2, r3
 800fe22:	b29b      	uxth	r3, r3
 800fe24:	e000      	b.n	800fe28 <tcp_eff_send_mss_netif+0x50>
 800fe26:	2300      	movs	r3, #0
 800fe28:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800fe2a:	8a7a      	ldrh	r2, [r7, #18]
 800fe2c:	89fb      	ldrh	r3, [r7, #14]
 800fe2e:	4293      	cmp	r3, r2
 800fe30:	bf28      	it	cs
 800fe32:	4613      	movcs	r3, r2
 800fe34:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800fe36:	89fb      	ldrh	r3, [r7, #14]
}
 800fe38:	4618      	mov	r0, r3
 800fe3a:	3718      	adds	r7, #24
 800fe3c:	46bd      	mov	sp, r7
 800fe3e:	bd80      	pop	{r7, pc}
 800fe40:	0801cf88 	.word	0x0801cf88
 800fe44:	0801d694 	.word	0x0801d694
 800fe48:	0801cfcc 	.word	0x0801cfcc

0800fe4c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800fe4c:	b580      	push	{r7, lr}
 800fe4e:	b084      	sub	sp, #16
 800fe50:	af00      	add	r7, sp, #0
 800fe52:	6078      	str	r0, [r7, #4]
 800fe54:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800fe56:	683b      	ldr	r3, [r7, #0]
 800fe58:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d119      	bne.n	800fe94 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800fe60:	4b10      	ldr	r3, [pc, #64]	; (800fea4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800fe62:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800fe66:	4910      	ldr	r1, [pc, #64]	; (800fea8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800fe68:	4810      	ldr	r0, [pc, #64]	; (800feac <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800fe6a:	f00b f94b 	bl	801b104 <iprintf>

  while (pcb != NULL) {
 800fe6e:	e011      	b.n	800fe94 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	681a      	ldr	r2, [r3, #0]
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	429a      	cmp	r2, r3
 800fe7a:	d108      	bne.n	800fe8e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	68db      	ldr	r3, [r3, #12]
 800fe80:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800fe82:	68f8      	ldr	r0, [r7, #12]
 800fe84:	f7fe fd9a 	bl	800e9bc <tcp_abort>
      pcb = next;
 800fe88:	68bb      	ldr	r3, [r7, #8]
 800fe8a:	60fb      	str	r3, [r7, #12]
 800fe8c:	e002      	b.n	800fe94 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	68db      	ldr	r3, [r3, #12]
 800fe92:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d1ea      	bne.n	800fe70 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800fe9a:	bf00      	nop
 800fe9c:	bf00      	nop
 800fe9e:	3710      	adds	r7, #16
 800fea0:	46bd      	mov	sp, r7
 800fea2:	bd80      	pop	{r7, pc}
 800fea4:	0801cf88 	.word	0x0801cf88
 800fea8:	0801d6bc 	.word	0x0801d6bc
 800feac:	0801cfcc 	.word	0x0801cfcc

0800feb0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800feb0:	b580      	push	{r7, lr}
 800feb2:	b084      	sub	sp, #16
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	6078      	str	r0, [r7, #4]
 800feb8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	2b00      	cmp	r3, #0
 800febe:	d02a      	beq.n	800ff16 <tcp_netif_ip_addr_changed+0x66>
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d026      	beq.n	800ff16 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800fec8:	4b15      	ldr	r3, [pc, #84]	; (800ff20 <tcp_netif_ip_addr_changed+0x70>)
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	4619      	mov	r1, r3
 800fece:	6878      	ldr	r0, [r7, #4]
 800fed0:	f7ff ffbc 	bl	800fe4c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800fed4:	4b13      	ldr	r3, [pc, #76]	; (800ff24 <tcp_netif_ip_addr_changed+0x74>)
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	4619      	mov	r1, r3
 800feda:	6878      	ldr	r0, [r7, #4]
 800fedc:	f7ff ffb6 	bl	800fe4c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800fee0:	683b      	ldr	r3, [r7, #0]
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d017      	beq.n	800ff16 <tcp_netif_ip_addr_changed+0x66>
 800fee6:	683b      	ldr	r3, [r7, #0]
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	2b00      	cmp	r3, #0
 800feec:	d013      	beq.n	800ff16 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800feee:	4b0e      	ldr	r3, [pc, #56]	; (800ff28 <tcp_netif_ip_addr_changed+0x78>)
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	60fb      	str	r3, [r7, #12]
 800fef4:	e00c      	b.n	800ff10 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	681a      	ldr	r2, [r3, #0]
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	429a      	cmp	r2, r3
 800ff00:	d103      	bne.n	800ff0a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800ff02:	683b      	ldr	r3, [r7, #0]
 800ff04:	681a      	ldr	r2, [r3, #0]
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	68db      	ldr	r3, [r3, #12]
 800ff0e:	60fb      	str	r3, [r7, #12]
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d1ef      	bne.n	800fef6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800ff16:	bf00      	nop
 800ff18:	3710      	adds	r7, #16
 800ff1a:	46bd      	mov	sp, r7
 800ff1c:	bd80      	pop	{r7, pc}
 800ff1e:	bf00      	nop
 800ff20:	2000db1c 	.word	0x2000db1c
 800ff24:	2000db28 	.word	0x2000db28
 800ff28:	2000db24 	.word	0x2000db24

0800ff2c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800ff2c:	b580      	push	{r7, lr}
 800ff2e:	b082      	sub	sp, #8
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d007      	beq.n	800ff4c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ff40:	4618      	mov	r0, r3
 800ff42:	f7ff fb6f 	bl	800f624 <tcp_segs_free>
    pcb->ooseq = NULL;
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	2200      	movs	r2, #0
 800ff4a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800ff4c:	bf00      	nop
 800ff4e:	3708      	adds	r7, #8
 800ff50:	46bd      	mov	sp, r7
 800ff52:	bd80      	pop	{r7, pc}

0800ff54 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800ff54:	b590      	push	{r4, r7, lr}
 800ff56:	b08d      	sub	sp, #52	; 0x34
 800ff58:	af04      	add	r7, sp, #16
 800ff5a:	6078      	str	r0, [r7, #4]
 800ff5c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d105      	bne.n	800ff70 <tcp_input+0x1c>
 800ff64:	4b9b      	ldr	r3, [pc, #620]	; (80101d4 <tcp_input+0x280>)
 800ff66:	2283      	movs	r2, #131	; 0x83
 800ff68:	499b      	ldr	r1, [pc, #620]	; (80101d8 <tcp_input+0x284>)
 800ff6a:	489c      	ldr	r0, [pc, #624]	; (80101dc <tcp_input+0x288>)
 800ff6c:	f00b f8ca 	bl	801b104 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	685b      	ldr	r3, [r3, #4]
 800ff74:	4a9a      	ldr	r2, [pc, #616]	; (80101e0 <tcp_input+0x28c>)
 800ff76:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	895b      	ldrh	r3, [r3, #10]
 800ff7c:	2b13      	cmp	r3, #19
 800ff7e:	f240 83c4 	bls.w	801070a <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ff82:	4b98      	ldr	r3, [pc, #608]	; (80101e4 <tcp_input+0x290>)
 800ff84:	695b      	ldr	r3, [r3, #20]
 800ff86:	4a97      	ldr	r2, [pc, #604]	; (80101e4 <tcp_input+0x290>)
 800ff88:	6812      	ldr	r2, [r2, #0]
 800ff8a:	4611      	mov	r1, r2
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	f006 fa4f 	bl	8016430 <ip4_addr_isbroadcast_u32>
 800ff92:	4603      	mov	r3, r0
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	f040 83ba 	bne.w	801070e <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800ff9a:	4b92      	ldr	r3, [pc, #584]	; (80101e4 <tcp_input+0x290>)
 800ff9c:	695b      	ldr	r3, [r3, #20]
 800ff9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ffa2:	2be0      	cmp	r3, #224	; 0xe0
 800ffa4:	f000 83b3 	beq.w	801070e <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800ffa8:	4b8d      	ldr	r3, [pc, #564]	; (80101e0 <tcp_input+0x28c>)
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	899b      	ldrh	r3, [r3, #12]
 800ffae:	b29b      	uxth	r3, r3
 800ffb0:	4618      	mov	r0, r3
 800ffb2:	f7fc fb67 	bl	800c684 <lwip_htons>
 800ffb6:	4603      	mov	r3, r0
 800ffb8:	0b1b      	lsrs	r3, r3, #12
 800ffba:	b29b      	uxth	r3, r3
 800ffbc:	b2db      	uxtb	r3, r3
 800ffbe:	009b      	lsls	r3, r3, #2
 800ffc0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800ffc2:	7cbb      	ldrb	r3, [r7, #18]
 800ffc4:	2b13      	cmp	r3, #19
 800ffc6:	f240 83a4 	bls.w	8010712 <tcp_input+0x7be>
 800ffca:	7cbb      	ldrb	r3, [r7, #18]
 800ffcc:	b29a      	uxth	r2, r3
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	891b      	ldrh	r3, [r3, #8]
 800ffd2:	429a      	cmp	r2, r3
 800ffd4:	f200 839d 	bhi.w	8010712 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800ffd8:	7cbb      	ldrb	r3, [r7, #18]
 800ffda:	b29b      	uxth	r3, r3
 800ffdc:	3b14      	subs	r3, #20
 800ffde:	b29a      	uxth	r2, r3
 800ffe0:	4b81      	ldr	r3, [pc, #516]	; (80101e8 <tcp_input+0x294>)
 800ffe2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800ffe4:	4b81      	ldr	r3, [pc, #516]	; (80101ec <tcp_input+0x298>)
 800ffe6:	2200      	movs	r2, #0
 800ffe8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	895a      	ldrh	r2, [r3, #10]
 800ffee:	7cbb      	ldrb	r3, [r7, #18]
 800fff0:	b29b      	uxth	r3, r3
 800fff2:	429a      	cmp	r2, r3
 800fff4:	d309      	bcc.n	801000a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800fff6:	4b7c      	ldr	r3, [pc, #496]	; (80101e8 <tcp_input+0x294>)
 800fff8:	881a      	ldrh	r2, [r3, #0]
 800fffa:	4b7d      	ldr	r3, [pc, #500]	; (80101f0 <tcp_input+0x29c>)
 800fffc:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800fffe:	7cbb      	ldrb	r3, [r7, #18]
 8010000:	4619      	mov	r1, r3
 8010002:	6878      	ldr	r0, [r7, #4]
 8010004:	f7fd fe64 	bl	800dcd0 <pbuf_remove_header>
 8010008:	e04e      	b.n	80100a8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	2b00      	cmp	r3, #0
 8010010:	d105      	bne.n	801001e <tcp_input+0xca>
 8010012:	4b70      	ldr	r3, [pc, #448]	; (80101d4 <tcp_input+0x280>)
 8010014:	22c2      	movs	r2, #194	; 0xc2
 8010016:	4977      	ldr	r1, [pc, #476]	; (80101f4 <tcp_input+0x2a0>)
 8010018:	4870      	ldr	r0, [pc, #448]	; (80101dc <tcp_input+0x288>)
 801001a:	f00b f873 	bl	801b104 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801001e:	2114      	movs	r1, #20
 8010020:	6878      	ldr	r0, [r7, #4]
 8010022:	f7fd fe55 	bl	800dcd0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	895a      	ldrh	r2, [r3, #10]
 801002a:	4b71      	ldr	r3, [pc, #452]	; (80101f0 <tcp_input+0x29c>)
 801002c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801002e:	4b6e      	ldr	r3, [pc, #440]	; (80101e8 <tcp_input+0x294>)
 8010030:	881a      	ldrh	r2, [r3, #0]
 8010032:	4b6f      	ldr	r3, [pc, #444]	; (80101f0 <tcp_input+0x29c>)
 8010034:	881b      	ldrh	r3, [r3, #0]
 8010036:	1ad3      	subs	r3, r2, r3
 8010038:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801003a:	4b6d      	ldr	r3, [pc, #436]	; (80101f0 <tcp_input+0x29c>)
 801003c:	881b      	ldrh	r3, [r3, #0]
 801003e:	4619      	mov	r1, r3
 8010040:	6878      	ldr	r0, [r7, #4]
 8010042:	f7fd fe45 	bl	800dcd0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	895b      	ldrh	r3, [r3, #10]
 801004c:	8a3a      	ldrh	r2, [r7, #16]
 801004e:	429a      	cmp	r2, r3
 8010050:	f200 8361 	bhi.w	8010716 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	685b      	ldr	r3, [r3, #4]
 801005a:	4a64      	ldr	r2, [pc, #400]	; (80101ec <tcp_input+0x298>)
 801005c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	8a3a      	ldrh	r2, [r7, #16]
 8010064:	4611      	mov	r1, r2
 8010066:	4618      	mov	r0, r3
 8010068:	f7fd fe32 	bl	800dcd0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	891a      	ldrh	r2, [r3, #8]
 8010070:	8a3b      	ldrh	r3, [r7, #16]
 8010072:	1ad3      	subs	r3, r2, r3
 8010074:	b29a      	uxth	r2, r3
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	895b      	ldrh	r3, [r3, #10]
 801007e:	2b00      	cmp	r3, #0
 8010080:	d005      	beq.n	801008e <tcp_input+0x13a>
 8010082:	4b54      	ldr	r3, [pc, #336]	; (80101d4 <tcp_input+0x280>)
 8010084:	22df      	movs	r2, #223	; 0xdf
 8010086:	495c      	ldr	r1, [pc, #368]	; (80101f8 <tcp_input+0x2a4>)
 8010088:	4854      	ldr	r0, [pc, #336]	; (80101dc <tcp_input+0x288>)
 801008a:	f00b f83b 	bl	801b104 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	891a      	ldrh	r2, [r3, #8]
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	891b      	ldrh	r3, [r3, #8]
 8010098:	429a      	cmp	r2, r3
 801009a:	d005      	beq.n	80100a8 <tcp_input+0x154>
 801009c:	4b4d      	ldr	r3, [pc, #308]	; (80101d4 <tcp_input+0x280>)
 801009e:	22e0      	movs	r2, #224	; 0xe0
 80100a0:	4956      	ldr	r1, [pc, #344]	; (80101fc <tcp_input+0x2a8>)
 80100a2:	484e      	ldr	r0, [pc, #312]	; (80101dc <tcp_input+0x288>)
 80100a4:	f00b f82e 	bl	801b104 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80100a8:	4b4d      	ldr	r3, [pc, #308]	; (80101e0 <tcp_input+0x28c>)
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	881b      	ldrh	r3, [r3, #0]
 80100ae:	b29b      	uxth	r3, r3
 80100b0:	4a4b      	ldr	r2, [pc, #300]	; (80101e0 <tcp_input+0x28c>)
 80100b2:	6814      	ldr	r4, [r2, #0]
 80100b4:	4618      	mov	r0, r3
 80100b6:	f7fc fae5 	bl	800c684 <lwip_htons>
 80100ba:	4603      	mov	r3, r0
 80100bc:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80100be:	4b48      	ldr	r3, [pc, #288]	; (80101e0 <tcp_input+0x28c>)
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	885b      	ldrh	r3, [r3, #2]
 80100c4:	b29b      	uxth	r3, r3
 80100c6:	4a46      	ldr	r2, [pc, #280]	; (80101e0 <tcp_input+0x28c>)
 80100c8:	6814      	ldr	r4, [r2, #0]
 80100ca:	4618      	mov	r0, r3
 80100cc:	f7fc fada 	bl	800c684 <lwip_htons>
 80100d0:	4603      	mov	r3, r0
 80100d2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80100d4:	4b42      	ldr	r3, [pc, #264]	; (80101e0 <tcp_input+0x28c>)
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	685b      	ldr	r3, [r3, #4]
 80100da:	4a41      	ldr	r2, [pc, #260]	; (80101e0 <tcp_input+0x28c>)
 80100dc:	6814      	ldr	r4, [r2, #0]
 80100de:	4618      	mov	r0, r3
 80100e0:	f7fc fae5 	bl	800c6ae <lwip_htonl>
 80100e4:	4603      	mov	r3, r0
 80100e6:	6063      	str	r3, [r4, #4]
 80100e8:	6863      	ldr	r3, [r4, #4]
 80100ea:	4a45      	ldr	r2, [pc, #276]	; (8010200 <tcp_input+0x2ac>)
 80100ec:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80100ee:	4b3c      	ldr	r3, [pc, #240]	; (80101e0 <tcp_input+0x28c>)
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	689b      	ldr	r3, [r3, #8]
 80100f4:	4a3a      	ldr	r2, [pc, #232]	; (80101e0 <tcp_input+0x28c>)
 80100f6:	6814      	ldr	r4, [r2, #0]
 80100f8:	4618      	mov	r0, r3
 80100fa:	f7fc fad8 	bl	800c6ae <lwip_htonl>
 80100fe:	4603      	mov	r3, r0
 8010100:	60a3      	str	r3, [r4, #8]
 8010102:	68a3      	ldr	r3, [r4, #8]
 8010104:	4a3f      	ldr	r2, [pc, #252]	; (8010204 <tcp_input+0x2b0>)
 8010106:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8010108:	4b35      	ldr	r3, [pc, #212]	; (80101e0 <tcp_input+0x28c>)
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	89db      	ldrh	r3, [r3, #14]
 801010e:	b29b      	uxth	r3, r3
 8010110:	4a33      	ldr	r2, [pc, #204]	; (80101e0 <tcp_input+0x28c>)
 8010112:	6814      	ldr	r4, [r2, #0]
 8010114:	4618      	mov	r0, r3
 8010116:	f7fc fab5 	bl	800c684 <lwip_htons>
 801011a:	4603      	mov	r3, r0
 801011c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801011e:	4b30      	ldr	r3, [pc, #192]	; (80101e0 <tcp_input+0x28c>)
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	899b      	ldrh	r3, [r3, #12]
 8010124:	b29b      	uxth	r3, r3
 8010126:	4618      	mov	r0, r3
 8010128:	f7fc faac 	bl	800c684 <lwip_htons>
 801012c:	4603      	mov	r3, r0
 801012e:	b2db      	uxtb	r3, r3
 8010130:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010134:	b2da      	uxtb	r2, r3
 8010136:	4b34      	ldr	r3, [pc, #208]	; (8010208 <tcp_input+0x2b4>)
 8010138:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	891a      	ldrh	r2, [r3, #8]
 801013e:	4b33      	ldr	r3, [pc, #204]	; (801020c <tcp_input+0x2b8>)
 8010140:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8010142:	4b31      	ldr	r3, [pc, #196]	; (8010208 <tcp_input+0x2b4>)
 8010144:	781b      	ldrb	r3, [r3, #0]
 8010146:	f003 0303 	and.w	r3, r3, #3
 801014a:	2b00      	cmp	r3, #0
 801014c:	d00c      	beq.n	8010168 <tcp_input+0x214>
    tcplen++;
 801014e:	4b2f      	ldr	r3, [pc, #188]	; (801020c <tcp_input+0x2b8>)
 8010150:	881b      	ldrh	r3, [r3, #0]
 8010152:	3301      	adds	r3, #1
 8010154:	b29a      	uxth	r2, r3
 8010156:	4b2d      	ldr	r3, [pc, #180]	; (801020c <tcp_input+0x2b8>)
 8010158:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	891a      	ldrh	r2, [r3, #8]
 801015e:	4b2b      	ldr	r3, [pc, #172]	; (801020c <tcp_input+0x2b8>)
 8010160:	881b      	ldrh	r3, [r3, #0]
 8010162:	429a      	cmp	r2, r3
 8010164:	f200 82d9 	bhi.w	801071a <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8010168:	2300      	movs	r3, #0
 801016a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801016c:	4b28      	ldr	r3, [pc, #160]	; (8010210 <tcp_input+0x2bc>)
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	61fb      	str	r3, [r7, #28]
 8010172:	e09d      	b.n	80102b0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8010174:	69fb      	ldr	r3, [r7, #28]
 8010176:	7d1b      	ldrb	r3, [r3, #20]
 8010178:	2b00      	cmp	r3, #0
 801017a:	d105      	bne.n	8010188 <tcp_input+0x234>
 801017c:	4b15      	ldr	r3, [pc, #84]	; (80101d4 <tcp_input+0x280>)
 801017e:	22fb      	movs	r2, #251	; 0xfb
 8010180:	4924      	ldr	r1, [pc, #144]	; (8010214 <tcp_input+0x2c0>)
 8010182:	4816      	ldr	r0, [pc, #88]	; (80101dc <tcp_input+0x288>)
 8010184:	f00a ffbe 	bl	801b104 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8010188:	69fb      	ldr	r3, [r7, #28]
 801018a:	7d1b      	ldrb	r3, [r3, #20]
 801018c:	2b0a      	cmp	r3, #10
 801018e:	d105      	bne.n	801019c <tcp_input+0x248>
 8010190:	4b10      	ldr	r3, [pc, #64]	; (80101d4 <tcp_input+0x280>)
 8010192:	22fc      	movs	r2, #252	; 0xfc
 8010194:	4920      	ldr	r1, [pc, #128]	; (8010218 <tcp_input+0x2c4>)
 8010196:	4811      	ldr	r0, [pc, #68]	; (80101dc <tcp_input+0x288>)
 8010198:	f00a ffb4 	bl	801b104 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801019c:	69fb      	ldr	r3, [r7, #28]
 801019e:	7d1b      	ldrb	r3, [r3, #20]
 80101a0:	2b01      	cmp	r3, #1
 80101a2:	d105      	bne.n	80101b0 <tcp_input+0x25c>
 80101a4:	4b0b      	ldr	r3, [pc, #44]	; (80101d4 <tcp_input+0x280>)
 80101a6:	22fd      	movs	r2, #253	; 0xfd
 80101a8:	491c      	ldr	r1, [pc, #112]	; (801021c <tcp_input+0x2c8>)
 80101aa:	480c      	ldr	r0, [pc, #48]	; (80101dc <tcp_input+0x288>)
 80101ac:	f00a ffaa 	bl	801b104 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80101b0:	69fb      	ldr	r3, [r7, #28]
 80101b2:	7a1b      	ldrb	r3, [r3, #8]
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d033      	beq.n	8010220 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80101b8:	69fb      	ldr	r3, [r7, #28]
 80101ba:	7a1a      	ldrb	r2, [r3, #8]
 80101bc:	4b09      	ldr	r3, [pc, #36]	; (80101e4 <tcp_input+0x290>)
 80101be:	685b      	ldr	r3, [r3, #4]
 80101c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80101c4:	3301      	adds	r3, #1
 80101c6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80101c8:	429a      	cmp	r2, r3
 80101ca:	d029      	beq.n	8010220 <tcp_input+0x2cc>
      prev = pcb;
 80101cc:	69fb      	ldr	r3, [r7, #28]
 80101ce:	61bb      	str	r3, [r7, #24]
      continue;
 80101d0:	e06b      	b.n	80102aa <tcp_input+0x356>
 80101d2:	bf00      	nop
 80101d4:	0801d6f0 	.word	0x0801d6f0
 80101d8:	0801d724 	.word	0x0801d724
 80101dc:	0801d73c 	.word	0x0801d73c
 80101e0:	20004bd4 	.word	0x20004bd4
 80101e4:	20008238 	.word	0x20008238
 80101e8:	20004bd8 	.word	0x20004bd8
 80101ec:	20004bdc 	.word	0x20004bdc
 80101f0:	20004bda 	.word	0x20004bda
 80101f4:	0801d764 	.word	0x0801d764
 80101f8:	0801d774 	.word	0x0801d774
 80101fc:	0801d780 	.word	0x0801d780
 8010200:	20004be4 	.word	0x20004be4
 8010204:	20004be8 	.word	0x20004be8
 8010208:	20004bf0 	.word	0x20004bf0
 801020c:	20004bee 	.word	0x20004bee
 8010210:	2000db1c 	.word	0x2000db1c
 8010214:	0801d7a0 	.word	0x0801d7a0
 8010218:	0801d7c8 	.word	0x0801d7c8
 801021c:	0801d7f4 	.word	0x0801d7f4
    }

    if (pcb->remote_port == tcphdr->src &&
 8010220:	69fb      	ldr	r3, [r7, #28]
 8010222:	8b1a      	ldrh	r2, [r3, #24]
 8010224:	4b94      	ldr	r3, [pc, #592]	; (8010478 <tcp_input+0x524>)
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	881b      	ldrh	r3, [r3, #0]
 801022a:	b29b      	uxth	r3, r3
 801022c:	429a      	cmp	r2, r3
 801022e:	d13a      	bne.n	80102a6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8010230:	69fb      	ldr	r3, [r7, #28]
 8010232:	8ada      	ldrh	r2, [r3, #22]
 8010234:	4b90      	ldr	r3, [pc, #576]	; (8010478 <tcp_input+0x524>)
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	885b      	ldrh	r3, [r3, #2]
 801023a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 801023c:	429a      	cmp	r2, r3
 801023e:	d132      	bne.n	80102a6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010240:	69fb      	ldr	r3, [r7, #28]
 8010242:	685a      	ldr	r2, [r3, #4]
 8010244:	4b8d      	ldr	r3, [pc, #564]	; (801047c <tcp_input+0x528>)
 8010246:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8010248:	429a      	cmp	r2, r3
 801024a:	d12c      	bne.n	80102a6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801024c:	69fb      	ldr	r3, [r7, #28]
 801024e:	681a      	ldr	r2, [r3, #0]
 8010250:	4b8a      	ldr	r3, [pc, #552]	; (801047c <tcp_input+0x528>)
 8010252:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010254:	429a      	cmp	r2, r3
 8010256:	d126      	bne.n	80102a6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8010258:	69fb      	ldr	r3, [r7, #28]
 801025a:	68db      	ldr	r3, [r3, #12]
 801025c:	69fa      	ldr	r2, [r7, #28]
 801025e:	429a      	cmp	r2, r3
 8010260:	d106      	bne.n	8010270 <tcp_input+0x31c>
 8010262:	4b87      	ldr	r3, [pc, #540]	; (8010480 <tcp_input+0x52c>)
 8010264:	f240 120d 	movw	r2, #269	; 0x10d
 8010268:	4986      	ldr	r1, [pc, #536]	; (8010484 <tcp_input+0x530>)
 801026a:	4887      	ldr	r0, [pc, #540]	; (8010488 <tcp_input+0x534>)
 801026c:	f00a ff4a 	bl	801b104 <iprintf>
      if (prev != NULL) {
 8010270:	69bb      	ldr	r3, [r7, #24]
 8010272:	2b00      	cmp	r3, #0
 8010274:	d00a      	beq.n	801028c <tcp_input+0x338>
        prev->next = pcb->next;
 8010276:	69fb      	ldr	r3, [r7, #28]
 8010278:	68da      	ldr	r2, [r3, #12]
 801027a:	69bb      	ldr	r3, [r7, #24]
 801027c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801027e:	4b83      	ldr	r3, [pc, #524]	; (801048c <tcp_input+0x538>)
 8010280:	681a      	ldr	r2, [r3, #0]
 8010282:	69fb      	ldr	r3, [r7, #28]
 8010284:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8010286:	4a81      	ldr	r2, [pc, #516]	; (801048c <tcp_input+0x538>)
 8010288:	69fb      	ldr	r3, [r7, #28]
 801028a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801028c:	69fb      	ldr	r3, [r7, #28]
 801028e:	68db      	ldr	r3, [r3, #12]
 8010290:	69fa      	ldr	r2, [r7, #28]
 8010292:	429a      	cmp	r2, r3
 8010294:	d111      	bne.n	80102ba <tcp_input+0x366>
 8010296:	4b7a      	ldr	r3, [pc, #488]	; (8010480 <tcp_input+0x52c>)
 8010298:	f240 1215 	movw	r2, #277	; 0x115
 801029c:	497c      	ldr	r1, [pc, #496]	; (8010490 <tcp_input+0x53c>)
 801029e:	487a      	ldr	r0, [pc, #488]	; (8010488 <tcp_input+0x534>)
 80102a0:	f00a ff30 	bl	801b104 <iprintf>
      break;
 80102a4:	e009      	b.n	80102ba <tcp_input+0x366>
    }
    prev = pcb;
 80102a6:	69fb      	ldr	r3, [r7, #28]
 80102a8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80102aa:	69fb      	ldr	r3, [r7, #28]
 80102ac:	68db      	ldr	r3, [r3, #12]
 80102ae:	61fb      	str	r3, [r7, #28]
 80102b0:	69fb      	ldr	r3, [r7, #28]
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	f47f af5e 	bne.w	8010174 <tcp_input+0x220>
 80102b8:	e000      	b.n	80102bc <tcp_input+0x368>
      break;
 80102ba:	bf00      	nop
  }

  if (pcb == NULL) {
 80102bc:	69fb      	ldr	r3, [r7, #28]
 80102be:	2b00      	cmp	r3, #0
 80102c0:	f040 8095 	bne.w	80103ee <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80102c4:	4b73      	ldr	r3, [pc, #460]	; (8010494 <tcp_input+0x540>)
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	61fb      	str	r3, [r7, #28]
 80102ca:	e03f      	b.n	801034c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80102cc:	69fb      	ldr	r3, [r7, #28]
 80102ce:	7d1b      	ldrb	r3, [r3, #20]
 80102d0:	2b0a      	cmp	r3, #10
 80102d2:	d006      	beq.n	80102e2 <tcp_input+0x38e>
 80102d4:	4b6a      	ldr	r3, [pc, #424]	; (8010480 <tcp_input+0x52c>)
 80102d6:	f240 121f 	movw	r2, #287	; 0x11f
 80102da:	496f      	ldr	r1, [pc, #444]	; (8010498 <tcp_input+0x544>)
 80102dc:	486a      	ldr	r0, [pc, #424]	; (8010488 <tcp_input+0x534>)
 80102de:	f00a ff11 	bl	801b104 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80102e2:	69fb      	ldr	r3, [r7, #28]
 80102e4:	7a1b      	ldrb	r3, [r3, #8]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d009      	beq.n	80102fe <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80102ea:	69fb      	ldr	r3, [r7, #28]
 80102ec:	7a1a      	ldrb	r2, [r3, #8]
 80102ee:	4b63      	ldr	r3, [pc, #396]	; (801047c <tcp_input+0x528>)
 80102f0:	685b      	ldr	r3, [r3, #4]
 80102f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80102f6:	3301      	adds	r3, #1
 80102f8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80102fa:	429a      	cmp	r2, r3
 80102fc:	d122      	bne.n	8010344 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80102fe:	69fb      	ldr	r3, [r7, #28]
 8010300:	8b1a      	ldrh	r2, [r3, #24]
 8010302:	4b5d      	ldr	r3, [pc, #372]	; (8010478 <tcp_input+0x524>)
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	881b      	ldrh	r3, [r3, #0]
 8010308:	b29b      	uxth	r3, r3
 801030a:	429a      	cmp	r2, r3
 801030c:	d11b      	bne.n	8010346 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801030e:	69fb      	ldr	r3, [r7, #28]
 8010310:	8ada      	ldrh	r2, [r3, #22]
 8010312:	4b59      	ldr	r3, [pc, #356]	; (8010478 <tcp_input+0x524>)
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	885b      	ldrh	r3, [r3, #2]
 8010318:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801031a:	429a      	cmp	r2, r3
 801031c:	d113      	bne.n	8010346 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801031e:	69fb      	ldr	r3, [r7, #28]
 8010320:	685a      	ldr	r2, [r3, #4]
 8010322:	4b56      	ldr	r3, [pc, #344]	; (801047c <tcp_input+0x528>)
 8010324:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8010326:	429a      	cmp	r2, r3
 8010328:	d10d      	bne.n	8010346 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801032a:	69fb      	ldr	r3, [r7, #28]
 801032c:	681a      	ldr	r2, [r3, #0]
 801032e:	4b53      	ldr	r3, [pc, #332]	; (801047c <tcp_input+0x528>)
 8010330:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010332:	429a      	cmp	r2, r3
 8010334:	d107      	bne.n	8010346 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8010336:	69f8      	ldr	r0, [r7, #28]
 8010338:	f000 fb54 	bl	80109e4 <tcp_timewait_input>
        }
        pbuf_free(p);
 801033c:	6878      	ldr	r0, [r7, #4]
 801033e:	f7fd fd4d 	bl	800dddc <pbuf_free>
        return;
 8010342:	e1f0      	b.n	8010726 <tcp_input+0x7d2>
        continue;
 8010344:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010346:	69fb      	ldr	r3, [r7, #28]
 8010348:	68db      	ldr	r3, [r3, #12]
 801034a:	61fb      	str	r3, [r7, #28]
 801034c:	69fb      	ldr	r3, [r7, #28]
 801034e:	2b00      	cmp	r3, #0
 8010350:	d1bc      	bne.n	80102cc <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8010352:	2300      	movs	r3, #0
 8010354:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010356:	4b51      	ldr	r3, [pc, #324]	; (801049c <tcp_input+0x548>)
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	617b      	str	r3, [r7, #20]
 801035c:	e02a      	b.n	80103b4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801035e:	697b      	ldr	r3, [r7, #20]
 8010360:	7a1b      	ldrb	r3, [r3, #8]
 8010362:	2b00      	cmp	r3, #0
 8010364:	d00c      	beq.n	8010380 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010366:	697b      	ldr	r3, [r7, #20]
 8010368:	7a1a      	ldrb	r2, [r3, #8]
 801036a:	4b44      	ldr	r3, [pc, #272]	; (801047c <tcp_input+0x528>)
 801036c:	685b      	ldr	r3, [r3, #4]
 801036e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010372:	3301      	adds	r3, #1
 8010374:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010376:	429a      	cmp	r2, r3
 8010378:	d002      	beq.n	8010380 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801037a:	697b      	ldr	r3, [r7, #20]
 801037c:	61bb      	str	r3, [r7, #24]
        continue;
 801037e:	e016      	b.n	80103ae <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8010380:	697b      	ldr	r3, [r7, #20]
 8010382:	8ada      	ldrh	r2, [r3, #22]
 8010384:	4b3c      	ldr	r3, [pc, #240]	; (8010478 <tcp_input+0x524>)
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	885b      	ldrh	r3, [r3, #2]
 801038a:	b29b      	uxth	r3, r3
 801038c:	429a      	cmp	r2, r3
 801038e:	d10c      	bne.n	80103aa <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8010390:	697b      	ldr	r3, [r7, #20]
 8010392:	681a      	ldr	r2, [r3, #0]
 8010394:	4b39      	ldr	r3, [pc, #228]	; (801047c <tcp_input+0x528>)
 8010396:	695b      	ldr	r3, [r3, #20]
 8010398:	429a      	cmp	r2, r3
 801039a:	d00f      	beq.n	80103bc <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801039c:	697b      	ldr	r3, [r7, #20]
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d00d      	beq.n	80103be <tcp_input+0x46a>
 80103a2:	697b      	ldr	r3, [r7, #20]
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d009      	beq.n	80103be <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80103aa:	697b      	ldr	r3, [r7, #20]
 80103ac:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80103ae:	697b      	ldr	r3, [r7, #20]
 80103b0:	68db      	ldr	r3, [r3, #12]
 80103b2:	617b      	str	r3, [r7, #20]
 80103b4:	697b      	ldr	r3, [r7, #20]
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d1d1      	bne.n	801035e <tcp_input+0x40a>
 80103ba:	e000      	b.n	80103be <tcp_input+0x46a>
            break;
 80103bc:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80103be:	697b      	ldr	r3, [r7, #20]
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d014      	beq.n	80103ee <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80103c4:	69bb      	ldr	r3, [r7, #24]
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d00a      	beq.n	80103e0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80103ca:	697b      	ldr	r3, [r7, #20]
 80103cc:	68da      	ldr	r2, [r3, #12]
 80103ce:	69bb      	ldr	r3, [r7, #24]
 80103d0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80103d2:	4b32      	ldr	r3, [pc, #200]	; (801049c <tcp_input+0x548>)
 80103d4:	681a      	ldr	r2, [r3, #0]
 80103d6:	697b      	ldr	r3, [r7, #20]
 80103d8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80103da:	4a30      	ldr	r2, [pc, #192]	; (801049c <tcp_input+0x548>)
 80103dc:	697b      	ldr	r3, [r7, #20]
 80103de:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80103e0:	6978      	ldr	r0, [r7, #20]
 80103e2:	f000 fa01 	bl	80107e8 <tcp_listen_input>
      }
      pbuf_free(p);
 80103e6:	6878      	ldr	r0, [r7, #4]
 80103e8:	f7fd fcf8 	bl	800dddc <pbuf_free>
      return;
 80103ec:	e19b      	b.n	8010726 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80103ee:	69fb      	ldr	r3, [r7, #28]
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	f000 8160 	beq.w	80106b6 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80103f6:	4b2a      	ldr	r3, [pc, #168]	; (80104a0 <tcp_input+0x54c>)
 80103f8:	2200      	movs	r2, #0
 80103fa:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	891a      	ldrh	r2, [r3, #8]
 8010400:	4b27      	ldr	r3, [pc, #156]	; (80104a0 <tcp_input+0x54c>)
 8010402:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8010404:	4a26      	ldr	r2, [pc, #152]	; (80104a0 <tcp_input+0x54c>)
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801040a:	4b1b      	ldr	r3, [pc, #108]	; (8010478 <tcp_input+0x524>)
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	4a24      	ldr	r2, [pc, #144]	; (80104a0 <tcp_input+0x54c>)
 8010410:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8010412:	4b24      	ldr	r3, [pc, #144]	; (80104a4 <tcp_input+0x550>)
 8010414:	2200      	movs	r2, #0
 8010416:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8010418:	4b23      	ldr	r3, [pc, #140]	; (80104a8 <tcp_input+0x554>)
 801041a:	2200      	movs	r2, #0
 801041c:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801041e:	4b23      	ldr	r3, [pc, #140]	; (80104ac <tcp_input+0x558>)
 8010420:	2200      	movs	r2, #0
 8010422:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8010424:	4b22      	ldr	r3, [pc, #136]	; (80104b0 <tcp_input+0x55c>)
 8010426:	781b      	ldrb	r3, [r3, #0]
 8010428:	f003 0308 	and.w	r3, r3, #8
 801042c:	2b00      	cmp	r3, #0
 801042e:	d006      	beq.n	801043e <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	7b5b      	ldrb	r3, [r3, #13]
 8010434:	f043 0301 	orr.w	r3, r3, #1
 8010438:	b2da      	uxtb	r2, r3
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801043e:	69fb      	ldr	r3, [r7, #28]
 8010440:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010442:	2b00      	cmp	r3, #0
 8010444:	d038      	beq.n	80104b8 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010446:	69f8      	ldr	r0, [r7, #28]
 8010448:	f7ff f870 	bl	800f52c <tcp_process_refused_data>
 801044c:	4603      	mov	r3, r0
 801044e:	f113 0f0d 	cmn.w	r3, #13
 8010452:	d007      	beq.n	8010464 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010454:	69fb      	ldr	r3, [r7, #28]
 8010456:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010458:	2b00      	cmp	r3, #0
 801045a:	d02d      	beq.n	80104b8 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801045c:	4b15      	ldr	r3, [pc, #84]	; (80104b4 <tcp_input+0x560>)
 801045e:	881b      	ldrh	r3, [r3, #0]
 8010460:	2b00      	cmp	r3, #0
 8010462:	d029      	beq.n	80104b8 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8010464:	69fb      	ldr	r3, [r7, #28]
 8010466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010468:	2b00      	cmp	r3, #0
 801046a:	f040 8104 	bne.w	8010676 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801046e:	69f8      	ldr	r0, [r7, #28]
 8010470:	f003 fe16 	bl	80140a0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8010474:	e0ff      	b.n	8010676 <tcp_input+0x722>
 8010476:	bf00      	nop
 8010478:	20004bd4 	.word	0x20004bd4
 801047c:	20008238 	.word	0x20008238
 8010480:	0801d6f0 	.word	0x0801d6f0
 8010484:	0801d81c 	.word	0x0801d81c
 8010488:	0801d73c 	.word	0x0801d73c
 801048c:	2000db1c 	.word	0x2000db1c
 8010490:	0801d848 	.word	0x0801d848
 8010494:	2000db2c 	.word	0x2000db2c
 8010498:	0801d874 	.word	0x0801d874
 801049c:	2000db24 	.word	0x2000db24
 80104a0:	20004bc4 	.word	0x20004bc4
 80104a4:	20004bf4 	.word	0x20004bf4
 80104a8:	20004bf1 	.word	0x20004bf1
 80104ac:	20004bec 	.word	0x20004bec
 80104b0:	20004bf0 	.word	0x20004bf0
 80104b4:	20004bee 	.word	0x20004bee
      }
    }
    tcp_input_pcb = pcb;
 80104b8:	4a9c      	ldr	r2, [pc, #624]	; (801072c <tcp_input+0x7d8>)
 80104ba:	69fb      	ldr	r3, [r7, #28]
 80104bc:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80104be:	69f8      	ldr	r0, [r7, #28]
 80104c0:	f000 fb0a 	bl	8010ad8 <tcp_process>
 80104c4:	4603      	mov	r3, r0
 80104c6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80104c8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80104cc:	f113 0f0d 	cmn.w	r3, #13
 80104d0:	f000 80d3 	beq.w	801067a <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 80104d4:	4b96      	ldr	r3, [pc, #600]	; (8010730 <tcp_input+0x7dc>)
 80104d6:	781b      	ldrb	r3, [r3, #0]
 80104d8:	f003 0308 	and.w	r3, r3, #8
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d015      	beq.n	801050c <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80104e0:	69fb      	ldr	r3, [r7, #28]
 80104e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d008      	beq.n	80104fc <tcp_input+0x5a8>
 80104ea:	69fb      	ldr	r3, [r7, #28]
 80104ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80104f0:	69fa      	ldr	r2, [r7, #28]
 80104f2:	6912      	ldr	r2, [r2, #16]
 80104f4:	f06f 010d 	mvn.w	r1, #13
 80104f8:	4610      	mov	r0, r2
 80104fa:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80104fc:	69f9      	ldr	r1, [r7, #28]
 80104fe:	488d      	ldr	r0, [pc, #564]	; (8010734 <tcp_input+0x7e0>)
 8010500:	f7ff fbb0 	bl	800fc64 <tcp_pcb_remove>
        tcp_free(pcb);
 8010504:	69f8      	ldr	r0, [r7, #28]
 8010506:	f7fd ff15 	bl	800e334 <tcp_free>
 801050a:	e0c1      	b.n	8010690 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 801050c:	2300      	movs	r3, #0
 801050e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8010510:	4b89      	ldr	r3, [pc, #548]	; (8010738 <tcp_input+0x7e4>)
 8010512:	881b      	ldrh	r3, [r3, #0]
 8010514:	2b00      	cmp	r3, #0
 8010516:	d01d      	beq.n	8010554 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8010518:	4b87      	ldr	r3, [pc, #540]	; (8010738 <tcp_input+0x7e4>)
 801051a:	881b      	ldrh	r3, [r3, #0]
 801051c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801051e:	69fb      	ldr	r3, [r7, #28]
 8010520:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010524:	2b00      	cmp	r3, #0
 8010526:	d00a      	beq.n	801053e <tcp_input+0x5ea>
 8010528:	69fb      	ldr	r3, [r7, #28]
 801052a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801052e:	69fa      	ldr	r2, [r7, #28]
 8010530:	6910      	ldr	r0, [r2, #16]
 8010532:	89fa      	ldrh	r2, [r7, #14]
 8010534:	69f9      	ldr	r1, [r7, #28]
 8010536:	4798      	blx	r3
 8010538:	4603      	mov	r3, r0
 801053a:	74fb      	strb	r3, [r7, #19]
 801053c:	e001      	b.n	8010542 <tcp_input+0x5ee>
 801053e:	2300      	movs	r3, #0
 8010540:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8010542:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010546:	f113 0f0d 	cmn.w	r3, #13
 801054a:	f000 8098 	beq.w	801067e <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 801054e:	4b7a      	ldr	r3, [pc, #488]	; (8010738 <tcp_input+0x7e4>)
 8010550:	2200      	movs	r2, #0
 8010552:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8010554:	69f8      	ldr	r0, [r7, #28]
 8010556:	f000 f907 	bl	8010768 <tcp_input_delayed_close>
 801055a:	4603      	mov	r3, r0
 801055c:	2b00      	cmp	r3, #0
 801055e:	f040 8090 	bne.w	8010682 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8010562:	4b76      	ldr	r3, [pc, #472]	; (801073c <tcp_input+0x7e8>)
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	2b00      	cmp	r3, #0
 8010568:	d041      	beq.n	80105ee <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801056a:	69fb      	ldr	r3, [r7, #28]
 801056c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801056e:	2b00      	cmp	r3, #0
 8010570:	d006      	beq.n	8010580 <tcp_input+0x62c>
 8010572:	4b73      	ldr	r3, [pc, #460]	; (8010740 <tcp_input+0x7ec>)
 8010574:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8010578:	4972      	ldr	r1, [pc, #456]	; (8010744 <tcp_input+0x7f0>)
 801057a:	4873      	ldr	r0, [pc, #460]	; (8010748 <tcp_input+0x7f4>)
 801057c:	f00a fdc2 	bl	801b104 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8010580:	69fb      	ldr	r3, [r7, #28]
 8010582:	8b5b      	ldrh	r3, [r3, #26]
 8010584:	f003 0310 	and.w	r3, r3, #16
 8010588:	2b00      	cmp	r3, #0
 801058a:	d008      	beq.n	801059e <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 801058c:	4b6b      	ldr	r3, [pc, #428]	; (801073c <tcp_input+0x7e8>)
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	4618      	mov	r0, r3
 8010592:	f7fd fc23 	bl	800dddc <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8010596:	69f8      	ldr	r0, [r7, #28]
 8010598:	f7fe fa10 	bl	800e9bc <tcp_abort>
            goto aborted;
 801059c:	e078      	b.n	8010690 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801059e:	69fb      	ldr	r3, [r7, #28]
 80105a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d00c      	beq.n	80105c2 <tcp_input+0x66e>
 80105a8:	69fb      	ldr	r3, [r7, #28]
 80105aa:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80105ae:	69fb      	ldr	r3, [r7, #28]
 80105b0:	6918      	ldr	r0, [r3, #16]
 80105b2:	4b62      	ldr	r3, [pc, #392]	; (801073c <tcp_input+0x7e8>)
 80105b4:	681a      	ldr	r2, [r3, #0]
 80105b6:	2300      	movs	r3, #0
 80105b8:	69f9      	ldr	r1, [r7, #28]
 80105ba:	47a0      	blx	r4
 80105bc:	4603      	mov	r3, r0
 80105be:	74fb      	strb	r3, [r7, #19]
 80105c0:	e008      	b.n	80105d4 <tcp_input+0x680>
 80105c2:	4b5e      	ldr	r3, [pc, #376]	; (801073c <tcp_input+0x7e8>)
 80105c4:	681a      	ldr	r2, [r3, #0]
 80105c6:	2300      	movs	r3, #0
 80105c8:	69f9      	ldr	r1, [r7, #28]
 80105ca:	2000      	movs	r0, #0
 80105cc:	f7ff f884 	bl	800f6d8 <tcp_recv_null>
 80105d0:	4603      	mov	r3, r0
 80105d2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80105d4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80105d8:	f113 0f0d 	cmn.w	r3, #13
 80105dc:	d053      	beq.n	8010686 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80105de:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d003      	beq.n	80105ee <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80105e6:	4b55      	ldr	r3, [pc, #340]	; (801073c <tcp_input+0x7e8>)
 80105e8:	681a      	ldr	r2, [r3, #0]
 80105ea:	69fb      	ldr	r3, [r7, #28]
 80105ec:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80105ee:	4b50      	ldr	r3, [pc, #320]	; (8010730 <tcp_input+0x7dc>)
 80105f0:	781b      	ldrb	r3, [r3, #0]
 80105f2:	f003 0320 	and.w	r3, r3, #32
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d030      	beq.n	801065c <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 80105fa:	69fb      	ldr	r3, [r7, #28]
 80105fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d009      	beq.n	8010616 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8010602:	69fb      	ldr	r3, [r7, #28]
 8010604:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010606:	7b5a      	ldrb	r2, [r3, #13]
 8010608:	69fb      	ldr	r3, [r7, #28]
 801060a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801060c:	f042 0220 	orr.w	r2, r2, #32
 8010610:	b2d2      	uxtb	r2, r2
 8010612:	735a      	strb	r2, [r3, #13]
 8010614:	e022      	b.n	801065c <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8010616:	69fb      	ldr	r3, [r7, #28]
 8010618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801061a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801061e:	d005      	beq.n	801062c <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8010620:	69fb      	ldr	r3, [r7, #28]
 8010622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010624:	3301      	adds	r3, #1
 8010626:	b29a      	uxth	r2, r3
 8010628:	69fb      	ldr	r3, [r7, #28]
 801062a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 801062c:	69fb      	ldr	r3, [r7, #28]
 801062e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010632:	2b00      	cmp	r3, #0
 8010634:	d00b      	beq.n	801064e <tcp_input+0x6fa>
 8010636:	69fb      	ldr	r3, [r7, #28]
 8010638:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801063c:	69fb      	ldr	r3, [r7, #28]
 801063e:	6918      	ldr	r0, [r3, #16]
 8010640:	2300      	movs	r3, #0
 8010642:	2200      	movs	r2, #0
 8010644:	69f9      	ldr	r1, [r7, #28]
 8010646:	47a0      	blx	r4
 8010648:	4603      	mov	r3, r0
 801064a:	74fb      	strb	r3, [r7, #19]
 801064c:	e001      	b.n	8010652 <tcp_input+0x6fe>
 801064e:	2300      	movs	r3, #0
 8010650:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8010652:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010656:	f113 0f0d 	cmn.w	r3, #13
 801065a:	d016      	beq.n	801068a <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801065c:	4b33      	ldr	r3, [pc, #204]	; (801072c <tcp_input+0x7d8>)
 801065e:	2200      	movs	r2, #0
 8010660:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8010662:	69f8      	ldr	r0, [r7, #28]
 8010664:	f000 f880 	bl	8010768 <tcp_input_delayed_close>
 8010668:	4603      	mov	r3, r0
 801066a:	2b00      	cmp	r3, #0
 801066c:	d10f      	bne.n	801068e <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801066e:	69f8      	ldr	r0, [r7, #28]
 8010670:	f002 ff10 	bl	8013494 <tcp_output>
 8010674:	e00c      	b.n	8010690 <tcp_input+0x73c>
        goto aborted;
 8010676:	bf00      	nop
 8010678:	e00a      	b.n	8010690 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801067a:	bf00      	nop
 801067c:	e008      	b.n	8010690 <tcp_input+0x73c>
              goto aborted;
 801067e:	bf00      	nop
 8010680:	e006      	b.n	8010690 <tcp_input+0x73c>
          goto aborted;
 8010682:	bf00      	nop
 8010684:	e004      	b.n	8010690 <tcp_input+0x73c>
            goto aborted;
 8010686:	bf00      	nop
 8010688:	e002      	b.n	8010690 <tcp_input+0x73c>
              goto aborted;
 801068a:	bf00      	nop
 801068c:	e000      	b.n	8010690 <tcp_input+0x73c>
          goto aborted;
 801068e:	bf00      	nop
    tcp_input_pcb = NULL;
 8010690:	4b26      	ldr	r3, [pc, #152]	; (801072c <tcp_input+0x7d8>)
 8010692:	2200      	movs	r2, #0
 8010694:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8010696:	4b29      	ldr	r3, [pc, #164]	; (801073c <tcp_input+0x7e8>)
 8010698:	2200      	movs	r2, #0
 801069a:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801069c:	4b2b      	ldr	r3, [pc, #172]	; (801074c <tcp_input+0x7f8>)
 801069e:	685b      	ldr	r3, [r3, #4]
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d03f      	beq.n	8010724 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 80106a4:	4b29      	ldr	r3, [pc, #164]	; (801074c <tcp_input+0x7f8>)
 80106a6:	685b      	ldr	r3, [r3, #4]
 80106a8:	4618      	mov	r0, r3
 80106aa:	f7fd fb97 	bl	800dddc <pbuf_free>
      inseg.p = NULL;
 80106ae:	4b27      	ldr	r3, [pc, #156]	; (801074c <tcp_input+0x7f8>)
 80106b0:	2200      	movs	r2, #0
 80106b2:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80106b4:	e036      	b.n	8010724 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80106b6:	4b26      	ldr	r3, [pc, #152]	; (8010750 <tcp_input+0x7fc>)
 80106b8:	681b      	ldr	r3, [r3, #0]
 80106ba:	899b      	ldrh	r3, [r3, #12]
 80106bc:	b29b      	uxth	r3, r3
 80106be:	4618      	mov	r0, r3
 80106c0:	f7fb ffe0 	bl	800c684 <lwip_htons>
 80106c4:	4603      	mov	r3, r0
 80106c6:	b2db      	uxtb	r3, r3
 80106c8:	f003 0304 	and.w	r3, r3, #4
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d118      	bne.n	8010702 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80106d0:	4b20      	ldr	r3, [pc, #128]	; (8010754 <tcp_input+0x800>)
 80106d2:	6819      	ldr	r1, [r3, #0]
 80106d4:	4b20      	ldr	r3, [pc, #128]	; (8010758 <tcp_input+0x804>)
 80106d6:	881b      	ldrh	r3, [r3, #0]
 80106d8:	461a      	mov	r2, r3
 80106da:	4b20      	ldr	r3, [pc, #128]	; (801075c <tcp_input+0x808>)
 80106dc:	681b      	ldr	r3, [r3, #0]
 80106de:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80106e0:	4b1b      	ldr	r3, [pc, #108]	; (8010750 <tcp_input+0x7fc>)
 80106e2:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80106e4:	885b      	ldrh	r3, [r3, #2]
 80106e6:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80106e8:	4a19      	ldr	r2, [pc, #100]	; (8010750 <tcp_input+0x7fc>)
 80106ea:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80106ec:	8812      	ldrh	r2, [r2, #0]
 80106ee:	b292      	uxth	r2, r2
 80106f0:	9202      	str	r2, [sp, #8]
 80106f2:	9301      	str	r3, [sp, #4]
 80106f4:	4b1a      	ldr	r3, [pc, #104]	; (8010760 <tcp_input+0x80c>)
 80106f6:	9300      	str	r3, [sp, #0]
 80106f8:	4b1a      	ldr	r3, [pc, #104]	; (8010764 <tcp_input+0x810>)
 80106fa:	4602      	mov	r2, r0
 80106fc:	2000      	movs	r0, #0
 80106fe:	f003 fc7d 	bl	8013ffc <tcp_rst>
    pbuf_free(p);
 8010702:	6878      	ldr	r0, [r7, #4]
 8010704:	f7fd fb6a 	bl	800dddc <pbuf_free>
  return;
 8010708:	e00c      	b.n	8010724 <tcp_input+0x7d0>
    goto dropped;
 801070a:	bf00      	nop
 801070c:	e006      	b.n	801071c <tcp_input+0x7c8>
    goto dropped;
 801070e:	bf00      	nop
 8010710:	e004      	b.n	801071c <tcp_input+0x7c8>
    goto dropped;
 8010712:	bf00      	nop
 8010714:	e002      	b.n	801071c <tcp_input+0x7c8>
      goto dropped;
 8010716:	bf00      	nop
 8010718:	e000      	b.n	801071c <tcp_input+0x7c8>
      goto dropped;
 801071a:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801071c:	6878      	ldr	r0, [r7, #4]
 801071e:	f7fd fb5d 	bl	800dddc <pbuf_free>
 8010722:	e000      	b.n	8010726 <tcp_input+0x7d2>
  return;
 8010724:	bf00      	nop
}
 8010726:	3724      	adds	r7, #36	; 0x24
 8010728:	46bd      	mov	sp, r7
 801072a:	bd90      	pop	{r4, r7, pc}
 801072c:	2000db30 	.word	0x2000db30
 8010730:	20004bf1 	.word	0x20004bf1
 8010734:	2000db1c 	.word	0x2000db1c
 8010738:	20004bec 	.word	0x20004bec
 801073c:	20004bf4 	.word	0x20004bf4
 8010740:	0801d6f0 	.word	0x0801d6f0
 8010744:	0801d8a4 	.word	0x0801d8a4
 8010748:	0801d73c 	.word	0x0801d73c
 801074c:	20004bc4 	.word	0x20004bc4
 8010750:	20004bd4 	.word	0x20004bd4
 8010754:	20004be8 	.word	0x20004be8
 8010758:	20004bee 	.word	0x20004bee
 801075c:	20004be4 	.word	0x20004be4
 8010760:	20008248 	.word	0x20008248
 8010764:	2000824c 	.word	0x2000824c

08010768 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8010768:	b580      	push	{r7, lr}
 801076a:	b082      	sub	sp, #8
 801076c:	af00      	add	r7, sp, #0
 801076e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	2b00      	cmp	r3, #0
 8010774:	d106      	bne.n	8010784 <tcp_input_delayed_close+0x1c>
 8010776:	4b17      	ldr	r3, [pc, #92]	; (80107d4 <tcp_input_delayed_close+0x6c>)
 8010778:	f240 225a 	movw	r2, #602	; 0x25a
 801077c:	4916      	ldr	r1, [pc, #88]	; (80107d8 <tcp_input_delayed_close+0x70>)
 801077e:	4817      	ldr	r0, [pc, #92]	; (80107dc <tcp_input_delayed_close+0x74>)
 8010780:	f00a fcc0 	bl	801b104 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8010784:	4b16      	ldr	r3, [pc, #88]	; (80107e0 <tcp_input_delayed_close+0x78>)
 8010786:	781b      	ldrb	r3, [r3, #0]
 8010788:	f003 0310 	and.w	r3, r3, #16
 801078c:	2b00      	cmp	r3, #0
 801078e:	d01c      	beq.n	80107ca <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	8b5b      	ldrh	r3, [r3, #26]
 8010794:	f003 0310 	and.w	r3, r3, #16
 8010798:	2b00      	cmp	r3, #0
 801079a:	d10d      	bne.n	80107b8 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d008      	beq.n	80107b8 <tcp_input_delayed_close+0x50>
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80107ac:	687a      	ldr	r2, [r7, #4]
 80107ae:	6912      	ldr	r2, [r2, #16]
 80107b0:	f06f 010e 	mvn.w	r1, #14
 80107b4:	4610      	mov	r0, r2
 80107b6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80107b8:	6879      	ldr	r1, [r7, #4]
 80107ba:	480a      	ldr	r0, [pc, #40]	; (80107e4 <tcp_input_delayed_close+0x7c>)
 80107bc:	f7ff fa52 	bl	800fc64 <tcp_pcb_remove>
    tcp_free(pcb);
 80107c0:	6878      	ldr	r0, [r7, #4]
 80107c2:	f7fd fdb7 	bl	800e334 <tcp_free>
    return 1;
 80107c6:	2301      	movs	r3, #1
 80107c8:	e000      	b.n	80107cc <tcp_input_delayed_close+0x64>
  }
  return 0;
 80107ca:	2300      	movs	r3, #0
}
 80107cc:	4618      	mov	r0, r3
 80107ce:	3708      	adds	r7, #8
 80107d0:	46bd      	mov	sp, r7
 80107d2:	bd80      	pop	{r7, pc}
 80107d4:	0801d6f0 	.word	0x0801d6f0
 80107d8:	0801d8c0 	.word	0x0801d8c0
 80107dc:	0801d73c 	.word	0x0801d73c
 80107e0:	20004bf1 	.word	0x20004bf1
 80107e4:	2000db1c 	.word	0x2000db1c

080107e8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80107e8:	b590      	push	{r4, r7, lr}
 80107ea:	b08b      	sub	sp, #44	; 0x2c
 80107ec:	af04      	add	r7, sp, #16
 80107ee:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80107f0:	4b6f      	ldr	r3, [pc, #444]	; (80109b0 <tcp_listen_input+0x1c8>)
 80107f2:	781b      	ldrb	r3, [r3, #0]
 80107f4:	f003 0304 	and.w	r3, r3, #4
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	f040 80d2 	bne.w	80109a2 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	2b00      	cmp	r3, #0
 8010802:	d106      	bne.n	8010812 <tcp_listen_input+0x2a>
 8010804:	4b6b      	ldr	r3, [pc, #428]	; (80109b4 <tcp_listen_input+0x1cc>)
 8010806:	f240 2281 	movw	r2, #641	; 0x281
 801080a:	496b      	ldr	r1, [pc, #428]	; (80109b8 <tcp_listen_input+0x1d0>)
 801080c:	486b      	ldr	r0, [pc, #428]	; (80109bc <tcp_listen_input+0x1d4>)
 801080e:	f00a fc79 	bl	801b104 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8010812:	4b67      	ldr	r3, [pc, #412]	; (80109b0 <tcp_listen_input+0x1c8>)
 8010814:	781b      	ldrb	r3, [r3, #0]
 8010816:	f003 0310 	and.w	r3, r3, #16
 801081a:	2b00      	cmp	r3, #0
 801081c:	d019      	beq.n	8010852 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801081e:	4b68      	ldr	r3, [pc, #416]	; (80109c0 <tcp_listen_input+0x1d8>)
 8010820:	6819      	ldr	r1, [r3, #0]
 8010822:	4b68      	ldr	r3, [pc, #416]	; (80109c4 <tcp_listen_input+0x1dc>)
 8010824:	881b      	ldrh	r3, [r3, #0]
 8010826:	461a      	mov	r2, r3
 8010828:	4b67      	ldr	r3, [pc, #412]	; (80109c8 <tcp_listen_input+0x1e0>)
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801082e:	4b67      	ldr	r3, [pc, #412]	; (80109cc <tcp_listen_input+0x1e4>)
 8010830:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010832:	885b      	ldrh	r3, [r3, #2]
 8010834:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010836:	4a65      	ldr	r2, [pc, #404]	; (80109cc <tcp_listen_input+0x1e4>)
 8010838:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801083a:	8812      	ldrh	r2, [r2, #0]
 801083c:	b292      	uxth	r2, r2
 801083e:	9202      	str	r2, [sp, #8]
 8010840:	9301      	str	r3, [sp, #4]
 8010842:	4b63      	ldr	r3, [pc, #396]	; (80109d0 <tcp_listen_input+0x1e8>)
 8010844:	9300      	str	r3, [sp, #0]
 8010846:	4b63      	ldr	r3, [pc, #396]	; (80109d4 <tcp_listen_input+0x1ec>)
 8010848:	4602      	mov	r2, r0
 801084a:	6878      	ldr	r0, [r7, #4]
 801084c:	f003 fbd6 	bl	8013ffc <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8010850:	e0a9      	b.n	80109a6 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8010852:	4b57      	ldr	r3, [pc, #348]	; (80109b0 <tcp_listen_input+0x1c8>)
 8010854:	781b      	ldrb	r3, [r3, #0]
 8010856:	f003 0302 	and.w	r3, r3, #2
 801085a:	2b00      	cmp	r3, #0
 801085c:	f000 80a3 	beq.w	80109a6 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	7d5b      	ldrb	r3, [r3, #21]
 8010864:	4618      	mov	r0, r3
 8010866:	f7ff f85b 	bl	800f920 <tcp_alloc>
 801086a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 801086c:	697b      	ldr	r3, [r7, #20]
 801086e:	2b00      	cmp	r3, #0
 8010870:	d111      	bne.n	8010896 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	699b      	ldr	r3, [r3, #24]
 8010876:	2b00      	cmp	r3, #0
 8010878:	d00a      	beq.n	8010890 <tcp_listen_input+0xa8>
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	699b      	ldr	r3, [r3, #24]
 801087e:	687a      	ldr	r2, [r7, #4]
 8010880:	6910      	ldr	r0, [r2, #16]
 8010882:	f04f 32ff 	mov.w	r2, #4294967295
 8010886:	2100      	movs	r1, #0
 8010888:	4798      	blx	r3
 801088a:	4603      	mov	r3, r0
 801088c:	73bb      	strb	r3, [r7, #14]
      return;
 801088e:	e08b      	b.n	80109a8 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8010890:	23f0      	movs	r3, #240	; 0xf0
 8010892:	73bb      	strb	r3, [r7, #14]
      return;
 8010894:	e088      	b.n	80109a8 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8010896:	4b50      	ldr	r3, [pc, #320]	; (80109d8 <tcp_listen_input+0x1f0>)
 8010898:	695a      	ldr	r2, [r3, #20]
 801089a:	697b      	ldr	r3, [r7, #20]
 801089c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801089e:	4b4e      	ldr	r3, [pc, #312]	; (80109d8 <tcp_listen_input+0x1f0>)
 80108a0:	691a      	ldr	r2, [r3, #16]
 80108a2:	697b      	ldr	r3, [r7, #20]
 80108a4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	8ada      	ldrh	r2, [r3, #22]
 80108aa:	697b      	ldr	r3, [r7, #20]
 80108ac:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80108ae:	4b47      	ldr	r3, [pc, #284]	; (80109cc <tcp_listen_input+0x1e4>)
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	881b      	ldrh	r3, [r3, #0]
 80108b4:	b29a      	uxth	r2, r3
 80108b6:	697b      	ldr	r3, [r7, #20]
 80108b8:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80108ba:	697b      	ldr	r3, [r7, #20]
 80108bc:	2203      	movs	r2, #3
 80108be:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80108c0:	4b41      	ldr	r3, [pc, #260]	; (80109c8 <tcp_listen_input+0x1e0>)
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	1c5a      	adds	r2, r3, #1
 80108c6:	697b      	ldr	r3, [r7, #20]
 80108c8:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80108ca:	697b      	ldr	r3, [r7, #20]
 80108cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80108ce:	697b      	ldr	r3, [r7, #20]
 80108d0:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80108d2:	6978      	ldr	r0, [r7, #20]
 80108d4:	f7ff fa5a 	bl	800fd8c <tcp_next_iss>
 80108d8:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80108da:	697b      	ldr	r3, [r7, #20]
 80108dc:	693a      	ldr	r2, [r7, #16]
 80108de:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80108e0:	697b      	ldr	r3, [r7, #20]
 80108e2:	693a      	ldr	r2, [r7, #16]
 80108e4:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80108e6:	697b      	ldr	r3, [r7, #20]
 80108e8:	693a      	ldr	r2, [r7, #16]
 80108ea:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80108ec:	697b      	ldr	r3, [r7, #20]
 80108ee:	693a      	ldr	r2, [r7, #16]
 80108f0:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80108f2:	4b35      	ldr	r3, [pc, #212]	; (80109c8 <tcp_listen_input+0x1e0>)
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	1e5a      	subs	r2, r3, #1
 80108f8:	697b      	ldr	r3, [r7, #20]
 80108fa:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	691a      	ldr	r2, [r3, #16]
 8010900:	697b      	ldr	r3, [r7, #20]
 8010902:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8010904:	697b      	ldr	r3, [r7, #20]
 8010906:	687a      	ldr	r2, [r7, #4]
 8010908:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	7a5b      	ldrb	r3, [r3, #9]
 801090e:	f003 030c 	and.w	r3, r3, #12
 8010912:	b2da      	uxtb	r2, r3
 8010914:	697b      	ldr	r3, [r7, #20]
 8010916:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	7a1a      	ldrb	r2, [r3, #8]
 801091c:	697b      	ldr	r3, [r7, #20]
 801091e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8010920:	4b2e      	ldr	r3, [pc, #184]	; (80109dc <tcp_listen_input+0x1f4>)
 8010922:	681a      	ldr	r2, [r3, #0]
 8010924:	697b      	ldr	r3, [r7, #20]
 8010926:	60da      	str	r2, [r3, #12]
 8010928:	4a2c      	ldr	r2, [pc, #176]	; (80109dc <tcp_listen_input+0x1f4>)
 801092a:	697b      	ldr	r3, [r7, #20]
 801092c:	6013      	str	r3, [r2, #0]
 801092e:	f003 fd27 	bl	8014380 <tcp_timer_needed>
 8010932:	4b2b      	ldr	r3, [pc, #172]	; (80109e0 <tcp_listen_input+0x1f8>)
 8010934:	2201      	movs	r2, #1
 8010936:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8010938:	6978      	ldr	r0, [r7, #20]
 801093a:	f001 fd8d 	bl	8012458 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801093e:	4b23      	ldr	r3, [pc, #140]	; (80109cc <tcp_listen_input+0x1e4>)
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	89db      	ldrh	r3, [r3, #14]
 8010944:	b29a      	uxth	r2, r3
 8010946:	697b      	ldr	r3, [r7, #20]
 8010948:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801094c:	697b      	ldr	r3, [r7, #20]
 801094e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010952:	697b      	ldr	r3, [r7, #20]
 8010954:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8010958:	697b      	ldr	r3, [r7, #20]
 801095a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801095c:	697b      	ldr	r3, [r7, #20]
 801095e:	3304      	adds	r3, #4
 8010960:	4618      	mov	r0, r3
 8010962:	f005 facf 	bl	8015f04 <ip4_route>
 8010966:	4601      	mov	r1, r0
 8010968:	697b      	ldr	r3, [r7, #20]
 801096a:	3304      	adds	r3, #4
 801096c:	461a      	mov	r2, r3
 801096e:	4620      	mov	r0, r4
 8010970:	f7ff fa32 	bl	800fdd8 <tcp_eff_send_mss_netif>
 8010974:	4603      	mov	r3, r0
 8010976:	461a      	mov	r2, r3
 8010978:	697b      	ldr	r3, [r7, #20]
 801097a:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801097c:	2112      	movs	r1, #18
 801097e:	6978      	ldr	r0, [r7, #20]
 8010980:	f002 fc9a 	bl	80132b8 <tcp_enqueue_flags>
 8010984:	4603      	mov	r3, r0
 8010986:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8010988:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801098c:	2b00      	cmp	r3, #0
 801098e:	d004      	beq.n	801099a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8010990:	2100      	movs	r1, #0
 8010992:	6978      	ldr	r0, [r7, #20]
 8010994:	f7fd ff54 	bl	800e840 <tcp_abandon>
      return;
 8010998:	e006      	b.n	80109a8 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801099a:	6978      	ldr	r0, [r7, #20]
 801099c:	f002 fd7a 	bl	8013494 <tcp_output>
  return;
 80109a0:	e001      	b.n	80109a6 <tcp_listen_input+0x1be>
    return;
 80109a2:	bf00      	nop
 80109a4:	e000      	b.n	80109a8 <tcp_listen_input+0x1c0>
  return;
 80109a6:	bf00      	nop
}
 80109a8:	371c      	adds	r7, #28
 80109aa:	46bd      	mov	sp, r7
 80109ac:	bd90      	pop	{r4, r7, pc}
 80109ae:	bf00      	nop
 80109b0:	20004bf0 	.word	0x20004bf0
 80109b4:	0801d6f0 	.word	0x0801d6f0
 80109b8:	0801d8e8 	.word	0x0801d8e8
 80109bc:	0801d73c 	.word	0x0801d73c
 80109c0:	20004be8 	.word	0x20004be8
 80109c4:	20004bee 	.word	0x20004bee
 80109c8:	20004be4 	.word	0x20004be4
 80109cc:	20004bd4 	.word	0x20004bd4
 80109d0:	20008248 	.word	0x20008248
 80109d4:	2000824c 	.word	0x2000824c
 80109d8:	20008238 	.word	0x20008238
 80109dc:	2000db1c 	.word	0x2000db1c
 80109e0:	2000db18 	.word	0x2000db18

080109e4 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80109e4:	b580      	push	{r7, lr}
 80109e6:	b086      	sub	sp, #24
 80109e8:	af04      	add	r7, sp, #16
 80109ea:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80109ec:	4b2f      	ldr	r3, [pc, #188]	; (8010aac <tcp_timewait_input+0xc8>)
 80109ee:	781b      	ldrb	r3, [r3, #0]
 80109f0:	f003 0304 	and.w	r3, r3, #4
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d153      	bne.n	8010aa0 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d106      	bne.n	8010a0c <tcp_timewait_input+0x28>
 80109fe:	4b2c      	ldr	r3, [pc, #176]	; (8010ab0 <tcp_timewait_input+0xcc>)
 8010a00:	f240 22ee 	movw	r2, #750	; 0x2ee
 8010a04:	492b      	ldr	r1, [pc, #172]	; (8010ab4 <tcp_timewait_input+0xd0>)
 8010a06:	482c      	ldr	r0, [pc, #176]	; (8010ab8 <tcp_timewait_input+0xd4>)
 8010a08:	f00a fb7c 	bl	801b104 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8010a0c:	4b27      	ldr	r3, [pc, #156]	; (8010aac <tcp_timewait_input+0xc8>)
 8010a0e:	781b      	ldrb	r3, [r3, #0]
 8010a10:	f003 0302 	and.w	r3, r3, #2
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d02a      	beq.n	8010a6e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8010a18:	4b28      	ldr	r3, [pc, #160]	; (8010abc <tcp_timewait_input+0xd8>)
 8010a1a:	681a      	ldr	r2, [r3, #0]
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a20:	1ad3      	subs	r3, r2, r3
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	db2d      	blt.n	8010a82 <tcp_timewait_input+0x9e>
 8010a26:	4b25      	ldr	r3, [pc, #148]	; (8010abc <tcp_timewait_input+0xd8>)
 8010a28:	681a      	ldr	r2, [r3, #0]
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a2e:	6879      	ldr	r1, [r7, #4]
 8010a30:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010a32:	440b      	add	r3, r1
 8010a34:	1ad3      	subs	r3, r2, r3
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	dc23      	bgt.n	8010a82 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010a3a:	4b21      	ldr	r3, [pc, #132]	; (8010ac0 <tcp_timewait_input+0xdc>)
 8010a3c:	6819      	ldr	r1, [r3, #0]
 8010a3e:	4b21      	ldr	r3, [pc, #132]	; (8010ac4 <tcp_timewait_input+0xe0>)
 8010a40:	881b      	ldrh	r3, [r3, #0]
 8010a42:	461a      	mov	r2, r3
 8010a44:	4b1d      	ldr	r3, [pc, #116]	; (8010abc <tcp_timewait_input+0xd8>)
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010a4a:	4b1f      	ldr	r3, [pc, #124]	; (8010ac8 <tcp_timewait_input+0xe4>)
 8010a4c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010a4e:	885b      	ldrh	r3, [r3, #2]
 8010a50:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010a52:	4a1d      	ldr	r2, [pc, #116]	; (8010ac8 <tcp_timewait_input+0xe4>)
 8010a54:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010a56:	8812      	ldrh	r2, [r2, #0]
 8010a58:	b292      	uxth	r2, r2
 8010a5a:	9202      	str	r2, [sp, #8]
 8010a5c:	9301      	str	r3, [sp, #4]
 8010a5e:	4b1b      	ldr	r3, [pc, #108]	; (8010acc <tcp_timewait_input+0xe8>)
 8010a60:	9300      	str	r3, [sp, #0]
 8010a62:	4b1b      	ldr	r3, [pc, #108]	; (8010ad0 <tcp_timewait_input+0xec>)
 8010a64:	4602      	mov	r2, r0
 8010a66:	6878      	ldr	r0, [r7, #4]
 8010a68:	f003 fac8 	bl	8013ffc <tcp_rst>
      return;
 8010a6c:	e01b      	b.n	8010aa6 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8010a6e:	4b0f      	ldr	r3, [pc, #60]	; (8010aac <tcp_timewait_input+0xc8>)
 8010a70:	781b      	ldrb	r3, [r3, #0]
 8010a72:	f003 0301 	and.w	r3, r3, #1
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d003      	beq.n	8010a82 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8010a7a:	4b16      	ldr	r3, [pc, #88]	; (8010ad4 <tcp_timewait_input+0xf0>)
 8010a7c:	681a      	ldr	r2, [r3, #0]
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8010a82:	4b10      	ldr	r3, [pc, #64]	; (8010ac4 <tcp_timewait_input+0xe0>)
 8010a84:	881b      	ldrh	r3, [r3, #0]
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d00c      	beq.n	8010aa4 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	8b5b      	ldrh	r3, [r3, #26]
 8010a8e:	f043 0302 	orr.w	r3, r3, #2
 8010a92:	b29a      	uxth	r2, r3
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010a98:	6878      	ldr	r0, [r7, #4]
 8010a9a:	f002 fcfb 	bl	8013494 <tcp_output>
  }
  return;
 8010a9e:	e001      	b.n	8010aa4 <tcp_timewait_input+0xc0>
    return;
 8010aa0:	bf00      	nop
 8010aa2:	e000      	b.n	8010aa6 <tcp_timewait_input+0xc2>
  return;
 8010aa4:	bf00      	nop
}
 8010aa6:	3708      	adds	r7, #8
 8010aa8:	46bd      	mov	sp, r7
 8010aaa:	bd80      	pop	{r7, pc}
 8010aac:	20004bf0 	.word	0x20004bf0
 8010ab0:	0801d6f0 	.word	0x0801d6f0
 8010ab4:	0801d908 	.word	0x0801d908
 8010ab8:	0801d73c 	.word	0x0801d73c
 8010abc:	20004be4 	.word	0x20004be4
 8010ac0:	20004be8 	.word	0x20004be8
 8010ac4:	20004bee 	.word	0x20004bee
 8010ac8:	20004bd4 	.word	0x20004bd4
 8010acc:	20008248 	.word	0x20008248
 8010ad0:	2000824c 	.word	0x2000824c
 8010ad4:	2000db20 	.word	0x2000db20

08010ad8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8010ad8:	b590      	push	{r4, r7, lr}
 8010ada:	b08d      	sub	sp, #52	; 0x34
 8010adc:	af04      	add	r7, sp, #16
 8010ade:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8010ae0:	2300      	movs	r3, #0
 8010ae2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8010ae4:	2300      	movs	r3, #0
 8010ae6:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d106      	bne.n	8010afc <tcp_process+0x24>
 8010aee:	4ba5      	ldr	r3, [pc, #660]	; (8010d84 <tcp_process+0x2ac>)
 8010af0:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8010af4:	49a4      	ldr	r1, [pc, #656]	; (8010d88 <tcp_process+0x2b0>)
 8010af6:	48a5      	ldr	r0, [pc, #660]	; (8010d8c <tcp_process+0x2b4>)
 8010af8:	f00a fb04 	bl	801b104 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8010afc:	4ba4      	ldr	r3, [pc, #656]	; (8010d90 <tcp_process+0x2b8>)
 8010afe:	781b      	ldrb	r3, [r3, #0]
 8010b00:	f003 0304 	and.w	r3, r3, #4
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d04e      	beq.n	8010ba6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	7d1b      	ldrb	r3, [r3, #20]
 8010b0c:	2b02      	cmp	r3, #2
 8010b0e:	d108      	bne.n	8010b22 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010b14:	4b9f      	ldr	r3, [pc, #636]	; (8010d94 <tcp_process+0x2bc>)
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	429a      	cmp	r2, r3
 8010b1a:	d123      	bne.n	8010b64 <tcp_process+0x8c>
        acceptable = 1;
 8010b1c:	2301      	movs	r3, #1
 8010b1e:	76fb      	strb	r3, [r7, #27]
 8010b20:	e020      	b.n	8010b64 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010b26:	4b9c      	ldr	r3, [pc, #624]	; (8010d98 <tcp_process+0x2c0>)
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	429a      	cmp	r2, r3
 8010b2c:	d102      	bne.n	8010b34 <tcp_process+0x5c>
        acceptable = 1;
 8010b2e:	2301      	movs	r3, #1
 8010b30:	76fb      	strb	r3, [r7, #27]
 8010b32:	e017      	b.n	8010b64 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010b34:	4b98      	ldr	r3, [pc, #608]	; (8010d98 <tcp_process+0x2c0>)
 8010b36:	681a      	ldr	r2, [r3, #0]
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b3c:	1ad3      	subs	r3, r2, r3
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	db10      	blt.n	8010b64 <tcp_process+0x8c>
 8010b42:	4b95      	ldr	r3, [pc, #596]	; (8010d98 <tcp_process+0x2c0>)
 8010b44:	681a      	ldr	r2, [r3, #0]
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b4a:	6879      	ldr	r1, [r7, #4]
 8010b4c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010b4e:	440b      	add	r3, r1
 8010b50:	1ad3      	subs	r3, r2, r3
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	dc06      	bgt.n	8010b64 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	8b5b      	ldrh	r3, [r3, #26]
 8010b5a:	f043 0302 	orr.w	r3, r3, #2
 8010b5e:	b29a      	uxth	r2, r3
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8010b64:	7efb      	ldrb	r3, [r7, #27]
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d01b      	beq.n	8010ba2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	7d1b      	ldrb	r3, [r3, #20]
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d106      	bne.n	8010b80 <tcp_process+0xa8>
 8010b72:	4b84      	ldr	r3, [pc, #528]	; (8010d84 <tcp_process+0x2ac>)
 8010b74:	f44f 724e 	mov.w	r2, #824	; 0x338
 8010b78:	4988      	ldr	r1, [pc, #544]	; (8010d9c <tcp_process+0x2c4>)
 8010b7a:	4884      	ldr	r0, [pc, #528]	; (8010d8c <tcp_process+0x2b4>)
 8010b7c:	f00a fac2 	bl	801b104 <iprintf>
      recv_flags |= TF_RESET;
 8010b80:	4b87      	ldr	r3, [pc, #540]	; (8010da0 <tcp_process+0x2c8>)
 8010b82:	781b      	ldrb	r3, [r3, #0]
 8010b84:	f043 0308 	orr.w	r3, r3, #8
 8010b88:	b2da      	uxtb	r2, r3
 8010b8a:	4b85      	ldr	r3, [pc, #532]	; (8010da0 <tcp_process+0x2c8>)
 8010b8c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	8b5b      	ldrh	r3, [r3, #26]
 8010b92:	f023 0301 	bic.w	r3, r3, #1
 8010b96:	b29a      	uxth	r2, r3
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8010b9c:	f06f 030d 	mvn.w	r3, #13
 8010ba0:	e37a      	b.n	8011298 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8010ba2:	2300      	movs	r3, #0
 8010ba4:	e378      	b.n	8011298 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8010ba6:	4b7a      	ldr	r3, [pc, #488]	; (8010d90 <tcp_process+0x2b8>)
 8010ba8:	781b      	ldrb	r3, [r3, #0]
 8010baa:	f003 0302 	and.w	r3, r3, #2
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d010      	beq.n	8010bd4 <tcp_process+0xfc>
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	7d1b      	ldrb	r3, [r3, #20]
 8010bb6:	2b02      	cmp	r3, #2
 8010bb8:	d00c      	beq.n	8010bd4 <tcp_process+0xfc>
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	7d1b      	ldrb	r3, [r3, #20]
 8010bbe:	2b03      	cmp	r3, #3
 8010bc0:	d008      	beq.n	8010bd4 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	8b5b      	ldrh	r3, [r3, #26]
 8010bc6:	f043 0302 	orr.w	r3, r3, #2
 8010bca:	b29a      	uxth	r2, r3
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8010bd0:	2300      	movs	r3, #0
 8010bd2:	e361      	b.n	8011298 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	8b5b      	ldrh	r3, [r3, #26]
 8010bd8:	f003 0310 	and.w	r3, r3, #16
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d103      	bne.n	8010be8 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8010be0:	4b70      	ldr	r3, [pc, #448]	; (8010da4 <tcp_process+0x2cc>)
 8010be2:	681a      	ldr	r2, [r3, #0]
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	2200      	movs	r2, #0
 8010bec:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	2200      	movs	r2, #0
 8010bf4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8010bf8:	6878      	ldr	r0, [r7, #4]
 8010bfa:	f001 fc2d 	bl	8012458 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	7d1b      	ldrb	r3, [r3, #20]
 8010c02:	3b02      	subs	r3, #2
 8010c04:	2b07      	cmp	r3, #7
 8010c06:	f200 8337 	bhi.w	8011278 <tcp_process+0x7a0>
 8010c0a:	a201      	add	r2, pc, #4	; (adr r2, 8010c10 <tcp_process+0x138>)
 8010c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c10:	08010c31 	.word	0x08010c31
 8010c14:	08010e61 	.word	0x08010e61
 8010c18:	08010fd9 	.word	0x08010fd9
 8010c1c:	08011003 	.word	0x08011003
 8010c20:	08011127 	.word	0x08011127
 8010c24:	08010fd9 	.word	0x08010fd9
 8010c28:	080111b3 	.word	0x080111b3
 8010c2c:	08011243 	.word	0x08011243
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8010c30:	4b57      	ldr	r3, [pc, #348]	; (8010d90 <tcp_process+0x2b8>)
 8010c32:	781b      	ldrb	r3, [r3, #0]
 8010c34:	f003 0310 	and.w	r3, r3, #16
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	f000 80e4 	beq.w	8010e06 <tcp_process+0x32e>
 8010c3e:	4b54      	ldr	r3, [pc, #336]	; (8010d90 <tcp_process+0x2b8>)
 8010c40:	781b      	ldrb	r3, [r3, #0]
 8010c42:	f003 0302 	and.w	r3, r3, #2
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	f000 80dd 	beq.w	8010e06 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010c50:	1c5a      	adds	r2, r3, #1
 8010c52:	4b50      	ldr	r3, [pc, #320]	; (8010d94 <tcp_process+0x2bc>)
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	429a      	cmp	r2, r3
 8010c58:	f040 80d5 	bne.w	8010e06 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8010c5c:	4b4e      	ldr	r3, [pc, #312]	; (8010d98 <tcp_process+0x2c0>)
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	1c5a      	adds	r2, r3, #1
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8010c6e:	4b49      	ldr	r3, [pc, #292]	; (8010d94 <tcp_process+0x2bc>)
 8010c70:	681a      	ldr	r2, [r3, #0]
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8010c76:	4b4c      	ldr	r3, [pc, #304]	; (8010da8 <tcp_process+0x2d0>)
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	89db      	ldrh	r3, [r3, #14]
 8010c7c:	b29a      	uxth	r2, r3
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8010c90:	4b41      	ldr	r3, [pc, #260]	; (8010d98 <tcp_process+0x2c0>)
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	1e5a      	subs	r2, r3, #1
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	2204      	movs	r2, #4
 8010c9e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	3304      	adds	r3, #4
 8010ca8:	4618      	mov	r0, r3
 8010caa:	f005 f92b 	bl	8015f04 <ip4_route>
 8010cae:	4601      	mov	r1, r0
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	3304      	adds	r3, #4
 8010cb4:	461a      	mov	r2, r3
 8010cb6:	4620      	mov	r0, r4
 8010cb8:	f7ff f88e 	bl	800fdd8 <tcp_eff_send_mss_netif>
 8010cbc:	4603      	mov	r3, r0
 8010cbe:	461a      	mov	r2, r3
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010cc8:	009a      	lsls	r2, r3, #2
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010cce:	005b      	lsls	r3, r3, #1
 8010cd0:	f241 111c 	movw	r1, #4380	; 0x111c
 8010cd4:	428b      	cmp	r3, r1
 8010cd6:	bf38      	it	cc
 8010cd8:	460b      	movcc	r3, r1
 8010cda:	429a      	cmp	r2, r3
 8010cdc:	d204      	bcs.n	8010ce8 <tcp_process+0x210>
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010ce2:	009b      	lsls	r3, r3, #2
 8010ce4:	b29b      	uxth	r3, r3
 8010ce6:	e00d      	b.n	8010d04 <tcp_process+0x22c>
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010cec:	005b      	lsls	r3, r3, #1
 8010cee:	f241 121c 	movw	r2, #4380	; 0x111c
 8010cf2:	4293      	cmp	r3, r2
 8010cf4:	d904      	bls.n	8010d00 <tcp_process+0x228>
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010cfa:	005b      	lsls	r3, r3, #1
 8010cfc:	b29b      	uxth	r3, r3
 8010cfe:	e001      	b.n	8010d04 <tcp_process+0x22c>
 8010d00:	f241 131c 	movw	r3, #4380	; 0x111c
 8010d04:	687a      	ldr	r2, [r7, #4]
 8010d06:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d106      	bne.n	8010d22 <tcp_process+0x24a>
 8010d14:	4b1b      	ldr	r3, [pc, #108]	; (8010d84 <tcp_process+0x2ac>)
 8010d16:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8010d1a:	4924      	ldr	r1, [pc, #144]	; (8010dac <tcp_process+0x2d4>)
 8010d1c:	481b      	ldr	r0, [pc, #108]	; (8010d8c <tcp_process+0x2b4>)
 8010d1e:	f00a f9f1 	bl	801b104 <iprintf>
        --pcb->snd_queuelen;
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010d28:	3b01      	subs	r3, #1
 8010d2a:	b29a      	uxth	r2, r3
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d36:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8010d38:	69fb      	ldr	r3, [r7, #28]
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d111      	bne.n	8010d62 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d42:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8010d44:	69fb      	ldr	r3, [r7, #28]
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d106      	bne.n	8010d58 <tcp_process+0x280>
 8010d4a:	4b0e      	ldr	r3, [pc, #56]	; (8010d84 <tcp_process+0x2ac>)
 8010d4c:	f44f 725d 	mov.w	r2, #884	; 0x374
 8010d50:	4917      	ldr	r1, [pc, #92]	; (8010db0 <tcp_process+0x2d8>)
 8010d52:	480e      	ldr	r0, [pc, #56]	; (8010d8c <tcp_process+0x2b4>)
 8010d54:	f00a f9d6 	bl	801b104 <iprintf>
          pcb->unsent = rseg->next;
 8010d58:	69fb      	ldr	r3, [r7, #28]
 8010d5a:	681a      	ldr	r2, [r3, #0]
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	66da      	str	r2, [r3, #108]	; 0x6c
 8010d60:	e003      	b.n	8010d6a <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8010d62:	69fb      	ldr	r3, [r7, #28]
 8010d64:	681a      	ldr	r2, [r3, #0]
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8010d6a:	69f8      	ldr	r0, [r7, #28]
 8010d6c:	f7fe fc6f 	bl	800f64e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d11d      	bne.n	8010db4 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010d7e:	861a      	strh	r2, [r3, #48]	; 0x30
 8010d80:	e01f      	b.n	8010dc2 <tcp_process+0x2ea>
 8010d82:	bf00      	nop
 8010d84:	0801d6f0 	.word	0x0801d6f0
 8010d88:	0801d928 	.word	0x0801d928
 8010d8c:	0801d73c 	.word	0x0801d73c
 8010d90:	20004bf0 	.word	0x20004bf0
 8010d94:	20004be8 	.word	0x20004be8
 8010d98:	20004be4 	.word	0x20004be4
 8010d9c:	0801d944 	.word	0x0801d944
 8010da0:	20004bf1 	.word	0x20004bf1
 8010da4:	2000db20 	.word	0x2000db20
 8010da8:	20004bd4 	.word	0x20004bd4
 8010dac:	0801d964 	.word	0x0801d964
 8010db0:	0801d97c 	.word	0x0801d97c
        } else {
          pcb->rtime = 0;
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	2200      	movs	r2, #0
 8010db8:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	2200      	movs	r2, #0
 8010dbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d00a      	beq.n	8010de2 <tcp_process+0x30a>
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010dd2:	687a      	ldr	r2, [r7, #4]
 8010dd4:	6910      	ldr	r0, [r2, #16]
 8010dd6:	2200      	movs	r2, #0
 8010dd8:	6879      	ldr	r1, [r7, #4]
 8010dda:	4798      	blx	r3
 8010ddc:	4603      	mov	r3, r0
 8010dde:	76bb      	strb	r3, [r7, #26]
 8010de0:	e001      	b.n	8010de6 <tcp_process+0x30e>
 8010de2:	2300      	movs	r3, #0
 8010de4:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8010de6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010dea:	f113 0f0d 	cmn.w	r3, #13
 8010dee:	d102      	bne.n	8010df6 <tcp_process+0x31e>
          return ERR_ABRT;
 8010df0:	f06f 030c 	mvn.w	r3, #12
 8010df4:	e250      	b.n	8011298 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	8b5b      	ldrh	r3, [r3, #26]
 8010dfa:	f043 0302 	orr.w	r3, r3, #2
 8010dfe:	b29a      	uxth	r2, r3
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8010e04:	e23a      	b.n	801127c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8010e06:	4b9d      	ldr	r3, [pc, #628]	; (801107c <tcp_process+0x5a4>)
 8010e08:	781b      	ldrb	r3, [r3, #0]
 8010e0a:	f003 0310 	and.w	r3, r3, #16
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	f000 8234 	beq.w	801127c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010e14:	4b9a      	ldr	r3, [pc, #616]	; (8011080 <tcp_process+0x5a8>)
 8010e16:	6819      	ldr	r1, [r3, #0]
 8010e18:	4b9a      	ldr	r3, [pc, #616]	; (8011084 <tcp_process+0x5ac>)
 8010e1a:	881b      	ldrh	r3, [r3, #0]
 8010e1c:	461a      	mov	r2, r3
 8010e1e:	4b9a      	ldr	r3, [pc, #616]	; (8011088 <tcp_process+0x5b0>)
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010e24:	4b99      	ldr	r3, [pc, #612]	; (801108c <tcp_process+0x5b4>)
 8010e26:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010e28:	885b      	ldrh	r3, [r3, #2]
 8010e2a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010e2c:	4a97      	ldr	r2, [pc, #604]	; (801108c <tcp_process+0x5b4>)
 8010e2e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010e30:	8812      	ldrh	r2, [r2, #0]
 8010e32:	b292      	uxth	r2, r2
 8010e34:	9202      	str	r2, [sp, #8]
 8010e36:	9301      	str	r3, [sp, #4]
 8010e38:	4b95      	ldr	r3, [pc, #596]	; (8011090 <tcp_process+0x5b8>)
 8010e3a:	9300      	str	r3, [sp, #0]
 8010e3c:	4b95      	ldr	r3, [pc, #596]	; (8011094 <tcp_process+0x5bc>)
 8010e3e:	4602      	mov	r2, r0
 8010e40:	6878      	ldr	r0, [r7, #4]
 8010e42:	f003 f8db 	bl	8013ffc <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010e4c:	2b05      	cmp	r3, #5
 8010e4e:	f200 8215 	bhi.w	801127c <tcp_process+0x7a4>
          pcb->rtime = 0;
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	2200      	movs	r2, #0
 8010e56:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8010e58:	6878      	ldr	r0, [r7, #4]
 8010e5a:	f002 fea5 	bl	8013ba8 <tcp_rexmit_rto>
      break;
 8010e5e:	e20d      	b.n	801127c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8010e60:	4b86      	ldr	r3, [pc, #536]	; (801107c <tcp_process+0x5a4>)
 8010e62:	781b      	ldrb	r3, [r3, #0]
 8010e64:	f003 0310 	and.w	r3, r3, #16
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	f000 80a1 	beq.w	8010fb0 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010e6e:	4b84      	ldr	r3, [pc, #528]	; (8011080 <tcp_process+0x5a8>)
 8010e70:	681a      	ldr	r2, [r3, #0]
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010e76:	1ad3      	subs	r3, r2, r3
 8010e78:	3b01      	subs	r3, #1
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	db7e      	blt.n	8010f7c <tcp_process+0x4a4>
 8010e7e:	4b80      	ldr	r3, [pc, #512]	; (8011080 <tcp_process+0x5a8>)
 8010e80:	681a      	ldr	r2, [r3, #0]
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010e86:	1ad3      	subs	r3, r2, r3
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	dc77      	bgt.n	8010f7c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	2204      	movs	r2, #4
 8010e90:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d102      	bne.n	8010ea0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8010e9a:	23fa      	movs	r3, #250	; 0xfa
 8010e9c:	76bb      	strb	r3, [r7, #26]
 8010e9e:	e01d      	b.n	8010edc <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010ea4:	699b      	ldr	r3, [r3, #24]
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d106      	bne.n	8010eb8 <tcp_process+0x3e0>
 8010eaa:	4b7b      	ldr	r3, [pc, #492]	; (8011098 <tcp_process+0x5c0>)
 8010eac:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8010eb0:	497a      	ldr	r1, [pc, #488]	; (801109c <tcp_process+0x5c4>)
 8010eb2:	487b      	ldr	r0, [pc, #492]	; (80110a0 <tcp_process+0x5c8>)
 8010eb4:	f00a f926 	bl	801b104 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010ebc:	699b      	ldr	r3, [r3, #24]
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d00a      	beq.n	8010ed8 <tcp_process+0x400>
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010ec6:	699b      	ldr	r3, [r3, #24]
 8010ec8:	687a      	ldr	r2, [r7, #4]
 8010eca:	6910      	ldr	r0, [r2, #16]
 8010ecc:	2200      	movs	r2, #0
 8010ece:	6879      	ldr	r1, [r7, #4]
 8010ed0:	4798      	blx	r3
 8010ed2:	4603      	mov	r3, r0
 8010ed4:	76bb      	strb	r3, [r7, #26]
 8010ed6:	e001      	b.n	8010edc <tcp_process+0x404>
 8010ed8:	23f0      	movs	r3, #240	; 0xf0
 8010eda:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8010edc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d00a      	beq.n	8010efa <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8010ee4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010ee8:	f113 0f0d 	cmn.w	r3, #13
 8010eec:	d002      	beq.n	8010ef4 <tcp_process+0x41c>
              tcp_abort(pcb);
 8010eee:	6878      	ldr	r0, [r7, #4]
 8010ef0:	f7fd fd64 	bl	800e9bc <tcp_abort>
            }
            return ERR_ABRT;
 8010ef4:	f06f 030c 	mvn.w	r3, #12
 8010ef8:	e1ce      	b.n	8011298 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8010efa:	6878      	ldr	r0, [r7, #4]
 8010efc:	f000 fae0 	bl	80114c0 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8010f00:	4b68      	ldr	r3, [pc, #416]	; (80110a4 <tcp_process+0x5cc>)
 8010f02:	881b      	ldrh	r3, [r3, #0]
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d005      	beq.n	8010f14 <tcp_process+0x43c>
            recv_acked--;
 8010f08:	4b66      	ldr	r3, [pc, #408]	; (80110a4 <tcp_process+0x5cc>)
 8010f0a:	881b      	ldrh	r3, [r3, #0]
 8010f0c:	3b01      	subs	r3, #1
 8010f0e:	b29a      	uxth	r2, r3
 8010f10:	4b64      	ldr	r3, [pc, #400]	; (80110a4 <tcp_process+0x5cc>)
 8010f12:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010f18:	009a      	lsls	r2, r3, #2
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010f1e:	005b      	lsls	r3, r3, #1
 8010f20:	f241 111c 	movw	r1, #4380	; 0x111c
 8010f24:	428b      	cmp	r3, r1
 8010f26:	bf38      	it	cc
 8010f28:	460b      	movcc	r3, r1
 8010f2a:	429a      	cmp	r2, r3
 8010f2c:	d204      	bcs.n	8010f38 <tcp_process+0x460>
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010f32:	009b      	lsls	r3, r3, #2
 8010f34:	b29b      	uxth	r3, r3
 8010f36:	e00d      	b.n	8010f54 <tcp_process+0x47c>
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010f3c:	005b      	lsls	r3, r3, #1
 8010f3e:	f241 121c 	movw	r2, #4380	; 0x111c
 8010f42:	4293      	cmp	r3, r2
 8010f44:	d904      	bls.n	8010f50 <tcp_process+0x478>
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010f4a:	005b      	lsls	r3, r3, #1
 8010f4c:	b29b      	uxth	r3, r3
 8010f4e:	e001      	b.n	8010f54 <tcp_process+0x47c>
 8010f50:	f241 131c 	movw	r3, #4380	; 0x111c
 8010f54:	687a      	ldr	r2, [r7, #4]
 8010f56:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8010f5a:	4b53      	ldr	r3, [pc, #332]	; (80110a8 <tcp_process+0x5d0>)
 8010f5c:	781b      	ldrb	r3, [r3, #0]
 8010f5e:	f003 0320 	and.w	r3, r3, #32
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d037      	beq.n	8010fd6 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	8b5b      	ldrh	r3, [r3, #26]
 8010f6a:	f043 0302 	orr.w	r3, r3, #2
 8010f6e:	b29a      	uxth	r2, r3
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	2207      	movs	r2, #7
 8010f78:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8010f7a:	e02c      	b.n	8010fd6 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010f7c:	4b40      	ldr	r3, [pc, #256]	; (8011080 <tcp_process+0x5a8>)
 8010f7e:	6819      	ldr	r1, [r3, #0]
 8010f80:	4b40      	ldr	r3, [pc, #256]	; (8011084 <tcp_process+0x5ac>)
 8010f82:	881b      	ldrh	r3, [r3, #0]
 8010f84:	461a      	mov	r2, r3
 8010f86:	4b40      	ldr	r3, [pc, #256]	; (8011088 <tcp_process+0x5b0>)
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010f8c:	4b3f      	ldr	r3, [pc, #252]	; (801108c <tcp_process+0x5b4>)
 8010f8e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010f90:	885b      	ldrh	r3, [r3, #2]
 8010f92:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010f94:	4a3d      	ldr	r2, [pc, #244]	; (801108c <tcp_process+0x5b4>)
 8010f96:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010f98:	8812      	ldrh	r2, [r2, #0]
 8010f9a:	b292      	uxth	r2, r2
 8010f9c:	9202      	str	r2, [sp, #8]
 8010f9e:	9301      	str	r3, [sp, #4]
 8010fa0:	4b3b      	ldr	r3, [pc, #236]	; (8011090 <tcp_process+0x5b8>)
 8010fa2:	9300      	str	r3, [sp, #0]
 8010fa4:	4b3b      	ldr	r3, [pc, #236]	; (8011094 <tcp_process+0x5bc>)
 8010fa6:	4602      	mov	r2, r0
 8010fa8:	6878      	ldr	r0, [r7, #4]
 8010faa:	f003 f827 	bl	8013ffc <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8010fae:	e167      	b.n	8011280 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8010fb0:	4b32      	ldr	r3, [pc, #200]	; (801107c <tcp_process+0x5a4>)
 8010fb2:	781b      	ldrb	r3, [r3, #0]
 8010fb4:	f003 0302 	and.w	r3, r3, #2
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	f000 8161 	beq.w	8011280 <tcp_process+0x7a8>
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fc2:	1e5a      	subs	r2, r3, #1
 8010fc4:	4b30      	ldr	r3, [pc, #192]	; (8011088 <tcp_process+0x5b0>)
 8010fc6:	681b      	ldr	r3, [r3, #0]
 8010fc8:	429a      	cmp	r2, r3
 8010fca:	f040 8159 	bne.w	8011280 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8010fce:	6878      	ldr	r0, [r7, #4]
 8010fd0:	f002 fe0c 	bl	8013bec <tcp_rexmit>
      break;
 8010fd4:	e154      	b.n	8011280 <tcp_process+0x7a8>
 8010fd6:	e153      	b.n	8011280 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8010fd8:	6878      	ldr	r0, [r7, #4]
 8010fda:	f000 fa71 	bl	80114c0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8010fde:	4b32      	ldr	r3, [pc, #200]	; (80110a8 <tcp_process+0x5d0>)
 8010fe0:	781b      	ldrb	r3, [r3, #0]
 8010fe2:	f003 0320 	and.w	r3, r3, #32
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	f000 814c 	beq.w	8011284 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	8b5b      	ldrh	r3, [r3, #26]
 8010ff0:	f043 0302 	orr.w	r3, r3, #2
 8010ff4:	b29a      	uxth	r2, r3
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	2207      	movs	r2, #7
 8010ffe:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011000:	e140      	b.n	8011284 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8011002:	6878      	ldr	r0, [r7, #4]
 8011004:	f000 fa5c 	bl	80114c0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011008:	4b27      	ldr	r3, [pc, #156]	; (80110a8 <tcp_process+0x5d0>)
 801100a:	781b      	ldrb	r3, [r3, #0]
 801100c:	f003 0320 	and.w	r3, r3, #32
 8011010:	2b00      	cmp	r3, #0
 8011012:	d071      	beq.n	80110f8 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011014:	4b19      	ldr	r3, [pc, #100]	; (801107c <tcp_process+0x5a4>)
 8011016:	781b      	ldrb	r3, [r3, #0]
 8011018:	f003 0310 	and.w	r3, r3, #16
 801101c:	2b00      	cmp	r3, #0
 801101e:	d060      	beq.n	80110e2 <tcp_process+0x60a>
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011024:	4b16      	ldr	r3, [pc, #88]	; (8011080 <tcp_process+0x5a8>)
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	429a      	cmp	r2, r3
 801102a:	d15a      	bne.n	80110e2 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011030:	2b00      	cmp	r3, #0
 8011032:	d156      	bne.n	80110e2 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	8b5b      	ldrh	r3, [r3, #26]
 8011038:	f043 0302 	orr.w	r3, r3, #2
 801103c:	b29a      	uxth	r2, r3
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8011042:	6878      	ldr	r0, [r7, #4]
 8011044:	f7fe fdbe 	bl	800fbc4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8011048:	4b18      	ldr	r3, [pc, #96]	; (80110ac <tcp_process+0x5d4>)
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	687a      	ldr	r2, [r7, #4]
 801104e:	429a      	cmp	r2, r3
 8011050:	d105      	bne.n	801105e <tcp_process+0x586>
 8011052:	4b16      	ldr	r3, [pc, #88]	; (80110ac <tcp_process+0x5d4>)
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	68db      	ldr	r3, [r3, #12]
 8011058:	4a14      	ldr	r2, [pc, #80]	; (80110ac <tcp_process+0x5d4>)
 801105a:	6013      	str	r3, [r2, #0]
 801105c:	e02e      	b.n	80110bc <tcp_process+0x5e4>
 801105e:	4b13      	ldr	r3, [pc, #76]	; (80110ac <tcp_process+0x5d4>)
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	617b      	str	r3, [r7, #20]
 8011064:	e027      	b.n	80110b6 <tcp_process+0x5de>
 8011066:	697b      	ldr	r3, [r7, #20]
 8011068:	68db      	ldr	r3, [r3, #12]
 801106a:	687a      	ldr	r2, [r7, #4]
 801106c:	429a      	cmp	r2, r3
 801106e:	d11f      	bne.n	80110b0 <tcp_process+0x5d8>
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	68da      	ldr	r2, [r3, #12]
 8011074:	697b      	ldr	r3, [r7, #20]
 8011076:	60da      	str	r2, [r3, #12]
 8011078:	e020      	b.n	80110bc <tcp_process+0x5e4>
 801107a:	bf00      	nop
 801107c:	20004bf0 	.word	0x20004bf0
 8011080:	20004be8 	.word	0x20004be8
 8011084:	20004bee 	.word	0x20004bee
 8011088:	20004be4 	.word	0x20004be4
 801108c:	20004bd4 	.word	0x20004bd4
 8011090:	20008248 	.word	0x20008248
 8011094:	2000824c 	.word	0x2000824c
 8011098:	0801d6f0 	.word	0x0801d6f0
 801109c:	0801d990 	.word	0x0801d990
 80110a0:	0801d73c 	.word	0x0801d73c
 80110a4:	20004bec 	.word	0x20004bec
 80110a8:	20004bf1 	.word	0x20004bf1
 80110ac:	2000db1c 	.word	0x2000db1c
 80110b0:	697b      	ldr	r3, [r7, #20]
 80110b2:	68db      	ldr	r3, [r3, #12]
 80110b4:	617b      	str	r3, [r7, #20]
 80110b6:	697b      	ldr	r3, [r7, #20]
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d1d4      	bne.n	8011066 <tcp_process+0x58e>
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	2200      	movs	r2, #0
 80110c0:	60da      	str	r2, [r3, #12]
 80110c2:	4b77      	ldr	r3, [pc, #476]	; (80112a0 <tcp_process+0x7c8>)
 80110c4:	2201      	movs	r2, #1
 80110c6:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	220a      	movs	r2, #10
 80110cc:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80110ce:	4b75      	ldr	r3, [pc, #468]	; (80112a4 <tcp_process+0x7cc>)
 80110d0:	681a      	ldr	r2, [r3, #0]
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	60da      	str	r2, [r3, #12]
 80110d6:	4a73      	ldr	r2, [pc, #460]	; (80112a4 <tcp_process+0x7cc>)
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	6013      	str	r3, [r2, #0]
 80110dc:	f003 f950 	bl	8014380 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80110e0:	e0d2      	b.n	8011288 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	8b5b      	ldrh	r3, [r3, #26]
 80110e6:	f043 0302 	orr.w	r3, r3, #2
 80110ea:	b29a      	uxth	r2, r3
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	2208      	movs	r2, #8
 80110f4:	751a      	strb	r2, [r3, #20]
      break;
 80110f6:	e0c7      	b.n	8011288 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80110f8:	4b6b      	ldr	r3, [pc, #428]	; (80112a8 <tcp_process+0x7d0>)
 80110fa:	781b      	ldrb	r3, [r3, #0]
 80110fc:	f003 0310 	and.w	r3, r3, #16
 8011100:	2b00      	cmp	r3, #0
 8011102:	f000 80c1 	beq.w	8011288 <tcp_process+0x7b0>
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801110a:	4b68      	ldr	r3, [pc, #416]	; (80112ac <tcp_process+0x7d4>)
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	429a      	cmp	r2, r3
 8011110:	f040 80ba 	bne.w	8011288 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011118:	2b00      	cmp	r3, #0
 801111a:	f040 80b5 	bne.w	8011288 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	2206      	movs	r2, #6
 8011122:	751a      	strb	r2, [r3, #20]
      break;
 8011124:	e0b0      	b.n	8011288 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8011126:	6878      	ldr	r0, [r7, #4]
 8011128:	f000 f9ca 	bl	80114c0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801112c:	4b60      	ldr	r3, [pc, #384]	; (80112b0 <tcp_process+0x7d8>)
 801112e:	781b      	ldrb	r3, [r3, #0]
 8011130:	f003 0320 	and.w	r3, r3, #32
 8011134:	2b00      	cmp	r3, #0
 8011136:	f000 80a9 	beq.w	801128c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	8b5b      	ldrh	r3, [r3, #26]
 801113e:	f043 0302 	orr.w	r3, r3, #2
 8011142:	b29a      	uxth	r2, r3
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8011148:	6878      	ldr	r0, [r7, #4]
 801114a:	f7fe fd3b 	bl	800fbc4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801114e:	4b59      	ldr	r3, [pc, #356]	; (80112b4 <tcp_process+0x7dc>)
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	687a      	ldr	r2, [r7, #4]
 8011154:	429a      	cmp	r2, r3
 8011156:	d105      	bne.n	8011164 <tcp_process+0x68c>
 8011158:	4b56      	ldr	r3, [pc, #344]	; (80112b4 <tcp_process+0x7dc>)
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	68db      	ldr	r3, [r3, #12]
 801115e:	4a55      	ldr	r2, [pc, #340]	; (80112b4 <tcp_process+0x7dc>)
 8011160:	6013      	str	r3, [r2, #0]
 8011162:	e013      	b.n	801118c <tcp_process+0x6b4>
 8011164:	4b53      	ldr	r3, [pc, #332]	; (80112b4 <tcp_process+0x7dc>)
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	613b      	str	r3, [r7, #16]
 801116a:	e00c      	b.n	8011186 <tcp_process+0x6ae>
 801116c:	693b      	ldr	r3, [r7, #16]
 801116e:	68db      	ldr	r3, [r3, #12]
 8011170:	687a      	ldr	r2, [r7, #4]
 8011172:	429a      	cmp	r2, r3
 8011174:	d104      	bne.n	8011180 <tcp_process+0x6a8>
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	68da      	ldr	r2, [r3, #12]
 801117a:	693b      	ldr	r3, [r7, #16]
 801117c:	60da      	str	r2, [r3, #12]
 801117e:	e005      	b.n	801118c <tcp_process+0x6b4>
 8011180:	693b      	ldr	r3, [r7, #16]
 8011182:	68db      	ldr	r3, [r3, #12]
 8011184:	613b      	str	r3, [r7, #16]
 8011186:	693b      	ldr	r3, [r7, #16]
 8011188:	2b00      	cmp	r3, #0
 801118a:	d1ef      	bne.n	801116c <tcp_process+0x694>
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	2200      	movs	r2, #0
 8011190:	60da      	str	r2, [r3, #12]
 8011192:	4b43      	ldr	r3, [pc, #268]	; (80112a0 <tcp_process+0x7c8>)
 8011194:	2201      	movs	r2, #1
 8011196:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	220a      	movs	r2, #10
 801119c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801119e:	4b41      	ldr	r3, [pc, #260]	; (80112a4 <tcp_process+0x7cc>)
 80111a0:	681a      	ldr	r2, [r3, #0]
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	60da      	str	r2, [r3, #12]
 80111a6:	4a3f      	ldr	r2, [pc, #252]	; (80112a4 <tcp_process+0x7cc>)
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	6013      	str	r3, [r2, #0]
 80111ac:	f003 f8e8 	bl	8014380 <tcp_timer_needed>
      }
      break;
 80111b0:	e06c      	b.n	801128c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80111b2:	6878      	ldr	r0, [r7, #4]
 80111b4:	f000 f984 	bl	80114c0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80111b8:	4b3b      	ldr	r3, [pc, #236]	; (80112a8 <tcp_process+0x7d0>)
 80111ba:	781b      	ldrb	r3, [r3, #0]
 80111bc:	f003 0310 	and.w	r3, r3, #16
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d065      	beq.n	8011290 <tcp_process+0x7b8>
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80111c8:	4b38      	ldr	r3, [pc, #224]	; (80112ac <tcp_process+0x7d4>)
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	429a      	cmp	r2, r3
 80111ce:	d15f      	bne.n	8011290 <tcp_process+0x7b8>
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d15b      	bne.n	8011290 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80111d8:	6878      	ldr	r0, [r7, #4]
 80111da:	f7fe fcf3 	bl	800fbc4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80111de:	4b35      	ldr	r3, [pc, #212]	; (80112b4 <tcp_process+0x7dc>)
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	687a      	ldr	r2, [r7, #4]
 80111e4:	429a      	cmp	r2, r3
 80111e6:	d105      	bne.n	80111f4 <tcp_process+0x71c>
 80111e8:	4b32      	ldr	r3, [pc, #200]	; (80112b4 <tcp_process+0x7dc>)
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	68db      	ldr	r3, [r3, #12]
 80111ee:	4a31      	ldr	r2, [pc, #196]	; (80112b4 <tcp_process+0x7dc>)
 80111f0:	6013      	str	r3, [r2, #0]
 80111f2:	e013      	b.n	801121c <tcp_process+0x744>
 80111f4:	4b2f      	ldr	r3, [pc, #188]	; (80112b4 <tcp_process+0x7dc>)
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	60fb      	str	r3, [r7, #12]
 80111fa:	e00c      	b.n	8011216 <tcp_process+0x73e>
 80111fc:	68fb      	ldr	r3, [r7, #12]
 80111fe:	68db      	ldr	r3, [r3, #12]
 8011200:	687a      	ldr	r2, [r7, #4]
 8011202:	429a      	cmp	r2, r3
 8011204:	d104      	bne.n	8011210 <tcp_process+0x738>
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	68da      	ldr	r2, [r3, #12]
 801120a:	68fb      	ldr	r3, [r7, #12]
 801120c:	60da      	str	r2, [r3, #12]
 801120e:	e005      	b.n	801121c <tcp_process+0x744>
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	68db      	ldr	r3, [r3, #12]
 8011214:	60fb      	str	r3, [r7, #12]
 8011216:	68fb      	ldr	r3, [r7, #12]
 8011218:	2b00      	cmp	r3, #0
 801121a:	d1ef      	bne.n	80111fc <tcp_process+0x724>
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	2200      	movs	r2, #0
 8011220:	60da      	str	r2, [r3, #12]
 8011222:	4b1f      	ldr	r3, [pc, #124]	; (80112a0 <tcp_process+0x7c8>)
 8011224:	2201      	movs	r2, #1
 8011226:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	220a      	movs	r2, #10
 801122c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801122e:	4b1d      	ldr	r3, [pc, #116]	; (80112a4 <tcp_process+0x7cc>)
 8011230:	681a      	ldr	r2, [r3, #0]
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	60da      	str	r2, [r3, #12]
 8011236:	4a1b      	ldr	r2, [pc, #108]	; (80112a4 <tcp_process+0x7cc>)
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	6013      	str	r3, [r2, #0]
 801123c:	f003 f8a0 	bl	8014380 <tcp_timer_needed>
      }
      break;
 8011240:	e026      	b.n	8011290 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8011242:	6878      	ldr	r0, [r7, #4]
 8011244:	f000 f93c 	bl	80114c0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011248:	4b17      	ldr	r3, [pc, #92]	; (80112a8 <tcp_process+0x7d0>)
 801124a:	781b      	ldrb	r3, [r3, #0]
 801124c:	f003 0310 	and.w	r3, r3, #16
 8011250:	2b00      	cmp	r3, #0
 8011252:	d01f      	beq.n	8011294 <tcp_process+0x7bc>
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011258:	4b14      	ldr	r3, [pc, #80]	; (80112ac <tcp_process+0x7d4>)
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	429a      	cmp	r2, r3
 801125e:	d119      	bne.n	8011294 <tcp_process+0x7bc>
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011264:	2b00      	cmp	r3, #0
 8011266:	d115      	bne.n	8011294 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8011268:	4b11      	ldr	r3, [pc, #68]	; (80112b0 <tcp_process+0x7d8>)
 801126a:	781b      	ldrb	r3, [r3, #0]
 801126c:	f043 0310 	orr.w	r3, r3, #16
 8011270:	b2da      	uxtb	r2, r3
 8011272:	4b0f      	ldr	r3, [pc, #60]	; (80112b0 <tcp_process+0x7d8>)
 8011274:	701a      	strb	r2, [r3, #0]
      }
      break;
 8011276:	e00d      	b.n	8011294 <tcp_process+0x7bc>
    default:
      break;
 8011278:	bf00      	nop
 801127a:	e00c      	b.n	8011296 <tcp_process+0x7be>
      break;
 801127c:	bf00      	nop
 801127e:	e00a      	b.n	8011296 <tcp_process+0x7be>
      break;
 8011280:	bf00      	nop
 8011282:	e008      	b.n	8011296 <tcp_process+0x7be>
      break;
 8011284:	bf00      	nop
 8011286:	e006      	b.n	8011296 <tcp_process+0x7be>
      break;
 8011288:	bf00      	nop
 801128a:	e004      	b.n	8011296 <tcp_process+0x7be>
      break;
 801128c:	bf00      	nop
 801128e:	e002      	b.n	8011296 <tcp_process+0x7be>
      break;
 8011290:	bf00      	nop
 8011292:	e000      	b.n	8011296 <tcp_process+0x7be>
      break;
 8011294:	bf00      	nop
  }
  return ERR_OK;
 8011296:	2300      	movs	r3, #0
}
 8011298:	4618      	mov	r0, r3
 801129a:	3724      	adds	r7, #36	; 0x24
 801129c:	46bd      	mov	sp, r7
 801129e:	bd90      	pop	{r4, r7, pc}
 80112a0:	2000db18 	.word	0x2000db18
 80112a4:	2000db2c 	.word	0x2000db2c
 80112a8:	20004bf0 	.word	0x20004bf0
 80112ac:	20004be8 	.word	0x20004be8
 80112b0:	20004bf1 	.word	0x20004bf1
 80112b4:	2000db1c 	.word	0x2000db1c

080112b8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80112b8:	b590      	push	{r4, r7, lr}
 80112ba:	b085      	sub	sp, #20
 80112bc:	af00      	add	r7, sp, #0
 80112be:	6078      	str	r0, [r7, #4]
 80112c0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d106      	bne.n	80112d6 <tcp_oos_insert_segment+0x1e>
 80112c8:	4b3b      	ldr	r3, [pc, #236]	; (80113b8 <tcp_oos_insert_segment+0x100>)
 80112ca:	f240 421f 	movw	r2, #1055	; 0x41f
 80112ce:	493b      	ldr	r1, [pc, #236]	; (80113bc <tcp_oos_insert_segment+0x104>)
 80112d0:	483b      	ldr	r0, [pc, #236]	; (80113c0 <tcp_oos_insert_segment+0x108>)
 80112d2:	f009 ff17 	bl	801b104 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	68db      	ldr	r3, [r3, #12]
 80112da:	899b      	ldrh	r3, [r3, #12]
 80112dc:	b29b      	uxth	r3, r3
 80112de:	4618      	mov	r0, r3
 80112e0:	f7fb f9d0 	bl	800c684 <lwip_htons>
 80112e4:	4603      	mov	r3, r0
 80112e6:	b2db      	uxtb	r3, r3
 80112e8:	f003 0301 	and.w	r3, r3, #1
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d028      	beq.n	8011342 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80112f0:	6838      	ldr	r0, [r7, #0]
 80112f2:	f7fe f997 	bl	800f624 <tcp_segs_free>
    next = NULL;
 80112f6:	2300      	movs	r3, #0
 80112f8:	603b      	str	r3, [r7, #0]
 80112fa:	e056      	b.n	80113aa <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80112fc:	683b      	ldr	r3, [r7, #0]
 80112fe:	68db      	ldr	r3, [r3, #12]
 8011300:	899b      	ldrh	r3, [r3, #12]
 8011302:	b29b      	uxth	r3, r3
 8011304:	4618      	mov	r0, r3
 8011306:	f7fb f9bd 	bl	800c684 <lwip_htons>
 801130a:	4603      	mov	r3, r0
 801130c:	b2db      	uxtb	r3, r3
 801130e:	f003 0301 	and.w	r3, r3, #1
 8011312:	2b00      	cmp	r3, #0
 8011314:	d00d      	beq.n	8011332 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	68db      	ldr	r3, [r3, #12]
 801131a:	899b      	ldrh	r3, [r3, #12]
 801131c:	b29c      	uxth	r4, r3
 801131e:	2001      	movs	r0, #1
 8011320:	f7fb f9b0 	bl	800c684 <lwip_htons>
 8011324:	4603      	mov	r3, r0
 8011326:	461a      	mov	r2, r3
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	68db      	ldr	r3, [r3, #12]
 801132c:	4322      	orrs	r2, r4
 801132e:	b292      	uxth	r2, r2
 8011330:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8011332:	683b      	ldr	r3, [r7, #0]
 8011334:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8011336:	683b      	ldr	r3, [r7, #0]
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801133c:	68f8      	ldr	r0, [r7, #12]
 801133e:	f7fe f986 	bl	800f64e <tcp_seg_free>
    while (next &&
 8011342:	683b      	ldr	r3, [r7, #0]
 8011344:	2b00      	cmp	r3, #0
 8011346:	d00e      	beq.n	8011366 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	891b      	ldrh	r3, [r3, #8]
 801134c:	461a      	mov	r2, r3
 801134e:	4b1d      	ldr	r3, [pc, #116]	; (80113c4 <tcp_oos_insert_segment+0x10c>)
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	441a      	add	r2, r3
 8011354:	683b      	ldr	r3, [r7, #0]
 8011356:	68db      	ldr	r3, [r3, #12]
 8011358:	685b      	ldr	r3, [r3, #4]
 801135a:	6839      	ldr	r1, [r7, #0]
 801135c:	8909      	ldrh	r1, [r1, #8]
 801135e:	440b      	add	r3, r1
 8011360:	1ad3      	subs	r3, r2, r3
    while (next &&
 8011362:	2b00      	cmp	r3, #0
 8011364:	daca      	bge.n	80112fc <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8011366:	683b      	ldr	r3, [r7, #0]
 8011368:	2b00      	cmp	r3, #0
 801136a:	d01e      	beq.n	80113aa <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	891b      	ldrh	r3, [r3, #8]
 8011370:	461a      	mov	r2, r3
 8011372:	4b14      	ldr	r3, [pc, #80]	; (80113c4 <tcp_oos_insert_segment+0x10c>)
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	441a      	add	r2, r3
 8011378:	683b      	ldr	r3, [r7, #0]
 801137a:	68db      	ldr	r3, [r3, #12]
 801137c:	685b      	ldr	r3, [r3, #4]
 801137e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8011380:	2b00      	cmp	r3, #0
 8011382:	dd12      	ble.n	80113aa <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8011384:	683b      	ldr	r3, [r7, #0]
 8011386:	68db      	ldr	r3, [r3, #12]
 8011388:	685b      	ldr	r3, [r3, #4]
 801138a:	b29a      	uxth	r2, r3
 801138c:	4b0d      	ldr	r3, [pc, #52]	; (80113c4 <tcp_oos_insert_segment+0x10c>)
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	b29b      	uxth	r3, r3
 8011392:	1ad3      	subs	r3, r2, r3
 8011394:	b29a      	uxth	r2, r3
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	685a      	ldr	r2, [r3, #4]
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	891b      	ldrh	r3, [r3, #8]
 80113a2:	4619      	mov	r1, r3
 80113a4:	4610      	mov	r0, r2
 80113a6:	f7fc fb93 	bl	800dad0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	683a      	ldr	r2, [r7, #0]
 80113ae:	601a      	str	r2, [r3, #0]
}
 80113b0:	bf00      	nop
 80113b2:	3714      	adds	r7, #20
 80113b4:	46bd      	mov	sp, r7
 80113b6:	bd90      	pop	{r4, r7, pc}
 80113b8:	0801d6f0 	.word	0x0801d6f0
 80113bc:	0801d9b0 	.word	0x0801d9b0
 80113c0:	0801d73c 	.word	0x0801d73c
 80113c4:	20004be4 	.word	0x20004be4

080113c8 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80113c8:	b5b0      	push	{r4, r5, r7, lr}
 80113ca:	b086      	sub	sp, #24
 80113cc:	af00      	add	r7, sp, #0
 80113ce:	60f8      	str	r0, [r7, #12]
 80113d0:	60b9      	str	r1, [r7, #8]
 80113d2:	607a      	str	r2, [r7, #4]
 80113d4:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80113d6:	e03e      	b.n	8011456 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80113d8:	68bb      	ldr	r3, [r7, #8]
 80113da:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80113dc:	68bb      	ldr	r3, [r7, #8]
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80113e2:	697b      	ldr	r3, [r7, #20]
 80113e4:	685b      	ldr	r3, [r3, #4]
 80113e6:	4618      	mov	r0, r3
 80113e8:	f7fc fd86 	bl	800def8 <pbuf_clen>
 80113ec:	4603      	mov	r3, r0
 80113ee:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80113f6:	8a7a      	ldrh	r2, [r7, #18]
 80113f8:	429a      	cmp	r2, r3
 80113fa:	d906      	bls.n	801140a <tcp_free_acked_segments+0x42>
 80113fc:	4b2a      	ldr	r3, [pc, #168]	; (80114a8 <tcp_free_acked_segments+0xe0>)
 80113fe:	f240 4257 	movw	r2, #1111	; 0x457
 8011402:	492a      	ldr	r1, [pc, #168]	; (80114ac <tcp_free_acked_segments+0xe4>)
 8011404:	482a      	ldr	r0, [pc, #168]	; (80114b0 <tcp_free_acked_segments+0xe8>)
 8011406:	f009 fe7d 	bl	801b104 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8011410:	8a7b      	ldrh	r3, [r7, #18]
 8011412:	1ad3      	subs	r3, r2, r3
 8011414:	b29a      	uxth	r2, r3
 8011416:	68fb      	ldr	r3, [r7, #12]
 8011418:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801141c:	697b      	ldr	r3, [r7, #20]
 801141e:	891a      	ldrh	r2, [r3, #8]
 8011420:	4b24      	ldr	r3, [pc, #144]	; (80114b4 <tcp_free_acked_segments+0xec>)
 8011422:	881b      	ldrh	r3, [r3, #0]
 8011424:	4413      	add	r3, r2
 8011426:	b29a      	uxth	r2, r3
 8011428:	4b22      	ldr	r3, [pc, #136]	; (80114b4 <tcp_free_acked_segments+0xec>)
 801142a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801142c:	6978      	ldr	r0, [r7, #20]
 801142e:	f7fe f90e 	bl	800f64e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011438:	2b00      	cmp	r3, #0
 801143a:	d00c      	beq.n	8011456 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801143c:	68bb      	ldr	r3, [r7, #8]
 801143e:	2b00      	cmp	r3, #0
 8011440:	d109      	bne.n	8011456 <tcp_free_acked_segments+0x8e>
 8011442:	683b      	ldr	r3, [r7, #0]
 8011444:	2b00      	cmp	r3, #0
 8011446:	d106      	bne.n	8011456 <tcp_free_acked_segments+0x8e>
 8011448:	4b17      	ldr	r3, [pc, #92]	; (80114a8 <tcp_free_acked_segments+0xe0>)
 801144a:	f240 4261 	movw	r2, #1121	; 0x461
 801144e:	491a      	ldr	r1, [pc, #104]	; (80114b8 <tcp_free_acked_segments+0xf0>)
 8011450:	4817      	ldr	r0, [pc, #92]	; (80114b0 <tcp_free_acked_segments+0xe8>)
 8011452:	f009 fe57 	bl	801b104 <iprintf>
  while (seg_list != NULL &&
 8011456:	68bb      	ldr	r3, [r7, #8]
 8011458:	2b00      	cmp	r3, #0
 801145a:	d020      	beq.n	801149e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801145c:	68bb      	ldr	r3, [r7, #8]
 801145e:	68db      	ldr	r3, [r3, #12]
 8011460:	685b      	ldr	r3, [r3, #4]
 8011462:	4618      	mov	r0, r3
 8011464:	f7fb f923 	bl	800c6ae <lwip_htonl>
 8011468:	4604      	mov	r4, r0
 801146a:	68bb      	ldr	r3, [r7, #8]
 801146c:	891b      	ldrh	r3, [r3, #8]
 801146e:	461d      	mov	r5, r3
 8011470:	68bb      	ldr	r3, [r7, #8]
 8011472:	68db      	ldr	r3, [r3, #12]
 8011474:	899b      	ldrh	r3, [r3, #12]
 8011476:	b29b      	uxth	r3, r3
 8011478:	4618      	mov	r0, r3
 801147a:	f7fb f903 	bl	800c684 <lwip_htons>
 801147e:	4603      	mov	r3, r0
 8011480:	b2db      	uxtb	r3, r3
 8011482:	f003 0303 	and.w	r3, r3, #3
 8011486:	2b00      	cmp	r3, #0
 8011488:	d001      	beq.n	801148e <tcp_free_acked_segments+0xc6>
 801148a:	2301      	movs	r3, #1
 801148c:	e000      	b.n	8011490 <tcp_free_acked_segments+0xc8>
 801148e:	2300      	movs	r3, #0
 8011490:	442b      	add	r3, r5
 8011492:	18e2      	adds	r2, r4, r3
 8011494:	4b09      	ldr	r3, [pc, #36]	; (80114bc <tcp_free_acked_segments+0xf4>)
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801149a:	2b00      	cmp	r3, #0
 801149c:	dd9c      	ble.n	80113d8 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801149e:	68bb      	ldr	r3, [r7, #8]
}
 80114a0:	4618      	mov	r0, r3
 80114a2:	3718      	adds	r7, #24
 80114a4:	46bd      	mov	sp, r7
 80114a6:	bdb0      	pop	{r4, r5, r7, pc}
 80114a8:	0801d6f0 	.word	0x0801d6f0
 80114ac:	0801d9d8 	.word	0x0801d9d8
 80114b0:	0801d73c 	.word	0x0801d73c
 80114b4:	20004bec 	.word	0x20004bec
 80114b8:	0801da00 	.word	0x0801da00
 80114bc:	20004be8 	.word	0x20004be8

080114c0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80114c0:	b5b0      	push	{r4, r5, r7, lr}
 80114c2:	b094      	sub	sp, #80	; 0x50
 80114c4:	af00      	add	r7, sp, #0
 80114c6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80114c8:	2300      	movs	r3, #0
 80114ca:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d106      	bne.n	80114e0 <tcp_receive+0x20>
 80114d2:	4ba6      	ldr	r3, [pc, #664]	; (801176c <tcp_receive+0x2ac>)
 80114d4:	f240 427b 	movw	r2, #1147	; 0x47b
 80114d8:	49a5      	ldr	r1, [pc, #660]	; (8011770 <tcp_receive+0x2b0>)
 80114da:	48a6      	ldr	r0, [pc, #664]	; (8011774 <tcp_receive+0x2b4>)
 80114dc:	f009 fe12 	bl	801b104 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	7d1b      	ldrb	r3, [r3, #20]
 80114e4:	2b03      	cmp	r3, #3
 80114e6:	d806      	bhi.n	80114f6 <tcp_receive+0x36>
 80114e8:	4ba0      	ldr	r3, [pc, #640]	; (801176c <tcp_receive+0x2ac>)
 80114ea:	f240 427c 	movw	r2, #1148	; 0x47c
 80114ee:	49a2      	ldr	r1, [pc, #648]	; (8011778 <tcp_receive+0x2b8>)
 80114f0:	48a0      	ldr	r0, [pc, #640]	; (8011774 <tcp_receive+0x2b4>)
 80114f2:	f009 fe07 	bl	801b104 <iprintf>

  if (flags & TCP_ACK) {
 80114f6:	4ba1      	ldr	r3, [pc, #644]	; (801177c <tcp_receive+0x2bc>)
 80114f8:	781b      	ldrb	r3, [r3, #0]
 80114fa:	f003 0310 	and.w	r3, r3, #16
 80114fe:	2b00      	cmp	r3, #0
 8011500:	f000 8263 	beq.w	80119ca <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801150a:	461a      	mov	r2, r3
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011510:	4413      	add	r3, r2
 8011512:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011518:	4b99      	ldr	r3, [pc, #612]	; (8011780 <tcp_receive+0x2c0>)
 801151a:	681b      	ldr	r3, [r3, #0]
 801151c:	1ad3      	subs	r3, r2, r3
 801151e:	2b00      	cmp	r3, #0
 8011520:	db1b      	blt.n	801155a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011526:	4b96      	ldr	r3, [pc, #600]	; (8011780 <tcp_receive+0x2c0>)
 8011528:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801152a:	429a      	cmp	r2, r3
 801152c:	d106      	bne.n	801153c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011532:	4b94      	ldr	r3, [pc, #592]	; (8011784 <tcp_receive+0x2c4>)
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	1ad3      	subs	r3, r2, r3
 8011538:	2b00      	cmp	r3, #0
 801153a:	db0e      	blt.n	801155a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011540:	4b90      	ldr	r3, [pc, #576]	; (8011784 <tcp_receive+0x2c4>)
 8011542:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011544:	429a      	cmp	r2, r3
 8011546:	d125      	bne.n	8011594 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011548:	4b8f      	ldr	r3, [pc, #572]	; (8011788 <tcp_receive+0x2c8>)
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	89db      	ldrh	r3, [r3, #14]
 801154e:	b29a      	uxth	r2, r3
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011556:	429a      	cmp	r2, r3
 8011558:	d91c      	bls.n	8011594 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801155a:	4b8b      	ldr	r3, [pc, #556]	; (8011788 <tcp_receive+0x2c8>)
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	89db      	ldrh	r3, [r3, #14]
 8011560:	b29a      	uxth	r2, r3
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011574:	429a      	cmp	r2, r3
 8011576:	d205      	bcs.n	8011584 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8011584:	4b7e      	ldr	r3, [pc, #504]	; (8011780 <tcp_receive+0x2c0>)
 8011586:	681a      	ldr	r2, [r3, #0]
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 801158c:	4b7d      	ldr	r3, [pc, #500]	; (8011784 <tcp_receive+0x2c4>)
 801158e:	681a      	ldr	r2, [r3, #0]
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8011594:	4b7b      	ldr	r3, [pc, #492]	; (8011784 <tcp_receive+0x2c4>)
 8011596:	681a      	ldr	r2, [r3, #0]
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801159c:	1ad3      	subs	r3, r2, r3
 801159e:	2b00      	cmp	r3, #0
 80115a0:	dc58      	bgt.n	8011654 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80115a2:	4b7a      	ldr	r3, [pc, #488]	; (801178c <tcp_receive+0x2cc>)
 80115a4:	881b      	ldrh	r3, [r3, #0]
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d14b      	bne.n	8011642 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80115ae:	687a      	ldr	r2, [r7, #4]
 80115b0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80115b4:	4413      	add	r3, r2
 80115b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80115b8:	429a      	cmp	r2, r3
 80115ba:	d142      	bne.n	8011642 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	db3d      	blt.n	8011642 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80115ca:	4b6e      	ldr	r3, [pc, #440]	; (8011784 <tcp_receive+0x2c4>)
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	429a      	cmp	r2, r3
 80115d0:	d137      	bne.n	8011642 <tcp_receive+0x182>
              found_dupack = 1;
 80115d2:	2301      	movs	r3, #1
 80115d4:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80115dc:	2bff      	cmp	r3, #255	; 0xff
 80115de:	d007      	beq.n	80115f0 <tcp_receive+0x130>
                ++pcb->dupacks;
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80115e6:	3301      	adds	r3, #1
 80115e8:	b2da      	uxtb	r2, r3
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80115f6:	2b03      	cmp	r3, #3
 80115f8:	d91b      	bls.n	8011632 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011604:	4413      	add	r3, r2
 8011606:	b29a      	uxth	r2, r3
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801160e:	429a      	cmp	r2, r3
 8011610:	d30a      	bcc.n	8011628 <tcp_receive+0x168>
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801161c:	4413      	add	r3, r2
 801161e:	b29a      	uxth	r2, r3
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011626:	e004      	b.n	8011632 <tcp_receive+0x172>
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801162e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011638:	2b02      	cmp	r3, #2
 801163a:	d902      	bls.n	8011642 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801163c:	6878      	ldr	r0, [r7, #4]
 801163e:	f002 fb41 	bl	8013cc4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8011642:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011644:	2b00      	cmp	r3, #0
 8011646:	f040 8160 	bne.w	801190a <tcp_receive+0x44a>
        pcb->dupacks = 0;
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	2200      	movs	r2, #0
 801164e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011652:	e15a      	b.n	801190a <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011654:	4b4b      	ldr	r3, [pc, #300]	; (8011784 <tcp_receive+0x2c4>)
 8011656:	681a      	ldr	r2, [r3, #0]
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801165c:	1ad3      	subs	r3, r2, r3
 801165e:	3b01      	subs	r3, #1
 8011660:	2b00      	cmp	r3, #0
 8011662:	f2c0 814d 	blt.w	8011900 <tcp_receive+0x440>
 8011666:	4b47      	ldr	r3, [pc, #284]	; (8011784 <tcp_receive+0x2c4>)
 8011668:	681a      	ldr	r2, [r3, #0]
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801166e:	1ad3      	subs	r3, r2, r3
 8011670:	2b00      	cmp	r3, #0
 8011672:	f300 8145 	bgt.w	8011900 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	8b5b      	ldrh	r3, [r3, #26]
 801167a:	f003 0304 	and.w	r3, r3, #4
 801167e:	2b00      	cmp	r3, #0
 8011680:	d010      	beq.n	80116a4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	8b5b      	ldrh	r3, [r3, #26]
 8011686:	f023 0304 	bic.w	r3, r3, #4
 801168a:	b29a      	uxth	r2, r3
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	2200      	movs	r2, #0
 80116a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	2200      	movs	r2, #0
 80116a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80116b2:	10db      	asrs	r3, r3, #3
 80116b4:	b21b      	sxth	r3, r3
 80116b6:	b29a      	uxth	r2, r3
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80116be:	b29b      	uxth	r3, r3
 80116c0:	4413      	add	r3, r2
 80116c2:	b29b      	uxth	r3, r3
 80116c4:	b21a      	sxth	r2, r3
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80116cc:	4b2d      	ldr	r3, [pc, #180]	; (8011784 <tcp_receive+0x2c4>)
 80116ce:	681b      	ldr	r3, [r3, #0]
 80116d0:	b29a      	uxth	r2, r3
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80116d6:	b29b      	uxth	r3, r3
 80116d8:	1ad3      	subs	r3, r2, r3
 80116da:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	2200      	movs	r2, #0
 80116e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80116e4:	4b27      	ldr	r3, [pc, #156]	; (8011784 <tcp_receive+0x2c4>)
 80116e6:	681a      	ldr	r2, [r3, #0]
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	7d1b      	ldrb	r3, [r3, #20]
 80116f0:	2b03      	cmp	r3, #3
 80116f2:	f240 8096 	bls.w	8011822 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8011702:	429a      	cmp	r2, r3
 8011704:	d244      	bcs.n	8011790 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	8b5b      	ldrh	r3, [r3, #26]
 801170a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801170e:	2b00      	cmp	r3, #0
 8011710:	d001      	beq.n	8011716 <tcp_receive+0x256>
 8011712:	2301      	movs	r3, #1
 8011714:	e000      	b.n	8011718 <tcp_receive+0x258>
 8011716:	2302      	movs	r3, #2
 8011718:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801171c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011720:	b29a      	uxth	r2, r3
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011726:	fb12 f303 	smulbb	r3, r2, r3
 801172a:	b29b      	uxth	r3, r3
 801172c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801172e:	4293      	cmp	r3, r2
 8011730:	bf28      	it	cs
 8011732:	4613      	movcs	r3, r2
 8011734:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801173c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801173e:	4413      	add	r3, r2
 8011740:	b29a      	uxth	r2, r3
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011748:	429a      	cmp	r2, r3
 801174a:	d309      	bcc.n	8011760 <tcp_receive+0x2a0>
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011752:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011754:	4413      	add	r3, r2
 8011756:	b29a      	uxth	r2, r3
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801175e:	e060      	b.n	8011822 <tcp_receive+0x362>
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011766:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801176a:	e05a      	b.n	8011822 <tcp_receive+0x362>
 801176c:	0801d6f0 	.word	0x0801d6f0
 8011770:	0801da20 	.word	0x0801da20
 8011774:	0801d73c 	.word	0x0801d73c
 8011778:	0801da3c 	.word	0x0801da3c
 801177c:	20004bf0 	.word	0x20004bf0
 8011780:	20004be4 	.word	0x20004be4
 8011784:	20004be8 	.word	0x20004be8
 8011788:	20004bd4 	.word	0x20004bd4
 801178c:	20004bee 	.word	0x20004bee
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011796:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011798:	4413      	add	r3, r2
 801179a:	b29a      	uxth	r2, r3
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80117a2:	429a      	cmp	r2, r3
 80117a4:	d309      	bcc.n	80117ba <tcp_receive+0x2fa>
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80117ac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80117ae:	4413      	add	r3, r2
 80117b0:	b29a      	uxth	r2, r3
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80117b8:	e004      	b.n	80117c4 <tcp_receive+0x304>
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80117c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80117d0:	429a      	cmp	r2, r3
 80117d2:	d326      	bcc.n	8011822 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80117e0:	1ad3      	subs	r3, r2, r3
 80117e2:	b29a      	uxth	r2, r3
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80117f4:	4413      	add	r3, r2
 80117f6:	b29a      	uxth	r2, r3
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80117fe:	429a      	cmp	r2, r3
 8011800:	d30a      	bcc.n	8011818 <tcp_receive+0x358>
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801180c:	4413      	add	r3, r2
 801180e:	b29a      	uxth	r2, r3
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011816:	e004      	b.n	8011822 <tcp_receive+0x362>
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801181e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801182a:	4a98      	ldr	r2, [pc, #608]	; (8011a8c <tcp_receive+0x5cc>)
 801182c:	6878      	ldr	r0, [r7, #4]
 801182e:	f7ff fdcb 	bl	80113c8 <tcp_free_acked_segments>
 8011832:	4602      	mov	r2, r0
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011840:	4a93      	ldr	r2, [pc, #588]	; (8011a90 <tcp_receive+0x5d0>)
 8011842:	6878      	ldr	r0, [r7, #4]
 8011844:	f7ff fdc0 	bl	80113c8 <tcp_free_acked_segments>
 8011848:	4602      	mov	r2, r0
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011852:	2b00      	cmp	r3, #0
 8011854:	d104      	bne.n	8011860 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801185c:	861a      	strh	r2, [r3, #48]	; 0x30
 801185e:	e002      	b.n	8011866 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	2200      	movs	r2, #0
 8011864:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	2200      	movs	r2, #0
 801186a:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011870:	2b00      	cmp	r3, #0
 8011872:	d103      	bne.n	801187c <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	2200      	movs	r2, #0
 8011878:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8011882:	4b84      	ldr	r3, [pc, #528]	; (8011a94 <tcp_receive+0x5d4>)
 8011884:	881b      	ldrh	r3, [r3, #0]
 8011886:	4413      	add	r3, r2
 8011888:	b29a      	uxth	r2, r3
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	8b5b      	ldrh	r3, [r3, #26]
 8011894:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011898:	2b00      	cmp	r3, #0
 801189a:	d035      	beq.n	8011908 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d118      	bne.n	80118d6 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d00c      	beq.n	80118c6 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80118b4:	68db      	ldr	r3, [r3, #12]
 80118b6:	685b      	ldr	r3, [r3, #4]
 80118b8:	4618      	mov	r0, r3
 80118ba:	f7fa fef8 	bl	800c6ae <lwip_htonl>
 80118be:	4603      	mov	r3, r0
 80118c0:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	dc20      	bgt.n	8011908 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	8b5b      	ldrh	r3, [r3, #26]
 80118ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80118ce:	b29a      	uxth	r2, r3
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80118d4:	e018      	b.n	8011908 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80118de:	68db      	ldr	r3, [r3, #12]
 80118e0:	685b      	ldr	r3, [r3, #4]
 80118e2:	4618      	mov	r0, r3
 80118e4:	f7fa fee3 	bl	800c6ae <lwip_htonl>
 80118e8:	4603      	mov	r3, r0
 80118ea:	1ae3      	subs	r3, r4, r3
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	dc0b      	bgt.n	8011908 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	8b5b      	ldrh	r3, [r3, #26]
 80118f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80118f8:	b29a      	uxth	r2, r3
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80118fe:	e003      	b.n	8011908 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8011900:	6878      	ldr	r0, [r7, #4]
 8011902:	f002 fbcd 	bl	80140a0 <tcp_send_empty_ack>
 8011906:	e000      	b.n	801190a <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011908:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801190e:	2b00      	cmp	r3, #0
 8011910:	d05b      	beq.n	80119ca <tcp_receive+0x50a>
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011916:	4b60      	ldr	r3, [pc, #384]	; (8011a98 <tcp_receive+0x5d8>)
 8011918:	681b      	ldr	r3, [r3, #0]
 801191a:	1ad3      	subs	r3, r2, r3
 801191c:	2b00      	cmp	r3, #0
 801191e:	da54      	bge.n	80119ca <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8011920:	4b5e      	ldr	r3, [pc, #376]	; (8011a9c <tcp_receive+0x5dc>)
 8011922:	681b      	ldr	r3, [r3, #0]
 8011924:	b29a      	uxth	r2, r3
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801192a:	b29b      	uxth	r3, r3
 801192c:	1ad3      	subs	r3, r2, r3
 801192e:	b29b      	uxth	r3, r3
 8011930:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8011934:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801193e:	10db      	asrs	r3, r3, #3
 8011940:	b21b      	sxth	r3, r3
 8011942:	b29b      	uxth	r3, r3
 8011944:	1ad3      	subs	r3, r2, r3
 8011946:	b29b      	uxth	r3, r3
 8011948:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011952:	b29a      	uxth	r2, r3
 8011954:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011958:	4413      	add	r3, r2
 801195a:	b29b      	uxth	r3, r3
 801195c:	b21a      	sxth	r2, r3
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8011962:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011966:	2b00      	cmp	r3, #0
 8011968:	da05      	bge.n	8011976 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 801196a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801196e:	425b      	negs	r3, r3
 8011970:	b29b      	uxth	r3, r3
 8011972:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8011976:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011980:	109b      	asrs	r3, r3, #2
 8011982:	b21b      	sxth	r3, r3
 8011984:	b29b      	uxth	r3, r3
 8011986:	1ad3      	subs	r3, r2, r3
 8011988:	b29b      	uxth	r3, r3
 801198a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011994:	b29a      	uxth	r2, r3
 8011996:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801199a:	4413      	add	r3, r2
 801199c:	b29b      	uxth	r3, r3
 801199e:	b21a      	sxth	r2, r3
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80119aa:	10db      	asrs	r3, r3, #3
 80119ac:	b21b      	sxth	r3, r3
 80119ae:	b29a      	uxth	r2, r3
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80119b6:	b29b      	uxth	r3, r3
 80119b8:	4413      	add	r3, r2
 80119ba:	b29b      	uxth	r3, r3
 80119bc:	b21a      	sxth	r2, r3
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	2200      	movs	r2, #0
 80119c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80119ca:	4b35      	ldr	r3, [pc, #212]	; (8011aa0 <tcp_receive+0x5e0>)
 80119cc:	881b      	ldrh	r3, [r3, #0]
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	f000 84e1 	beq.w	8012396 <tcp_receive+0xed6>
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	7d1b      	ldrb	r3, [r3, #20]
 80119d8:	2b06      	cmp	r3, #6
 80119da:	f200 84dc 	bhi.w	8012396 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80119e2:	4b30      	ldr	r3, [pc, #192]	; (8011aa4 <tcp_receive+0x5e4>)
 80119e4:	681b      	ldr	r3, [r3, #0]
 80119e6:	1ad3      	subs	r3, r2, r3
 80119e8:	3b01      	subs	r3, #1
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	f2c0 808e 	blt.w	8011b0c <tcp_receive+0x64c>
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80119f4:	4b2a      	ldr	r3, [pc, #168]	; (8011aa0 <tcp_receive+0x5e0>)
 80119f6:	881b      	ldrh	r3, [r3, #0]
 80119f8:	4619      	mov	r1, r3
 80119fa:	4b2a      	ldr	r3, [pc, #168]	; (8011aa4 <tcp_receive+0x5e4>)
 80119fc:	681b      	ldr	r3, [r3, #0]
 80119fe:	440b      	add	r3, r1
 8011a00:	1ad3      	subs	r3, r2, r3
 8011a02:	3301      	adds	r3, #1
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	f300 8081 	bgt.w	8011b0c <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8011a0a:	4b27      	ldr	r3, [pc, #156]	; (8011aa8 <tcp_receive+0x5e8>)
 8011a0c:	685b      	ldr	r3, [r3, #4]
 8011a0e:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011a14:	4b23      	ldr	r3, [pc, #140]	; (8011aa4 <tcp_receive+0x5e4>)
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	1ad3      	subs	r3, r2, r3
 8011a1a:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8011a1c:	4b22      	ldr	r3, [pc, #136]	; (8011aa8 <tcp_receive+0x5e8>)
 8011a1e:	685b      	ldr	r3, [r3, #4]
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d106      	bne.n	8011a32 <tcp_receive+0x572>
 8011a24:	4b21      	ldr	r3, [pc, #132]	; (8011aac <tcp_receive+0x5ec>)
 8011a26:	f240 5294 	movw	r2, #1428	; 0x594
 8011a2a:	4921      	ldr	r1, [pc, #132]	; (8011ab0 <tcp_receive+0x5f0>)
 8011a2c:	4821      	ldr	r0, [pc, #132]	; (8011ab4 <tcp_receive+0x5f4>)
 8011a2e:	f009 fb69 	bl	801b104 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8011a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a34:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8011a38:	4293      	cmp	r3, r2
 8011a3a:	d906      	bls.n	8011a4a <tcp_receive+0x58a>
 8011a3c:	4b1b      	ldr	r3, [pc, #108]	; (8011aac <tcp_receive+0x5ec>)
 8011a3e:	f240 5295 	movw	r2, #1429	; 0x595
 8011a42:	491d      	ldr	r1, [pc, #116]	; (8011ab8 <tcp_receive+0x5f8>)
 8011a44:	481b      	ldr	r0, [pc, #108]	; (8011ab4 <tcp_receive+0x5f4>)
 8011a46:	f009 fb5d 	bl	801b104 <iprintf>
      off = (u16_t)off32;
 8011a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a4c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8011a50:	4b15      	ldr	r3, [pc, #84]	; (8011aa8 <tcp_receive+0x5e8>)
 8011a52:	685b      	ldr	r3, [r3, #4]
 8011a54:	891b      	ldrh	r3, [r3, #8]
 8011a56:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011a5a:	429a      	cmp	r2, r3
 8011a5c:	d906      	bls.n	8011a6c <tcp_receive+0x5ac>
 8011a5e:	4b13      	ldr	r3, [pc, #76]	; (8011aac <tcp_receive+0x5ec>)
 8011a60:	f240 5297 	movw	r2, #1431	; 0x597
 8011a64:	4915      	ldr	r1, [pc, #84]	; (8011abc <tcp_receive+0x5fc>)
 8011a66:	4813      	ldr	r0, [pc, #76]	; (8011ab4 <tcp_receive+0x5f4>)
 8011a68:	f009 fb4c 	bl	801b104 <iprintf>
      inseg.len -= off;
 8011a6c:	4b0e      	ldr	r3, [pc, #56]	; (8011aa8 <tcp_receive+0x5e8>)
 8011a6e:	891a      	ldrh	r2, [r3, #8]
 8011a70:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011a74:	1ad3      	subs	r3, r2, r3
 8011a76:	b29a      	uxth	r2, r3
 8011a78:	4b0b      	ldr	r3, [pc, #44]	; (8011aa8 <tcp_receive+0x5e8>)
 8011a7a:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8011a7c:	4b0a      	ldr	r3, [pc, #40]	; (8011aa8 <tcp_receive+0x5e8>)
 8011a7e:	685b      	ldr	r3, [r3, #4]
 8011a80:	891a      	ldrh	r2, [r3, #8]
 8011a82:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011a86:	1ad3      	subs	r3, r2, r3
 8011a88:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8011a8a:	e029      	b.n	8011ae0 <tcp_receive+0x620>
 8011a8c:	0801da58 	.word	0x0801da58
 8011a90:	0801da60 	.word	0x0801da60
 8011a94:	20004bec 	.word	0x20004bec
 8011a98:	20004be8 	.word	0x20004be8
 8011a9c:	2000db20 	.word	0x2000db20
 8011aa0:	20004bee 	.word	0x20004bee
 8011aa4:	20004be4 	.word	0x20004be4
 8011aa8:	20004bc4 	.word	0x20004bc4
 8011aac:	0801d6f0 	.word	0x0801d6f0
 8011ab0:	0801da68 	.word	0x0801da68
 8011ab4:	0801d73c 	.word	0x0801d73c
 8011ab8:	0801da78 	.word	0x0801da78
 8011abc:	0801da88 	.word	0x0801da88
        off -= p->len;
 8011ac0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011ac2:	895b      	ldrh	r3, [r3, #10]
 8011ac4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011ac8:	1ad3      	subs	r3, r2, r3
 8011aca:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8011ace:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011ad0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011ad2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8011ad4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011ad6:	2200      	movs	r2, #0
 8011ad8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8011ada:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011adc:	681b      	ldr	r3, [r3, #0]
 8011ade:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8011ae0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011ae2:	895b      	ldrh	r3, [r3, #10]
 8011ae4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011ae8:	429a      	cmp	r2, r3
 8011aea:	d8e9      	bhi.n	8011ac0 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8011aec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011af0:	4619      	mov	r1, r3
 8011af2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8011af4:	f7fc f8ec 	bl	800dcd0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011afc:	4a91      	ldr	r2, [pc, #580]	; (8011d44 <tcp_receive+0x884>)
 8011afe:	6013      	str	r3, [r2, #0]
 8011b00:	4b91      	ldr	r3, [pc, #580]	; (8011d48 <tcp_receive+0x888>)
 8011b02:	68db      	ldr	r3, [r3, #12]
 8011b04:	4a8f      	ldr	r2, [pc, #572]	; (8011d44 <tcp_receive+0x884>)
 8011b06:	6812      	ldr	r2, [r2, #0]
 8011b08:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011b0a:	e00d      	b.n	8011b28 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8011b0c:	4b8d      	ldr	r3, [pc, #564]	; (8011d44 <tcp_receive+0x884>)
 8011b0e:	681a      	ldr	r2, [r3, #0]
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b14:	1ad3      	subs	r3, r2, r3
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	da06      	bge.n	8011b28 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	8b5b      	ldrh	r3, [r3, #26]
 8011b1e:	f043 0302 	orr.w	r3, r3, #2
 8011b22:	b29a      	uxth	r2, r3
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011b28:	4b86      	ldr	r3, [pc, #536]	; (8011d44 <tcp_receive+0x884>)
 8011b2a:	681a      	ldr	r2, [r3, #0]
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b30:	1ad3      	subs	r3, r2, r3
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	f2c0 842a 	blt.w	801238c <tcp_receive+0xecc>
 8011b38:	4b82      	ldr	r3, [pc, #520]	; (8011d44 <tcp_receive+0x884>)
 8011b3a:	681a      	ldr	r2, [r3, #0]
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b40:	6879      	ldr	r1, [r7, #4]
 8011b42:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011b44:	440b      	add	r3, r1
 8011b46:	1ad3      	subs	r3, r2, r3
 8011b48:	3301      	adds	r3, #1
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	f300 841e 	bgt.w	801238c <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011b54:	4b7b      	ldr	r3, [pc, #492]	; (8011d44 <tcp_receive+0x884>)
 8011b56:	681b      	ldr	r3, [r3, #0]
 8011b58:	429a      	cmp	r2, r3
 8011b5a:	f040 829a 	bne.w	8012092 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8011b5e:	4b7a      	ldr	r3, [pc, #488]	; (8011d48 <tcp_receive+0x888>)
 8011b60:	891c      	ldrh	r4, [r3, #8]
 8011b62:	4b79      	ldr	r3, [pc, #484]	; (8011d48 <tcp_receive+0x888>)
 8011b64:	68db      	ldr	r3, [r3, #12]
 8011b66:	899b      	ldrh	r3, [r3, #12]
 8011b68:	b29b      	uxth	r3, r3
 8011b6a:	4618      	mov	r0, r3
 8011b6c:	f7fa fd8a 	bl	800c684 <lwip_htons>
 8011b70:	4603      	mov	r3, r0
 8011b72:	b2db      	uxtb	r3, r3
 8011b74:	f003 0303 	and.w	r3, r3, #3
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d001      	beq.n	8011b80 <tcp_receive+0x6c0>
 8011b7c:	2301      	movs	r3, #1
 8011b7e:	e000      	b.n	8011b82 <tcp_receive+0x6c2>
 8011b80:	2300      	movs	r3, #0
 8011b82:	4423      	add	r3, r4
 8011b84:	b29a      	uxth	r2, r3
 8011b86:	4b71      	ldr	r3, [pc, #452]	; (8011d4c <tcp_receive+0x88c>)
 8011b88:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011b8e:	4b6f      	ldr	r3, [pc, #444]	; (8011d4c <tcp_receive+0x88c>)
 8011b90:	881b      	ldrh	r3, [r3, #0]
 8011b92:	429a      	cmp	r2, r3
 8011b94:	d275      	bcs.n	8011c82 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011b96:	4b6c      	ldr	r3, [pc, #432]	; (8011d48 <tcp_receive+0x888>)
 8011b98:	68db      	ldr	r3, [r3, #12]
 8011b9a:	899b      	ldrh	r3, [r3, #12]
 8011b9c:	b29b      	uxth	r3, r3
 8011b9e:	4618      	mov	r0, r3
 8011ba0:	f7fa fd70 	bl	800c684 <lwip_htons>
 8011ba4:	4603      	mov	r3, r0
 8011ba6:	b2db      	uxtb	r3, r3
 8011ba8:	f003 0301 	and.w	r3, r3, #1
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d01f      	beq.n	8011bf0 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8011bb0:	4b65      	ldr	r3, [pc, #404]	; (8011d48 <tcp_receive+0x888>)
 8011bb2:	68db      	ldr	r3, [r3, #12]
 8011bb4:	899b      	ldrh	r3, [r3, #12]
 8011bb6:	b29b      	uxth	r3, r3
 8011bb8:	b21b      	sxth	r3, r3
 8011bba:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011bbe:	b21c      	sxth	r4, r3
 8011bc0:	4b61      	ldr	r3, [pc, #388]	; (8011d48 <tcp_receive+0x888>)
 8011bc2:	68db      	ldr	r3, [r3, #12]
 8011bc4:	899b      	ldrh	r3, [r3, #12]
 8011bc6:	b29b      	uxth	r3, r3
 8011bc8:	4618      	mov	r0, r3
 8011bca:	f7fa fd5b 	bl	800c684 <lwip_htons>
 8011bce:	4603      	mov	r3, r0
 8011bd0:	b2db      	uxtb	r3, r3
 8011bd2:	b29b      	uxth	r3, r3
 8011bd4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011bd8:	b29b      	uxth	r3, r3
 8011bda:	4618      	mov	r0, r3
 8011bdc:	f7fa fd52 	bl	800c684 <lwip_htons>
 8011be0:	4603      	mov	r3, r0
 8011be2:	b21b      	sxth	r3, r3
 8011be4:	4323      	orrs	r3, r4
 8011be6:	b21a      	sxth	r2, r3
 8011be8:	4b57      	ldr	r3, [pc, #348]	; (8011d48 <tcp_receive+0x888>)
 8011bea:	68db      	ldr	r3, [r3, #12]
 8011bec:	b292      	uxth	r2, r2
 8011bee:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011bf4:	4b54      	ldr	r3, [pc, #336]	; (8011d48 <tcp_receive+0x888>)
 8011bf6:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011bf8:	4b53      	ldr	r3, [pc, #332]	; (8011d48 <tcp_receive+0x888>)
 8011bfa:	68db      	ldr	r3, [r3, #12]
 8011bfc:	899b      	ldrh	r3, [r3, #12]
 8011bfe:	b29b      	uxth	r3, r3
 8011c00:	4618      	mov	r0, r3
 8011c02:	f7fa fd3f 	bl	800c684 <lwip_htons>
 8011c06:	4603      	mov	r3, r0
 8011c08:	b2db      	uxtb	r3, r3
 8011c0a:	f003 0302 	and.w	r3, r3, #2
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d005      	beq.n	8011c1e <tcp_receive+0x75e>
            inseg.len -= 1;
 8011c12:	4b4d      	ldr	r3, [pc, #308]	; (8011d48 <tcp_receive+0x888>)
 8011c14:	891b      	ldrh	r3, [r3, #8]
 8011c16:	3b01      	subs	r3, #1
 8011c18:	b29a      	uxth	r2, r3
 8011c1a:	4b4b      	ldr	r3, [pc, #300]	; (8011d48 <tcp_receive+0x888>)
 8011c1c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8011c1e:	4b4a      	ldr	r3, [pc, #296]	; (8011d48 <tcp_receive+0x888>)
 8011c20:	685b      	ldr	r3, [r3, #4]
 8011c22:	4a49      	ldr	r2, [pc, #292]	; (8011d48 <tcp_receive+0x888>)
 8011c24:	8912      	ldrh	r2, [r2, #8]
 8011c26:	4611      	mov	r1, r2
 8011c28:	4618      	mov	r0, r3
 8011c2a:	f7fb ff51 	bl	800dad0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8011c2e:	4b46      	ldr	r3, [pc, #280]	; (8011d48 <tcp_receive+0x888>)
 8011c30:	891c      	ldrh	r4, [r3, #8]
 8011c32:	4b45      	ldr	r3, [pc, #276]	; (8011d48 <tcp_receive+0x888>)
 8011c34:	68db      	ldr	r3, [r3, #12]
 8011c36:	899b      	ldrh	r3, [r3, #12]
 8011c38:	b29b      	uxth	r3, r3
 8011c3a:	4618      	mov	r0, r3
 8011c3c:	f7fa fd22 	bl	800c684 <lwip_htons>
 8011c40:	4603      	mov	r3, r0
 8011c42:	b2db      	uxtb	r3, r3
 8011c44:	f003 0303 	and.w	r3, r3, #3
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d001      	beq.n	8011c50 <tcp_receive+0x790>
 8011c4c:	2301      	movs	r3, #1
 8011c4e:	e000      	b.n	8011c52 <tcp_receive+0x792>
 8011c50:	2300      	movs	r3, #0
 8011c52:	4423      	add	r3, r4
 8011c54:	b29a      	uxth	r2, r3
 8011c56:	4b3d      	ldr	r3, [pc, #244]	; (8011d4c <tcp_receive+0x88c>)
 8011c58:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011c5a:	4b3c      	ldr	r3, [pc, #240]	; (8011d4c <tcp_receive+0x88c>)
 8011c5c:	881b      	ldrh	r3, [r3, #0]
 8011c5e:	461a      	mov	r2, r3
 8011c60:	4b38      	ldr	r3, [pc, #224]	; (8011d44 <tcp_receive+0x884>)
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	441a      	add	r2, r3
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c6a:	6879      	ldr	r1, [r7, #4]
 8011c6c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011c6e:	440b      	add	r3, r1
 8011c70:	429a      	cmp	r2, r3
 8011c72:	d006      	beq.n	8011c82 <tcp_receive+0x7c2>
 8011c74:	4b36      	ldr	r3, [pc, #216]	; (8011d50 <tcp_receive+0x890>)
 8011c76:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8011c7a:	4936      	ldr	r1, [pc, #216]	; (8011d54 <tcp_receive+0x894>)
 8011c7c:	4836      	ldr	r0, [pc, #216]	; (8011d58 <tcp_receive+0x898>)
 8011c7e:	f009 fa41 	bl	801b104 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	f000 80e7 	beq.w	8011e5a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011c8c:	4b2e      	ldr	r3, [pc, #184]	; (8011d48 <tcp_receive+0x888>)
 8011c8e:	68db      	ldr	r3, [r3, #12]
 8011c90:	899b      	ldrh	r3, [r3, #12]
 8011c92:	b29b      	uxth	r3, r3
 8011c94:	4618      	mov	r0, r3
 8011c96:	f7fa fcf5 	bl	800c684 <lwip_htons>
 8011c9a:	4603      	mov	r3, r0
 8011c9c:	b2db      	uxtb	r3, r3
 8011c9e:	f003 0301 	and.w	r3, r3, #1
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d010      	beq.n	8011cc8 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8011ca6:	e00a      	b.n	8011cbe <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011cac:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011cb2:	681a      	ldr	r2, [r3, #0]
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8011cb8:	68f8      	ldr	r0, [r7, #12]
 8011cba:	f7fd fcc8 	bl	800f64e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d1f0      	bne.n	8011ca8 <tcp_receive+0x7e8>
 8011cc6:	e0c8      	b.n	8011e5a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8011cce:	e052      	b.n	8011d76 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011cd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011cd2:	68db      	ldr	r3, [r3, #12]
 8011cd4:	899b      	ldrh	r3, [r3, #12]
 8011cd6:	b29b      	uxth	r3, r3
 8011cd8:	4618      	mov	r0, r3
 8011cda:	f7fa fcd3 	bl	800c684 <lwip_htons>
 8011cde:	4603      	mov	r3, r0
 8011ce0:	b2db      	uxtb	r3, r3
 8011ce2:	f003 0301 	and.w	r3, r3, #1
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d03d      	beq.n	8011d66 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8011cea:	4b17      	ldr	r3, [pc, #92]	; (8011d48 <tcp_receive+0x888>)
 8011cec:	68db      	ldr	r3, [r3, #12]
 8011cee:	899b      	ldrh	r3, [r3, #12]
 8011cf0:	b29b      	uxth	r3, r3
 8011cf2:	4618      	mov	r0, r3
 8011cf4:	f7fa fcc6 	bl	800c684 <lwip_htons>
 8011cf8:	4603      	mov	r3, r0
 8011cfa:	b2db      	uxtb	r3, r3
 8011cfc:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d130      	bne.n	8011d66 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8011d04:	4b10      	ldr	r3, [pc, #64]	; (8011d48 <tcp_receive+0x888>)
 8011d06:	68db      	ldr	r3, [r3, #12]
 8011d08:	899b      	ldrh	r3, [r3, #12]
 8011d0a:	b29c      	uxth	r4, r3
 8011d0c:	2001      	movs	r0, #1
 8011d0e:	f7fa fcb9 	bl	800c684 <lwip_htons>
 8011d12:	4603      	mov	r3, r0
 8011d14:	461a      	mov	r2, r3
 8011d16:	4b0c      	ldr	r3, [pc, #48]	; (8011d48 <tcp_receive+0x888>)
 8011d18:	68db      	ldr	r3, [r3, #12]
 8011d1a:	4322      	orrs	r2, r4
 8011d1c:	b292      	uxth	r2, r2
 8011d1e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8011d20:	4b09      	ldr	r3, [pc, #36]	; (8011d48 <tcp_receive+0x888>)
 8011d22:	891c      	ldrh	r4, [r3, #8]
 8011d24:	4b08      	ldr	r3, [pc, #32]	; (8011d48 <tcp_receive+0x888>)
 8011d26:	68db      	ldr	r3, [r3, #12]
 8011d28:	899b      	ldrh	r3, [r3, #12]
 8011d2a:	b29b      	uxth	r3, r3
 8011d2c:	4618      	mov	r0, r3
 8011d2e:	f7fa fca9 	bl	800c684 <lwip_htons>
 8011d32:	4603      	mov	r3, r0
 8011d34:	b2db      	uxtb	r3, r3
 8011d36:	f003 0303 	and.w	r3, r3, #3
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	d00e      	beq.n	8011d5c <tcp_receive+0x89c>
 8011d3e:	2301      	movs	r3, #1
 8011d40:	e00d      	b.n	8011d5e <tcp_receive+0x89e>
 8011d42:	bf00      	nop
 8011d44:	20004be4 	.word	0x20004be4
 8011d48:	20004bc4 	.word	0x20004bc4
 8011d4c:	20004bee 	.word	0x20004bee
 8011d50:	0801d6f0 	.word	0x0801d6f0
 8011d54:	0801da98 	.word	0x0801da98
 8011d58:	0801d73c 	.word	0x0801d73c
 8011d5c:	2300      	movs	r3, #0
 8011d5e:	4423      	add	r3, r4
 8011d60:	b29a      	uxth	r2, r3
 8011d62:	4b98      	ldr	r3, [pc, #608]	; (8011fc4 <tcp_receive+0xb04>)
 8011d64:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8011d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d68:	613b      	str	r3, [r7, #16]
              next = next->next;
 8011d6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8011d70:	6938      	ldr	r0, [r7, #16]
 8011d72:	f7fd fc6c 	bl	800f64e <tcp_seg_free>
            while (next &&
 8011d76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d00e      	beq.n	8011d9a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8011d7c:	4b91      	ldr	r3, [pc, #580]	; (8011fc4 <tcp_receive+0xb04>)
 8011d7e:	881b      	ldrh	r3, [r3, #0]
 8011d80:	461a      	mov	r2, r3
 8011d82:	4b91      	ldr	r3, [pc, #580]	; (8011fc8 <tcp_receive+0xb08>)
 8011d84:	681b      	ldr	r3, [r3, #0]
 8011d86:	441a      	add	r2, r3
 8011d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d8a:	68db      	ldr	r3, [r3, #12]
 8011d8c:	685b      	ldr	r3, [r3, #4]
 8011d8e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011d90:	8909      	ldrh	r1, [r1, #8]
 8011d92:	440b      	add	r3, r1
 8011d94:	1ad3      	subs	r3, r2, r3
            while (next &&
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	da9a      	bge.n	8011cd0 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8011d9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d059      	beq.n	8011e54 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8011da0:	4b88      	ldr	r3, [pc, #544]	; (8011fc4 <tcp_receive+0xb04>)
 8011da2:	881b      	ldrh	r3, [r3, #0]
 8011da4:	461a      	mov	r2, r3
 8011da6:	4b88      	ldr	r3, [pc, #544]	; (8011fc8 <tcp_receive+0xb08>)
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	441a      	add	r2, r3
 8011dac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011dae:	68db      	ldr	r3, [r3, #12]
 8011db0:	685b      	ldr	r3, [r3, #4]
 8011db2:	1ad3      	subs	r3, r2, r3
            if (next &&
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	dd4d      	ble.n	8011e54 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8011db8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011dba:	68db      	ldr	r3, [r3, #12]
 8011dbc:	685b      	ldr	r3, [r3, #4]
 8011dbe:	b29a      	uxth	r2, r3
 8011dc0:	4b81      	ldr	r3, [pc, #516]	; (8011fc8 <tcp_receive+0xb08>)
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	b29b      	uxth	r3, r3
 8011dc6:	1ad3      	subs	r3, r2, r3
 8011dc8:	b29a      	uxth	r2, r3
 8011dca:	4b80      	ldr	r3, [pc, #512]	; (8011fcc <tcp_receive+0xb0c>)
 8011dcc:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011dce:	4b7f      	ldr	r3, [pc, #508]	; (8011fcc <tcp_receive+0xb0c>)
 8011dd0:	68db      	ldr	r3, [r3, #12]
 8011dd2:	899b      	ldrh	r3, [r3, #12]
 8011dd4:	b29b      	uxth	r3, r3
 8011dd6:	4618      	mov	r0, r3
 8011dd8:	f7fa fc54 	bl	800c684 <lwip_htons>
 8011ddc:	4603      	mov	r3, r0
 8011dde:	b2db      	uxtb	r3, r3
 8011de0:	f003 0302 	and.w	r3, r3, #2
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	d005      	beq.n	8011df4 <tcp_receive+0x934>
                inseg.len -= 1;
 8011de8:	4b78      	ldr	r3, [pc, #480]	; (8011fcc <tcp_receive+0xb0c>)
 8011dea:	891b      	ldrh	r3, [r3, #8]
 8011dec:	3b01      	subs	r3, #1
 8011dee:	b29a      	uxth	r2, r3
 8011df0:	4b76      	ldr	r3, [pc, #472]	; (8011fcc <tcp_receive+0xb0c>)
 8011df2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8011df4:	4b75      	ldr	r3, [pc, #468]	; (8011fcc <tcp_receive+0xb0c>)
 8011df6:	685b      	ldr	r3, [r3, #4]
 8011df8:	4a74      	ldr	r2, [pc, #464]	; (8011fcc <tcp_receive+0xb0c>)
 8011dfa:	8912      	ldrh	r2, [r2, #8]
 8011dfc:	4611      	mov	r1, r2
 8011dfe:	4618      	mov	r0, r3
 8011e00:	f7fb fe66 	bl	800dad0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8011e04:	4b71      	ldr	r3, [pc, #452]	; (8011fcc <tcp_receive+0xb0c>)
 8011e06:	891c      	ldrh	r4, [r3, #8]
 8011e08:	4b70      	ldr	r3, [pc, #448]	; (8011fcc <tcp_receive+0xb0c>)
 8011e0a:	68db      	ldr	r3, [r3, #12]
 8011e0c:	899b      	ldrh	r3, [r3, #12]
 8011e0e:	b29b      	uxth	r3, r3
 8011e10:	4618      	mov	r0, r3
 8011e12:	f7fa fc37 	bl	800c684 <lwip_htons>
 8011e16:	4603      	mov	r3, r0
 8011e18:	b2db      	uxtb	r3, r3
 8011e1a:	f003 0303 	and.w	r3, r3, #3
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d001      	beq.n	8011e26 <tcp_receive+0x966>
 8011e22:	2301      	movs	r3, #1
 8011e24:	e000      	b.n	8011e28 <tcp_receive+0x968>
 8011e26:	2300      	movs	r3, #0
 8011e28:	4423      	add	r3, r4
 8011e2a:	b29a      	uxth	r2, r3
 8011e2c:	4b65      	ldr	r3, [pc, #404]	; (8011fc4 <tcp_receive+0xb04>)
 8011e2e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8011e30:	4b64      	ldr	r3, [pc, #400]	; (8011fc4 <tcp_receive+0xb04>)
 8011e32:	881b      	ldrh	r3, [r3, #0]
 8011e34:	461a      	mov	r2, r3
 8011e36:	4b64      	ldr	r3, [pc, #400]	; (8011fc8 <tcp_receive+0xb08>)
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	441a      	add	r2, r3
 8011e3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e3e:	68db      	ldr	r3, [r3, #12]
 8011e40:	685b      	ldr	r3, [r3, #4]
 8011e42:	429a      	cmp	r2, r3
 8011e44:	d006      	beq.n	8011e54 <tcp_receive+0x994>
 8011e46:	4b62      	ldr	r3, [pc, #392]	; (8011fd0 <tcp_receive+0xb10>)
 8011e48:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8011e4c:	4961      	ldr	r1, [pc, #388]	; (8011fd4 <tcp_receive+0xb14>)
 8011e4e:	4862      	ldr	r0, [pc, #392]	; (8011fd8 <tcp_receive+0xb18>)
 8011e50:	f009 f958 	bl	801b104 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011e58:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8011e5a:	4b5a      	ldr	r3, [pc, #360]	; (8011fc4 <tcp_receive+0xb04>)
 8011e5c:	881b      	ldrh	r3, [r3, #0]
 8011e5e:	461a      	mov	r2, r3
 8011e60:	4b59      	ldr	r3, [pc, #356]	; (8011fc8 <tcp_receive+0xb08>)
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	441a      	add	r2, r3
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011e6e:	4b55      	ldr	r3, [pc, #340]	; (8011fc4 <tcp_receive+0xb04>)
 8011e70:	881b      	ldrh	r3, [r3, #0]
 8011e72:	429a      	cmp	r2, r3
 8011e74:	d206      	bcs.n	8011e84 <tcp_receive+0x9c4>
 8011e76:	4b56      	ldr	r3, [pc, #344]	; (8011fd0 <tcp_receive+0xb10>)
 8011e78:	f240 6207 	movw	r2, #1543	; 0x607
 8011e7c:	4957      	ldr	r1, [pc, #348]	; (8011fdc <tcp_receive+0xb1c>)
 8011e7e:	4856      	ldr	r0, [pc, #344]	; (8011fd8 <tcp_receive+0xb18>)
 8011e80:	f009 f940 	bl	801b104 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011e88:	4b4e      	ldr	r3, [pc, #312]	; (8011fc4 <tcp_receive+0xb04>)
 8011e8a:	881b      	ldrh	r3, [r3, #0]
 8011e8c:	1ad3      	subs	r3, r2, r3
 8011e8e:	b29a      	uxth	r2, r3
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8011e94:	6878      	ldr	r0, [r7, #4]
 8011e96:	f7fc fd9d 	bl	800e9d4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8011e9a:	4b4c      	ldr	r3, [pc, #304]	; (8011fcc <tcp_receive+0xb0c>)
 8011e9c:	685b      	ldr	r3, [r3, #4]
 8011e9e:	891b      	ldrh	r3, [r3, #8]
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d006      	beq.n	8011eb2 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8011ea4:	4b49      	ldr	r3, [pc, #292]	; (8011fcc <tcp_receive+0xb0c>)
 8011ea6:	685b      	ldr	r3, [r3, #4]
 8011ea8:	4a4d      	ldr	r2, [pc, #308]	; (8011fe0 <tcp_receive+0xb20>)
 8011eaa:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8011eac:	4b47      	ldr	r3, [pc, #284]	; (8011fcc <tcp_receive+0xb0c>)
 8011eae:	2200      	movs	r2, #0
 8011eb0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011eb2:	4b46      	ldr	r3, [pc, #280]	; (8011fcc <tcp_receive+0xb0c>)
 8011eb4:	68db      	ldr	r3, [r3, #12]
 8011eb6:	899b      	ldrh	r3, [r3, #12]
 8011eb8:	b29b      	uxth	r3, r3
 8011eba:	4618      	mov	r0, r3
 8011ebc:	f7fa fbe2 	bl	800c684 <lwip_htons>
 8011ec0:	4603      	mov	r3, r0
 8011ec2:	b2db      	uxtb	r3, r3
 8011ec4:	f003 0301 	and.w	r3, r3, #1
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	f000 80b8 	beq.w	801203e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8011ece:	4b45      	ldr	r3, [pc, #276]	; (8011fe4 <tcp_receive+0xb24>)
 8011ed0:	781b      	ldrb	r3, [r3, #0]
 8011ed2:	f043 0320 	orr.w	r3, r3, #32
 8011ed6:	b2da      	uxtb	r2, r3
 8011ed8:	4b42      	ldr	r3, [pc, #264]	; (8011fe4 <tcp_receive+0xb24>)
 8011eda:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8011edc:	e0af      	b.n	801203e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011ee2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011ee8:	68db      	ldr	r3, [r3, #12]
 8011eea:	685b      	ldr	r3, [r3, #4]
 8011eec:	4a36      	ldr	r2, [pc, #216]	; (8011fc8 <tcp_receive+0xb08>)
 8011eee:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8011ef0:	68bb      	ldr	r3, [r7, #8]
 8011ef2:	891b      	ldrh	r3, [r3, #8]
 8011ef4:	461c      	mov	r4, r3
 8011ef6:	68bb      	ldr	r3, [r7, #8]
 8011ef8:	68db      	ldr	r3, [r3, #12]
 8011efa:	899b      	ldrh	r3, [r3, #12]
 8011efc:	b29b      	uxth	r3, r3
 8011efe:	4618      	mov	r0, r3
 8011f00:	f7fa fbc0 	bl	800c684 <lwip_htons>
 8011f04:	4603      	mov	r3, r0
 8011f06:	b2db      	uxtb	r3, r3
 8011f08:	f003 0303 	and.w	r3, r3, #3
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d001      	beq.n	8011f14 <tcp_receive+0xa54>
 8011f10:	2301      	movs	r3, #1
 8011f12:	e000      	b.n	8011f16 <tcp_receive+0xa56>
 8011f14:	2300      	movs	r3, #0
 8011f16:	191a      	adds	r2, r3, r4
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f1c:	441a      	add	r2, r3
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011f26:	461c      	mov	r4, r3
 8011f28:	68bb      	ldr	r3, [r7, #8]
 8011f2a:	891b      	ldrh	r3, [r3, #8]
 8011f2c:	461d      	mov	r5, r3
 8011f2e:	68bb      	ldr	r3, [r7, #8]
 8011f30:	68db      	ldr	r3, [r3, #12]
 8011f32:	899b      	ldrh	r3, [r3, #12]
 8011f34:	b29b      	uxth	r3, r3
 8011f36:	4618      	mov	r0, r3
 8011f38:	f7fa fba4 	bl	800c684 <lwip_htons>
 8011f3c:	4603      	mov	r3, r0
 8011f3e:	b2db      	uxtb	r3, r3
 8011f40:	f003 0303 	and.w	r3, r3, #3
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d001      	beq.n	8011f4c <tcp_receive+0xa8c>
 8011f48:	2301      	movs	r3, #1
 8011f4a:	e000      	b.n	8011f4e <tcp_receive+0xa8e>
 8011f4c:	2300      	movs	r3, #0
 8011f4e:	442b      	add	r3, r5
 8011f50:	429c      	cmp	r4, r3
 8011f52:	d206      	bcs.n	8011f62 <tcp_receive+0xaa2>
 8011f54:	4b1e      	ldr	r3, [pc, #120]	; (8011fd0 <tcp_receive+0xb10>)
 8011f56:	f240 622b 	movw	r2, #1579	; 0x62b
 8011f5a:	4923      	ldr	r1, [pc, #140]	; (8011fe8 <tcp_receive+0xb28>)
 8011f5c:	481e      	ldr	r0, [pc, #120]	; (8011fd8 <tcp_receive+0xb18>)
 8011f5e:	f009 f8d1 	bl	801b104 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8011f62:	68bb      	ldr	r3, [r7, #8]
 8011f64:	891b      	ldrh	r3, [r3, #8]
 8011f66:	461c      	mov	r4, r3
 8011f68:	68bb      	ldr	r3, [r7, #8]
 8011f6a:	68db      	ldr	r3, [r3, #12]
 8011f6c:	899b      	ldrh	r3, [r3, #12]
 8011f6e:	b29b      	uxth	r3, r3
 8011f70:	4618      	mov	r0, r3
 8011f72:	f7fa fb87 	bl	800c684 <lwip_htons>
 8011f76:	4603      	mov	r3, r0
 8011f78:	b2db      	uxtb	r3, r3
 8011f7a:	f003 0303 	and.w	r3, r3, #3
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	d001      	beq.n	8011f86 <tcp_receive+0xac6>
 8011f82:	2301      	movs	r3, #1
 8011f84:	e000      	b.n	8011f88 <tcp_receive+0xac8>
 8011f86:	2300      	movs	r3, #0
 8011f88:	1919      	adds	r1, r3, r4
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011f8e:	b28b      	uxth	r3, r1
 8011f90:	1ad3      	subs	r3, r2, r3
 8011f92:	b29a      	uxth	r2, r3
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8011f98:	6878      	ldr	r0, [r7, #4]
 8011f9a:	f7fc fd1b 	bl	800e9d4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8011f9e:	68bb      	ldr	r3, [r7, #8]
 8011fa0:	685b      	ldr	r3, [r3, #4]
 8011fa2:	891b      	ldrh	r3, [r3, #8]
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	d028      	beq.n	8011ffa <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8011fa8:	4b0d      	ldr	r3, [pc, #52]	; (8011fe0 <tcp_receive+0xb20>)
 8011faa:	681b      	ldr	r3, [r3, #0]
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d01d      	beq.n	8011fec <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8011fb0:	4b0b      	ldr	r3, [pc, #44]	; (8011fe0 <tcp_receive+0xb20>)
 8011fb2:	681a      	ldr	r2, [r3, #0]
 8011fb4:	68bb      	ldr	r3, [r7, #8]
 8011fb6:	685b      	ldr	r3, [r3, #4]
 8011fb8:	4619      	mov	r1, r3
 8011fba:	4610      	mov	r0, r2
 8011fbc:	f7fb ffdc 	bl	800df78 <pbuf_cat>
 8011fc0:	e018      	b.n	8011ff4 <tcp_receive+0xb34>
 8011fc2:	bf00      	nop
 8011fc4:	20004bee 	.word	0x20004bee
 8011fc8:	20004be4 	.word	0x20004be4
 8011fcc:	20004bc4 	.word	0x20004bc4
 8011fd0:	0801d6f0 	.word	0x0801d6f0
 8011fd4:	0801dad0 	.word	0x0801dad0
 8011fd8:	0801d73c 	.word	0x0801d73c
 8011fdc:	0801db0c 	.word	0x0801db0c
 8011fe0:	20004bf4 	.word	0x20004bf4
 8011fe4:	20004bf1 	.word	0x20004bf1
 8011fe8:	0801db2c 	.word	0x0801db2c
            } else {
              recv_data = cseg->p;
 8011fec:	68bb      	ldr	r3, [r7, #8]
 8011fee:	685b      	ldr	r3, [r3, #4]
 8011ff0:	4a70      	ldr	r2, [pc, #448]	; (80121b4 <tcp_receive+0xcf4>)
 8011ff2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8011ff4:	68bb      	ldr	r3, [r7, #8]
 8011ff6:	2200      	movs	r2, #0
 8011ff8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011ffa:	68bb      	ldr	r3, [r7, #8]
 8011ffc:	68db      	ldr	r3, [r3, #12]
 8011ffe:	899b      	ldrh	r3, [r3, #12]
 8012000:	b29b      	uxth	r3, r3
 8012002:	4618      	mov	r0, r3
 8012004:	f7fa fb3e 	bl	800c684 <lwip_htons>
 8012008:	4603      	mov	r3, r0
 801200a:	b2db      	uxtb	r3, r3
 801200c:	f003 0301 	and.w	r3, r3, #1
 8012010:	2b00      	cmp	r3, #0
 8012012:	d00d      	beq.n	8012030 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8012014:	4b68      	ldr	r3, [pc, #416]	; (80121b8 <tcp_receive+0xcf8>)
 8012016:	781b      	ldrb	r3, [r3, #0]
 8012018:	f043 0320 	orr.w	r3, r3, #32
 801201c:	b2da      	uxtb	r2, r3
 801201e:	4b66      	ldr	r3, [pc, #408]	; (80121b8 <tcp_receive+0xcf8>)
 8012020:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	7d1b      	ldrb	r3, [r3, #20]
 8012026:	2b04      	cmp	r3, #4
 8012028:	d102      	bne.n	8012030 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	2207      	movs	r2, #7
 801202e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8012030:	68bb      	ldr	r3, [r7, #8]
 8012032:	681a      	ldr	r2, [r3, #0]
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8012038:	68b8      	ldr	r0, [r7, #8]
 801203a:	f7fd fb08 	bl	800f64e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012042:	2b00      	cmp	r3, #0
 8012044:	d008      	beq.n	8012058 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801204a:	68db      	ldr	r3, [r3, #12]
 801204c:	685a      	ldr	r2, [r3, #4]
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8012052:	429a      	cmp	r2, r3
 8012054:	f43f af43 	beq.w	8011ede <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	8b5b      	ldrh	r3, [r3, #26]
 801205c:	f003 0301 	and.w	r3, r3, #1
 8012060:	2b00      	cmp	r3, #0
 8012062:	d00e      	beq.n	8012082 <tcp_receive+0xbc2>
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	8b5b      	ldrh	r3, [r3, #26]
 8012068:	f023 0301 	bic.w	r3, r3, #1
 801206c:	b29a      	uxth	r2, r3
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	835a      	strh	r2, [r3, #26]
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	8b5b      	ldrh	r3, [r3, #26]
 8012076:	f043 0302 	orr.w	r3, r3, #2
 801207a:	b29a      	uxth	r2, r3
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012080:	e188      	b.n	8012394 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	8b5b      	ldrh	r3, [r3, #26]
 8012086:	f043 0301 	orr.w	r3, r3, #1
 801208a:	b29a      	uxth	r2, r3
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012090:	e180      	b.n	8012394 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012096:	2b00      	cmp	r3, #0
 8012098:	d106      	bne.n	80120a8 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801209a:	4848      	ldr	r0, [pc, #288]	; (80121bc <tcp_receive+0xcfc>)
 801209c:	f7fd faf0 	bl	800f680 <tcp_seg_copy>
 80120a0:	4602      	mov	r2, r0
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	675a      	str	r2, [r3, #116]	; 0x74
 80120a6:	e16d      	b.n	8012384 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80120a8:	2300      	movs	r3, #0
 80120aa:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80120b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80120b2:	e157      	b.n	8012364 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 80120b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120b6:	68db      	ldr	r3, [r3, #12]
 80120b8:	685a      	ldr	r2, [r3, #4]
 80120ba:	4b41      	ldr	r3, [pc, #260]	; (80121c0 <tcp_receive+0xd00>)
 80120bc:	681b      	ldr	r3, [r3, #0]
 80120be:	429a      	cmp	r2, r3
 80120c0:	d11d      	bne.n	80120fe <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80120c2:	4b3e      	ldr	r3, [pc, #248]	; (80121bc <tcp_receive+0xcfc>)
 80120c4:	891a      	ldrh	r2, [r3, #8]
 80120c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120c8:	891b      	ldrh	r3, [r3, #8]
 80120ca:	429a      	cmp	r2, r3
 80120cc:	f240 814f 	bls.w	801236e <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80120d0:	483a      	ldr	r0, [pc, #232]	; (80121bc <tcp_receive+0xcfc>)
 80120d2:	f7fd fad5 	bl	800f680 <tcp_seg_copy>
 80120d6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80120d8:	697b      	ldr	r3, [r7, #20]
 80120da:	2b00      	cmp	r3, #0
 80120dc:	f000 8149 	beq.w	8012372 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 80120e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d003      	beq.n	80120ee <tcp_receive+0xc2e>
                    prev->next = cseg;
 80120e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120e8:	697a      	ldr	r2, [r7, #20]
 80120ea:	601a      	str	r2, [r3, #0]
 80120ec:	e002      	b.n	80120f4 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	697a      	ldr	r2, [r7, #20]
 80120f2:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80120f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80120f6:	6978      	ldr	r0, [r7, #20]
 80120f8:	f7ff f8de 	bl	80112b8 <tcp_oos_insert_segment>
                }
                break;
 80120fc:	e139      	b.n	8012372 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80120fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012100:	2b00      	cmp	r3, #0
 8012102:	d117      	bne.n	8012134 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8012104:	4b2e      	ldr	r3, [pc, #184]	; (80121c0 <tcp_receive+0xd00>)
 8012106:	681a      	ldr	r2, [r3, #0]
 8012108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801210a:	68db      	ldr	r3, [r3, #12]
 801210c:	685b      	ldr	r3, [r3, #4]
 801210e:	1ad3      	subs	r3, r2, r3
 8012110:	2b00      	cmp	r3, #0
 8012112:	da57      	bge.n	80121c4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012114:	4829      	ldr	r0, [pc, #164]	; (80121bc <tcp_receive+0xcfc>)
 8012116:	f7fd fab3 	bl	800f680 <tcp_seg_copy>
 801211a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801211c:	69bb      	ldr	r3, [r7, #24]
 801211e:	2b00      	cmp	r3, #0
 8012120:	f000 8129 	beq.w	8012376 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	69ba      	ldr	r2, [r7, #24]
 8012128:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801212a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801212c:	69b8      	ldr	r0, [r7, #24]
 801212e:	f7ff f8c3 	bl	80112b8 <tcp_oos_insert_segment>
                  }
                  break;
 8012132:	e120      	b.n	8012376 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8012134:	4b22      	ldr	r3, [pc, #136]	; (80121c0 <tcp_receive+0xd00>)
 8012136:	681a      	ldr	r2, [r3, #0]
 8012138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801213a:	68db      	ldr	r3, [r3, #12]
 801213c:	685b      	ldr	r3, [r3, #4]
 801213e:	1ad3      	subs	r3, r2, r3
 8012140:	3b01      	subs	r3, #1
 8012142:	2b00      	cmp	r3, #0
 8012144:	db3e      	blt.n	80121c4 <tcp_receive+0xd04>
 8012146:	4b1e      	ldr	r3, [pc, #120]	; (80121c0 <tcp_receive+0xd00>)
 8012148:	681a      	ldr	r2, [r3, #0]
 801214a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801214c:	68db      	ldr	r3, [r3, #12]
 801214e:	685b      	ldr	r3, [r3, #4]
 8012150:	1ad3      	subs	r3, r2, r3
 8012152:	3301      	adds	r3, #1
 8012154:	2b00      	cmp	r3, #0
 8012156:	dc35      	bgt.n	80121c4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012158:	4818      	ldr	r0, [pc, #96]	; (80121bc <tcp_receive+0xcfc>)
 801215a:	f7fd fa91 	bl	800f680 <tcp_seg_copy>
 801215e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8012160:	69fb      	ldr	r3, [r7, #28]
 8012162:	2b00      	cmp	r3, #0
 8012164:	f000 8109 	beq.w	801237a <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8012168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801216a:	68db      	ldr	r3, [r3, #12]
 801216c:	685b      	ldr	r3, [r3, #4]
 801216e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012170:	8912      	ldrh	r2, [r2, #8]
 8012172:	441a      	add	r2, r3
 8012174:	4b12      	ldr	r3, [pc, #72]	; (80121c0 <tcp_receive+0xd00>)
 8012176:	681b      	ldr	r3, [r3, #0]
 8012178:	1ad3      	subs	r3, r2, r3
 801217a:	2b00      	cmp	r3, #0
 801217c:	dd12      	ble.n	80121a4 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801217e:	4b10      	ldr	r3, [pc, #64]	; (80121c0 <tcp_receive+0xd00>)
 8012180:	681b      	ldr	r3, [r3, #0]
 8012182:	b29a      	uxth	r2, r3
 8012184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012186:	68db      	ldr	r3, [r3, #12]
 8012188:	685b      	ldr	r3, [r3, #4]
 801218a:	b29b      	uxth	r3, r3
 801218c:	1ad3      	subs	r3, r2, r3
 801218e:	b29a      	uxth	r2, r3
 8012190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012192:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8012194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012196:	685a      	ldr	r2, [r3, #4]
 8012198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801219a:	891b      	ldrh	r3, [r3, #8]
 801219c:	4619      	mov	r1, r3
 801219e:	4610      	mov	r0, r2
 80121a0:	f7fb fc96 	bl	800dad0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80121a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121a6:	69fa      	ldr	r2, [r7, #28]
 80121a8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80121aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80121ac:	69f8      	ldr	r0, [r7, #28]
 80121ae:	f7ff f883 	bl	80112b8 <tcp_oos_insert_segment>
                  }
                  break;
 80121b2:	e0e2      	b.n	801237a <tcp_receive+0xeba>
 80121b4:	20004bf4 	.word	0x20004bf4
 80121b8:	20004bf1 	.word	0x20004bf1
 80121bc:	20004bc4 	.word	0x20004bc4
 80121c0:	20004be4 	.word	0x20004be4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80121c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121c6:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80121c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121ca:	681b      	ldr	r3, [r3, #0]
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	f040 80c6 	bne.w	801235e <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80121d2:	4b80      	ldr	r3, [pc, #512]	; (80123d4 <tcp_receive+0xf14>)
 80121d4:	681a      	ldr	r2, [r3, #0]
 80121d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121d8:	68db      	ldr	r3, [r3, #12]
 80121da:	685b      	ldr	r3, [r3, #4]
 80121dc:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80121de:	2b00      	cmp	r3, #0
 80121e0:	f340 80bd 	ble.w	801235e <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80121e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121e6:	68db      	ldr	r3, [r3, #12]
 80121e8:	899b      	ldrh	r3, [r3, #12]
 80121ea:	b29b      	uxth	r3, r3
 80121ec:	4618      	mov	r0, r3
 80121ee:	f7fa fa49 	bl	800c684 <lwip_htons>
 80121f2:	4603      	mov	r3, r0
 80121f4:	b2db      	uxtb	r3, r3
 80121f6:	f003 0301 	and.w	r3, r3, #1
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	f040 80bf 	bne.w	801237e <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8012200:	4875      	ldr	r0, [pc, #468]	; (80123d8 <tcp_receive+0xf18>)
 8012202:	f7fd fa3d 	bl	800f680 <tcp_seg_copy>
 8012206:	4602      	mov	r2, r0
 8012208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801220a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801220c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	2b00      	cmp	r3, #0
 8012212:	f000 80b6 	beq.w	8012382 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8012216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012218:	68db      	ldr	r3, [r3, #12]
 801221a:	685b      	ldr	r3, [r3, #4]
 801221c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801221e:	8912      	ldrh	r2, [r2, #8]
 8012220:	441a      	add	r2, r3
 8012222:	4b6c      	ldr	r3, [pc, #432]	; (80123d4 <tcp_receive+0xf14>)
 8012224:	681b      	ldr	r3, [r3, #0]
 8012226:	1ad3      	subs	r3, r2, r3
 8012228:	2b00      	cmp	r3, #0
 801222a:	dd12      	ble.n	8012252 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801222c:	4b69      	ldr	r3, [pc, #420]	; (80123d4 <tcp_receive+0xf14>)
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	b29a      	uxth	r2, r3
 8012232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012234:	68db      	ldr	r3, [r3, #12]
 8012236:	685b      	ldr	r3, [r3, #4]
 8012238:	b29b      	uxth	r3, r3
 801223a:	1ad3      	subs	r3, r2, r3
 801223c:	b29a      	uxth	r2, r3
 801223e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012240:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8012242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012244:	685a      	ldr	r2, [r3, #4]
 8012246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012248:	891b      	ldrh	r3, [r3, #8]
 801224a:	4619      	mov	r1, r3
 801224c:	4610      	mov	r0, r2
 801224e:	f7fb fc3f 	bl	800dad0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8012252:	4b62      	ldr	r3, [pc, #392]	; (80123dc <tcp_receive+0xf1c>)
 8012254:	881b      	ldrh	r3, [r3, #0]
 8012256:	461a      	mov	r2, r3
 8012258:	4b5e      	ldr	r3, [pc, #376]	; (80123d4 <tcp_receive+0xf14>)
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	441a      	add	r2, r3
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012262:	6879      	ldr	r1, [r7, #4]
 8012264:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012266:	440b      	add	r3, r1
 8012268:	1ad3      	subs	r3, r2, r3
 801226a:	2b00      	cmp	r3, #0
 801226c:	f340 8089 	ble.w	8012382 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8012270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012272:	681b      	ldr	r3, [r3, #0]
 8012274:	68db      	ldr	r3, [r3, #12]
 8012276:	899b      	ldrh	r3, [r3, #12]
 8012278:	b29b      	uxth	r3, r3
 801227a:	4618      	mov	r0, r3
 801227c:	f7fa fa02 	bl	800c684 <lwip_htons>
 8012280:	4603      	mov	r3, r0
 8012282:	b2db      	uxtb	r3, r3
 8012284:	f003 0301 	and.w	r3, r3, #1
 8012288:	2b00      	cmp	r3, #0
 801228a:	d022      	beq.n	80122d2 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801228c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	68db      	ldr	r3, [r3, #12]
 8012292:	899b      	ldrh	r3, [r3, #12]
 8012294:	b29b      	uxth	r3, r3
 8012296:	b21b      	sxth	r3, r3
 8012298:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801229c:	b21c      	sxth	r4, r3
 801229e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122a0:	681b      	ldr	r3, [r3, #0]
 80122a2:	68db      	ldr	r3, [r3, #12]
 80122a4:	899b      	ldrh	r3, [r3, #12]
 80122a6:	b29b      	uxth	r3, r3
 80122a8:	4618      	mov	r0, r3
 80122aa:	f7fa f9eb 	bl	800c684 <lwip_htons>
 80122ae:	4603      	mov	r3, r0
 80122b0:	b2db      	uxtb	r3, r3
 80122b2:	b29b      	uxth	r3, r3
 80122b4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80122b8:	b29b      	uxth	r3, r3
 80122ba:	4618      	mov	r0, r3
 80122bc:	f7fa f9e2 	bl	800c684 <lwip_htons>
 80122c0:	4603      	mov	r3, r0
 80122c2:	b21b      	sxth	r3, r3
 80122c4:	4323      	orrs	r3, r4
 80122c6:	b21a      	sxth	r2, r3
 80122c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122ca:	681b      	ldr	r3, [r3, #0]
 80122cc:	68db      	ldr	r3, [r3, #12]
 80122ce:	b292      	uxth	r2, r2
 80122d0:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122d6:	b29a      	uxth	r2, r3
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80122dc:	4413      	add	r3, r2
 80122de:	b299      	uxth	r1, r3
 80122e0:	4b3c      	ldr	r3, [pc, #240]	; (80123d4 <tcp_receive+0xf14>)
 80122e2:	681b      	ldr	r3, [r3, #0]
 80122e4:	b29a      	uxth	r2, r3
 80122e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	1a8a      	subs	r2, r1, r2
 80122ec:	b292      	uxth	r2, r2
 80122ee:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80122f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122f2:	681b      	ldr	r3, [r3, #0]
 80122f4:	685a      	ldr	r2, [r3, #4]
 80122f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122f8:	681b      	ldr	r3, [r3, #0]
 80122fa:	891b      	ldrh	r3, [r3, #8]
 80122fc:	4619      	mov	r1, r3
 80122fe:	4610      	mov	r0, r2
 8012300:	f7fb fbe6 	bl	800dad0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8012304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012306:	681b      	ldr	r3, [r3, #0]
 8012308:	891c      	ldrh	r4, [r3, #8]
 801230a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801230c:	681b      	ldr	r3, [r3, #0]
 801230e:	68db      	ldr	r3, [r3, #12]
 8012310:	899b      	ldrh	r3, [r3, #12]
 8012312:	b29b      	uxth	r3, r3
 8012314:	4618      	mov	r0, r3
 8012316:	f7fa f9b5 	bl	800c684 <lwip_htons>
 801231a:	4603      	mov	r3, r0
 801231c:	b2db      	uxtb	r3, r3
 801231e:	f003 0303 	and.w	r3, r3, #3
 8012322:	2b00      	cmp	r3, #0
 8012324:	d001      	beq.n	801232a <tcp_receive+0xe6a>
 8012326:	2301      	movs	r3, #1
 8012328:	e000      	b.n	801232c <tcp_receive+0xe6c>
 801232a:	2300      	movs	r3, #0
 801232c:	4423      	add	r3, r4
 801232e:	b29a      	uxth	r2, r3
 8012330:	4b2a      	ldr	r3, [pc, #168]	; (80123dc <tcp_receive+0xf1c>)
 8012332:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012334:	4b29      	ldr	r3, [pc, #164]	; (80123dc <tcp_receive+0xf1c>)
 8012336:	881b      	ldrh	r3, [r3, #0]
 8012338:	461a      	mov	r2, r3
 801233a:	4b26      	ldr	r3, [pc, #152]	; (80123d4 <tcp_receive+0xf14>)
 801233c:	681b      	ldr	r3, [r3, #0]
 801233e:	441a      	add	r2, r3
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012344:	6879      	ldr	r1, [r7, #4]
 8012346:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012348:	440b      	add	r3, r1
 801234a:	429a      	cmp	r2, r3
 801234c:	d019      	beq.n	8012382 <tcp_receive+0xec2>
 801234e:	4b24      	ldr	r3, [pc, #144]	; (80123e0 <tcp_receive+0xf20>)
 8012350:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8012354:	4923      	ldr	r1, [pc, #140]	; (80123e4 <tcp_receive+0xf24>)
 8012356:	4824      	ldr	r0, [pc, #144]	; (80123e8 <tcp_receive+0xf28>)
 8012358:	f008 fed4 	bl	801b104 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801235c:	e011      	b.n	8012382 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801235e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012360:	681b      	ldr	r3, [r3, #0]
 8012362:	63bb      	str	r3, [r7, #56]	; 0x38
 8012364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012366:	2b00      	cmp	r3, #0
 8012368:	f47f aea4 	bne.w	80120b4 <tcp_receive+0xbf4>
 801236c:	e00a      	b.n	8012384 <tcp_receive+0xec4>
                break;
 801236e:	bf00      	nop
 8012370:	e008      	b.n	8012384 <tcp_receive+0xec4>
                break;
 8012372:	bf00      	nop
 8012374:	e006      	b.n	8012384 <tcp_receive+0xec4>
                  break;
 8012376:	bf00      	nop
 8012378:	e004      	b.n	8012384 <tcp_receive+0xec4>
                  break;
 801237a:	bf00      	nop
 801237c:	e002      	b.n	8012384 <tcp_receive+0xec4>
                  break;
 801237e:	bf00      	nop
 8012380:	e000      	b.n	8012384 <tcp_receive+0xec4>
                break;
 8012382:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8012384:	6878      	ldr	r0, [r7, #4]
 8012386:	f001 fe8b 	bl	80140a0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801238a:	e003      	b.n	8012394 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801238c:	6878      	ldr	r0, [r7, #4]
 801238e:	f001 fe87 	bl	80140a0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012392:	e01a      	b.n	80123ca <tcp_receive+0xf0a>
 8012394:	e019      	b.n	80123ca <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8012396:	4b0f      	ldr	r3, [pc, #60]	; (80123d4 <tcp_receive+0xf14>)
 8012398:	681a      	ldr	r2, [r3, #0]
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801239e:	1ad3      	subs	r3, r2, r3
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	db0a      	blt.n	80123ba <tcp_receive+0xefa>
 80123a4:	4b0b      	ldr	r3, [pc, #44]	; (80123d4 <tcp_receive+0xf14>)
 80123a6:	681a      	ldr	r2, [r3, #0]
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123ac:	6879      	ldr	r1, [r7, #4]
 80123ae:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80123b0:	440b      	add	r3, r1
 80123b2:	1ad3      	subs	r3, r2, r3
 80123b4:	3301      	adds	r3, #1
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	dd07      	ble.n	80123ca <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	8b5b      	ldrh	r3, [r3, #26]
 80123be:	f043 0302 	orr.w	r3, r3, #2
 80123c2:	b29a      	uxth	r2, r3
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80123c8:	e7ff      	b.n	80123ca <tcp_receive+0xf0a>
 80123ca:	bf00      	nop
 80123cc:	3750      	adds	r7, #80	; 0x50
 80123ce:	46bd      	mov	sp, r7
 80123d0:	bdb0      	pop	{r4, r5, r7, pc}
 80123d2:	bf00      	nop
 80123d4:	20004be4 	.word	0x20004be4
 80123d8:	20004bc4 	.word	0x20004bc4
 80123dc:	20004bee 	.word	0x20004bee
 80123e0:	0801d6f0 	.word	0x0801d6f0
 80123e4:	0801da98 	.word	0x0801da98
 80123e8:	0801d73c 	.word	0x0801d73c

080123ec <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80123ec:	b480      	push	{r7}
 80123ee:	b083      	sub	sp, #12
 80123f0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80123f2:	4b15      	ldr	r3, [pc, #84]	; (8012448 <tcp_get_next_optbyte+0x5c>)
 80123f4:	881b      	ldrh	r3, [r3, #0]
 80123f6:	1c5a      	adds	r2, r3, #1
 80123f8:	b291      	uxth	r1, r2
 80123fa:	4a13      	ldr	r2, [pc, #76]	; (8012448 <tcp_get_next_optbyte+0x5c>)
 80123fc:	8011      	strh	r1, [r2, #0]
 80123fe:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8012400:	4b12      	ldr	r3, [pc, #72]	; (801244c <tcp_get_next_optbyte+0x60>)
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	2b00      	cmp	r3, #0
 8012406:	d004      	beq.n	8012412 <tcp_get_next_optbyte+0x26>
 8012408:	4b11      	ldr	r3, [pc, #68]	; (8012450 <tcp_get_next_optbyte+0x64>)
 801240a:	881b      	ldrh	r3, [r3, #0]
 801240c:	88fa      	ldrh	r2, [r7, #6]
 801240e:	429a      	cmp	r2, r3
 8012410:	d208      	bcs.n	8012424 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8012412:	4b10      	ldr	r3, [pc, #64]	; (8012454 <tcp_get_next_optbyte+0x68>)
 8012414:	681b      	ldr	r3, [r3, #0]
 8012416:	3314      	adds	r3, #20
 8012418:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801241a:	88fb      	ldrh	r3, [r7, #6]
 801241c:	683a      	ldr	r2, [r7, #0]
 801241e:	4413      	add	r3, r2
 8012420:	781b      	ldrb	r3, [r3, #0]
 8012422:	e00b      	b.n	801243c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8012424:	88fb      	ldrh	r3, [r7, #6]
 8012426:	b2da      	uxtb	r2, r3
 8012428:	4b09      	ldr	r3, [pc, #36]	; (8012450 <tcp_get_next_optbyte+0x64>)
 801242a:	881b      	ldrh	r3, [r3, #0]
 801242c:	b2db      	uxtb	r3, r3
 801242e:	1ad3      	subs	r3, r2, r3
 8012430:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8012432:	4b06      	ldr	r3, [pc, #24]	; (801244c <tcp_get_next_optbyte+0x60>)
 8012434:	681a      	ldr	r2, [r3, #0]
 8012436:	797b      	ldrb	r3, [r7, #5]
 8012438:	4413      	add	r3, r2
 801243a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801243c:	4618      	mov	r0, r3
 801243e:	370c      	adds	r7, #12
 8012440:	46bd      	mov	sp, r7
 8012442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012446:	4770      	bx	lr
 8012448:	20004be0 	.word	0x20004be0
 801244c:	20004bdc 	.word	0x20004bdc
 8012450:	20004bda 	.word	0x20004bda
 8012454:	20004bd4 	.word	0x20004bd4

08012458 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8012458:	b580      	push	{r7, lr}
 801245a:	b084      	sub	sp, #16
 801245c:	af00      	add	r7, sp, #0
 801245e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	2b00      	cmp	r3, #0
 8012464:	d106      	bne.n	8012474 <tcp_parseopt+0x1c>
 8012466:	4b32      	ldr	r3, [pc, #200]	; (8012530 <tcp_parseopt+0xd8>)
 8012468:	f240 727d 	movw	r2, #1917	; 0x77d
 801246c:	4931      	ldr	r1, [pc, #196]	; (8012534 <tcp_parseopt+0xdc>)
 801246e:	4832      	ldr	r0, [pc, #200]	; (8012538 <tcp_parseopt+0xe0>)
 8012470:	f008 fe48 	bl	801b104 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8012474:	4b31      	ldr	r3, [pc, #196]	; (801253c <tcp_parseopt+0xe4>)
 8012476:	881b      	ldrh	r3, [r3, #0]
 8012478:	2b00      	cmp	r3, #0
 801247a:	d055      	beq.n	8012528 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801247c:	4b30      	ldr	r3, [pc, #192]	; (8012540 <tcp_parseopt+0xe8>)
 801247e:	2200      	movs	r2, #0
 8012480:	801a      	strh	r2, [r3, #0]
 8012482:	e045      	b.n	8012510 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8012484:	f7ff ffb2 	bl	80123ec <tcp_get_next_optbyte>
 8012488:	4603      	mov	r3, r0
 801248a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801248c:	7bfb      	ldrb	r3, [r7, #15]
 801248e:	2b02      	cmp	r3, #2
 8012490:	d006      	beq.n	80124a0 <tcp_parseopt+0x48>
 8012492:	2b02      	cmp	r3, #2
 8012494:	dc2b      	bgt.n	80124ee <tcp_parseopt+0x96>
 8012496:	2b00      	cmp	r3, #0
 8012498:	d041      	beq.n	801251e <tcp_parseopt+0xc6>
 801249a:	2b01      	cmp	r3, #1
 801249c:	d127      	bne.n	80124ee <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801249e:	e037      	b.n	8012510 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80124a0:	f7ff ffa4 	bl	80123ec <tcp_get_next_optbyte>
 80124a4:	4603      	mov	r3, r0
 80124a6:	2b04      	cmp	r3, #4
 80124a8:	d13b      	bne.n	8012522 <tcp_parseopt+0xca>
 80124aa:	4b25      	ldr	r3, [pc, #148]	; (8012540 <tcp_parseopt+0xe8>)
 80124ac:	881b      	ldrh	r3, [r3, #0]
 80124ae:	3301      	adds	r3, #1
 80124b0:	4a22      	ldr	r2, [pc, #136]	; (801253c <tcp_parseopt+0xe4>)
 80124b2:	8812      	ldrh	r2, [r2, #0]
 80124b4:	4293      	cmp	r3, r2
 80124b6:	da34      	bge.n	8012522 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80124b8:	f7ff ff98 	bl	80123ec <tcp_get_next_optbyte>
 80124bc:	4603      	mov	r3, r0
 80124be:	b29b      	uxth	r3, r3
 80124c0:	021b      	lsls	r3, r3, #8
 80124c2:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80124c4:	f7ff ff92 	bl	80123ec <tcp_get_next_optbyte>
 80124c8:	4603      	mov	r3, r0
 80124ca:	b29a      	uxth	r2, r3
 80124cc:	89bb      	ldrh	r3, [r7, #12]
 80124ce:	4313      	orrs	r3, r2
 80124d0:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80124d2:	89bb      	ldrh	r3, [r7, #12]
 80124d4:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80124d8:	d804      	bhi.n	80124e4 <tcp_parseopt+0x8c>
 80124da:	89bb      	ldrh	r3, [r7, #12]
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d001      	beq.n	80124e4 <tcp_parseopt+0x8c>
 80124e0:	89ba      	ldrh	r2, [r7, #12]
 80124e2:	e001      	b.n	80124e8 <tcp_parseopt+0x90>
 80124e4:	f44f 7206 	mov.w	r2, #536	; 0x218
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80124ec:	e010      	b.n	8012510 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80124ee:	f7ff ff7d 	bl	80123ec <tcp_get_next_optbyte>
 80124f2:	4603      	mov	r3, r0
 80124f4:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80124f6:	7afb      	ldrb	r3, [r7, #11]
 80124f8:	2b01      	cmp	r3, #1
 80124fa:	d914      	bls.n	8012526 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80124fc:	7afb      	ldrb	r3, [r7, #11]
 80124fe:	b29a      	uxth	r2, r3
 8012500:	4b0f      	ldr	r3, [pc, #60]	; (8012540 <tcp_parseopt+0xe8>)
 8012502:	881b      	ldrh	r3, [r3, #0]
 8012504:	4413      	add	r3, r2
 8012506:	b29b      	uxth	r3, r3
 8012508:	3b02      	subs	r3, #2
 801250a:	b29a      	uxth	r2, r3
 801250c:	4b0c      	ldr	r3, [pc, #48]	; (8012540 <tcp_parseopt+0xe8>)
 801250e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012510:	4b0b      	ldr	r3, [pc, #44]	; (8012540 <tcp_parseopt+0xe8>)
 8012512:	881a      	ldrh	r2, [r3, #0]
 8012514:	4b09      	ldr	r3, [pc, #36]	; (801253c <tcp_parseopt+0xe4>)
 8012516:	881b      	ldrh	r3, [r3, #0]
 8012518:	429a      	cmp	r2, r3
 801251a:	d3b3      	bcc.n	8012484 <tcp_parseopt+0x2c>
 801251c:	e004      	b.n	8012528 <tcp_parseopt+0xd0>
          return;
 801251e:	bf00      	nop
 8012520:	e002      	b.n	8012528 <tcp_parseopt+0xd0>
            return;
 8012522:	bf00      	nop
 8012524:	e000      	b.n	8012528 <tcp_parseopt+0xd0>
            return;
 8012526:	bf00      	nop
      }
    }
  }
}
 8012528:	3710      	adds	r7, #16
 801252a:	46bd      	mov	sp, r7
 801252c:	bd80      	pop	{r7, pc}
 801252e:	bf00      	nop
 8012530:	0801d6f0 	.word	0x0801d6f0
 8012534:	0801db54 	.word	0x0801db54
 8012538:	0801d73c 	.word	0x0801d73c
 801253c:	20004bd8 	.word	0x20004bd8
 8012540:	20004be0 	.word	0x20004be0

08012544 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8012544:	b480      	push	{r7}
 8012546:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8012548:	4b05      	ldr	r3, [pc, #20]	; (8012560 <tcp_trigger_input_pcb_close+0x1c>)
 801254a:	781b      	ldrb	r3, [r3, #0]
 801254c:	f043 0310 	orr.w	r3, r3, #16
 8012550:	b2da      	uxtb	r2, r3
 8012552:	4b03      	ldr	r3, [pc, #12]	; (8012560 <tcp_trigger_input_pcb_close+0x1c>)
 8012554:	701a      	strb	r2, [r3, #0]
}
 8012556:	bf00      	nop
 8012558:	46bd      	mov	sp, r7
 801255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801255e:	4770      	bx	lr
 8012560:	20004bf1 	.word	0x20004bf1

08012564 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8012564:	b580      	push	{r7, lr}
 8012566:	b084      	sub	sp, #16
 8012568:	af00      	add	r7, sp, #0
 801256a:	60f8      	str	r0, [r7, #12]
 801256c:	60b9      	str	r1, [r7, #8]
 801256e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8012570:	68fb      	ldr	r3, [r7, #12]
 8012572:	2b00      	cmp	r3, #0
 8012574:	d00a      	beq.n	801258c <tcp_route+0x28>
 8012576:	68fb      	ldr	r3, [r7, #12]
 8012578:	7a1b      	ldrb	r3, [r3, #8]
 801257a:	2b00      	cmp	r3, #0
 801257c:	d006      	beq.n	801258c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801257e:	68fb      	ldr	r3, [r7, #12]
 8012580:	7a1b      	ldrb	r3, [r3, #8]
 8012582:	4618      	mov	r0, r3
 8012584:	f7fb f89c 	bl	800d6c0 <netif_get_by_index>
 8012588:	4603      	mov	r3, r0
 801258a:	e003      	b.n	8012594 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801258c:	6878      	ldr	r0, [r7, #4]
 801258e:	f003 fcb9 	bl	8015f04 <ip4_route>
 8012592:	4603      	mov	r3, r0
  }
}
 8012594:	4618      	mov	r0, r3
 8012596:	3710      	adds	r7, #16
 8012598:	46bd      	mov	sp, r7
 801259a:	bd80      	pop	{r7, pc}

0801259c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801259c:	b590      	push	{r4, r7, lr}
 801259e:	b087      	sub	sp, #28
 80125a0:	af00      	add	r7, sp, #0
 80125a2:	60f8      	str	r0, [r7, #12]
 80125a4:	60b9      	str	r1, [r7, #8]
 80125a6:	603b      	str	r3, [r7, #0]
 80125a8:	4613      	mov	r3, r2
 80125aa:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80125ac:	68fb      	ldr	r3, [r7, #12]
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d105      	bne.n	80125be <tcp_create_segment+0x22>
 80125b2:	4b44      	ldr	r3, [pc, #272]	; (80126c4 <tcp_create_segment+0x128>)
 80125b4:	22a3      	movs	r2, #163	; 0xa3
 80125b6:	4944      	ldr	r1, [pc, #272]	; (80126c8 <tcp_create_segment+0x12c>)
 80125b8:	4844      	ldr	r0, [pc, #272]	; (80126cc <tcp_create_segment+0x130>)
 80125ba:	f008 fda3 	bl	801b104 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80125be:	68bb      	ldr	r3, [r7, #8]
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d105      	bne.n	80125d0 <tcp_create_segment+0x34>
 80125c4:	4b3f      	ldr	r3, [pc, #252]	; (80126c4 <tcp_create_segment+0x128>)
 80125c6:	22a4      	movs	r2, #164	; 0xa4
 80125c8:	4941      	ldr	r1, [pc, #260]	; (80126d0 <tcp_create_segment+0x134>)
 80125ca:	4840      	ldr	r0, [pc, #256]	; (80126cc <tcp_create_segment+0x130>)
 80125cc:	f008 fd9a 	bl	801b104 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80125d0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80125d4:	009b      	lsls	r3, r3, #2
 80125d6:	b2db      	uxtb	r3, r3
 80125d8:	f003 0304 	and.w	r3, r3, #4
 80125dc:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80125de:	2003      	movs	r0, #3
 80125e0:	f7fa fd06 	bl	800cff0 <memp_malloc>
 80125e4:	6138      	str	r0, [r7, #16]
 80125e6:	693b      	ldr	r3, [r7, #16]
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d104      	bne.n	80125f6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80125ec:	68b8      	ldr	r0, [r7, #8]
 80125ee:	f7fb fbf5 	bl	800dddc <pbuf_free>
    return NULL;
 80125f2:	2300      	movs	r3, #0
 80125f4:	e061      	b.n	80126ba <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80125f6:	693b      	ldr	r3, [r7, #16]
 80125f8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80125fc:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80125fe:	693b      	ldr	r3, [r7, #16]
 8012600:	2200      	movs	r2, #0
 8012602:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8012604:	693b      	ldr	r3, [r7, #16]
 8012606:	68ba      	ldr	r2, [r7, #8]
 8012608:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801260a:	68bb      	ldr	r3, [r7, #8]
 801260c:	891a      	ldrh	r2, [r3, #8]
 801260e:	7dfb      	ldrb	r3, [r7, #23]
 8012610:	b29b      	uxth	r3, r3
 8012612:	429a      	cmp	r2, r3
 8012614:	d205      	bcs.n	8012622 <tcp_create_segment+0x86>
 8012616:	4b2b      	ldr	r3, [pc, #172]	; (80126c4 <tcp_create_segment+0x128>)
 8012618:	22b0      	movs	r2, #176	; 0xb0
 801261a:	492e      	ldr	r1, [pc, #184]	; (80126d4 <tcp_create_segment+0x138>)
 801261c:	482b      	ldr	r0, [pc, #172]	; (80126cc <tcp_create_segment+0x130>)
 801261e:	f008 fd71 	bl	801b104 <iprintf>
  seg->len = p->tot_len - optlen;
 8012622:	68bb      	ldr	r3, [r7, #8]
 8012624:	891a      	ldrh	r2, [r3, #8]
 8012626:	7dfb      	ldrb	r3, [r7, #23]
 8012628:	b29b      	uxth	r3, r3
 801262a:	1ad3      	subs	r3, r2, r3
 801262c:	b29a      	uxth	r2, r3
 801262e:	693b      	ldr	r3, [r7, #16]
 8012630:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8012632:	2114      	movs	r1, #20
 8012634:	68b8      	ldr	r0, [r7, #8]
 8012636:	f7fb fb3b 	bl	800dcb0 <pbuf_add_header>
 801263a:	4603      	mov	r3, r0
 801263c:	2b00      	cmp	r3, #0
 801263e:	d004      	beq.n	801264a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8012640:	6938      	ldr	r0, [r7, #16]
 8012642:	f7fd f804 	bl	800f64e <tcp_seg_free>
    return NULL;
 8012646:	2300      	movs	r3, #0
 8012648:	e037      	b.n	80126ba <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801264a:	693b      	ldr	r3, [r7, #16]
 801264c:	685b      	ldr	r3, [r3, #4]
 801264e:	685a      	ldr	r2, [r3, #4]
 8012650:	693b      	ldr	r3, [r7, #16]
 8012652:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8012654:	68fb      	ldr	r3, [r7, #12]
 8012656:	8ada      	ldrh	r2, [r3, #22]
 8012658:	693b      	ldr	r3, [r7, #16]
 801265a:	68dc      	ldr	r4, [r3, #12]
 801265c:	4610      	mov	r0, r2
 801265e:	f7fa f811 	bl	800c684 <lwip_htons>
 8012662:	4603      	mov	r3, r0
 8012664:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8012666:	68fb      	ldr	r3, [r7, #12]
 8012668:	8b1a      	ldrh	r2, [r3, #24]
 801266a:	693b      	ldr	r3, [r7, #16]
 801266c:	68dc      	ldr	r4, [r3, #12]
 801266e:	4610      	mov	r0, r2
 8012670:	f7fa f808 	bl	800c684 <lwip_htons>
 8012674:	4603      	mov	r3, r0
 8012676:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8012678:	693b      	ldr	r3, [r7, #16]
 801267a:	68dc      	ldr	r4, [r3, #12]
 801267c:	6838      	ldr	r0, [r7, #0]
 801267e:	f7fa f816 	bl	800c6ae <lwip_htonl>
 8012682:	4603      	mov	r3, r0
 8012684:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8012686:	7dfb      	ldrb	r3, [r7, #23]
 8012688:	089b      	lsrs	r3, r3, #2
 801268a:	b2db      	uxtb	r3, r3
 801268c:	b29b      	uxth	r3, r3
 801268e:	3305      	adds	r3, #5
 8012690:	b29b      	uxth	r3, r3
 8012692:	031b      	lsls	r3, r3, #12
 8012694:	b29a      	uxth	r2, r3
 8012696:	79fb      	ldrb	r3, [r7, #7]
 8012698:	b29b      	uxth	r3, r3
 801269a:	4313      	orrs	r3, r2
 801269c:	b29a      	uxth	r2, r3
 801269e:	693b      	ldr	r3, [r7, #16]
 80126a0:	68dc      	ldr	r4, [r3, #12]
 80126a2:	4610      	mov	r0, r2
 80126a4:	f7f9 ffee 	bl	800c684 <lwip_htons>
 80126a8:	4603      	mov	r3, r0
 80126aa:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80126ac:	693b      	ldr	r3, [r7, #16]
 80126ae:	68db      	ldr	r3, [r3, #12]
 80126b0:	2200      	movs	r2, #0
 80126b2:	749a      	strb	r2, [r3, #18]
 80126b4:	2200      	movs	r2, #0
 80126b6:	74da      	strb	r2, [r3, #19]
  return seg;
 80126b8:	693b      	ldr	r3, [r7, #16]
}
 80126ba:	4618      	mov	r0, r3
 80126bc:	371c      	adds	r7, #28
 80126be:	46bd      	mov	sp, r7
 80126c0:	bd90      	pop	{r4, r7, pc}
 80126c2:	bf00      	nop
 80126c4:	0801db70 	.word	0x0801db70
 80126c8:	0801dba4 	.word	0x0801dba4
 80126cc:	0801dbc4 	.word	0x0801dbc4
 80126d0:	0801dbec 	.word	0x0801dbec
 80126d4:	0801dc10 	.word	0x0801dc10

080126d8 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80126d8:	b580      	push	{r7, lr}
 80126da:	b086      	sub	sp, #24
 80126dc:	af00      	add	r7, sp, #0
 80126de:	607b      	str	r3, [r7, #4]
 80126e0:	4603      	mov	r3, r0
 80126e2:	73fb      	strb	r3, [r7, #15]
 80126e4:	460b      	mov	r3, r1
 80126e6:	81bb      	strh	r3, [r7, #12]
 80126e8:	4613      	mov	r3, r2
 80126ea:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80126ec:	89bb      	ldrh	r3, [r7, #12]
 80126ee:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d105      	bne.n	8012702 <tcp_pbuf_prealloc+0x2a>
 80126f6:	4b30      	ldr	r3, [pc, #192]	; (80127b8 <tcp_pbuf_prealloc+0xe0>)
 80126f8:	22e8      	movs	r2, #232	; 0xe8
 80126fa:	4930      	ldr	r1, [pc, #192]	; (80127bc <tcp_pbuf_prealloc+0xe4>)
 80126fc:	4830      	ldr	r0, [pc, #192]	; (80127c0 <tcp_pbuf_prealloc+0xe8>)
 80126fe:	f008 fd01 	bl	801b104 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8012702:	6a3b      	ldr	r3, [r7, #32]
 8012704:	2b00      	cmp	r3, #0
 8012706:	d105      	bne.n	8012714 <tcp_pbuf_prealloc+0x3c>
 8012708:	4b2b      	ldr	r3, [pc, #172]	; (80127b8 <tcp_pbuf_prealloc+0xe0>)
 801270a:	22e9      	movs	r2, #233	; 0xe9
 801270c:	492d      	ldr	r1, [pc, #180]	; (80127c4 <tcp_pbuf_prealloc+0xec>)
 801270e:	482c      	ldr	r0, [pc, #176]	; (80127c0 <tcp_pbuf_prealloc+0xe8>)
 8012710:	f008 fcf8 	bl	801b104 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8012714:	89ba      	ldrh	r2, [r7, #12]
 8012716:	897b      	ldrh	r3, [r7, #10]
 8012718:	429a      	cmp	r2, r3
 801271a:	d221      	bcs.n	8012760 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801271c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012720:	f003 0302 	and.w	r3, r3, #2
 8012724:	2b00      	cmp	r3, #0
 8012726:	d111      	bne.n	801274c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8012728:	6a3b      	ldr	r3, [r7, #32]
 801272a:	8b5b      	ldrh	r3, [r3, #26]
 801272c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8012730:	2b00      	cmp	r3, #0
 8012732:	d115      	bne.n	8012760 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8012734:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012738:	2b00      	cmp	r3, #0
 801273a:	d007      	beq.n	801274c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801273c:	6a3b      	ldr	r3, [r7, #32]
 801273e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8012740:	2b00      	cmp	r3, #0
 8012742:	d103      	bne.n	801274c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8012744:	6a3b      	ldr	r3, [r7, #32]
 8012746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8012748:	2b00      	cmp	r3, #0
 801274a:	d009      	beq.n	8012760 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801274c:	89bb      	ldrh	r3, [r7, #12]
 801274e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8012752:	f023 0203 	bic.w	r2, r3, #3
 8012756:	897b      	ldrh	r3, [r7, #10]
 8012758:	4293      	cmp	r3, r2
 801275a:	bf28      	it	cs
 801275c:	4613      	movcs	r3, r2
 801275e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8012760:	8af9      	ldrh	r1, [r7, #22]
 8012762:	7bfb      	ldrb	r3, [r7, #15]
 8012764:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012768:	4618      	mov	r0, r3
 801276a:	f7fb f853 	bl	800d814 <pbuf_alloc>
 801276e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012770:	693b      	ldr	r3, [r7, #16]
 8012772:	2b00      	cmp	r3, #0
 8012774:	d101      	bne.n	801277a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8012776:	2300      	movs	r3, #0
 8012778:	e019      	b.n	80127ae <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801277a:	693b      	ldr	r3, [r7, #16]
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	2b00      	cmp	r3, #0
 8012780:	d006      	beq.n	8012790 <tcp_pbuf_prealloc+0xb8>
 8012782:	4b0d      	ldr	r3, [pc, #52]	; (80127b8 <tcp_pbuf_prealloc+0xe0>)
 8012784:	f240 120b 	movw	r2, #267	; 0x10b
 8012788:	490f      	ldr	r1, [pc, #60]	; (80127c8 <tcp_pbuf_prealloc+0xf0>)
 801278a:	480d      	ldr	r0, [pc, #52]	; (80127c0 <tcp_pbuf_prealloc+0xe8>)
 801278c:	f008 fcba 	bl	801b104 <iprintf>
  *oversize = p->len - length;
 8012790:	693b      	ldr	r3, [r7, #16]
 8012792:	895a      	ldrh	r2, [r3, #10]
 8012794:	89bb      	ldrh	r3, [r7, #12]
 8012796:	1ad3      	subs	r3, r2, r3
 8012798:	b29a      	uxth	r2, r3
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801279e:	693b      	ldr	r3, [r7, #16]
 80127a0:	89ba      	ldrh	r2, [r7, #12]
 80127a2:	811a      	strh	r2, [r3, #8]
 80127a4:	693b      	ldr	r3, [r7, #16]
 80127a6:	891a      	ldrh	r2, [r3, #8]
 80127a8:	693b      	ldr	r3, [r7, #16]
 80127aa:	815a      	strh	r2, [r3, #10]
  return p;
 80127ac:	693b      	ldr	r3, [r7, #16]
}
 80127ae:	4618      	mov	r0, r3
 80127b0:	3718      	adds	r7, #24
 80127b2:	46bd      	mov	sp, r7
 80127b4:	bd80      	pop	{r7, pc}
 80127b6:	bf00      	nop
 80127b8:	0801db70 	.word	0x0801db70
 80127bc:	0801dc28 	.word	0x0801dc28
 80127c0:	0801dbc4 	.word	0x0801dbc4
 80127c4:	0801dc4c 	.word	0x0801dc4c
 80127c8:	0801dc6c 	.word	0x0801dc6c

080127cc <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80127cc:	b580      	push	{r7, lr}
 80127ce:	b082      	sub	sp, #8
 80127d0:	af00      	add	r7, sp, #0
 80127d2:	6078      	str	r0, [r7, #4]
 80127d4:	460b      	mov	r3, r1
 80127d6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d106      	bne.n	80127ec <tcp_write_checks+0x20>
 80127de:	4b33      	ldr	r3, [pc, #204]	; (80128ac <tcp_write_checks+0xe0>)
 80127e0:	f240 1233 	movw	r2, #307	; 0x133
 80127e4:	4932      	ldr	r1, [pc, #200]	; (80128b0 <tcp_write_checks+0xe4>)
 80127e6:	4833      	ldr	r0, [pc, #204]	; (80128b4 <tcp_write_checks+0xe8>)
 80127e8:	f008 fc8c 	bl	801b104 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	7d1b      	ldrb	r3, [r3, #20]
 80127f0:	2b04      	cmp	r3, #4
 80127f2:	d00e      	beq.n	8012812 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80127f8:	2b07      	cmp	r3, #7
 80127fa:	d00a      	beq.n	8012812 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8012800:	2b02      	cmp	r3, #2
 8012802:	d006      	beq.n	8012812 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8012808:	2b03      	cmp	r3, #3
 801280a:	d002      	beq.n	8012812 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801280c:	f06f 030a 	mvn.w	r3, #10
 8012810:	e048      	b.n	80128a4 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8012812:	887b      	ldrh	r3, [r7, #2]
 8012814:	2b00      	cmp	r3, #0
 8012816:	d101      	bne.n	801281c <tcp_write_checks+0x50>
    return ERR_OK;
 8012818:	2300      	movs	r3, #0
 801281a:	e043      	b.n	80128a4 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8012822:	887a      	ldrh	r2, [r7, #2]
 8012824:	429a      	cmp	r2, r3
 8012826:	d909      	bls.n	801283c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	8b5b      	ldrh	r3, [r3, #26]
 801282c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012830:	b29a      	uxth	r2, r3
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8012836:	f04f 33ff 	mov.w	r3, #4294967295
 801283a:	e033      	b.n	80128a4 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012842:	2b08      	cmp	r3, #8
 8012844:	d909      	bls.n	801285a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	8b5b      	ldrh	r3, [r3, #26]
 801284a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801284e:	b29a      	uxth	r2, r3
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8012854:	f04f 33ff 	mov.w	r3, #4294967295
 8012858:	e024      	b.n	80128a4 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012860:	2b00      	cmp	r3, #0
 8012862:	d00f      	beq.n	8012884 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012868:	2b00      	cmp	r3, #0
 801286a:	d11a      	bne.n	80128a2 <tcp_write_checks+0xd6>
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012870:	2b00      	cmp	r3, #0
 8012872:	d116      	bne.n	80128a2 <tcp_write_checks+0xd6>
 8012874:	4b0d      	ldr	r3, [pc, #52]	; (80128ac <tcp_write_checks+0xe0>)
 8012876:	f240 1255 	movw	r2, #341	; 0x155
 801287a:	490f      	ldr	r1, [pc, #60]	; (80128b8 <tcp_write_checks+0xec>)
 801287c:	480d      	ldr	r0, [pc, #52]	; (80128b4 <tcp_write_checks+0xe8>)
 801287e:	f008 fc41 	bl	801b104 <iprintf>
 8012882:	e00e      	b.n	80128a2 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012888:	2b00      	cmp	r3, #0
 801288a:	d103      	bne.n	8012894 <tcp_write_checks+0xc8>
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012890:	2b00      	cmp	r3, #0
 8012892:	d006      	beq.n	80128a2 <tcp_write_checks+0xd6>
 8012894:	4b05      	ldr	r3, [pc, #20]	; (80128ac <tcp_write_checks+0xe0>)
 8012896:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801289a:	4908      	ldr	r1, [pc, #32]	; (80128bc <tcp_write_checks+0xf0>)
 801289c:	4805      	ldr	r0, [pc, #20]	; (80128b4 <tcp_write_checks+0xe8>)
 801289e:	f008 fc31 	bl	801b104 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80128a2:	2300      	movs	r3, #0
}
 80128a4:	4618      	mov	r0, r3
 80128a6:	3708      	adds	r7, #8
 80128a8:	46bd      	mov	sp, r7
 80128aa:	bd80      	pop	{r7, pc}
 80128ac:	0801db70 	.word	0x0801db70
 80128b0:	0801dc80 	.word	0x0801dc80
 80128b4:	0801dbc4 	.word	0x0801dbc4
 80128b8:	0801dca0 	.word	0x0801dca0
 80128bc:	0801dcdc 	.word	0x0801dcdc

080128c0 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80128c0:	b590      	push	{r4, r7, lr}
 80128c2:	b09b      	sub	sp, #108	; 0x6c
 80128c4:	af04      	add	r7, sp, #16
 80128c6:	60f8      	str	r0, [r7, #12]
 80128c8:	60b9      	str	r1, [r7, #8]
 80128ca:	4611      	mov	r1, r2
 80128cc:	461a      	mov	r2, r3
 80128ce:	460b      	mov	r3, r1
 80128d0:	80fb      	strh	r3, [r7, #6]
 80128d2:	4613      	mov	r3, r2
 80128d4:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80128d6:	2300      	movs	r3, #0
 80128d8:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80128da:	2300      	movs	r3, #0
 80128dc:	653b      	str	r3, [r7, #80]	; 0x50
 80128de:	2300      	movs	r3, #0
 80128e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80128e2:	2300      	movs	r3, #0
 80128e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80128e6:	2300      	movs	r3, #0
 80128e8:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80128ea:	2300      	movs	r3, #0
 80128ec:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80128f0:	2300      	movs	r3, #0
 80128f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80128f6:	2300      	movs	r3, #0
 80128f8:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80128fa:	2300      	movs	r3, #0
 80128fc:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80128fe:	2300      	movs	r3, #0
 8012900:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8012902:	68fb      	ldr	r3, [r7, #12]
 8012904:	2b00      	cmp	r3, #0
 8012906:	d109      	bne.n	801291c <tcp_write+0x5c>
 8012908:	4ba4      	ldr	r3, [pc, #656]	; (8012b9c <tcp_write+0x2dc>)
 801290a:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801290e:	49a4      	ldr	r1, [pc, #656]	; (8012ba0 <tcp_write+0x2e0>)
 8012910:	48a4      	ldr	r0, [pc, #656]	; (8012ba4 <tcp_write+0x2e4>)
 8012912:	f008 fbf7 	bl	801b104 <iprintf>
 8012916:	f06f 030f 	mvn.w	r3, #15
 801291a:	e32a      	b.n	8012f72 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801291c:	68fb      	ldr	r3, [r7, #12]
 801291e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8012922:	085b      	lsrs	r3, r3, #1
 8012924:	b29a      	uxth	r2, r3
 8012926:	68fb      	ldr	r3, [r7, #12]
 8012928:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801292a:	4293      	cmp	r3, r2
 801292c:	bf28      	it	cs
 801292e:	4613      	movcs	r3, r2
 8012930:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8012932:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012934:	2b00      	cmp	r3, #0
 8012936:	d102      	bne.n	801293e <tcp_write+0x7e>
 8012938:	68fb      	ldr	r3, [r7, #12]
 801293a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801293c:	e000      	b.n	8012940 <tcp_write+0x80>
 801293e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012940:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8012942:	68bb      	ldr	r3, [r7, #8]
 8012944:	2b00      	cmp	r3, #0
 8012946:	d109      	bne.n	801295c <tcp_write+0x9c>
 8012948:	4b94      	ldr	r3, [pc, #592]	; (8012b9c <tcp_write+0x2dc>)
 801294a:	f240 12ad 	movw	r2, #429	; 0x1ad
 801294e:	4996      	ldr	r1, [pc, #600]	; (8012ba8 <tcp_write+0x2e8>)
 8012950:	4894      	ldr	r0, [pc, #592]	; (8012ba4 <tcp_write+0x2e4>)
 8012952:	f008 fbd7 	bl	801b104 <iprintf>
 8012956:	f06f 030f 	mvn.w	r3, #15
 801295a:	e30a      	b.n	8012f72 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801295c:	88fb      	ldrh	r3, [r7, #6]
 801295e:	4619      	mov	r1, r3
 8012960:	68f8      	ldr	r0, [r7, #12]
 8012962:	f7ff ff33 	bl	80127cc <tcp_write_checks>
 8012966:	4603      	mov	r3, r0
 8012968:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 801296c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8012970:	2b00      	cmp	r3, #0
 8012972:	d002      	beq.n	801297a <tcp_write+0xba>
    return err;
 8012974:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8012978:	e2fb      	b.n	8012f72 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012980:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012984:	2300      	movs	r3, #0
 8012986:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801298a:	68fb      	ldr	r3, [r7, #12]
 801298c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801298e:	2b00      	cmp	r3, #0
 8012990:	f000 80f6 	beq.w	8012b80 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012994:	68fb      	ldr	r3, [r7, #12]
 8012996:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012998:	653b      	str	r3, [r7, #80]	; 0x50
 801299a:	e002      	b.n	80129a2 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801299c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801299e:	681b      	ldr	r3, [r3, #0]
 80129a0:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80129a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80129a4:	681b      	ldr	r3, [r3, #0]
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d1f8      	bne.n	801299c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80129aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80129ac:	7a9b      	ldrb	r3, [r3, #10]
 80129ae:	009b      	lsls	r3, r3, #2
 80129b0:	b29b      	uxth	r3, r3
 80129b2:	f003 0304 	and.w	r3, r3, #4
 80129b6:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80129b8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80129ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80129bc:	891b      	ldrh	r3, [r3, #8]
 80129be:	4619      	mov	r1, r3
 80129c0:	8c3b      	ldrh	r3, [r7, #32]
 80129c2:	440b      	add	r3, r1
 80129c4:	429a      	cmp	r2, r3
 80129c6:	da06      	bge.n	80129d6 <tcp_write+0x116>
 80129c8:	4b74      	ldr	r3, [pc, #464]	; (8012b9c <tcp_write+0x2dc>)
 80129ca:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80129ce:	4977      	ldr	r1, [pc, #476]	; (8012bac <tcp_write+0x2ec>)
 80129d0:	4874      	ldr	r0, [pc, #464]	; (8012ba4 <tcp_write+0x2e4>)
 80129d2:	f008 fb97 	bl	801b104 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80129d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80129d8:	891a      	ldrh	r2, [r3, #8]
 80129da:	8c3b      	ldrh	r3, [r7, #32]
 80129dc:	4413      	add	r3, r2
 80129de:	b29b      	uxth	r3, r3
 80129e0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80129e2:	1ad3      	subs	r3, r2, r3
 80129e4:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80129e6:	68fb      	ldr	r3, [r7, #12]
 80129e8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80129ec:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80129ee:	8a7b      	ldrh	r3, [r7, #18]
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d026      	beq.n	8012a42 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80129f4:	8a7b      	ldrh	r3, [r7, #18]
 80129f6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80129f8:	429a      	cmp	r2, r3
 80129fa:	d206      	bcs.n	8012a0a <tcp_write+0x14a>
 80129fc:	4b67      	ldr	r3, [pc, #412]	; (8012b9c <tcp_write+0x2dc>)
 80129fe:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8012a02:	496b      	ldr	r1, [pc, #428]	; (8012bb0 <tcp_write+0x2f0>)
 8012a04:	4867      	ldr	r0, [pc, #412]	; (8012ba4 <tcp_write+0x2e4>)
 8012a06:	f008 fb7d 	bl	801b104 <iprintf>
      seg = last_unsent;
 8012a0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a0c:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8012a0e:	8a7b      	ldrh	r3, [r7, #18]
 8012a10:	88fa      	ldrh	r2, [r7, #6]
 8012a12:	4293      	cmp	r3, r2
 8012a14:	bf28      	it	cs
 8012a16:	4613      	movcs	r3, r2
 8012a18:	b29b      	uxth	r3, r3
 8012a1a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012a1c:	4293      	cmp	r3, r2
 8012a1e:	bf28      	it	cs
 8012a20:	4613      	movcs	r3, r2
 8012a22:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8012a24:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012a28:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012a2a:	4413      	add	r3, r2
 8012a2c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8012a30:	8a7a      	ldrh	r2, [r7, #18]
 8012a32:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012a34:	1ad3      	subs	r3, r2, r3
 8012a36:	b29b      	uxth	r3, r3
 8012a38:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8012a3a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012a3c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012a3e:	1ad3      	subs	r3, r2, r3
 8012a40:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8012a42:	8a7b      	ldrh	r3, [r7, #18]
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d00b      	beq.n	8012a60 <tcp_write+0x1a0>
 8012a48:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012a4c:	88fb      	ldrh	r3, [r7, #6]
 8012a4e:	429a      	cmp	r2, r3
 8012a50:	d006      	beq.n	8012a60 <tcp_write+0x1a0>
 8012a52:	4b52      	ldr	r3, [pc, #328]	; (8012b9c <tcp_write+0x2dc>)
 8012a54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012a58:	4956      	ldr	r1, [pc, #344]	; (8012bb4 <tcp_write+0x2f4>)
 8012a5a:	4852      	ldr	r0, [pc, #328]	; (8012ba4 <tcp_write+0x2e4>)
 8012a5c:	f008 fb52 	bl	801b104 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8012a60:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012a64:	88fb      	ldrh	r3, [r7, #6]
 8012a66:	429a      	cmp	r2, r3
 8012a68:	f080 8167 	bcs.w	8012d3a <tcp_write+0x47a>
 8012a6c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	f000 8163 	beq.w	8012d3a <tcp_write+0x47a>
 8012a74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a76:	891b      	ldrh	r3, [r3, #8]
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	f000 815e 	beq.w	8012d3a <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8012a7e:	88fa      	ldrh	r2, [r7, #6]
 8012a80:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012a84:	1ad2      	subs	r2, r2, r3
 8012a86:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012a88:	4293      	cmp	r3, r2
 8012a8a:	bfa8      	it	ge
 8012a8c:	4613      	movge	r3, r2
 8012a8e:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8012a90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a92:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8012a94:	797b      	ldrb	r3, [r7, #5]
 8012a96:	f003 0301 	and.w	r3, r3, #1
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d027      	beq.n	8012aee <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8012a9e:	f107 0012 	add.w	r0, r7, #18
 8012aa2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012aa4:	8bf9      	ldrh	r1, [r7, #30]
 8012aa6:	2301      	movs	r3, #1
 8012aa8:	9302      	str	r3, [sp, #8]
 8012aaa:	797b      	ldrb	r3, [r7, #5]
 8012aac:	9301      	str	r3, [sp, #4]
 8012aae:	68fb      	ldr	r3, [r7, #12]
 8012ab0:	9300      	str	r3, [sp, #0]
 8012ab2:	4603      	mov	r3, r0
 8012ab4:	2000      	movs	r0, #0
 8012ab6:	f7ff fe0f 	bl	80126d8 <tcp_pbuf_prealloc>
 8012aba:	6578      	str	r0, [r7, #84]	; 0x54
 8012abc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	f000 8225 	beq.w	8012f0e <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8012ac4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012ac6:	6858      	ldr	r0, [r3, #4]
 8012ac8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012acc:	68ba      	ldr	r2, [r7, #8]
 8012ace:	4413      	add	r3, r2
 8012ad0:	8bfa      	ldrh	r2, [r7, #30]
 8012ad2:	4619      	mov	r1, r3
 8012ad4:	f007 ffb7 	bl	801aa46 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8012ad8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012ada:	f7fb fa0d 	bl	800def8 <pbuf_clen>
 8012ade:	4603      	mov	r3, r0
 8012ae0:	461a      	mov	r2, r3
 8012ae2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012ae6:	4413      	add	r3, r2
 8012ae8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8012aec:	e041      	b.n	8012b72 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8012aee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012af0:	685b      	ldr	r3, [r3, #4]
 8012af2:	637b      	str	r3, [r7, #52]	; 0x34
 8012af4:	e002      	b.n	8012afc <tcp_write+0x23c>
 8012af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012af8:	681b      	ldr	r3, [r3, #0]
 8012afa:	637b      	str	r3, [r7, #52]	; 0x34
 8012afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012afe:	681b      	ldr	r3, [r3, #0]
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d1f8      	bne.n	8012af6 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8012b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b06:	7b1b      	ldrb	r3, [r3, #12]
 8012b08:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	d115      	bne.n	8012b3c <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8012b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b12:	685b      	ldr	r3, [r3, #4]
 8012b14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012b16:	8952      	ldrh	r2, [r2, #10]
 8012b18:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8012b1a:	68ba      	ldr	r2, [r7, #8]
 8012b1c:	429a      	cmp	r2, r3
 8012b1e:	d10d      	bne.n	8012b3c <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8012b20:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d006      	beq.n	8012b36 <tcp_write+0x276>
 8012b28:	4b1c      	ldr	r3, [pc, #112]	; (8012b9c <tcp_write+0x2dc>)
 8012b2a:	f240 2231 	movw	r2, #561	; 0x231
 8012b2e:	4922      	ldr	r1, [pc, #136]	; (8012bb8 <tcp_write+0x2f8>)
 8012b30:	481c      	ldr	r0, [pc, #112]	; (8012ba4 <tcp_write+0x2e4>)
 8012b32:	f008 fae7 	bl	801b104 <iprintf>
          extendlen = seglen;
 8012b36:	8bfb      	ldrh	r3, [r7, #30]
 8012b38:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8012b3a:	e01a      	b.n	8012b72 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8012b3c:	8bfb      	ldrh	r3, [r7, #30]
 8012b3e:	2201      	movs	r2, #1
 8012b40:	4619      	mov	r1, r3
 8012b42:	2000      	movs	r0, #0
 8012b44:	f7fa fe66 	bl	800d814 <pbuf_alloc>
 8012b48:	6578      	str	r0, [r7, #84]	; 0x54
 8012b4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	f000 81e0 	beq.w	8012f12 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8012b52:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012b56:	68ba      	ldr	r2, [r7, #8]
 8012b58:	441a      	add	r2, r3
 8012b5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012b5c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8012b5e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012b60:	f7fb f9ca 	bl	800def8 <pbuf_clen>
 8012b64:	4603      	mov	r3, r0
 8012b66:	461a      	mov	r2, r3
 8012b68:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012b6c:	4413      	add	r3, r2
 8012b6e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8012b72:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012b76:	8bfb      	ldrh	r3, [r7, #30]
 8012b78:	4413      	add	r3, r2
 8012b7a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8012b7e:	e0dc      	b.n	8012d3a <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8012b80:	68fb      	ldr	r3, [r7, #12]
 8012b82:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	f000 80d7 	beq.w	8012d3a <tcp_write+0x47a>
 8012b8c:	4b03      	ldr	r3, [pc, #12]	; (8012b9c <tcp_write+0x2dc>)
 8012b8e:	f240 224a 	movw	r2, #586	; 0x24a
 8012b92:	490a      	ldr	r1, [pc, #40]	; (8012bbc <tcp_write+0x2fc>)
 8012b94:	4803      	ldr	r0, [pc, #12]	; (8012ba4 <tcp_write+0x2e4>)
 8012b96:	f008 fab5 	bl	801b104 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8012b9a:	e0ce      	b.n	8012d3a <tcp_write+0x47a>
 8012b9c:	0801db70 	.word	0x0801db70
 8012ba0:	0801dd10 	.word	0x0801dd10
 8012ba4:	0801dbc4 	.word	0x0801dbc4
 8012ba8:	0801dd28 	.word	0x0801dd28
 8012bac:	0801dd5c 	.word	0x0801dd5c
 8012bb0:	0801dd74 	.word	0x0801dd74
 8012bb4:	0801dd94 	.word	0x0801dd94
 8012bb8:	0801ddb4 	.word	0x0801ddb4
 8012bbc:	0801dde0 	.word	0x0801dde0
    struct pbuf *p;
    u16_t left = len - pos;
 8012bc0:	88fa      	ldrh	r2, [r7, #6]
 8012bc2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012bc6:	1ad3      	subs	r3, r2, r3
 8012bc8:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8012bca:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012bce:	b29b      	uxth	r3, r3
 8012bd0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012bd2:	1ad3      	subs	r3, r2, r3
 8012bd4:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8012bd6:	8b7a      	ldrh	r2, [r7, #26]
 8012bd8:	8bbb      	ldrh	r3, [r7, #28]
 8012bda:	4293      	cmp	r3, r2
 8012bdc:	bf28      	it	cs
 8012bde:	4613      	movcs	r3, r2
 8012be0:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8012be2:	797b      	ldrb	r3, [r7, #5]
 8012be4:	f003 0301 	and.w	r3, r3, #1
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d036      	beq.n	8012c5a <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8012bec:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012bf0:	b29a      	uxth	r2, r3
 8012bf2:	8b3b      	ldrh	r3, [r7, #24]
 8012bf4:	4413      	add	r3, r2
 8012bf6:	b299      	uxth	r1, r3
 8012bf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	bf0c      	ite	eq
 8012bfe:	2301      	moveq	r3, #1
 8012c00:	2300      	movne	r3, #0
 8012c02:	b2db      	uxtb	r3, r3
 8012c04:	f107 0012 	add.w	r0, r7, #18
 8012c08:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012c0a:	9302      	str	r3, [sp, #8]
 8012c0c:	797b      	ldrb	r3, [r7, #5]
 8012c0e:	9301      	str	r3, [sp, #4]
 8012c10:	68fb      	ldr	r3, [r7, #12]
 8012c12:	9300      	str	r3, [sp, #0]
 8012c14:	4603      	mov	r3, r0
 8012c16:	2036      	movs	r0, #54	; 0x36
 8012c18:	f7ff fd5e 	bl	80126d8 <tcp_pbuf_prealloc>
 8012c1c:	6338      	str	r0, [r7, #48]	; 0x30
 8012c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	f000 8178 	beq.w	8012f16 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8012c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c28:	895b      	ldrh	r3, [r3, #10]
 8012c2a:	8b3a      	ldrh	r2, [r7, #24]
 8012c2c:	429a      	cmp	r2, r3
 8012c2e:	d906      	bls.n	8012c3e <tcp_write+0x37e>
 8012c30:	4b8c      	ldr	r3, [pc, #560]	; (8012e64 <tcp_write+0x5a4>)
 8012c32:	f240 2266 	movw	r2, #614	; 0x266
 8012c36:	498c      	ldr	r1, [pc, #560]	; (8012e68 <tcp_write+0x5a8>)
 8012c38:	488c      	ldr	r0, [pc, #560]	; (8012e6c <tcp_write+0x5ac>)
 8012c3a:	f008 fa63 	bl	801b104 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8012c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c40:	685a      	ldr	r2, [r3, #4]
 8012c42:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012c46:	18d0      	adds	r0, r2, r3
 8012c48:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012c4c:	68ba      	ldr	r2, [r7, #8]
 8012c4e:	4413      	add	r3, r2
 8012c50:	8b3a      	ldrh	r2, [r7, #24]
 8012c52:	4619      	mov	r1, r3
 8012c54:	f007 fef7 	bl	801aa46 <memcpy>
 8012c58:	e02f      	b.n	8012cba <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8012c5a:	8a7b      	ldrh	r3, [r7, #18]
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	d006      	beq.n	8012c6e <tcp_write+0x3ae>
 8012c60:	4b80      	ldr	r3, [pc, #512]	; (8012e64 <tcp_write+0x5a4>)
 8012c62:	f240 2271 	movw	r2, #625	; 0x271
 8012c66:	4982      	ldr	r1, [pc, #520]	; (8012e70 <tcp_write+0x5b0>)
 8012c68:	4880      	ldr	r0, [pc, #512]	; (8012e6c <tcp_write+0x5ac>)
 8012c6a:	f008 fa4b 	bl	801b104 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8012c6e:	8b3b      	ldrh	r3, [r7, #24]
 8012c70:	2201      	movs	r2, #1
 8012c72:	4619      	mov	r1, r3
 8012c74:	2036      	movs	r0, #54	; 0x36
 8012c76:	f7fa fdcd 	bl	800d814 <pbuf_alloc>
 8012c7a:	6178      	str	r0, [r7, #20]
 8012c7c:	697b      	ldr	r3, [r7, #20]
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	f000 814b 	beq.w	8012f1a <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8012c84:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012c88:	68ba      	ldr	r2, [r7, #8]
 8012c8a:	441a      	add	r2, r3
 8012c8c:	697b      	ldr	r3, [r7, #20]
 8012c8e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012c90:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012c94:	b29b      	uxth	r3, r3
 8012c96:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012c9a:	4619      	mov	r1, r3
 8012c9c:	2036      	movs	r0, #54	; 0x36
 8012c9e:	f7fa fdb9 	bl	800d814 <pbuf_alloc>
 8012ca2:	6338      	str	r0, [r7, #48]	; 0x30
 8012ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d103      	bne.n	8012cb2 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8012caa:	6978      	ldr	r0, [r7, #20]
 8012cac:	f7fb f896 	bl	800dddc <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8012cb0:	e136      	b.n	8012f20 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8012cb2:	6979      	ldr	r1, [r7, #20]
 8012cb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012cb6:	f7fb f95f 	bl	800df78 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8012cba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012cbc:	f7fb f91c 	bl	800def8 <pbuf_clen>
 8012cc0:	4603      	mov	r3, r0
 8012cc2:	461a      	mov	r2, r3
 8012cc4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012cc8:	4413      	add	r3, r2
 8012cca:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8012cce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012cd2:	2b09      	cmp	r3, #9
 8012cd4:	d903      	bls.n	8012cde <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8012cd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012cd8:	f7fb f880 	bl	800dddc <pbuf_free>
      goto memerr;
 8012cdc:	e120      	b.n	8012f20 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8012cde:	68fb      	ldr	r3, [r7, #12]
 8012ce0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012ce2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012ce6:	441a      	add	r2, r3
 8012ce8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012cec:	9300      	str	r3, [sp, #0]
 8012cee:	4613      	mov	r3, r2
 8012cf0:	2200      	movs	r2, #0
 8012cf2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012cf4:	68f8      	ldr	r0, [r7, #12]
 8012cf6:	f7ff fc51 	bl	801259c <tcp_create_segment>
 8012cfa:	64f8      	str	r0, [r7, #76]	; 0x4c
 8012cfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	f000 810d 	beq.w	8012f1e <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8012d04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d102      	bne.n	8012d10 <tcp_write+0x450>
      queue = seg;
 8012d0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012d0c:	647b      	str	r3, [r7, #68]	; 0x44
 8012d0e:	e00c      	b.n	8012d2a <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8012d10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d106      	bne.n	8012d24 <tcp_write+0x464>
 8012d16:	4b53      	ldr	r3, [pc, #332]	; (8012e64 <tcp_write+0x5a4>)
 8012d18:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012d1c:	4955      	ldr	r1, [pc, #340]	; (8012e74 <tcp_write+0x5b4>)
 8012d1e:	4853      	ldr	r0, [pc, #332]	; (8012e6c <tcp_write+0x5ac>)
 8012d20:	f008 f9f0 	bl	801b104 <iprintf>
      prev_seg->next = seg;
 8012d24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012d28:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8012d2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012d2c:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8012d2e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012d32:	8b3b      	ldrh	r3, [r7, #24]
 8012d34:	4413      	add	r3, r2
 8012d36:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8012d3a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012d3e:	88fb      	ldrh	r3, [r7, #6]
 8012d40:	429a      	cmp	r2, r3
 8012d42:	f4ff af3d 	bcc.w	8012bc0 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8012d46:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d02c      	beq.n	8012da6 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8012d4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012d4e:	685b      	ldr	r3, [r3, #4]
 8012d50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012d52:	e01e      	b.n	8012d92 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8012d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d56:	891a      	ldrh	r2, [r3, #8]
 8012d58:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012d5a:	4413      	add	r3, r2
 8012d5c:	b29a      	uxth	r2, r3
 8012d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d60:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8012d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d64:	681b      	ldr	r3, [r3, #0]
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d110      	bne.n	8012d8c <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8012d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d6c:	685b      	ldr	r3, [r3, #4]
 8012d6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012d70:	8952      	ldrh	r2, [r2, #10]
 8012d72:	4413      	add	r3, r2
 8012d74:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012d76:	68b9      	ldr	r1, [r7, #8]
 8012d78:	4618      	mov	r0, r3
 8012d7a:	f007 fe64 	bl	801aa46 <memcpy>
        p->len += oversize_used;
 8012d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d80:	895a      	ldrh	r2, [r3, #10]
 8012d82:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012d84:	4413      	add	r3, r2
 8012d86:	b29a      	uxth	r2, r3
 8012d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d8a:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8012d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d8e:	681b      	ldr	r3, [r3, #0]
 8012d90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d1dd      	bne.n	8012d54 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8012d98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012d9a:	891a      	ldrh	r2, [r3, #8]
 8012d9c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012d9e:	4413      	add	r3, r2
 8012da0:	b29a      	uxth	r2, r3
 8012da2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012da4:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8012da6:	8a7a      	ldrh	r2, [r7, #18]
 8012da8:	68fb      	ldr	r3, [r7, #12]
 8012daa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8012dae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d018      	beq.n	8012de6 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8012db4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	d106      	bne.n	8012dc8 <tcp_write+0x508>
 8012dba:	4b2a      	ldr	r3, [pc, #168]	; (8012e64 <tcp_write+0x5a4>)
 8012dbc:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8012dc0:	492d      	ldr	r1, [pc, #180]	; (8012e78 <tcp_write+0x5b8>)
 8012dc2:	482a      	ldr	r0, [pc, #168]	; (8012e6c <tcp_write+0x5ac>)
 8012dc4:	f008 f99e 	bl	801b104 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8012dc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012dca:	685b      	ldr	r3, [r3, #4]
 8012dcc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012dce:	4618      	mov	r0, r3
 8012dd0:	f7fb f8d2 	bl	800df78 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8012dd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012dd6:	891a      	ldrh	r2, [r3, #8]
 8012dd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012dda:	891b      	ldrh	r3, [r3, #8]
 8012ddc:	4413      	add	r3, r2
 8012dde:	b29a      	uxth	r2, r3
 8012de0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012de2:	811a      	strh	r2, [r3, #8]
 8012de4:	e037      	b.n	8012e56 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8012de6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d034      	beq.n	8012e56 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8012dec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d003      	beq.n	8012dfa <tcp_write+0x53a>
 8012df2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012df4:	685b      	ldr	r3, [r3, #4]
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	d106      	bne.n	8012e08 <tcp_write+0x548>
 8012dfa:	4b1a      	ldr	r3, [pc, #104]	; (8012e64 <tcp_write+0x5a4>)
 8012dfc:	f240 22e6 	movw	r2, #742	; 0x2e6
 8012e00:	491e      	ldr	r1, [pc, #120]	; (8012e7c <tcp_write+0x5bc>)
 8012e02:	481a      	ldr	r0, [pc, #104]	; (8012e6c <tcp_write+0x5ac>)
 8012e04:	f008 f97e 	bl	801b104 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012e08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e0a:	685b      	ldr	r3, [r3, #4]
 8012e0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8012e0e:	e009      	b.n	8012e24 <tcp_write+0x564>
      p->tot_len += extendlen;
 8012e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e12:	891a      	ldrh	r2, [r3, #8]
 8012e14:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012e16:	4413      	add	r3, r2
 8012e18:	b29a      	uxth	r2, r3
 8012e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e1c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e20:	681b      	ldr	r3, [r3, #0]
 8012e22:	62bb      	str	r3, [r7, #40]	; 0x28
 8012e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e26:	681b      	ldr	r3, [r3, #0]
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	d1f1      	bne.n	8012e10 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8012e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e2e:	891a      	ldrh	r2, [r3, #8]
 8012e30:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012e32:	4413      	add	r3, r2
 8012e34:	b29a      	uxth	r2, r3
 8012e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e38:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8012e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e3c:	895a      	ldrh	r2, [r3, #10]
 8012e3e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012e40:	4413      	add	r3, r2
 8012e42:	b29a      	uxth	r2, r3
 8012e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e46:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8012e48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e4a:	891a      	ldrh	r2, [r3, #8]
 8012e4c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012e4e:	4413      	add	r3, r2
 8012e50:	b29a      	uxth	r2, r3
 8012e52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e54:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8012e56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	d111      	bne.n	8012e80 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8012e5c:	68fb      	ldr	r3, [r7, #12]
 8012e5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012e60:	66da      	str	r2, [r3, #108]	; 0x6c
 8012e62:	e010      	b.n	8012e86 <tcp_write+0x5c6>
 8012e64:	0801db70 	.word	0x0801db70
 8012e68:	0801de10 	.word	0x0801de10
 8012e6c:	0801dbc4 	.word	0x0801dbc4
 8012e70:	0801de50 	.word	0x0801de50
 8012e74:	0801de60 	.word	0x0801de60
 8012e78:	0801de74 	.word	0x0801de74
 8012e7c:	0801deac 	.word	0x0801deac
  } else {
    last_unsent->next = queue;
 8012e80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012e84:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8012e86:	68fb      	ldr	r3, [r7, #12]
 8012e88:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012e8a:	88fb      	ldrh	r3, [r7, #6]
 8012e8c:	441a      	add	r2, r3
 8012e8e:	68fb      	ldr	r3, [r7, #12]
 8012e90:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8012e92:	68fb      	ldr	r3, [r7, #12]
 8012e94:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8012e98:	88fb      	ldrh	r3, [r7, #6]
 8012e9a:	1ad3      	subs	r3, r2, r3
 8012e9c:	b29a      	uxth	r2, r3
 8012e9e:	68fb      	ldr	r3, [r7, #12]
 8012ea0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8012ea4:	68fb      	ldr	r3, [r7, #12]
 8012ea6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8012eaa:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012eae:	68fb      	ldr	r3, [r7, #12]
 8012eb0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	d00e      	beq.n	8012ed6 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8012eb8:	68fb      	ldr	r3, [r7, #12]
 8012eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d10a      	bne.n	8012ed6 <tcp_write+0x616>
 8012ec0:	68fb      	ldr	r3, [r7, #12]
 8012ec2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	d106      	bne.n	8012ed6 <tcp_write+0x616>
 8012ec8:	4b2c      	ldr	r3, [pc, #176]	; (8012f7c <tcp_write+0x6bc>)
 8012eca:	f240 3212 	movw	r2, #786	; 0x312
 8012ece:	492c      	ldr	r1, [pc, #176]	; (8012f80 <tcp_write+0x6c0>)
 8012ed0:	482c      	ldr	r0, [pc, #176]	; (8012f84 <tcp_write+0x6c4>)
 8012ed2:	f008 f917 	bl	801b104 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8012ed6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d016      	beq.n	8012f0a <tcp_write+0x64a>
 8012edc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012ede:	68db      	ldr	r3, [r3, #12]
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d012      	beq.n	8012f0a <tcp_write+0x64a>
 8012ee4:	797b      	ldrb	r3, [r7, #5]
 8012ee6:	f003 0302 	and.w	r3, r3, #2
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d10d      	bne.n	8012f0a <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8012eee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012ef0:	68db      	ldr	r3, [r3, #12]
 8012ef2:	899b      	ldrh	r3, [r3, #12]
 8012ef4:	b29c      	uxth	r4, r3
 8012ef6:	2008      	movs	r0, #8
 8012ef8:	f7f9 fbc4 	bl	800c684 <lwip_htons>
 8012efc:	4603      	mov	r3, r0
 8012efe:	461a      	mov	r2, r3
 8012f00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f02:	68db      	ldr	r3, [r3, #12]
 8012f04:	4322      	orrs	r2, r4
 8012f06:	b292      	uxth	r2, r2
 8012f08:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8012f0a:	2300      	movs	r3, #0
 8012f0c:	e031      	b.n	8012f72 <tcp_write+0x6b2>
          goto memerr;
 8012f0e:	bf00      	nop
 8012f10:	e006      	b.n	8012f20 <tcp_write+0x660>
            goto memerr;
 8012f12:	bf00      	nop
 8012f14:	e004      	b.n	8012f20 <tcp_write+0x660>
        goto memerr;
 8012f16:	bf00      	nop
 8012f18:	e002      	b.n	8012f20 <tcp_write+0x660>
        goto memerr;
 8012f1a:	bf00      	nop
 8012f1c:	e000      	b.n	8012f20 <tcp_write+0x660>
      goto memerr;
 8012f1e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012f20:	68fb      	ldr	r3, [r7, #12]
 8012f22:	8b5b      	ldrh	r3, [r3, #26]
 8012f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012f28:	b29a      	uxth	r2, r3
 8012f2a:	68fb      	ldr	r3, [r7, #12]
 8012f2c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8012f2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d002      	beq.n	8012f3a <tcp_write+0x67a>
    pbuf_free(concat_p);
 8012f34:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012f36:	f7fa ff51 	bl	800dddc <pbuf_free>
  }
  if (queue != NULL) {
 8012f3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d002      	beq.n	8012f46 <tcp_write+0x686>
    tcp_segs_free(queue);
 8012f40:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8012f42:	f7fc fb6f 	bl	800f624 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8012f46:	68fb      	ldr	r3, [r7, #12]
 8012f48:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d00e      	beq.n	8012f6e <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8012f50:	68fb      	ldr	r3, [r7, #12]
 8012f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d10a      	bne.n	8012f6e <tcp_write+0x6ae>
 8012f58:	68fb      	ldr	r3, [r7, #12]
 8012f5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d106      	bne.n	8012f6e <tcp_write+0x6ae>
 8012f60:	4b06      	ldr	r3, [pc, #24]	; (8012f7c <tcp_write+0x6bc>)
 8012f62:	f240 3227 	movw	r2, #807	; 0x327
 8012f66:	4906      	ldr	r1, [pc, #24]	; (8012f80 <tcp_write+0x6c0>)
 8012f68:	4806      	ldr	r0, [pc, #24]	; (8012f84 <tcp_write+0x6c4>)
 8012f6a:	f008 f8cb 	bl	801b104 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8012f6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012f72:	4618      	mov	r0, r3
 8012f74:	375c      	adds	r7, #92	; 0x5c
 8012f76:	46bd      	mov	sp, r7
 8012f78:	bd90      	pop	{r4, r7, pc}
 8012f7a:	bf00      	nop
 8012f7c:	0801db70 	.word	0x0801db70
 8012f80:	0801dee4 	.word	0x0801dee4
 8012f84:	0801dbc4 	.word	0x0801dbc4

08012f88 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8012f88:	b590      	push	{r4, r7, lr}
 8012f8a:	b08b      	sub	sp, #44	; 0x2c
 8012f8c:	af02      	add	r7, sp, #8
 8012f8e:	6078      	str	r0, [r7, #4]
 8012f90:	460b      	mov	r3, r1
 8012f92:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8012f94:	2300      	movs	r3, #0
 8012f96:	61fb      	str	r3, [r7, #28]
 8012f98:	2300      	movs	r3, #0
 8012f9a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8012f9c:	2300      	movs	r3, #0
 8012f9e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d106      	bne.n	8012fb4 <tcp_split_unsent_seg+0x2c>
 8012fa6:	4b95      	ldr	r3, [pc, #596]	; (80131fc <tcp_split_unsent_seg+0x274>)
 8012fa8:	f240 324b 	movw	r2, #843	; 0x34b
 8012fac:	4994      	ldr	r1, [pc, #592]	; (8013200 <tcp_split_unsent_seg+0x278>)
 8012fae:	4895      	ldr	r0, [pc, #596]	; (8013204 <tcp_split_unsent_seg+0x27c>)
 8012fb0:	f008 f8a8 	bl	801b104 <iprintf>

  useg = pcb->unsent;
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012fb8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8012fba:	697b      	ldr	r3, [r7, #20]
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d102      	bne.n	8012fc6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8012fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8012fc4:	e116      	b.n	80131f4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8012fc6:	887b      	ldrh	r3, [r7, #2]
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d109      	bne.n	8012fe0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8012fcc:	4b8b      	ldr	r3, [pc, #556]	; (80131fc <tcp_split_unsent_seg+0x274>)
 8012fce:	f240 3253 	movw	r2, #851	; 0x353
 8012fd2:	498d      	ldr	r1, [pc, #564]	; (8013208 <tcp_split_unsent_seg+0x280>)
 8012fd4:	488b      	ldr	r0, [pc, #556]	; (8013204 <tcp_split_unsent_seg+0x27c>)
 8012fd6:	f008 f895 	bl	801b104 <iprintf>
    return ERR_VAL;
 8012fda:	f06f 0305 	mvn.w	r3, #5
 8012fde:	e109      	b.n	80131f4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8012fe0:	697b      	ldr	r3, [r7, #20]
 8012fe2:	891b      	ldrh	r3, [r3, #8]
 8012fe4:	887a      	ldrh	r2, [r7, #2]
 8012fe6:	429a      	cmp	r2, r3
 8012fe8:	d301      	bcc.n	8012fee <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8012fea:	2300      	movs	r3, #0
 8012fec:	e102      	b.n	80131f4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012ff2:	887a      	ldrh	r2, [r7, #2]
 8012ff4:	429a      	cmp	r2, r3
 8012ff6:	d906      	bls.n	8013006 <tcp_split_unsent_seg+0x7e>
 8012ff8:	4b80      	ldr	r3, [pc, #512]	; (80131fc <tcp_split_unsent_seg+0x274>)
 8012ffa:	f240 325b 	movw	r2, #859	; 0x35b
 8012ffe:	4983      	ldr	r1, [pc, #524]	; (801320c <tcp_split_unsent_seg+0x284>)
 8013000:	4880      	ldr	r0, [pc, #512]	; (8013204 <tcp_split_unsent_seg+0x27c>)
 8013002:	f008 f87f 	bl	801b104 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8013006:	697b      	ldr	r3, [r7, #20]
 8013008:	891b      	ldrh	r3, [r3, #8]
 801300a:	2b00      	cmp	r3, #0
 801300c:	d106      	bne.n	801301c <tcp_split_unsent_seg+0x94>
 801300e:	4b7b      	ldr	r3, [pc, #492]	; (80131fc <tcp_split_unsent_seg+0x274>)
 8013010:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8013014:	497e      	ldr	r1, [pc, #504]	; (8013210 <tcp_split_unsent_seg+0x288>)
 8013016:	487b      	ldr	r0, [pc, #492]	; (8013204 <tcp_split_unsent_seg+0x27c>)
 8013018:	f008 f874 	bl	801b104 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801301c:	697b      	ldr	r3, [r7, #20]
 801301e:	7a9b      	ldrb	r3, [r3, #10]
 8013020:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8013022:	7bfb      	ldrb	r3, [r7, #15]
 8013024:	009b      	lsls	r3, r3, #2
 8013026:	b2db      	uxtb	r3, r3
 8013028:	f003 0304 	and.w	r3, r3, #4
 801302c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801302e:	697b      	ldr	r3, [r7, #20]
 8013030:	891a      	ldrh	r2, [r3, #8]
 8013032:	887b      	ldrh	r3, [r7, #2]
 8013034:	1ad3      	subs	r3, r2, r3
 8013036:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8013038:	7bbb      	ldrb	r3, [r7, #14]
 801303a:	b29a      	uxth	r2, r3
 801303c:	89bb      	ldrh	r3, [r7, #12]
 801303e:	4413      	add	r3, r2
 8013040:	b29b      	uxth	r3, r3
 8013042:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013046:	4619      	mov	r1, r3
 8013048:	2036      	movs	r0, #54	; 0x36
 801304a:	f7fa fbe3 	bl	800d814 <pbuf_alloc>
 801304e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013050:	693b      	ldr	r3, [r7, #16]
 8013052:	2b00      	cmp	r3, #0
 8013054:	f000 80b7 	beq.w	80131c6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8013058:	697b      	ldr	r3, [r7, #20]
 801305a:	685b      	ldr	r3, [r3, #4]
 801305c:	891a      	ldrh	r2, [r3, #8]
 801305e:	697b      	ldr	r3, [r7, #20]
 8013060:	891b      	ldrh	r3, [r3, #8]
 8013062:	1ad3      	subs	r3, r2, r3
 8013064:	b29a      	uxth	r2, r3
 8013066:	887b      	ldrh	r3, [r7, #2]
 8013068:	4413      	add	r3, r2
 801306a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801306c:	697b      	ldr	r3, [r7, #20]
 801306e:	6858      	ldr	r0, [r3, #4]
 8013070:	693b      	ldr	r3, [r7, #16]
 8013072:	685a      	ldr	r2, [r3, #4]
 8013074:	7bbb      	ldrb	r3, [r7, #14]
 8013076:	18d1      	adds	r1, r2, r3
 8013078:	897b      	ldrh	r3, [r7, #10]
 801307a:	89ba      	ldrh	r2, [r7, #12]
 801307c:	f7fb f8a4 	bl	800e1c8 <pbuf_copy_partial>
 8013080:	4603      	mov	r3, r0
 8013082:	461a      	mov	r2, r3
 8013084:	89bb      	ldrh	r3, [r7, #12]
 8013086:	4293      	cmp	r3, r2
 8013088:	f040 809f 	bne.w	80131ca <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801308c:	697b      	ldr	r3, [r7, #20]
 801308e:	68db      	ldr	r3, [r3, #12]
 8013090:	899b      	ldrh	r3, [r3, #12]
 8013092:	b29b      	uxth	r3, r3
 8013094:	4618      	mov	r0, r3
 8013096:	f7f9 faf5 	bl	800c684 <lwip_htons>
 801309a:	4603      	mov	r3, r0
 801309c:	b2db      	uxtb	r3, r3
 801309e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80130a2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80130a4:	2300      	movs	r3, #0
 80130a6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80130a8:	7efb      	ldrb	r3, [r7, #27]
 80130aa:	f003 0308 	and.w	r3, r3, #8
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	d007      	beq.n	80130c2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80130b2:	7efb      	ldrb	r3, [r7, #27]
 80130b4:	f023 0308 	bic.w	r3, r3, #8
 80130b8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80130ba:	7ebb      	ldrb	r3, [r7, #26]
 80130bc:	f043 0308 	orr.w	r3, r3, #8
 80130c0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80130c2:	7efb      	ldrb	r3, [r7, #27]
 80130c4:	f003 0301 	and.w	r3, r3, #1
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	d007      	beq.n	80130dc <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80130cc:	7efb      	ldrb	r3, [r7, #27]
 80130ce:	f023 0301 	bic.w	r3, r3, #1
 80130d2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80130d4:	7ebb      	ldrb	r3, [r7, #26]
 80130d6:	f043 0301 	orr.w	r3, r3, #1
 80130da:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80130dc:	697b      	ldr	r3, [r7, #20]
 80130de:	68db      	ldr	r3, [r3, #12]
 80130e0:	685b      	ldr	r3, [r3, #4]
 80130e2:	4618      	mov	r0, r3
 80130e4:	f7f9 fae3 	bl	800c6ae <lwip_htonl>
 80130e8:	4602      	mov	r2, r0
 80130ea:	887b      	ldrh	r3, [r7, #2]
 80130ec:	18d1      	adds	r1, r2, r3
 80130ee:	7eba      	ldrb	r2, [r7, #26]
 80130f0:	7bfb      	ldrb	r3, [r7, #15]
 80130f2:	9300      	str	r3, [sp, #0]
 80130f4:	460b      	mov	r3, r1
 80130f6:	6939      	ldr	r1, [r7, #16]
 80130f8:	6878      	ldr	r0, [r7, #4]
 80130fa:	f7ff fa4f 	bl	801259c <tcp_create_segment>
 80130fe:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8013100:	69fb      	ldr	r3, [r7, #28]
 8013102:	2b00      	cmp	r3, #0
 8013104:	d063      	beq.n	80131ce <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8013106:	697b      	ldr	r3, [r7, #20]
 8013108:	685b      	ldr	r3, [r3, #4]
 801310a:	4618      	mov	r0, r3
 801310c:	f7fa fef4 	bl	800def8 <pbuf_clen>
 8013110:	4603      	mov	r3, r0
 8013112:	461a      	mov	r2, r3
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801311a:	1a9b      	subs	r3, r3, r2
 801311c:	b29a      	uxth	r2, r3
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8013124:	697b      	ldr	r3, [r7, #20]
 8013126:	6858      	ldr	r0, [r3, #4]
 8013128:	697b      	ldr	r3, [r7, #20]
 801312a:	685b      	ldr	r3, [r3, #4]
 801312c:	891a      	ldrh	r2, [r3, #8]
 801312e:	89bb      	ldrh	r3, [r7, #12]
 8013130:	1ad3      	subs	r3, r2, r3
 8013132:	b29b      	uxth	r3, r3
 8013134:	4619      	mov	r1, r3
 8013136:	f7fa fccb 	bl	800dad0 <pbuf_realloc>
  useg->len -= remainder;
 801313a:	697b      	ldr	r3, [r7, #20]
 801313c:	891a      	ldrh	r2, [r3, #8]
 801313e:	89bb      	ldrh	r3, [r7, #12]
 8013140:	1ad3      	subs	r3, r2, r3
 8013142:	b29a      	uxth	r2, r3
 8013144:	697b      	ldr	r3, [r7, #20]
 8013146:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8013148:	697b      	ldr	r3, [r7, #20]
 801314a:	68db      	ldr	r3, [r3, #12]
 801314c:	899b      	ldrh	r3, [r3, #12]
 801314e:	b29c      	uxth	r4, r3
 8013150:	7efb      	ldrb	r3, [r7, #27]
 8013152:	b29b      	uxth	r3, r3
 8013154:	4618      	mov	r0, r3
 8013156:	f7f9 fa95 	bl	800c684 <lwip_htons>
 801315a:	4603      	mov	r3, r0
 801315c:	461a      	mov	r2, r3
 801315e:	697b      	ldr	r3, [r7, #20]
 8013160:	68db      	ldr	r3, [r3, #12]
 8013162:	4322      	orrs	r2, r4
 8013164:	b292      	uxth	r2, r2
 8013166:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8013168:	697b      	ldr	r3, [r7, #20]
 801316a:	685b      	ldr	r3, [r3, #4]
 801316c:	4618      	mov	r0, r3
 801316e:	f7fa fec3 	bl	800def8 <pbuf_clen>
 8013172:	4603      	mov	r3, r0
 8013174:	461a      	mov	r2, r3
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801317c:	4413      	add	r3, r2
 801317e:	b29a      	uxth	r2, r3
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013186:	69fb      	ldr	r3, [r7, #28]
 8013188:	685b      	ldr	r3, [r3, #4]
 801318a:	4618      	mov	r0, r3
 801318c:	f7fa feb4 	bl	800def8 <pbuf_clen>
 8013190:	4603      	mov	r3, r0
 8013192:	461a      	mov	r2, r3
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801319a:	4413      	add	r3, r2
 801319c:	b29a      	uxth	r2, r3
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80131a4:	697b      	ldr	r3, [r7, #20]
 80131a6:	681a      	ldr	r2, [r3, #0]
 80131a8:	69fb      	ldr	r3, [r7, #28]
 80131aa:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80131ac:	697b      	ldr	r3, [r7, #20]
 80131ae:	69fa      	ldr	r2, [r7, #28]
 80131b0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80131b2:	69fb      	ldr	r3, [r7, #28]
 80131b4:	681b      	ldr	r3, [r3, #0]
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d103      	bne.n	80131c2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	2200      	movs	r2, #0
 80131be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80131c2:	2300      	movs	r3, #0
 80131c4:	e016      	b.n	80131f4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80131c6:	bf00      	nop
 80131c8:	e002      	b.n	80131d0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80131ca:	bf00      	nop
 80131cc:	e000      	b.n	80131d0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80131ce:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80131d0:	69fb      	ldr	r3, [r7, #28]
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d006      	beq.n	80131e4 <tcp_split_unsent_seg+0x25c>
 80131d6:	4b09      	ldr	r3, [pc, #36]	; (80131fc <tcp_split_unsent_seg+0x274>)
 80131d8:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80131dc:	490d      	ldr	r1, [pc, #52]	; (8013214 <tcp_split_unsent_seg+0x28c>)
 80131de:	4809      	ldr	r0, [pc, #36]	; (8013204 <tcp_split_unsent_seg+0x27c>)
 80131e0:	f007 ff90 	bl	801b104 <iprintf>
  if (p != NULL) {
 80131e4:	693b      	ldr	r3, [r7, #16]
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	d002      	beq.n	80131f0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80131ea:	6938      	ldr	r0, [r7, #16]
 80131ec:	f7fa fdf6 	bl	800dddc <pbuf_free>
  }

  return ERR_MEM;
 80131f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80131f4:	4618      	mov	r0, r3
 80131f6:	3724      	adds	r7, #36	; 0x24
 80131f8:	46bd      	mov	sp, r7
 80131fa:	bd90      	pop	{r4, r7, pc}
 80131fc:	0801db70 	.word	0x0801db70
 8013200:	0801df04 	.word	0x0801df04
 8013204:	0801dbc4 	.word	0x0801dbc4
 8013208:	0801df28 	.word	0x0801df28
 801320c:	0801df4c 	.word	0x0801df4c
 8013210:	0801df5c 	.word	0x0801df5c
 8013214:	0801df6c 	.word	0x0801df6c

08013218 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8013218:	b590      	push	{r4, r7, lr}
 801321a:	b085      	sub	sp, #20
 801321c:	af00      	add	r7, sp, #0
 801321e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	2b00      	cmp	r3, #0
 8013224:	d106      	bne.n	8013234 <tcp_send_fin+0x1c>
 8013226:	4b21      	ldr	r3, [pc, #132]	; (80132ac <tcp_send_fin+0x94>)
 8013228:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801322c:	4920      	ldr	r1, [pc, #128]	; (80132b0 <tcp_send_fin+0x98>)
 801322e:	4821      	ldr	r0, [pc, #132]	; (80132b4 <tcp_send_fin+0x9c>)
 8013230:	f007 ff68 	bl	801b104 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013238:	2b00      	cmp	r3, #0
 801323a:	d02e      	beq.n	801329a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013240:	60fb      	str	r3, [r7, #12]
 8013242:	e002      	b.n	801324a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8013244:	68fb      	ldr	r3, [r7, #12]
 8013246:	681b      	ldr	r3, [r3, #0]
 8013248:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801324a:	68fb      	ldr	r3, [r7, #12]
 801324c:	681b      	ldr	r3, [r3, #0]
 801324e:	2b00      	cmp	r3, #0
 8013250:	d1f8      	bne.n	8013244 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8013252:	68fb      	ldr	r3, [r7, #12]
 8013254:	68db      	ldr	r3, [r3, #12]
 8013256:	899b      	ldrh	r3, [r3, #12]
 8013258:	b29b      	uxth	r3, r3
 801325a:	4618      	mov	r0, r3
 801325c:	f7f9 fa12 	bl	800c684 <lwip_htons>
 8013260:	4603      	mov	r3, r0
 8013262:	b2db      	uxtb	r3, r3
 8013264:	f003 0307 	and.w	r3, r3, #7
 8013268:	2b00      	cmp	r3, #0
 801326a:	d116      	bne.n	801329a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801326c:	68fb      	ldr	r3, [r7, #12]
 801326e:	68db      	ldr	r3, [r3, #12]
 8013270:	899b      	ldrh	r3, [r3, #12]
 8013272:	b29c      	uxth	r4, r3
 8013274:	2001      	movs	r0, #1
 8013276:	f7f9 fa05 	bl	800c684 <lwip_htons>
 801327a:	4603      	mov	r3, r0
 801327c:	461a      	mov	r2, r3
 801327e:	68fb      	ldr	r3, [r7, #12]
 8013280:	68db      	ldr	r3, [r3, #12]
 8013282:	4322      	orrs	r2, r4
 8013284:	b292      	uxth	r2, r2
 8013286:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	8b5b      	ldrh	r3, [r3, #26]
 801328c:	f043 0320 	orr.w	r3, r3, #32
 8013290:	b29a      	uxth	r2, r3
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8013296:	2300      	movs	r3, #0
 8013298:	e004      	b.n	80132a4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801329a:	2101      	movs	r1, #1
 801329c:	6878      	ldr	r0, [r7, #4]
 801329e:	f000 f80b 	bl	80132b8 <tcp_enqueue_flags>
 80132a2:	4603      	mov	r3, r0
}
 80132a4:	4618      	mov	r0, r3
 80132a6:	3714      	adds	r7, #20
 80132a8:	46bd      	mov	sp, r7
 80132aa:	bd90      	pop	{r4, r7, pc}
 80132ac:	0801db70 	.word	0x0801db70
 80132b0:	0801df78 	.word	0x0801df78
 80132b4:	0801dbc4 	.word	0x0801dbc4

080132b8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80132b8:	b580      	push	{r7, lr}
 80132ba:	b08a      	sub	sp, #40	; 0x28
 80132bc:	af02      	add	r7, sp, #8
 80132be:	6078      	str	r0, [r7, #4]
 80132c0:	460b      	mov	r3, r1
 80132c2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80132c4:	2300      	movs	r3, #0
 80132c6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80132c8:	2300      	movs	r3, #0
 80132ca:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80132cc:	78fb      	ldrb	r3, [r7, #3]
 80132ce:	f003 0303 	and.w	r3, r3, #3
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d106      	bne.n	80132e4 <tcp_enqueue_flags+0x2c>
 80132d6:	4b67      	ldr	r3, [pc, #412]	; (8013474 <tcp_enqueue_flags+0x1bc>)
 80132d8:	f240 4211 	movw	r2, #1041	; 0x411
 80132dc:	4966      	ldr	r1, [pc, #408]	; (8013478 <tcp_enqueue_flags+0x1c0>)
 80132de:	4867      	ldr	r0, [pc, #412]	; (801347c <tcp_enqueue_flags+0x1c4>)
 80132e0:	f007 ff10 	bl	801b104 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d106      	bne.n	80132f8 <tcp_enqueue_flags+0x40>
 80132ea:	4b62      	ldr	r3, [pc, #392]	; (8013474 <tcp_enqueue_flags+0x1bc>)
 80132ec:	f240 4213 	movw	r2, #1043	; 0x413
 80132f0:	4963      	ldr	r1, [pc, #396]	; (8013480 <tcp_enqueue_flags+0x1c8>)
 80132f2:	4862      	ldr	r0, [pc, #392]	; (801347c <tcp_enqueue_flags+0x1c4>)
 80132f4:	f007 ff06 	bl	801b104 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80132f8:	78fb      	ldrb	r3, [r7, #3]
 80132fa:	f003 0302 	and.w	r3, r3, #2
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d001      	beq.n	8013306 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8013302:	2301      	movs	r3, #1
 8013304:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013306:	7ffb      	ldrb	r3, [r7, #31]
 8013308:	009b      	lsls	r3, r3, #2
 801330a:	b2db      	uxtb	r3, r3
 801330c:	f003 0304 	and.w	r3, r3, #4
 8013310:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013312:	7dfb      	ldrb	r3, [r7, #23]
 8013314:	b29b      	uxth	r3, r3
 8013316:	f44f 7220 	mov.w	r2, #640	; 0x280
 801331a:	4619      	mov	r1, r3
 801331c:	2036      	movs	r0, #54	; 0x36
 801331e:	f7fa fa79 	bl	800d814 <pbuf_alloc>
 8013322:	6138      	str	r0, [r7, #16]
 8013324:	693b      	ldr	r3, [r7, #16]
 8013326:	2b00      	cmp	r3, #0
 8013328:	d109      	bne.n	801333e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	8b5b      	ldrh	r3, [r3, #26]
 801332e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013332:	b29a      	uxth	r2, r3
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013338:	f04f 33ff 	mov.w	r3, #4294967295
 801333c:	e095      	b.n	801346a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801333e:	693b      	ldr	r3, [r7, #16]
 8013340:	895a      	ldrh	r2, [r3, #10]
 8013342:	7dfb      	ldrb	r3, [r7, #23]
 8013344:	b29b      	uxth	r3, r3
 8013346:	429a      	cmp	r2, r3
 8013348:	d206      	bcs.n	8013358 <tcp_enqueue_flags+0xa0>
 801334a:	4b4a      	ldr	r3, [pc, #296]	; (8013474 <tcp_enqueue_flags+0x1bc>)
 801334c:	f240 4239 	movw	r2, #1081	; 0x439
 8013350:	494c      	ldr	r1, [pc, #304]	; (8013484 <tcp_enqueue_flags+0x1cc>)
 8013352:	484a      	ldr	r0, [pc, #296]	; (801347c <tcp_enqueue_flags+0x1c4>)
 8013354:	f007 fed6 	bl	801b104 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801335c:	78fa      	ldrb	r2, [r7, #3]
 801335e:	7ffb      	ldrb	r3, [r7, #31]
 8013360:	9300      	str	r3, [sp, #0]
 8013362:	460b      	mov	r3, r1
 8013364:	6939      	ldr	r1, [r7, #16]
 8013366:	6878      	ldr	r0, [r7, #4]
 8013368:	f7ff f918 	bl	801259c <tcp_create_segment>
 801336c:	60f8      	str	r0, [r7, #12]
 801336e:	68fb      	ldr	r3, [r7, #12]
 8013370:	2b00      	cmp	r3, #0
 8013372:	d109      	bne.n	8013388 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	8b5b      	ldrh	r3, [r3, #26]
 8013378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801337c:	b29a      	uxth	r2, r3
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013382:	f04f 33ff 	mov.w	r3, #4294967295
 8013386:	e070      	b.n	801346a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8013388:	68fb      	ldr	r3, [r7, #12]
 801338a:	68db      	ldr	r3, [r3, #12]
 801338c:	f003 0303 	and.w	r3, r3, #3
 8013390:	2b00      	cmp	r3, #0
 8013392:	d006      	beq.n	80133a2 <tcp_enqueue_flags+0xea>
 8013394:	4b37      	ldr	r3, [pc, #220]	; (8013474 <tcp_enqueue_flags+0x1bc>)
 8013396:	f240 4242 	movw	r2, #1090	; 0x442
 801339a:	493b      	ldr	r1, [pc, #236]	; (8013488 <tcp_enqueue_flags+0x1d0>)
 801339c:	4837      	ldr	r0, [pc, #220]	; (801347c <tcp_enqueue_flags+0x1c4>)
 801339e:	f007 feb1 	bl	801b104 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80133a2:	68fb      	ldr	r3, [r7, #12]
 80133a4:	891b      	ldrh	r3, [r3, #8]
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d006      	beq.n	80133b8 <tcp_enqueue_flags+0x100>
 80133aa:	4b32      	ldr	r3, [pc, #200]	; (8013474 <tcp_enqueue_flags+0x1bc>)
 80133ac:	f240 4243 	movw	r2, #1091	; 0x443
 80133b0:	4936      	ldr	r1, [pc, #216]	; (801348c <tcp_enqueue_flags+0x1d4>)
 80133b2:	4832      	ldr	r0, [pc, #200]	; (801347c <tcp_enqueue_flags+0x1c4>)
 80133b4:	f007 fea6 	bl	801b104 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d103      	bne.n	80133c8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	68fa      	ldr	r2, [r7, #12]
 80133c4:	66da      	str	r2, [r3, #108]	; 0x6c
 80133c6:	e00d      	b.n	80133e4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80133cc:	61bb      	str	r3, [r7, #24]
 80133ce:	e002      	b.n	80133d6 <tcp_enqueue_flags+0x11e>
 80133d0:	69bb      	ldr	r3, [r7, #24]
 80133d2:	681b      	ldr	r3, [r3, #0]
 80133d4:	61bb      	str	r3, [r7, #24]
 80133d6:	69bb      	ldr	r3, [r7, #24]
 80133d8:	681b      	ldr	r3, [r3, #0]
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d1f8      	bne.n	80133d0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80133de:	69bb      	ldr	r3, [r7, #24]
 80133e0:	68fa      	ldr	r2, [r7, #12]
 80133e2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	2200      	movs	r2, #0
 80133e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80133ec:	78fb      	ldrb	r3, [r7, #3]
 80133ee:	f003 0302 	and.w	r3, r3, #2
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d104      	bne.n	8013400 <tcp_enqueue_flags+0x148>
 80133f6:	78fb      	ldrb	r3, [r7, #3]
 80133f8:	f003 0301 	and.w	r3, r3, #1
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d004      	beq.n	801340a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013404:	1c5a      	adds	r2, r3, #1
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801340a:	78fb      	ldrb	r3, [r7, #3]
 801340c:	f003 0301 	and.w	r3, r3, #1
 8013410:	2b00      	cmp	r3, #0
 8013412:	d006      	beq.n	8013422 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	8b5b      	ldrh	r3, [r3, #26]
 8013418:	f043 0320 	orr.w	r3, r3, #32
 801341c:	b29a      	uxth	r2, r3
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013422:	68fb      	ldr	r3, [r7, #12]
 8013424:	685b      	ldr	r3, [r3, #4]
 8013426:	4618      	mov	r0, r3
 8013428:	f7fa fd66 	bl	800def8 <pbuf_clen>
 801342c:	4603      	mov	r3, r0
 801342e:	461a      	mov	r2, r3
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013436:	4413      	add	r3, r2
 8013438:	b29a      	uxth	r2, r3
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013446:	2b00      	cmp	r3, #0
 8013448:	d00e      	beq.n	8013468 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801344e:	2b00      	cmp	r3, #0
 8013450:	d10a      	bne.n	8013468 <tcp_enqueue_flags+0x1b0>
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013456:	2b00      	cmp	r3, #0
 8013458:	d106      	bne.n	8013468 <tcp_enqueue_flags+0x1b0>
 801345a:	4b06      	ldr	r3, [pc, #24]	; (8013474 <tcp_enqueue_flags+0x1bc>)
 801345c:	f240 4265 	movw	r2, #1125	; 0x465
 8013460:	490b      	ldr	r1, [pc, #44]	; (8013490 <tcp_enqueue_flags+0x1d8>)
 8013462:	4806      	ldr	r0, [pc, #24]	; (801347c <tcp_enqueue_flags+0x1c4>)
 8013464:	f007 fe4e 	bl	801b104 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8013468:	2300      	movs	r3, #0
}
 801346a:	4618      	mov	r0, r3
 801346c:	3720      	adds	r7, #32
 801346e:	46bd      	mov	sp, r7
 8013470:	bd80      	pop	{r7, pc}
 8013472:	bf00      	nop
 8013474:	0801db70 	.word	0x0801db70
 8013478:	0801df94 	.word	0x0801df94
 801347c:	0801dbc4 	.word	0x0801dbc4
 8013480:	0801dfec 	.word	0x0801dfec
 8013484:	0801e00c 	.word	0x0801e00c
 8013488:	0801e048 	.word	0x0801e048
 801348c:	0801e060 	.word	0x0801e060
 8013490:	0801e08c 	.word	0x0801e08c

08013494 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8013494:	b5b0      	push	{r4, r5, r7, lr}
 8013496:	b08a      	sub	sp, #40	; 0x28
 8013498:	af00      	add	r7, sp, #0
 801349a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	2b00      	cmp	r3, #0
 80134a0:	d106      	bne.n	80134b0 <tcp_output+0x1c>
 80134a2:	4b9e      	ldr	r3, [pc, #632]	; (801371c <tcp_output+0x288>)
 80134a4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80134a8:	499d      	ldr	r1, [pc, #628]	; (8013720 <tcp_output+0x28c>)
 80134aa:	489e      	ldr	r0, [pc, #632]	; (8013724 <tcp_output+0x290>)
 80134ac:	f007 fe2a 	bl	801b104 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	7d1b      	ldrb	r3, [r3, #20]
 80134b4:	2b01      	cmp	r3, #1
 80134b6:	d106      	bne.n	80134c6 <tcp_output+0x32>
 80134b8:	4b98      	ldr	r3, [pc, #608]	; (801371c <tcp_output+0x288>)
 80134ba:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80134be:	499a      	ldr	r1, [pc, #616]	; (8013728 <tcp_output+0x294>)
 80134c0:	4898      	ldr	r0, [pc, #608]	; (8013724 <tcp_output+0x290>)
 80134c2:	f007 fe1f 	bl	801b104 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80134c6:	4b99      	ldr	r3, [pc, #612]	; (801372c <tcp_output+0x298>)
 80134c8:	681b      	ldr	r3, [r3, #0]
 80134ca:	687a      	ldr	r2, [r7, #4]
 80134cc:	429a      	cmp	r2, r3
 80134ce:	d101      	bne.n	80134d4 <tcp_output+0x40>
    return ERR_OK;
 80134d0:	2300      	movs	r3, #0
 80134d2:	e1ce      	b.n	8013872 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80134e0:	4293      	cmp	r3, r2
 80134e2:	bf28      	it	cs
 80134e4:	4613      	movcs	r3, r2
 80134e6:	b29b      	uxth	r3, r3
 80134e8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80134ee:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80134f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	d10b      	bne.n	801350e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	8b5b      	ldrh	r3, [r3, #26]
 80134fa:	f003 0302 	and.w	r3, r3, #2
 80134fe:	2b00      	cmp	r3, #0
 8013500:	f000 81aa 	beq.w	8013858 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8013504:	6878      	ldr	r0, [r7, #4]
 8013506:	f000 fdcb 	bl	80140a0 <tcp_send_empty_ack>
 801350a:	4603      	mov	r3, r0
 801350c:	e1b1      	b.n	8013872 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801350e:	6879      	ldr	r1, [r7, #4]
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	3304      	adds	r3, #4
 8013514:	461a      	mov	r2, r3
 8013516:	6878      	ldr	r0, [r7, #4]
 8013518:	f7ff f824 	bl	8012564 <tcp_route>
 801351c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801351e:	697b      	ldr	r3, [r7, #20]
 8013520:	2b00      	cmp	r3, #0
 8013522:	d102      	bne.n	801352a <tcp_output+0x96>
    return ERR_RTE;
 8013524:	f06f 0303 	mvn.w	r3, #3
 8013528:	e1a3      	b.n	8013872 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	2b00      	cmp	r3, #0
 801352e:	d003      	beq.n	8013538 <tcp_output+0xa4>
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	681b      	ldr	r3, [r3, #0]
 8013534:	2b00      	cmp	r3, #0
 8013536:	d111      	bne.n	801355c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8013538:	697b      	ldr	r3, [r7, #20]
 801353a:	2b00      	cmp	r3, #0
 801353c:	d002      	beq.n	8013544 <tcp_output+0xb0>
 801353e:	697b      	ldr	r3, [r7, #20]
 8013540:	3304      	adds	r3, #4
 8013542:	e000      	b.n	8013546 <tcp_output+0xb2>
 8013544:	2300      	movs	r3, #0
 8013546:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8013548:	693b      	ldr	r3, [r7, #16]
 801354a:	2b00      	cmp	r3, #0
 801354c:	d102      	bne.n	8013554 <tcp_output+0xc0>
      return ERR_RTE;
 801354e:	f06f 0303 	mvn.w	r3, #3
 8013552:	e18e      	b.n	8013872 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8013554:	693b      	ldr	r3, [r7, #16]
 8013556:	681a      	ldr	r2, [r3, #0]
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801355c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801355e:	68db      	ldr	r3, [r3, #12]
 8013560:	685b      	ldr	r3, [r3, #4]
 8013562:	4618      	mov	r0, r3
 8013564:	f7f9 f8a3 	bl	800c6ae <lwip_htonl>
 8013568:	4602      	mov	r2, r0
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801356e:	1ad3      	subs	r3, r2, r3
 8013570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013572:	8912      	ldrh	r2, [r2, #8]
 8013574:	4413      	add	r3, r2
 8013576:	69ba      	ldr	r2, [r7, #24]
 8013578:	429a      	cmp	r2, r3
 801357a:	d227      	bcs.n	80135cc <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013582:	461a      	mov	r2, r3
 8013584:	69bb      	ldr	r3, [r7, #24]
 8013586:	4293      	cmp	r3, r2
 8013588:	d114      	bne.n	80135b4 <tcp_output+0x120>
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801358e:	2b00      	cmp	r3, #0
 8013590:	d110      	bne.n	80135b4 <tcp_output+0x120>
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013598:	2b00      	cmp	r3, #0
 801359a:	d10b      	bne.n	80135b4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	2200      	movs	r2, #0
 80135a0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	2201      	movs	r2, #1
 80135a8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	2200      	movs	r2, #0
 80135b0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	8b5b      	ldrh	r3, [r3, #26]
 80135b8:	f003 0302 	and.w	r3, r3, #2
 80135bc:	2b00      	cmp	r3, #0
 80135be:	f000 814d 	beq.w	801385c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80135c2:	6878      	ldr	r0, [r7, #4]
 80135c4:	f000 fd6c 	bl	80140a0 <tcp_send_empty_ack>
 80135c8:	4603      	mov	r3, r0
 80135ca:	e152      	b.n	8013872 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	2200      	movs	r2, #0
 80135d0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80135d8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80135da:	6a3b      	ldr	r3, [r7, #32]
 80135dc:	2b00      	cmp	r3, #0
 80135de:	f000 811c 	beq.w	801381a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80135e2:	e002      	b.n	80135ea <tcp_output+0x156>
 80135e4:	6a3b      	ldr	r3, [r7, #32]
 80135e6:	681b      	ldr	r3, [r3, #0]
 80135e8:	623b      	str	r3, [r7, #32]
 80135ea:	6a3b      	ldr	r3, [r7, #32]
 80135ec:	681b      	ldr	r3, [r3, #0]
 80135ee:	2b00      	cmp	r3, #0
 80135f0:	d1f8      	bne.n	80135e4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80135f2:	e112      	b.n	801381a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80135f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135f6:	68db      	ldr	r3, [r3, #12]
 80135f8:	899b      	ldrh	r3, [r3, #12]
 80135fa:	b29b      	uxth	r3, r3
 80135fc:	4618      	mov	r0, r3
 80135fe:	f7f9 f841 	bl	800c684 <lwip_htons>
 8013602:	4603      	mov	r3, r0
 8013604:	b2db      	uxtb	r3, r3
 8013606:	f003 0304 	and.w	r3, r3, #4
 801360a:	2b00      	cmp	r3, #0
 801360c:	d006      	beq.n	801361c <tcp_output+0x188>
 801360e:	4b43      	ldr	r3, [pc, #268]	; (801371c <tcp_output+0x288>)
 8013610:	f240 5236 	movw	r2, #1334	; 0x536
 8013614:	4946      	ldr	r1, [pc, #280]	; (8013730 <tcp_output+0x29c>)
 8013616:	4843      	ldr	r0, [pc, #268]	; (8013724 <tcp_output+0x290>)
 8013618:	f007 fd74 	bl	801b104 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013620:	2b00      	cmp	r3, #0
 8013622:	d01f      	beq.n	8013664 <tcp_output+0x1d0>
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	8b5b      	ldrh	r3, [r3, #26]
 8013628:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801362c:	2b00      	cmp	r3, #0
 801362e:	d119      	bne.n	8013664 <tcp_output+0x1d0>
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013634:	2b00      	cmp	r3, #0
 8013636:	d00b      	beq.n	8013650 <tcp_output+0x1bc>
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801363c:	681b      	ldr	r3, [r3, #0]
 801363e:	2b00      	cmp	r3, #0
 8013640:	d110      	bne.n	8013664 <tcp_output+0x1d0>
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013646:	891a      	ldrh	r2, [r3, #8]
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801364c:	429a      	cmp	r2, r3
 801364e:	d209      	bcs.n	8013664 <tcp_output+0x1d0>
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8013656:	2b00      	cmp	r3, #0
 8013658:	d004      	beq.n	8013664 <tcp_output+0x1d0>
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013660:	2b08      	cmp	r3, #8
 8013662:	d901      	bls.n	8013668 <tcp_output+0x1d4>
 8013664:	2301      	movs	r3, #1
 8013666:	e000      	b.n	801366a <tcp_output+0x1d6>
 8013668:	2300      	movs	r3, #0
 801366a:	2b00      	cmp	r3, #0
 801366c:	d106      	bne.n	801367c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	8b5b      	ldrh	r3, [r3, #26]
 8013672:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013676:	2b00      	cmp	r3, #0
 8013678:	f000 80e4 	beq.w	8013844 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	7d1b      	ldrb	r3, [r3, #20]
 8013680:	2b02      	cmp	r3, #2
 8013682:	d00d      	beq.n	80136a0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8013684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013686:	68db      	ldr	r3, [r3, #12]
 8013688:	899b      	ldrh	r3, [r3, #12]
 801368a:	b29c      	uxth	r4, r3
 801368c:	2010      	movs	r0, #16
 801368e:	f7f8 fff9 	bl	800c684 <lwip_htons>
 8013692:	4603      	mov	r3, r0
 8013694:	461a      	mov	r2, r3
 8013696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013698:	68db      	ldr	r3, [r3, #12]
 801369a:	4322      	orrs	r2, r4
 801369c:	b292      	uxth	r2, r2
 801369e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80136a0:	697a      	ldr	r2, [r7, #20]
 80136a2:	6879      	ldr	r1, [r7, #4]
 80136a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80136a6:	f000 f909 	bl	80138bc <tcp_output_segment>
 80136aa:	4603      	mov	r3, r0
 80136ac:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80136ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	d009      	beq.n	80136ca <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	8b5b      	ldrh	r3, [r3, #26]
 80136ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80136be:	b29a      	uxth	r2, r3
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	835a      	strh	r2, [r3, #26]
      return err;
 80136c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80136c8:	e0d3      	b.n	8013872 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80136ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136cc:	681a      	ldr	r2, [r3, #0]
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	7d1b      	ldrb	r3, [r3, #20]
 80136d6:	2b02      	cmp	r3, #2
 80136d8:	d006      	beq.n	80136e8 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	8b5b      	ldrh	r3, [r3, #26]
 80136de:	f023 0303 	bic.w	r3, r3, #3
 80136e2:	b29a      	uxth	r2, r3
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80136e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136ea:	68db      	ldr	r3, [r3, #12]
 80136ec:	685b      	ldr	r3, [r3, #4]
 80136ee:	4618      	mov	r0, r3
 80136f0:	f7f8 ffdd 	bl	800c6ae <lwip_htonl>
 80136f4:	4604      	mov	r4, r0
 80136f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136f8:	891b      	ldrh	r3, [r3, #8]
 80136fa:	461d      	mov	r5, r3
 80136fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136fe:	68db      	ldr	r3, [r3, #12]
 8013700:	899b      	ldrh	r3, [r3, #12]
 8013702:	b29b      	uxth	r3, r3
 8013704:	4618      	mov	r0, r3
 8013706:	f7f8 ffbd 	bl	800c684 <lwip_htons>
 801370a:	4603      	mov	r3, r0
 801370c:	b2db      	uxtb	r3, r3
 801370e:	f003 0303 	and.w	r3, r3, #3
 8013712:	2b00      	cmp	r3, #0
 8013714:	d00e      	beq.n	8013734 <tcp_output+0x2a0>
 8013716:	2301      	movs	r3, #1
 8013718:	e00d      	b.n	8013736 <tcp_output+0x2a2>
 801371a:	bf00      	nop
 801371c:	0801db70 	.word	0x0801db70
 8013720:	0801e0b4 	.word	0x0801e0b4
 8013724:	0801dbc4 	.word	0x0801dbc4
 8013728:	0801e0cc 	.word	0x0801e0cc
 801372c:	2000db30 	.word	0x2000db30
 8013730:	0801e0f4 	.word	0x0801e0f4
 8013734:	2300      	movs	r3, #0
 8013736:	442b      	add	r3, r5
 8013738:	4423      	add	r3, r4
 801373a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013740:	68bb      	ldr	r3, [r7, #8]
 8013742:	1ad3      	subs	r3, r2, r3
 8013744:	2b00      	cmp	r3, #0
 8013746:	da02      	bge.n	801374e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	68ba      	ldr	r2, [r7, #8]
 801374c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801374e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013750:	891b      	ldrh	r3, [r3, #8]
 8013752:	461c      	mov	r4, r3
 8013754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013756:	68db      	ldr	r3, [r3, #12]
 8013758:	899b      	ldrh	r3, [r3, #12]
 801375a:	b29b      	uxth	r3, r3
 801375c:	4618      	mov	r0, r3
 801375e:	f7f8 ff91 	bl	800c684 <lwip_htons>
 8013762:	4603      	mov	r3, r0
 8013764:	b2db      	uxtb	r3, r3
 8013766:	f003 0303 	and.w	r3, r3, #3
 801376a:	2b00      	cmp	r3, #0
 801376c:	d001      	beq.n	8013772 <tcp_output+0x2de>
 801376e:	2301      	movs	r3, #1
 8013770:	e000      	b.n	8013774 <tcp_output+0x2e0>
 8013772:	2300      	movs	r3, #0
 8013774:	4423      	add	r3, r4
 8013776:	2b00      	cmp	r3, #0
 8013778:	d049      	beq.n	801380e <tcp_output+0x37a>
      seg->next = NULL;
 801377a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801377c:	2200      	movs	r2, #0
 801377e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013784:	2b00      	cmp	r3, #0
 8013786:	d105      	bne.n	8013794 <tcp_output+0x300>
        pcb->unacked = seg;
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801378c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801378e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013790:	623b      	str	r3, [r7, #32]
 8013792:	e03f      	b.n	8013814 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8013794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013796:	68db      	ldr	r3, [r3, #12]
 8013798:	685b      	ldr	r3, [r3, #4]
 801379a:	4618      	mov	r0, r3
 801379c:	f7f8 ff87 	bl	800c6ae <lwip_htonl>
 80137a0:	4604      	mov	r4, r0
 80137a2:	6a3b      	ldr	r3, [r7, #32]
 80137a4:	68db      	ldr	r3, [r3, #12]
 80137a6:	685b      	ldr	r3, [r3, #4]
 80137a8:	4618      	mov	r0, r3
 80137aa:	f7f8 ff80 	bl	800c6ae <lwip_htonl>
 80137ae:	4603      	mov	r3, r0
 80137b0:	1ae3      	subs	r3, r4, r3
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	da24      	bge.n	8013800 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	3370      	adds	r3, #112	; 0x70
 80137ba:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80137bc:	e002      	b.n	80137c4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80137be:	69fb      	ldr	r3, [r7, #28]
 80137c0:	681b      	ldr	r3, [r3, #0]
 80137c2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80137c4:	69fb      	ldr	r3, [r7, #28]
 80137c6:	681b      	ldr	r3, [r3, #0]
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d011      	beq.n	80137f0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80137cc:	69fb      	ldr	r3, [r7, #28]
 80137ce:	681b      	ldr	r3, [r3, #0]
 80137d0:	68db      	ldr	r3, [r3, #12]
 80137d2:	685b      	ldr	r3, [r3, #4]
 80137d4:	4618      	mov	r0, r3
 80137d6:	f7f8 ff6a 	bl	800c6ae <lwip_htonl>
 80137da:	4604      	mov	r4, r0
 80137dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137de:	68db      	ldr	r3, [r3, #12]
 80137e0:	685b      	ldr	r3, [r3, #4]
 80137e2:	4618      	mov	r0, r3
 80137e4:	f7f8 ff63 	bl	800c6ae <lwip_htonl>
 80137e8:	4603      	mov	r3, r0
 80137ea:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	dbe6      	blt.n	80137be <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80137f0:	69fb      	ldr	r3, [r7, #28]
 80137f2:	681a      	ldr	r2, [r3, #0]
 80137f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137f6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80137f8:	69fb      	ldr	r3, [r7, #28]
 80137fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80137fc:	601a      	str	r2, [r3, #0]
 80137fe:	e009      	b.n	8013814 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8013800:	6a3b      	ldr	r3, [r7, #32]
 8013802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013804:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8013806:	6a3b      	ldr	r3, [r7, #32]
 8013808:	681b      	ldr	r3, [r3, #0]
 801380a:	623b      	str	r3, [r7, #32]
 801380c:	e002      	b.n	8013814 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801380e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013810:	f7fb ff1d 	bl	800f64e <tcp_seg_free>
    }
    seg = pcb->unsent;
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013818:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801381a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801381c:	2b00      	cmp	r3, #0
 801381e:	d012      	beq.n	8013846 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8013820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013822:	68db      	ldr	r3, [r3, #12]
 8013824:	685b      	ldr	r3, [r3, #4]
 8013826:	4618      	mov	r0, r3
 8013828:	f7f8 ff41 	bl	800c6ae <lwip_htonl>
 801382c:	4602      	mov	r2, r0
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013832:	1ad3      	subs	r3, r2, r3
 8013834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013836:	8912      	ldrh	r2, [r2, #8]
 8013838:	4413      	add	r3, r2
  while (seg != NULL &&
 801383a:	69ba      	ldr	r2, [r7, #24]
 801383c:	429a      	cmp	r2, r3
 801383e:	f4bf aed9 	bcs.w	80135f4 <tcp_output+0x160>
 8013842:	e000      	b.n	8013846 <tcp_output+0x3b2>
      break;
 8013844:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801384a:	2b00      	cmp	r3, #0
 801384c:	d108      	bne.n	8013860 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	2200      	movs	r2, #0
 8013852:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8013856:	e004      	b.n	8013862 <tcp_output+0x3ce>
    goto output_done;
 8013858:	bf00      	nop
 801385a:	e002      	b.n	8013862 <tcp_output+0x3ce>
    goto output_done;
 801385c:	bf00      	nop
 801385e:	e000      	b.n	8013862 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8013860:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	8b5b      	ldrh	r3, [r3, #26]
 8013866:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801386a:	b29a      	uxth	r2, r3
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8013870:	2300      	movs	r3, #0
}
 8013872:	4618      	mov	r0, r3
 8013874:	3728      	adds	r7, #40	; 0x28
 8013876:	46bd      	mov	sp, r7
 8013878:	bdb0      	pop	{r4, r5, r7, pc}
 801387a:	bf00      	nop

0801387c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801387c:	b580      	push	{r7, lr}
 801387e:	b082      	sub	sp, #8
 8013880:	af00      	add	r7, sp, #0
 8013882:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	2b00      	cmp	r3, #0
 8013888:	d106      	bne.n	8013898 <tcp_output_segment_busy+0x1c>
 801388a:	4b09      	ldr	r3, [pc, #36]	; (80138b0 <tcp_output_segment_busy+0x34>)
 801388c:	f240 529a 	movw	r2, #1434	; 0x59a
 8013890:	4908      	ldr	r1, [pc, #32]	; (80138b4 <tcp_output_segment_busy+0x38>)
 8013892:	4809      	ldr	r0, [pc, #36]	; (80138b8 <tcp_output_segment_busy+0x3c>)
 8013894:	f007 fc36 	bl	801b104 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	685b      	ldr	r3, [r3, #4]
 801389c:	7b9b      	ldrb	r3, [r3, #14]
 801389e:	2b01      	cmp	r3, #1
 80138a0:	d001      	beq.n	80138a6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80138a2:	2301      	movs	r3, #1
 80138a4:	e000      	b.n	80138a8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80138a6:	2300      	movs	r3, #0
}
 80138a8:	4618      	mov	r0, r3
 80138aa:	3708      	adds	r7, #8
 80138ac:	46bd      	mov	sp, r7
 80138ae:	bd80      	pop	{r7, pc}
 80138b0:	0801db70 	.word	0x0801db70
 80138b4:	0801e10c 	.word	0x0801e10c
 80138b8:	0801dbc4 	.word	0x0801dbc4

080138bc <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80138bc:	b5b0      	push	{r4, r5, r7, lr}
 80138be:	b08c      	sub	sp, #48	; 0x30
 80138c0:	af04      	add	r7, sp, #16
 80138c2:	60f8      	str	r0, [r7, #12]
 80138c4:	60b9      	str	r1, [r7, #8]
 80138c6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80138c8:	68fb      	ldr	r3, [r7, #12]
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	d106      	bne.n	80138dc <tcp_output_segment+0x20>
 80138ce:	4b63      	ldr	r3, [pc, #396]	; (8013a5c <tcp_output_segment+0x1a0>)
 80138d0:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80138d4:	4962      	ldr	r1, [pc, #392]	; (8013a60 <tcp_output_segment+0x1a4>)
 80138d6:	4863      	ldr	r0, [pc, #396]	; (8013a64 <tcp_output_segment+0x1a8>)
 80138d8:	f007 fc14 	bl	801b104 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80138dc:	68bb      	ldr	r3, [r7, #8]
 80138de:	2b00      	cmp	r3, #0
 80138e0:	d106      	bne.n	80138f0 <tcp_output_segment+0x34>
 80138e2:	4b5e      	ldr	r3, [pc, #376]	; (8013a5c <tcp_output_segment+0x1a0>)
 80138e4:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80138e8:	495f      	ldr	r1, [pc, #380]	; (8013a68 <tcp_output_segment+0x1ac>)
 80138ea:	485e      	ldr	r0, [pc, #376]	; (8013a64 <tcp_output_segment+0x1a8>)
 80138ec:	f007 fc0a 	bl	801b104 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	d106      	bne.n	8013904 <tcp_output_segment+0x48>
 80138f6:	4b59      	ldr	r3, [pc, #356]	; (8013a5c <tcp_output_segment+0x1a0>)
 80138f8:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80138fc:	495b      	ldr	r1, [pc, #364]	; (8013a6c <tcp_output_segment+0x1b0>)
 80138fe:	4859      	ldr	r0, [pc, #356]	; (8013a64 <tcp_output_segment+0x1a8>)
 8013900:	f007 fc00 	bl	801b104 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8013904:	68f8      	ldr	r0, [r7, #12]
 8013906:	f7ff ffb9 	bl	801387c <tcp_output_segment_busy>
 801390a:	4603      	mov	r3, r0
 801390c:	2b00      	cmp	r3, #0
 801390e:	d001      	beq.n	8013914 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8013910:	2300      	movs	r3, #0
 8013912:	e09f      	b.n	8013a54 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8013914:	68bb      	ldr	r3, [r7, #8]
 8013916:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013918:	68fb      	ldr	r3, [r7, #12]
 801391a:	68dc      	ldr	r4, [r3, #12]
 801391c:	4610      	mov	r0, r2
 801391e:	f7f8 fec6 	bl	800c6ae <lwip_htonl>
 8013922:	4603      	mov	r3, r0
 8013924:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8013926:	68bb      	ldr	r3, [r7, #8]
 8013928:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801392a:	68fb      	ldr	r3, [r7, #12]
 801392c:	68dc      	ldr	r4, [r3, #12]
 801392e:	4610      	mov	r0, r2
 8013930:	f7f8 fea8 	bl	800c684 <lwip_htons>
 8013934:	4603      	mov	r3, r0
 8013936:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013938:	68bb      	ldr	r3, [r7, #8]
 801393a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801393c:	68ba      	ldr	r2, [r7, #8]
 801393e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013940:	441a      	add	r2, r3
 8013942:	68bb      	ldr	r3, [r7, #8]
 8013944:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8013946:	68fb      	ldr	r3, [r7, #12]
 8013948:	68db      	ldr	r3, [r3, #12]
 801394a:	3314      	adds	r3, #20
 801394c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801394e:	68fb      	ldr	r3, [r7, #12]
 8013950:	7a9b      	ldrb	r3, [r3, #10]
 8013952:	f003 0301 	and.w	r3, r3, #1
 8013956:	2b00      	cmp	r3, #0
 8013958:	d015      	beq.n	8013986 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801395a:	68bb      	ldr	r3, [r7, #8]
 801395c:	3304      	adds	r3, #4
 801395e:	461a      	mov	r2, r3
 8013960:	6879      	ldr	r1, [r7, #4]
 8013962:	f44f 7006 	mov.w	r0, #536	; 0x218
 8013966:	f7fc fa37 	bl	800fdd8 <tcp_eff_send_mss_netif>
 801396a:	4603      	mov	r3, r0
 801396c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801396e:	8b7b      	ldrh	r3, [r7, #26]
 8013970:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8013974:	4618      	mov	r0, r3
 8013976:	f7f8 fe9a 	bl	800c6ae <lwip_htonl>
 801397a:	4602      	mov	r2, r0
 801397c:	69fb      	ldr	r3, [r7, #28]
 801397e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8013980:	69fb      	ldr	r3, [r7, #28]
 8013982:	3304      	adds	r3, #4
 8013984:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8013986:	68bb      	ldr	r3, [r7, #8]
 8013988:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801398c:	2b00      	cmp	r3, #0
 801398e:	da02      	bge.n	8013996 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8013990:	68bb      	ldr	r3, [r7, #8]
 8013992:	2200      	movs	r2, #0
 8013994:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8013996:	68bb      	ldr	r3, [r7, #8]
 8013998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801399a:	2b00      	cmp	r3, #0
 801399c:	d10c      	bne.n	80139b8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801399e:	4b34      	ldr	r3, [pc, #208]	; (8013a70 <tcp_output_segment+0x1b4>)
 80139a0:	681a      	ldr	r2, [r3, #0]
 80139a2:	68bb      	ldr	r3, [r7, #8]
 80139a4:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80139a6:	68fb      	ldr	r3, [r7, #12]
 80139a8:	68db      	ldr	r3, [r3, #12]
 80139aa:	685b      	ldr	r3, [r3, #4]
 80139ac:	4618      	mov	r0, r3
 80139ae:	f7f8 fe7e 	bl	800c6ae <lwip_htonl>
 80139b2:	4602      	mov	r2, r0
 80139b4:	68bb      	ldr	r3, [r7, #8]
 80139b6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80139b8:	68fb      	ldr	r3, [r7, #12]
 80139ba:	68da      	ldr	r2, [r3, #12]
 80139bc:	68fb      	ldr	r3, [r7, #12]
 80139be:	685b      	ldr	r3, [r3, #4]
 80139c0:	685b      	ldr	r3, [r3, #4]
 80139c2:	1ad3      	subs	r3, r2, r3
 80139c4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80139c6:	68fb      	ldr	r3, [r7, #12]
 80139c8:	685b      	ldr	r3, [r3, #4]
 80139ca:	8959      	ldrh	r1, [r3, #10]
 80139cc:	68fb      	ldr	r3, [r7, #12]
 80139ce:	685b      	ldr	r3, [r3, #4]
 80139d0:	8b3a      	ldrh	r2, [r7, #24]
 80139d2:	1a8a      	subs	r2, r1, r2
 80139d4:	b292      	uxth	r2, r2
 80139d6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80139d8:	68fb      	ldr	r3, [r7, #12]
 80139da:	685b      	ldr	r3, [r3, #4]
 80139dc:	8919      	ldrh	r1, [r3, #8]
 80139de:	68fb      	ldr	r3, [r7, #12]
 80139e0:	685b      	ldr	r3, [r3, #4]
 80139e2:	8b3a      	ldrh	r2, [r7, #24]
 80139e4:	1a8a      	subs	r2, r1, r2
 80139e6:	b292      	uxth	r2, r2
 80139e8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80139ea:	68fb      	ldr	r3, [r7, #12]
 80139ec:	685b      	ldr	r3, [r3, #4]
 80139ee:	68fa      	ldr	r2, [r7, #12]
 80139f0:	68d2      	ldr	r2, [r2, #12]
 80139f2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80139f4:	68fb      	ldr	r3, [r7, #12]
 80139f6:	68db      	ldr	r3, [r3, #12]
 80139f8:	2200      	movs	r2, #0
 80139fa:	741a      	strb	r2, [r3, #16]
 80139fc:	2200      	movs	r2, #0
 80139fe:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8013a00:	68fb      	ldr	r3, [r7, #12]
 8013a02:	68db      	ldr	r3, [r3, #12]
 8013a04:	f103 0214 	add.w	r2, r3, #20
 8013a08:	68fb      	ldr	r3, [r7, #12]
 8013a0a:	7a9b      	ldrb	r3, [r3, #10]
 8013a0c:	009b      	lsls	r3, r3, #2
 8013a0e:	f003 0304 	and.w	r3, r3, #4
 8013a12:	4413      	add	r3, r2
 8013a14:	69fa      	ldr	r2, [r7, #28]
 8013a16:	429a      	cmp	r2, r3
 8013a18:	d006      	beq.n	8013a28 <tcp_output_segment+0x16c>
 8013a1a:	4b10      	ldr	r3, [pc, #64]	; (8013a5c <tcp_output_segment+0x1a0>)
 8013a1c:	f240 621c 	movw	r2, #1564	; 0x61c
 8013a20:	4914      	ldr	r1, [pc, #80]	; (8013a74 <tcp_output_segment+0x1b8>)
 8013a22:	4810      	ldr	r0, [pc, #64]	; (8013a64 <tcp_output_segment+0x1a8>)
 8013a24:	f007 fb6e 	bl	801b104 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8013a28:	68fb      	ldr	r3, [r7, #12]
 8013a2a:	6858      	ldr	r0, [r3, #4]
 8013a2c:	68b9      	ldr	r1, [r7, #8]
 8013a2e:	68bb      	ldr	r3, [r7, #8]
 8013a30:	1d1c      	adds	r4, r3, #4
 8013a32:	68bb      	ldr	r3, [r7, #8]
 8013a34:	7add      	ldrb	r5, [r3, #11]
 8013a36:	68bb      	ldr	r3, [r7, #8]
 8013a38:	7a9b      	ldrb	r3, [r3, #10]
 8013a3a:	687a      	ldr	r2, [r7, #4]
 8013a3c:	9202      	str	r2, [sp, #8]
 8013a3e:	2206      	movs	r2, #6
 8013a40:	9201      	str	r2, [sp, #4]
 8013a42:	9300      	str	r3, [sp, #0]
 8013a44:	462b      	mov	r3, r5
 8013a46:	4622      	mov	r2, r4
 8013a48:	f002 fc1a 	bl	8016280 <ip4_output_if>
 8013a4c:	4603      	mov	r3, r0
 8013a4e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8013a50:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013a54:	4618      	mov	r0, r3
 8013a56:	3720      	adds	r7, #32
 8013a58:	46bd      	mov	sp, r7
 8013a5a:	bdb0      	pop	{r4, r5, r7, pc}
 8013a5c:	0801db70 	.word	0x0801db70
 8013a60:	0801e134 	.word	0x0801e134
 8013a64:	0801dbc4 	.word	0x0801dbc4
 8013a68:	0801e154 	.word	0x0801e154
 8013a6c:	0801e174 	.word	0x0801e174
 8013a70:	2000db20 	.word	0x2000db20
 8013a74:	0801e198 	.word	0x0801e198

08013a78 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8013a78:	b5b0      	push	{r4, r5, r7, lr}
 8013a7a:	b084      	sub	sp, #16
 8013a7c:	af00      	add	r7, sp, #0
 8013a7e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d106      	bne.n	8013a94 <tcp_rexmit_rto_prepare+0x1c>
 8013a86:	4b31      	ldr	r3, [pc, #196]	; (8013b4c <tcp_rexmit_rto_prepare+0xd4>)
 8013a88:	f240 6263 	movw	r2, #1635	; 0x663
 8013a8c:	4930      	ldr	r1, [pc, #192]	; (8013b50 <tcp_rexmit_rto_prepare+0xd8>)
 8013a8e:	4831      	ldr	r0, [pc, #196]	; (8013b54 <tcp_rexmit_rto_prepare+0xdc>)
 8013a90:	f007 fb38 	bl	801b104 <iprintf>

  if (pcb->unacked == NULL) {
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013a98:	2b00      	cmp	r3, #0
 8013a9a:	d102      	bne.n	8013aa2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8013a9c:	f06f 0305 	mvn.w	r3, #5
 8013aa0:	e050      	b.n	8013b44 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013aa6:	60fb      	str	r3, [r7, #12]
 8013aa8:	e00b      	b.n	8013ac2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8013aaa:	68f8      	ldr	r0, [r7, #12]
 8013aac:	f7ff fee6 	bl	801387c <tcp_output_segment_busy>
 8013ab0:	4603      	mov	r3, r0
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	d002      	beq.n	8013abc <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8013ab6:	f06f 0305 	mvn.w	r3, #5
 8013aba:	e043      	b.n	8013b44 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013abc:	68fb      	ldr	r3, [r7, #12]
 8013abe:	681b      	ldr	r3, [r3, #0]
 8013ac0:	60fb      	str	r3, [r7, #12]
 8013ac2:	68fb      	ldr	r3, [r7, #12]
 8013ac4:	681b      	ldr	r3, [r3, #0]
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	d1ef      	bne.n	8013aaa <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8013aca:	68f8      	ldr	r0, [r7, #12]
 8013acc:	f7ff fed6 	bl	801387c <tcp_output_segment_busy>
 8013ad0:	4603      	mov	r3, r0
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	d002      	beq.n	8013adc <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8013ad6:	f06f 0305 	mvn.w	r3, #5
 8013ada:	e033      	b.n	8013b44 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8013ae0:	68fb      	ldr	r3, [r7, #12]
 8013ae2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	2200      	movs	r2, #0
 8013af0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	8b5b      	ldrh	r3, [r3, #26]
 8013af6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8013afa:	b29a      	uxth	r2, r3
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013b00:	68fb      	ldr	r3, [r7, #12]
 8013b02:	68db      	ldr	r3, [r3, #12]
 8013b04:	685b      	ldr	r3, [r3, #4]
 8013b06:	4618      	mov	r0, r3
 8013b08:	f7f8 fdd1 	bl	800c6ae <lwip_htonl>
 8013b0c:	4604      	mov	r4, r0
 8013b0e:	68fb      	ldr	r3, [r7, #12]
 8013b10:	891b      	ldrh	r3, [r3, #8]
 8013b12:	461d      	mov	r5, r3
 8013b14:	68fb      	ldr	r3, [r7, #12]
 8013b16:	68db      	ldr	r3, [r3, #12]
 8013b18:	899b      	ldrh	r3, [r3, #12]
 8013b1a:	b29b      	uxth	r3, r3
 8013b1c:	4618      	mov	r0, r3
 8013b1e:	f7f8 fdb1 	bl	800c684 <lwip_htons>
 8013b22:	4603      	mov	r3, r0
 8013b24:	b2db      	uxtb	r3, r3
 8013b26:	f003 0303 	and.w	r3, r3, #3
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d001      	beq.n	8013b32 <tcp_rexmit_rto_prepare+0xba>
 8013b2e:	2301      	movs	r3, #1
 8013b30:	e000      	b.n	8013b34 <tcp_rexmit_rto_prepare+0xbc>
 8013b32:	2300      	movs	r3, #0
 8013b34:	442b      	add	r3, r5
 8013b36:	18e2      	adds	r2, r4, r3
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	2200      	movs	r2, #0
 8013b40:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8013b42:	2300      	movs	r3, #0
}
 8013b44:	4618      	mov	r0, r3
 8013b46:	3710      	adds	r7, #16
 8013b48:	46bd      	mov	sp, r7
 8013b4a:	bdb0      	pop	{r4, r5, r7, pc}
 8013b4c:	0801db70 	.word	0x0801db70
 8013b50:	0801e1ac 	.word	0x0801e1ac
 8013b54:	0801dbc4 	.word	0x0801dbc4

08013b58 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8013b58:	b580      	push	{r7, lr}
 8013b5a:	b082      	sub	sp, #8
 8013b5c:	af00      	add	r7, sp, #0
 8013b5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	2b00      	cmp	r3, #0
 8013b64:	d106      	bne.n	8013b74 <tcp_rexmit_rto_commit+0x1c>
 8013b66:	4b0d      	ldr	r3, [pc, #52]	; (8013b9c <tcp_rexmit_rto_commit+0x44>)
 8013b68:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8013b6c:	490c      	ldr	r1, [pc, #48]	; (8013ba0 <tcp_rexmit_rto_commit+0x48>)
 8013b6e:	480d      	ldr	r0, [pc, #52]	; (8013ba4 <tcp_rexmit_rto_commit+0x4c>)
 8013b70:	f007 fac8 	bl	801b104 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013b7a:	2bff      	cmp	r3, #255	; 0xff
 8013b7c:	d007      	beq.n	8013b8e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013b84:	3301      	adds	r3, #1
 8013b86:	b2da      	uxtb	r2, r3
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8013b8e:	6878      	ldr	r0, [r7, #4]
 8013b90:	f7ff fc80 	bl	8013494 <tcp_output>
}
 8013b94:	bf00      	nop
 8013b96:	3708      	adds	r7, #8
 8013b98:	46bd      	mov	sp, r7
 8013b9a:	bd80      	pop	{r7, pc}
 8013b9c:	0801db70 	.word	0x0801db70
 8013ba0:	0801e1d0 	.word	0x0801e1d0
 8013ba4:	0801dbc4 	.word	0x0801dbc4

08013ba8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8013ba8:	b580      	push	{r7, lr}
 8013baa:	b082      	sub	sp, #8
 8013bac:	af00      	add	r7, sp, #0
 8013bae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	d106      	bne.n	8013bc4 <tcp_rexmit_rto+0x1c>
 8013bb6:	4b0a      	ldr	r3, [pc, #40]	; (8013be0 <tcp_rexmit_rto+0x38>)
 8013bb8:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8013bbc:	4909      	ldr	r1, [pc, #36]	; (8013be4 <tcp_rexmit_rto+0x3c>)
 8013bbe:	480a      	ldr	r0, [pc, #40]	; (8013be8 <tcp_rexmit_rto+0x40>)
 8013bc0:	f007 faa0 	bl	801b104 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8013bc4:	6878      	ldr	r0, [r7, #4]
 8013bc6:	f7ff ff57 	bl	8013a78 <tcp_rexmit_rto_prepare>
 8013bca:	4603      	mov	r3, r0
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d102      	bne.n	8013bd6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8013bd0:	6878      	ldr	r0, [r7, #4]
 8013bd2:	f7ff ffc1 	bl	8013b58 <tcp_rexmit_rto_commit>
  }
}
 8013bd6:	bf00      	nop
 8013bd8:	3708      	adds	r7, #8
 8013bda:	46bd      	mov	sp, r7
 8013bdc:	bd80      	pop	{r7, pc}
 8013bde:	bf00      	nop
 8013be0:	0801db70 	.word	0x0801db70
 8013be4:	0801e1f4 	.word	0x0801e1f4
 8013be8:	0801dbc4 	.word	0x0801dbc4

08013bec <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8013bec:	b590      	push	{r4, r7, lr}
 8013bee:	b085      	sub	sp, #20
 8013bf0:	af00      	add	r7, sp, #0
 8013bf2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	d106      	bne.n	8013c08 <tcp_rexmit+0x1c>
 8013bfa:	4b2f      	ldr	r3, [pc, #188]	; (8013cb8 <tcp_rexmit+0xcc>)
 8013bfc:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8013c00:	492e      	ldr	r1, [pc, #184]	; (8013cbc <tcp_rexmit+0xd0>)
 8013c02:	482f      	ldr	r0, [pc, #188]	; (8013cc0 <tcp_rexmit+0xd4>)
 8013c04:	f007 fa7e 	bl	801b104 <iprintf>

  if (pcb->unacked == NULL) {
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	d102      	bne.n	8013c16 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8013c10:	f06f 0305 	mvn.w	r3, #5
 8013c14:	e04c      	b.n	8013cb0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013c1a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8013c1c:	68b8      	ldr	r0, [r7, #8]
 8013c1e:	f7ff fe2d 	bl	801387c <tcp_output_segment_busy>
 8013c22:	4603      	mov	r3, r0
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d002      	beq.n	8013c2e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8013c28:	f06f 0305 	mvn.w	r3, #5
 8013c2c:	e040      	b.n	8013cb0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8013c2e:	68bb      	ldr	r3, [r7, #8]
 8013c30:	681a      	ldr	r2, [r3, #0]
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	336c      	adds	r3, #108	; 0x6c
 8013c3a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013c3c:	e002      	b.n	8013c44 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8013c3e:	68fb      	ldr	r3, [r7, #12]
 8013c40:	681b      	ldr	r3, [r3, #0]
 8013c42:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013c44:	68fb      	ldr	r3, [r7, #12]
 8013c46:	681b      	ldr	r3, [r3, #0]
 8013c48:	2b00      	cmp	r3, #0
 8013c4a:	d011      	beq.n	8013c70 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013c4c:	68fb      	ldr	r3, [r7, #12]
 8013c4e:	681b      	ldr	r3, [r3, #0]
 8013c50:	68db      	ldr	r3, [r3, #12]
 8013c52:	685b      	ldr	r3, [r3, #4]
 8013c54:	4618      	mov	r0, r3
 8013c56:	f7f8 fd2a 	bl	800c6ae <lwip_htonl>
 8013c5a:	4604      	mov	r4, r0
 8013c5c:	68bb      	ldr	r3, [r7, #8]
 8013c5e:	68db      	ldr	r3, [r3, #12]
 8013c60:	685b      	ldr	r3, [r3, #4]
 8013c62:	4618      	mov	r0, r3
 8013c64:	f7f8 fd23 	bl	800c6ae <lwip_htonl>
 8013c68:	4603      	mov	r3, r0
 8013c6a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	dbe6      	blt.n	8013c3e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8013c70:	68fb      	ldr	r3, [r7, #12]
 8013c72:	681a      	ldr	r2, [r3, #0]
 8013c74:	68bb      	ldr	r3, [r7, #8]
 8013c76:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8013c78:	68fb      	ldr	r3, [r7, #12]
 8013c7a:	68ba      	ldr	r2, [r7, #8]
 8013c7c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8013c7e:	68bb      	ldr	r3, [r7, #8]
 8013c80:	681b      	ldr	r3, [r3, #0]
 8013c82:	2b00      	cmp	r3, #0
 8013c84:	d103      	bne.n	8013c8e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	2200      	movs	r2, #0
 8013c8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013c94:	2bff      	cmp	r3, #255	; 0xff
 8013c96:	d007      	beq.n	8013ca8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013c9e:	3301      	adds	r3, #1
 8013ca0:	b2da      	uxtb	r2, r3
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	2200      	movs	r2, #0
 8013cac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8013cae:	2300      	movs	r3, #0
}
 8013cb0:	4618      	mov	r0, r3
 8013cb2:	3714      	adds	r7, #20
 8013cb4:	46bd      	mov	sp, r7
 8013cb6:	bd90      	pop	{r4, r7, pc}
 8013cb8:	0801db70 	.word	0x0801db70
 8013cbc:	0801e210 	.word	0x0801e210
 8013cc0:	0801dbc4 	.word	0x0801dbc4

08013cc4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8013cc4:	b580      	push	{r7, lr}
 8013cc6:	b082      	sub	sp, #8
 8013cc8:	af00      	add	r7, sp, #0
 8013cca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d106      	bne.n	8013ce0 <tcp_rexmit_fast+0x1c>
 8013cd2:	4b2a      	ldr	r3, [pc, #168]	; (8013d7c <tcp_rexmit_fast+0xb8>)
 8013cd4:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8013cd8:	4929      	ldr	r1, [pc, #164]	; (8013d80 <tcp_rexmit_fast+0xbc>)
 8013cda:	482a      	ldr	r0, [pc, #168]	; (8013d84 <tcp_rexmit_fast+0xc0>)
 8013cdc:	f007 fa12 	bl	801b104 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	d045      	beq.n	8013d74 <tcp_rexmit_fast+0xb0>
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	8b5b      	ldrh	r3, [r3, #26]
 8013cec:	f003 0304 	and.w	r3, r3, #4
 8013cf0:	2b00      	cmp	r3, #0
 8013cf2:	d13f      	bne.n	8013d74 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8013cf4:	6878      	ldr	r0, [r7, #4]
 8013cf6:	f7ff ff79 	bl	8013bec <tcp_rexmit>
 8013cfa:	4603      	mov	r3, r0
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	d139      	bne.n	8013d74 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013d0c:	4293      	cmp	r3, r2
 8013d0e:	bf28      	it	cs
 8013d10:	4613      	movcs	r3, r2
 8013d12:	b29b      	uxth	r3, r3
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	da00      	bge.n	8013d1a <tcp_rexmit_fast+0x56>
 8013d18:	3301      	adds	r3, #1
 8013d1a:	105b      	asrs	r3, r3, #1
 8013d1c:	b29a      	uxth	r2, r3
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8013d2a:	461a      	mov	r2, r3
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013d30:	005b      	lsls	r3, r3, #1
 8013d32:	429a      	cmp	r2, r3
 8013d34:	d206      	bcs.n	8013d44 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013d3a:	005b      	lsls	r3, r3, #1
 8013d3c:	b29a      	uxth	r2, r3
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013d4e:	4619      	mov	r1, r3
 8013d50:	0049      	lsls	r1, r1, #1
 8013d52:	440b      	add	r3, r1
 8013d54:	b29b      	uxth	r3, r3
 8013d56:	4413      	add	r3, r2
 8013d58:	b29a      	uxth	r2, r3
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	8b5b      	ldrh	r3, [r3, #26]
 8013d64:	f043 0304 	orr.w	r3, r3, #4
 8013d68:	b29a      	uxth	r2, r3
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	2200      	movs	r2, #0
 8013d72:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8013d74:	bf00      	nop
 8013d76:	3708      	adds	r7, #8
 8013d78:	46bd      	mov	sp, r7
 8013d7a:	bd80      	pop	{r7, pc}
 8013d7c:	0801db70 	.word	0x0801db70
 8013d80:	0801e228 	.word	0x0801e228
 8013d84:	0801dbc4 	.word	0x0801dbc4

08013d88 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8013d88:	b580      	push	{r7, lr}
 8013d8a:	b086      	sub	sp, #24
 8013d8c:	af00      	add	r7, sp, #0
 8013d8e:	60f8      	str	r0, [r7, #12]
 8013d90:	607b      	str	r3, [r7, #4]
 8013d92:	460b      	mov	r3, r1
 8013d94:	817b      	strh	r3, [r7, #10]
 8013d96:	4613      	mov	r3, r2
 8013d98:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8013d9a:	897a      	ldrh	r2, [r7, #10]
 8013d9c:	893b      	ldrh	r3, [r7, #8]
 8013d9e:	4413      	add	r3, r2
 8013da0:	b29b      	uxth	r3, r3
 8013da2:	3314      	adds	r3, #20
 8013da4:	b29b      	uxth	r3, r3
 8013da6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013daa:	4619      	mov	r1, r3
 8013dac:	2022      	movs	r0, #34	; 0x22
 8013dae:	f7f9 fd31 	bl	800d814 <pbuf_alloc>
 8013db2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8013db4:	697b      	ldr	r3, [r7, #20]
 8013db6:	2b00      	cmp	r3, #0
 8013db8:	d04d      	beq.n	8013e56 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8013dba:	897b      	ldrh	r3, [r7, #10]
 8013dbc:	3313      	adds	r3, #19
 8013dbe:	697a      	ldr	r2, [r7, #20]
 8013dc0:	8952      	ldrh	r2, [r2, #10]
 8013dc2:	4293      	cmp	r3, r2
 8013dc4:	db06      	blt.n	8013dd4 <tcp_output_alloc_header_common+0x4c>
 8013dc6:	4b26      	ldr	r3, [pc, #152]	; (8013e60 <tcp_output_alloc_header_common+0xd8>)
 8013dc8:	f240 7223 	movw	r2, #1827	; 0x723
 8013dcc:	4925      	ldr	r1, [pc, #148]	; (8013e64 <tcp_output_alloc_header_common+0xdc>)
 8013dce:	4826      	ldr	r0, [pc, #152]	; (8013e68 <tcp_output_alloc_header_common+0xe0>)
 8013dd0:	f007 f998 	bl	801b104 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8013dd4:	697b      	ldr	r3, [r7, #20]
 8013dd6:	685b      	ldr	r3, [r3, #4]
 8013dd8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8013dda:	8c3b      	ldrh	r3, [r7, #32]
 8013ddc:	4618      	mov	r0, r3
 8013dde:	f7f8 fc51 	bl	800c684 <lwip_htons>
 8013de2:	4603      	mov	r3, r0
 8013de4:	461a      	mov	r2, r3
 8013de6:	693b      	ldr	r3, [r7, #16]
 8013de8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8013dea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013dec:	4618      	mov	r0, r3
 8013dee:	f7f8 fc49 	bl	800c684 <lwip_htons>
 8013df2:	4603      	mov	r3, r0
 8013df4:	461a      	mov	r2, r3
 8013df6:	693b      	ldr	r3, [r7, #16]
 8013df8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8013dfa:	693b      	ldr	r3, [r7, #16]
 8013dfc:	687a      	ldr	r2, [r7, #4]
 8013dfe:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8013e00:	68f8      	ldr	r0, [r7, #12]
 8013e02:	f7f8 fc54 	bl	800c6ae <lwip_htonl>
 8013e06:	4602      	mov	r2, r0
 8013e08:	693b      	ldr	r3, [r7, #16]
 8013e0a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8013e0c:	897b      	ldrh	r3, [r7, #10]
 8013e0e:	089b      	lsrs	r3, r3, #2
 8013e10:	b29b      	uxth	r3, r3
 8013e12:	3305      	adds	r3, #5
 8013e14:	b29b      	uxth	r3, r3
 8013e16:	031b      	lsls	r3, r3, #12
 8013e18:	b29a      	uxth	r2, r3
 8013e1a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013e1e:	b29b      	uxth	r3, r3
 8013e20:	4313      	orrs	r3, r2
 8013e22:	b29b      	uxth	r3, r3
 8013e24:	4618      	mov	r0, r3
 8013e26:	f7f8 fc2d 	bl	800c684 <lwip_htons>
 8013e2a:	4603      	mov	r3, r0
 8013e2c:	461a      	mov	r2, r3
 8013e2e:	693b      	ldr	r3, [r7, #16]
 8013e30:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8013e32:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013e34:	4618      	mov	r0, r3
 8013e36:	f7f8 fc25 	bl	800c684 <lwip_htons>
 8013e3a:	4603      	mov	r3, r0
 8013e3c:	461a      	mov	r2, r3
 8013e3e:	693b      	ldr	r3, [r7, #16]
 8013e40:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8013e42:	693b      	ldr	r3, [r7, #16]
 8013e44:	2200      	movs	r2, #0
 8013e46:	741a      	strb	r2, [r3, #16]
 8013e48:	2200      	movs	r2, #0
 8013e4a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8013e4c:	693b      	ldr	r3, [r7, #16]
 8013e4e:	2200      	movs	r2, #0
 8013e50:	749a      	strb	r2, [r3, #18]
 8013e52:	2200      	movs	r2, #0
 8013e54:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8013e56:	697b      	ldr	r3, [r7, #20]
}
 8013e58:	4618      	mov	r0, r3
 8013e5a:	3718      	adds	r7, #24
 8013e5c:	46bd      	mov	sp, r7
 8013e5e:	bd80      	pop	{r7, pc}
 8013e60:	0801db70 	.word	0x0801db70
 8013e64:	0801e248 	.word	0x0801e248
 8013e68:	0801dbc4 	.word	0x0801dbc4

08013e6c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8013e6c:	b5b0      	push	{r4, r5, r7, lr}
 8013e6e:	b08a      	sub	sp, #40	; 0x28
 8013e70:	af04      	add	r7, sp, #16
 8013e72:	60f8      	str	r0, [r7, #12]
 8013e74:	607b      	str	r3, [r7, #4]
 8013e76:	460b      	mov	r3, r1
 8013e78:	817b      	strh	r3, [r7, #10]
 8013e7a:	4613      	mov	r3, r2
 8013e7c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8013e7e:	68fb      	ldr	r3, [r7, #12]
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	d106      	bne.n	8013e92 <tcp_output_alloc_header+0x26>
 8013e84:	4b15      	ldr	r3, [pc, #84]	; (8013edc <tcp_output_alloc_header+0x70>)
 8013e86:	f240 7242 	movw	r2, #1858	; 0x742
 8013e8a:	4915      	ldr	r1, [pc, #84]	; (8013ee0 <tcp_output_alloc_header+0x74>)
 8013e8c:	4815      	ldr	r0, [pc, #84]	; (8013ee4 <tcp_output_alloc_header+0x78>)
 8013e8e:	f007 f939 	bl	801b104 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8013e92:	68fb      	ldr	r3, [r7, #12]
 8013e94:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8013e96:	68fb      	ldr	r3, [r7, #12]
 8013e98:	8adb      	ldrh	r3, [r3, #22]
 8013e9a:	68fa      	ldr	r2, [r7, #12]
 8013e9c:	8b12      	ldrh	r2, [r2, #24]
 8013e9e:	68f9      	ldr	r1, [r7, #12]
 8013ea0:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8013ea2:	893d      	ldrh	r5, [r7, #8]
 8013ea4:	897c      	ldrh	r4, [r7, #10]
 8013ea6:	9103      	str	r1, [sp, #12]
 8013ea8:	2110      	movs	r1, #16
 8013eaa:	9102      	str	r1, [sp, #8]
 8013eac:	9201      	str	r2, [sp, #4]
 8013eae:	9300      	str	r3, [sp, #0]
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	462a      	mov	r2, r5
 8013eb4:	4621      	mov	r1, r4
 8013eb6:	f7ff ff67 	bl	8013d88 <tcp_output_alloc_header_common>
 8013eba:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8013ebc:	697b      	ldr	r3, [r7, #20]
 8013ebe:	2b00      	cmp	r3, #0
 8013ec0:	d006      	beq.n	8013ed0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013ec2:	68fb      	ldr	r3, [r7, #12]
 8013ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ec6:	68fa      	ldr	r2, [r7, #12]
 8013ec8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013eca:	441a      	add	r2, r3
 8013ecc:	68fb      	ldr	r3, [r7, #12]
 8013ece:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8013ed0:	697b      	ldr	r3, [r7, #20]
}
 8013ed2:	4618      	mov	r0, r3
 8013ed4:	3718      	adds	r7, #24
 8013ed6:	46bd      	mov	sp, r7
 8013ed8:	bdb0      	pop	{r4, r5, r7, pc}
 8013eda:	bf00      	nop
 8013edc:	0801db70 	.word	0x0801db70
 8013ee0:	0801e278 	.word	0x0801e278
 8013ee4:	0801dbc4 	.word	0x0801dbc4

08013ee8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8013ee8:	b580      	push	{r7, lr}
 8013eea:	b088      	sub	sp, #32
 8013eec:	af00      	add	r7, sp, #0
 8013eee:	60f8      	str	r0, [r7, #12]
 8013ef0:	60b9      	str	r1, [r7, #8]
 8013ef2:	4611      	mov	r1, r2
 8013ef4:	461a      	mov	r2, r3
 8013ef6:	460b      	mov	r3, r1
 8013ef8:	71fb      	strb	r3, [r7, #7]
 8013efa:	4613      	mov	r3, r2
 8013efc:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8013efe:	2300      	movs	r3, #0
 8013f00:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8013f02:	68bb      	ldr	r3, [r7, #8]
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	d106      	bne.n	8013f16 <tcp_output_fill_options+0x2e>
 8013f08:	4b13      	ldr	r3, [pc, #76]	; (8013f58 <tcp_output_fill_options+0x70>)
 8013f0a:	f240 7256 	movw	r2, #1878	; 0x756
 8013f0e:	4913      	ldr	r1, [pc, #76]	; (8013f5c <tcp_output_fill_options+0x74>)
 8013f10:	4813      	ldr	r0, [pc, #76]	; (8013f60 <tcp_output_fill_options+0x78>)
 8013f12:	f007 f8f7 	bl	801b104 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8013f16:	68bb      	ldr	r3, [r7, #8]
 8013f18:	685b      	ldr	r3, [r3, #4]
 8013f1a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8013f1c:	69bb      	ldr	r3, [r7, #24]
 8013f1e:	3314      	adds	r3, #20
 8013f20:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8013f22:	69bb      	ldr	r3, [r7, #24]
 8013f24:	f103 0214 	add.w	r2, r3, #20
 8013f28:	8bfb      	ldrh	r3, [r7, #30]
 8013f2a:	009b      	lsls	r3, r3, #2
 8013f2c:	4619      	mov	r1, r3
 8013f2e:	79fb      	ldrb	r3, [r7, #7]
 8013f30:	009b      	lsls	r3, r3, #2
 8013f32:	f003 0304 	and.w	r3, r3, #4
 8013f36:	440b      	add	r3, r1
 8013f38:	4413      	add	r3, r2
 8013f3a:	697a      	ldr	r2, [r7, #20]
 8013f3c:	429a      	cmp	r2, r3
 8013f3e:	d006      	beq.n	8013f4e <tcp_output_fill_options+0x66>
 8013f40:	4b05      	ldr	r3, [pc, #20]	; (8013f58 <tcp_output_fill_options+0x70>)
 8013f42:	f240 7275 	movw	r2, #1909	; 0x775
 8013f46:	4907      	ldr	r1, [pc, #28]	; (8013f64 <tcp_output_fill_options+0x7c>)
 8013f48:	4805      	ldr	r0, [pc, #20]	; (8013f60 <tcp_output_fill_options+0x78>)
 8013f4a:	f007 f8db 	bl	801b104 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8013f4e:	bf00      	nop
 8013f50:	3720      	adds	r7, #32
 8013f52:	46bd      	mov	sp, r7
 8013f54:	bd80      	pop	{r7, pc}
 8013f56:	bf00      	nop
 8013f58:	0801db70 	.word	0x0801db70
 8013f5c:	0801e2a0 	.word	0x0801e2a0
 8013f60:	0801dbc4 	.word	0x0801dbc4
 8013f64:	0801e198 	.word	0x0801e198

08013f68 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8013f68:	b580      	push	{r7, lr}
 8013f6a:	b08a      	sub	sp, #40	; 0x28
 8013f6c:	af04      	add	r7, sp, #16
 8013f6e:	60f8      	str	r0, [r7, #12]
 8013f70:	60b9      	str	r1, [r7, #8]
 8013f72:	607a      	str	r2, [r7, #4]
 8013f74:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8013f76:	68bb      	ldr	r3, [r7, #8]
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d106      	bne.n	8013f8a <tcp_output_control_segment+0x22>
 8013f7c:	4b1c      	ldr	r3, [pc, #112]	; (8013ff0 <tcp_output_control_segment+0x88>)
 8013f7e:	f240 7287 	movw	r2, #1927	; 0x787
 8013f82:	491c      	ldr	r1, [pc, #112]	; (8013ff4 <tcp_output_control_segment+0x8c>)
 8013f84:	481c      	ldr	r0, [pc, #112]	; (8013ff8 <tcp_output_control_segment+0x90>)
 8013f86:	f007 f8bd 	bl	801b104 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8013f8a:	683a      	ldr	r2, [r7, #0]
 8013f8c:	6879      	ldr	r1, [r7, #4]
 8013f8e:	68f8      	ldr	r0, [r7, #12]
 8013f90:	f7fe fae8 	bl	8012564 <tcp_route>
 8013f94:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8013f96:	693b      	ldr	r3, [r7, #16]
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d102      	bne.n	8013fa2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8013f9c:	23fc      	movs	r3, #252	; 0xfc
 8013f9e:	75fb      	strb	r3, [r7, #23]
 8013fa0:	e01c      	b.n	8013fdc <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8013fa2:	68fb      	ldr	r3, [r7, #12]
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	d006      	beq.n	8013fb6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8013fa8:	68fb      	ldr	r3, [r7, #12]
 8013faa:	7adb      	ldrb	r3, [r3, #11]
 8013fac:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8013fae:	68fb      	ldr	r3, [r7, #12]
 8013fb0:	7a9b      	ldrb	r3, [r3, #10]
 8013fb2:	757b      	strb	r3, [r7, #21]
 8013fb4:	e003      	b.n	8013fbe <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8013fb6:	23ff      	movs	r3, #255	; 0xff
 8013fb8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8013fba:	2300      	movs	r3, #0
 8013fbc:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8013fbe:	7dba      	ldrb	r2, [r7, #22]
 8013fc0:	693b      	ldr	r3, [r7, #16]
 8013fc2:	9302      	str	r3, [sp, #8]
 8013fc4:	2306      	movs	r3, #6
 8013fc6:	9301      	str	r3, [sp, #4]
 8013fc8:	7d7b      	ldrb	r3, [r7, #21]
 8013fca:	9300      	str	r3, [sp, #0]
 8013fcc:	4613      	mov	r3, r2
 8013fce:	683a      	ldr	r2, [r7, #0]
 8013fd0:	6879      	ldr	r1, [r7, #4]
 8013fd2:	68b8      	ldr	r0, [r7, #8]
 8013fd4:	f002 f954 	bl	8016280 <ip4_output_if>
 8013fd8:	4603      	mov	r3, r0
 8013fda:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8013fdc:	68b8      	ldr	r0, [r7, #8]
 8013fde:	f7f9 fefd 	bl	800dddc <pbuf_free>
  return err;
 8013fe2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013fe6:	4618      	mov	r0, r3
 8013fe8:	3718      	adds	r7, #24
 8013fea:	46bd      	mov	sp, r7
 8013fec:	bd80      	pop	{r7, pc}
 8013fee:	bf00      	nop
 8013ff0:	0801db70 	.word	0x0801db70
 8013ff4:	0801e2c8 	.word	0x0801e2c8
 8013ff8:	0801dbc4 	.word	0x0801dbc4

08013ffc <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8013ffc:	b590      	push	{r4, r7, lr}
 8013ffe:	b08b      	sub	sp, #44	; 0x2c
 8014000:	af04      	add	r7, sp, #16
 8014002:	60f8      	str	r0, [r7, #12]
 8014004:	60b9      	str	r1, [r7, #8]
 8014006:	607a      	str	r2, [r7, #4]
 8014008:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801400a:	683b      	ldr	r3, [r7, #0]
 801400c:	2b00      	cmp	r3, #0
 801400e:	d106      	bne.n	801401e <tcp_rst+0x22>
 8014010:	4b1f      	ldr	r3, [pc, #124]	; (8014090 <tcp_rst+0x94>)
 8014012:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8014016:	491f      	ldr	r1, [pc, #124]	; (8014094 <tcp_rst+0x98>)
 8014018:	481f      	ldr	r0, [pc, #124]	; (8014098 <tcp_rst+0x9c>)
 801401a:	f007 f873 	bl	801b104 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801401e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014020:	2b00      	cmp	r3, #0
 8014022:	d106      	bne.n	8014032 <tcp_rst+0x36>
 8014024:	4b1a      	ldr	r3, [pc, #104]	; (8014090 <tcp_rst+0x94>)
 8014026:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801402a:	491c      	ldr	r1, [pc, #112]	; (801409c <tcp_rst+0xa0>)
 801402c:	481a      	ldr	r0, [pc, #104]	; (8014098 <tcp_rst+0x9c>)
 801402e:	f007 f869 	bl	801b104 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014032:	2300      	movs	r3, #0
 8014034:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8014036:	f246 0308 	movw	r3, #24584	; 0x6008
 801403a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801403c:	7dfb      	ldrb	r3, [r7, #23]
 801403e:	b29c      	uxth	r4, r3
 8014040:	68b8      	ldr	r0, [r7, #8]
 8014042:	f7f8 fb34 	bl	800c6ae <lwip_htonl>
 8014046:	4602      	mov	r2, r0
 8014048:	8abb      	ldrh	r3, [r7, #20]
 801404a:	9303      	str	r3, [sp, #12]
 801404c:	2314      	movs	r3, #20
 801404e:	9302      	str	r3, [sp, #8]
 8014050:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8014052:	9301      	str	r3, [sp, #4]
 8014054:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014056:	9300      	str	r3, [sp, #0]
 8014058:	4613      	mov	r3, r2
 801405a:	2200      	movs	r2, #0
 801405c:	4621      	mov	r1, r4
 801405e:	6878      	ldr	r0, [r7, #4]
 8014060:	f7ff fe92 	bl	8013d88 <tcp_output_alloc_header_common>
 8014064:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8014066:	693b      	ldr	r3, [r7, #16]
 8014068:	2b00      	cmp	r3, #0
 801406a:	d00c      	beq.n	8014086 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801406c:	7dfb      	ldrb	r3, [r7, #23]
 801406e:	2200      	movs	r2, #0
 8014070:	6939      	ldr	r1, [r7, #16]
 8014072:	68f8      	ldr	r0, [r7, #12]
 8014074:	f7ff ff38 	bl	8013ee8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8014078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801407a:	683a      	ldr	r2, [r7, #0]
 801407c:	6939      	ldr	r1, [r7, #16]
 801407e:	68f8      	ldr	r0, [r7, #12]
 8014080:	f7ff ff72 	bl	8013f68 <tcp_output_control_segment>
 8014084:	e000      	b.n	8014088 <tcp_rst+0x8c>
    return;
 8014086:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8014088:	371c      	adds	r7, #28
 801408a:	46bd      	mov	sp, r7
 801408c:	bd90      	pop	{r4, r7, pc}
 801408e:	bf00      	nop
 8014090:	0801db70 	.word	0x0801db70
 8014094:	0801e2f4 	.word	0x0801e2f4
 8014098:	0801dbc4 	.word	0x0801dbc4
 801409c:	0801e310 	.word	0x0801e310

080140a0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80140a0:	b590      	push	{r4, r7, lr}
 80140a2:	b087      	sub	sp, #28
 80140a4:	af00      	add	r7, sp, #0
 80140a6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80140a8:	2300      	movs	r3, #0
 80140aa:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80140ac:	2300      	movs	r3, #0
 80140ae:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d106      	bne.n	80140c4 <tcp_send_empty_ack+0x24>
 80140b6:	4b28      	ldr	r3, [pc, #160]	; (8014158 <tcp_send_empty_ack+0xb8>)
 80140b8:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80140bc:	4927      	ldr	r1, [pc, #156]	; (801415c <tcp_send_empty_ack+0xbc>)
 80140be:	4828      	ldr	r0, [pc, #160]	; (8014160 <tcp_send_empty_ack+0xc0>)
 80140c0:	f007 f820 	bl	801b104 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80140c4:	7dfb      	ldrb	r3, [r7, #23]
 80140c6:	009b      	lsls	r3, r3, #2
 80140c8:	b2db      	uxtb	r3, r3
 80140ca:	f003 0304 	and.w	r3, r3, #4
 80140ce:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80140d0:	7d7b      	ldrb	r3, [r7, #21]
 80140d2:	b29c      	uxth	r4, r3
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80140d8:	4618      	mov	r0, r3
 80140da:	f7f8 fae8 	bl	800c6ae <lwip_htonl>
 80140de:	4603      	mov	r3, r0
 80140e0:	2200      	movs	r2, #0
 80140e2:	4621      	mov	r1, r4
 80140e4:	6878      	ldr	r0, [r7, #4]
 80140e6:	f7ff fec1 	bl	8013e6c <tcp_output_alloc_header>
 80140ea:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80140ec:	693b      	ldr	r3, [r7, #16]
 80140ee:	2b00      	cmp	r3, #0
 80140f0:	d109      	bne.n	8014106 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	8b5b      	ldrh	r3, [r3, #26]
 80140f6:	f043 0303 	orr.w	r3, r3, #3
 80140fa:	b29a      	uxth	r2, r3
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8014100:	f06f 0301 	mvn.w	r3, #1
 8014104:	e023      	b.n	801414e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8014106:	7dbb      	ldrb	r3, [r7, #22]
 8014108:	7dfa      	ldrb	r2, [r7, #23]
 801410a:	6939      	ldr	r1, [r7, #16]
 801410c:	6878      	ldr	r0, [r7, #4]
 801410e:	f7ff feeb 	bl	8013ee8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014112:	687a      	ldr	r2, [r7, #4]
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	3304      	adds	r3, #4
 8014118:	6939      	ldr	r1, [r7, #16]
 801411a:	6878      	ldr	r0, [r7, #4]
 801411c:	f7ff ff24 	bl	8013f68 <tcp_output_control_segment>
 8014120:	4603      	mov	r3, r0
 8014122:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8014124:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014128:	2b00      	cmp	r3, #0
 801412a:	d007      	beq.n	801413c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	8b5b      	ldrh	r3, [r3, #26]
 8014130:	f043 0303 	orr.w	r3, r3, #3
 8014134:	b29a      	uxth	r2, r3
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	835a      	strh	r2, [r3, #26]
 801413a:	e006      	b.n	801414a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	8b5b      	ldrh	r3, [r3, #26]
 8014140:	f023 0303 	bic.w	r3, r3, #3
 8014144:	b29a      	uxth	r2, r3
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801414a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801414e:	4618      	mov	r0, r3
 8014150:	371c      	adds	r7, #28
 8014152:	46bd      	mov	sp, r7
 8014154:	bd90      	pop	{r4, r7, pc}
 8014156:	bf00      	nop
 8014158:	0801db70 	.word	0x0801db70
 801415c:	0801e32c 	.word	0x0801e32c
 8014160:	0801dbc4 	.word	0x0801dbc4

08014164 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8014164:	b590      	push	{r4, r7, lr}
 8014166:	b087      	sub	sp, #28
 8014168:	af00      	add	r7, sp, #0
 801416a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801416c:	2300      	movs	r3, #0
 801416e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	2b00      	cmp	r3, #0
 8014174:	d106      	bne.n	8014184 <tcp_keepalive+0x20>
 8014176:	4b18      	ldr	r3, [pc, #96]	; (80141d8 <tcp_keepalive+0x74>)
 8014178:	f640 0224 	movw	r2, #2084	; 0x824
 801417c:	4917      	ldr	r1, [pc, #92]	; (80141dc <tcp_keepalive+0x78>)
 801417e:	4818      	ldr	r0, [pc, #96]	; (80141e0 <tcp_keepalive+0x7c>)
 8014180:	f006 ffc0 	bl	801b104 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8014184:	7dfb      	ldrb	r3, [r7, #23]
 8014186:	b29c      	uxth	r4, r3
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801418c:	3b01      	subs	r3, #1
 801418e:	4618      	mov	r0, r3
 8014190:	f7f8 fa8d 	bl	800c6ae <lwip_htonl>
 8014194:	4603      	mov	r3, r0
 8014196:	2200      	movs	r2, #0
 8014198:	4621      	mov	r1, r4
 801419a:	6878      	ldr	r0, [r7, #4]
 801419c:	f7ff fe66 	bl	8013e6c <tcp_output_alloc_header>
 80141a0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80141a2:	693b      	ldr	r3, [r7, #16]
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	d102      	bne.n	80141ae <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80141a8:	f04f 33ff 	mov.w	r3, #4294967295
 80141ac:	e010      	b.n	80141d0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80141ae:	7dfb      	ldrb	r3, [r7, #23]
 80141b0:	2200      	movs	r2, #0
 80141b2:	6939      	ldr	r1, [r7, #16]
 80141b4:	6878      	ldr	r0, [r7, #4]
 80141b6:	f7ff fe97 	bl	8013ee8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80141ba:	687a      	ldr	r2, [r7, #4]
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	3304      	adds	r3, #4
 80141c0:	6939      	ldr	r1, [r7, #16]
 80141c2:	6878      	ldr	r0, [r7, #4]
 80141c4:	f7ff fed0 	bl	8013f68 <tcp_output_control_segment>
 80141c8:	4603      	mov	r3, r0
 80141ca:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80141cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80141d0:	4618      	mov	r0, r3
 80141d2:	371c      	adds	r7, #28
 80141d4:	46bd      	mov	sp, r7
 80141d6:	bd90      	pop	{r4, r7, pc}
 80141d8:	0801db70 	.word	0x0801db70
 80141dc:	0801e34c 	.word	0x0801e34c
 80141e0:	0801dbc4 	.word	0x0801dbc4

080141e4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80141e4:	b590      	push	{r4, r7, lr}
 80141e6:	b08b      	sub	sp, #44	; 0x2c
 80141e8:	af00      	add	r7, sp, #0
 80141ea:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80141ec:	2300      	movs	r3, #0
 80141ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d106      	bne.n	8014206 <tcp_zero_window_probe+0x22>
 80141f8:	4b4c      	ldr	r3, [pc, #304]	; (801432c <tcp_zero_window_probe+0x148>)
 80141fa:	f640 024f 	movw	r2, #2127	; 0x84f
 80141fe:	494c      	ldr	r1, [pc, #304]	; (8014330 <tcp_zero_window_probe+0x14c>)
 8014200:	484c      	ldr	r0, [pc, #304]	; (8014334 <tcp_zero_window_probe+0x150>)
 8014202:	f006 ff7f 	bl	801b104 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801420a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801420c:	6a3b      	ldr	r3, [r7, #32]
 801420e:	2b00      	cmp	r3, #0
 8014210:	d101      	bne.n	8014216 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8014212:	2300      	movs	r3, #0
 8014214:	e086      	b.n	8014324 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801421c:	2bff      	cmp	r3, #255	; 0xff
 801421e:	d007      	beq.n	8014230 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014226:	3301      	adds	r3, #1
 8014228:	b2da      	uxtb	r2, r3
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8014230:	6a3b      	ldr	r3, [r7, #32]
 8014232:	68db      	ldr	r3, [r3, #12]
 8014234:	899b      	ldrh	r3, [r3, #12]
 8014236:	b29b      	uxth	r3, r3
 8014238:	4618      	mov	r0, r3
 801423a:	f7f8 fa23 	bl	800c684 <lwip_htons>
 801423e:	4603      	mov	r3, r0
 8014240:	b2db      	uxtb	r3, r3
 8014242:	f003 0301 	and.w	r3, r3, #1
 8014246:	2b00      	cmp	r3, #0
 8014248:	d005      	beq.n	8014256 <tcp_zero_window_probe+0x72>
 801424a:	6a3b      	ldr	r3, [r7, #32]
 801424c:	891b      	ldrh	r3, [r3, #8]
 801424e:	2b00      	cmp	r3, #0
 8014250:	d101      	bne.n	8014256 <tcp_zero_window_probe+0x72>
 8014252:	2301      	movs	r3, #1
 8014254:	e000      	b.n	8014258 <tcp_zero_window_probe+0x74>
 8014256:	2300      	movs	r3, #0
 8014258:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801425a:	7ffb      	ldrb	r3, [r7, #31]
 801425c:	2b00      	cmp	r3, #0
 801425e:	bf0c      	ite	eq
 8014260:	2301      	moveq	r3, #1
 8014262:	2300      	movne	r3, #0
 8014264:	b2db      	uxtb	r3, r3
 8014266:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8014268:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801426c:	b299      	uxth	r1, r3
 801426e:	6a3b      	ldr	r3, [r7, #32]
 8014270:	68db      	ldr	r3, [r3, #12]
 8014272:	685b      	ldr	r3, [r3, #4]
 8014274:	8bba      	ldrh	r2, [r7, #28]
 8014276:	6878      	ldr	r0, [r7, #4]
 8014278:	f7ff fdf8 	bl	8013e6c <tcp_output_alloc_header>
 801427c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801427e:	69bb      	ldr	r3, [r7, #24]
 8014280:	2b00      	cmp	r3, #0
 8014282:	d102      	bne.n	801428a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8014284:	f04f 33ff 	mov.w	r3, #4294967295
 8014288:	e04c      	b.n	8014324 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801428a:	69bb      	ldr	r3, [r7, #24]
 801428c:	685b      	ldr	r3, [r3, #4]
 801428e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8014290:	7ffb      	ldrb	r3, [r7, #31]
 8014292:	2b00      	cmp	r3, #0
 8014294:	d011      	beq.n	80142ba <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8014296:	697b      	ldr	r3, [r7, #20]
 8014298:	899b      	ldrh	r3, [r3, #12]
 801429a:	b29b      	uxth	r3, r3
 801429c:	b21b      	sxth	r3, r3
 801429e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80142a2:	b21c      	sxth	r4, r3
 80142a4:	2011      	movs	r0, #17
 80142a6:	f7f8 f9ed 	bl	800c684 <lwip_htons>
 80142aa:	4603      	mov	r3, r0
 80142ac:	b21b      	sxth	r3, r3
 80142ae:	4323      	orrs	r3, r4
 80142b0:	b21b      	sxth	r3, r3
 80142b2:	b29a      	uxth	r2, r3
 80142b4:	697b      	ldr	r3, [r7, #20]
 80142b6:	819a      	strh	r2, [r3, #12]
 80142b8:	e010      	b.n	80142dc <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80142ba:	69bb      	ldr	r3, [r7, #24]
 80142bc:	685b      	ldr	r3, [r3, #4]
 80142be:	3314      	adds	r3, #20
 80142c0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80142c2:	6a3b      	ldr	r3, [r7, #32]
 80142c4:	6858      	ldr	r0, [r3, #4]
 80142c6:	6a3b      	ldr	r3, [r7, #32]
 80142c8:	685b      	ldr	r3, [r3, #4]
 80142ca:	891a      	ldrh	r2, [r3, #8]
 80142cc:	6a3b      	ldr	r3, [r7, #32]
 80142ce:	891b      	ldrh	r3, [r3, #8]
 80142d0:	1ad3      	subs	r3, r2, r3
 80142d2:	b29b      	uxth	r3, r3
 80142d4:	2201      	movs	r2, #1
 80142d6:	6939      	ldr	r1, [r7, #16]
 80142d8:	f7f9 ff76 	bl	800e1c8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80142dc:	6a3b      	ldr	r3, [r7, #32]
 80142de:	68db      	ldr	r3, [r3, #12]
 80142e0:	685b      	ldr	r3, [r3, #4]
 80142e2:	4618      	mov	r0, r3
 80142e4:	f7f8 f9e3 	bl	800c6ae <lwip_htonl>
 80142e8:	4603      	mov	r3, r0
 80142ea:	3301      	adds	r3, #1
 80142ec:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80142f2:	68fb      	ldr	r3, [r7, #12]
 80142f4:	1ad3      	subs	r3, r2, r3
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	da02      	bge.n	8014300 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	68fa      	ldr	r2, [r7, #12]
 80142fe:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014300:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014304:	2200      	movs	r2, #0
 8014306:	69b9      	ldr	r1, [r7, #24]
 8014308:	6878      	ldr	r0, [r7, #4]
 801430a:	f7ff fded 	bl	8013ee8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801430e:	687a      	ldr	r2, [r7, #4]
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	3304      	adds	r3, #4
 8014314:	69b9      	ldr	r1, [r7, #24]
 8014316:	6878      	ldr	r0, [r7, #4]
 8014318:	f7ff fe26 	bl	8013f68 <tcp_output_control_segment>
 801431c:	4603      	mov	r3, r0
 801431e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014320:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014324:	4618      	mov	r0, r3
 8014326:	372c      	adds	r7, #44	; 0x2c
 8014328:	46bd      	mov	sp, r7
 801432a:	bd90      	pop	{r4, r7, pc}
 801432c:	0801db70 	.word	0x0801db70
 8014330:	0801e368 	.word	0x0801e368
 8014334:	0801dbc4 	.word	0x0801dbc4

08014338 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8014338:	b580      	push	{r7, lr}
 801433a:	b082      	sub	sp, #8
 801433c:	af00      	add	r7, sp, #0
 801433e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8014340:	f7fa f830 	bl	800e3a4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8014344:	4b0a      	ldr	r3, [pc, #40]	; (8014370 <tcpip_tcp_timer+0x38>)
 8014346:	681b      	ldr	r3, [r3, #0]
 8014348:	2b00      	cmp	r3, #0
 801434a:	d103      	bne.n	8014354 <tcpip_tcp_timer+0x1c>
 801434c:	4b09      	ldr	r3, [pc, #36]	; (8014374 <tcpip_tcp_timer+0x3c>)
 801434e:	681b      	ldr	r3, [r3, #0]
 8014350:	2b00      	cmp	r3, #0
 8014352:	d005      	beq.n	8014360 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014354:	2200      	movs	r2, #0
 8014356:	4908      	ldr	r1, [pc, #32]	; (8014378 <tcpip_tcp_timer+0x40>)
 8014358:	20fa      	movs	r0, #250	; 0xfa
 801435a:	f000 f8f3 	bl	8014544 <sys_timeout>
 801435e:	e003      	b.n	8014368 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8014360:	4b06      	ldr	r3, [pc, #24]	; (801437c <tcpip_tcp_timer+0x44>)
 8014362:	2200      	movs	r2, #0
 8014364:	601a      	str	r2, [r3, #0]
  }
}
 8014366:	bf00      	nop
 8014368:	bf00      	nop
 801436a:	3708      	adds	r7, #8
 801436c:	46bd      	mov	sp, r7
 801436e:	bd80      	pop	{r7, pc}
 8014370:	2000db1c 	.word	0x2000db1c
 8014374:	2000db2c 	.word	0x2000db2c
 8014378:	08014339 	.word	0x08014339
 801437c:	20004c00 	.word	0x20004c00

08014380 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8014380:	b580      	push	{r7, lr}
 8014382:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8014384:	4b0a      	ldr	r3, [pc, #40]	; (80143b0 <tcp_timer_needed+0x30>)
 8014386:	681b      	ldr	r3, [r3, #0]
 8014388:	2b00      	cmp	r3, #0
 801438a:	d10f      	bne.n	80143ac <tcp_timer_needed+0x2c>
 801438c:	4b09      	ldr	r3, [pc, #36]	; (80143b4 <tcp_timer_needed+0x34>)
 801438e:	681b      	ldr	r3, [r3, #0]
 8014390:	2b00      	cmp	r3, #0
 8014392:	d103      	bne.n	801439c <tcp_timer_needed+0x1c>
 8014394:	4b08      	ldr	r3, [pc, #32]	; (80143b8 <tcp_timer_needed+0x38>)
 8014396:	681b      	ldr	r3, [r3, #0]
 8014398:	2b00      	cmp	r3, #0
 801439a:	d007      	beq.n	80143ac <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801439c:	4b04      	ldr	r3, [pc, #16]	; (80143b0 <tcp_timer_needed+0x30>)
 801439e:	2201      	movs	r2, #1
 80143a0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80143a2:	2200      	movs	r2, #0
 80143a4:	4905      	ldr	r1, [pc, #20]	; (80143bc <tcp_timer_needed+0x3c>)
 80143a6:	20fa      	movs	r0, #250	; 0xfa
 80143a8:	f000 f8cc 	bl	8014544 <sys_timeout>
  }
}
 80143ac:	bf00      	nop
 80143ae:	bd80      	pop	{r7, pc}
 80143b0:	20004c00 	.word	0x20004c00
 80143b4:	2000db1c 	.word	0x2000db1c
 80143b8:	2000db2c 	.word	0x2000db2c
 80143bc:	08014339 	.word	0x08014339

080143c0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80143c0:	b580      	push	{r7, lr}
 80143c2:	b086      	sub	sp, #24
 80143c4:	af00      	add	r7, sp, #0
 80143c6:	60f8      	str	r0, [r7, #12]
 80143c8:	60b9      	str	r1, [r7, #8]
 80143ca:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80143cc:	200a      	movs	r0, #10
 80143ce:	f7f8 fe0f 	bl	800cff0 <memp_malloc>
 80143d2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80143d4:	693b      	ldr	r3, [r7, #16]
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	d109      	bne.n	80143ee <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80143da:	693b      	ldr	r3, [r7, #16]
 80143dc:	2b00      	cmp	r3, #0
 80143de:	d151      	bne.n	8014484 <sys_timeout_abs+0xc4>
 80143e0:	4b2a      	ldr	r3, [pc, #168]	; (801448c <sys_timeout_abs+0xcc>)
 80143e2:	22be      	movs	r2, #190	; 0xbe
 80143e4:	492a      	ldr	r1, [pc, #168]	; (8014490 <sys_timeout_abs+0xd0>)
 80143e6:	482b      	ldr	r0, [pc, #172]	; (8014494 <sys_timeout_abs+0xd4>)
 80143e8:	f006 fe8c 	bl	801b104 <iprintf>
    return;
 80143ec:	e04a      	b.n	8014484 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80143ee:	693b      	ldr	r3, [r7, #16]
 80143f0:	2200      	movs	r2, #0
 80143f2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80143f4:	693b      	ldr	r3, [r7, #16]
 80143f6:	68ba      	ldr	r2, [r7, #8]
 80143f8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80143fa:	693b      	ldr	r3, [r7, #16]
 80143fc:	687a      	ldr	r2, [r7, #4]
 80143fe:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8014400:	693b      	ldr	r3, [r7, #16]
 8014402:	68fa      	ldr	r2, [r7, #12]
 8014404:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8014406:	4b24      	ldr	r3, [pc, #144]	; (8014498 <sys_timeout_abs+0xd8>)
 8014408:	681b      	ldr	r3, [r3, #0]
 801440a:	2b00      	cmp	r3, #0
 801440c:	d103      	bne.n	8014416 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801440e:	4a22      	ldr	r2, [pc, #136]	; (8014498 <sys_timeout_abs+0xd8>)
 8014410:	693b      	ldr	r3, [r7, #16]
 8014412:	6013      	str	r3, [r2, #0]
    return;
 8014414:	e037      	b.n	8014486 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8014416:	693b      	ldr	r3, [r7, #16]
 8014418:	685a      	ldr	r2, [r3, #4]
 801441a:	4b1f      	ldr	r3, [pc, #124]	; (8014498 <sys_timeout_abs+0xd8>)
 801441c:	681b      	ldr	r3, [r3, #0]
 801441e:	685b      	ldr	r3, [r3, #4]
 8014420:	1ad3      	subs	r3, r2, r3
 8014422:	0fdb      	lsrs	r3, r3, #31
 8014424:	f003 0301 	and.w	r3, r3, #1
 8014428:	b2db      	uxtb	r3, r3
 801442a:	2b00      	cmp	r3, #0
 801442c:	d007      	beq.n	801443e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801442e:	4b1a      	ldr	r3, [pc, #104]	; (8014498 <sys_timeout_abs+0xd8>)
 8014430:	681a      	ldr	r2, [r3, #0]
 8014432:	693b      	ldr	r3, [r7, #16]
 8014434:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8014436:	4a18      	ldr	r2, [pc, #96]	; (8014498 <sys_timeout_abs+0xd8>)
 8014438:	693b      	ldr	r3, [r7, #16]
 801443a:	6013      	str	r3, [r2, #0]
 801443c:	e023      	b.n	8014486 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801443e:	4b16      	ldr	r3, [pc, #88]	; (8014498 <sys_timeout_abs+0xd8>)
 8014440:	681b      	ldr	r3, [r3, #0]
 8014442:	617b      	str	r3, [r7, #20]
 8014444:	e01a      	b.n	801447c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8014446:	697b      	ldr	r3, [r7, #20]
 8014448:	681b      	ldr	r3, [r3, #0]
 801444a:	2b00      	cmp	r3, #0
 801444c:	d00b      	beq.n	8014466 <sys_timeout_abs+0xa6>
 801444e:	693b      	ldr	r3, [r7, #16]
 8014450:	685a      	ldr	r2, [r3, #4]
 8014452:	697b      	ldr	r3, [r7, #20]
 8014454:	681b      	ldr	r3, [r3, #0]
 8014456:	685b      	ldr	r3, [r3, #4]
 8014458:	1ad3      	subs	r3, r2, r3
 801445a:	0fdb      	lsrs	r3, r3, #31
 801445c:	f003 0301 	and.w	r3, r3, #1
 8014460:	b2db      	uxtb	r3, r3
 8014462:	2b00      	cmp	r3, #0
 8014464:	d007      	beq.n	8014476 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8014466:	697b      	ldr	r3, [r7, #20]
 8014468:	681a      	ldr	r2, [r3, #0]
 801446a:	693b      	ldr	r3, [r7, #16]
 801446c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801446e:	697b      	ldr	r3, [r7, #20]
 8014470:	693a      	ldr	r2, [r7, #16]
 8014472:	601a      	str	r2, [r3, #0]
        break;
 8014474:	e007      	b.n	8014486 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8014476:	697b      	ldr	r3, [r7, #20]
 8014478:	681b      	ldr	r3, [r3, #0]
 801447a:	617b      	str	r3, [r7, #20]
 801447c:	697b      	ldr	r3, [r7, #20]
 801447e:	2b00      	cmp	r3, #0
 8014480:	d1e1      	bne.n	8014446 <sys_timeout_abs+0x86>
 8014482:	e000      	b.n	8014486 <sys_timeout_abs+0xc6>
    return;
 8014484:	bf00      	nop
      }
    }
  }
}
 8014486:	3718      	adds	r7, #24
 8014488:	46bd      	mov	sp, r7
 801448a:	bd80      	pop	{r7, pc}
 801448c:	0801e38c 	.word	0x0801e38c
 8014490:	0801e3c0 	.word	0x0801e3c0
 8014494:	0801e400 	.word	0x0801e400
 8014498:	20004bf8 	.word	0x20004bf8

0801449c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801449c:	b580      	push	{r7, lr}
 801449e:	b086      	sub	sp, #24
 80144a0:	af00      	add	r7, sp, #0
 80144a2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80144a8:	697b      	ldr	r3, [r7, #20]
 80144aa:	685b      	ldr	r3, [r3, #4]
 80144ac:	4798      	blx	r3

  now = sys_now();
 80144ae:	f7f1 fb33 	bl	8005b18 <sys_now>
 80144b2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80144b4:	697b      	ldr	r3, [r7, #20]
 80144b6:	681a      	ldr	r2, [r3, #0]
 80144b8:	4b0f      	ldr	r3, [pc, #60]	; (80144f8 <lwip_cyclic_timer+0x5c>)
 80144ba:	681b      	ldr	r3, [r3, #0]
 80144bc:	4413      	add	r3, r2
 80144be:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80144c0:	68fa      	ldr	r2, [r7, #12]
 80144c2:	693b      	ldr	r3, [r7, #16]
 80144c4:	1ad3      	subs	r3, r2, r3
 80144c6:	0fdb      	lsrs	r3, r3, #31
 80144c8:	f003 0301 	and.w	r3, r3, #1
 80144cc:	b2db      	uxtb	r3, r3
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	d009      	beq.n	80144e6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80144d2:	697b      	ldr	r3, [r7, #20]
 80144d4:	681a      	ldr	r2, [r3, #0]
 80144d6:	693b      	ldr	r3, [r7, #16]
 80144d8:	4413      	add	r3, r2
 80144da:	687a      	ldr	r2, [r7, #4]
 80144dc:	4907      	ldr	r1, [pc, #28]	; (80144fc <lwip_cyclic_timer+0x60>)
 80144de:	4618      	mov	r0, r3
 80144e0:	f7ff ff6e 	bl	80143c0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80144e4:	e004      	b.n	80144f0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80144e6:	687a      	ldr	r2, [r7, #4]
 80144e8:	4904      	ldr	r1, [pc, #16]	; (80144fc <lwip_cyclic_timer+0x60>)
 80144ea:	68f8      	ldr	r0, [r7, #12]
 80144ec:	f7ff ff68 	bl	80143c0 <sys_timeout_abs>
}
 80144f0:	bf00      	nop
 80144f2:	3718      	adds	r7, #24
 80144f4:	46bd      	mov	sp, r7
 80144f6:	bd80      	pop	{r7, pc}
 80144f8:	20004bfc 	.word	0x20004bfc
 80144fc:	0801449d 	.word	0x0801449d

08014500 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8014500:	b580      	push	{r7, lr}
 8014502:	b082      	sub	sp, #8
 8014504:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014506:	2301      	movs	r3, #1
 8014508:	607b      	str	r3, [r7, #4]
 801450a:	e00e      	b.n	801452a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801450c:	4a0b      	ldr	r2, [pc, #44]	; (801453c <sys_timeouts_init+0x3c>)
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	00db      	lsls	r3, r3, #3
 8014518:	4a08      	ldr	r2, [pc, #32]	; (801453c <sys_timeouts_init+0x3c>)
 801451a:	4413      	add	r3, r2
 801451c:	461a      	mov	r2, r3
 801451e:	4908      	ldr	r1, [pc, #32]	; (8014540 <sys_timeouts_init+0x40>)
 8014520:	f000 f810 	bl	8014544 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	3301      	adds	r3, #1
 8014528:	607b      	str	r3, [r7, #4]
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	2b02      	cmp	r3, #2
 801452e:	d9ed      	bls.n	801450c <sys_timeouts_init+0xc>
  }
}
 8014530:	bf00      	nop
 8014532:	bf00      	nop
 8014534:	3708      	adds	r7, #8
 8014536:	46bd      	mov	sp, r7
 8014538:	bd80      	pop	{r7, pc}
 801453a:	bf00      	nop
 801453c:	0801f13c 	.word	0x0801f13c
 8014540:	0801449d 	.word	0x0801449d

08014544 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8014544:	b580      	push	{r7, lr}
 8014546:	b086      	sub	sp, #24
 8014548:	af00      	add	r7, sp, #0
 801454a:	60f8      	str	r0, [r7, #12]
 801454c:	60b9      	str	r1, [r7, #8]
 801454e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8014550:	68fb      	ldr	r3, [r7, #12]
 8014552:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014556:	d306      	bcc.n	8014566 <sys_timeout+0x22>
 8014558:	4b0a      	ldr	r3, [pc, #40]	; (8014584 <sys_timeout+0x40>)
 801455a:	f240 1229 	movw	r2, #297	; 0x129
 801455e:	490a      	ldr	r1, [pc, #40]	; (8014588 <sys_timeout+0x44>)
 8014560:	480a      	ldr	r0, [pc, #40]	; (801458c <sys_timeout+0x48>)
 8014562:	f006 fdcf 	bl	801b104 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8014566:	f7f1 fad7 	bl	8005b18 <sys_now>
 801456a:	4602      	mov	r2, r0
 801456c:	68fb      	ldr	r3, [r7, #12]
 801456e:	4413      	add	r3, r2
 8014570:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8014572:	687a      	ldr	r2, [r7, #4]
 8014574:	68b9      	ldr	r1, [r7, #8]
 8014576:	6978      	ldr	r0, [r7, #20]
 8014578:	f7ff ff22 	bl	80143c0 <sys_timeout_abs>
#endif
}
 801457c:	bf00      	nop
 801457e:	3718      	adds	r7, #24
 8014580:	46bd      	mov	sp, r7
 8014582:	bd80      	pop	{r7, pc}
 8014584:	0801e38c 	.word	0x0801e38c
 8014588:	0801e428 	.word	0x0801e428
 801458c:	0801e400 	.word	0x0801e400

08014590 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8014590:	b580      	push	{r7, lr}
 8014592:	b084      	sub	sp, #16
 8014594:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8014596:	f7f1 fabf 	bl	8005b18 <sys_now>
 801459a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801459c:	4b17      	ldr	r3, [pc, #92]	; (80145fc <sys_check_timeouts+0x6c>)
 801459e:	681b      	ldr	r3, [r3, #0]
 80145a0:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80145a2:	68bb      	ldr	r3, [r7, #8]
 80145a4:	2b00      	cmp	r3, #0
 80145a6:	d022      	beq.n	80145ee <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80145a8:	68bb      	ldr	r3, [r7, #8]
 80145aa:	685b      	ldr	r3, [r3, #4]
 80145ac:	68fa      	ldr	r2, [r7, #12]
 80145ae:	1ad3      	subs	r3, r2, r3
 80145b0:	0fdb      	lsrs	r3, r3, #31
 80145b2:	f003 0301 	and.w	r3, r3, #1
 80145b6:	b2db      	uxtb	r3, r3
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	d11a      	bne.n	80145f2 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80145bc:	68bb      	ldr	r3, [r7, #8]
 80145be:	681b      	ldr	r3, [r3, #0]
 80145c0:	4a0e      	ldr	r2, [pc, #56]	; (80145fc <sys_check_timeouts+0x6c>)
 80145c2:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80145c4:	68bb      	ldr	r3, [r7, #8]
 80145c6:	689b      	ldr	r3, [r3, #8]
 80145c8:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80145ca:	68bb      	ldr	r3, [r7, #8]
 80145cc:	68db      	ldr	r3, [r3, #12]
 80145ce:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80145d0:	68bb      	ldr	r3, [r7, #8]
 80145d2:	685b      	ldr	r3, [r3, #4]
 80145d4:	4a0a      	ldr	r2, [pc, #40]	; (8014600 <sys_check_timeouts+0x70>)
 80145d6:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80145d8:	68b9      	ldr	r1, [r7, #8]
 80145da:	200a      	movs	r0, #10
 80145dc:	f7f8 fd5a 	bl	800d094 <memp_free>
    if (handler != NULL) {
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	d0da      	beq.n	801459c <sys_check_timeouts+0xc>
      handler(arg);
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	6838      	ldr	r0, [r7, #0]
 80145ea:	4798      	blx	r3
  do {
 80145ec:	e7d6      	b.n	801459c <sys_check_timeouts+0xc>
      return;
 80145ee:	bf00      	nop
 80145f0:	e000      	b.n	80145f4 <sys_check_timeouts+0x64>
      return;
 80145f2:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80145f4:	3710      	adds	r7, #16
 80145f6:	46bd      	mov	sp, r7
 80145f8:	bd80      	pop	{r7, pc}
 80145fa:	bf00      	nop
 80145fc:	20004bf8 	.word	0x20004bf8
 8014600:	20004bfc 	.word	0x20004bfc

08014604 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8014604:	b580      	push	{r7, lr}
 8014606:	b082      	sub	sp, #8
 8014608:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801460a:	4b16      	ldr	r3, [pc, #88]	; (8014664 <sys_timeouts_sleeptime+0x60>)
 801460c:	681b      	ldr	r3, [r3, #0]
 801460e:	2b00      	cmp	r3, #0
 8014610:	d102      	bne.n	8014618 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8014612:	f04f 33ff 	mov.w	r3, #4294967295
 8014616:	e020      	b.n	801465a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8014618:	f7f1 fa7e 	bl	8005b18 <sys_now>
 801461c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801461e:	4b11      	ldr	r3, [pc, #68]	; (8014664 <sys_timeouts_sleeptime+0x60>)
 8014620:	681b      	ldr	r3, [r3, #0]
 8014622:	685a      	ldr	r2, [r3, #4]
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	1ad3      	subs	r3, r2, r3
 8014628:	0fdb      	lsrs	r3, r3, #31
 801462a:	f003 0301 	and.w	r3, r3, #1
 801462e:	b2db      	uxtb	r3, r3
 8014630:	2b00      	cmp	r3, #0
 8014632:	d001      	beq.n	8014638 <sys_timeouts_sleeptime+0x34>
    return 0;
 8014634:	2300      	movs	r3, #0
 8014636:	e010      	b.n	801465a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8014638:	4b0a      	ldr	r3, [pc, #40]	; (8014664 <sys_timeouts_sleeptime+0x60>)
 801463a:	681b      	ldr	r3, [r3, #0]
 801463c:	685a      	ldr	r2, [r3, #4]
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	1ad3      	subs	r3, r2, r3
 8014642:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8014644:	683b      	ldr	r3, [r7, #0]
 8014646:	2b00      	cmp	r3, #0
 8014648:	da06      	bge.n	8014658 <sys_timeouts_sleeptime+0x54>
 801464a:	4b07      	ldr	r3, [pc, #28]	; (8014668 <sys_timeouts_sleeptime+0x64>)
 801464c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8014650:	4906      	ldr	r1, [pc, #24]	; (801466c <sys_timeouts_sleeptime+0x68>)
 8014652:	4807      	ldr	r0, [pc, #28]	; (8014670 <sys_timeouts_sleeptime+0x6c>)
 8014654:	f006 fd56 	bl	801b104 <iprintf>
    return ret;
 8014658:	683b      	ldr	r3, [r7, #0]
  }
}
 801465a:	4618      	mov	r0, r3
 801465c:	3708      	adds	r7, #8
 801465e:	46bd      	mov	sp, r7
 8014660:	bd80      	pop	{r7, pc}
 8014662:	bf00      	nop
 8014664:	20004bf8 	.word	0x20004bf8
 8014668:	0801e38c 	.word	0x0801e38c
 801466c:	0801e460 	.word	0x0801e460
 8014670:	0801e400 	.word	0x0801e400

08014674 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8014674:	b580      	push	{r7, lr}
 8014676:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8014678:	f006 fd5c 	bl	801b134 <rand>
 801467c:	4603      	mov	r3, r0
 801467e:	b29b      	uxth	r3, r3
 8014680:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8014684:	b29b      	uxth	r3, r3
 8014686:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801468a:	b29a      	uxth	r2, r3
 801468c:	4b01      	ldr	r3, [pc, #4]	; (8014694 <udp_init+0x20>)
 801468e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8014690:	bf00      	nop
 8014692:	bd80      	pop	{r7, pc}
 8014694:	20000018 	.word	0x20000018

08014698 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8014698:	b480      	push	{r7}
 801469a:	b083      	sub	sp, #12
 801469c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801469e:	2300      	movs	r3, #0
 80146a0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80146a2:	4b17      	ldr	r3, [pc, #92]	; (8014700 <udp_new_port+0x68>)
 80146a4:	881b      	ldrh	r3, [r3, #0]
 80146a6:	1c5a      	adds	r2, r3, #1
 80146a8:	b291      	uxth	r1, r2
 80146aa:	4a15      	ldr	r2, [pc, #84]	; (8014700 <udp_new_port+0x68>)
 80146ac:	8011      	strh	r1, [r2, #0]
 80146ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80146b2:	4293      	cmp	r3, r2
 80146b4:	d103      	bne.n	80146be <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80146b6:	4b12      	ldr	r3, [pc, #72]	; (8014700 <udp_new_port+0x68>)
 80146b8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80146bc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80146be:	4b11      	ldr	r3, [pc, #68]	; (8014704 <udp_new_port+0x6c>)
 80146c0:	681b      	ldr	r3, [r3, #0]
 80146c2:	603b      	str	r3, [r7, #0]
 80146c4:	e011      	b.n	80146ea <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80146c6:	683b      	ldr	r3, [r7, #0]
 80146c8:	8a5a      	ldrh	r2, [r3, #18]
 80146ca:	4b0d      	ldr	r3, [pc, #52]	; (8014700 <udp_new_port+0x68>)
 80146cc:	881b      	ldrh	r3, [r3, #0]
 80146ce:	429a      	cmp	r2, r3
 80146d0:	d108      	bne.n	80146e4 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80146d2:	88fb      	ldrh	r3, [r7, #6]
 80146d4:	3301      	adds	r3, #1
 80146d6:	80fb      	strh	r3, [r7, #6]
 80146d8:	88fb      	ldrh	r3, [r7, #6]
 80146da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80146de:	d3e0      	bcc.n	80146a2 <udp_new_port+0xa>
        return 0;
 80146e0:	2300      	movs	r3, #0
 80146e2:	e007      	b.n	80146f4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80146e4:	683b      	ldr	r3, [r7, #0]
 80146e6:	68db      	ldr	r3, [r3, #12]
 80146e8:	603b      	str	r3, [r7, #0]
 80146ea:	683b      	ldr	r3, [r7, #0]
 80146ec:	2b00      	cmp	r3, #0
 80146ee:	d1ea      	bne.n	80146c6 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80146f0:	4b03      	ldr	r3, [pc, #12]	; (8014700 <udp_new_port+0x68>)
 80146f2:	881b      	ldrh	r3, [r3, #0]
}
 80146f4:	4618      	mov	r0, r3
 80146f6:	370c      	adds	r7, #12
 80146f8:	46bd      	mov	sp, r7
 80146fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146fe:	4770      	bx	lr
 8014700:	20000018 	.word	0x20000018
 8014704:	2000db34 	.word	0x2000db34

08014708 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8014708:	b580      	push	{r7, lr}
 801470a:	b084      	sub	sp, #16
 801470c:	af00      	add	r7, sp, #0
 801470e:	60f8      	str	r0, [r7, #12]
 8014710:	60b9      	str	r1, [r7, #8]
 8014712:	4613      	mov	r3, r2
 8014714:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8014716:	68fb      	ldr	r3, [r7, #12]
 8014718:	2b00      	cmp	r3, #0
 801471a:	d105      	bne.n	8014728 <udp_input_local_match+0x20>
 801471c:	4b27      	ldr	r3, [pc, #156]	; (80147bc <udp_input_local_match+0xb4>)
 801471e:	2287      	movs	r2, #135	; 0x87
 8014720:	4927      	ldr	r1, [pc, #156]	; (80147c0 <udp_input_local_match+0xb8>)
 8014722:	4828      	ldr	r0, [pc, #160]	; (80147c4 <udp_input_local_match+0xbc>)
 8014724:	f006 fcee 	bl	801b104 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8014728:	68bb      	ldr	r3, [r7, #8]
 801472a:	2b00      	cmp	r3, #0
 801472c:	d105      	bne.n	801473a <udp_input_local_match+0x32>
 801472e:	4b23      	ldr	r3, [pc, #140]	; (80147bc <udp_input_local_match+0xb4>)
 8014730:	2288      	movs	r2, #136	; 0x88
 8014732:	4925      	ldr	r1, [pc, #148]	; (80147c8 <udp_input_local_match+0xc0>)
 8014734:	4823      	ldr	r0, [pc, #140]	; (80147c4 <udp_input_local_match+0xbc>)
 8014736:	f006 fce5 	bl	801b104 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801473a:	68fb      	ldr	r3, [r7, #12]
 801473c:	7a1b      	ldrb	r3, [r3, #8]
 801473e:	2b00      	cmp	r3, #0
 8014740:	d00b      	beq.n	801475a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014742:	68fb      	ldr	r3, [r7, #12]
 8014744:	7a1a      	ldrb	r2, [r3, #8]
 8014746:	4b21      	ldr	r3, [pc, #132]	; (80147cc <udp_input_local_match+0xc4>)
 8014748:	685b      	ldr	r3, [r3, #4]
 801474a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801474e:	3301      	adds	r3, #1
 8014750:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014752:	429a      	cmp	r2, r3
 8014754:	d001      	beq.n	801475a <udp_input_local_match+0x52>
    return 0;
 8014756:	2300      	movs	r3, #0
 8014758:	e02b      	b.n	80147b2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801475a:	79fb      	ldrb	r3, [r7, #7]
 801475c:	2b00      	cmp	r3, #0
 801475e:	d018      	beq.n	8014792 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014760:	68fb      	ldr	r3, [r7, #12]
 8014762:	2b00      	cmp	r3, #0
 8014764:	d013      	beq.n	801478e <udp_input_local_match+0x86>
 8014766:	68fb      	ldr	r3, [r7, #12]
 8014768:	681b      	ldr	r3, [r3, #0]
 801476a:	2b00      	cmp	r3, #0
 801476c:	d00f      	beq.n	801478e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801476e:	4b17      	ldr	r3, [pc, #92]	; (80147cc <udp_input_local_match+0xc4>)
 8014770:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014776:	d00a      	beq.n	801478e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8014778:	68fb      	ldr	r3, [r7, #12]
 801477a:	681a      	ldr	r2, [r3, #0]
 801477c:	4b13      	ldr	r3, [pc, #76]	; (80147cc <udp_input_local_match+0xc4>)
 801477e:	695b      	ldr	r3, [r3, #20]
 8014780:	405a      	eors	r2, r3
 8014782:	68bb      	ldr	r3, [r7, #8]
 8014784:	3308      	adds	r3, #8
 8014786:	681b      	ldr	r3, [r3, #0]
 8014788:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801478a:	2b00      	cmp	r3, #0
 801478c:	d110      	bne.n	80147b0 <udp_input_local_match+0xa8>
          return 1;
 801478e:	2301      	movs	r3, #1
 8014790:	e00f      	b.n	80147b2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8014792:	68fb      	ldr	r3, [r7, #12]
 8014794:	2b00      	cmp	r3, #0
 8014796:	d009      	beq.n	80147ac <udp_input_local_match+0xa4>
 8014798:	68fb      	ldr	r3, [r7, #12]
 801479a:	681b      	ldr	r3, [r3, #0]
 801479c:	2b00      	cmp	r3, #0
 801479e:	d005      	beq.n	80147ac <udp_input_local_match+0xa4>
 80147a0:	68fb      	ldr	r3, [r7, #12]
 80147a2:	681a      	ldr	r2, [r3, #0]
 80147a4:	4b09      	ldr	r3, [pc, #36]	; (80147cc <udp_input_local_match+0xc4>)
 80147a6:	695b      	ldr	r3, [r3, #20]
 80147a8:	429a      	cmp	r2, r3
 80147aa:	d101      	bne.n	80147b0 <udp_input_local_match+0xa8>
        return 1;
 80147ac:	2301      	movs	r3, #1
 80147ae:	e000      	b.n	80147b2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80147b0:	2300      	movs	r3, #0
}
 80147b2:	4618      	mov	r0, r3
 80147b4:	3710      	adds	r7, #16
 80147b6:	46bd      	mov	sp, r7
 80147b8:	bd80      	pop	{r7, pc}
 80147ba:	bf00      	nop
 80147bc:	0801e474 	.word	0x0801e474
 80147c0:	0801e4a4 	.word	0x0801e4a4
 80147c4:	0801e4c8 	.word	0x0801e4c8
 80147c8:	0801e4f0 	.word	0x0801e4f0
 80147cc:	20008238 	.word	0x20008238

080147d0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80147d0:	b590      	push	{r4, r7, lr}
 80147d2:	b08d      	sub	sp, #52	; 0x34
 80147d4:	af02      	add	r7, sp, #8
 80147d6:	6078      	str	r0, [r7, #4]
 80147d8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80147da:	2300      	movs	r3, #0
 80147dc:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	d105      	bne.n	80147f0 <udp_input+0x20>
 80147e4:	4b7c      	ldr	r3, [pc, #496]	; (80149d8 <udp_input+0x208>)
 80147e6:	22cf      	movs	r2, #207	; 0xcf
 80147e8:	497c      	ldr	r1, [pc, #496]	; (80149dc <udp_input+0x20c>)
 80147ea:	487d      	ldr	r0, [pc, #500]	; (80149e0 <udp_input+0x210>)
 80147ec:	f006 fc8a 	bl	801b104 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80147f0:	683b      	ldr	r3, [r7, #0]
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	d105      	bne.n	8014802 <udp_input+0x32>
 80147f6:	4b78      	ldr	r3, [pc, #480]	; (80149d8 <udp_input+0x208>)
 80147f8:	22d0      	movs	r2, #208	; 0xd0
 80147fa:	497a      	ldr	r1, [pc, #488]	; (80149e4 <udp_input+0x214>)
 80147fc:	4878      	ldr	r0, [pc, #480]	; (80149e0 <udp_input+0x210>)
 80147fe:	f006 fc81 	bl	801b104 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	895b      	ldrh	r3, [r3, #10]
 8014806:	2b07      	cmp	r3, #7
 8014808:	d803      	bhi.n	8014812 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801480a:	6878      	ldr	r0, [r7, #4]
 801480c:	f7f9 fae6 	bl	800dddc <pbuf_free>
    goto end;
 8014810:	e0de      	b.n	80149d0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	685b      	ldr	r3, [r3, #4]
 8014816:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8014818:	4b73      	ldr	r3, [pc, #460]	; (80149e8 <udp_input+0x218>)
 801481a:	695b      	ldr	r3, [r3, #20]
 801481c:	4a72      	ldr	r2, [pc, #456]	; (80149e8 <udp_input+0x218>)
 801481e:	6812      	ldr	r2, [r2, #0]
 8014820:	4611      	mov	r1, r2
 8014822:	4618      	mov	r0, r3
 8014824:	f001 fe04 	bl	8016430 <ip4_addr_isbroadcast_u32>
 8014828:	4603      	mov	r3, r0
 801482a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801482c:	697b      	ldr	r3, [r7, #20]
 801482e:	881b      	ldrh	r3, [r3, #0]
 8014830:	b29b      	uxth	r3, r3
 8014832:	4618      	mov	r0, r3
 8014834:	f7f7 ff26 	bl	800c684 <lwip_htons>
 8014838:	4603      	mov	r3, r0
 801483a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801483c:	697b      	ldr	r3, [r7, #20]
 801483e:	885b      	ldrh	r3, [r3, #2]
 8014840:	b29b      	uxth	r3, r3
 8014842:	4618      	mov	r0, r3
 8014844:	f7f7 ff1e 	bl	800c684 <lwip_htons>
 8014848:	4603      	mov	r3, r0
 801484a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801484c:	2300      	movs	r3, #0
 801484e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8014850:	2300      	movs	r3, #0
 8014852:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8014854:	2300      	movs	r3, #0
 8014856:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014858:	4b64      	ldr	r3, [pc, #400]	; (80149ec <udp_input+0x21c>)
 801485a:	681b      	ldr	r3, [r3, #0]
 801485c:	627b      	str	r3, [r7, #36]	; 0x24
 801485e:	e054      	b.n	801490a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8014860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014862:	8a5b      	ldrh	r3, [r3, #18]
 8014864:	89fa      	ldrh	r2, [r7, #14]
 8014866:	429a      	cmp	r2, r3
 8014868:	d14a      	bne.n	8014900 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801486a:	7cfb      	ldrb	r3, [r7, #19]
 801486c:	461a      	mov	r2, r3
 801486e:	6839      	ldr	r1, [r7, #0]
 8014870:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014872:	f7ff ff49 	bl	8014708 <udp_input_local_match>
 8014876:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8014878:	2b00      	cmp	r3, #0
 801487a:	d041      	beq.n	8014900 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801487c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801487e:	7c1b      	ldrb	r3, [r3, #16]
 8014880:	f003 0304 	and.w	r3, r3, #4
 8014884:	2b00      	cmp	r3, #0
 8014886:	d11d      	bne.n	80148c4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8014888:	69fb      	ldr	r3, [r7, #28]
 801488a:	2b00      	cmp	r3, #0
 801488c:	d102      	bne.n	8014894 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801488e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014890:	61fb      	str	r3, [r7, #28]
 8014892:	e017      	b.n	80148c4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8014894:	7cfb      	ldrb	r3, [r7, #19]
 8014896:	2b00      	cmp	r3, #0
 8014898:	d014      	beq.n	80148c4 <udp_input+0xf4>
 801489a:	4b53      	ldr	r3, [pc, #332]	; (80149e8 <udp_input+0x218>)
 801489c:	695b      	ldr	r3, [r3, #20]
 801489e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80148a2:	d10f      	bne.n	80148c4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80148a4:	69fb      	ldr	r3, [r7, #28]
 80148a6:	681a      	ldr	r2, [r3, #0]
 80148a8:	683b      	ldr	r3, [r7, #0]
 80148aa:	3304      	adds	r3, #4
 80148ac:	681b      	ldr	r3, [r3, #0]
 80148ae:	429a      	cmp	r2, r3
 80148b0:	d008      	beq.n	80148c4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80148b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148b4:	681a      	ldr	r2, [r3, #0]
 80148b6:	683b      	ldr	r3, [r7, #0]
 80148b8:	3304      	adds	r3, #4
 80148ba:	681b      	ldr	r3, [r3, #0]
 80148bc:	429a      	cmp	r2, r3
 80148be:	d101      	bne.n	80148c4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80148c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148c2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80148c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148c6:	8a9b      	ldrh	r3, [r3, #20]
 80148c8:	8a3a      	ldrh	r2, [r7, #16]
 80148ca:	429a      	cmp	r2, r3
 80148cc:	d118      	bne.n	8014900 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80148ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148d0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d005      	beq.n	80148e2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80148d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148d8:	685a      	ldr	r2, [r3, #4]
 80148da:	4b43      	ldr	r3, [pc, #268]	; (80149e8 <udp_input+0x218>)
 80148dc:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80148de:	429a      	cmp	r2, r3
 80148e0:	d10e      	bne.n	8014900 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80148e2:	6a3b      	ldr	r3, [r7, #32]
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	d014      	beq.n	8014912 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80148e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148ea:	68da      	ldr	r2, [r3, #12]
 80148ec:	6a3b      	ldr	r3, [r7, #32]
 80148ee:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80148f0:	4b3e      	ldr	r3, [pc, #248]	; (80149ec <udp_input+0x21c>)
 80148f2:	681a      	ldr	r2, [r3, #0]
 80148f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148f6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80148f8:	4a3c      	ldr	r2, [pc, #240]	; (80149ec <udp_input+0x21c>)
 80148fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148fc:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80148fe:	e008      	b.n	8014912 <udp_input+0x142>
      }
    }

    prev = pcb;
 8014900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014902:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014906:	68db      	ldr	r3, [r3, #12]
 8014908:	627b      	str	r3, [r7, #36]	; 0x24
 801490a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801490c:	2b00      	cmp	r3, #0
 801490e:	d1a7      	bne.n	8014860 <udp_input+0x90>
 8014910:	e000      	b.n	8014914 <udp_input+0x144>
        break;
 8014912:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8014914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014916:	2b00      	cmp	r3, #0
 8014918:	d101      	bne.n	801491e <udp_input+0x14e>
    pcb = uncon_pcb;
 801491a:	69fb      	ldr	r3, [r7, #28]
 801491c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801491e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014920:	2b00      	cmp	r3, #0
 8014922:	d002      	beq.n	801492a <udp_input+0x15a>
    for_us = 1;
 8014924:	2301      	movs	r3, #1
 8014926:	76fb      	strb	r3, [r7, #27]
 8014928:	e00a      	b.n	8014940 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801492a:	683b      	ldr	r3, [r7, #0]
 801492c:	3304      	adds	r3, #4
 801492e:	681a      	ldr	r2, [r3, #0]
 8014930:	4b2d      	ldr	r3, [pc, #180]	; (80149e8 <udp_input+0x218>)
 8014932:	695b      	ldr	r3, [r3, #20]
 8014934:	429a      	cmp	r2, r3
 8014936:	bf0c      	ite	eq
 8014938:	2301      	moveq	r3, #1
 801493a:	2300      	movne	r3, #0
 801493c:	b2db      	uxtb	r3, r3
 801493e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8014940:	7efb      	ldrb	r3, [r7, #27]
 8014942:	2b00      	cmp	r3, #0
 8014944:	d041      	beq.n	80149ca <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8014946:	2108      	movs	r1, #8
 8014948:	6878      	ldr	r0, [r7, #4]
 801494a:	f7f9 f9c1 	bl	800dcd0 <pbuf_remove_header>
 801494e:	4603      	mov	r3, r0
 8014950:	2b00      	cmp	r3, #0
 8014952:	d00a      	beq.n	801496a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8014954:	4b20      	ldr	r3, [pc, #128]	; (80149d8 <udp_input+0x208>)
 8014956:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801495a:	4925      	ldr	r1, [pc, #148]	; (80149f0 <udp_input+0x220>)
 801495c:	4820      	ldr	r0, [pc, #128]	; (80149e0 <udp_input+0x210>)
 801495e:	f006 fbd1 	bl	801b104 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8014962:	6878      	ldr	r0, [r7, #4]
 8014964:	f7f9 fa3a 	bl	800dddc <pbuf_free>
      goto end;
 8014968:	e032      	b.n	80149d0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801496a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801496c:	2b00      	cmp	r3, #0
 801496e:	d012      	beq.n	8014996 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8014970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014972:	699b      	ldr	r3, [r3, #24]
 8014974:	2b00      	cmp	r3, #0
 8014976:	d00a      	beq.n	801498e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8014978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801497a:	699c      	ldr	r4, [r3, #24]
 801497c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801497e:	69d8      	ldr	r0, [r3, #28]
 8014980:	8a3b      	ldrh	r3, [r7, #16]
 8014982:	9300      	str	r3, [sp, #0]
 8014984:	4b1b      	ldr	r3, [pc, #108]	; (80149f4 <udp_input+0x224>)
 8014986:	687a      	ldr	r2, [r7, #4]
 8014988:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801498a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801498c:	e021      	b.n	80149d2 <udp_input+0x202>
        pbuf_free(p);
 801498e:	6878      	ldr	r0, [r7, #4]
 8014990:	f7f9 fa24 	bl	800dddc <pbuf_free>
        goto end;
 8014994:	e01c      	b.n	80149d0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8014996:	7cfb      	ldrb	r3, [r7, #19]
 8014998:	2b00      	cmp	r3, #0
 801499a:	d112      	bne.n	80149c2 <udp_input+0x1f2>
 801499c:	4b12      	ldr	r3, [pc, #72]	; (80149e8 <udp_input+0x218>)
 801499e:	695b      	ldr	r3, [r3, #20]
 80149a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80149a4:	2be0      	cmp	r3, #224	; 0xe0
 80149a6:	d00c      	beq.n	80149c2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80149a8:	4b0f      	ldr	r3, [pc, #60]	; (80149e8 <udp_input+0x218>)
 80149aa:	899b      	ldrh	r3, [r3, #12]
 80149ac:	3308      	adds	r3, #8
 80149ae:	b29b      	uxth	r3, r3
 80149b0:	b21b      	sxth	r3, r3
 80149b2:	4619      	mov	r1, r3
 80149b4:	6878      	ldr	r0, [r7, #4]
 80149b6:	f7f9 f9fe 	bl	800ddb6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80149ba:	2103      	movs	r1, #3
 80149bc:	6878      	ldr	r0, [r7, #4]
 80149be:	f001 fa17 	bl	8015df0 <icmp_dest_unreach>
      pbuf_free(p);
 80149c2:	6878      	ldr	r0, [r7, #4]
 80149c4:	f7f9 fa0a 	bl	800dddc <pbuf_free>
  return;
 80149c8:	e003      	b.n	80149d2 <udp_input+0x202>
    pbuf_free(p);
 80149ca:	6878      	ldr	r0, [r7, #4]
 80149cc:	f7f9 fa06 	bl	800dddc <pbuf_free>
  return;
 80149d0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80149d2:	372c      	adds	r7, #44	; 0x2c
 80149d4:	46bd      	mov	sp, r7
 80149d6:	bd90      	pop	{r4, r7, pc}
 80149d8:	0801e474 	.word	0x0801e474
 80149dc:	0801e518 	.word	0x0801e518
 80149e0:	0801e4c8 	.word	0x0801e4c8
 80149e4:	0801e530 	.word	0x0801e530
 80149e8:	20008238 	.word	0x20008238
 80149ec:	2000db34 	.word	0x2000db34
 80149f0:	0801e54c 	.word	0x0801e54c
 80149f4:	20008248 	.word	0x20008248

080149f8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80149f8:	b580      	push	{r7, lr}
 80149fa:	b086      	sub	sp, #24
 80149fc:	af00      	add	r7, sp, #0
 80149fe:	60f8      	str	r0, [r7, #12]
 8014a00:	60b9      	str	r1, [r7, #8]
 8014a02:	4613      	mov	r3, r2
 8014a04:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8014a06:	68bb      	ldr	r3, [r7, #8]
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	d101      	bne.n	8014a10 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8014a0c:	4b39      	ldr	r3, [pc, #228]	; (8014af4 <udp_bind+0xfc>)
 8014a0e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8014a10:	68fb      	ldr	r3, [r7, #12]
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d109      	bne.n	8014a2a <udp_bind+0x32>
 8014a16:	4b38      	ldr	r3, [pc, #224]	; (8014af8 <udp_bind+0x100>)
 8014a18:	f240 32b7 	movw	r2, #951	; 0x3b7
 8014a1c:	4937      	ldr	r1, [pc, #220]	; (8014afc <udp_bind+0x104>)
 8014a1e:	4838      	ldr	r0, [pc, #224]	; (8014b00 <udp_bind+0x108>)
 8014a20:	f006 fb70 	bl	801b104 <iprintf>
 8014a24:	f06f 030f 	mvn.w	r3, #15
 8014a28:	e060      	b.n	8014aec <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8014a2a:	2300      	movs	r3, #0
 8014a2c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014a2e:	4b35      	ldr	r3, [pc, #212]	; (8014b04 <udp_bind+0x10c>)
 8014a30:	681b      	ldr	r3, [r3, #0]
 8014a32:	617b      	str	r3, [r7, #20]
 8014a34:	e009      	b.n	8014a4a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8014a36:	68fa      	ldr	r2, [r7, #12]
 8014a38:	697b      	ldr	r3, [r7, #20]
 8014a3a:	429a      	cmp	r2, r3
 8014a3c:	d102      	bne.n	8014a44 <udp_bind+0x4c>
      rebind = 1;
 8014a3e:	2301      	movs	r3, #1
 8014a40:	74fb      	strb	r3, [r7, #19]
      break;
 8014a42:	e005      	b.n	8014a50 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014a44:	697b      	ldr	r3, [r7, #20]
 8014a46:	68db      	ldr	r3, [r3, #12]
 8014a48:	617b      	str	r3, [r7, #20]
 8014a4a:	697b      	ldr	r3, [r7, #20]
 8014a4c:	2b00      	cmp	r3, #0
 8014a4e:	d1f2      	bne.n	8014a36 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8014a50:	88fb      	ldrh	r3, [r7, #6]
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	d109      	bne.n	8014a6a <udp_bind+0x72>
    port = udp_new_port();
 8014a56:	f7ff fe1f 	bl	8014698 <udp_new_port>
 8014a5a:	4603      	mov	r3, r0
 8014a5c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8014a5e:	88fb      	ldrh	r3, [r7, #6]
 8014a60:	2b00      	cmp	r3, #0
 8014a62:	d12c      	bne.n	8014abe <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8014a64:	f06f 0307 	mvn.w	r3, #7
 8014a68:	e040      	b.n	8014aec <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014a6a:	4b26      	ldr	r3, [pc, #152]	; (8014b04 <udp_bind+0x10c>)
 8014a6c:	681b      	ldr	r3, [r3, #0]
 8014a6e:	617b      	str	r3, [r7, #20]
 8014a70:	e022      	b.n	8014ab8 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8014a72:	68fa      	ldr	r2, [r7, #12]
 8014a74:	697b      	ldr	r3, [r7, #20]
 8014a76:	429a      	cmp	r2, r3
 8014a78:	d01b      	beq.n	8014ab2 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8014a7a:	697b      	ldr	r3, [r7, #20]
 8014a7c:	8a5b      	ldrh	r3, [r3, #18]
 8014a7e:	88fa      	ldrh	r2, [r7, #6]
 8014a80:	429a      	cmp	r2, r3
 8014a82:	d116      	bne.n	8014ab2 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014a84:	697b      	ldr	r3, [r7, #20]
 8014a86:	681a      	ldr	r2, [r3, #0]
 8014a88:	68bb      	ldr	r3, [r7, #8]
 8014a8a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8014a8c:	429a      	cmp	r2, r3
 8014a8e:	d00d      	beq.n	8014aac <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014a90:	68bb      	ldr	r3, [r7, #8]
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d00a      	beq.n	8014aac <udp_bind+0xb4>
 8014a96:	68bb      	ldr	r3, [r7, #8]
 8014a98:	681b      	ldr	r3, [r3, #0]
 8014a9a:	2b00      	cmp	r3, #0
 8014a9c:	d006      	beq.n	8014aac <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8014a9e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014aa0:	2b00      	cmp	r3, #0
 8014aa2:	d003      	beq.n	8014aac <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8014aa4:	697b      	ldr	r3, [r7, #20]
 8014aa6:	681b      	ldr	r3, [r3, #0]
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	d102      	bne.n	8014ab2 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8014aac:	f06f 0307 	mvn.w	r3, #7
 8014ab0:	e01c      	b.n	8014aec <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014ab2:	697b      	ldr	r3, [r7, #20]
 8014ab4:	68db      	ldr	r3, [r3, #12]
 8014ab6:	617b      	str	r3, [r7, #20]
 8014ab8:	697b      	ldr	r3, [r7, #20]
 8014aba:	2b00      	cmp	r3, #0
 8014abc:	d1d9      	bne.n	8014a72 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8014abe:	68bb      	ldr	r3, [r7, #8]
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	d002      	beq.n	8014aca <udp_bind+0xd2>
 8014ac4:	68bb      	ldr	r3, [r7, #8]
 8014ac6:	681b      	ldr	r3, [r3, #0]
 8014ac8:	e000      	b.n	8014acc <udp_bind+0xd4>
 8014aca:	2300      	movs	r3, #0
 8014acc:	68fa      	ldr	r2, [r7, #12]
 8014ace:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8014ad0:	68fb      	ldr	r3, [r7, #12]
 8014ad2:	88fa      	ldrh	r2, [r7, #6]
 8014ad4:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8014ad6:	7cfb      	ldrb	r3, [r7, #19]
 8014ad8:	2b00      	cmp	r3, #0
 8014ada:	d106      	bne.n	8014aea <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8014adc:	4b09      	ldr	r3, [pc, #36]	; (8014b04 <udp_bind+0x10c>)
 8014ade:	681a      	ldr	r2, [r3, #0]
 8014ae0:	68fb      	ldr	r3, [r7, #12]
 8014ae2:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8014ae4:	4a07      	ldr	r2, [pc, #28]	; (8014b04 <udp_bind+0x10c>)
 8014ae6:	68fb      	ldr	r3, [r7, #12]
 8014ae8:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8014aea:	2300      	movs	r3, #0
}
 8014aec:	4618      	mov	r0, r3
 8014aee:	3718      	adds	r7, #24
 8014af0:	46bd      	mov	sp, r7
 8014af2:	bd80      	pop	{r7, pc}
 8014af4:	0801f154 	.word	0x0801f154
 8014af8:	0801e474 	.word	0x0801e474
 8014afc:	0801e73c 	.word	0x0801e73c
 8014b00:	0801e4c8 	.word	0x0801e4c8
 8014b04:	2000db34 	.word	0x2000db34

08014b08 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014b08:	b580      	push	{r7, lr}
 8014b0a:	b086      	sub	sp, #24
 8014b0c:	af00      	add	r7, sp, #0
 8014b0e:	60f8      	str	r0, [r7, #12]
 8014b10:	60b9      	str	r1, [r7, #8]
 8014b12:	4613      	mov	r3, r2
 8014b14:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8014b16:	68fb      	ldr	r3, [r7, #12]
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	d109      	bne.n	8014b30 <udp_connect+0x28>
 8014b1c:	4b2c      	ldr	r3, [pc, #176]	; (8014bd0 <udp_connect+0xc8>)
 8014b1e:	f240 4235 	movw	r2, #1077	; 0x435
 8014b22:	492c      	ldr	r1, [pc, #176]	; (8014bd4 <udp_connect+0xcc>)
 8014b24:	482c      	ldr	r0, [pc, #176]	; (8014bd8 <udp_connect+0xd0>)
 8014b26:	f006 faed 	bl	801b104 <iprintf>
 8014b2a:	f06f 030f 	mvn.w	r3, #15
 8014b2e:	e04b      	b.n	8014bc8 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8014b30:	68bb      	ldr	r3, [r7, #8]
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	d109      	bne.n	8014b4a <udp_connect+0x42>
 8014b36:	4b26      	ldr	r3, [pc, #152]	; (8014bd0 <udp_connect+0xc8>)
 8014b38:	f240 4236 	movw	r2, #1078	; 0x436
 8014b3c:	4927      	ldr	r1, [pc, #156]	; (8014bdc <udp_connect+0xd4>)
 8014b3e:	4826      	ldr	r0, [pc, #152]	; (8014bd8 <udp_connect+0xd0>)
 8014b40:	f006 fae0 	bl	801b104 <iprintf>
 8014b44:	f06f 030f 	mvn.w	r3, #15
 8014b48:	e03e      	b.n	8014bc8 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8014b4a:	68fb      	ldr	r3, [r7, #12]
 8014b4c:	8a5b      	ldrh	r3, [r3, #18]
 8014b4e:	2b00      	cmp	r3, #0
 8014b50:	d10f      	bne.n	8014b72 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8014b52:	68f9      	ldr	r1, [r7, #12]
 8014b54:	68fb      	ldr	r3, [r7, #12]
 8014b56:	8a5b      	ldrh	r3, [r3, #18]
 8014b58:	461a      	mov	r2, r3
 8014b5a:	68f8      	ldr	r0, [r7, #12]
 8014b5c:	f7ff ff4c 	bl	80149f8 <udp_bind>
 8014b60:	4603      	mov	r3, r0
 8014b62:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8014b64:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014b68:	2b00      	cmp	r3, #0
 8014b6a:	d002      	beq.n	8014b72 <udp_connect+0x6a>
      return err;
 8014b6c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014b70:	e02a      	b.n	8014bc8 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8014b72:	68bb      	ldr	r3, [r7, #8]
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	d002      	beq.n	8014b7e <udp_connect+0x76>
 8014b78:	68bb      	ldr	r3, [r7, #8]
 8014b7a:	681b      	ldr	r3, [r3, #0]
 8014b7c:	e000      	b.n	8014b80 <udp_connect+0x78>
 8014b7e:	2300      	movs	r3, #0
 8014b80:	68fa      	ldr	r2, [r7, #12]
 8014b82:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8014b84:	68fb      	ldr	r3, [r7, #12]
 8014b86:	88fa      	ldrh	r2, [r7, #6]
 8014b88:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8014b8a:	68fb      	ldr	r3, [r7, #12]
 8014b8c:	7c1b      	ldrb	r3, [r3, #16]
 8014b8e:	f043 0304 	orr.w	r3, r3, #4
 8014b92:	b2da      	uxtb	r2, r3
 8014b94:	68fb      	ldr	r3, [r7, #12]
 8014b96:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014b98:	4b11      	ldr	r3, [pc, #68]	; (8014be0 <udp_connect+0xd8>)
 8014b9a:	681b      	ldr	r3, [r3, #0]
 8014b9c:	617b      	str	r3, [r7, #20]
 8014b9e:	e008      	b.n	8014bb2 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8014ba0:	68fa      	ldr	r2, [r7, #12]
 8014ba2:	697b      	ldr	r3, [r7, #20]
 8014ba4:	429a      	cmp	r2, r3
 8014ba6:	d101      	bne.n	8014bac <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8014ba8:	2300      	movs	r3, #0
 8014baa:	e00d      	b.n	8014bc8 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014bac:	697b      	ldr	r3, [r7, #20]
 8014bae:	68db      	ldr	r3, [r3, #12]
 8014bb0:	617b      	str	r3, [r7, #20]
 8014bb2:	697b      	ldr	r3, [r7, #20]
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	d1f3      	bne.n	8014ba0 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8014bb8:	4b09      	ldr	r3, [pc, #36]	; (8014be0 <udp_connect+0xd8>)
 8014bba:	681a      	ldr	r2, [r3, #0]
 8014bbc:	68fb      	ldr	r3, [r7, #12]
 8014bbe:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8014bc0:	4a07      	ldr	r2, [pc, #28]	; (8014be0 <udp_connect+0xd8>)
 8014bc2:	68fb      	ldr	r3, [r7, #12]
 8014bc4:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8014bc6:	2300      	movs	r3, #0
}
 8014bc8:	4618      	mov	r0, r3
 8014bca:	3718      	adds	r7, #24
 8014bcc:	46bd      	mov	sp, r7
 8014bce:	bd80      	pop	{r7, pc}
 8014bd0:	0801e474 	.word	0x0801e474
 8014bd4:	0801e754 	.word	0x0801e754
 8014bd8:	0801e4c8 	.word	0x0801e4c8
 8014bdc:	0801e770 	.word	0x0801e770
 8014be0:	2000db34 	.word	0x2000db34

08014be4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8014be4:	b580      	push	{r7, lr}
 8014be6:	b084      	sub	sp, #16
 8014be8:	af00      	add	r7, sp, #0
 8014bea:	60f8      	str	r0, [r7, #12]
 8014bec:	60b9      	str	r1, [r7, #8]
 8014bee:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8014bf0:	68fb      	ldr	r3, [r7, #12]
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	d107      	bne.n	8014c06 <udp_recv+0x22>
 8014bf6:	4b08      	ldr	r3, [pc, #32]	; (8014c18 <udp_recv+0x34>)
 8014bf8:	f240 428a 	movw	r2, #1162	; 0x48a
 8014bfc:	4907      	ldr	r1, [pc, #28]	; (8014c1c <udp_recv+0x38>)
 8014bfe:	4808      	ldr	r0, [pc, #32]	; (8014c20 <udp_recv+0x3c>)
 8014c00:	f006 fa80 	bl	801b104 <iprintf>
 8014c04:	e005      	b.n	8014c12 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8014c06:	68fb      	ldr	r3, [r7, #12]
 8014c08:	68ba      	ldr	r2, [r7, #8]
 8014c0a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8014c0c:	68fb      	ldr	r3, [r7, #12]
 8014c0e:	687a      	ldr	r2, [r7, #4]
 8014c10:	61da      	str	r2, [r3, #28]
}
 8014c12:	3710      	adds	r7, #16
 8014c14:	46bd      	mov	sp, r7
 8014c16:	bd80      	pop	{r7, pc}
 8014c18:	0801e474 	.word	0x0801e474
 8014c1c:	0801e7a8 	.word	0x0801e7a8
 8014c20:	0801e4c8 	.word	0x0801e4c8

08014c24 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8014c24:	b580      	push	{r7, lr}
 8014c26:	b084      	sub	sp, #16
 8014c28:	af00      	add	r7, sp, #0
 8014c2a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	2b00      	cmp	r3, #0
 8014c30:	d107      	bne.n	8014c42 <udp_remove+0x1e>
 8014c32:	4b19      	ldr	r3, [pc, #100]	; (8014c98 <udp_remove+0x74>)
 8014c34:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8014c38:	4918      	ldr	r1, [pc, #96]	; (8014c9c <udp_remove+0x78>)
 8014c3a:	4819      	ldr	r0, [pc, #100]	; (8014ca0 <udp_remove+0x7c>)
 8014c3c:	f006 fa62 	bl	801b104 <iprintf>
 8014c40:	e026      	b.n	8014c90 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8014c42:	4b18      	ldr	r3, [pc, #96]	; (8014ca4 <udp_remove+0x80>)
 8014c44:	681b      	ldr	r3, [r3, #0]
 8014c46:	687a      	ldr	r2, [r7, #4]
 8014c48:	429a      	cmp	r2, r3
 8014c4a:	d105      	bne.n	8014c58 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8014c4c:	4b15      	ldr	r3, [pc, #84]	; (8014ca4 <udp_remove+0x80>)
 8014c4e:	681b      	ldr	r3, [r3, #0]
 8014c50:	68db      	ldr	r3, [r3, #12]
 8014c52:	4a14      	ldr	r2, [pc, #80]	; (8014ca4 <udp_remove+0x80>)
 8014c54:	6013      	str	r3, [r2, #0]
 8014c56:	e017      	b.n	8014c88 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014c58:	4b12      	ldr	r3, [pc, #72]	; (8014ca4 <udp_remove+0x80>)
 8014c5a:	681b      	ldr	r3, [r3, #0]
 8014c5c:	60fb      	str	r3, [r7, #12]
 8014c5e:	e010      	b.n	8014c82 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8014c60:	68fb      	ldr	r3, [r7, #12]
 8014c62:	68db      	ldr	r3, [r3, #12]
 8014c64:	2b00      	cmp	r3, #0
 8014c66:	d009      	beq.n	8014c7c <udp_remove+0x58>
 8014c68:	68fb      	ldr	r3, [r7, #12]
 8014c6a:	68db      	ldr	r3, [r3, #12]
 8014c6c:	687a      	ldr	r2, [r7, #4]
 8014c6e:	429a      	cmp	r2, r3
 8014c70:	d104      	bne.n	8014c7c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	68da      	ldr	r2, [r3, #12]
 8014c76:	68fb      	ldr	r3, [r7, #12]
 8014c78:	60da      	str	r2, [r3, #12]
        break;
 8014c7a:	e005      	b.n	8014c88 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014c7c:	68fb      	ldr	r3, [r7, #12]
 8014c7e:	68db      	ldr	r3, [r3, #12]
 8014c80:	60fb      	str	r3, [r7, #12]
 8014c82:	68fb      	ldr	r3, [r7, #12]
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	d1eb      	bne.n	8014c60 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8014c88:	6879      	ldr	r1, [r7, #4]
 8014c8a:	2000      	movs	r0, #0
 8014c8c:	f7f8 fa02 	bl	800d094 <memp_free>
}
 8014c90:	3710      	adds	r7, #16
 8014c92:	46bd      	mov	sp, r7
 8014c94:	bd80      	pop	{r7, pc}
 8014c96:	bf00      	nop
 8014c98:	0801e474 	.word	0x0801e474
 8014c9c:	0801e7c0 	.word	0x0801e7c0
 8014ca0:	0801e4c8 	.word	0x0801e4c8
 8014ca4:	2000db34 	.word	0x2000db34

08014ca8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8014ca8:	b580      	push	{r7, lr}
 8014caa:	b082      	sub	sp, #8
 8014cac:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8014cae:	2000      	movs	r0, #0
 8014cb0:	f7f8 f99e 	bl	800cff0 <memp_malloc>
 8014cb4:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	2b00      	cmp	r3, #0
 8014cba:	d007      	beq.n	8014ccc <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8014cbc:	2220      	movs	r2, #32
 8014cbe:	2100      	movs	r1, #0
 8014cc0:	6878      	ldr	r0, [r7, #4]
 8014cc2:	f005 fece 	bl	801aa62 <memset>
    pcb->ttl = UDP_TTL;
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	22ff      	movs	r2, #255	; 0xff
 8014cca:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8014ccc:	687b      	ldr	r3, [r7, #4]
}
 8014cce:	4618      	mov	r0, r3
 8014cd0:	3708      	adds	r7, #8
 8014cd2:	46bd      	mov	sp, r7
 8014cd4:	bd80      	pop	{r7, pc}

08014cd6 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8014cd6:	b580      	push	{r7, lr}
 8014cd8:	b084      	sub	sp, #16
 8014cda:	af00      	add	r7, sp, #0
 8014cdc:	4603      	mov	r3, r0
 8014cde:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8014ce0:	f7ff ffe2 	bl	8014ca8 <udp_new>
 8014ce4:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8014ce6:	68fb      	ldr	r3, [r7, #12]
}
 8014ce8:	4618      	mov	r0, r3
 8014cea:	3710      	adds	r7, #16
 8014cec:	46bd      	mov	sp, r7
 8014cee:	bd80      	pop	{r7, pc}

08014cf0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014cf0:	b480      	push	{r7}
 8014cf2:	b085      	sub	sp, #20
 8014cf4:	af00      	add	r7, sp, #0
 8014cf6:	6078      	str	r0, [r7, #4]
 8014cf8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	d01e      	beq.n	8014d3e <udp_netif_ip_addr_changed+0x4e>
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	681b      	ldr	r3, [r3, #0]
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	d01a      	beq.n	8014d3e <udp_netif_ip_addr_changed+0x4e>
 8014d08:	683b      	ldr	r3, [r7, #0]
 8014d0a:	2b00      	cmp	r3, #0
 8014d0c:	d017      	beq.n	8014d3e <udp_netif_ip_addr_changed+0x4e>
 8014d0e:	683b      	ldr	r3, [r7, #0]
 8014d10:	681b      	ldr	r3, [r3, #0]
 8014d12:	2b00      	cmp	r3, #0
 8014d14:	d013      	beq.n	8014d3e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014d16:	4b0d      	ldr	r3, [pc, #52]	; (8014d4c <udp_netif_ip_addr_changed+0x5c>)
 8014d18:	681b      	ldr	r3, [r3, #0]
 8014d1a:	60fb      	str	r3, [r7, #12]
 8014d1c:	e00c      	b.n	8014d38 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8014d1e:	68fb      	ldr	r3, [r7, #12]
 8014d20:	681a      	ldr	r2, [r3, #0]
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	681b      	ldr	r3, [r3, #0]
 8014d26:	429a      	cmp	r2, r3
 8014d28:	d103      	bne.n	8014d32 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8014d2a:	683b      	ldr	r3, [r7, #0]
 8014d2c:	681a      	ldr	r2, [r3, #0]
 8014d2e:	68fb      	ldr	r3, [r7, #12]
 8014d30:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014d32:	68fb      	ldr	r3, [r7, #12]
 8014d34:	68db      	ldr	r3, [r3, #12]
 8014d36:	60fb      	str	r3, [r7, #12]
 8014d38:	68fb      	ldr	r3, [r7, #12]
 8014d3a:	2b00      	cmp	r3, #0
 8014d3c:	d1ef      	bne.n	8014d1e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8014d3e:	bf00      	nop
 8014d40:	3714      	adds	r7, #20
 8014d42:	46bd      	mov	sp, r7
 8014d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d48:	4770      	bx	lr
 8014d4a:	bf00      	nop
 8014d4c:	2000db34 	.word	0x2000db34

08014d50 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8014d50:	b580      	push	{r7, lr}
 8014d52:	b082      	sub	sp, #8
 8014d54:	af00      	add	r7, sp, #0
 8014d56:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8014d58:	4915      	ldr	r1, [pc, #84]	; (8014db0 <etharp_free_entry+0x60>)
 8014d5a:	687a      	ldr	r2, [r7, #4]
 8014d5c:	4613      	mov	r3, r2
 8014d5e:	005b      	lsls	r3, r3, #1
 8014d60:	4413      	add	r3, r2
 8014d62:	00db      	lsls	r3, r3, #3
 8014d64:	440b      	add	r3, r1
 8014d66:	681b      	ldr	r3, [r3, #0]
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	d013      	beq.n	8014d94 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8014d6c:	4910      	ldr	r1, [pc, #64]	; (8014db0 <etharp_free_entry+0x60>)
 8014d6e:	687a      	ldr	r2, [r7, #4]
 8014d70:	4613      	mov	r3, r2
 8014d72:	005b      	lsls	r3, r3, #1
 8014d74:	4413      	add	r3, r2
 8014d76:	00db      	lsls	r3, r3, #3
 8014d78:	440b      	add	r3, r1
 8014d7a:	681b      	ldr	r3, [r3, #0]
 8014d7c:	4618      	mov	r0, r3
 8014d7e:	f7f9 f82d 	bl	800dddc <pbuf_free>
    arp_table[i].q = NULL;
 8014d82:	490b      	ldr	r1, [pc, #44]	; (8014db0 <etharp_free_entry+0x60>)
 8014d84:	687a      	ldr	r2, [r7, #4]
 8014d86:	4613      	mov	r3, r2
 8014d88:	005b      	lsls	r3, r3, #1
 8014d8a:	4413      	add	r3, r2
 8014d8c:	00db      	lsls	r3, r3, #3
 8014d8e:	440b      	add	r3, r1
 8014d90:	2200      	movs	r2, #0
 8014d92:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8014d94:	4906      	ldr	r1, [pc, #24]	; (8014db0 <etharp_free_entry+0x60>)
 8014d96:	687a      	ldr	r2, [r7, #4]
 8014d98:	4613      	mov	r3, r2
 8014d9a:	005b      	lsls	r3, r3, #1
 8014d9c:	4413      	add	r3, r2
 8014d9e:	00db      	lsls	r3, r3, #3
 8014da0:	440b      	add	r3, r1
 8014da2:	3314      	adds	r3, #20
 8014da4:	2200      	movs	r2, #0
 8014da6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8014da8:	bf00      	nop
 8014daa:	3708      	adds	r7, #8
 8014dac:	46bd      	mov	sp, r7
 8014dae:	bd80      	pop	{r7, pc}
 8014db0:	20004c04 	.word	0x20004c04

08014db4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8014db4:	b580      	push	{r7, lr}
 8014db6:	b082      	sub	sp, #8
 8014db8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014dba:	2300      	movs	r3, #0
 8014dbc:	607b      	str	r3, [r7, #4]
 8014dbe:	e096      	b.n	8014eee <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8014dc0:	494f      	ldr	r1, [pc, #316]	; (8014f00 <etharp_tmr+0x14c>)
 8014dc2:	687a      	ldr	r2, [r7, #4]
 8014dc4:	4613      	mov	r3, r2
 8014dc6:	005b      	lsls	r3, r3, #1
 8014dc8:	4413      	add	r3, r2
 8014dca:	00db      	lsls	r3, r3, #3
 8014dcc:	440b      	add	r3, r1
 8014dce:	3314      	adds	r3, #20
 8014dd0:	781b      	ldrb	r3, [r3, #0]
 8014dd2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8014dd4:	78fb      	ldrb	r3, [r7, #3]
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	f000 8086 	beq.w	8014ee8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8014ddc:	4948      	ldr	r1, [pc, #288]	; (8014f00 <etharp_tmr+0x14c>)
 8014dde:	687a      	ldr	r2, [r7, #4]
 8014de0:	4613      	mov	r3, r2
 8014de2:	005b      	lsls	r3, r3, #1
 8014de4:	4413      	add	r3, r2
 8014de6:	00db      	lsls	r3, r3, #3
 8014de8:	440b      	add	r3, r1
 8014dea:	3312      	adds	r3, #18
 8014dec:	881b      	ldrh	r3, [r3, #0]
 8014dee:	3301      	adds	r3, #1
 8014df0:	b298      	uxth	r0, r3
 8014df2:	4943      	ldr	r1, [pc, #268]	; (8014f00 <etharp_tmr+0x14c>)
 8014df4:	687a      	ldr	r2, [r7, #4]
 8014df6:	4613      	mov	r3, r2
 8014df8:	005b      	lsls	r3, r3, #1
 8014dfa:	4413      	add	r3, r2
 8014dfc:	00db      	lsls	r3, r3, #3
 8014dfe:	440b      	add	r3, r1
 8014e00:	3312      	adds	r3, #18
 8014e02:	4602      	mov	r2, r0
 8014e04:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014e06:	493e      	ldr	r1, [pc, #248]	; (8014f00 <etharp_tmr+0x14c>)
 8014e08:	687a      	ldr	r2, [r7, #4]
 8014e0a:	4613      	mov	r3, r2
 8014e0c:	005b      	lsls	r3, r3, #1
 8014e0e:	4413      	add	r3, r2
 8014e10:	00db      	lsls	r3, r3, #3
 8014e12:	440b      	add	r3, r1
 8014e14:	3312      	adds	r3, #18
 8014e16:	881b      	ldrh	r3, [r3, #0]
 8014e18:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8014e1c:	d215      	bcs.n	8014e4a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014e1e:	4938      	ldr	r1, [pc, #224]	; (8014f00 <etharp_tmr+0x14c>)
 8014e20:	687a      	ldr	r2, [r7, #4]
 8014e22:	4613      	mov	r3, r2
 8014e24:	005b      	lsls	r3, r3, #1
 8014e26:	4413      	add	r3, r2
 8014e28:	00db      	lsls	r3, r3, #3
 8014e2a:	440b      	add	r3, r1
 8014e2c:	3314      	adds	r3, #20
 8014e2e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014e30:	2b01      	cmp	r3, #1
 8014e32:	d10e      	bne.n	8014e52 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8014e34:	4932      	ldr	r1, [pc, #200]	; (8014f00 <etharp_tmr+0x14c>)
 8014e36:	687a      	ldr	r2, [r7, #4]
 8014e38:	4613      	mov	r3, r2
 8014e3a:	005b      	lsls	r3, r3, #1
 8014e3c:	4413      	add	r3, r2
 8014e3e:	00db      	lsls	r3, r3, #3
 8014e40:	440b      	add	r3, r1
 8014e42:	3312      	adds	r3, #18
 8014e44:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014e46:	2b04      	cmp	r3, #4
 8014e48:	d903      	bls.n	8014e52 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8014e4a:	6878      	ldr	r0, [r7, #4]
 8014e4c:	f7ff ff80 	bl	8014d50 <etharp_free_entry>
 8014e50:	e04a      	b.n	8014ee8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8014e52:	492b      	ldr	r1, [pc, #172]	; (8014f00 <etharp_tmr+0x14c>)
 8014e54:	687a      	ldr	r2, [r7, #4]
 8014e56:	4613      	mov	r3, r2
 8014e58:	005b      	lsls	r3, r3, #1
 8014e5a:	4413      	add	r3, r2
 8014e5c:	00db      	lsls	r3, r3, #3
 8014e5e:	440b      	add	r3, r1
 8014e60:	3314      	adds	r3, #20
 8014e62:	781b      	ldrb	r3, [r3, #0]
 8014e64:	2b03      	cmp	r3, #3
 8014e66:	d10a      	bne.n	8014e7e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8014e68:	4925      	ldr	r1, [pc, #148]	; (8014f00 <etharp_tmr+0x14c>)
 8014e6a:	687a      	ldr	r2, [r7, #4]
 8014e6c:	4613      	mov	r3, r2
 8014e6e:	005b      	lsls	r3, r3, #1
 8014e70:	4413      	add	r3, r2
 8014e72:	00db      	lsls	r3, r3, #3
 8014e74:	440b      	add	r3, r1
 8014e76:	3314      	adds	r3, #20
 8014e78:	2204      	movs	r2, #4
 8014e7a:	701a      	strb	r2, [r3, #0]
 8014e7c:	e034      	b.n	8014ee8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8014e7e:	4920      	ldr	r1, [pc, #128]	; (8014f00 <etharp_tmr+0x14c>)
 8014e80:	687a      	ldr	r2, [r7, #4]
 8014e82:	4613      	mov	r3, r2
 8014e84:	005b      	lsls	r3, r3, #1
 8014e86:	4413      	add	r3, r2
 8014e88:	00db      	lsls	r3, r3, #3
 8014e8a:	440b      	add	r3, r1
 8014e8c:	3314      	adds	r3, #20
 8014e8e:	781b      	ldrb	r3, [r3, #0]
 8014e90:	2b04      	cmp	r3, #4
 8014e92:	d10a      	bne.n	8014eaa <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8014e94:	491a      	ldr	r1, [pc, #104]	; (8014f00 <etharp_tmr+0x14c>)
 8014e96:	687a      	ldr	r2, [r7, #4]
 8014e98:	4613      	mov	r3, r2
 8014e9a:	005b      	lsls	r3, r3, #1
 8014e9c:	4413      	add	r3, r2
 8014e9e:	00db      	lsls	r3, r3, #3
 8014ea0:	440b      	add	r3, r1
 8014ea2:	3314      	adds	r3, #20
 8014ea4:	2202      	movs	r2, #2
 8014ea6:	701a      	strb	r2, [r3, #0]
 8014ea8:	e01e      	b.n	8014ee8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014eaa:	4915      	ldr	r1, [pc, #84]	; (8014f00 <etharp_tmr+0x14c>)
 8014eac:	687a      	ldr	r2, [r7, #4]
 8014eae:	4613      	mov	r3, r2
 8014eb0:	005b      	lsls	r3, r3, #1
 8014eb2:	4413      	add	r3, r2
 8014eb4:	00db      	lsls	r3, r3, #3
 8014eb6:	440b      	add	r3, r1
 8014eb8:	3314      	adds	r3, #20
 8014eba:	781b      	ldrb	r3, [r3, #0]
 8014ebc:	2b01      	cmp	r3, #1
 8014ebe:	d113      	bne.n	8014ee8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8014ec0:	490f      	ldr	r1, [pc, #60]	; (8014f00 <etharp_tmr+0x14c>)
 8014ec2:	687a      	ldr	r2, [r7, #4]
 8014ec4:	4613      	mov	r3, r2
 8014ec6:	005b      	lsls	r3, r3, #1
 8014ec8:	4413      	add	r3, r2
 8014eca:	00db      	lsls	r3, r3, #3
 8014ecc:	440b      	add	r3, r1
 8014ece:	3308      	adds	r3, #8
 8014ed0:	6818      	ldr	r0, [r3, #0]
 8014ed2:	687a      	ldr	r2, [r7, #4]
 8014ed4:	4613      	mov	r3, r2
 8014ed6:	005b      	lsls	r3, r3, #1
 8014ed8:	4413      	add	r3, r2
 8014eda:	00db      	lsls	r3, r3, #3
 8014edc:	4a08      	ldr	r2, [pc, #32]	; (8014f00 <etharp_tmr+0x14c>)
 8014ede:	4413      	add	r3, r2
 8014ee0:	3304      	adds	r3, #4
 8014ee2:	4619      	mov	r1, r3
 8014ee4:	f000 fe6e 	bl	8015bc4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	3301      	adds	r3, #1
 8014eec:	607b      	str	r3, [r7, #4]
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	2b09      	cmp	r3, #9
 8014ef2:	f77f af65 	ble.w	8014dc0 <etharp_tmr+0xc>
      }
    }
  }
}
 8014ef6:	bf00      	nop
 8014ef8:	bf00      	nop
 8014efa:	3708      	adds	r7, #8
 8014efc:	46bd      	mov	sp, r7
 8014efe:	bd80      	pop	{r7, pc}
 8014f00:	20004c04 	.word	0x20004c04

08014f04 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8014f04:	b580      	push	{r7, lr}
 8014f06:	b08a      	sub	sp, #40	; 0x28
 8014f08:	af00      	add	r7, sp, #0
 8014f0a:	60f8      	str	r0, [r7, #12]
 8014f0c:	460b      	mov	r3, r1
 8014f0e:	607a      	str	r2, [r7, #4]
 8014f10:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8014f12:	230a      	movs	r3, #10
 8014f14:	84fb      	strh	r3, [r7, #38]	; 0x26
 8014f16:	230a      	movs	r3, #10
 8014f18:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8014f1a:	230a      	movs	r3, #10
 8014f1c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8014f1e:	2300      	movs	r3, #0
 8014f20:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8014f22:	230a      	movs	r3, #10
 8014f24:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8014f26:	2300      	movs	r3, #0
 8014f28:	83bb      	strh	r3, [r7, #28]
 8014f2a:	2300      	movs	r3, #0
 8014f2c:	837b      	strh	r3, [r7, #26]
 8014f2e:	2300      	movs	r3, #0
 8014f30:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014f32:	2300      	movs	r3, #0
 8014f34:	843b      	strh	r3, [r7, #32]
 8014f36:	e0ae      	b.n	8015096 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8014f38:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014f3c:	49a6      	ldr	r1, [pc, #664]	; (80151d8 <etharp_find_entry+0x2d4>)
 8014f3e:	4613      	mov	r3, r2
 8014f40:	005b      	lsls	r3, r3, #1
 8014f42:	4413      	add	r3, r2
 8014f44:	00db      	lsls	r3, r3, #3
 8014f46:	440b      	add	r3, r1
 8014f48:	3314      	adds	r3, #20
 8014f4a:	781b      	ldrb	r3, [r3, #0]
 8014f4c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8014f4e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014f52:	2b0a      	cmp	r3, #10
 8014f54:	d105      	bne.n	8014f62 <etharp_find_entry+0x5e>
 8014f56:	7dfb      	ldrb	r3, [r7, #23]
 8014f58:	2b00      	cmp	r3, #0
 8014f5a:	d102      	bne.n	8014f62 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8014f5c:	8c3b      	ldrh	r3, [r7, #32]
 8014f5e:	847b      	strh	r3, [r7, #34]	; 0x22
 8014f60:	e095      	b.n	801508e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8014f62:	7dfb      	ldrb	r3, [r7, #23]
 8014f64:	2b00      	cmp	r3, #0
 8014f66:	f000 8092 	beq.w	801508e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8014f6a:	7dfb      	ldrb	r3, [r7, #23]
 8014f6c:	2b01      	cmp	r3, #1
 8014f6e:	d009      	beq.n	8014f84 <etharp_find_entry+0x80>
 8014f70:	7dfb      	ldrb	r3, [r7, #23]
 8014f72:	2b01      	cmp	r3, #1
 8014f74:	d806      	bhi.n	8014f84 <etharp_find_entry+0x80>
 8014f76:	4b99      	ldr	r3, [pc, #612]	; (80151dc <etharp_find_entry+0x2d8>)
 8014f78:	f240 1223 	movw	r2, #291	; 0x123
 8014f7c:	4998      	ldr	r1, [pc, #608]	; (80151e0 <etharp_find_entry+0x2dc>)
 8014f7e:	4899      	ldr	r0, [pc, #612]	; (80151e4 <etharp_find_entry+0x2e0>)
 8014f80:	f006 f8c0 	bl	801b104 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8014f84:	68fb      	ldr	r3, [r7, #12]
 8014f86:	2b00      	cmp	r3, #0
 8014f88:	d020      	beq.n	8014fcc <etharp_find_entry+0xc8>
 8014f8a:	68fb      	ldr	r3, [r7, #12]
 8014f8c:	6819      	ldr	r1, [r3, #0]
 8014f8e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014f92:	4891      	ldr	r0, [pc, #580]	; (80151d8 <etharp_find_entry+0x2d4>)
 8014f94:	4613      	mov	r3, r2
 8014f96:	005b      	lsls	r3, r3, #1
 8014f98:	4413      	add	r3, r2
 8014f9a:	00db      	lsls	r3, r3, #3
 8014f9c:	4403      	add	r3, r0
 8014f9e:	3304      	adds	r3, #4
 8014fa0:	681b      	ldr	r3, [r3, #0]
 8014fa2:	4299      	cmp	r1, r3
 8014fa4:	d112      	bne.n	8014fcc <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	2b00      	cmp	r3, #0
 8014faa:	d00c      	beq.n	8014fc6 <etharp_find_entry+0xc2>
 8014fac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014fb0:	4989      	ldr	r1, [pc, #548]	; (80151d8 <etharp_find_entry+0x2d4>)
 8014fb2:	4613      	mov	r3, r2
 8014fb4:	005b      	lsls	r3, r3, #1
 8014fb6:	4413      	add	r3, r2
 8014fb8:	00db      	lsls	r3, r3, #3
 8014fba:	440b      	add	r3, r1
 8014fbc:	3308      	adds	r3, #8
 8014fbe:	681b      	ldr	r3, [r3, #0]
 8014fc0:	687a      	ldr	r2, [r7, #4]
 8014fc2:	429a      	cmp	r2, r3
 8014fc4:	d102      	bne.n	8014fcc <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8014fc6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014fca:	e100      	b.n	80151ce <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8014fcc:	7dfb      	ldrb	r3, [r7, #23]
 8014fce:	2b01      	cmp	r3, #1
 8014fd0:	d140      	bne.n	8015054 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8014fd2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014fd6:	4980      	ldr	r1, [pc, #512]	; (80151d8 <etharp_find_entry+0x2d4>)
 8014fd8:	4613      	mov	r3, r2
 8014fda:	005b      	lsls	r3, r3, #1
 8014fdc:	4413      	add	r3, r2
 8014fde:	00db      	lsls	r3, r3, #3
 8014fe0:	440b      	add	r3, r1
 8014fe2:	681b      	ldr	r3, [r3, #0]
 8014fe4:	2b00      	cmp	r3, #0
 8014fe6:	d01a      	beq.n	801501e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8014fe8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014fec:	497a      	ldr	r1, [pc, #488]	; (80151d8 <etharp_find_entry+0x2d4>)
 8014fee:	4613      	mov	r3, r2
 8014ff0:	005b      	lsls	r3, r3, #1
 8014ff2:	4413      	add	r3, r2
 8014ff4:	00db      	lsls	r3, r3, #3
 8014ff6:	440b      	add	r3, r1
 8014ff8:	3312      	adds	r3, #18
 8014ffa:	881b      	ldrh	r3, [r3, #0]
 8014ffc:	8bba      	ldrh	r2, [r7, #28]
 8014ffe:	429a      	cmp	r2, r3
 8015000:	d845      	bhi.n	801508e <etharp_find_entry+0x18a>
            old_queue = i;
 8015002:	8c3b      	ldrh	r3, [r7, #32]
 8015004:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8015006:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801500a:	4973      	ldr	r1, [pc, #460]	; (80151d8 <etharp_find_entry+0x2d4>)
 801500c:	4613      	mov	r3, r2
 801500e:	005b      	lsls	r3, r3, #1
 8015010:	4413      	add	r3, r2
 8015012:	00db      	lsls	r3, r3, #3
 8015014:	440b      	add	r3, r1
 8015016:	3312      	adds	r3, #18
 8015018:	881b      	ldrh	r3, [r3, #0]
 801501a:	83bb      	strh	r3, [r7, #28]
 801501c:	e037      	b.n	801508e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801501e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015022:	496d      	ldr	r1, [pc, #436]	; (80151d8 <etharp_find_entry+0x2d4>)
 8015024:	4613      	mov	r3, r2
 8015026:	005b      	lsls	r3, r3, #1
 8015028:	4413      	add	r3, r2
 801502a:	00db      	lsls	r3, r3, #3
 801502c:	440b      	add	r3, r1
 801502e:	3312      	adds	r3, #18
 8015030:	881b      	ldrh	r3, [r3, #0]
 8015032:	8b7a      	ldrh	r2, [r7, #26]
 8015034:	429a      	cmp	r2, r3
 8015036:	d82a      	bhi.n	801508e <etharp_find_entry+0x18a>
            old_pending = i;
 8015038:	8c3b      	ldrh	r3, [r7, #32]
 801503a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801503c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015040:	4965      	ldr	r1, [pc, #404]	; (80151d8 <etharp_find_entry+0x2d4>)
 8015042:	4613      	mov	r3, r2
 8015044:	005b      	lsls	r3, r3, #1
 8015046:	4413      	add	r3, r2
 8015048:	00db      	lsls	r3, r3, #3
 801504a:	440b      	add	r3, r1
 801504c:	3312      	adds	r3, #18
 801504e:	881b      	ldrh	r3, [r3, #0]
 8015050:	837b      	strh	r3, [r7, #26]
 8015052:	e01c      	b.n	801508e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8015054:	7dfb      	ldrb	r3, [r7, #23]
 8015056:	2b01      	cmp	r3, #1
 8015058:	d919      	bls.n	801508e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801505a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801505e:	495e      	ldr	r1, [pc, #376]	; (80151d8 <etharp_find_entry+0x2d4>)
 8015060:	4613      	mov	r3, r2
 8015062:	005b      	lsls	r3, r3, #1
 8015064:	4413      	add	r3, r2
 8015066:	00db      	lsls	r3, r3, #3
 8015068:	440b      	add	r3, r1
 801506a:	3312      	adds	r3, #18
 801506c:	881b      	ldrh	r3, [r3, #0]
 801506e:	8b3a      	ldrh	r2, [r7, #24]
 8015070:	429a      	cmp	r2, r3
 8015072:	d80c      	bhi.n	801508e <etharp_find_entry+0x18a>
            old_stable = i;
 8015074:	8c3b      	ldrh	r3, [r7, #32]
 8015076:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8015078:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801507c:	4956      	ldr	r1, [pc, #344]	; (80151d8 <etharp_find_entry+0x2d4>)
 801507e:	4613      	mov	r3, r2
 8015080:	005b      	lsls	r3, r3, #1
 8015082:	4413      	add	r3, r2
 8015084:	00db      	lsls	r3, r3, #3
 8015086:	440b      	add	r3, r1
 8015088:	3312      	adds	r3, #18
 801508a:	881b      	ldrh	r3, [r3, #0]
 801508c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801508e:	8c3b      	ldrh	r3, [r7, #32]
 8015090:	3301      	adds	r3, #1
 8015092:	b29b      	uxth	r3, r3
 8015094:	843b      	strh	r3, [r7, #32]
 8015096:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801509a:	2b09      	cmp	r3, #9
 801509c:	f77f af4c 	ble.w	8014f38 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80150a0:	7afb      	ldrb	r3, [r7, #11]
 80150a2:	f003 0302 	and.w	r3, r3, #2
 80150a6:	2b00      	cmp	r3, #0
 80150a8:	d108      	bne.n	80150bc <etharp_find_entry+0x1b8>
 80150aa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80150ae:	2b0a      	cmp	r3, #10
 80150b0:	d107      	bne.n	80150c2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80150b2:	7afb      	ldrb	r3, [r7, #11]
 80150b4:	f003 0301 	and.w	r3, r3, #1
 80150b8:	2b00      	cmp	r3, #0
 80150ba:	d102      	bne.n	80150c2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80150bc:	f04f 33ff 	mov.w	r3, #4294967295
 80150c0:	e085      	b.n	80151ce <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80150c2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80150c6:	2b09      	cmp	r3, #9
 80150c8:	dc02      	bgt.n	80150d0 <etharp_find_entry+0x1cc>
    i = empty;
 80150ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80150cc:	843b      	strh	r3, [r7, #32]
 80150ce:	e039      	b.n	8015144 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80150d0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80150d4:	2b09      	cmp	r3, #9
 80150d6:	dc14      	bgt.n	8015102 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80150d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80150da:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80150dc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80150e0:	493d      	ldr	r1, [pc, #244]	; (80151d8 <etharp_find_entry+0x2d4>)
 80150e2:	4613      	mov	r3, r2
 80150e4:	005b      	lsls	r3, r3, #1
 80150e6:	4413      	add	r3, r2
 80150e8:	00db      	lsls	r3, r3, #3
 80150ea:	440b      	add	r3, r1
 80150ec:	681b      	ldr	r3, [r3, #0]
 80150ee:	2b00      	cmp	r3, #0
 80150f0:	d018      	beq.n	8015124 <etharp_find_entry+0x220>
 80150f2:	4b3a      	ldr	r3, [pc, #232]	; (80151dc <etharp_find_entry+0x2d8>)
 80150f4:	f240 126d 	movw	r2, #365	; 0x16d
 80150f8:	493b      	ldr	r1, [pc, #236]	; (80151e8 <etharp_find_entry+0x2e4>)
 80150fa:	483a      	ldr	r0, [pc, #232]	; (80151e4 <etharp_find_entry+0x2e0>)
 80150fc:	f006 f802 	bl	801b104 <iprintf>
 8015100:	e010      	b.n	8015124 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8015102:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8015106:	2b09      	cmp	r3, #9
 8015108:	dc02      	bgt.n	8015110 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801510a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801510c:	843b      	strh	r3, [r7, #32]
 801510e:	e009      	b.n	8015124 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8015110:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8015114:	2b09      	cmp	r3, #9
 8015116:	dc02      	bgt.n	801511e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8015118:	8bfb      	ldrh	r3, [r7, #30]
 801511a:	843b      	strh	r3, [r7, #32]
 801511c:	e002      	b.n	8015124 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801511e:	f04f 33ff 	mov.w	r3, #4294967295
 8015122:	e054      	b.n	80151ce <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015124:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015128:	2b09      	cmp	r3, #9
 801512a:	dd06      	ble.n	801513a <etharp_find_entry+0x236>
 801512c:	4b2b      	ldr	r3, [pc, #172]	; (80151dc <etharp_find_entry+0x2d8>)
 801512e:	f240 127f 	movw	r2, #383	; 0x17f
 8015132:	492e      	ldr	r1, [pc, #184]	; (80151ec <etharp_find_entry+0x2e8>)
 8015134:	482b      	ldr	r0, [pc, #172]	; (80151e4 <etharp_find_entry+0x2e0>)
 8015136:	f005 ffe5 	bl	801b104 <iprintf>
    etharp_free_entry(i);
 801513a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801513e:	4618      	mov	r0, r3
 8015140:	f7ff fe06 	bl	8014d50 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015144:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015148:	2b09      	cmp	r3, #9
 801514a:	dd06      	ble.n	801515a <etharp_find_entry+0x256>
 801514c:	4b23      	ldr	r3, [pc, #140]	; (80151dc <etharp_find_entry+0x2d8>)
 801514e:	f240 1283 	movw	r2, #387	; 0x183
 8015152:	4926      	ldr	r1, [pc, #152]	; (80151ec <etharp_find_entry+0x2e8>)
 8015154:	4823      	ldr	r0, [pc, #140]	; (80151e4 <etharp_find_entry+0x2e0>)
 8015156:	f005 ffd5 	bl	801b104 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801515a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801515e:	491e      	ldr	r1, [pc, #120]	; (80151d8 <etharp_find_entry+0x2d4>)
 8015160:	4613      	mov	r3, r2
 8015162:	005b      	lsls	r3, r3, #1
 8015164:	4413      	add	r3, r2
 8015166:	00db      	lsls	r3, r3, #3
 8015168:	440b      	add	r3, r1
 801516a:	3314      	adds	r3, #20
 801516c:	781b      	ldrb	r3, [r3, #0]
 801516e:	2b00      	cmp	r3, #0
 8015170:	d006      	beq.n	8015180 <etharp_find_entry+0x27c>
 8015172:	4b1a      	ldr	r3, [pc, #104]	; (80151dc <etharp_find_entry+0x2d8>)
 8015174:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8015178:	491d      	ldr	r1, [pc, #116]	; (80151f0 <etharp_find_entry+0x2ec>)
 801517a:	481a      	ldr	r0, [pc, #104]	; (80151e4 <etharp_find_entry+0x2e0>)
 801517c:	f005 ffc2 	bl	801b104 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8015180:	68fb      	ldr	r3, [r7, #12]
 8015182:	2b00      	cmp	r3, #0
 8015184:	d00b      	beq.n	801519e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8015186:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801518a:	68fb      	ldr	r3, [r7, #12]
 801518c:	6819      	ldr	r1, [r3, #0]
 801518e:	4812      	ldr	r0, [pc, #72]	; (80151d8 <etharp_find_entry+0x2d4>)
 8015190:	4613      	mov	r3, r2
 8015192:	005b      	lsls	r3, r3, #1
 8015194:	4413      	add	r3, r2
 8015196:	00db      	lsls	r3, r3, #3
 8015198:	4403      	add	r3, r0
 801519a:	3304      	adds	r3, #4
 801519c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801519e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80151a2:	490d      	ldr	r1, [pc, #52]	; (80151d8 <etharp_find_entry+0x2d4>)
 80151a4:	4613      	mov	r3, r2
 80151a6:	005b      	lsls	r3, r3, #1
 80151a8:	4413      	add	r3, r2
 80151aa:	00db      	lsls	r3, r3, #3
 80151ac:	440b      	add	r3, r1
 80151ae:	3312      	adds	r3, #18
 80151b0:	2200      	movs	r2, #0
 80151b2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80151b4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80151b8:	4907      	ldr	r1, [pc, #28]	; (80151d8 <etharp_find_entry+0x2d4>)
 80151ba:	4613      	mov	r3, r2
 80151bc:	005b      	lsls	r3, r3, #1
 80151be:	4413      	add	r3, r2
 80151c0:	00db      	lsls	r3, r3, #3
 80151c2:	440b      	add	r3, r1
 80151c4:	3308      	adds	r3, #8
 80151c6:	687a      	ldr	r2, [r7, #4]
 80151c8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80151ca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80151ce:	4618      	mov	r0, r3
 80151d0:	3728      	adds	r7, #40	; 0x28
 80151d2:	46bd      	mov	sp, r7
 80151d4:	bd80      	pop	{r7, pc}
 80151d6:	bf00      	nop
 80151d8:	20004c04 	.word	0x20004c04
 80151dc:	0801e7d8 	.word	0x0801e7d8
 80151e0:	0801e810 	.word	0x0801e810
 80151e4:	0801e850 	.word	0x0801e850
 80151e8:	0801e878 	.word	0x0801e878
 80151ec:	0801e890 	.word	0x0801e890
 80151f0:	0801e8a4 	.word	0x0801e8a4

080151f4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80151f4:	b580      	push	{r7, lr}
 80151f6:	b088      	sub	sp, #32
 80151f8:	af02      	add	r7, sp, #8
 80151fa:	60f8      	str	r0, [r7, #12]
 80151fc:	60b9      	str	r1, [r7, #8]
 80151fe:	607a      	str	r2, [r7, #4]
 8015200:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8015202:	68fb      	ldr	r3, [r7, #12]
 8015204:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015208:	2b06      	cmp	r3, #6
 801520a:	d006      	beq.n	801521a <etharp_update_arp_entry+0x26>
 801520c:	4b48      	ldr	r3, [pc, #288]	; (8015330 <etharp_update_arp_entry+0x13c>)
 801520e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8015212:	4948      	ldr	r1, [pc, #288]	; (8015334 <etharp_update_arp_entry+0x140>)
 8015214:	4848      	ldr	r0, [pc, #288]	; (8015338 <etharp_update_arp_entry+0x144>)
 8015216:	f005 ff75 	bl	801b104 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801521a:	68bb      	ldr	r3, [r7, #8]
 801521c:	2b00      	cmp	r3, #0
 801521e:	d012      	beq.n	8015246 <etharp_update_arp_entry+0x52>
 8015220:	68bb      	ldr	r3, [r7, #8]
 8015222:	681b      	ldr	r3, [r3, #0]
 8015224:	2b00      	cmp	r3, #0
 8015226:	d00e      	beq.n	8015246 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015228:	68bb      	ldr	r3, [r7, #8]
 801522a:	681b      	ldr	r3, [r3, #0]
 801522c:	68f9      	ldr	r1, [r7, #12]
 801522e:	4618      	mov	r0, r3
 8015230:	f001 f8fe 	bl	8016430 <ip4_addr_isbroadcast_u32>
 8015234:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8015236:	2b00      	cmp	r3, #0
 8015238:	d105      	bne.n	8015246 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801523a:	68bb      	ldr	r3, [r7, #8]
 801523c:	681b      	ldr	r3, [r3, #0]
 801523e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015242:	2be0      	cmp	r3, #224	; 0xe0
 8015244:	d102      	bne.n	801524c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015246:	f06f 030f 	mvn.w	r3, #15
 801524a:	e06c      	b.n	8015326 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801524c:	78fb      	ldrb	r3, [r7, #3]
 801524e:	68fa      	ldr	r2, [r7, #12]
 8015250:	4619      	mov	r1, r3
 8015252:	68b8      	ldr	r0, [r7, #8]
 8015254:	f7ff fe56 	bl	8014f04 <etharp_find_entry>
 8015258:	4603      	mov	r3, r0
 801525a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801525c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015260:	2b00      	cmp	r3, #0
 8015262:	da02      	bge.n	801526a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8015264:	8afb      	ldrh	r3, [r7, #22]
 8015266:	b25b      	sxtb	r3, r3
 8015268:	e05d      	b.n	8015326 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801526a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801526e:	4933      	ldr	r1, [pc, #204]	; (801533c <etharp_update_arp_entry+0x148>)
 8015270:	4613      	mov	r3, r2
 8015272:	005b      	lsls	r3, r3, #1
 8015274:	4413      	add	r3, r2
 8015276:	00db      	lsls	r3, r3, #3
 8015278:	440b      	add	r3, r1
 801527a:	3314      	adds	r3, #20
 801527c:	2202      	movs	r2, #2
 801527e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8015280:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015284:	492d      	ldr	r1, [pc, #180]	; (801533c <etharp_update_arp_entry+0x148>)
 8015286:	4613      	mov	r3, r2
 8015288:	005b      	lsls	r3, r3, #1
 801528a:	4413      	add	r3, r2
 801528c:	00db      	lsls	r3, r3, #3
 801528e:	440b      	add	r3, r1
 8015290:	3308      	adds	r3, #8
 8015292:	68fa      	ldr	r2, [r7, #12]
 8015294:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8015296:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801529a:	4613      	mov	r3, r2
 801529c:	005b      	lsls	r3, r3, #1
 801529e:	4413      	add	r3, r2
 80152a0:	00db      	lsls	r3, r3, #3
 80152a2:	3308      	adds	r3, #8
 80152a4:	4a25      	ldr	r2, [pc, #148]	; (801533c <etharp_update_arp_entry+0x148>)
 80152a6:	4413      	add	r3, r2
 80152a8:	3304      	adds	r3, #4
 80152aa:	2206      	movs	r2, #6
 80152ac:	6879      	ldr	r1, [r7, #4]
 80152ae:	4618      	mov	r0, r3
 80152b0:	f005 fbc9 	bl	801aa46 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80152b4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80152b8:	4920      	ldr	r1, [pc, #128]	; (801533c <etharp_update_arp_entry+0x148>)
 80152ba:	4613      	mov	r3, r2
 80152bc:	005b      	lsls	r3, r3, #1
 80152be:	4413      	add	r3, r2
 80152c0:	00db      	lsls	r3, r3, #3
 80152c2:	440b      	add	r3, r1
 80152c4:	3312      	adds	r3, #18
 80152c6:	2200      	movs	r2, #0
 80152c8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80152ca:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80152ce:	491b      	ldr	r1, [pc, #108]	; (801533c <etharp_update_arp_entry+0x148>)
 80152d0:	4613      	mov	r3, r2
 80152d2:	005b      	lsls	r3, r3, #1
 80152d4:	4413      	add	r3, r2
 80152d6:	00db      	lsls	r3, r3, #3
 80152d8:	440b      	add	r3, r1
 80152da:	681b      	ldr	r3, [r3, #0]
 80152dc:	2b00      	cmp	r3, #0
 80152de:	d021      	beq.n	8015324 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80152e0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80152e4:	4915      	ldr	r1, [pc, #84]	; (801533c <etharp_update_arp_entry+0x148>)
 80152e6:	4613      	mov	r3, r2
 80152e8:	005b      	lsls	r3, r3, #1
 80152ea:	4413      	add	r3, r2
 80152ec:	00db      	lsls	r3, r3, #3
 80152ee:	440b      	add	r3, r1
 80152f0:	681b      	ldr	r3, [r3, #0]
 80152f2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80152f4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80152f8:	4910      	ldr	r1, [pc, #64]	; (801533c <etharp_update_arp_entry+0x148>)
 80152fa:	4613      	mov	r3, r2
 80152fc:	005b      	lsls	r3, r3, #1
 80152fe:	4413      	add	r3, r2
 8015300:	00db      	lsls	r3, r3, #3
 8015302:	440b      	add	r3, r1
 8015304:	2200      	movs	r2, #0
 8015306:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8015308:	68fb      	ldr	r3, [r7, #12]
 801530a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801530e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015312:	9300      	str	r3, [sp, #0]
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	6939      	ldr	r1, [r7, #16]
 8015318:	68f8      	ldr	r0, [r7, #12]
 801531a:	f001 ff91 	bl	8017240 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801531e:	6938      	ldr	r0, [r7, #16]
 8015320:	f7f8 fd5c 	bl	800dddc <pbuf_free>
  }
  return ERR_OK;
 8015324:	2300      	movs	r3, #0
}
 8015326:	4618      	mov	r0, r3
 8015328:	3718      	adds	r7, #24
 801532a:	46bd      	mov	sp, r7
 801532c:	bd80      	pop	{r7, pc}
 801532e:	bf00      	nop
 8015330:	0801e7d8 	.word	0x0801e7d8
 8015334:	0801e8d0 	.word	0x0801e8d0
 8015338:	0801e850 	.word	0x0801e850
 801533c:	20004c04 	.word	0x20004c04

08015340 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8015340:	b580      	push	{r7, lr}
 8015342:	b084      	sub	sp, #16
 8015344:	af00      	add	r7, sp, #0
 8015346:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015348:	2300      	movs	r3, #0
 801534a:	60fb      	str	r3, [r7, #12]
 801534c:	e01e      	b.n	801538c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801534e:	4913      	ldr	r1, [pc, #76]	; (801539c <etharp_cleanup_netif+0x5c>)
 8015350:	68fa      	ldr	r2, [r7, #12]
 8015352:	4613      	mov	r3, r2
 8015354:	005b      	lsls	r3, r3, #1
 8015356:	4413      	add	r3, r2
 8015358:	00db      	lsls	r3, r3, #3
 801535a:	440b      	add	r3, r1
 801535c:	3314      	adds	r3, #20
 801535e:	781b      	ldrb	r3, [r3, #0]
 8015360:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8015362:	7afb      	ldrb	r3, [r7, #11]
 8015364:	2b00      	cmp	r3, #0
 8015366:	d00e      	beq.n	8015386 <etharp_cleanup_netif+0x46>
 8015368:	490c      	ldr	r1, [pc, #48]	; (801539c <etharp_cleanup_netif+0x5c>)
 801536a:	68fa      	ldr	r2, [r7, #12]
 801536c:	4613      	mov	r3, r2
 801536e:	005b      	lsls	r3, r3, #1
 8015370:	4413      	add	r3, r2
 8015372:	00db      	lsls	r3, r3, #3
 8015374:	440b      	add	r3, r1
 8015376:	3308      	adds	r3, #8
 8015378:	681b      	ldr	r3, [r3, #0]
 801537a:	687a      	ldr	r2, [r7, #4]
 801537c:	429a      	cmp	r2, r3
 801537e:	d102      	bne.n	8015386 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8015380:	68f8      	ldr	r0, [r7, #12]
 8015382:	f7ff fce5 	bl	8014d50 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015386:	68fb      	ldr	r3, [r7, #12]
 8015388:	3301      	adds	r3, #1
 801538a:	60fb      	str	r3, [r7, #12]
 801538c:	68fb      	ldr	r3, [r7, #12]
 801538e:	2b09      	cmp	r3, #9
 8015390:	dddd      	ble.n	801534e <etharp_cleanup_netif+0xe>
    }
  }
}
 8015392:	bf00      	nop
 8015394:	bf00      	nop
 8015396:	3710      	adds	r7, #16
 8015398:	46bd      	mov	sp, r7
 801539a:	bd80      	pop	{r7, pc}
 801539c:	20004c04 	.word	0x20004c04

080153a0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80153a0:	b5b0      	push	{r4, r5, r7, lr}
 80153a2:	b08a      	sub	sp, #40	; 0x28
 80153a4:	af04      	add	r7, sp, #16
 80153a6:	6078      	str	r0, [r7, #4]
 80153a8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80153aa:	683b      	ldr	r3, [r7, #0]
 80153ac:	2b00      	cmp	r3, #0
 80153ae:	d107      	bne.n	80153c0 <etharp_input+0x20>
 80153b0:	4b3d      	ldr	r3, [pc, #244]	; (80154a8 <etharp_input+0x108>)
 80153b2:	f240 228a 	movw	r2, #650	; 0x28a
 80153b6:	493d      	ldr	r1, [pc, #244]	; (80154ac <etharp_input+0x10c>)
 80153b8:	483d      	ldr	r0, [pc, #244]	; (80154b0 <etharp_input+0x110>)
 80153ba:	f005 fea3 	bl	801b104 <iprintf>
 80153be:	e06f      	b.n	80154a0 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80153c0:	687b      	ldr	r3, [r7, #4]
 80153c2:	685b      	ldr	r3, [r3, #4]
 80153c4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80153c6:	693b      	ldr	r3, [r7, #16]
 80153c8:	881b      	ldrh	r3, [r3, #0]
 80153ca:	b29b      	uxth	r3, r3
 80153cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80153d0:	d10c      	bne.n	80153ec <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80153d2:	693b      	ldr	r3, [r7, #16]
 80153d4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80153d6:	2b06      	cmp	r3, #6
 80153d8:	d108      	bne.n	80153ec <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80153da:	693b      	ldr	r3, [r7, #16]
 80153dc:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80153de:	2b04      	cmp	r3, #4
 80153e0:	d104      	bne.n	80153ec <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80153e2:	693b      	ldr	r3, [r7, #16]
 80153e4:	885b      	ldrh	r3, [r3, #2]
 80153e6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80153e8:	2b08      	cmp	r3, #8
 80153ea:	d003      	beq.n	80153f4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80153ec:	6878      	ldr	r0, [r7, #4]
 80153ee:	f7f8 fcf5 	bl	800dddc <pbuf_free>
    return;
 80153f2:	e055      	b.n	80154a0 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80153f4:	693b      	ldr	r3, [r7, #16]
 80153f6:	330e      	adds	r3, #14
 80153f8:	681b      	ldr	r3, [r3, #0]
 80153fa:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80153fc:	693b      	ldr	r3, [r7, #16]
 80153fe:	3318      	adds	r3, #24
 8015400:	681b      	ldr	r3, [r3, #0]
 8015402:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015404:	683b      	ldr	r3, [r7, #0]
 8015406:	3304      	adds	r3, #4
 8015408:	681b      	ldr	r3, [r3, #0]
 801540a:	2b00      	cmp	r3, #0
 801540c:	d102      	bne.n	8015414 <etharp_input+0x74>
    for_us = 0;
 801540e:	2300      	movs	r3, #0
 8015410:	75fb      	strb	r3, [r7, #23]
 8015412:	e009      	b.n	8015428 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8015414:	68ba      	ldr	r2, [r7, #8]
 8015416:	683b      	ldr	r3, [r7, #0]
 8015418:	3304      	adds	r3, #4
 801541a:	681b      	ldr	r3, [r3, #0]
 801541c:	429a      	cmp	r2, r3
 801541e:	bf0c      	ite	eq
 8015420:	2301      	moveq	r3, #1
 8015422:	2300      	movne	r3, #0
 8015424:	b2db      	uxtb	r3, r3
 8015426:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8015428:	693b      	ldr	r3, [r7, #16]
 801542a:	f103 0208 	add.w	r2, r3, #8
 801542e:	7dfb      	ldrb	r3, [r7, #23]
 8015430:	2b00      	cmp	r3, #0
 8015432:	d001      	beq.n	8015438 <etharp_input+0x98>
 8015434:	2301      	movs	r3, #1
 8015436:	e000      	b.n	801543a <etharp_input+0x9a>
 8015438:	2302      	movs	r3, #2
 801543a:	f107 010c 	add.w	r1, r7, #12
 801543e:	6838      	ldr	r0, [r7, #0]
 8015440:	f7ff fed8 	bl	80151f4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8015444:	693b      	ldr	r3, [r7, #16]
 8015446:	88db      	ldrh	r3, [r3, #6]
 8015448:	b29b      	uxth	r3, r3
 801544a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801544e:	d003      	beq.n	8015458 <etharp_input+0xb8>
 8015450:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015454:	d01e      	beq.n	8015494 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8015456:	e020      	b.n	801549a <etharp_input+0xfa>
      if (for_us) {
 8015458:	7dfb      	ldrb	r3, [r7, #23]
 801545a:	2b00      	cmp	r3, #0
 801545c:	d01c      	beq.n	8015498 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801545e:	683b      	ldr	r3, [r7, #0]
 8015460:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8015464:	693b      	ldr	r3, [r7, #16]
 8015466:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801546a:	683b      	ldr	r3, [r7, #0]
 801546c:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8015470:	683b      	ldr	r3, [r7, #0]
 8015472:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8015474:	693a      	ldr	r2, [r7, #16]
 8015476:	3208      	adds	r2, #8
        etharp_raw(netif,
 8015478:	2102      	movs	r1, #2
 801547a:	9103      	str	r1, [sp, #12]
 801547c:	f107 010c 	add.w	r1, r7, #12
 8015480:	9102      	str	r1, [sp, #8]
 8015482:	9201      	str	r2, [sp, #4]
 8015484:	9300      	str	r3, [sp, #0]
 8015486:	462b      	mov	r3, r5
 8015488:	4622      	mov	r2, r4
 801548a:	4601      	mov	r1, r0
 801548c:	6838      	ldr	r0, [r7, #0]
 801548e:	f000 faeb 	bl	8015a68 <etharp_raw>
      break;
 8015492:	e001      	b.n	8015498 <etharp_input+0xf8>
      break;
 8015494:	bf00      	nop
 8015496:	e000      	b.n	801549a <etharp_input+0xfa>
      break;
 8015498:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801549a:	6878      	ldr	r0, [r7, #4]
 801549c:	f7f8 fc9e 	bl	800dddc <pbuf_free>
}
 80154a0:	3718      	adds	r7, #24
 80154a2:	46bd      	mov	sp, r7
 80154a4:	bdb0      	pop	{r4, r5, r7, pc}
 80154a6:	bf00      	nop
 80154a8:	0801e7d8 	.word	0x0801e7d8
 80154ac:	0801e928 	.word	0x0801e928
 80154b0:	0801e850 	.word	0x0801e850

080154b4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80154b4:	b580      	push	{r7, lr}
 80154b6:	b086      	sub	sp, #24
 80154b8:	af02      	add	r7, sp, #8
 80154ba:	60f8      	str	r0, [r7, #12]
 80154bc:	60b9      	str	r1, [r7, #8]
 80154be:	4613      	mov	r3, r2
 80154c0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80154c2:	79fa      	ldrb	r2, [r7, #7]
 80154c4:	4944      	ldr	r1, [pc, #272]	; (80155d8 <etharp_output_to_arp_index+0x124>)
 80154c6:	4613      	mov	r3, r2
 80154c8:	005b      	lsls	r3, r3, #1
 80154ca:	4413      	add	r3, r2
 80154cc:	00db      	lsls	r3, r3, #3
 80154ce:	440b      	add	r3, r1
 80154d0:	3314      	adds	r3, #20
 80154d2:	781b      	ldrb	r3, [r3, #0]
 80154d4:	2b01      	cmp	r3, #1
 80154d6:	d806      	bhi.n	80154e6 <etharp_output_to_arp_index+0x32>
 80154d8:	4b40      	ldr	r3, [pc, #256]	; (80155dc <etharp_output_to_arp_index+0x128>)
 80154da:	f240 22ee 	movw	r2, #750	; 0x2ee
 80154de:	4940      	ldr	r1, [pc, #256]	; (80155e0 <etharp_output_to_arp_index+0x12c>)
 80154e0:	4840      	ldr	r0, [pc, #256]	; (80155e4 <etharp_output_to_arp_index+0x130>)
 80154e2:	f005 fe0f 	bl	801b104 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80154e6:	79fa      	ldrb	r2, [r7, #7]
 80154e8:	493b      	ldr	r1, [pc, #236]	; (80155d8 <etharp_output_to_arp_index+0x124>)
 80154ea:	4613      	mov	r3, r2
 80154ec:	005b      	lsls	r3, r3, #1
 80154ee:	4413      	add	r3, r2
 80154f0:	00db      	lsls	r3, r3, #3
 80154f2:	440b      	add	r3, r1
 80154f4:	3314      	adds	r3, #20
 80154f6:	781b      	ldrb	r3, [r3, #0]
 80154f8:	2b02      	cmp	r3, #2
 80154fa:	d153      	bne.n	80155a4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80154fc:	79fa      	ldrb	r2, [r7, #7]
 80154fe:	4936      	ldr	r1, [pc, #216]	; (80155d8 <etharp_output_to_arp_index+0x124>)
 8015500:	4613      	mov	r3, r2
 8015502:	005b      	lsls	r3, r3, #1
 8015504:	4413      	add	r3, r2
 8015506:	00db      	lsls	r3, r3, #3
 8015508:	440b      	add	r3, r1
 801550a:	3312      	adds	r3, #18
 801550c:	881b      	ldrh	r3, [r3, #0]
 801550e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8015512:	d919      	bls.n	8015548 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8015514:	79fa      	ldrb	r2, [r7, #7]
 8015516:	4613      	mov	r3, r2
 8015518:	005b      	lsls	r3, r3, #1
 801551a:	4413      	add	r3, r2
 801551c:	00db      	lsls	r3, r3, #3
 801551e:	4a2e      	ldr	r2, [pc, #184]	; (80155d8 <etharp_output_to_arp_index+0x124>)
 8015520:	4413      	add	r3, r2
 8015522:	3304      	adds	r3, #4
 8015524:	4619      	mov	r1, r3
 8015526:	68f8      	ldr	r0, [r7, #12]
 8015528:	f000 fb4c 	bl	8015bc4 <etharp_request>
 801552c:	4603      	mov	r3, r0
 801552e:	2b00      	cmp	r3, #0
 8015530:	d138      	bne.n	80155a4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015532:	79fa      	ldrb	r2, [r7, #7]
 8015534:	4928      	ldr	r1, [pc, #160]	; (80155d8 <etharp_output_to_arp_index+0x124>)
 8015536:	4613      	mov	r3, r2
 8015538:	005b      	lsls	r3, r3, #1
 801553a:	4413      	add	r3, r2
 801553c:	00db      	lsls	r3, r3, #3
 801553e:	440b      	add	r3, r1
 8015540:	3314      	adds	r3, #20
 8015542:	2203      	movs	r2, #3
 8015544:	701a      	strb	r2, [r3, #0]
 8015546:	e02d      	b.n	80155a4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8015548:	79fa      	ldrb	r2, [r7, #7]
 801554a:	4923      	ldr	r1, [pc, #140]	; (80155d8 <etharp_output_to_arp_index+0x124>)
 801554c:	4613      	mov	r3, r2
 801554e:	005b      	lsls	r3, r3, #1
 8015550:	4413      	add	r3, r2
 8015552:	00db      	lsls	r3, r3, #3
 8015554:	440b      	add	r3, r1
 8015556:	3312      	adds	r3, #18
 8015558:	881b      	ldrh	r3, [r3, #0]
 801555a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801555e:	d321      	bcc.n	80155a4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8015560:	79fa      	ldrb	r2, [r7, #7]
 8015562:	4613      	mov	r3, r2
 8015564:	005b      	lsls	r3, r3, #1
 8015566:	4413      	add	r3, r2
 8015568:	00db      	lsls	r3, r3, #3
 801556a:	4a1b      	ldr	r2, [pc, #108]	; (80155d8 <etharp_output_to_arp_index+0x124>)
 801556c:	4413      	add	r3, r2
 801556e:	1d19      	adds	r1, r3, #4
 8015570:	79fa      	ldrb	r2, [r7, #7]
 8015572:	4613      	mov	r3, r2
 8015574:	005b      	lsls	r3, r3, #1
 8015576:	4413      	add	r3, r2
 8015578:	00db      	lsls	r3, r3, #3
 801557a:	3308      	adds	r3, #8
 801557c:	4a16      	ldr	r2, [pc, #88]	; (80155d8 <etharp_output_to_arp_index+0x124>)
 801557e:	4413      	add	r3, r2
 8015580:	3304      	adds	r3, #4
 8015582:	461a      	mov	r2, r3
 8015584:	68f8      	ldr	r0, [r7, #12]
 8015586:	f000 fafb 	bl	8015b80 <etharp_request_dst>
 801558a:	4603      	mov	r3, r0
 801558c:	2b00      	cmp	r3, #0
 801558e:	d109      	bne.n	80155a4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015590:	79fa      	ldrb	r2, [r7, #7]
 8015592:	4911      	ldr	r1, [pc, #68]	; (80155d8 <etharp_output_to_arp_index+0x124>)
 8015594:	4613      	mov	r3, r2
 8015596:	005b      	lsls	r3, r3, #1
 8015598:	4413      	add	r3, r2
 801559a:	00db      	lsls	r3, r3, #3
 801559c:	440b      	add	r3, r1
 801559e:	3314      	adds	r3, #20
 80155a0:	2203      	movs	r2, #3
 80155a2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80155a4:	68fb      	ldr	r3, [r7, #12]
 80155a6:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80155aa:	79fa      	ldrb	r2, [r7, #7]
 80155ac:	4613      	mov	r3, r2
 80155ae:	005b      	lsls	r3, r3, #1
 80155b0:	4413      	add	r3, r2
 80155b2:	00db      	lsls	r3, r3, #3
 80155b4:	3308      	adds	r3, #8
 80155b6:	4a08      	ldr	r2, [pc, #32]	; (80155d8 <etharp_output_to_arp_index+0x124>)
 80155b8:	4413      	add	r3, r2
 80155ba:	3304      	adds	r3, #4
 80155bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80155c0:	9200      	str	r2, [sp, #0]
 80155c2:	460a      	mov	r2, r1
 80155c4:	68b9      	ldr	r1, [r7, #8]
 80155c6:	68f8      	ldr	r0, [r7, #12]
 80155c8:	f001 fe3a 	bl	8017240 <ethernet_output>
 80155cc:	4603      	mov	r3, r0
}
 80155ce:	4618      	mov	r0, r3
 80155d0:	3710      	adds	r7, #16
 80155d2:	46bd      	mov	sp, r7
 80155d4:	bd80      	pop	{r7, pc}
 80155d6:	bf00      	nop
 80155d8:	20004c04 	.word	0x20004c04
 80155dc:	0801e7d8 	.word	0x0801e7d8
 80155e0:	0801e948 	.word	0x0801e948
 80155e4:	0801e850 	.word	0x0801e850

080155e8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80155e8:	b580      	push	{r7, lr}
 80155ea:	b08a      	sub	sp, #40	; 0x28
 80155ec:	af02      	add	r7, sp, #8
 80155ee:	60f8      	str	r0, [r7, #12]
 80155f0:	60b9      	str	r1, [r7, #8]
 80155f2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80155f8:	68fb      	ldr	r3, [r7, #12]
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	d106      	bne.n	801560c <etharp_output+0x24>
 80155fe:	4b73      	ldr	r3, [pc, #460]	; (80157cc <etharp_output+0x1e4>)
 8015600:	f240 321e 	movw	r2, #798	; 0x31e
 8015604:	4972      	ldr	r1, [pc, #456]	; (80157d0 <etharp_output+0x1e8>)
 8015606:	4873      	ldr	r0, [pc, #460]	; (80157d4 <etharp_output+0x1ec>)
 8015608:	f005 fd7c 	bl	801b104 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801560c:	68bb      	ldr	r3, [r7, #8]
 801560e:	2b00      	cmp	r3, #0
 8015610:	d106      	bne.n	8015620 <etharp_output+0x38>
 8015612:	4b6e      	ldr	r3, [pc, #440]	; (80157cc <etharp_output+0x1e4>)
 8015614:	f240 321f 	movw	r2, #799	; 0x31f
 8015618:	496f      	ldr	r1, [pc, #444]	; (80157d8 <etharp_output+0x1f0>)
 801561a:	486e      	ldr	r0, [pc, #440]	; (80157d4 <etharp_output+0x1ec>)
 801561c:	f005 fd72 	bl	801b104 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8015620:	687b      	ldr	r3, [r7, #4]
 8015622:	2b00      	cmp	r3, #0
 8015624:	d106      	bne.n	8015634 <etharp_output+0x4c>
 8015626:	4b69      	ldr	r3, [pc, #420]	; (80157cc <etharp_output+0x1e4>)
 8015628:	f44f 7248 	mov.w	r2, #800	; 0x320
 801562c:	496b      	ldr	r1, [pc, #428]	; (80157dc <etharp_output+0x1f4>)
 801562e:	4869      	ldr	r0, [pc, #420]	; (80157d4 <etharp_output+0x1ec>)
 8015630:	f005 fd68 	bl	801b104 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	681b      	ldr	r3, [r3, #0]
 8015638:	68f9      	ldr	r1, [r7, #12]
 801563a:	4618      	mov	r0, r3
 801563c:	f000 fef8 	bl	8016430 <ip4_addr_isbroadcast_u32>
 8015640:	4603      	mov	r3, r0
 8015642:	2b00      	cmp	r3, #0
 8015644:	d002      	beq.n	801564c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8015646:	4b66      	ldr	r3, [pc, #408]	; (80157e0 <etharp_output+0x1f8>)
 8015648:	61fb      	str	r3, [r7, #28]
 801564a:	e0af      	b.n	80157ac <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	681b      	ldr	r3, [r3, #0]
 8015650:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015654:	2be0      	cmp	r3, #224	; 0xe0
 8015656:	d118      	bne.n	801568a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8015658:	2301      	movs	r3, #1
 801565a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801565c:	2300      	movs	r3, #0
 801565e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8015660:	235e      	movs	r3, #94	; 0x5e
 8015662:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	3301      	adds	r3, #1
 8015668:	781b      	ldrb	r3, [r3, #0]
 801566a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801566e:	b2db      	uxtb	r3, r3
 8015670:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	3302      	adds	r3, #2
 8015676:	781b      	ldrb	r3, [r3, #0]
 8015678:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	3303      	adds	r3, #3
 801567e:	781b      	ldrb	r3, [r3, #0]
 8015680:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8015682:	f107 0310 	add.w	r3, r7, #16
 8015686:	61fb      	str	r3, [r7, #28]
 8015688:	e090      	b.n	80157ac <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	681a      	ldr	r2, [r3, #0]
 801568e:	68fb      	ldr	r3, [r7, #12]
 8015690:	3304      	adds	r3, #4
 8015692:	681b      	ldr	r3, [r3, #0]
 8015694:	405a      	eors	r2, r3
 8015696:	68fb      	ldr	r3, [r7, #12]
 8015698:	3308      	adds	r3, #8
 801569a:	681b      	ldr	r3, [r3, #0]
 801569c:	4013      	ands	r3, r2
 801569e:	2b00      	cmp	r3, #0
 80156a0:	d012      	beq.n	80156c8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	681b      	ldr	r3, [r3, #0]
 80156a6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80156a8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80156ac:	4293      	cmp	r3, r2
 80156ae:	d00b      	beq.n	80156c8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80156b0:	68fb      	ldr	r3, [r7, #12]
 80156b2:	330c      	adds	r3, #12
 80156b4:	681b      	ldr	r3, [r3, #0]
 80156b6:	2b00      	cmp	r3, #0
 80156b8:	d003      	beq.n	80156c2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80156ba:	68fb      	ldr	r3, [r7, #12]
 80156bc:	330c      	adds	r3, #12
 80156be:	61bb      	str	r3, [r7, #24]
 80156c0:	e002      	b.n	80156c8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80156c2:	f06f 0303 	mvn.w	r3, #3
 80156c6:	e07d      	b.n	80157c4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80156c8:	4b46      	ldr	r3, [pc, #280]	; (80157e4 <etharp_output+0x1fc>)
 80156ca:	781b      	ldrb	r3, [r3, #0]
 80156cc:	4619      	mov	r1, r3
 80156ce:	4a46      	ldr	r2, [pc, #280]	; (80157e8 <etharp_output+0x200>)
 80156d0:	460b      	mov	r3, r1
 80156d2:	005b      	lsls	r3, r3, #1
 80156d4:	440b      	add	r3, r1
 80156d6:	00db      	lsls	r3, r3, #3
 80156d8:	4413      	add	r3, r2
 80156da:	3314      	adds	r3, #20
 80156dc:	781b      	ldrb	r3, [r3, #0]
 80156de:	2b01      	cmp	r3, #1
 80156e0:	d925      	bls.n	801572e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80156e2:	4b40      	ldr	r3, [pc, #256]	; (80157e4 <etharp_output+0x1fc>)
 80156e4:	781b      	ldrb	r3, [r3, #0]
 80156e6:	4619      	mov	r1, r3
 80156e8:	4a3f      	ldr	r2, [pc, #252]	; (80157e8 <etharp_output+0x200>)
 80156ea:	460b      	mov	r3, r1
 80156ec:	005b      	lsls	r3, r3, #1
 80156ee:	440b      	add	r3, r1
 80156f0:	00db      	lsls	r3, r3, #3
 80156f2:	4413      	add	r3, r2
 80156f4:	3308      	adds	r3, #8
 80156f6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80156f8:	68fa      	ldr	r2, [r7, #12]
 80156fa:	429a      	cmp	r2, r3
 80156fc:	d117      	bne.n	801572e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80156fe:	69bb      	ldr	r3, [r7, #24]
 8015700:	681a      	ldr	r2, [r3, #0]
 8015702:	4b38      	ldr	r3, [pc, #224]	; (80157e4 <etharp_output+0x1fc>)
 8015704:	781b      	ldrb	r3, [r3, #0]
 8015706:	4618      	mov	r0, r3
 8015708:	4937      	ldr	r1, [pc, #220]	; (80157e8 <etharp_output+0x200>)
 801570a:	4603      	mov	r3, r0
 801570c:	005b      	lsls	r3, r3, #1
 801570e:	4403      	add	r3, r0
 8015710:	00db      	lsls	r3, r3, #3
 8015712:	440b      	add	r3, r1
 8015714:	3304      	adds	r3, #4
 8015716:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015718:	429a      	cmp	r2, r3
 801571a:	d108      	bne.n	801572e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801571c:	4b31      	ldr	r3, [pc, #196]	; (80157e4 <etharp_output+0x1fc>)
 801571e:	781b      	ldrb	r3, [r3, #0]
 8015720:	461a      	mov	r2, r3
 8015722:	68b9      	ldr	r1, [r7, #8]
 8015724:	68f8      	ldr	r0, [r7, #12]
 8015726:	f7ff fec5 	bl	80154b4 <etharp_output_to_arp_index>
 801572a:	4603      	mov	r3, r0
 801572c:	e04a      	b.n	80157c4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801572e:	2300      	movs	r3, #0
 8015730:	75fb      	strb	r3, [r7, #23]
 8015732:	e031      	b.n	8015798 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015734:	7dfa      	ldrb	r2, [r7, #23]
 8015736:	492c      	ldr	r1, [pc, #176]	; (80157e8 <etharp_output+0x200>)
 8015738:	4613      	mov	r3, r2
 801573a:	005b      	lsls	r3, r3, #1
 801573c:	4413      	add	r3, r2
 801573e:	00db      	lsls	r3, r3, #3
 8015740:	440b      	add	r3, r1
 8015742:	3314      	adds	r3, #20
 8015744:	781b      	ldrb	r3, [r3, #0]
 8015746:	2b01      	cmp	r3, #1
 8015748:	d923      	bls.n	8015792 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801574a:	7dfa      	ldrb	r2, [r7, #23]
 801574c:	4926      	ldr	r1, [pc, #152]	; (80157e8 <etharp_output+0x200>)
 801574e:	4613      	mov	r3, r2
 8015750:	005b      	lsls	r3, r3, #1
 8015752:	4413      	add	r3, r2
 8015754:	00db      	lsls	r3, r3, #3
 8015756:	440b      	add	r3, r1
 8015758:	3308      	adds	r3, #8
 801575a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801575c:	68fa      	ldr	r2, [r7, #12]
 801575e:	429a      	cmp	r2, r3
 8015760:	d117      	bne.n	8015792 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8015762:	69bb      	ldr	r3, [r7, #24]
 8015764:	6819      	ldr	r1, [r3, #0]
 8015766:	7dfa      	ldrb	r2, [r7, #23]
 8015768:	481f      	ldr	r0, [pc, #124]	; (80157e8 <etharp_output+0x200>)
 801576a:	4613      	mov	r3, r2
 801576c:	005b      	lsls	r3, r3, #1
 801576e:	4413      	add	r3, r2
 8015770:	00db      	lsls	r3, r3, #3
 8015772:	4403      	add	r3, r0
 8015774:	3304      	adds	r3, #4
 8015776:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8015778:	4299      	cmp	r1, r3
 801577a:	d10a      	bne.n	8015792 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801577c:	4a19      	ldr	r2, [pc, #100]	; (80157e4 <etharp_output+0x1fc>)
 801577e:	7dfb      	ldrb	r3, [r7, #23]
 8015780:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8015782:	7dfb      	ldrb	r3, [r7, #23]
 8015784:	461a      	mov	r2, r3
 8015786:	68b9      	ldr	r1, [r7, #8]
 8015788:	68f8      	ldr	r0, [r7, #12]
 801578a:	f7ff fe93 	bl	80154b4 <etharp_output_to_arp_index>
 801578e:	4603      	mov	r3, r0
 8015790:	e018      	b.n	80157c4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015792:	7dfb      	ldrb	r3, [r7, #23]
 8015794:	3301      	adds	r3, #1
 8015796:	75fb      	strb	r3, [r7, #23]
 8015798:	7dfb      	ldrb	r3, [r7, #23]
 801579a:	2b09      	cmp	r3, #9
 801579c:	d9ca      	bls.n	8015734 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801579e:	68ba      	ldr	r2, [r7, #8]
 80157a0:	69b9      	ldr	r1, [r7, #24]
 80157a2:	68f8      	ldr	r0, [r7, #12]
 80157a4:	f000 f822 	bl	80157ec <etharp_query>
 80157a8:	4603      	mov	r3, r0
 80157aa:	e00b      	b.n	80157c4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80157ac:	68fb      	ldr	r3, [r7, #12]
 80157ae:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80157b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80157b6:	9300      	str	r3, [sp, #0]
 80157b8:	69fb      	ldr	r3, [r7, #28]
 80157ba:	68b9      	ldr	r1, [r7, #8]
 80157bc:	68f8      	ldr	r0, [r7, #12]
 80157be:	f001 fd3f 	bl	8017240 <ethernet_output>
 80157c2:	4603      	mov	r3, r0
}
 80157c4:	4618      	mov	r0, r3
 80157c6:	3720      	adds	r7, #32
 80157c8:	46bd      	mov	sp, r7
 80157ca:	bd80      	pop	{r7, pc}
 80157cc:	0801e7d8 	.word	0x0801e7d8
 80157d0:	0801e928 	.word	0x0801e928
 80157d4:	0801e850 	.word	0x0801e850
 80157d8:	0801e978 	.word	0x0801e978
 80157dc:	0801e918 	.word	0x0801e918
 80157e0:	0801f158 	.word	0x0801f158
 80157e4:	20004cf4 	.word	0x20004cf4
 80157e8:	20004c04 	.word	0x20004c04

080157ec <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80157ec:	b580      	push	{r7, lr}
 80157ee:	b08c      	sub	sp, #48	; 0x30
 80157f0:	af02      	add	r7, sp, #8
 80157f2:	60f8      	str	r0, [r7, #12]
 80157f4:	60b9      	str	r1, [r7, #8]
 80157f6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80157f8:	68fb      	ldr	r3, [r7, #12]
 80157fa:	3326      	adds	r3, #38	; 0x26
 80157fc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80157fe:	23ff      	movs	r3, #255	; 0xff
 8015800:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8015804:	2300      	movs	r3, #0
 8015806:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015808:	68bb      	ldr	r3, [r7, #8]
 801580a:	681b      	ldr	r3, [r3, #0]
 801580c:	68f9      	ldr	r1, [r7, #12]
 801580e:	4618      	mov	r0, r3
 8015810:	f000 fe0e 	bl	8016430 <ip4_addr_isbroadcast_u32>
 8015814:	4603      	mov	r3, r0
 8015816:	2b00      	cmp	r3, #0
 8015818:	d10c      	bne.n	8015834 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801581a:	68bb      	ldr	r3, [r7, #8]
 801581c:	681b      	ldr	r3, [r3, #0]
 801581e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015822:	2be0      	cmp	r3, #224	; 0xe0
 8015824:	d006      	beq.n	8015834 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015826:	68bb      	ldr	r3, [r7, #8]
 8015828:	2b00      	cmp	r3, #0
 801582a:	d003      	beq.n	8015834 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801582c:	68bb      	ldr	r3, [r7, #8]
 801582e:	681b      	ldr	r3, [r3, #0]
 8015830:	2b00      	cmp	r3, #0
 8015832:	d102      	bne.n	801583a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015834:	f06f 030f 	mvn.w	r3, #15
 8015838:	e101      	b.n	8015a3e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801583a:	68fa      	ldr	r2, [r7, #12]
 801583c:	2101      	movs	r1, #1
 801583e:	68b8      	ldr	r0, [r7, #8]
 8015840:	f7ff fb60 	bl	8014f04 <etharp_find_entry>
 8015844:	4603      	mov	r3, r0
 8015846:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8015848:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801584c:	2b00      	cmp	r3, #0
 801584e:	da02      	bge.n	8015856 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8015850:	8a7b      	ldrh	r3, [r7, #18]
 8015852:	b25b      	sxtb	r3, r3
 8015854:	e0f3      	b.n	8015a3e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8015856:	8a7b      	ldrh	r3, [r7, #18]
 8015858:	2b7e      	cmp	r3, #126	; 0x7e
 801585a:	d906      	bls.n	801586a <etharp_query+0x7e>
 801585c:	4b7a      	ldr	r3, [pc, #488]	; (8015a48 <etharp_query+0x25c>)
 801585e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8015862:	497a      	ldr	r1, [pc, #488]	; (8015a4c <etharp_query+0x260>)
 8015864:	487a      	ldr	r0, [pc, #488]	; (8015a50 <etharp_query+0x264>)
 8015866:	f005 fc4d 	bl	801b104 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801586a:	8a7b      	ldrh	r3, [r7, #18]
 801586c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801586e:	7c7a      	ldrb	r2, [r7, #17]
 8015870:	4978      	ldr	r1, [pc, #480]	; (8015a54 <etharp_query+0x268>)
 8015872:	4613      	mov	r3, r2
 8015874:	005b      	lsls	r3, r3, #1
 8015876:	4413      	add	r3, r2
 8015878:	00db      	lsls	r3, r3, #3
 801587a:	440b      	add	r3, r1
 801587c:	3314      	adds	r3, #20
 801587e:	781b      	ldrb	r3, [r3, #0]
 8015880:	2b00      	cmp	r3, #0
 8015882:	d115      	bne.n	80158b0 <etharp_query+0xc4>
    is_new_entry = 1;
 8015884:	2301      	movs	r3, #1
 8015886:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8015888:	7c7a      	ldrb	r2, [r7, #17]
 801588a:	4972      	ldr	r1, [pc, #456]	; (8015a54 <etharp_query+0x268>)
 801588c:	4613      	mov	r3, r2
 801588e:	005b      	lsls	r3, r3, #1
 8015890:	4413      	add	r3, r2
 8015892:	00db      	lsls	r3, r3, #3
 8015894:	440b      	add	r3, r1
 8015896:	3314      	adds	r3, #20
 8015898:	2201      	movs	r2, #1
 801589a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801589c:	7c7a      	ldrb	r2, [r7, #17]
 801589e:	496d      	ldr	r1, [pc, #436]	; (8015a54 <etharp_query+0x268>)
 80158a0:	4613      	mov	r3, r2
 80158a2:	005b      	lsls	r3, r3, #1
 80158a4:	4413      	add	r3, r2
 80158a6:	00db      	lsls	r3, r3, #3
 80158a8:	440b      	add	r3, r1
 80158aa:	3308      	adds	r3, #8
 80158ac:	68fa      	ldr	r2, [r7, #12]
 80158ae:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80158b0:	7c7a      	ldrb	r2, [r7, #17]
 80158b2:	4968      	ldr	r1, [pc, #416]	; (8015a54 <etharp_query+0x268>)
 80158b4:	4613      	mov	r3, r2
 80158b6:	005b      	lsls	r3, r3, #1
 80158b8:	4413      	add	r3, r2
 80158ba:	00db      	lsls	r3, r3, #3
 80158bc:	440b      	add	r3, r1
 80158be:	3314      	adds	r3, #20
 80158c0:	781b      	ldrb	r3, [r3, #0]
 80158c2:	2b01      	cmp	r3, #1
 80158c4:	d011      	beq.n	80158ea <etharp_query+0xfe>
 80158c6:	7c7a      	ldrb	r2, [r7, #17]
 80158c8:	4962      	ldr	r1, [pc, #392]	; (8015a54 <etharp_query+0x268>)
 80158ca:	4613      	mov	r3, r2
 80158cc:	005b      	lsls	r3, r3, #1
 80158ce:	4413      	add	r3, r2
 80158d0:	00db      	lsls	r3, r3, #3
 80158d2:	440b      	add	r3, r1
 80158d4:	3314      	adds	r3, #20
 80158d6:	781b      	ldrb	r3, [r3, #0]
 80158d8:	2b01      	cmp	r3, #1
 80158da:	d806      	bhi.n	80158ea <etharp_query+0xfe>
 80158dc:	4b5a      	ldr	r3, [pc, #360]	; (8015a48 <etharp_query+0x25c>)
 80158de:	f240 32cd 	movw	r2, #973	; 0x3cd
 80158e2:	495d      	ldr	r1, [pc, #372]	; (8015a58 <etharp_query+0x26c>)
 80158e4:	485a      	ldr	r0, [pc, #360]	; (8015a50 <etharp_query+0x264>)
 80158e6:	f005 fc0d 	bl	801b104 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80158ea:	6a3b      	ldr	r3, [r7, #32]
 80158ec:	2b00      	cmp	r3, #0
 80158ee:	d102      	bne.n	80158f6 <etharp_query+0x10a>
 80158f0:	687b      	ldr	r3, [r7, #4]
 80158f2:	2b00      	cmp	r3, #0
 80158f4:	d10c      	bne.n	8015910 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80158f6:	68b9      	ldr	r1, [r7, #8]
 80158f8:	68f8      	ldr	r0, [r7, #12]
 80158fa:	f000 f963 	bl	8015bc4 <etharp_request>
 80158fe:	4603      	mov	r3, r0
 8015900:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8015904:	687b      	ldr	r3, [r7, #4]
 8015906:	2b00      	cmp	r3, #0
 8015908:	d102      	bne.n	8015910 <etharp_query+0x124>
      return result;
 801590a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801590e:	e096      	b.n	8015a3e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	2b00      	cmp	r3, #0
 8015914:	d106      	bne.n	8015924 <etharp_query+0x138>
 8015916:	4b4c      	ldr	r3, [pc, #304]	; (8015a48 <etharp_query+0x25c>)
 8015918:	f240 32e1 	movw	r2, #993	; 0x3e1
 801591c:	494f      	ldr	r1, [pc, #316]	; (8015a5c <etharp_query+0x270>)
 801591e:	484c      	ldr	r0, [pc, #304]	; (8015a50 <etharp_query+0x264>)
 8015920:	f005 fbf0 	bl	801b104 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8015924:	7c7a      	ldrb	r2, [r7, #17]
 8015926:	494b      	ldr	r1, [pc, #300]	; (8015a54 <etharp_query+0x268>)
 8015928:	4613      	mov	r3, r2
 801592a:	005b      	lsls	r3, r3, #1
 801592c:	4413      	add	r3, r2
 801592e:	00db      	lsls	r3, r3, #3
 8015930:	440b      	add	r3, r1
 8015932:	3314      	adds	r3, #20
 8015934:	781b      	ldrb	r3, [r3, #0]
 8015936:	2b01      	cmp	r3, #1
 8015938:	d917      	bls.n	801596a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801593a:	4a49      	ldr	r2, [pc, #292]	; (8015a60 <etharp_query+0x274>)
 801593c:	7c7b      	ldrb	r3, [r7, #17]
 801593e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8015940:	7c7a      	ldrb	r2, [r7, #17]
 8015942:	4613      	mov	r3, r2
 8015944:	005b      	lsls	r3, r3, #1
 8015946:	4413      	add	r3, r2
 8015948:	00db      	lsls	r3, r3, #3
 801594a:	3308      	adds	r3, #8
 801594c:	4a41      	ldr	r2, [pc, #260]	; (8015a54 <etharp_query+0x268>)
 801594e:	4413      	add	r3, r2
 8015950:	3304      	adds	r3, #4
 8015952:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015956:	9200      	str	r2, [sp, #0]
 8015958:	697a      	ldr	r2, [r7, #20]
 801595a:	6879      	ldr	r1, [r7, #4]
 801595c:	68f8      	ldr	r0, [r7, #12]
 801595e:	f001 fc6f 	bl	8017240 <ethernet_output>
 8015962:	4603      	mov	r3, r0
 8015964:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015968:	e067      	b.n	8015a3a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801596a:	7c7a      	ldrb	r2, [r7, #17]
 801596c:	4939      	ldr	r1, [pc, #228]	; (8015a54 <etharp_query+0x268>)
 801596e:	4613      	mov	r3, r2
 8015970:	005b      	lsls	r3, r3, #1
 8015972:	4413      	add	r3, r2
 8015974:	00db      	lsls	r3, r3, #3
 8015976:	440b      	add	r3, r1
 8015978:	3314      	adds	r3, #20
 801597a:	781b      	ldrb	r3, [r3, #0]
 801597c:	2b01      	cmp	r3, #1
 801597e:	d15c      	bne.n	8015a3a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8015980:	2300      	movs	r3, #0
 8015982:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8015984:	687b      	ldr	r3, [r7, #4]
 8015986:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015988:	e01c      	b.n	80159c4 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801598a:	69fb      	ldr	r3, [r7, #28]
 801598c:	895a      	ldrh	r2, [r3, #10]
 801598e:	69fb      	ldr	r3, [r7, #28]
 8015990:	891b      	ldrh	r3, [r3, #8]
 8015992:	429a      	cmp	r2, r3
 8015994:	d10a      	bne.n	80159ac <etharp_query+0x1c0>
 8015996:	69fb      	ldr	r3, [r7, #28]
 8015998:	681b      	ldr	r3, [r3, #0]
 801599a:	2b00      	cmp	r3, #0
 801599c:	d006      	beq.n	80159ac <etharp_query+0x1c0>
 801599e:	4b2a      	ldr	r3, [pc, #168]	; (8015a48 <etharp_query+0x25c>)
 80159a0:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80159a4:	492f      	ldr	r1, [pc, #188]	; (8015a64 <etharp_query+0x278>)
 80159a6:	482a      	ldr	r0, [pc, #168]	; (8015a50 <etharp_query+0x264>)
 80159a8:	f005 fbac 	bl	801b104 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80159ac:	69fb      	ldr	r3, [r7, #28]
 80159ae:	7b1b      	ldrb	r3, [r3, #12]
 80159b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80159b4:	2b00      	cmp	r3, #0
 80159b6:	d002      	beq.n	80159be <etharp_query+0x1d2>
        copy_needed = 1;
 80159b8:	2301      	movs	r3, #1
 80159ba:	61bb      	str	r3, [r7, #24]
        break;
 80159bc:	e005      	b.n	80159ca <etharp_query+0x1de>
      }
      p = p->next;
 80159be:	69fb      	ldr	r3, [r7, #28]
 80159c0:	681b      	ldr	r3, [r3, #0]
 80159c2:	61fb      	str	r3, [r7, #28]
    while (p) {
 80159c4:	69fb      	ldr	r3, [r7, #28]
 80159c6:	2b00      	cmp	r3, #0
 80159c8:	d1df      	bne.n	801598a <etharp_query+0x19e>
    }
    if (copy_needed) {
 80159ca:	69bb      	ldr	r3, [r7, #24]
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	d007      	beq.n	80159e0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80159d0:	687a      	ldr	r2, [r7, #4]
 80159d2:	f44f 7120 	mov.w	r1, #640	; 0x280
 80159d6:	200e      	movs	r0, #14
 80159d8:	f7f8 fc68 	bl	800e2ac <pbuf_clone>
 80159dc:	61f8      	str	r0, [r7, #28]
 80159de:	e004      	b.n	80159ea <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80159e4:	69f8      	ldr	r0, [r7, #28]
 80159e6:	f7f8 fa9f 	bl	800df28 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80159ea:	69fb      	ldr	r3, [r7, #28]
 80159ec:	2b00      	cmp	r3, #0
 80159ee:	d021      	beq.n	8015a34 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80159f0:	7c7a      	ldrb	r2, [r7, #17]
 80159f2:	4918      	ldr	r1, [pc, #96]	; (8015a54 <etharp_query+0x268>)
 80159f4:	4613      	mov	r3, r2
 80159f6:	005b      	lsls	r3, r3, #1
 80159f8:	4413      	add	r3, r2
 80159fa:	00db      	lsls	r3, r3, #3
 80159fc:	440b      	add	r3, r1
 80159fe:	681b      	ldr	r3, [r3, #0]
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	d00a      	beq.n	8015a1a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8015a04:	7c7a      	ldrb	r2, [r7, #17]
 8015a06:	4913      	ldr	r1, [pc, #76]	; (8015a54 <etharp_query+0x268>)
 8015a08:	4613      	mov	r3, r2
 8015a0a:	005b      	lsls	r3, r3, #1
 8015a0c:	4413      	add	r3, r2
 8015a0e:	00db      	lsls	r3, r3, #3
 8015a10:	440b      	add	r3, r1
 8015a12:	681b      	ldr	r3, [r3, #0]
 8015a14:	4618      	mov	r0, r3
 8015a16:	f7f8 f9e1 	bl	800dddc <pbuf_free>
      }
      arp_table[i].q = p;
 8015a1a:	7c7a      	ldrb	r2, [r7, #17]
 8015a1c:	490d      	ldr	r1, [pc, #52]	; (8015a54 <etharp_query+0x268>)
 8015a1e:	4613      	mov	r3, r2
 8015a20:	005b      	lsls	r3, r3, #1
 8015a22:	4413      	add	r3, r2
 8015a24:	00db      	lsls	r3, r3, #3
 8015a26:	440b      	add	r3, r1
 8015a28:	69fa      	ldr	r2, [r7, #28]
 8015a2a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8015a2c:	2300      	movs	r3, #0
 8015a2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015a32:	e002      	b.n	8015a3a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8015a34:	23ff      	movs	r3, #255	; 0xff
 8015a36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8015a3a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8015a3e:	4618      	mov	r0, r3
 8015a40:	3728      	adds	r7, #40	; 0x28
 8015a42:	46bd      	mov	sp, r7
 8015a44:	bd80      	pop	{r7, pc}
 8015a46:	bf00      	nop
 8015a48:	0801e7d8 	.word	0x0801e7d8
 8015a4c:	0801e984 	.word	0x0801e984
 8015a50:	0801e850 	.word	0x0801e850
 8015a54:	20004c04 	.word	0x20004c04
 8015a58:	0801e994 	.word	0x0801e994
 8015a5c:	0801e978 	.word	0x0801e978
 8015a60:	20004cf4 	.word	0x20004cf4
 8015a64:	0801e9bc 	.word	0x0801e9bc

08015a68 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8015a68:	b580      	push	{r7, lr}
 8015a6a:	b08a      	sub	sp, #40	; 0x28
 8015a6c:	af02      	add	r7, sp, #8
 8015a6e:	60f8      	str	r0, [r7, #12]
 8015a70:	60b9      	str	r1, [r7, #8]
 8015a72:	607a      	str	r2, [r7, #4]
 8015a74:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8015a76:	2300      	movs	r3, #0
 8015a78:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015a7a:	68fb      	ldr	r3, [r7, #12]
 8015a7c:	2b00      	cmp	r3, #0
 8015a7e:	d106      	bne.n	8015a8e <etharp_raw+0x26>
 8015a80:	4b3a      	ldr	r3, [pc, #232]	; (8015b6c <etharp_raw+0x104>)
 8015a82:	f240 4257 	movw	r2, #1111	; 0x457
 8015a86:	493a      	ldr	r1, [pc, #232]	; (8015b70 <etharp_raw+0x108>)
 8015a88:	483a      	ldr	r0, [pc, #232]	; (8015b74 <etharp_raw+0x10c>)
 8015a8a:	f005 fb3b 	bl	801b104 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8015a8e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015a92:	211c      	movs	r1, #28
 8015a94:	200e      	movs	r0, #14
 8015a96:	f7f7 febd 	bl	800d814 <pbuf_alloc>
 8015a9a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8015a9c:	69bb      	ldr	r3, [r7, #24]
 8015a9e:	2b00      	cmp	r3, #0
 8015aa0:	d102      	bne.n	8015aa8 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8015aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8015aa6:	e05d      	b.n	8015b64 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8015aa8:	69bb      	ldr	r3, [r7, #24]
 8015aaa:	895b      	ldrh	r3, [r3, #10]
 8015aac:	2b1b      	cmp	r3, #27
 8015aae:	d806      	bhi.n	8015abe <etharp_raw+0x56>
 8015ab0:	4b2e      	ldr	r3, [pc, #184]	; (8015b6c <etharp_raw+0x104>)
 8015ab2:	f240 4262 	movw	r2, #1122	; 0x462
 8015ab6:	4930      	ldr	r1, [pc, #192]	; (8015b78 <etharp_raw+0x110>)
 8015ab8:	482e      	ldr	r0, [pc, #184]	; (8015b74 <etharp_raw+0x10c>)
 8015aba:	f005 fb23 	bl	801b104 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8015abe:	69bb      	ldr	r3, [r7, #24]
 8015ac0:	685b      	ldr	r3, [r3, #4]
 8015ac2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8015ac4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015ac6:	4618      	mov	r0, r3
 8015ac8:	f7f6 fddc 	bl	800c684 <lwip_htons>
 8015acc:	4603      	mov	r3, r0
 8015ace:	461a      	mov	r2, r3
 8015ad0:	697b      	ldr	r3, [r7, #20]
 8015ad2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8015ad4:	68fb      	ldr	r3, [r7, #12]
 8015ad6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015ada:	2b06      	cmp	r3, #6
 8015adc:	d006      	beq.n	8015aec <etharp_raw+0x84>
 8015ade:	4b23      	ldr	r3, [pc, #140]	; (8015b6c <etharp_raw+0x104>)
 8015ae0:	f240 4269 	movw	r2, #1129	; 0x469
 8015ae4:	4925      	ldr	r1, [pc, #148]	; (8015b7c <etharp_raw+0x114>)
 8015ae6:	4823      	ldr	r0, [pc, #140]	; (8015b74 <etharp_raw+0x10c>)
 8015ae8:	f005 fb0c 	bl	801b104 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8015aec:	697b      	ldr	r3, [r7, #20]
 8015aee:	3308      	adds	r3, #8
 8015af0:	2206      	movs	r2, #6
 8015af2:	6839      	ldr	r1, [r7, #0]
 8015af4:	4618      	mov	r0, r3
 8015af6:	f004 ffa6 	bl	801aa46 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8015afa:	697b      	ldr	r3, [r7, #20]
 8015afc:	3312      	adds	r3, #18
 8015afe:	2206      	movs	r2, #6
 8015b00:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015b02:	4618      	mov	r0, r3
 8015b04:	f004 ff9f 	bl	801aa46 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8015b08:	697b      	ldr	r3, [r7, #20]
 8015b0a:	330e      	adds	r3, #14
 8015b0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015b0e:	6812      	ldr	r2, [r2, #0]
 8015b10:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8015b12:	697b      	ldr	r3, [r7, #20]
 8015b14:	3318      	adds	r3, #24
 8015b16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015b18:	6812      	ldr	r2, [r2, #0]
 8015b1a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8015b1c:	697b      	ldr	r3, [r7, #20]
 8015b1e:	2200      	movs	r2, #0
 8015b20:	701a      	strb	r2, [r3, #0]
 8015b22:	2200      	movs	r2, #0
 8015b24:	f042 0201 	orr.w	r2, r2, #1
 8015b28:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8015b2a:	697b      	ldr	r3, [r7, #20]
 8015b2c:	2200      	movs	r2, #0
 8015b2e:	f042 0208 	orr.w	r2, r2, #8
 8015b32:	709a      	strb	r2, [r3, #2]
 8015b34:	2200      	movs	r2, #0
 8015b36:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8015b38:	697b      	ldr	r3, [r7, #20]
 8015b3a:	2206      	movs	r2, #6
 8015b3c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8015b3e:	697b      	ldr	r3, [r7, #20]
 8015b40:	2204      	movs	r2, #4
 8015b42:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8015b44:	f640 0306 	movw	r3, #2054	; 0x806
 8015b48:	9300      	str	r3, [sp, #0]
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	68ba      	ldr	r2, [r7, #8]
 8015b4e:	69b9      	ldr	r1, [r7, #24]
 8015b50:	68f8      	ldr	r0, [r7, #12]
 8015b52:	f001 fb75 	bl	8017240 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8015b56:	69b8      	ldr	r0, [r7, #24]
 8015b58:	f7f8 f940 	bl	800dddc <pbuf_free>
  p = NULL;
 8015b5c:	2300      	movs	r3, #0
 8015b5e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8015b60:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015b64:	4618      	mov	r0, r3
 8015b66:	3720      	adds	r7, #32
 8015b68:	46bd      	mov	sp, r7
 8015b6a:	bd80      	pop	{r7, pc}
 8015b6c:	0801e7d8 	.word	0x0801e7d8
 8015b70:	0801e928 	.word	0x0801e928
 8015b74:	0801e850 	.word	0x0801e850
 8015b78:	0801e9d8 	.word	0x0801e9d8
 8015b7c:	0801ea0c 	.word	0x0801ea0c

08015b80 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8015b80:	b580      	push	{r7, lr}
 8015b82:	b088      	sub	sp, #32
 8015b84:	af04      	add	r7, sp, #16
 8015b86:	60f8      	str	r0, [r7, #12]
 8015b88:	60b9      	str	r1, [r7, #8]
 8015b8a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015b8c:	68fb      	ldr	r3, [r7, #12]
 8015b8e:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8015b92:	68fb      	ldr	r3, [r7, #12]
 8015b94:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8015b98:	68fb      	ldr	r3, [r7, #12]
 8015b9a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015b9c:	2201      	movs	r2, #1
 8015b9e:	9203      	str	r2, [sp, #12]
 8015ba0:	68ba      	ldr	r2, [r7, #8]
 8015ba2:	9202      	str	r2, [sp, #8]
 8015ba4:	4a06      	ldr	r2, [pc, #24]	; (8015bc0 <etharp_request_dst+0x40>)
 8015ba6:	9201      	str	r2, [sp, #4]
 8015ba8:	9300      	str	r3, [sp, #0]
 8015baa:	4603      	mov	r3, r0
 8015bac:	687a      	ldr	r2, [r7, #4]
 8015bae:	68f8      	ldr	r0, [r7, #12]
 8015bb0:	f7ff ff5a 	bl	8015a68 <etharp_raw>
 8015bb4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8015bb6:	4618      	mov	r0, r3
 8015bb8:	3710      	adds	r7, #16
 8015bba:	46bd      	mov	sp, r7
 8015bbc:	bd80      	pop	{r7, pc}
 8015bbe:	bf00      	nop
 8015bc0:	0801f160 	.word	0x0801f160

08015bc4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8015bc4:	b580      	push	{r7, lr}
 8015bc6:	b082      	sub	sp, #8
 8015bc8:	af00      	add	r7, sp, #0
 8015bca:	6078      	str	r0, [r7, #4]
 8015bcc:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8015bce:	4a05      	ldr	r2, [pc, #20]	; (8015be4 <etharp_request+0x20>)
 8015bd0:	6839      	ldr	r1, [r7, #0]
 8015bd2:	6878      	ldr	r0, [r7, #4]
 8015bd4:	f7ff ffd4 	bl	8015b80 <etharp_request_dst>
 8015bd8:	4603      	mov	r3, r0
}
 8015bda:	4618      	mov	r0, r3
 8015bdc:	3708      	adds	r7, #8
 8015bde:	46bd      	mov	sp, r7
 8015be0:	bd80      	pop	{r7, pc}
 8015be2:	bf00      	nop
 8015be4:	0801f158 	.word	0x0801f158

08015be8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8015be8:	b580      	push	{r7, lr}
 8015bea:	b08e      	sub	sp, #56	; 0x38
 8015bec:	af04      	add	r7, sp, #16
 8015bee:	6078      	str	r0, [r7, #4]
 8015bf0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8015bf2:	4b79      	ldr	r3, [pc, #484]	; (8015dd8 <icmp_input+0x1f0>)
 8015bf4:	689b      	ldr	r3, [r3, #8]
 8015bf6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8015bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bfa:	781b      	ldrb	r3, [r3, #0]
 8015bfc:	f003 030f 	and.w	r3, r3, #15
 8015c00:	b2db      	uxtb	r3, r3
 8015c02:	009b      	lsls	r3, r3, #2
 8015c04:	b2db      	uxtb	r3, r3
 8015c06:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8015c08:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015c0a:	2b13      	cmp	r3, #19
 8015c0c:	f240 80cd 	bls.w	8015daa <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8015c10:	687b      	ldr	r3, [r7, #4]
 8015c12:	895b      	ldrh	r3, [r3, #10]
 8015c14:	2b03      	cmp	r3, #3
 8015c16:	f240 80ca 	bls.w	8015dae <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8015c1a:	687b      	ldr	r3, [r7, #4]
 8015c1c:	685b      	ldr	r3, [r3, #4]
 8015c1e:	781b      	ldrb	r3, [r3, #0]
 8015c20:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8015c24:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8015c28:	2b00      	cmp	r3, #0
 8015c2a:	f000 80b7 	beq.w	8015d9c <icmp_input+0x1b4>
 8015c2e:	2b08      	cmp	r3, #8
 8015c30:	f040 80b7 	bne.w	8015da2 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8015c34:	4b69      	ldr	r3, [pc, #420]	; (8015ddc <icmp_input+0x1f4>)
 8015c36:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015c38:	4b67      	ldr	r3, [pc, #412]	; (8015dd8 <icmp_input+0x1f0>)
 8015c3a:	695b      	ldr	r3, [r3, #20]
 8015c3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015c40:	2be0      	cmp	r3, #224	; 0xe0
 8015c42:	f000 80bb 	beq.w	8015dbc <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8015c46:	4b64      	ldr	r3, [pc, #400]	; (8015dd8 <icmp_input+0x1f0>)
 8015c48:	695b      	ldr	r3, [r3, #20]
 8015c4a:	4a63      	ldr	r2, [pc, #396]	; (8015dd8 <icmp_input+0x1f0>)
 8015c4c:	6812      	ldr	r2, [r2, #0]
 8015c4e:	4611      	mov	r1, r2
 8015c50:	4618      	mov	r0, r3
 8015c52:	f000 fbed 	bl	8016430 <ip4_addr_isbroadcast_u32>
 8015c56:	4603      	mov	r3, r0
 8015c58:	2b00      	cmp	r3, #0
 8015c5a:	f040 80b1 	bne.w	8015dc0 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	891b      	ldrh	r3, [r3, #8]
 8015c62:	2b07      	cmp	r3, #7
 8015c64:	f240 80a5 	bls.w	8015db2 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015c68:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015c6a:	330e      	adds	r3, #14
 8015c6c:	4619      	mov	r1, r3
 8015c6e:	6878      	ldr	r0, [r7, #4]
 8015c70:	f7f8 f81e 	bl	800dcb0 <pbuf_add_header>
 8015c74:	4603      	mov	r3, r0
 8015c76:	2b00      	cmp	r3, #0
 8015c78:	d04b      	beq.n	8015d12 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	891a      	ldrh	r2, [r3, #8]
 8015c7e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015c80:	4413      	add	r3, r2
 8015c82:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8015c84:	687b      	ldr	r3, [r7, #4]
 8015c86:	891b      	ldrh	r3, [r3, #8]
 8015c88:	8b7a      	ldrh	r2, [r7, #26]
 8015c8a:	429a      	cmp	r2, r3
 8015c8c:	f0c0 809a 	bcc.w	8015dc4 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8015c90:	8b7b      	ldrh	r3, [r7, #26]
 8015c92:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015c96:	4619      	mov	r1, r3
 8015c98:	200e      	movs	r0, #14
 8015c9a:	f7f7 fdbb 	bl	800d814 <pbuf_alloc>
 8015c9e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8015ca0:	697b      	ldr	r3, [r7, #20]
 8015ca2:	2b00      	cmp	r3, #0
 8015ca4:	f000 8090 	beq.w	8015dc8 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8015ca8:	697b      	ldr	r3, [r7, #20]
 8015caa:	895b      	ldrh	r3, [r3, #10]
 8015cac:	461a      	mov	r2, r3
 8015cae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015cb0:	3308      	adds	r3, #8
 8015cb2:	429a      	cmp	r2, r3
 8015cb4:	d203      	bcs.n	8015cbe <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8015cb6:	6978      	ldr	r0, [r7, #20]
 8015cb8:	f7f8 f890 	bl	800dddc <pbuf_free>
          goto icmperr;
 8015cbc:	e085      	b.n	8015dca <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8015cbe:	697b      	ldr	r3, [r7, #20]
 8015cc0:	685b      	ldr	r3, [r3, #4]
 8015cc2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8015cc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015cc6:	4618      	mov	r0, r3
 8015cc8:	f004 febd 	bl	801aa46 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8015ccc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015cce:	4619      	mov	r1, r3
 8015cd0:	6978      	ldr	r0, [r7, #20]
 8015cd2:	f7f7 fffd 	bl	800dcd0 <pbuf_remove_header>
 8015cd6:	4603      	mov	r3, r0
 8015cd8:	2b00      	cmp	r3, #0
 8015cda:	d009      	beq.n	8015cf0 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8015cdc:	4b40      	ldr	r3, [pc, #256]	; (8015de0 <icmp_input+0x1f8>)
 8015cde:	22b6      	movs	r2, #182	; 0xb6
 8015ce0:	4940      	ldr	r1, [pc, #256]	; (8015de4 <icmp_input+0x1fc>)
 8015ce2:	4841      	ldr	r0, [pc, #260]	; (8015de8 <icmp_input+0x200>)
 8015ce4:	f005 fa0e 	bl	801b104 <iprintf>
          pbuf_free(r);
 8015ce8:	6978      	ldr	r0, [r7, #20]
 8015cea:	f7f8 f877 	bl	800dddc <pbuf_free>
          goto icmperr;
 8015cee:	e06c      	b.n	8015dca <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8015cf0:	6879      	ldr	r1, [r7, #4]
 8015cf2:	6978      	ldr	r0, [r7, #20]
 8015cf4:	f7f8 f996 	bl	800e024 <pbuf_copy>
 8015cf8:	4603      	mov	r3, r0
 8015cfa:	2b00      	cmp	r3, #0
 8015cfc:	d003      	beq.n	8015d06 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8015cfe:	6978      	ldr	r0, [r7, #20]
 8015d00:	f7f8 f86c 	bl	800dddc <pbuf_free>
          goto icmperr;
 8015d04:	e061      	b.n	8015dca <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8015d06:	6878      	ldr	r0, [r7, #4]
 8015d08:	f7f8 f868 	bl	800dddc <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8015d0c:	697b      	ldr	r3, [r7, #20]
 8015d0e:	607b      	str	r3, [r7, #4]
 8015d10:	e00f      	b.n	8015d32 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015d12:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015d14:	330e      	adds	r3, #14
 8015d16:	4619      	mov	r1, r3
 8015d18:	6878      	ldr	r0, [r7, #4]
 8015d1a:	f7f7 ffd9 	bl	800dcd0 <pbuf_remove_header>
 8015d1e:	4603      	mov	r3, r0
 8015d20:	2b00      	cmp	r3, #0
 8015d22:	d006      	beq.n	8015d32 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8015d24:	4b2e      	ldr	r3, [pc, #184]	; (8015de0 <icmp_input+0x1f8>)
 8015d26:	22c7      	movs	r2, #199	; 0xc7
 8015d28:	4930      	ldr	r1, [pc, #192]	; (8015dec <icmp_input+0x204>)
 8015d2a:	482f      	ldr	r0, [pc, #188]	; (8015de8 <icmp_input+0x200>)
 8015d2c:	f005 f9ea 	bl	801b104 <iprintf>
          goto icmperr;
 8015d30:	e04b      	b.n	8015dca <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	685b      	ldr	r3, [r3, #4]
 8015d36:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8015d38:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015d3a:	4619      	mov	r1, r3
 8015d3c:	6878      	ldr	r0, [r7, #4]
 8015d3e:	f7f7 ffb7 	bl	800dcb0 <pbuf_add_header>
 8015d42:	4603      	mov	r3, r0
 8015d44:	2b00      	cmp	r3, #0
 8015d46:	d12b      	bne.n	8015da0 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8015d48:	687b      	ldr	r3, [r7, #4]
 8015d4a:	685b      	ldr	r3, [r3, #4]
 8015d4c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8015d4e:	69fb      	ldr	r3, [r7, #28]
 8015d50:	681a      	ldr	r2, [r3, #0]
 8015d52:	68fb      	ldr	r3, [r7, #12]
 8015d54:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8015d56:	4b20      	ldr	r3, [pc, #128]	; (8015dd8 <icmp_input+0x1f0>)
 8015d58:	691a      	ldr	r2, [r3, #16]
 8015d5a:	68fb      	ldr	r3, [r7, #12]
 8015d5c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8015d5e:	693b      	ldr	r3, [r7, #16]
 8015d60:	2200      	movs	r2, #0
 8015d62:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8015d64:	693b      	ldr	r3, [r7, #16]
 8015d66:	2200      	movs	r2, #0
 8015d68:	709a      	strb	r2, [r3, #2]
 8015d6a:	2200      	movs	r2, #0
 8015d6c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8015d6e:	68fb      	ldr	r3, [r7, #12]
 8015d70:	22ff      	movs	r2, #255	; 0xff
 8015d72:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8015d74:	68fb      	ldr	r3, [r7, #12]
 8015d76:	2200      	movs	r2, #0
 8015d78:	729a      	strb	r2, [r3, #10]
 8015d7a:	2200      	movs	r2, #0
 8015d7c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8015d7e:	683b      	ldr	r3, [r7, #0]
 8015d80:	9302      	str	r3, [sp, #8]
 8015d82:	2301      	movs	r3, #1
 8015d84:	9301      	str	r3, [sp, #4]
 8015d86:	2300      	movs	r3, #0
 8015d88:	9300      	str	r3, [sp, #0]
 8015d8a:	23ff      	movs	r3, #255	; 0xff
 8015d8c:	2200      	movs	r2, #0
 8015d8e:	69f9      	ldr	r1, [r7, #28]
 8015d90:	6878      	ldr	r0, [r7, #4]
 8015d92:	f000 fa75 	bl	8016280 <ip4_output_if>
 8015d96:	4603      	mov	r3, r0
 8015d98:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8015d9a:	e001      	b.n	8015da0 <icmp_input+0x1b8>
      break;
 8015d9c:	bf00      	nop
 8015d9e:	e000      	b.n	8015da2 <icmp_input+0x1ba>
      break;
 8015da0:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8015da2:	6878      	ldr	r0, [r7, #4]
 8015da4:	f7f8 f81a 	bl	800dddc <pbuf_free>
  return;
 8015da8:	e013      	b.n	8015dd2 <icmp_input+0x1ea>
    goto lenerr;
 8015daa:	bf00      	nop
 8015dac:	e002      	b.n	8015db4 <icmp_input+0x1cc>
    goto lenerr;
 8015dae:	bf00      	nop
 8015db0:	e000      	b.n	8015db4 <icmp_input+0x1cc>
        goto lenerr;
 8015db2:	bf00      	nop
lenerr:
  pbuf_free(p);
 8015db4:	6878      	ldr	r0, [r7, #4]
 8015db6:	f7f8 f811 	bl	800dddc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015dba:	e00a      	b.n	8015dd2 <icmp_input+0x1ea>
        goto icmperr;
 8015dbc:	bf00      	nop
 8015dbe:	e004      	b.n	8015dca <icmp_input+0x1e2>
        goto icmperr;
 8015dc0:	bf00      	nop
 8015dc2:	e002      	b.n	8015dca <icmp_input+0x1e2>
          goto icmperr;
 8015dc4:	bf00      	nop
 8015dc6:	e000      	b.n	8015dca <icmp_input+0x1e2>
          goto icmperr;
 8015dc8:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8015dca:	6878      	ldr	r0, [r7, #4]
 8015dcc:	f7f8 f806 	bl	800dddc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015dd0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8015dd2:	3728      	adds	r7, #40	; 0x28
 8015dd4:	46bd      	mov	sp, r7
 8015dd6:	bd80      	pop	{r7, pc}
 8015dd8:	20008238 	.word	0x20008238
 8015ddc:	2000824c 	.word	0x2000824c
 8015de0:	0801ea50 	.word	0x0801ea50
 8015de4:	0801ea88 	.word	0x0801ea88
 8015de8:	0801eac0 	.word	0x0801eac0
 8015dec:	0801eae8 	.word	0x0801eae8

08015df0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8015df0:	b580      	push	{r7, lr}
 8015df2:	b082      	sub	sp, #8
 8015df4:	af00      	add	r7, sp, #0
 8015df6:	6078      	str	r0, [r7, #4]
 8015df8:	460b      	mov	r3, r1
 8015dfa:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8015dfc:	78fb      	ldrb	r3, [r7, #3]
 8015dfe:	461a      	mov	r2, r3
 8015e00:	2103      	movs	r1, #3
 8015e02:	6878      	ldr	r0, [r7, #4]
 8015e04:	f000 f814 	bl	8015e30 <icmp_send_response>
}
 8015e08:	bf00      	nop
 8015e0a:	3708      	adds	r7, #8
 8015e0c:	46bd      	mov	sp, r7
 8015e0e:	bd80      	pop	{r7, pc}

08015e10 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8015e10:	b580      	push	{r7, lr}
 8015e12:	b082      	sub	sp, #8
 8015e14:	af00      	add	r7, sp, #0
 8015e16:	6078      	str	r0, [r7, #4]
 8015e18:	460b      	mov	r3, r1
 8015e1a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8015e1c:	78fb      	ldrb	r3, [r7, #3]
 8015e1e:	461a      	mov	r2, r3
 8015e20:	210b      	movs	r1, #11
 8015e22:	6878      	ldr	r0, [r7, #4]
 8015e24:	f000 f804 	bl	8015e30 <icmp_send_response>
}
 8015e28:	bf00      	nop
 8015e2a:	3708      	adds	r7, #8
 8015e2c:	46bd      	mov	sp, r7
 8015e2e:	bd80      	pop	{r7, pc}

08015e30 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8015e30:	b580      	push	{r7, lr}
 8015e32:	b08c      	sub	sp, #48	; 0x30
 8015e34:	af04      	add	r7, sp, #16
 8015e36:	6078      	str	r0, [r7, #4]
 8015e38:	460b      	mov	r3, r1
 8015e3a:	70fb      	strb	r3, [r7, #3]
 8015e3c:	4613      	mov	r3, r2
 8015e3e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8015e40:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015e44:	2124      	movs	r1, #36	; 0x24
 8015e46:	2022      	movs	r0, #34	; 0x22
 8015e48:	f7f7 fce4 	bl	800d814 <pbuf_alloc>
 8015e4c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8015e4e:	69fb      	ldr	r3, [r7, #28]
 8015e50:	2b00      	cmp	r3, #0
 8015e52:	d04c      	beq.n	8015eee <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8015e54:	69fb      	ldr	r3, [r7, #28]
 8015e56:	895b      	ldrh	r3, [r3, #10]
 8015e58:	2b23      	cmp	r3, #35	; 0x23
 8015e5a:	d806      	bhi.n	8015e6a <icmp_send_response+0x3a>
 8015e5c:	4b26      	ldr	r3, [pc, #152]	; (8015ef8 <icmp_send_response+0xc8>)
 8015e5e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8015e62:	4926      	ldr	r1, [pc, #152]	; (8015efc <icmp_send_response+0xcc>)
 8015e64:	4826      	ldr	r0, [pc, #152]	; (8015f00 <icmp_send_response+0xd0>)
 8015e66:	f005 f94d 	bl	801b104 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	685b      	ldr	r3, [r3, #4]
 8015e6e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8015e70:	69fb      	ldr	r3, [r7, #28]
 8015e72:	685b      	ldr	r3, [r3, #4]
 8015e74:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8015e76:	697b      	ldr	r3, [r7, #20]
 8015e78:	78fa      	ldrb	r2, [r7, #3]
 8015e7a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8015e7c:	697b      	ldr	r3, [r7, #20]
 8015e7e:	78ba      	ldrb	r2, [r7, #2]
 8015e80:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8015e82:	697b      	ldr	r3, [r7, #20]
 8015e84:	2200      	movs	r2, #0
 8015e86:	711a      	strb	r2, [r3, #4]
 8015e88:	2200      	movs	r2, #0
 8015e8a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8015e8c:	697b      	ldr	r3, [r7, #20]
 8015e8e:	2200      	movs	r2, #0
 8015e90:	719a      	strb	r2, [r3, #6]
 8015e92:	2200      	movs	r2, #0
 8015e94:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8015e96:	69fb      	ldr	r3, [r7, #28]
 8015e98:	685b      	ldr	r3, [r3, #4]
 8015e9a:	f103 0008 	add.w	r0, r3, #8
 8015e9e:	687b      	ldr	r3, [r7, #4]
 8015ea0:	685b      	ldr	r3, [r3, #4]
 8015ea2:	221c      	movs	r2, #28
 8015ea4:	4619      	mov	r1, r3
 8015ea6:	f004 fdce 	bl	801aa46 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8015eaa:	69bb      	ldr	r3, [r7, #24]
 8015eac:	68db      	ldr	r3, [r3, #12]
 8015eae:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8015eb0:	f107 030c 	add.w	r3, r7, #12
 8015eb4:	4618      	mov	r0, r3
 8015eb6:	f000 f825 	bl	8015f04 <ip4_route>
 8015eba:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8015ebc:	693b      	ldr	r3, [r7, #16]
 8015ebe:	2b00      	cmp	r3, #0
 8015ec0:	d011      	beq.n	8015ee6 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8015ec2:	697b      	ldr	r3, [r7, #20]
 8015ec4:	2200      	movs	r2, #0
 8015ec6:	709a      	strb	r2, [r3, #2]
 8015ec8:	2200      	movs	r2, #0
 8015eca:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8015ecc:	f107 020c 	add.w	r2, r7, #12
 8015ed0:	693b      	ldr	r3, [r7, #16]
 8015ed2:	9302      	str	r3, [sp, #8]
 8015ed4:	2301      	movs	r3, #1
 8015ed6:	9301      	str	r3, [sp, #4]
 8015ed8:	2300      	movs	r3, #0
 8015eda:	9300      	str	r3, [sp, #0]
 8015edc:	23ff      	movs	r3, #255	; 0xff
 8015ede:	2100      	movs	r1, #0
 8015ee0:	69f8      	ldr	r0, [r7, #28]
 8015ee2:	f000 f9cd 	bl	8016280 <ip4_output_if>
  }
  pbuf_free(q);
 8015ee6:	69f8      	ldr	r0, [r7, #28]
 8015ee8:	f7f7 ff78 	bl	800dddc <pbuf_free>
 8015eec:	e000      	b.n	8015ef0 <icmp_send_response+0xc0>
    return;
 8015eee:	bf00      	nop
}
 8015ef0:	3720      	adds	r7, #32
 8015ef2:	46bd      	mov	sp, r7
 8015ef4:	bd80      	pop	{r7, pc}
 8015ef6:	bf00      	nop
 8015ef8:	0801ea50 	.word	0x0801ea50
 8015efc:	0801eb1c 	.word	0x0801eb1c
 8015f00:	0801eac0 	.word	0x0801eac0

08015f04 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8015f04:	b480      	push	{r7}
 8015f06:	b085      	sub	sp, #20
 8015f08:	af00      	add	r7, sp, #0
 8015f0a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8015f0c:	4b33      	ldr	r3, [pc, #204]	; (8015fdc <ip4_route+0xd8>)
 8015f0e:	681b      	ldr	r3, [r3, #0]
 8015f10:	60fb      	str	r3, [r7, #12]
 8015f12:	e036      	b.n	8015f82 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015f14:	68fb      	ldr	r3, [r7, #12]
 8015f16:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015f1a:	f003 0301 	and.w	r3, r3, #1
 8015f1e:	b2db      	uxtb	r3, r3
 8015f20:	2b00      	cmp	r3, #0
 8015f22:	d02b      	beq.n	8015f7c <ip4_route+0x78>
 8015f24:	68fb      	ldr	r3, [r7, #12]
 8015f26:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015f2a:	089b      	lsrs	r3, r3, #2
 8015f2c:	f003 0301 	and.w	r3, r3, #1
 8015f30:	b2db      	uxtb	r3, r3
 8015f32:	2b00      	cmp	r3, #0
 8015f34:	d022      	beq.n	8015f7c <ip4_route+0x78>
 8015f36:	68fb      	ldr	r3, [r7, #12]
 8015f38:	3304      	adds	r3, #4
 8015f3a:	681b      	ldr	r3, [r3, #0]
 8015f3c:	2b00      	cmp	r3, #0
 8015f3e:	d01d      	beq.n	8015f7c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	681a      	ldr	r2, [r3, #0]
 8015f44:	68fb      	ldr	r3, [r7, #12]
 8015f46:	3304      	adds	r3, #4
 8015f48:	681b      	ldr	r3, [r3, #0]
 8015f4a:	405a      	eors	r2, r3
 8015f4c:	68fb      	ldr	r3, [r7, #12]
 8015f4e:	3308      	adds	r3, #8
 8015f50:	681b      	ldr	r3, [r3, #0]
 8015f52:	4013      	ands	r3, r2
 8015f54:	2b00      	cmp	r3, #0
 8015f56:	d101      	bne.n	8015f5c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8015f58:	68fb      	ldr	r3, [r7, #12]
 8015f5a:	e038      	b.n	8015fce <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8015f5c:	68fb      	ldr	r3, [r7, #12]
 8015f5e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015f62:	f003 0302 	and.w	r3, r3, #2
 8015f66:	2b00      	cmp	r3, #0
 8015f68:	d108      	bne.n	8015f7c <ip4_route+0x78>
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	681a      	ldr	r2, [r3, #0]
 8015f6e:	68fb      	ldr	r3, [r7, #12]
 8015f70:	330c      	adds	r3, #12
 8015f72:	681b      	ldr	r3, [r3, #0]
 8015f74:	429a      	cmp	r2, r3
 8015f76:	d101      	bne.n	8015f7c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8015f78:	68fb      	ldr	r3, [r7, #12]
 8015f7a:	e028      	b.n	8015fce <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8015f7c:	68fb      	ldr	r3, [r7, #12]
 8015f7e:	681b      	ldr	r3, [r3, #0]
 8015f80:	60fb      	str	r3, [r7, #12]
 8015f82:	68fb      	ldr	r3, [r7, #12]
 8015f84:	2b00      	cmp	r3, #0
 8015f86:	d1c5      	bne.n	8015f14 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015f88:	4b15      	ldr	r3, [pc, #84]	; (8015fe0 <ip4_route+0xdc>)
 8015f8a:	681b      	ldr	r3, [r3, #0]
 8015f8c:	2b00      	cmp	r3, #0
 8015f8e:	d01a      	beq.n	8015fc6 <ip4_route+0xc2>
 8015f90:	4b13      	ldr	r3, [pc, #76]	; (8015fe0 <ip4_route+0xdc>)
 8015f92:	681b      	ldr	r3, [r3, #0]
 8015f94:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015f98:	f003 0301 	and.w	r3, r3, #1
 8015f9c:	2b00      	cmp	r3, #0
 8015f9e:	d012      	beq.n	8015fc6 <ip4_route+0xc2>
 8015fa0:	4b0f      	ldr	r3, [pc, #60]	; (8015fe0 <ip4_route+0xdc>)
 8015fa2:	681b      	ldr	r3, [r3, #0]
 8015fa4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015fa8:	f003 0304 	and.w	r3, r3, #4
 8015fac:	2b00      	cmp	r3, #0
 8015fae:	d00a      	beq.n	8015fc6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015fb0:	4b0b      	ldr	r3, [pc, #44]	; (8015fe0 <ip4_route+0xdc>)
 8015fb2:	681b      	ldr	r3, [r3, #0]
 8015fb4:	3304      	adds	r3, #4
 8015fb6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015fb8:	2b00      	cmp	r3, #0
 8015fba:	d004      	beq.n	8015fc6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	681b      	ldr	r3, [r3, #0]
 8015fc0:	b2db      	uxtb	r3, r3
 8015fc2:	2b7f      	cmp	r3, #127	; 0x7f
 8015fc4:	d101      	bne.n	8015fca <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8015fc6:	2300      	movs	r3, #0
 8015fc8:	e001      	b.n	8015fce <ip4_route+0xca>
  }

  return netif_default;
 8015fca:	4b05      	ldr	r3, [pc, #20]	; (8015fe0 <ip4_route+0xdc>)
 8015fcc:	681b      	ldr	r3, [r3, #0]
}
 8015fce:	4618      	mov	r0, r3
 8015fd0:	3714      	adds	r7, #20
 8015fd2:	46bd      	mov	sp, r7
 8015fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fd8:	4770      	bx	lr
 8015fda:	bf00      	nop
 8015fdc:	2000db0c 	.word	0x2000db0c
 8015fe0:	2000db10 	.word	0x2000db10

08015fe4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8015fe4:	b580      	push	{r7, lr}
 8015fe6:	b082      	sub	sp, #8
 8015fe8:	af00      	add	r7, sp, #0
 8015fea:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8015fec:	687b      	ldr	r3, [r7, #4]
 8015fee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015ff2:	f003 0301 	and.w	r3, r3, #1
 8015ff6:	b2db      	uxtb	r3, r3
 8015ff8:	2b00      	cmp	r3, #0
 8015ffa:	d016      	beq.n	801602a <ip4_input_accept+0x46>
 8015ffc:	687b      	ldr	r3, [r7, #4]
 8015ffe:	3304      	adds	r3, #4
 8016000:	681b      	ldr	r3, [r3, #0]
 8016002:	2b00      	cmp	r3, #0
 8016004:	d011      	beq.n	801602a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016006:	4b0b      	ldr	r3, [pc, #44]	; (8016034 <ip4_input_accept+0x50>)
 8016008:	695a      	ldr	r2, [r3, #20]
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	3304      	adds	r3, #4
 801600e:	681b      	ldr	r3, [r3, #0]
 8016010:	429a      	cmp	r2, r3
 8016012:	d008      	beq.n	8016026 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8016014:	4b07      	ldr	r3, [pc, #28]	; (8016034 <ip4_input_accept+0x50>)
 8016016:	695b      	ldr	r3, [r3, #20]
 8016018:	6879      	ldr	r1, [r7, #4]
 801601a:	4618      	mov	r0, r3
 801601c:	f000 fa08 	bl	8016430 <ip4_addr_isbroadcast_u32>
 8016020:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016022:	2b00      	cmp	r3, #0
 8016024:	d001      	beq.n	801602a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8016026:	2301      	movs	r3, #1
 8016028:	e000      	b.n	801602c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801602a:	2300      	movs	r3, #0
}
 801602c:	4618      	mov	r0, r3
 801602e:	3708      	adds	r7, #8
 8016030:	46bd      	mov	sp, r7
 8016032:	bd80      	pop	{r7, pc}
 8016034:	20008238 	.word	0x20008238

08016038 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8016038:	b580      	push	{r7, lr}
 801603a:	b086      	sub	sp, #24
 801603c:	af00      	add	r7, sp, #0
 801603e:	6078      	str	r0, [r7, #4]
 8016040:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	685b      	ldr	r3, [r3, #4]
 8016046:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8016048:	697b      	ldr	r3, [r7, #20]
 801604a:	781b      	ldrb	r3, [r3, #0]
 801604c:	091b      	lsrs	r3, r3, #4
 801604e:	b2db      	uxtb	r3, r3
 8016050:	2b04      	cmp	r3, #4
 8016052:	d004      	beq.n	801605e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8016054:	6878      	ldr	r0, [r7, #4]
 8016056:	f7f7 fec1 	bl	800dddc <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801605a:	2300      	movs	r3, #0
 801605c:	e107      	b.n	801626e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801605e:	697b      	ldr	r3, [r7, #20]
 8016060:	781b      	ldrb	r3, [r3, #0]
 8016062:	f003 030f 	and.w	r3, r3, #15
 8016066:	b2db      	uxtb	r3, r3
 8016068:	009b      	lsls	r3, r3, #2
 801606a:	b2db      	uxtb	r3, r3
 801606c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801606e:	697b      	ldr	r3, [r7, #20]
 8016070:	885b      	ldrh	r3, [r3, #2]
 8016072:	b29b      	uxth	r3, r3
 8016074:	4618      	mov	r0, r3
 8016076:	f7f6 fb05 	bl	800c684 <lwip_htons>
 801607a:	4603      	mov	r3, r0
 801607c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801607e:	687b      	ldr	r3, [r7, #4]
 8016080:	891b      	ldrh	r3, [r3, #8]
 8016082:	89ba      	ldrh	r2, [r7, #12]
 8016084:	429a      	cmp	r2, r3
 8016086:	d204      	bcs.n	8016092 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8016088:	89bb      	ldrh	r3, [r7, #12]
 801608a:	4619      	mov	r1, r3
 801608c:	6878      	ldr	r0, [r7, #4]
 801608e:	f7f7 fd1f 	bl	800dad0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8016092:	687b      	ldr	r3, [r7, #4]
 8016094:	895b      	ldrh	r3, [r3, #10]
 8016096:	89fa      	ldrh	r2, [r7, #14]
 8016098:	429a      	cmp	r2, r3
 801609a:	d807      	bhi.n	80160ac <ip4_input+0x74>
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	891b      	ldrh	r3, [r3, #8]
 80160a0:	89ba      	ldrh	r2, [r7, #12]
 80160a2:	429a      	cmp	r2, r3
 80160a4:	d802      	bhi.n	80160ac <ip4_input+0x74>
 80160a6:	89fb      	ldrh	r3, [r7, #14]
 80160a8:	2b13      	cmp	r3, #19
 80160aa:	d804      	bhi.n	80160b6 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80160ac:	6878      	ldr	r0, [r7, #4]
 80160ae:	f7f7 fe95 	bl	800dddc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80160b2:	2300      	movs	r3, #0
 80160b4:	e0db      	b.n	801626e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80160b6:	697b      	ldr	r3, [r7, #20]
 80160b8:	691b      	ldr	r3, [r3, #16]
 80160ba:	4a6f      	ldr	r2, [pc, #444]	; (8016278 <ip4_input+0x240>)
 80160bc:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80160be:	697b      	ldr	r3, [r7, #20]
 80160c0:	68db      	ldr	r3, [r3, #12]
 80160c2:	4a6d      	ldr	r2, [pc, #436]	; (8016278 <ip4_input+0x240>)
 80160c4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80160c6:	4b6c      	ldr	r3, [pc, #432]	; (8016278 <ip4_input+0x240>)
 80160c8:	695b      	ldr	r3, [r3, #20]
 80160ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80160ce:	2be0      	cmp	r3, #224	; 0xe0
 80160d0:	d112      	bne.n	80160f8 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80160d2:	683b      	ldr	r3, [r7, #0]
 80160d4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80160d8:	f003 0301 	and.w	r3, r3, #1
 80160dc:	b2db      	uxtb	r3, r3
 80160de:	2b00      	cmp	r3, #0
 80160e0:	d007      	beq.n	80160f2 <ip4_input+0xba>
 80160e2:	683b      	ldr	r3, [r7, #0]
 80160e4:	3304      	adds	r3, #4
 80160e6:	681b      	ldr	r3, [r3, #0]
 80160e8:	2b00      	cmp	r3, #0
 80160ea:	d002      	beq.n	80160f2 <ip4_input+0xba>
      netif = inp;
 80160ec:	683b      	ldr	r3, [r7, #0]
 80160ee:	613b      	str	r3, [r7, #16]
 80160f0:	e02a      	b.n	8016148 <ip4_input+0x110>
    } else {
      netif = NULL;
 80160f2:	2300      	movs	r3, #0
 80160f4:	613b      	str	r3, [r7, #16]
 80160f6:	e027      	b.n	8016148 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80160f8:	6838      	ldr	r0, [r7, #0]
 80160fa:	f7ff ff73 	bl	8015fe4 <ip4_input_accept>
 80160fe:	4603      	mov	r3, r0
 8016100:	2b00      	cmp	r3, #0
 8016102:	d002      	beq.n	801610a <ip4_input+0xd2>
      netif = inp;
 8016104:	683b      	ldr	r3, [r7, #0]
 8016106:	613b      	str	r3, [r7, #16]
 8016108:	e01e      	b.n	8016148 <ip4_input+0x110>
    } else {
      netif = NULL;
 801610a:	2300      	movs	r3, #0
 801610c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801610e:	4b5a      	ldr	r3, [pc, #360]	; (8016278 <ip4_input+0x240>)
 8016110:	695b      	ldr	r3, [r3, #20]
 8016112:	b2db      	uxtb	r3, r3
 8016114:	2b7f      	cmp	r3, #127	; 0x7f
 8016116:	d017      	beq.n	8016148 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8016118:	4b58      	ldr	r3, [pc, #352]	; (801627c <ip4_input+0x244>)
 801611a:	681b      	ldr	r3, [r3, #0]
 801611c:	613b      	str	r3, [r7, #16]
 801611e:	e00e      	b.n	801613e <ip4_input+0x106>
          if (netif == inp) {
 8016120:	693a      	ldr	r2, [r7, #16]
 8016122:	683b      	ldr	r3, [r7, #0]
 8016124:	429a      	cmp	r2, r3
 8016126:	d006      	beq.n	8016136 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8016128:	6938      	ldr	r0, [r7, #16]
 801612a:	f7ff ff5b 	bl	8015fe4 <ip4_input_accept>
 801612e:	4603      	mov	r3, r0
 8016130:	2b00      	cmp	r3, #0
 8016132:	d108      	bne.n	8016146 <ip4_input+0x10e>
 8016134:	e000      	b.n	8016138 <ip4_input+0x100>
            continue;
 8016136:	bf00      	nop
        NETIF_FOREACH(netif) {
 8016138:	693b      	ldr	r3, [r7, #16]
 801613a:	681b      	ldr	r3, [r3, #0]
 801613c:	613b      	str	r3, [r7, #16]
 801613e:	693b      	ldr	r3, [r7, #16]
 8016140:	2b00      	cmp	r3, #0
 8016142:	d1ed      	bne.n	8016120 <ip4_input+0xe8>
 8016144:	e000      	b.n	8016148 <ip4_input+0x110>
            break;
 8016146:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016148:	4b4b      	ldr	r3, [pc, #300]	; (8016278 <ip4_input+0x240>)
 801614a:	691b      	ldr	r3, [r3, #16]
 801614c:	6839      	ldr	r1, [r7, #0]
 801614e:	4618      	mov	r0, r3
 8016150:	f000 f96e 	bl	8016430 <ip4_addr_isbroadcast_u32>
 8016154:	4603      	mov	r3, r0
 8016156:	2b00      	cmp	r3, #0
 8016158:	d105      	bne.n	8016166 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801615a:	4b47      	ldr	r3, [pc, #284]	; (8016278 <ip4_input+0x240>)
 801615c:	691b      	ldr	r3, [r3, #16]
 801615e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016162:	2be0      	cmp	r3, #224	; 0xe0
 8016164:	d104      	bne.n	8016170 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8016166:	6878      	ldr	r0, [r7, #4]
 8016168:	f7f7 fe38 	bl	800dddc <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801616c:	2300      	movs	r3, #0
 801616e:	e07e      	b.n	801626e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8016170:	693b      	ldr	r3, [r7, #16]
 8016172:	2b00      	cmp	r3, #0
 8016174:	d104      	bne.n	8016180 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8016176:	6878      	ldr	r0, [r7, #4]
 8016178:	f7f7 fe30 	bl	800dddc <pbuf_free>
    return ERR_OK;
 801617c:	2300      	movs	r3, #0
 801617e:	e076      	b.n	801626e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8016180:	697b      	ldr	r3, [r7, #20]
 8016182:	88db      	ldrh	r3, [r3, #6]
 8016184:	b29b      	uxth	r3, r3
 8016186:	461a      	mov	r2, r3
 8016188:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801618c:	4013      	ands	r3, r2
 801618e:	2b00      	cmp	r3, #0
 8016190:	d00b      	beq.n	80161aa <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8016192:	6878      	ldr	r0, [r7, #4]
 8016194:	f000 fc92 	bl	8016abc <ip4_reass>
 8016198:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	2b00      	cmp	r3, #0
 801619e:	d101      	bne.n	80161a4 <ip4_input+0x16c>
      return ERR_OK;
 80161a0:	2300      	movs	r3, #0
 80161a2:	e064      	b.n	801626e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80161a4:	687b      	ldr	r3, [r7, #4]
 80161a6:	685b      	ldr	r3, [r3, #4]
 80161a8:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80161aa:	4a33      	ldr	r2, [pc, #204]	; (8016278 <ip4_input+0x240>)
 80161ac:	693b      	ldr	r3, [r7, #16]
 80161ae:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80161b0:	4a31      	ldr	r2, [pc, #196]	; (8016278 <ip4_input+0x240>)
 80161b2:	683b      	ldr	r3, [r7, #0]
 80161b4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80161b6:	4a30      	ldr	r2, [pc, #192]	; (8016278 <ip4_input+0x240>)
 80161b8:	697b      	ldr	r3, [r7, #20]
 80161ba:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80161bc:	697b      	ldr	r3, [r7, #20]
 80161be:	781b      	ldrb	r3, [r3, #0]
 80161c0:	f003 030f 	and.w	r3, r3, #15
 80161c4:	b2db      	uxtb	r3, r3
 80161c6:	009b      	lsls	r3, r3, #2
 80161c8:	b2db      	uxtb	r3, r3
 80161ca:	b29a      	uxth	r2, r3
 80161cc:	4b2a      	ldr	r3, [pc, #168]	; (8016278 <ip4_input+0x240>)
 80161ce:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80161d0:	89fb      	ldrh	r3, [r7, #14]
 80161d2:	4619      	mov	r1, r3
 80161d4:	6878      	ldr	r0, [r7, #4]
 80161d6:	f7f7 fd7b 	bl	800dcd0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80161da:	697b      	ldr	r3, [r7, #20]
 80161dc:	7a5b      	ldrb	r3, [r3, #9]
 80161de:	2b11      	cmp	r3, #17
 80161e0:	d006      	beq.n	80161f0 <ip4_input+0x1b8>
 80161e2:	2b11      	cmp	r3, #17
 80161e4:	dc13      	bgt.n	801620e <ip4_input+0x1d6>
 80161e6:	2b01      	cmp	r3, #1
 80161e8:	d00c      	beq.n	8016204 <ip4_input+0x1cc>
 80161ea:	2b06      	cmp	r3, #6
 80161ec:	d005      	beq.n	80161fa <ip4_input+0x1c2>
 80161ee:	e00e      	b.n	801620e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80161f0:	6839      	ldr	r1, [r7, #0]
 80161f2:	6878      	ldr	r0, [r7, #4]
 80161f4:	f7fe faec 	bl	80147d0 <udp_input>
        break;
 80161f8:	e026      	b.n	8016248 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80161fa:	6839      	ldr	r1, [r7, #0]
 80161fc:	6878      	ldr	r0, [r7, #4]
 80161fe:	f7f9 fea9 	bl	800ff54 <tcp_input>
        break;
 8016202:	e021      	b.n	8016248 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8016204:	6839      	ldr	r1, [r7, #0]
 8016206:	6878      	ldr	r0, [r7, #4]
 8016208:	f7ff fcee 	bl	8015be8 <icmp_input>
        break;
 801620c:	e01c      	b.n	8016248 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801620e:	4b1a      	ldr	r3, [pc, #104]	; (8016278 <ip4_input+0x240>)
 8016210:	695b      	ldr	r3, [r3, #20]
 8016212:	6939      	ldr	r1, [r7, #16]
 8016214:	4618      	mov	r0, r3
 8016216:	f000 f90b 	bl	8016430 <ip4_addr_isbroadcast_u32>
 801621a:	4603      	mov	r3, r0
 801621c:	2b00      	cmp	r3, #0
 801621e:	d10f      	bne.n	8016240 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016220:	4b15      	ldr	r3, [pc, #84]	; (8016278 <ip4_input+0x240>)
 8016222:	695b      	ldr	r3, [r3, #20]
 8016224:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016228:	2be0      	cmp	r3, #224	; 0xe0
 801622a:	d009      	beq.n	8016240 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801622c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8016230:	4619      	mov	r1, r3
 8016232:	6878      	ldr	r0, [r7, #4]
 8016234:	f7f7 fdbf 	bl	800ddb6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8016238:	2102      	movs	r1, #2
 801623a:	6878      	ldr	r0, [r7, #4]
 801623c:	f7ff fdd8 	bl	8015df0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8016240:	6878      	ldr	r0, [r7, #4]
 8016242:	f7f7 fdcb 	bl	800dddc <pbuf_free>
        break;
 8016246:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8016248:	4b0b      	ldr	r3, [pc, #44]	; (8016278 <ip4_input+0x240>)
 801624a:	2200      	movs	r2, #0
 801624c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801624e:	4b0a      	ldr	r3, [pc, #40]	; (8016278 <ip4_input+0x240>)
 8016250:	2200      	movs	r2, #0
 8016252:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8016254:	4b08      	ldr	r3, [pc, #32]	; (8016278 <ip4_input+0x240>)
 8016256:	2200      	movs	r2, #0
 8016258:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801625a:	4b07      	ldr	r3, [pc, #28]	; (8016278 <ip4_input+0x240>)
 801625c:	2200      	movs	r2, #0
 801625e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8016260:	4b05      	ldr	r3, [pc, #20]	; (8016278 <ip4_input+0x240>)
 8016262:	2200      	movs	r2, #0
 8016264:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8016266:	4b04      	ldr	r3, [pc, #16]	; (8016278 <ip4_input+0x240>)
 8016268:	2200      	movs	r2, #0
 801626a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801626c:	2300      	movs	r3, #0
}
 801626e:	4618      	mov	r0, r3
 8016270:	3718      	adds	r7, #24
 8016272:	46bd      	mov	sp, r7
 8016274:	bd80      	pop	{r7, pc}
 8016276:	bf00      	nop
 8016278:	20008238 	.word	0x20008238
 801627c:	2000db0c 	.word	0x2000db0c

08016280 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8016280:	b580      	push	{r7, lr}
 8016282:	b08a      	sub	sp, #40	; 0x28
 8016284:	af04      	add	r7, sp, #16
 8016286:	60f8      	str	r0, [r7, #12]
 8016288:	60b9      	str	r1, [r7, #8]
 801628a:	607a      	str	r2, [r7, #4]
 801628c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801628e:	68bb      	ldr	r3, [r7, #8]
 8016290:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8016292:	687b      	ldr	r3, [r7, #4]
 8016294:	2b00      	cmp	r3, #0
 8016296:	d009      	beq.n	80162ac <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8016298:	68bb      	ldr	r3, [r7, #8]
 801629a:	2b00      	cmp	r3, #0
 801629c:	d003      	beq.n	80162a6 <ip4_output_if+0x26>
 801629e:	68bb      	ldr	r3, [r7, #8]
 80162a0:	681b      	ldr	r3, [r3, #0]
 80162a2:	2b00      	cmp	r3, #0
 80162a4:	d102      	bne.n	80162ac <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80162a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162a8:	3304      	adds	r3, #4
 80162aa:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80162ac:	78fa      	ldrb	r2, [r7, #3]
 80162ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162b0:	9302      	str	r3, [sp, #8]
 80162b2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80162b6:	9301      	str	r3, [sp, #4]
 80162b8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80162bc:	9300      	str	r3, [sp, #0]
 80162be:	4613      	mov	r3, r2
 80162c0:	687a      	ldr	r2, [r7, #4]
 80162c2:	6979      	ldr	r1, [r7, #20]
 80162c4:	68f8      	ldr	r0, [r7, #12]
 80162c6:	f000 f805 	bl	80162d4 <ip4_output_if_src>
 80162ca:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80162cc:	4618      	mov	r0, r3
 80162ce:	3718      	adds	r7, #24
 80162d0:	46bd      	mov	sp, r7
 80162d2:	bd80      	pop	{r7, pc}

080162d4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80162d4:	b580      	push	{r7, lr}
 80162d6:	b088      	sub	sp, #32
 80162d8:	af00      	add	r7, sp, #0
 80162da:	60f8      	str	r0, [r7, #12]
 80162dc:	60b9      	str	r1, [r7, #8]
 80162de:	607a      	str	r2, [r7, #4]
 80162e0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80162e2:	68fb      	ldr	r3, [r7, #12]
 80162e4:	7b9b      	ldrb	r3, [r3, #14]
 80162e6:	2b01      	cmp	r3, #1
 80162e8:	d006      	beq.n	80162f8 <ip4_output_if_src+0x24>
 80162ea:	4b4b      	ldr	r3, [pc, #300]	; (8016418 <ip4_output_if_src+0x144>)
 80162ec:	f44f 7255 	mov.w	r2, #852	; 0x354
 80162f0:	494a      	ldr	r1, [pc, #296]	; (801641c <ip4_output_if_src+0x148>)
 80162f2:	484b      	ldr	r0, [pc, #300]	; (8016420 <ip4_output_if_src+0x14c>)
 80162f4:	f004 ff06 	bl	801b104 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	d060      	beq.n	80163c0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80162fe:	2314      	movs	r3, #20
 8016300:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8016302:	2114      	movs	r1, #20
 8016304:	68f8      	ldr	r0, [r7, #12]
 8016306:	f7f7 fcd3 	bl	800dcb0 <pbuf_add_header>
 801630a:	4603      	mov	r3, r0
 801630c:	2b00      	cmp	r3, #0
 801630e:	d002      	beq.n	8016316 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016310:	f06f 0301 	mvn.w	r3, #1
 8016314:	e07c      	b.n	8016410 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8016316:	68fb      	ldr	r3, [r7, #12]
 8016318:	685b      	ldr	r3, [r3, #4]
 801631a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801631c:	68fb      	ldr	r3, [r7, #12]
 801631e:	895b      	ldrh	r3, [r3, #10]
 8016320:	2b13      	cmp	r3, #19
 8016322:	d806      	bhi.n	8016332 <ip4_output_if_src+0x5e>
 8016324:	4b3c      	ldr	r3, [pc, #240]	; (8016418 <ip4_output_if_src+0x144>)
 8016326:	f44f 7262 	mov.w	r2, #904	; 0x388
 801632a:	493e      	ldr	r1, [pc, #248]	; (8016424 <ip4_output_if_src+0x150>)
 801632c:	483c      	ldr	r0, [pc, #240]	; (8016420 <ip4_output_if_src+0x14c>)
 801632e:	f004 fee9 	bl	801b104 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8016332:	69fb      	ldr	r3, [r7, #28]
 8016334:	78fa      	ldrb	r2, [r7, #3]
 8016336:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8016338:	69fb      	ldr	r3, [r7, #28]
 801633a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801633e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8016340:	687b      	ldr	r3, [r7, #4]
 8016342:	681a      	ldr	r2, [r3, #0]
 8016344:	69fb      	ldr	r3, [r7, #28]
 8016346:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8016348:	8b7b      	ldrh	r3, [r7, #26]
 801634a:	089b      	lsrs	r3, r3, #2
 801634c:	b29b      	uxth	r3, r3
 801634e:	b2db      	uxtb	r3, r3
 8016350:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016354:	b2da      	uxtb	r2, r3
 8016356:	69fb      	ldr	r3, [r7, #28]
 8016358:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801635a:	69fb      	ldr	r3, [r7, #28]
 801635c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8016360:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8016362:	68fb      	ldr	r3, [r7, #12]
 8016364:	891b      	ldrh	r3, [r3, #8]
 8016366:	4618      	mov	r0, r3
 8016368:	f7f6 f98c 	bl	800c684 <lwip_htons>
 801636c:	4603      	mov	r3, r0
 801636e:	461a      	mov	r2, r3
 8016370:	69fb      	ldr	r3, [r7, #28]
 8016372:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8016374:	69fb      	ldr	r3, [r7, #28]
 8016376:	2200      	movs	r2, #0
 8016378:	719a      	strb	r2, [r3, #6]
 801637a:	2200      	movs	r2, #0
 801637c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801637e:	4b2a      	ldr	r3, [pc, #168]	; (8016428 <ip4_output_if_src+0x154>)
 8016380:	881b      	ldrh	r3, [r3, #0]
 8016382:	4618      	mov	r0, r3
 8016384:	f7f6 f97e 	bl	800c684 <lwip_htons>
 8016388:	4603      	mov	r3, r0
 801638a:	461a      	mov	r2, r3
 801638c:	69fb      	ldr	r3, [r7, #28]
 801638e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8016390:	4b25      	ldr	r3, [pc, #148]	; (8016428 <ip4_output_if_src+0x154>)
 8016392:	881b      	ldrh	r3, [r3, #0]
 8016394:	3301      	adds	r3, #1
 8016396:	b29a      	uxth	r2, r3
 8016398:	4b23      	ldr	r3, [pc, #140]	; (8016428 <ip4_output_if_src+0x154>)
 801639a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801639c:	68bb      	ldr	r3, [r7, #8]
 801639e:	2b00      	cmp	r3, #0
 80163a0:	d104      	bne.n	80163ac <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80163a2:	4b22      	ldr	r3, [pc, #136]	; (801642c <ip4_output_if_src+0x158>)
 80163a4:	681a      	ldr	r2, [r3, #0]
 80163a6:	69fb      	ldr	r3, [r7, #28]
 80163a8:	60da      	str	r2, [r3, #12]
 80163aa:	e003      	b.n	80163b4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80163ac:	68bb      	ldr	r3, [r7, #8]
 80163ae:	681a      	ldr	r2, [r3, #0]
 80163b0:	69fb      	ldr	r3, [r7, #28]
 80163b2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80163b4:	69fb      	ldr	r3, [r7, #28]
 80163b6:	2200      	movs	r2, #0
 80163b8:	729a      	strb	r2, [r3, #10]
 80163ba:	2200      	movs	r2, #0
 80163bc:	72da      	strb	r2, [r3, #11]
 80163be:	e00f      	b.n	80163e0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80163c0:	68fb      	ldr	r3, [r7, #12]
 80163c2:	895b      	ldrh	r3, [r3, #10]
 80163c4:	2b13      	cmp	r3, #19
 80163c6:	d802      	bhi.n	80163ce <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80163c8:	f06f 0301 	mvn.w	r3, #1
 80163cc:	e020      	b.n	8016410 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80163ce:	68fb      	ldr	r3, [r7, #12]
 80163d0:	685b      	ldr	r3, [r3, #4]
 80163d2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80163d4:	69fb      	ldr	r3, [r7, #28]
 80163d6:	691b      	ldr	r3, [r3, #16]
 80163d8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80163da:	f107 0314 	add.w	r3, r7, #20
 80163de:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80163e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163e2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80163e4:	2b00      	cmp	r3, #0
 80163e6:	d00c      	beq.n	8016402 <ip4_output_if_src+0x12e>
 80163e8:	68fb      	ldr	r3, [r7, #12]
 80163ea:	891a      	ldrh	r2, [r3, #8]
 80163ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163ee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80163f0:	429a      	cmp	r2, r3
 80163f2:	d906      	bls.n	8016402 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80163f4:	687a      	ldr	r2, [r7, #4]
 80163f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80163f8:	68f8      	ldr	r0, [r7, #12]
 80163fa:	f000 fd4d 	bl	8016e98 <ip4_frag>
 80163fe:	4603      	mov	r3, r0
 8016400:	e006      	b.n	8016410 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8016402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016404:	695b      	ldr	r3, [r3, #20]
 8016406:	687a      	ldr	r2, [r7, #4]
 8016408:	68f9      	ldr	r1, [r7, #12]
 801640a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801640c:	4798      	blx	r3
 801640e:	4603      	mov	r3, r0
}
 8016410:	4618      	mov	r0, r3
 8016412:	3720      	adds	r7, #32
 8016414:	46bd      	mov	sp, r7
 8016416:	bd80      	pop	{r7, pc}
 8016418:	0801eb48 	.word	0x0801eb48
 801641c:	0801eb7c 	.word	0x0801eb7c
 8016420:	0801eb88 	.word	0x0801eb88
 8016424:	0801ebb0 	.word	0x0801ebb0
 8016428:	20004cf6 	.word	0x20004cf6
 801642c:	0801f154 	.word	0x0801f154

08016430 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8016430:	b480      	push	{r7}
 8016432:	b085      	sub	sp, #20
 8016434:	af00      	add	r7, sp, #0
 8016436:	6078      	str	r0, [r7, #4]
 8016438:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801643a:	687b      	ldr	r3, [r7, #4]
 801643c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801643e:	687b      	ldr	r3, [r7, #4]
 8016440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016444:	d002      	beq.n	801644c <ip4_addr_isbroadcast_u32+0x1c>
 8016446:	687b      	ldr	r3, [r7, #4]
 8016448:	2b00      	cmp	r3, #0
 801644a:	d101      	bne.n	8016450 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801644c:	2301      	movs	r3, #1
 801644e:	e02a      	b.n	80164a6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8016450:	683b      	ldr	r3, [r7, #0]
 8016452:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016456:	f003 0302 	and.w	r3, r3, #2
 801645a:	2b00      	cmp	r3, #0
 801645c:	d101      	bne.n	8016462 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801645e:	2300      	movs	r3, #0
 8016460:	e021      	b.n	80164a6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8016462:	683b      	ldr	r3, [r7, #0]
 8016464:	3304      	adds	r3, #4
 8016466:	681b      	ldr	r3, [r3, #0]
 8016468:	687a      	ldr	r2, [r7, #4]
 801646a:	429a      	cmp	r2, r3
 801646c:	d101      	bne.n	8016472 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801646e:	2300      	movs	r3, #0
 8016470:	e019      	b.n	80164a6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8016472:	68fa      	ldr	r2, [r7, #12]
 8016474:	683b      	ldr	r3, [r7, #0]
 8016476:	3304      	adds	r3, #4
 8016478:	681b      	ldr	r3, [r3, #0]
 801647a:	405a      	eors	r2, r3
 801647c:	683b      	ldr	r3, [r7, #0]
 801647e:	3308      	adds	r3, #8
 8016480:	681b      	ldr	r3, [r3, #0]
 8016482:	4013      	ands	r3, r2
 8016484:	2b00      	cmp	r3, #0
 8016486:	d10d      	bne.n	80164a4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016488:	683b      	ldr	r3, [r7, #0]
 801648a:	3308      	adds	r3, #8
 801648c:	681b      	ldr	r3, [r3, #0]
 801648e:	43da      	mvns	r2, r3
 8016490:	687b      	ldr	r3, [r7, #4]
 8016492:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8016494:	683b      	ldr	r3, [r7, #0]
 8016496:	3308      	adds	r3, #8
 8016498:	681b      	ldr	r3, [r3, #0]
 801649a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801649c:	429a      	cmp	r2, r3
 801649e:	d101      	bne.n	80164a4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80164a0:	2301      	movs	r3, #1
 80164a2:	e000      	b.n	80164a6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80164a4:	2300      	movs	r3, #0
  }
}
 80164a6:	4618      	mov	r0, r3
 80164a8:	3714      	adds	r7, #20
 80164aa:	46bd      	mov	sp, r7
 80164ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164b0:	4770      	bx	lr
	...

080164b4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80164b4:	b580      	push	{r7, lr}
 80164b6:	b084      	sub	sp, #16
 80164b8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80164ba:	2300      	movs	r3, #0
 80164bc:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80164be:	4b12      	ldr	r3, [pc, #72]	; (8016508 <ip_reass_tmr+0x54>)
 80164c0:	681b      	ldr	r3, [r3, #0]
 80164c2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80164c4:	e018      	b.n	80164f8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80164c6:	68fb      	ldr	r3, [r7, #12]
 80164c8:	7fdb      	ldrb	r3, [r3, #31]
 80164ca:	2b00      	cmp	r3, #0
 80164cc:	d00b      	beq.n	80164e6 <ip_reass_tmr+0x32>
      r->timer--;
 80164ce:	68fb      	ldr	r3, [r7, #12]
 80164d0:	7fdb      	ldrb	r3, [r3, #31]
 80164d2:	3b01      	subs	r3, #1
 80164d4:	b2da      	uxtb	r2, r3
 80164d6:	68fb      	ldr	r3, [r7, #12]
 80164d8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80164da:	68fb      	ldr	r3, [r7, #12]
 80164dc:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80164de:	68fb      	ldr	r3, [r7, #12]
 80164e0:	681b      	ldr	r3, [r3, #0]
 80164e2:	60fb      	str	r3, [r7, #12]
 80164e4:	e008      	b.n	80164f8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80164e6:	68fb      	ldr	r3, [r7, #12]
 80164e8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80164ea:	68fb      	ldr	r3, [r7, #12]
 80164ec:	681b      	ldr	r3, [r3, #0]
 80164ee:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80164f0:	68b9      	ldr	r1, [r7, #8]
 80164f2:	6878      	ldr	r0, [r7, #4]
 80164f4:	f000 f80a 	bl	801650c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80164f8:	68fb      	ldr	r3, [r7, #12]
 80164fa:	2b00      	cmp	r3, #0
 80164fc:	d1e3      	bne.n	80164c6 <ip_reass_tmr+0x12>
    }
  }
}
 80164fe:	bf00      	nop
 8016500:	bf00      	nop
 8016502:	3710      	adds	r7, #16
 8016504:	46bd      	mov	sp, r7
 8016506:	bd80      	pop	{r7, pc}
 8016508:	20004cf8 	.word	0x20004cf8

0801650c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801650c:	b580      	push	{r7, lr}
 801650e:	b088      	sub	sp, #32
 8016510:	af00      	add	r7, sp, #0
 8016512:	6078      	str	r0, [r7, #4]
 8016514:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8016516:	2300      	movs	r3, #0
 8016518:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801651a:	683a      	ldr	r2, [r7, #0]
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	429a      	cmp	r2, r3
 8016520:	d105      	bne.n	801652e <ip_reass_free_complete_datagram+0x22>
 8016522:	4b45      	ldr	r3, [pc, #276]	; (8016638 <ip_reass_free_complete_datagram+0x12c>)
 8016524:	22ab      	movs	r2, #171	; 0xab
 8016526:	4945      	ldr	r1, [pc, #276]	; (801663c <ip_reass_free_complete_datagram+0x130>)
 8016528:	4845      	ldr	r0, [pc, #276]	; (8016640 <ip_reass_free_complete_datagram+0x134>)
 801652a:	f004 fdeb 	bl	801b104 <iprintf>
  if (prev != NULL) {
 801652e:	683b      	ldr	r3, [r7, #0]
 8016530:	2b00      	cmp	r3, #0
 8016532:	d00a      	beq.n	801654a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8016534:	683b      	ldr	r3, [r7, #0]
 8016536:	681b      	ldr	r3, [r3, #0]
 8016538:	687a      	ldr	r2, [r7, #4]
 801653a:	429a      	cmp	r2, r3
 801653c:	d005      	beq.n	801654a <ip_reass_free_complete_datagram+0x3e>
 801653e:	4b3e      	ldr	r3, [pc, #248]	; (8016638 <ip_reass_free_complete_datagram+0x12c>)
 8016540:	22ad      	movs	r2, #173	; 0xad
 8016542:	4940      	ldr	r1, [pc, #256]	; (8016644 <ip_reass_free_complete_datagram+0x138>)
 8016544:	483e      	ldr	r0, [pc, #248]	; (8016640 <ip_reass_free_complete_datagram+0x134>)
 8016546:	f004 fddd 	bl	801b104 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801654a:	687b      	ldr	r3, [r7, #4]
 801654c:	685b      	ldr	r3, [r3, #4]
 801654e:	685b      	ldr	r3, [r3, #4]
 8016550:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8016552:	697b      	ldr	r3, [r7, #20]
 8016554:	889b      	ldrh	r3, [r3, #4]
 8016556:	b29b      	uxth	r3, r3
 8016558:	2b00      	cmp	r3, #0
 801655a:	d12a      	bne.n	80165b2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801655c:	687b      	ldr	r3, [r7, #4]
 801655e:	685b      	ldr	r3, [r3, #4]
 8016560:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8016562:	697b      	ldr	r3, [r7, #20]
 8016564:	681a      	ldr	r2, [r3, #0]
 8016566:	687b      	ldr	r3, [r7, #4]
 8016568:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801656a:	69bb      	ldr	r3, [r7, #24]
 801656c:	6858      	ldr	r0, [r3, #4]
 801656e:	687b      	ldr	r3, [r7, #4]
 8016570:	3308      	adds	r3, #8
 8016572:	2214      	movs	r2, #20
 8016574:	4619      	mov	r1, r3
 8016576:	f004 fa66 	bl	801aa46 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801657a:	2101      	movs	r1, #1
 801657c:	69b8      	ldr	r0, [r7, #24]
 801657e:	f7ff fc47 	bl	8015e10 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8016582:	69b8      	ldr	r0, [r7, #24]
 8016584:	f7f7 fcb8 	bl	800def8 <pbuf_clen>
 8016588:	4603      	mov	r3, r0
 801658a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801658c:	8bfa      	ldrh	r2, [r7, #30]
 801658e:	8a7b      	ldrh	r3, [r7, #18]
 8016590:	4413      	add	r3, r2
 8016592:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016596:	db05      	blt.n	80165a4 <ip_reass_free_complete_datagram+0x98>
 8016598:	4b27      	ldr	r3, [pc, #156]	; (8016638 <ip_reass_free_complete_datagram+0x12c>)
 801659a:	22bc      	movs	r2, #188	; 0xbc
 801659c:	492a      	ldr	r1, [pc, #168]	; (8016648 <ip_reass_free_complete_datagram+0x13c>)
 801659e:	4828      	ldr	r0, [pc, #160]	; (8016640 <ip_reass_free_complete_datagram+0x134>)
 80165a0:	f004 fdb0 	bl	801b104 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80165a4:	8bfa      	ldrh	r2, [r7, #30]
 80165a6:	8a7b      	ldrh	r3, [r7, #18]
 80165a8:	4413      	add	r3, r2
 80165aa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80165ac:	69b8      	ldr	r0, [r7, #24]
 80165ae:	f7f7 fc15 	bl	800dddc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80165b2:	687b      	ldr	r3, [r7, #4]
 80165b4:	685b      	ldr	r3, [r3, #4]
 80165b6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80165b8:	e01f      	b.n	80165fa <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80165ba:	69bb      	ldr	r3, [r7, #24]
 80165bc:	685b      	ldr	r3, [r3, #4]
 80165be:	617b      	str	r3, [r7, #20]
    pcur = p;
 80165c0:	69bb      	ldr	r3, [r7, #24]
 80165c2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80165c4:	697b      	ldr	r3, [r7, #20]
 80165c6:	681b      	ldr	r3, [r3, #0]
 80165c8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80165ca:	68f8      	ldr	r0, [r7, #12]
 80165cc:	f7f7 fc94 	bl	800def8 <pbuf_clen>
 80165d0:	4603      	mov	r3, r0
 80165d2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80165d4:	8bfa      	ldrh	r2, [r7, #30]
 80165d6:	8a7b      	ldrh	r3, [r7, #18]
 80165d8:	4413      	add	r3, r2
 80165da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80165de:	db05      	blt.n	80165ec <ip_reass_free_complete_datagram+0xe0>
 80165e0:	4b15      	ldr	r3, [pc, #84]	; (8016638 <ip_reass_free_complete_datagram+0x12c>)
 80165e2:	22cc      	movs	r2, #204	; 0xcc
 80165e4:	4918      	ldr	r1, [pc, #96]	; (8016648 <ip_reass_free_complete_datagram+0x13c>)
 80165e6:	4816      	ldr	r0, [pc, #88]	; (8016640 <ip_reass_free_complete_datagram+0x134>)
 80165e8:	f004 fd8c 	bl	801b104 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80165ec:	8bfa      	ldrh	r2, [r7, #30]
 80165ee:	8a7b      	ldrh	r3, [r7, #18]
 80165f0:	4413      	add	r3, r2
 80165f2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80165f4:	68f8      	ldr	r0, [r7, #12]
 80165f6:	f7f7 fbf1 	bl	800dddc <pbuf_free>
  while (p != NULL) {
 80165fa:	69bb      	ldr	r3, [r7, #24]
 80165fc:	2b00      	cmp	r3, #0
 80165fe:	d1dc      	bne.n	80165ba <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8016600:	6839      	ldr	r1, [r7, #0]
 8016602:	6878      	ldr	r0, [r7, #4]
 8016604:	f000 f8c2 	bl	801678c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8016608:	4b10      	ldr	r3, [pc, #64]	; (801664c <ip_reass_free_complete_datagram+0x140>)
 801660a:	881b      	ldrh	r3, [r3, #0]
 801660c:	8bfa      	ldrh	r2, [r7, #30]
 801660e:	429a      	cmp	r2, r3
 8016610:	d905      	bls.n	801661e <ip_reass_free_complete_datagram+0x112>
 8016612:	4b09      	ldr	r3, [pc, #36]	; (8016638 <ip_reass_free_complete_datagram+0x12c>)
 8016614:	22d2      	movs	r2, #210	; 0xd2
 8016616:	490e      	ldr	r1, [pc, #56]	; (8016650 <ip_reass_free_complete_datagram+0x144>)
 8016618:	4809      	ldr	r0, [pc, #36]	; (8016640 <ip_reass_free_complete_datagram+0x134>)
 801661a:	f004 fd73 	bl	801b104 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801661e:	4b0b      	ldr	r3, [pc, #44]	; (801664c <ip_reass_free_complete_datagram+0x140>)
 8016620:	881a      	ldrh	r2, [r3, #0]
 8016622:	8bfb      	ldrh	r3, [r7, #30]
 8016624:	1ad3      	subs	r3, r2, r3
 8016626:	b29a      	uxth	r2, r3
 8016628:	4b08      	ldr	r3, [pc, #32]	; (801664c <ip_reass_free_complete_datagram+0x140>)
 801662a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801662c:	8bfb      	ldrh	r3, [r7, #30]
}
 801662e:	4618      	mov	r0, r3
 8016630:	3720      	adds	r7, #32
 8016632:	46bd      	mov	sp, r7
 8016634:	bd80      	pop	{r7, pc}
 8016636:	bf00      	nop
 8016638:	0801ebe0 	.word	0x0801ebe0
 801663c:	0801ec1c 	.word	0x0801ec1c
 8016640:	0801ec28 	.word	0x0801ec28
 8016644:	0801ec50 	.word	0x0801ec50
 8016648:	0801ec64 	.word	0x0801ec64
 801664c:	20004cfc 	.word	0x20004cfc
 8016650:	0801ec84 	.word	0x0801ec84

08016654 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8016654:	b580      	push	{r7, lr}
 8016656:	b08a      	sub	sp, #40	; 0x28
 8016658:	af00      	add	r7, sp, #0
 801665a:	6078      	str	r0, [r7, #4]
 801665c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801665e:	2300      	movs	r3, #0
 8016660:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8016662:	2300      	movs	r3, #0
 8016664:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8016666:	2300      	movs	r3, #0
 8016668:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801666a:	2300      	movs	r3, #0
 801666c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801666e:	2300      	movs	r3, #0
 8016670:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8016672:	4b28      	ldr	r3, [pc, #160]	; (8016714 <ip_reass_remove_oldest_datagram+0xc0>)
 8016674:	681b      	ldr	r3, [r3, #0]
 8016676:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016678:	e030      	b.n	80166dc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801667a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801667c:	695a      	ldr	r2, [r3, #20]
 801667e:	687b      	ldr	r3, [r7, #4]
 8016680:	68db      	ldr	r3, [r3, #12]
 8016682:	429a      	cmp	r2, r3
 8016684:	d10c      	bne.n	80166a0 <ip_reass_remove_oldest_datagram+0x4c>
 8016686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016688:	699a      	ldr	r2, [r3, #24]
 801668a:	687b      	ldr	r3, [r7, #4]
 801668c:	691b      	ldr	r3, [r3, #16]
 801668e:	429a      	cmp	r2, r3
 8016690:	d106      	bne.n	80166a0 <ip_reass_remove_oldest_datagram+0x4c>
 8016692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016694:	899a      	ldrh	r2, [r3, #12]
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	889b      	ldrh	r3, [r3, #4]
 801669a:	b29b      	uxth	r3, r3
 801669c:	429a      	cmp	r2, r3
 801669e:	d014      	beq.n	80166ca <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80166a0:	693b      	ldr	r3, [r7, #16]
 80166a2:	3301      	adds	r3, #1
 80166a4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80166a6:	6a3b      	ldr	r3, [r7, #32]
 80166a8:	2b00      	cmp	r3, #0
 80166aa:	d104      	bne.n	80166b6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80166ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166ae:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80166b0:	69fb      	ldr	r3, [r7, #28]
 80166b2:	61bb      	str	r3, [r7, #24]
 80166b4:	e009      	b.n	80166ca <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80166b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166b8:	7fda      	ldrb	r2, [r3, #31]
 80166ba:	6a3b      	ldr	r3, [r7, #32]
 80166bc:	7fdb      	ldrb	r3, [r3, #31]
 80166be:	429a      	cmp	r2, r3
 80166c0:	d803      	bhi.n	80166ca <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80166c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166c4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80166c6:	69fb      	ldr	r3, [r7, #28]
 80166c8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80166ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166cc:	681b      	ldr	r3, [r3, #0]
 80166ce:	2b00      	cmp	r3, #0
 80166d0:	d001      	beq.n	80166d6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80166d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166d4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80166d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166d8:	681b      	ldr	r3, [r3, #0]
 80166da:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80166dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166de:	2b00      	cmp	r3, #0
 80166e0:	d1cb      	bne.n	801667a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80166e2:	6a3b      	ldr	r3, [r7, #32]
 80166e4:	2b00      	cmp	r3, #0
 80166e6:	d008      	beq.n	80166fa <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80166e8:	69b9      	ldr	r1, [r7, #24]
 80166ea:	6a38      	ldr	r0, [r7, #32]
 80166ec:	f7ff ff0e 	bl	801650c <ip_reass_free_complete_datagram>
 80166f0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80166f2:	697a      	ldr	r2, [r7, #20]
 80166f4:	68fb      	ldr	r3, [r7, #12]
 80166f6:	4413      	add	r3, r2
 80166f8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80166fa:	697a      	ldr	r2, [r7, #20]
 80166fc:	683b      	ldr	r3, [r7, #0]
 80166fe:	429a      	cmp	r2, r3
 8016700:	da02      	bge.n	8016708 <ip_reass_remove_oldest_datagram+0xb4>
 8016702:	693b      	ldr	r3, [r7, #16]
 8016704:	2b01      	cmp	r3, #1
 8016706:	dcac      	bgt.n	8016662 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8016708:	697b      	ldr	r3, [r7, #20]
}
 801670a:	4618      	mov	r0, r3
 801670c:	3728      	adds	r7, #40	; 0x28
 801670e:	46bd      	mov	sp, r7
 8016710:	bd80      	pop	{r7, pc}
 8016712:	bf00      	nop
 8016714:	20004cf8 	.word	0x20004cf8

08016718 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8016718:	b580      	push	{r7, lr}
 801671a:	b084      	sub	sp, #16
 801671c:	af00      	add	r7, sp, #0
 801671e:	6078      	str	r0, [r7, #4]
 8016720:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016722:	2004      	movs	r0, #4
 8016724:	f7f6 fc64 	bl	800cff0 <memp_malloc>
 8016728:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801672a:	68fb      	ldr	r3, [r7, #12]
 801672c:	2b00      	cmp	r3, #0
 801672e:	d110      	bne.n	8016752 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8016730:	6839      	ldr	r1, [r7, #0]
 8016732:	6878      	ldr	r0, [r7, #4]
 8016734:	f7ff ff8e 	bl	8016654 <ip_reass_remove_oldest_datagram>
 8016738:	4602      	mov	r2, r0
 801673a:	683b      	ldr	r3, [r7, #0]
 801673c:	4293      	cmp	r3, r2
 801673e:	dc03      	bgt.n	8016748 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016740:	2004      	movs	r0, #4
 8016742:	f7f6 fc55 	bl	800cff0 <memp_malloc>
 8016746:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8016748:	68fb      	ldr	r3, [r7, #12]
 801674a:	2b00      	cmp	r3, #0
 801674c:	d101      	bne.n	8016752 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801674e:	2300      	movs	r3, #0
 8016750:	e016      	b.n	8016780 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8016752:	2220      	movs	r2, #32
 8016754:	2100      	movs	r1, #0
 8016756:	68f8      	ldr	r0, [r7, #12]
 8016758:	f004 f983 	bl	801aa62 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801675c:	68fb      	ldr	r3, [r7, #12]
 801675e:	220f      	movs	r2, #15
 8016760:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8016762:	4b09      	ldr	r3, [pc, #36]	; (8016788 <ip_reass_enqueue_new_datagram+0x70>)
 8016764:	681a      	ldr	r2, [r3, #0]
 8016766:	68fb      	ldr	r3, [r7, #12]
 8016768:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801676a:	4a07      	ldr	r2, [pc, #28]	; (8016788 <ip_reass_enqueue_new_datagram+0x70>)
 801676c:	68fb      	ldr	r3, [r7, #12]
 801676e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8016770:	68fb      	ldr	r3, [r7, #12]
 8016772:	3308      	adds	r3, #8
 8016774:	2214      	movs	r2, #20
 8016776:	6879      	ldr	r1, [r7, #4]
 8016778:	4618      	mov	r0, r3
 801677a:	f004 f964 	bl	801aa46 <memcpy>
  return ipr;
 801677e:	68fb      	ldr	r3, [r7, #12]
}
 8016780:	4618      	mov	r0, r3
 8016782:	3710      	adds	r7, #16
 8016784:	46bd      	mov	sp, r7
 8016786:	bd80      	pop	{r7, pc}
 8016788:	20004cf8 	.word	0x20004cf8

0801678c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801678c:	b580      	push	{r7, lr}
 801678e:	b082      	sub	sp, #8
 8016790:	af00      	add	r7, sp, #0
 8016792:	6078      	str	r0, [r7, #4]
 8016794:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8016796:	4b10      	ldr	r3, [pc, #64]	; (80167d8 <ip_reass_dequeue_datagram+0x4c>)
 8016798:	681b      	ldr	r3, [r3, #0]
 801679a:	687a      	ldr	r2, [r7, #4]
 801679c:	429a      	cmp	r2, r3
 801679e:	d104      	bne.n	80167aa <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	681b      	ldr	r3, [r3, #0]
 80167a4:	4a0c      	ldr	r2, [pc, #48]	; (80167d8 <ip_reass_dequeue_datagram+0x4c>)
 80167a6:	6013      	str	r3, [r2, #0]
 80167a8:	e00d      	b.n	80167c6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80167aa:	683b      	ldr	r3, [r7, #0]
 80167ac:	2b00      	cmp	r3, #0
 80167ae:	d106      	bne.n	80167be <ip_reass_dequeue_datagram+0x32>
 80167b0:	4b0a      	ldr	r3, [pc, #40]	; (80167dc <ip_reass_dequeue_datagram+0x50>)
 80167b2:	f240 1245 	movw	r2, #325	; 0x145
 80167b6:	490a      	ldr	r1, [pc, #40]	; (80167e0 <ip_reass_dequeue_datagram+0x54>)
 80167b8:	480a      	ldr	r0, [pc, #40]	; (80167e4 <ip_reass_dequeue_datagram+0x58>)
 80167ba:	f004 fca3 	bl	801b104 <iprintf>
    prev->next = ipr->next;
 80167be:	687b      	ldr	r3, [r7, #4]
 80167c0:	681a      	ldr	r2, [r3, #0]
 80167c2:	683b      	ldr	r3, [r7, #0]
 80167c4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80167c6:	6879      	ldr	r1, [r7, #4]
 80167c8:	2004      	movs	r0, #4
 80167ca:	f7f6 fc63 	bl	800d094 <memp_free>
}
 80167ce:	bf00      	nop
 80167d0:	3708      	adds	r7, #8
 80167d2:	46bd      	mov	sp, r7
 80167d4:	bd80      	pop	{r7, pc}
 80167d6:	bf00      	nop
 80167d8:	20004cf8 	.word	0x20004cf8
 80167dc:	0801ebe0 	.word	0x0801ebe0
 80167e0:	0801eca8 	.word	0x0801eca8
 80167e4:	0801ec28 	.word	0x0801ec28

080167e8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80167e8:	b580      	push	{r7, lr}
 80167ea:	b08c      	sub	sp, #48	; 0x30
 80167ec:	af00      	add	r7, sp, #0
 80167ee:	60f8      	str	r0, [r7, #12]
 80167f0:	60b9      	str	r1, [r7, #8]
 80167f2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80167f4:	2300      	movs	r3, #0
 80167f6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80167f8:	2301      	movs	r3, #1
 80167fa:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80167fc:	68bb      	ldr	r3, [r7, #8]
 80167fe:	685b      	ldr	r3, [r3, #4]
 8016800:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016802:	69fb      	ldr	r3, [r7, #28]
 8016804:	885b      	ldrh	r3, [r3, #2]
 8016806:	b29b      	uxth	r3, r3
 8016808:	4618      	mov	r0, r3
 801680a:	f7f5 ff3b 	bl	800c684 <lwip_htons>
 801680e:	4603      	mov	r3, r0
 8016810:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8016812:	69fb      	ldr	r3, [r7, #28]
 8016814:	781b      	ldrb	r3, [r3, #0]
 8016816:	f003 030f 	and.w	r3, r3, #15
 801681a:	b2db      	uxtb	r3, r3
 801681c:	009b      	lsls	r3, r3, #2
 801681e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8016820:	7e7b      	ldrb	r3, [r7, #25]
 8016822:	b29b      	uxth	r3, r3
 8016824:	8b7a      	ldrh	r2, [r7, #26]
 8016826:	429a      	cmp	r2, r3
 8016828:	d202      	bcs.n	8016830 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801682a:	f04f 33ff 	mov.w	r3, #4294967295
 801682e:	e135      	b.n	8016a9c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8016830:	7e7b      	ldrb	r3, [r7, #25]
 8016832:	b29b      	uxth	r3, r3
 8016834:	8b7a      	ldrh	r2, [r7, #26]
 8016836:	1ad3      	subs	r3, r2, r3
 8016838:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801683a:	69fb      	ldr	r3, [r7, #28]
 801683c:	88db      	ldrh	r3, [r3, #6]
 801683e:	b29b      	uxth	r3, r3
 8016840:	4618      	mov	r0, r3
 8016842:	f7f5 ff1f 	bl	800c684 <lwip_htons>
 8016846:	4603      	mov	r3, r0
 8016848:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801684c:	b29b      	uxth	r3, r3
 801684e:	00db      	lsls	r3, r3, #3
 8016850:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8016852:	68bb      	ldr	r3, [r7, #8]
 8016854:	685b      	ldr	r3, [r3, #4]
 8016856:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8016858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801685a:	2200      	movs	r2, #0
 801685c:	701a      	strb	r2, [r3, #0]
 801685e:	2200      	movs	r2, #0
 8016860:	705a      	strb	r2, [r3, #1]
 8016862:	2200      	movs	r2, #0
 8016864:	709a      	strb	r2, [r3, #2]
 8016866:	2200      	movs	r2, #0
 8016868:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801686a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801686c:	8afa      	ldrh	r2, [r7, #22]
 801686e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8016870:	8afa      	ldrh	r2, [r7, #22]
 8016872:	8b7b      	ldrh	r3, [r7, #26]
 8016874:	4413      	add	r3, r2
 8016876:	b29a      	uxth	r2, r3
 8016878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801687a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801687c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801687e:	88db      	ldrh	r3, [r3, #6]
 8016880:	b29b      	uxth	r3, r3
 8016882:	8afa      	ldrh	r2, [r7, #22]
 8016884:	429a      	cmp	r2, r3
 8016886:	d902      	bls.n	801688e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016888:	f04f 33ff 	mov.w	r3, #4294967295
 801688c:	e106      	b.n	8016a9c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801688e:	68fb      	ldr	r3, [r7, #12]
 8016890:	685b      	ldr	r3, [r3, #4]
 8016892:	627b      	str	r3, [r7, #36]	; 0x24
 8016894:	e068      	b.n	8016968 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8016896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016898:	685b      	ldr	r3, [r3, #4]
 801689a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801689c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801689e:	889b      	ldrh	r3, [r3, #4]
 80168a0:	b29a      	uxth	r2, r3
 80168a2:	693b      	ldr	r3, [r7, #16]
 80168a4:	889b      	ldrh	r3, [r3, #4]
 80168a6:	b29b      	uxth	r3, r3
 80168a8:	429a      	cmp	r2, r3
 80168aa:	d235      	bcs.n	8016918 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80168ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80168b0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80168b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168b4:	2b00      	cmp	r3, #0
 80168b6:	d020      	beq.n	80168fa <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80168b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168ba:	889b      	ldrh	r3, [r3, #4]
 80168bc:	b29a      	uxth	r2, r3
 80168be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168c0:	88db      	ldrh	r3, [r3, #6]
 80168c2:	b29b      	uxth	r3, r3
 80168c4:	429a      	cmp	r2, r3
 80168c6:	d307      	bcc.n	80168d8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80168c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168ca:	88db      	ldrh	r3, [r3, #6]
 80168cc:	b29a      	uxth	r2, r3
 80168ce:	693b      	ldr	r3, [r7, #16]
 80168d0:	889b      	ldrh	r3, [r3, #4]
 80168d2:	b29b      	uxth	r3, r3
 80168d4:	429a      	cmp	r2, r3
 80168d6:	d902      	bls.n	80168de <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80168d8:	f04f 33ff 	mov.w	r3, #4294967295
 80168dc:	e0de      	b.n	8016a9c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80168de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168e0:	68ba      	ldr	r2, [r7, #8]
 80168e2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80168e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168e6:	88db      	ldrh	r3, [r3, #6]
 80168e8:	b29a      	uxth	r2, r3
 80168ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168ec:	889b      	ldrh	r3, [r3, #4]
 80168ee:	b29b      	uxth	r3, r3
 80168f0:	429a      	cmp	r2, r3
 80168f2:	d03d      	beq.n	8016970 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80168f4:	2300      	movs	r3, #0
 80168f6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80168f8:	e03a      	b.n	8016970 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80168fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168fc:	88db      	ldrh	r3, [r3, #6]
 80168fe:	b29a      	uxth	r2, r3
 8016900:	693b      	ldr	r3, [r7, #16]
 8016902:	889b      	ldrh	r3, [r3, #4]
 8016904:	b29b      	uxth	r3, r3
 8016906:	429a      	cmp	r2, r3
 8016908:	d902      	bls.n	8016910 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801690a:	f04f 33ff 	mov.w	r3, #4294967295
 801690e:	e0c5      	b.n	8016a9c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8016910:	68fb      	ldr	r3, [r7, #12]
 8016912:	68ba      	ldr	r2, [r7, #8]
 8016914:	605a      	str	r2, [r3, #4]
      break;
 8016916:	e02b      	b.n	8016970 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8016918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801691a:	889b      	ldrh	r3, [r3, #4]
 801691c:	b29a      	uxth	r2, r3
 801691e:	693b      	ldr	r3, [r7, #16]
 8016920:	889b      	ldrh	r3, [r3, #4]
 8016922:	b29b      	uxth	r3, r3
 8016924:	429a      	cmp	r2, r3
 8016926:	d102      	bne.n	801692e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016928:	f04f 33ff 	mov.w	r3, #4294967295
 801692c:	e0b6      	b.n	8016a9c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801692e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016930:	889b      	ldrh	r3, [r3, #4]
 8016932:	b29a      	uxth	r2, r3
 8016934:	693b      	ldr	r3, [r7, #16]
 8016936:	88db      	ldrh	r3, [r3, #6]
 8016938:	b29b      	uxth	r3, r3
 801693a:	429a      	cmp	r2, r3
 801693c:	d202      	bcs.n	8016944 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801693e:	f04f 33ff 	mov.w	r3, #4294967295
 8016942:	e0ab      	b.n	8016a9c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8016944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016946:	2b00      	cmp	r3, #0
 8016948:	d009      	beq.n	801695e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801694a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801694c:	88db      	ldrh	r3, [r3, #6]
 801694e:	b29a      	uxth	r2, r3
 8016950:	693b      	ldr	r3, [r7, #16]
 8016952:	889b      	ldrh	r3, [r3, #4]
 8016954:	b29b      	uxth	r3, r3
 8016956:	429a      	cmp	r2, r3
 8016958:	d001      	beq.n	801695e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801695a:	2300      	movs	r3, #0
 801695c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801695e:	693b      	ldr	r3, [r7, #16]
 8016960:	681b      	ldr	r3, [r3, #0]
 8016962:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8016964:	693b      	ldr	r3, [r7, #16]
 8016966:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8016968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801696a:	2b00      	cmp	r3, #0
 801696c:	d193      	bne.n	8016896 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801696e:	e000      	b.n	8016972 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8016970:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8016972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016974:	2b00      	cmp	r3, #0
 8016976:	d12d      	bne.n	80169d4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8016978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801697a:	2b00      	cmp	r3, #0
 801697c:	d01c      	beq.n	80169b8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801697e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016980:	88db      	ldrh	r3, [r3, #6]
 8016982:	b29a      	uxth	r2, r3
 8016984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016986:	889b      	ldrh	r3, [r3, #4]
 8016988:	b29b      	uxth	r3, r3
 801698a:	429a      	cmp	r2, r3
 801698c:	d906      	bls.n	801699c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801698e:	4b45      	ldr	r3, [pc, #276]	; (8016aa4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016990:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8016994:	4944      	ldr	r1, [pc, #272]	; (8016aa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8016996:	4845      	ldr	r0, [pc, #276]	; (8016aac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016998:	f004 fbb4 	bl	801b104 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801699c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801699e:	68ba      	ldr	r2, [r7, #8]
 80169a0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80169a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169a4:	88db      	ldrh	r3, [r3, #6]
 80169a6:	b29a      	uxth	r2, r3
 80169a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169aa:	889b      	ldrh	r3, [r3, #4]
 80169ac:	b29b      	uxth	r3, r3
 80169ae:	429a      	cmp	r2, r3
 80169b0:	d010      	beq.n	80169d4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80169b2:	2300      	movs	r3, #0
 80169b4:	623b      	str	r3, [r7, #32]
 80169b6:	e00d      	b.n	80169d4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80169b8:	68fb      	ldr	r3, [r7, #12]
 80169ba:	685b      	ldr	r3, [r3, #4]
 80169bc:	2b00      	cmp	r3, #0
 80169be:	d006      	beq.n	80169ce <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80169c0:	4b38      	ldr	r3, [pc, #224]	; (8016aa4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80169c2:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80169c6:	493a      	ldr	r1, [pc, #232]	; (8016ab0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80169c8:	4838      	ldr	r0, [pc, #224]	; (8016aac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80169ca:	f004 fb9b 	bl	801b104 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80169ce:	68fb      	ldr	r3, [r7, #12]
 80169d0:	68ba      	ldr	r2, [r7, #8]
 80169d2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80169d4:	687b      	ldr	r3, [r7, #4]
 80169d6:	2b00      	cmp	r3, #0
 80169d8:	d105      	bne.n	80169e6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80169da:	68fb      	ldr	r3, [r7, #12]
 80169dc:	7f9b      	ldrb	r3, [r3, #30]
 80169de:	f003 0301 	and.w	r3, r3, #1
 80169e2:	2b00      	cmp	r3, #0
 80169e4:	d059      	beq.n	8016a9a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80169e6:	6a3b      	ldr	r3, [r7, #32]
 80169e8:	2b00      	cmp	r3, #0
 80169ea:	d04f      	beq.n	8016a8c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80169ec:	68fb      	ldr	r3, [r7, #12]
 80169ee:	685b      	ldr	r3, [r3, #4]
 80169f0:	2b00      	cmp	r3, #0
 80169f2:	d006      	beq.n	8016a02 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80169f4:	68fb      	ldr	r3, [r7, #12]
 80169f6:	685b      	ldr	r3, [r3, #4]
 80169f8:	685b      	ldr	r3, [r3, #4]
 80169fa:	889b      	ldrh	r3, [r3, #4]
 80169fc:	b29b      	uxth	r3, r3
 80169fe:	2b00      	cmp	r3, #0
 8016a00:	d002      	beq.n	8016a08 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8016a02:	2300      	movs	r3, #0
 8016a04:	623b      	str	r3, [r7, #32]
 8016a06:	e041      	b.n	8016a8c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8016a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a0a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8016a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a0e:	681b      	ldr	r3, [r3, #0]
 8016a10:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8016a12:	e012      	b.n	8016a3a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8016a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a16:	685b      	ldr	r3, [r3, #4]
 8016a18:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8016a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a1c:	88db      	ldrh	r3, [r3, #6]
 8016a1e:	b29a      	uxth	r2, r3
 8016a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a22:	889b      	ldrh	r3, [r3, #4]
 8016a24:	b29b      	uxth	r3, r3
 8016a26:	429a      	cmp	r2, r3
 8016a28:	d002      	beq.n	8016a30 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8016a2a:	2300      	movs	r3, #0
 8016a2c:	623b      	str	r3, [r7, #32]
            break;
 8016a2e:	e007      	b.n	8016a40 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8016a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a32:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8016a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a36:	681b      	ldr	r3, [r3, #0]
 8016a38:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8016a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a3c:	2b00      	cmp	r3, #0
 8016a3e:	d1e9      	bne.n	8016a14 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8016a40:	6a3b      	ldr	r3, [r7, #32]
 8016a42:	2b00      	cmp	r3, #0
 8016a44:	d022      	beq.n	8016a8c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8016a46:	68fb      	ldr	r3, [r7, #12]
 8016a48:	685b      	ldr	r3, [r3, #4]
 8016a4a:	2b00      	cmp	r3, #0
 8016a4c:	d106      	bne.n	8016a5c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8016a4e:	4b15      	ldr	r3, [pc, #84]	; (8016aa4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016a50:	f240 12df 	movw	r2, #479	; 0x1df
 8016a54:	4917      	ldr	r1, [pc, #92]	; (8016ab4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016a56:	4815      	ldr	r0, [pc, #84]	; (8016aac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016a58:	f004 fb54 	bl	801b104 <iprintf>
          LWIP_ASSERT("sanity check",
 8016a5c:	68fb      	ldr	r3, [r7, #12]
 8016a5e:	685b      	ldr	r3, [r3, #4]
 8016a60:	685b      	ldr	r3, [r3, #4]
 8016a62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016a64:	429a      	cmp	r2, r3
 8016a66:	d106      	bne.n	8016a76 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8016a68:	4b0e      	ldr	r3, [pc, #56]	; (8016aa4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016a6a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8016a6e:	4911      	ldr	r1, [pc, #68]	; (8016ab4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016a70:	480e      	ldr	r0, [pc, #56]	; (8016aac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016a72:	f004 fb47 	bl	801b104 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8016a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a78:	681b      	ldr	r3, [r3, #0]
 8016a7a:	2b00      	cmp	r3, #0
 8016a7c:	d006      	beq.n	8016a8c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8016a7e:	4b09      	ldr	r3, [pc, #36]	; (8016aa4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016a80:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8016a84:	490c      	ldr	r1, [pc, #48]	; (8016ab8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8016a86:	4809      	ldr	r0, [pc, #36]	; (8016aac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016a88:	f004 fb3c 	bl	801b104 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8016a8c:	6a3b      	ldr	r3, [r7, #32]
 8016a8e:	2b00      	cmp	r3, #0
 8016a90:	bf14      	ite	ne
 8016a92:	2301      	movne	r3, #1
 8016a94:	2300      	moveq	r3, #0
 8016a96:	b2db      	uxtb	r3, r3
 8016a98:	e000      	b.n	8016a9c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8016a9a:	2300      	movs	r3, #0
}
 8016a9c:	4618      	mov	r0, r3
 8016a9e:	3730      	adds	r7, #48	; 0x30
 8016aa0:	46bd      	mov	sp, r7
 8016aa2:	bd80      	pop	{r7, pc}
 8016aa4:	0801ebe0 	.word	0x0801ebe0
 8016aa8:	0801ecc4 	.word	0x0801ecc4
 8016aac:	0801ec28 	.word	0x0801ec28
 8016ab0:	0801ece4 	.word	0x0801ece4
 8016ab4:	0801ed1c 	.word	0x0801ed1c
 8016ab8:	0801ed2c 	.word	0x0801ed2c

08016abc <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8016abc:	b580      	push	{r7, lr}
 8016abe:	b08e      	sub	sp, #56	; 0x38
 8016ac0:	af00      	add	r7, sp, #0
 8016ac2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8016ac4:	687b      	ldr	r3, [r7, #4]
 8016ac6:	685b      	ldr	r3, [r3, #4]
 8016ac8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8016aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016acc:	781b      	ldrb	r3, [r3, #0]
 8016ace:	f003 030f 	and.w	r3, r3, #15
 8016ad2:	b2db      	uxtb	r3, r3
 8016ad4:	009b      	lsls	r3, r3, #2
 8016ad6:	b2db      	uxtb	r3, r3
 8016ad8:	2b14      	cmp	r3, #20
 8016ada:	f040 8167 	bne.w	8016dac <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8016ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ae0:	88db      	ldrh	r3, [r3, #6]
 8016ae2:	b29b      	uxth	r3, r3
 8016ae4:	4618      	mov	r0, r3
 8016ae6:	f7f5 fdcd 	bl	800c684 <lwip_htons>
 8016aea:	4603      	mov	r3, r0
 8016aec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016af0:	b29b      	uxth	r3, r3
 8016af2:	00db      	lsls	r3, r3, #3
 8016af4:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016af8:	885b      	ldrh	r3, [r3, #2]
 8016afa:	b29b      	uxth	r3, r3
 8016afc:	4618      	mov	r0, r3
 8016afe:	f7f5 fdc1 	bl	800c684 <lwip_htons>
 8016b02:	4603      	mov	r3, r0
 8016b04:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8016b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b08:	781b      	ldrb	r3, [r3, #0]
 8016b0a:	f003 030f 	and.w	r3, r3, #15
 8016b0e:	b2db      	uxtb	r3, r3
 8016b10:	009b      	lsls	r3, r3, #2
 8016b12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8016b16:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016b1a:	b29b      	uxth	r3, r3
 8016b1c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016b1e:	429a      	cmp	r2, r3
 8016b20:	f0c0 8146 	bcc.w	8016db0 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8016b24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016b28:	b29b      	uxth	r3, r3
 8016b2a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016b2c:	1ad3      	subs	r3, r2, r3
 8016b2e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8016b30:	6878      	ldr	r0, [r7, #4]
 8016b32:	f7f7 f9e1 	bl	800def8 <pbuf_clen>
 8016b36:	4603      	mov	r3, r0
 8016b38:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8016b3a:	4b9f      	ldr	r3, [pc, #636]	; (8016db8 <ip4_reass+0x2fc>)
 8016b3c:	881b      	ldrh	r3, [r3, #0]
 8016b3e:	461a      	mov	r2, r3
 8016b40:	8c3b      	ldrh	r3, [r7, #32]
 8016b42:	4413      	add	r3, r2
 8016b44:	2b0a      	cmp	r3, #10
 8016b46:	dd10      	ble.n	8016b6a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016b48:	8c3b      	ldrh	r3, [r7, #32]
 8016b4a:	4619      	mov	r1, r3
 8016b4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016b4e:	f7ff fd81 	bl	8016654 <ip_reass_remove_oldest_datagram>
 8016b52:	4603      	mov	r3, r0
 8016b54:	2b00      	cmp	r3, #0
 8016b56:	f000 812d 	beq.w	8016db4 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8016b5a:	4b97      	ldr	r3, [pc, #604]	; (8016db8 <ip4_reass+0x2fc>)
 8016b5c:	881b      	ldrh	r3, [r3, #0]
 8016b5e:	461a      	mov	r2, r3
 8016b60:	8c3b      	ldrh	r3, [r7, #32]
 8016b62:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016b64:	2b0a      	cmp	r3, #10
 8016b66:	f300 8125 	bgt.w	8016db4 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016b6a:	4b94      	ldr	r3, [pc, #592]	; (8016dbc <ip4_reass+0x300>)
 8016b6c:	681b      	ldr	r3, [r3, #0]
 8016b6e:	633b      	str	r3, [r7, #48]	; 0x30
 8016b70:	e015      	b.n	8016b9e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8016b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b74:	695a      	ldr	r2, [r3, #20]
 8016b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b78:	68db      	ldr	r3, [r3, #12]
 8016b7a:	429a      	cmp	r2, r3
 8016b7c:	d10c      	bne.n	8016b98 <ip4_reass+0xdc>
 8016b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b80:	699a      	ldr	r2, [r3, #24]
 8016b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b84:	691b      	ldr	r3, [r3, #16]
 8016b86:	429a      	cmp	r2, r3
 8016b88:	d106      	bne.n	8016b98 <ip4_reass+0xdc>
 8016b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b8c:	899a      	ldrh	r2, [r3, #12]
 8016b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b90:	889b      	ldrh	r3, [r3, #4]
 8016b92:	b29b      	uxth	r3, r3
 8016b94:	429a      	cmp	r2, r3
 8016b96:	d006      	beq.n	8016ba6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b9a:	681b      	ldr	r3, [r3, #0]
 8016b9c:	633b      	str	r3, [r7, #48]	; 0x30
 8016b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ba0:	2b00      	cmp	r3, #0
 8016ba2:	d1e6      	bne.n	8016b72 <ip4_reass+0xb6>
 8016ba4:	e000      	b.n	8016ba8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8016ba6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8016ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016baa:	2b00      	cmp	r3, #0
 8016bac:	d109      	bne.n	8016bc2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8016bae:	8c3b      	ldrh	r3, [r7, #32]
 8016bb0:	4619      	mov	r1, r3
 8016bb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016bb4:	f7ff fdb0 	bl	8016718 <ip_reass_enqueue_new_datagram>
 8016bb8:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8016bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bbc:	2b00      	cmp	r3, #0
 8016bbe:	d11c      	bne.n	8016bfa <ip4_reass+0x13e>
      goto nullreturn;
 8016bc0:	e109      	b.n	8016dd6 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016bc4:	88db      	ldrh	r3, [r3, #6]
 8016bc6:	b29b      	uxth	r3, r3
 8016bc8:	4618      	mov	r0, r3
 8016bca:	f7f5 fd5b 	bl	800c684 <lwip_htons>
 8016bce:	4603      	mov	r3, r0
 8016bd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016bd4:	2b00      	cmp	r3, #0
 8016bd6:	d110      	bne.n	8016bfa <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8016bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bda:	89db      	ldrh	r3, [r3, #14]
 8016bdc:	4618      	mov	r0, r3
 8016bde:	f7f5 fd51 	bl	800c684 <lwip_htons>
 8016be2:	4603      	mov	r3, r0
 8016be4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016be8:	2b00      	cmp	r3, #0
 8016bea:	d006      	beq.n	8016bfa <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8016bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bee:	3308      	adds	r3, #8
 8016bf0:	2214      	movs	r2, #20
 8016bf2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016bf4:	4618      	mov	r0, r3
 8016bf6:	f003 ff26 	bl	801aa46 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8016bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016bfc:	88db      	ldrh	r3, [r3, #6]
 8016bfe:	b29b      	uxth	r3, r3
 8016c00:	f003 0320 	and.w	r3, r3, #32
 8016c04:	2b00      	cmp	r3, #0
 8016c06:	bf0c      	ite	eq
 8016c08:	2301      	moveq	r3, #1
 8016c0a:	2300      	movne	r3, #0
 8016c0c:	b2db      	uxtb	r3, r3
 8016c0e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8016c10:	69fb      	ldr	r3, [r7, #28]
 8016c12:	2b00      	cmp	r3, #0
 8016c14:	d00e      	beq.n	8016c34 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8016c16:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016c18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016c1a:	4413      	add	r3, r2
 8016c1c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8016c1e:	8b7a      	ldrh	r2, [r7, #26]
 8016c20:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016c22:	429a      	cmp	r2, r3
 8016c24:	f0c0 80a0 	bcc.w	8016d68 <ip4_reass+0x2ac>
 8016c28:	8b7b      	ldrh	r3, [r7, #26]
 8016c2a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8016c2e:	4293      	cmp	r3, r2
 8016c30:	f200 809a 	bhi.w	8016d68 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8016c34:	69fa      	ldr	r2, [r7, #28]
 8016c36:	6879      	ldr	r1, [r7, #4]
 8016c38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016c3a:	f7ff fdd5 	bl	80167e8 <ip_reass_chain_frag_into_datagram_and_validate>
 8016c3e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8016c40:	697b      	ldr	r3, [r7, #20]
 8016c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016c46:	f000 8091 	beq.w	8016d6c <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8016c4a:	4b5b      	ldr	r3, [pc, #364]	; (8016db8 <ip4_reass+0x2fc>)
 8016c4c:	881a      	ldrh	r2, [r3, #0]
 8016c4e:	8c3b      	ldrh	r3, [r7, #32]
 8016c50:	4413      	add	r3, r2
 8016c52:	b29a      	uxth	r2, r3
 8016c54:	4b58      	ldr	r3, [pc, #352]	; (8016db8 <ip4_reass+0x2fc>)
 8016c56:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8016c58:	69fb      	ldr	r3, [r7, #28]
 8016c5a:	2b00      	cmp	r3, #0
 8016c5c:	d00d      	beq.n	8016c7a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8016c5e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016c60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016c62:	4413      	add	r3, r2
 8016c64:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8016c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c68:	8a7a      	ldrh	r2, [r7, #18]
 8016c6a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8016c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c6e:	7f9b      	ldrb	r3, [r3, #30]
 8016c70:	f043 0301 	orr.w	r3, r3, #1
 8016c74:	b2da      	uxtb	r2, r3
 8016c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c78:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8016c7a:	697b      	ldr	r3, [r7, #20]
 8016c7c:	2b01      	cmp	r3, #1
 8016c7e:	d171      	bne.n	8016d64 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8016c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c82:	8b9b      	ldrh	r3, [r3, #28]
 8016c84:	3314      	adds	r3, #20
 8016c86:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8016c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c8a:	685b      	ldr	r3, [r3, #4]
 8016c8c:	685b      	ldr	r3, [r3, #4]
 8016c8e:	681b      	ldr	r3, [r3, #0]
 8016c90:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8016c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c94:	685b      	ldr	r3, [r3, #4]
 8016c96:	685b      	ldr	r3, [r3, #4]
 8016c98:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8016c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c9c:	3308      	adds	r3, #8
 8016c9e:	2214      	movs	r2, #20
 8016ca0:	4619      	mov	r1, r3
 8016ca2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016ca4:	f003 fecf 	bl	801aa46 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8016ca8:	8a3b      	ldrh	r3, [r7, #16]
 8016caa:	4618      	mov	r0, r3
 8016cac:	f7f5 fcea 	bl	800c684 <lwip_htons>
 8016cb0:	4603      	mov	r3, r0
 8016cb2:	461a      	mov	r2, r3
 8016cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cb6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8016cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cba:	2200      	movs	r2, #0
 8016cbc:	719a      	strb	r2, [r3, #6]
 8016cbe:	2200      	movs	r2, #0
 8016cc0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8016cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cc4:	2200      	movs	r2, #0
 8016cc6:	729a      	strb	r2, [r3, #10]
 8016cc8:	2200      	movs	r2, #0
 8016cca:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8016ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cce:	685b      	ldr	r3, [r3, #4]
 8016cd0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8016cd2:	e00d      	b.n	8016cf0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8016cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016cd6:	685b      	ldr	r3, [r3, #4]
 8016cd8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8016cda:	2114      	movs	r1, #20
 8016cdc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8016cde:	f7f6 fff7 	bl	800dcd0 <pbuf_remove_header>
      pbuf_cat(p, r);
 8016ce2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016ce4:	6878      	ldr	r0, [r7, #4]
 8016ce6:	f7f7 f947 	bl	800df78 <pbuf_cat>
      r = iprh->next_pbuf;
 8016cea:	68fb      	ldr	r3, [r7, #12]
 8016cec:	681b      	ldr	r3, [r3, #0]
 8016cee:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8016cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016cf2:	2b00      	cmp	r3, #0
 8016cf4:	d1ee      	bne.n	8016cd4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8016cf6:	4b31      	ldr	r3, [pc, #196]	; (8016dbc <ip4_reass+0x300>)
 8016cf8:	681b      	ldr	r3, [r3, #0]
 8016cfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016cfc:	429a      	cmp	r2, r3
 8016cfe:	d102      	bne.n	8016d06 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8016d00:	2300      	movs	r3, #0
 8016d02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016d04:	e010      	b.n	8016d28 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016d06:	4b2d      	ldr	r3, [pc, #180]	; (8016dbc <ip4_reass+0x300>)
 8016d08:	681b      	ldr	r3, [r3, #0]
 8016d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016d0c:	e007      	b.n	8016d1e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8016d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d10:	681b      	ldr	r3, [r3, #0]
 8016d12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016d14:	429a      	cmp	r2, r3
 8016d16:	d006      	beq.n	8016d26 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d1a:	681b      	ldr	r3, [r3, #0]
 8016d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	d1f4      	bne.n	8016d0e <ip4_reass+0x252>
 8016d24:	e000      	b.n	8016d28 <ip4_reass+0x26c>
          break;
 8016d26:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8016d28:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016d2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016d2c:	f7ff fd2e 	bl	801678c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8016d30:	6878      	ldr	r0, [r7, #4]
 8016d32:	f7f7 f8e1 	bl	800def8 <pbuf_clen>
 8016d36:	4603      	mov	r3, r0
 8016d38:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8016d3a:	4b1f      	ldr	r3, [pc, #124]	; (8016db8 <ip4_reass+0x2fc>)
 8016d3c:	881b      	ldrh	r3, [r3, #0]
 8016d3e:	8c3a      	ldrh	r2, [r7, #32]
 8016d40:	429a      	cmp	r2, r3
 8016d42:	d906      	bls.n	8016d52 <ip4_reass+0x296>
 8016d44:	4b1e      	ldr	r3, [pc, #120]	; (8016dc0 <ip4_reass+0x304>)
 8016d46:	f240 229b 	movw	r2, #667	; 0x29b
 8016d4a:	491e      	ldr	r1, [pc, #120]	; (8016dc4 <ip4_reass+0x308>)
 8016d4c:	481e      	ldr	r0, [pc, #120]	; (8016dc8 <ip4_reass+0x30c>)
 8016d4e:	f004 f9d9 	bl	801b104 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8016d52:	4b19      	ldr	r3, [pc, #100]	; (8016db8 <ip4_reass+0x2fc>)
 8016d54:	881a      	ldrh	r2, [r3, #0]
 8016d56:	8c3b      	ldrh	r3, [r7, #32]
 8016d58:	1ad3      	subs	r3, r2, r3
 8016d5a:	b29a      	uxth	r2, r3
 8016d5c:	4b16      	ldr	r3, [pc, #88]	; (8016db8 <ip4_reass+0x2fc>)
 8016d5e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8016d60:	687b      	ldr	r3, [r7, #4]
 8016d62:	e03c      	b.n	8016dde <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8016d64:	2300      	movs	r3, #0
 8016d66:	e03a      	b.n	8016dde <ip4_reass+0x322>
      goto nullreturn_ipr;
 8016d68:	bf00      	nop
 8016d6a:	e000      	b.n	8016d6e <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8016d6c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8016d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d70:	2b00      	cmp	r3, #0
 8016d72:	d106      	bne.n	8016d82 <ip4_reass+0x2c6>
 8016d74:	4b12      	ldr	r3, [pc, #72]	; (8016dc0 <ip4_reass+0x304>)
 8016d76:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8016d7a:	4914      	ldr	r1, [pc, #80]	; (8016dcc <ip4_reass+0x310>)
 8016d7c:	4812      	ldr	r0, [pc, #72]	; (8016dc8 <ip4_reass+0x30c>)
 8016d7e:	f004 f9c1 	bl	801b104 <iprintf>
  if (ipr->p == NULL) {
 8016d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d84:	685b      	ldr	r3, [r3, #4]
 8016d86:	2b00      	cmp	r3, #0
 8016d88:	d124      	bne.n	8016dd4 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8016d8a:	4b0c      	ldr	r3, [pc, #48]	; (8016dbc <ip4_reass+0x300>)
 8016d8c:	681b      	ldr	r3, [r3, #0]
 8016d8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016d90:	429a      	cmp	r2, r3
 8016d92:	d006      	beq.n	8016da2 <ip4_reass+0x2e6>
 8016d94:	4b0a      	ldr	r3, [pc, #40]	; (8016dc0 <ip4_reass+0x304>)
 8016d96:	f240 22ab 	movw	r2, #683	; 0x2ab
 8016d9a:	490d      	ldr	r1, [pc, #52]	; (8016dd0 <ip4_reass+0x314>)
 8016d9c:	480a      	ldr	r0, [pc, #40]	; (8016dc8 <ip4_reass+0x30c>)
 8016d9e:	f004 f9b1 	bl	801b104 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8016da2:	2100      	movs	r1, #0
 8016da4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016da6:	f7ff fcf1 	bl	801678c <ip_reass_dequeue_datagram>
 8016daa:	e014      	b.n	8016dd6 <ip4_reass+0x31a>
    goto nullreturn;
 8016dac:	bf00      	nop
 8016dae:	e012      	b.n	8016dd6 <ip4_reass+0x31a>
    goto nullreturn;
 8016db0:	bf00      	nop
 8016db2:	e010      	b.n	8016dd6 <ip4_reass+0x31a>
      goto nullreturn;
 8016db4:	bf00      	nop
 8016db6:	e00e      	b.n	8016dd6 <ip4_reass+0x31a>
 8016db8:	20004cfc 	.word	0x20004cfc
 8016dbc:	20004cf8 	.word	0x20004cf8
 8016dc0:	0801ebe0 	.word	0x0801ebe0
 8016dc4:	0801ed50 	.word	0x0801ed50
 8016dc8:	0801ec28 	.word	0x0801ec28
 8016dcc:	0801ed6c 	.word	0x0801ed6c
 8016dd0:	0801ed78 	.word	0x0801ed78
  }

nullreturn:
 8016dd4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8016dd6:	6878      	ldr	r0, [r7, #4]
 8016dd8:	f7f7 f800 	bl	800dddc <pbuf_free>
  return NULL;
 8016ddc:	2300      	movs	r3, #0
}
 8016dde:	4618      	mov	r0, r3
 8016de0:	3738      	adds	r7, #56	; 0x38
 8016de2:	46bd      	mov	sp, r7
 8016de4:	bd80      	pop	{r7, pc}
 8016de6:	bf00      	nop

08016de8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8016de8:	b580      	push	{r7, lr}
 8016dea:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8016dec:	2005      	movs	r0, #5
 8016dee:	f7f6 f8ff 	bl	800cff0 <memp_malloc>
 8016df2:	4603      	mov	r3, r0
}
 8016df4:	4618      	mov	r0, r3
 8016df6:	bd80      	pop	{r7, pc}

08016df8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8016df8:	b580      	push	{r7, lr}
 8016dfa:	b082      	sub	sp, #8
 8016dfc:	af00      	add	r7, sp, #0
 8016dfe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8016e00:	687b      	ldr	r3, [r7, #4]
 8016e02:	2b00      	cmp	r3, #0
 8016e04:	d106      	bne.n	8016e14 <ip_frag_free_pbuf_custom_ref+0x1c>
 8016e06:	4b07      	ldr	r3, [pc, #28]	; (8016e24 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8016e08:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8016e0c:	4906      	ldr	r1, [pc, #24]	; (8016e28 <ip_frag_free_pbuf_custom_ref+0x30>)
 8016e0e:	4807      	ldr	r0, [pc, #28]	; (8016e2c <ip_frag_free_pbuf_custom_ref+0x34>)
 8016e10:	f004 f978 	bl	801b104 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8016e14:	6879      	ldr	r1, [r7, #4]
 8016e16:	2005      	movs	r0, #5
 8016e18:	f7f6 f93c 	bl	800d094 <memp_free>
}
 8016e1c:	bf00      	nop
 8016e1e:	3708      	adds	r7, #8
 8016e20:	46bd      	mov	sp, r7
 8016e22:	bd80      	pop	{r7, pc}
 8016e24:	0801ebe0 	.word	0x0801ebe0
 8016e28:	0801ed98 	.word	0x0801ed98
 8016e2c:	0801ec28 	.word	0x0801ec28

08016e30 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8016e30:	b580      	push	{r7, lr}
 8016e32:	b084      	sub	sp, #16
 8016e34:	af00      	add	r7, sp, #0
 8016e36:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8016e38:	687b      	ldr	r3, [r7, #4]
 8016e3a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8016e3c:	68fb      	ldr	r3, [r7, #12]
 8016e3e:	2b00      	cmp	r3, #0
 8016e40:	d106      	bne.n	8016e50 <ipfrag_free_pbuf_custom+0x20>
 8016e42:	4b11      	ldr	r3, [pc, #68]	; (8016e88 <ipfrag_free_pbuf_custom+0x58>)
 8016e44:	f240 22ce 	movw	r2, #718	; 0x2ce
 8016e48:	4910      	ldr	r1, [pc, #64]	; (8016e8c <ipfrag_free_pbuf_custom+0x5c>)
 8016e4a:	4811      	ldr	r0, [pc, #68]	; (8016e90 <ipfrag_free_pbuf_custom+0x60>)
 8016e4c:	f004 f95a 	bl	801b104 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8016e50:	68fa      	ldr	r2, [r7, #12]
 8016e52:	687b      	ldr	r3, [r7, #4]
 8016e54:	429a      	cmp	r2, r3
 8016e56:	d006      	beq.n	8016e66 <ipfrag_free_pbuf_custom+0x36>
 8016e58:	4b0b      	ldr	r3, [pc, #44]	; (8016e88 <ipfrag_free_pbuf_custom+0x58>)
 8016e5a:	f240 22cf 	movw	r2, #719	; 0x2cf
 8016e5e:	490d      	ldr	r1, [pc, #52]	; (8016e94 <ipfrag_free_pbuf_custom+0x64>)
 8016e60:	480b      	ldr	r0, [pc, #44]	; (8016e90 <ipfrag_free_pbuf_custom+0x60>)
 8016e62:	f004 f94f 	bl	801b104 <iprintf>
  if (pcr->original != NULL) {
 8016e66:	68fb      	ldr	r3, [r7, #12]
 8016e68:	695b      	ldr	r3, [r3, #20]
 8016e6a:	2b00      	cmp	r3, #0
 8016e6c:	d004      	beq.n	8016e78 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8016e6e:	68fb      	ldr	r3, [r7, #12]
 8016e70:	695b      	ldr	r3, [r3, #20]
 8016e72:	4618      	mov	r0, r3
 8016e74:	f7f6 ffb2 	bl	800dddc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8016e78:	68f8      	ldr	r0, [r7, #12]
 8016e7a:	f7ff ffbd 	bl	8016df8 <ip_frag_free_pbuf_custom_ref>
}
 8016e7e:	bf00      	nop
 8016e80:	3710      	adds	r7, #16
 8016e82:	46bd      	mov	sp, r7
 8016e84:	bd80      	pop	{r7, pc}
 8016e86:	bf00      	nop
 8016e88:	0801ebe0 	.word	0x0801ebe0
 8016e8c:	0801eda4 	.word	0x0801eda4
 8016e90:	0801ec28 	.word	0x0801ec28
 8016e94:	0801edb0 	.word	0x0801edb0

08016e98 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8016e98:	b580      	push	{r7, lr}
 8016e9a:	b094      	sub	sp, #80	; 0x50
 8016e9c:	af02      	add	r7, sp, #8
 8016e9e:	60f8      	str	r0, [r7, #12]
 8016ea0:	60b9      	str	r1, [r7, #8]
 8016ea2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8016ea4:	2300      	movs	r3, #0
 8016ea6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8016eaa:	68bb      	ldr	r3, [r7, #8]
 8016eac:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016eae:	3b14      	subs	r3, #20
 8016eb0:	2b00      	cmp	r3, #0
 8016eb2:	da00      	bge.n	8016eb6 <ip4_frag+0x1e>
 8016eb4:	3307      	adds	r3, #7
 8016eb6:	10db      	asrs	r3, r3, #3
 8016eb8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8016eba:	2314      	movs	r3, #20
 8016ebc:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8016ebe:	68fb      	ldr	r3, [r7, #12]
 8016ec0:	685b      	ldr	r3, [r3, #4]
 8016ec2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8016ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016ec6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8016ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016eca:	781b      	ldrb	r3, [r3, #0]
 8016ecc:	f003 030f 	and.w	r3, r3, #15
 8016ed0:	b2db      	uxtb	r3, r3
 8016ed2:	009b      	lsls	r3, r3, #2
 8016ed4:	b2db      	uxtb	r3, r3
 8016ed6:	2b14      	cmp	r3, #20
 8016ed8:	d002      	beq.n	8016ee0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8016eda:	f06f 0305 	mvn.w	r3, #5
 8016ede:	e110      	b.n	8017102 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8016ee0:	68fb      	ldr	r3, [r7, #12]
 8016ee2:	895b      	ldrh	r3, [r3, #10]
 8016ee4:	2b13      	cmp	r3, #19
 8016ee6:	d809      	bhi.n	8016efc <ip4_frag+0x64>
 8016ee8:	4b88      	ldr	r3, [pc, #544]	; (801710c <ip4_frag+0x274>)
 8016eea:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8016eee:	4988      	ldr	r1, [pc, #544]	; (8017110 <ip4_frag+0x278>)
 8016ef0:	4888      	ldr	r0, [pc, #544]	; (8017114 <ip4_frag+0x27c>)
 8016ef2:	f004 f907 	bl	801b104 <iprintf>
 8016ef6:	f06f 0305 	mvn.w	r3, #5
 8016efa:	e102      	b.n	8017102 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8016efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016efe:	88db      	ldrh	r3, [r3, #6]
 8016f00:	b29b      	uxth	r3, r3
 8016f02:	4618      	mov	r0, r3
 8016f04:	f7f5 fbbe 	bl	800c684 <lwip_htons>
 8016f08:	4603      	mov	r3, r0
 8016f0a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8016f0c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016f0e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016f12:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8016f16:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016f18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016f1c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8016f1e:	68fb      	ldr	r3, [r7, #12]
 8016f20:	891b      	ldrh	r3, [r3, #8]
 8016f22:	3b14      	subs	r3, #20
 8016f24:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8016f28:	e0e1      	b.n	80170ee <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8016f2a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016f2c:	00db      	lsls	r3, r3, #3
 8016f2e:	b29b      	uxth	r3, r3
 8016f30:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016f34:	4293      	cmp	r3, r2
 8016f36:	bf28      	it	cs
 8016f38:	4613      	movcs	r3, r2
 8016f3a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8016f3c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016f40:	2114      	movs	r1, #20
 8016f42:	200e      	movs	r0, #14
 8016f44:	f7f6 fc66 	bl	800d814 <pbuf_alloc>
 8016f48:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8016f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f4c:	2b00      	cmp	r3, #0
 8016f4e:	f000 80d5 	beq.w	80170fc <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8016f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f54:	895b      	ldrh	r3, [r3, #10]
 8016f56:	2b13      	cmp	r3, #19
 8016f58:	d806      	bhi.n	8016f68 <ip4_frag+0xd0>
 8016f5a:	4b6c      	ldr	r3, [pc, #432]	; (801710c <ip4_frag+0x274>)
 8016f5c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8016f60:	496d      	ldr	r1, [pc, #436]	; (8017118 <ip4_frag+0x280>)
 8016f62:	486c      	ldr	r0, [pc, #432]	; (8017114 <ip4_frag+0x27c>)
 8016f64:	f004 f8ce 	bl	801b104 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8016f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f6a:	685b      	ldr	r3, [r3, #4]
 8016f6c:	2214      	movs	r2, #20
 8016f6e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016f70:	4618      	mov	r0, r3
 8016f72:	f003 fd68 	bl	801aa46 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8016f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f78:	685b      	ldr	r3, [r3, #4]
 8016f7a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8016f7c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016f7e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8016f82:	e064      	b.n	801704e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8016f84:	68fb      	ldr	r3, [r7, #12]
 8016f86:	895a      	ldrh	r2, [r3, #10]
 8016f88:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016f8a:	1ad3      	subs	r3, r2, r3
 8016f8c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8016f8e:	68fb      	ldr	r3, [r7, #12]
 8016f90:	895b      	ldrh	r3, [r3, #10]
 8016f92:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016f94:	429a      	cmp	r2, r3
 8016f96:	d906      	bls.n	8016fa6 <ip4_frag+0x10e>
 8016f98:	4b5c      	ldr	r3, [pc, #368]	; (801710c <ip4_frag+0x274>)
 8016f9a:	f240 322d 	movw	r2, #813	; 0x32d
 8016f9e:	495f      	ldr	r1, [pc, #380]	; (801711c <ip4_frag+0x284>)
 8016fa0:	485c      	ldr	r0, [pc, #368]	; (8017114 <ip4_frag+0x27c>)
 8016fa2:	f004 f8af 	bl	801b104 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8016fa6:	8bfa      	ldrh	r2, [r7, #30]
 8016fa8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016fac:	4293      	cmp	r3, r2
 8016fae:	bf28      	it	cs
 8016fb0:	4613      	movcs	r3, r2
 8016fb2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8016fb6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016fba:	2b00      	cmp	r3, #0
 8016fbc:	d105      	bne.n	8016fca <ip4_frag+0x132>
        poff = 0;
 8016fbe:	2300      	movs	r3, #0
 8016fc0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016fc2:	68fb      	ldr	r3, [r7, #12]
 8016fc4:	681b      	ldr	r3, [r3, #0]
 8016fc6:	60fb      	str	r3, [r7, #12]
        continue;
 8016fc8:	e041      	b.n	801704e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8016fca:	f7ff ff0d 	bl	8016de8 <ip_frag_alloc_pbuf_custom_ref>
 8016fce:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8016fd0:	69bb      	ldr	r3, [r7, #24]
 8016fd2:	2b00      	cmp	r3, #0
 8016fd4:	d103      	bne.n	8016fde <ip4_frag+0x146>
        pbuf_free(rambuf);
 8016fd6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016fd8:	f7f6 ff00 	bl	800dddc <pbuf_free>
        goto memerr;
 8016fdc:	e08f      	b.n	80170fe <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016fde:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8016fe0:	68fb      	ldr	r3, [r7, #12]
 8016fe2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016fe4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016fe6:	4413      	add	r3, r2
 8016fe8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8016fec:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8016ff0:	9201      	str	r2, [sp, #4]
 8016ff2:	9300      	str	r3, [sp, #0]
 8016ff4:	4603      	mov	r3, r0
 8016ff6:	2241      	movs	r2, #65	; 0x41
 8016ff8:	2000      	movs	r0, #0
 8016ffa:	f7f6 fd35 	bl	800da68 <pbuf_alloced_custom>
 8016ffe:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8017000:	697b      	ldr	r3, [r7, #20]
 8017002:	2b00      	cmp	r3, #0
 8017004:	d106      	bne.n	8017014 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8017006:	69b8      	ldr	r0, [r7, #24]
 8017008:	f7ff fef6 	bl	8016df8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801700c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801700e:	f7f6 fee5 	bl	800dddc <pbuf_free>
        goto memerr;
 8017012:	e074      	b.n	80170fe <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8017014:	68f8      	ldr	r0, [r7, #12]
 8017016:	f7f6 ff87 	bl	800df28 <pbuf_ref>
      pcr->original = p;
 801701a:	69bb      	ldr	r3, [r7, #24]
 801701c:	68fa      	ldr	r2, [r7, #12]
 801701e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8017020:	69bb      	ldr	r3, [r7, #24]
 8017022:	4a3f      	ldr	r2, [pc, #252]	; (8017120 <ip4_frag+0x288>)
 8017024:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8017026:	6979      	ldr	r1, [r7, #20]
 8017028:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801702a:	f7f6 ffa5 	bl	800df78 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801702e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8017032:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017036:	1ad3      	subs	r3, r2, r3
 8017038:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801703c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017040:	2b00      	cmp	r3, #0
 8017042:	d004      	beq.n	801704e <ip4_frag+0x1b6>
        poff = 0;
 8017044:	2300      	movs	r3, #0
 8017046:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8017048:	68fb      	ldr	r3, [r7, #12]
 801704a:	681b      	ldr	r3, [r3, #0]
 801704c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801704e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017052:	2b00      	cmp	r3, #0
 8017054:	d196      	bne.n	8016f84 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8017056:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017058:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801705c:	4413      	add	r3, r2
 801705e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8017060:	68bb      	ldr	r3, [r7, #8]
 8017062:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017064:	f1a3 0213 	sub.w	r2, r3, #19
 8017068:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801706c:	429a      	cmp	r2, r3
 801706e:	bfcc      	ite	gt
 8017070:	2301      	movgt	r3, #1
 8017072:	2300      	movle	r3, #0
 8017074:	b2db      	uxtb	r3, r3
 8017076:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8017078:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801707c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017080:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8017082:	6a3b      	ldr	r3, [r7, #32]
 8017084:	2b00      	cmp	r3, #0
 8017086:	d002      	beq.n	801708e <ip4_frag+0x1f6>
 8017088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801708a:	2b00      	cmp	r3, #0
 801708c:	d003      	beq.n	8017096 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801708e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017090:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8017094:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8017096:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017098:	4618      	mov	r0, r3
 801709a:	f7f5 faf3 	bl	800c684 <lwip_htons>
 801709e:	4603      	mov	r3, r0
 80170a0:	461a      	mov	r2, r3
 80170a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170a4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80170a6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80170a8:	3314      	adds	r3, #20
 80170aa:	b29b      	uxth	r3, r3
 80170ac:	4618      	mov	r0, r3
 80170ae:	f7f5 fae9 	bl	800c684 <lwip_htons>
 80170b2:	4603      	mov	r3, r0
 80170b4:	461a      	mov	r2, r3
 80170b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170b8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80170ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170bc:	2200      	movs	r2, #0
 80170be:	729a      	strb	r2, [r3, #10]
 80170c0:	2200      	movs	r2, #0
 80170c2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80170c4:	68bb      	ldr	r3, [r7, #8]
 80170c6:	695b      	ldr	r3, [r3, #20]
 80170c8:	687a      	ldr	r2, [r7, #4]
 80170ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80170cc:	68b8      	ldr	r0, [r7, #8]
 80170ce:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80170d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80170d2:	f7f6 fe83 	bl	800dddc <pbuf_free>
    left = (u16_t)(left - fragsize);
 80170d6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80170da:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80170dc:	1ad3      	subs	r3, r2, r3
 80170de:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80170e2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80170e6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80170e8:	4413      	add	r3, r2
 80170ea:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80170ee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80170f2:	2b00      	cmp	r3, #0
 80170f4:	f47f af19 	bne.w	8016f2a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80170f8:	2300      	movs	r3, #0
 80170fa:	e002      	b.n	8017102 <ip4_frag+0x26a>
      goto memerr;
 80170fc:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80170fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017102:	4618      	mov	r0, r3
 8017104:	3748      	adds	r7, #72	; 0x48
 8017106:	46bd      	mov	sp, r7
 8017108:	bd80      	pop	{r7, pc}
 801710a:	bf00      	nop
 801710c:	0801ebe0 	.word	0x0801ebe0
 8017110:	0801edbc 	.word	0x0801edbc
 8017114:	0801ec28 	.word	0x0801ec28
 8017118:	0801edd8 	.word	0x0801edd8
 801711c:	0801edf8 	.word	0x0801edf8
 8017120:	08016e31 	.word	0x08016e31

08017124 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8017124:	b580      	push	{r7, lr}
 8017126:	b086      	sub	sp, #24
 8017128:	af00      	add	r7, sp, #0
 801712a:	6078      	str	r0, [r7, #4]
 801712c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801712e:	230e      	movs	r3, #14
 8017130:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8017132:	687b      	ldr	r3, [r7, #4]
 8017134:	895b      	ldrh	r3, [r3, #10]
 8017136:	2b0e      	cmp	r3, #14
 8017138:	d96e      	bls.n	8017218 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801713a:	687b      	ldr	r3, [r7, #4]
 801713c:	7bdb      	ldrb	r3, [r3, #15]
 801713e:	2b00      	cmp	r3, #0
 8017140:	d106      	bne.n	8017150 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8017142:	683b      	ldr	r3, [r7, #0]
 8017144:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017148:	3301      	adds	r3, #1
 801714a:	b2da      	uxtb	r2, r3
 801714c:	687b      	ldr	r3, [r7, #4]
 801714e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8017150:	687b      	ldr	r3, [r7, #4]
 8017152:	685b      	ldr	r3, [r3, #4]
 8017154:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8017156:	693b      	ldr	r3, [r7, #16]
 8017158:	7b1a      	ldrb	r2, [r3, #12]
 801715a:	7b5b      	ldrb	r3, [r3, #13]
 801715c:	021b      	lsls	r3, r3, #8
 801715e:	4313      	orrs	r3, r2
 8017160:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8017162:	693b      	ldr	r3, [r7, #16]
 8017164:	781b      	ldrb	r3, [r3, #0]
 8017166:	f003 0301 	and.w	r3, r3, #1
 801716a:	2b00      	cmp	r3, #0
 801716c:	d023      	beq.n	80171b6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801716e:	693b      	ldr	r3, [r7, #16]
 8017170:	781b      	ldrb	r3, [r3, #0]
 8017172:	2b01      	cmp	r3, #1
 8017174:	d10f      	bne.n	8017196 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017176:	693b      	ldr	r3, [r7, #16]
 8017178:	785b      	ldrb	r3, [r3, #1]
 801717a:	2b00      	cmp	r3, #0
 801717c:	d11b      	bne.n	80171b6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801717e:	693b      	ldr	r3, [r7, #16]
 8017180:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017182:	2b5e      	cmp	r3, #94	; 0x5e
 8017184:	d117      	bne.n	80171b6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8017186:	687b      	ldr	r3, [r7, #4]
 8017188:	7b5b      	ldrb	r3, [r3, #13]
 801718a:	f043 0310 	orr.w	r3, r3, #16
 801718e:	b2da      	uxtb	r2, r3
 8017190:	687b      	ldr	r3, [r7, #4]
 8017192:	735a      	strb	r2, [r3, #13]
 8017194:	e00f      	b.n	80171b6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8017196:	693b      	ldr	r3, [r7, #16]
 8017198:	2206      	movs	r2, #6
 801719a:	4928      	ldr	r1, [pc, #160]	; (801723c <ethernet_input+0x118>)
 801719c:	4618      	mov	r0, r3
 801719e:	f003 fc44 	bl	801aa2a <memcmp>
 80171a2:	4603      	mov	r3, r0
 80171a4:	2b00      	cmp	r3, #0
 80171a6:	d106      	bne.n	80171b6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80171a8:	687b      	ldr	r3, [r7, #4]
 80171aa:	7b5b      	ldrb	r3, [r3, #13]
 80171ac:	f043 0308 	orr.w	r3, r3, #8
 80171b0:	b2da      	uxtb	r2, r3
 80171b2:	687b      	ldr	r3, [r7, #4]
 80171b4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80171b6:	89fb      	ldrh	r3, [r7, #14]
 80171b8:	2b08      	cmp	r3, #8
 80171ba:	d003      	beq.n	80171c4 <ethernet_input+0xa0>
 80171bc:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80171c0:	d014      	beq.n	80171ec <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80171c2:	e032      	b.n	801722a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80171c4:	683b      	ldr	r3, [r7, #0]
 80171c6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80171ca:	f003 0308 	and.w	r3, r3, #8
 80171ce:	2b00      	cmp	r3, #0
 80171d0:	d024      	beq.n	801721c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80171d2:	8afb      	ldrh	r3, [r7, #22]
 80171d4:	4619      	mov	r1, r3
 80171d6:	6878      	ldr	r0, [r7, #4]
 80171d8:	f7f6 fd7a 	bl	800dcd0 <pbuf_remove_header>
 80171dc:	4603      	mov	r3, r0
 80171de:	2b00      	cmp	r3, #0
 80171e0:	d11e      	bne.n	8017220 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80171e2:	6839      	ldr	r1, [r7, #0]
 80171e4:	6878      	ldr	r0, [r7, #4]
 80171e6:	f7fe ff27 	bl	8016038 <ip4_input>
      break;
 80171ea:	e013      	b.n	8017214 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80171ec:	683b      	ldr	r3, [r7, #0]
 80171ee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80171f2:	f003 0308 	and.w	r3, r3, #8
 80171f6:	2b00      	cmp	r3, #0
 80171f8:	d014      	beq.n	8017224 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80171fa:	8afb      	ldrh	r3, [r7, #22]
 80171fc:	4619      	mov	r1, r3
 80171fe:	6878      	ldr	r0, [r7, #4]
 8017200:	f7f6 fd66 	bl	800dcd0 <pbuf_remove_header>
 8017204:	4603      	mov	r3, r0
 8017206:	2b00      	cmp	r3, #0
 8017208:	d10e      	bne.n	8017228 <ethernet_input+0x104>
        etharp_input(p, netif);
 801720a:	6839      	ldr	r1, [r7, #0]
 801720c:	6878      	ldr	r0, [r7, #4]
 801720e:	f7fe f8c7 	bl	80153a0 <etharp_input>
      break;
 8017212:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8017214:	2300      	movs	r3, #0
 8017216:	e00c      	b.n	8017232 <ethernet_input+0x10e>
    goto free_and_return;
 8017218:	bf00      	nop
 801721a:	e006      	b.n	801722a <ethernet_input+0x106>
        goto free_and_return;
 801721c:	bf00      	nop
 801721e:	e004      	b.n	801722a <ethernet_input+0x106>
        goto free_and_return;
 8017220:	bf00      	nop
 8017222:	e002      	b.n	801722a <ethernet_input+0x106>
        goto free_and_return;
 8017224:	bf00      	nop
 8017226:	e000      	b.n	801722a <ethernet_input+0x106>
        goto free_and_return;
 8017228:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801722a:	6878      	ldr	r0, [r7, #4]
 801722c:	f7f6 fdd6 	bl	800dddc <pbuf_free>
  return ERR_OK;
 8017230:	2300      	movs	r3, #0
}
 8017232:	4618      	mov	r0, r3
 8017234:	3718      	adds	r7, #24
 8017236:	46bd      	mov	sp, r7
 8017238:	bd80      	pop	{r7, pc}
 801723a:	bf00      	nop
 801723c:	0801f158 	.word	0x0801f158

08017240 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8017240:	b580      	push	{r7, lr}
 8017242:	b086      	sub	sp, #24
 8017244:	af00      	add	r7, sp, #0
 8017246:	60f8      	str	r0, [r7, #12]
 8017248:	60b9      	str	r1, [r7, #8]
 801724a:	607a      	str	r2, [r7, #4]
 801724c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801724e:	8c3b      	ldrh	r3, [r7, #32]
 8017250:	4618      	mov	r0, r3
 8017252:	f7f5 fa17 	bl	800c684 <lwip_htons>
 8017256:	4603      	mov	r3, r0
 8017258:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801725a:	210e      	movs	r1, #14
 801725c:	68b8      	ldr	r0, [r7, #8]
 801725e:	f7f6 fd27 	bl	800dcb0 <pbuf_add_header>
 8017262:	4603      	mov	r3, r0
 8017264:	2b00      	cmp	r3, #0
 8017266:	d125      	bne.n	80172b4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8017268:	68bb      	ldr	r3, [r7, #8]
 801726a:	685b      	ldr	r3, [r3, #4]
 801726c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801726e:	693b      	ldr	r3, [r7, #16]
 8017270:	8afa      	ldrh	r2, [r7, #22]
 8017272:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8017274:	693b      	ldr	r3, [r7, #16]
 8017276:	2206      	movs	r2, #6
 8017278:	6839      	ldr	r1, [r7, #0]
 801727a:	4618      	mov	r0, r3
 801727c:	f003 fbe3 	bl	801aa46 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8017280:	693b      	ldr	r3, [r7, #16]
 8017282:	3306      	adds	r3, #6
 8017284:	2206      	movs	r2, #6
 8017286:	6879      	ldr	r1, [r7, #4]
 8017288:	4618      	mov	r0, r3
 801728a:	f003 fbdc 	bl	801aa46 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801728e:	68fb      	ldr	r3, [r7, #12]
 8017290:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8017294:	2b06      	cmp	r3, #6
 8017296:	d006      	beq.n	80172a6 <ethernet_output+0x66>
 8017298:	4b0a      	ldr	r3, [pc, #40]	; (80172c4 <ethernet_output+0x84>)
 801729a:	f44f 7299 	mov.w	r2, #306	; 0x132
 801729e:	490a      	ldr	r1, [pc, #40]	; (80172c8 <ethernet_output+0x88>)
 80172a0:	480a      	ldr	r0, [pc, #40]	; (80172cc <ethernet_output+0x8c>)
 80172a2:	f003 ff2f 	bl	801b104 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80172a6:	68fb      	ldr	r3, [r7, #12]
 80172a8:	699b      	ldr	r3, [r3, #24]
 80172aa:	68b9      	ldr	r1, [r7, #8]
 80172ac:	68f8      	ldr	r0, [r7, #12]
 80172ae:	4798      	blx	r3
 80172b0:	4603      	mov	r3, r0
 80172b2:	e002      	b.n	80172ba <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80172b4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80172b6:	f06f 0301 	mvn.w	r3, #1
}
 80172ba:	4618      	mov	r0, r3
 80172bc:	3718      	adds	r7, #24
 80172be:	46bd      	mov	sp, r7
 80172c0:	bd80      	pop	{r7, pc}
 80172c2:	bf00      	nop
 80172c4:	0801ee08 	.word	0x0801ee08
 80172c8:	0801ee40 	.word	0x0801ee40
 80172cc:	0801ee74 	.word	0x0801ee74

080172d0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80172d0:	b580      	push	{r7, lr}
 80172d2:	b082      	sub	sp, #8
 80172d4:	af00      	add	r7, sp, #0
 80172d6:	6078      	str	r0, [r7, #4]
 80172d8:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 80172da:	683b      	ldr	r3, [r7, #0]
 80172dc:	2200      	movs	r2, #0
 80172de:	2104      	movs	r1, #4
 80172e0:	4618      	mov	r0, r3
 80172e2:	f7ef f929 	bl	8006538 <osMessageQueueNew>
 80172e6:	4602      	mov	r2, r0
 80172e8:	687b      	ldr	r3, [r7, #4]
 80172ea:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	681b      	ldr	r3, [r3, #0]
 80172f0:	2b00      	cmp	r3, #0
 80172f2:	d102      	bne.n	80172fa <sys_mbox_new+0x2a>
    return ERR_MEM;
 80172f4:	f04f 33ff 	mov.w	r3, #4294967295
 80172f8:	e000      	b.n	80172fc <sys_mbox_new+0x2c>

  return ERR_OK;
 80172fa:	2300      	movs	r3, #0
}
 80172fc:	4618      	mov	r0, r3
 80172fe:	3708      	adds	r7, #8
 8017300:	46bd      	mov	sp, r7
 8017302:	bd80      	pop	{r7, pc}

08017304 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8017304:	b580      	push	{r7, lr}
 8017306:	b082      	sub	sp, #8
 8017308:	af00      	add	r7, sp, #0
 801730a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 801730c:	687b      	ldr	r3, [r7, #4]
 801730e:	681b      	ldr	r3, [r3, #0]
 8017310:	4618      	mov	r0, r3
 8017312:	f7ef fa7d 	bl	8006810 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 8017316:	687b      	ldr	r3, [r7, #4]
 8017318:	681b      	ldr	r3, [r3, #0]
 801731a:	4618      	mov	r0, r3
 801731c:	f7ef faaa 	bl	8006874 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8017320:	bf00      	nop
 8017322:	3708      	adds	r7, #8
 8017324:	46bd      	mov	sp, r7
 8017326:	bd80      	pop	{r7, pc}

08017328 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8017328:	b580      	push	{r7, lr}
 801732a:	b084      	sub	sp, #16
 801732c:	af00      	add	r7, sp, #0
 801732e:	6078      	str	r0, [r7, #4]
 8017330:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8017332:	687b      	ldr	r3, [r7, #4]
 8017334:	6818      	ldr	r0, [r3, #0]
 8017336:	4639      	mov	r1, r7
 8017338:	2300      	movs	r3, #0
 801733a:	2200      	movs	r2, #0
 801733c:	f7ef f982 	bl	8006644 <osMessageQueuePut>
 8017340:	4603      	mov	r3, r0
 8017342:	2b00      	cmp	r3, #0
 8017344:	d102      	bne.n	801734c <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8017346:	2300      	movs	r3, #0
 8017348:	73fb      	strb	r3, [r7, #15]
 801734a:	e001      	b.n	8017350 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801734c:	23ff      	movs	r3, #255	; 0xff
 801734e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8017350:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017354:	4618      	mov	r0, r3
 8017356:	3710      	adds	r7, #16
 8017358:	46bd      	mov	sp, r7
 801735a:	bd80      	pop	{r7, pc}

0801735c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801735c:	b580      	push	{r7, lr}
 801735e:	b086      	sub	sp, #24
 8017360:	af00      	add	r7, sp, #0
 8017362:	60f8      	str	r0, [r7, #12]
 8017364:	60b9      	str	r1, [r7, #8]
 8017366:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8017368:	f7ee fd12 	bl	8005d90 <osKernelGetTickCount>
 801736c:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801736e:	687b      	ldr	r3, [r7, #4]
 8017370:	2b00      	cmp	r3, #0
 8017372:	d013      	beq.n	801739c <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8017374:	68fb      	ldr	r3, [r7, #12]
 8017376:	6818      	ldr	r0, [r3, #0]
 8017378:	687b      	ldr	r3, [r7, #4]
 801737a:	2200      	movs	r2, #0
 801737c:	68b9      	ldr	r1, [r7, #8]
 801737e:	f7ef f9d5 	bl	800672c <osMessageQueueGet>
 8017382:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8017384:	693b      	ldr	r3, [r7, #16]
 8017386:	2b00      	cmp	r3, #0
 8017388:	d105      	bne.n	8017396 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801738a:	f7ee fd01 	bl	8005d90 <osKernelGetTickCount>
 801738e:	4602      	mov	r2, r0
 8017390:	697b      	ldr	r3, [r7, #20]
 8017392:	1ad3      	subs	r3, r2, r3
 8017394:	e00f      	b.n	80173b6 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8017396:	f04f 33ff 	mov.w	r3, #4294967295
 801739a:	e00c      	b.n	80173b6 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801739c:	68fb      	ldr	r3, [r7, #12]
 801739e:	6818      	ldr	r0, [r3, #0]
 80173a0:	f04f 33ff 	mov.w	r3, #4294967295
 80173a4:	2200      	movs	r2, #0
 80173a6:	68b9      	ldr	r1, [r7, #8]
 80173a8:	f7ef f9c0 	bl	800672c <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 80173ac:	f7ee fcf0 	bl	8005d90 <osKernelGetTickCount>
 80173b0:	4602      	mov	r2, r0
 80173b2:	697b      	ldr	r3, [r7, #20]
 80173b4:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 80173b6:	4618      	mov	r0, r3
 80173b8:	3718      	adds	r7, #24
 80173ba:	46bd      	mov	sp, r7
 80173bc:	bd80      	pop	{r7, pc}

080173be <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 80173be:	b580      	push	{r7, lr}
 80173c0:	b082      	sub	sp, #8
 80173c2:	af00      	add	r7, sp, #0
 80173c4:	6078      	str	r0, [r7, #4]
 80173c6:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 80173c8:	687b      	ldr	r3, [r7, #4]
 80173ca:	6818      	ldr	r0, [r3, #0]
 80173cc:	2300      	movs	r3, #0
 80173ce:	2200      	movs	r2, #0
 80173d0:	6839      	ldr	r1, [r7, #0]
 80173d2:	f7ef f9ab 	bl	800672c <osMessageQueueGet>
 80173d6:	4603      	mov	r3, r0
 80173d8:	2b00      	cmp	r3, #0
 80173da:	d101      	bne.n	80173e0 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 80173dc:	2300      	movs	r3, #0
 80173de:	e001      	b.n	80173e4 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 80173e0:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 80173e4:	4618      	mov	r0, r3
 80173e6:	3708      	adds	r7, #8
 80173e8:	46bd      	mov	sp, r7
 80173ea:	bd80      	pop	{r7, pc}

080173ec <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80173ec:	b480      	push	{r7}
 80173ee:	b083      	sub	sp, #12
 80173f0:	af00      	add	r7, sp, #0
 80173f2:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80173f4:	687b      	ldr	r3, [r7, #4]
 80173f6:	681b      	ldr	r3, [r3, #0]
 80173f8:	2b00      	cmp	r3, #0
 80173fa:	d101      	bne.n	8017400 <sys_mbox_valid+0x14>
    return 0;
 80173fc:	2300      	movs	r3, #0
 80173fe:	e000      	b.n	8017402 <sys_mbox_valid+0x16>
  else
    return 1;
 8017400:	2301      	movs	r3, #1
}
 8017402:	4618      	mov	r0, r3
 8017404:	370c      	adds	r7, #12
 8017406:	46bd      	mov	sp, r7
 8017408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801740c:	4770      	bx	lr

0801740e <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801740e:	b480      	push	{r7}
 8017410:	b083      	sub	sp, #12
 8017412:	af00      	add	r7, sp, #0
 8017414:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8017416:	687b      	ldr	r3, [r7, #4]
 8017418:	2200      	movs	r2, #0
 801741a:	601a      	str	r2, [r3, #0]
}
 801741c:	bf00      	nop
 801741e:	370c      	adds	r7, #12
 8017420:	46bd      	mov	sp, r7
 8017422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017426:	4770      	bx	lr

08017428 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8017428:	b580      	push	{r7, lr}
 801742a:	b082      	sub	sp, #8
 801742c:	af00      	add	r7, sp, #0
 801742e:	6078      	str	r0, [r7, #4]
 8017430:	460b      	mov	r3, r1
 8017432:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 8017434:	78fb      	ldrb	r3, [r7, #3]
 8017436:	2200      	movs	r2, #0
 8017438:	4619      	mov	r1, r3
 801743a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801743e:	f7ee feeb 	bl	8006218 <osSemaphoreNew>
 8017442:	4602      	mov	r2, r0
 8017444:	687b      	ldr	r3, [r7, #4]
 8017446:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 8017448:	687b      	ldr	r3, [r7, #4]
 801744a:	681b      	ldr	r3, [r3, #0]
 801744c:	2b00      	cmp	r3, #0
 801744e:	d102      	bne.n	8017456 <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8017450:	f04f 33ff 	mov.w	r3, #4294967295
 8017454:	e009      	b.n	801746a <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 8017456:	78fb      	ldrb	r3, [r7, #3]
 8017458:	2b00      	cmp	r3, #0
 801745a:	d105      	bne.n	8017468 <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 801745c:	687b      	ldr	r3, [r7, #4]
 801745e:	681b      	ldr	r3, [r3, #0]
 8017460:	2100      	movs	r1, #0
 8017462:	4618      	mov	r0, r3
 8017464:	f7ee ff74 	bl	8006350 <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8017468:	2300      	movs	r3, #0
}
 801746a:	4618      	mov	r0, r3
 801746c:	3708      	adds	r7, #8
 801746e:	46bd      	mov	sp, r7
 8017470:	bd80      	pop	{r7, pc}

08017472 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8017472:	b580      	push	{r7, lr}
 8017474:	b084      	sub	sp, #16
 8017476:	af00      	add	r7, sp, #0
 8017478:	6078      	str	r0, [r7, #4]
 801747a:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 801747c:	f7ee fc88 	bl	8005d90 <osKernelGetTickCount>
 8017480:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 8017482:	683b      	ldr	r3, [r7, #0]
 8017484:	2b00      	cmp	r3, #0
 8017486:	d011      	beq.n	80174ac <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 8017488:	687b      	ldr	r3, [r7, #4]
 801748a:	681b      	ldr	r3, [r3, #0]
 801748c:	6839      	ldr	r1, [r7, #0]
 801748e:	4618      	mov	r0, r3
 8017490:	f7ee ff5e 	bl	8006350 <osSemaphoreAcquire>
 8017494:	4603      	mov	r3, r0
 8017496:	2b00      	cmp	r3, #0
 8017498:	d105      	bne.n	80174a6 <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 801749a:	f7ee fc79 	bl	8005d90 <osKernelGetTickCount>
 801749e:	4602      	mov	r2, r0
 80174a0:	68fb      	ldr	r3, [r7, #12]
 80174a2:	1ad3      	subs	r3, r2, r3
 80174a4:	e012      	b.n	80174cc <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 80174a6:	f04f 33ff 	mov.w	r3, #4294967295
 80174aa:	e00f      	b.n	80174cc <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 80174ac:	bf00      	nop
 80174ae:	687b      	ldr	r3, [r7, #4]
 80174b0:	681b      	ldr	r3, [r3, #0]
 80174b2:	f04f 31ff 	mov.w	r1, #4294967295
 80174b6:	4618      	mov	r0, r3
 80174b8:	f7ee ff4a 	bl	8006350 <osSemaphoreAcquire>
 80174bc:	4603      	mov	r3, r0
 80174be:	2b00      	cmp	r3, #0
 80174c0:	d1f5      	bne.n	80174ae <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 80174c2:	f7ee fc65 	bl	8005d90 <osKernelGetTickCount>
 80174c6:	4602      	mov	r2, r0
 80174c8:	68fb      	ldr	r3, [r7, #12]
 80174ca:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 80174cc:	4618      	mov	r0, r3
 80174ce:	3710      	adds	r7, #16
 80174d0:	46bd      	mov	sp, r7
 80174d2:	bd80      	pop	{r7, pc}

080174d4 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 80174d4:	b580      	push	{r7, lr}
 80174d6:	b082      	sub	sp, #8
 80174d8:	af00      	add	r7, sp, #0
 80174da:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 80174dc:	687b      	ldr	r3, [r7, #4]
 80174de:	681b      	ldr	r3, [r3, #0]
 80174e0:	4618      	mov	r0, r3
 80174e2:	f7ee ff9b 	bl	800641c <osSemaphoreRelease>
}
 80174e6:	bf00      	nop
 80174e8:	3708      	adds	r7, #8
 80174ea:	46bd      	mov	sp, r7
 80174ec:	bd80      	pop	{r7, pc}

080174ee <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 80174ee:	b580      	push	{r7, lr}
 80174f0:	b082      	sub	sp, #8
 80174f2:	af00      	add	r7, sp, #0
 80174f4:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 80174f6:	687b      	ldr	r3, [r7, #4]
 80174f8:	681b      	ldr	r3, [r3, #0]
 80174fa:	4618      	mov	r0, r3
 80174fc:	f7ee ffe6 	bl	80064cc <osSemaphoreDelete>
}
 8017500:	bf00      	nop
 8017502:	3708      	adds	r7, #8
 8017504:	46bd      	mov	sp, r7
 8017506:	bd80      	pop	{r7, pc}

08017508 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8017508:	b480      	push	{r7}
 801750a:	b083      	sub	sp, #12
 801750c:	af00      	add	r7, sp, #0
 801750e:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8017510:	687b      	ldr	r3, [r7, #4]
 8017512:	681b      	ldr	r3, [r3, #0]
 8017514:	2b00      	cmp	r3, #0
 8017516:	d101      	bne.n	801751c <sys_sem_valid+0x14>
    return 0;
 8017518:	2300      	movs	r3, #0
 801751a:	e000      	b.n	801751e <sys_sem_valid+0x16>
  else
    return 1;
 801751c:	2301      	movs	r3, #1
}
 801751e:	4618      	mov	r0, r3
 8017520:	370c      	adds	r7, #12
 8017522:	46bd      	mov	sp, r7
 8017524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017528:	4770      	bx	lr

0801752a <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801752a:	b480      	push	{r7}
 801752c:	b083      	sub	sp, #12
 801752e:	af00      	add	r7, sp, #0
 8017530:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8017532:	687b      	ldr	r3, [r7, #4]
 8017534:	2200      	movs	r2, #0
 8017536:	601a      	str	r2, [r3, #0]
}
 8017538:	bf00      	nop
 801753a:	370c      	adds	r7, #12
 801753c:	46bd      	mov	sp, r7
 801753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017542:	4770      	bx	lr

08017544 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8017544:	b580      	push	{r7, lr}
 8017546:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8017548:	2000      	movs	r0, #0
 801754a:	f7ee fd1d 	bl	8005f88 <osMutexNew>
 801754e:	4603      	mov	r3, r0
 8017550:	4a01      	ldr	r2, [pc, #4]	; (8017558 <sys_init+0x14>)
 8017552:	6013      	str	r3, [r2, #0]
#endif
}
 8017554:	bf00      	nop
 8017556:	bd80      	pop	{r7, pc}
 8017558:	2000db3c 	.word	0x2000db3c

0801755c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801755c:	b580      	push	{r7, lr}
 801755e:	b082      	sub	sp, #8
 8017560:	af00      	add	r7, sp, #0
 8017562:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8017564:	2000      	movs	r0, #0
 8017566:	f7ee fd0f 	bl	8005f88 <osMutexNew>
 801756a:	4602      	mov	r2, r0
 801756c:	687b      	ldr	r3, [r7, #4]
 801756e:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8017570:	687b      	ldr	r3, [r7, #4]
 8017572:	681b      	ldr	r3, [r3, #0]
 8017574:	2b00      	cmp	r3, #0
 8017576:	d102      	bne.n	801757e <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8017578:	f04f 33ff 	mov.w	r3, #4294967295
 801757c:	e000      	b.n	8017580 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801757e:	2300      	movs	r3, #0
}
 8017580:	4618      	mov	r0, r3
 8017582:	3708      	adds	r7, #8
 8017584:	46bd      	mov	sp, r7
 8017586:	bd80      	pop	{r7, pc}

08017588 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8017588:	b580      	push	{r7, lr}
 801758a:	b082      	sub	sp, #8
 801758c:	af00      	add	r7, sp, #0
 801758e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8017590:	687b      	ldr	r3, [r7, #4]
 8017592:	681b      	ldr	r3, [r3, #0]
 8017594:	f04f 31ff 	mov.w	r1, #4294967295
 8017598:	4618      	mov	r0, r3
 801759a:	f7ee fd8f 	bl	80060bc <osMutexAcquire>
#endif
}
 801759e:	bf00      	nop
 80175a0:	3708      	adds	r7, #8
 80175a2:	46bd      	mov	sp, r7
 80175a4:	bd80      	pop	{r7, pc}

080175a6 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80175a6:	b580      	push	{r7, lr}
 80175a8:	b082      	sub	sp, #8
 80175aa:	af00      	add	r7, sp, #0
 80175ac:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80175ae:	687b      	ldr	r3, [r7, #4]
 80175b0:	681b      	ldr	r3, [r3, #0]
 80175b2:	4618      	mov	r0, r3
 80175b4:	f7ee fde0 	bl	8006178 <osMutexRelease>
}
 80175b8:	bf00      	nop
 80175ba:	3708      	adds	r7, #8
 80175bc:	46bd      	mov	sp, r7
 80175be:	bd80      	pop	{r7, pc}

080175c0 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80175c0:	b580      	push	{r7, lr}
 80175c2:	b08e      	sub	sp, #56	; 0x38
 80175c4:	af00      	add	r7, sp, #0
 80175c6:	60f8      	str	r0, [r7, #12]
 80175c8:	60b9      	str	r1, [r7, #8]
 80175ca:	607a      	str	r2, [r7, #4]
 80175cc:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 80175ce:	f107 0314 	add.w	r3, r7, #20
 80175d2:	2224      	movs	r2, #36	; 0x24
 80175d4:	2100      	movs	r1, #0
 80175d6:	4618      	mov	r0, r3
 80175d8:	f003 fa43 	bl	801aa62 <memset>
 80175dc:	68fb      	ldr	r3, [r7, #12]
 80175de:	617b      	str	r3, [r7, #20]
 80175e0:	683b      	ldr	r3, [r7, #0]
 80175e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80175e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80175e6:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 80175e8:	f107 0314 	add.w	r3, r7, #20
 80175ec:	461a      	mov	r2, r3
 80175ee:	6879      	ldr	r1, [r7, #4]
 80175f0:	68b8      	ldr	r0, [r7, #8]
 80175f2:	f7ee fbf5 	bl	8005de0 <osThreadNew>
 80175f6:	4603      	mov	r3, r0
#endif
}
 80175f8:	4618      	mov	r0, r3
 80175fa:	3738      	adds	r7, #56	; 0x38
 80175fc:	46bd      	mov	sp, r7
 80175fe:	bd80      	pop	{r7, pc}

08017600 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8017600:	b580      	push	{r7, lr}
 8017602:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8017604:	4b04      	ldr	r3, [pc, #16]	; (8017618 <sys_arch_protect+0x18>)
 8017606:	681b      	ldr	r3, [r3, #0]
 8017608:	f04f 31ff 	mov.w	r1, #4294967295
 801760c:	4618      	mov	r0, r3
 801760e:	f7ee fd55 	bl	80060bc <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8017612:	2301      	movs	r3, #1
}
 8017614:	4618      	mov	r0, r3
 8017616:	bd80      	pop	{r7, pc}
 8017618:	2000db3c 	.word	0x2000db3c

0801761c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801761c:	b580      	push	{r7, lr}
 801761e:	b082      	sub	sp, #8
 8017620:	af00      	add	r7, sp, #0
 8017622:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8017624:	4b04      	ldr	r3, [pc, #16]	; (8017638 <sys_arch_unprotect+0x1c>)
 8017626:	681b      	ldr	r3, [r3, #0]
 8017628:	4618      	mov	r0, r3
 801762a:	f7ee fda5 	bl	8006178 <osMutexRelease>
}
 801762e:	bf00      	nop
 8017630:	3708      	adds	r7, #8
 8017632:	46bd      	mov	sp, r7
 8017634:	bd80      	pop	{r7, pc}
 8017636:	bf00      	nop
 8017638:	2000db3c 	.word	0x2000db3c

0801763c <eMBFuncReadCoils>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
 801763c:	b580      	push	{r7, lr}
 801763e:	b086      	sub	sp, #24
 8017640:	af00      	add	r7, sp, #0
 8017642:	6078      	str	r0, [r7, #4]
 8017644:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usCoilCount;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8017646:	2300      	movs	r3, #0
 8017648:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 801764a:	683b      	ldr	r3, [r7, #0]
 801764c:	881b      	ldrh	r3, [r3, #0]
 801764e:	2b05      	cmp	r3, #5
 8017650:	d16c      	bne.n	801772c <eMBFuncReadCoils+0xf0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8017652:	687b      	ldr	r3, [r7, #4]
 8017654:	3301      	adds	r3, #1
 8017656:	781b      	ldrb	r3, [r3, #0]
 8017658:	b29b      	uxth	r3, r3
 801765a:	021b      	lsls	r3, r3, #8
 801765c:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 801765e:	687b      	ldr	r3, [r7, #4]
 8017660:	3302      	adds	r3, #2
 8017662:	781b      	ldrb	r3, [r3, #0]
 8017664:	b29a      	uxth	r2, r3
 8017666:	8abb      	ldrh	r3, [r7, #20]
 8017668:	4313      	orrs	r3, r2
 801766a:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 801766c:	8abb      	ldrh	r3, [r7, #20]
 801766e:	3301      	adds	r3, #1
 8017670:	82bb      	strh	r3, [r7, #20]

        usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
 8017672:	687b      	ldr	r3, [r7, #4]
 8017674:	3303      	adds	r3, #3
 8017676:	781b      	ldrb	r3, [r3, #0]
 8017678:	b29b      	uxth	r3, r3
 801767a:	021b      	lsls	r3, r3, #8
 801767c:	827b      	strh	r3, [r7, #18]
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
 801767e:	687b      	ldr	r3, [r7, #4]
 8017680:	3304      	adds	r3, #4
 8017682:	781b      	ldrb	r3, [r3, #0]
 8017684:	b29a      	uxth	r2, r3
 8017686:	8a7b      	ldrh	r3, [r7, #18]
 8017688:	4313      	orrs	r3, r2
 801768a:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usCoilCount >= 1 ) &&
 801768c:	8a7b      	ldrh	r3, [r7, #18]
 801768e:	2b00      	cmp	r3, #0
 8017690:	d049      	beq.n	8017726 <eMBFuncReadCoils+0xea>
 8017692:	8a7b      	ldrh	r3, [r7, #18]
 8017694:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8017698:	d245      	bcs.n	8017726 <eMBFuncReadCoils+0xea>
            ( usCoilCount < MB_PDU_FUNC_READ_COILCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 801769a:	687b      	ldr	r3, [r7, #4]
 801769c:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 801769e:	683b      	ldr	r3, [r7, #0]
 80176a0:	2200      	movs	r2, #0
 80176a2:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_COILS;
 80176a4:	68fb      	ldr	r3, [r7, #12]
 80176a6:	1c5a      	adds	r2, r3, #1
 80176a8:	60fa      	str	r2, [r7, #12]
 80176aa:	2201      	movs	r2, #1
 80176ac:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80176ae:	683b      	ldr	r3, [r7, #0]
 80176b0:	881b      	ldrh	r3, [r3, #0]
 80176b2:	3301      	adds	r3, #1
 80176b4:	b29a      	uxth	r2, r3
 80176b6:	683b      	ldr	r3, [r7, #0]
 80176b8:	801a      	strh	r2, [r3, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usCoilCount & 0x0007 ) != 0 )
 80176ba:	8a7b      	ldrh	r3, [r7, #18]
 80176bc:	f003 0307 	and.w	r3, r3, #7
 80176c0:	2b00      	cmp	r3, #0
 80176c2:	d006      	beq.n	80176d2 <eMBFuncReadCoils+0x96>
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
 80176c4:	8a7b      	ldrh	r3, [r7, #18]
 80176c6:	08db      	lsrs	r3, r3, #3
 80176c8:	b29b      	uxth	r3, r3
 80176ca:	b2db      	uxtb	r3, r3
 80176cc:	3301      	adds	r3, #1
 80176ce:	75fb      	strb	r3, [r7, #23]
 80176d0:	e003      	b.n	80176da <eMBFuncReadCoils+0x9e>
            }
            else
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
 80176d2:	8a7b      	ldrh	r3, [r7, #18]
 80176d4:	08db      	lsrs	r3, r3, #3
 80176d6:	b29b      	uxth	r3, r3
 80176d8:	75fb      	strb	r3, [r7, #23]
            }
            *pucFrameCur++ = ucNBytes;
 80176da:	68fb      	ldr	r3, [r7, #12]
 80176dc:	1c5a      	adds	r2, r3, #1
 80176de:	60fa      	str	r2, [r7, #12]
 80176e0:	7dfa      	ldrb	r2, [r7, #23]
 80176e2:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80176e4:	683b      	ldr	r3, [r7, #0]
 80176e6:	881b      	ldrh	r3, [r3, #0]
 80176e8:	3301      	adds	r3, #1
 80176ea:	b29a      	uxth	r2, r3
 80176ec:	683b      	ldr	r3, [r7, #0]
 80176ee:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
 80176f0:	8a7a      	ldrh	r2, [r7, #18]
 80176f2:	8ab9      	ldrh	r1, [r7, #20]
 80176f4:	2300      	movs	r3, #0
 80176f6:	68f8      	ldr	r0, [r7, #12]
 80176f8:	f002 f974 	bl	80199e4 <eMBRegCoilsCB>
 80176fc:	4603      	mov	r3, r0
 80176fe:	72fb      	strb	r3, [r7, #11]
                               MB_REG_READ );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8017700:	7afb      	ldrb	r3, [r7, #11]
 8017702:	2b00      	cmp	r3, #0
 8017704:	d006      	beq.n	8017714 <eMBFuncReadCoils+0xd8>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8017706:	7afb      	ldrb	r3, [r7, #11]
 8017708:	4618      	mov	r0, r3
 801770a:	f001 f8f3 	bl	80188f4 <prveMBError2Exception>
 801770e:	4603      	mov	r3, r0
 8017710:	75bb      	strb	r3, [r7, #22]
            if( eRegStatus != MB_ENOERR )
 8017712:	e00d      	b.n	8017730 <eMBFuncReadCoils+0xf4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 8017714:	683b      	ldr	r3, [r7, #0]
 8017716:	881a      	ldrh	r2, [r3, #0]
 8017718:	7dfb      	ldrb	r3, [r7, #23]
 801771a:	b29b      	uxth	r3, r3
 801771c:	4413      	add	r3, r2
 801771e:	b29a      	uxth	r2, r3
 8017720:	683b      	ldr	r3, [r7, #0]
 8017722:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8017724:	e004      	b.n	8017730 <eMBFuncReadCoils+0xf4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8017726:	2303      	movs	r3, #3
 8017728:	75bb      	strb	r3, [r7, #22]
 801772a:	e001      	b.n	8017730 <eMBFuncReadCoils+0xf4>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 801772c:	2303      	movs	r3, #3
 801772e:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 8017730:	7dbb      	ldrb	r3, [r7, #22]
}
 8017732:	4618      	mov	r0, r3
 8017734:	3718      	adds	r7, #24
 8017736:	46bd      	mov	sp, r7
 8017738:	bd80      	pop	{r7, pc}

0801773a <eMBFuncWriteCoil>:

#if MB_FUNC_WRITE_COIL_ENABLED > 0
eMBException
eMBFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
{
 801773a:	b580      	push	{r7, lr}
 801773c:	b084      	sub	sp, #16
 801773e:	af00      	add	r7, sp, #0
 8017740:	6078      	str	r0, [r7, #4]
 8017742:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
 8017744:	2300      	movs	r3, #0
 8017746:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8017748:	683b      	ldr	r3, [r7, #0]
 801774a:	881b      	ldrh	r3, [r3, #0]
 801774c:	2b05      	cmp	r3, #5
 801774e:	d140      	bne.n	80177d2 <eMBFuncWriteCoil+0x98>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8017750:	687b      	ldr	r3, [r7, #4]
 8017752:	3301      	adds	r3, #1
 8017754:	781b      	ldrb	r3, [r3, #0]
 8017756:	b29b      	uxth	r3, r3
 8017758:	021b      	lsls	r3, r3, #8
 801775a:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 801775c:	687b      	ldr	r3, [r7, #4]
 801775e:	3302      	adds	r3, #2
 8017760:	781b      	ldrb	r3, [r3, #0]
 8017762:	b29a      	uxth	r2, r3
 8017764:	89bb      	ldrh	r3, [r7, #12]
 8017766:	4313      	orrs	r3, r2
 8017768:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 801776a:	89bb      	ldrh	r3, [r7, #12]
 801776c:	3301      	adds	r3, #1
 801776e:	81bb      	strh	r3, [r7, #12]

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8017770:	687b      	ldr	r3, [r7, #4]
 8017772:	3304      	adds	r3, #4
 8017774:	781b      	ldrb	r3, [r3, #0]
 8017776:	2b00      	cmp	r3, #0
 8017778:	d128      	bne.n	80177cc <eMBFuncWriteCoil+0x92>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 801777a:	687b      	ldr	r3, [r7, #4]
 801777c:	3303      	adds	r3, #3
 801777e:	781b      	ldrb	r3, [r3, #0]
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8017780:	2bff      	cmp	r3, #255	; 0xff
 8017782:	d004      	beq.n	801778e <eMBFuncWriteCoil+0x54>
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
 8017784:	687b      	ldr	r3, [r7, #4]
 8017786:	3303      	adds	r3, #3
 8017788:	781b      	ldrb	r3, [r3, #0]
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 801778a:	2b00      	cmp	r3, #0
 801778c:	d11e      	bne.n	80177cc <eMBFuncWriteCoil+0x92>
        {
            ucBuf[1] = 0;
 801778e:	2300      	movs	r3, #0
 8017790:	727b      	strb	r3, [r7, #9]
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 8017792:	687b      	ldr	r3, [r7, #4]
 8017794:	3303      	adds	r3, #3
 8017796:	781b      	ldrb	r3, [r3, #0]
 8017798:	2bff      	cmp	r3, #255	; 0xff
 801779a:	d102      	bne.n	80177a2 <eMBFuncWriteCoil+0x68>
            {
                ucBuf[0] = 1;
 801779c:	2301      	movs	r3, #1
 801779e:	723b      	strb	r3, [r7, #8]
 80177a0:	e001      	b.n	80177a6 <eMBFuncWriteCoil+0x6c>
            }
            else
            {
                ucBuf[0] = 0;
 80177a2:	2300      	movs	r3, #0
 80177a4:	723b      	strb	r3, [r7, #8]
            }
            eRegStatus =
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );
 80177a6:	89b9      	ldrh	r1, [r7, #12]
 80177a8:	f107 0008 	add.w	r0, r7, #8
 80177ac:	2301      	movs	r3, #1
 80177ae:	2201      	movs	r2, #1
 80177b0:	f002 f918 	bl	80199e4 <eMBRegCoilsCB>
 80177b4:	4603      	mov	r3, r0
 80177b6:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80177b8:	7afb      	ldrb	r3, [r7, #11]
 80177ba:	2b00      	cmp	r3, #0
 80177bc:	d00b      	beq.n	80177d6 <eMBFuncWriteCoil+0x9c>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 80177be:	7afb      	ldrb	r3, [r7, #11]
 80177c0:	4618      	mov	r0, r3
 80177c2:	f001 f897 	bl	80188f4 <prveMBError2Exception>
 80177c6:	4603      	mov	r3, r0
 80177c8:	73fb      	strb	r3, [r7, #15]
            if( eRegStatus != MB_ENOERR )
 80177ca:	e004      	b.n	80177d6 <eMBFuncWriteCoil+0x9c>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80177cc:	2303      	movs	r3, #3
 80177ce:	73fb      	strb	r3, [r7, #15]
 80177d0:	e001      	b.n	80177d6 <eMBFuncWriteCoil+0x9c>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80177d2:	2303      	movs	r3, #3
 80177d4:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 80177d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80177d8:	4618      	mov	r0, r3
 80177da:	3710      	adds	r7, #16
 80177dc:	46bd      	mov	sp, r7
 80177de:	bd80      	pop	{r7, pc}

080177e0 <eMBFuncWriteMultipleCoils>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_COILS_ENABLED > 0
eMBException
eMBFuncWriteMultipleCoils( UCHAR * pucFrame, USHORT * usLen )
{
 80177e0:	b580      	push	{r7, lr}
 80177e2:	b084      	sub	sp, #16
 80177e4:	af00      	add	r7, sp, #0
 80177e6:	6078      	str	r0, [r7, #4]
 80177e8:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usCoilCnt;
    UCHAR           ucByteCount;
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
 80177ea:	2300      	movs	r3, #0
 80177ec:	73bb      	strb	r3, [r7, #14]
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 80177ee:	683b      	ldr	r3, [r7, #0]
 80177f0:	881b      	ldrh	r3, [r3, #0]
 80177f2:	2b05      	cmp	r3, #5
 80177f4:	d954      	bls.n	80178a0 <eMBFuncWriteMultipleCoils+0xc0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 80177f6:	687b      	ldr	r3, [r7, #4]
 80177f8:	3301      	adds	r3, #1
 80177fa:	781b      	ldrb	r3, [r3, #0]
 80177fc:	b29b      	uxth	r3, r3
 80177fe:	021b      	lsls	r3, r3, #8
 8017800:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8017802:	687b      	ldr	r3, [r7, #4]
 8017804:	3302      	adds	r3, #2
 8017806:	781b      	ldrb	r3, [r3, #0]
 8017808:	b29a      	uxth	r2, r3
 801780a:	89bb      	ldrh	r3, [r7, #12]
 801780c:	4313      	orrs	r3, r2
 801780e:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8017810:	89bb      	ldrh	r3, [r7, #12]
 8017812:	3301      	adds	r3, #1
 8017814:	81bb      	strh	r3, [r7, #12]

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
 8017816:	687b      	ldr	r3, [r7, #4]
 8017818:	3303      	adds	r3, #3
 801781a:	781b      	ldrb	r3, [r3, #0]
 801781c:	b29b      	uxth	r3, r3
 801781e:	021b      	lsls	r3, r3, #8
 8017820:	817b      	strh	r3, [r7, #10]
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 8017822:	687b      	ldr	r3, [r7, #4]
 8017824:	3304      	adds	r3, #4
 8017826:	781b      	ldrb	r3, [r3, #0]
 8017828:	b29a      	uxth	r2, r3
 801782a:	897b      	ldrh	r3, [r7, #10]
 801782c:	4313      	orrs	r3, r2
 801782e:	817b      	strh	r3, [r7, #10]

        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 8017830:	687b      	ldr	r3, [r7, #4]
 8017832:	795b      	ldrb	r3, [r3, #5]
 8017834:	727b      	strb	r3, [r7, #9]

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
 8017836:	897b      	ldrh	r3, [r7, #10]
 8017838:	f003 0307 	and.w	r3, r3, #7
 801783c:	2b00      	cmp	r3, #0
 801783e:	d006      	beq.n	801784e <eMBFuncWriteMultipleCoils+0x6e>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 8017840:	897b      	ldrh	r3, [r7, #10]
 8017842:	08db      	lsrs	r3, r3, #3
 8017844:	b29b      	uxth	r3, r3
 8017846:	b2db      	uxtb	r3, r3
 8017848:	3301      	adds	r3, #1
 801784a:	73fb      	strb	r3, [r7, #15]
 801784c:	e003      	b.n	8017856 <eMBFuncWriteMultipleCoils+0x76>
        }
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
 801784e:	897b      	ldrh	r3, [r7, #10]
 8017850:	08db      	lsrs	r3, r3, #3
 8017852:	b29b      	uxth	r3, r3
 8017854:	73fb      	strb	r3, [r7, #15]
        }

        if( ( usCoilCnt >= 1 ) &&
 8017856:	897b      	ldrh	r3, [r7, #10]
 8017858:	2b00      	cmp	r3, #0
 801785a:	d01e      	beq.n	801789a <eMBFuncWriteMultipleCoils+0xba>
 801785c:	897b      	ldrh	r3, [r7, #10]
 801785e:	f5b3 6ff6 	cmp.w	r3, #1968	; 0x7b0
 8017862:	d81a      	bhi.n	801789a <eMBFuncWriteMultipleCoils+0xba>
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
 8017864:	7bfa      	ldrb	r2, [r7, #15]
 8017866:	7a7b      	ldrb	r3, [r7, #9]
 8017868:	429a      	cmp	r2, r3
 801786a:	d116      	bne.n	801789a <eMBFuncWriteMultipleCoils+0xba>
            ( ucByteCountVerify == ucByteCount ) )
        {
            eRegStatus =
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 801786c:	687b      	ldr	r3, [r7, #4]
 801786e:	1d98      	adds	r0, r3, #6
 8017870:	897a      	ldrh	r2, [r7, #10]
 8017872:	89b9      	ldrh	r1, [r7, #12]
 8017874:	2301      	movs	r3, #1
 8017876:	f002 f8b5 	bl	80199e4 <eMBRegCoilsCB>
 801787a:	4603      	mov	r3, r0
 801787c:	723b      	strb	r3, [r7, #8]
                               usRegAddress, usCoilCnt, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 801787e:	7a3b      	ldrb	r3, [r7, #8]
 8017880:	2b00      	cmp	r3, #0
 8017882:	d006      	beq.n	8017892 <eMBFuncWriteMultipleCoils+0xb2>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8017884:	7a3b      	ldrb	r3, [r7, #8]
 8017886:	4618      	mov	r0, r3
 8017888:	f001 f834 	bl	80188f4 <prveMBError2Exception>
 801788c:	4603      	mov	r3, r0
 801788e:	73bb      	strb	r3, [r7, #14]
            if( eRegStatus != MB_ENOERR )
 8017890:	e008      	b.n	80178a4 <eMBFuncWriteMultipleCoils+0xc4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8017892:	683b      	ldr	r3, [r7, #0]
 8017894:	2205      	movs	r2, #5
 8017896:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8017898:	e004      	b.n	80178a4 <eMBFuncWriteMultipleCoils+0xc4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 801789a:	2303      	movs	r3, #3
 801789c:	73bb      	strb	r3, [r7, #14]
 801789e:	e001      	b.n	80178a4 <eMBFuncWriteMultipleCoils+0xc4>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80178a0:	2303      	movs	r3, #3
 80178a2:	73bb      	strb	r3, [r7, #14]
    }
    return eStatus;
 80178a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80178a6:	4618      	mov	r0, r3
 80178a8:	3710      	adds	r7, #16
 80178aa:	46bd      	mov	sp, r7
 80178ac:	bd80      	pop	{r7, pc}

080178ae <eMBMasterFuncReadCoils>:
    return eErrStatus;
}

eMBException
eMBMasterFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
 80178ae:	b580      	push	{r7, lr}
 80178b0:	b086      	sub	sp, #24
 80178b2:	af00      	add	r7, sp, #0
 80178b4:	6078      	str	r0, [r7, #4]
 80178b6:	6039      	str	r1, [r7, #0]
    UCHAR          *ucMBFrame;
    USHORT          usRegAddress;
    USHORT          usCoilCount;
    UCHAR           ucByteCount;

    eMBException    eStatus = MB_EX_NONE;
 80178b8:	2300      	movs	r3, #0
 80178ba:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, and it's read mode. This request don't need execute. */
    if ( xMBMasterRequestIsBroadcast() )
 80178bc:	f002 ff5c 	bl	801a778 <xMBMasterRequestIsBroadcast>
 80178c0:	4603      	mov	r3, r0
 80178c2:	2b00      	cmp	r3, #0
 80178c4:	d002      	beq.n	80178cc <eMBMasterFuncReadCoils+0x1e>
    {
    	eStatus = MB_EX_NONE;
 80178c6:	2300      	movs	r3, #0
 80178c8:	75bb      	strb	r3, [r7, #22]
 80178ca:	e056      	b.n	801797a <eMBMasterFuncReadCoils+0xcc>
    }
    else if ( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
 80178cc:	683b      	ldr	r3, [r7, #0]
 80178ce:	881b      	ldrh	r3, [r3, #0]
 80178d0:	2b01      	cmp	r3, #1
 80178d2:	d950      	bls.n	8017976 <eMBMasterFuncReadCoils+0xc8>
    {
    	vMBMasterGetPDUSndBuf(&ucMBFrame);
 80178d4:	f107 030c 	add.w	r3, r7, #12
 80178d8:	4618      	mov	r0, r3
 80178da:	f002 ff01 	bl	801a6e0 <vMBMasterGetPDUSndBuf>
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
 80178de:	68fb      	ldr	r3, [r7, #12]
 80178e0:	3301      	adds	r3, #1
 80178e2:	781b      	ldrb	r3, [r3, #0]
 80178e4:	b29b      	uxth	r3, r3
 80178e6:	021b      	lsls	r3, r3, #8
 80178e8:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
 80178ea:	68fb      	ldr	r3, [r7, #12]
 80178ec:	3302      	adds	r3, #2
 80178ee:	781b      	ldrb	r3, [r3, #0]
 80178f0:	b29a      	uxth	r2, r3
 80178f2:	8abb      	ldrh	r3, [r7, #20]
 80178f4:	4313      	orrs	r3, r2
 80178f6:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 80178f8:	8abb      	ldrh	r3, [r7, #20]
 80178fa:	3301      	adds	r3, #1
 80178fc:	82bb      	strh	r3, [r7, #20]

        usCoilCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_COILCNT_OFF] << 8 );
 80178fe:	68fb      	ldr	r3, [r7, #12]
 8017900:	3303      	adds	r3, #3
 8017902:	781b      	ldrb	r3, [r3, #0]
 8017904:	b29b      	uxth	r3, r3
 8017906:	021b      	lsls	r3, r3, #8
 8017908:	827b      	strh	r3, [r7, #18]
        usCoilCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_COILCNT_OFF + 1] );
 801790a:	68fb      	ldr	r3, [r7, #12]
 801790c:	3304      	adds	r3, #4
 801790e:	781b      	ldrb	r3, [r3, #0]
 8017910:	b29a      	uxth	r2, r3
 8017912:	8a7b      	ldrh	r3, [r7, #18]
 8017914:	4313      	orrs	r3, r2
 8017916:	827b      	strh	r3, [r7, #18]

        /* Test if the quantity of coils is a multiple of 8. If not last
         * byte is only partially field with unused coils set to zero. */
        if( ( usCoilCount & 0x0007 ) != 0 )
 8017918:	8a7b      	ldrh	r3, [r7, #18]
 801791a:	f003 0307 	and.w	r3, r3, #7
 801791e:	2b00      	cmp	r3, #0
 8017920:	d006      	beq.n	8017930 <eMBMasterFuncReadCoils+0x82>
        {
        	ucByteCount = ( UCHAR )( usCoilCount / 8 + 1 );
 8017922:	8a7b      	ldrh	r3, [r7, #18]
 8017924:	08db      	lsrs	r3, r3, #3
 8017926:	b29b      	uxth	r3, r3
 8017928:	b2db      	uxtb	r3, r3
 801792a:	3301      	adds	r3, #1
 801792c:	75fb      	strb	r3, [r7, #23]
 801792e:	e003      	b.n	8017938 <eMBMasterFuncReadCoils+0x8a>
        }
        else
        {
        	ucByteCount = ( UCHAR )( usCoilCount / 8 );
 8017930:	8a7b      	ldrh	r3, [r7, #18]
 8017932:	08db      	lsrs	r3, r3, #3
 8017934:	b29b      	uxth	r3, r3
 8017936:	75fb      	strb	r3, [r7, #23]
        }

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usCoilCount >= 1 ) &&
 8017938:	8a7b      	ldrh	r3, [r7, #18]
 801793a:	2b00      	cmp	r3, #0
 801793c:	d018      	beq.n	8017970 <eMBMasterFuncReadCoils+0xc2>
            ( ucByteCount == pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] ) )
 801793e:	687b      	ldr	r3, [r7, #4]
 8017940:	3301      	adds	r3, #1
 8017942:	781b      	ldrb	r3, [r3, #0]
        if( ( usCoilCount >= 1 ) &&
 8017944:	7dfa      	ldrb	r2, [r7, #23]
 8017946:	429a      	cmp	r2, r3
 8017948:	d112      	bne.n	8017970 <eMBMasterFuncReadCoils+0xc2>
        {
        	/* Make callback to fill the buffer. */
            eRegStatus = eMBMasterRegCoilsCB( &pucFrame[MB_PDU_FUNC_READ_VALUES_OFF], usRegAddress, usCoilCount, MB_REG_READ );
 801794a:	687b      	ldr	r3, [r7, #4]
 801794c:	1c98      	adds	r0, r3, #2
 801794e:	8a7a      	ldrh	r2, [r7, #18]
 8017950:	8ab9      	ldrh	r1, [r7, #20]
 8017952:	2300      	movs	r3, #0
 8017954:	f002 fa4c 	bl	8019df0 <eMBMasterRegCoilsCB>
 8017958:	4603      	mov	r3, r0
 801795a:	747b      	strb	r3, [r7, #17]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 801795c:	7c7b      	ldrb	r3, [r7, #17]
 801795e:	2b00      	cmp	r3, #0
 8017960:	d00b      	beq.n	801797a <eMBMasterFuncReadCoils+0xcc>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8017962:	7c7b      	ldrb	r3, [r7, #17]
 8017964:	4618      	mov	r0, r3
 8017966:	f000 ffc5 	bl	80188f4 <prveMBError2Exception>
 801796a:	4603      	mov	r3, r0
 801796c:	75bb      	strb	r3, [r7, #22]
            if( eRegStatus != MB_ENOERR )
 801796e:	e004      	b.n	801797a <eMBMasterFuncReadCoils+0xcc>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8017970:	2303      	movs	r3, #3
 8017972:	75bb      	strb	r3, [r7, #22]
 8017974:	e001      	b.n	801797a <eMBMasterFuncReadCoils+0xcc>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8017976:	2303      	movs	r3, #3
 8017978:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 801797a:	7dbb      	ldrb	r3, [r7, #22]
}
 801797c:	4618      	mov	r0, r3
 801797e:	3718      	adds	r7, #24
 8017980:	46bd      	mov	sp, r7
 8017982:	bd80      	pop	{r7, pc}

08017984 <eMBMasterReqWriteCoil>:
 *
 * @see eMBMasterReqWriteMultipleCoils
 */
eMBMasterReqErrCode
eMBMasterReqWriteCoil( UCHAR ucSndAddr, USHORT usCoilAddr, USHORT usCoilData, LONG lTimeOut )
{
 8017984:	b580      	push	{r7, lr}
 8017986:	b086      	sub	sp, #24
 8017988:	af00      	add	r7, sp, #0
 801798a:	607b      	str	r3, [r7, #4]
 801798c:	4603      	mov	r3, r0
 801798e:	73fb      	strb	r3, [r7, #15]
 8017990:	460b      	mov	r3, r1
 8017992:	81bb      	strh	r3, [r7, #12]
 8017994:	4613      	mov	r3, r2
 8017996:	817b      	strh	r3, [r7, #10]
    UCHAR                 *ucMBFrame;
    eMBMasterReqErrCode    eErrStatus = MB_MRE_NO_ERR;
 8017998:	2300      	movs	r3, #0
 801799a:	75fb      	strb	r3, [r7, #23]

    if ( ucSndAddr > MB_MASTER_TOTAL_SLAVE_NUM ) eErrStatus = MB_MRE_ILL_ARG;
 801799c:	7bfb      	ldrb	r3, [r7, #15]
 801799e:	2b10      	cmp	r3, #16
 80179a0:	d902      	bls.n	80179a8 <eMBMasterReqWriteCoil+0x24>
 80179a2:	2302      	movs	r3, #2
 80179a4:	75fb      	strb	r3, [r7, #23]
 80179a6:	e040      	b.n	8017a2a <eMBMasterReqWriteCoil+0xa6>
    else if ( ( usCoilData != 0xFF00 ) && ( usCoilData != 0x0000 ) ) eErrStatus = MB_MRE_ILL_ARG;
 80179a8:	897b      	ldrh	r3, [r7, #10]
 80179aa:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 80179ae:	d005      	beq.n	80179bc <eMBMasterReqWriteCoil+0x38>
 80179b0:	897b      	ldrh	r3, [r7, #10]
 80179b2:	2b00      	cmp	r3, #0
 80179b4:	d002      	beq.n	80179bc <eMBMasterReqWriteCoil+0x38>
 80179b6:	2302      	movs	r3, #2
 80179b8:	75fb      	strb	r3, [r7, #23]
 80179ba:	e036      	b.n	8017a2a <eMBMasterReqWriteCoil+0xa6>
    else if ( xMBMasterRunResTake( lTimeOut ) == FALSE ) eErrStatus = MB_MRE_MASTER_BUSY;
 80179bc:	6878      	ldr	r0, [r7, #4]
 80179be:	f001 fb45 	bl	801904c <xMBMasterRunResTake>
 80179c2:	4603      	mov	r3, r0
 80179c4:	2b00      	cmp	r3, #0
 80179c6:	d102      	bne.n	80179ce <eMBMasterReqWriteCoil+0x4a>
 80179c8:	2307      	movs	r3, #7
 80179ca:	75fb      	strb	r3, [r7, #23]
 80179cc:	e02d      	b.n	8017a2a <eMBMasterReqWriteCoil+0xa6>
    else
    {
		vMBMasterGetPDUSndBuf(&ucMBFrame);
 80179ce:	f107 0310 	add.w	r3, r7, #16
 80179d2:	4618      	mov	r0, r3
 80179d4:	f002 fe84 	bl	801a6e0 <vMBMasterGetPDUSndBuf>
		vMBMasterSetDestAddress(ucSndAddr);
 80179d8:	7bfb      	ldrb	r3, [r7, #15]
 80179da:	4618      	mov	r0, r3
 80179dc:	f002 feb0 	bl	801a740 <vMBMasterSetDestAddress>
		ucMBFrame[MB_PDU_FUNC_OFF]                = MB_FUNC_WRITE_SINGLE_COIL;
 80179e0:	693b      	ldr	r3, [r7, #16]
 80179e2:	2205      	movs	r2, #5
 80179e4:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_WRITE_ADDR_OFF]      = usCoilAddr >> 8;
 80179e6:	89bb      	ldrh	r3, [r7, #12]
 80179e8:	0a1b      	lsrs	r3, r3, #8
 80179ea:	b29a      	uxth	r2, r3
 80179ec:	693b      	ldr	r3, [r7, #16]
 80179ee:	3301      	adds	r3, #1
 80179f0:	b2d2      	uxtb	r2, r2
 80179f2:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_WRITE_ADDR_OFF + 1]  = usCoilAddr;
 80179f4:	693b      	ldr	r3, [r7, #16]
 80179f6:	3302      	adds	r3, #2
 80179f8:	89ba      	ldrh	r2, [r7, #12]
 80179fa:	b2d2      	uxtb	r2, r2
 80179fc:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_WRITE_VALUE_OFF ]    = usCoilData >> 8;
 80179fe:	897b      	ldrh	r3, [r7, #10]
 8017a00:	0a1b      	lsrs	r3, r3, #8
 8017a02:	b29a      	uxth	r2, r3
 8017a04:	693b      	ldr	r3, [r7, #16]
 8017a06:	3303      	adds	r3, #3
 8017a08:	b2d2      	uxtb	r2, r2
 8017a0a:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_WRITE_VALUE_OFF + 1] = usCoilData;
 8017a0c:	693b      	ldr	r3, [r7, #16]
 8017a0e:	3304      	adds	r3, #4
 8017a10:	897a      	ldrh	r2, [r7, #10]
 8017a12:	b2d2      	uxtb	r2, r2
 8017a14:	701a      	strb	r2, [r3, #0]
		vMBMasterSetPDUSndLength( MB_PDU_SIZE_MIN + MB_PDU_REQ_WRITE_SIZE );
 8017a16:	2005      	movs	r0, #5
 8017a18:	f002 fe72 	bl	801a700 <vMBMasterSetPDUSndLength>
		( void ) xMBMasterPortEventPost( EV_MASTER_FRAME_SENT );
 8017a1c:	2008      	movs	r0, #8
 8017a1e:	f001 fa93 	bl	8018f48 <xMBMasterPortEventPost>
		eErrStatus = eMBMasterWaitRequestFinish( );
 8017a22:	f001 fb39 	bl	8019098 <eMBMasterWaitRequestFinish>
 8017a26:	4603      	mov	r3, r0
 8017a28:	75fb      	strb	r3, [r7, #23]
    }
    return eErrStatus;
 8017a2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8017a2c:	4618      	mov	r0, r3
 8017a2e:	3718      	adds	r7, #24
 8017a30:	46bd      	mov	sp, r7
 8017a32:	bd80      	pop	{r7, pc}

08017a34 <eMBMasterFuncWriteCoil>:

eMBException
eMBMasterFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
{
 8017a34:	b580      	push	{r7, lr}
 8017a36:	b084      	sub	sp, #16
 8017a38:	af00      	add	r7, sp, #0
 8017a3a:	6078      	str	r0, [r7, #4]
 8017a3c:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
 8017a3e:	2300      	movs	r3, #0
 8017a40:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8017a42:	683b      	ldr	r3, [r7, #0]
 8017a44:	881b      	ldrh	r3, [r3, #0]
 8017a46:	2b05      	cmp	r3, #5
 8017a48:	d140      	bne.n	8017acc <eMBMasterFuncWriteCoil+0x98>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8017a4a:	687b      	ldr	r3, [r7, #4]
 8017a4c:	3301      	adds	r3, #1
 8017a4e:	781b      	ldrb	r3, [r3, #0]
 8017a50:	b29b      	uxth	r3, r3
 8017a52:	021b      	lsls	r3, r3, #8
 8017a54:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8017a56:	687b      	ldr	r3, [r7, #4]
 8017a58:	3302      	adds	r3, #2
 8017a5a:	781b      	ldrb	r3, [r3, #0]
 8017a5c:	b29a      	uxth	r2, r3
 8017a5e:	89bb      	ldrh	r3, [r7, #12]
 8017a60:	4313      	orrs	r3, r2
 8017a62:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8017a64:	89bb      	ldrh	r3, [r7, #12]
 8017a66:	3301      	adds	r3, #1
 8017a68:	81bb      	strh	r3, [r7, #12]

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8017a6a:	687b      	ldr	r3, [r7, #4]
 8017a6c:	3304      	adds	r3, #4
 8017a6e:	781b      	ldrb	r3, [r3, #0]
 8017a70:	2b00      	cmp	r3, #0
 8017a72:	d128      	bne.n	8017ac6 <eMBMasterFuncWriteCoil+0x92>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 8017a74:	687b      	ldr	r3, [r7, #4]
 8017a76:	3303      	adds	r3, #3
 8017a78:	781b      	ldrb	r3, [r3, #0]
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8017a7a:	2bff      	cmp	r3, #255	; 0xff
 8017a7c:	d004      	beq.n	8017a88 <eMBMasterFuncWriteCoil+0x54>
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
 8017a7e:	687b      	ldr	r3, [r7, #4]
 8017a80:	3303      	adds	r3, #3
 8017a82:	781b      	ldrb	r3, [r3, #0]
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 8017a84:	2b00      	cmp	r3, #0
 8017a86:	d11e      	bne.n	8017ac6 <eMBMasterFuncWriteCoil+0x92>
        {
            ucBuf[1] = 0;
 8017a88:	2300      	movs	r3, #0
 8017a8a:	727b      	strb	r3, [r7, #9]
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 8017a8c:	687b      	ldr	r3, [r7, #4]
 8017a8e:	3303      	adds	r3, #3
 8017a90:	781b      	ldrb	r3, [r3, #0]
 8017a92:	2bff      	cmp	r3, #255	; 0xff
 8017a94:	d102      	bne.n	8017a9c <eMBMasterFuncWriteCoil+0x68>
            {
                ucBuf[0] = 1;
 8017a96:	2301      	movs	r3, #1
 8017a98:	723b      	strb	r3, [r7, #8]
 8017a9a:	e001      	b.n	8017aa0 <eMBMasterFuncWriteCoil+0x6c>
            }
            else
            {
                ucBuf[0] = 0;
 8017a9c:	2300      	movs	r3, #0
 8017a9e:	723b      	strb	r3, [r7, #8]
            }
            eRegStatus =
                eMBMasterRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );
 8017aa0:	89b9      	ldrh	r1, [r7, #12]
 8017aa2:	f107 0008 	add.w	r0, r7, #8
 8017aa6:	2301      	movs	r3, #1
 8017aa8:	2201      	movs	r2, #1
 8017aaa:	f002 f9a1 	bl	8019df0 <eMBMasterRegCoilsCB>
 8017aae:	4603      	mov	r3, r0
 8017ab0:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8017ab2:	7afb      	ldrb	r3, [r7, #11]
 8017ab4:	2b00      	cmp	r3, #0
 8017ab6:	d00b      	beq.n	8017ad0 <eMBMasterFuncWriteCoil+0x9c>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8017ab8:	7afb      	ldrb	r3, [r7, #11]
 8017aba:	4618      	mov	r0, r3
 8017abc:	f000 ff1a 	bl	80188f4 <prveMBError2Exception>
 8017ac0:	4603      	mov	r3, r0
 8017ac2:	73fb      	strb	r3, [r7, #15]
            if( eRegStatus != MB_ENOERR )
 8017ac4:	e004      	b.n	8017ad0 <eMBMasterFuncWriteCoil+0x9c>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8017ac6:	2303      	movs	r3, #3
 8017ac8:	73fb      	strb	r3, [r7, #15]
 8017aca:	e001      	b.n	8017ad0 <eMBMasterFuncWriteCoil+0x9c>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8017acc:	2303      	movs	r3, #3
 8017ace:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 8017ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8017ad2:	4618      	mov	r0, r3
 8017ad4:	3710      	adds	r7, #16
 8017ad6:	46bd      	mov	sp, r7
 8017ad8:	bd80      	pop	{r7, pc}

08017ada <eMBMasterFuncWriteMultipleCoils>:
    return eErrStatus;
}

eMBException
eMBMasterFuncWriteMultipleCoils( UCHAR * pucFrame, USHORT * usLen )
{
 8017ada:	b580      	push	{r7, lr}
 8017adc:	b086      	sub	sp, #24
 8017ade:	af00      	add	r7, sp, #0
 8017ae0:	6078      	str	r0, [r7, #4]
 8017ae2:	6039      	str	r1, [r7, #0]
    USHORT          usCoilCnt;
    UCHAR           ucByteCount;
    UCHAR           ucByteCountVerify;
    UCHAR          *ucMBFrame;

    eMBException    eStatus = MB_EX_NONE;
 8017ae4:	2300      	movs	r3, #0
 8017ae6:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, the *usLen is not need check. */
    if( ( *usLen == MB_PDU_FUNC_WRITE_MUL_SIZE ) || xMBMasterRequestIsBroadcast() )
 8017ae8:	683b      	ldr	r3, [r7, #0]
 8017aea:	881b      	ldrh	r3, [r3, #0]
 8017aec:	2b05      	cmp	r3, #5
 8017aee:	d004      	beq.n	8017afa <eMBMasterFuncWriteMultipleCoils+0x20>
 8017af0:	f002 fe42 	bl	801a778 <xMBMasterRequestIsBroadcast>
 8017af4:	4603      	mov	r3, r0
 8017af6:	2b00      	cmp	r3, #0
 8017af8:	d052      	beq.n	8017ba0 <eMBMasterFuncWriteMultipleCoils+0xc6>
    {
    	vMBMasterGetPDUSndBuf(&ucMBFrame);
 8017afa:	f107 030c 	add.w	r3, r7, #12
 8017afe:	4618      	mov	r0, r3
 8017b00:	f002 fdee 	bl	801a6e0 <vMBMasterGetPDUSndBuf>
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8017b04:	687b      	ldr	r3, [r7, #4]
 8017b06:	3301      	adds	r3, #1
 8017b08:	781b      	ldrb	r3, [r3, #0]
 8017b0a:	b29b      	uxth	r3, r3
 8017b0c:	021b      	lsls	r3, r3, #8
 8017b0e:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8017b10:	687b      	ldr	r3, [r7, #4]
 8017b12:	3302      	adds	r3, #2
 8017b14:	781b      	ldrb	r3, [r3, #0]
 8017b16:	b29a      	uxth	r2, r3
 8017b18:	8abb      	ldrh	r3, [r7, #20]
 8017b1a:	4313      	orrs	r3, r2
 8017b1c:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8017b1e:	8abb      	ldrh	r3, [r7, #20]
 8017b20:	3301      	adds	r3, #1
 8017b22:	82bb      	strh	r3, [r7, #20]

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
 8017b24:	687b      	ldr	r3, [r7, #4]
 8017b26:	3303      	adds	r3, #3
 8017b28:	781b      	ldrb	r3, [r3, #0]
 8017b2a:	b29b      	uxth	r3, r3
 8017b2c:	021b      	lsls	r3, r3, #8
 8017b2e:	827b      	strh	r3, [r7, #18]
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 8017b30:	687b      	ldr	r3, [r7, #4]
 8017b32:	3304      	adds	r3, #4
 8017b34:	781b      	ldrb	r3, [r3, #0]
 8017b36:	b29a      	uxth	r2, r3
 8017b38:	8a7b      	ldrh	r3, [r7, #18]
 8017b3a:	4313      	orrs	r3, r2
 8017b3c:	827b      	strh	r3, [r7, #18]

        ucByteCount = ucMBFrame[MB_PDU_REQ_WRITE_MUL_BYTECNT_OFF];
 8017b3e:	68fb      	ldr	r3, [r7, #12]
 8017b40:	795b      	ldrb	r3, [r3, #5]
 8017b42:	747b      	strb	r3, [r7, #17]

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
 8017b44:	8a7b      	ldrh	r3, [r7, #18]
 8017b46:	f003 0307 	and.w	r3, r3, #7
 8017b4a:	2b00      	cmp	r3, #0
 8017b4c:	d006      	beq.n	8017b5c <eMBMasterFuncWriteMultipleCoils+0x82>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 8017b4e:	8a7b      	ldrh	r3, [r7, #18]
 8017b50:	08db      	lsrs	r3, r3, #3
 8017b52:	b29b      	uxth	r3, r3
 8017b54:	b2db      	uxtb	r3, r3
 8017b56:	3301      	adds	r3, #1
 8017b58:	75fb      	strb	r3, [r7, #23]
 8017b5a:	e003      	b.n	8017b64 <eMBMasterFuncWriteMultipleCoils+0x8a>
        }
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
 8017b5c:	8a7b      	ldrh	r3, [r7, #18]
 8017b5e:	08db      	lsrs	r3, r3, #3
 8017b60:	b29b      	uxth	r3, r3
 8017b62:	75fb      	strb	r3, [r7, #23]
        }

        if( ( usCoilCnt >= 1 ) && ( ucByteCountVerify == ucByteCount ) )
 8017b64:	8a7b      	ldrh	r3, [r7, #18]
 8017b66:	2b00      	cmp	r3, #0
 8017b68:	d016      	beq.n	8017b98 <eMBMasterFuncWriteMultipleCoils+0xbe>
 8017b6a:	7dfa      	ldrb	r2, [r7, #23]
 8017b6c:	7c7b      	ldrb	r3, [r7, #17]
 8017b6e:	429a      	cmp	r2, r3
 8017b70:	d112      	bne.n	8017b98 <eMBMasterFuncWriteMultipleCoils+0xbe>
        {
            eRegStatus =
                eMBMasterRegCoilsCB( &ucMBFrame[MB_PDU_REQ_WRITE_MUL_VALUES_OFF],
 8017b72:	68fb      	ldr	r3, [r7, #12]
 8017b74:	1d98      	adds	r0, r3, #6
 8017b76:	8a7a      	ldrh	r2, [r7, #18]
 8017b78:	8ab9      	ldrh	r1, [r7, #20]
 8017b7a:	2301      	movs	r3, #1
 8017b7c:	f002 f938 	bl	8019df0 <eMBMasterRegCoilsCB>
 8017b80:	4603      	mov	r3, r0
 8017b82:	743b      	strb	r3, [r7, #16]
                               usRegAddress, usCoilCnt, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8017b84:	7c3b      	ldrb	r3, [r7, #16]
 8017b86:	2b00      	cmp	r3, #0
 8017b88:	d009      	beq.n	8017b9e <eMBMasterFuncWriteMultipleCoils+0xc4>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8017b8a:	7c3b      	ldrb	r3, [r7, #16]
 8017b8c:	4618      	mov	r0, r3
 8017b8e:	f000 feb1 	bl	80188f4 <prveMBError2Exception>
 8017b92:	4603      	mov	r3, r0
 8017b94:	75bb      	strb	r3, [r7, #22]
            if( eRegStatus != MB_ENOERR )
 8017b96:	e002      	b.n	8017b9e <eMBMasterFuncWriteMultipleCoils+0xc4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8017b98:	2303      	movs	r3, #3
 8017b9a:	75bb      	strb	r3, [r7, #22]
        if( ( usCoilCnt >= 1 ) && ( ucByteCountVerify == ucByteCount ) )
 8017b9c:	e002      	b.n	8017ba4 <eMBMasterFuncWriteMultipleCoils+0xca>
 8017b9e:	e001      	b.n	8017ba4 <eMBMasterFuncWriteMultipleCoils+0xca>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8017ba0:	2303      	movs	r3, #3
 8017ba2:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 8017ba4:	7dbb      	ldrb	r3, [r7, #22]
}
 8017ba6:	4618      	mov	r0, r3
 8017ba8:	3718      	adds	r7, #24
 8017baa:	46bd      	mov	sp, r7
 8017bac:	bd80      	pop	{r7, pc}

08017bae <eMBFuncReadDiscreteInputs>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
 8017bae:	b580      	push	{r7, lr}
 8017bb0:	b086      	sub	sp, #24
 8017bb2:	af00      	add	r7, sp, #0
 8017bb4:	6078      	str	r0, [r7, #4]
 8017bb6:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usDiscreteCnt;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8017bb8:	2300      	movs	r3, #0
 8017bba:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8017bbc:	683b      	ldr	r3, [r7, #0]
 8017bbe:	881b      	ldrh	r3, [r3, #0]
 8017bc0:	2b05      	cmp	r3, #5
 8017bc2:	d16c      	bne.n	8017c9e <eMBFuncReadDiscreteInputs+0xf0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8017bc4:	687b      	ldr	r3, [r7, #4]
 8017bc6:	3301      	adds	r3, #1
 8017bc8:	781b      	ldrb	r3, [r3, #0]
 8017bca:	b29b      	uxth	r3, r3
 8017bcc:	021b      	lsls	r3, r3, #8
 8017bce:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8017bd0:	687b      	ldr	r3, [r7, #4]
 8017bd2:	3302      	adds	r3, #2
 8017bd4:	781b      	ldrb	r3, [r3, #0]
 8017bd6:	b29a      	uxth	r2, r3
 8017bd8:	8abb      	ldrh	r3, [r7, #20]
 8017bda:	4313      	orrs	r3, r2
 8017bdc:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8017bde:	8abb      	ldrh	r3, [r7, #20]
 8017be0:	3301      	adds	r3, #1
 8017be2:	82bb      	strh	r3, [r7, #20]

        usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
 8017be4:	687b      	ldr	r3, [r7, #4]
 8017be6:	3303      	adds	r3, #3
 8017be8:	781b      	ldrb	r3, [r3, #0]
 8017bea:	b29b      	uxth	r3, r3
 8017bec:	021b      	lsls	r3, r3, #8
 8017bee:	827b      	strh	r3, [r7, #18]
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
 8017bf0:	687b      	ldr	r3, [r7, #4]
 8017bf2:	3304      	adds	r3, #4
 8017bf4:	781b      	ldrb	r3, [r3, #0]
 8017bf6:	b29a      	uxth	r2, r3
 8017bf8:	8a7b      	ldrh	r3, [r7, #18]
 8017bfa:	4313      	orrs	r3, r2
 8017bfc:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usDiscreteCnt >= 1 ) &&
 8017bfe:	8a7b      	ldrh	r3, [r7, #18]
 8017c00:	2b00      	cmp	r3, #0
 8017c02:	d049      	beq.n	8017c98 <eMBFuncReadDiscreteInputs+0xea>
 8017c04:	8a7b      	ldrh	r3, [r7, #18]
 8017c06:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8017c0a:	d245      	bcs.n	8017c98 <eMBFuncReadDiscreteInputs+0xea>
            ( usDiscreteCnt < MB_PDU_FUNC_READ_DISCCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8017c0c:	687b      	ldr	r3, [r7, #4]
 8017c0e:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8017c10:	683b      	ldr	r3, [r7, #0]
 8017c12:	2200      	movs	r2, #0
 8017c14:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
 8017c16:	68fb      	ldr	r3, [r7, #12]
 8017c18:	1c5a      	adds	r2, r3, #1
 8017c1a:	60fa      	str	r2, [r7, #12]
 8017c1c:	2202      	movs	r2, #2
 8017c1e:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8017c20:	683b      	ldr	r3, [r7, #0]
 8017c22:	881b      	ldrh	r3, [r3, #0]
 8017c24:	3301      	adds	r3, #1
 8017c26:	b29a      	uxth	r2, r3
 8017c28:	683b      	ldr	r3, [r7, #0]
 8017c2a:	801a      	strh	r2, [r3, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
 8017c2c:	8a7b      	ldrh	r3, [r7, #18]
 8017c2e:	f003 0307 	and.w	r3, r3, #7
 8017c32:	2b00      	cmp	r3, #0
 8017c34:	d006      	beq.n	8017c44 <eMBFuncReadDiscreteInputs+0x96>
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
 8017c36:	8a7b      	ldrh	r3, [r7, #18]
 8017c38:	08db      	lsrs	r3, r3, #3
 8017c3a:	b29b      	uxth	r3, r3
 8017c3c:	b2db      	uxtb	r3, r3
 8017c3e:	3301      	adds	r3, #1
 8017c40:	75fb      	strb	r3, [r7, #23]
 8017c42:	e003      	b.n	8017c4c <eMBFuncReadDiscreteInputs+0x9e>
            }
            else
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
 8017c44:	8a7b      	ldrh	r3, [r7, #18]
 8017c46:	08db      	lsrs	r3, r3, #3
 8017c48:	b29b      	uxth	r3, r3
 8017c4a:	75fb      	strb	r3, [r7, #23]
            }
            *pucFrameCur++ = ucNBytes;
 8017c4c:	68fb      	ldr	r3, [r7, #12]
 8017c4e:	1c5a      	adds	r2, r3, #1
 8017c50:	60fa      	str	r2, [r7, #12]
 8017c52:	7dfa      	ldrb	r2, [r7, #23]
 8017c54:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8017c56:	683b      	ldr	r3, [r7, #0]
 8017c58:	881b      	ldrh	r3, [r3, #0]
 8017c5a:	3301      	adds	r3, #1
 8017c5c:	b29a      	uxth	r2, r3
 8017c5e:	683b      	ldr	r3, [r7, #0]
 8017c60:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );
 8017c62:	8a7a      	ldrh	r2, [r7, #18]
 8017c64:	8abb      	ldrh	r3, [r7, #20]
 8017c66:	4619      	mov	r1, r3
 8017c68:	68f8      	ldr	r0, [r7, #12]
 8017c6a:	f001 ff69 	bl	8019b40 <eMBRegDiscreteCB>
 8017c6e:	4603      	mov	r3, r0
 8017c70:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8017c72:	7afb      	ldrb	r3, [r7, #11]
 8017c74:	2b00      	cmp	r3, #0
 8017c76:	d006      	beq.n	8017c86 <eMBFuncReadDiscreteInputs+0xd8>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8017c78:	7afb      	ldrb	r3, [r7, #11]
 8017c7a:	4618      	mov	r0, r3
 8017c7c:	f000 fe3a 	bl	80188f4 <prveMBError2Exception>
 8017c80:	4603      	mov	r3, r0
 8017c82:	75bb      	strb	r3, [r7, #22]
            if( eRegStatus != MB_ENOERR )
 8017c84:	e00d      	b.n	8017ca2 <eMBFuncReadDiscreteInputs+0xf4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 8017c86:	683b      	ldr	r3, [r7, #0]
 8017c88:	881a      	ldrh	r2, [r3, #0]
 8017c8a:	7dfb      	ldrb	r3, [r7, #23]
 8017c8c:	b29b      	uxth	r3, r3
 8017c8e:	4413      	add	r3, r2
 8017c90:	b29a      	uxth	r2, r3
 8017c92:	683b      	ldr	r3, [r7, #0]
 8017c94:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8017c96:	e004      	b.n	8017ca2 <eMBFuncReadDiscreteInputs+0xf4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8017c98:	2303      	movs	r3, #3
 8017c9a:	75bb      	strb	r3, [r7, #22]
 8017c9c:	e001      	b.n	8017ca2 <eMBFuncReadDiscreteInputs+0xf4>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8017c9e:	2303      	movs	r3, #3
 8017ca0:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 8017ca2:	7dbb      	ldrb	r3, [r7, #22]
}
 8017ca4:	4618      	mov	r0, r3
 8017ca6:	3718      	adds	r7, #24
 8017ca8:	46bd      	mov	sp, r7
 8017caa:	bd80      	pop	{r7, pc}

08017cac <eMBMasterReqReadDiscreteInputs>:
 *
 * @return error code
 */
eMBMasterReqErrCode
eMBMasterReqReadDiscreteInputs( UCHAR ucSndAddr, USHORT usDiscreteAddr, USHORT usNDiscreteIn, LONG lTimeOut )
{
 8017cac:	b580      	push	{r7, lr}
 8017cae:	b086      	sub	sp, #24
 8017cb0:	af00      	add	r7, sp, #0
 8017cb2:	607b      	str	r3, [r7, #4]
 8017cb4:	4603      	mov	r3, r0
 8017cb6:	73fb      	strb	r3, [r7, #15]
 8017cb8:	460b      	mov	r3, r1
 8017cba:	81bb      	strh	r3, [r7, #12]
 8017cbc:	4613      	mov	r3, r2
 8017cbe:	817b      	strh	r3, [r7, #10]
    UCHAR                 *ucMBFrame;
    eMBMasterReqErrCode    eErrStatus = MB_MRE_NO_ERR;
 8017cc0:	2300      	movs	r3, #0
 8017cc2:	75fb      	strb	r3, [r7, #23]

    if ( ucSndAddr > MB_MASTER_TOTAL_SLAVE_NUM ) eErrStatus = MB_MRE_ILL_ARG;
 8017cc4:	7bfb      	ldrb	r3, [r7, #15]
 8017cc6:	2b10      	cmp	r3, #16
 8017cc8:	d902      	bls.n	8017cd0 <eMBMasterReqReadDiscreteInputs+0x24>
 8017cca:	2302      	movs	r3, #2
 8017ccc:	75fb      	strb	r3, [r7, #23]
 8017cce:	e036      	b.n	8017d3e <eMBMasterReqReadDiscreteInputs+0x92>
    else if ( xMBMasterRunResTake( lTimeOut ) == FALSE ) eErrStatus = MB_MRE_MASTER_BUSY;
 8017cd0:	6878      	ldr	r0, [r7, #4]
 8017cd2:	f001 f9bb 	bl	801904c <xMBMasterRunResTake>
 8017cd6:	4603      	mov	r3, r0
 8017cd8:	2b00      	cmp	r3, #0
 8017cda:	d102      	bne.n	8017ce2 <eMBMasterReqReadDiscreteInputs+0x36>
 8017cdc:	2307      	movs	r3, #7
 8017cde:	75fb      	strb	r3, [r7, #23]
 8017ce0:	e02d      	b.n	8017d3e <eMBMasterReqReadDiscreteInputs+0x92>
    else
    {
		vMBMasterGetPDUSndBuf(&ucMBFrame);
 8017ce2:	f107 0310 	add.w	r3, r7, #16
 8017ce6:	4618      	mov	r0, r3
 8017ce8:	f002 fcfa 	bl	801a6e0 <vMBMasterGetPDUSndBuf>
		vMBMasterSetDestAddress(ucSndAddr);
 8017cec:	7bfb      	ldrb	r3, [r7, #15]
 8017cee:	4618      	mov	r0, r3
 8017cf0:	f002 fd26 	bl	801a740 <vMBMasterSetDestAddress>
		ucMBFrame[MB_PDU_FUNC_OFF]                 = MB_FUNC_READ_DISCRETE_INPUTS;
 8017cf4:	693b      	ldr	r3, [r7, #16]
 8017cf6:	2202      	movs	r2, #2
 8017cf8:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF]        = usDiscreteAddr >> 8;
 8017cfa:	89bb      	ldrh	r3, [r7, #12]
 8017cfc:	0a1b      	lsrs	r3, r3, #8
 8017cfe:	b29a      	uxth	r2, r3
 8017d00:	693b      	ldr	r3, [r7, #16]
 8017d02:	3301      	adds	r3, #1
 8017d04:	b2d2      	uxtb	r2, r2
 8017d06:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1]    = usDiscreteAddr;
 8017d08:	693b      	ldr	r3, [r7, #16]
 8017d0a:	3302      	adds	r3, #2
 8017d0c:	89ba      	ldrh	r2, [r7, #12]
 8017d0e:	b2d2      	uxtb	r2, r2
 8017d10:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_READ_DISCCNT_OFF ]    = usNDiscreteIn >> 8;
 8017d12:	897b      	ldrh	r3, [r7, #10]
 8017d14:	0a1b      	lsrs	r3, r3, #8
 8017d16:	b29a      	uxth	r2, r3
 8017d18:	693b      	ldr	r3, [r7, #16]
 8017d1a:	3303      	adds	r3, #3
 8017d1c:	b2d2      	uxtb	r2, r2
 8017d1e:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_READ_DISCCNT_OFF + 1] = usNDiscreteIn;
 8017d20:	693b      	ldr	r3, [r7, #16]
 8017d22:	3304      	adds	r3, #4
 8017d24:	897a      	ldrh	r2, [r7, #10]
 8017d26:	b2d2      	uxtb	r2, r2
 8017d28:	701a      	strb	r2, [r3, #0]
		vMBMasterSetPDUSndLength( MB_PDU_SIZE_MIN + MB_PDU_REQ_READ_SIZE );
 8017d2a:	2005      	movs	r0, #5
 8017d2c:	f002 fce8 	bl	801a700 <vMBMasterSetPDUSndLength>
		( void ) xMBMasterPortEventPost( EV_MASTER_FRAME_SENT );
 8017d30:	2008      	movs	r0, #8
 8017d32:	f001 f909 	bl	8018f48 <xMBMasterPortEventPost>
		eErrStatus = eMBMasterWaitRequestFinish( );
 8017d36:	f001 f9af 	bl	8019098 <eMBMasterWaitRequestFinish>
 8017d3a:	4603      	mov	r3, r0
 8017d3c:	75fb      	strb	r3, [r7, #23]
    }
    return eErrStatus;
 8017d3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8017d40:	4618      	mov	r0, r3
 8017d42:	3718      	adds	r7, #24
 8017d44:	46bd      	mov	sp, r7
 8017d46:	bd80      	pop	{r7, pc}

08017d48 <eMBMasterFuncReadDiscreteInputs>:

eMBException
eMBMasterFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
 8017d48:	b580      	push	{r7, lr}
 8017d4a:	b086      	sub	sp, #24
 8017d4c:	af00      	add	r7, sp, #0
 8017d4e:	6078      	str	r0, [r7, #4]
 8017d50:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usDiscreteCnt;
    UCHAR           ucNBytes;
    UCHAR          *ucMBFrame;

    eMBException    eStatus = MB_EX_NONE;
 8017d52:	2300      	movs	r3, #0
 8017d54:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, and it's read mode. This request don't need execute. */
    if ( xMBMasterRequestIsBroadcast() )
 8017d56:	f002 fd0f 	bl	801a778 <xMBMasterRequestIsBroadcast>
 8017d5a:	4603      	mov	r3, r0
 8017d5c:	2b00      	cmp	r3, #0
 8017d5e:	d002      	beq.n	8017d66 <eMBMasterFuncReadDiscreteInputs+0x1e>
    {
    	eStatus = MB_EX_NONE;
 8017d60:	2300      	movs	r3, #0
 8017d62:	75bb      	strb	r3, [r7, #22]
 8017d64:	e056      	b.n	8017e14 <eMBMasterFuncReadDiscreteInputs+0xcc>
    }
    else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
 8017d66:	683b      	ldr	r3, [r7, #0]
 8017d68:	881b      	ldrh	r3, [r3, #0]
 8017d6a:	2b01      	cmp	r3, #1
 8017d6c:	d950      	bls.n	8017e10 <eMBMasterFuncReadDiscreteInputs+0xc8>
    {
    	vMBMasterGetPDUSndBuf(&ucMBFrame);
 8017d6e:	f107 030c 	add.w	r3, r7, #12
 8017d72:	4618      	mov	r0, r3
 8017d74:	f002 fcb4 	bl	801a6e0 <vMBMasterGetPDUSndBuf>
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
 8017d78:	68fb      	ldr	r3, [r7, #12]
 8017d7a:	3301      	adds	r3, #1
 8017d7c:	781b      	ldrb	r3, [r3, #0]
 8017d7e:	b29b      	uxth	r3, r3
 8017d80:	021b      	lsls	r3, r3, #8
 8017d82:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
 8017d84:	68fb      	ldr	r3, [r7, #12]
 8017d86:	3302      	adds	r3, #2
 8017d88:	781b      	ldrb	r3, [r3, #0]
 8017d8a:	b29a      	uxth	r2, r3
 8017d8c:	8abb      	ldrh	r3, [r7, #20]
 8017d8e:	4313      	orrs	r3, r2
 8017d90:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8017d92:	8abb      	ldrh	r3, [r7, #20]
 8017d94:	3301      	adds	r3, #1
 8017d96:	82bb      	strh	r3, [r7, #20]

        usDiscreteCnt = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_DISCCNT_OFF] << 8 );
 8017d98:	68fb      	ldr	r3, [r7, #12]
 8017d9a:	3303      	adds	r3, #3
 8017d9c:	781b      	ldrb	r3, [r3, #0]
 8017d9e:	b29b      	uxth	r3, r3
 8017da0:	021b      	lsls	r3, r3, #8
 8017da2:	827b      	strh	r3, [r7, #18]
        usDiscreteCnt |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_DISCCNT_OFF + 1] );
 8017da4:	68fb      	ldr	r3, [r7, #12]
 8017da6:	3304      	adds	r3, #4
 8017da8:	781b      	ldrb	r3, [r3, #0]
 8017daa:	b29a      	uxth	r2, r3
 8017dac:	8a7b      	ldrh	r3, [r7, #18]
 8017dae:	4313      	orrs	r3, r2
 8017db0:	827b      	strh	r3, [r7, #18]

        /* Test if the quantity of coils is a multiple of 8. If not last
         * byte is only partially field with unused coils set to zero. */
        if( ( usDiscreteCnt & 0x0007 ) != 0 )
 8017db2:	8a7b      	ldrh	r3, [r7, #18]
 8017db4:	f003 0307 	and.w	r3, r3, #7
 8017db8:	2b00      	cmp	r3, #0
 8017dba:	d006      	beq.n	8017dca <eMBMasterFuncReadDiscreteInputs+0x82>
        {
        	ucNBytes = ( UCHAR )( usDiscreteCnt / 8 + 1 );
 8017dbc:	8a7b      	ldrh	r3, [r7, #18]
 8017dbe:	08db      	lsrs	r3, r3, #3
 8017dc0:	b29b      	uxth	r3, r3
 8017dc2:	b2db      	uxtb	r3, r3
 8017dc4:	3301      	adds	r3, #1
 8017dc6:	75fb      	strb	r3, [r7, #23]
 8017dc8:	e003      	b.n	8017dd2 <eMBMasterFuncReadDiscreteInputs+0x8a>
        }
        else
        {
        	ucNBytes = ( UCHAR )( usDiscreteCnt / 8 );
 8017dca:	8a7b      	ldrh	r3, [r7, #18]
 8017dcc:	08db      	lsrs	r3, r3, #3
 8017dce:	b29b      	uxth	r3, r3
 8017dd0:	75fb      	strb	r3, [r7, #23]
        }

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
		if ((usDiscreteCnt >= 1) && ucNBytes == pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF])
 8017dd2:	8a7b      	ldrh	r3, [r7, #18]
 8017dd4:	2b00      	cmp	r3, #0
 8017dd6:	d018      	beq.n	8017e0a <eMBMasterFuncReadDiscreteInputs+0xc2>
 8017dd8:	687b      	ldr	r3, [r7, #4]
 8017dda:	3301      	adds	r3, #1
 8017ddc:	781b      	ldrb	r3, [r3, #0]
 8017dde:	7dfa      	ldrb	r2, [r7, #23]
 8017de0:	429a      	cmp	r2, r3
 8017de2:	d112      	bne.n	8017e0a <eMBMasterFuncReadDiscreteInputs+0xc2>
        {
	       	/* Make callback to fill the buffer. */
			eRegStatus = eMBMasterRegDiscreteCB( &pucFrame[MB_PDU_FUNC_READ_VALUES_OFF], usRegAddress, usDiscreteCnt );
 8017de4:	687b      	ldr	r3, [r7, #4]
 8017de6:	3302      	adds	r3, #2
 8017de8:	8a7a      	ldrh	r2, [r7, #18]
 8017dea:	8ab9      	ldrh	r1, [r7, #20]
 8017dec:	4618      	mov	r0, r3
 8017dee:	f002 f8b5 	bl	8019f5c <eMBMasterRegDiscreteCB>
 8017df2:	4603      	mov	r3, r0
 8017df4:	747b      	strb	r3, [r7, #17]

			/* If an error occured convert it into a Modbus exception. */
			if( eRegStatus != MB_ENOERR )
 8017df6:	7c7b      	ldrb	r3, [r7, #17]
 8017df8:	2b00      	cmp	r3, #0
 8017dfa:	d00b      	beq.n	8017e14 <eMBMasterFuncReadDiscreteInputs+0xcc>
			{
				eStatus = prveMBError2Exception( eRegStatus );
 8017dfc:	7c7b      	ldrb	r3, [r7, #17]
 8017dfe:	4618      	mov	r0, r3
 8017e00:	f000 fd78 	bl	80188f4 <prveMBError2Exception>
 8017e04:	4603      	mov	r3, r0
 8017e06:	75bb      	strb	r3, [r7, #22]
			if( eRegStatus != MB_ENOERR )
 8017e08:	e004      	b.n	8017e14 <eMBMasterFuncReadDiscreteInputs+0xcc>
			}
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8017e0a:	2303      	movs	r3, #3
 8017e0c:	75bb      	strb	r3, [r7, #22]
 8017e0e:	e001      	b.n	8017e14 <eMBMasterFuncReadDiscreteInputs+0xcc>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8017e10:	2303      	movs	r3, #3
 8017e12:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 8017e14:	7dbb      	ldrb	r3, [r7, #22]
}
 8017e16:	4618      	mov	r0, r3
 8017e18:	3718      	adds	r7, #24
 8017e1a:	46bd      	mov	sp, r7
 8017e1c:	bd80      	pop	{r7, pc}

08017e1e <eMBFuncWriteHoldingRegister>:

#if MB_FUNC_WRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8017e1e:	b580      	push	{r7, lr}
 8017e20:	b084      	sub	sp, #16
 8017e22:	af00      	add	r7, sp, #0
 8017e24:	6078      	str	r0, [r7, #4]
 8017e26:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
 8017e28:	2300      	movs	r3, #0
 8017e2a:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8017e2c:	683b      	ldr	r3, [r7, #0]
 8017e2e:	881b      	ldrh	r3, [r3, #0]
 8017e30:	2b05      	cmp	r3, #5
 8017e32:	d122      	bne.n	8017e7a <eMBFuncWriteHoldingRegister+0x5c>
    {
        usRegAddress  = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8017e34:	687b      	ldr	r3, [r7, #4]
 8017e36:	3301      	adds	r3, #1
 8017e38:	781b      	ldrb	r3, [r3, #0]
 8017e3a:	b29b      	uxth	r3, r3
 8017e3c:	021b      	lsls	r3, r3, #8
 8017e3e:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8017e40:	687b      	ldr	r3, [r7, #4]
 8017e42:	3302      	adds	r3, #2
 8017e44:	781b      	ldrb	r3, [r3, #0]
 8017e46:	b29a      	uxth	r2, r3
 8017e48:	89bb      	ldrh	r3, [r7, #12]
 8017e4a:	4313      	orrs	r3, r2
 8017e4c:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8017e4e:	89bb      	ldrh	r3, [r7, #12]
 8017e50:	3301      	adds	r3, #1
 8017e52:	81bb      	strh	r3, [r7, #12]

        /* Make callback to update the value. */
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 8017e54:	687b      	ldr	r3, [r7, #4]
 8017e56:	1cd8      	adds	r0, r3, #3
 8017e58:	89b9      	ldrh	r1, [r7, #12]
 8017e5a:	2301      	movs	r3, #1
 8017e5c:	2201      	movs	r2, #1
 8017e5e:	f001 fd3b 	bl	80198d8 <eMBRegHoldingCB>
 8017e62:	4603      	mov	r3, r0
 8017e64:	72fb      	strb	r3, [r7, #11]
                                      usRegAddress, 1, MB_REG_WRITE );

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
 8017e66:	7afb      	ldrb	r3, [r7, #11]
 8017e68:	2b00      	cmp	r3, #0
 8017e6a:	d008      	beq.n	8017e7e <eMBFuncWriteHoldingRegister+0x60>
        {
            eStatus = prveMBError2Exception( eRegStatus );
 8017e6c:	7afb      	ldrb	r3, [r7, #11]
 8017e6e:	4618      	mov	r0, r3
 8017e70:	f000 fd40 	bl	80188f4 <prveMBError2Exception>
 8017e74:	4603      	mov	r3, r0
 8017e76:	73fb      	strb	r3, [r7, #15]
 8017e78:	e001      	b.n	8017e7e <eMBFuncWriteHoldingRegister+0x60>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8017e7a:	2303      	movs	r3, #3
 8017e7c:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 8017e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8017e80:	4618      	mov	r0, r3
 8017e82:	3710      	adds	r7, #16
 8017e84:	46bd      	mov	sp, r7
 8017e86:	bd80      	pop	{r7, pc}

08017e88 <eMBFuncWriteMultipleHoldingRegister>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_HOLDING_ENABLED > 0
eMBException
eMBFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8017e88:	b580      	push	{r7, lr}
 8017e8a:	b084      	sub	sp, #16
 8017e8c:	af00      	add	r7, sp, #0
 8017e8e:	6078      	str	r0, [r7, #4]
 8017e90:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
 8017e92:	2300      	movs	r3, #0
 8017e94:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8017e96:	683b      	ldr	r3, [r7, #0]
 8017e98:	881b      	ldrh	r3, [r3, #0]
 8017e9a:	2b05      	cmp	r3, #5
 8017e9c:	d946      	bls.n	8017f2c <eMBFuncWriteMultipleHoldingRegister+0xa4>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8017e9e:	687b      	ldr	r3, [r7, #4]
 8017ea0:	3301      	adds	r3, #1
 8017ea2:	781b      	ldrb	r3, [r3, #0]
 8017ea4:	b29b      	uxth	r3, r3
 8017ea6:	021b      	lsls	r3, r3, #8
 8017ea8:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8017eaa:	687b      	ldr	r3, [r7, #4]
 8017eac:	3302      	adds	r3, #2
 8017eae:	781b      	ldrb	r3, [r3, #0]
 8017eb0:	b29a      	uxth	r2, r3
 8017eb2:	89bb      	ldrh	r3, [r7, #12]
 8017eb4:	4313      	orrs	r3, r2
 8017eb6:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8017eb8:	89bb      	ldrh	r3, [r7, #12]
 8017eba:	3301      	adds	r3, #1
 8017ebc:	81bb      	strh	r3, [r7, #12]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
 8017ebe:	687b      	ldr	r3, [r7, #4]
 8017ec0:	3303      	adds	r3, #3
 8017ec2:	781b      	ldrb	r3, [r3, #0]
 8017ec4:	b29b      	uxth	r3, r3
 8017ec6:	021b      	lsls	r3, r3, #8
 8017ec8:	817b      	strh	r3, [r7, #10]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
 8017eca:	687b      	ldr	r3, [r7, #4]
 8017ecc:	3304      	adds	r3, #4
 8017ece:	781b      	ldrb	r3, [r3, #0]
 8017ed0:	b29a      	uxth	r2, r3
 8017ed2:	897b      	ldrh	r3, [r7, #10]
 8017ed4:	4313      	orrs	r3, r2
 8017ed6:	817b      	strh	r3, [r7, #10]

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 8017ed8:	687b      	ldr	r3, [r7, #4]
 8017eda:	795b      	ldrb	r3, [r3, #5]
 8017edc:	727b      	strb	r3, [r7, #9]

        if( ( usRegCount >= 1 ) &&
 8017ede:	897b      	ldrh	r3, [r7, #10]
 8017ee0:	2b00      	cmp	r3, #0
 8017ee2:	d020      	beq.n	8017f26 <eMBFuncWriteMultipleHoldingRegister+0x9e>
 8017ee4:	897b      	ldrh	r3, [r7, #10]
 8017ee6:	2b78      	cmp	r3, #120	; 0x78
 8017ee8:	d81d      	bhi.n	8017f26 <eMBFuncWriteMultipleHoldingRegister+0x9e>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
 8017eea:	897b      	ldrh	r3, [r7, #10]
 8017eec:	b2db      	uxtb	r3, r3
 8017eee:	005b      	lsls	r3, r3, #1
 8017ef0:	b2db      	uxtb	r3, r3
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
 8017ef2:	7a7a      	ldrb	r2, [r7, #9]
 8017ef4:	429a      	cmp	r2, r3
 8017ef6:	d116      	bne.n	8017f26 <eMBFuncWriteMultipleHoldingRegister+0x9e>
        {
            /* Make callback to update the register values. */
            eRegStatus =
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 8017ef8:	687b      	ldr	r3, [r7, #4]
 8017efa:	1d98      	adds	r0, r3, #6
 8017efc:	897a      	ldrh	r2, [r7, #10]
 8017efe:	89b9      	ldrh	r1, [r7, #12]
 8017f00:	2301      	movs	r3, #1
 8017f02:	f001 fce9 	bl	80198d8 <eMBRegHoldingCB>
 8017f06:	4603      	mov	r3, r0
 8017f08:	723b      	strb	r3, [r7, #8]
                                 usRegAddress, usRegCount, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8017f0a:	7a3b      	ldrb	r3, [r7, #8]
 8017f0c:	2b00      	cmp	r3, #0
 8017f0e:	d006      	beq.n	8017f1e <eMBFuncWriteMultipleHoldingRegister+0x96>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8017f10:	7a3b      	ldrb	r3, [r7, #8]
 8017f12:	4618      	mov	r0, r3
 8017f14:	f000 fcee 	bl	80188f4 <prveMBError2Exception>
 8017f18:	4603      	mov	r3, r0
 8017f1a:	73fb      	strb	r3, [r7, #15]
            if( eRegStatus != MB_ENOERR )
 8017f1c:	e008      	b.n	8017f30 <eMBFuncWriteMultipleHoldingRegister+0xa8>
            {
                /* The response contains the function code, the starting
                 * address and the quantity of registers. We reuse the
                 * old values in the buffer because they are still valid.
                 */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8017f1e:	683b      	ldr	r3, [r7, #0]
 8017f20:	2205      	movs	r2, #5
 8017f22:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8017f24:	e004      	b.n	8017f30 <eMBFuncWriteMultipleHoldingRegister+0xa8>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8017f26:	2303      	movs	r3, #3
 8017f28:	73fb      	strb	r3, [r7, #15]
 8017f2a:	e001      	b.n	8017f30 <eMBFuncWriteMultipleHoldingRegister+0xa8>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8017f2c:	2303      	movs	r3, #3
 8017f2e:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 8017f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8017f32:	4618      	mov	r0, r3
 8017f34:	3710      	adds	r7, #16
 8017f36:	46bd      	mov	sp, r7
 8017f38:	bd80      	pop	{r7, pc}

08017f3a <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8017f3a:	b580      	push	{r7, lr}
 8017f3c:	b086      	sub	sp, #24
 8017f3e:	af00      	add	r7, sp, #0
 8017f40:	6078      	str	r0, [r7, #4]
 8017f42:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8017f44:	2300      	movs	r3, #0
 8017f46:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8017f48:	683b      	ldr	r3, [r7, #0]
 8017f4a:	881b      	ldrh	r3, [r3, #0]
 8017f4c:	2b05      	cmp	r3, #5
 8017f4e:	d15c      	bne.n	801800a <eMBFuncReadHoldingRegister+0xd0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8017f50:	687b      	ldr	r3, [r7, #4]
 8017f52:	3301      	adds	r3, #1
 8017f54:	781b      	ldrb	r3, [r3, #0]
 8017f56:	b29b      	uxth	r3, r3
 8017f58:	021b      	lsls	r3, r3, #8
 8017f5a:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8017f5c:	687b      	ldr	r3, [r7, #4]
 8017f5e:	3302      	adds	r3, #2
 8017f60:	781b      	ldrb	r3, [r3, #0]
 8017f62:	b29a      	uxth	r2, r3
 8017f64:	8abb      	ldrh	r3, [r7, #20]
 8017f66:	4313      	orrs	r3, r2
 8017f68:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8017f6a:	8abb      	ldrh	r3, [r7, #20]
 8017f6c:	3301      	adds	r3, #1
 8017f6e:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 8017f70:	687b      	ldr	r3, [r7, #4]
 8017f72:	3303      	adds	r3, #3
 8017f74:	781b      	ldrb	r3, [r3, #0]
 8017f76:	b29b      	uxth	r3, r3
 8017f78:	021b      	lsls	r3, r3, #8
 8017f7a:	827b      	strh	r3, [r7, #18]
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 8017f7c:	687b      	ldr	r3, [r7, #4]
 8017f7e:	3304      	adds	r3, #4
 8017f80:	781b      	ldrb	r3, [r3, #0]
 8017f82:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
 8017f84:	8a7b      	ldrh	r3, [r7, #18]
 8017f86:	2b00      	cmp	r3, #0
 8017f88:	d03c      	beq.n	8018004 <eMBFuncReadHoldingRegister+0xca>
 8017f8a:	8a7b      	ldrh	r3, [r7, #18]
 8017f8c:	2b7d      	cmp	r3, #125	; 0x7d
 8017f8e:	d839      	bhi.n	8018004 <eMBFuncReadHoldingRegister+0xca>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8017f90:	687b      	ldr	r3, [r7, #4]
 8017f92:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8017f94:	683b      	ldr	r3, [r7, #0]
 8017f96:	2200      	movs	r2, #0
 8017f98:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 8017f9a:	68fb      	ldr	r3, [r7, #12]
 8017f9c:	1c5a      	adds	r2, r3, #1
 8017f9e:	60fa      	str	r2, [r7, #12]
 8017fa0:	2203      	movs	r2, #3
 8017fa2:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8017fa4:	683b      	ldr	r3, [r7, #0]
 8017fa6:	881b      	ldrh	r3, [r3, #0]
 8017fa8:	3301      	adds	r3, #1
 8017faa:	b29a      	uxth	r2, r3
 8017fac:	683b      	ldr	r3, [r7, #0]
 8017fae:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 8017fb0:	8a7b      	ldrh	r3, [r7, #18]
 8017fb2:	b2da      	uxtb	r2, r3
 8017fb4:	68fb      	ldr	r3, [r7, #12]
 8017fb6:	1c59      	adds	r1, r3, #1
 8017fb8:	60f9      	str	r1, [r7, #12]
 8017fba:	0052      	lsls	r2, r2, #1
 8017fbc:	b2d2      	uxtb	r2, r2
 8017fbe:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8017fc0:	683b      	ldr	r3, [r7, #0]
 8017fc2:	881b      	ldrh	r3, [r3, #0]
 8017fc4:	3301      	adds	r3, #1
 8017fc6:	b29a      	uxth	r2, r3
 8017fc8:	683b      	ldr	r3, [r7, #0]
 8017fca:	801a      	strh	r2, [r3, #0]

            /* Make callback to fill the buffer. */
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 8017fcc:	8a7a      	ldrh	r2, [r7, #18]
 8017fce:	8ab9      	ldrh	r1, [r7, #20]
 8017fd0:	2300      	movs	r3, #0
 8017fd2:	68f8      	ldr	r0, [r7, #12]
 8017fd4:	f001 fc80 	bl	80198d8 <eMBRegHoldingCB>
 8017fd8:	4603      	mov	r3, r0
 8017fda:	72fb      	strb	r3, [r7, #11]
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8017fdc:	7afb      	ldrb	r3, [r7, #11]
 8017fde:	2b00      	cmp	r3, #0
 8017fe0:	d006      	beq.n	8017ff0 <eMBFuncReadHoldingRegister+0xb6>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8017fe2:	7afb      	ldrb	r3, [r7, #11]
 8017fe4:	4618      	mov	r0, r3
 8017fe6:	f000 fc85 	bl	80188f4 <prveMBError2Exception>
 8017fea:	4603      	mov	r3, r0
 8017fec:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 8017fee:	e00e      	b.n	801800e <eMBFuncReadHoldingRegister+0xd4>
            }
            else
            {
                *usLen += usRegCount * 2;
 8017ff0:	683b      	ldr	r3, [r7, #0]
 8017ff2:	881a      	ldrh	r2, [r3, #0]
 8017ff4:	8a7b      	ldrh	r3, [r7, #18]
 8017ff6:	005b      	lsls	r3, r3, #1
 8017ff8:	b29b      	uxth	r3, r3
 8017ffa:	4413      	add	r3, r2
 8017ffc:	b29a      	uxth	r2, r3
 8017ffe:	683b      	ldr	r3, [r7, #0]
 8018000:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8018002:	e004      	b.n	801800e <eMBFuncReadHoldingRegister+0xd4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8018004:	2303      	movs	r3, #3
 8018006:	75fb      	strb	r3, [r7, #23]
 8018008:	e001      	b.n	801800e <eMBFuncReadHoldingRegister+0xd4>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 801800a:	2303      	movs	r3, #3
 801800c:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 801800e:	7dfb      	ldrb	r3, [r7, #23]
}
 8018010:	4618      	mov	r0, r3
 8018012:	3718      	adds	r7, #24
 8018014:	46bd      	mov	sp, r7
 8018016:	bd80      	pop	{r7, pc}

08018018 <eMBFuncReadWriteMultipleHoldingRegister>:

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8018018:	b580      	push	{r7, lr}
 801801a:	b086      	sub	sp, #24
 801801c:	af00      	add	r7, sp, #0
 801801e:	6078      	str	r0, [r7, #4]
 8018020:	6039      	str	r1, [r7, #0]
    USHORT          usRegWriteAddress;
    USHORT          usRegWriteCount;
    UCHAR           ucRegWriteByteCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8018022:	2300      	movs	r3, #0
 8018024:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8018026:	683b      	ldr	r3, [r7, #0]
 8018028:	881b      	ldrh	r3, [r3, #0]
 801802a:	2b09      	cmp	r3, #9
 801802c:	f240 8099 	bls.w	8018162 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
 8018030:	687b      	ldr	r3, [r7, #4]
 8018032:	3301      	adds	r3, #1
 8018034:	781b      	ldrb	r3, [r3, #0]
 8018036:	b29b      	uxth	r3, r3
 8018038:	021b      	lsls	r3, r3, #8
 801803a:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 801803c:	687b      	ldr	r3, [r7, #4]
 801803e:	3302      	adds	r3, #2
 8018040:	781b      	ldrb	r3, [r3, #0]
 8018042:	b29a      	uxth	r2, r3
 8018044:	8abb      	ldrh	r3, [r7, #20]
 8018046:	4313      	orrs	r3, r2
 8018048:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress++;
 801804a:	8abb      	ldrh	r3, [r7, #20]
 801804c:	3301      	adds	r3, #1
 801804e:	82bb      	strh	r3, [r7, #20]

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
 8018050:	687b      	ldr	r3, [r7, #4]
 8018052:	3303      	adds	r3, #3
 8018054:	781b      	ldrb	r3, [r3, #0]
 8018056:	b29b      	uxth	r3, r3
 8018058:	021b      	lsls	r3, r3, #8
 801805a:	827b      	strh	r3, [r7, #18]
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
 801805c:	687b      	ldr	r3, [r7, #4]
 801805e:	3304      	adds	r3, #4
 8018060:	781b      	ldrb	r3, [r3, #0]
 8018062:	b29a      	uxth	r2, r3
 8018064:	8a7b      	ldrh	r3, [r7, #18]
 8018066:	4313      	orrs	r3, r2
 8018068:	827b      	strh	r3, [r7, #18]

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
 801806a:	687b      	ldr	r3, [r7, #4]
 801806c:	3305      	adds	r3, #5
 801806e:	781b      	ldrb	r3, [r3, #0]
 8018070:	b29b      	uxth	r3, r3
 8018072:	021b      	lsls	r3, r3, #8
 8018074:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 8018076:	687b      	ldr	r3, [r7, #4]
 8018078:	3306      	adds	r3, #6
 801807a:	781b      	ldrb	r3, [r3, #0]
 801807c:	b29a      	uxth	r2, r3
 801807e:	8a3b      	ldrh	r3, [r7, #16]
 8018080:	4313      	orrs	r3, r2
 8018082:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress++;
 8018084:	8a3b      	ldrh	r3, [r7, #16]
 8018086:	3301      	adds	r3, #1
 8018088:	823b      	strh	r3, [r7, #16]

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
 801808a:	687b      	ldr	r3, [r7, #4]
 801808c:	3307      	adds	r3, #7
 801808e:	781b      	ldrb	r3, [r3, #0]
 8018090:	b29b      	uxth	r3, r3
 8018092:	021b      	lsls	r3, r3, #8
 8018094:	81fb      	strh	r3, [r7, #14]
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
 8018096:	687b      	ldr	r3, [r7, #4]
 8018098:	3308      	adds	r3, #8
 801809a:	781b      	ldrb	r3, [r3, #0]
 801809c:	b29a      	uxth	r2, r3
 801809e:	89fb      	ldrh	r3, [r7, #14]
 80180a0:	4313      	orrs	r3, r2
 80180a2:	81fb      	strh	r3, [r7, #14]

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];
 80180a4:	687b      	ldr	r3, [r7, #4]
 80180a6:	7a5b      	ldrb	r3, [r3, #9]
 80180a8:	737b      	strb	r3, [r7, #13]

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 80180aa:	8a7b      	ldrh	r3, [r7, #18]
 80180ac:	2b00      	cmp	r3, #0
 80180ae:	d056      	beq.n	801815e <eMBFuncReadWriteMultipleHoldingRegister+0x146>
 80180b0:	8a7b      	ldrh	r3, [r7, #18]
 80180b2:	2b7d      	cmp	r3, #125	; 0x7d
 80180b4:	d853      	bhi.n	801815e <eMBFuncReadWriteMultipleHoldingRegister+0x146>
 80180b6:	89fb      	ldrh	r3, [r7, #14]
 80180b8:	2b00      	cmp	r3, #0
 80180ba:	d050      	beq.n	801815e <eMBFuncReadWriteMultipleHoldingRegister+0x146>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 80180bc:	89fb      	ldrh	r3, [r7, #14]
 80180be:	2b79      	cmp	r3, #121	; 0x79
 80180c0:	d84d      	bhi.n	801815e <eMBFuncReadWriteMultipleHoldingRegister+0x146>
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
 80180c2:	89fb      	ldrh	r3, [r7, #14]
 80180c4:	005a      	lsls	r2, r3, #1
 80180c6:	7b7b      	ldrb	r3, [r7, #13]
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 80180c8:	429a      	cmp	r2, r3
 80180ca:	d148      	bne.n	801815e <eMBFuncReadWriteMultipleHoldingRegister+0x146>
        {
            /* Make callback to update the register values. */
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
 80180cc:	687b      	ldr	r3, [r7, #4]
 80180ce:	f103 000a 	add.w	r0, r3, #10
 80180d2:	89fa      	ldrh	r2, [r7, #14]
 80180d4:	8a39      	ldrh	r1, [r7, #16]
 80180d6:	2301      	movs	r3, #1
 80180d8:	f001 fbfe 	bl	80198d8 <eMBRegHoldingCB>
 80180dc:	4603      	mov	r3, r0
 80180de:	75bb      	strb	r3, [r7, #22]
                                          usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );

            if( eRegStatus == MB_ENOERR )
 80180e0:	7dbb      	ldrb	r3, [r7, #22]
 80180e2:	2b00      	cmp	r3, #0
 80180e4:	d131      	bne.n	801814a <eMBFuncReadWriteMultipleHoldingRegister+0x132>
            {
                /* Set the current PDU data pointer to the beginning. */
                pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 80180e6:	687b      	ldr	r3, [r7, #4]
 80180e8:	60bb      	str	r3, [r7, #8]
                *usLen = MB_PDU_FUNC_OFF;
 80180ea:	683b      	ldr	r3, [r7, #0]
 80180ec:	2200      	movs	r2, #0
 80180ee:	801a      	strh	r2, [r3, #0]

                /* First byte contains the function code. */
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 80180f0:	68bb      	ldr	r3, [r7, #8]
 80180f2:	1c5a      	adds	r2, r3, #1
 80180f4:	60ba      	str	r2, [r7, #8]
 80180f6:	2217      	movs	r2, #23
 80180f8:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 80180fa:	683b      	ldr	r3, [r7, #0]
 80180fc:	881b      	ldrh	r3, [r3, #0]
 80180fe:	3301      	adds	r3, #1
 8018100:	b29a      	uxth	r2, r3
 8018102:	683b      	ldr	r3, [r7, #0]
 8018104:	801a      	strh	r2, [r3, #0]

                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 8018106:	8a7b      	ldrh	r3, [r7, #18]
 8018108:	b2da      	uxtb	r2, r3
 801810a:	68bb      	ldr	r3, [r7, #8]
 801810c:	1c59      	adds	r1, r3, #1
 801810e:	60b9      	str	r1, [r7, #8]
 8018110:	0052      	lsls	r2, r2, #1
 8018112:	b2d2      	uxtb	r2, r2
 8018114:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 8018116:	683b      	ldr	r3, [r7, #0]
 8018118:	881b      	ldrh	r3, [r3, #0]
 801811a:	3301      	adds	r3, #1
 801811c:	b29a      	uxth	r2, r3
 801811e:	683b      	ldr	r3, [r7, #0]
 8018120:	801a      	strh	r2, [r3, #0]

                /* Make the read callback. */
                eRegStatus =
                    eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
 8018122:	8a7a      	ldrh	r2, [r7, #18]
 8018124:	8ab9      	ldrh	r1, [r7, #20]
 8018126:	2300      	movs	r3, #0
 8018128:	68b8      	ldr	r0, [r7, #8]
 801812a:	f001 fbd5 	bl	80198d8 <eMBRegHoldingCB>
 801812e:	4603      	mov	r3, r0
 8018130:	75bb      	strb	r3, [r7, #22]
                if( eRegStatus == MB_ENOERR )
 8018132:	7dbb      	ldrb	r3, [r7, #22]
 8018134:	2b00      	cmp	r3, #0
 8018136:	d108      	bne.n	801814a <eMBFuncReadWriteMultipleHoldingRegister+0x132>
                {
                    *usLen += 2 * usRegReadCount;
 8018138:	683b      	ldr	r3, [r7, #0]
 801813a:	881a      	ldrh	r2, [r3, #0]
 801813c:	8a7b      	ldrh	r3, [r7, #18]
 801813e:	005b      	lsls	r3, r3, #1
 8018140:	b29b      	uxth	r3, r3
 8018142:	4413      	add	r3, r2
 8018144:	b29a      	uxth	r2, r3
 8018146:	683b      	ldr	r3, [r7, #0]
 8018148:	801a      	strh	r2, [r3, #0]
                }
            }
            if( eRegStatus != MB_ENOERR )
 801814a:	7dbb      	ldrb	r3, [r7, #22]
 801814c:	2b00      	cmp	r3, #0
 801814e:	d008      	beq.n	8018162 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8018150:	7dbb      	ldrb	r3, [r7, #22]
 8018152:	4618      	mov	r0, r3
 8018154:	f000 fbce 	bl	80188f4 <prveMBError2Exception>
 8018158:	4603      	mov	r3, r0
 801815a:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 801815c:	e001      	b.n	8018162 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 801815e:	2303      	movs	r3, #3
 8018160:	75fb      	strb	r3, [r7, #23]
        }
    }
    return eStatus;
 8018162:	7dfb      	ldrb	r3, [r7, #23]
}
 8018164:	4618      	mov	r0, r3
 8018166:	3718      	adds	r7, #24
 8018168:	46bd      	mov	sp, r7
 801816a:	bd80      	pop	{r7, pc}

0801816c <eMBMasterFuncWriteHoldingRegister>:
    return eErrStatus;
}

eMBException
eMBMasterFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 801816c:	b580      	push	{r7, lr}
 801816e:	b084      	sub	sp, #16
 8018170:	af00      	add	r7, sp, #0
 8018172:	6078      	str	r0, [r7, #4]
 8018174:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
 8018176:	2300      	movs	r3, #0
 8018178:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_SIZE_MIN + MB_PDU_FUNC_WRITE_SIZE ) )
 801817a:	683b      	ldr	r3, [r7, #0]
 801817c:	881b      	ldrh	r3, [r3, #0]
 801817e:	2b05      	cmp	r3, #5
 8018180:	d122      	bne.n	80181c8 <eMBMasterFuncWriteHoldingRegister+0x5c>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8018182:	687b      	ldr	r3, [r7, #4]
 8018184:	3301      	adds	r3, #1
 8018186:	781b      	ldrb	r3, [r3, #0]
 8018188:	b29b      	uxth	r3, r3
 801818a:	021b      	lsls	r3, r3, #8
 801818c:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 801818e:	687b      	ldr	r3, [r7, #4]
 8018190:	3302      	adds	r3, #2
 8018192:	781b      	ldrb	r3, [r3, #0]
 8018194:	b29a      	uxth	r2, r3
 8018196:	89bb      	ldrh	r3, [r7, #12]
 8018198:	4313      	orrs	r3, r2
 801819a:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 801819c:	89bb      	ldrh	r3, [r7, #12]
 801819e:	3301      	adds	r3, #1
 80181a0:	81bb      	strh	r3, [r7, #12]

        /* Make callback to update the value. */
        eRegStatus = eMBMasterRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 80181a2:	687b      	ldr	r3, [r7, #4]
 80181a4:	1cd8      	adds	r0, r3, #3
 80181a6:	89b9      	ldrh	r1, [r7, #12]
 80181a8:	2301      	movs	r3, #1
 80181aa:	2201      	movs	r2, #1
 80181ac:	f001 fd98 	bl	8019ce0 <eMBMasterRegHoldingCB>
 80181b0:	4603      	mov	r3, r0
 80181b2:	72fb      	strb	r3, [r7, #11]
                                      usRegAddress, 1, MB_REG_WRITE );

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
 80181b4:	7afb      	ldrb	r3, [r7, #11]
 80181b6:	2b00      	cmp	r3, #0
 80181b8:	d008      	beq.n	80181cc <eMBMasterFuncWriteHoldingRegister+0x60>
        {
            eStatus = prveMBError2Exception( eRegStatus );
 80181ba:	7afb      	ldrb	r3, [r7, #11]
 80181bc:	4618      	mov	r0, r3
 80181be:	f000 fb99 	bl	80188f4 <prveMBError2Exception>
 80181c2:	4603      	mov	r3, r0
 80181c4:	73fb      	strb	r3, [r7, #15]
 80181c6:	e001      	b.n	80181cc <eMBMasterFuncWriteHoldingRegister+0x60>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80181c8:	2303      	movs	r3, #3
 80181ca:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 80181cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80181ce:	4618      	mov	r0, r3
 80181d0:	3710      	adds	r7, #16
 80181d2:	46bd      	mov	sp, r7
 80181d4:	bd80      	pop	{r7, pc}

080181d6 <eMBMasterReqWriteMultipleHoldingRegister>:
eMBMasterReqWriteMultipleHoldingRegister( 	UCHAR ucSndAddr,
											USHORT usRegAddr,
											USHORT usNRegs,
											USHORT * pusDataBuffer,
											LONG lTimeOut )
{
 80181d6:	b580      	push	{r7, lr}
 80181d8:	b086      	sub	sp, #24
 80181da:	af00      	add	r7, sp, #0
 80181dc:	607b      	str	r3, [r7, #4]
 80181de:	4603      	mov	r3, r0
 80181e0:	73fb      	strb	r3, [r7, #15]
 80181e2:	460b      	mov	r3, r1
 80181e4:	81bb      	strh	r3, [r7, #12]
 80181e6:	4613      	mov	r3, r2
 80181e8:	817b      	strh	r3, [r7, #10]
    UCHAR                 *ucMBFrame;
    USHORT                 usRegIndex = 0;
 80181ea:	2300      	movs	r3, #0
 80181ec:	82fb      	strh	r3, [r7, #22]
    eMBMasterReqErrCode    eErrStatus = MB_MRE_NO_ERR;
 80181ee:	2300      	movs	r3, #0
 80181f0:	757b      	strb	r3, [r7, #21]

    if ( ucSndAddr > MB_MASTER_TOTAL_SLAVE_NUM ) eErrStatus = MB_MRE_ILL_ARG;
 80181f2:	7bfb      	ldrb	r3, [r7, #15]
 80181f4:	2b10      	cmp	r3, #16
 80181f6:	d902      	bls.n	80181fe <eMBMasterReqWriteMultipleHoldingRegister+0x28>
 80181f8:	2302      	movs	r3, #2
 80181fa:	757b      	strb	r3, [r7, #21]
 80181fc:	e062      	b.n	80182c4 <eMBMasterReqWriteMultipleHoldingRegister+0xee>
    else if ( xMBMasterRunResTake( lTimeOut ) == FALSE ) eErrStatus = MB_MRE_MASTER_BUSY;
 80181fe:	6a38      	ldr	r0, [r7, #32]
 8018200:	f000 ff24 	bl	801904c <xMBMasterRunResTake>
 8018204:	4603      	mov	r3, r0
 8018206:	2b00      	cmp	r3, #0
 8018208:	d102      	bne.n	8018210 <eMBMasterReqWriteMultipleHoldingRegister+0x3a>
 801820a:	2307      	movs	r3, #7
 801820c:	757b      	strb	r3, [r7, #21]
 801820e:	e059      	b.n	80182c4 <eMBMasterReqWriteMultipleHoldingRegister+0xee>
    else
    {
		vMBMasterGetPDUSndBuf(&ucMBFrame);
 8018210:	f107 0310 	add.w	r3, r7, #16
 8018214:	4618      	mov	r0, r3
 8018216:	f002 fa63 	bl	801a6e0 <vMBMasterGetPDUSndBuf>
		vMBMasterSetDestAddress(ucSndAddr);
 801821a:	7bfb      	ldrb	r3, [r7, #15]
 801821c:	4618      	mov	r0, r3
 801821e:	f002 fa8f 	bl	801a740 <vMBMasterSetDestAddress>
		ucMBFrame[MB_PDU_FUNC_OFF]                     = MB_FUNC_WRITE_MULTIPLE_REGISTERS;
 8018222:	693b      	ldr	r3, [r7, #16]
 8018224:	2210      	movs	r2, #16
 8018226:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_WRITE_MUL_ADDR_OFF]       = usRegAddr >> 8;
 8018228:	89bb      	ldrh	r3, [r7, #12]
 801822a:	0a1b      	lsrs	r3, r3, #8
 801822c:	b29a      	uxth	r2, r3
 801822e:	693b      	ldr	r3, [r7, #16]
 8018230:	3301      	adds	r3, #1
 8018232:	b2d2      	uxtb	r2, r2
 8018234:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_WRITE_MUL_ADDR_OFF + 1]   = usRegAddr;
 8018236:	693b      	ldr	r3, [r7, #16]
 8018238:	3302      	adds	r3, #2
 801823a:	89ba      	ldrh	r2, [r7, #12]
 801823c:	b2d2      	uxtb	r2, r2
 801823e:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_WRITE_MUL_REGCNT_OFF]     = usNRegs >> 8;
 8018240:	897b      	ldrh	r3, [r7, #10]
 8018242:	0a1b      	lsrs	r3, r3, #8
 8018244:	b29a      	uxth	r2, r3
 8018246:	693b      	ldr	r3, [r7, #16]
 8018248:	3303      	adds	r3, #3
 801824a:	b2d2      	uxtb	r2, r2
 801824c:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_WRITE_MUL_REGCNT_OFF + 1] = usNRegs ;
 801824e:	693b      	ldr	r3, [r7, #16]
 8018250:	3304      	adds	r3, #4
 8018252:	897a      	ldrh	r2, [r7, #10]
 8018254:	b2d2      	uxtb	r2, r2
 8018256:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_WRITE_MUL_BYTECNT_OFF]    = usNRegs * 2;
 8018258:	897b      	ldrh	r3, [r7, #10]
 801825a:	b2da      	uxtb	r2, r3
 801825c:	693b      	ldr	r3, [r7, #16]
 801825e:	3305      	adds	r3, #5
 8018260:	0052      	lsls	r2, r2, #1
 8018262:	b2d2      	uxtb	r2, r2
 8018264:	701a      	strb	r2, [r3, #0]
		ucMBFrame += MB_PDU_REQ_WRITE_MUL_VALUES_OFF;
 8018266:	693b      	ldr	r3, [r7, #16]
 8018268:	3306      	adds	r3, #6
 801826a:	613b      	str	r3, [r7, #16]
		while( usNRegs > usRegIndex)
 801826c:	e017      	b.n	801829e <eMBMasterReqWriteMultipleHoldingRegister+0xc8>
		{
			*ucMBFrame++ = pusDataBuffer[usRegIndex] >> 8;
 801826e:	8afb      	ldrh	r3, [r7, #22]
 8018270:	005b      	lsls	r3, r3, #1
 8018272:	687a      	ldr	r2, [r7, #4]
 8018274:	4413      	add	r3, r2
 8018276:	881b      	ldrh	r3, [r3, #0]
 8018278:	0a1b      	lsrs	r3, r3, #8
 801827a:	b299      	uxth	r1, r3
 801827c:	693b      	ldr	r3, [r7, #16]
 801827e:	1c5a      	adds	r2, r3, #1
 8018280:	613a      	str	r2, [r7, #16]
 8018282:	b2ca      	uxtb	r2, r1
 8018284:	701a      	strb	r2, [r3, #0]
			*ucMBFrame++ = pusDataBuffer[usRegIndex++] ;
 8018286:	8afb      	ldrh	r3, [r7, #22]
 8018288:	1c5a      	adds	r2, r3, #1
 801828a:	82fa      	strh	r2, [r7, #22]
 801828c:	005b      	lsls	r3, r3, #1
 801828e:	687a      	ldr	r2, [r7, #4]
 8018290:	4413      	add	r3, r2
 8018292:	8819      	ldrh	r1, [r3, #0]
 8018294:	693b      	ldr	r3, [r7, #16]
 8018296:	1c5a      	adds	r2, r3, #1
 8018298:	613a      	str	r2, [r7, #16]
 801829a:	b2ca      	uxtb	r2, r1
 801829c:	701a      	strb	r2, [r3, #0]
		while( usNRegs > usRegIndex)
 801829e:	897a      	ldrh	r2, [r7, #10]
 80182a0:	8afb      	ldrh	r3, [r7, #22]
 80182a2:	429a      	cmp	r2, r3
 80182a4:	d8e3      	bhi.n	801826e <eMBMasterReqWriteMultipleHoldingRegister+0x98>
		}
		vMBMasterSetPDUSndLength( MB_PDU_SIZE_MIN + MB_PDU_REQ_WRITE_MUL_SIZE_MIN + 2*usNRegs );
 80182a6:	897b      	ldrh	r3, [r7, #10]
 80182a8:	3303      	adds	r3, #3
 80182aa:	b29b      	uxth	r3, r3
 80182ac:	005b      	lsls	r3, r3, #1
 80182ae:	b29b      	uxth	r3, r3
 80182b0:	4618      	mov	r0, r3
 80182b2:	f002 fa25 	bl	801a700 <vMBMasterSetPDUSndLength>
		( void ) xMBMasterPortEventPost( EV_MASTER_FRAME_SENT );
 80182b6:	2008      	movs	r0, #8
 80182b8:	f000 fe46 	bl	8018f48 <xMBMasterPortEventPost>
		eErrStatus = eMBMasterWaitRequestFinish( );
 80182bc:	f000 feec 	bl	8019098 <eMBMasterWaitRequestFinish>
 80182c0:	4603      	mov	r3, r0
 80182c2:	757b      	strb	r3, [r7, #21]
    }
    return eErrStatus;
 80182c4:	7d7b      	ldrb	r3, [r7, #21]
}
 80182c6:	4618      	mov	r0, r3
 80182c8:	3718      	adds	r7, #24
 80182ca:	46bd      	mov	sp, r7
 80182cc:	bd80      	pop	{r7, pc}

080182ce <eMBMasterFuncWriteMultipleHoldingRegister>:

eMBException
eMBMasterFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 80182ce:	b580      	push	{r7, lr}
 80182d0:	b086      	sub	sp, #24
 80182d2:	af00      	add	r7, sp, #0
 80182d4:	6078      	str	r0, [r7, #4]
 80182d6:	6039      	str	r1, [r7, #0]
    UCHAR          *ucMBFrame;
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
 80182d8:	2300      	movs	r3, #0
 80182da:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, the *usLen is not need check. */
    if( ( *usLen == MB_PDU_SIZE_MIN + MB_PDU_FUNC_WRITE_MUL_SIZE ) || xMBMasterRequestIsBroadcast() )
 80182dc:	683b      	ldr	r3, [r7, #0]
 80182de:	881b      	ldrh	r3, [r3, #0]
 80182e0:	2b05      	cmp	r3, #5
 80182e2:	d004      	beq.n	80182ee <eMBMasterFuncWriteMultipleHoldingRegister+0x20>
 80182e4:	f002 fa48 	bl	801a778 <xMBMasterRequestIsBroadcast>
 80182e8:	4603      	mov	r3, r0
 80182ea:	2b00      	cmp	r3, #0
 80182ec:	d03f      	beq.n	801836e <eMBMasterFuncWriteMultipleHoldingRegister+0xa0>
    {
		vMBMasterGetPDUSndBuf(&ucMBFrame);
 80182ee:	f107 030c 	add.w	r3, r7, #12
 80182f2:	4618      	mov	r0, r3
 80182f4:	f002 f9f4 	bl	801a6e0 <vMBMasterGetPDUSndBuf>
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_WRITE_MUL_ADDR_OFF] << 8 );
 80182f8:	68fb      	ldr	r3, [r7, #12]
 80182fa:	3301      	adds	r3, #1
 80182fc:	781b      	ldrb	r3, [r3, #0]
 80182fe:	b29b      	uxth	r3, r3
 8018300:	021b      	lsls	r3, r3, #8
 8018302:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_WRITE_MUL_ADDR_OFF + 1] );
 8018304:	68fb      	ldr	r3, [r7, #12]
 8018306:	3302      	adds	r3, #2
 8018308:	781b      	ldrb	r3, [r3, #0]
 801830a:	b29a      	uxth	r2, r3
 801830c:	8abb      	ldrh	r3, [r7, #20]
 801830e:	4313      	orrs	r3, r2
 8018310:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8018312:	8abb      	ldrh	r3, [r7, #20]
 8018314:	3301      	adds	r3, #1
 8018316:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_WRITE_MUL_REGCNT_OFF] << 8 );
 8018318:	68fb      	ldr	r3, [r7, #12]
 801831a:	3303      	adds	r3, #3
 801831c:	781b      	ldrb	r3, [r3, #0]
 801831e:	b29b      	uxth	r3, r3
 8018320:	021b      	lsls	r3, r3, #8
 8018322:	827b      	strh	r3, [r7, #18]
        usRegCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_WRITE_MUL_REGCNT_OFF + 1] );
 8018324:	68fb      	ldr	r3, [r7, #12]
 8018326:	3304      	adds	r3, #4
 8018328:	781b      	ldrb	r3, [r3, #0]
 801832a:	b29a      	uxth	r2, r3
 801832c:	8a7b      	ldrh	r3, [r7, #18]
 801832e:	4313      	orrs	r3, r2
 8018330:	827b      	strh	r3, [r7, #18]

        ucRegByteCount = ucMBFrame[MB_PDU_REQ_WRITE_MUL_BYTECNT_OFF];
 8018332:	68fb      	ldr	r3, [r7, #12]
 8018334:	795b      	ldrb	r3, [r3, #5]
 8018336:	747b      	strb	r3, [r7, #17]

        if( ucRegByteCount == 2 * usRegCount )
 8018338:	7c7a      	ldrb	r2, [r7, #17]
 801833a:	8a7b      	ldrh	r3, [r7, #18]
 801833c:	005b      	lsls	r3, r3, #1
 801833e:	429a      	cmp	r2, r3
 8018340:	d112      	bne.n	8018368 <eMBMasterFuncWriteMultipleHoldingRegister+0x9a>
        {
            /* Make callback to update the register values. */
            eRegStatus =
                eMBMasterRegHoldingCB( &ucMBFrame[MB_PDU_REQ_WRITE_MUL_VALUES_OFF],
 8018342:	68fb      	ldr	r3, [r7, #12]
 8018344:	1d98      	adds	r0, r3, #6
 8018346:	8a7a      	ldrh	r2, [r7, #18]
 8018348:	8ab9      	ldrh	r1, [r7, #20]
 801834a:	2301      	movs	r3, #1
 801834c:	f001 fcc8 	bl	8019ce0 <eMBMasterRegHoldingCB>
 8018350:	4603      	mov	r3, r0
 8018352:	743b      	strb	r3, [r7, #16]
                                 usRegAddress, usRegCount, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8018354:	7c3b      	ldrb	r3, [r7, #16]
 8018356:	2b00      	cmp	r3, #0
 8018358:	d00c      	beq.n	8018374 <eMBMasterFuncWriteMultipleHoldingRegister+0xa6>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 801835a:	7c3b      	ldrb	r3, [r7, #16]
 801835c:	4618      	mov	r0, r3
 801835e:	f000 fac9 	bl	80188f4 <prveMBError2Exception>
 8018362:	4603      	mov	r3, r0
 8018364:	75fb      	strb	r3, [r7, #23]
        if( ucRegByteCount == 2 * usRegCount )
 8018366:	e005      	b.n	8018374 <eMBMasterFuncWriteMultipleHoldingRegister+0xa6>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8018368:	2303      	movs	r3, #3
 801836a:	75fb      	strb	r3, [r7, #23]
        if( ucRegByteCount == 2 * usRegCount )
 801836c:	e002      	b.n	8018374 <eMBMasterFuncWriteMultipleHoldingRegister+0xa6>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 801836e:	2303      	movs	r3, #3
 8018370:	75fb      	strb	r3, [r7, #23]
 8018372:	e000      	b.n	8018376 <eMBMasterFuncWriteMultipleHoldingRegister+0xa8>
        if( ucRegByteCount == 2 * usRegCount )
 8018374:	bf00      	nop
    }
    return eStatus;
 8018376:	7dfb      	ldrb	r3, [r7, #23]
}
 8018378:	4618      	mov	r0, r3
 801837a:	3718      	adds	r7, #24
 801837c:	46bd      	mov	sp, r7
 801837e:	bd80      	pop	{r7, pc}

08018380 <eMBMasterFuncReadHoldingRegister>:
    return eErrStatus;
}

eMBException
eMBMasterFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8018380:	b580      	push	{r7, lr}
 8018382:	b086      	sub	sp, #24
 8018384:	af00      	add	r7, sp, #0
 8018386:	6078      	str	r0, [r7, #4]
 8018388:	6039      	str	r1, [r7, #0]
    UCHAR          *ucMBFrame;
    USHORT          usRegAddress;
    USHORT          usRegCount;

    eMBException    eStatus = MB_EX_NONE;
 801838a:	2300      	movs	r3, #0
 801838c:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, and it's read mode. This request don't need execute. */
    if ( xMBMasterRequestIsBroadcast() )
 801838e:	f002 f9f3 	bl	801a778 <xMBMasterRequestIsBroadcast>
 8018392:	4603      	mov	r3, r0
 8018394:	2b00      	cmp	r3, #0
 8018396:	d002      	beq.n	801839e <eMBMasterFuncReadHoldingRegister+0x1e>
    {
    	eStatus = MB_EX_NONE;
 8018398:	2300      	movs	r3, #0
 801839a:	75fb      	strb	r3, [r7, #23]
 801839c:	e047      	b.n	801842e <eMBMasterFuncReadHoldingRegister+0xae>
    }
    else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
 801839e:	683b      	ldr	r3, [r7, #0]
 80183a0:	881b      	ldrh	r3, [r3, #0]
 80183a2:	2b01      	cmp	r3, #1
 80183a4:	d941      	bls.n	801842a <eMBMasterFuncReadHoldingRegister+0xaa>
    {
		vMBMasterGetPDUSndBuf(&ucMBFrame);
 80183a6:	f107 030c 	add.w	r3, r7, #12
 80183aa:	4618      	mov	r0, r3
 80183ac:	f002 f998 	bl	801a6e0 <vMBMasterGetPDUSndBuf>
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
 80183b0:	68fb      	ldr	r3, [r7, #12]
 80183b2:	3301      	adds	r3, #1
 80183b4:	781b      	ldrb	r3, [r3, #0]
 80183b6:	b29b      	uxth	r3, r3
 80183b8:	021b      	lsls	r3, r3, #8
 80183ba:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
 80183bc:	68fb      	ldr	r3, [r7, #12]
 80183be:	3302      	adds	r3, #2
 80183c0:	781b      	ldrb	r3, [r3, #0]
 80183c2:	b29a      	uxth	r2, r3
 80183c4:	8abb      	ldrh	r3, [r7, #20]
 80183c6:	4313      	orrs	r3, r2
 80183c8:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 80183ca:	8abb      	ldrh	r3, [r7, #20]
 80183cc:	3301      	adds	r3, #1
 80183ce:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF] << 8 );
 80183d0:	68fb      	ldr	r3, [r7, #12]
 80183d2:	3303      	adds	r3, #3
 80183d4:	781b      	ldrb	r3, [r3, #0]
 80183d6:	b29b      	uxth	r3, r3
 80183d8:	021b      	lsls	r3, r3, #8
 80183da:	827b      	strh	r3, [r7, #18]
        usRegCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF + 1] );
 80183dc:	68fb      	ldr	r3, [r7, #12]
 80183de:	3304      	adds	r3, #4
 80183e0:	781b      	ldrb	r3, [r3, #0]
 80183e2:	b29a      	uxth	r2, r3
 80183e4:	8a7b      	ldrh	r3, [r7, #18]
 80183e6:	4313      	orrs	r3, r2
 80183e8:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception.
         */
        if( ( usRegCount >= 1 ) && ( 2 * usRegCount == pucFrame[MB_PDU_FUNC_READ_BYTECNT_OFF] ) )
 80183ea:	8a7b      	ldrh	r3, [r7, #18]
 80183ec:	2b00      	cmp	r3, #0
 80183ee:	d019      	beq.n	8018424 <eMBMasterFuncReadHoldingRegister+0xa4>
 80183f0:	8a7b      	ldrh	r3, [r7, #18]
 80183f2:	005b      	lsls	r3, r3, #1
 80183f4:	687a      	ldr	r2, [r7, #4]
 80183f6:	3201      	adds	r2, #1
 80183f8:	7812      	ldrb	r2, [r2, #0]
 80183fa:	4293      	cmp	r3, r2
 80183fc:	d112      	bne.n	8018424 <eMBMasterFuncReadHoldingRegister+0xa4>
        {
            /* Make callback to fill the buffer. */
            eRegStatus = eMBMasterRegHoldingCB( &pucFrame[MB_PDU_FUNC_READ_VALUES_OFF], usRegAddress, usRegCount, MB_REG_READ );
 80183fe:	687b      	ldr	r3, [r7, #4]
 8018400:	1c98      	adds	r0, r3, #2
 8018402:	8a7a      	ldrh	r2, [r7, #18]
 8018404:	8ab9      	ldrh	r1, [r7, #20]
 8018406:	2300      	movs	r3, #0
 8018408:	f001 fc6a 	bl	8019ce0 <eMBMasterRegHoldingCB>
 801840c:	4603      	mov	r3, r0
 801840e:	747b      	strb	r3, [r7, #17]
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8018410:	7c7b      	ldrb	r3, [r7, #17]
 8018412:	2b00      	cmp	r3, #0
 8018414:	d00b      	beq.n	801842e <eMBMasterFuncReadHoldingRegister+0xae>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8018416:	7c7b      	ldrb	r3, [r7, #17]
 8018418:	4618      	mov	r0, r3
 801841a:	f000 fa6b 	bl	80188f4 <prveMBError2Exception>
 801841e:	4603      	mov	r3, r0
 8018420:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 8018422:	e004      	b.n	801842e <eMBMasterFuncReadHoldingRegister+0xae>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8018424:	2303      	movs	r3, #3
 8018426:	75fb      	strb	r3, [r7, #23]
 8018428:	e001      	b.n	801842e <eMBMasterFuncReadHoldingRegister+0xae>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 801842a:	2303      	movs	r3, #3
 801842c:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 801842e:	7dfb      	ldrb	r3, [r7, #23]
}
 8018430:	4618      	mov	r0, r3
 8018432:	3718      	adds	r7, #24
 8018434:	46bd      	mov	sp, r7
 8018436:	bd80      	pop	{r7, pc}

08018438 <eMBMasterFuncReadWriteMultipleHoldingRegister>:
    return eErrStatus;
}

eMBException
eMBMasterFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8018438:	b580      	push	{r7, lr}
 801843a:	b086      	sub	sp, #24
 801843c:	af00      	add	r7, sp, #0
 801843e:	6078      	str	r0, [r7, #4]
 8018440:	6039      	str	r1, [r7, #0]
    USHORT          usRegReadCount;
    USHORT          usRegWriteAddress;
    USHORT          usRegWriteCount;
    UCHAR          *ucMBFrame;

    eMBException    eStatus = MB_EX_NONE;
 8018442:	2300      	movs	r3, #0
 8018444:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, and it's read mode. This request don't need execute. */
    if ( xMBMasterRequestIsBroadcast() )
 8018446:	f002 f997 	bl	801a778 <xMBMasterRequestIsBroadcast>
 801844a:	4603      	mov	r3, r0
 801844c:	2b00      	cmp	r3, #0
 801844e:	d002      	beq.n	8018456 <eMBMasterFuncReadWriteMultipleHoldingRegister+0x1e>
    {
    	eStatus = MB_EX_NONE;
 8018450:	2300      	movs	r3, #0
 8018452:	75fb      	strb	r3, [r7, #23]
 8018454:	e06b      	b.n	801852e <eMBMasterFuncReadWriteMultipleHoldingRegister+0xf6>
    }
    else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READWRITE_SIZE_MIN )
 8018456:	683b      	ldr	r3, [r7, #0]
 8018458:	881b      	ldrh	r3, [r3, #0]
 801845a:	2b01      	cmp	r3, #1
 801845c:	d967      	bls.n	801852e <eMBMasterFuncReadWriteMultipleHoldingRegister+0xf6>
    {
    	vMBMasterGetPDUSndBuf(&ucMBFrame);
 801845e:	f107 0308 	add.w	r3, r7, #8
 8018462:	4618      	mov	r0, r3
 8018464:	f002 f93c 	bl	801a6e0 <vMBMasterGetPDUSndBuf>
        usRegReadAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_ADDR_OFF] << 8U );
 8018468:	68bb      	ldr	r3, [r7, #8]
 801846a:	3301      	adds	r3, #1
 801846c:	781b      	ldrb	r3, [r3, #0]
 801846e:	b29b      	uxth	r3, r3
 8018470:	021b      	lsls	r3, r3, #8
 8018472:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_ADDR_OFF + 1] );
 8018474:	68bb      	ldr	r3, [r7, #8]
 8018476:	3302      	adds	r3, #2
 8018478:	781b      	ldrb	r3, [r3, #0]
 801847a:	b29a      	uxth	r2, r3
 801847c:	8abb      	ldrh	r3, [r7, #20]
 801847e:	4313      	orrs	r3, r2
 8018480:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress++;
 8018482:	8abb      	ldrh	r3, [r7, #20]
 8018484:	3301      	adds	r3, #1
 8018486:	82bb      	strh	r3, [r7, #20]

        usRegReadCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_REGCNT_OFF] << 8U );
 8018488:	68bb      	ldr	r3, [r7, #8]
 801848a:	3303      	adds	r3, #3
 801848c:	781b      	ldrb	r3, [r3, #0]
 801848e:	b29b      	uxth	r3, r3
 8018490:	021b      	lsls	r3, r3, #8
 8018492:	827b      	strh	r3, [r7, #18]
        usRegReadCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_REGCNT_OFF + 1] );
 8018494:	68bb      	ldr	r3, [r7, #8]
 8018496:	3304      	adds	r3, #4
 8018498:	781b      	ldrb	r3, [r3, #0]
 801849a:	b29a      	uxth	r2, r3
 801849c:	8a7b      	ldrh	r3, [r7, #18]
 801849e:	4313      	orrs	r3, r2
 80184a0:	827b      	strh	r3, [r7, #18]

        usRegWriteAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_ADDR_OFF] << 8U );
 80184a2:	68bb      	ldr	r3, [r7, #8]
 80184a4:	3305      	adds	r3, #5
 80184a6:	781b      	ldrb	r3, [r3, #0]
 80184a8:	b29b      	uxth	r3, r3
 80184aa:	021b      	lsls	r3, r3, #8
 80184ac:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_ADDR_OFF + 1] );
 80184ae:	68bb      	ldr	r3, [r7, #8]
 80184b0:	3306      	adds	r3, #6
 80184b2:	781b      	ldrb	r3, [r3, #0]
 80184b4:	b29a      	uxth	r2, r3
 80184b6:	8a3b      	ldrh	r3, [r7, #16]
 80184b8:	4313      	orrs	r3, r2
 80184ba:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress++;
 80184bc:	8a3b      	ldrh	r3, [r7, #16]
 80184be:	3301      	adds	r3, #1
 80184c0:	823b      	strh	r3, [r7, #16]

        usRegWriteCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_REGCNT_OFF] << 8U );
 80184c2:	68bb      	ldr	r3, [r7, #8]
 80184c4:	3307      	adds	r3, #7
 80184c6:	781b      	ldrb	r3, [r3, #0]
 80184c8:	b29b      	uxth	r3, r3
 80184ca:	021b      	lsls	r3, r3, #8
 80184cc:	81fb      	strh	r3, [r7, #14]
        usRegWriteCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_REGCNT_OFF + 1] );
 80184ce:	68bb      	ldr	r3, [r7, #8]
 80184d0:	3308      	adds	r3, #8
 80184d2:	781b      	ldrb	r3, [r3, #0]
 80184d4:	b29a      	uxth	r2, r3
 80184d6:	89fb      	ldrh	r3, [r7, #14]
 80184d8:	4313      	orrs	r3, r2
 80184da:	81fb      	strh	r3, [r7, #14]

        if( ( 2 * usRegReadCount ) == pucFrame[MB_PDU_FUNC_READWRITE_READ_BYTECNT_OFF] )
 80184dc:	8a7b      	ldrh	r3, [r7, #18]
 80184de:	005b      	lsls	r3, r3, #1
 80184e0:	687a      	ldr	r2, [r7, #4]
 80184e2:	3201      	adds	r2, #1
 80184e4:	7812      	ldrb	r2, [r2, #0]
 80184e6:	4293      	cmp	r3, r2
 80184e8:	d11f      	bne.n	801852a <eMBMasterFuncReadWriteMultipleHoldingRegister+0xf2>
        {
            /* Make callback to update the register values. */
            eRegStatus = eMBMasterRegHoldingCB( &ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_VALUES_OFF],
 80184ea:	68bb      	ldr	r3, [r7, #8]
 80184ec:	f103 000a 	add.w	r0, r3, #10
 80184f0:	89fa      	ldrh	r2, [r7, #14]
 80184f2:	8a39      	ldrh	r1, [r7, #16]
 80184f4:	2301      	movs	r3, #1
 80184f6:	f001 fbf3 	bl	8019ce0 <eMBMasterRegHoldingCB>
 80184fa:	4603      	mov	r3, r0
 80184fc:	75bb      	strb	r3, [r7, #22]
                                           usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );

            if( eRegStatus == MB_ENOERR )
 80184fe:	7dbb      	ldrb	r3, [r7, #22]
 8018500:	2b00      	cmp	r3, #0
 8018502:	d108      	bne.n	8018516 <eMBMasterFuncReadWriteMultipleHoldingRegister+0xde>
            {
                /* Make the read callback. */
				eRegStatus = eMBMasterRegHoldingCB(&pucFrame[MB_PDU_FUNC_READWRITE_READ_VALUES_OFF],
 8018504:	687b      	ldr	r3, [r7, #4]
 8018506:	1c98      	adds	r0, r3, #2
 8018508:	8a7a      	ldrh	r2, [r7, #18]
 801850a:	8ab9      	ldrh	r1, [r7, #20]
 801850c:	2300      	movs	r3, #0
 801850e:	f001 fbe7 	bl	8019ce0 <eMBMasterRegHoldingCB>
 8018512:	4603      	mov	r3, r0
 8018514:	75bb      	strb	r3, [r7, #22]
						                      usRegReadAddress, usRegReadCount, MB_REG_READ);
            }
            if( eRegStatus != MB_ENOERR )
 8018516:	7dbb      	ldrb	r3, [r7, #22]
 8018518:	2b00      	cmp	r3, #0
 801851a:	d008      	beq.n	801852e <eMBMasterFuncReadWriteMultipleHoldingRegister+0xf6>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 801851c:	7dbb      	ldrb	r3, [r7, #22]
 801851e:	4618      	mov	r0, r3
 8018520:	f000 f9e8 	bl	80188f4 <prveMBError2Exception>
 8018524:	4603      	mov	r3, r0
 8018526:	75fb      	strb	r3, [r7, #23]
 8018528:	e001      	b.n	801852e <eMBMasterFuncReadWriteMultipleHoldingRegister+0xf6>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 801852a:	2303      	movs	r3, #3
 801852c:	75fb      	strb	r3, [r7, #23]
        }
    }
    return eStatus;
 801852e:	7dfb      	ldrb	r3, [r7, #23]
}
 8018530:	4618      	mov	r0, r3
 8018532:	3718      	adds	r7, #24
 8018534:	46bd      	mov	sp, r7
 8018536:	bd80      	pop	{r7, pc}

08018538 <eMBFuncReadInputRegister>:
/* ----------------------- Start implementation -----------------------------*/
#if MB_FUNC_READ_INPUT_ENABLED > 0

eMBException
eMBFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8018538:	b580      	push	{r7, lr}
 801853a:	b086      	sub	sp, #24
 801853c:	af00      	add	r7, sp, #0
 801853e:	6078      	str	r0, [r7, #4]
 8018540:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8018542:	2300      	movs	r3, #0
 8018544:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8018546:	683b      	ldr	r3, [r7, #0]
 8018548:	881b      	ldrh	r3, [r3, #0]
 801854a:	2b05      	cmp	r3, #5
 801854c:	d15f      	bne.n	801860e <eMBFuncReadInputRegister+0xd6>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 801854e:	687b      	ldr	r3, [r7, #4]
 8018550:	3301      	adds	r3, #1
 8018552:	781b      	ldrb	r3, [r3, #0]
 8018554:	b29b      	uxth	r3, r3
 8018556:	021b      	lsls	r3, r3, #8
 8018558:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 801855a:	687b      	ldr	r3, [r7, #4]
 801855c:	3302      	adds	r3, #2
 801855e:	781b      	ldrb	r3, [r3, #0]
 8018560:	b29a      	uxth	r2, r3
 8018562:	8abb      	ldrh	r3, [r7, #20]
 8018564:	4313      	orrs	r3, r2
 8018566:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8018568:	8abb      	ldrh	r3, [r7, #20]
 801856a:	3301      	adds	r3, #1
 801856c:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 801856e:	687b      	ldr	r3, [r7, #4]
 8018570:	3303      	adds	r3, #3
 8018572:	781b      	ldrb	r3, [r3, #0]
 8018574:	b29b      	uxth	r3, r3
 8018576:	021b      	lsls	r3, r3, #8
 8018578:	827b      	strh	r3, [r7, #18]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 801857a:	687b      	ldr	r3, [r7, #4]
 801857c:	3304      	adds	r3, #4
 801857e:	781b      	ldrb	r3, [r3, #0]
 8018580:	b29a      	uxth	r2, r3
 8018582:	8a7b      	ldrh	r3, [r7, #18]
 8018584:	4313      	orrs	r3, r2
 8018586:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 )
 8018588:	8a7b      	ldrh	r3, [r7, #18]
 801858a:	2b00      	cmp	r3, #0
 801858c:	d03c      	beq.n	8018608 <eMBFuncReadInputRegister+0xd0>
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
 801858e:	8a7b      	ldrh	r3, [r7, #18]
 8018590:	2b7c      	cmp	r3, #124	; 0x7c
 8018592:	d839      	bhi.n	8018608 <eMBFuncReadInputRegister+0xd0>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8018594:	687b      	ldr	r3, [r7, #4]
 8018596:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8018598:	683b      	ldr	r3, [r7, #0]
 801859a:	2200      	movs	r2, #0
 801859c:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
 801859e:	68fb      	ldr	r3, [r7, #12]
 80185a0:	1c5a      	adds	r2, r3, #1
 80185a2:	60fa      	str	r2, [r7, #12]
 80185a4:	2204      	movs	r2, #4
 80185a6:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80185a8:	683b      	ldr	r3, [r7, #0]
 80185aa:	881b      	ldrh	r3, [r3, #0]
 80185ac:	3301      	adds	r3, #1
 80185ae:	b29a      	uxth	r2, r3
 80185b0:	683b      	ldr	r3, [r7, #0]
 80185b2:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
 80185b4:	8a7b      	ldrh	r3, [r7, #18]
 80185b6:	b2da      	uxtb	r2, r3
 80185b8:	68fb      	ldr	r3, [r7, #12]
 80185ba:	1c59      	adds	r1, r3, #1
 80185bc:	60f9      	str	r1, [r7, #12]
 80185be:	0052      	lsls	r2, r2, #1
 80185c0:	b2d2      	uxtb	r2, r2
 80185c2:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80185c4:	683b      	ldr	r3, [r7, #0]
 80185c6:	881b      	ldrh	r3, [r3, #0]
 80185c8:	3301      	adds	r3, #1
 80185ca:	b29a      	uxth	r2, r3
 80185cc:	683b      	ldr	r3, [r7, #0]
 80185ce:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );
 80185d0:	8a7a      	ldrh	r2, [r7, #18]
 80185d2:	8abb      	ldrh	r3, [r7, #20]
 80185d4:	4619      	mov	r1, r3
 80185d6:	68f8      	ldr	r0, [r7, #12]
 80185d8:	f001 f92a 	bl	8019830 <eMBRegInputCB>
 80185dc:	4603      	mov	r3, r0
 80185de:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80185e0:	7afb      	ldrb	r3, [r7, #11]
 80185e2:	2b00      	cmp	r3, #0
 80185e4:	d006      	beq.n	80185f4 <eMBFuncReadInputRegister+0xbc>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 80185e6:	7afb      	ldrb	r3, [r7, #11]
 80185e8:	4618      	mov	r0, r3
 80185ea:	f000 f983 	bl	80188f4 <prveMBError2Exception>
 80185ee:	4603      	mov	r3, r0
 80185f0:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 80185f2:	e00e      	b.n	8018612 <eMBFuncReadInputRegister+0xda>
            }
            else
            {
                *usLen += usRegCount * 2;
 80185f4:	683b      	ldr	r3, [r7, #0]
 80185f6:	881a      	ldrh	r2, [r3, #0]
 80185f8:	8a7b      	ldrh	r3, [r7, #18]
 80185fa:	005b      	lsls	r3, r3, #1
 80185fc:	b29b      	uxth	r3, r3
 80185fe:	4413      	add	r3, r2
 8018600:	b29a      	uxth	r2, r3
 8018602:	683b      	ldr	r3, [r7, #0]
 8018604:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8018606:	e004      	b.n	8018612 <eMBFuncReadInputRegister+0xda>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8018608:	2303      	movs	r3, #3
 801860a:	75fb      	strb	r3, [r7, #23]
 801860c:	e001      	b.n	8018612 <eMBFuncReadInputRegister+0xda>
    }
    else
    {
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 801860e:	2303      	movs	r3, #3
 8018610:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 8018612:	7dfb      	ldrb	r3, [r7, #23]
}
 8018614:	4618      	mov	r0, r3
 8018616:	3718      	adds	r7, #24
 8018618:	46bd      	mov	sp, r7
 801861a:	bd80      	pop	{r7, pc}

0801861c <eMBMasterReqReadInputRegister>:
 *
 * @return error code
 */
eMBMasterReqErrCode
eMBMasterReqReadInputRegister( UCHAR ucSndAddr, USHORT usRegAddr, USHORT usNRegs, LONG lTimeOut )
{
 801861c:	b580      	push	{r7, lr}
 801861e:	b086      	sub	sp, #24
 8018620:	af00      	add	r7, sp, #0
 8018622:	607b      	str	r3, [r7, #4]
 8018624:	4603      	mov	r3, r0
 8018626:	73fb      	strb	r3, [r7, #15]
 8018628:	460b      	mov	r3, r1
 801862a:	81bb      	strh	r3, [r7, #12]
 801862c:	4613      	mov	r3, r2
 801862e:	817b      	strh	r3, [r7, #10]
    UCHAR                 *ucMBFrame;
    eMBMasterReqErrCode    eErrStatus = MB_MRE_NO_ERR;
 8018630:	2300      	movs	r3, #0
 8018632:	75fb      	strb	r3, [r7, #23]

    if ( ucSndAddr > MB_MASTER_TOTAL_SLAVE_NUM ) eErrStatus = MB_MRE_ILL_ARG;
 8018634:	7bfb      	ldrb	r3, [r7, #15]
 8018636:	2b10      	cmp	r3, #16
 8018638:	d902      	bls.n	8018640 <eMBMasterReqReadInputRegister+0x24>
 801863a:	2302      	movs	r3, #2
 801863c:	75fb      	strb	r3, [r7, #23]
 801863e:	e036      	b.n	80186ae <eMBMasterReqReadInputRegister+0x92>
    else if ( xMBMasterRunResTake( lTimeOut ) == FALSE ) eErrStatus = MB_MRE_MASTER_BUSY;
 8018640:	6878      	ldr	r0, [r7, #4]
 8018642:	f000 fd03 	bl	801904c <xMBMasterRunResTake>
 8018646:	4603      	mov	r3, r0
 8018648:	2b00      	cmp	r3, #0
 801864a:	d102      	bne.n	8018652 <eMBMasterReqReadInputRegister+0x36>
 801864c:	2307      	movs	r3, #7
 801864e:	75fb      	strb	r3, [r7, #23]
 8018650:	e02d      	b.n	80186ae <eMBMasterReqReadInputRegister+0x92>
    else
    {
		vMBMasterGetPDUSndBuf(&ucMBFrame);
 8018652:	f107 0310 	add.w	r3, r7, #16
 8018656:	4618      	mov	r0, r3
 8018658:	f002 f842 	bl	801a6e0 <vMBMasterGetPDUSndBuf>
		vMBMasterSetDestAddress(ucSndAddr);
 801865c:	7bfb      	ldrb	r3, [r7, #15]
 801865e:	4618      	mov	r0, r3
 8018660:	f002 f86e 	bl	801a740 <vMBMasterSetDestAddress>
		ucMBFrame[MB_PDU_FUNC_OFF]                = MB_FUNC_READ_INPUT_REGISTER;
 8018664:	693b      	ldr	r3, [r7, #16]
 8018666:	2204      	movs	r2, #4
 8018668:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF]       = usRegAddr >> 8;
 801866a:	89bb      	ldrh	r3, [r7, #12]
 801866c:	0a1b      	lsrs	r3, r3, #8
 801866e:	b29a      	uxth	r2, r3
 8018670:	693b      	ldr	r3, [r7, #16]
 8018672:	3301      	adds	r3, #1
 8018674:	b2d2      	uxtb	r2, r2
 8018676:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1]   = usRegAddr;
 8018678:	693b      	ldr	r3, [r7, #16]
 801867a:	3302      	adds	r3, #2
 801867c:	89ba      	ldrh	r2, [r7, #12]
 801867e:	b2d2      	uxtb	r2, r2
 8018680:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF]     = usNRegs >> 8;
 8018682:	897b      	ldrh	r3, [r7, #10]
 8018684:	0a1b      	lsrs	r3, r3, #8
 8018686:	b29a      	uxth	r2, r3
 8018688:	693b      	ldr	r3, [r7, #16]
 801868a:	3303      	adds	r3, #3
 801868c:	b2d2      	uxtb	r2, r2
 801868e:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF + 1] = usNRegs;
 8018690:	693b      	ldr	r3, [r7, #16]
 8018692:	3304      	adds	r3, #4
 8018694:	897a      	ldrh	r2, [r7, #10]
 8018696:	b2d2      	uxtb	r2, r2
 8018698:	701a      	strb	r2, [r3, #0]
		vMBMasterSetPDUSndLength( MB_PDU_SIZE_MIN + MB_PDU_REQ_READ_SIZE );
 801869a:	2005      	movs	r0, #5
 801869c:	f002 f830 	bl	801a700 <vMBMasterSetPDUSndLength>
		( void ) xMBMasterPortEventPost( EV_MASTER_FRAME_SENT );
 80186a0:	2008      	movs	r0, #8
 80186a2:	f000 fc51 	bl	8018f48 <xMBMasterPortEventPost>
		eErrStatus = eMBMasterWaitRequestFinish( );
 80186a6:	f000 fcf7 	bl	8019098 <eMBMasterWaitRequestFinish>
 80186aa:	4603      	mov	r3, r0
 80186ac:	75fb      	strb	r3, [r7, #23]
    }
    return eErrStatus;
 80186ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80186b0:	4618      	mov	r0, r3
 80186b2:	3718      	adds	r7, #24
 80186b4:	46bd      	mov	sp, r7
 80186b6:	bd80      	pop	{r7, pc}

080186b8 <eMBMasterFuncReadInputRegister>:

eMBException
eMBMasterFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
 80186b8:	b580      	push	{r7, lr}
 80186ba:	b086      	sub	sp, #24
 80186bc:	af00      	add	r7, sp, #0
 80186be:	6078      	str	r0, [r7, #4]
 80186c0:	6039      	str	r1, [r7, #0]
    UCHAR          *ucMBFrame;
    USHORT          usRegAddress;
    USHORT          usRegCount;

    eMBException    eStatus = MB_EX_NONE;
 80186c2:	2300      	movs	r3, #0
 80186c4:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, and it's read mode. This request don't need execute. */
	if ( xMBMasterRequestIsBroadcast() )
 80186c6:	f002 f857 	bl	801a778 <xMBMasterRequestIsBroadcast>
 80186ca:	4603      	mov	r3, r0
 80186cc:	2b00      	cmp	r3, #0
 80186ce:	d002      	beq.n	80186d6 <eMBMasterFuncReadInputRegister+0x1e>
	{
		eStatus = MB_EX_NONE;
 80186d0:	2300      	movs	r3, #0
 80186d2:	75fb      	strb	r3, [r7, #23]
 80186d4:	e047      	b.n	8018766 <eMBMasterFuncReadInputRegister+0xae>
	}
	else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
 80186d6:	683b      	ldr	r3, [r7, #0]
 80186d8:	881b      	ldrh	r3, [r3, #0]
 80186da:	2b01      	cmp	r3, #1
 80186dc:	d941      	bls.n	8018762 <eMBMasterFuncReadInputRegister+0xaa>
    {
		vMBMasterGetPDUSndBuf(&ucMBFrame);
 80186de:	f107 030c 	add.w	r3, r7, #12
 80186e2:	4618      	mov	r0, r3
 80186e4:	f001 fffc 	bl	801a6e0 <vMBMasterGetPDUSndBuf>
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
 80186e8:	68fb      	ldr	r3, [r7, #12]
 80186ea:	3301      	adds	r3, #1
 80186ec:	781b      	ldrb	r3, [r3, #0]
 80186ee:	b29b      	uxth	r3, r3
 80186f0:	021b      	lsls	r3, r3, #8
 80186f2:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
 80186f4:	68fb      	ldr	r3, [r7, #12]
 80186f6:	3302      	adds	r3, #2
 80186f8:	781b      	ldrb	r3, [r3, #0]
 80186fa:	b29a      	uxth	r2, r3
 80186fc:	8abb      	ldrh	r3, [r7, #20]
 80186fe:	4313      	orrs	r3, r2
 8018700:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8018702:	8abb      	ldrh	r3, [r7, #20]
 8018704:	3301      	adds	r3, #1
 8018706:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF] << 8 );
 8018708:	68fb      	ldr	r3, [r7, #12]
 801870a:	3303      	adds	r3, #3
 801870c:	781b      	ldrb	r3, [r3, #0]
 801870e:	b29b      	uxth	r3, r3
 8018710:	021b      	lsls	r3, r3, #8
 8018712:	827b      	strh	r3, [r7, #18]
        usRegCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF + 1] );
 8018714:	68fb      	ldr	r3, [r7, #12]
 8018716:	3304      	adds	r3, #4
 8018718:	781b      	ldrb	r3, [r3, #0]
 801871a:	b29a      	uxth	r2, r3
 801871c:	8a7b      	ldrh	r3, [r7, #18]
 801871e:	4313      	orrs	r3, r2
 8018720:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception.
         */
        if( ( usRegCount >= 1 ) && ( 2 * usRegCount == pucFrame[MB_PDU_FUNC_READ_BYTECNT_OFF] ) )
 8018722:	8a7b      	ldrh	r3, [r7, #18]
 8018724:	2b00      	cmp	r3, #0
 8018726:	d019      	beq.n	801875c <eMBMasterFuncReadInputRegister+0xa4>
 8018728:	8a7b      	ldrh	r3, [r7, #18]
 801872a:	005b      	lsls	r3, r3, #1
 801872c:	687a      	ldr	r2, [r7, #4]
 801872e:	3201      	adds	r2, #1
 8018730:	7812      	ldrb	r2, [r2, #0]
 8018732:	4293      	cmp	r3, r2
 8018734:	d112      	bne.n	801875c <eMBMasterFuncReadInputRegister+0xa4>
        {
            /* Make callback to fill the buffer. */
            eRegStatus = eMBMasterRegInputCB( &pucFrame[MB_PDU_FUNC_READ_VALUES_OFF], usRegAddress, usRegCount );
 8018736:	687b      	ldr	r3, [r7, #4]
 8018738:	3302      	adds	r3, #2
 801873a:	8a7a      	ldrh	r2, [r7, #18]
 801873c:	8ab9      	ldrh	r1, [r7, #20]
 801873e:	4618      	mov	r0, r3
 8018740:	f001 fa72 	bl	8019c28 <eMBMasterRegInputCB>
 8018744:	4603      	mov	r3, r0
 8018746:	747b      	strb	r3, [r7, #17]
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8018748:	7c7b      	ldrb	r3, [r7, #17]
 801874a:	2b00      	cmp	r3, #0
 801874c:	d00b      	beq.n	8018766 <eMBMasterFuncReadInputRegister+0xae>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 801874e:	7c7b      	ldrb	r3, [r7, #17]
 8018750:	4618      	mov	r0, r3
 8018752:	f000 f8cf 	bl	80188f4 <prveMBError2Exception>
 8018756:	4603      	mov	r3, r0
 8018758:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 801875a:	e004      	b.n	8018766 <eMBMasterFuncReadInputRegister+0xae>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 801875c:	2303      	movs	r3, #3
 801875e:	75fb      	strb	r3, [r7, #23]
 8018760:	e001      	b.n	8018766 <eMBMasterFuncReadInputRegister+0xae>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8018762:	2303      	movs	r3, #3
 8018764:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 8018766:	7dfb      	ldrb	r3, [r7, #23]
}
 8018768:	4618      	mov	r0, r3
 801876a:	3718      	adds	r7, #24
 801876c:	46bd      	mov	sp, r7
 801876e:	bd80      	pop	{r7, pc}

08018770 <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 8018770:	b580      	push	{r7, lr}
 8018772:	b082      	sub	sp, #8
 8018774:	af00      	add	r7, sp, #0
 8018776:	6078      	str	r0, [r7, #4]
 8018778:	6039      	str	r1, [r7, #0]
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 801877a:	687b      	ldr	r3, [r7, #4]
 801877c:	3301      	adds	r3, #1
 801877e:	4a08      	ldr	r2, [pc, #32]	; (80187a0 <eMBFuncReportSlaveID+0x30>)
 8018780:	8812      	ldrh	r2, [r2, #0]
 8018782:	4908      	ldr	r1, [pc, #32]	; (80187a4 <eMBFuncReportSlaveID+0x34>)
 8018784:	4618      	mov	r0, r3
 8018786:	f002 f95e 	bl	801aa46 <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 801878a:	4b05      	ldr	r3, [pc, #20]	; (80187a0 <eMBFuncReportSlaveID+0x30>)
 801878c:	881b      	ldrh	r3, [r3, #0]
 801878e:	3301      	adds	r3, #1
 8018790:	b29a      	uxth	r2, r3
 8018792:	683b      	ldr	r3, [r7, #0]
 8018794:	801a      	strh	r2, [r3, #0]
    return MB_EX_NONE;
 8018796:	2300      	movs	r3, #0
}
 8018798:	4618      	mov	r0, r3
 801879a:	3708      	adds	r7, #8
 801879c:	46bd      	mov	sp, r7
 801879e:	bd80      	pop	{r7, pc}
 80187a0:	20004d20 	.word	0x20004d20
 80187a4:	20004d00 	.word	0x20004d00

080187a8 <xMBUtilSetBits>:

/* ----------------------- Start implementation -----------------------------*/
void
xMBUtilSetBits( UCHAR * ucByteBuf, USHORT usBitOffset, UCHAR ucNBits,
                UCHAR ucValue )
{
 80187a8:	b580      	push	{r7, lr}
 80187aa:	b086      	sub	sp, #24
 80187ac:	af00      	add	r7, sp, #0
 80187ae:	6078      	str	r0, [r7, #4]
 80187b0:	4608      	mov	r0, r1
 80187b2:	4611      	mov	r1, r2
 80187b4:	461a      	mov	r2, r3
 80187b6:	4603      	mov	r3, r0
 80187b8:	807b      	strh	r3, [r7, #2]
 80187ba:	460b      	mov	r3, r1
 80187bc:	707b      	strb	r3, [r7, #1]
 80187be:	4613      	mov	r3, r2
 80187c0:	703b      	strb	r3, [r7, #0]
    USHORT          usWordBuf;
    USHORT          usMask;
    USHORT          usByteOffset;
    USHORT          usNPreBits;
    USHORT          usValue = ucValue;
 80187c2:	783b      	ldrb	r3, [r7, #0]
 80187c4:	82fb      	strh	r3, [r7, #22]

    assert( ucNBits <= 8 );
 80187c6:	787b      	ldrb	r3, [r7, #1]
 80187c8:	2b08      	cmp	r3, #8
 80187ca:	d905      	bls.n	80187d8 <xMBUtilSetBits+0x30>
 80187cc:	4b29      	ldr	r3, [pc, #164]	; (8018874 <xMBUtilSetBits+0xcc>)
 80187ce:	4a2a      	ldr	r2, [pc, #168]	; (8018878 <xMBUtilSetBits+0xd0>)
 80187d0:	2136      	movs	r1, #54	; 0x36
 80187d2:	482a      	ldr	r0, [pc, #168]	; (801887c <xMBUtilSetBits+0xd4>)
 80187d4:	f001 ffdc 	bl	801a790 <__assert_func>
    assert( ( size_t )BITS_UCHAR == sizeof( UCHAR ) * 8 );

    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );
 80187d8:	887b      	ldrh	r3, [r7, #2]
 80187da:	08db      	lsrs	r3, r3, #3
 80187dc:	82bb      	strh	r3, [r7, #20]

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );
 80187de:	8abb      	ldrh	r3, [r7, #20]
 80187e0:	00db      	lsls	r3, r3, #3
 80187e2:	b29b      	uxth	r3, r3
 80187e4:	887a      	ldrh	r2, [r7, #2]
 80187e6:	1ad3      	subs	r3, r2, r3
 80187e8:	827b      	strh	r3, [r7, #18]

    /* Move bit field into position over bits to set */
    usValue <<= usNPreBits;
 80187ea:	8afa      	ldrh	r2, [r7, #22]
 80187ec:	8a7b      	ldrh	r3, [r7, #18]
 80187ee:	fa02 f303 	lsl.w	r3, r2, r3
 80187f2:	82fb      	strh	r3, [r7, #22]

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 80187f4:	787b      	ldrb	r3, [r7, #1]
 80187f6:	2201      	movs	r2, #1
 80187f8:	fa02 f303 	lsl.w	r3, r2, r3
 80187fc:	b29b      	uxth	r3, r3
 80187fe:	3b01      	subs	r3, #1
 8018800:	823b      	strh	r3, [r7, #16]
    usMask <<= usBitOffset - usByteOffset * BITS_UCHAR;
 8018802:	8a3a      	ldrh	r2, [r7, #16]
 8018804:	8879      	ldrh	r1, [r7, #2]
 8018806:	8abb      	ldrh	r3, [r7, #20]
 8018808:	00db      	lsls	r3, r3, #3
 801880a:	1acb      	subs	r3, r1, r3
 801880c:	fa02 f303 	lsl.w	r3, r2, r3
 8018810:	823b      	strh	r3, [r7, #16]

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
 8018812:	8abb      	ldrh	r3, [r7, #20]
 8018814:	687a      	ldr	r2, [r7, #4]
 8018816:	4413      	add	r3, r2
 8018818:	781b      	ldrb	r3, [r3, #0]
 801881a:	81fb      	strh	r3, [r7, #14]
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 801881c:	8abb      	ldrh	r3, [r7, #20]
 801881e:	3301      	adds	r3, #1
 8018820:	687a      	ldr	r2, [r7, #4]
 8018822:	4413      	add	r3, r2
 8018824:	781b      	ldrb	r3, [r3, #0]
 8018826:	021b      	lsls	r3, r3, #8
 8018828:	b21a      	sxth	r2, r3
 801882a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801882e:	4313      	orrs	r3, r2
 8018830:	b21b      	sxth	r3, r3
 8018832:	81fb      	strh	r3, [r7, #14]

    /* Zero out bit field bits and then or value bits into them. */
    usWordBuf = ( USHORT )( ( usWordBuf & ( ~usMask ) ) | usValue );
 8018834:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8018838:	43db      	mvns	r3, r3
 801883a:	b21a      	sxth	r2, r3
 801883c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8018840:	4013      	ands	r3, r2
 8018842:	b21a      	sxth	r2, r3
 8018844:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8018848:	4313      	orrs	r3, r2
 801884a:	b21b      	sxth	r3, r3
 801884c:	81fb      	strh	r3, [r7, #14]

    /* move bits back into storage */
    ucByteBuf[usByteOffset] = ( UCHAR )( usWordBuf & 0xFF );
 801884e:	8abb      	ldrh	r3, [r7, #20]
 8018850:	687a      	ldr	r2, [r7, #4]
 8018852:	4413      	add	r3, r2
 8018854:	89fa      	ldrh	r2, [r7, #14]
 8018856:	b2d2      	uxtb	r2, r2
 8018858:	701a      	strb	r2, [r3, #0]
    ucByteBuf[usByteOffset + 1] = ( UCHAR )( usWordBuf >> BITS_UCHAR );
 801885a:	89fb      	ldrh	r3, [r7, #14]
 801885c:	0a1b      	lsrs	r3, r3, #8
 801885e:	b299      	uxth	r1, r3
 8018860:	8abb      	ldrh	r3, [r7, #20]
 8018862:	3301      	adds	r3, #1
 8018864:	687a      	ldr	r2, [r7, #4]
 8018866:	4413      	add	r3, r2
 8018868:	b2ca      	uxtb	r2, r1
 801886a:	701a      	strb	r2, [r3, #0]
}
 801886c:	bf00      	nop
 801886e:	3718      	adds	r7, #24
 8018870:	46bd      	mov	sp, r7
 8018872:	bd80      	pop	{r7, pc}
 8018874:	0801ee9c 	.word	0x0801ee9c
 8018878:	0801f168 	.word	0x0801f168
 801887c:	0801eeac 	.word	0x0801eeac

08018880 <xMBUtilGetBits>:

UCHAR
xMBUtilGetBits( UCHAR * ucByteBuf, USHORT usBitOffset, UCHAR ucNBits )
{
 8018880:	b480      	push	{r7}
 8018882:	b085      	sub	sp, #20
 8018884:	af00      	add	r7, sp, #0
 8018886:	6078      	str	r0, [r7, #4]
 8018888:	460b      	mov	r3, r1
 801888a:	807b      	strh	r3, [r7, #2]
 801888c:	4613      	mov	r3, r2
 801888e:	707b      	strb	r3, [r7, #1]
    USHORT          usByteOffset;
    USHORT          usNPreBits;

    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );
 8018890:	887b      	ldrh	r3, [r7, #2]
 8018892:	08db      	lsrs	r3, r3, #3
 8018894:	81fb      	strh	r3, [r7, #14]

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );
 8018896:	89fb      	ldrh	r3, [r7, #14]
 8018898:	00db      	lsls	r3, r3, #3
 801889a:	b29b      	uxth	r3, r3
 801889c:	887a      	ldrh	r2, [r7, #2]
 801889e:	1ad3      	subs	r3, r2, r3
 80188a0:	81bb      	strh	r3, [r7, #12]

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 80188a2:	787b      	ldrb	r3, [r7, #1]
 80188a4:	2201      	movs	r2, #1
 80188a6:	fa02 f303 	lsl.w	r3, r2, r3
 80188aa:	b29b      	uxth	r3, r3
 80188ac:	3b01      	subs	r3, #1
 80188ae:	817b      	strh	r3, [r7, #10]

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
 80188b0:	89fb      	ldrh	r3, [r7, #14]
 80188b2:	687a      	ldr	r2, [r7, #4]
 80188b4:	4413      	add	r3, r2
 80188b6:	781b      	ldrb	r3, [r3, #0]
 80188b8:	813b      	strh	r3, [r7, #8]
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 80188ba:	89fb      	ldrh	r3, [r7, #14]
 80188bc:	3301      	adds	r3, #1
 80188be:	687a      	ldr	r2, [r7, #4]
 80188c0:	4413      	add	r3, r2
 80188c2:	781b      	ldrb	r3, [r3, #0]
 80188c4:	021b      	lsls	r3, r3, #8
 80188c6:	b21a      	sxth	r2, r3
 80188c8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80188cc:	4313      	orrs	r3, r2
 80188ce:	b21b      	sxth	r3, r3
 80188d0:	813b      	strh	r3, [r7, #8]

    /* throw away unneeded bits. */
    usWordBuf >>= usNPreBits;
 80188d2:	893a      	ldrh	r2, [r7, #8]
 80188d4:	89bb      	ldrh	r3, [r7, #12]
 80188d6:	fa42 f303 	asr.w	r3, r2, r3
 80188da:	813b      	strh	r3, [r7, #8]

    /* mask away bits above the requested bitfield. */
    usWordBuf &= usMask;
 80188dc:	893a      	ldrh	r2, [r7, #8]
 80188de:	897b      	ldrh	r3, [r7, #10]
 80188e0:	4013      	ands	r3, r2
 80188e2:	813b      	strh	r3, [r7, #8]

    return ( UCHAR ) usWordBuf;
 80188e4:	893b      	ldrh	r3, [r7, #8]
 80188e6:	b2db      	uxtb	r3, r3
}
 80188e8:	4618      	mov	r0, r3
 80188ea:	3714      	adds	r7, #20
 80188ec:	46bd      	mov	sp, r7
 80188ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188f2:	4770      	bx	lr

080188f4 <prveMBError2Exception>:

eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
 80188f4:	b480      	push	{r7}
 80188f6:	b085      	sub	sp, #20
 80188f8:	af00      	add	r7, sp, #0
 80188fa:	4603      	mov	r3, r0
 80188fc:	71fb      	strb	r3, [r7, #7]
    eMBException    eStatus;

    switch ( eErrorCode )
 80188fe:	79fb      	ldrb	r3, [r7, #7]
 8018900:	2b0a      	cmp	r3, #10
 8018902:	d00c      	beq.n	801891e <prveMBError2Exception+0x2a>
 8018904:	2b0a      	cmp	r3, #10
 8018906:	dc0d      	bgt.n	8018924 <prveMBError2Exception+0x30>
 8018908:	2b00      	cmp	r3, #0
 801890a:	d002      	beq.n	8018912 <prveMBError2Exception+0x1e>
 801890c:	2b01      	cmp	r3, #1
 801890e:	d003      	beq.n	8018918 <prveMBError2Exception+0x24>
 8018910:	e008      	b.n	8018924 <prveMBError2Exception+0x30>
    {
        case MB_ENOERR:
            eStatus = MB_EX_NONE;
 8018912:	2300      	movs	r3, #0
 8018914:	73fb      	strb	r3, [r7, #15]
            break;
 8018916:	e008      	b.n	801892a <prveMBError2Exception+0x36>

        case MB_ENOREG:
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
 8018918:	2302      	movs	r3, #2
 801891a:	73fb      	strb	r3, [r7, #15]
            break;
 801891c:	e005      	b.n	801892a <prveMBError2Exception+0x36>

        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
 801891e:	2306      	movs	r3, #6
 8018920:	73fb      	strb	r3, [r7, #15]
            break;
 8018922:	e002      	b.n	801892a <prveMBError2Exception+0x36>

        default:
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
 8018924:	2304      	movs	r3, #4
 8018926:	73fb      	strb	r3, [r7, #15]
            break;
 8018928:	bf00      	nop
    }

    return eStatus;
 801892a:	7bfb      	ldrb	r3, [r7, #15]
}
 801892c:	4618      	mov	r0, r3
 801892e:	3714      	adds	r7, #20
 8018930:	46bd      	mov	sp, r7
 8018932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018936:	4770      	bx	lr

08018938 <eMBInit>:
};

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBInit( eMBMode eMode, UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 8018938:	b580      	push	{r7, lr}
 801893a:	b084      	sub	sp, #16
 801893c:	af00      	add	r7, sp, #0
 801893e:	603b      	str	r3, [r7, #0]
 8018940:	4603      	mov	r3, r0
 8018942:	71fb      	strb	r3, [r7, #7]
 8018944:	460b      	mov	r3, r1
 8018946:	71bb      	strb	r3, [r7, #6]
 8018948:	4613      	mov	r3, r2
 801894a:	717b      	strb	r3, [r7, #5]
    eMBErrorCode    eStatus = MB_ENOERR;
 801894c:	2300      	movs	r3, #0
 801894e:	73fb      	strb	r3, [r7, #15]

    /* check preconditions */
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
 8018950:	79bb      	ldrb	r3, [r7, #6]
 8018952:	2b00      	cmp	r3, #0
 8018954:	d005      	beq.n	8018962 <eMBInit+0x2a>
 8018956:	79bb      	ldrb	r3, [r7, #6]
 8018958:	2b00      	cmp	r3, #0
 801895a:	d002      	beq.n	8018962 <eMBInit+0x2a>
        ( ucSlaveAddress < MB_ADDRESS_MIN ) || ( ucSlaveAddress > MB_ADDRESS_MAX ) )
 801895c:	79bb      	ldrb	r3, [r7, #6]
 801895e:	2bf7      	cmp	r3, #247	; 0xf7
 8018960:	d902      	bls.n	8018968 <eMBInit+0x30>
    {
        eStatus = MB_EINVAL;
 8018962:	2302      	movs	r3, #2
 8018964:	73fb      	strb	r3, [r7, #15]
 8018966:	e03a      	b.n	80189de <eMBInit+0xa6>
    }
    else
    {
        ucMBAddress = ucSlaveAddress;
 8018968:	4a1f      	ldr	r2, [pc, #124]	; (80189e8 <eMBInit+0xb0>)
 801896a:	79bb      	ldrb	r3, [r7, #6]
 801896c:	7013      	strb	r3, [r2, #0]

        switch ( eMode )
 801896e:	79fb      	ldrb	r3, [r7, #7]
 8018970:	2b00      	cmp	r3, #0
 8018972:	d121      	bne.n	80189b8 <eMBInit+0x80>
        {
#if MB_SLAVE_RTU_ENABLED > 0
        case MB_RTU:
            pvMBFrameStartCur = eMBRTUStart;
 8018974:	4b1d      	ldr	r3, [pc, #116]	; (80189ec <eMBInit+0xb4>)
 8018976:	4a1e      	ldr	r2, [pc, #120]	; (80189f0 <eMBInit+0xb8>)
 8018978:	601a      	str	r2, [r3, #0]
            pvMBFrameStopCur = eMBRTUStop;
 801897a:	4b1e      	ldr	r3, [pc, #120]	; (80189f4 <eMBInit+0xbc>)
 801897c:	4a1e      	ldr	r2, [pc, #120]	; (80189f8 <eMBInit+0xc0>)
 801897e:	601a      	str	r2, [r3, #0]
            peMBFrameSendCur = eMBRTUSend;
 8018980:	4b1e      	ldr	r3, [pc, #120]	; (80189fc <eMBInit+0xc4>)
 8018982:	4a1f      	ldr	r2, [pc, #124]	; (8018a00 <eMBInit+0xc8>)
 8018984:	601a      	str	r2, [r3, #0]
            peMBFrameReceiveCur = eMBRTUReceive;
 8018986:	4b1f      	ldr	r3, [pc, #124]	; (8018a04 <eMBInit+0xcc>)
 8018988:	4a1f      	ldr	r2, [pc, #124]	; (8018a08 <eMBInit+0xd0>)
 801898a:	601a      	str	r2, [r3, #0]
            pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
 801898c:	4b1f      	ldr	r3, [pc, #124]	; (8018a0c <eMBInit+0xd4>)
 801898e:	2200      	movs	r2, #0
 8018990:	601a      	str	r2, [r3, #0]
            pxMBFrameCBByteReceived = xMBRTUReceiveFSM;			//call back from interrupt
 8018992:	4b1f      	ldr	r3, [pc, #124]	; (8018a10 <eMBInit+0xd8>)
 8018994:	4a1f      	ldr	r2, [pc, #124]	; (8018a14 <eMBInit+0xdc>)
 8018996:	601a      	str	r2, [r3, #0]
            pxMBFrameCBTransmitterEmpty = xMBRTUTransmitFSM;	//call back from interrupt
 8018998:	4b1f      	ldr	r3, [pc, #124]	; (8018a18 <eMBInit+0xe0>)
 801899a:	4a20      	ldr	r2, [pc, #128]	; (8018a1c <eMBInit+0xe4>)
 801899c:	601a      	str	r2, [r3, #0]
            pxMBPortCBTimerExpired = xMBRTUTimerT35Expired;		//call back from interrupt
 801899e:	4b20      	ldr	r3, [pc, #128]	; (8018a20 <eMBInit+0xe8>)
 80189a0:	4a20      	ldr	r2, [pc, #128]	; (8018a24 <eMBInit+0xec>)
 80189a2:	601a      	str	r2, [r3, #0]

            eStatus = eMBRTUInit( ucMBAddress, ucPort, ulBaudRate, eParity );
 80189a4:	4b10      	ldr	r3, [pc, #64]	; (80189e8 <eMBInit+0xb0>)
 80189a6:	7818      	ldrb	r0, [r3, #0]
 80189a8:	7e3b      	ldrb	r3, [r7, #24]
 80189aa:	7979      	ldrb	r1, [r7, #5]
 80189ac:	683a      	ldr	r2, [r7, #0]
 80189ae:	f001 fb7d 	bl	801a0ac <eMBRTUInit>
 80189b2:	4603      	mov	r3, r0
 80189b4:	73fb      	strb	r3, [r7, #15]
            break;
 80189b6:	e001      	b.n	80189bc <eMBInit+0x84>

            eStatus = eMBASCIIInit( ucMBAddress, ucPort, ulBaudRate, eParity );
            break;
#endif
        default:
            eStatus = MB_EINVAL;
 80189b8:	2302      	movs	r3, #2
 80189ba:	73fb      	strb	r3, [r7, #15]
        }

        if( eStatus == MB_ENOERR )
 80189bc:	7bfb      	ldrb	r3, [r7, #15]
 80189be:	2b00      	cmp	r3, #0
 80189c0:	d10d      	bne.n	80189de <eMBInit+0xa6>
        {
            if( !xMBPortEventInit(  ) )
 80189c2:	f000 fa23 	bl	8018e0c <xMBPortEventInit>
 80189c6:	4603      	mov	r3, r0
 80189c8:	2b00      	cmp	r3, #0
 80189ca:	d102      	bne.n	80189d2 <eMBInit+0x9a>
            {
                /* port dependent event module initalization failed. */
                eStatus = MB_EPORTERR;
 80189cc:	2303      	movs	r3, #3
 80189ce:	73fb      	strb	r3, [r7, #15]
 80189d0:	e005      	b.n	80189de <eMBInit+0xa6>
            }
            else
            {
                eMBCurrentMode = eMode;
 80189d2:	4a15      	ldr	r2, [pc, #84]	; (8018a28 <eMBInit+0xf0>)
 80189d4:	79fb      	ldrb	r3, [r7, #7]
 80189d6:	7013      	strb	r3, [r2, #0]
                eMBState = STATE_DISABLED;
 80189d8:	4b14      	ldr	r3, [pc, #80]	; (8018a2c <eMBInit+0xf4>)
 80189da:	2201      	movs	r2, #1
 80189dc:	701a      	strb	r2, [r3, #0]
            }
        }
    }
    return eStatus;
 80189de:	7bfb      	ldrb	r3, [r7, #15]
}
 80189e0:	4618      	mov	r0, r3
 80189e2:	3710      	adds	r7, #16
 80189e4:	46bd      	mov	sp, r7
 80189e6:	bd80      	pop	{r7, pc}
 80189e8:	20004d22 	.word	0x20004d22
 80189ec:	20004d28 	.word	0x20004d28
 80189f0:	0801a125 	.word	0x0801a125
 80189f4:	20004d2c 	.word	0x20004d2c
 80189f8:	0801a14d 	.word	0x0801a14d
 80189fc:	20004d24 	.word	0x20004d24
 8018a00:	0801a205 	.word	0x0801a205
 8018a04:	20004d30 	.word	0x20004d30
 8018a08:	0801a169 	.word	0x0801a169
 8018a0c:	20004d34 	.word	0x20004d34
 8018a10:	2000db48 	.word	0x2000db48
 8018a14:	0801a2e9 	.word	0x0801a2e9
 8018a18:	2000db40 	.word	0x2000db40
 8018a1c:	0801a3b9 	.word	0x0801a3b9
 8018a20:	2000db44 	.word	0x2000db44
 8018a24:	0801a469 	.word	0x0801a469
 8018a28:	20004d23 	.word	0x20004d23
 8018a2c:	2000001a 	.word	0x2000001a

08018a30 <eMBEnable>:
    return eStatus;
}

eMBErrorCode
eMBEnable( void )
{
 8018a30:	b580      	push	{r7, lr}
 8018a32:	b082      	sub	sp, #8
 8018a34:	af00      	add	r7, sp, #0
    eMBErrorCode    eStatus = MB_ENOERR;
 8018a36:	2300      	movs	r3, #0
 8018a38:	71fb      	strb	r3, [r7, #7]

    if( eMBState == STATE_DISABLED )
 8018a3a:	4b09      	ldr	r3, [pc, #36]	; (8018a60 <eMBEnable+0x30>)
 8018a3c:	781b      	ldrb	r3, [r3, #0]
 8018a3e:	2b01      	cmp	r3, #1
 8018a40:	d106      	bne.n	8018a50 <eMBEnable+0x20>
    {
        /* Activate the protocol stack. */
        pvMBFrameStartCur(  );
 8018a42:	4b08      	ldr	r3, [pc, #32]	; (8018a64 <eMBEnable+0x34>)
 8018a44:	681b      	ldr	r3, [r3, #0]
 8018a46:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 8018a48:	4b05      	ldr	r3, [pc, #20]	; (8018a60 <eMBEnable+0x30>)
 8018a4a:	2200      	movs	r2, #0
 8018a4c:	701a      	strb	r2, [r3, #0]
 8018a4e:	e001      	b.n	8018a54 <eMBEnable+0x24>
    }
    else
    {
        eStatus = MB_EILLSTATE;
 8018a50:	2306      	movs	r3, #6
 8018a52:	71fb      	strb	r3, [r7, #7]
    }
    return eStatus;
 8018a54:	79fb      	ldrb	r3, [r7, #7]
}
 8018a56:	4618      	mov	r0, r3
 8018a58:	3708      	adds	r7, #8
 8018a5a:	46bd      	mov	sp, r7
 8018a5c:	bd80      	pop	{r7, pc}
 8018a5e:	bf00      	nop
 8018a60:	2000001a 	.word	0x2000001a
 8018a64:	20004d28 	.word	0x20004d28

08018a68 <eMBPoll>:
    return eStatus;
}

eMBErrorCode
eMBPoll( void )
{
 8018a68:	b590      	push	{r4, r7, lr}
 8018a6a:	b083      	sub	sp, #12
 8018a6c:	af00      	add	r7, sp, #0
    static UCHAR    ucFunctionCode;
    static USHORT   usLength;
    static eMBException eException;

    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
 8018a6e:	2300      	movs	r3, #0
 8018a70:	70fb      	strb	r3, [r7, #3]
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
 8018a72:	4b56      	ldr	r3, [pc, #344]	; (8018bcc <eMBPoll+0x164>)
 8018a74:	781b      	ldrb	r3, [r3, #0]
 8018a76:	2b00      	cmp	r3, #0
 8018a78:	d001      	beq.n	8018a7e <eMBPoll+0x16>
    {
        return MB_EILLSTATE;
 8018a7a:	2306      	movs	r3, #6
 8018a7c:	e0a1      	b.n	8018bc2 <eMBPoll+0x15a>
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
 8018a7e:	1cbb      	adds	r3, r7, #2
 8018a80:	4618      	mov	r0, r3
 8018a82:	f000 fa11 	bl	8018ea8 <xMBPortEventGet>
 8018a86:	4603      	mov	r3, r0
 8018a88:	2b01      	cmp	r3, #1
 8018a8a:	f040 8094 	bne.w	8018bb6 <eMBPoll+0x14e>
    {
        switch ( eEvent )
 8018a8e:	78bb      	ldrb	r3, [r7, #2]
 8018a90:	3b01      	subs	r3, #1
 8018a92:	2b07      	cmp	r3, #7
 8018a94:	f200 8094 	bhi.w	8018bc0 <eMBPoll+0x158>
 8018a98:	a201      	add	r2, pc, #4	; (adr r2, 8018aa0 <eMBPoll+0x38>)
 8018a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018a9e:	bf00      	nop
 8018aa0:	08018bc1 	.word	0x08018bc1
 8018aa4:	08018ac1 	.word	0x08018ac1
 8018aa8:	08018bc1 	.word	0x08018bc1
 8018aac:	08018af3 	.word	0x08018af3
 8018ab0:	08018bc1 	.word	0x08018bc1
 8018ab4:	08018bc1 	.word	0x08018bc1
 8018ab8:	08018bc1 	.word	0x08018bc1
 8018abc:	08018bc1 	.word	0x08018bc1
        case EV_READY:

            break;

        case EV_FRAME_RECEIVED:
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 8018ac0:	4b43      	ldr	r3, [pc, #268]	; (8018bd0 <eMBPoll+0x168>)
 8018ac2:	681b      	ldr	r3, [r3, #0]
 8018ac4:	4a43      	ldr	r2, [pc, #268]	; (8018bd4 <eMBPoll+0x16c>)
 8018ac6:	4944      	ldr	r1, [pc, #272]	; (8018bd8 <eMBPoll+0x170>)
 8018ac8:	4844      	ldr	r0, [pc, #272]	; (8018bdc <eMBPoll+0x174>)
 8018aca:	4798      	blx	r3
 8018acc:	4603      	mov	r3, r0
 8018ace:	70fb      	strb	r3, [r7, #3]
            if( eStatus == MB_ENOERR )
 8018ad0:	78fb      	ldrb	r3, [r7, #3]
 8018ad2:	2b00      	cmp	r3, #0
 8018ad4:	d171      	bne.n	8018bba <eMBPoll+0x152>
            {
                /* Check if the frame is for us. If not ignore the frame. */
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
 8018ad6:	4b41      	ldr	r3, [pc, #260]	; (8018bdc <eMBPoll+0x174>)
 8018ad8:	781a      	ldrb	r2, [r3, #0]
 8018ada:	4b41      	ldr	r3, [pc, #260]	; (8018be0 <eMBPoll+0x178>)
 8018adc:	781b      	ldrb	r3, [r3, #0]
 8018ade:	429a      	cmp	r2, r3
 8018ae0:	d003      	beq.n	8018aea <eMBPoll+0x82>
 8018ae2:	4b3e      	ldr	r3, [pc, #248]	; (8018bdc <eMBPoll+0x174>)
 8018ae4:	781b      	ldrb	r3, [r3, #0]
 8018ae6:	2b00      	cmp	r3, #0
 8018ae8:	d167      	bne.n	8018bba <eMBPoll+0x152>
                {
                    ( void )xMBPortEventPost( EV_EXECUTE );
 8018aea:	2004      	movs	r0, #4
 8018aec:	f000 f9ae 	bl	8018e4c <xMBPortEventPost>
                }
            }
            break;
 8018af0:	e063      	b.n	8018bba <eMBPoll+0x152>

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 8018af2:	4b39      	ldr	r3, [pc, #228]	; (8018bd8 <eMBPoll+0x170>)
 8018af4:	681b      	ldr	r3, [r3, #0]
 8018af6:	781a      	ldrb	r2, [r3, #0]
 8018af8:	4b3a      	ldr	r3, [pc, #232]	; (8018be4 <eMBPoll+0x17c>)
 8018afa:	701a      	strb	r2, [r3, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 8018afc:	4b3a      	ldr	r3, [pc, #232]	; (8018be8 <eMBPoll+0x180>)
 8018afe:	2201      	movs	r2, #1
 8018b00:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 8018b02:	2300      	movs	r3, #0
 8018b04:	607b      	str	r3, [r7, #4]
 8018b06:	e01f      	b.n	8018b48 <eMBPoll+0xe0>
            {
                /* No more function handlers registered. Abort. */
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 8018b08:	4a38      	ldr	r2, [pc, #224]	; (8018bec <eMBPoll+0x184>)
 8018b0a:	687b      	ldr	r3, [r7, #4]
 8018b0c:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8018b10:	2b00      	cmp	r3, #0
 8018b12:	d01d      	beq.n	8018b50 <eMBPoll+0xe8>
                {
                    break;
                }
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 8018b14:	4a35      	ldr	r2, [pc, #212]	; (8018bec <eMBPoll+0x184>)
 8018b16:	687b      	ldr	r3, [r7, #4]
 8018b18:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8018b1c:	4b31      	ldr	r3, [pc, #196]	; (8018be4 <eMBPoll+0x17c>)
 8018b1e:	781b      	ldrb	r3, [r3, #0]
 8018b20:	429a      	cmp	r2, r3
 8018b22:	d10e      	bne.n	8018b42 <eMBPoll+0xda>
                {
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
 8018b24:	4a31      	ldr	r2, [pc, #196]	; (8018bec <eMBPoll+0x184>)
 8018b26:	687b      	ldr	r3, [r7, #4]
 8018b28:	00db      	lsls	r3, r3, #3
 8018b2a:	4413      	add	r3, r2
 8018b2c:	685b      	ldr	r3, [r3, #4]
 8018b2e:	4a2a      	ldr	r2, [pc, #168]	; (8018bd8 <eMBPoll+0x170>)
 8018b30:	6812      	ldr	r2, [r2, #0]
 8018b32:	4928      	ldr	r1, [pc, #160]	; (8018bd4 <eMBPoll+0x16c>)
 8018b34:	4610      	mov	r0, r2
 8018b36:	4798      	blx	r3
 8018b38:	4603      	mov	r3, r0
 8018b3a:	461a      	mov	r2, r3
 8018b3c:	4b2a      	ldr	r3, [pc, #168]	; (8018be8 <eMBPoll+0x180>)
 8018b3e:	701a      	strb	r2, [r3, #0]
                    break;
 8018b40:	e007      	b.n	8018b52 <eMBPoll+0xea>
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 8018b42:	687b      	ldr	r3, [r7, #4]
 8018b44:	3301      	adds	r3, #1
 8018b46:	607b      	str	r3, [r7, #4]
 8018b48:	687b      	ldr	r3, [r7, #4]
 8018b4a:	2b0f      	cmp	r3, #15
 8018b4c:	dddc      	ble.n	8018b08 <eMBPoll+0xa0>
 8018b4e:	e000      	b.n	8018b52 <eMBPoll+0xea>
                    break;
 8018b50:	bf00      	nop
                }
            }

            /* If the request was not sent to the broadcast address we
             * return a reply. */
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 8018b52:	4b22      	ldr	r3, [pc, #136]	; (8018bdc <eMBPoll+0x174>)
 8018b54:	781b      	ldrb	r3, [r3, #0]
 8018b56:	2b00      	cmp	r3, #0
 8018b58:	d031      	beq.n	8018bbe <eMBPoll+0x156>
            {
                if( eException != MB_EX_NONE )
 8018b5a:	4b23      	ldr	r3, [pc, #140]	; (8018be8 <eMBPoll+0x180>)
 8018b5c:	781b      	ldrb	r3, [r3, #0]
 8018b5e:	2b00      	cmp	r3, #0
 8018b60:	d01d      	beq.n	8018b9e <eMBPoll+0x136>
                {
                    /* An exception occured. Build an error frame. */
                    usLength = 0;
 8018b62:	4b1c      	ldr	r3, [pc, #112]	; (8018bd4 <eMBPoll+0x16c>)
 8018b64:	2200      	movs	r2, #0
 8018b66:	801a      	strh	r2, [r3, #0]
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 8018b68:	4b1e      	ldr	r3, [pc, #120]	; (8018be4 <eMBPoll+0x17c>)
 8018b6a:	781a      	ldrb	r2, [r3, #0]
 8018b6c:	4b1a      	ldr	r3, [pc, #104]	; (8018bd8 <eMBPoll+0x170>)
 8018b6e:	6819      	ldr	r1, [r3, #0]
 8018b70:	4b18      	ldr	r3, [pc, #96]	; (8018bd4 <eMBPoll+0x16c>)
 8018b72:	881b      	ldrh	r3, [r3, #0]
 8018b74:	1c58      	adds	r0, r3, #1
 8018b76:	b284      	uxth	r4, r0
 8018b78:	4816      	ldr	r0, [pc, #88]	; (8018bd4 <eMBPoll+0x16c>)
 8018b7a:	8004      	strh	r4, [r0, #0]
 8018b7c:	440b      	add	r3, r1
 8018b7e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8018b82:	b2d2      	uxtb	r2, r2
 8018b84:	701a      	strb	r2, [r3, #0]
                    ucMBFrame[usLength++] = eException;
 8018b86:	4b14      	ldr	r3, [pc, #80]	; (8018bd8 <eMBPoll+0x170>)
 8018b88:	681a      	ldr	r2, [r3, #0]
 8018b8a:	4b12      	ldr	r3, [pc, #72]	; (8018bd4 <eMBPoll+0x16c>)
 8018b8c:	881b      	ldrh	r3, [r3, #0]
 8018b8e:	1c59      	adds	r1, r3, #1
 8018b90:	b288      	uxth	r0, r1
 8018b92:	4910      	ldr	r1, [pc, #64]	; (8018bd4 <eMBPoll+0x16c>)
 8018b94:	8008      	strh	r0, [r1, #0]
 8018b96:	4413      	add	r3, r2
 8018b98:	4a13      	ldr	r2, [pc, #76]	; (8018be8 <eMBPoll+0x180>)
 8018b9a:	7812      	ldrb	r2, [r2, #0]
 8018b9c:	701a      	strb	r2, [r3, #0]
                }


                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
 8018b9e:	4b14      	ldr	r3, [pc, #80]	; (8018bf0 <eMBPoll+0x188>)
 8018ba0:	681b      	ldr	r3, [r3, #0]
 8018ba2:	4a0f      	ldr	r2, [pc, #60]	; (8018be0 <eMBPoll+0x178>)
 8018ba4:	7810      	ldrb	r0, [r2, #0]
 8018ba6:	4a0c      	ldr	r2, [pc, #48]	; (8018bd8 <eMBPoll+0x170>)
 8018ba8:	6811      	ldr	r1, [r2, #0]
 8018baa:	4a0a      	ldr	r2, [pc, #40]	; (8018bd4 <eMBPoll+0x16c>)
 8018bac:	8812      	ldrh	r2, [r2, #0]
 8018bae:	4798      	blx	r3
 8018bb0:	4603      	mov	r3, r0
 8018bb2:	70fb      	strb	r3, [r7, #3]
            }
            break;
 8018bb4:	e003      	b.n	8018bbe <eMBPoll+0x156>

        case EV_FRAME_SENT:
            break;
        }
    }
 8018bb6:	bf00      	nop
 8018bb8:	e002      	b.n	8018bc0 <eMBPoll+0x158>
            break;
 8018bba:	bf00      	nop
 8018bbc:	e000      	b.n	8018bc0 <eMBPoll+0x158>
            break;
 8018bbe:	bf00      	nop
    return MB_ENOERR;
 8018bc0:	2300      	movs	r3, #0
}
 8018bc2:	4618      	mov	r0, r3
 8018bc4:	370c      	adds	r7, #12
 8018bc6:	46bd      	mov	sp, r7
 8018bc8:	bd90      	pop	{r4, r7, pc}
 8018bca:	bf00      	nop
 8018bcc:	2000001a 	.word	0x2000001a
 8018bd0:	20004d30 	.word	0x20004d30
 8018bd4:	20004d40 	.word	0x20004d40
 8018bd8:	20004d3c 	.word	0x20004d3c
 8018bdc:	20004d38 	.word	0x20004d38
 8018be0:	20004d22 	.word	0x20004d22
 8018be4:	20004d42 	.word	0x20004d42
 8018be8:	20004d43 	.word	0x20004d43
 8018bec:	2000001c 	.word	0x2000001c
 8018bf0:	20004d24 	.word	0x20004d24

08018bf4 <vInitMBTask>:
TaskHandle_t MasterMonitorHandle = NULL;
TaskHandle_t MasterPollHandle = NULL;
TaskHandle_t SlavePollHandle = NULL;
TaskHandle_t LedTaskHandle = NULL;

void vInitMBTask(void){
 8018bf4:	b580      	push	{r7, lr}
 8018bf6:	b086      	sub	sp, #24
 8018bf8:	af02      	add	r7, sp, #8
	BaseType_t status;

#if MB_MASTER_RTU_ENABLED || MB_MASTER_TCP_ENABLED
	status = xTaskCreate(mastermonitor_task, "master monitor task", 600, NULL, osPriorityNormal, &MasterMonitorHandle);
 8018bfa:	4b2b      	ldr	r3, [pc, #172]	; (8018ca8 <vInitMBTask+0xb4>)
 8018bfc:	9301      	str	r3, [sp, #4]
 8018bfe:	2318      	movs	r3, #24
 8018c00:	9300      	str	r3, [sp, #0]
 8018c02:	2300      	movs	r3, #0
 8018c04:	f44f 7216 	mov.w	r2, #600	; 0x258
 8018c08:	4928      	ldr	r1, [pc, #160]	; (8018cac <vInitMBTask+0xb8>)
 8018c0a:	4829      	ldr	r0, [pc, #164]	; (8018cb0 <vInitMBTask+0xbc>)
 8018c0c:	f7ef fac5 	bl	800819a <xTaskCreate>
 8018c10:	60f8      	str	r0, [r7, #12]
	configASSERT(status == pdPASS);
 8018c12:	68fb      	ldr	r3, [r7, #12]
 8018c14:	2b01      	cmp	r3, #1
 8018c16:	d00c      	beq.n	8018c32 <vInitMBTask+0x3e>
	__asm volatile
 8018c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c1c:	b672      	cpsid	i
 8018c1e:	f383 8811 	msr	BASEPRI, r3
 8018c22:	f3bf 8f6f 	isb	sy
 8018c26:	f3bf 8f4f 	dsb	sy
 8018c2a:	b662      	cpsie	i
 8018c2c:	60bb      	str	r3, [r7, #8]
}
 8018c2e:	bf00      	nop
 8018c30:	e7fe      	b.n	8018c30 <vInitMBTask+0x3c>
	configASSERT(status == pdPASS);
#endif

#if MB_SLAVE_RTU_ENABLED

	status = xTaskCreate(slavepoll_task, "slave poll task", 600, NULL, osPriorityNormal, &SlavePollHandle);
 8018c32:	4b20      	ldr	r3, [pc, #128]	; (8018cb4 <vInitMBTask+0xc0>)
 8018c34:	9301      	str	r3, [sp, #4]
 8018c36:	2318      	movs	r3, #24
 8018c38:	9300      	str	r3, [sp, #0]
 8018c3a:	2300      	movs	r3, #0
 8018c3c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8018c40:	491d      	ldr	r1, [pc, #116]	; (8018cb8 <vInitMBTask+0xc4>)
 8018c42:	481e      	ldr	r0, [pc, #120]	; (8018cbc <vInitMBTask+0xc8>)
 8018c44:	f7ef faa9 	bl	800819a <xTaskCreate>
 8018c48:	60f8      	str	r0, [r7, #12]
	configASSERT(status == pdPASS);
 8018c4a:	68fb      	ldr	r3, [r7, #12]
 8018c4c:	2b01      	cmp	r3, #1
 8018c4e:	d00c      	beq.n	8018c6a <vInitMBTask+0x76>
	__asm volatile
 8018c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c54:	b672      	cpsid	i
 8018c56:	f383 8811 	msr	BASEPRI, r3
 8018c5a:	f3bf 8f6f 	isb	sy
 8018c5e:	f3bf 8f4f 	dsb	sy
 8018c62:	b662      	cpsie	i
 8018c64:	607b      	str	r3, [r7, #4]
}
 8018c66:	bf00      	nop
 8018c68:	e7fe      	b.n	8018c68 <vInitMBTask+0x74>

#endif

	status = xTaskCreate(led_task, "LED task", 200, NULL, osPriorityNormal, &LedTaskHandle);
 8018c6a:	4b15      	ldr	r3, [pc, #84]	; (8018cc0 <vInitMBTask+0xcc>)
 8018c6c:	9301      	str	r3, [sp, #4]
 8018c6e:	2318      	movs	r3, #24
 8018c70:	9300      	str	r3, [sp, #0]
 8018c72:	2300      	movs	r3, #0
 8018c74:	22c8      	movs	r2, #200	; 0xc8
 8018c76:	4913      	ldr	r1, [pc, #76]	; (8018cc4 <vInitMBTask+0xd0>)
 8018c78:	4813      	ldr	r0, [pc, #76]	; (8018cc8 <vInitMBTask+0xd4>)
 8018c7a:	f7ef fa8e 	bl	800819a <xTaskCreate>
 8018c7e:	60f8      	str	r0, [r7, #12]
	configASSERT(status == pdPASS);
 8018c80:	68fb      	ldr	r3, [r7, #12]
 8018c82:	2b01      	cmp	r3, #1
 8018c84:	d00c      	beq.n	8018ca0 <vInitMBTask+0xac>
	__asm volatile
 8018c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c8a:	b672      	cpsid	i
 8018c8c:	f383 8811 	msr	BASEPRI, r3
 8018c90:	f3bf 8f6f 	isb	sy
 8018c94:	f3bf 8f4f 	dsb	sy
 8018c98:	b662      	cpsie	i
 8018c9a:	603b      	str	r3, [r7, #0]
}
 8018c9c:	bf00      	nop
 8018c9e:	e7fe      	b.n	8018c9e <vInitMBTask+0xaa>
}
 8018ca0:	bf00      	nop
 8018ca2:	3710      	adds	r7, #16
 8018ca4:	46bd      	mov	sp, r7
 8018ca6:	bd80      	pop	{r7, pc}
 8018ca8:	20004d44 	.word	0x20004d44
 8018cac:	0801eed8 	.word	0x0801eed8
 8018cb0:	08018ccd 	.word	0x08018ccd
 8018cb4:	20004d48 	.word	0x20004d48
 8018cb8:	0801eeec 	.word	0x0801eeec
 8018cbc:	08018d65 	.word	0x08018d65
 8018cc0:	20004d4c 	.word	0x20004d4c
 8018cc4:	0801eefc 	.word	0x0801eefc
 8018cc8:	08018dd5 	.word	0x08018dd5

08018ccc <mastermonitor_task>:

USHORT usModbusUserData[10];
UCHAR  ucModbusUserData[10];

void mastermonitor_task(void*p){
 8018ccc:	b580      	push	{r7, lr}
 8018cce:	b086      	sub	sp, #24
 8018cd0:	af02      	add	r7, sp, #8
 8018cd2:	6078      	str	r0, [r7, #4]

#if MB_MASTER_TCP_ENABLED
	eMBMasterTCPDoInit(502);
 8018cd4:	f44f 70fb 	mov.w	r0, #502	; 0x1f6
 8018cd8:	f001 fc0c 	bl	801a4f4 <eMBMasterTCPDoInit>
#endif
    eMBMasterReqErrCode    errorCode = MB_MRE_NO_ERR;
 8018cdc:	2300      	movs	r3, #0
 8018cde:	73fb      	strb	r3, [r7, #15]
    usModbusUserData[0] = 0x1000;
 8018ce0:	4b1f      	ldr	r3, [pc, #124]	; (8018d60 <mastermonitor_task+0x94>)
 8018ce2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8018ce6:	801a      	strh	r2, [r3, #0]
    usModbusUserData[1] = 0x1111;
 8018ce8:	4b1d      	ldr	r3, [pc, #116]	; (8018d60 <mastermonitor_task+0x94>)
 8018cea:	f241 1211 	movw	r2, #4369	; 0x1111
 8018cee:	805a      	strh	r2, [r3, #2]
    usModbusUserData[2] = 0x2222;
 8018cf0:	4b1b      	ldr	r3, [pc, #108]	; (8018d60 <mastermonitor_task+0x94>)
 8018cf2:	f242 2222 	movw	r2, #8738	; 0x2222
 8018cf6:	809a      	strh	r2, [r3, #4]
    usModbusUserData[3] = 0x3333;
 8018cf8:	4b19      	ldr	r3, [pc, #100]	; (8018d60 <mastermonitor_task+0x94>)
 8018cfa:	f243 3233 	movw	r2, #13107	; 0x3333
 8018cfe:	80da      	strh	r2, [r3, #6]
    usModbusUserData[4] = 0x4444;
 8018d00:	4b17      	ldr	r3, [pc, #92]	; (8018d60 <mastermonitor_task+0x94>)
 8018d02:	f244 4244 	movw	r2, #17476	; 0x4444
 8018d06:	811a      	strh	r2, [r3, #8]
	while(1)
	{
				//GHI 1 vào bit thứ 8 của slave modbus (function code = 05)
		        errorCode = eMBMasterReqWriteCoil(1,8,0xFF00, portMAX_DELAY);
 8018d08:	f04f 33ff 	mov.w	r3, #4294967295
 8018d0c:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8018d10:	2108      	movs	r1, #8
 8018d12:	2001      	movs	r0, #1
 8018d14:	f7fe fe36 	bl	8017984 <eMBMasterReqWriteCoil>
 8018d18:	4603      	mov	r3, r0
 8018d1a:	73fb      	strb	r3, [r7, #15]

		        //đọc 8 bit đầu tiên của slave modbus	(function code = 02)
		        errorCode = eMBMasterReqReadDiscreteInputs(1, 0, 8, portMAX_DELAY);
 8018d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8018d20:	2208      	movs	r2, #8
 8018d22:	2100      	movs	r1, #0
 8018d24:	2001      	movs	r0, #1
 8018d26:	f7fe ffc1 	bl	8017cac <eMBMasterReqReadDiscreteInputs>
 8018d2a:	4603      	mov	r3, r0
 8018d2c:	73fb      	strb	r3, [r7, #15]

		        //Đọc 16 thanh ghi INPUT đầu tiên của slave modbus  (function code = 04)
		     	errorCode = eMBMasterReqReadInputRegister(1,0,16,portMAX_DELAY);
 8018d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8018d32:	2210      	movs	r2, #16
 8018d34:	2100      	movs	r1, #0
 8018d36:	2001      	movs	r0, #1
 8018d38:	f7ff fc70 	bl	801861c <eMBMasterReqReadInputRegister>
 8018d3c:	4603      	mov	r3, r0
 8018d3e:	73fb      	strb	r3, [r7, #15]

		     	//ghi vào 4 thanh ghi đầu tiên của slave modbus  (function code = 10)
		     	errorCode = eMBMasterReqWriteMultipleHoldingRegister(1,0,2,usModbusUserData,portMAX_DELAY);
 8018d40:	f04f 33ff 	mov.w	r3, #4294967295
 8018d44:	9300      	str	r3, [sp, #0]
 8018d46:	4b06      	ldr	r3, [pc, #24]	; (8018d60 <mastermonitor_task+0x94>)
 8018d48:	2202      	movs	r2, #2
 8018d4a:	2100      	movs	r1, #0
 8018d4c:	2001      	movs	r0, #1
 8018d4e:	f7ff fa42 	bl	80181d6 <eMBMasterReqWriteMultipleHoldingRegister>
 8018d52:	4603      	mov	r3, r0
 8018d54:	73fb      	strb	r3, [r7, #15]

		     	vTaskDelay(2000);
 8018d56:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8018d5a:	f7ef fb7b 	bl	8008454 <vTaskDelay>
		        errorCode = eMBMasterReqWriteCoil(1,8,0xFF00, portMAX_DELAY);
 8018d5e:	e7d3      	b.n	8018d08 <mastermonitor_task+0x3c>
 8018d60:	2000db58 	.word	0x2000db58

08018d64 <slavepoll_task>:
}

#define PORT_MODBUS_RTU		0


void slavepoll_task(void*p){
 8018d64:	b580      	push	{r7, lr}
 8018d66:	b084      	sub	sp, #16
 8018d68:	af02      	add	r7, sp, #8
 8018d6a:	6078      	str	r0, [r7, #4]

	  usSRegInBuf[0] 	= 0x11;
 8018d6c:	4b15      	ldr	r3, [pc, #84]	; (8018dc4 <slavepoll_task+0x60>)
 8018d6e:	2211      	movs	r2, #17
 8018d70:	801a      	strh	r2, [r3, #0]
	  usSRegInBuf[1] 	= 0x22;
 8018d72:	4b14      	ldr	r3, [pc, #80]	; (8018dc4 <slavepoll_task+0x60>)
 8018d74:	2222      	movs	r2, #34	; 0x22
 8018d76:	805a      	strh	r2, [r3, #2]
	  usSRegInBuf[2] 	= 0x33;
 8018d78:	4b12      	ldr	r3, [pc, #72]	; (8018dc4 <slavepoll_task+0x60>)
 8018d7a:	2233      	movs	r2, #51	; 0x33
 8018d7c:	809a      	strh	r2, [r3, #4]
	  usSRegInBuf[3] 	= 0x44;
 8018d7e:	4b11      	ldr	r3, [pc, #68]	; (8018dc4 <slavepoll_task+0x60>)
 8018d80:	2244      	movs	r2, #68	; 0x44
 8018d82:	80da      	strh	r2, [r3, #6]
	  usSRegHoldBuf[0] 	= 0x1111;
 8018d84:	4b10      	ldr	r3, [pc, #64]	; (8018dc8 <slavepoll_task+0x64>)
 8018d86:	f241 1211 	movw	r2, #4369	; 0x1111
 8018d8a:	801a      	strh	r2, [r3, #0]
	  usSRegHoldBuf[1] 	= 0x2222;
 8018d8c:	4b0e      	ldr	r3, [pc, #56]	; (8018dc8 <slavepoll_task+0x64>)
 8018d8e:	f242 2222 	movw	r2, #8738	; 0x2222
 8018d92:	805a      	strh	r2, [r3, #2]
	  ucSDiscInBuf[0] 	= 0xAA;
 8018d94:	4b0d      	ldr	r3, [pc, #52]	; (8018dcc <slavepoll_task+0x68>)
 8018d96:	22aa      	movs	r2, #170	; 0xaa
 8018d98:	701a      	strb	r2, [r3, #0]
	  ucSCoilBuf[0] 	= 0xf4;
 8018d9a:	4b0d      	ldr	r3, [pc, #52]	; (8018dd0 <slavepoll_task+0x6c>)
 8018d9c:	22f4      	movs	r2, #244	; 0xf4
 8018d9e:	701a      	strb	r2, [r3, #0]

	eMBInit(MB_RTU, 1, PORT_MODBUS_RTU, 115200, MB_PAR_NONE);
 8018da0:	2300      	movs	r3, #0
 8018da2:	9300      	str	r3, [sp, #0]
 8018da4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8018da8:	2200      	movs	r2, #0
 8018daa:	2101      	movs	r1, #1
 8018dac:	2000      	movs	r0, #0
 8018dae:	f7ff fdc3 	bl	8018938 <eMBInit>
	eMBEnable();
 8018db2:	f7ff fe3d 	bl	8018a30 <eMBEnable>
	HAL_Delay(2);
 8018db6:	2002      	movs	r0, #2
 8018db8:	f7e8 f95a 	bl	8001070 <HAL_Delay>

	while(1){

		eMBPoll();
 8018dbc:	f7ff fe54 	bl	8018a68 <eMBPoll>
 8018dc0:	e7fc      	b.n	8018dbc <slavepoll_task+0x58>
 8018dc2:	bf00      	nop
 8018dc4:	2000db88 	.word	0x2000db88
 8018dc8:	2000db78 	.word	0x2000db78
 8018dcc:	2000db74 	.word	0x2000db74
 8018dd0:	2000db70 	.word	0x2000db70

08018dd4 <led_task>:

	}

}

void led_task(void*p){
 8018dd4:	b580      	push	{r7, lr}
 8018dd6:	b082      	sub	sp, #8
 8018dd8:	af00      	add	r7, sp, #0
 8018dda:	6078      	str	r0, [r7, #4]

	while(1){
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8018ddc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8018de0:	4803      	ldr	r0, [pc, #12]	; (8018df0 <led_task+0x1c>)
 8018de2:	f7e9 fe26 	bl	8002a32 <HAL_GPIO_TogglePin>
		vTaskDelay(500);
 8018de6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8018dea:	f7ef fb33 	bl	8008454 <vTaskDelay>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8018dee:	e7f5      	b.n	8018ddc <led_task+0x8>
 8018df0:	40020400 	.word	0x40020400

08018df4 <EnterCriticalSection>:

/* ----------------------- Variables ----------------------------------------*/

/* ----------------------- Start implementation -----------------------------*/
void EnterCriticalSection(void)
{
 8018df4:	b580      	push	{r7, lr}
 8018df6:	af00      	add	r7, sp, #0
    taskENTER_CRITICAL();
 8018df8:	f7f0 ff20 	bl	8009c3c <vPortEnterCritical>
}
 8018dfc:	bf00      	nop
 8018dfe:	bd80      	pop	{r7, pc}

08018e00 <ExitCriticalSection>:

void ExitCriticalSection(void)
{
 8018e00:	b580      	push	{r7, lr}
 8018e02:	af00      	add	r7, sp, #0
    taskEXIT_CRITICAL();
 8018e04:	f7f0 ff4e 	bl	8009ca4 <vPortExitCritical>
}
 8018e08:	bf00      	nop
 8018e0a:	bd80      	pop	{r7, pc}

08018e0c <xMBPortEventInit>:


/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortEventInit( void )
{
 8018e0c:	b580      	push	{r7, lr}
 8018e0e:	b082      	sub	sp, #8
 8018e10:	af00      	add	r7, sp, #0
	xSlaveOsEvent = xEventGroupCreate();
 8018e12:	f7ed fd99 	bl	8006948 <xEventGroupCreate>
 8018e16:	4603      	mov	r3, r0
 8018e18:	4a0b      	ldr	r2, [pc, #44]	; (8018e48 <xMBPortEventInit+0x3c>)
 8018e1a:	6013      	str	r3, [r2, #0]

	configASSERT(xSlaveOsEvent != NULL);
 8018e1c:	4b0a      	ldr	r3, [pc, #40]	; (8018e48 <xMBPortEventInit+0x3c>)
 8018e1e:	681b      	ldr	r3, [r3, #0]
 8018e20:	2b00      	cmp	r3, #0
 8018e22:	d10c      	bne.n	8018e3e <xMBPortEventInit+0x32>
	__asm volatile
 8018e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e28:	b672      	cpsid	i
 8018e2a:	f383 8811 	msr	BASEPRI, r3
 8018e2e:	f3bf 8f6f 	isb	sy
 8018e32:	f3bf 8f4f 	dsb	sy
 8018e36:	b662      	cpsie	i
 8018e38:	607b      	str	r3, [r7, #4]
}
 8018e3a:	bf00      	nop
 8018e3c:	e7fe      	b.n	8018e3c <xMBPortEventInit+0x30>

    return TRUE;
 8018e3e:	2301      	movs	r3, #1
}
 8018e40:	4618      	mov	r0, r3
 8018e42:	3708      	adds	r7, #8
 8018e44:	46bd      	mov	sp, r7
 8018e46:	bd80      	pop	{r7, pc}
 8018e48:	20004d50 	.word	0x20004d50

08018e4c <xMBPortEventPost>:

BOOL
xMBPortEventPost( eMBEventType eEvent )
{
 8018e4c:	b580      	push	{r7, lr}
 8018e4e:	b082      	sub	sp, #8
 8018e50:	af00      	add	r7, sp, #0
 8018e52:	4603      	mov	r3, r0
 8018e54:	71fb      	strb	r3, [r7, #7]
	xEventGroupSetBits(xSlaveOsEvent, eEvent);
 8018e56:	4b06      	ldr	r3, [pc, #24]	; (8018e70 <xMBPortEventPost+0x24>)
 8018e58:	681b      	ldr	r3, [r3, #0]
 8018e5a:	79fa      	ldrb	r2, [r7, #7]
 8018e5c:	4611      	mov	r1, r2
 8018e5e:	4618      	mov	r0, r3
 8018e60:	f7ed fe62 	bl	8006b28 <xEventGroupSetBits>
    return TRUE;
 8018e64:	2301      	movs	r3, #1
}
 8018e66:	4618      	mov	r0, r3
 8018e68:	3708      	adds	r7, #8
 8018e6a:	46bd      	mov	sp, r7
 8018e6c:	bd80      	pop	{r7, pc}
 8018e6e:	bf00      	nop
 8018e70:	20004d50 	.word	0x20004d50

08018e74 <xMBPortEventPostFromISR>:

BOOL
xMBPortEventPostFromISR( eMBEventType eEvent )
{
 8018e74:	b580      	push	{r7, lr}
 8018e76:	b084      	sub	sp, #16
 8018e78:	af00      	add	r7, sp, #0
 8018e7a:	4603      	mov	r3, r0
 8018e7c:	71fb      	strb	r3, [r7, #7]
	BaseType_t xresult = pdFAIL;
 8018e7e:	2300      	movs	r3, #0
 8018e80:	60fb      	str	r3, [r7, #12]
	xresult = xEventGroupSetBitsFromISR(xSlaveOsEvent, eEvent, NULL);
 8018e82:	4b08      	ldr	r3, [pc, #32]	; (8018ea4 <xMBPortEventPostFromISR+0x30>)
 8018e84:	681b      	ldr	r3, [r3, #0]
 8018e86:	79f9      	ldrb	r1, [r7, #7]
 8018e88:	2200      	movs	r2, #0
 8018e8a:	4618      	mov	r0, r3
 8018e8c:	f7ed ff0a 	bl	8006ca4 <xEventGroupSetBitsFromISR>
 8018e90:	60f8      	str	r0, [r7, #12]
	if(xresult == pdFAIL){
 8018e92:	68fb      	ldr	r3, [r7, #12]
 8018e94:	2b00      	cmp	r3, #0
 8018e96:	d100      	bne.n	8018e9a <xMBPortEventPostFromISR+0x26>
		while(1);
 8018e98:	e7fe      	b.n	8018e98 <xMBPortEventPostFromISR+0x24>
	}
	return TRUE;
 8018e9a:	2301      	movs	r3, #1
}
 8018e9c:	4618      	mov	r0, r3
 8018e9e:	3710      	adds	r7, #16
 8018ea0:	46bd      	mov	sp, r7
 8018ea2:	bd80      	pop	{r7, pc}
 8018ea4:	20004d50 	.word	0x20004d50

08018ea8 <xMBPortEventGet>:

BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
 8018ea8:	b580      	push	{r7, lr}
 8018eaa:	b086      	sub	sp, #24
 8018eac:	af02      	add	r7, sp, #8
 8018eae:	6078      	str	r0, [r7, #4]
	EventBits_t recEvent;
	recEvent = xEventGroupWaitBits(	xSlaveOsEvent,
 8018eb0:	4b1b      	ldr	r3, [pc, #108]	; (8018f20 <xMBPortEventGet+0x78>)
 8018eb2:	6818      	ldr	r0, [r3, #0]
 8018eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8018eb8:	9300      	str	r3, [sp, #0]
 8018eba:	2300      	movs	r3, #0
 8018ebc:	2201      	movs	r2, #1
 8018ebe:	210f      	movs	r1, #15
 8018ec0:	f7ed fd5c 	bl	800697c <xEventGroupWaitBits>
 8018ec4:	60f8      	str	r0, [r7, #12]
 8018ec6:	68fb      	ldr	r3, [r7, #12]
 8018ec8:	3b01      	subs	r3, #1
 8018eca:	2b07      	cmp	r3, #7
 8018ecc:	d822      	bhi.n	8018f14 <xMBPortEventGet+0x6c>
 8018ece:	a201      	add	r2, pc, #4	; (adr r2, 8018ed4 <xMBPortEventGet+0x2c>)
 8018ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018ed4:	08018ef5 	.word	0x08018ef5
 8018ed8:	08018efd 	.word	0x08018efd
 8018edc:	08018f15 	.word	0x08018f15
 8018ee0:	08018f05 	.word	0x08018f05
 8018ee4:	08018f15 	.word	0x08018f15
 8018ee8:	08018f15 	.word	0x08018f15
 8018eec:	08018f15 	.word	0x08018f15
 8018ef0:	08018f0d 	.word	0x08018f0d
									portMAX_DELAY);

    switch (recEvent)
    {
    case EV_READY:
        *eEvent = EV_READY;
 8018ef4:	687b      	ldr	r3, [r7, #4]
 8018ef6:	2201      	movs	r2, #1
 8018ef8:	701a      	strb	r2, [r3, #0]
        break;
 8018efa:	e00b      	b.n	8018f14 <xMBPortEventGet+0x6c>
    case EV_FRAME_RECEIVED:
        *eEvent = EV_FRAME_RECEIVED;
 8018efc:	687b      	ldr	r3, [r7, #4]
 8018efe:	2202      	movs	r2, #2
 8018f00:	701a      	strb	r2, [r3, #0]
        break;
 8018f02:	e007      	b.n	8018f14 <xMBPortEventGet+0x6c>
    case EV_EXECUTE:
        *eEvent = EV_EXECUTE;
 8018f04:	687b      	ldr	r3, [r7, #4]
 8018f06:	2204      	movs	r2, #4
 8018f08:	701a      	strb	r2, [r3, #0]
        break;
 8018f0a:	e003      	b.n	8018f14 <xMBPortEventGet+0x6c>
    case EV_FRAME_SENT:
        *eEvent = EV_FRAME_SENT;
 8018f0c:	687b      	ldr	r3, [r7, #4]
 8018f0e:	2208      	movs	r2, #8
 8018f10:	701a      	strb	r2, [r3, #0]
        break;
 8018f12:	bf00      	nop
    }
    return TRUE;
 8018f14:	2301      	movs	r3, #1
}
 8018f16:	4618      	mov	r0, r3
 8018f18:	3710      	adds	r7, #16
 8018f1a:	46bd      	mov	sp, r7
 8018f1c:	bd80      	pop	{r7, pc}
 8018f1e:	bf00      	nop
 8018f20:	20004d50 	.word	0x20004d50

08018f24 <xMBMasterPortEventInit>:
static SemaphoreHandle_t	xMasterRunRes;

/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBMasterPortEventInit( void )
{
 8018f24:	b580      	push	{r7, lr}
 8018f26:	af00      	add	r7, sp, #0
	xMasterOsEvent = xEventGroupCreate();
 8018f28:	f7ed fd0e 	bl	8006948 <xEventGroupCreate>
 8018f2c:	4603      	mov	r3, r0
 8018f2e:	4a05      	ldr	r2, [pc, #20]	; (8018f44 <xMBMasterPortEventInit+0x20>)
 8018f30:	6013      	str	r3, [r2, #0]
	if(xMasterOsEvent == NULL) return FALSE;
 8018f32:	4b04      	ldr	r3, [pc, #16]	; (8018f44 <xMBMasterPortEventInit+0x20>)
 8018f34:	681b      	ldr	r3, [r3, #0]
 8018f36:	2b00      	cmp	r3, #0
 8018f38:	d101      	bne.n	8018f3e <xMBMasterPortEventInit+0x1a>
 8018f3a:	2300      	movs	r3, #0
 8018f3c:	e000      	b.n	8018f40 <xMBMasterPortEventInit+0x1c>
	return TRUE;
 8018f3e:	2301      	movs	r3, #1
}
 8018f40:	4618      	mov	r0, r3
 8018f42:	bd80      	pop	{r7, pc}
 8018f44:	20004d54 	.word	0x20004d54

08018f48 <xMBMasterPortEventPost>:

BOOL
xMBMasterPortEventPost( eMBMasterEventType eEvent )
{
 8018f48:	b580      	push	{r7, lr}
 8018f4a:	b082      	sub	sp, #8
 8018f4c:	af00      	add	r7, sp, #0
 8018f4e:	4603      	mov	r3, r0
 8018f50:	80fb      	strh	r3, [r7, #6]
	xEventGroupSetBits(xMasterOsEvent, eEvent);
 8018f52:	4b06      	ldr	r3, [pc, #24]	; (8018f6c <xMBMasterPortEventPost+0x24>)
 8018f54:	681b      	ldr	r3, [r3, #0]
 8018f56:	88fa      	ldrh	r2, [r7, #6]
 8018f58:	4611      	mov	r1, r2
 8018f5a:	4618      	mov	r0, r3
 8018f5c:	f7ed fde4 	bl	8006b28 <xEventGroupSetBits>
	return TRUE;
 8018f60:	2301      	movs	r3, #1
}
 8018f62:	4618      	mov	r0, r3
 8018f64:	3708      	adds	r7, #8
 8018f66:	46bd      	mov	sp, r7
 8018f68:	bd80      	pop	{r7, pc}
 8018f6a:	bf00      	nop
 8018f6c:	20004d54 	.word	0x20004d54

08018f70 <xMBMasterPortEventGet>:
	return TRUE;
}

BOOL
xMBMasterPortEventGet( eMBMasterEventType * eEvent )
{
 8018f70:	b580      	push	{r7, lr}
 8018f72:	b086      	sub	sp, #24
 8018f74:	af02      	add	r7, sp, #8
 8018f76:	6078      	str	r0, [r7, #4]
	EventBits_t recEvent;
	recEvent = xEventGroupWaitBits(	xMasterOsEvent,
 8018f78:	4b26      	ldr	r3, [pc, #152]	; (8019014 <xMBMasterPortEventGet+0xa4>)
 8018f7a:	6818      	ldr	r0, [r3, #0]
 8018f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8018f80:	9300      	str	r3, [sp, #0]
 8018f82:	2300      	movs	r3, #0
 8018f84:	2201      	movs	r2, #1
 8018f86:	f44f 6181 	mov.w	r1, #1032	; 0x408
 8018f8a:	f7ed fcf7 	bl	800697c <xEventGroupWaitBits>
 8018f8e:	60f8      	str	r0, [r7, #12]
 8018f90:	68fb      	ldr	r3, [r7, #12]
 8018f92:	3b01      	subs	r3, #1
 8018f94:	2b0f      	cmp	r3, #15
 8018f96:	d837      	bhi.n	8019008 <xMBMasterPortEventGet+0x98>
 8018f98:	a201      	add	r2, pc, #4	; (adr r2, 8018fa0 <xMBMasterPortEventGet+0x30>)
 8018f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018f9e:	bf00      	nop
 8018fa0:	08018fe1 	.word	0x08018fe1
 8018fa4:	08018fe9 	.word	0x08018fe9
 8018fa8:	08019009 	.word	0x08019009
 8018fac:	08018ff1 	.word	0x08018ff1
 8018fb0:	08019009 	.word	0x08019009
 8018fb4:	08019009 	.word	0x08019009
 8018fb8:	08019009 	.word	0x08019009
 8018fbc:	08018ff9 	.word	0x08018ff9
 8018fc0:	08019009 	.word	0x08019009
 8018fc4:	08019009 	.word	0x08019009
 8018fc8:	08019009 	.word	0x08019009
 8018fcc:	08019009 	.word	0x08019009
 8018fd0:	08019009 	.word	0x08019009
 8018fd4:	08019009 	.word	0x08019009
 8018fd8:	08019009 	.word	0x08019009
 8018fdc:	08019001 	.word	0x08019001

    /* the enum type couldn't convert to int type */
    switch (recEvent)
    {
    case EV_MASTER_READY:
        *eEvent = EV_MASTER_READY;
 8018fe0:	687b      	ldr	r3, [r7, #4]
 8018fe2:	2201      	movs	r2, #1
 8018fe4:	801a      	strh	r2, [r3, #0]
        break;
 8018fe6:	e00f      	b.n	8019008 <xMBMasterPortEventGet+0x98>
    case EV_MASTER_FRAME_RECEIVED:
        *eEvent = EV_MASTER_FRAME_RECEIVED;
 8018fe8:	687b      	ldr	r3, [r7, #4]
 8018fea:	2202      	movs	r2, #2
 8018fec:	801a      	strh	r2, [r3, #0]
        break;
 8018fee:	e00b      	b.n	8019008 <xMBMasterPortEventGet+0x98>
    case EV_MASTER_EXECUTE:
        *eEvent = EV_MASTER_EXECUTE;
 8018ff0:	687b      	ldr	r3, [r7, #4]
 8018ff2:	2204      	movs	r2, #4
 8018ff4:	801a      	strh	r2, [r3, #0]
        break;
 8018ff6:	e007      	b.n	8019008 <xMBMasterPortEventGet+0x98>
    case EV_MASTER_FRAME_SENT:
        *eEvent = EV_MASTER_FRAME_SENT;
 8018ff8:	687b      	ldr	r3, [r7, #4]
 8018ffa:	2208      	movs	r2, #8
 8018ffc:	801a      	strh	r2, [r3, #0]
        break;
 8018ffe:	e003      	b.n	8019008 <xMBMasterPortEventGet+0x98>
    case EV_MASTER_ERROR_PROCESS:
        *eEvent = EV_MASTER_ERROR_PROCESS;
 8019000:	687b      	ldr	r3, [r7, #4]
 8019002:	2210      	movs	r2, #16
 8019004:	801a      	strh	r2, [r3, #0]
        break;
 8019006:	bf00      	nop
    }
    return TRUE;
 8019008:	2301      	movs	r3, #1
}
 801900a:	4618      	mov	r0, r3
 801900c:	3710      	adds	r7, #16
 801900e:	46bd      	mov	sp, r7
 8019010:	bd80      	pop	{r7, pc}
 8019012:	bf00      	nop
 8019014:	20004d54 	.word	0x20004d54

08019018 <vMBMasterOsResInit>:
 * This function is initialize the OS resource for modbus master.
 * Note:The resource is define by OS.If you not use OS this function can be empty.
 *
 */
void vMBMasterOsResInit( void )
{
 8019018:	b580      	push	{r7, lr}
 801901a:	af00      	add	r7, sp, #0
	xMasterRunRes  = xSemaphoreCreateBinary();
 801901c:	2203      	movs	r2, #3
 801901e:	2100      	movs	r1, #0
 8019020:	2001      	movs	r0, #1
 8019022:	f7ed fff3 	bl	800700c <xQueueGenericCreate>
 8019026:	4603      	mov	r3, r0
 8019028:	4a07      	ldr	r2, [pc, #28]	; (8019048 <vMBMasterOsResInit+0x30>)
 801902a:	6013      	str	r3, [r2, #0]

	if(xMasterRunRes == NULL) while (1);
 801902c:	4b06      	ldr	r3, [pc, #24]	; (8019048 <vMBMasterOsResInit+0x30>)
 801902e:	681b      	ldr	r3, [r3, #0]
 8019030:	2b00      	cmp	r3, #0
 8019032:	d100      	bne.n	8019036 <vMBMasterOsResInit+0x1e>
 8019034:	e7fe      	b.n	8019034 <vMBMasterOsResInit+0x1c>

	//first realse semaphore
	xSemaphoreGive(xMasterRunRes);
 8019036:	4b04      	ldr	r3, [pc, #16]	; (8019048 <vMBMasterOsResInit+0x30>)
 8019038:	6818      	ldr	r0, [r3, #0]
 801903a:	2300      	movs	r3, #0
 801903c:	2200      	movs	r2, #0
 801903e:	2100      	movs	r1, #0
 8019040:	f7ee f976 	bl	8007330 <xQueueGenericSend>
	return;
 8019044:	bf00      	nop
}
 8019046:	bd80      	pop	{r7, pc}
 8019048:	20004d58 	.word	0x20004d58

0801904c <xMBMasterRunResTake>:
 * @param lTimeOut the waiting time.
 *
 * @return resource taked result
 */
BOOL xMBMasterRunResTake( LONG lTimeOut )
{
 801904c:	b580      	push	{r7, lr}
 801904e:	b082      	sub	sp, #8
 8019050:	af00      	add	r7, sp, #0
 8019052:	6078      	str	r0, [r7, #4]
	return (xSemaphoreTake(xMasterRunRes, lTimeOut) ? TRUE : FALSE);
 8019054:	4b08      	ldr	r3, [pc, #32]	; (8019078 <xMBMasterRunResTake+0x2c>)
 8019056:	681b      	ldr	r3, [r3, #0]
 8019058:	687a      	ldr	r2, [r7, #4]
 801905a:	4611      	mov	r1, r2
 801905c:	4618      	mov	r0, r3
 801905e:	f7ee fc89 	bl	8007974 <xQueueSemaphoreTake>
 8019062:	4603      	mov	r3, r0
 8019064:	2b00      	cmp	r3, #0
 8019066:	bf14      	ite	ne
 8019068:	2301      	movne	r3, #1
 801906a:	2300      	moveq	r3, #0
 801906c:	b2db      	uxtb	r3, r3

}
 801906e:	4618      	mov	r0, r3
 8019070:	3708      	adds	r7, #8
 8019072:	46bd      	mov	sp, r7
 8019074:	bd80      	pop	{r7, pc}
 8019076:	bf00      	nop
 8019078:	20004d58 	.word	0x20004d58

0801907c <vMBMasterRunResRelease>:
 * This function is release Mobus Master running resource.
 * Note:The resource is define by Operating System.If you not use OS this function can be empty.
 *
 */
void vMBMasterRunResRelease( void )
{
 801907c:	b580      	push	{r7, lr}
 801907e:	af00      	add	r7, sp, #0
    /* release resource */
	xSemaphoreGive(xMasterRunRes);
 8019080:	4b04      	ldr	r3, [pc, #16]	; (8019094 <vMBMasterRunResRelease+0x18>)
 8019082:	6818      	ldr	r0, [r3, #0]
 8019084:	2300      	movs	r3, #0
 8019086:	2200      	movs	r2, #0
 8019088:	2100      	movs	r1, #0
 801908a:	f7ee f951 	bl	8007330 <xQueueGenericSend>
}
 801908e:	bf00      	nop
 8019090:	bd80      	pop	{r7, pc}
 8019092:	bf00      	nop
 8019094:	20004d58 	.word	0x20004d58

08019098 <eMBMasterWaitRequestFinish>:
 * @note If you are use OS, you can use OS's event mechanism. Otherwise you have to run
 * much user custom delay for waiting.
 *
 * @return request error code
 */
eMBMasterReqErrCode eMBMasterWaitRequestFinish( void ) {
 8019098:	b580      	push	{r7, lr}
 801909a:	b084      	sub	sp, #16
 801909c:	af02      	add	r7, sp, #8
    eMBMasterReqErrCode    eErrStatus = MB_MRE_NO_ERR;
 801909e:	2300      	movs	r3, #0
 80190a0:	71fb      	strb	r3, [r7, #7]
    EventBits_t recvedEvent;

    recvedEvent = xEventGroupWaitBits(	xMasterOsEvent,
 80190a2:	4b22      	ldr	r3, [pc, #136]	; (801912c <eMBMasterWaitRequestFinish+0x94>)
 80190a4:	6818      	ldr	r0, [r3, #0]
 80190a6:	f04f 33ff 	mov.w	r3, #4294967295
 80190aa:	9300      	str	r3, [sp, #0]
 80190ac:	2300      	movs	r3, #0
 80190ae:	2201      	movs	r2, #1
 80190b0:	f44f 613e 	mov.w	r1, #3040	; 0xbe0
 80190b4:	f7ed fc62 	bl	800697c <xEventGroupWaitBits>
 80190b8:	6038      	str	r0, [r7, #0]
												EV_MASTER_ERROR_EXECUTE_FUNCTION),
									pdTRUE, //clear on exit
									pdFALSE,//wait for any bits
									portMAX_DELAY);

    switch (recvedEvent)
 80190ba:	683b      	ldr	r3, [r7, #0]
 80190bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80190c0:	d02b      	beq.n	801911a <eMBMasterWaitRequestFinish+0x82>
 80190c2:	683b      	ldr	r3, [r7, #0]
 80190c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80190c8:	d82b      	bhi.n	8019122 <eMBMasterWaitRequestFinish+0x8a>
 80190ca:	683b      	ldr	r3, [r7, #0]
 80190cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80190d0:	d020      	beq.n	8019114 <eMBMasterWaitRequestFinish+0x7c>
 80190d2:	683b      	ldr	r3, [r7, #0]
 80190d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80190d8:	d823      	bhi.n	8019122 <eMBMasterWaitRequestFinish+0x8a>
 80190da:	683b      	ldr	r3, [r7, #0]
 80190dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80190e0:	d015      	beq.n	801910e <eMBMasterWaitRequestFinish+0x76>
 80190e2:	683b      	ldr	r3, [r7, #0]
 80190e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80190e8:	d81b      	bhi.n	8019122 <eMBMasterWaitRequestFinish+0x8a>
 80190ea:	683b      	ldr	r3, [r7, #0]
 80190ec:	2b80      	cmp	r3, #128	; 0x80
 80190ee:	d00b      	beq.n	8019108 <eMBMasterWaitRequestFinish+0x70>
 80190f0:	683b      	ldr	r3, [r7, #0]
 80190f2:	2b80      	cmp	r3, #128	; 0x80
 80190f4:	d815      	bhi.n	8019122 <eMBMasterWaitRequestFinish+0x8a>
 80190f6:	683b      	ldr	r3, [r7, #0]
 80190f8:	2b20      	cmp	r3, #32
 80190fa:	d011      	beq.n	8019120 <eMBMasterWaitRequestFinish+0x88>
 80190fc:	683b      	ldr	r3, [r7, #0]
 80190fe:	2b40      	cmp	r3, #64	; 0x40
 8019100:	d10f      	bne.n	8019122 <eMBMasterWaitRequestFinish+0x8a>
    {
			case EV_MASTER_PROCESS_SUCESS:
					break;
			case EV_MASTER_ERROR_RESPOND_TIMEOUT:
			{
					eErrStatus = MB_MRE_TIMEDOUT;
 8019102:	2306      	movs	r3, #6
 8019104:	71fb      	strb	r3, [r7, #7]
					break;
 8019106:	e00c      	b.n	8019122 <eMBMasterWaitRequestFinish+0x8a>
			}
			case EV_MASTER_ERROR_RECEIVE_DATA:
			{
					eErrStatus = MB_MRE_REV_DATA;
 8019108:	2305      	movs	r3, #5
 801910a:	71fb      	strb	r3, [r7, #7]
					break;
 801910c:	e009      	b.n	8019122 <eMBMasterWaitRequestFinish+0x8a>
			}
			case EV_MASTER_ERROR_EXECUTE_FUNCTION:
			{
					eErrStatus = MB_MRE_EXE_FUN;
 801910e:	2308      	movs	r3, #8
 8019110:	71fb      	strb	r3, [r7, #7]
					break;
 8019112:	e006      	b.n	8019122 <eMBMasterWaitRequestFinish+0x8a>
			}
#if MB_MASTER_TCP_ENABLED
			case EV_MASTER_ERROR_SEND_DATA:
			{
					eErrStatus = MB_MRE_SEND_DATA;
 8019114:	2303      	movs	r3, #3
 8019116:	71fb      	strb	r3, [r7, #7]
					break;
 8019118:	e003      	b.n	8019122 <eMBMasterWaitRequestFinish+0x8a>
			}
			case EV_MASTER_ERROR_CONNECTION:
			{
				eErrStatus = MB_MRE_CONNECTION;
 801911a:	2304      	movs	r3, #4
 801911c:	71fb      	strb	r3, [r7, #7]
				break;
 801911e:	e000      	b.n	8019122 <eMBMasterWaitRequestFinish+0x8a>
					break;
 8019120:	bf00      	nop
			}
#endif
    }
    return eErrStatus;
 8019122:	79fb      	ldrb	r3, [r7, #7]

}
 8019124:	4618      	mov	r0, r3
 8019126:	3708      	adds	r7, #8
 8019128:	46bd      	mov	sp, r7
 801912a:	bd80      	pop	{r7, pc}
 801912c:	20004d54 	.word	0x20004d54

08019130 <vMBPortSerialEnable>:
 
/* ----------------------- Start implementation -----------------------------*/

void
vMBPortSerialEnable( BOOL xRxEnable, BOOL xTxEnable )
{
 8019130:	b580      	push	{r7, lr}
 8019132:	b082      	sub	sp, #8
 8019134:	af00      	add	r7, sp, #0
 8019136:	4603      	mov	r3, r0
 8019138:	460a      	mov	r2, r1
 801913a:	71fb      	strb	r3, [r7, #7]
 801913c:	4613      	mov	r3, r2
 801913e:	71bb      	strb	r3, [r7, #6]
  /* If xRXEnable enable serial receive interrupts. If xTxENable enable
  * transmitter empty interrupts.
  */
  
  if (xRxEnable) {        
 8019140:	79fb      	ldrb	r3, [r7, #7]
 8019142:	2b00      	cmp	r3, #0
 8019144:	d00e      	beq.n	8019164 <vMBPortSerialEnable+0x34>
	  SET_BIT((&huartslave)->Instance->CR1, ( USART_CR1_RXNEIE) );
 8019146:	4b20      	ldr	r3, [pc, #128]	; (80191c8 <vMBPortSerialEnable+0x98>)
 8019148:	681b      	ldr	r3, [r3, #0]
 801914a:	681a      	ldr	r2, [r3, #0]
 801914c:	4b1e      	ldr	r3, [pc, #120]	; (80191c8 <vMBPortSerialEnable+0x98>)
 801914e:	681b      	ldr	r3, [r3, #0]
 8019150:	f042 0220 	orr.w	r2, r2, #32
 8019154:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(RE_GPIO_Port, RE_Pin, GPIO_PIN_RESET);// PC10 <=> RE..Receiver Output Enable (Low to enable)
 8019156:	2200      	movs	r2, #0
 8019158:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801915c:	481b      	ldr	r0, [pc, #108]	; (80191cc <vMBPortSerialEnable+0x9c>)
 801915e:	f7e9 fc4f 	bl	8002a00 <HAL_GPIO_WritePin>
 8019162:	e00d      	b.n	8019180 <vMBPortSerialEnable+0x50>
  } else {    
	 CLEAR_BIT((&huartslave)->Instance->CR1, ( USART_CR1_RXNEIE) );
 8019164:	4b18      	ldr	r3, [pc, #96]	; (80191c8 <vMBPortSerialEnable+0x98>)
 8019166:	681b      	ldr	r3, [r3, #0]
 8019168:	681a      	ldr	r2, [r3, #0]
 801916a:	4b17      	ldr	r3, [pc, #92]	; (80191c8 <vMBPortSerialEnable+0x98>)
 801916c:	681b      	ldr	r3, [r3, #0]
 801916e:	f022 0220 	bic.w	r2, r2, #32
 8019172:	601a      	str	r2, [r3, #0]
	 HAL_GPIO_WritePin(RE_GPIO_Port, RE_Pin, GPIO_PIN_SET);
 8019174:	2201      	movs	r2, #1
 8019176:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801917a:	4814      	ldr	r0, [pc, #80]	; (80191cc <vMBPortSerialEnable+0x9c>)
 801917c:	f7e9 fc40 	bl	8002a00 <HAL_GPIO_WritePin>
  }
  if (xTxEnable) {
 8019180:	79bb      	ldrb	r3, [r7, #6]
 8019182:	2b00      	cmp	r3, #0
 8019184:	d00e      	beq.n	80191a4 <vMBPortSerialEnable+0x74>
	  SET_BIT((&huartslave)->Instance->CR1, USART_CR1_TXEIE);
 8019186:	4b10      	ldr	r3, [pc, #64]	; (80191c8 <vMBPortSerialEnable+0x98>)
 8019188:	681b      	ldr	r3, [r3, #0]
 801918a:	681a      	ldr	r2, [r3, #0]
 801918c:	4b0e      	ldr	r3, [pc, #56]	; (80191c8 <vMBPortSerialEnable+0x98>)
 801918e:	681b      	ldr	r3, [r3, #0]
 8019190:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8019194:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(DE_GPIO_Port, DE_Pin, GPIO_PIN_SET);// PC11 <=> DE……….Driver Output Enable (high to enable)
 8019196:	2201      	movs	r2, #1
 8019198:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801919c:	480b      	ldr	r0, [pc, #44]	; (80191cc <vMBPortSerialEnable+0x9c>)
 801919e:	f7e9 fc2f 	bl	8002a00 <HAL_GPIO_WritePin>
  } else {
	  CLEAR_BIT((&huartslave)->Instance->CR1, USART_CR1_TXEIE);
	  HAL_GPIO_WritePin(DE_GPIO_Port, DE_Pin, GPIO_PIN_RESET);
  }  
  
}
 80191a2:	e00d      	b.n	80191c0 <vMBPortSerialEnable+0x90>
	  CLEAR_BIT((&huartslave)->Instance->CR1, USART_CR1_TXEIE);
 80191a4:	4b08      	ldr	r3, [pc, #32]	; (80191c8 <vMBPortSerialEnable+0x98>)
 80191a6:	681b      	ldr	r3, [r3, #0]
 80191a8:	681a      	ldr	r2, [r3, #0]
 80191aa:	4b07      	ldr	r3, [pc, #28]	; (80191c8 <vMBPortSerialEnable+0x98>)
 80191ac:	681b      	ldr	r3, [r3, #0]
 80191ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80191b2:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(DE_GPIO_Port, DE_Pin, GPIO_PIN_RESET);
 80191b4:	2200      	movs	r2, #0
 80191b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80191ba:	4804      	ldr	r0, [pc, #16]	; (80191cc <vMBPortSerialEnable+0x9c>)
 80191bc:	f7e9 fc20 	bl	8002a00 <HAL_GPIO_WritePin>
}
 80191c0:	bf00      	nop
 80191c2:	3708      	adds	r7, #8
 80191c4:	46bd      	mov	sp, r7
 80191c6:	bd80      	pop	{r7, pc}
 80191c8:	20004ea4 	.word	0x20004ea4
 80191cc:	40020400 	.word	0x40020400

080191d0 <xMBPortSerialInit>:
 
BOOL
xMBPortSerialInit( UCHAR ucPORT, ULONG ulBaudRate, UCHAR ucDataBits, eMBParity eParity )
{
 80191d0:	b480      	push	{r7}
 80191d2:	b083      	sub	sp, #12
 80191d4:	af00      	add	r7, sp, #0
 80191d6:	6039      	str	r1, [r7, #0]
 80191d8:	4611      	mov	r1, r2
 80191da:	461a      	mov	r2, r3
 80191dc:	4603      	mov	r3, r0
 80191de:	71fb      	strb	r3, [r7, #7]
 80191e0:	460b      	mov	r3, r1
 80191e2:	71bb      	strb	r3, [r7, #6]
 80191e4:	4613      	mov	r3, r2
 80191e6:	717b      	strb	r3, [r7, #5]

	/*
	 * Please note: when user uses EVEN or ODD parity the Data bit value chose
	 * in CubeMx initialize must be 9 bit
	 */
  return TRUE;
 80191e8:	2301      	movs	r3, #1
}
 80191ea:	4618      	mov	r0, r3
 80191ec:	370c      	adds	r7, #12
 80191ee:	46bd      	mov	sp, r7
 80191f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191f4:	4770      	bx	lr
	...

080191f8 <xMBPortSerialPutByte>:
 
BOOL
xMBPortSerialPutByte( CHAR ucByte )
{
 80191f8:	b480      	push	{r7}
 80191fa:	b083      	sub	sp, #12
 80191fc:	af00      	add	r7, sp, #0
 80191fe:	4603      	mov	r3, r0
 8019200:	71fb      	strb	r3, [r7, #7]
  /* Put a byte in the UARTs transmit buffer. This function is called
  * by the protocol stack if pxMBFrameCBTransmitterEmpty( ) has been
  * called. */
	huartslave.Instance->TDR = (uint8_t)(ucByte & 0xFFU);
 8019202:	4b05      	ldr	r3, [pc, #20]	; (8019218 <xMBPortSerialPutByte+0x20>)
 8019204:	681b      	ldr	r3, [r3, #0]
 8019206:	79fa      	ldrb	r2, [r7, #7]
 8019208:	629a      	str	r2, [r3, #40]	; 0x28
	return TRUE;
 801920a:	2301      	movs	r3, #1
}
 801920c:	4618      	mov	r0, r3
 801920e:	370c      	adds	r7, #12
 8019210:	46bd      	mov	sp, r7
 8019212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019216:	4770      	bx	lr
 8019218:	20004ea4 	.word	0x20004ea4

0801921c <xMBPortSerialGetByte>:
 
BOOL
xMBPortSerialGetByte( CHAR * pucByte )
{
 801921c:	b480      	push	{r7}
 801921e:	b083      	sub	sp, #12
 8019220:	af00      	add	r7, sp, #0
 8019222:	6078      	str	r0, [r7, #4]
  /* Return the byte in the UARTs receive buffer. This function is called
  * by the protocol stack after pxMBFrameCBByteReceived( ) has been called.
  */
  *pucByte = (uint8_t)(huartslave.Instance->RDR & (uint8_t)0x00FF);
 8019224:	4b06      	ldr	r3, [pc, #24]	; (8019240 <xMBPortSerialGetByte+0x24>)
 8019226:	681b      	ldr	r3, [r3, #0]
 8019228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801922a:	b2da      	uxtb	r2, r3
 801922c:	687b      	ldr	r3, [r7, #4]
 801922e:	701a      	strb	r2, [r3, #0]
  return TRUE;
 8019230:	2301      	movs	r3, #1
}
 8019232:	4618      	mov	r0, r3
 8019234:	370c      	adds	r7, #12
 8019236:	46bd      	mov	sp, r7
 8019238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801923c:	4770      	bx	lr
 801923e:	bf00      	nop
 8019240:	20004ea4 	.word	0x20004ea4

08019244 <USART3_IRQHandler>:
void USART3_IRQHandler(void)

#else
void USART2_IRQHandler(void)
#endif
{
 8019244:	b580      	push	{r7, lr}
 8019246:	b082      	sub	sp, #8
 8019248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	uint32_t isrflags   = READ_REG(huartslave.Instance->ISR);
 801924a:	4b1b      	ldr	r3, [pc, #108]	; (80192b8 <USART3_IRQHandler+0x74>)
 801924c:	681b      	ldr	r3, [r3, #0]
 801924e:	69db      	ldr	r3, [r3, #28]
 8019250:	607b      	str	r3, [r7, #4]
	uint32_t cr1its     = READ_REG(huartslave.Instance->CR1);
 8019252:	4b19      	ldr	r3, [pc, #100]	; (80192b8 <USART3_IRQHandler+0x74>)
 8019254:	681b      	ldr	r3, [r3, #0]
 8019256:	681b      	ldr	r3, [r3, #0]
 8019258:	603b      	str	r3, [r7, #0]

    if ( ((isrflags & USART_ISR_RXNE) != 0U)
 801925a:	687b      	ldr	r3, [r7, #4]
 801925c:	f003 0320 	and.w	r3, r3, #32
 8019260:	2b00      	cmp	r3, #0
 8019262:	d010      	beq.n	8019286 <USART3_IRQHandler+0x42>
         && ((cr1its & USART_CR1_RXNEIE) != 0U) )
 8019264:	683b      	ldr	r3, [r7, #0]
 8019266:	f003 0320 	and.w	r3, r3, #32
 801926a:	2b00      	cmp	r3, #0
 801926c:	d00b      	beq.n	8019286 <USART3_IRQHandler+0x42>
    {

		  pxMBFrameCBByteReceived();	  //xMBRTUReceiveFSM() in mbrtu.c
 801926e:	4b13      	ldr	r3, [pc, #76]	; (80192bc <USART3_IRQHandler+0x78>)
 8019270:	681b      	ldr	r3, [r3, #0]
 8019272:	4798      	blx	r3

		  SET_BIT((&huartslave)->Instance->RQR,  USART_RQR_RXFRQ );
 8019274:	4b10      	ldr	r3, [pc, #64]	; (80192b8 <USART3_IRQHandler+0x74>)
 8019276:	681b      	ldr	r3, [r3, #0]
 8019278:	699a      	ldr	r2, [r3, #24]
 801927a:	4b0f      	ldr	r3, [pc, #60]	; (80192b8 <USART3_IRQHandler+0x74>)
 801927c:	681b      	ldr	r3, [r3, #0]
 801927e:	f042 0208 	orr.w	r2, r2, #8
 8019282:	619a      	str	r2, [r3, #24]

		return;
 8019284:	e014      	b.n	80192b0 <USART3_IRQHandler+0x6c>
    }

  if((__HAL_UART_GET_FLAG(&huartslave, UART_FLAG_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(&huartslave, UART_IT_TXE) != RESET)) {
 8019286:	4b0c      	ldr	r3, [pc, #48]	; (80192b8 <USART3_IRQHandler+0x74>)
 8019288:	681b      	ldr	r3, [r3, #0]
 801928a:	69db      	ldr	r3, [r3, #28]
 801928c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019290:	2b80      	cmp	r3, #128	; 0x80
 8019292:	d10a      	bne.n	80192aa <USART3_IRQHandler+0x66>
 8019294:	4b08      	ldr	r3, [pc, #32]	; (80192b8 <USART3_IRQHandler+0x74>)
 8019296:	681b      	ldr	r3, [r3, #0]
 8019298:	681b      	ldr	r3, [r3, #0]
 801929a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801929e:	2b00      	cmp	r3, #0
 80192a0:	d003      	beq.n	80192aa <USART3_IRQHandler+0x66>

	  pxMBFrameCBTransmitterEmpty(); 	  //xMBRTUTransmitFSM() in mbrtu.c
 80192a2:	4b07      	ldr	r3, [pc, #28]	; (80192c0 <USART3_IRQHandler+0x7c>)
 80192a4:	681b      	ldr	r3, [r3, #0]
 80192a6:	4798      	blx	r3

    return ;
 80192a8:	e002      	b.n	80192b0 <USART3_IRQHandler+0x6c>
  }

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huartslave);
 80192aa:	4803      	ldr	r0, [pc, #12]	; (80192b8 <USART3_IRQHandler+0x74>)
 80192ac:	f7eb f926 	bl	80044fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80192b0:	3708      	adds	r7, #8
 80192b2:	46bd      	mov	sp, r7
 80192b4:	bd80      	pop	{r7, pc}
 80192b6:	bf00      	nop
 80192b8:	20004ea4 	.word	0x20004ea4
 80192bc:	2000db48 	.word	0x2000db48
 80192c0:	2000db40 	.word	0x2000db40

080192c4 <xMBMasterTCPPortInit>:
#define TIMEOUT_RESPONSE	1000U	//ms


/* ----------------------- function implementation -----------------------------*/
BOOL
xMBMasterTCPPortInit( USHORT usTCPPort ){
 80192c4:	b580      	push	{r7, lr}
 80192c6:	b088      	sub	sp, #32
 80192c8:	af02      	add	r7, sp, #8
 80192ca:	4603      	mov	r3, r0
 80192cc:	80fb      	strh	r3, [r7, #6]

	BOOL status = TRUE;
 80192ce:	2301      	movs	r3, #1
 80192d0:	75fb      	strb	r3, [r7, #23]
	BaseType_t sta;

	xMBMasterPortEventInit();
 80192d2:	f7ff fe27 	bl	8018f24 <xMBMasterPortEventInit>
	vMBMasterOsResInit();
 80192d6:	f7ff fe9f 	bl	8019018 <vMBMasterOsResInit>

	sta = xTaskCreate(	prvvMBMasterNetconnTask, "netconn MB Master" , NETCONN_MB_TASK_STACK, NULL,
 80192da:	4b10      	ldr	r3, [pc, #64]	; (801931c <xMBMasterTCPPortInit+0x58>)
 80192dc:	9301      	str	r3, [sp, #4]
 80192de:	2318      	movs	r3, #24
 80192e0:	9300      	str	r3, [sp, #0]
 80192e2:	2300      	movs	r3, #0
 80192e4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80192e8:	490d      	ldr	r1, [pc, #52]	; (8019320 <xMBMasterTCPPortInit+0x5c>)
 80192ea:	480e      	ldr	r0, [pc, #56]	; (8019324 <xMBMasterTCPPortInit+0x60>)
 80192ec:	f7ee ff55 	bl	800819a <xTaskCreate>
 80192f0:	6138      	str	r0, [r7, #16]
						NETCONN_MB_TASK_PRIO, &netconnMBMaster_handle	);
	configASSERT(sta == pdPASS);
 80192f2:	693b      	ldr	r3, [r7, #16]
 80192f4:	2b01      	cmp	r3, #1
 80192f6:	d00c      	beq.n	8019312 <xMBMasterTCPPortInit+0x4e>
	__asm volatile
 80192f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80192fc:	b672      	cpsid	i
 80192fe:	f383 8811 	msr	BASEPRI, r3
 8019302:	f3bf 8f6f 	isb	sy
 8019306:	f3bf 8f4f 	dsb	sy
 801930a:	b662      	cpsie	i
 801930c:	60fb      	str	r3, [r7, #12]
}
 801930e:	bf00      	nop
 8019310:	e7fe      	b.n	8019310 <xMBMasterTCPPortInit+0x4c>

  return status;
 8019312:	7dfb      	ldrb	r3, [r7, #23]
}
 8019314:	4618      	mov	r0, r3
 8019316:	3718      	adds	r7, #24
 8019318:	46bd      	mov	sp, r7
 801931a:	bd80      	pop	{r7, pc}
 801931c:	20004d64 	.word	0x20004d64
 8019320:	0801ef08 	.word	0x0801ef08
 8019324:	08019329 	.word	0x08019329

08019328 <prvvMBMasterNetconnTask>:

static void prvvMBMasterNetconnTask(void *p)
{
 8019328:	b590      	push	{r4, r7, lr}
 801932a:	b08b      	sub	sp, #44	; 0x2c
 801932c:	af00      	add	r7, sp, #0
 801932e:	6078      	str	r0, [r7, #4]
	  err_enum_t err;
	  struct netconn *conn[TCP_MAX_NUM_SERVER] = {NULL};
 8019330:	2300      	movs	r3, #0
 8019332:	61fb      	str	r3, [r7, #28]
	  struct netbuf *inbuf;
	  UCHAR *ucMBAPFrame;
	  USHORT usLength;
	  eMBMasterEventType  eEvent;
	  eMBErrorCode MB_err = MB_ENOERR;
 8019334:	2300      	movs	r3, #0
 8019336:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	  uint8_t count_timeout = 0;
 801933a:	2300      	movs	r3, #0
 801933c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	  ip_addr_t server_addr[TCP_MAX_NUM_SERVER]; //server address
	  UCHAR DestAddress,DestAddMinus;

	  SERVER_IP[0] = 192;
 8019340:	4bcc      	ldr	r3, [pc, #816]	; (8019674 <prvvMBMasterNetconnTask+0x34c>)
 8019342:	22c0      	movs	r2, #192	; 0xc0
 8019344:	701a      	strb	r2, [r3, #0]
	  SERVER_IP[1] = 168;
 8019346:	4bcb      	ldr	r3, [pc, #812]	; (8019674 <prvvMBMasterNetconnTask+0x34c>)
 8019348:	22a8      	movs	r2, #168	; 0xa8
 801934a:	705a      	strb	r2, [r3, #1]
	  SERVER_IP[2] = 0;
 801934c:	4bc9      	ldr	r3, [pc, #804]	; (8019674 <prvvMBMasterNetconnTask+0x34c>)
 801934e:	2200      	movs	r2, #0
 8019350:	709a      	strb	r2, [r3, #2]
	  SERVER_IP[3] = 2;
 8019352:	4bc8      	ldr	r3, [pc, #800]	; (8019674 <prvvMBMasterNetconnTask+0x34c>)
 8019354:	2202      	movs	r2, #2
 8019356:	70da      	strb	r2, [r3, #3]
      IP4_ADDR(&server_addr[0], SERVER_IP[0], SERVER_IP[1], SERVER_IP[2], SERVER_IP[3]); //server ip
 8019358:	4bc6      	ldr	r3, [pc, #792]	; (8019674 <prvvMBMasterNetconnTask+0x34c>)
 801935a:	781b      	ldrb	r3, [r3, #0]
 801935c:	061a      	lsls	r2, r3, #24
 801935e:	4bc5      	ldr	r3, [pc, #788]	; (8019674 <prvvMBMasterNetconnTask+0x34c>)
 8019360:	785b      	ldrb	r3, [r3, #1]
 8019362:	041b      	lsls	r3, r3, #16
 8019364:	431a      	orrs	r2, r3
 8019366:	4bc3      	ldr	r3, [pc, #780]	; (8019674 <prvvMBMasterNetconnTask+0x34c>)
 8019368:	789b      	ldrb	r3, [r3, #2]
 801936a:	021b      	lsls	r3, r3, #8
 801936c:	4313      	orrs	r3, r2
 801936e:	4ac1      	ldr	r2, [pc, #772]	; (8019674 <prvvMBMasterNetconnTask+0x34c>)
 8019370:	78d2      	ldrb	r2, [r2, #3]
 8019372:	4313      	orrs	r3, r2
 8019374:	061a      	lsls	r2, r3, #24
 8019376:	4bbf      	ldr	r3, [pc, #764]	; (8019674 <prvvMBMasterNetconnTask+0x34c>)
 8019378:	781b      	ldrb	r3, [r3, #0]
 801937a:	0619      	lsls	r1, r3, #24
 801937c:	4bbd      	ldr	r3, [pc, #756]	; (8019674 <prvvMBMasterNetconnTask+0x34c>)
 801937e:	785b      	ldrb	r3, [r3, #1]
 8019380:	041b      	lsls	r3, r3, #16
 8019382:	4319      	orrs	r1, r3
 8019384:	4bbb      	ldr	r3, [pc, #748]	; (8019674 <prvvMBMasterNetconnTask+0x34c>)
 8019386:	789b      	ldrb	r3, [r3, #2]
 8019388:	021b      	lsls	r3, r3, #8
 801938a:	430b      	orrs	r3, r1
 801938c:	49b9      	ldr	r1, [pc, #740]	; (8019674 <prvvMBMasterNetconnTask+0x34c>)
 801938e:	78c9      	ldrb	r1, [r1, #3]
 8019390:	430b      	orrs	r3, r1
 8019392:	021b      	lsls	r3, r3, #8
 8019394:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8019398:	431a      	orrs	r2, r3
 801939a:	4bb6      	ldr	r3, [pc, #728]	; (8019674 <prvvMBMasterNetconnTask+0x34c>)
 801939c:	781b      	ldrb	r3, [r3, #0]
 801939e:	0619      	lsls	r1, r3, #24
 80193a0:	4bb4      	ldr	r3, [pc, #720]	; (8019674 <prvvMBMasterNetconnTask+0x34c>)
 80193a2:	785b      	ldrb	r3, [r3, #1]
 80193a4:	041b      	lsls	r3, r3, #16
 80193a6:	4319      	orrs	r1, r3
 80193a8:	4bb2      	ldr	r3, [pc, #712]	; (8019674 <prvvMBMasterNetconnTask+0x34c>)
 80193aa:	789b      	ldrb	r3, [r3, #2]
 80193ac:	021b      	lsls	r3, r3, #8
 80193ae:	430b      	orrs	r3, r1
 80193b0:	49b0      	ldr	r1, [pc, #704]	; (8019674 <prvvMBMasterNetconnTask+0x34c>)
 80193b2:	78c9      	ldrb	r1, [r1, #3]
 80193b4:	430b      	orrs	r3, r1
 80193b6:	0a1b      	lsrs	r3, r3, #8
 80193b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80193bc:	431a      	orrs	r2, r3
 80193be:	4bad      	ldr	r3, [pc, #692]	; (8019674 <prvvMBMasterNetconnTask+0x34c>)
 80193c0:	781b      	ldrb	r3, [r3, #0]
 80193c2:	0619      	lsls	r1, r3, #24
 80193c4:	4bab      	ldr	r3, [pc, #684]	; (8019674 <prvvMBMasterNetconnTask+0x34c>)
 80193c6:	785b      	ldrb	r3, [r3, #1]
 80193c8:	041b      	lsls	r3, r3, #16
 80193ca:	4319      	orrs	r1, r3
 80193cc:	4ba9      	ldr	r3, [pc, #676]	; (8019674 <prvvMBMasterNetconnTask+0x34c>)
 80193ce:	789b      	ldrb	r3, [r3, #2]
 80193d0:	021b      	lsls	r3, r3, #8
 80193d2:	430b      	orrs	r3, r1
 80193d4:	49a7      	ldr	r1, [pc, #668]	; (8019674 <prvvMBMasterNetconnTask+0x34c>)
 80193d6:	78c9      	ldrb	r1, [r1, #3]
 80193d8:	430b      	orrs	r3, r1
 80193da:	0e1b      	lsrs	r3, r3, #24
 80193dc:	4313      	orrs	r3, r2
 80193de:	60fb      	str	r3, [r7, #12]

	  while(1)
	  {
		  if(xMBMasterPortEventGet(&eEvent) == TRUE)
 80193e0:	f107 0310 	add.w	r3, r7, #16
 80193e4:	4618      	mov	r0, r3
 80193e6:	f7ff fdc3 	bl	8018f70 <xMBMasterPortEventGet>
 80193ea:	4603      	mov	r3, r0
 80193ec:	2b01      	cmp	r3, #1
 80193ee:	d1f7      	bne.n	80193e0 <prvvMBMasterNetconnTask+0xb8>
		  {
			  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80193f0:	2101      	movs	r1, #1
 80193f2:	48a1      	ldr	r0, [pc, #644]	; (8019678 <prvvMBMasterNetconnTask+0x350>)
 80193f4:	f7e9 fb1d 	bl	8002a32 <HAL_GPIO_TogglePin>
			  //get destination address
			  DestAddress  = ucMBMasterGetDestAddress();
 80193f8:	f001 f9b2 	bl	801a760 <ucMBMasterGetDestAddress>
 80193fc:	4603      	mov	r3, r0
 80193fe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			  DestAddMinus = DestAddress - 1;
 8019402:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019406:	3b01      	subs	r3, #1
 8019408:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

			  if(eEvent == EV_MASTER_FRAME_SENT)
 801940c:	8a3b      	ldrh	r3, [r7, #16]
 801940e:	2b08      	cmp	r3, #8
 8019410:	f040 8115 	bne.w	801963e <prvvMBMasterNetconnTask+0x316>
			  {
				  if(conn[DestAddMinus] == NULL)
 8019414:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019418:	009b      	lsls	r3, r3, #2
 801941a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801941e:	4413      	add	r3, r2
 8019420:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 8019424:	2b00      	cmp	r3, #0
 8019426:	d140      	bne.n	80194aa <prvvMBMasterNetconnTask+0x182>
				  {
					  conn[DestAddMinus] = netconn_new(NETCONN_TCP); //new tcp netconn
 8019428:	f897 4023 	ldrb.w	r4, [r7, #35]	; 0x23
 801942c:	2200      	movs	r2, #0
 801942e:	2100      	movs	r1, #0
 8019430:	2010      	movs	r0, #16
 8019432:	f7f0 ff31 	bl	800a298 <netconn_new_with_proto_and_callback>
 8019436:	4602      	mov	r2, r0
 8019438:	00a3      	lsls	r3, r4, #2
 801943a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 801943e:	440b      	add	r3, r1
 8019440:	f843 2c0c 	str.w	r2, [r3, #-12]
					  if (conn[DestAddMinus] != NULL)
 8019444:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019448:	009b      	lsls	r3, r3, #2
 801944a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801944e:	4413      	add	r3, r2
 8019450:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 8019454:	2b00      	cmp	r3, #0
 8019456:	d028      	beq.n	80194aa <prvvMBMasterNetconnTask+0x182>
					  {
					      err = netconn_connect(  conn[DestAddMinus],
 8019458:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801945c:	009b      	lsls	r3, r3, #2
 801945e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8019462:	4413      	add	r3, r2
 8019464:	f853 0c0c 	ldr.w	r0, [r3, #-12]
					    		  	  	  	  	  &server_addr[DestAddMinus],
 8019468:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801946c:	f107 020c 	add.w	r2, r7, #12
 8019470:	009b      	lsls	r3, r3, #2
 8019472:	4413      	add	r3, r2
					      err = netconn_connect(  conn[DestAddMinus],
 8019474:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 8019478:	4619      	mov	r1, r3
 801947a:	f7f0 ffc7 	bl	800a40c <netconn_connect>
 801947e:	4603      	mov	r3, r0
 8019480:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
												  SERVER_PORT ); //connect to the server

					      if (err != ERR_OK)
 8019484:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8019488:	2b00      	cmp	r3, #0
 801948a:	d00e      	beq.n	80194aa <prvvMBMasterNetconnTask+0x182>
					      {
					    	  prvvMBMasterTCPCloseConn(conn, DestAddMinus);
 801948c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8019490:	f107 031c 	add.w	r3, r7, #28
 8019494:	4611      	mov	r1, r2
 8019496:	4618      	mov	r0, r3
 8019498:	f000 f8f4 	bl	8019684 <prvvMBMasterTCPCloseConn>

					    	  xMBMasterPortEventPost(EV_MASTER_ERROR_CONNECTION);
 801949c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80194a0:	f7ff fd52 	bl	8018f48 <xMBMasterPortEventPost>

					    	  vMBMasterRunResRelease();
 80194a4:	f7ff fdea 	bl	801907c <vMBMasterRunResRelease>
					          continue;
 80194a8:	e0e2      	b.n	8019670 <prvvMBMasterNetconnTask+0x348>
				   * 		-if SendRequest error => close and reconnect the current connection
				   * 			and notify to User_App 'EV_MASTER_ERROR_SEND_DATA'
				   * 		-if SendRequest ok then Receive timeout cause by some reason
				   * 			-> send Request again (until count = 2)
				   */
				  vMBMasterGetMBAPSndBuf(&ucMBAPFrame, &usLength);
 80194aa:	f107 0212 	add.w	r2, r7, #18
 80194ae:	f107 0314 	add.w	r3, r7, #20
 80194b2:	4611      	mov	r1, r2
 80194b4:	4618      	mov	r0, r3
 80194b6:	f001 f833 	bl	801a520 <vMBMasterGetMBAPSndBuf>

				  while(count_timeout < 2)
 80194ba:	e049      	b.n	8019550 <prvvMBMasterNetconnTask+0x228>
				  {
						MB_err = prvxMBMasterTCPSendMBAP( conn[DestAddMinus], ucMBAPFrame, usLength);
 80194bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80194c0:	009b      	lsls	r3, r3, #2
 80194c2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80194c6:	4413      	add	r3, r2
 80194c8:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 80194cc:	6979      	ldr	r1, [r7, #20]
 80194ce:	8a7a      	ldrh	r2, [r7, #18]
 80194d0:	4618      	mov	r0, r3
 80194d2:	f000 f8f7 	bl	80196c4 <prvxMBMasterTCPSendMBAP>
 80194d6:	4603      	mov	r3, r0
 80194d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
						if( MB_err != MB_ENOERR)
 80194dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80194e0:	2b00      	cmp	r3, #0
 80194e2:	d13a      	bne.n	801955a <prvvMBMasterNetconnTask+0x232>
						{
							break;
						}

						netconn_set_recvtimeout(conn[DestAddMinus], TIMEOUT_RESPONSE);
 80194e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80194e8:	009b      	lsls	r3, r3, #2
 80194ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80194ee:	4413      	add	r3, r2
 80194f0:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 80194f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80194f8:	61da      	str	r2, [r3, #28]
						err = netconn_recv(conn[DestAddMinus], &inbuf);
 80194fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80194fe:	009b      	lsls	r3, r3, #2
 8019500:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8019504:	4413      	add	r3, r2
 8019506:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 801950a:	f107 0218 	add.w	r2, r7, #24
 801950e:	4611      	mov	r1, r2
 8019510:	4618      	mov	r0, r3
 8019512:	f7f1 f941 	bl	800a798 <netconn_recv>
 8019516:	4603      	mov	r3, r0
 8019518:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						if(err == ERR_TIMEOUT)
 801951c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8019520:	f113 0f03 	cmn.w	r3, #3
 8019524:	d105      	bne.n	8019532 <prvvMBMasterNetconnTask+0x20a>
						{

							count_timeout++;
 8019526:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801952a:	3301      	adds	r3, #1
 801952c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8019530:	e00e      	b.n	8019550 <prvvMBMasterNetconnTask+0x228>
						}
						else
						{
							err = netconn_err(conn[DestAddMinus]);
 8019532:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019536:	009b      	lsls	r3, r3, #2
 8019538:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801953c:	4413      	add	r3, r2
 801953e:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 8019542:	4618      	mov	r0, r3
 8019544:	f7f1 fab1 	bl	800aaaa <netconn_err>
 8019548:	4603      	mov	r3, r0
 801954a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							break;
 801954e:	e005      	b.n	801955c <prvvMBMasterNetconnTask+0x234>
				  while(count_timeout < 2)
 8019550:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8019554:	2b01      	cmp	r3, #1
 8019556:	d9b1      	bls.n	80194bc <prvvMBMasterNetconnTask+0x194>
 8019558:	e000      	b.n	801955c <prvvMBMasterNetconnTask+0x234>
							break;
 801955a:	bf00      	nop

						}
				  }	/*while(count_timeout < 2)*/

				  if(MB_err == MB_ESENDDATA)
 801955c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019560:	2b08      	cmp	r3, #8
 8019562:	d10e      	bne.n	8019582 <prvvMBMasterNetconnTask+0x25a>
				  {
					  //should I close the netconn
					  prvvMBMasterTCPCloseConn(conn, DestAddMinus);
 8019564:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8019568:	f107 031c 	add.w	r3, r7, #28
 801956c:	4611      	mov	r1, r2
 801956e:	4618      	mov	r0, r3
 8019570:	f000 f888 	bl	8019684 <prvvMBMasterTCPCloseConn>
					  vMBMasterRunResRelease();
 8019574:	f7ff fd82 	bl	801907c <vMBMasterRunResRelease>
					  xMBMasterPortEventPost(EV_MASTER_ERROR_SEND_DATA);
 8019578:	f44f 7000 	mov.w	r0, #512	; 0x200
 801957c:	f7ff fce4 	bl	8018f48 <xMBMasterPortEventPost>
					  continue;	//while(1)
 8019580:	e076      	b.n	8019670 <prvvMBMasterNetconnTask+0x348>
				  }

				  if(err != ERR_TIMEOUT )
 8019582:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8019586:	f113 0f03 	cmn.w	r3, #3
 801958a:	d012      	beq.n	80195b2 <prvvMBMasterNetconnTask+0x28a>
				  {
					  if(err != ERR_OK)	//it may be {ERR_ABRT, ERR_RST,   ERR_CLSD, ERR_CONN...}
 801958c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8019590:	2b00      	cmp	r3, #0
 8019592:	d00e      	beq.n	80195b2 <prvvMBMasterNetconnTask+0x28a>
					  {
						  prvvMBMasterTCPCloseConn(conn, DestAddMinus);
 8019594:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8019598:	f107 031c 	add.w	r3, r7, #28
 801959c:	4611      	mov	r1, r2
 801959e:	4618      	mov	r0, r3
 80195a0:	f000 f870 	bl	8019684 <prvvMBMasterTCPCloseConn>
						  vMBMasterRunResRelease();
 80195a4:	f7ff fd6a 	bl	801907c <vMBMasterRunResRelease>
						  xMBMasterPortEventPost(EV_MASTER_ERROR_CONNECTION);
 80195a8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80195ac:	f7ff fccc 	bl	8018f48 <xMBMasterPortEventPost>
						  continue;	//while(1)
 80195b0:	e05e      	b.n	8019670 <prvvMBMasterNetconnTask+0x348>
					  }

				  }

				  if(count_timeout >= 2)
 80195b2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80195b6:	2b01      	cmp	r3, #1
 80195b8:	d90d      	bls.n	80195d6 <prvvMBMasterNetconnTask+0x2ae>
				  {
					vMBMasterRunResRelease();
 80195ba:	f7ff fd5f 	bl	801907c <vMBMasterRunResRelease>
					prvvMBMasterTCPCloseConn(conn, DestAddress);
 80195be:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80195c2:	f107 031c 	add.w	r3, r7, #28
 80195c6:	4611      	mov	r1, r2
 80195c8:	4618      	mov	r0, r3
 80195ca:	f000 f85b 	bl	8019684 <prvvMBMasterTCPCloseConn>
				  	xMBMasterPortEventPost(EV_MASTER_ERROR_RESPOND_TIMEOUT);
 80195ce:	2040      	movs	r0, #64	; 0x40
 80195d0:	f7ff fcba 	bl	8018f48 <xMBMasterPortEventPost>
				  	continue; //while(1)
 80195d4:	e04c      	b.n	8019670 <prvvMBMasterNetconnTask+0x348>
				  }
				  count_timeout = 0;
 80195d6:	2300      	movs	r3, #0
 80195d8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

				  //vMBMasterGetMBAPRcvBuf(&ucMBAPFrame, &usLength);
				  netbuf_data(inbuf, (void**)&ucMBAPFrame, &usLength);
 80195dc:	69bb      	ldr	r3, [r7, #24]
 80195de:	f107 0212 	add.w	r2, r7, #18
 80195e2:	f107 0114 	add.w	r1, r7, #20
 80195e6:	4618      	mov	r0, r3
 80195e8:	f7f2 fe4a 	bl	800c280 <netbuf_data>
				  netbuf_delete(inbuf); // delete the buffer always
 80195ec:	69bb      	ldr	r3, [r7, #24]
 80195ee:	4618      	mov	r0, r3
 80195f0:	f7f2 fe26 	bl	800c240 <netbuf_delete>

				  debug_ResponFrame++;
 80195f4:	4b21      	ldr	r3, [pc, #132]	; (801967c <prvvMBMasterNetconnTask+0x354>)
 80195f6:	681b      	ldr	r3, [r3, #0]
 80195f8:	3301      	adds	r3, #1
 80195fa:	4a20      	ldr	r2, [pc, #128]	; (801967c <prvvMBMasterNetconnTask+0x354>)
 80195fc:	6013      	str	r3, [r2, #0]
				  MB_err = eMBMasterCheckMBAPRcvBuf(ucMBAPFrame,  usLength);
 80195fe:	697b      	ldr	r3, [r7, #20]
 8019600:	8a7a      	ldrh	r2, [r7, #18]
 8019602:	4611      	mov	r1, r2
 8019604:	4618      	mov	r0, r3
 8019606:	f000 ffcf 	bl	801a5a8 <eMBMasterCheckMBAPRcvBuf>
 801960a:	4603      	mov	r3, r0
 801960c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				  /*
				   * handle exception
				   * These handles do not Close and Delete the current connection
				   */

				  if(MB_err != MB_ENOERR)	//error IO
 8019610:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019614:	2b00      	cmp	r3, #0
 8019616:	d003      	beq.n	8019620 <prvvMBMasterNetconnTask+0x2f8>
				  {
				  	xMBMasterPortEventPost(EV_MASTER_ERROR_RECEIVE_DATA);
 8019618:	2080      	movs	r0, #128	; 0x80
 801961a:	f7ff fc95 	bl	8018f48 <xMBMasterPortEventPost>
 801961e:	e00b      	b.n	8019638 <prvvMBMasterNetconnTask+0x310>
				  }
				  else
				  {
					if(eExtTCPMaster != MB_EX_NONE)
 8019620:	4b17      	ldr	r3, [pc, #92]	; (8019680 <prvvMBMasterNetconnTask+0x358>)
 8019622:	781b      	ldrb	r3, [r3, #0]
 8019624:	2b00      	cmp	r3, #0
 8019626:	d004      	beq.n	8019632 <prvvMBMasterNetconnTask+0x30a>
					{
						xMBMasterPortEventPost(EV_MASTER_ERROR_EXECUTE_FUNCTION);
 8019628:	f44f 7080 	mov.w	r0, #256	; 0x100
 801962c:	f7ff fc8c 	bl	8018f48 <xMBMasterPortEventPost>
 8019630:	e002      	b.n	8019638 <prvvMBMasterNetconnTask+0x310>
					}
					else
					{
						xMBMasterPortEventPost(EV_MASTER_PROCESS_SUCESS);
 8019632:	2020      	movs	r0, #32
 8019634:	f7ff fc88 	bl	8018f48 <xMBMasterPortEventPost>
					}

				  }
				  vMBMasterRunResRelease();	//semaphore should be alternated by Mutex
 8019638:	f7ff fd20 	bl	801907c <vMBMasterRunResRelease>
 801963c:	e6d0      	b.n	80193e0 <prvvMBMasterNetconnTask+0xb8>

			  }
			  else if(eEvent == EV_MASTER_CLOSE_CONNECTION) //todo : add event wait
 801963e:	8a3b      	ldrh	r3, [r7, #16]
 8019640:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8019644:	f47f aecc 	bne.w	80193e0 <prvvMBMasterNetconnTask+0xb8>
			  {
				  /*there is an API that called by application user task, that post EV_MASTER_CLOSE_CONNECTION
				  	  to this task 'prvvMBMasterNetconnTask'
				  */
				  if(conn[DestAddMinus] != NULL)
 8019648:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801964c:	009b      	lsls	r3, r3, #2
 801964e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8019652:	4413      	add	r3, r2
 8019654:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 8019658:	2b00      	cmp	r3, #0
 801965a:	d007      	beq.n	801966c <prvvMBMasterNetconnTask+0x344>
					  prvvMBMasterTCPCloseConn(conn, DestAddMinus);
 801965c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8019660:	f107 031c 	add.w	r3, r7, #28
 8019664:	4611      	mov	r1, r2
 8019666:	4618      	mov	r0, r3
 8019668:	f000 f80c 	bl	8019684 <prvvMBMasterTCPCloseConn>

				  vMBMasterRunResRelease();
 801966c:	f7ff fd06 	bl	801907c <vMBMasterRunResRelease>
		  if(xMBMasterPortEventGet(&eEvent) == TRUE)
 8019670:	e6b6      	b.n	80193e0 <prvvMBMasterNetconnTask+0xb8>
 8019672:	bf00      	nop
 8019674:	2000db6c 	.word	0x2000db6c
 8019678:	40020400 	.word	0x40020400
 801967c:	20004d5c 	.word	0x20004d5c
 8019680:	20004e95 	.word	0x20004e95

08019684 <prvvMBMasterTCPCloseConn>:

	}//while(1)

}

static void prvvMBMasterTCPCloseConn(struct netconn ** netconn, UCHAR add){
 8019684:	b580      	push	{r7, lr}
 8019686:	b082      	sub	sp, #8
 8019688:	af00      	add	r7, sp, #0
 801968a:	6078      	str	r0, [r7, #4]
 801968c:	460b      	mov	r3, r1
 801968e:	70fb      	strb	r3, [r7, #3]
			netconn_close(netconn[add]);
 8019690:	78fb      	ldrb	r3, [r7, #3]
 8019692:	009b      	lsls	r3, r3, #2
 8019694:	687a      	ldr	r2, [r7, #4]
 8019696:	4413      	add	r3, r2
 8019698:	681b      	ldr	r3, [r3, #0]
 801969a:	4618      	mov	r0, r3
 801969c:	f7f1 f9f8 	bl	800aa90 <netconn_close>
			netconn_delete(netconn[add]);//what if I do not use this API??? todo
 80196a0:	78fb      	ldrb	r3, [r7, #3]
 80196a2:	009b      	lsls	r3, r3, #2
 80196a4:	687a      	ldr	r2, [r7, #4]
 80196a6:	4413      	add	r3, r2
 80196a8:	681b      	ldr	r3, [r3, #0]
 80196aa:	4618      	mov	r0, r3
 80196ac:	f7f0 fe92 	bl	800a3d4 <netconn_delete>
			netconn[add] = NULL;
 80196b0:	78fb      	ldrb	r3, [r7, #3]
 80196b2:	009b      	lsls	r3, r3, #2
 80196b4:	687a      	ldr	r2, [r7, #4]
 80196b6:	4413      	add	r3, r2
 80196b8:	2200      	movs	r2, #0
 80196ba:	601a      	str	r2, [r3, #0]
}
 80196bc:	bf00      	nop
 80196be:	3708      	adds	r7, #8
 80196c0:	46bd      	mov	sp, r7
 80196c2:	bd80      	pop	{r7, pc}

080196c4 <prvxMBMasterTCPSendMBAP>:

static eMBErrorCode prvxMBMasterTCPSendMBAP( struct netconn *newconn, const UCHAR * pucMBTCPFrame, USHORT usTCPLength )	//input is MBAP frame
{
 80196c4:	b580      	push	{r7, lr}
 80196c6:	b088      	sub	sp, #32
 80196c8:	af02      	add	r7, sp, #8
 80196ca:	60f8      	str	r0, [r7, #12]
 80196cc:	60b9      	str	r1, [r7, #8]
 80196ce:	4613      	mov	r3, r2
 80196d0:	80fb      	strh	r3, [r7, #6]
	eMBErrorCode   bFrameSent = MB_ENOERR;
 80196d2:	2300      	movs	r3, #0
 80196d4:	75fb      	strb	r3, [r7, #23]
	size_t uBytesWritten = 0;
 80196d6:	2300      	movs	r3, #0
 80196d8:	613b      	str	r3, [r7, #16]
	err_t err = ERR_OK;
 80196da:	2300      	movs	r3, #0
 80196dc:	75bb      	strb	r3, [r7, #22]
	 * NOTE:when we send multiple request at a time, it should insert timeout instruction
	 * todo
	 *
	 */
	//netconn_set_sendtimeout(newconn, u16Timeoutms);
	err = netconn_write_partly(newconn, pucMBTCPFrame, (size_t)usTCPLength, NETCONN_COPY, &uBytesWritten);
 80196de:	88fa      	ldrh	r2, [r7, #6]
 80196e0:	f107 0310 	add.w	r3, r7, #16
 80196e4:	9300      	str	r3, [sp, #0]
 80196e6:	2301      	movs	r3, #1
 80196e8:	68b9      	ldr	r1, [r7, #8]
 80196ea:	68f8      	ldr	r0, [r7, #12]
 80196ec:	f7f1 f8ce 	bl	800a88c <netconn_write_partly>
 80196f0:	4603      	mov	r3, r0
 80196f2:	75bb      	strb	r3, [r7, #22]
	if(err != ERR_OK)
 80196f4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80196f8:	2b00      	cmp	r3, #0
 80196fa:	d002      	beq.n	8019702 <prvxMBMasterTCPSendMBAP+0x3e>
	{
		bFrameSent = MB_ESENDDATA;
 80196fc:	2308      	movs	r3, #8
 80196fe:	75fb      	strb	r3, [r7, #23]
 8019700:	e004      	b.n	801970c <prvxMBMasterTCPSendMBAP+0x48>
	}
	else
	{
		debug_countsend++;
 8019702:	4b05      	ldr	r3, [pc, #20]	; (8019718 <prvxMBMasterTCPSendMBAP+0x54>)
 8019704:	681b      	ldr	r3, [r3, #0]
 8019706:	3301      	adds	r3, #1
 8019708:	4a03      	ldr	r2, [pc, #12]	; (8019718 <prvxMBMasterTCPSendMBAP+0x54>)
 801970a:	6013      	str	r3, [r2, #0]
	}

  return bFrameSent;
 801970c:	7dfb      	ldrb	r3, [r7, #23]
}
 801970e:	4618      	mov	r0, r3
 8019710:	3718      	adds	r7, #24
 8019712:	46bd      	mov	sp, r7
 8019714:	bd80      	pop	{r7, pc}
 8019716:	bf00      	nop
 8019718:	20004d60 	.word	0x20004d60

0801971c <xMBPortTimersInit>:
static uint16_t downcounter = 0;		//20000 = 1s for test timer
 
/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortTimersInit( USHORT usTim1Timerout50us )
{
 801971c:	b580      	push	{r7, lr}
 801971e:	b086      	sub	sp, #24
 8019720:	af00      	add	r7, sp, #0
 8019722:	4603      	mov	r3, r0
 8019724:	80fb      	strh	r3, [r7, #6]
  TIM_MasterConfigTypeDef sMasterConfig;
  
  htim6.Instance = TIM6;
 8019726:	4b19      	ldr	r3, [pc, #100]	; (801978c <xMBPortTimersInit+0x70>)
 8019728:	4a19      	ldr	r2, [pc, #100]	; (8019790 <xMBPortTimersInit+0x74>)
 801972a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = (2 * HAL_RCC_GetPCLK1Freq() / 1000000) - 1; //TIMx_CLK = 216Mhz, PCLK1 = 108MHz
 801972c:	f7e9 fe84 	bl	8003438 <HAL_RCC_GetPCLK1Freq>
 8019730:	4603      	mov	r3, r0
 8019732:	005b      	lsls	r3, r3, #1
 8019734:	4a17      	ldr	r2, [pc, #92]	; (8019794 <xMBPortTimersInit+0x78>)
 8019736:	fba2 2303 	umull	r2, r3, r2, r3
 801973a:	0c9b      	lsrs	r3, r3, #18
 801973c:	3b01      	subs	r3, #1
 801973e:	4a13      	ldr	r2, [pc, #76]	; (801978c <xMBPortTimersInit+0x70>)
 8019740:	6053      	str	r3, [r2, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8019742:	4b12      	ldr	r3, [pc, #72]	; (801978c <xMBPortTimersInit+0x70>)
 8019744:	2200      	movs	r2, #0
 8019746:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 50 - 1;
 8019748:	4b10      	ldr	r3, [pc, #64]	; (801978c <xMBPortTimersInit+0x70>)
 801974a:	2231      	movs	r2, #49	; 0x31
 801974c:	60da      	str	r2, [r3, #12]
  
  timeout = usTim1Timerout50us;
 801974e:	4a12      	ldr	r2, [pc, #72]	; (8019798 <xMBPortTimersInit+0x7c>)
 8019750:	88fb      	ldrh	r3, [r7, #6]
 8019752:	8013      	strh	r3, [r2, #0]
  
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8019754:	480d      	ldr	r0, [pc, #52]	; (801978c <xMBPortTimersInit+0x70>)
 8019756:	f7ea faf1 	bl	8003d3c <HAL_TIM_Base_Init>
 801975a:	4603      	mov	r3, r0
 801975c:	2b00      	cmp	r3, #0
 801975e:	d001      	beq.n	8019764 <xMBPortTimersInit+0x48>
  {
    return FALSE;
 8019760:	2300      	movs	r3, #0
 8019762:	e00f      	b.n	8019784 <xMBPortTimersInit+0x68>
  }
  
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8019764:	2320      	movs	r3, #32
 8019766:	60fb      	str	r3, [r7, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8019768:	2300      	movs	r3, #0
 801976a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 801976c:	f107 030c 	add.w	r3, r7, #12
 8019770:	4619      	mov	r1, r3
 8019772:	4806      	ldr	r0, [pc, #24]	; (801978c <xMBPortTimersInit+0x70>)
 8019774:	f7ea fdc8 	bl	8004308 <HAL_TIMEx_MasterConfigSynchronization>
 8019778:	4603      	mov	r3, r0
 801977a:	2b00      	cmp	r3, #0
 801977c:	d001      	beq.n	8019782 <xMBPortTimersInit+0x66>
  {
    return FALSE;
 801977e:	2300      	movs	r3, #0
 8019780:	e000      	b.n	8019784 <xMBPortTimersInit+0x68>
  }
  
  return TRUE;
 8019782:	2301      	movs	r3, #1
}
 8019784:	4618      	mov	r0, r3
 8019786:	3718      	adds	r7, #24
 8019788:	46bd      	mov	sp, r7
 801978a:	bd80      	pop	{r7, pc}
 801978c:	20004f28 	.word	0x20004f28
 8019790:	40001000 	.word	0x40001000
 8019794:	431bde83 	.word	0x431bde83
 8019798:	20004d68 	.word	0x20004d68

0801979c <vMBPortTimersEnable>:
 
void
vMBPortTimersEnable(  )
{
 801979c:	b580      	push	{r7, lr}
 801979e:	af00      	add	r7, sp, #0
  /* Enable the timer with the timeout passed to xMBPortTimersInit( ) */
  downcounter = timeout;
 80197a0:	4b04      	ldr	r3, [pc, #16]	; (80197b4 <vMBPortTimersEnable+0x18>)
 80197a2:	881a      	ldrh	r2, [r3, #0]
 80197a4:	4b04      	ldr	r3, [pc, #16]	; (80197b8 <vMBPortTimersEnable+0x1c>)
 80197a6:	801a      	strh	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim6);
 80197a8:	4804      	ldr	r0, [pc, #16]	; (80197bc <vMBPortTimersEnable+0x20>)
 80197aa:	f7ea fb1f 	bl	8003dec <HAL_TIM_Base_Start_IT>
}
 80197ae:	bf00      	nop
 80197b0:	bd80      	pop	{r7, pc}
 80197b2:	bf00      	nop
 80197b4:	20004d68 	.word	0x20004d68
 80197b8:	20004d6a 	.word	0x20004d6a
 80197bc:	20004f28 	.word	0x20004f28

080197c0 <vMBPortTimersDisable>:
 
void
vMBPortTimersDisable(  )
{
 80197c0:	b580      	push	{r7, lr}
 80197c2:	af00      	add	r7, sp, #0
  /* Disable any pending timers. */
  HAL_TIM_Base_Stop_IT(&htim6);
 80197c4:	4802      	ldr	r0, [pc, #8]	; (80197d0 <vMBPortTimersDisable+0x10>)
 80197c6:	f7ea fb89 	bl	8003edc <HAL_TIM_Base_Stop_IT>
}
 80197ca:	bf00      	nop
 80197cc:	bd80      	pop	{r7, pc}
 80197ce:	bf00      	nop
 80197d0:	20004f28 	.word	0x20004f28

080197d4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 80197d4:	b580      	push	{r7, lr}
 80197d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	if(__HAL_TIM_GET_FLAG(&htim6, TIM_FLAG_UPDATE) != RESET
 80197d8:	4b12      	ldr	r3, [pc, #72]	; (8019824 <TIM6_DAC_IRQHandler+0x50>)
 80197da:	681b      	ldr	r3, [r3, #0]
 80197dc:	691b      	ldr	r3, [r3, #16]
 80197de:	f003 0301 	and.w	r3, r3, #1
 80197e2:	2b01      	cmp	r3, #1
 80197e4:	d118      	bne.n	8019818 <TIM6_DAC_IRQHandler+0x44>
	   && __HAL_TIM_GET_IT_SOURCE(&htim6, TIM_IT_UPDATE) !=RESET)
 80197e6:	4b0f      	ldr	r3, [pc, #60]	; (8019824 <TIM6_DAC_IRQHandler+0x50>)
 80197e8:	681b      	ldr	r3, [r3, #0]
 80197ea:	68db      	ldr	r3, [r3, #12]
 80197ec:	f003 0301 	and.w	r3, r3, #1
 80197f0:	2b01      	cmp	r3, #1
 80197f2:	d111      	bne.n	8019818 <TIM6_DAC_IRQHandler+0x44>
	{
		__HAL_TIM_CLEAR_IT(&htim6, TIM_IT_UPDATE);
 80197f4:	4b0b      	ldr	r3, [pc, #44]	; (8019824 <TIM6_DAC_IRQHandler+0x50>)
 80197f6:	681b      	ldr	r3, [r3, #0]
 80197f8:	f06f 0201 	mvn.w	r2, #1
 80197fc:	611a      	str	r2, [r3, #16]
		if (!--downcounter)
 80197fe:	4b0a      	ldr	r3, [pc, #40]	; (8019828 <TIM6_DAC_IRQHandler+0x54>)
 8019800:	881b      	ldrh	r3, [r3, #0]
 8019802:	3b01      	subs	r3, #1
 8019804:	b29a      	uxth	r2, r3
 8019806:	4b08      	ldr	r3, [pc, #32]	; (8019828 <TIM6_DAC_IRQHandler+0x54>)
 8019808:	801a      	strh	r2, [r3, #0]
 801980a:	4b07      	ldr	r3, [pc, #28]	; (8019828 <TIM6_DAC_IRQHandler+0x54>)
 801980c:	881b      	ldrh	r3, [r3, #0]
 801980e:	2b00      	cmp	r3, #0
 8019810:	d102      	bne.n	8019818 <TIM6_DAC_IRQHandler+0x44>
		{
			pxMBPortCBTimerExpired();	// it is "xMBRTUTimerT35Expired()"
 8019812:	4b06      	ldr	r3, [pc, #24]	; (801982c <TIM6_DAC_IRQHandler+0x58>)
 8019814:	681b      	ldr	r3, [r3, #0]
 8019816:	4798      	blx	r3
			//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
			//todo return;
		}
	}
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8019818:	4802      	ldr	r0, [pc, #8]	; (8019824 <TIM6_DAC_IRQHandler+0x50>)
 801981a:	f7ea fb8e 	bl	8003f3a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 801981e:	bf00      	nop
 8019820:	bd80      	pop	{r7, pc}
 8019822:	bf00      	nop
 8019824:	20004f28 	.word	0x20004f28
 8019828:	20004d6a 	.word	0x20004d6a
 801982c:	2000db44 	.word	0x2000db44

08019830 <eMBRegInputCB>:
 *
 * @return result
 */

eMBErrorCode eMBRegInputCB(UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
{
 8019830:	b480      	push	{r7}
 8019832:	b087      	sub	sp, #28
 8019834:	af00      	add	r7, sp, #0
 8019836:	6078      	str	r0, [r7, #4]
 8019838:	460b      	mov	r3, r1
 801983a:	807b      	strh	r3, [r7, #2]
 801983c:	4613      	mov	r3, r2
 801983e:	803b      	strh	r3, [r7, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 8019840:	2300      	movs	r3, #0
 8019842:	75fb      	strb	r3, [r7, #23]
    USHORT *        pusRegInputBuf;
    USHORT          REG_INPUT_START;
    USHORT          REG_INPUT_NREGS;
    USHORT          usRegInStart;

    pusRegInputBuf = usSRegInBuf;
 8019844:	4b22      	ldr	r3, [pc, #136]	; (80198d0 <eMBRegInputCB+0xa0>)
 8019846:	613b      	str	r3, [r7, #16]
    REG_INPUT_START = S_REG_INPUT_START;
 8019848:	2300      	movs	r3, #0
 801984a:	81fb      	strh	r3, [r7, #14]
    REG_INPUT_NREGS = S_REG_INPUT_NREGS;
 801984c:	2308      	movs	r3, #8
 801984e:	81bb      	strh	r3, [r7, #12]
    usRegInStart = usSRegInStart;
 8019850:	4b20      	ldr	r3, [pc, #128]	; (80198d4 <eMBRegInputCB+0xa4>)
 8019852:	881b      	ldrh	r3, [r3, #0]
 8019854:	817b      	strh	r3, [r7, #10]

    /* it already plus one in modbus function method. */
    usAddress--;
 8019856:	887b      	ldrh	r3, [r7, #2]
 8019858:	3b01      	subs	r3, #1
 801985a:	807b      	strh	r3, [r7, #2]

    if ((usAddress >= REG_INPUT_START)
 801985c:	887a      	ldrh	r2, [r7, #2]
 801985e:	89fb      	ldrh	r3, [r7, #14]
 8019860:	429a      	cmp	r2, r3
 8019862:	d32c      	bcc.n	80198be <eMBRegInputCB+0x8e>
            && (usAddress + usNRegs <= REG_INPUT_START + REG_INPUT_NREGS))
 8019864:	887a      	ldrh	r2, [r7, #2]
 8019866:	883b      	ldrh	r3, [r7, #0]
 8019868:	441a      	add	r2, r3
 801986a:	89f9      	ldrh	r1, [r7, #14]
 801986c:	89bb      	ldrh	r3, [r7, #12]
 801986e:	440b      	add	r3, r1
 8019870:	429a      	cmp	r2, r3
 8019872:	dc24      	bgt.n	80198be <eMBRegInputCB+0x8e>
    {
        iRegIndex = usAddress - usRegInStart;
 8019874:	887a      	ldrh	r2, [r7, #2]
 8019876:	897b      	ldrh	r3, [r7, #10]
 8019878:	1ad3      	subs	r3, r2, r3
 801987a:	82bb      	strh	r3, [r7, #20]
        while (usNRegs > 0)
 801987c:	e01b      	b.n	80198b6 <eMBRegInputCB+0x86>
        {
            *pucRegBuffer++ = (UCHAR) (pusRegInputBuf[iRegIndex] >> 8);
 801987e:	8abb      	ldrh	r3, [r7, #20]
 8019880:	005b      	lsls	r3, r3, #1
 8019882:	693a      	ldr	r2, [r7, #16]
 8019884:	4413      	add	r3, r2
 8019886:	881b      	ldrh	r3, [r3, #0]
 8019888:	0a1b      	lsrs	r3, r3, #8
 801988a:	b299      	uxth	r1, r3
 801988c:	687b      	ldr	r3, [r7, #4]
 801988e:	1c5a      	adds	r2, r3, #1
 8019890:	607a      	str	r2, [r7, #4]
 8019892:	b2ca      	uxtb	r2, r1
 8019894:	701a      	strb	r2, [r3, #0]
            *pucRegBuffer++ = (UCHAR) (pusRegInputBuf[iRegIndex] & 0xFF);
 8019896:	8abb      	ldrh	r3, [r7, #20]
 8019898:	005b      	lsls	r3, r3, #1
 801989a:	693a      	ldr	r2, [r7, #16]
 801989c:	4413      	add	r3, r2
 801989e:	8819      	ldrh	r1, [r3, #0]
 80198a0:	687b      	ldr	r3, [r7, #4]
 80198a2:	1c5a      	adds	r2, r3, #1
 80198a4:	607a      	str	r2, [r7, #4]
 80198a6:	b2ca      	uxtb	r2, r1
 80198a8:	701a      	strb	r2, [r3, #0]
            iRegIndex++;
 80198aa:	8abb      	ldrh	r3, [r7, #20]
 80198ac:	3301      	adds	r3, #1
 80198ae:	82bb      	strh	r3, [r7, #20]
            usNRegs--;
 80198b0:	883b      	ldrh	r3, [r7, #0]
 80198b2:	3b01      	subs	r3, #1
 80198b4:	803b      	strh	r3, [r7, #0]
        while (usNRegs > 0)
 80198b6:	883b      	ldrh	r3, [r7, #0]
 80198b8:	2b00      	cmp	r3, #0
 80198ba:	d1e0      	bne.n	801987e <eMBRegInputCB+0x4e>
    if ((usAddress >= REG_INPUT_START)
 80198bc:	e001      	b.n	80198c2 <eMBRegInputCB+0x92>
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 80198be:	2301      	movs	r3, #1
 80198c0:	75fb      	strb	r3, [r7, #23]
    }

    return eStatus;
 80198c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80198c4:	4618      	mov	r0, r3
 80198c6:	371c      	adds	r7, #28
 80198c8:	46bd      	mov	sp, r7
 80198ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198ce:	4770      	bx	lr
 80198d0:	2000db88 	.word	0x2000db88
 80198d4:	20004d70 	.word	0x20004d70

080198d8 <eMBRegHoldingCB>:
 *
 * @return result
 */
eMBErrorCode eMBRegHoldingCB(UCHAR * pucRegBuffer, USHORT usAddress,
        USHORT usNRegs, eMBRegisterMode eMode)
{
 80198d8:	b480      	push	{r7}
 80198da:	b089      	sub	sp, #36	; 0x24
 80198dc:	af00      	add	r7, sp, #0
 80198de:	60f8      	str	r0, [r7, #12]
 80198e0:	4608      	mov	r0, r1
 80198e2:	4611      	mov	r1, r2
 80198e4:	461a      	mov	r2, r3
 80198e6:	4603      	mov	r3, r0
 80198e8:	817b      	strh	r3, [r7, #10]
 80198ea:	460b      	mov	r3, r1
 80198ec:	813b      	strh	r3, [r7, #8]
 80198ee:	4613      	mov	r3, r2
 80198f0:	71fb      	strb	r3, [r7, #7]
    eMBErrorCode    eStatus = MB_ENOERR;
 80198f2:	2300      	movs	r3, #0
 80198f4:	77fb      	strb	r3, [r7, #31]
    USHORT *        pusRegHoldingBuf;
    USHORT          REG_HOLDING_START;
    USHORT          REG_HOLDING_NREGS;
    USHORT          usRegHoldStart;

    pusRegHoldingBuf = usSRegHoldBuf;
 80198f6:	4b39      	ldr	r3, [pc, #228]	; (80199dc <eMBRegHoldingCB+0x104>)
 80198f8:	61bb      	str	r3, [r7, #24]
    REG_HOLDING_START = S_REG_HOLDING_START;
 80198fa:	2300      	movs	r3, #0
 80198fc:	82fb      	strh	r3, [r7, #22]
    REG_HOLDING_NREGS = S_REG_HOLDING_NREGS;
 80198fe:	2308      	movs	r3, #8
 8019900:	82bb      	strh	r3, [r7, #20]
    usRegHoldStart = usSRegHoldStart;
 8019902:	4b37      	ldr	r3, [pc, #220]	; (80199e0 <eMBRegHoldingCB+0x108>)
 8019904:	881b      	ldrh	r3, [r3, #0]
 8019906:	827b      	strh	r3, [r7, #18]

    /* it already plus one in modbus function method. */
    usAddress--;
 8019908:	897b      	ldrh	r3, [r7, #10]
 801990a:	3b01      	subs	r3, #1
 801990c:	817b      	strh	r3, [r7, #10]

    if ((usAddress >= REG_HOLDING_START)
 801990e:	897a      	ldrh	r2, [r7, #10]
 8019910:	8afb      	ldrh	r3, [r7, #22]
 8019912:	429a      	cmp	r2, r3
 8019914:	d359      	bcc.n	80199ca <eMBRegHoldingCB+0xf2>
            && (usAddress + usNRegs <= REG_HOLDING_START + REG_HOLDING_NREGS))
 8019916:	897a      	ldrh	r2, [r7, #10]
 8019918:	893b      	ldrh	r3, [r7, #8]
 801991a:	441a      	add	r2, r3
 801991c:	8af9      	ldrh	r1, [r7, #22]
 801991e:	8abb      	ldrh	r3, [r7, #20]
 8019920:	440b      	add	r3, r1
 8019922:	429a      	cmp	r2, r3
 8019924:	dc51      	bgt.n	80199ca <eMBRegHoldingCB+0xf2>
    {
        iRegIndex = usAddress - usRegHoldStart;
 8019926:	897a      	ldrh	r2, [r7, #10]
 8019928:	8a7b      	ldrh	r3, [r7, #18]
 801992a:	1ad3      	subs	r3, r2, r3
 801992c:	83bb      	strh	r3, [r7, #28]
        switch (eMode)
 801992e:	79fb      	ldrb	r3, [r7, #7]
 8019930:	2b00      	cmp	r3, #0
 8019932:	d01e      	beq.n	8019972 <eMBRegHoldingCB+0x9a>
 8019934:	2b01      	cmp	r3, #1
 8019936:	d043      	beq.n	80199c0 <eMBRegHoldingCB+0xe8>
 8019938:	e049      	b.n	80199ce <eMBRegHoldingCB+0xf6>
        {
        /* read current register values from the protocol stack. */
        case MB_REG_READ:
            while (usNRegs > 0)
            {
                *pucRegBuffer++ = (UCHAR) (pusRegHoldingBuf[iRegIndex] >> 8);
 801993a:	8bbb      	ldrh	r3, [r7, #28]
 801993c:	005b      	lsls	r3, r3, #1
 801993e:	69ba      	ldr	r2, [r7, #24]
 8019940:	4413      	add	r3, r2
 8019942:	881b      	ldrh	r3, [r3, #0]
 8019944:	0a1b      	lsrs	r3, r3, #8
 8019946:	b299      	uxth	r1, r3
 8019948:	68fb      	ldr	r3, [r7, #12]
 801994a:	1c5a      	adds	r2, r3, #1
 801994c:	60fa      	str	r2, [r7, #12]
 801994e:	b2ca      	uxtb	r2, r1
 8019950:	701a      	strb	r2, [r3, #0]
                *pucRegBuffer++ = (UCHAR) (pusRegHoldingBuf[iRegIndex] & 0xFF);
 8019952:	8bbb      	ldrh	r3, [r7, #28]
 8019954:	005b      	lsls	r3, r3, #1
 8019956:	69ba      	ldr	r2, [r7, #24]
 8019958:	4413      	add	r3, r2
 801995a:	8819      	ldrh	r1, [r3, #0]
 801995c:	68fb      	ldr	r3, [r7, #12]
 801995e:	1c5a      	adds	r2, r3, #1
 8019960:	60fa      	str	r2, [r7, #12]
 8019962:	b2ca      	uxtb	r2, r1
 8019964:	701a      	strb	r2, [r3, #0]
                iRegIndex++;
 8019966:	8bbb      	ldrh	r3, [r7, #28]
 8019968:	3301      	adds	r3, #1
 801996a:	83bb      	strh	r3, [r7, #28]
                usNRegs--;
 801996c:	893b      	ldrh	r3, [r7, #8]
 801996e:	3b01      	subs	r3, #1
 8019970:	813b      	strh	r3, [r7, #8]
            while (usNRegs > 0)
 8019972:	893b      	ldrh	r3, [r7, #8]
 8019974:	2b00      	cmp	r3, #0
 8019976:	d1e0      	bne.n	801993a <eMBRegHoldingCB+0x62>
            }
            break;
 8019978:	e026      	b.n	80199c8 <eMBRegHoldingCB+0xf0>

        /* write current register values with new values from the protocol stack. */
        case MB_REG_WRITE:
            while (usNRegs > 0)
            {
                pusRegHoldingBuf[iRegIndex] = *pucRegBuffer++ << 8;
 801997a:	68fb      	ldr	r3, [r7, #12]
 801997c:	1c5a      	adds	r2, r3, #1
 801997e:	60fa      	str	r2, [r7, #12]
 8019980:	781b      	ldrb	r3, [r3, #0]
 8019982:	b29a      	uxth	r2, r3
 8019984:	8bbb      	ldrh	r3, [r7, #28]
 8019986:	005b      	lsls	r3, r3, #1
 8019988:	69b9      	ldr	r1, [r7, #24]
 801998a:	440b      	add	r3, r1
 801998c:	0212      	lsls	r2, r2, #8
 801998e:	b292      	uxth	r2, r2
 8019990:	801a      	strh	r2, [r3, #0]
                pusRegHoldingBuf[iRegIndex] |= *pucRegBuffer++;
 8019992:	68fb      	ldr	r3, [r7, #12]
 8019994:	1c5a      	adds	r2, r3, #1
 8019996:	60fa      	str	r2, [r7, #12]
 8019998:	7818      	ldrb	r0, [r3, #0]
 801999a:	8bbb      	ldrh	r3, [r7, #28]
 801999c:	005b      	lsls	r3, r3, #1
 801999e:	69ba      	ldr	r2, [r7, #24]
 80199a0:	4413      	add	r3, r2
 80199a2:	8819      	ldrh	r1, [r3, #0]
 80199a4:	b282      	uxth	r2, r0
 80199a6:	8bbb      	ldrh	r3, [r7, #28]
 80199a8:	005b      	lsls	r3, r3, #1
 80199aa:	69b8      	ldr	r0, [r7, #24]
 80199ac:	4403      	add	r3, r0
 80199ae:	430a      	orrs	r2, r1
 80199b0:	b292      	uxth	r2, r2
 80199b2:	801a      	strh	r2, [r3, #0]
                iRegIndex++;
 80199b4:	8bbb      	ldrh	r3, [r7, #28]
 80199b6:	3301      	adds	r3, #1
 80199b8:	83bb      	strh	r3, [r7, #28]
                usNRegs--;
 80199ba:	893b      	ldrh	r3, [r7, #8]
 80199bc:	3b01      	subs	r3, #1
 80199be:	813b      	strh	r3, [r7, #8]
            while (usNRegs > 0)
 80199c0:	893b      	ldrh	r3, [r7, #8]
 80199c2:	2b00      	cmp	r3, #0
 80199c4:	d1d9      	bne.n	801997a <eMBRegHoldingCB+0xa2>
            }
            break;
 80199c6:	bf00      	nop
        switch (eMode)
 80199c8:	e001      	b.n	80199ce <eMBRegHoldingCB+0xf6>
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 80199ca:	2301      	movs	r3, #1
 80199cc:	77fb      	strb	r3, [r7, #31]
    }
    return eStatus;
 80199ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80199d0:	4618      	mov	r0, r3
 80199d2:	3724      	adds	r7, #36	; 0x24
 80199d4:	46bd      	mov	sp, r7
 80199d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199da:	4770      	bx	lr
 80199dc:	2000db78 	.word	0x2000db78
 80199e0:	20004d72 	.word	0x20004d72

080199e4 <eMBRegCoilsCB>:
 *
 * @return result
 */
eMBErrorCode eMBRegCoilsCB(UCHAR * pucRegBuffer, USHORT usAddress,
        USHORT usNCoils, eMBRegisterMode eMode)
{
 80199e4:	b590      	push	{r4, r7, lr}
 80199e6:	b08b      	sub	sp, #44	; 0x2c
 80199e8:	af00      	add	r7, sp, #0
 80199ea:	60f8      	str	r0, [r7, #12]
 80199ec:	4608      	mov	r0, r1
 80199ee:	4611      	mov	r1, r2
 80199f0:	461a      	mov	r2, r3
 80199f2:	4603      	mov	r3, r0
 80199f4:	817b      	strh	r3, [r7, #10]
 80199f6:	460b      	mov	r3, r1
 80199f8:	813b      	strh	r3, [r7, #8]
 80199fa:	4613      	mov	r3, r2
 80199fc:	71fb      	strb	r3, [r7, #7]
    eMBErrorCode    eStatus = MB_ENOERR;
 80199fe:	2300      	movs	r3, #0
 8019a00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    USHORT          iRegIndex , iRegBitIndex , iNReg;
    UCHAR *         pucCoilBuf;
    USHORT          COIL_START;
    USHORT          COIL_NCOILS;
    USHORT          usCoilStart;
    iNReg =  usNCoils / 8 + 1;
 8019a04:	893b      	ldrh	r3, [r7, #8]
 8019a06:	08db      	lsrs	r3, r3, #3
 8019a08:	b29b      	uxth	r3, r3
 8019a0a:	3301      	adds	r3, #1
 8019a0c:	847b      	strh	r3, [r7, #34]	; 0x22

    pucCoilBuf = ucSCoilBuf;
 8019a0e:	4b4a      	ldr	r3, [pc, #296]	; (8019b38 <eMBRegCoilsCB+0x154>)
 8019a10:	61fb      	str	r3, [r7, #28]
    COIL_START = S_COIL_START;
 8019a12:	2300      	movs	r3, #0
 8019a14:	837b      	strh	r3, [r7, #26]
    COIL_NCOILS = S_COIL_NCOILS;
 8019a16:	2308      	movs	r3, #8
 8019a18:	833b      	strh	r3, [r7, #24]
    usCoilStart = usSCoilStart;
 8019a1a:	4b48      	ldr	r3, [pc, #288]	; (8019b3c <eMBRegCoilsCB+0x158>)
 8019a1c:	881b      	ldrh	r3, [r3, #0]
 8019a1e:	82fb      	strh	r3, [r7, #22]

    /* it already plus one in modbus function method. */
    usAddress--;
 8019a20:	897b      	ldrh	r3, [r7, #10]
 8019a22:	3b01      	subs	r3, #1
 8019a24:	817b      	strh	r3, [r7, #10]

    if( ( usAddress >= COIL_START ) &&
 8019a26:	897a      	ldrh	r2, [r7, #10]
 8019a28:	8b7b      	ldrh	r3, [r7, #26]
 8019a2a:	429a      	cmp	r2, r3
 8019a2c:	d37b      	bcc.n	8019b26 <eMBRegCoilsCB+0x142>
        ( usAddress + usNCoils <= COIL_START + COIL_NCOILS ) )
 8019a2e:	897a      	ldrh	r2, [r7, #10]
 8019a30:	893b      	ldrh	r3, [r7, #8]
 8019a32:	441a      	add	r2, r3
 8019a34:	8b79      	ldrh	r1, [r7, #26]
 8019a36:	8b3b      	ldrh	r3, [r7, #24]
 8019a38:	440b      	add	r3, r1
    if( ( usAddress >= COIL_START ) &&
 8019a3a:	429a      	cmp	r2, r3
 8019a3c:	dc73      	bgt.n	8019b26 <eMBRegCoilsCB+0x142>
    {
        iRegIndex = (USHORT) (usAddress - usCoilStart) / 8;
 8019a3e:	897a      	ldrh	r2, [r7, #10]
 8019a40:	8afb      	ldrh	r3, [r7, #22]
 8019a42:	1ad3      	subs	r3, r2, r3
 8019a44:	b29b      	uxth	r3, r3
 8019a46:	08db      	lsrs	r3, r3, #3
 8019a48:	84bb      	strh	r3, [r7, #36]	; 0x24
        iRegBitIndex = (USHORT) (usAddress - usCoilStart) % 8;
 8019a4a:	897a      	ldrh	r2, [r7, #10]
 8019a4c:	8afb      	ldrh	r3, [r7, #22]
 8019a4e:	1ad3      	subs	r3, r2, r3
 8019a50:	b29b      	uxth	r3, r3
 8019a52:	f003 0307 	and.w	r3, r3, #7
 8019a56:	82bb      	strh	r3, [r7, #20]
        switch ( eMode )
 8019a58:	79fb      	ldrb	r3, [r7, #7]
 8019a5a:	2b00      	cmp	r3, #0
 8019a5c:	d015      	beq.n	8019a8a <eMBRegCoilsCB+0xa6>
 8019a5e:	2b01      	cmp	r3, #1
 8019a60:	d045      	beq.n	8019aee <eMBRegCoilsCB+0x10a>
 8019a62:	e063      	b.n	8019b2c <eMBRegCoilsCB+0x148>
        {
        /* read current coil values from the protocol stack. */
        case MB_REG_READ:
            while (iNReg > 0)
            {
                *pucRegBuffer++ = xMBUtilGetBits(&pucCoilBuf[iRegIndex++],
 8019a64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019a66:	1c5a      	adds	r2, r3, #1
 8019a68:	84ba      	strh	r2, [r7, #36]	; 0x24
 8019a6a:	461a      	mov	r2, r3
 8019a6c:	69fb      	ldr	r3, [r7, #28]
 8019a6e:	1898      	adds	r0, r3, r2
 8019a70:	68fc      	ldr	r4, [r7, #12]
 8019a72:	1c63      	adds	r3, r4, #1
 8019a74:	60fb      	str	r3, [r7, #12]
 8019a76:	8abb      	ldrh	r3, [r7, #20]
 8019a78:	2208      	movs	r2, #8
 8019a7a:	4619      	mov	r1, r3
 8019a7c:	f7fe ff00 	bl	8018880 <xMBUtilGetBits>
 8019a80:	4603      	mov	r3, r0
 8019a82:	7023      	strb	r3, [r4, #0]
                        iRegBitIndex, 8);
                iNReg--;
 8019a84:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019a86:	3b01      	subs	r3, #1
 8019a88:	847b      	strh	r3, [r7, #34]	; 0x22
            while (iNReg > 0)
 8019a8a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019a8c:	2b00      	cmp	r3, #0
 8019a8e:	d1e9      	bne.n	8019a64 <eMBRegCoilsCB+0x80>
            }
            pucRegBuffer--;
 8019a90:	68fb      	ldr	r3, [r7, #12]
 8019a92:	3b01      	subs	r3, #1
 8019a94:	60fb      	str	r3, [r7, #12]
            /* last coils */
            usNCoils = usNCoils % 8;
 8019a96:	893b      	ldrh	r3, [r7, #8]
 8019a98:	f003 0307 	and.w	r3, r3, #7
 8019a9c:	813b      	strh	r3, [r7, #8]
            /* filling zero to high bit */
            *pucRegBuffer = *pucRegBuffer << (8 - usNCoils);
 8019a9e:	68fb      	ldr	r3, [r7, #12]
 8019aa0:	781b      	ldrb	r3, [r3, #0]
 8019aa2:	461a      	mov	r2, r3
 8019aa4:	893b      	ldrh	r3, [r7, #8]
 8019aa6:	f1c3 0308 	rsb	r3, r3, #8
 8019aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8019aae:	b2da      	uxtb	r2, r3
 8019ab0:	68fb      	ldr	r3, [r7, #12]
 8019ab2:	701a      	strb	r2, [r3, #0]
            *pucRegBuffer = *pucRegBuffer >> (8 - usNCoils);
 8019ab4:	68fb      	ldr	r3, [r7, #12]
 8019ab6:	781b      	ldrb	r3, [r3, #0]
 8019ab8:	461a      	mov	r2, r3
 8019aba:	893b      	ldrh	r3, [r7, #8]
 8019abc:	f1c3 0308 	rsb	r3, r3, #8
 8019ac0:	fa42 f303 	asr.w	r3, r2, r3
 8019ac4:	b2da      	uxtb	r2, r3
 8019ac6:	68fb      	ldr	r3, [r7, #12]
 8019ac8:	701a      	strb	r2, [r3, #0]
            break;
 8019aca:	e02b      	b.n	8019b24 <eMBRegCoilsCB+0x140>

            /* write current coil values with new values from the protocol stack. */
        case MB_REG_WRITE:
            while (iNReg > 1)
            {
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, 8,
 8019acc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019ace:	1c5a      	adds	r2, r3, #1
 8019ad0:	84ba      	strh	r2, [r7, #36]	; 0x24
 8019ad2:	461a      	mov	r2, r3
 8019ad4:	69fb      	ldr	r3, [r7, #28]
 8019ad6:	1898      	adds	r0, r3, r2
                        *pucRegBuffer++);
 8019ad8:	68fb      	ldr	r3, [r7, #12]
 8019ada:	1c5a      	adds	r2, r3, #1
 8019adc:	60fa      	str	r2, [r7, #12]
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, 8,
 8019ade:	781b      	ldrb	r3, [r3, #0]
 8019ae0:	8ab9      	ldrh	r1, [r7, #20]
 8019ae2:	2208      	movs	r2, #8
 8019ae4:	f7fe fe60 	bl	80187a8 <xMBUtilSetBits>
                iNReg--;
 8019ae8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019aea:	3b01      	subs	r3, #1
 8019aec:	847b      	strh	r3, [r7, #34]	; 0x22
            while (iNReg > 1)
 8019aee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019af0:	2b01      	cmp	r3, #1
 8019af2:	d8eb      	bhi.n	8019acc <eMBRegCoilsCB+0xe8>
            }
            /* last coils */
            usNCoils = usNCoils % 8;
 8019af4:	893b      	ldrh	r3, [r7, #8]
 8019af6:	f003 0307 	and.w	r3, r3, #7
 8019afa:	813b      	strh	r3, [r7, #8]
            /* xMBUtilSetBits has bug when ucNBits is zero */
            if (usNCoils != 0)
 8019afc:	893b      	ldrh	r3, [r7, #8]
 8019afe:	2b00      	cmp	r3, #0
 8019b00:	d00f      	beq.n	8019b22 <eMBRegCoilsCB+0x13e>
            {
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, usNCoils,
 8019b02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019b04:	1c5a      	adds	r2, r3, #1
 8019b06:	84ba      	strh	r2, [r7, #36]	; 0x24
 8019b08:	461a      	mov	r2, r3
 8019b0a:	69fb      	ldr	r3, [r7, #28]
 8019b0c:	1898      	adds	r0, r3, r2
 8019b0e:	893b      	ldrh	r3, [r7, #8]
 8019b10:	b2dc      	uxtb	r4, r3
                        *pucRegBuffer++);
 8019b12:	68fb      	ldr	r3, [r7, #12]
 8019b14:	1c5a      	adds	r2, r3, #1
 8019b16:	60fa      	str	r2, [r7, #12]
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, usNCoils,
 8019b18:	781b      	ldrb	r3, [r3, #0]
 8019b1a:	8ab9      	ldrh	r1, [r7, #20]
 8019b1c:	4622      	mov	r2, r4
 8019b1e:	f7fe fe43 	bl	80187a8 <xMBUtilSetBits>
            }
            break;
 8019b22:	bf00      	nop
        switch ( eMode )
 8019b24:	e002      	b.n	8019b2c <eMBRegCoilsCB+0x148>
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 8019b26:	2301      	movs	r3, #1
 8019b28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    return eStatus;
 8019b2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8019b30:	4618      	mov	r0, r3
 8019b32:	372c      	adds	r7, #44	; 0x2c
 8019b34:	46bd      	mov	sp, r7
 8019b36:	bd90      	pop	{r4, r7, pc}
 8019b38:	2000db70 	.word	0x2000db70
 8019b3c:	20004d6e 	.word	0x20004d6e

08019b40 <eMBRegDiscreteCB>:
 * @param usNDiscrete discrete number
 *
 * @return result
 */
eMBErrorCode eMBRegDiscreteCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete )
{
 8019b40:	b590      	push	{r4, r7, lr}
 8019b42:	b089      	sub	sp, #36	; 0x24
 8019b44:	af00      	add	r7, sp, #0
 8019b46:	6078      	str	r0, [r7, #4]
 8019b48:	460b      	mov	r3, r1
 8019b4a:	807b      	strh	r3, [r7, #2]
 8019b4c:	4613      	mov	r3, r2
 8019b4e:	803b      	strh	r3, [r7, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 8019b50:	2300      	movs	r3, #0
 8019b52:	77fb      	strb	r3, [r7, #31]
    USHORT          iRegIndex , iRegBitIndex , iNReg;
    UCHAR *         pucDiscreteInputBuf;
    USHORT          DISCRETE_INPUT_START;
    USHORT          DISCRETE_INPUT_NDISCRETES;
    USHORT          usDiscreteInputStart;
    iNReg =  usNDiscrete / 8 + 1;
 8019b54:	883b      	ldrh	r3, [r7, #0]
 8019b56:	08db      	lsrs	r3, r3, #3
 8019b58:	b29b      	uxth	r3, r3
 8019b5a:	3301      	adds	r3, #1
 8019b5c:	837b      	strh	r3, [r7, #26]

    pucDiscreteInputBuf = ucSDiscInBuf;
 8019b5e:	4b30      	ldr	r3, [pc, #192]	; (8019c20 <eMBRegDiscreteCB+0xe0>)
 8019b60:	617b      	str	r3, [r7, #20]
    DISCRETE_INPUT_START = S_DISCRETE_INPUT_START;
 8019b62:	2300      	movs	r3, #0
 8019b64:	827b      	strh	r3, [r7, #18]
    DISCRETE_INPUT_NDISCRETES = S_DISCRETE_INPUT_NDISCRETES;
 8019b66:	2308      	movs	r3, #8
 8019b68:	823b      	strh	r3, [r7, #16]
    usDiscreteInputStart = usSDiscInStart;
 8019b6a:	4b2e      	ldr	r3, [pc, #184]	; (8019c24 <eMBRegDiscreteCB+0xe4>)
 8019b6c:	881b      	ldrh	r3, [r3, #0]
 8019b6e:	81fb      	strh	r3, [r7, #14]

    /* it already plus one in modbus function method. */
    usAddress--;
 8019b70:	887b      	ldrh	r3, [r7, #2]
 8019b72:	3b01      	subs	r3, #1
 8019b74:	807b      	strh	r3, [r7, #2]

    if ((usAddress >= DISCRETE_INPUT_START)
 8019b76:	887a      	ldrh	r2, [r7, #2]
 8019b78:	8a7b      	ldrh	r3, [r7, #18]
 8019b7a:	429a      	cmp	r2, r3
 8019b7c:	d349      	bcc.n	8019c12 <eMBRegDiscreteCB+0xd2>
            && (usAddress + usNDiscrete    <= DISCRETE_INPUT_START + DISCRETE_INPUT_NDISCRETES))
 8019b7e:	887a      	ldrh	r2, [r7, #2]
 8019b80:	883b      	ldrh	r3, [r7, #0]
 8019b82:	441a      	add	r2, r3
 8019b84:	8a79      	ldrh	r1, [r7, #18]
 8019b86:	8a3b      	ldrh	r3, [r7, #16]
 8019b88:	440b      	add	r3, r1
 8019b8a:	429a      	cmp	r2, r3
 8019b8c:	dc41      	bgt.n	8019c12 <eMBRegDiscreteCB+0xd2>
    {
        iRegIndex = (USHORT) (usAddress - usDiscreteInputStart) / 8;
 8019b8e:	887a      	ldrh	r2, [r7, #2]
 8019b90:	89fb      	ldrh	r3, [r7, #14]
 8019b92:	1ad3      	subs	r3, r2, r3
 8019b94:	b29b      	uxth	r3, r3
 8019b96:	08db      	lsrs	r3, r3, #3
 8019b98:	83bb      	strh	r3, [r7, #28]
        iRegBitIndex = (USHORT) (usAddress - usDiscreteInputStart) % 8;
 8019b9a:	887a      	ldrh	r2, [r7, #2]
 8019b9c:	89fb      	ldrh	r3, [r7, #14]
 8019b9e:	1ad3      	subs	r3, r2, r3
 8019ba0:	b29b      	uxth	r3, r3
 8019ba2:	f003 0307 	and.w	r3, r3, #7
 8019ba6:	81bb      	strh	r3, [r7, #12]

        while (iNReg > 0)
 8019ba8:	e012      	b.n	8019bd0 <eMBRegDiscreteCB+0x90>
        {
            *pucRegBuffer++ = xMBUtilGetBits(&pucDiscreteInputBuf[iRegIndex++],
 8019baa:	8bbb      	ldrh	r3, [r7, #28]
 8019bac:	1c5a      	adds	r2, r3, #1
 8019bae:	83ba      	strh	r2, [r7, #28]
 8019bb0:	461a      	mov	r2, r3
 8019bb2:	697b      	ldr	r3, [r7, #20]
 8019bb4:	1898      	adds	r0, r3, r2
 8019bb6:	687c      	ldr	r4, [r7, #4]
 8019bb8:	1c63      	adds	r3, r4, #1
 8019bba:	607b      	str	r3, [r7, #4]
 8019bbc:	89bb      	ldrh	r3, [r7, #12]
 8019bbe:	2208      	movs	r2, #8
 8019bc0:	4619      	mov	r1, r3
 8019bc2:	f7fe fe5d 	bl	8018880 <xMBUtilGetBits>
 8019bc6:	4603      	mov	r3, r0
 8019bc8:	7023      	strb	r3, [r4, #0]
                    iRegBitIndex, 8);
            iNReg--;
 8019bca:	8b7b      	ldrh	r3, [r7, #26]
 8019bcc:	3b01      	subs	r3, #1
 8019bce:	837b      	strh	r3, [r7, #26]
        while (iNReg > 0)
 8019bd0:	8b7b      	ldrh	r3, [r7, #26]
 8019bd2:	2b00      	cmp	r3, #0
 8019bd4:	d1e9      	bne.n	8019baa <eMBRegDiscreteCB+0x6a>
        }
        pucRegBuffer--;
 8019bd6:	687b      	ldr	r3, [r7, #4]
 8019bd8:	3b01      	subs	r3, #1
 8019bda:	607b      	str	r3, [r7, #4]
        /* last discrete */
        usNDiscrete = usNDiscrete % 8;
 8019bdc:	883b      	ldrh	r3, [r7, #0]
 8019bde:	f003 0307 	and.w	r3, r3, #7
 8019be2:	803b      	strh	r3, [r7, #0]
        /* filling zero to high bit */
        *pucRegBuffer = *pucRegBuffer << (8 - usNDiscrete);
 8019be4:	687b      	ldr	r3, [r7, #4]
 8019be6:	781b      	ldrb	r3, [r3, #0]
 8019be8:	461a      	mov	r2, r3
 8019bea:	883b      	ldrh	r3, [r7, #0]
 8019bec:	f1c3 0308 	rsb	r3, r3, #8
 8019bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8019bf4:	b2da      	uxtb	r2, r3
 8019bf6:	687b      	ldr	r3, [r7, #4]
 8019bf8:	701a      	strb	r2, [r3, #0]
        *pucRegBuffer = *pucRegBuffer >> (8 - usNDiscrete);
 8019bfa:	687b      	ldr	r3, [r7, #4]
 8019bfc:	781b      	ldrb	r3, [r3, #0]
 8019bfe:	461a      	mov	r2, r3
 8019c00:	883b      	ldrh	r3, [r7, #0]
 8019c02:	f1c3 0308 	rsb	r3, r3, #8
 8019c06:	fa42 f303 	asr.w	r3, r2, r3
 8019c0a:	b2da      	uxtb	r2, r3
 8019c0c:	687b      	ldr	r3, [r7, #4]
 8019c0e:	701a      	strb	r2, [r3, #0]
 8019c10:	e001      	b.n	8019c16 <eMBRegDiscreteCB+0xd6>
    }
    else
    {
        eStatus = MB_ENOREG;
 8019c12:	2301      	movs	r3, #1
 8019c14:	77fb      	strb	r3, [r7, #31]
    }

    return eStatus;
 8019c16:	7ffb      	ldrb	r3, [r7, #31]
}
 8019c18:	4618      	mov	r0, r3
 8019c1a:	3724      	adds	r7, #36	; 0x24
 8019c1c:	46bd      	mov	sp, r7
 8019c1e:	bd90      	pop	{r4, r7, pc}
 8019c20:	2000db74 	.word	0x2000db74
 8019c24:	20004d6c 	.word	0x20004d6c

08019c28 <eMBMasterRegInputCB>:
 * @param usNRegs input register number
 *
 * @return result
 */
eMBErrorCode eMBMasterRegInputCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
{
 8019c28:	b580      	push	{r7, lr}
 8019c2a:	b086      	sub	sp, #24
 8019c2c:	af00      	add	r7, sp, #0
 8019c2e:	6078      	str	r0, [r7, #4]
 8019c30:	460b      	mov	r3, r1
 8019c32:	807b      	strh	r3, [r7, #2]
 8019c34:	4613      	mov	r3, r2
 8019c36:	803b      	strh	r3, [r7, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 8019c38:	2300      	movs	r3, #0
 8019c3a:	75fb      	strb	r3, [r7, #23]
    USHORT *        pusRegInputBuf;
    USHORT          REG_INPUT_START;
    USHORT          REG_INPUT_NREGS;
    USHORT          usRegInStart;

    pusRegInputBuf = usMRegInBuf[ucMBMasterGetDestAddress() - 1];
 8019c3c:	f000 fd90 	bl	801a760 <ucMBMasterGetDestAddress>
 8019c40:	4b25      	ldr	r3, [pc, #148]	; (8019cd8 <eMBMasterRegInputCB+0xb0>)
 8019c42:	613b      	str	r3, [r7, #16]
    REG_INPUT_START = M_REG_INPUT_START;
 8019c44:	2300      	movs	r3, #0
 8019c46:	81fb      	strh	r3, [r7, #14]
    REG_INPUT_NREGS = M_REG_INPUT_NREGS;
 8019c48:	2300      	movs	r3, #0
 8019c4a:	81bb      	strh	r3, [r7, #12]
    usRegInStart = usMRegInStart;
 8019c4c:	4b23      	ldr	r3, [pc, #140]	; (8019cdc <eMBMasterRegInputCB+0xb4>)
 8019c4e:	881b      	ldrh	r3, [r3, #0]
 8019c50:	817b      	strh	r3, [r7, #10]

    /* it already plus one in modbus function method. */
    usAddress--;
 8019c52:	887b      	ldrh	r3, [r7, #2]
 8019c54:	3b01      	subs	r3, #1
 8019c56:	807b      	strh	r3, [r7, #2]

    if ((usAddress >= REG_INPUT_START)
 8019c58:	887a      	ldrh	r2, [r7, #2]
 8019c5a:	89fb      	ldrh	r3, [r7, #14]
 8019c5c:	429a      	cmp	r2, r3
 8019c5e:	d333      	bcc.n	8019cc8 <eMBMasterRegInputCB+0xa0>
            && (usAddress + usNRegs <= REG_INPUT_START + REG_INPUT_NREGS))
 8019c60:	887a      	ldrh	r2, [r7, #2]
 8019c62:	883b      	ldrh	r3, [r7, #0]
 8019c64:	441a      	add	r2, r3
 8019c66:	89f9      	ldrh	r1, [r7, #14]
 8019c68:	89bb      	ldrh	r3, [r7, #12]
 8019c6a:	440b      	add	r3, r1
 8019c6c:	429a      	cmp	r2, r3
 8019c6e:	dc2b      	bgt.n	8019cc8 <eMBMasterRegInputCB+0xa0>
    {
        iRegIndex = usAddress - usRegInStart;
 8019c70:	887a      	ldrh	r2, [r7, #2]
 8019c72:	897b      	ldrh	r3, [r7, #10]
 8019c74:	1ad3      	subs	r3, r2, r3
 8019c76:	82bb      	strh	r3, [r7, #20]
        while (usNRegs > 0)
 8019c78:	e022      	b.n	8019cc0 <eMBMasterRegInputCB+0x98>
        {
            pusRegInputBuf[iRegIndex] = *pucRegBuffer++ << 8;
 8019c7a:	687b      	ldr	r3, [r7, #4]
 8019c7c:	1c5a      	adds	r2, r3, #1
 8019c7e:	607a      	str	r2, [r7, #4]
 8019c80:	781b      	ldrb	r3, [r3, #0]
 8019c82:	b29a      	uxth	r2, r3
 8019c84:	8abb      	ldrh	r3, [r7, #20]
 8019c86:	005b      	lsls	r3, r3, #1
 8019c88:	6939      	ldr	r1, [r7, #16]
 8019c8a:	440b      	add	r3, r1
 8019c8c:	0212      	lsls	r2, r2, #8
 8019c8e:	b292      	uxth	r2, r2
 8019c90:	801a      	strh	r2, [r3, #0]
            pusRegInputBuf[iRegIndex] |= *pucRegBuffer++;
 8019c92:	687b      	ldr	r3, [r7, #4]
 8019c94:	1c5a      	adds	r2, r3, #1
 8019c96:	607a      	str	r2, [r7, #4]
 8019c98:	7818      	ldrb	r0, [r3, #0]
 8019c9a:	8abb      	ldrh	r3, [r7, #20]
 8019c9c:	005b      	lsls	r3, r3, #1
 8019c9e:	693a      	ldr	r2, [r7, #16]
 8019ca0:	4413      	add	r3, r2
 8019ca2:	8819      	ldrh	r1, [r3, #0]
 8019ca4:	b282      	uxth	r2, r0
 8019ca6:	8abb      	ldrh	r3, [r7, #20]
 8019ca8:	005b      	lsls	r3, r3, #1
 8019caa:	6938      	ldr	r0, [r7, #16]
 8019cac:	4403      	add	r3, r0
 8019cae:	430a      	orrs	r2, r1
 8019cb0:	b292      	uxth	r2, r2
 8019cb2:	801a      	strh	r2, [r3, #0]
            iRegIndex++;
 8019cb4:	8abb      	ldrh	r3, [r7, #20]
 8019cb6:	3301      	adds	r3, #1
 8019cb8:	82bb      	strh	r3, [r7, #20]
            usNRegs--;
 8019cba:	883b      	ldrh	r3, [r7, #0]
 8019cbc:	3b01      	subs	r3, #1
 8019cbe:	803b      	strh	r3, [r7, #0]
        while (usNRegs > 0)
 8019cc0:	883b      	ldrh	r3, [r7, #0]
 8019cc2:	2b00      	cmp	r3, #0
 8019cc4:	d1d9      	bne.n	8019c7a <eMBMasterRegInputCB+0x52>
    if ((usAddress >= REG_INPUT_START)
 8019cc6:	e001      	b.n	8019ccc <eMBMasterRegInputCB+0xa4>
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 8019cc8:	2301      	movs	r3, #1
 8019cca:	75fb      	strb	r3, [r7, #23]
    }

    return eStatus;
 8019ccc:	7dfb      	ldrb	r3, [r7, #23]
}
 8019cce:	4618      	mov	r0, r3
 8019cd0:	3718      	adds	r7, #24
 8019cd2:	46bd      	mov	sp, r7
 8019cd4:	bd80      	pop	{r7, pc}
 8019cd6:	bf00      	nop
 8019cd8:	2000dbb8 	.word	0x2000dbb8
 8019cdc:	20004d78 	.word	0x20004d78

08019ce0 <eMBMasterRegHoldingCB>:
 *
 * @return result
 */
eMBErrorCode eMBMasterRegHoldingCB(UCHAR * pucRegBuffer, USHORT usAddress,
        USHORT usNRegs, eMBRegisterMode eMode)
{
 8019ce0:	b580      	push	{r7, lr}
 8019ce2:	b088      	sub	sp, #32
 8019ce4:	af00      	add	r7, sp, #0
 8019ce6:	60f8      	str	r0, [r7, #12]
 8019ce8:	4608      	mov	r0, r1
 8019cea:	4611      	mov	r1, r2
 8019cec:	461a      	mov	r2, r3
 8019cee:	4603      	mov	r3, r0
 8019cf0:	817b      	strh	r3, [r7, #10]
 8019cf2:	460b      	mov	r3, r1
 8019cf4:	813b      	strh	r3, [r7, #8]
 8019cf6:	4613      	mov	r3, r2
 8019cf8:	71fb      	strb	r3, [r7, #7]
    eMBErrorCode    eStatus = MB_ENOERR;
 8019cfa:	2300      	movs	r3, #0
 8019cfc:	77fb      	strb	r3, [r7, #31]
    USHORT *        pusRegHoldingBuf;
    USHORT          REG_HOLDING_START;
    USHORT          REG_HOLDING_NREGS;
    USHORT          usRegHoldStart;

    pusRegHoldingBuf = usMRegHoldBuf[ucMBMasterGetDestAddress() - 1];
 8019cfe:	f000 fd2f 	bl	801a760 <ucMBMasterGetDestAddress>
 8019d02:	4b39      	ldr	r3, [pc, #228]	; (8019de8 <eMBMasterRegHoldingCB+0x108>)
 8019d04:	61bb      	str	r3, [r7, #24]
    REG_HOLDING_START = M_REG_HOLDING_START;
 8019d06:	2300      	movs	r3, #0
 8019d08:	82fb      	strh	r3, [r7, #22]
    REG_HOLDING_NREGS = M_REG_HOLDING_NREGS;
 8019d0a:	2300      	movs	r3, #0
 8019d0c:	82bb      	strh	r3, [r7, #20]
    usRegHoldStart = usMRegHoldStart;
 8019d0e:	4b37      	ldr	r3, [pc, #220]	; (8019dec <eMBMasterRegHoldingCB+0x10c>)
 8019d10:	881b      	ldrh	r3, [r3, #0]
 8019d12:	827b      	strh	r3, [r7, #18]
    /* if mode is read, the master will write the received date to buffer. */
    eMode = MB_REG_WRITE;
 8019d14:	2301      	movs	r3, #1
 8019d16:	71fb      	strb	r3, [r7, #7]

    /* it already plus one in modbus function method. */
    usAddress--;
 8019d18:	897b      	ldrh	r3, [r7, #10]
 8019d1a:	3b01      	subs	r3, #1
 8019d1c:	817b      	strh	r3, [r7, #10]

    if ((usAddress >= REG_HOLDING_START)
 8019d1e:	897a      	ldrh	r2, [r7, #10]
 8019d20:	8afb      	ldrh	r3, [r7, #22]
 8019d22:	429a      	cmp	r2, r3
 8019d24:	d359      	bcc.n	8019dda <eMBMasterRegHoldingCB+0xfa>
            && (usAddress + usNRegs <= REG_HOLDING_START + REG_HOLDING_NREGS))
 8019d26:	897a      	ldrh	r2, [r7, #10]
 8019d28:	893b      	ldrh	r3, [r7, #8]
 8019d2a:	441a      	add	r2, r3
 8019d2c:	8af9      	ldrh	r1, [r7, #22]
 8019d2e:	8abb      	ldrh	r3, [r7, #20]
 8019d30:	440b      	add	r3, r1
 8019d32:	429a      	cmp	r2, r3
 8019d34:	dc51      	bgt.n	8019dda <eMBMasterRegHoldingCB+0xfa>
    {
        iRegIndex = usAddress - usRegHoldStart;
 8019d36:	897a      	ldrh	r2, [r7, #10]
 8019d38:	8a7b      	ldrh	r3, [r7, #18]
 8019d3a:	1ad3      	subs	r3, r2, r3
 8019d3c:	83bb      	strh	r3, [r7, #28]
        switch (eMode)
 8019d3e:	79fb      	ldrb	r3, [r7, #7]
 8019d40:	2b00      	cmp	r3, #0
 8019d42:	d01e      	beq.n	8019d82 <eMBMasterRegHoldingCB+0xa2>
 8019d44:	2b01      	cmp	r3, #1
 8019d46:	d043      	beq.n	8019dd0 <eMBMasterRegHoldingCB+0xf0>
 8019d48:	e049      	b.n	8019dde <eMBMasterRegHoldingCB+0xfe>
        {
        /* read current register values from the protocol stack. */
        case MB_REG_READ:
            while (usNRegs > 0)
            {
                *pucRegBuffer++ = (UCHAR) (pusRegHoldingBuf[iRegIndex] >> 8);
 8019d4a:	8bbb      	ldrh	r3, [r7, #28]
 8019d4c:	005b      	lsls	r3, r3, #1
 8019d4e:	69ba      	ldr	r2, [r7, #24]
 8019d50:	4413      	add	r3, r2
 8019d52:	881b      	ldrh	r3, [r3, #0]
 8019d54:	0a1b      	lsrs	r3, r3, #8
 8019d56:	b299      	uxth	r1, r3
 8019d58:	68fb      	ldr	r3, [r7, #12]
 8019d5a:	1c5a      	adds	r2, r3, #1
 8019d5c:	60fa      	str	r2, [r7, #12]
 8019d5e:	b2ca      	uxtb	r2, r1
 8019d60:	701a      	strb	r2, [r3, #0]
                *pucRegBuffer++ = (UCHAR) (pusRegHoldingBuf[iRegIndex] & 0xFF);
 8019d62:	8bbb      	ldrh	r3, [r7, #28]
 8019d64:	005b      	lsls	r3, r3, #1
 8019d66:	69ba      	ldr	r2, [r7, #24]
 8019d68:	4413      	add	r3, r2
 8019d6a:	8819      	ldrh	r1, [r3, #0]
 8019d6c:	68fb      	ldr	r3, [r7, #12]
 8019d6e:	1c5a      	adds	r2, r3, #1
 8019d70:	60fa      	str	r2, [r7, #12]
 8019d72:	b2ca      	uxtb	r2, r1
 8019d74:	701a      	strb	r2, [r3, #0]
                iRegIndex++;
 8019d76:	8bbb      	ldrh	r3, [r7, #28]
 8019d78:	3301      	adds	r3, #1
 8019d7a:	83bb      	strh	r3, [r7, #28]
                usNRegs--;
 8019d7c:	893b      	ldrh	r3, [r7, #8]
 8019d7e:	3b01      	subs	r3, #1
 8019d80:	813b      	strh	r3, [r7, #8]
            while (usNRegs > 0)
 8019d82:	893b      	ldrh	r3, [r7, #8]
 8019d84:	2b00      	cmp	r3, #0
 8019d86:	d1e0      	bne.n	8019d4a <eMBMasterRegHoldingCB+0x6a>
            }
            break;
 8019d88:	e026      	b.n	8019dd8 <eMBMasterRegHoldingCB+0xf8>
        /* write current register values with new values from the protocol stack. */
        case MB_REG_WRITE:
            while (usNRegs > 0)
            {
                pusRegHoldingBuf[iRegIndex] = *pucRegBuffer++ << 8;
 8019d8a:	68fb      	ldr	r3, [r7, #12]
 8019d8c:	1c5a      	adds	r2, r3, #1
 8019d8e:	60fa      	str	r2, [r7, #12]
 8019d90:	781b      	ldrb	r3, [r3, #0]
 8019d92:	b29a      	uxth	r2, r3
 8019d94:	8bbb      	ldrh	r3, [r7, #28]
 8019d96:	005b      	lsls	r3, r3, #1
 8019d98:	69b9      	ldr	r1, [r7, #24]
 8019d9a:	440b      	add	r3, r1
 8019d9c:	0212      	lsls	r2, r2, #8
 8019d9e:	b292      	uxth	r2, r2
 8019da0:	801a      	strh	r2, [r3, #0]
                pusRegHoldingBuf[iRegIndex] |= *pucRegBuffer++;
 8019da2:	68fb      	ldr	r3, [r7, #12]
 8019da4:	1c5a      	adds	r2, r3, #1
 8019da6:	60fa      	str	r2, [r7, #12]
 8019da8:	7818      	ldrb	r0, [r3, #0]
 8019daa:	8bbb      	ldrh	r3, [r7, #28]
 8019dac:	005b      	lsls	r3, r3, #1
 8019dae:	69ba      	ldr	r2, [r7, #24]
 8019db0:	4413      	add	r3, r2
 8019db2:	8819      	ldrh	r1, [r3, #0]
 8019db4:	b282      	uxth	r2, r0
 8019db6:	8bbb      	ldrh	r3, [r7, #28]
 8019db8:	005b      	lsls	r3, r3, #1
 8019dba:	69b8      	ldr	r0, [r7, #24]
 8019dbc:	4403      	add	r3, r0
 8019dbe:	430a      	orrs	r2, r1
 8019dc0:	b292      	uxth	r2, r2
 8019dc2:	801a      	strh	r2, [r3, #0]
                iRegIndex++;
 8019dc4:	8bbb      	ldrh	r3, [r7, #28]
 8019dc6:	3301      	adds	r3, #1
 8019dc8:	83bb      	strh	r3, [r7, #28]
                usNRegs--;
 8019dca:	893b      	ldrh	r3, [r7, #8]
 8019dcc:	3b01      	subs	r3, #1
 8019dce:	813b      	strh	r3, [r7, #8]
            while (usNRegs > 0)
 8019dd0:	893b      	ldrh	r3, [r7, #8]
 8019dd2:	2b00      	cmp	r3, #0
 8019dd4:	d1d9      	bne.n	8019d8a <eMBMasterRegHoldingCB+0xaa>
            }
            break;
 8019dd6:	bf00      	nop
        switch (eMode)
 8019dd8:	e001      	b.n	8019dde <eMBMasterRegHoldingCB+0xfe>
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 8019dda:	2301      	movs	r3, #1
 8019ddc:	77fb      	strb	r3, [r7, #31]
    }
    return eStatus;
 8019dde:	7ffb      	ldrb	r3, [r7, #31]
}
 8019de0:	4618      	mov	r0, r3
 8019de2:	3720      	adds	r7, #32
 8019de4:	46bd      	mov	sp, r7
 8019de6:	bd80      	pop	{r7, pc}
 8019de8:	2000dbb8 	.word	0x2000dbb8
 8019dec:	20004d7a 	.word	0x20004d7a

08019df0 <eMBMasterRegCoilsCB>:
 *
 * @return result
 */
eMBErrorCode eMBMasterRegCoilsCB(UCHAR * pucRegBuffer, USHORT usAddress,
        USHORT usNCoils, eMBRegisterMode eMode)
{
 8019df0:	b590      	push	{r4, r7, lr}
 8019df2:	b08b      	sub	sp, #44	; 0x2c
 8019df4:	af00      	add	r7, sp, #0
 8019df6:	60f8      	str	r0, [r7, #12]
 8019df8:	4608      	mov	r0, r1
 8019dfa:	4611      	mov	r1, r2
 8019dfc:	461a      	mov	r2, r3
 8019dfe:	4603      	mov	r3, r0
 8019e00:	817b      	strh	r3, [r7, #10]
 8019e02:	460b      	mov	r3, r1
 8019e04:	813b      	strh	r3, [r7, #8]
 8019e06:	4613      	mov	r3, r2
 8019e08:	71fb      	strb	r3, [r7, #7]
    eMBErrorCode    eStatus = MB_ENOERR;
 8019e0a:	2300      	movs	r3, #0
 8019e0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    USHORT          iRegIndex , iRegBitIndex , iNReg;
    UCHAR *         pucCoilBuf;
    USHORT          COIL_START;
    USHORT          COIL_NCOILS;
    USHORT          usCoilStart;
    iNReg =  usNCoils / 8 + 1;
 8019e10:	893b      	ldrh	r3, [r7, #8]
 8019e12:	08db      	lsrs	r3, r3, #3
 8019e14:	b29b      	uxth	r3, r3
 8019e16:	3301      	adds	r3, #1
 8019e18:	847b      	strh	r3, [r7, #34]	; 0x22

    pucCoilBuf = ucMCoilBuf[ucMBMasterGetDestAddress() - 1];
 8019e1a:	f000 fca1 	bl	801a760 <ucMBMasterGetDestAddress>
 8019e1e:	4603      	mov	r3, r0
 8019e20:	3b01      	subs	r3, #1
 8019e22:	4a4c      	ldr	r2, [pc, #304]	; (8019f54 <eMBMasterRegCoilsCB+0x164>)
 8019e24:	4413      	add	r3, r2
 8019e26:	61fb      	str	r3, [r7, #28]
    COIL_START = M_COIL_START;
 8019e28:	2300      	movs	r3, #0
 8019e2a:	837b      	strh	r3, [r7, #26]
    COIL_NCOILS = M_COIL_NCOILS;
 8019e2c:	2308      	movs	r3, #8
 8019e2e:	833b      	strh	r3, [r7, #24]
    usCoilStart = usMCoilStart;
 8019e30:	4b49      	ldr	r3, [pc, #292]	; (8019f58 <eMBMasterRegCoilsCB+0x168>)
 8019e32:	881b      	ldrh	r3, [r3, #0]
 8019e34:	82fb      	strh	r3, [r7, #22]

    /* if mode is read,the master will write the received date to buffer. */
    eMode = MB_REG_WRITE;
 8019e36:	2301      	movs	r3, #1
 8019e38:	71fb      	strb	r3, [r7, #7]

    /* it already plus one in modbus function method. */
    usAddress--;
 8019e3a:	897b      	ldrh	r3, [r7, #10]
 8019e3c:	3b01      	subs	r3, #1
 8019e3e:	817b      	strh	r3, [r7, #10]

    if ((usAddress >= COIL_START)
 8019e40:	897a      	ldrh	r2, [r7, #10]
 8019e42:	8b7b      	ldrh	r3, [r7, #26]
 8019e44:	429a      	cmp	r2, r3
 8019e46:	d37b      	bcc.n	8019f40 <eMBMasterRegCoilsCB+0x150>
            && (usAddress + usNCoils <= COIL_START + COIL_NCOILS))
 8019e48:	897a      	ldrh	r2, [r7, #10]
 8019e4a:	893b      	ldrh	r3, [r7, #8]
 8019e4c:	441a      	add	r2, r3
 8019e4e:	8b79      	ldrh	r1, [r7, #26]
 8019e50:	8b3b      	ldrh	r3, [r7, #24]
 8019e52:	440b      	add	r3, r1
 8019e54:	429a      	cmp	r2, r3
 8019e56:	dc73      	bgt.n	8019f40 <eMBMasterRegCoilsCB+0x150>
    {
        iRegIndex = (USHORT) (usAddress - usCoilStart) / 8;
 8019e58:	897a      	ldrh	r2, [r7, #10]
 8019e5a:	8afb      	ldrh	r3, [r7, #22]
 8019e5c:	1ad3      	subs	r3, r2, r3
 8019e5e:	b29b      	uxth	r3, r3
 8019e60:	08db      	lsrs	r3, r3, #3
 8019e62:	84bb      	strh	r3, [r7, #36]	; 0x24
        iRegBitIndex = (USHORT) (usAddress - usCoilStart) % 8;
 8019e64:	897a      	ldrh	r2, [r7, #10]
 8019e66:	8afb      	ldrh	r3, [r7, #22]
 8019e68:	1ad3      	subs	r3, r2, r3
 8019e6a:	b29b      	uxth	r3, r3
 8019e6c:	f003 0307 	and.w	r3, r3, #7
 8019e70:	82bb      	strh	r3, [r7, #20]
        switch (eMode)
 8019e72:	79fb      	ldrb	r3, [r7, #7]
 8019e74:	2b00      	cmp	r3, #0
 8019e76:	d015      	beq.n	8019ea4 <eMBMasterRegCoilsCB+0xb4>
 8019e78:	2b01      	cmp	r3, #1
 8019e7a:	d045      	beq.n	8019f08 <eMBMasterRegCoilsCB+0x118>
 8019e7c:	e063      	b.n	8019f46 <eMBMasterRegCoilsCB+0x156>
        {
         /* read current coil values from the protocol stack. */
        case MB_REG_READ:
            while (iNReg > 0)
            {
                *pucRegBuffer++ = xMBUtilGetBits(&pucCoilBuf[iRegIndex++],
 8019e7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019e80:	1c5a      	adds	r2, r3, #1
 8019e82:	84ba      	strh	r2, [r7, #36]	; 0x24
 8019e84:	461a      	mov	r2, r3
 8019e86:	69fb      	ldr	r3, [r7, #28]
 8019e88:	1898      	adds	r0, r3, r2
 8019e8a:	68fc      	ldr	r4, [r7, #12]
 8019e8c:	1c63      	adds	r3, r4, #1
 8019e8e:	60fb      	str	r3, [r7, #12]
 8019e90:	8abb      	ldrh	r3, [r7, #20]
 8019e92:	2208      	movs	r2, #8
 8019e94:	4619      	mov	r1, r3
 8019e96:	f7fe fcf3 	bl	8018880 <xMBUtilGetBits>
 8019e9a:	4603      	mov	r3, r0
 8019e9c:	7023      	strb	r3, [r4, #0]
                        						 iRegBitIndex, 8);
                iNReg--;
 8019e9e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019ea0:	3b01      	subs	r3, #1
 8019ea2:	847b      	strh	r3, [r7, #34]	; 0x22
            while (iNReg > 0)
 8019ea4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019ea6:	2b00      	cmp	r3, #0
 8019ea8:	d1e9      	bne.n	8019e7e <eMBMasterRegCoilsCB+0x8e>
            }
            pucRegBuffer--;
 8019eaa:	68fb      	ldr	r3, [r7, #12]
 8019eac:	3b01      	subs	r3, #1
 8019eae:	60fb      	str	r3, [r7, #12]
            /* last coils */
            usNCoils = usNCoils % 8;
 8019eb0:	893b      	ldrh	r3, [r7, #8]
 8019eb2:	f003 0307 	and.w	r3, r3, #7
 8019eb6:	813b      	strh	r3, [r7, #8]
            /* filling zero to high bit */
            *pucRegBuffer = *pucRegBuffer << (8 - usNCoils);
 8019eb8:	68fb      	ldr	r3, [r7, #12]
 8019eba:	781b      	ldrb	r3, [r3, #0]
 8019ebc:	461a      	mov	r2, r3
 8019ebe:	893b      	ldrh	r3, [r7, #8]
 8019ec0:	f1c3 0308 	rsb	r3, r3, #8
 8019ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8019ec8:	b2da      	uxtb	r2, r3
 8019eca:	68fb      	ldr	r3, [r7, #12]
 8019ecc:	701a      	strb	r2, [r3, #0]
            *pucRegBuffer = *pucRegBuffer >> (8 - usNCoils);
 8019ece:	68fb      	ldr	r3, [r7, #12]
 8019ed0:	781b      	ldrb	r3, [r3, #0]
 8019ed2:	461a      	mov	r2, r3
 8019ed4:	893b      	ldrh	r3, [r7, #8]
 8019ed6:	f1c3 0308 	rsb	r3, r3, #8
 8019eda:	fa42 f303 	asr.w	r3, r2, r3
 8019ede:	b2da      	uxtb	r2, r3
 8019ee0:	68fb      	ldr	r3, [r7, #12]
 8019ee2:	701a      	strb	r2, [r3, #0]
            break;
 8019ee4:	e02b      	b.n	8019f3e <eMBMasterRegCoilsCB+0x14e>

        /* write current coil values with new values from the protocol stack. */
        case MB_REG_WRITE:
            while (iNReg > 1)
            {
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, 8,
 8019ee6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019ee8:	1c5a      	adds	r2, r3, #1
 8019eea:	84ba      	strh	r2, [r7, #36]	; 0x24
 8019eec:	461a      	mov	r2, r3
 8019eee:	69fb      	ldr	r3, [r7, #28]
 8019ef0:	1898      	adds	r0, r3, r2
                        *pucRegBuffer++);
 8019ef2:	68fb      	ldr	r3, [r7, #12]
 8019ef4:	1c5a      	adds	r2, r3, #1
 8019ef6:	60fa      	str	r2, [r7, #12]
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, 8,
 8019ef8:	781b      	ldrb	r3, [r3, #0]
 8019efa:	8ab9      	ldrh	r1, [r7, #20]
 8019efc:	2208      	movs	r2, #8
 8019efe:	f7fe fc53 	bl	80187a8 <xMBUtilSetBits>
                iNReg--;
 8019f02:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019f04:	3b01      	subs	r3, #1
 8019f06:	847b      	strh	r3, [r7, #34]	; 0x22
            while (iNReg > 1)
 8019f08:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019f0a:	2b01      	cmp	r3, #1
 8019f0c:	d8eb      	bhi.n	8019ee6 <eMBMasterRegCoilsCB+0xf6>
            }
            /* last coils */
            usNCoils = usNCoils % 8;
 8019f0e:	893b      	ldrh	r3, [r7, #8]
 8019f10:	f003 0307 	and.w	r3, r3, #7
 8019f14:	813b      	strh	r3, [r7, #8]
            /* xMBUtilSetBits has bug when ucNBits is zero */
            if (usNCoils != 0)
 8019f16:	893b      	ldrh	r3, [r7, #8]
 8019f18:	2b00      	cmp	r3, #0
 8019f1a:	d00f      	beq.n	8019f3c <eMBMasterRegCoilsCB+0x14c>
            {
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, usNCoils,
 8019f1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019f1e:	1c5a      	adds	r2, r3, #1
 8019f20:	84ba      	strh	r2, [r7, #36]	; 0x24
 8019f22:	461a      	mov	r2, r3
 8019f24:	69fb      	ldr	r3, [r7, #28]
 8019f26:	1898      	adds	r0, r3, r2
 8019f28:	893b      	ldrh	r3, [r7, #8]
 8019f2a:	b2dc      	uxtb	r4, r3
                        *pucRegBuffer++);
 8019f2c:	68fb      	ldr	r3, [r7, #12]
 8019f2e:	1c5a      	adds	r2, r3, #1
 8019f30:	60fa      	str	r2, [r7, #12]
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, usNCoils,
 8019f32:	781b      	ldrb	r3, [r3, #0]
 8019f34:	8ab9      	ldrh	r1, [r7, #20]
 8019f36:	4622      	mov	r2, r4
 8019f38:	f7fe fc36 	bl	80187a8 <xMBUtilSetBits>
            }
            break;
 8019f3c:	bf00      	nop
        switch (eMode)
 8019f3e:	e002      	b.n	8019f46 <eMBMasterRegCoilsCB+0x156>
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 8019f40:	2301      	movs	r3, #1
 8019f42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    return eStatus;
 8019f46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8019f4a:	4618      	mov	r0, r3
 8019f4c:	372c      	adds	r7, #44	; 0x2c
 8019f4e:	46bd      	mov	sp, r7
 8019f50:	bd90      	pop	{r4, r7, pc}
 8019f52:	bf00      	nop
 8019f54:	2000dba8 	.word	0x2000dba8
 8019f58:	20004d76 	.word	0x20004d76

08019f5c <eMBMasterRegDiscreteCB>:
 * @param usNDiscrete discrete number
 *
 * @return result
 */
eMBErrorCode eMBMasterRegDiscreteCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete )
{
 8019f5c:	b590      	push	{r4, r7, lr}
 8019f5e:	b089      	sub	sp, #36	; 0x24
 8019f60:	af00      	add	r7, sp, #0
 8019f62:	6078      	str	r0, [r7, #4]
 8019f64:	460b      	mov	r3, r1
 8019f66:	807b      	strh	r3, [r7, #2]
 8019f68:	4613      	mov	r3, r2
 8019f6a:	803b      	strh	r3, [r7, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 8019f6c:	2300      	movs	r3, #0
 8019f6e:	77fb      	strb	r3, [r7, #31]
    USHORT          iRegIndex , iRegBitIndex , iNReg;
    UCHAR *         pucDiscreteInputBuf;
    USHORT          DISCRETE_INPUT_START;
    USHORT          DISCRETE_INPUT_NDISCRETES;
    USHORT          usDiscreteInputStart;
    iNReg =  usNDiscrete / 8 + 1;
 8019f70:	883b      	ldrh	r3, [r7, #0]
 8019f72:	08db      	lsrs	r3, r3, #3
 8019f74:	b29b      	uxth	r3, r3
 8019f76:	3301      	adds	r3, #1
 8019f78:	837b      	strh	r3, [r7, #26]

    pucDiscreteInputBuf = ucMDiscInBuf[ucMBMasterGetDestAddress() - 1];
 8019f7a:	f000 fbf1 	bl	801a760 <ucMBMasterGetDestAddress>
 8019f7e:	4603      	mov	r3, r0
 8019f80:	3b01      	subs	r3, #1
 8019f82:	4a2d      	ldr	r2, [pc, #180]	; (801a038 <eMBMasterRegDiscreteCB+0xdc>)
 8019f84:	4413      	add	r3, r2
 8019f86:	617b      	str	r3, [r7, #20]
    DISCRETE_INPUT_START = M_DISCRETE_INPUT_START;
 8019f88:	2300      	movs	r3, #0
 8019f8a:	827b      	strh	r3, [r7, #18]
    DISCRETE_INPUT_NDISCRETES = M_DISCRETE_INPUT_NDISCRETES;
 8019f8c:	2308      	movs	r3, #8
 8019f8e:	823b      	strh	r3, [r7, #16]
    usDiscreteInputStart = usMDiscInStart;
 8019f90:	4b2a      	ldr	r3, [pc, #168]	; (801a03c <eMBMasterRegDiscreteCB+0xe0>)
 8019f92:	881b      	ldrh	r3, [r3, #0]
 8019f94:	81fb      	strh	r3, [r7, #14]

    /* it already plus one in modbus function method. */
    usAddress--;
 8019f96:	887b      	ldrh	r3, [r7, #2]
 8019f98:	3b01      	subs	r3, #1
 8019f9a:	807b      	strh	r3, [r7, #2]

    if ((usAddress >= DISCRETE_INPUT_START)
 8019f9c:	887a      	ldrh	r2, [r7, #2]
 8019f9e:	8a7b      	ldrh	r3, [r7, #18]
 8019fa0:	429a      	cmp	r2, r3
 8019fa2:	d341      	bcc.n	801a028 <eMBMasterRegDiscreteCB+0xcc>
            && (usAddress + usNDiscrete    <= DISCRETE_INPUT_START + DISCRETE_INPUT_NDISCRETES))
 8019fa4:	887a      	ldrh	r2, [r7, #2]
 8019fa6:	883b      	ldrh	r3, [r7, #0]
 8019fa8:	441a      	add	r2, r3
 8019faa:	8a79      	ldrh	r1, [r7, #18]
 8019fac:	8a3b      	ldrh	r3, [r7, #16]
 8019fae:	440b      	add	r3, r1
 8019fb0:	429a      	cmp	r2, r3
 8019fb2:	dc39      	bgt.n	801a028 <eMBMasterRegDiscreteCB+0xcc>
    {
        iRegIndex = (USHORT) (usAddress - usDiscreteInputStart) / 8;
 8019fb4:	887a      	ldrh	r2, [r7, #2]
 8019fb6:	89fb      	ldrh	r3, [r7, #14]
 8019fb8:	1ad3      	subs	r3, r2, r3
 8019fba:	b29b      	uxth	r3, r3
 8019fbc:	08db      	lsrs	r3, r3, #3
 8019fbe:	83bb      	strh	r3, [r7, #28]
        iRegBitIndex = (USHORT) (usAddress - usDiscreteInputStart) % 8;
 8019fc0:	887a      	ldrh	r2, [r7, #2]
 8019fc2:	89fb      	ldrh	r3, [r7, #14]
 8019fc4:	1ad3      	subs	r3, r2, r3
 8019fc6:	b29b      	uxth	r3, r3
 8019fc8:	f003 0307 	and.w	r3, r3, #7
 8019fcc:	81bb      	strh	r3, [r7, #12]

        /* write current discrete values with new values from the protocol stack. */
        while (iNReg > 1)
 8019fce:	e010      	b.n	8019ff2 <eMBMasterRegDiscreteCB+0x96>
        {
            xMBUtilSetBits(&pucDiscreteInputBuf[iRegIndex++], iRegBitIndex, 8,
 8019fd0:	8bbb      	ldrh	r3, [r7, #28]
 8019fd2:	1c5a      	adds	r2, r3, #1
 8019fd4:	83ba      	strh	r2, [r7, #28]
 8019fd6:	461a      	mov	r2, r3
 8019fd8:	697b      	ldr	r3, [r7, #20]
 8019fda:	1898      	adds	r0, r3, r2
                    *pucRegBuffer++);
 8019fdc:	687b      	ldr	r3, [r7, #4]
 8019fde:	1c5a      	adds	r2, r3, #1
 8019fe0:	607a      	str	r2, [r7, #4]
            xMBUtilSetBits(&pucDiscreteInputBuf[iRegIndex++], iRegBitIndex, 8,
 8019fe2:	781b      	ldrb	r3, [r3, #0]
 8019fe4:	89b9      	ldrh	r1, [r7, #12]
 8019fe6:	2208      	movs	r2, #8
 8019fe8:	f7fe fbde 	bl	80187a8 <xMBUtilSetBits>
            iNReg--;
 8019fec:	8b7b      	ldrh	r3, [r7, #26]
 8019fee:	3b01      	subs	r3, #1
 8019ff0:	837b      	strh	r3, [r7, #26]
        while (iNReg > 1)
 8019ff2:	8b7b      	ldrh	r3, [r7, #26]
 8019ff4:	2b01      	cmp	r3, #1
 8019ff6:	d8eb      	bhi.n	8019fd0 <eMBMasterRegDiscreteCB+0x74>
        }
        /* last discrete */
        usNDiscrete = usNDiscrete % 8;
 8019ff8:	883b      	ldrh	r3, [r7, #0]
 8019ffa:	f003 0307 	and.w	r3, r3, #7
 8019ffe:	803b      	strh	r3, [r7, #0]
        /* xMBUtilSetBits has bug when ucNBits is zero */
        if (usNDiscrete != 0)
 801a000:	883b      	ldrh	r3, [r7, #0]
 801a002:	2b00      	cmp	r3, #0
 801a004:	d012      	beq.n	801a02c <eMBMasterRegDiscreteCB+0xd0>
        {
            xMBUtilSetBits(&pucDiscreteInputBuf[iRegIndex++], iRegBitIndex,
 801a006:	8bbb      	ldrh	r3, [r7, #28]
 801a008:	1c5a      	adds	r2, r3, #1
 801a00a:	83ba      	strh	r2, [r7, #28]
 801a00c:	461a      	mov	r2, r3
 801a00e:	697b      	ldr	r3, [r7, #20]
 801a010:	1898      	adds	r0, r3, r2
 801a012:	883b      	ldrh	r3, [r7, #0]
 801a014:	b2dc      	uxtb	r4, r3
                    usNDiscrete, *pucRegBuffer++);
 801a016:	687b      	ldr	r3, [r7, #4]
 801a018:	1c5a      	adds	r2, r3, #1
 801a01a:	607a      	str	r2, [r7, #4]
            xMBUtilSetBits(&pucDiscreteInputBuf[iRegIndex++], iRegBitIndex,
 801a01c:	781b      	ldrb	r3, [r3, #0]
 801a01e:	89b9      	ldrh	r1, [r7, #12]
 801a020:	4622      	mov	r2, r4
 801a022:	f7fe fbc1 	bl	80187a8 <xMBUtilSetBits>
        if (usNDiscrete != 0)
 801a026:	e001      	b.n	801a02c <eMBMasterRegDiscreteCB+0xd0>
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 801a028:	2301      	movs	r3, #1
 801a02a:	77fb      	strb	r3, [r7, #31]
    }

    return eStatus;
 801a02c:	7ffb      	ldrb	r3, [r7, #31]
}
 801a02e:	4618      	mov	r0, r3
 801a030:	3724      	adds	r7, #36	; 0x24
 801a032:	46bd      	mov	sp, r7
 801a034:	bd90      	pop	{r4, r7, pc}
 801a036:	bf00      	nop
 801a038:	2000db98 	.word	0x2000db98
 801a03c:	20004d74 	.word	0x20004d74

0801a040 <usMBCRC16>:
    0x41, 0x81, 0x80, 0x40
};

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
 801a040:	b480      	push	{r7}
 801a042:	b085      	sub	sp, #20
 801a044:	af00      	add	r7, sp, #0
 801a046:	6078      	str	r0, [r7, #4]
 801a048:	460b      	mov	r3, r1
 801a04a:	807b      	strh	r3, [r7, #2]
    UCHAR           ucCRCHi = 0xFF;
 801a04c:	23ff      	movs	r3, #255	; 0xff
 801a04e:	73fb      	strb	r3, [r7, #15]
    UCHAR           ucCRCLo = 0xFF;
 801a050:	23ff      	movs	r3, #255	; 0xff
 801a052:	73bb      	strb	r3, [r7, #14]
    int             iIndex;

    while( usLen-- )
 801a054:	e013      	b.n	801a07e <usMBCRC16+0x3e>
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
 801a056:	687b      	ldr	r3, [r7, #4]
 801a058:	1c5a      	adds	r2, r3, #1
 801a05a:	607a      	str	r2, [r7, #4]
 801a05c:	781a      	ldrb	r2, [r3, #0]
 801a05e:	7bbb      	ldrb	r3, [r7, #14]
 801a060:	4053      	eors	r3, r2
 801a062:	b2db      	uxtb	r3, r3
 801a064:	60bb      	str	r3, [r7, #8]
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 801a066:	4a0f      	ldr	r2, [pc, #60]	; (801a0a4 <usMBCRC16+0x64>)
 801a068:	68bb      	ldr	r3, [r7, #8]
 801a06a:	4413      	add	r3, r2
 801a06c:	781a      	ldrb	r2, [r3, #0]
 801a06e:	7bfb      	ldrb	r3, [r7, #15]
 801a070:	4053      	eors	r3, r2
 801a072:	73bb      	strb	r3, [r7, #14]
        ucCRCHi = aucCRCLo[iIndex];
 801a074:	4a0c      	ldr	r2, [pc, #48]	; (801a0a8 <usMBCRC16+0x68>)
 801a076:	68bb      	ldr	r3, [r7, #8]
 801a078:	4413      	add	r3, r2
 801a07a:	781b      	ldrb	r3, [r3, #0]
 801a07c:	73fb      	strb	r3, [r7, #15]
    while( usLen-- )
 801a07e:	887b      	ldrh	r3, [r7, #2]
 801a080:	1e5a      	subs	r2, r3, #1
 801a082:	807a      	strh	r2, [r7, #2]
 801a084:	2b00      	cmp	r3, #0
 801a086:	d1e6      	bne.n	801a056 <usMBCRC16+0x16>
    }
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
 801a088:	7bfb      	ldrb	r3, [r7, #15]
 801a08a:	021b      	lsls	r3, r3, #8
 801a08c:	b21a      	sxth	r2, r3
 801a08e:	7bbb      	ldrb	r3, [r7, #14]
 801a090:	b21b      	sxth	r3, r3
 801a092:	4313      	orrs	r3, r2
 801a094:	b21b      	sxth	r3, r3
 801a096:	b29b      	uxth	r3, r3
}
 801a098:	4618      	mov	r0, r3
 801a09a:	3714      	adds	r7, #20
 801a09c:	46bd      	mov	sp, r7
 801a09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0a2:	4770      	bx	lr
 801a0a4:	0801f178 	.word	0x0801f178
 801a0a8:	0801f278 	.word	0x0801f278

0801a0ac <eMBRTUInit>:
static volatile USHORT usRcvBufferPos;

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBRTUInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 801a0ac:	b580      	push	{r7, lr}
 801a0ae:	b084      	sub	sp, #16
 801a0b0:	af00      	add	r7, sp, #0
 801a0b2:	603a      	str	r2, [r7, #0]
 801a0b4:	461a      	mov	r2, r3
 801a0b6:	4603      	mov	r3, r0
 801a0b8:	71fb      	strb	r3, [r7, #7]
 801a0ba:	460b      	mov	r3, r1
 801a0bc:	71bb      	strb	r3, [r7, #6]
 801a0be:	4613      	mov	r3, r2
 801a0c0:	717b      	strb	r3, [r7, #5]
    eMBErrorCode    eStatus = MB_ENOERR;
 801a0c2:	2300      	movs	r3, #0
 801a0c4:	73fb      	strb	r3, [r7, #15]
    ULONG           usTimerT35_50us;

    ( void )ucSlaveAddress;
    ENTER_CRITICAL_SECTION(  );
 801a0c6:	f7fe fe95 	bl	8018df4 <EnterCriticalSection>

    /* Modbus RTU uses 8 Databits. */
    if( xMBPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
 801a0ca:	797b      	ldrb	r3, [r7, #5]
 801a0cc:	79b8      	ldrb	r0, [r7, #6]
 801a0ce:	2208      	movs	r2, #8
 801a0d0:	6839      	ldr	r1, [r7, #0]
 801a0d2:	f7ff f87d 	bl	80191d0 <xMBPortSerialInit>
 801a0d6:	4603      	mov	r3, r0
 801a0d8:	2b01      	cmp	r3, #1
 801a0da:	d002      	beq.n	801a0e2 <eMBRTUInit+0x36>
    {
        eStatus = MB_EPORTERR;
 801a0dc:	2303      	movs	r3, #3
 801a0de:	73fb      	strb	r3, [r7, #15]
 801a0e0:	e016      	b.n	801a110 <eMBRTUInit+0x64>
    else
    {
        /* If baudrate > 19200 then we should use the fixed timer values
         * t35 = 1750us. Otherwise t35 must be 3.5 times the character time.
         */
        if( ulBaudRate > 19200 )
 801a0e2:	683b      	ldr	r3, [r7, #0]
 801a0e4:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
 801a0e8:	d902      	bls.n	801a0f0 <eMBRTUInit+0x44>
        {
            usTimerT35_50us = 35;       /* 1800us. */
 801a0ea:	2323      	movs	r3, #35	; 0x23
 801a0ec:	60bb      	str	r3, [r7, #8]
 801a0ee:	e005      	b.n	801a0fc <eMBRTUInit+0x50>
             *             = 11 * Ticks_per_1s / Baudrate
             *             = 220000 / Baudrate
             * The reload for t3.5 is 1.5 times this value and similary
             * for t3.5.
             */
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
 801a0f0:	683b      	ldr	r3, [r7, #0]
 801a0f2:	005b      	lsls	r3, r3, #1
 801a0f4:	4a0a      	ldr	r2, [pc, #40]	; (801a120 <eMBRTUInit+0x74>)
 801a0f6:	fbb2 f3f3 	udiv	r3, r2, r3
 801a0fa:	60bb      	str	r3, [r7, #8]
        }
        if( xMBPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
 801a0fc:	68bb      	ldr	r3, [r7, #8]
 801a0fe:	b29b      	uxth	r3, r3
 801a100:	4618      	mov	r0, r3
 801a102:	f7ff fb0b 	bl	801971c <xMBPortTimersInit>
 801a106:	4603      	mov	r3, r0
 801a108:	2b01      	cmp	r3, #1
 801a10a:	d001      	beq.n	801a110 <eMBRTUInit+0x64>
        {
            eStatus = MB_EPORTERR;
 801a10c:	2303      	movs	r3, #3
 801a10e:	73fb      	strb	r3, [r7, #15]
        }
    }
    EXIT_CRITICAL_SECTION(  );
 801a110:	f7fe fe76 	bl	8018e00 <ExitCriticalSection>

    return eStatus;
 801a114:	7bfb      	ldrb	r3, [r7, #15]
}
 801a116:	4618      	mov	r0, r3
 801a118:	3710      	adds	r7, #16
 801a11a:	46bd      	mov	sp, r7
 801a11c:	bd80      	pop	{r7, pc}
 801a11e:	bf00      	nop
 801a120:	00177fa0 	.word	0x00177fa0

0801a124 <eMBRTUStart>:

void
eMBRTUStart( void )
{
 801a124:	b580      	push	{r7, lr}
 801a126:	af00      	add	r7, sp, #0
    ENTER_CRITICAL_SECTION(  );
 801a128:	f7fe fe64 	bl	8018df4 <EnterCriticalSection>
    /* Initially the receiver is in the state STATE_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_RX_INIT;
 801a12c:	4b06      	ldr	r3, [pc, #24]	; (801a148 <eMBRTUStart+0x24>)
 801a12e:	2200      	movs	r2, #0
 801a130:	701a      	strb	r2, [r3, #0]
    vMBPortSerialEnable( TRUE, FALSE );
 801a132:	2100      	movs	r1, #0
 801a134:	2001      	movs	r0, #1
 801a136:	f7fe fffb 	bl	8019130 <vMBPortSerialEnable>
    vMBPortTimersEnable(  );
 801a13a:	f7ff fb2f 	bl	801979c <vMBPortTimersEnable>

    EXIT_CRITICAL_SECTION(  );
 801a13e:	f7fe fe5f 	bl	8018e00 <ExitCriticalSection>
}
 801a142:	bf00      	nop
 801a144:	bd80      	pop	{r7, pc}
 801a146:	bf00      	nop
 801a148:	20004d7d 	.word	0x20004d7d

0801a14c <eMBRTUStop>:

void
eMBRTUStop( void )
{
 801a14c:	b580      	push	{r7, lr}
 801a14e:	af00      	add	r7, sp, #0
    ENTER_CRITICAL_SECTION(  );
 801a150:	f7fe fe50 	bl	8018df4 <EnterCriticalSection>
    vMBPortSerialEnable( FALSE, FALSE );
 801a154:	2100      	movs	r1, #0
 801a156:	2000      	movs	r0, #0
 801a158:	f7fe ffea 	bl	8019130 <vMBPortSerialEnable>
    vMBPortTimersDisable(  );
 801a15c:	f7ff fb30 	bl	80197c0 <vMBPortTimersDisable>
    EXIT_CRITICAL_SECTION(  );
 801a160:	f7fe fe4e 	bl	8018e00 <ExitCriticalSection>
}
 801a164:	bf00      	nop
 801a166:	bd80      	pop	{r7, pc}

0801a168 <eMBRTUReceive>:

eMBErrorCode
eMBRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
 801a168:	b580      	push	{r7, lr}
 801a16a:	b086      	sub	sp, #24
 801a16c:	af00      	add	r7, sp, #0
 801a16e:	60f8      	str	r0, [r7, #12]
 801a170:	60b9      	str	r1, [r7, #8]
 801a172:	607a      	str	r2, [r7, #4]
    BOOL            xFrameReceived = FALSE;
 801a174:	2300      	movs	r3, #0
 801a176:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eStatus = MB_ENOERR;
 801a178:	2300      	movs	r3, #0
 801a17a:	75fb      	strb	r3, [r7, #23]

    (void)(xFrameReceived);

    ENTER_CRITICAL_SECTION(  );
 801a17c:	f7fe fe3a 	bl	8018df4 <EnterCriticalSection>
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );
 801a180:	4b1a      	ldr	r3, [pc, #104]	; (801a1ec <eMBRTUReceive+0x84>)
 801a182:	881b      	ldrh	r3, [r3, #0]
 801a184:	b29b      	uxth	r3, r3
 801a186:	2bff      	cmp	r3, #255	; 0xff
 801a188:	d905      	bls.n	801a196 <eMBRTUReceive+0x2e>
 801a18a:	4b19      	ldr	r3, [pc, #100]	; (801a1f0 <eMBRTUReceive+0x88>)
 801a18c:	4a19      	ldr	r2, [pc, #100]	; (801a1f4 <eMBRTUReceive+0x8c>)
 801a18e:	21a0      	movs	r1, #160	; 0xa0
 801a190:	4819      	ldr	r0, [pc, #100]	; (801a1f8 <eMBRTUReceive+0x90>)
 801a192:	f000 fafd 	bl	801a790 <__assert_func>

    /* Length and CRC check */
    if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
 801a196:	4b15      	ldr	r3, [pc, #84]	; (801a1ec <eMBRTUReceive+0x84>)
 801a198:	881b      	ldrh	r3, [r3, #0]
 801a19a:	b29b      	uxth	r3, r3
 801a19c:	2b03      	cmp	r3, #3
 801a19e:	d91b      	bls.n	801a1d8 <eMBRTUReceive+0x70>
        && ( usMBCRC16( ( UCHAR * ) ucRTUBuf, usRcvBufferPos ) == 0 ) )
 801a1a0:	4b12      	ldr	r3, [pc, #72]	; (801a1ec <eMBRTUReceive+0x84>)
 801a1a2:	881b      	ldrh	r3, [r3, #0]
 801a1a4:	b29b      	uxth	r3, r3
 801a1a6:	4619      	mov	r1, r3
 801a1a8:	4814      	ldr	r0, [pc, #80]	; (801a1fc <eMBRTUReceive+0x94>)
 801a1aa:	f7ff ff49 	bl	801a040 <usMBCRC16>
 801a1ae:	4603      	mov	r3, r0
 801a1b0:	2b00      	cmp	r3, #0
 801a1b2:	d111      	bne.n	801a1d8 <eMBRTUReceive+0x70>
    {
        /* Save the address field. All frames are passed to the upper layed
         * and the decision if a frame is used is done there.
         */
        *pucRcvAddress = ucRTUBuf[MB_SER_PDU_ADDR_OFF];
 801a1b4:	4b11      	ldr	r3, [pc, #68]	; (801a1fc <eMBRTUReceive+0x94>)
 801a1b6:	781b      	ldrb	r3, [r3, #0]
 801a1b8:	b2da      	uxtb	r2, r3
 801a1ba:	68fb      	ldr	r3, [r7, #12]
 801a1bc:	701a      	strb	r2, [r3, #0]

        /* Total length of Modbus-PDU is Modbus-Serial-Line-PDU minus
         * size of address field and CRC checksum.
         */
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 801a1be:	4b0b      	ldr	r3, [pc, #44]	; (801a1ec <eMBRTUReceive+0x84>)
 801a1c0:	881b      	ldrh	r3, [r3, #0]
 801a1c2:	b29b      	uxth	r3, r3
 801a1c4:	3b03      	subs	r3, #3
 801a1c6:	b29a      	uxth	r2, r3
 801a1c8:	687b      	ldr	r3, [r7, #4]
 801a1ca:	801a      	strh	r2, [r3, #0]

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
 801a1cc:	68bb      	ldr	r3, [r7, #8]
 801a1ce:	4a0c      	ldr	r2, [pc, #48]	; (801a200 <eMBRTUReceive+0x98>)
 801a1d0:	601a      	str	r2, [r3, #0]
        xFrameReceived = TRUE;
 801a1d2:	2301      	movs	r3, #1
 801a1d4:	75bb      	strb	r3, [r7, #22]
 801a1d6:	e001      	b.n	801a1dc <eMBRTUReceive+0x74>
    }
    else
    {
        eStatus = MB_EIO;
 801a1d8:	2305      	movs	r3, #5
 801a1da:	75fb      	strb	r3, [r7, #23]
    }

    EXIT_CRITICAL_SECTION(  );
 801a1dc:	f7fe fe10 	bl	8018e00 <ExitCriticalSection>
    return eStatus;
 801a1e0:	7dfb      	ldrb	r3, [r7, #23]
}
 801a1e2:	4618      	mov	r0, r3
 801a1e4:	3718      	adds	r7, #24
 801a1e6:	46bd      	mov	sp, r7
 801a1e8:	bd80      	pop	{r7, pc}
 801a1ea:	bf00      	nop
 801a1ec:	20004d86 	.word	0x20004d86
 801a1f0:	0801ef1c 	.word	0x0801ef1c
 801a1f4:	0801f378 	.word	0x0801f378
 801a1f8:	0801ef44 	.word	0x0801ef44
 801a1fc:	2000dbb8 	.word	0x2000dbb8
 801a200:	2000dbb9 	.word	0x2000dbb9

0801a204 <eMBRTUSend>:

eMBErrorCode
eMBRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
 801a204:	b580      	push	{r7, lr}
 801a206:	b084      	sub	sp, #16
 801a208:	af00      	add	r7, sp, #0
 801a20a:	4603      	mov	r3, r0
 801a20c:	6039      	str	r1, [r7, #0]
 801a20e:	71fb      	strb	r3, [r7, #7]
 801a210:	4613      	mov	r3, r2
 801a212:	80bb      	strh	r3, [r7, #4]
    eMBErrorCode    eStatus = MB_ENOERR;
 801a214:	2300      	movs	r3, #0
 801a216:	73fb      	strb	r3, [r7, #15]
    USHORT          usCRC16;

    ENTER_CRITICAL_SECTION(  );
 801a218:	f7fe fdec 	bl	8018df4 <EnterCriticalSection>

    /* Check if the receiver is still in idle state. If not we where to
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_RX_IDLE )
 801a21c:	4b2d      	ldr	r3, [pc, #180]	; (801a2d4 <eMBRTUSend+0xd0>)
 801a21e:	781b      	ldrb	r3, [r3, #0]
 801a220:	b2db      	uxtb	r3, r3
 801a222:	2b01      	cmp	r3, #1
 801a224:	d14d      	bne.n	801a2c2 <eMBRTUSend+0xbe>
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
 801a226:	683b      	ldr	r3, [r7, #0]
 801a228:	3b01      	subs	r3, #1
 801a22a:	4a2b      	ldr	r2, [pc, #172]	; (801a2d8 <eMBRTUSend+0xd4>)
 801a22c:	6013      	str	r3, [r2, #0]
        usSndBufferCount = 1;
 801a22e:	4b2b      	ldr	r3, [pc, #172]	; (801a2dc <eMBRTUSend+0xd8>)
 801a230:	2201      	movs	r2, #1
 801a232:	801a      	strh	r2, [r3, #0]

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
        pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
 801a234:	4b28      	ldr	r3, [pc, #160]	; (801a2d8 <eMBRTUSend+0xd4>)
 801a236:	681b      	ldr	r3, [r3, #0]
 801a238:	79fa      	ldrb	r2, [r7, #7]
 801a23a:	701a      	strb	r2, [r3, #0]
        usSndBufferCount += usLength;
 801a23c:	4b27      	ldr	r3, [pc, #156]	; (801a2dc <eMBRTUSend+0xd8>)
 801a23e:	881b      	ldrh	r3, [r3, #0]
 801a240:	b29a      	uxth	r2, r3
 801a242:	88bb      	ldrh	r3, [r7, #4]
 801a244:	4413      	add	r3, r2
 801a246:	b29a      	uxth	r2, r3
 801a248:	4b24      	ldr	r3, [pc, #144]	; (801a2dc <eMBRTUSend+0xd8>)
 801a24a:	801a      	strh	r2, [r3, #0]

        /* Calculate CRC16 checksum for Modbus-Serial-Line-PDU. */
        usCRC16 = usMBCRC16( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );
 801a24c:	4b22      	ldr	r3, [pc, #136]	; (801a2d8 <eMBRTUSend+0xd4>)
 801a24e:	681b      	ldr	r3, [r3, #0]
 801a250:	4a22      	ldr	r2, [pc, #136]	; (801a2dc <eMBRTUSend+0xd8>)
 801a252:	8812      	ldrh	r2, [r2, #0]
 801a254:	b292      	uxth	r2, r2
 801a256:	4611      	mov	r1, r2
 801a258:	4618      	mov	r0, r3
 801a25a:	f7ff fef1 	bl	801a040 <usMBCRC16>
 801a25e:	4603      	mov	r3, r0
 801a260:	81bb      	strh	r3, [r7, #12]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
 801a262:	4b1e      	ldr	r3, [pc, #120]	; (801a2dc <eMBRTUSend+0xd8>)
 801a264:	881b      	ldrh	r3, [r3, #0]
 801a266:	b29b      	uxth	r3, r3
 801a268:	1c5a      	adds	r2, r3, #1
 801a26a:	b291      	uxth	r1, r2
 801a26c:	4a1b      	ldr	r2, [pc, #108]	; (801a2dc <eMBRTUSend+0xd8>)
 801a26e:	8011      	strh	r1, [r2, #0]
 801a270:	461a      	mov	r2, r3
 801a272:	89bb      	ldrh	r3, [r7, #12]
 801a274:	b2d9      	uxtb	r1, r3
 801a276:	4b1a      	ldr	r3, [pc, #104]	; (801a2e0 <eMBRTUSend+0xdc>)
 801a278:	5499      	strb	r1, [r3, r2]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 801a27a:	89bb      	ldrh	r3, [r7, #12]
 801a27c:	0a1b      	lsrs	r3, r3, #8
 801a27e:	b299      	uxth	r1, r3
 801a280:	4b16      	ldr	r3, [pc, #88]	; (801a2dc <eMBRTUSend+0xd8>)
 801a282:	881b      	ldrh	r3, [r3, #0]
 801a284:	b29b      	uxth	r3, r3
 801a286:	1c5a      	adds	r2, r3, #1
 801a288:	b290      	uxth	r0, r2
 801a28a:	4a14      	ldr	r2, [pc, #80]	; (801a2dc <eMBRTUSend+0xd8>)
 801a28c:	8010      	strh	r0, [r2, #0]
 801a28e:	461a      	mov	r2, r3
 801a290:	b2c9      	uxtb	r1, r1
 801a292:	4b13      	ldr	r3, [pc, #76]	; (801a2e0 <eMBRTUSend+0xdc>)
 801a294:	5499      	strb	r1, [r3, r2]
        /*NOTE: the following instruction must be added when use RS485 module
         * cause when MB Poll receive response frame, it lose the last byte which is
         * High byte CRC
         */
		#if MB_RTU_SLAVE_USE_RS485
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 801a296:	89bb      	ldrh	r3, [r7, #12]
 801a298:	0a1b      	lsrs	r3, r3, #8
 801a29a:	b299      	uxth	r1, r3
 801a29c:	4b0f      	ldr	r3, [pc, #60]	; (801a2dc <eMBRTUSend+0xd8>)
 801a29e:	881b      	ldrh	r3, [r3, #0]
 801a2a0:	b29b      	uxth	r3, r3
 801a2a2:	1c5a      	adds	r2, r3, #1
 801a2a4:	b290      	uxth	r0, r2
 801a2a6:	4a0d      	ldr	r2, [pc, #52]	; (801a2dc <eMBRTUSend+0xd8>)
 801a2a8:	8010      	strh	r0, [r2, #0]
 801a2aa:	461a      	mov	r2, r3
 801a2ac:	b2c9      	uxtb	r1, r1
 801a2ae:	4b0c      	ldr	r3, [pc, #48]	; (801a2e0 <eMBRTUSend+0xdc>)
 801a2b0:	5499      	strb	r1, [r3, r2]
		#endif

        /*  Activate the transmitter. */
        eSndState = STATE_TX_XMIT;
 801a2b2:	4b0c      	ldr	r3, [pc, #48]	; (801a2e4 <eMBRTUSend+0xe0>)
 801a2b4:	2201      	movs	r2, #1
 801a2b6:	701a      	strb	r2, [r3, #0]
        vMBPortSerialEnable( FALSE, TRUE );
 801a2b8:	2101      	movs	r1, #1
 801a2ba:	2000      	movs	r0, #0
 801a2bc:	f7fe ff38 	bl	8019130 <vMBPortSerialEnable>
 801a2c0:	e001      	b.n	801a2c6 <eMBRTUSend+0xc2>
    }
    else
    {
        eStatus = MB_EIO;
 801a2c2:	2305      	movs	r3, #5
 801a2c4:	73fb      	strb	r3, [r7, #15]
    }
    EXIT_CRITICAL_SECTION(  );
 801a2c6:	f7fe fd9b 	bl	8018e00 <ExitCriticalSection>
    return eStatus;
 801a2ca:	7bfb      	ldrb	r3, [r7, #15]
}
 801a2cc:	4618      	mov	r0, r3
 801a2ce:	3710      	adds	r7, #16
 801a2d0:	46bd      	mov	sp, r7
 801a2d2:	bd80      	pop	{r7, pc}
 801a2d4:	20004d7d 	.word	0x20004d7d
 801a2d8:	20004d80 	.word	0x20004d80
 801a2dc:	20004d84 	.word	0x20004d84
 801a2e0:	2000dbb8 	.word	0x2000dbb8
 801a2e4:	20004d7c 	.word	0x20004d7c

0801a2e8 <xMBRTUReceiveFSM>:

BOOL
xMBRTUReceiveFSM( void )		//run in UART_ISR - thread mode
{
 801a2e8:	b580      	push	{r7, lr}
 801a2ea:	b082      	sub	sp, #8
 801a2ec:	af00      	add	r7, sp, #0
    BOOL            xTaskNeedSwitch = FALSE;
 801a2ee:	2300      	movs	r3, #0
 801a2f0:	71fb      	strb	r3, [r7, #7]
    UCHAR           ucByte;

    assert( eSndState == STATE_TX_IDLE );
 801a2f2:	4b2a      	ldr	r3, [pc, #168]	; (801a39c <xMBRTUReceiveFSM+0xb4>)
 801a2f4:	781b      	ldrb	r3, [r3, #0]
 801a2f6:	b2db      	uxtb	r3, r3
 801a2f8:	2b00      	cmp	r3, #0
 801a2fa:	d005      	beq.n	801a308 <xMBRTUReceiveFSM+0x20>
 801a2fc:	4b28      	ldr	r3, [pc, #160]	; (801a3a0 <xMBRTUReceiveFSM+0xb8>)
 801a2fe:	4a29      	ldr	r2, [pc, #164]	; (801a3a4 <xMBRTUReceiveFSM+0xbc>)
 801a300:	21f2      	movs	r1, #242	; 0xf2
 801a302:	4829      	ldr	r0, [pc, #164]	; (801a3a8 <xMBRTUReceiveFSM+0xc0>)
 801a304:	f000 fa44 	bl	801a790 <__assert_func>

    /* Always read the character. */
    ( void )xMBPortSerialGetByte( ( CHAR * ) & ucByte );
 801a308:	1dbb      	adds	r3, r7, #6
 801a30a:	4618      	mov	r0, r3
 801a30c:	f7fe ff86 	bl	801921c <xMBPortSerialGetByte>

    switch ( eRcvState )
 801a310:	4b26      	ldr	r3, [pc, #152]	; (801a3ac <xMBRTUReceiveFSM+0xc4>)
 801a312:	781b      	ldrb	r3, [r3, #0]
 801a314:	b2db      	uxtb	r3, r3
 801a316:	2b03      	cmp	r3, #3
 801a318:	d83b      	bhi.n	801a392 <xMBRTUReceiveFSM+0xaa>
 801a31a:	a201      	add	r2, pc, #4	; (adr r2, 801a320 <xMBRTUReceiveFSM+0x38>)
 801a31c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a320:	0801a331 	.word	0x0801a331
 801a324:	0801a33d 	.word	0x0801a33d
 801a328:	0801a365 	.word	0x0801a365
 801a32c:	0801a337 	.word	0x0801a337
    {
        /* If we have received a character in the init state we have to
         * wait until the frame is finished.
         */
    case STATE_RX_INIT:
        vMBPortTimersEnable(  );
 801a330:	f7ff fa34 	bl	801979c <vMBPortTimersEnable>
        break;
 801a334:	e02d      	b.n	801a392 <xMBRTUReceiveFSM+0xaa>

        /* In the error state we wait until all characters in the
         * damaged frame are transmitted.
         */
    case STATE_RX_ERROR:
        vMBPortTimersEnable(  );
 801a336:	f7ff fa31 	bl	801979c <vMBPortTimersEnable>
        break;
 801a33a:	e02a      	b.n	801a392 <xMBRTUReceiveFSM+0xaa>
        /* In the idle state we wait for a new character. If a character
         * is received the t1.5 and t3.5 timers are started and the
         * receiver is in the state STATE_RX_RECEIVCE.
         */
    case STATE_RX_IDLE:
        usRcvBufferPos = 0;
 801a33c:	4b1c      	ldr	r3, [pc, #112]	; (801a3b0 <xMBRTUReceiveFSM+0xc8>)
 801a33e:	2200      	movs	r2, #0
 801a340:	801a      	strh	r2, [r3, #0]
        ucRTUBuf[usRcvBufferPos++] = ucByte;
 801a342:	4b1b      	ldr	r3, [pc, #108]	; (801a3b0 <xMBRTUReceiveFSM+0xc8>)
 801a344:	881b      	ldrh	r3, [r3, #0]
 801a346:	b29b      	uxth	r3, r3
 801a348:	1c5a      	adds	r2, r3, #1
 801a34a:	b291      	uxth	r1, r2
 801a34c:	4a18      	ldr	r2, [pc, #96]	; (801a3b0 <xMBRTUReceiveFSM+0xc8>)
 801a34e:	8011      	strh	r1, [r2, #0]
 801a350:	461a      	mov	r2, r3
 801a352:	79b9      	ldrb	r1, [r7, #6]
 801a354:	4b17      	ldr	r3, [pc, #92]	; (801a3b4 <xMBRTUReceiveFSM+0xcc>)
 801a356:	5499      	strb	r1, [r3, r2]
        eRcvState = STATE_RX_RCV;
 801a358:	4b14      	ldr	r3, [pc, #80]	; (801a3ac <xMBRTUReceiveFSM+0xc4>)
 801a35a:	2202      	movs	r2, #2
 801a35c:	701a      	strb	r2, [r3, #0]

        /* Enable t3.5 timers. */
        vMBPortTimersEnable(  );
 801a35e:	f7ff fa1d 	bl	801979c <vMBPortTimersEnable>
        break;
 801a362:	e016      	b.n	801a392 <xMBRTUReceiveFSM+0xaa>
         * every character received. If more than the maximum possible
         * number of bytes in a modbus frame is received the frame is
         * ignored.
         */
    case STATE_RX_RCV:
        if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
 801a364:	4b12      	ldr	r3, [pc, #72]	; (801a3b0 <xMBRTUReceiveFSM+0xc8>)
 801a366:	881b      	ldrh	r3, [r3, #0]
 801a368:	b29b      	uxth	r3, r3
 801a36a:	2bff      	cmp	r3, #255	; 0xff
 801a36c:	d80b      	bhi.n	801a386 <xMBRTUReceiveFSM+0x9e>
        {
            ucRTUBuf[usRcvBufferPos++] = ucByte;
 801a36e:	4b10      	ldr	r3, [pc, #64]	; (801a3b0 <xMBRTUReceiveFSM+0xc8>)
 801a370:	881b      	ldrh	r3, [r3, #0]
 801a372:	b29b      	uxth	r3, r3
 801a374:	1c5a      	adds	r2, r3, #1
 801a376:	b291      	uxth	r1, r2
 801a378:	4a0d      	ldr	r2, [pc, #52]	; (801a3b0 <xMBRTUReceiveFSM+0xc8>)
 801a37a:	8011      	strh	r1, [r2, #0]
 801a37c:	461a      	mov	r2, r3
 801a37e:	79b9      	ldrb	r1, [r7, #6]
 801a380:	4b0c      	ldr	r3, [pc, #48]	; (801a3b4 <xMBRTUReceiveFSM+0xcc>)
 801a382:	5499      	strb	r1, [r3, r2]
 801a384:	e002      	b.n	801a38c <xMBRTUReceiveFSM+0xa4>
        }
        else
        {
            eRcvState = STATE_RX_ERROR;
 801a386:	4b09      	ldr	r3, [pc, #36]	; (801a3ac <xMBRTUReceiveFSM+0xc4>)
 801a388:	2203      	movs	r2, #3
 801a38a:	701a      	strb	r2, [r3, #0]
        }
        vMBPortTimersEnable(  );
 801a38c:	f7ff fa06 	bl	801979c <vMBPortTimersEnable>
        break;
 801a390:	bf00      	nop
    }
    return xTaskNeedSwitch;
 801a392:	79fb      	ldrb	r3, [r7, #7]
}
 801a394:	4618      	mov	r0, r3
 801a396:	3708      	adds	r7, #8
 801a398:	46bd      	mov	sp, r7
 801a39a:	bd80      	pop	{r7, pc}
 801a39c:	20004d7c 	.word	0x20004d7c
 801a3a0:	0801ef68 	.word	0x0801ef68
 801a3a4:	0801f388 	.word	0x0801f388
 801a3a8:	0801ef44 	.word	0x0801ef44
 801a3ac:	20004d7d 	.word	0x20004d7d
 801a3b0:	20004d86 	.word	0x20004d86
 801a3b4:	2000dbb8 	.word	0x2000dbb8

0801a3b8 <xMBRTUTransmitFSM>:

BOOL
xMBRTUTransmitFSM( void )	//run in UART_ISR - thread mode
{
 801a3b8:	b580      	push	{r7, lr}
 801a3ba:	b082      	sub	sp, #8
 801a3bc:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 801a3be:	2300      	movs	r3, #0
 801a3c0:	71fb      	strb	r3, [r7, #7]

    assert( eRcvState == STATE_RX_IDLE );
 801a3c2:	4b22      	ldr	r3, [pc, #136]	; (801a44c <xMBRTUTransmitFSM+0x94>)
 801a3c4:	781b      	ldrb	r3, [r3, #0]
 801a3c6:	b2db      	uxtb	r3, r3
 801a3c8:	2b01      	cmp	r3, #1
 801a3ca:	d006      	beq.n	801a3da <xMBRTUTransmitFSM+0x22>
 801a3cc:	4b20      	ldr	r3, [pc, #128]	; (801a450 <xMBRTUTransmitFSM+0x98>)
 801a3ce:	4a21      	ldr	r2, [pc, #132]	; (801a454 <xMBRTUTransmitFSM+0x9c>)
 801a3d0:	f240 112d 	movw	r1, #301	; 0x12d
 801a3d4:	4820      	ldr	r0, [pc, #128]	; (801a458 <xMBRTUTransmitFSM+0xa0>)
 801a3d6:	f000 f9db 	bl	801a790 <__assert_func>

    switch ( eSndState )
 801a3da:	4b20      	ldr	r3, [pc, #128]	; (801a45c <xMBRTUTransmitFSM+0xa4>)
 801a3dc:	781b      	ldrb	r3, [r3, #0]
 801a3de:	b2db      	uxtb	r3, r3
 801a3e0:	2b00      	cmp	r3, #0
 801a3e2:	d002      	beq.n	801a3ea <xMBRTUTransmitFSM+0x32>
 801a3e4:	2b01      	cmp	r3, #1
 801a3e6:	d005      	beq.n	801a3f4 <xMBRTUTransmitFSM+0x3c>
 801a3e8:	e02a      	b.n	801a440 <xMBRTUTransmitFSM+0x88>
    {
        /* We should not get a transmitter event if the transmitter is in
         * idle state.  */
    case STATE_TX_IDLE:
        /* enable receiver/disable transmitter. */
        vMBPortSerialEnable( TRUE, FALSE );
 801a3ea:	2100      	movs	r1, #0
 801a3ec:	2001      	movs	r0, #1
 801a3ee:	f7fe fe9f 	bl	8019130 <vMBPortSerialEnable>
        break;
 801a3f2:	e025      	b.n	801a440 <xMBRTUTransmitFSM+0x88>

    case STATE_TX_XMIT:
        /* check if we are finished. */
        if( usSndBufferCount != 0 )
 801a3f4:	4b1a      	ldr	r3, [pc, #104]	; (801a460 <xMBRTUTransmitFSM+0xa8>)
 801a3f6:	881b      	ldrh	r3, [r3, #0]
 801a3f8:	b29b      	uxth	r3, r3
 801a3fa:	2b00      	cmp	r3, #0
 801a3fc:	d013      	beq.n	801a426 <xMBRTUTransmitFSM+0x6e>
        {
            xMBPortSerialPutByte( ( CHAR )*pucSndBufferCur );
 801a3fe:	4b19      	ldr	r3, [pc, #100]	; (801a464 <xMBRTUTransmitFSM+0xac>)
 801a400:	681b      	ldr	r3, [r3, #0]
 801a402:	781b      	ldrb	r3, [r3, #0]
 801a404:	b2db      	uxtb	r3, r3
 801a406:	4618      	mov	r0, r3
 801a408:	f7fe fef6 	bl	80191f8 <xMBPortSerialPutByte>
            pucSndBufferCur++;  /* next byte in sendbuffer. */
 801a40c:	4b15      	ldr	r3, [pc, #84]	; (801a464 <xMBRTUTransmitFSM+0xac>)
 801a40e:	681b      	ldr	r3, [r3, #0]
 801a410:	3301      	adds	r3, #1
 801a412:	4a14      	ldr	r2, [pc, #80]	; (801a464 <xMBRTUTransmitFSM+0xac>)
 801a414:	6013      	str	r3, [r2, #0]
            usSndBufferCount--;
 801a416:	4b12      	ldr	r3, [pc, #72]	; (801a460 <xMBRTUTransmitFSM+0xa8>)
 801a418:	881b      	ldrh	r3, [r3, #0]
 801a41a:	b29b      	uxth	r3, r3
 801a41c:	3b01      	subs	r3, #1
 801a41e:	b29a      	uxth	r2, r3
 801a420:	4b0f      	ldr	r3, [pc, #60]	; (801a460 <xMBRTUTransmitFSM+0xa8>)
 801a422:	801a      	strh	r2, [r3, #0]
            /* Disable transmitter. This prevents another transmit buffer
             * empty interrupt. */
            vMBPortSerialEnable( TRUE, FALSE );
            eSndState = STATE_TX_IDLE;
        }
        break;
 801a424:	e00b      	b.n	801a43e <xMBRTUTransmitFSM+0x86>
            xNeedPoll = xMBPortEventPostFromISR( EV_FRAME_SENT );
 801a426:	2008      	movs	r0, #8
 801a428:	f7fe fd24 	bl	8018e74 <xMBPortEventPostFromISR>
 801a42c:	4603      	mov	r3, r0
 801a42e:	71fb      	strb	r3, [r7, #7]
            vMBPortSerialEnable( TRUE, FALSE );
 801a430:	2100      	movs	r1, #0
 801a432:	2001      	movs	r0, #1
 801a434:	f7fe fe7c 	bl	8019130 <vMBPortSerialEnable>
            eSndState = STATE_TX_IDLE;
 801a438:	4b08      	ldr	r3, [pc, #32]	; (801a45c <xMBRTUTransmitFSM+0xa4>)
 801a43a:	2200      	movs	r2, #0
 801a43c:	701a      	strb	r2, [r3, #0]
        break;
 801a43e:	bf00      	nop
    }

    return xNeedPoll;
 801a440:	79fb      	ldrb	r3, [r7, #7]
}
 801a442:	4618      	mov	r0, r3
 801a444:	3708      	adds	r7, #8
 801a446:	46bd      	mov	sp, r7
 801a448:	bd80      	pop	{r7, pc}
 801a44a:	bf00      	nop
 801a44c:	20004d7d 	.word	0x20004d7d
 801a450:	0801ef84 	.word	0x0801ef84
 801a454:	0801f39c 	.word	0x0801f39c
 801a458:	0801ef44 	.word	0x0801ef44
 801a45c:	20004d7c 	.word	0x20004d7c
 801a460:	20004d84 	.word	0x20004d84
 801a464:	20004d80 	.word	0x20004d80

0801a468 <xMBRTUTimerT35Expired>:

BOOL
xMBRTUTimerT35Expired( void )
{
 801a468:	b580      	push	{r7, lr}
 801a46a:	b082      	sub	sp, #8
 801a46c:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 801a46e:	2300      	movs	r3, #0
 801a470:	71fb      	strb	r3, [r7, #7]

    switch ( eRcvState )
 801a472:	4b1c      	ldr	r3, [pc, #112]	; (801a4e4 <xMBRTUTimerT35Expired+0x7c>)
 801a474:	781b      	ldrb	r3, [r3, #0]
 801a476:	b2db      	uxtb	r3, r3
 801a478:	2b03      	cmp	r3, #3
 801a47a:	d028      	beq.n	801a4ce <xMBRTUTimerT35Expired+0x66>
 801a47c:	2b03      	cmp	r3, #3
 801a47e:	dc10      	bgt.n	801a4a2 <xMBRTUTimerT35Expired+0x3a>
 801a480:	2b00      	cmp	r3, #0
 801a482:	d002      	beq.n	801a48a <xMBRTUTimerT35Expired+0x22>
 801a484:	2b02      	cmp	r3, #2
 801a486:	d006      	beq.n	801a496 <xMBRTUTimerT35Expired+0x2e>
 801a488:	e00b      	b.n	801a4a2 <xMBRTUTimerT35Expired+0x3a>
    {
        /* Timer t35 expired. Startup phase is finished. */
    case STATE_RX_INIT:
        xNeedPoll = xMBPortEventPostFromISR( EV_READY );
 801a48a:	2001      	movs	r0, #1
 801a48c:	f7fe fcf2 	bl	8018e74 <xMBPortEventPostFromISR>
 801a490:	4603      	mov	r3, r0
 801a492:	71fb      	strb	r3, [r7, #7]
        break;
 801a494:	e01c      	b.n	801a4d0 <xMBRTUTimerT35Expired+0x68>

        /* A frame was received and t35 expired. Notify the listener that
         * a new frame was received. */
    case STATE_RX_RCV:
    	//vMBPortSerialEnable( FALSE, FALSE );
        xNeedPoll = xMBPortEventPostFromISR( EV_FRAME_RECEIVED );
 801a496:	2002      	movs	r0, #2
 801a498:	f7fe fcec 	bl	8018e74 <xMBPortEventPostFromISR>
 801a49c:	4603      	mov	r3, r0
 801a49e:	71fb      	strb	r3, [r7, #7]
        break;
 801a4a0:	e016      	b.n	801a4d0 <xMBRTUTimerT35Expired+0x68>
    case STATE_RX_ERROR:
        break;

        /* Function called in an illegal state. */
    default:
        assert( ( eRcvState == STATE_RX_INIT ) ||
 801a4a2:	4b10      	ldr	r3, [pc, #64]	; (801a4e4 <xMBRTUTimerT35Expired+0x7c>)
 801a4a4:	781b      	ldrb	r3, [r3, #0]
 801a4a6:	b2db      	uxtb	r3, r3
 801a4a8:	2b00      	cmp	r3, #0
 801a4aa:	d011      	beq.n	801a4d0 <xMBRTUTimerT35Expired+0x68>
 801a4ac:	4b0d      	ldr	r3, [pc, #52]	; (801a4e4 <xMBRTUTimerT35Expired+0x7c>)
 801a4ae:	781b      	ldrb	r3, [r3, #0]
 801a4b0:	b2db      	uxtb	r3, r3
 801a4b2:	2b02      	cmp	r3, #2
 801a4b4:	d00c      	beq.n	801a4d0 <xMBRTUTimerT35Expired+0x68>
 801a4b6:	4b0b      	ldr	r3, [pc, #44]	; (801a4e4 <xMBRTUTimerT35Expired+0x7c>)
 801a4b8:	781b      	ldrb	r3, [r3, #0]
 801a4ba:	b2db      	uxtb	r3, r3
 801a4bc:	2b03      	cmp	r3, #3
 801a4be:	d007      	beq.n	801a4d0 <xMBRTUTimerT35Expired+0x68>
 801a4c0:	4b09      	ldr	r3, [pc, #36]	; (801a4e8 <xMBRTUTimerT35Expired+0x80>)
 801a4c2:	4a0a      	ldr	r2, [pc, #40]	; (801a4ec <xMBRTUTimerT35Expired+0x84>)
 801a4c4:	f240 1167 	movw	r1, #359	; 0x167
 801a4c8:	4809      	ldr	r0, [pc, #36]	; (801a4f0 <xMBRTUTimerT35Expired+0x88>)
 801a4ca:	f000 f961 	bl	801a790 <__assert_func>
        break;
 801a4ce:	bf00      	nop
                ( eRcvState == STATE_RX_RCV ) || ( eRcvState == STATE_RX_ERROR ) );
    }

    vMBPortTimersDisable(  );
 801a4d0:	f7ff f976 	bl	80197c0 <vMBPortTimersDisable>
    eRcvState = STATE_RX_IDLE;
 801a4d4:	4b03      	ldr	r3, [pc, #12]	; (801a4e4 <xMBRTUTimerT35Expired+0x7c>)
 801a4d6:	2201      	movs	r2, #1
 801a4d8:	701a      	strb	r2, [r3, #0]

    return xNeedPoll;
 801a4da:	79fb      	ldrb	r3, [r7, #7]
}
 801a4dc:	4618      	mov	r0, r3
 801a4de:	3708      	adds	r7, #8
 801a4e0:	46bd      	mov	sp, r7
 801a4e2:	bd80      	pop	{r7, pc}
 801a4e4:	20004d7d 	.word	0x20004d7d
 801a4e8:	0801efa0 	.word	0x0801efa0
 801a4ec:	0801f3b0 	.word	0x0801f3b0
 801a4f0:	0801ef44 	.word	0x0801ef44

0801a4f4 <eMBMasterTCPDoInit>:
};

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBMasterTCPDoInit( USHORT ucTCPPort )
{
 801a4f4:	b580      	push	{r7, lr}
 801a4f6:	b084      	sub	sp, #16
 801a4f8:	af00      	add	r7, sp, #0
 801a4fa:	4603      	mov	r3, r0
 801a4fc:	80fb      	strh	r3, [r7, #6]
    eMBErrorCode    eStatus = MB_ENOERR;
 801a4fe:	2300      	movs	r3, #0
 801a500:	73fb      	strb	r3, [r7, #15]

    if( xMBMasterTCPPortInit( ucTCPPort ) == FALSE )
 801a502:	88fb      	ldrh	r3, [r7, #6]
 801a504:	4618      	mov	r0, r3
 801a506:	f7fe fedd 	bl	80192c4 <xMBMasterTCPPortInit>
 801a50a:	4603      	mov	r3, r0
 801a50c:	2b00      	cmp	r3, #0
 801a50e:	d101      	bne.n	801a514 <eMBMasterTCPDoInit+0x20>
    {
        eStatus = MB_EPORTERR;
 801a510:	2303      	movs	r3, #3
 801a512:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 801a514:	7bfb      	ldrb	r3, [r7, #15]
}
 801a516:	4618      	mov	r0, r3
 801a518:	3710      	adds	r7, #16
 801a51a:	46bd      	mov	sp, r7
 801a51c:	bd80      	pop	{r7, pc}
	...

0801a520 <vMBMasterGetMBAPSndBuf>:


}

void vMBMasterGetMBAPSndBuf( UCHAR ** pucFrame, USHORT *pusLength )
{
 801a520:	b480      	push	{r7}
 801a522:	b083      	sub	sp, #12
 801a524:	af00      	add	r7, sp, #0
 801a526:	6078      	str	r0, [r7, #4]
 801a528:	6039      	str	r1, [r7, #0]

	usMBAP_TCP_TID++;
 801a52a:	4b1c      	ldr	r3, [pc, #112]	; (801a59c <vMBMasterGetMBAPSndBuf+0x7c>)
 801a52c:	881b      	ldrh	r3, [r3, #0]
 801a52e:	3301      	adds	r3, #1
 801a530:	b29a      	uxth	r2, r3
 801a532:	4b1a      	ldr	r3, [pc, #104]	; (801a59c <vMBMasterGetMBAPSndBuf+0x7c>)
 801a534:	801a      	strh	r2, [r3, #0]
	//trước mắt cứ code theo kiểu "Only one Request at a time" cho chạy được đã
	ucMasterMBAPSndBuf[MBAP_TCP_TID_OFFSET] 	= usMBAP_TCP_TID >> 8U;	//high
 801a536:	4b19      	ldr	r3, [pc, #100]	; (801a59c <vMBMasterGetMBAPSndBuf+0x7c>)
 801a538:	881b      	ldrh	r3, [r3, #0]
 801a53a:	0a1b      	lsrs	r3, r3, #8
 801a53c:	b29b      	uxth	r3, r3
 801a53e:	b2da      	uxtb	r2, r3
 801a540:	4b17      	ldr	r3, [pc, #92]	; (801a5a0 <vMBMasterGetMBAPSndBuf+0x80>)
 801a542:	701a      	strb	r2, [r3, #0]
	ucMasterMBAPSndBuf[MBAP_TCP_TID_OFFSET + 1] = usMBAP_TCP_TID & 0XFF;//low
 801a544:	4b15      	ldr	r3, [pc, #84]	; (801a59c <vMBMasterGetMBAPSndBuf+0x7c>)
 801a546:	881b      	ldrh	r3, [r3, #0]
 801a548:	b2da      	uxtb	r2, r3
 801a54a:	4b15      	ldr	r3, [pc, #84]	; (801a5a0 <vMBMasterGetMBAPSndBuf+0x80>)
 801a54c:	705a      	strb	r2, [r3, #1]

	ucMasterMBAPSndBuf[MBAP_TCP_PID_OFFSET] 	= MBAP_TCP_PID;
 801a54e:	4b14      	ldr	r3, [pc, #80]	; (801a5a0 <vMBMasterGetMBAPSndBuf+0x80>)
 801a550:	2200      	movs	r2, #0
 801a552:	709a      	strb	r2, [r3, #2]
	ucMasterMBAPSndBuf[MBAP_TCP_PID_OFFSET + 1] = MBAP_TCP_PID;
 801a554:	4b12      	ldr	r3, [pc, #72]	; (801a5a0 <vMBMasterGetMBAPSndBuf+0x80>)
 801a556:	2200      	movs	r2, #0
 801a558:	70da      	strb	r2, [r3, #3]

	ucMasterMBAPSndBuf[MBAP_TCP_LEN_OFFSET] 	= ( usMasterSendPDULength + 1 ) >> 8U;
 801a55a:	4b12      	ldr	r3, [pc, #72]	; (801a5a4 <vMBMasterGetMBAPSndBuf+0x84>)
 801a55c:	881b      	ldrh	r3, [r3, #0]
 801a55e:	3301      	adds	r3, #1
 801a560:	121b      	asrs	r3, r3, #8
 801a562:	b2da      	uxtb	r2, r3
 801a564:	4b0e      	ldr	r3, [pc, #56]	; (801a5a0 <vMBMasterGetMBAPSndBuf+0x80>)
 801a566:	711a      	strb	r2, [r3, #4]
	ucMasterMBAPSndBuf[MBAP_TCP_LEN_OFFSET + 1] = ( usMasterSendPDULength + 1 ) & 0xFF;
 801a568:	4b0e      	ldr	r3, [pc, #56]	; (801a5a4 <vMBMasterGetMBAPSndBuf+0x84>)
 801a56a:	881b      	ldrh	r3, [r3, #0]
 801a56c:	b2db      	uxtb	r3, r3
 801a56e:	3301      	adds	r3, #1
 801a570:	b2da      	uxtb	r2, r3
 801a572:	4b0b      	ldr	r3, [pc, #44]	; (801a5a0 <vMBMasterGetMBAPSndBuf+0x80>)
 801a574:	715a      	strb	r2, [r3, #5]

	ucMasterMBAPSndBuf[MBAP_TCP_UID_OFFSET]   	= MBAP_TCP_UID;	//should be a variable todo
 801a576:	4b0a      	ldr	r3, [pc, #40]	; (801a5a0 <vMBMasterGetMBAPSndBuf+0x80>)
 801a578:	2201      	movs	r2, #1
 801a57a:	719a      	strb	r2, [r3, #6]

	*pucFrame = ( UCHAR * ) ucMasterMBAPSndBuf;
 801a57c:	687b      	ldr	r3, [r7, #4]
 801a57e:	4a08      	ldr	r2, [pc, #32]	; (801a5a0 <vMBMasterGetMBAPSndBuf+0x80>)
 801a580:	601a      	str	r2, [r3, #0]
	*pusLength = usMasterSendPDULength + MBAP_TCP_FUNC_OFFSET;
 801a582:	4b08      	ldr	r3, [pc, #32]	; (801a5a4 <vMBMasterGetMBAPSndBuf+0x84>)
 801a584:	881b      	ldrh	r3, [r3, #0]
 801a586:	3307      	adds	r3, #7
 801a588:	b29a      	uxth	r2, r3
 801a58a:	683b      	ldr	r3, [r7, #0]
 801a58c:	801a      	strh	r2, [r3, #0]

}
 801a58e:	bf00      	nop
 801a590:	370c      	adds	r7, #12
 801a592:	46bd      	mov	sp, r7
 801a594:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a598:	4770      	bx	lr
 801a59a:	bf00      	nop
 801a59c:	20004d88 	.word	0x20004d88
 801a5a0:	20004d8c 	.word	0x20004d8c
 801a5a4:	20004e90 	.word	0x20004e90

0801a5a8 <eMBMasterCheckMBAPRcvBuf>:
}


eMBException eExtTCPMaster = MB_EX_NONE;

eMBErrorCode eMBMasterCheckMBAPRcvBuf(UCHAR  *ucMasterMBAPRcvBuf, USHORT usMasterRcvMBAPLength){
 801a5a8:	b580      	push	{r7, lr}
 801a5aa:	b088      	sub	sp, #32
 801a5ac:	af00      	add	r7, sp, #0
 801a5ae:	6078      	str	r0, [r7, #4]
 801a5b0:	460b      	mov	r3, r1
 801a5b2:	807b      	strh	r3, [r7, #2]
	eMBErrorCode eStatus = MB_ENOERR;
 801a5b4:	2300      	movs	r3, #0
 801a5b6:	77fb      	strb	r3, [r7, #31]
	USHORT usLength = 0;
 801a5b8:	2300      	movs	r3, #0
 801a5ba:	82fb      	strh	r3, [r7, #22]
	USHORT usLengthRcvPDU = 0;
 801a5bc:	2300      	movs	r3, #0
 801a5be:	81bb      	strh	r3, [r7, #12]
	UCHAR  ucFunctionCode;
	UCHAR  *pucPDURcvBuf;
	int i;


	if( (usMasterRcvMBAPLength >= (MBAP_TCP_FUNC_OFFSET + 2)) // '2' involve to exception code which has Two bytes.
 801a5c0:	887b      	ldrh	r3, [r7, #2]
 801a5c2:	2b08      	cmp	r3, #8
 801a5c4:	f240 8081 	bls.w	801a6ca <eMBMasterCheckMBAPRcvBuf+0x122>
		&&(usMasterRcvMBAPLength <= (MB_PDU_SIZE_MAX + MBAP_TCP_FUNC_OFFSET)) )
 801a5c8:	887b      	ldrh	r3, [r7, #2]
 801a5ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801a5ce:	d87c      	bhi.n	801a6ca <eMBMasterCheckMBAPRcvBuf+0x122>
	{
		usLength  = ucMasterMBAPRcvBuf[MBAP_TCP_LEN_OFFSET] << 8U;
 801a5d0:	687b      	ldr	r3, [r7, #4]
 801a5d2:	3304      	adds	r3, #4
 801a5d4:	781b      	ldrb	r3, [r3, #0]
 801a5d6:	b29b      	uxth	r3, r3
 801a5d8:	021b      	lsls	r3, r3, #8
 801a5da:	82fb      	strh	r3, [r7, #22]
		usLength |= ucMasterMBAPRcvBuf[MBAP_TCP_LEN_OFFSET + 1];
 801a5dc:	687b      	ldr	r3, [r7, #4]
 801a5de:	3305      	adds	r3, #5
 801a5e0:	781b      	ldrb	r3, [r3, #0]
 801a5e2:	b29a      	uxth	r2, r3
 801a5e4:	8afb      	ldrh	r3, [r7, #22]
 801a5e6:	4313      	orrs	r3, r2
 801a5e8:	82fb      	strh	r3, [r7, #22]

		if( usMasterRcvMBAPLength == (usLength + MBAP_TCP_UID_OFFSET) )
 801a5ea:	887a      	ldrh	r2, [r7, #2]
 801a5ec:	8afb      	ldrh	r3, [r7, #22]
 801a5ee:	3306      	adds	r3, #6
 801a5f0:	429a      	cmp	r2, r3
 801a5f2:	d168      	bne.n	801a6c6 <eMBMasterCheckMBAPRcvBuf+0x11e>
		{
			if(	ucMasterMBAPRcvBuf[MBAP_TCP_TID_OFFSET] 	== (usMBAP_TCP_TID >> 8U) &&
 801a5f4:	687b      	ldr	r3, [r7, #4]
 801a5f6:	781b      	ldrb	r3, [r3, #0]
 801a5f8:	b29a      	uxth	r2, r3
 801a5fa:	4b36      	ldr	r3, [pc, #216]	; (801a6d4 <eMBMasterCheckMBAPRcvBuf+0x12c>)
 801a5fc:	881b      	ldrh	r3, [r3, #0]
 801a5fe:	0a1b      	lsrs	r3, r3, #8
 801a600:	b29b      	uxth	r3, r3
 801a602:	429a      	cmp	r2, r3
 801a604:	d15c      	bne.n	801a6c0 <eMBMasterCheckMBAPRcvBuf+0x118>
				ucMasterMBAPRcvBuf[MBAP_TCP_TID_OFFSET + 1] == (usMBAP_TCP_TID & 0XFF)&&
 801a606:	687b      	ldr	r3, [r7, #4]
 801a608:	3301      	adds	r3, #1
 801a60a:	781b      	ldrb	r3, [r3, #0]
 801a60c:	461a      	mov	r2, r3
 801a60e:	4b31      	ldr	r3, [pc, #196]	; (801a6d4 <eMBMasterCheckMBAPRcvBuf+0x12c>)
 801a610:	881b      	ldrh	r3, [r3, #0]
 801a612:	b2db      	uxtb	r3, r3
			if(	ucMasterMBAPRcvBuf[MBAP_TCP_TID_OFFSET] 	== (usMBAP_TCP_TID >> 8U) &&
 801a614:	429a      	cmp	r2, r3
 801a616:	d153      	bne.n	801a6c0 <eMBMasterCheckMBAPRcvBuf+0x118>
				ucMasterMBAPRcvBuf[MBAP_TCP_PID_OFFSET] 	== MBAP_TCP_PID   	 	  &&
 801a618:	687b      	ldr	r3, [r7, #4]
 801a61a:	3302      	adds	r3, #2
 801a61c:	781b      	ldrb	r3, [r3, #0]
				ucMasterMBAPRcvBuf[MBAP_TCP_TID_OFFSET + 1] == (usMBAP_TCP_TID & 0XFF)&&
 801a61e:	2b00      	cmp	r3, #0
 801a620:	d14e      	bne.n	801a6c0 <eMBMasterCheckMBAPRcvBuf+0x118>
				ucMasterMBAPRcvBuf[MBAP_TCP_PID_OFFSET + 1] == MBAP_TCP_PID           &&
 801a622:	687b      	ldr	r3, [r7, #4]
 801a624:	3303      	adds	r3, #3
 801a626:	781b      	ldrb	r3, [r3, #0]
				ucMasterMBAPRcvBuf[MBAP_TCP_PID_OFFSET] 	== MBAP_TCP_PID   	 	  &&
 801a628:	2b00      	cmp	r3, #0
 801a62a:	d149      	bne.n	801a6c0 <eMBMasterCheckMBAPRcvBuf+0x118>
				ucMasterMBAPRcvBuf[MBAP_TCP_UID_OFFSET]		== MBAP_TCP_UID)
 801a62c:	687b      	ldr	r3, [r7, #4]
 801a62e:	3306      	adds	r3, #6
 801a630:	781b      	ldrb	r3, [r3, #0]
				ucMasterMBAPRcvBuf[MBAP_TCP_PID_OFFSET + 1] == MBAP_TCP_PID           &&
 801a632:	2b01      	cmp	r3, #1
 801a634:	d144      	bne.n	801a6c0 <eMBMasterCheckMBAPRcvBuf+0x118>
			{
				pucPDURcvBuf 	=  &ucMasterMBAPRcvBuf[MBAP_TCP_FUNC_OFFSET];
 801a636:	687b      	ldr	r3, [r7, #4]
 801a638:	3307      	adds	r3, #7
 801a63a:	613b      	str	r3, [r7, #16]
				ucFunctionCode 	= ucMasterMBAPRcvBuf[MBAP_TCP_FUNC_OFFSET];
 801a63c:	687b      	ldr	r3, [r7, #4]
 801a63e:	79db      	ldrb	r3, [r3, #7]
 801a640:	73fb      	strb	r3, [r7, #15]
				eExtTCPMaster 		= MB_EX_ILLEGAL_FUNCTION;
 801a642:	4b25      	ldr	r3, [pc, #148]	; (801a6d8 <eMBMasterCheckMBAPRcvBuf+0x130>)
 801a644:	2201      	movs	r2, #1
 801a646:	701a      	strb	r2, [r3, #0]
				if( ucFunctionCode >= 0x80)
 801a648:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a64c:	2b00      	cmp	r3, #0
 801a64e:	da05      	bge.n	801a65c <eMBMasterCheckMBAPRcvBuf+0xb4>
				{
					eExtTCPMaster = (eMBException)pucPDURcvBuf[MB_PDU_DATA_OFF];
 801a650:	693b      	ldr	r3, [r7, #16]
 801a652:	3301      	adds	r3, #1
 801a654:	781a      	ldrb	r2, [r3, #0]
 801a656:	4b20      	ldr	r3, [pc, #128]	; (801a6d8 <eMBMasterCheckMBAPRcvBuf+0x130>)
 801a658:	701a      	strb	r2, [r3, #0]
				if( ucFunctionCode >= 0x80)
 801a65a:	e036      	b.n	801a6ca <eMBMasterCheckMBAPRcvBuf+0x122>
				}
				else
				{
					for (i = 0; i < MB_FUNC_HANDLERS_MAX; i++)
 801a65c:	2300      	movs	r3, #0
 801a65e:	61bb      	str	r3, [r7, #24]
 801a660:	e028      	b.n	801a6b4 <eMBMasterCheckMBAPRcvBuf+0x10c>
					{
						/* No more function handlers registered. Abort. */
						if (xMasterFuncHandlers[i].ucFunctionCode == 0)
 801a662:	4a1e      	ldr	r2, [pc, #120]	; (801a6dc <eMBMasterCheckMBAPRcvBuf+0x134>)
 801a664:	69bb      	ldr	r3, [r7, #24]
 801a666:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 801a66a:	2b00      	cmp	r3, #0
 801a66c:	d026      	beq.n	801a6bc <eMBMasterCheckMBAPRcvBuf+0x114>
						{
							break;
						}
						else if (xMasterFuncHandlers[i].ucFunctionCode == ucFunctionCode)
 801a66e:	4a1b      	ldr	r2, [pc, #108]	; (801a6dc <eMBMasterCheckMBAPRcvBuf+0x134>)
 801a670:	69bb      	ldr	r3, [r7, #24]
 801a672:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 801a676:	7bfa      	ldrb	r2, [r7, #15]
 801a678:	429a      	cmp	r2, r3
 801a67a:	d118      	bne.n	801a6ae <eMBMasterCheckMBAPRcvBuf+0x106>
						{
							vMBMasterSetCBRunInMasterMode(TRUE);
 801a67c:	2001      	movs	r0, #1
 801a67e:	f000 f84f 	bl	801a720 <vMBMasterSetCBRunInMasterMode>
							usLengthRcvPDU = usLength - 1;
 801a682:	8afb      	ldrh	r3, [r7, #22]
 801a684:	3b01      	subs	r3, #1
 801a686:	b29b      	uxth	r3, r3
 801a688:	81bb      	strh	r3, [r7, #12]
							eExtTCPMaster = xMasterFuncHandlers[i].pxHandler(pucPDURcvBuf, &usLengthRcvPDU);
 801a68a:	4a14      	ldr	r2, [pc, #80]	; (801a6dc <eMBMasterCheckMBAPRcvBuf+0x134>)
 801a68c:	69bb      	ldr	r3, [r7, #24]
 801a68e:	00db      	lsls	r3, r3, #3
 801a690:	4413      	add	r3, r2
 801a692:	685b      	ldr	r3, [r3, #4]
 801a694:	f107 020c 	add.w	r2, r7, #12
 801a698:	4611      	mov	r1, r2
 801a69a:	6938      	ldr	r0, [r7, #16]
 801a69c:	4798      	blx	r3
 801a69e:	4603      	mov	r3, r0
 801a6a0:	461a      	mov	r2, r3
 801a6a2:	4b0d      	ldr	r3, [pc, #52]	; (801a6d8 <eMBMasterCheckMBAPRcvBuf+0x130>)
 801a6a4:	701a      	strb	r2, [r3, #0]
							vMBMasterSetCBRunInMasterMode(FALSE);
 801a6a6:	2000      	movs	r0, #0
 801a6a8:	f000 f83a 	bl	801a720 <vMBMasterSetCBRunInMasterMode>
							break;
 801a6ac:	e007      	b.n	801a6be <eMBMasterCheckMBAPRcvBuf+0x116>
					for (i = 0; i < MB_FUNC_HANDLERS_MAX; i++)
 801a6ae:	69bb      	ldr	r3, [r7, #24]
 801a6b0:	3301      	adds	r3, #1
 801a6b2:	61bb      	str	r3, [r7, #24]
 801a6b4:	69bb      	ldr	r3, [r7, #24]
 801a6b6:	2b0f      	cmp	r3, #15
 801a6b8:	ddd3      	ble.n	801a662 <eMBMasterCheckMBAPRcvBuf+0xba>
				if( ucFunctionCode >= 0x80)
 801a6ba:	e006      	b.n	801a6ca <eMBMasterCheckMBAPRcvBuf+0x122>
							break;
 801a6bc:	bf00      	nop
				if( ucFunctionCode >= 0x80)
 801a6be:	e004      	b.n	801a6ca <eMBMasterCheckMBAPRcvBuf+0x122>

			}
			else
			{
				//error receive data;
				eStatus = MB_EIO;
 801a6c0:	2305      	movs	r3, #5
 801a6c2:	77fb      	strb	r3, [r7, #31]
 801a6c4:	e001      	b.n	801a6ca <eMBMasterCheckMBAPRcvBuf+0x122>

		}
		else
		{
			//error receive data;
			eStatus = MB_EIO;
 801a6c6:	2305      	movs	r3, #5
 801a6c8:	77fb      	strb	r3, [r7, #31]
		}

	}

	return eStatus;
 801a6ca:	7ffb      	ldrb	r3, [r7, #31]
}
 801a6cc:	4618      	mov	r0, r3
 801a6ce:	3720      	adds	r7, #32
 801a6d0:	46bd      	mov	sp, r7
 801a6d2:	bd80      	pop	{r7, pc}
 801a6d4:	20004d88 	.word	0x20004d88
 801a6d8:	20004e95 	.word	0x20004e95
 801a6dc:	2000009c 	.word	0x2000009c

0801a6e0 <vMBMasterGetPDUSndBuf>:
}


/* Get Modbus Master send PDU's buffer address pointer.*/
void vMBMasterGetPDUSndBuf( UCHAR ** pucFrame )
{
 801a6e0:	b480      	push	{r7}
 801a6e2:	b083      	sub	sp, #12
 801a6e4:	af00      	add	r7, sp, #0
 801a6e6:	6078      	str	r0, [r7, #4]
	*pucFrame = ( UCHAR * ) &ucMasterMBAPSndBuf[MBAP_TCP_FUNC_OFFSET];
 801a6e8:	687b      	ldr	r3, [r7, #4]
 801a6ea:	4a04      	ldr	r2, [pc, #16]	; (801a6fc <vMBMasterGetPDUSndBuf+0x1c>)
 801a6ec:	601a      	str	r2, [r3, #0]
}
 801a6ee:	bf00      	nop
 801a6f0:	370c      	adds	r7, #12
 801a6f2:	46bd      	mov	sp, r7
 801a6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6f8:	4770      	bx	lr
 801a6fa:	bf00      	nop
 801a6fc:	20004d93 	.word	0x20004d93

0801a700 <vMBMasterSetPDUSndLength>:

/* Set Modbus Master send PDU's buffer length.*/
void vMBMasterSetPDUSndLength( USHORT SendPDULength )
{
 801a700:	b480      	push	{r7}
 801a702:	b083      	sub	sp, #12
 801a704:	af00      	add	r7, sp, #0
 801a706:	4603      	mov	r3, r0
 801a708:	80fb      	strh	r3, [r7, #6]
	usMasterSendPDULength = SendPDULength;
 801a70a:	4a04      	ldr	r2, [pc, #16]	; (801a71c <vMBMasterSetPDUSndLength+0x1c>)
 801a70c:	88fb      	ldrh	r3, [r7, #6]
 801a70e:	8013      	strh	r3, [r2, #0]
}
 801a710:	bf00      	nop
 801a712:	370c      	adds	r7, #12
 801a714:	46bd      	mov	sp, r7
 801a716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a71a:	4770      	bx	lr
 801a71c:	20004e90 	.word	0x20004e90

0801a720 <vMBMasterSetCBRunInMasterMode>:
{
	return xMBRunInMasterMode;
}
/* Set whether the Modbus Master is run in master mode.*/
void vMBMasterSetCBRunInMasterMode( BOOL IsMasterMode )
{
 801a720:	b480      	push	{r7}
 801a722:	b083      	sub	sp, #12
 801a724:	af00      	add	r7, sp, #0
 801a726:	4603      	mov	r3, r0
 801a728:	71fb      	strb	r3, [r7, #7]
	xMBRunInMasterMode = IsMasterMode;
 801a72a:	4a04      	ldr	r2, [pc, #16]	; (801a73c <vMBMasterSetCBRunInMasterMode+0x1c>)
 801a72c:	79fb      	ldrb	r3, [r7, #7]
 801a72e:	7013      	strb	r3, [r2, #0]
}
 801a730:	bf00      	nop
 801a732:	370c      	adds	r7, #12
 801a734:	46bd      	mov	sp, r7
 801a736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a73a:	4770      	bx	lr
 801a73c:	20004e93 	.word	0x20004e93

0801a740 <vMBMasterSetDestAddress>:


//TODO : Destination address in TCP must be IP_address (ip4_addr_t)
//todo : note: ucMBMasterDestAddress variable must be changed
void vMBMasterSetDestAddress( UCHAR Address )
{
 801a740:	b480      	push	{r7}
 801a742:	b083      	sub	sp, #12
 801a744:	af00      	add	r7, sp, #0
 801a746:	4603      	mov	r3, r0
 801a748:	71fb      	strb	r3, [r7, #7]
	ucMBMasterDestAddress = Address;
 801a74a:	4a04      	ldr	r2, [pc, #16]	; (801a75c <vMBMasterSetDestAddress+0x1c>)
 801a74c:	79fb      	ldrb	r3, [r7, #7]
 801a74e:	7013      	strb	r3, [r2, #0]
}
 801a750:	bf00      	nop
 801a752:	370c      	adds	r7, #12
 801a754:	46bd      	mov	sp, r7
 801a756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a75a:	4770      	bx	lr
 801a75c:	20004e92 	.word	0x20004e92

0801a760 <ucMBMasterGetDestAddress>:

/* Get Modbus Master send destination address. */
UCHAR ucMBMasterGetDestAddress( void )
{
 801a760:	b480      	push	{r7}
 801a762:	af00      	add	r7, sp, #0
	return ucMBMasterDestAddress;
 801a764:	4b03      	ldr	r3, [pc, #12]	; (801a774 <ucMBMasterGetDestAddress+0x14>)
 801a766:	781b      	ldrb	r3, [r3, #0]
 }
 801a768:	4618      	mov	r0, r3
 801a76a:	46bd      	mov	sp, r7
 801a76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a770:	4770      	bx	lr
 801a772:	bf00      	nop
 801a774:	20004e92 	.word	0x20004e92

0801a778 <xMBMasterRequestIsBroadcast>:
/* The master request is broadcast? */
void xMBMasterSetBroadcast( BOOL isbroadcast ){
	xFrameIsBroadcast = isbroadcast;
}
/* The master request is broadcast? */
BOOL xMBMasterRequestIsBroadcast( void ){
 801a778:	b480      	push	{r7}
 801a77a:	af00      	add	r7, sp, #0
	return xFrameIsBroadcast;
 801a77c:	4b03      	ldr	r3, [pc, #12]	; (801a78c <xMBMasterRequestIsBroadcast+0x14>)
 801a77e:	781b      	ldrb	r3, [r3, #0]
 801a780:	b2db      	uxtb	r3, r3
}
 801a782:	4618      	mov	r0, r3
 801a784:	46bd      	mov	sp, r7
 801a786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a78a:	4770      	bx	lr
 801a78c:	20004e94 	.word	0x20004e94

0801a790 <__assert_func>:
 801a790:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a792:	4614      	mov	r4, r2
 801a794:	461a      	mov	r2, r3
 801a796:	4b09      	ldr	r3, [pc, #36]	; (801a7bc <__assert_func+0x2c>)
 801a798:	681b      	ldr	r3, [r3, #0]
 801a79a:	4605      	mov	r5, r0
 801a79c:	68d8      	ldr	r0, [r3, #12]
 801a79e:	b14c      	cbz	r4, 801a7b4 <__assert_func+0x24>
 801a7a0:	4b07      	ldr	r3, [pc, #28]	; (801a7c0 <__assert_func+0x30>)
 801a7a2:	9100      	str	r1, [sp, #0]
 801a7a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a7a8:	4906      	ldr	r1, [pc, #24]	; (801a7c4 <__assert_func+0x34>)
 801a7aa:	462b      	mov	r3, r5
 801a7ac:	f000 f8e4 	bl	801a978 <fiprintf>
 801a7b0:	f000 fe90 	bl	801b4d4 <abort>
 801a7b4:	4b04      	ldr	r3, [pc, #16]	; (801a7c8 <__assert_func+0x38>)
 801a7b6:	461c      	mov	r4, r3
 801a7b8:	e7f3      	b.n	801a7a2 <__assert_func+0x12>
 801a7ba:	bf00      	nop
 801a7bc:	2000011c 	.word	0x2000011c
 801a7c0:	0801f3c6 	.word	0x0801f3c6
 801a7c4:	0801f3d3 	.word	0x0801f3d3
 801a7c8:	0801f401 	.word	0x0801f401

0801a7cc <std>:
 801a7cc:	2300      	movs	r3, #0
 801a7ce:	b510      	push	{r4, lr}
 801a7d0:	4604      	mov	r4, r0
 801a7d2:	e9c0 3300 	strd	r3, r3, [r0]
 801a7d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a7da:	6083      	str	r3, [r0, #8]
 801a7dc:	8181      	strh	r1, [r0, #12]
 801a7de:	6643      	str	r3, [r0, #100]	; 0x64
 801a7e0:	81c2      	strh	r2, [r0, #14]
 801a7e2:	6183      	str	r3, [r0, #24]
 801a7e4:	4619      	mov	r1, r3
 801a7e6:	2208      	movs	r2, #8
 801a7e8:	305c      	adds	r0, #92	; 0x5c
 801a7ea:	f000 f93a 	bl	801aa62 <memset>
 801a7ee:	4b05      	ldr	r3, [pc, #20]	; (801a804 <std+0x38>)
 801a7f0:	6263      	str	r3, [r4, #36]	; 0x24
 801a7f2:	4b05      	ldr	r3, [pc, #20]	; (801a808 <std+0x3c>)
 801a7f4:	62a3      	str	r3, [r4, #40]	; 0x28
 801a7f6:	4b05      	ldr	r3, [pc, #20]	; (801a80c <std+0x40>)
 801a7f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a7fa:	4b05      	ldr	r3, [pc, #20]	; (801a810 <std+0x44>)
 801a7fc:	6224      	str	r4, [r4, #32]
 801a7fe:	6323      	str	r3, [r4, #48]	; 0x30
 801a800:	bd10      	pop	{r4, pc}
 801a802:	bf00      	nop
 801a804:	0801b2a9 	.word	0x0801b2a9
 801a808:	0801b2cb 	.word	0x0801b2cb
 801a80c:	0801b303 	.word	0x0801b303
 801a810:	0801b327 	.word	0x0801b327

0801a814 <_cleanup_r>:
 801a814:	4901      	ldr	r1, [pc, #4]	; (801a81c <_cleanup_r+0x8>)
 801a816:	f000 b8c1 	b.w	801a99c <_fwalk_reent>
 801a81a:	bf00      	nop
 801a81c:	0801b611 	.word	0x0801b611

0801a820 <__sfmoreglue>:
 801a820:	b570      	push	{r4, r5, r6, lr}
 801a822:	1e4a      	subs	r2, r1, #1
 801a824:	2568      	movs	r5, #104	; 0x68
 801a826:	4355      	muls	r5, r2
 801a828:	460e      	mov	r6, r1
 801a82a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801a82e:	f000 f921 	bl	801aa74 <_malloc_r>
 801a832:	4604      	mov	r4, r0
 801a834:	b140      	cbz	r0, 801a848 <__sfmoreglue+0x28>
 801a836:	2100      	movs	r1, #0
 801a838:	e9c0 1600 	strd	r1, r6, [r0]
 801a83c:	300c      	adds	r0, #12
 801a83e:	60a0      	str	r0, [r4, #8]
 801a840:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801a844:	f000 f90d 	bl	801aa62 <memset>
 801a848:	4620      	mov	r0, r4
 801a84a:	bd70      	pop	{r4, r5, r6, pc}

0801a84c <__sfp_lock_acquire>:
 801a84c:	4801      	ldr	r0, [pc, #4]	; (801a854 <__sfp_lock_acquire+0x8>)
 801a84e:	f000 b8ea 	b.w	801aa26 <__retarget_lock_acquire_recursive>
 801a852:	bf00      	nop
 801a854:	2000dcc0 	.word	0x2000dcc0

0801a858 <__sfp_lock_release>:
 801a858:	4801      	ldr	r0, [pc, #4]	; (801a860 <__sfp_lock_release+0x8>)
 801a85a:	f000 b8e5 	b.w	801aa28 <__retarget_lock_release_recursive>
 801a85e:	bf00      	nop
 801a860:	2000dcc0 	.word	0x2000dcc0

0801a864 <__sinit_lock_acquire>:
 801a864:	4801      	ldr	r0, [pc, #4]	; (801a86c <__sinit_lock_acquire+0x8>)
 801a866:	f000 b8de 	b.w	801aa26 <__retarget_lock_acquire_recursive>
 801a86a:	bf00      	nop
 801a86c:	2000dcbb 	.word	0x2000dcbb

0801a870 <__sinit_lock_release>:
 801a870:	4801      	ldr	r0, [pc, #4]	; (801a878 <__sinit_lock_release+0x8>)
 801a872:	f000 b8d9 	b.w	801aa28 <__retarget_lock_release_recursive>
 801a876:	bf00      	nop
 801a878:	2000dcbb 	.word	0x2000dcbb

0801a87c <__sinit>:
 801a87c:	b510      	push	{r4, lr}
 801a87e:	4604      	mov	r4, r0
 801a880:	f7ff fff0 	bl	801a864 <__sinit_lock_acquire>
 801a884:	69a3      	ldr	r3, [r4, #24]
 801a886:	b11b      	cbz	r3, 801a890 <__sinit+0x14>
 801a888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a88c:	f7ff bff0 	b.w	801a870 <__sinit_lock_release>
 801a890:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801a894:	6523      	str	r3, [r4, #80]	; 0x50
 801a896:	4b13      	ldr	r3, [pc, #76]	; (801a8e4 <__sinit+0x68>)
 801a898:	4a13      	ldr	r2, [pc, #76]	; (801a8e8 <__sinit+0x6c>)
 801a89a:	681b      	ldr	r3, [r3, #0]
 801a89c:	62a2      	str	r2, [r4, #40]	; 0x28
 801a89e:	42a3      	cmp	r3, r4
 801a8a0:	bf04      	itt	eq
 801a8a2:	2301      	moveq	r3, #1
 801a8a4:	61a3      	streq	r3, [r4, #24]
 801a8a6:	4620      	mov	r0, r4
 801a8a8:	f000 f820 	bl	801a8ec <__sfp>
 801a8ac:	6060      	str	r0, [r4, #4]
 801a8ae:	4620      	mov	r0, r4
 801a8b0:	f000 f81c 	bl	801a8ec <__sfp>
 801a8b4:	60a0      	str	r0, [r4, #8]
 801a8b6:	4620      	mov	r0, r4
 801a8b8:	f000 f818 	bl	801a8ec <__sfp>
 801a8bc:	2200      	movs	r2, #0
 801a8be:	60e0      	str	r0, [r4, #12]
 801a8c0:	2104      	movs	r1, #4
 801a8c2:	6860      	ldr	r0, [r4, #4]
 801a8c4:	f7ff ff82 	bl	801a7cc <std>
 801a8c8:	68a0      	ldr	r0, [r4, #8]
 801a8ca:	2201      	movs	r2, #1
 801a8cc:	2109      	movs	r1, #9
 801a8ce:	f7ff ff7d 	bl	801a7cc <std>
 801a8d2:	68e0      	ldr	r0, [r4, #12]
 801a8d4:	2202      	movs	r2, #2
 801a8d6:	2112      	movs	r1, #18
 801a8d8:	f7ff ff78 	bl	801a7cc <std>
 801a8dc:	2301      	movs	r3, #1
 801a8de:	61a3      	str	r3, [r4, #24]
 801a8e0:	e7d2      	b.n	801a888 <__sinit+0xc>
 801a8e2:	bf00      	nop
 801a8e4:	0801f464 	.word	0x0801f464
 801a8e8:	0801a815 	.word	0x0801a815

0801a8ec <__sfp>:
 801a8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a8ee:	4607      	mov	r7, r0
 801a8f0:	f7ff ffac 	bl	801a84c <__sfp_lock_acquire>
 801a8f4:	4b1e      	ldr	r3, [pc, #120]	; (801a970 <__sfp+0x84>)
 801a8f6:	681e      	ldr	r6, [r3, #0]
 801a8f8:	69b3      	ldr	r3, [r6, #24]
 801a8fa:	b913      	cbnz	r3, 801a902 <__sfp+0x16>
 801a8fc:	4630      	mov	r0, r6
 801a8fe:	f7ff ffbd 	bl	801a87c <__sinit>
 801a902:	3648      	adds	r6, #72	; 0x48
 801a904:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801a908:	3b01      	subs	r3, #1
 801a90a:	d503      	bpl.n	801a914 <__sfp+0x28>
 801a90c:	6833      	ldr	r3, [r6, #0]
 801a90e:	b30b      	cbz	r3, 801a954 <__sfp+0x68>
 801a910:	6836      	ldr	r6, [r6, #0]
 801a912:	e7f7      	b.n	801a904 <__sfp+0x18>
 801a914:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801a918:	b9d5      	cbnz	r5, 801a950 <__sfp+0x64>
 801a91a:	4b16      	ldr	r3, [pc, #88]	; (801a974 <__sfp+0x88>)
 801a91c:	60e3      	str	r3, [r4, #12]
 801a91e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801a922:	6665      	str	r5, [r4, #100]	; 0x64
 801a924:	f000 f87e 	bl	801aa24 <__retarget_lock_init_recursive>
 801a928:	f7ff ff96 	bl	801a858 <__sfp_lock_release>
 801a92c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801a930:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801a934:	6025      	str	r5, [r4, #0]
 801a936:	61a5      	str	r5, [r4, #24]
 801a938:	2208      	movs	r2, #8
 801a93a:	4629      	mov	r1, r5
 801a93c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801a940:	f000 f88f 	bl	801aa62 <memset>
 801a944:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801a948:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801a94c:	4620      	mov	r0, r4
 801a94e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a950:	3468      	adds	r4, #104	; 0x68
 801a952:	e7d9      	b.n	801a908 <__sfp+0x1c>
 801a954:	2104      	movs	r1, #4
 801a956:	4638      	mov	r0, r7
 801a958:	f7ff ff62 	bl	801a820 <__sfmoreglue>
 801a95c:	4604      	mov	r4, r0
 801a95e:	6030      	str	r0, [r6, #0]
 801a960:	2800      	cmp	r0, #0
 801a962:	d1d5      	bne.n	801a910 <__sfp+0x24>
 801a964:	f7ff ff78 	bl	801a858 <__sfp_lock_release>
 801a968:	230c      	movs	r3, #12
 801a96a:	603b      	str	r3, [r7, #0]
 801a96c:	e7ee      	b.n	801a94c <__sfp+0x60>
 801a96e:	bf00      	nop
 801a970:	0801f464 	.word	0x0801f464
 801a974:	ffff0001 	.word	0xffff0001

0801a978 <fiprintf>:
 801a978:	b40e      	push	{r1, r2, r3}
 801a97a:	b503      	push	{r0, r1, lr}
 801a97c:	4601      	mov	r1, r0
 801a97e:	ab03      	add	r3, sp, #12
 801a980:	4805      	ldr	r0, [pc, #20]	; (801a998 <fiprintf+0x20>)
 801a982:	f853 2b04 	ldr.w	r2, [r3], #4
 801a986:	6800      	ldr	r0, [r0, #0]
 801a988:	9301      	str	r3, [sp, #4]
 801a98a:	f000 f8f7 	bl	801ab7c <_vfiprintf_r>
 801a98e:	b002      	add	sp, #8
 801a990:	f85d eb04 	ldr.w	lr, [sp], #4
 801a994:	b003      	add	sp, #12
 801a996:	4770      	bx	lr
 801a998:	2000011c 	.word	0x2000011c

0801a99c <_fwalk_reent>:
 801a99c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a9a0:	4606      	mov	r6, r0
 801a9a2:	4688      	mov	r8, r1
 801a9a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801a9a8:	2700      	movs	r7, #0
 801a9aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a9ae:	f1b9 0901 	subs.w	r9, r9, #1
 801a9b2:	d505      	bpl.n	801a9c0 <_fwalk_reent+0x24>
 801a9b4:	6824      	ldr	r4, [r4, #0]
 801a9b6:	2c00      	cmp	r4, #0
 801a9b8:	d1f7      	bne.n	801a9aa <_fwalk_reent+0xe>
 801a9ba:	4638      	mov	r0, r7
 801a9bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a9c0:	89ab      	ldrh	r3, [r5, #12]
 801a9c2:	2b01      	cmp	r3, #1
 801a9c4:	d907      	bls.n	801a9d6 <_fwalk_reent+0x3a>
 801a9c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a9ca:	3301      	adds	r3, #1
 801a9cc:	d003      	beq.n	801a9d6 <_fwalk_reent+0x3a>
 801a9ce:	4629      	mov	r1, r5
 801a9d0:	4630      	mov	r0, r6
 801a9d2:	47c0      	blx	r8
 801a9d4:	4307      	orrs	r7, r0
 801a9d6:	3568      	adds	r5, #104	; 0x68
 801a9d8:	e7e9      	b.n	801a9ae <_fwalk_reent+0x12>
	...

0801a9dc <__libc_init_array>:
 801a9dc:	b570      	push	{r4, r5, r6, lr}
 801a9de:	4d0d      	ldr	r5, [pc, #52]	; (801aa14 <__libc_init_array+0x38>)
 801a9e0:	4c0d      	ldr	r4, [pc, #52]	; (801aa18 <__libc_init_array+0x3c>)
 801a9e2:	1b64      	subs	r4, r4, r5
 801a9e4:	10a4      	asrs	r4, r4, #2
 801a9e6:	2600      	movs	r6, #0
 801a9e8:	42a6      	cmp	r6, r4
 801a9ea:	d109      	bne.n	801aa00 <__libc_init_array+0x24>
 801a9ec:	4d0b      	ldr	r5, [pc, #44]	; (801aa1c <__libc_init_array+0x40>)
 801a9ee:	4c0c      	ldr	r4, [pc, #48]	; (801aa20 <__libc_init_array+0x44>)
 801a9f0:	f000 ff9c 	bl	801b92c <_init>
 801a9f4:	1b64      	subs	r4, r4, r5
 801a9f6:	10a4      	asrs	r4, r4, #2
 801a9f8:	2600      	movs	r6, #0
 801a9fa:	42a6      	cmp	r6, r4
 801a9fc:	d105      	bne.n	801aa0a <__libc_init_array+0x2e>
 801a9fe:	bd70      	pop	{r4, r5, r6, pc}
 801aa00:	f855 3b04 	ldr.w	r3, [r5], #4
 801aa04:	4798      	blx	r3
 801aa06:	3601      	adds	r6, #1
 801aa08:	e7ee      	b.n	801a9e8 <__libc_init_array+0xc>
 801aa0a:	f855 3b04 	ldr.w	r3, [r5], #4
 801aa0e:	4798      	blx	r3
 801aa10:	3601      	adds	r6, #1
 801aa12:	e7f2      	b.n	801a9fa <__libc_init_array+0x1e>
 801aa14:	0801f51c 	.word	0x0801f51c
 801aa18:	0801f51c 	.word	0x0801f51c
 801aa1c:	0801f51c 	.word	0x0801f51c
 801aa20:	0801f520 	.word	0x0801f520

0801aa24 <__retarget_lock_init_recursive>:
 801aa24:	4770      	bx	lr

0801aa26 <__retarget_lock_acquire_recursive>:
 801aa26:	4770      	bx	lr

0801aa28 <__retarget_lock_release_recursive>:
 801aa28:	4770      	bx	lr

0801aa2a <memcmp>:
 801aa2a:	b530      	push	{r4, r5, lr}
 801aa2c:	3901      	subs	r1, #1
 801aa2e:	2400      	movs	r4, #0
 801aa30:	42a2      	cmp	r2, r4
 801aa32:	d101      	bne.n	801aa38 <memcmp+0xe>
 801aa34:	2000      	movs	r0, #0
 801aa36:	e005      	b.n	801aa44 <memcmp+0x1a>
 801aa38:	5d03      	ldrb	r3, [r0, r4]
 801aa3a:	3401      	adds	r4, #1
 801aa3c:	5d0d      	ldrb	r5, [r1, r4]
 801aa3e:	42ab      	cmp	r3, r5
 801aa40:	d0f6      	beq.n	801aa30 <memcmp+0x6>
 801aa42:	1b58      	subs	r0, r3, r5
 801aa44:	bd30      	pop	{r4, r5, pc}

0801aa46 <memcpy>:
 801aa46:	440a      	add	r2, r1
 801aa48:	4291      	cmp	r1, r2
 801aa4a:	f100 33ff 	add.w	r3, r0, #4294967295
 801aa4e:	d100      	bne.n	801aa52 <memcpy+0xc>
 801aa50:	4770      	bx	lr
 801aa52:	b510      	push	{r4, lr}
 801aa54:	f811 4b01 	ldrb.w	r4, [r1], #1
 801aa58:	f803 4f01 	strb.w	r4, [r3, #1]!
 801aa5c:	4291      	cmp	r1, r2
 801aa5e:	d1f9      	bne.n	801aa54 <memcpy+0xe>
 801aa60:	bd10      	pop	{r4, pc}

0801aa62 <memset>:
 801aa62:	4402      	add	r2, r0
 801aa64:	4603      	mov	r3, r0
 801aa66:	4293      	cmp	r3, r2
 801aa68:	d100      	bne.n	801aa6c <memset+0xa>
 801aa6a:	4770      	bx	lr
 801aa6c:	f803 1b01 	strb.w	r1, [r3], #1
 801aa70:	e7f9      	b.n	801aa66 <memset+0x4>
	...

0801aa74 <_malloc_r>:
 801aa74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aa76:	1ccd      	adds	r5, r1, #3
 801aa78:	f025 0503 	bic.w	r5, r5, #3
 801aa7c:	3508      	adds	r5, #8
 801aa7e:	2d0c      	cmp	r5, #12
 801aa80:	bf38      	it	cc
 801aa82:	250c      	movcc	r5, #12
 801aa84:	2d00      	cmp	r5, #0
 801aa86:	4606      	mov	r6, r0
 801aa88:	db01      	blt.n	801aa8e <_malloc_r+0x1a>
 801aa8a:	42a9      	cmp	r1, r5
 801aa8c:	d903      	bls.n	801aa96 <_malloc_r+0x22>
 801aa8e:	230c      	movs	r3, #12
 801aa90:	6033      	str	r3, [r6, #0]
 801aa92:	2000      	movs	r0, #0
 801aa94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aa96:	f000 fe75 	bl	801b784 <__malloc_lock>
 801aa9a:	4921      	ldr	r1, [pc, #132]	; (801ab20 <_malloc_r+0xac>)
 801aa9c:	680a      	ldr	r2, [r1, #0]
 801aa9e:	4614      	mov	r4, r2
 801aaa0:	b99c      	cbnz	r4, 801aaca <_malloc_r+0x56>
 801aaa2:	4f20      	ldr	r7, [pc, #128]	; (801ab24 <_malloc_r+0xb0>)
 801aaa4:	683b      	ldr	r3, [r7, #0]
 801aaa6:	b923      	cbnz	r3, 801aab2 <_malloc_r+0x3e>
 801aaa8:	4621      	mov	r1, r4
 801aaaa:	4630      	mov	r0, r6
 801aaac:	f000 fbec 	bl	801b288 <_sbrk_r>
 801aab0:	6038      	str	r0, [r7, #0]
 801aab2:	4629      	mov	r1, r5
 801aab4:	4630      	mov	r0, r6
 801aab6:	f000 fbe7 	bl	801b288 <_sbrk_r>
 801aaba:	1c43      	adds	r3, r0, #1
 801aabc:	d123      	bne.n	801ab06 <_malloc_r+0x92>
 801aabe:	230c      	movs	r3, #12
 801aac0:	6033      	str	r3, [r6, #0]
 801aac2:	4630      	mov	r0, r6
 801aac4:	f000 fe64 	bl	801b790 <__malloc_unlock>
 801aac8:	e7e3      	b.n	801aa92 <_malloc_r+0x1e>
 801aaca:	6823      	ldr	r3, [r4, #0]
 801aacc:	1b5b      	subs	r3, r3, r5
 801aace:	d417      	bmi.n	801ab00 <_malloc_r+0x8c>
 801aad0:	2b0b      	cmp	r3, #11
 801aad2:	d903      	bls.n	801aadc <_malloc_r+0x68>
 801aad4:	6023      	str	r3, [r4, #0]
 801aad6:	441c      	add	r4, r3
 801aad8:	6025      	str	r5, [r4, #0]
 801aada:	e004      	b.n	801aae6 <_malloc_r+0x72>
 801aadc:	6863      	ldr	r3, [r4, #4]
 801aade:	42a2      	cmp	r2, r4
 801aae0:	bf0c      	ite	eq
 801aae2:	600b      	streq	r3, [r1, #0]
 801aae4:	6053      	strne	r3, [r2, #4]
 801aae6:	4630      	mov	r0, r6
 801aae8:	f000 fe52 	bl	801b790 <__malloc_unlock>
 801aaec:	f104 000b 	add.w	r0, r4, #11
 801aaf0:	1d23      	adds	r3, r4, #4
 801aaf2:	f020 0007 	bic.w	r0, r0, #7
 801aaf6:	1ac2      	subs	r2, r0, r3
 801aaf8:	d0cc      	beq.n	801aa94 <_malloc_r+0x20>
 801aafa:	1a1b      	subs	r3, r3, r0
 801aafc:	50a3      	str	r3, [r4, r2]
 801aafe:	e7c9      	b.n	801aa94 <_malloc_r+0x20>
 801ab00:	4622      	mov	r2, r4
 801ab02:	6864      	ldr	r4, [r4, #4]
 801ab04:	e7cc      	b.n	801aaa0 <_malloc_r+0x2c>
 801ab06:	1cc4      	adds	r4, r0, #3
 801ab08:	f024 0403 	bic.w	r4, r4, #3
 801ab0c:	42a0      	cmp	r0, r4
 801ab0e:	d0e3      	beq.n	801aad8 <_malloc_r+0x64>
 801ab10:	1a21      	subs	r1, r4, r0
 801ab12:	4630      	mov	r0, r6
 801ab14:	f000 fbb8 	bl	801b288 <_sbrk_r>
 801ab18:	3001      	adds	r0, #1
 801ab1a:	d1dd      	bne.n	801aad8 <_malloc_r+0x64>
 801ab1c:	e7cf      	b.n	801aabe <_malloc_r+0x4a>
 801ab1e:	bf00      	nop
 801ab20:	20004e98 	.word	0x20004e98
 801ab24:	20004e9c 	.word	0x20004e9c

0801ab28 <__sfputc_r>:
 801ab28:	6893      	ldr	r3, [r2, #8]
 801ab2a:	3b01      	subs	r3, #1
 801ab2c:	2b00      	cmp	r3, #0
 801ab2e:	b410      	push	{r4}
 801ab30:	6093      	str	r3, [r2, #8]
 801ab32:	da08      	bge.n	801ab46 <__sfputc_r+0x1e>
 801ab34:	6994      	ldr	r4, [r2, #24]
 801ab36:	42a3      	cmp	r3, r4
 801ab38:	db01      	blt.n	801ab3e <__sfputc_r+0x16>
 801ab3a:	290a      	cmp	r1, #10
 801ab3c:	d103      	bne.n	801ab46 <__sfputc_r+0x1e>
 801ab3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ab42:	f000 bbf5 	b.w	801b330 <__swbuf_r>
 801ab46:	6813      	ldr	r3, [r2, #0]
 801ab48:	1c58      	adds	r0, r3, #1
 801ab4a:	6010      	str	r0, [r2, #0]
 801ab4c:	7019      	strb	r1, [r3, #0]
 801ab4e:	4608      	mov	r0, r1
 801ab50:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ab54:	4770      	bx	lr

0801ab56 <__sfputs_r>:
 801ab56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ab58:	4606      	mov	r6, r0
 801ab5a:	460f      	mov	r7, r1
 801ab5c:	4614      	mov	r4, r2
 801ab5e:	18d5      	adds	r5, r2, r3
 801ab60:	42ac      	cmp	r4, r5
 801ab62:	d101      	bne.n	801ab68 <__sfputs_r+0x12>
 801ab64:	2000      	movs	r0, #0
 801ab66:	e007      	b.n	801ab78 <__sfputs_r+0x22>
 801ab68:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ab6c:	463a      	mov	r2, r7
 801ab6e:	4630      	mov	r0, r6
 801ab70:	f7ff ffda 	bl	801ab28 <__sfputc_r>
 801ab74:	1c43      	adds	r3, r0, #1
 801ab76:	d1f3      	bne.n	801ab60 <__sfputs_r+0xa>
 801ab78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801ab7c <_vfiprintf_r>:
 801ab7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab80:	460d      	mov	r5, r1
 801ab82:	b09d      	sub	sp, #116	; 0x74
 801ab84:	4614      	mov	r4, r2
 801ab86:	4698      	mov	r8, r3
 801ab88:	4606      	mov	r6, r0
 801ab8a:	b118      	cbz	r0, 801ab94 <_vfiprintf_r+0x18>
 801ab8c:	6983      	ldr	r3, [r0, #24]
 801ab8e:	b90b      	cbnz	r3, 801ab94 <_vfiprintf_r+0x18>
 801ab90:	f7ff fe74 	bl	801a87c <__sinit>
 801ab94:	4b89      	ldr	r3, [pc, #548]	; (801adbc <_vfiprintf_r+0x240>)
 801ab96:	429d      	cmp	r5, r3
 801ab98:	d11b      	bne.n	801abd2 <_vfiprintf_r+0x56>
 801ab9a:	6875      	ldr	r5, [r6, #4]
 801ab9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ab9e:	07d9      	lsls	r1, r3, #31
 801aba0:	d405      	bmi.n	801abae <_vfiprintf_r+0x32>
 801aba2:	89ab      	ldrh	r3, [r5, #12]
 801aba4:	059a      	lsls	r2, r3, #22
 801aba6:	d402      	bmi.n	801abae <_vfiprintf_r+0x32>
 801aba8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801abaa:	f7ff ff3c 	bl	801aa26 <__retarget_lock_acquire_recursive>
 801abae:	89ab      	ldrh	r3, [r5, #12]
 801abb0:	071b      	lsls	r3, r3, #28
 801abb2:	d501      	bpl.n	801abb8 <_vfiprintf_r+0x3c>
 801abb4:	692b      	ldr	r3, [r5, #16]
 801abb6:	b9eb      	cbnz	r3, 801abf4 <_vfiprintf_r+0x78>
 801abb8:	4629      	mov	r1, r5
 801abba:	4630      	mov	r0, r6
 801abbc:	f000 fc1c 	bl	801b3f8 <__swsetup_r>
 801abc0:	b1c0      	cbz	r0, 801abf4 <_vfiprintf_r+0x78>
 801abc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801abc4:	07dc      	lsls	r4, r3, #31
 801abc6:	d50e      	bpl.n	801abe6 <_vfiprintf_r+0x6a>
 801abc8:	f04f 30ff 	mov.w	r0, #4294967295
 801abcc:	b01d      	add	sp, #116	; 0x74
 801abce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801abd2:	4b7b      	ldr	r3, [pc, #492]	; (801adc0 <_vfiprintf_r+0x244>)
 801abd4:	429d      	cmp	r5, r3
 801abd6:	d101      	bne.n	801abdc <_vfiprintf_r+0x60>
 801abd8:	68b5      	ldr	r5, [r6, #8]
 801abda:	e7df      	b.n	801ab9c <_vfiprintf_r+0x20>
 801abdc:	4b79      	ldr	r3, [pc, #484]	; (801adc4 <_vfiprintf_r+0x248>)
 801abde:	429d      	cmp	r5, r3
 801abe0:	bf08      	it	eq
 801abe2:	68f5      	ldreq	r5, [r6, #12]
 801abe4:	e7da      	b.n	801ab9c <_vfiprintf_r+0x20>
 801abe6:	89ab      	ldrh	r3, [r5, #12]
 801abe8:	0598      	lsls	r0, r3, #22
 801abea:	d4ed      	bmi.n	801abc8 <_vfiprintf_r+0x4c>
 801abec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801abee:	f7ff ff1b 	bl	801aa28 <__retarget_lock_release_recursive>
 801abf2:	e7e9      	b.n	801abc8 <_vfiprintf_r+0x4c>
 801abf4:	2300      	movs	r3, #0
 801abf6:	9309      	str	r3, [sp, #36]	; 0x24
 801abf8:	2320      	movs	r3, #32
 801abfa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801abfe:	f8cd 800c 	str.w	r8, [sp, #12]
 801ac02:	2330      	movs	r3, #48	; 0x30
 801ac04:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801adc8 <_vfiprintf_r+0x24c>
 801ac08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ac0c:	f04f 0901 	mov.w	r9, #1
 801ac10:	4623      	mov	r3, r4
 801ac12:	469a      	mov	sl, r3
 801ac14:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ac18:	b10a      	cbz	r2, 801ac1e <_vfiprintf_r+0xa2>
 801ac1a:	2a25      	cmp	r2, #37	; 0x25
 801ac1c:	d1f9      	bne.n	801ac12 <_vfiprintf_r+0x96>
 801ac1e:	ebba 0b04 	subs.w	fp, sl, r4
 801ac22:	d00b      	beq.n	801ac3c <_vfiprintf_r+0xc0>
 801ac24:	465b      	mov	r3, fp
 801ac26:	4622      	mov	r2, r4
 801ac28:	4629      	mov	r1, r5
 801ac2a:	4630      	mov	r0, r6
 801ac2c:	f7ff ff93 	bl	801ab56 <__sfputs_r>
 801ac30:	3001      	adds	r0, #1
 801ac32:	f000 80aa 	beq.w	801ad8a <_vfiprintf_r+0x20e>
 801ac36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ac38:	445a      	add	r2, fp
 801ac3a:	9209      	str	r2, [sp, #36]	; 0x24
 801ac3c:	f89a 3000 	ldrb.w	r3, [sl]
 801ac40:	2b00      	cmp	r3, #0
 801ac42:	f000 80a2 	beq.w	801ad8a <_vfiprintf_r+0x20e>
 801ac46:	2300      	movs	r3, #0
 801ac48:	f04f 32ff 	mov.w	r2, #4294967295
 801ac4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ac50:	f10a 0a01 	add.w	sl, sl, #1
 801ac54:	9304      	str	r3, [sp, #16]
 801ac56:	9307      	str	r3, [sp, #28]
 801ac58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ac5c:	931a      	str	r3, [sp, #104]	; 0x68
 801ac5e:	4654      	mov	r4, sl
 801ac60:	2205      	movs	r2, #5
 801ac62:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ac66:	4858      	ldr	r0, [pc, #352]	; (801adc8 <_vfiprintf_r+0x24c>)
 801ac68:	f7e5 faea 	bl	8000240 <memchr>
 801ac6c:	9a04      	ldr	r2, [sp, #16]
 801ac6e:	b9d8      	cbnz	r0, 801aca8 <_vfiprintf_r+0x12c>
 801ac70:	06d1      	lsls	r1, r2, #27
 801ac72:	bf44      	itt	mi
 801ac74:	2320      	movmi	r3, #32
 801ac76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ac7a:	0713      	lsls	r3, r2, #28
 801ac7c:	bf44      	itt	mi
 801ac7e:	232b      	movmi	r3, #43	; 0x2b
 801ac80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ac84:	f89a 3000 	ldrb.w	r3, [sl]
 801ac88:	2b2a      	cmp	r3, #42	; 0x2a
 801ac8a:	d015      	beq.n	801acb8 <_vfiprintf_r+0x13c>
 801ac8c:	9a07      	ldr	r2, [sp, #28]
 801ac8e:	4654      	mov	r4, sl
 801ac90:	2000      	movs	r0, #0
 801ac92:	f04f 0c0a 	mov.w	ip, #10
 801ac96:	4621      	mov	r1, r4
 801ac98:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ac9c:	3b30      	subs	r3, #48	; 0x30
 801ac9e:	2b09      	cmp	r3, #9
 801aca0:	d94e      	bls.n	801ad40 <_vfiprintf_r+0x1c4>
 801aca2:	b1b0      	cbz	r0, 801acd2 <_vfiprintf_r+0x156>
 801aca4:	9207      	str	r2, [sp, #28]
 801aca6:	e014      	b.n	801acd2 <_vfiprintf_r+0x156>
 801aca8:	eba0 0308 	sub.w	r3, r0, r8
 801acac:	fa09 f303 	lsl.w	r3, r9, r3
 801acb0:	4313      	orrs	r3, r2
 801acb2:	9304      	str	r3, [sp, #16]
 801acb4:	46a2      	mov	sl, r4
 801acb6:	e7d2      	b.n	801ac5e <_vfiprintf_r+0xe2>
 801acb8:	9b03      	ldr	r3, [sp, #12]
 801acba:	1d19      	adds	r1, r3, #4
 801acbc:	681b      	ldr	r3, [r3, #0]
 801acbe:	9103      	str	r1, [sp, #12]
 801acc0:	2b00      	cmp	r3, #0
 801acc2:	bfbb      	ittet	lt
 801acc4:	425b      	neglt	r3, r3
 801acc6:	f042 0202 	orrlt.w	r2, r2, #2
 801acca:	9307      	strge	r3, [sp, #28]
 801accc:	9307      	strlt	r3, [sp, #28]
 801acce:	bfb8      	it	lt
 801acd0:	9204      	strlt	r2, [sp, #16]
 801acd2:	7823      	ldrb	r3, [r4, #0]
 801acd4:	2b2e      	cmp	r3, #46	; 0x2e
 801acd6:	d10c      	bne.n	801acf2 <_vfiprintf_r+0x176>
 801acd8:	7863      	ldrb	r3, [r4, #1]
 801acda:	2b2a      	cmp	r3, #42	; 0x2a
 801acdc:	d135      	bne.n	801ad4a <_vfiprintf_r+0x1ce>
 801acde:	9b03      	ldr	r3, [sp, #12]
 801ace0:	1d1a      	adds	r2, r3, #4
 801ace2:	681b      	ldr	r3, [r3, #0]
 801ace4:	9203      	str	r2, [sp, #12]
 801ace6:	2b00      	cmp	r3, #0
 801ace8:	bfb8      	it	lt
 801acea:	f04f 33ff 	movlt.w	r3, #4294967295
 801acee:	3402      	adds	r4, #2
 801acf0:	9305      	str	r3, [sp, #20]
 801acf2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801add8 <_vfiprintf_r+0x25c>
 801acf6:	7821      	ldrb	r1, [r4, #0]
 801acf8:	2203      	movs	r2, #3
 801acfa:	4650      	mov	r0, sl
 801acfc:	f7e5 faa0 	bl	8000240 <memchr>
 801ad00:	b140      	cbz	r0, 801ad14 <_vfiprintf_r+0x198>
 801ad02:	2340      	movs	r3, #64	; 0x40
 801ad04:	eba0 000a 	sub.w	r0, r0, sl
 801ad08:	fa03 f000 	lsl.w	r0, r3, r0
 801ad0c:	9b04      	ldr	r3, [sp, #16]
 801ad0e:	4303      	orrs	r3, r0
 801ad10:	3401      	adds	r4, #1
 801ad12:	9304      	str	r3, [sp, #16]
 801ad14:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ad18:	482c      	ldr	r0, [pc, #176]	; (801adcc <_vfiprintf_r+0x250>)
 801ad1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ad1e:	2206      	movs	r2, #6
 801ad20:	f7e5 fa8e 	bl	8000240 <memchr>
 801ad24:	2800      	cmp	r0, #0
 801ad26:	d03f      	beq.n	801ada8 <_vfiprintf_r+0x22c>
 801ad28:	4b29      	ldr	r3, [pc, #164]	; (801add0 <_vfiprintf_r+0x254>)
 801ad2a:	bb1b      	cbnz	r3, 801ad74 <_vfiprintf_r+0x1f8>
 801ad2c:	9b03      	ldr	r3, [sp, #12]
 801ad2e:	3307      	adds	r3, #7
 801ad30:	f023 0307 	bic.w	r3, r3, #7
 801ad34:	3308      	adds	r3, #8
 801ad36:	9303      	str	r3, [sp, #12]
 801ad38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ad3a:	443b      	add	r3, r7
 801ad3c:	9309      	str	r3, [sp, #36]	; 0x24
 801ad3e:	e767      	b.n	801ac10 <_vfiprintf_r+0x94>
 801ad40:	fb0c 3202 	mla	r2, ip, r2, r3
 801ad44:	460c      	mov	r4, r1
 801ad46:	2001      	movs	r0, #1
 801ad48:	e7a5      	b.n	801ac96 <_vfiprintf_r+0x11a>
 801ad4a:	2300      	movs	r3, #0
 801ad4c:	3401      	adds	r4, #1
 801ad4e:	9305      	str	r3, [sp, #20]
 801ad50:	4619      	mov	r1, r3
 801ad52:	f04f 0c0a 	mov.w	ip, #10
 801ad56:	4620      	mov	r0, r4
 801ad58:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ad5c:	3a30      	subs	r2, #48	; 0x30
 801ad5e:	2a09      	cmp	r2, #9
 801ad60:	d903      	bls.n	801ad6a <_vfiprintf_r+0x1ee>
 801ad62:	2b00      	cmp	r3, #0
 801ad64:	d0c5      	beq.n	801acf2 <_vfiprintf_r+0x176>
 801ad66:	9105      	str	r1, [sp, #20]
 801ad68:	e7c3      	b.n	801acf2 <_vfiprintf_r+0x176>
 801ad6a:	fb0c 2101 	mla	r1, ip, r1, r2
 801ad6e:	4604      	mov	r4, r0
 801ad70:	2301      	movs	r3, #1
 801ad72:	e7f0      	b.n	801ad56 <_vfiprintf_r+0x1da>
 801ad74:	ab03      	add	r3, sp, #12
 801ad76:	9300      	str	r3, [sp, #0]
 801ad78:	462a      	mov	r2, r5
 801ad7a:	4b16      	ldr	r3, [pc, #88]	; (801add4 <_vfiprintf_r+0x258>)
 801ad7c:	a904      	add	r1, sp, #16
 801ad7e:	4630      	mov	r0, r6
 801ad80:	f3af 8000 	nop.w
 801ad84:	4607      	mov	r7, r0
 801ad86:	1c78      	adds	r0, r7, #1
 801ad88:	d1d6      	bne.n	801ad38 <_vfiprintf_r+0x1bc>
 801ad8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ad8c:	07d9      	lsls	r1, r3, #31
 801ad8e:	d405      	bmi.n	801ad9c <_vfiprintf_r+0x220>
 801ad90:	89ab      	ldrh	r3, [r5, #12]
 801ad92:	059a      	lsls	r2, r3, #22
 801ad94:	d402      	bmi.n	801ad9c <_vfiprintf_r+0x220>
 801ad96:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ad98:	f7ff fe46 	bl	801aa28 <__retarget_lock_release_recursive>
 801ad9c:	89ab      	ldrh	r3, [r5, #12]
 801ad9e:	065b      	lsls	r3, r3, #25
 801ada0:	f53f af12 	bmi.w	801abc8 <_vfiprintf_r+0x4c>
 801ada4:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ada6:	e711      	b.n	801abcc <_vfiprintf_r+0x50>
 801ada8:	ab03      	add	r3, sp, #12
 801adaa:	9300      	str	r3, [sp, #0]
 801adac:	462a      	mov	r2, r5
 801adae:	4b09      	ldr	r3, [pc, #36]	; (801add4 <_vfiprintf_r+0x258>)
 801adb0:	a904      	add	r1, sp, #16
 801adb2:	4630      	mov	r0, r6
 801adb4:	f000 f880 	bl	801aeb8 <_printf_i>
 801adb8:	e7e4      	b.n	801ad84 <_vfiprintf_r+0x208>
 801adba:	bf00      	nop
 801adbc:	0801f424 	.word	0x0801f424
 801adc0:	0801f444 	.word	0x0801f444
 801adc4:	0801f404 	.word	0x0801f404
 801adc8:	0801f468 	.word	0x0801f468
 801adcc:	0801f472 	.word	0x0801f472
 801add0:	00000000 	.word	0x00000000
 801add4:	0801ab57 	.word	0x0801ab57
 801add8:	0801f46e 	.word	0x0801f46e

0801addc <_printf_common>:
 801addc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ade0:	4616      	mov	r6, r2
 801ade2:	4699      	mov	r9, r3
 801ade4:	688a      	ldr	r2, [r1, #8]
 801ade6:	690b      	ldr	r3, [r1, #16]
 801ade8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801adec:	4293      	cmp	r3, r2
 801adee:	bfb8      	it	lt
 801adf0:	4613      	movlt	r3, r2
 801adf2:	6033      	str	r3, [r6, #0]
 801adf4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801adf8:	4607      	mov	r7, r0
 801adfa:	460c      	mov	r4, r1
 801adfc:	b10a      	cbz	r2, 801ae02 <_printf_common+0x26>
 801adfe:	3301      	adds	r3, #1
 801ae00:	6033      	str	r3, [r6, #0]
 801ae02:	6823      	ldr	r3, [r4, #0]
 801ae04:	0699      	lsls	r1, r3, #26
 801ae06:	bf42      	ittt	mi
 801ae08:	6833      	ldrmi	r3, [r6, #0]
 801ae0a:	3302      	addmi	r3, #2
 801ae0c:	6033      	strmi	r3, [r6, #0]
 801ae0e:	6825      	ldr	r5, [r4, #0]
 801ae10:	f015 0506 	ands.w	r5, r5, #6
 801ae14:	d106      	bne.n	801ae24 <_printf_common+0x48>
 801ae16:	f104 0a19 	add.w	sl, r4, #25
 801ae1a:	68e3      	ldr	r3, [r4, #12]
 801ae1c:	6832      	ldr	r2, [r6, #0]
 801ae1e:	1a9b      	subs	r3, r3, r2
 801ae20:	42ab      	cmp	r3, r5
 801ae22:	dc26      	bgt.n	801ae72 <_printf_common+0x96>
 801ae24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801ae28:	1e13      	subs	r3, r2, #0
 801ae2a:	6822      	ldr	r2, [r4, #0]
 801ae2c:	bf18      	it	ne
 801ae2e:	2301      	movne	r3, #1
 801ae30:	0692      	lsls	r2, r2, #26
 801ae32:	d42b      	bmi.n	801ae8c <_printf_common+0xb0>
 801ae34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801ae38:	4649      	mov	r1, r9
 801ae3a:	4638      	mov	r0, r7
 801ae3c:	47c0      	blx	r8
 801ae3e:	3001      	adds	r0, #1
 801ae40:	d01e      	beq.n	801ae80 <_printf_common+0xa4>
 801ae42:	6823      	ldr	r3, [r4, #0]
 801ae44:	68e5      	ldr	r5, [r4, #12]
 801ae46:	6832      	ldr	r2, [r6, #0]
 801ae48:	f003 0306 	and.w	r3, r3, #6
 801ae4c:	2b04      	cmp	r3, #4
 801ae4e:	bf08      	it	eq
 801ae50:	1aad      	subeq	r5, r5, r2
 801ae52:	68a3      	ldr	r3, [r4, #8]
 801ae54:	6922      	ldr	r2, [r4, #16]
 801ae56:	bf0c      	ite	eq
 801ae58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ae5c:	2500      	movne	r5, #0
 801ae5e:	4293      	cmp	r3, r2
 801ae60:	bfc4      	itt	gt
 801ae62:	1a9b      	subgt	r3, r3, r2
 801ae64:	18ed      	addgt	r5, r5, r3
 801ae66:	2600      	movs	r6, #0
 801ae68:	341a      	adds	r4, #26
 801ae6a:	42b5      	cmp	r5, r6
 801ae6c:	d11a      	bne.n	801aea4 <_printf_common+0xc8>
 801ae6e:	2000      	movs	r0, #0
 801ae70:	e008      	b.n	801ae84 <_printf_common+0xa8>
 801ae72:	2301      	movs	r3, #1
 801ae74:	4652      	mov	r2, sl
 801ae76:	4649      	mov	r1, r9
 801ae78:	4638      	mov	r0, r7
 801ae7a:	47c0      	blx	r8
 801ae7c:	3001      	adds	r0, #1
 801ae7e:	d103      	bne.n	801ae88 <_printf_common+0xac>
 801ae80:	f04f 30ff 	mov.w	r0, #4294967295
 801ae84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ae88:	3501      	adds	r5, #1
 801ae8a:	e7c6      	b.n	801ae1a <_printf_common+0x3e>
 801ae8c:	18e1      	adds	r1, r4, r3
 801ae8e:	1c5a      	adds	r2, r3, #1
 801ae90:	2030      	movs	r0, #48	; 0x30
 801ae92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801ae96:	4422      	add	r2, r4
 801ae98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801ae9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801aea0:	3302      	adds	r3, #2
 801aea2:	e7c7      	b.n	801ae34 <_printf_common+0x58>
 801aea4:	2301      	movs	r3, #1
 801aea6:	4622      	mov	r2, r4
 801aea8:	4649      	mov	r1, r9
 801aeaa:	4638      	mov	r0, r7
 801aeac:	47c0      	blx	r8
 801aeae:	3001      	adds	r0, #1
 801aeb0:	d0e6      	beq.n	801ae80 <_printf_common+0xa4>
 801aeb2:	3601      	adds	r6, #1
 801aeb4:	e7d9      	b.n	801ae6a <_printf_common+0x8e>
	...

0801aeb8 <_printf_i>:
 801aeb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801aebc:	460c      	mov	r4, r1
 801aebe:	4691      	mov	r9, r2
 801aec0:	7e27      	ldrb	r7, [r4, #24]
 801aec2:	990c      	ldr	r1, [sp, #48]	; 0x30
 801aec4:	2f78      	cmp	r7, #120	; 0x78
 801aec6:	4680      	mov	r8, r0
 801aec8:	469a      	mov	sl, r3
 801aeca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801aece:	d807      	bhi.n	801aee0 <_printf_i+0x28>
 801aed0:	2f62      	cmp	r7, #98	; 0x62
 801aed2:	d80a      	bhi.n	801aeea <_printf_i+0x32>
 801aed4:	2f00      	cmp	r7, #0
 801aed6:	f000 80d8 	beq.w	801b08a <_printf_i+0x1d2>
 801aeda:	2f58      	cmp	r7, #88	; 0x58
 801aedc:	f000 80a3 	beq.w	801b026 <_printf_i+0x16e>
 801aee0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801aee4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801aee8:	e03a      	b.n	801af60 <_printf_i+0xa8>
 801aeea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801aeee:	2b15      	cmp	r3, #21
 801aef0:	d8f6      	bhi.n	801aee0 <_printf_i+0x28>
 801aef2:	a001      	add	r0, pc, #4	; (adr r0, 801aef8 <_printf_i+0x40>)
 801aef4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801aef8:	0801af51 	.word	0x0801af51
 801aefc:	0801af65 	.word	0x0801af65
 801af00:	0801aee1 	.word	0x0801aee1
 801af04:	0801aee1 	.word	0x0801aee1
 801af08:	0801aee1 	.word	0x0801aee1
 801af0c:	0801aee1 	.word	0x0801aee1
 801af10:	0801af65 	.word	0x0801af65
 801af14:	0801aee1 	.word	0x0801aee1
 801af18:	0801aee1 	.word	0x0801aee1
 801af1c:	0801aee1 	.word	0x0801aee1
 801af20:	0801aee1 	.word	0x0801aee1
 801af24:	0801b071 	.word	0x0801b071
 801af28:	0801af95 	.word	0x0801af95
 801af2c:	0801b053 	.word	0x0801b053
 801af30:	0801aee1 	.word	0x0801aee1
 801af34:	0801aee1 	.word	0x0801aee1
 801af38:	0801b093 	.word	0x0801b093
 801af3c:	0801aee1 	.word	0x0801aee1
 801af40:	0801af95 	.word	0x0801af95
 801af44:	0801aee1 	.word	0x0801aee1
 801af48:	0801aee1 	.word	0x0801aee1
 801af4c:	0801b05b 	.word	0x0801b05b
 801af50:	680b      	ldr	r3, [r1, #0]
 801af52:	1d1a      	adds	r2, r3, #4
 801af54:	681b      	ldr	r3, [r3, #0]
 801af56:	600a      	str	r2, [r1, #0]
 801af58:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801af5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801af60:	2301      	movs	r3, #1
 801af62:	e0a3      	b.n	801b0ac <_printf_i+0x1f4>
 801af64:	6825      	ldr	r5, [r4, #0]
 801af66:	6808      	ldr	r0, [r1, #0]
 801af68:	062e      	lsls	r6, r5, #24
 801af6a:	f100 0304 	add.w	r3, r0, #4
 801af6e:	d50a      	bpl.n	801af86 <_printf_i+0xce>
 801af70:	6805      	ldr	r5, [r0, #0]
 801af72:	600b      	str	r3, [r1, #0]
 801af74:	2d00      	cmp	r5, #0
 801af76:	da03      	bge.n	801af80 <_printf_i+0xc8>
 801af78:	232d      	movs	r3, #45	; 0x2d
 801af7a:	426d      	negs	r5, r5
 801af7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801af80:	485e      	ldr	r0, [pc, #376]	; (801b0fc <_printf_i+0x244>)
 801af82:	230a      	movs	r3, #10
 801af84:	e019      	b.n	801afba <_printf_i+0x102>
 801af86:	f015 0f40 	tst.w	r5, #64	; 0x40
 801af8a:	6805      	ldr	r5, [r0, #0]
 801af8c:	600b      	str	r3, [r1, #0]
 801af8e:	bf18      	it	ne
 801af90:	b22d      	sxthne	r5, r5
 801af92:	e7ef      	b.n	801af74 <_printf_i+0xbc>
 801af94:	680b      	ldr	r3, [r1, #0]
 801af96:	6825      	ldr	r5, [r4, #0]
 801af98:	1d18      	adds	r0, r3, #4
 801af9a:	6008      	str	r0, [r1, #0]
 801af9c:	0628      	lsls	r0, r5, #24
 801af9e:	d501      	bpl.n	801afa4 <_printf_i+0xec>
 801afa0:	681d      	ldr	r5, [r3, #0]
 801afa2:	e002      	b.n	801afaa <_printf_i+0xf2>
 801afa4:	0669      	lsls	r1, r5, #25
 801afa6:	d5fb      	bpl.n	801afa0 <_printf_i+0xe8>
 801afa8:	881d      	ldrh	r5, [r3, #0]
 801afaa:	4854      	ldr	r0, [pc, #336]	; (801b0fc <_printf_i+0x244>)
 801afac:	2f6f      	cmp	r7, #111	; 0x6f
 801afae:	bf0c      	ite	eq
 801afb0:	2308      	moveq	r3, #8
 801afb2:	230a      	movne	r3, #10
 801afb4:	2100      	movs	r1, #0
 801afb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801afba:	6866      	ldr	r6, [r4, #4]
 801afbc:	60a6      	str	r6, [r4, #8]
 801afbe:	2e00      	cmp	r6, #0
 801afc0:	bfa2      	ittt	ge
 801afc2:	6821      	ldrge	r1, [r4, #0]
 801afc4:	f021 0104 	bicge.w	r1, r1, #4
 801afc8:	6021      	strge	r1, [r4, #0]
 801afca:	b90d      	cbnz	r5, 801afd0 <_printf_i+0x118>
 801afcc:	2e00      	cmp	r6, #0
 801afce:	d04d      	beq.n	801b06c <_printf_i+0x1b4>
 801afd0:	4616      	mov	r6, r2
 801afd2:	fbb5 f1f3 	udiv	r1, r5, r3
 801afd6:	fb03 5711 	mls	r7, r3, r1, r5
 801afda:	5dc7      	ldrb	r7, [r0, r7]
 801afdc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801afe0:	462f      	mov	r7, r5
 801afe2:	42bb      	cmp	r3, r7
 801afe4:	460d      	mov	r5, r1
 801afe6:	d9f4      	bls.n	801afd2 <_printf_i+0x11a>
 801afe8:	2b08      	cmp	r3, #8
 801afea:	d10b      	bne.n	801b004 <_printf_i+0x14c>
 801afec:	6823      	ldr	r3, [r4, #0]
 801afee:	07df      	lsls	r7, r3, #31
 801aff0:	d508      	bpl.n	801b004 <_printf_i+0x14c>
 801aff2:	6923      	ldr	r3, [r4, #16]
 801aff4:	6861      	ldr	r1, [r4, #4]
 801aff6:	4299      	cmp	r1, r3
 801aff8:	bfde      	ittt	le
 801affa:	2330      	movle	r3, #48	; 0x30
 801affc:	f806 3c01 	strble.w	r3, [r6, #-1]
 801b000:	f106 36ff 	addle.w	r6, r6, #4294967295
 801b004:	1b92      	subs	r2, r2, r6
 801b006:	6122      	str	r2, [r4, #16]
 801b008:	f8cd a000 	str.w	sl, [sp]
 801b00c:	464b      	mov	r3, r9
 801b00e:	aa03      	add	r2, sp, #12
 801b010:	4621      	mov	r1, r4
 801b012:	4640      	mov	r0, r8
 801b014:	f7ff fee2 	bl	801addc <_printf_common>
 801b018:	3001      	adds	r0, #1
 801b01a:	d14c      	bne.n	801b0b6 <_printf_i+0x1fe>
 801b01c:	f04f 30ff 	mov.w	r0, #4294967295
 801b020:	b004      	add	sp, #16
 801b022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b026:	4835      	ldr	r0, [pc, #212]	; (801b0fc <_printf_i+0x244>)
 801b028:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801b02c:	6823      	ldr	r3, [r4, #0]
 801b02e:	680e      	ldr	r6, [r1, #0]
 801b030:	061f      	lsls	r7, r3, #24
 801b032:	f856 5b04 	ldr.w	r5, [r6], #4
 801b036:	600e      	str	r6, [r1, #0]
 801b038:	d514      	bpl.n	801b064 <_printf_i+0x1ac>
 801b03a:	07d9      	lsls	r1, r3, #31
 801b03c:	bf44      	itt	mi
 801b03e:	f043 0320 	orrmi.w	r3, r3, #32
 801b042:	6023      	strmi	r3, [r4, #0]
 801b044:	b91d      	cbnz	r5, 801b04e <_printf_i+0x196>
 801b046:	6823      	ldr	r3, [r4, #0]
 801b048:	f023 0320 	bic.w	r3, r3, #32
 801b04c:	6023      	str	r3, [r4, #0]
 801b04e:	2310      	movs	r3, #16
 801b050:	e7b0      	b.n	801afb4 <_printf_i+0xfc>
 801b052:	6823      	ldr	r3, [r4, #0]
 801b054:	f043 0320 	orr.w	r3, r3, #32
 801b058:	6023      	str	r3, [r4, #0]
 801b05a:	2378      	movs	r3, #120	; 0x78
 801b05c:	4828      	ldr	r0, [pc, #160]	; (801b100 <_printf_i+0x248>)
 801b05e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801b062:	e7e3      	b.n	801b02c <_printf_i+0x174>
 801b064:	065e      	lsls	r6, r3, #25
 801b066:	bf48      	it	mi
 801b068:	b2ad      	uxthmi	r5, r5
 801b06a:	e7e6      	b.n	801b03a <_printf_i+0x182>
 801b06c:	4616      	mov	r6, r2
 801b06e:	e7bb      	b.n	801afe8 <_printf_i+0x130>
 801b070:	680b      	ldr	r3, [r1, #0]
 801b072:	6826      	ldr	r6, [r4, #0]
 801b074:	6960      	ldr	r0, [r4, #20]
 801b076:	1d1d      	adds	r5, r3, #4
 801b078:	600d      	str	r5, [r1, #0]
 801b07a:	0635      	lsls	r5, r6, #24
 801b07c:	681b      	ldr	r3, [r3, #0]
 801b07e:	d501      	bpl.n	801b084 <_printf_i+0x1cc>
 801b080:	6018      	str	r0, [r3, #0]
 801b082:	e002      	b.n	801b08a <_printf_i+0x1d2>
 801b084:	0671      	lsls	r1, r6, #25
 801b086:	d5fb      	bpl.n	801b080 <_printf_i+0x1c8>
 801b088:	8018      	strh	r0, [r3, #0]
 801b08a:	2300      	movs	r3, #0
 801b08c:	6123      	str	r3, [r4, #16]
 801b08e:	4616      	mov	r6, r2
 801b090:	e7ba      	b.n	801b008 <_printf_i+0x150>
 801b092:	680b      	ldr	r3, [r1, #0]
 801b094:	1d1a      	adds	r2, r3, #4
 801b096:	600a      	str	r2, [r1, #0]
 801b098:	681e      	ldr	r6, [r3, #0]
 801b09a:	6862      	ldr	r2, [r4, #4]
 801b09c:	2100      	movs	r1, #0
 801b09e:	4630      	mov	r0, r6
 801b0a0:	f7e5 f8ce 	bl	8000240 <memchr>
 801b0a4:	b108      	cbz	r0, 801b0aa <_printf_i+0x1f2>
 801b0a6:	1b80      	subs	r0, r0, r6
 801b0a8:	6060      	str	r0, [r4, #4]
 801b0aa:	6863      	ldr	r3, [r4, #4]
 801b0ac:	6123      	str	r3, [r4, #16]
 801b0ae:	2300      	movs	r3, #0
 801b0b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b0b4:	e7a8      	b.n	801b008 <_printf_i+0x150>
 801b0b6:	6923      	ldr	r3, [r4, #16]
 801b0b8:	4632      	mov	r2, r6
 801b0ba:	4649      	mov	r1, r9
 801b0bc:	4640      	mov	r0, r8
 801b0be:	47d0      	blx	sl
 801b0c0:	3001      	adds	r0, #1
 801b0c2:	d0ab      	beq.n	801b01c <_printf_i+0x164>
 801b0c4:	6823      	ldr	r3, [r4, #0]
 801b0c6:	079b      	lsls	r3, r3, #30
 801b0c8:	d413      	bmi.n	801b0f2 <_printf_i+0x23a>
 801b0ca:	68e0      	ldr	r0, [r4, #12]
 801b0cc:	9b03      	ldr	r3, [sp, #12]
 801b0ce:	4298      	cmp	r0, r3
 801b0d0:	bfb8      	it	lt
 801b0d2:	4618      	movlt	r0, r3
 801b0d4:	e7a4      	b.n	801b020 <_printf_i+0x168>
 801b0d6:	2301      	movs	r3, #1
 801b0d8:	4632      	mov	r2, r6
 801b0da:	4649      	mov	r1, r9
 801b0dc:	4640      	mov	r0, r8
 801b0de:	47d0      	blx	sl
 801b0e0:	3001      	adds	r0, #1
 801b0e2:	d09b      	beq.n	801b01c <_printf_i+0x164>
 801b0e4:	3501      	adds	r5, #1
 801b0e6:	68e3      	ldr	r3, [r4, #12]
 801b0e8:	9903      	ldr	r1, [sp, #12]
 801b0ea:	1a5b      	subs	r3, r3, r1
 801b0ec:	42ab      	cmp	r3, r5
 801b0ee:	dcf2      	bgt.n	801b0d6 <_printf_i+0x21e>
 801b0f0:	e7eb      	b.n	801b0ca <_printf_i+0x212>
 801b0f2:	2500      	movs	r5, #0
 801b0f4:	f104 0619 	add.w	r6, r4, #25
 801b0f8:	e7f5      	b.n	801b0e6 <_printf_i+0x22e>
 801b0fa:	bf00      	nop
 801b0fc:	0801f479 	.word	0x0801f479
 801b100:	0801f48a 	.word	0x0801f48a

0801b104 <iprintf>:
 801b104:	b40f      	push	{r0, r1, r2, r3}
 801b106:	4b0a      	ldr	r3, [pc, #40]	; (801b130 <iprintf+0x2c>)
 801b108:	b513      	push	{r0, r1, r4, lr}
 801b10a:	681c      	ldr	r4, [r3, #0]
 801b10c:	b124      	cbz	r4, 801b118 <iprintf+0x14>
 801b10e:	69a3      	ldr	r3, [r4, #24]
 801b110:	b913      	cbnz	r3, 801b118 <iprintf+0x14>
 801b112:	4620      	mov	r0, r4
 801b114:	f7ff fbb2 	bl	801a87c <__sinit>
 801b118:	ab05      	add	r3, sp, #20
 801b11a:	9a04      	ldr	r2, [sp, #16]
 801b11c:	68a1      	ldr	r1, [r4, #8]
 801b11e:	9301      	str	r3, [sp, #4]
 801b120:	4620      	mov	r0, r4
 801b122:	f7ff fd2b 	bl	801ab7c <_vfiprintf_r>
 801b126:	b002      	add	sp, #8
 801b128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b12c:	b004      	add	sp, #16
 801b12e:	4770      	bx	lr
 801b130:	2000011c 	.word	0x2000011c

0801b134 <rand>:
 801b134:	4b17      	ldr	r3, [pc, #92]	; (801b194 <rand+0x60>)
 801b136:	b510      	push	{r4, lr}
 801b138:	681c      	ldr	r4, [r3, #0]
 801b13a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801b13c:	b9b3      	cbnz	r3, 801b16c <rand+0x38>
 801b13e:	2018      	movs	r0, #24
 801b140:	f000 fb18 	bl	801b774 <malloc>
 801b144:	63a0      	str	r0, [r4, #56]	; 0x38
 801b146:	b928      	cbnz	r0, 801b154 <rand+0x20>
 801b148:	4602      	mov	r2, r0
 801b14a:	4b13      	ldr	r3, [pc, #76]	; (801b198 <rand+0x64>)
 801b14c:	4813      	ldr	r0, [pc, #76]	; (801b19c <rand+0x68>)
 801b14e:	214e      	movs	r1, #78	; 0x4e
 801b150:	f7ff fb1e 	bl	801a790 <__assert_func>
 801b154:	4a12      	ldr	r2, [pc, #72]	; (801b1a0 <rand+0x6c>)
 801b156:	4b13      	ldr	r3, [pc, #76]	; (801b1a4 <rand+0x70>)
 801b158:	e9c0 2300 	strd	r2, r3, [r0]
 801b15c:	4b12      	ldr	r3, [pc, #72]	; (801b1a8 <rand+0x74>)
 801b15e:	6083      	str	r3, [r0, #8]
 801b160:	230b      	movs	r3, #11
 801b162:	8183      	strh	r3, [r0, #12]
 801b164:	2201      	movs	r2, #1
 801b166:	2300      	movs	r3, #0
 801b168:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801b16c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801b16e:	480f      	ldr	r0, [pc, #60]	; (801b1ac <rand+0x78>)
 801b170:	690a      	ldr	r2, [r1, #16]
 801b172:	694b      	ldr	r3, [r1, #20]
 801b174:	4c0e      	ldr	r4, [pc, #56]	; (801b1b0 <rand+0x7c>)
 801b176:	4350      	muls	r0, r2
 801b178:	fb04 0003 	mla	r0, r4, r3, r0
 801b17c:	fba2 3404 	umull	r3, r4, r2, r4
 801b180:	1c5a      	adds	r2, r3, #1
 801b182:	4404      	add	r4, r0
 801b184:	f144 0000 	adc.w	r0, r4, #0
 801b188:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801b18c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801b190:	bd10      	pop	{r4, pc}
 801b192:	bf00      	nop
 801b194:	2000011c 	.word	0x2000011c
 801b198:	0801f49b 	.word	0x0801f49b
 801b19c:	0801f4b2 	.word	0x0801f4b2
 801b1a0:	abcd330e 	.word	0xabcd330e
 801b1a4:	e66d1234 	.word	0xe66d1234
 801b1a8:	0005deec 	.word	0x0005deec
 801b1ac:	5851f42d 	.word	0x5851f42d
 801b1b0:	4c957f2d 	.word	0x4c957f2d

0801b1b4 <cleanup_glue>:
 801b1b4:	b538      	push	{r3, r4, r5, lr}
 801b1b6:	460c      	mov	r4, r1
 801b1b8:	6809      	ldr	r1, [r1, #0]
 801b1ba:	4605      	mov	r5, r0
 801b1bc:	b109      	cbz	r1, 801b1c2 <cleanup_glue+0xe>
 801b1be:	f7ff fff9 	bl	801b1b4 <cleanup_glue>
 801b1c2:	4621      	mov	r1, r4
 801b1c4:	4628      	mov	r0, r5
 801b1c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b1ca:	f000 bae7 	b.w	801b79c <_free_r>
	...

0801b1d0 <_reclaim_reent>:
 801b1d0:	4b2c      	ldr	r3, [pc, #176]	; (801b284 <_reclaim_reent+0xb4>)
 801b1d2:	681b      	ldr	r3, [r3, #0]
 801b1d4:	4283      	cmp	r3, r0
 801b1d6:	b570      	push	{r4, r5, r6, lr}
 801b1d8:	4604      	mov	r4, r0
 801b1da:	d051      	beq.n	801b280 <_reclaim_reent+0xb0>
 801b1dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801b1de:	b143      	cbz	r3, 801b1f2 <_reclaim_reent+0x22>
 801b1e0:	68db      	ldr	r3, [r3, #12]
 801b1e2:	2b00      	cmp	r3, #0
 801b1e4:	d14a      	bne.n	801b27c <_reclaim_reent+0xac>
 801b1e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b1e8:	6819      	ldr	r1, [r3, #0]
 801b1ea:	b111      	cbz	r1, 801b1f2 <_reclaim_reent+0x22>
 801b1ec:	4620      	mov	r0, r4
 801b1ee:	f000 fad5 	bl	801b79c <_free_r>
 801b1f2:	6961      	ldr	r1, [r4, #20]
 801b1f4:	b111      	cbz	r1, 801b1fc <_reclaim_reent+0x2c>
 801b1f6:	4620      	mov	r0, r4
 801b1f8:	f000 fad0 	bl	801b79c <_free_r>
 801b1fc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801b1fe:	b111      	cbz	r1, 801b206 <_reclaim_reent+0x36>
 801b200:	4620      	mov	r0, r4
 801b202:	f000 facb 	bl	801b79c <_free_r>
 801b206:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801b208:	b111      	cbz	r1, 801b210 <_reclaim_reent+0x40>
 801b20a:	4620      	mov	r0, r4
 801b20c:	f000 fac6 	bl	801b79c <_free_r>
 801b210:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801b212:	b111      	cbz	r1, 801b21a <_reclaim_reent+0x4a>
 801b214:	4620      	mov	r0, r4
 801b216:	f000 fac1 	bl	801b79c <_free_r>
 801b21a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801b21c:	b111      	cbz	r1, 801b224 <_reclaim_reent+0x54>
 801b21e:	4620      	mov	r0, r4
 801b220:	f000 fabc 	bl	801b79c <_free_r>
 801b224:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801b226:	b111      	cbz	r1, 801b22e <_reclaim_reent+0x5e>
 801b228:	4620      	mov	r0, r4
 801b22a:	f000 fab7 	bl	801b79c <_free_r>
 801b22e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801b230:	b111      	cbz	r1, 801b238 <_reclaim_reent+0x68>
 801b232:	4620      	mov	r0, r4
 801b234:	f000 fab2 	bl	801b79c <_free_r>
 801b238:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b23a:	b111      	cbz	r1, 801b242 <_reclaim_reent+0x72>
 801b23c:	4620      	mov	r0, r4
 801b23e:	f000 faad 	bl	801b79c <_free_r>
 801b242:	69a3      	ldr	r3, [r4, #24]
 801b244:	b1e3      	cbz	r3, 801b280 <_reclaim_reent+0xb0>
 801b246:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801b248:	4620      	mov	r0, r4
 801b24a:	4798      	blx	r3
 801b24c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801b24e:	b1b9      	cbz	r1, 801b280 <_reclaim_reent+0xb0>
 801b250:	4620      	mov	r0, r4
 801b252:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b256:	f7ff bfad 	b.w	801b1b4 <cleanup_glue>
 801b25a:	5949      	ldr	r1, [r1, r5]
 801b25c:	b941      	cbnz	r1, 801b270 <_reclaim_reent+0xa0>
 801b25e:	3504      	adds	r5, #4
 801b260:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b262:	2d80      	cmp	r5, #128	; 0x80
 801b264:	68d9      	ldr	r1, [r3, #12]
 801b266:	d1f8      	bne.n	801b25a <_reclaim_reent+0x8a>
 801b268:	4620      	mov	r0, r4
 801b26a:	f000 fa97 	bl	801b79c <_free_r>
 801b26e:	e7ba      	b.n	801b1e6 <_reclaim_reent+0x16>
 801b270:	680e      	ldr	r6, [r1, #0]
 801b272:	4620      	mov	r0, r4
 801b274:	f000 fa92 	bl	801b79c <_free_r>
 801b278:	4631      	mov	r1, r6
 801b27a:	e7ef      	b.n	801b25c <_reclaim_reent+0x8c>
 801b27c:	2500      	movs	r5, #0
 801b27e:	e7ef      	b.n	801b260 <_reclaim_reent+0x90>
 801b280:	bd70      	pop	{r4, r5, r6, pc}
 801b282:	bf00      	nop
 801b284:	2000011c 	.word	0x2000011c

0801b288 <_sbrk_r>:
 801b288:	b538      	push	{r3, r4, r5, lr}
 801b28a:	4d06      	ldr	r5, [pc, #24]	; (801b2a4 <_sbrk_r+0x1c>)
 801b28c:	2300      	movs	r3, #0
 801b28e:	4604      	mov	r4, r0
 801b290:	4608      	mov	r0, r1
 801b292:	602b      	str	r3, [r5, #0]
 801b294:	f7e5 fe4c 	bl	8000f30 <_sbrk>
 801b298:	1c43      	adds	r3, r0, #1
 801b29a:	d102      	bne.n	801b2a2 <_sbrk_r+0x1a>
 801b29c:	682b      	ldr	r3, [r5, #0]
 801b29e:	b103      	cbz	r3, 801b2a2 <_sbrk_r+0x1a>
 801b2a0:	6023      	str	r3, [r4, #0]
 801b2a2:	bd38      	pop	{r3, r4, r5, pc}
 801b2a4:	2000db38 	.word	0x2000db38

0801b2a8 <__sread>:
 801b2a8:	b510      	push	{r4, lr}
 801b2aa:	460c      	mov	r4, r1
 801b2ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b2b0:	f000 fac4 	bl	801b83c <_read_r>
 801b2b4:	2800      	cmp	r0, #0
 801b2b6:	bfab      	itete	ge
 801b2b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b2ba:	89a3      	ldrhlt	r3, [r4, #12]
 801b2bc:	181b      	addge	r3, r3, r0
 801b2be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b2c2:	bfac      	ite	ge
 801b2c4:	6563      	strge	r3, [r4, #84]	; 0x54
 801b2c6:	81a3      	strhlt	r3, [r4, #12]
 801b2c8:	bd10      	pop	{r4, pc}

0801b2ca <__swrite>:
 801b2ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b2ce:	461f      	mov	r7, r3
 801b2d0:	898b      	ldrh	r3, [r1, #12]
 801b2d2:	05db      	lsls	r3, r3, #23
 801b2d4:	4605      	mov	r5, r0
 801b2d6:	460c      	mov	r4, r1
 801b2d8:	4616      	mov	r6, r2
 801b2da:	d505      	bpl.n	801b2e8 <__swrite+0x1e>
 801b2dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b2e0:	2302      	movs	r3, #2
 801b2e2:	2200      	movs	r2, #0
 801b2e4:	f000 f9d0 	bl	801b688 <_lseek_r>
 801b2e8:	89a3      	ldrh	r3, [r4, #12]
 801b2ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b2ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b2f2:	81a3      	strh	r3, [r4, #12]
 801b2f4:	4632      	mov	r2, r6
 801b2f6:	463b      	mov	r3, r7
 801b2f8:	4628      	mov	r0, r5
 801b2fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b2fe:	f000 b869 	b.w	801b3d4 <_write_r>

0801b302 <__sseek>:
 801b302:	b510      	push	{r4, lr}
 801b304:	460c      	mov	r4, r1
 801b306:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b30a:	f000 f9bd 	bl	801b688 <_lseek_r>
 801b30e:	1c43      	adds	r3, r0, #1
 801b310:	89a3      	ldrh	r3, [r4, #12]
 801b312:	bf15      	itete	ne
 801b314:	6560      	strne	r0, [r4, #84]	; 0x54
 801b316:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b31a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b31e:	81a3      	strheq	r3, [r4, #12]
 801b320:	bf18      	it	ne
 801b322:	81a3      	strhne	r3, [r4, #12]
 801b324:	bd10      	pop	{r4, pc}

0801b326 <__sclose>:
 801b326:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b32a:	f000 b8db 	b.w	801b4e4 <_close_r>
	...

0801b330 <__swbuf_r>:
 801b330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b332:	460e      	mov	r6, r1
 801b334:	4614      	mov	r4, r2
 801b336:	4605      	mov	r5, r0
 801b338:	b118      	cbz	r0, 801b342 <__swbuf_r+0x12>
 801b33a:	6983      	ldr	r3, [r0, #24]
 801b33c:	b90b      	cbnz	r3, 801b342 <__swbuf_r+0x12>
 801b33e:	f7ff fa9d 	bl	801a87c <__sinit>
 801b342:	4b21      	ldr	r3, [pc, #132]	; (801b3c8 <__swbuf_r+0x98>)
 801b344:	429c      	cmp	r4, r3
 801b346:	d12b      	bne.n	801b3a0 <__swbuf_r+0x70>
 801b348:	686c      	ldr	r4, [r5, #4]
 801b34a:	69a3      	ldr	r3, [r4, #24]
 801b34c:	60a3      	str	r3, [r4, #8]
 801b34e:	89a3      	ldrh	r3, [r4, #12]
 801b350:	071a      	lsls	r2, r3, #28
 801b352:	d52f      	bpl.n	801b3b4 <__swbuf_r+0x84>
 801b354:	6923      	ldr	r3, [r4, #16]
 801b356:	b36b      	cbz	r3, 801b3b4 <__swbuf_r+0x84>
 801b358:	6923      	ldr	r3, [r4, #16]
 801b35a:	6820      	ldr	r0, [r4, #0]
 801b35c:	1ac0      	subs	r0, r0, r3
 801b35e:	6963      	ldr	r3, [r4, #20]
 801b360:	b2f6      	uxtb	r6, r6
 801b362:	4283      	cmp	r3, r0
 801b364:	4637      	mov	r7, r6
 801b366:	dc04      	bgt.n	801b372 <__swbuf_r+0x42>
 801b368:	4621      	mov	r1, r4
 801b36a:	4628      	mov	r0, r5
 801b36c:	f000 f950 	bl	801b610 <_fflush_r>
 801b370:	bb30      	cbnz	r0, 801b3c0 <__swbuf_r+0x90>
 801b372:	68a3      	ldr	r3, [r4, #8]
 801b374:	3b01      	subs	r3, #1
 801b376:	60a3      	str	r3, [r4, #8]
 801b378:	6823      	ldr	r3, [r4, #0]
 801b37a:	1c5a      	adds	r2, r3, #1
 801b37c:	6022      	str	r2, [r4, #0]
 801b37e:	701e      	strb	r6, [r3, #0]
 801b380:	6963      	ldr	r3, [r4, #20]
 801b382:	3001      	adds	r0, #1
 801b384:	4283      	cmp	r3, r0
 801b386:	d004      	beq.n	801b392 <__swbuf_r+0x62>
 801b388:	89a3      	ldrh	r3, [r4, #12]
 801b38a:	07db      	lsls	r3, r3, #31
 801b38c:	d506      	bpl.n	801b39c <__swbuf_r+0x6c>
 801b38e:	2e0a      	cmp	r6, #10
 801b390:	d104      	bne.n	801b39c <__swbuf_r+0x6c>
 801b392:	4621      	mov	r1, r4
 801b394:	4628      	mov	r0, r5
 801b396:	f000 f93b 	bl	801b610 <_fflush_r>
 801b39a:	b988      	cbnz	r0, 801b3c0 <__swbuf_r+0x90>
 801b39c:	4638      	mov	r0, r7
 801b39e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b3a0:	4b0a      	ldr	r3, [pc, #40]	; (801b3cc <__swbuf_r+0x9c>)
 801b3a2:	429c      	cmp	r4, r3
 801b3a4:	d101      	bne.n	801b3aa <__swbuf_r+0x7a>
 801b3a6:	68ac      	ldr	r4, [r5, #8]
 801b3a8:	e7cf      	b.n	801b34a <__swbuf_r+0x1a>
 801b3aa:	4b09      	ldr	r3, [pc, #36]	; (801b3d0 <__swbuf_r+0xa0>)
 801b3ac:	429c      	cmp	r4, r3
 801b3ae:	bf08      	it	eq
 801b3b0:	68ec      	ldreq	r4, [r5, #12]
 801b3b2:	e7ca      	b.n	801b34a <__swbuf_r+0x1a>
 801b3b4:	4621      	mov	r1, r4
 801b3b6:	4628      	mov	r0, r5
 801b3b8:	f000 f81e 	bl	801b3f8 <__swsetup_r>
 801b3bc:	2800      	cmp	r0, #0
 801b3be:	d0cb      	beq.n	801b358 <__swbuf_r+0x28>
 801b3c0:	f04f 37ff 	mov.w	r7, #4294967295
 801b3c4:	e7ea      	b.n	801b39c <__swbuf_r+0x6c>
 801b3c6:	bf00      	nop
 801b3c8:	0801f424 	.word	0x0801f424
 801b3cc:	0801f444 	.word	0x0801f444
 801b3d0:	0801f404 	.word	0x0801f404

0801b3d4 <_write_r>:
 801b3d4:	b538      	push	{r3, r4, r5, lr}
 801b3d6:	4d07      	ldr	r5, [pc, #28]	; (801b3f4 <_write_r+0x20>)
 801b3d8:	4604      	mov	r4, r0
 801b3da:	4608      	mov	r0, r1
 801b3dc:	4611      	mov	r1, r2
 801b3de:	2200      	movs	r2, #0
 801b3e0:	602a      	str	r2, [r5, #0]
 801b3e2:	461a      	mov	r2, r3
 801b3e4:	f7e5 fd53 	bl	8000e8e <_write>
 801b3e8:	1c43      	adds	r3, r0, #1
 801b3ea:	d102      	bne.n	801b3f2 <_write_r+0x1e>
 801b3ec:	682b      	ldr	r3, [r5, #0]
 801b3ee:	b103      	cbz	r3, 801b3f2 <_write_r+0x1e>
 801b3f0:	6023      	str	r3, [r4, #0]
 801b3f2:	bd38      	pop	{r3, r4, r5, pc}
 801b3f4:	2000db38 	.word	0x2000db38

0801b3f8 <__swsetup_r>:
 801b3f8:	4b32      	ldr	r3, [pc, #200]	; (801b4c4 <__swsetup_r+0xcc>)
 801b3fa:	b570      	push	{r4, r5, r6, lr}
 801b3fc:	681d      	ldr	r5, [r3, #0]
 801b3fe:	4606      	mov	r6, r0
 801b400:	460c      	mov	r4, r1
 801b402:	b125      	cbz	r5, 801b40e <__swsetup_r+0x16>
 801b404:	69ab      	ldr	r3, [r5, #24]
 801b406:	b913      	cbnz	r3, 801b40e <__swsetup_r+0x16>
 801b408:	4628      	mov	r0, r5
 801b40a:	f7ff fa37 	bl	801a87c <__sinit>
 801b40e:	4b2e      	ldr	r3, [pc, #184]	; (801b4c8 <__swsetup_r+0xd0>)
 801b410:	429c      	cmp	r4, r3
 801b412:	d10f      	bne.n	801b434 <__swsetup_r+0x3c>
 801b414:	686c      	ldr	r4, [r5, #4]
 801b416:	89a3      	ldrh	r3, [r4, #12]
 801b418:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b41c:	0719      	lsls	r1, r3, #28
 801b41e:	d42c      	bmi.n	801b47a <__swsetup_r+0x82>
 801b420:	06dd      	lsls	r5, r3, #27
 801b422:	d411      	bmi.n	801b448 <__swsetup_r+0x50>
 801b424:	2309      	movs	r3, #9
 801b426:	6033      	str	r3, [r6, #0]
 801b428:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801b42c:	81a3      	strh	r3, [r4, #12]
 801b42e:	f04f 30ff 	mov.w	r0, #4294967295
 801b432:	e03e      	b.n	801b4b2 <__swsetup_r+0xba>
 801b434:	4b25      	ldr	r3, [pc, #148]	; (801b4cc <__swsetup_r+0xd4>)
 801b436:	429c      	cmp	r4, r3
 801b438:	d101      	bne.n	801b43e <__swsetup_r+0x46>
 801b43a:	68ac      	ldr	r4, [r5, #8]
 801b43c:	e7eb      	b.n	801b416 <__swsetup_r+0x1e>
 801b43e:	4b24      	ldr	r3, [pc, #144]	; (801b4d0 <__swsetup_r+0xd8>)
 801b440:	429c      	cmp	r4, r3
 801b442:	bf08      	it	eq
 801b444:	68ec      	ldreq	r4, [r5, #12]
 801b446:	e7e6      	b.n	801b416 <__swsetup_r+0x1e>
 801b448:	0758      	lsls	r0, r3, #29
 801b44a:	d512      	bpl.n	801b472 <__swsetup_r+0x7a>
 801b44c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b44e:	b141      	cbz	r1, 801b462 <__swsetup_r+0x6a>
 801b450:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b454:	4299      	cmp	r1, r3
 801b456:	d002      	beq.n	801b45e <__swsetup_r+0x66>
 801b458:	4630      	mov	r0, r6
 801b45a:	f000 f99f 	bl	801b79c <_free_r>
 801b45e:	2300      	movs	r3, #0
 801b460:	6363      	str	r3, [r4, #52]	; 0x34
 801b462:	89a3      	ldrh	r3, [r4, #12]
 801b464:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801b468:	81a3      	strh	r3, [r4, #12]
 801b46a:	2300      	movs	r3, #0
 801b46c:	6063      	str	r3, [r4, #4]
 801b46e:	6923      	ldr	r3, [r4, #16]
 801b470:	6023      	str	r3, [r4, #0]
 801b472:	89a3      	ldrh	r3, [r4, #12]
 801b474:	f043 0308 	orr.w	r3, r3, #8
 801b478:	81a3      	strh	r3, [r4, #12]
 801b47a:	6923      	ldr	r3, [r4, #16]
 801b47c:	b94b      	cbnz	r3, 801b492 <__swsetup_r+0x9a>
 801b47e:	89a3      	ldrh	r3, [r4, #12]
 801b480:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b484:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b488:	d003      	beq.n	801b492 <__swsetup_r+0x9a>
 801b48a:	4621      	mov	r1, r4
 801b48c:	4630      	mov	r0, r6
 801b48e:	f000 f931 	bl	801b6f4 <__smakebuf_r>
 801b492:	89a0      	ldrh	r0, [r4, #12]
 801b494:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b498:	f010 0301 	ands.w	r3, r0, #1
 801b49c:	d00a      	beq.n	801b4b4 <__swsetup_r+0xbc>
 801b49e:	2300      	movs	r3, #0
 801b4a0:	60a3      	str	r3, [r4, #8]
 801b4a2:	6963      	ldr	r3, [r4, #20]
 801b4a4:	425b      	negs	r3, r3
 801b4a6:	61a3      	str	r3, [r4, #24]
 801b4a8:	6923      	ldr	r3, [r4, #16]
 801b4aa:	b943      	cbnz	r3, 801b4be <__swsetup_r+0xc6>
 801b4ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801b4b0:	d1ba      	bne.n	801b428 <__swsetup_r+0x30>
 801b4b2:	bd70      	pop	{r4, r5, r6, pc}
 801b4b4:	0781      	lsls	r1, r0, #30
 801b4b6:	bf58      	it	pl
 801b4b8:	6963      	ldrpl	r3, [r4, #20]
 801b4ba:	60a3      	str	r3, [r4, #8]
 801b4bc:	e7f4      	b.n	801b4a8 <__swsetup_r+0xb0>
 801b4be:	2000      	movs	r0, #0
 801b4c0:	e7f7      	b.n	801b4b2 <__swsetup_r+0xba>
 801b4c2:	bf00      	nop
 801b4c4:	2000011c 	.word	0x2000011c
 801b4c8:	0801f424 	.word	0x0801f424
 801b4cc:	0801f444 	.word	0x0801f444
 801b4d0:	0801f404 	.word	0x0801f404

0801b4d4 <abort>:
 801b4d4:	b508      	push	{r3, lr}
 801b4d6:	2006      	movs	r0, #6
 801b4d8:	f000 f9ea 	bl	801b8b0 <raise>
 801b4dc:	2001      	movs	r0, #1
 801b4de:	f7e5 fcaf 	bl	8000e40 <_exit>
	...

0801b4e4 <_close_r>:
 801b4e4:	b538      	push	{r3, r4, r5, lr}
 801b4e6:	4d06      	ldr	r5, [pc, #24]	; (801b500 <_close_r+0x1c>)
 801b4e8:	2300      	movs	r3, #0
 801b4ea:	4604      	mov	r4, r0
 801b4ec:	4608      	mov	r0, r1
 801b4ee:	602b      	str	r3, [r5, #0]
 801b4f0:	f7e5 fce9 	bl	8000ec6 <_close>
 801b4f4:	1c43      	adds	r3, r0, #1
 801b4f6:	d102      	bne.n	801b4fe <_close_r+0x1a>
 801b4f8:	682b      	ldr	r3, [r5, #0]
 801b4fa:	b103      	cbz	r3, 801b4fe <_close_r+0x1a>
 801b4fc:	6023      	str	r3, [r4, #0]
 801b4fe:	bd38      	pop	{r3, r4, r5, pc}
 801b500:	2000db38 	.word	0x2000db38

0801b504 <__sflush_r>:
 801b504:	898a      	ldrh	r2, [r1, #12]
 801b506:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b50a:	4605      	mov	r5, r0
 801b50c:	0710      	lsls	r0, r2, #28
 801b50e:	460c      	mov	r4, r1
 801b510:	d458      	bmi.n	801b5c4 <__sflush_r+0xc0>
 801b512:	684b      	ldr	r3, [r1, #4]
 801b514:	2b00      	cmp	r3, #0
 801b516:	dc05      	bgt.n	801b524 <__sflush_r+0x20>
 801b518:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801b51a:	2b00      	cmp	r3, #0
 801b51c:	dc02      	bgt.n	801b524 <__sflush_r+0x20>
 801b51e:	2000      	movs	r0, #0
 801b520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b524:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b526:	2e00      	cmp	r6, #0
 801b528:	d0f9      	beq.n	801b51e <__sflush_r+0x1a>
 801b52a:	2300      	movs	r3, #0
 801b52c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801b530:	682f      	ldr	r7, [r5, #0]
 801b532:	602b      	str	r3, [r5, #0]
 801b534:	d032      	beq.n	801b59c <__sflush_r+0x98>
 801b536:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801b538:	89a3      	ldrh	r3, [r4, #12]
 801b53a:	075a      	lsls	r2, r3, #29
 801b53c:	d505      	bpl.n	801b54a <__sflush_r+0x46>
 801b53e:	6863      	ldr	r3, [r4, #4]
 801b540:	1ac0      	subs	r0, r0, r3
 801b542:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b544:	b10b      	cbz	r3, 801b54a <__sflush_r+0x46>
 801b546:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b548:	1ac0      	subs	r0, r0, r3
 801b54a:	2300      	movs	r3, #0
 801b54c:	4602      	mov	r2, r0
 801b54e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b550:	6a21      	ldr	r1, [r4, #32]
 801b552:	4628      	mov	r0, r5
 801b554:	47b0      	blx	r6
 801b556:	1c43      	adds	r3, r0, #1
 801b558:	89a3      	ldrh	r3, [r4, #12]
 801b55a:	d106      	bne.n	801b56a <__sflush_r+0x66>
 801b55c:	6829      	ldr	r1, [r5, #0]
 801b55e:	291d      	cmp	r1, #29
 801b560:	d82c      	bhi.n	801b5bc <__sflush_r+0xb8>
 801b562:	4a2a      	ldr	r2, [pc, #168]	; (801b60c <__sflush_r+0x108>)
 801b564:	40ca      	lsrs	r2, r1
 801b566:	07d6      	lsls	r6, r2, #31
 801b568:	d528      	bpl.n	801b5bc <__sflush_r+0xb8>
 801b56a:	2200      	movs	r2, #0
 801b56c:	6062      	str	r2, [r4, #4]
 801b56e:	04d9      	lsls	r1, r3, #19
 801b570:	6922      	ldr	r2, [r4, #16]
 801b572:	6022      	str	r2, [r4, #0]
 801b574:	d504      	bpl.n	801b580 <__sflush_r+0x7c>
 801b576:	1c42      	adds	r2, r0, #1
 801b578:	d101      	bne.n	801b57e <__sflush_r+0x7a>
 801b57a:	682b      	ldr	r3, [r5, #0]
 801b57c:	b903      	cbnz	r3, 801b580 <__sflush_r+0x7c>
 801b57e:	6560      	str	r0, [r4, #84]	; 0x54
 801b580:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b582:	602f      	str	r7, [r5, #0]
 801b584:	2900      	cmp	r1, #0
 801b586:	d0ca      	beq.n	801b51e <__sflush_r+0x1a>
 801b588:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b58c:	4299      	cmp	r1, r3
 801b58e:	d002      	beq.n	801b596 <__sflush_r+0x92>
 801b590:	4628      	mov	r0, r5
 801b592:	f000 f903 	bl	801b79c <_free_r>
 801b596:	2000      	movs	r0, #0
 801b598:	6360      	str	r0, [r4, #52]	; 0x34
 801b59a:	e7c1      	b.n	801b520 <__sflush_r+0x1c>
 801b59c:	6a21      	ldr	r1, [r4, #32]
 801b59e:	2301      	movs	r3, #1
 801b5a0:	4628      	mov	r0, r5
 801b5a2:	47b0      	blx	r6
 801b5a4:	1c41      	adds	r1, r0, #1
 801b5a6:	d1c7      	bne.n	801b538 <__sflush_r+0x34>
 801b5a8:	682b      	ldr	r3, [r5, #0]
 801b5aa:	2b00      	cmp	r3, #0
 801b5ac:	d0c4      	beq.n	801b538 <__sflush_r+0x34>
 801b5ae:	2b1d      	cmp	r3, #29
 801b5b0:	d001      	beq.n	801b5b6 <__sflush_r+0xb2>
 801b5b2:	2b16      	cmp	r3, #22
 801b5b4:	d101      	bne.n	801b5ba <__sflush_r+0xb6>
 801b5b6:	602f      	str	r7, [r5, #0]
 801b5b8:	e7b1      	b.n	801b51e <__sflush_r+0x1a>
 801b5ba:	89a3      	ldrh	r3, [r4, #12]
 801b5bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b5c0:	81a3      	strh	r3, [r4, #12]
 801b5c2:	e7ad      	b.n	801b520 <__sflush_r+0x1c>
 801b5c4:	690f      	ldr	r7, [r1, #16]
 801b5c6:	2f00      	cmp	r7, #0
 801b5c8:	d0a9      	beq.n	801b51e <__sflush_r+0x1a>
 801b5ca:	0793      	lsls	r3, r2, #30
 801b5cc:	680e      	ldr	r6, [r1, #0]
 801b5ce:	bf08      	it	eq
 801b5d0:	694b      	ldreq	r3, [r1, #20]
 801b5d2:	600f      	str	r7, [r1, #0]
 801b5d4:	bf18      	it	ne
 801b5d6:	2300      	movne	r3, #0
 801b5d8:	eba6 0807 	sub.w	r8, r6, r7
 801b5dc:	608b      	str	r3, [r1, #8]
 801b5de:	f1b8 0f00 	cmp.w	r8, #0
 801b5e2:	dd9c      	ble.n	801b51e <__sflush_r+0x1a>
 801b5e4:	6a21      	ldr	r1, [r4, #32]
 801b5e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801b5e8:	4643      	mov	r3, r8
 801b5ea:	463a      	mov	r2, r7
 801b5ec:	4628      	mov	r0, r5
 801b5ee:	47b0      	blx	r6
 801b5f0:	2800      	cmp	r0, #0
 801b5f2:	dc06      	bgt.n	801b602 <__sflush_r+0xfe>
 801b5f4:	89a3      	ldrh	r3, [r4, #12]
 801b5f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b5fa:	81a3      	strh	r3, [r4, #12]
 801b5fc:	f04f 30ff 	mov.w	r0, #4294967295
 801b600:	e78e      	b.n	801b520 <__sflush_r+0x1c>
 801b602:	4407      	add	r7, r0
 801b604:	eba8 0800 	sub.w	r8, r8, r0
 801b608:	e7e9      	b.n	801b5de <__sflush_r+0xda>
 801b60a:	bf00      	nop
 801b60c:	20400001 	.word	0x20400001

0801b610 <_fflush_r>:
 801b610:	b538      	push	{r3, r4, r5, lr}
 801b612:	690b      	ldr	r3, [r1, #16]
 801b614:	4605      	mov	r5, r0
 801b616:	460c      	mov	r4, r1
 801b618:	b913      	cbnz	r3, 801b620 <_fflush_r+0x10>
 801b61a:	2500      	movs	r5, #0
 801b61c:	4628      	mov	r0, r5
 801b61e:	bd38      	pop	{r3, r4, r5, pc}
 801b620:	b118      	cbz	r0, 801b62a <_fflush_r+0x1a>
 801b622:	6983      	ldr	r3, [r0, #24]
 801b624:	b90b      	cbnz	r3, 801b62a <_fflush_r+0x1a>
 801b626:	f7ff f929 	bl	801a87c <__sinit>
 801b62a:	4b14      	ldr	r3, [pc, #80]	; (801b67c <_fflush_r+0x6c>)
 801b62c:	429c      	cmp	r4, r3
 801b62e:	d11b      	bne.n	801b668 <_fflush_r+0x58>
 801b630:	686c      	ldr	r4, [r5, #4]
 801b632:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b636:	2b00      	cmp	r3, #0
 801b638:	d0ef      	beq.n	801b61a <_fflush_r+0xa>
 801b63a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801b63c:	07d0      	lsls	r0, r2, #31
 801b63e:	d404      	bmi.n	801b64a <_fflush_r+0x3a>
 801b640:	0599      	lsls	r1, r3, #22
 801b642:	d402      	bmi.n	801b64a <_fflush_r+0x3a>
 801b644:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b646:	f7ff f9ee 	bl	801aa26 <__retarget_lock_acquire_recursive>
 801b64a:	4628      	mov	r0, r5
 801b64c:	4621      	mov	r1, r4
 801b64e:	f7ff ff59 	bl	801b504 <__sflush_r>
 801b652:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b654:	07da      	lsls	r2, r3, #31
 801b656:	4605      	mov	r5, r0
 801b658:	d4e0      	bmi.n	801b61c <_fflush_r+0xc>
 801b65a:	89a3      	ldrh	r3, [r4, #12]
 801b65c:	059b      	lsls	r3, r3, #22
 801b65e:	d4dd      	bmi.n	801b61c <_fflush_r+0xc>
 801b660:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b662:	f7ff f9e1 	bl	801aa28 <__retarget_lock_release_recursive>
 801b666:	e7d9      	b.n	801b61c <_fflush_r+0xc>
 801b668:	4b05      	ldr	r3, [pc, #20]	; (801b680 <_fflush_r+0x70>)
 801b66a:	429c      	cmp	r4, r3
 801b66c:	d101      	bne.n	801b672 <_fflush_r+0x62>
 801b66e:	68ac      	ldr	r4, [r5, #8]
 801b670:	e7df      	b.n	801b632 <_fflush_r+0x22>
 801b672:	4b04      	ldr	r3, [pc, #16]	; (801b684 <_fflush_r+0x74>)
 801b674:	429c      	cmp	r4, r3
 801b676:	bf08      	it	eq
 801b678:	68ec      	ldreq	r4, [r5, #12]
 801b67a:	e7da      	b.n	801b632 <_fflush_r+0x22>
 801b67c:	0801f424 	.word	0x0801f424
 801b680:	0801f444 	.word	0x0801f444
 801b684:	0801f404 	.word	0x0801f404

0801b688 <_lseek_r>:
 801b688:	b538      	push	{r3, r4, r5, lr}
 801b68a:	4d07      	ldr	r5, [pc, #28]	; (801b6a8 <_lseek_r+0x20>)
 801b68c:	4604      	mov	r4, r0
 801b68e:	4608      	mov	r0, r1
 801b690:	4611      	mov	r1, r2
 801b692:	2200      	movs	r2, #0
 801b694:	602a      	str	r2, [r5, #0]
 801b696:	461a      	mov	r2, r3
 801b698:	f7e5 fc3c 	bl	8000f14 <_lseek>
 801b69c:	1c43      	adds	r3, r0, #1
 801b69e:	d102      	bne.n	801b6a6 <_lseek_r+0x1e>
 801b6a0:	682b      	ldr	r3, [r5, #0]
 801b6a2:	b103      	cbz	r3, 801b6a6 <_lseek_r+0x1e>
 801b6a4:	6023      	str	r3, [r4, #0]
 801b6a6:	bd38      	pop	{r3, r4, r5, pc}
 801b6a8:	2000db38 	.word	0x2000db38

0801b6ac <__swhatbuf_r>:
 801b6ac:	b570      	push	{r4, r5, r6, lr}
 801b6ae:	460e      	mov	r6, r1
 801b6b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b6b4:	2900      	cmp	r1, #0
 801b6b6:	b096      	sub	sp, #88	; 0x58
 801b6b8:	4614      	mov	r4, r2
 801b6ba:	461d      	mov	r5, r3
 801b6bc:	da07      	bge.n	801b6ce <__swhatbuf_r+0x22>
 801b6be:	2300      	movs	r3, #0
 801b6c0:	602b      	str	r3, [r5, #0]
 801b6c2:	89b3      	ldrh	r3, [r6, #12]
 801b6c4:	061a      	lsls	r2, r3, #24
 801b6c6:	d410      	bmi.n	801b6ea <__swhatbuf_r+0x3e>
 801b6c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b6cc:	e00e      	b.n	801b6ec <__swhatbuf_r+0x40>
 801b6ce:	466a      	mov	r2, sp
 801b6d0:	f000 f90a 	bl	801b8e8 <_fstat_r>
 801b6d4:	2800      	cmp	r0, #0
 801b6d6:	dbf2      	blt.n	801b6be <__swhatbuf_r+0x12>
 801b6d8:	9a01      	ldr	r2, [sp, #4]
 801b6da:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801b6de:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801b6e2:	425a      	negs	r2, r3
 801b6e4:	415a      	adcs	r2, r3
 801b6e6:	602a      	str	r2, [r5, #0]
 801b6e8:	e7ee      	b.n	801b6c8 <__swhatbuf_r+0x1c>
 801b6ea:	2340      	movs	r3, #64	; 0x40
 801b6ec:	2000      	movs	r0, #0
 801b6ee:	6023      	str	r3, [r4, #0]
 801b6f0:	b016      	add	sp, #88	; 0x58
 801b6f2:	bd70      	pop	{r4, r5, r6, pc}

0801b6f4 <__smakebuf_r>:
 801b6f4:	898b      	ldrh	r3, [r1, #12]
 801b6f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b6f8:	079d      	lsls	r5, r3, #30
 801b6fa:	4606      	mov	r6, r0
 801b6fc:	460c      	mov	r4, r1
 801b6fe:	d507      	bpl.n	801b710 <__smakebuf_r+0x1c>
 801b700:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801b704:	6023      	str	r3, [r4, #0]
 801b706:	6123      	str	r3, [r4, #16]
 801b708:	2301      	movs	r3, #1
 801b70a:	6163      	str	r3, [r4, #20]
 801b70c:	b002      	add	sp, #8
 801b70e:	bd70      	pop	{r4, r5, r6, pc}
 801b710:	ab01      	add	r3, sp, #4
 801b712:	466a      	mov	r2, sp
 801b714:	f7ff ffca 	bl	801b6ac <__swhatbuf_r>
 801b718:	9900      	ldr	r1, [sp, #0]
 801b71a:	4605      	mov	r5, r0
 801b71c:	4630      	mov	r0, r6
 801b71e:	f7ff f9a9 	bl	801aa74 <_malloc_r>
 801b722:	b948      	cbnz	r0, 801b738 <__smakebuf_r+0x44>
 801b724:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b728:	059a      	lsls	r2, r3, #22
 801b72a:	d4ef      	bmi.n	801b70c <__smakebuf_r+0x18>
 801b72c:	f023 0303 	bic.w	r3, r3, #3
 801b730:	f043 0302 	orr.w	r3, r3, #2
 801b734:	81a3      	strh	r3, [r4, #12]
 801b736:	e7e3      	b.n	801b700 <__smakebuf_r+0xc>
 801b738:	4b0d      	ldr	r3, [pc, #52]	; (801b770 <__smakebuf_r+0x7c>)
 801b73a:	62b3      	str	r3, [r6, #40]	; 0x28
 801b73c:	89a3      	ldrh	r3, [r4, #12]
 801b73e:	6020      	str	r0, [r4, #0]
 801b740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b744:	81a3      	strh	r3, [r4, #12]
 801b746:	9b00      	ldr	r3, [sp, #0]
 801b748:	6163      	str	r3, [r4, #20]
 801b74a:	9b01      	ldr	r3, [sp, #4]
 801b74c:	6120      	str	r0, [r4, #16]
 801b74e:	b15b      	cbz	r3, 801b768 <__smakebuf_r+0x74>
 801b750:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b754:	4630      	mov	r0, r6
 801b756:	f000 f8d9 	bl	801b90c <_isatty_r>
 801b75a:	b128      	cbz	r0, 801b768 <__smakebuf_r+0x74>
 801b75c:	89a3      	ldrh	r3, [r4, #12]
 801b75e:	f023 0303 	bic.w	r3, r3, #3
 801b762:	f043 0301 	orr.w	r3, r3, #1
 801b766:	81a3      	strh	r3, [r4, #12]
 801b768:	89a0      	ldrh	r0, [r4, #12]
 801b76a:	4305      	orrs	r5, r0
 801b76c:	81a5      	strh	r5, [r4, #12]
 801b76e:	e7cd      	b.n	801b70c <__smakebuf_r+0x18>
 801b770:	0801a815 	.word	0x0801a815

0801b774 <malloc>:
 801b774:	4b02      	ldr	r3, [pc, #8]	; (801b780 <malloc+0xc>)
 801b776:	4601      	mov	r1, r0
 801b778:	6818      	ldr	r0, [r3, #0]
 801b77a:	f7ff b97b 	b.w	801aa74 <_malloc_r>
 801b77e:	bf00      	nop
 801b780:	2000011c 	.word	0x2000011c

0801b784 <__malloc_lock>:
 801b784:	4801      	ldr	r0, [pc, #4]	; (801b78c <__malloc_lock+0x8>)
 801b786:	f7ff b94e 	b.w	801aa26 <__retarget_lock_acquire_recursive>
 801b78a:	bf00      	nop
 801b78c:	2000dcbc 	.word	0x2000dcbc

0801b790 <__malloc_unlock>:
 801b790:	4801      	ldr	r0, [pc, #4]	; (801b798 <__malloc_unlock+0x8>)
 801b792:	f7ff b949 	b.w	801aa28 <__retarget_lock_release_recursive>
 801b796:	bf00      	nop
 801b798:	2000dcbc 	.word	0x2000dcbc

0801b79c <_free_r>:
 801b79c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b79e:	2900      	cmp	r1, #0
 801b7a0:	d048      	beq.n	801b834 <_free_r+0x98>
 801b7a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b7a6:	9001      	str	r0, [sp, #4]
 801b7a8:	2b00      	cmp	r3, #0
 801b7aa:	f1a1 0404 	sub.w	r4, r1, #4
 801b7ae:	bfb8      	it	lt
 801b7b0:	18e4      	addlt	r4, r4, r3
 801b7b2:	f7ff ffe7 	bl	801b784 <__malloc_lock>
 801b7b6:	4a20      	ldr	r2, [pc, #128]	; (801b838 <_free_r+0x9c>)
 801b7b8:	9801      	ldr	r0, [sp, #4]
 801b7ba:	6813      	ldr	r3, [r2, #0]
 801b7bc:	4615      	mov	r5, r2
 801b7be:	b933      	cbnz	r3, 801b7ce <_free_r+0x32>
 801b7c0:	6063      	str	r3, [r4, #4]
 801b7c2:	6014      	str	r4, [r2, #0]
 801b7c4:	b003      	add	sp, #12
 801b7c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b7ca:	f7ff bfe1 	b.w	801b790 <__malloc_unlock>
 801b7ce:	42a3      	cmp	r3, r4
 801b7d0:	d90b      	bls.n	801b7ea <_free_r+0x4e>
 801b7d2:	6821      	ldr	r1, [r4, #0]
 801b7d4:	1862      	adds	r2, r4, r1
 801b7d6:	4293      	cmp	r3, r2
 801b7d8:	bf04      	itt	eq
 801b7da:	681a      	ldreq	r2, [r3, #0]
 801b7dc:	685b      	ldreq	r3, [r3, #4]
 801b7de:	6063      	str	r3, [r4, #4]
 801b7e0:	bf04      	itt	eq
 801b7e2:	1852      	addeq	r2, r2, r1
 801b7e4:	6022      	streq	r2, [r4, #0]
 801b7e6:	602c      	str	r4, [r5, #0]
 801b7e8:	e7ec      	b.n	801b7c4 <_free_r+0x28>
 801b7ea:	461a      	mov	r2, r3
 801b7ec:	685b      	ldr	r3, [r3, #4]
 801b7ee:	b10b      	cbz	r3, 801b7f4 <_free_r+0x58>
 801b7f0:	42a3      	cmp	r3, r4
 801b7f2:	d9fa      	bls.n	801b7ea <_free_r+0x4e>
 801b7f4:	6811      	ldr	r1, [r2, #0]
 801b7f6:	1855      	adds	r5, r2, r1
 801b7f8:	42a5      	cmp	r5, r4
 801b7fa:	d10b      	bne.n	801b814 <_free_r+0x78>
 801b7fc:	6824      	ldr	r4, [r4, #0]
 801b7fe:	4421      	add	r1, r4
 801b800:	1854      	adds	r4, r2, r1
 801b802:	42a3      	cmp	r3, r4
 801b804:	6011      	str	r1, [r2, #0]
 801b806:	d1dd      	bne.n	801b7c4 <_free_r+0x28>
 801b808:	681c      	ldr	r4, [r3, #0]
 801b80a:	685b      	ldr	r3, [r3, #4]
 801b80c:	6053      	str	r3, [r2, #4]
 801b80e:	4421      	add	r1, r4
 801b810:	6011      	str	r1, [r2, #0]
 801b812:	e7d7      	b.n	801b7c4 <_free_r+0x28>
 801b814:	d902      	bls.n	801b81c <_free_r+0x80>
 801b816:	230c      	movs	r3, #12
 801b818:	6003      	str	r3, [r0, #0]
 801b81a:	e7d3      	b.n	801b7c4 <_free_r+0x28>
 801b81c:	6825      	ldr	r5, [r4, #0]
 801b81e:	1961      	adds	r1, r4, r5
 801b820:	428b      	cmp	r3, r1
 801b822:	bf04      	itt	eq
 801b824:	6819      	ldreq	r1, [r3, #0]
 801b826:	685b      	ldreq	r3, [r3, #4]
 801b828:	6063      	str	r3, [r4, #4]
 801b82a:	bf04      	itt	eq
 801b82c:	1949      	addeq	r1, r1, r5
 801b82e:	6021      	streq	r1, [r4, #0]
 801b830:	6054      	str	r4, [r2, #4]
 801b832:	e7c7      	b.n	801b7c4 <_free_r+0x28>
 801b834:	b003      	add	sp, #12
 801b836:	bd30      	pop	{r4, r5, pc}
 801b838:	20004e98 	.word	0x20004e98

0801b83c <_read_r>:
 801b83c:	b538      	push	{r3, r4, r5, lr}
 801b83e:	4d07      	ldr	r5, [pc, #28]	; (801b85c <_read_r+0x20>)
 801b840:	4604      	mov	r4, r0
 801b842:	4608      	mov	r0, r1
 801b844:	4611      	mov	r1, r2
 801b846:	2200      	movs	r2, #0
 801b848:	602a      	str	r2, [r5, #0]
 801b84a:	461a      	mov	r2, r3
 801b84c:	f7e5 fb02 	bl	8000e54 <_read>
 801b850:	1c43      	adds	r3, r0, #1
 801b852:	d102      	bne.n	801b85a <_read_r+0x1e>
 801b854:	682b      	ldr	r3, [r5, #0]
 801b856:	b103      	cbz	r3, 801b85a <_read_r+0x1e>
 801b858:	6023      	str	r3, [r4, #0]
 801b85a:	bd38      	pop	{r3, r4, r5, pc}
 801b85c:	2000db38 	.word	0x2000db38

0801b860 <_raise_r>:
 801b860:	291f      	cmp	r1, #31
 801b862:	b538      	push	{r3, r4, r5, lr}
 801b864:	4604      	mov	r4, r0
 801b866:	460d      	mov	r5, r1
 801b868:	d904      	bls.n	801b874 <_raise_r+0x14>
 801b86a:	2316      	movs	r3, #22
 801b86c:	6003      	str	r3, [r0, #0]
 801b86e:	f04f 30ff 	mov.w	r0, #4294967295
 801b872:	bd38      	pop	{r3, r4, r5, pc}
 801b874:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801b876:	b112      	cbz	r2, 801b87e <_raise_r+0x1e>
 801b878:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b87c:	b94b      	cbnz	r3, 801b892 <_raise_r+0x32>
 801b87e:	4620      	mov	r0, r4
 801b880:	f000 f830 	bl	801b8e4 <_getpid_r>
 801b884:	462a      	mov	r2, r5
 801b886:	4601      	mov	r1, r0
 801b888:	4620      	mov	r0, r4
 801b88a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b88e:	f000 b817 	b.w	801b8c0 <_kill_r>
 801b892:	2b01      	cmp	r3, #1
 801b894:	d00a      	beq.n	801b8ac <_raise_r+0x4c>
 801b896:	1c59      	adds	r1, r3, #1
 801b898:	d103      	bne.n	801b8a2 <_raise_r+0x42>
 801b89a:	2316      	movs	r3, #22
 801b89c:	6003      	str	r3, [r0, #0]
 801b89e:	2001      	movs	r0, #1
 801b8a0:	e7e7      	b.n	801b872 <_raise_r+0x12>
 801b8a2:	2400      	movs	r4, #0
 801b8a4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801b8a8:	4628      	mov	r0, r5
 801b8aa:	4798      	blx	r3
 801b8ac:	2000      	movs	r0, #0
 801b8ae:	e7e0      	b.n	801b872 <_raise_r+0x12>

0801b8b0 <raise>:
 801b8b0:	4b02      	ldr	r3, [pc, #8]	; (801b8bc <raise+0xc>)
 801b8b2:	4601      	mov	r1, r0
 801b8b4:	6818      	ldr	r0, [r3, #0]
 801b8b6:	f7ff bfd3 	b.w	801b860 <_raise_r>
 801b8ba:	bf00      	nop
 801b8bc:	2000011c 	.word	0x2000011c

0801b8c0 <_kill_r>:
 801b8c0:	b538      	push	{r3, r4, r5, lr}
 801b8c2:	4d07      	ldr	r5, [pc, #28]	; (801b8e0 <_kill_r+0x20>)
 801b8c4:	2300      	movs	r3, #0
 801b8c6:	4604      	mov	r4, r0
 801b8c8:	4608      	mov	r0, r1
 801b8ca:	4611      	mov	r1, r2
 801b8cc:	602b      	str	r3, [r5, #0]
 801b8ce:	f7e5 faa5 	bl	8000e1c <_kill>
 801b8d2:	1c43      	adds	r3, r0, #1
 801b8d4:	d102      	bne.n	801b8dc <_kill_r+0x1c>
 801b8d6:	682b      	ldr	r3, [r5, #0]
 801b8d8:	b103      	cbz	r3, 801b8dc <_kill_r+0x1c>
 801b8da:	6023      	str	r3, [r4, #0]
 801b8dc:	bd38      	pop	{r3, r4, r5, pc}
 801b8de:	bf00      	nop
 801b8e0:	2000db38 	.word	0x2000db38

0801b8e4 <_getpid_r>:
 801b8e4:	f7e5 ba92 	b.w	8000e0c <_getpid>

0801b8e8 <_fstat_r>:
 801b8e8:	b538      	push	{r3, r4, r5, lr}
 801b8ea:	4d07      	ldr	r5, [pc, #28]	; (801b908 <_fstat_r+0x20>)
 801b8ec:	2300      	movs	r3, #0
 801b8ee:	4604      	mov	r4, r0
 801b8f0:	4608      	mov	r0, r1
 801b8f2:	4611      	mov	r1, r2
 801b8f4:	602b      	str	r3, [r5, #0]
 801b8f6:	f7e5 faf2 	bl	8000ede <_fstat>
 801b8fa:	1c43      	adds	r3, r0, #1
 801b8fc:	d102      	bne.n	801b904 <_fstat_r+0x1c>
 801b8fe:	682b      	ldr	r3, [r5, #0]
 801b900:	b103      	cbz	r3, 801b904 <_fstat_r+0x1c>
 801b902:	6023      	str	r3, [r4, #0]
 801b904:	bd38      	pop	{r3, r4, r5, pc}
 801b906:	bf00      	nop
 801b908:	2000db38 	.word	0x2000db38

0801b90c <_isatty_r>:
 801b90c:	b538      	push	{r3, r4, r5, lr}
 801b90e:	4d06      	ldr	r5, [pc, #24]	; (801b928 <_isatty_r+0x1c>)
 801b910:	2300      	movs	r3, #0
 801b912:	4604      	mov	r4, r0
 801b914:	4608      	mov	r0, r1
 801b916:	602b      	str	r3, [r5, #0]
 801b918:	f7e5 faf1 	bl	8000efe <_isatty>
 801b91c:	1c43      	adds	r3, r0, #1
 801b91e:	d102      	bne.n	801b926 <_isatty_r+0x1a>
 801b920:	682b      	ldr	r3, [r5, #0]
 801b922:	b103      	cbz	r3, 801b926 <_isatty_r+0x1a>
 801b924:	6023      	str	r3, [r4, #0]
 801b926:	bd38      	pop	{r3, r4, r5, pc}
 801b928:	2000db38 	.word	0x2000db38

0801b92c <_init>:
 801b92c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b92e:	bf00      	nop
 801b930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b932:	bc08      	pop	{r3}
 801b934:	469e      	mov	lr, r3
 801b936:	4770      	bx	lr

0801b938 <_fini>:
 801b938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b93a:	bf00      	nop
 801b93c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b93e:	bc08      	pop	{r3}
 801b940:	469e      	mov	lr, r3
 801b942:	4770      	bx	lr
