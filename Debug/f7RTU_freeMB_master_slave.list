
f7RTU_freeMB_master_slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018874  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003184  08018a74  08018a74  00028a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801bbf8  0801bbf8  00030184  2**0
                  CONTENTS
  4 .ARM          00000008  0801bbf8  0801bbf8  0002bbf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801bc00  0801bc00  00030184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801bc00  0801bc00  0002bc00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801bc04  0801bc04  0002bc04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  0801bc08  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e0b0  20000184  0801bd8c  00030184  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000e234  0801bd8c  0003e234  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030184  2**0
                  CONTENTS, READONLY
 12 .debug_info   00064416  00000000  00000000  000301b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000baeb  00000000  00000000  000945c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002988  00000000  00000000  000a00b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002688  00000000  00000000  000a2a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001713e  00000000  00000000  000a50c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00048437  00000000  00000000  000bc206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00125e12  00000000  00000000  0010463d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0022a44f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ad08  00000000  00000000  0022a4a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000184 	.word	0x20000184
 800021c:	00000000 	.word	0x00000000
 8000220:	08018a5c 	.word	0x08018a5c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000188 	.word	0x20000188
 800023c:	08018a5c 	.word	0x08018a5c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005dc:	f000 fd11 	bl	8001002 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e0:	f000 f81e 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e4:	f000 f97e 	bl	80008e4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005e8:	f000 f94c 	bl	8000884 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 80005ec:	f000 f8ae 	bl	800074c <MX_TIM6_Init>
  MX_TIM7_Init();
 80005f0:	f000 f8e2 	bl	80007b8 <MX_TIM7_Init>
  MX_USART2_UART_Init();
 80005f4:	f000 f916 	bl	8000824 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005f8:	f005 fb56 	bl	8005ca8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005fc:	4a05      	ldr	r2, [pc, #20]	; (8000614 <main+0x3c>)
 80005fe:	2100      	movs	r1, #0
 8000600:	4805      	ldr	r0, [pc, #20]	; (8000618 <main+0x40>)
 8000602:	f005 fbe3 	bl	8005dcc <osThreadNew>
 8000606:	4603      	mov	r3, r0
 8000608:	4a04      	ldr	r2, [pc, #16]	; (800061c <main+0x44>)
 800060a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800060c:	f005 fb80 	bl	8005d10 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000610:	e7fe      	b.n	8000610 <main+0x38>
 8000612:	bf00      	nop
 8000614:	0801b6ec 	.word	0x0801b6ec
 8000618:	08000a95 	.word	0x08000a95
 800061c:	20004fc8 	.word	0x20004fc8

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b0b8      	sub	sp, #224	; 0xe0
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800062a:	2234      	movs	r2, #52	; 0x34
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f017 faaf 	bl	8017b92 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000644:	f107 0308 	add.w	r3, r7, #8
 8000648:	2290      	movs	r2, #144	; 0x90
 800064a:	2100      	movs	r1, #0
 800064c:	4618      	mov	r0, r3
 800064e:	f017 faa0 	bl	8017b92 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000652:	f002 f9ff 	bl	8002a54 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000656:	4b3b      	ldr	r3, [pc, #236]	; (8000744 <SystemClock_Config+0x124>)
 8000658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065a:	4a3a      	ldr	r2, [pc, #232]	; (8000744 <SystemClock_Config+0x124>)
 800065c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000660:	6413      	str	r3, [r2, #64]	; 0x40
 8000662:	4b38      	ldr	r3, [pc, #224]	; (8000744 <SystemClock_Config+0x124>)
 8000664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800066e:	4b36      	ldr	r3, [pc, #216]	; (8000748 <SystemClock_Config+0x128>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4a35      	ldr	r2, [pc, #212]	; (8000748 <SystemClock_Config+0x128>)
 8000674:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000678:	6013      	str	r3, [r2, #0]
 800067a:	4b33      	ldr	r3, [pc, #204]	; (8000748 <SystemClock_Config+0x128>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000682:	603b      	str	r3, [r7, #0]
 8000684:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000686:	2301      	movs	r3, #1
 8000688:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800068c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000690:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000694:	2302      	movs	r3, #2
 8000696:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800069a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800069e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006a2:	2304      	movs	r3, #4
 80006a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 80006a8:	23d8      	movs	r3, #216	; 0xd8
 80006aa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ae:	2302      	movs	r3, #2
 80006b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006b4:	2304      	movs	r3, #4
 80006b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006ba:	2302      	movs	r3, #2
 80006bc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80006c4:	4618      	mov	r0, r3
 80006c6:	f002 fa25 	bl	8002b14 <HAL_RCC_OscConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80006d0:	f000 f9fe 	bl	8000ad0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006d4:	f002 f9ce 	bl	8002a74 <HAL_PWREx_EnableOverDrive>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006de:	f000 f9f7 	bl	8000ad0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e2:	230f      	movs	r3, #15
 80006e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e8:	2302      	movs	r3, #2
 80006ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006f4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000700:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000704:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000708:	2107      	movs	r1, #7
 800070a:	4618      	mov	r0, r3
 800070c:	f002 fcb0 	bl	8003070 <HAL_RCC_ClockConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8000716:	f000 f9db 	bl	8000ad0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
 800071a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800071e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000720:	2300      	movs	r3, #0
 8000722:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000724:	2300      	movs	r3, #0
 8000726:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000728:	f107 0308 	add.w	r3, r7, #8
 800072c:	4618      	mov	r0, r3
 800072e:	f002 fed3 	bl	80034d8 <HAL_RCCEx_PeriphCLKConfig>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <SystemClock_Config+0x11c>
  {
    Error_Handler();
 8000738:	f000 f9ca 	bl	8000ad0 <Error_Handler>
  }
}
 800073c:	bf00      	nop
 800073e:	37e0      	adds	r7, #224	; 0xe0
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40023800 	.word	0x40023800
 8000748:	40007000 	.word	0x40007000

0800074c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800075c:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <MX_TIM6_Init+0x64>)
 800075e:	4a15      	ldr	r2, [pc, #84]	; (80007b4 <MX_TIM6_Init+0x68>)
 8000760:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000762:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <MX_TIM6_Init+0x64>)
 8000764:	2200      	movs	r2, #0
 8000766:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000768:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <MX_TIM6_Init+0x64>)
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800076e:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <MX_TIM6_Init+0x64>)
 8000770:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000774:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000776:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <MX_TIM6_Init+0x64>)
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800077c:	480c      	ldr	r0, [pc, #48]	; (80007b0 <MX_TIM6_Init+0x64>)
 800077e:	f003 fad3 	bl	8003d28 <HAL_TIM_Base_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000788:	f000 f9a2 	bl	8000ad0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800078c:	2300      	movs	r3, #0
 800078e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000790:	2300      	movs	r3, #0
 8000792:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	4619      	mov	r1, r3
 8000798:	4805      	ldr	r0, [pc, #20]	; (80007b0 <MX_TIM6_Init+0x64>)
 800079a:	f003 fdab 	bl	80042f4 <HAL_TIMEx_MasterConfigSynchronization>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80007a4:	f000 f994 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80007a8:	bf00      	nop
 80007aa:	3710      	adds	r7, #16
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20005050 	.word	0x20005050
 80007b4:	40001000 	.word	0x40001000

080007b8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80007c8:	4b14      	ldr	r3, [pc, #80]	; (800081c <MX_TIM7_Init+0x64>)
 80007ca:	4a15      	ldr	r2, [pc, #84]	; (8000820 <MX_TIM7_Init+0x68>)
 80007cc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80007ce:	4b13      	ldr	r3, [pc, #76]	; (800081c <MX_TIM7_Init+0x64>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d4:	4b11      	ldr	r3, [pc, #68]	; (800081c <MX_TIM7_Init+0x64>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80007da:	4b10      	ldr	r3, [pc, #64]	; (800081c <MX_TIM7_Init+0x64>)
 80007dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007e0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <MX_TIM7_Init+0x64>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80007e8:	480c      	ldr	r0, [pc, #48]	; (800081c <MX_TIM7_Init+0x64>)
 80007ea:	f003 fa9d 	bl	8003d28 <HAL_TIM_Base_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80007f4:	f000 f96c 	bl	8000ad0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007f8:	2300      	movs	r3, #0
 80007fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007fc:	2300      	movs	r3, #0
 80007fe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	4619      	mov	r1, r3
 8000804:	4805      	ldr	r0, [pc, #20]	; (800081c <MX_TIM7_Init+0x64>)
 8000806:	f003 fd75 	bl	80042f4 <HAL_TIMEx_MasterConfigSynchronization>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000810:	f000 f95e 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000814:	bf00      	nop
 8000816:	3710      	adds	r7, #16
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20005120 	.word	0x20005120
 8000820:	40001400 	.word	0x40001400

08000824 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000828:	4b14      	ldr	r3, [pc, #80]	; (800087c <MX_USART2_UART_Init+0x58>)
 800082a:	4a15      	ldr	r2, [pc, #84]	; (8000880 <MX_USART2_UART_Init+0x5c>)
 800082c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800082e:	4b13      	ldr	r3, [pc, #76]	; (800087c <MX_USART2_UART_Init+0x58>)
 8000830:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000834:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000836:	4b11      	ldr	r3, [pc, #68]	; (800087c <MX_USART2_UART_Init+0x58>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800083c:	4b0f      	ldr	r3, [pc, #60]	; (800087c <MX_USART2_UART_Init+0x58>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <MX_USART2_UART_Init+0x58>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000848:	4b0c      	ldr	r3, [pc, #48]	; (800087c <MX_USART2_UART_Init+0x58>)
 800084a:	220c      	movs	r2, #12
 800084c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084e:	4b0b      	ldr	r3, [pc, #44]	; (800087c <MX_USART2_UART_Init+0x58>)
 8000850:	2200      	movs	r2, #0
 8000852:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000854:	4b09      	ldr	r3, [pc, #36]	; (800087c <MX_USART2_UART_Init+0x58>)
 8000856:	2200      	movs	r2, #0
 8000858:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800085a:	4b08      	ldr	r3, [pc, #32]	; (800087c <MX_USART2_UART_Init+0x58>)
 800085c:	2200      	movs	r2, #0
 800085e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <MX_USART2_UART_Init+0x58>)
 8000862:	2200      	movs	r2, #0
 8000864:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000866:	4805      	ldr	r0, [pc, #20]	; (800087c <MX_USART2_UART_Init+0x58>)
 8000868:	f003 fdf0 	bl	800444c <HAL_UART_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000872:	f000 f92d 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	2000509c 	.word	0x2000509c
 8000880:	40004400 	.word	0x40004400

08000884 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000888:	4b14      	ldr	r3, [pc, #80]	; (80008dc <MX_USART3_UART_Init+0x58>)
 800088a:	4a15      	ldr	r2, [pc, #84]	; (80008e0 <MX_USART3_UART_Init+0x5c>)
 800088c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800088e:	4b13      	ldr	r3, [pc, #76]	; (80008dc <MX_USART3_UART_Init+0x58>)
 8000890:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000894:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000896:	4b11      	ldr	r3, [pc, #68]	; (80008dc <MX_USART3_UART_Init+0x58>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800089c:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <MX_USART3_UART_Init+0x58>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008a2:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <MX_USART3_UART_Init+0x58>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008a8:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <MX_USART3_UART_Init+0x58>)
 80008aa:	220c      	movs	r2, #12
 80008ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ae:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <MX_USART3_UART_Init+0x58>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b4:	4b09      	ldr	r3, [pc, #36]	; (80008dc <MX_USART3_UART_Init+0x58>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ba:	4b08      	ldr	r3, [pc, #32]	; (80008dc <MX_USART3_UART_Init+0x58>)
 80008bc:	2200      	movs	r2, #0
 80008be:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008c0:	4b06      	ldr	r3, [pc, #24]	; (80008dc <MX_USART3_UART_Init+0x58>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008c6:	4805      	ldr	r0, [pc, #20]	; (80008dc <MX_USART3_UART_Init+0x58>)
 80008c8:	f003 fdc0 	bl	800444c <HAL_UART_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80008d2:	f000 f8fd 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20004fcc 	.word	0x20004fcc
 80008e0:	40004800 	.word	0x40004800

080008e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08c      	sub	sp, #48	; 0x30
 80008e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
 80008f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fa:	4b60      	ldr	r3, [pc, #384]	; (8000a7c <MX_GPIO_Init+0x198>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a5f      	ldr	r2, [pc, #380]	; (8000a7c <MX_GPIO_Init+0x198>)
 8000900:	f043 0304 	orr.w	r3, r3, #4
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b5d      	ldr	r3, [pc, #372]	; (8000a7c <MX_GPIO_Init+0x198>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0304 	and.w	r3, r3, #4
 800090e:	61bb      	str	r3, [r7, #24]
 8000910:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000912:	4b5a      	ldr	r3, [pc, #360]	; (8000a7c <MX_GPIO_Init+0x198>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a59      	ldr	r2, [pc, #356]	; (8000a7c <MX_GPIO_Init+0x198>)
 8000918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b57      	ldr	r3, [pc, #348]	; (8000a7c <MX_GPIO_Init+0x198>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000926:	617b      	str	r3, [r7, #20]
 8000928:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092a:	4b54      	ldr	r3, [pc, #336]	; (8000a7c <MX_GPIO_Init+0x198>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a53      	ldr	r2, [pc, #332]	; (8000a7c <MX_GPIO_Init+0x198>)
 8000930:	f043 0301 	orr.w	r3, r3, #1
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b51      	ldr	r3, [pc, #324]	; (8000a7c <MX_GPIO_Init+0x198>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	613b      	str	r3, [r7, #16]
 8000940:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000942:	4b4e      	ldr	r3, [pc, #312]	; (8000a7c <MX_GPIO_Init+0x198>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a4d      	ldr	r2, [pc, #308]	; (8000a7c <MX_GPIO_Init+0x198>)
 8000948:	f043 0302 	orr.w	r3, r3, #2
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b4b      	ldr	r3, [pc, #300]	; (8000a7c <MX_GPIO_Init+0x198>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0302 	and.w	r3, r3, #2
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800095a:	4b48      	ldr	r3, [pc, #288]	; (8000a7c <MX_GPIO_Init+0x198>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a47      	ldr	r2, [pc, #284]	; (8000a7c <MX_GPIO_Init+0x198>)
 8000960:	f043 0308 	orr.w	r3, r3, #8
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b45      	ldr	r3, [pc, #276]	; (8000a7c <MX_GPIO_Init+0x198>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0308 	and.w	r3, r3, #8
 800096e:	60bb      	str	r3, [r7, #8]
 8000970:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000972:	4b42      	ldr	r3, [pc, #264]	; (8000a7c <MX_GPIO_Init+0x198>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a41      	ldr	r2, [pc, #260]	; (8000a7c <MX_GPIO_Init+0x198>)
 8000978:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b3f      	ldr	r3, [pc, #252]	; (8000a7c <MX_GPIO_Init+0x198>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|DE_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800098a:	2200      	movs	r2, #0
 800098c:	f644 0181 	movw	r1, #18561	; 0x4881
 8000990:	483b      	ldr	r0, [pc, #236]	; (8000a80 <MX_GPIO_Init+0x19c>)
 8000992:	f002 f82b 	bl	80029ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RE_GPIO_Port, RE_Pin, GPIO_PIN_SET);
 8000996:	2201      	movs	r2, #1
 8000998:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800099c:	4838      	ldr	r0, [pc, #224]	; (8000a80 <MX_GPIO_Init+0x19c>)
 800099e:	f002 f825 	bl	80029ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2140      	movs	r1, #64	; 0x40
 80009a6:	4837      	ldr	r0, [pc, #220]	; (8000a84 <MX_GPIO_Init+0x1a0>)
 80009a8:	f002 f820 	bl	80029ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009b2:	4b35      	ldr	r3, [pc, #212]	; (8000a88 <MX_GPIO_Init+0x1a4>)
 80009b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009ba:	f107 031c 	add.w	r3, r7, #28
 80009be:	4619      	mov	r1, r3
 80009c0:	4832      	ldr	r0, [pc, #200]	; (8000a8c <MX_GPIO_Init+0x1a8>)
 80009c2:	f001 fe67 	bl	8002694 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009c6:	f244 0381 	movw	r3, #16513	; 0x4081
 80009ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009cc:	2301      	movs	r3, #1
 80009ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d4:	2300      	movs	r3, #0
 80009d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d8:	f107 031c 	add.w	r3, r7, #28
 80009dc:	4619      	mov	r1, r3
 80009de:	4828      	ldr	r0, [pc, #160]	; (8000a80 <MX_GPIO_Init+0x19c>)
 80009e0:	f001 fe58 	bl	8002694 <HAL_GPIO_Init>

  /*Configure GPIO pins : RE_Pin DE_Pin */
  GPIO_InitStruct.Pin = RE_Pin|DE_Pin;
 80009e4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80009e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ea:	2301      	movs	r3, #1
 80009ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f2:	2303      	movs	r3, #3
 80009f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	4619      	mov	r1, r3
 80009fc:	4820      	ldr	r0, [pc, #128]	; (8000a80 <MX_GPIO_Init+0x19c>)
 80009fe:	f001 fe49 	bl	8002694 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a02:	2340      	movs	r3, #64	; 0x40
 8000a04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a06:	2301      	movs	r3, #1
 8000a08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a12:	f107 031c 	add.w	r3, r7, #28
 8000a16:	4619      	mov	r1, r3
 8000a18:	481a      	ldr	r0, [pc, #104]	; (8000a84 <MX_GPIO_Init+0x1a0>)
 8000a1a:	f001 fe3b 	bl	8002694 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a1e:	2380      	movs	r3, #128	; 0x80
 8000a20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a22:	2300      	movs	r3, #0
 8000a24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a2a:	f107 031c 	add.w	r3, r7, #28
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4814      	ldr	r0, [pc, #80]	; (8000a84 <MX_GPIO_Init+0x1a0>)
 8000a32:	f001 fe2f 	bl	8002694 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000a36:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000a3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a44:	2303      	movs	r3, #3
 8000a46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a48:	230a      	movs	r3, #10
 8000a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4c:	f107 031c 	add.w	r3, r7, #28
 8000a50:	4619      	mov	r1, r3
 8000a52:	480f      	ldr	r0, [pc, #60]	; (8000a90 <MX_GPIO_Init+0x1ac>)
 8000a54:	f001 fe1e 	bl	8002694 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000a58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a66:	f107 031c 	add.w	r3, r7, #28
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4808      	ldr	r0, [pc, #32]	; (8000a90 <MX_GPIO_Init+0x1ac>)
 8000a6e:	f001 fe11 	bl	8002694 <HAL_GPIO_Init>

}
 8000a72:	bf00      	nop
 8000a74:	3730      	adds	r7, #48	; 0x30
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40023800 	.word	0x40023800
 8000a80:	40020400 	.word	0x40020400
 8000a84:	40021800 	.word	0x40021800
 8000a88:	10110000 	.word	0x10110000
 8000a8c:	40020800 	.word	0x40020800
 8000a90:	40020000 	.word	0x40020000

08000a94 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000a9c:	f004 fb76 	bl	800518c <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	vInitMBTask();
 8000aa0:	f015 f812 	bl	8015ac8 <vInitMBTask>
  for(;;)
  {
    osDelay(1);
 8000aa4:	2001      	movs	r0, #1
 8000aa6:	f005 fa37 	bl	8005f18 <osDelay>
 8000aaa:	e7fb      	b.n	8000aa4 <StartDefaultTask+0x10>

08000aac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM13) {
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a04      	ldr	r2, [pc, #16]	; (8000acc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d101      	bne.n	8000ac2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000abe:	f000 faad 	bl	800101c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40001c00 	.word	0x40001c00

08000ad0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad4:	b672      	cpsid	i
}
 8000ad6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <Error_Handler+0x8>
	...

08000adc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae2:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <HAL_MspInit+0x4c>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	4a10      	ldr	r2, [pc, #64]	; (8000b28 <HAL_MspInit+0x4c>)
 8000ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aec:	6413      	str	r3, [r2, #64]	; 0x40
 8000aee:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <HAL_MspInit+0x4c>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afa:	4b0b      	ldr	r3, [pc, #44]	; (8000b28 <HAL_MspInit+0x4c>)
 8000afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afe:	4a0a      	ldr	r2, [pc, #40]	; (8000b28 <HAL_MspInit+0x4c>)
 8000b00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b04:	6453      	str	r3, [r2, #68]	; 0x44
 8000b06:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <HAL_MspInit+0x4c>)
 8000b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b0e:	603b      	str	r3, [r7, #0]
 8000b10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b12:	2200      	movs	r2, #0
 8000b14:	210f      	movs	r1, #15
 8000b16:	f06f 0001 	mvn.w	r0, #1
 8000b1a:	f000 fb7b 	bl	8001214 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40023800 	.word	0x40023800

08000b2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a1a      	ldr	r2, [pc, #104]	; (8000ba4 <HAL_TIM_Base_MspInit+0x78>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d114      	bne.n	8000b68 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000b3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ba8 <HAL_TIM_Base_MspInit+0x7c>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b42:	4a19      	ldr	r2, [pc, #100]	; (8000ba8 <HAL_TIM_Base_MspInit+0x7c>)
 8000b44:	f043 0310 	orr.w	r3, r3, #16
 8000b48:	6413      	str	r3, [r2, #64]	; 0x40
 8000b4a:	4b17      	ldr	r3, [pc, #92]	; (8000ba8 <HAL_TIM_Base_MspInit+0x7c>)
 8000b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4e:	f003 0310 	and.w	r3, r3, #16
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000b56:	2200      	movs	r2, #0
 8000b58:	2105      	movs	r1, #5
 8000b5a:	2036      	movs	r0, #54	; 0x36
 8000b5c:	f000 fb5a 	bl	8001214 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b60:	2036      	movs	r0, #54	; 0x36
 8000b62:	f000 fb73 	bl	800124c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000b66:	e018      	b.n	8000b9a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM7)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a0f      	ldr	r2, [pc, #60]	; (8000bac <HAL_TIM_Base_MspInit+0x80>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d113      	bne.n	8000b9a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000b72:	4b0d      	ldr	r3, [pc, #52]	; (8000ba8 <HAL_TIM_Base_MspInit+0x7c>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b76:	4a0c      	ldr	r2, [pc, #48]	; (8000ba8 <HAL_TIM_Base_MspInit+0x7c>)
 8000b78:	f043 0320 	orr.w	r3, r3, #32
 8000b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ba8 <HAL_TIM_Base_MspInit+0x7c>)
 8000b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b82:	f003 0320 	and.w	r3, r3, #32
 8000b86:	60bb      	str	r3, [r7, #8]
 8000b88:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2105      	movs	r1, #5
 8000b8e:	2037      	movs	r0, #55	; 0x37
 8000b90:	f000 fb40 	bl	8001214 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000b94:	2037      	movs	r0, #55	; 0x37
 8000b96:	f000 fb59 	bl	800124c <HAL_NVIC_EnableIRQ>
}
 8000b9a:	bf00      	nop
 8000b9c:	3710      	adds	r7, #16
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40001000 	.word	0x40001000
 8000ba8:	40023800 	.word	0x40023800
 8000bac:	40001400 	.word	0x40001400

08000bb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08c      	sub	sp, #48	; 0x30
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb8:	f107 031c 	add.w	r3, r7, #28
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a44      	ldr	r2, [pc, #272]	; (8000ce0 <HAL_UART_MspInit+0x130>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d14c      	bne.n	8000c6c <HAL_UART_MspInit+0xbc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bd2:	4b44      	ldr	r3, [pc, #272]	; (8000ce4 <HAL_UART_MspInit+0x134>)
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd6:	4a43      	ldr	r2, [pc, #268]	; (8000ce4 <HAL_UART_MspInit+0x134>)
 8000bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bdc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bde:	4b41      	ldr	r3, [pc, #260]	; (8000ce4 <HAL_UART_MspInit+0x134>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000be6:	61bb      	str	r3, [r7, #24]
 8000be8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bea:	4b3e      	ldr	r3, [pc, #248]	; (8000ce4 <HAL_UART_MspInit+0x134>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	4a3d      	ldr	r2, [pc, #244]	; (8000ce4 <HAL_UART_MspInit+0x134>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf6:	4b3b      	ldr	r3, [pc, #236]	; (8000ce4 <HAL_UART_MspInit+0x134>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	617b      	str	r3, [r7, #20]
 8000c00:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c02:	4b38      	ldr	r3, [pc, #224]	; (8000ce4 <HAL_UART_MspInit+0x134>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	4a37      	ldr	r2, [pc, #220]	; (8000ce4 <HAL_UART_MspInit+0x134>)
 8000c08:	f043 0308 	orr.w	r3, r3, #8
 8000c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0e:	4b35      	ldr	r3, [pc, #212]	; (8000ce4 <HAL_UART_MspInit+0x134>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	f003 0308 	and.w	r3, r3, #8
 8000c16:	613b      	str	r3, [r7, #16]
 8000c18:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c1a:	2308      	movs	r3, #8
 8000c1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c26:	2303      	movs	r3, #3
 8000c28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c2a:	2307      	movs	r3, #7
 8000c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2e:	f107 031c 	add.w	r3, r7, #28
 8000c32:	4619      	mov	r1, r3
 8000c34:	482c      	ldr	r0, [pc, #176]	; (8000ce8 <HAL_UART_MspInit+0x138>)
 8000c36:	f001 fd2d 	bl	8002694 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c3a:	2320      	movs	r3, #32
 8000c3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c46:	2303      	movs	r3, #3
 8000c48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c4a:	2307      	movs	r3, #7
 8000c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c4e:	f107 031c 	add.w	r3, r7, #28
 8000c52:	4619      	mov	r1, r3
 8000c54:	4825      	ldr	r0, [pc, #148]	; (8000cec <HAL_UART_MspInit+0x13c>)
 8000c56:	f001 fd1d 	bl	8002694 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2105      	movs	r1, #5
 8000c5e:	2026      	movs	r0, #38	; 0x26
 8000c60:	f000 fad8 	bl	8001214 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c64:	2026      	movs	r0, #38	; 0x26
 8000c66:	f000 faf1 	bl	800124c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c6a:	e035      	b.n	8000cd8 <HAL_UART_MspInit+0x128>
  else if(huart->Instance==USART3)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a1f      	ldr	r2, [pc, #124]	; (8000cf0 <HAL_UART_MspInit+0x140>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d130      	bne.n	8000cd8 <HAL_UART_MspInit+0x128>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c76:	4b1b      	ldr	r3, [pc, #108]	; (8000ce4 <HAL_UART_MspInit+0x134>)
 8000c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7a:	4a1a      	ldr	r2, [pc, #104]	; (8000ce4 <HAL_UART_MspInit+0x134>)
 8000c7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c80:	6413      	str	r3, [r2, #64]	; 0x40
 8000c82:	4b18      	ldr	r3, [pc, #96]	; (8000ce4 <HAL_UART_MspInit+0x134>)
 8000c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c8e:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <HAL_UART_MspInit+0x134>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	4a14      	ldr	r2, [pc, #80]	; (8000ce4 <HAL_UART_MspInit+0x134>)
 8000c94:	f043 0308 	orr.w	r3, r3, #8
 8000c98:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9a:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <HAL_UART_MspInit+0x134>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	f003 0308 	and.w	r3, r3, #8
 8000ca2:	60bb      	str	r3, [r7, #8]
 8000ca4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000ca6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000caa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cac:	2302      	movs	r3, #2
 8000cae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cb8:	2307      	movs	r3, #7
 8000cba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cbc:	f107 031c 	add.w	r3, r7, #28
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	480a      	ldr	r0, [pc, #40]	; (8000cec <HAL_UART_MspInit+0x13c>)
 8000cc4:	f001 fce6 	bl	8002694 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2105      	movs	r1, #5
 8000ccc:	2027      	movs	r0, #39	; 0x27
 8000cce:	f000 faa1 	bl	8001214 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000cd2:	2027      	movs	r0, #39	; 0x27
 8000cd4:	f000 faba 	bl	800124c <HAL_NVIC_EnableIRQ>
}
 8000cd8:	bf00      	nop
 8000cda:	3730      	adds	r7, #48	; 0x30
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40004400 	.word	0x40004400
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	40020000 	.word	0x40020000
 8000cec:	40020c00 	.word	0x40020c00
 8000cf0:	40004800 	.word	0x40004800

08000cf4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08c      	sub	sp, #48	; 0x30
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d00:	2300      	movs	r3, #0
 8000d02:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM13 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0);
 8000d04:	2200      	movs	r2, #0
 8000d06:	6879      	ldr	r1, [r7, #4]
 8000d08:	202c      	movs	r0, #44	; 0x2c
 8000d0a:	f000 fa83 	bl	8001214 <HAL_NVIC_SetPriority>

  /* Enable the TIM13 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8000d0e:	202c      	movs	r0, #44	; 0x2c
 8000d10:	f000 fa9c 	bl	800124c <HAL_NVIC_EnableIRQ>

  /* Enable TIM13 clock */
  __HAL_RCC_TIM13_CLK_ENABLE();
 8000d14:	4b1f      	ldr	r3, [pc, #124]	; (8000d94 <HAL_InitTick+0xa0>)
 8000d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d18:	4a1e      	ldr	r2, [pc, #120]	; (8000d94 <HAL_InitTick+0xa0>)
 8000d1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d20:	4b1c      	ldr	r3, [pc, #112]	; (8000d94 <HAL_InitTick+0xa0>)
 8000d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d2c:	f107 0210 	add.w	r2, r7, #16
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	4611      	mov	r1, r2
 8000d36:	4618      	mov	r0, r3
 8000d38:	f002 fb9c 	bl	8003474 <HAL_RCC_GetClockConfig>

  /* Compute TIM13 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000d3c:	f002 fb72 	bl	8003424 <HAL_RCC_GetPCLK1Freq>
 8000d40:	4603      	mov	r3, r0
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM13 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d48:	4a13      	ldr	r2, [pc, #76]	; (8000d98 <HAL_InitTick+0xa4>)
 8000d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d4e:	0c9b      	lsrs	r3, r3, #18
 8000d50:	3b01      	subs	r3, #1
 8000d52:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM13 */
  htim13.Instance = TIM13;
 8000d54:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <HAL_InitTick+0xa8>)
 8000d56:	4a12      	ldr	r2, [pc, #72]	; (8000da0 <HAL_InitTick+0xac>)
 8000d58:	601a      	str	r2, [r3, #0]
  + Period = [(TIM13CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim13.Init.Period = (1000000U / 1000U) - 1U;
 8000d5a:	4b10      	ldr	r3, [pc, #64]	; (8000d9c <HAL_InitTick+0xa8>)
 8000d5c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d60:	60da      	str	r2, [r3, #12]
  htim13.Init.Prescaler = uwPrescalerValue;
 8000d62:	4a0e      	ldr	r2, [pc, #56]	; (8000d9c <HAL_InitTick+0xa8>)
 8000d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d66:	6053      	str	r3, [r2, #4]
  htim13.Init.ClockDivision = 0;
 8000d68:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <HAL_InitTick+0xa8>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	611a      	str	r2, [r3, #16]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d6e:	4b0b      	ldr	r3, [pc, #44]	; (8000d9c <HAL_InitTick+0xa8>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim13) == HAL_OK)
 8000d74:	4809      	ldr	r0, [pc, #36]	; (8000d9c <HAL_InitTick+0xa8>)
 8000d76:	f002 ffd7 	bl	8003d28 <HAL_TIM_Base_Init>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d104      	bne.n	8000d8a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim13);
 8000d80:	4806      	ldr	r0, [pc, #24]	; (8000d9c <HAL_InitTick+0xa8>)
 8000d82:	f003 f829 	bl	8003dd8 <HAL_TIM_Base_Start_IT>
 8000d86:	4603      	mov	r3, r0
 8000d88:	e000      	b.n	8000d8c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3730      	adds	r7, #48	; 0x30
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	40023800 	.word	0x40023800
 8000d98:	431bde83 	.word	0x431bde83
 8000d9c:	2000516c 	.word	0x2000516c
 8000da0:	40001c00 	.word	0x40001c00

08000da4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000da8:	e7fe      	b.n	8000da8 <NMI_Handler+0x4>

08000daa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dae:	e7fe      	b.n	8000dae <HardFault_Handler+0x4>

08000db0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <MemManage_Handler+0x4>

08000db6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dba:	e7fe      	b.n	8000dba <BusFault_Handler+0x4>

08000dbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dc0:	e7fe      	b.n	8000dc0 <UsageFault_Handler+0x4>

08000dc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr

08000dd0 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8000dd4:	4802      	ldr	r0, [pc, #8]	; (8000de0 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8000dd6:	f003 f8a6 	bl	8003f26 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	2000516c 	.word	0x2000516c

08000de4 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000de8:	4802      	ldr	r0, [pc, #8]	; (8000df4 <ETH_IRQHandler+0x10>)
 8000dea:	f000 feb1 	bl	8001b50 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20006b04 	.word	0x20006b04

08000df8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
	return 1;
 8000dfc:	2301      	movs	r3, #1
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <_kill>:

int _kill(int pid, int sig)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000e12:	4b05      	ldr	r3, [pc, #20]	; (8000e28 <_kill+0x20>)
 8000e14:	2216      	movs	r2, #22
 8000e16:	601a      	str	r2, [r3, #0]
	return -1;
 8000e18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	2000dc60 	.word	0x2000dc60

08000e2c <_exit>:

void _exit (int status)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000e34:	f04f 31ff 	mov.w	r1, #4294967295
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f7ff ffe5 	bl	8000e08 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000e3e:	e7fe      	b.n	8000e3e <_exit+0x12>

08000e40 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]
 8000e50:	e00a      	b.n	8000e68 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e52:	f3af 8000 	nop.w
 8000e56:	4601      	mov	r1, r0
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	1c5a      	adds	r2, r3, #1
 8000e5c:	60ba      	str	r2, [r7, #8]
 8000e5e:	b2ca      	uxtb	r2, r1
 8000e60:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	3301      	adds	r3, #1
 8000e66:	617b      	str	r3, [r7, #20]
 8000e68:	697a      	ldr	r2, [r7, #20]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	dbf0      	blt.n	8000e52 <_read+0x12>
	}

return len;
 8000e70:	687b      	ldr	r3, [r7, #4]
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3718      	adds	r7, #24
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b086      	sub	sp, #24
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	60f8      	str	r0, [r7, #12]
 8000e82:	60b9      	str	r1, [r7, #8]
 8000e84:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e86:	2300      	movs	r3, #0
 8000e88:	617b      	str	r3, [r7, #20]
 8000e8a:	e009      	b.n	8000ea0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	1c5a      	adds	r2, r3, #1
 8000e90:	60ba      	str	r2, [r7, #8]
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	4618      	mov	r0, r3
 8000e96:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	617b      	str	r3, [r7, #20]
 8000ea0:	697a      	ldr	r2, [r7, #20]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	dbf1      	blt.n	8000e8c <_write+0x12>
	}
	return len;
 8000ea8:	687b      	ldr	r3, [r7, #4]
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3718      	adds	r7, #24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <_close>:

int _close(int file)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	b083      	sub	sp, #12
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
	return -1;
 8000eba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	b083      	sub	sp, #12
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
 8000ed2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000eda:	605a      	str	r2, [r3, #4]
	return 0;
 8000edc:	2300      	movs	r3, #0
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr

08000eea <_isatty>:

int _isatty(int file)
{
 8000eea:	b480      	push	{r7}
 8000eec:	b083      	sub	sp, #12
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
	return 1;
 8000ef2:	2301      	movs	r3, #1
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
	return 0;
 8000f0c:	2300      	movs	r3, #0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3714      	adds	r7, #20
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
	...

08000f1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b087      	sub	sp, #28
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f24:	4a14      	ldr	r2, [pc, #80]	; (8000f78 <_sbrk+0x5c>)
 8000f26:	4b15      	ldr	r3, [pc, #84]	; (8000f7c <_sbrk+0x60>)
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f30:	4b13      	ldr	r3, [pc, #76]	; (8000f80 <_sbrk+0x64>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d102      	bne.n	8000f3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f38:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <_sbrk+0x64>)
 8000f3a:	4a12      	ldr	r2, [pc, #72]	; (8000f84 <_sbrk+0x68>)
 8000f3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f3e:	4b10      	ldr	r3, [pc, #64]	; (8000f80 <_sbrk+0x64>)
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4413      	add	r3, r2
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d205      	bcs.n	8000f58 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000f4c:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <_sbrk+0x6c>)
 8000f4e:	220c      	movs	r2, #12
 8000f50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f52:	f04f 33ff 	mov.w	r3, #4294967295
 8000f56:	e009      	b.n	8000f6c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f58:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <_sbrk+0x64>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f5e:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <_sbrk+0x64>)
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4413      	add	r3, r2
 8000f66:	4a06      	ldr	r2, [pc, #24]	; (8000f80 <_sbrk+0x64>)
 8000f68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	371c      	adds	r7, #28
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	20080000 	.word	0x20080000
 8000f7c:	00000400 	.word	0x00000400
 8000f80:	200001a0 	.word	0x200001a0
 8000f84:	2000e238 	.word	0x2000e238
 8000f88:	2000dc60 	.word	0x2000dc60

08000f8c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f90:	4b06      	ldr	r3, [pc, #24]	; (8000fac <SystemInit+0x20>)
 8000f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f96:	4a05      	ldr	r2, [pc, #20]	; (8000fac <SystemInit+0x20>)
 8000f98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fe8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fb4:	480d      	ldr	r0, [pc, #52]	; (8000fec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fb6:	490e      	ldr	r1, [pc, #56]	; (8000ff0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fb8:	4a0e      	ldr	r2, [pc, #56]	; (8000ff4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fbc:	e002      	b.n	8000fc4 <LoopCopyDataInit>

08000fbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fc2:	3304      	adds	r3, #4

08000fc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc8:	d3f9      	bcc.n	8000fbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fca:	4a0b      	ldr	r2, [pc, #44]	; (8000ff8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fcc:	4c0b      	ldr	r4, [pc, #44]	; (8000ffc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd0:	e001      	b.n	8000fd6 <LoopFillZerobss>

08000fd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd4:	3204      	adds	r2, #4

08000fd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd8:	d3fb      	bcc.n	8000fd2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fda:	f7ff ffd7 	bl	8000f8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fde:	f016 fd95 	bl	8017b0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fe2:	f7ff faf9 	bl	80005d8 <main>
  bx  lr    
 8000fe6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fe8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000fec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff0:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8000ff4:	0801bc08 	.word	0x0801bc08
  ldr r2, =_sbss
 8000ff8:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8000ffc:	2000e234 	.word	0x2000e234

08001000 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001000:	e7fe      	b.n	8001000 <ADC_IRQHandler>

08001002 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001006:	2003      	movs	r0, #3
 8001008:	f000 f8f9 	bl	80011fe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800100c:	200f      	movs	r0, #15
 800100e:	f7ff fe71 	bl	8000cf4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001012:	f7ff fd63 	bl	8000adc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001016:	2300      	movs	r3, #0
}
 8001018:	4618      	mov	r0, r3
 800101a:	bd80      	pop	{r7, pc}

0800101c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <HAL_IncTick+0x20>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	461a      	mov	r2, r3
 8001026:	4b06      	ldr	r3, [pc, #24]	; (8001040 <HAL_IncTick+0x24>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4413      	add	r3, r2
 800102c:	4a04      	ldr	r2, [pc, #16]	; (8001040 <HAL_IncTick+0x24>)
 800102e:	6013      	str	r3, [r2, #0]
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	20000008 	.word	0x20000008
 8001040:	200051b8 	.word	0x200051b8

08001044 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  return uwTick;
 8001048:	4b03      	ldr	r3, [pc, #12]	; (8001058 <HAL_GetTick+0x14>)
 800104a:	681b      	ldr	r3, [r3, #0]
}
 800104c:	4618      	mov	r0, r3
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	200051b8 	.word	0x200051b8

0800105c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001064:	f7ff ffee 	bl	8001044 <HAL_GetTick>
 8001068:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001074:	d005      	beq.n	8001082 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001076:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <HAL_Delay+0x44>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	461a      	mov	r2, r3
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	4413      	add	r3, r2
 8001080:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001082:	bf00      	nop
 8001084:	f7ff ffde 	bl	8001044 <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	68fa      	ldr	r2, [r7, #12]
 8001090:	429a      	cmp	r2, r3
 8001092:	d8f7      	bhi.n	8001084 <HAL_Delay+0x28>
  {
  }
}
 8001094:	bf00      	nop
 8001096:	bf00      	nop
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000008 	.word	0x20000008

080010a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b4:	4b0b      	ldr	r3, [pc, #44]	; (80010e4 <__NVIC_SetPriorityGrouping+0x40>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ba:	68ba      	ldr	r2, [r7, #8]
 80010bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010c0:	4013      	ands	r3, r2
 80010c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <__NVIC_SetPriorityGrouping+0x44>)
 80010ce:	4313      	orrs	r3, r2
 80010d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010d2:	4a04      	ldr	r2, [pc, #16]	; (80010e4 <__NVIC_SetPriorityGrouping+0x40>)
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	60d3      	str	r3, [r2, #12]
}
 80010d8:	bf00      	nop
 80010da:	3714      	adds	r7, #20
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	e000ed00 	.word	0xe000ed00
 80010e8:	05fa0000 	.word	0x05fa0000

080010ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f0:	4b04      	ldr	r3, [pc, #16]	; (8001104 <__NVIC_GetPriorityGrouping+0x18>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	0a1b      	lsrs	r3, r3, #8
 80010f6:	f003 0307 	and.w	r3, r3, #7
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	2b00      	cmp	r3, #0
 8001118:	db0b      	blt.n	8001132 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	f003 021f 	and.w	r2, r3, #31
 8001120:	4907      	ldr	r1, [pc, #28]	; (8001140 <__NVIC_EnableIRQ+0x38>)
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	095b      	lsrs	r3, r3, #5
 8001128:	2001      	movs	r0, #1
 800112a:	fa00 f202 	lsl.w	r2, r0, r2
 800112e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	e000e100 	.word	0xe000e100

08001144 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	6039      	str	r1, [r7, #0]
 800114e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001154:	2b00      	cmp	r3, #0
 8001156:	db0a      	blt.n	800116e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	b2da      	uxtb	r2, r3
 800115c:	490c      	ldr	r1, [pc, #48]	; (8001190 <__NVIC_SetPriority+0x4c>)
 800115e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001162:	0112      	lsls	r2, r2, #4
 8001164:	b2d2      	uxtb	r2, r2
 8001166:	440b      	add	r3, r1
 8001168:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800116c:	e00a      	b.n	8001184 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	b2da      	uxtb	r2, r3
 8001172:	4908      	ldr	r1, [pc, #32]	; (8001194 <__NVIC_SetPriority+0x50>)
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	f003 030f 	and.w	r3, r3, #15
 800117a:	3b04      	subs	r3, #4
 800117c:	0112      	lsls	r2, r2, #4
 800117e:	b2d2      	uxtb	r2, r2
 8001180:	440b      	add	r3, r1
 8001182:	761a      	strb	r2, [r3, #24]
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	e000e100 	.word	0xe000e100
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001198:	b480      	push	{r7}
 800119a:	b089      	sub	sp, #36	; 0x24
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f003 0307 	and.w	r3, r3, #7
 80011aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	f1c3 0307 	rsb	r3, r3, #7
 80011b2:	2b04      	cmp	r3, #4
 80011b4:	bf28      	it	cs
 80011b6:	2304      	movcs	r3, #4
 80011b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	3304      	adds	r3, #4
 80011be:	2b06      	cmp	r3, #6
 80011c0:	d902      	bls.n	80011c8 <NVIC_EncodePriority+0x30>
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	3b03      	subs	r3, #3
 80011c6:	e000      	b.n	80011ca <NVIC_EncodePriority+0x32>
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011cc:	f04f 32ff 	mov.w	r2, #4294967295
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	43da      	mvns	r2, r3
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	401a      	ands	r2, r3
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011e0:	f04f 31ff 	mov.w	r1, #4294967295
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ea:	43d9      	mvns	r1, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f0:	4313      	orrs	r3, r2
         );
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3724      	adds	r7, #36	; 0x24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr

080011fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b082      	sub	sp, #8
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f7ff ff4c 	bl	80010a4 <__NVIC_SetPriorityGrouping>
}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
 8001220:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001222:	2300      	movs	r3, #0
 8001224:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001226:	f7ff ff61 	bl	80010ec <__NVIC_GetPriorityGrouping>
 800122a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	68b9      	ldr	r1, [r7, #8]
 8001230:	6978      	ldr	r0, [r7, #20]
 8001232:	f7ff ffb1 	bl	8001198 <NVIC_EncodePriority>
 8001236:	4602      	mov	r2, r0
 8001238:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800123c:	4611      	mov	r1, r2
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff ff80 	bl	8001144 <__NVIC_SetPriority>
}
 8001244:	bf00      	nop
 8001246:	3718      	adds	r7, #24
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff ff54 	bl	8001108 <__NVIC_EnableIRQ>
}
 8001260:	bf00      	nop
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001274:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001276:	f7ff fee5 	bl	8001044 <HAL_GetTick>
 800127a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001282:	b2db      	uxtb	r3, r3
 8001284:	2b02      	cmp	r3, #2
 8001286:	d008      	beq.n	800129a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2280      	movs	r2, #128	; 0x80
 800128c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2200      	movs	r2, #0
 8001292:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e052      	b.n	8001340 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f022 0216 	bic.w	r2, r2, #22
 80012a8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	695a      	ldr	r2, [r3, #20]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012b8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d103      	bne.n	80012ca <HAL_DMA_Abort+0x62>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d007      	beq.n	80012da <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f022 0208 	bic.w	r2, r2, #8
 80012d8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f022 0201 	bic.w	r2, r2, #1
 80012e8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012ea:	e013      	b.n	8001314 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012ec:	f7ff feaa 	bl	8001044 <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b05      	cmp	r3, #5
 80012f8:	d90c      	bls.n	8001314 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2220      	movs	r2, #32
 80012fe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2200      	movs	r2, #0
 8001304:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2203      	movs	r2, #3
 800130c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001310:	2303      	movs	r3, #3
 8001312:	e015      	b.n	8001340 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	2b00      	cmp	r3, #0
 8001320:	d1e4      	bne.n	80012ec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001326:	223f      	movs	r2, #63	; 0x3f
 8001328:	409a      	lsls	r2, r3
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2200      	movs	r2, #0
 8001332:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2201      	movs	r2, #1
 800133a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800133e:	2300      	movs	r3, #0
}
 8001340:	4618      	mov	r0, r3
 8001342:	3710      	adds	r7, #16
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001356:	b2db      	uxtb	r3, r3
 8001358:	2b02      	cmp	r3, #2
 800135a:	d004      	beq.n	8001366 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2280      	movs	r2, #128	; 0x80
 8001360:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e00c      	b.n	8001380 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2205      	movs	r2, #5
 800136a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f022 0201 	bic.w	r2, r2, #1
 800137c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800137e:	2300      	movs	r3, #0
}
 8001380:	4618      	mov	r0, r3
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b088      	sub	sp, #32
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8001394:	2300      	movs	r3, #0
 8001396:	61fb      	str	r3, [r7, #28]
 8001398:	2300      	movs	r3, #0
 800139a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 800139c:	4ba9      	ldr	r3, [pc, #676]	; (8001644 <HAL_ETH_Init+0x2b8>)
 800139e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80013a4:	2300      	movs	r3, #0
 80013a6:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d101      	bne.n	80013b2 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e181      	b.n	80016b6 <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d106      	bne.n	80013cc <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f004 f842 	bl	8005450 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013cc:	4b9e      	ldr	r3, [pc, #632]	; (8001648 <HAL_ETH_Init+0x2bc>)
 80013ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d0:	4a9d      	ldr	r2, [pc, #628]	; (8001648 <HAL_ETH_Init+0x2bc>)
 80013d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013d6:	6453      	str	r3, [r2, #68]	; 0x44
 80013d8:	4b9b      	ldr	r3, [pc, #620]	; (8001648 <HAL_ETH_Init+0x2bc>)
 80013da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013e0:	60bb      	str	r3, [r7, #8]
 80013e2:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80013e4:	4b99      	ldr	r3, [pc, #612]	; (800164c <HAL_ETH_Init+0x2c0>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	4a98      	ldr	r2, [pc, #608]	; (800164c <HAL_ETH_Init+0x2c0>)
 80013ea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80013ee:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80013f0:	4b96      	ldr	r3, [pc, #600]	; (800164c <HAL_ETH_Init+0x2c0>)
 80013f2:	685a      	ldr	r2, [r3, #4]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6a1b      	ldr	r3, [r3, #32]
 80013f8:	4994      	ldr	r1, [pc, #592]	; (800164c <HAL_ETH_Init+0x2c0>)
 80013fa:	4313      	orrs	r3, r2
 80013fc:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f042 0201 	orr.w	r2, r2, #1
 8001410:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001414:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001416:	f7ff fe15 	bl	8001044 <HAL_GetTick>
 800141a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800141c:	e011      	b.n	8001442 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800141e:	f7ff fe11 	bl	8001044 <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800142c:	d909      	bls.n	8001442 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2203      	movs	r2, #3
 8001432:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2200      	movs	r2, #0
 800143a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e139      	b.n	80016b6 <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0301 	and.w	r3, r3, #1
 8001450:	2b00      	cmp	r3, #0
 8001452:	d1e4      	bne.n	800141e <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	691b      	ldr	r3, [r3, #16]
 800145a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	f023 031c 	bic.w	r3, r3, #28
 8001462:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001464:	f001 ffd2 	bl	800340c <HAL_RCC_GetHCLKFreq>
 8001468:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	4a78      	ldr	r2, [pc, #480]	; (8001650 <HAL_ETH_Init+0x2c4>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d908      	bls.n	8001484 <HAL_ETH_Init+0xf8>
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	4a77      	ldr	r2, [pc, #476]	; (8001654 <HAL_ETH_Init+0x2c8>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d804      	bhi.n	8001484 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	f043 0308 	orr.w	r3, r3, #8
 8001480:	61fb      	str	r3, [r7, #28]
 8001482:	e027      	b.n	80014d4 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	4a73      	ldr	r2, [pc, #460]	; (8001654 <HAL_ETH_Init+0x2c8>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d908      	bls.n	800149e <HAL_ETH_Init+0x112>
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	4a6d      	ldr	r2, [pc, #436]	; (8001644 <HAL_ETH_Init+0x2b8>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d204      	bcs.n	800149e <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	f043 030c 	orr.w	r3, r3, #12
 800149a:	61fb      	str	r3, [r7, #28]
 800149c:	e01a      	b.n	80014d4 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	4a68      	ldr	r2, [pc, #416]	; (8001644 <HAL_ETH_Init+0x2b8>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d303      	bcc.n	80014ae <HAL_ETH_Init+0x122>
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	4a6b      	ldr	r2, [pc, #428]	; (8001658 <HAL_ETH_Init+0x2cc>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d911      	bls.n	80014d2 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	4a69      	ldr	r2, [pc, #420]	; (8001658 <HAL_ETH_Init+0x2cc>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d908      	bls.n	80014c8 <HAL_ETH_Init+0x13c>
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	4a68      	ldr	r2, [pc, #416]	; (800165c <HAL_ETH_Init+0x2d0>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d804      	bhi.n	80014c8 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	f043 0304 	orr.w	r3, r3, #4
 80014c4:	61fb      	str	r3, [r7, #28]
 80014c6:	e005      	b.n	80014d4 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	f043 0310 	orr.w	r3, r3, #16
 80014ce:	61fb      	str	r3, [r7, #28]
 80014d0:	e000      	b.n	80014d4 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80014d2:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	69fa      	ldr	r2, [r7, #28]
 80014da:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80014dc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80014e0:	2100      	movs	r1, #0
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f000 fc17 	bl	8001d16 <HAL_ETH_WritePHYRegister>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d00b      	beq.n	8001506 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80014f2:	6939      	ldr	r1, [r7, #16]
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f000 fdcd 	bl	8002094 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2201      	movs	r2, #1
 80014fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e0d7      	b.n	80016b6 <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001506:	20ff      	movs	r0, #255	; 0xff
 8001508:	f7ff fda8 	bl	800105c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	2b00      	cmp	r3, #0
 8001512:	f000 80a5 	beq.w	8001660 <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001516:	f7ff fd95 	bl	8001044 <HAL_GetTick>
 800151a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800151c:	f107 030c 	add.w	r3, r7, #12
 8001520:	461a      	mov	r2, r3
 8001522:	2101      	movs	r1, #1
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f000 fb8e 	bl	8001c46 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800152a:	f7ff fd8b 	bl	8001044 <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	f241 3288 	movw	r2, #5000	; 0x1388
 8001538:	4293      	cmp	r3, r2
 800153a:	d90f      	bls.n	800155c <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001540:	6939      	ldr	r1, [r7, #16]
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f000 fda6 	bl	8002094 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2201      	movs	r2, #1
 800154c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	e0ac      	b.n	80016b6 <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f003 0304 	and.w	r3, r3, #4
 8001562:	2b00      	cmp	r3, #0
 8001564:	d0da      	beq.n	800151c <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001566:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800156a:	2100      	movs	r1, #0
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f000 fbd2 	bl	8001d16 <HAL_ETH_WritePHYRegister>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d00b      	beq.n	8001590 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800157c:	6939      	ldr	r1, [r7, #16]
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f000 fd88 	bl	8002094 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2201      	movs	r2, #1
 8001588:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800158c:	2301      	movs	r3, #1
 800158e:	e092      	b.n	80016b6 <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001590:	f7ff fd58 	bl	8001044 <HAL_GetTick>
 8001594:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001596:	f107 030c 	add.w	r3, r7, #12
 800159a:	461a      	mov	r2, r3
 800159c:	2101      	movs	r1, #1
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f000 fb51 	bl	8001c46 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80015a4:	f7ff fd4e 	bl	8001044 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d90f      	bls.n	80015d6 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80015ba:	6939      	ldr	r1, [r7, #16]
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f000 fd69 	bl	8002094 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2201      	movs	r2, #1
 80015c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e06f      	b.n	80016b6 <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	f003 0320 	and.w	r3, r3, #32
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d0da      	beq.n	8001596 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80015e0:	f107 030c 	add.w	r3, r7, #12
 80015e4:	461a      	mov	r2, r3
 80015e6:	2110      	movs	r1, #16
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f000 fb2c 	bl	8001c46 <HAL_ETH_ReadPHYRegister>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d00b      	beq.n	800160c <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80015f8:	6939      	ldr	r1, [r7, #16]
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f000 fd4a 	bl	8002094 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2201      	movs	r2, #1
 8001604:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001608:	2301      	movs	r3, #1
 800160a:	e054      	b.n	80016b6 <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f003 0304 	and.w	r3, r3, #4
 8001612:	2b00      	cmp	r3, #0
 8001614:	d004      	beq.n	8001620 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800161c:	60da      	str	r2, [r3, #12]
 800161e:	e002      	b.n	8001626 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2200      	movs	r2, #0
 8001624:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	f003 0302 	and.w	r3, r3, #2
 800162c:	2b00      	cmp	r3, #0
 800162e:	d003      	beq.n	8001638 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2200      	movs	r2, #0
 8001634:	609a      	str	r2, [r3, #8]
 8001636:	e035      	b.n	80016a4 <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	e030      	b.n	80016a4 <HAL_ETH_Init+0x318>
 8001642:	bf00      	nop
 8001644:	03938700 	.word	0x03938700
 8001648:	40023800 	.word	0x40023800
 800164c:	40013800 	.word	0x40013800
 8001650:	01312cff 	.word	0x01312cff
 8001654:	02160ebf 	.word	0x02160ebf
 8001658:	05f5e0ff 	.word	0x05f5e0ff
 800165c:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	08db      	lsrs	r3, r3, #3
 8001666:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	085b      	lsrs	r3, r3, #1
 800166e:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001670:	4313      	orrs	r3, r2
 8001672:	b29b      	uxth	r3, r3
 8001674:	461a      	mov	r2, r3
 8001676:	2100      	movs	r1, #0
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f000 fb4c 	bl	8001d16 <HAL_ETH_WritePHYRegister>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d00b      	beq.n	800169c <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001688:	6939      	ldr	r1, [r7, #16]
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f000 fd02 	bl	8002094 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2201      	movs	r2, #1
 8001694:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e00c      	b.n	80016b6 <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800169c:	f640 70ff 	movw	r0, #4095	; 0xfff
 80016a0:	f7ff fcdc 	bl	800105c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80016a4:	6939      	ldr	r1, [r7, #16]
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f000 fcf4 	bl	8002094 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2201      	movs	r2, #1
 80016b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3720      	adds	r7, #32
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop

080016c0 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b087      	sub	sp, #28
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
 80016cc:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80016ce:	2300      	movs	r3, #0
 80016d0:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d101      	bne.n	80016e0 <HAL_ETH_DMATxDescListInit+0x20>
 80016dc:	2302      	movs	r3, #2
 80016de:	e052      	b.n	8001786 <HAL_ETH_DMATxDescListInit+0xc6>
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	2201      	movs	r2, #1
 80016e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2202      	movs	r2, #2
 80016ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	68ba      	ldr	r2, [r7, #8]
 80016f4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 80016f6:	2300      	movs	r3, #0
 80016f8:	617b      	str	r3, [r7, #20]
 80016fa:	e030      	b.n	800175e <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	015b      	lsls	r3, r3, #5
 8001700:	68ba      	ldr	r2, [r7, #8]
 8001702:	4413      	add	r3, r2
 8001704:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800170c:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001714:	fb02 f303 	mul.w	r3, r2, r3
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	4413      	add	r3, r2
 800171c:	461a      	mov	r2, r3
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	69db      	ldr	r3, [r3, #28]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d105      	bne.n	8001736 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	3b01      	subs	r3, #1
 800173a:	697a      	ldr	r2, [r7, #20]
 800173c:	429a      	cmp	r2, r3
 800173e:	d208      	bcs.n	8001752 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	3301      	adds	r3, #1
 8001744:	015b      	lsls	r3, r3, #5
 8001746:	68ba      	ldr	r2, [r7, #8]
 8001748:	4413      	add	r3, r2
 800174a:	461a      	mov	r2, r3
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	60da      	str	r2, [r3, #12]
 8001750:	e002      	b.n	8001758 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001752:	68ba      	ldr	r2, [r7, #8]
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	3301      	adds	r3, #1
 800175c:	617b      	str	r3, [r7, #20]
 800175e:	697a      	ldr	r2, [r7, #20]
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	429a      	cmp	r2, r3
 8001764:	d3ca      	bcc.n	80016fc <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	6819      	ldr	r1, [r3, #0]
 800176a:	68ba      	ldr	r2, [r7, #8]
 800176c:	f241 0310 	movw	r3, #4112	; 0x1010
 8001770:	440b      	add	r3, r1
 8001772:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2201      	movs	r2, #1
 8001778:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2200      	movs	r2, #0
 8001780:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	371c      	adds	r7, #28
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001792:	b480      	push	{r7}
 8001794:	b087      	sub	sp, #28
 8001796:	af00      	add	r7, sp, #0
 8001798:	60f8      	str	r0, [r7, #12]
 800179a:	60b9      	str	r1, [r7, #8]
 800179c:	607a      	str	r2, [r7, #4]
 800179e:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d101      	bne.n	80017b2 <HAL_ETH_DMARxDescListInit+0x20>
 80017ae:	2302      	movs	r3, #2
 80017b0:	e056      	b.n	8001860 <HAL_ETH_DMARxDescListInit+0xce>
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2201      	movs	r2, #1
 80017b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2202      	movs	r2, #2
 80017be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	68ba      	ldr	r2, [r7, #8]
 80017c6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]
 80017cc:	e034      	b.n	8001838 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	015b      	lsls	r3, r3, #5
 80017d2:	68ba      	ldr	r2, [r7, #8]
 80017d4:	4413      	add	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80017de:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80017e6:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80017ee:	fb02 f303 	mul.w	r3, r2, r3
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	4413      	add	r3, r2
 80017f6:	461a      	mov	r2, r3
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d105      	bne.n	8001810 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	3b01      	subs	r3, #1
 8001814:	697a      	ldr	r2, [r7, #20]
 8001816:	429a      	cmp	r2, r3
 8001818:	d208      	bcs.n	800182c <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	3301      	adds	r3, #1
 800181e:	015b      	lsls	r3, r3, #5
 8001820:	68ba      	ldr	r2, [r7, #8]
 8001822:	4413      	add	r3, r2
 8001824:	461a      	mov	r2, r3
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	e002      	b.n	8001832 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800182c:	68ba      	ldr	r2, [r7, #8]
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	3301      	adds	r3, #1
 8001836:	617b      	str	r3, [r7, #20]
 8001838:	697a      	ldr	r2, [r7, #20]
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	429a      	cmp	r2, r3
 800183e:	d3c6      	bcc.n	80017ce <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	6819      	ldr	r1, [r3, #0]
 8001844:	68ba      	ldr	r2, [r7, #8]
 8001846:	f241 030c 	movw	r3, #4108	; 0x100c
 800184a:	440b      	add	r3, r1
 800184c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2201      	movs	r2, #1
 8001852:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	2200      	movs	r2, #0
 800185a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800185e:	2300      	movs	r3, #0
}
 8001860:	4618      	mov	r0, r3
 8001862:	371c      	adds	r7, #28
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 800186c:	b480      	push	{r7}
 800186e:	b087      	sub	sp, #28
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 8001876:	2300      	movs	r3, #0
 8001878:	617b      	str	r3, [r7, #20]
 800187a:	2300      	movs	r3, #0
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	2300      	movs	r3, #0
 8001880:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001888:	2b01      	cmp	r3, #1
 800188a:	d101      	bne.n	8001890 <HAL_ETH_TransmitFrame+0x24>
 800188c:	2302      	movs	r3, #2
 800188e:	e0cd      	b.n	8001a2c <HAL_ETH_TransmitFrame+0x1c0>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2201      	movs	r2, #1
 8001894:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2202      	movs	r2, #2
 800189c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d109      	bne.n	80018ba <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2201      	movs	r2, #1
 80018aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80018b6:	2301      	movs	r3, #1
 80018b8:	e0b8      	b.n	8001a2c <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	da09      	bge.n	80018d8 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2212      	movs	r2, #18
 80018c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e0a9      	b.n	8001a2c <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80018de:	4293      	cmp	r3, r2
 80018e0:	d915      	bls.n	800190e <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	4a54      	ldr	r2, [pc, #336]	; (8001a38 <HAL_ETH_TransmitFrame+0x1cc>)
 80018e6:	fba2 2303 	umull	r2, r3, r2, r3
 80018ea:	0a9b      	lsrs	r3, r3, #10
 80018ec:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	4b51      	ldr	r3, [pc, #324]	; (8001a38 <HAL_ETH_TransmitFrame+0x1cc>)
 80018f2:	fba3 1302 	umull	r1, r3, r3, r2
 80018f6:	0a9b      	lsrs	r3, r3, #10
 80018f8:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80018fc:	fb01 f303 	mul.w	r3, r1, r3
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b00      	cmp	r3, #0
 8001904:	d005      	beq.n	8001912 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	3301      	adds	r3, #1
 800190a:	617b      	str	r3, [r7, #20]
 800190c:	e001      	b.n	8001912 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 800190e:	2301      	movs	r3, #1
 8001910:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	2b01      	cmp	r3, #1
 8001916:	d11c      	bne.n	8001952 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001922:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001926:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800192c:	683a      	ldr	r2, [r7, #0]
 800192e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001932:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800193e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001942:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	461a      	mov	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001950:	e04b      	b.n	80019ea <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 8001952:	2300      	movs	r3, #0
 8001954:	613b      	str	r3, [r7, #16]
 8001956:	e044      	b.n	80019e2 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001962:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001966:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d107      	bne.n	800197e <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001978:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800197c:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001982:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001986:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	3b01      	subs	r3, #1
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	429a      	cmp	r2, r3
 8001990:	d116      	bne.n	80019c0 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80019a0:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	4a25      	ldr	r2, [pc, #148]	; (8001a3c <HAL_ETH_TransmitFrame+0x1d0>)
 80019a6:	fb02 f203 	mul.w	r2, r2, r3
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	4413      	add	r3, r2
 80019ae:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80019b2:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b8:	68fa      	ldr	r2, [r7, #12]
 80019ba:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80019be:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ca:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80019ce:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	461a      	mov	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	3301      	adds	r3, #1
 80019e0:	613b      	str	r3, [r7, #16]
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d3b6      	bcc.n	8001958 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	f241 0314 	movw	r3, #4116	; 0x1014
 80019f2:	4413      	add	r3, r2
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0304 	and.w	r3, r3, #4
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d00d      	beq.n	8001a1a <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	f241 0314 	movw	r3, #4116	; 0x1014
 8001a06:	4413      	add	r3, r2
 8001a08:	2204      	movs	r2, #4
 8001a0a:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	f241 0304 	movw	r3, #4100	; 0x1004
 8001a14:	4413      	add	r3, r2
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001a2a:	2300      	movs	r3, #0
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	371c      	adds	r7, #28
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	ac02b00b 	.word	0xac02b00b
 8001a3c:	fffffa0c 	.word	0xfffffa0c

08001a40 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d101      	bne.n	8001a5a <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8001a56:	2302      	movs	r3, #2
 8001a58:	e074      	b.n	8001b44 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2202      	movs	r2, #2
 8001a66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001a6a:	e05a      	b.n	8001b22 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	3301      	adds	r3, #1
 8001a70:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a80:	d10d      	bne.n	8001a9e <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	461a      	mov	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	629a      	str	r2, [r3, #40]	; 0x28
 8001a9c:	e041      	b.n	8001b22 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d10b      	bne.n	8001ac4 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ab0:	1c5a      	adds	r2, r3, #1
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	461a      	mov	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	629a      	str	r2, [r3, #40]	; 0x28
 8001ac2:	e02e      	b.n	8001b22 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ad0:	1c5a      	adds	r2, r3, #1
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d103      	bne.n	8001ae6 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	0c1b      	lsrs	r3, r3, #16
 8001aee:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001af2:	1f1a      	subs	r2, r3, #4
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afc:	689a      	ldr	r2, [r3, #8]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	461a      	mov	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2201      	movs	r2, #1
 8001b12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	e010      	b.n	8001b44 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	db02      	blt.n	8001b32 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2b03      	cmp	r3, #3
 8001b30:	d99c      	bls.n	8001a6c <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2201      	movs	r2, #1
 8001b36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3714      	adds	r7, #20
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	f241 0314 	movw	r3, #4116	; 0x1014
 8001b60:	4413      	add	r3, r2
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b68:	2b40      	cmp	r3, #64	; 0x40
 8001b6a:	d112      	bne.n	8001b92 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f003 fd2f 	bl	80055d0 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	f241 0314 	movw	r3, #4116	; 0x1014
 8001b7a:	4413      	add	r3, r2
 8001b7c:	2240      	movs	r2, #64	; 0x40
 8001b7e:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001b90:	e01b      	b.n	8001bca <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	f241 0314 	movw	r3, #4116	; 0x1014
 8001b9a:	4413      	add	r3, r2
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d111      	bne.n	8001bca <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f000 f839 	bl	8001c1e <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	f241 0314 	movw	r3, #4116	; 0x1014
 8001bb4:	4413      	add	r3, r2
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	f241 0314 	movw	r3, #4116	; 0x1014
 8001bd2:	4413      	add	r3, r2
 8001bd4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001bd8:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	f241 0314 	movw	r3, #4116	; 0x1014
 8001be2:	4413      	add	r3, r2
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bee:	d112      	bne.n	8001c16 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f000 f81e 	bl	8001c32 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	f241 0314 	movw	r3, #4116	; 0x1014
 8001bfe:	4413      	add	r3, r2
 8001c00:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001c04:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	b083      	sub	sp, #12
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001c26:	bf00      	nop
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr

08001c32 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001c32:	b480      	push	{r7}
 8001c34:	b083      	sub	sp, #12
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b086      	sub	sp, #24
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	60f8      	str	r0, [r7, #12]
 8001c4e:	460b      	mov	r3, r1
 8001c50:	607a      	str	r2, [r7, #4]
 8001c52:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001c54:	2300      	movs	r3, #0
 8001c56:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	2b82      	cmp	r3, #130	; 0x82
 8001c66:	d101      	bne.n	8001c6c <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001c68:	2302      	movs	r3, #2
 8001c6a:	e050      	b.n	8001d0e <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2282      	movs	r2, #130	; 0x82
 8001c70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	f003 031c 	and.w	r3, r3, #28
 8001c82:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	8a1b      	ldrh	r3, [r3, #16]
 8001c88:	02db      	lsls	r3, r3, #11
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	697a      	ldr	r2, [r7, #20]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001c92:	897b      	ldrh	r3, [r7, #10]
 8001c94:	019b      	lsls	r3, r3, #6
 8001c96:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001c9a:	697a      	ldr	r2, [r7, #20]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	f023 0302 	bic.w	r3, r3, #2
 8001ca6:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	f043 0301 	orr.w	r3, r3, #1
 8001cae:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	697a      	ldr	r2, [r7, #20]
 8001cb6:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001cb8:	f7ff f9c4 	bl	8001044 <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001cbe:	e015      	b.n	8001cec <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001cc0:	f7ff f9c0 	bl	8001044 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cce:	d309      	bcc.n	8001ce4 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e014      	b.n	8001d0e <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d1e4      	bne.n	8001cc0 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	695b      	ldr	r3, [r3, #20]
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	461a      	mov	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3718      	adds	r7, #24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b086      	sub	sp, #24
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	60f8      	str	r0, [r7, #12]
 8001d1e:	460b      	mov	r3, r1
 8001d20:	607a      	str	r2, [r7, #4]
 8001d22:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001d24:	2300      	movs	r3, #0
 8001d26:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	2b42      	cmp	r3, #66	; 0x42
 8001d36:	d101      	bne.n	8001d3c <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	e04e      	b.n	8001dda <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2242      	movs	r2, #66	; 0x42
 8001d40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	691b      	ldr	r3, [r3, #16]
 8001d4a:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	f003 031c 	and.w	r3, r3, #28
 8001d52:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	8a1b      	ldrh	r3, [r3, #16]
 8001d58:	02db      	lsls	r3, r3, #11
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	697a      	ldr	r2, [r7, #20]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001d62:	897b      	ldrh	r3, [r7, #10]
 8001d64:	019b      	lsls	r3, r3, #6
 8001d66:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001d6a:	697a      	ldr	r2, [r7, #20]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	f043 0302 	orr.w	r3, r3, #2
 8001d76:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	f043 0301 	orr.w	r3, r3, #1
 8001d7e:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	b29a      	uxth	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	697a      	ldr	r2, [r7, #20]
 8001d90:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001d92:	f7ff f957 	bl	8001044 <HAL_GetTick>
 8001d96:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d98:	e015      	b.n	8001dc6 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001d9a:	f7ff f953 	bl	8001044 <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001da8:	d309      	bcc.n	8001dbe <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2201      	movs	r2, #1
 8001dae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e00d      	b.n	8001dda <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	f003 0301 	and.w	r3, r3, #1
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d1e4      	bne.n	8001d9a <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3718      	adds	r7, #24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b082      	sub	sp, #8
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d101      	bne.n	8001df8 <HAL_ETH_Start+0x16>
 8001df4:	2302      	movs	r3, #2
 8001df6:	e01f      	b.n	8001e38 <HAL_ETH_Start+0x56>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2202      	movs	r2, #2
 8001e04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f000 fb45 	bl	8002498 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 fb7c 	bl	800250c <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 fc13 	bl	8002640 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 fbb0 	bl	8002580 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 fbdd 	bl	80025e0 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3708      	adds	r7, #8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d101      	bne.n	8001e56 <HAL_ETH_Stop+0x16>
 8001e52:	2302      	movs	r3, #2
 8001e54:	e01f      	b.n	8001e96 <HAL_ETH_Stop+0x56>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2202      	movs	r2, #2
 8001e62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 fba2 	bl	80025b0 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f000 fbcf 	bl	8002610 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 fb67 	bl	8002546 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f000 fbe1 	bl	8002640 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 fb27 	bl	80024d2 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
	...

08001ea0 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d101      	bne.n	8001ebc <HAL_ETH_ConfigMAC+0x1c>
 8001eb8:	2302      	movs	r3, #2
 8001eba:	e0e4      	b.n	8002086 <HAL_ETH_ConfigMAC+0x1e6>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2202      	movs	r2, #2
 8001ec8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	f000 80b1 	beq.w	8002036 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001edc:	68fa      	ldr	r2, [r7, #12]
 8001ede:	4b6c      	ldr	r3, [pc, #432]	; (8002090 <HAL_ETH_ConfigMAC+0x1f0>)
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001eec:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001ef2:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001ef8:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001efe:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001f04:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001f0a:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001f10:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001f16:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001f1c:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001f22:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001f28:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001f2e:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68fa      	ldr	r2, [r7, #12]
 8001f3c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f46:	2001      	movs	r0, #1
 8001f48:	f7ff f888 	bl	800105c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	68fa      	ldr	r2, [r7, #12]
 8001f52:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001f5c:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001f62:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001f68:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001f6e:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001f74:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001f7a:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001f86:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001f88:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f92:	2001      	movs	r0, #1
 8001f94:	f7ff f862 	bl	800105c <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	68fa      	ldr	r2, [r7, #12]
 8001f9e:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001fa8:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	683a      	ldr	r2, [r7, #0]
 8001fb0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001fb2:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001fbc:	68fa      	ldr	r2, [r7, #12]
 8001fbe:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fca:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001fd0:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001fd6:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001fdc:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001fe2:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001fe8:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001fea:	68fa      	ldr	r2, [r7, #12]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	68fa      	ldr	r2, [r7, #12]
 8001ff6:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	699b      	ldr	r3, [r3, #24]
 8001ffe:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002000:	2001      	movs	r0, #1
 8002002:	f7ff f82b 	bl	800105c <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	68fa      	ldr	r2, [r7, #12]
 800200c:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	430a      	orrs	r2, r1
 800201c:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	69db      	ldr	r3, [r3, #28]
 8002024:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8002026:	2001      	movs	r0, #1
 8002028:	f7ff f818 	bl	800105c <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	61da      	str	r2, [r3, #28]
 8002034:	e01e      	b.n	8002074 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002044:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	689a      	ldr	r2, [r3, #8]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	4313      	orrs	r3, r2
 8002050:	68fa      	ldr	r2, [r7, #12]
 8002052:	4313      	orrs	r3, r2
 8002054:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002066:	2001      	movs	r0, #1
 8002068:	f7fe fff8 	bl	800105c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	68fa      	ldr	r2, [r7, #12]
 8002072:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	ff20810f 	.word	0xff20810f

08002094 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b0b0      	sub	sp, #192	; 0xc0
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 800209e:	2300      	movs	r3, #0
 80020a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d007      	beq.n	80020ba <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020b0:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020b8:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80020ba:	2300      	movs	r3, #0
 80020bc:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80020be:	2300      	movs	r3, #0
 80020c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80020c2:	2300      	movs	r3, #0
 80020c4:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80020c6:	2300      	movs	r3, #0
 80020c8:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80020ca:	2300      	movs	r3, #0
 80020cc:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80020ce:	2300      	movs	r3, #0
 80020d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d103      	bne.n	80020e2 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80020da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020de:	663b      	str	r3, [r7, #96]	; 0x60
 80020e0:	e001      	b.n	80020e6 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80020e2:	2300      	movs	r3, #0
 80020e4:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80020e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020ea:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80020ec:	2300      	movs	r3, #0
 80020ee:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80020f0:	2300      	movs	r3, #0
 80020f2:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80020f4:	2300      	movs	r3, #0
 80020f6:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80020f8:	2300      	movs	r3, #0
 80020fa:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80020fc:	2300      	movs	r3, #0
 80020fe:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002100:	2340      	movs	r3, #64	; 0x40
 8002102:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002104:	2300      	movs	r3, #0
 8002106:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800210a:	2300      	movs	r3, #0
 800210c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002110:	2300      	movs	r3, #0
 8002112:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002116:	2300      	movs	r3, #0
 8002118:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 800211c:	2300      	movs	r3, #0
 800211e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8002122:	2300      	movs	r3, #0
 8002124:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8002128:	2300      	movs	r3, #0
 800212a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 800212e:	2300      	movs	r3, #0
 8002130:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002134:	2380      	movs	r3, #128	; 0x80
 8002136:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800213a:	2300      	movs	r3, #0
 800213c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002140:	2300      	movs	r3, #0
 8002142:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002146:	2300      	movs	r3, #0
 8002148:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 800214c:	2300      	movs	r3, #0
 800214e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002152:	2300      	movs	r3, #0
 8002154:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8002158:	2300      	movs	r3, #0
 800215a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002168:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800216c:	4bab      	ldr	r3, [pc, #684]	; (800241c <ETH_MACDMAConfig+0x388>)
 800216e:	4013      	ands	r3, r2
 8002170:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002174:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8002176:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002178:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800217a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 800217c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800217e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002180:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002186:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002188:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800218a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 800218c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800218e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002194:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002196:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002198:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800219a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 800219c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800219e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80021a0:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80021a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80021a4:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80021a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80021a8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80021aa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021ae:	4313      	orrs	r3, r2
 80021b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021bc:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021c8:	2001      	movs	r0, #1
 80021ca:	f7fe ff47 	bl	800105c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021d6:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80021d8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80021da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80021dc:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80021de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80021e0:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80021e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80021e6:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80021e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80021ec:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80021ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80021f2:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80021f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80021f8:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80021fc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002204:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002206:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002212:	2001      	movs	r0, #1
 8002214:	f7fe ff22 	bl	800105c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002220:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800222a:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002234:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002240:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002244:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002248:	4013      	ands	r3, r2
 800224a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800224e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002252:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002254:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002258:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800225a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800225e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002260:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002264:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002266:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800226a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 800226c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002270:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002272:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002276:	4313      	orrs	r3, r2
 8002278:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002284:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	699b      	ldr	r3, [r3, #24]
 800228c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002290:	2001      	movs	r0, #1
 8002292:	f7fe fee3 	bl	800105c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800229e:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80022a0:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80022a4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	430a      	orrs	r2, r1
 80022ae:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	69db      	ldr	r3, [r3, #28]
 80022b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80022ba:	2001      	movs	r0, #1
 80022bc:	f7fe fece 	bl	800105c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022c8:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80022ca:	2300      	movs	r3, #0
 80022cc:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80022ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022d2:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80022d4:	2300      	movs	r3, #0
 80022d6:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80022d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80022dc:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80022de:	2300      	movs	r3, #0
 80022e0:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80022e2:	2300      	movs	r3, #0
 80022e4:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80022e6:	2300      	movs	r3, #0
 80022e8:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80022ea:	2300      	movs	r3, #0
 80022ec:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80022ee:	2304      	movs	r3, #4
 80022f0:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80022f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80022f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022fc:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80022fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002302:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002304:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002308:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800230a:	2380      	movs	r3, #128	; 0x80
 800230c:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 800230e:	2300      	movs	r3, #0
 8002310:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002312:	2300      	movs	r3, #0
 8002314:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	f241 0318 	movw	r3, #4120	; 0x1018
 800231e:	4413      	add	r3, r2
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8002326:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800232a:	4b3d      	ldr	r3, [pc, #244]	; (8002420 <ETH_MACDMAConfig+0x38c>)
 800232c:	4013      	ands	r3, r2
 800232e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002332:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002334:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002336:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002338:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800233a:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 800233c:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800233e:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002340:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002342:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002344:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002346:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002348:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800234a:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 800234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800234e:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002350:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002352:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002354:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002358:	4313      	orrs	r3, r2
 800235a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	f241 0318 	movw	r3, #4120	; 0x1018
 8002366:	4413      	add	r3, r2
 8002368:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800236c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	f241 0318 	movw	r3, #4120	; 0x1018
 8002376:	4413      	add	r3, r2
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800237e:	2001      	movs	r0, #1
 8002380:	f7fe fe6c 	bl	800105c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	f241 0318 	movw	r3, #4120	; 0x1018
 800238c:	4413      	add	r3, r2
 800238e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002392:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002394:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002398:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800239a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 800239c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800239e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80023a0:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80023a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80023a4:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 80023a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023a8:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80023aa:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80023ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 80023ae:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80023b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023bc:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80023cc:	2001      	movs	r0, #1
 80023ce:	f7fe fe45 	bl	800105c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023da:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023de:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d10d      	bne.n	8002404 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	f241 031c 	movw	r3, #4124	; 0x101c
 80023f0:	4413      	add	r3, r2
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	6811      	ldr	r1, [r2, #0]
 80023f8:	4a0a      	ldr	r2, [pc, #40]	; (8002424 <ETH_MACDMAConfig+0x390>)
 80023fa:	431a      	orrs	r2, r3
 80023fc:	f241 031c 	movw	r3, #4124	; 0x101c
 8002400:	440b      	add	r3, r1
 8002402:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	695b      	ldr	r3, [r3, #20]
 8002408:	461a      	mov	r2, r3
 800240a:	2100      	movs	r1, #0
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f000 f80b 	bl	8002428 <ETH_MACAddressConfig>
}
 8002412:	bf00      	nop
 8002414:	37c0      	adds	r7, #192	; 0xc0
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	ff20810f 	.word	0xff20810f
 8002420:	f8de3f23 	.word	0xf8de3f23
 8002424:	00010040 	.word	0x00010040

08002428 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002428:	b480      	push	{r7}
 800242a:	b087      	sub	sp, #28
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	3305      	adds	r3, #5
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	021b      	lsls	r3, r3, #8
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	3204      	adds	r2, #4
 8002440:	7812      	ldrb	r2, [r2, #0]
 8002442:	4313      	orrs	r3, r2
 8002444:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8002446:	68ba      	ldr	r2, [r7, #8]
 8002448:	4b11      	ldr	r3, [pc, #68]	; (8002490 <ETH_MACAddressConfig+0x68>)
 800244a:	4413      	add	r3, r2
 800244c:	461a      	mov	r2, r3
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	3303      	adds	r3, #3
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	061a      	lsls	r2, r3, #24
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	3302      	adds	r3, #2
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	041b      	lsls	r3, r3, #16
 8002462:	431a      	orrs	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	3301      	adds	r3, #1
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	021b      	lsls	r3, r3, #8
 800246c:	4313      	orrs	r3, r2
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	7812      	ldrb	r2, [r2, #0]
 8002472:	4313      	orrs	r3, r2
 8002474:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8002476:	68ba      	ldr	r2, [r7, #8]
 8002478:	4b06      	ldr	r3, [pc, #24]	; (8002494 <ETH_MACAddressConfig+0x6c>)
 800247a:	4413      	add	r3, r2
 800247c:	461a      	mov	r2, r3
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	6013      	str	r3, [r2, #0]
}
 8002482:	bf00      	nop
 8002484:	371c      	adds	r7, #28
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	40028040 	.word	0x40028040
 8002494:	40028044 	.word	0x40028044

08002498 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80024a0:	2300      	movs	r3, #0
 80024a2:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f042 0208 	orr.w	r2, r2, #8
 80024b2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024bc:	2001      	movs	r0, #1
 80024be:	f7fe fdcd 	bl	800105c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	601a      	str	r2, [r3, #0]
}
 80024ca:	bf00      	nop
 80024cc:	3710      	adds	r7, #16
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b084      	sub	sp, #16
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80024da:	2300      	movs	r3, #0
 80024dc:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f022 0208 	bic.w	r2, r2, #8
 80024ec:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024f6:	2001      	movs	r0, #1
 80024f8:	f7fe fdb0 	bl	800105c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68fa      	ldr	r2, [r7, #12]
 8002502:	601a      	str	r2, [r3, #0]
}
 8002504:	bf00      	nop
 8002506:	3710      	adds	r7, #16
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002514:	2300      	movs	r3, #0
 8002516:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f042 0204 	orr.w	r2, r2, #4
 8002526:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002530:	2001      	movs	r0, #1
 8002532:	f7fe fd93 	bl	800105c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	601a      	str	r2, [r3, #0]
}
 800253e:	bf00      	nop
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002546:	b580      	push	{r7, lr}
 8002548:	b084      	sub	sp, #16
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800254e:	2300      	movs	r3, #0
 8002550:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f022 0204 	bic.w	r2, r2, #4
 8002560:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800256a:	2001      	movs	r0, #1
 800256c:	f7fe fd76 	bl	800105c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	601a      	str	r2, [r3, #0]
}
 8002578:	bf00      	nop
 800257a:	3710      	adds	r7, #16
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002590:	4413      	add	r3, r2
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	6811      	ldr	r1, [r2, #0]
 8002598:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800259c:	f241 0318 	movw	r3, #4120	; 0x1018
 80025a0:	440b      	add	r3, r1
 80025a2:	601a      	str	r2, [r3, #0]
}
 80025a4:	bf00      	nop
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	f241 0318 	movw	r3, #4120	; 0x1018
 80025c0:	4413      	add	r3, r2
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	6811      	ldr	r1, [r2, #0]
 80025c8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80025cc:	f241 0318 	movw	r3, #4120	; 0x1018
 80025d0:	440b      	add	r3, r1
 80025d2:	601a      	str	r2, [r3, #0]
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	f241 0318 	movw	r3, #4120	; 0x1018
 80025f0:	4413      	add	r3, r2
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	6811      	ldr	r1, [r2, #0]
 80025f8:	f043 0202 	orr.w	r2, r3, #2
 80025fc:	f241 0318 	movw	r3, #4120	; 0x1018
 8002600:	440b      	add	r3, r1
 8002602:	601a      	str	r2, [r3, #0]
}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002620:	4413      	add	r3, r2
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	6811      	ldr	r1, [r2, #0]
 8002628:	f023 0202 	bic.w	r2, r3, #2
 800262c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002630:	440b      	add	r3, r1
 8002632:	601a      	str	r2, [r3, #0]
}
 8002634:	bf00      	nop
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002648:	2300      	movs	r3, #0
 800264a:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	f241 0318 	movw	r3, #4120	; 0x1018
 8002654:	4413      	add	r3, r2
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	6811      	ldr	r1, [r2, #0]
 800265c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002660:	f241 0318 	movw	r3, #4120	; 0x1018
 8002664:	440b      	add	r3, r1
 8002666:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002670:	4413      	add	r3, r2
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002676:	2001      	movs	r0, #1
 8002678:	f7fe fcf0 	bl	800105c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6819      	ldr	r1, [r3, #0]
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	f241 0318 	movw	r3, #4120	; 0x1018
 8002686:	440b      	add	r3, r1
 8002688:	601a      	str	r2, [r3, #0]
}
 800268a:	bf00      	nop
 800268c:	3710      	adds	r7, #16
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
	...

08002694 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002694:	b480      	push	{r7}
 8002696:	b089      	sub	sp, #36	; 0x24
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800269e:	2300      	movs	r3, #0
 80026a0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80026a2:	2300      	movs	r3, #0
 80026a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80026a6:	2300      	movs	r3, #0
 80026a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80026aa:	2300      	movs	r3, #0
 80026ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80026ae:	2300      	movs	r3, #0
 80026b0:	61fb      	str	r3, [r7, #28]
 80026b2:	e175      	b.n	80029a0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80026b4:	2201      	movs	r2, #1
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	4013      	ands	r3, r2
 80026c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	f040 8164 	bne.w	800299a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d00b      	beq.n	80026f2 <HAL_GPIO_Init+0x5e>
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d007      	beq.n	80026f2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026e6:	2b11      	cmp	r3, #17
 80026e8:	d003      	beq.n	80026f2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	2b12      	cmp	r3, #18
 80026f0:	d130      	bne.n	8002754 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	2203      	movs	r2, #3
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	43db      	mvns	r3, r3
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	4013      	ands	r3, r2
 8002708:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	68da      	ldr	r2, [r3, #12]
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	fa02 f303 	lsl.w	r3, r2, r3
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	4313      	orrs	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002728:	2201      	movs	r2, #1
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	43db      	mvns	r3, r3
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	4013      	ands	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	091b      	lsrs	r3, r3, #4
 800273e:	f003 0201 	and.w	r2, r3, #1
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	4313      	orrs	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	2203      	movs	r2, #3
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	43db      	mvns	r3, r3
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	4013      	ands	r3, r2
 800276a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	689a      	ldr	r2, [r3, #8]
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	4313      	orrs	r3, r2
 800277c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	2b02      	cmp	r3, #2
 800278a:	d003      	beq.n	8002794 <HAL_GPIO_Init+0x100>
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	2b12      	cmp	r3, #18
 8002792:	d123      	bne.n	80027dc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	08da      	lsrs	r2, r3, #3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	3208      	adds	r2, #8
 800279c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	f003 0307 	and.w	r3, r3, #7
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	220f      	movs	r2, #15
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	43db      	mvns	r3, r3
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	4013      	ands	r3, r2
 80027b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	691a      	ldr	r2, [r3, #16]
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	f003 0307 	and.w	r3, r3, #7
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	08da      	lsrs	r2, r3, #3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	3208      	adds	r2, #8
 80027d6:	69b9      	ldr	r1, [r7, #24]
 80027d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	2203      	movs	r2, #3
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	43db      	mvns	r3, r3
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	4013      	ands	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f003 0203 	and.w	r2, r3, #3
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	4313      	orrs	r3, r2
 8002808:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002818:	2b00      	cmp	r3, #0
 800281a:	f000 80be 	beq.w	800299a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800281e:	4b66      	ldr	r3, [pc, #408]	; (80029b8 <HAL_GPIO_Init+0x324>)
 8002820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002822:	4a65      	ldr	r2, [pc, #404]	; (80029b8 <HAL_GPIO_Init+0x324>)
 8002824:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002828:	6453      	str	r3, [r2, #68]	; 0x44
 800282a:	4b63      	ldr	r3, [pc, #396]	; (80029b8 <HAL_GPIO_Init+0x324>)
 800282c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002832:	60fb      	str	r3, [r7, #12]
 8002834:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002836:	4a61      	ldr	r2, [pc, #388]	; (80029bc <HAL_GPIO_Init+0x328>)
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	089b      	lsrs	r3, r3, #2
 800283c:	3302      	adds	r3, #2
 800283e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002842:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	f003 0303 	and.w	r3, r3, #3
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	220f      	movs	r2, #15
 800284e:	fa02 f303 	lsl.w	r3, r2, r3
 8002852:	43db      	mvns	r3, r3
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	4013      	ands	r3, r2
 8002858:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a58      	ldr	r2, [pc, #352]	; (80029c0 <HAL_GPIO_Init+0x32c>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d037      	beq.n	80028d2 <HAL_GPIO_Init+0x23e>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a57      	ldr	r2, [pc, #348]	; (80029c4 <HAL_GPIO_Init+0x330>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d031      	beq.n	80028ce <HAL_GPIO_Init+0x23a>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a56      	ldr	r2, [pc, #344]	; (80029c8 <HAL_GPIO_Init+0x334>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d02b      	beq.n	80028ca <HAL_GPIO_Init+0x236>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a55      	ldr	r2, [pc, #340]	; (80029cc <HAL_GPIO_Init+0x338>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d025      	beq.n	80028c6 <HAL_GPIO_Init+0x232>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a54      	ldr	r2, [pc, #336]	; (80029d0 <HAL_GPIO_Init+0x33c>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d01f      	beq.n	80028c2 <HAL_GPIO_Init+0x22e>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a53      	ldr	r2, [pc, #332]	; (80029d4 <HAL_GPIO_Init+0x340>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d019      	beq.n	80028be <HAL_GPIO_Init+0x22a>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a52      	ldr	r2, [pc, #328]	; (80029d8 <HAL_GPIO_Init+0x344>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d013      	beq.n	80028ba <HAL_GPIO_Init+0x226>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a51      	ldr	r2, [pc, #324]	; (80029dc <HAL_GPIO_Init+0x348>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d00d      	beq.n	80028b6 <HAL_GPIO_Init+0x222>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a50      	ldr	r2, [pc, #320]	; (80029e0 <HAL_GPIO_Init+0x34c>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d007      	beq.n	80028b2 <HAL_GPIO_Init+0x21e>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a4f      	ldr	r2, [pc, #316]	; (80029e4 <HAL_GPIO_Init+0x350>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d101      	bne.n	80028ae <HAL_GPIO_Init+0x21a>
 80028aa:	2309      	movs	r3, #9
 80028ac:	e012      	b.n	80028d4 <HAL_GPIO_Init+0x240>
 80028ae:	230a      	movs	r3, #10
 80028b0:	e010      	b.n	80028d4 <HAL_GPIO_Init+0x240>
 80028b2:	2308      	movs	r3, #8
 80028b4:	e00e      	b.n	80028d4 <HAL_GPIO_Init+0x240>
 80028b6:	2307      	movs	r3, #7
 80028b8:	e00c      	b.n	80028d4 <HAL_GPIO_Init+0x240>
 80028ba:	2306      	movs	r3, #6
 80028bc:	e00a      	b.n	80028d4 <HAL_GPIO_Init+0x240>
 80028be:	2305      	movs	r3, #5
 80028c0:	e008      	b.n	80028d4 <HAL_GPIO_Init+0x240>
 80028c2:	2304      	movs	r3, #4
 80028c4:	e006      	b.n	80028d4 <HAL_GPIO_Init+0x240>
 80028c6:	2303      	movs	r3, #3
 80028c8:	e004      	b.n	80028d4 <HAL_GPIO_Init+0x240>
 80028ca:	2302      	movs	r3, #2
 80028cc:	e002      	b.n	80028d4 <HAL_GPIO_Init+0x240>
 80028ce:	2301      	movs	r3, #1
 80028d0:	e000      	b.n	80028d4 <HAL_GPIO_Init+0x240>
 80028d2:	2300      	movs	r3, #0
 80028d4:	69fa      	ldr	r2, [r7, #28]
 80028d6:	f002 0203 	and.w	r2, r2, #3
 80028da:	0092      	lsls	r2, r2, #2
 80028dc:	4093      	lsls	r3, r2
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80028e4:	4935      	ldr	r1, [pc, #212]	; (80029bc <HAL_GPIO_Init+0x328>)
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	089b      	lsrs	r3, r3, #2
 80028ea:	3302      	adds	r3, #2
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028f2:	4b3d      	ldr	r3, [pc, #244]	; (80029e8 <HAL_GPIO_Init+0x354>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	43db      	mvns	r3, r3
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	4013      	ands	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d003      	beq.n	8002916 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	4313      	orrs	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002916:	4a34      	ldr	r2, [pc, #208]	; (80029e8 <HAL_GPIO_Init+0x354>)
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800291c:	4b32      	ldr	r3, [pc, #200]	; (80029e8 <HAL_GPIO_Init+0x354>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	43db      	mvns	r3, r3
 8002926:	69ba      	ldr	r2, [r7, #24]
 8002928:	4013      	ands	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d003      	beq.n	8002940 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	4313      	orrs	r3, r2
 800293e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002940:	4a29      	ldr	r2, [pc, #164]	; (80029e8 <HAL_GPIO_Init+0x354>)
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002946:	4b28      	ldr	r3, [pc, #160]	; (80029e8 <HAL_GPIO_Init+0x354>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	43db      	mvns	r3, r3
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	4013      	ands	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d003      	beq.n	800296a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	4313      	orrs	r3, r2
 8002968:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800296a:	4a1f      	ldr	r2, [pc, #124]	; (80029e8 <HAL_GPIO_Init+0x354>)
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002970:	4b1d      	ldr	r3, [pc, #116]	; (80029e8 <HAL_GPIO_Init+0x354>)
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	43db      	mvns	r3, r3
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	4013      	ands	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d003      	beq.n	8002994 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	4313      	orrs	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002994:	4a14      	ldr	r2, [pc, #80]	; (80029e8 <HAL_GPIO_Init+0x354>)
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	3301      	adds	r3, #1
 800299e:	61fb      	str	r3, [r7, #28]
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	2b0f      	cmp	r3, #15
 80029a4:	f67f ae86 	bls.w	80026b4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80029a8:	bf00      	nop
 80029aa:	bf00      	nop
 80029ac:	3724      	adds	r7, #36	; 0x24
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	40023800 	.word	0x40023800
 80029bc:	40013800 	.word	0x40013800
 80029c0:	40020000 	.word	0x40020000
 80029c4:	40020400 	.word	0x40020400
 80029c8:	40020800 	.word	0x40020800
 80029cc:	40020c00 	.word	0x40020c00
 80029d0:	40021000 	.word	0x40021000
 80029d4:	40021400 	.word	0x40021400
 80029d8:	40021800 	.word	0x40021800
 80029dc:	40021c00 	.word	0x40021c00
 80029e0:	40022000 	.word	0x40022000
 80029e4:	40022400 	.word	0x40022400
 80029e8:	40013c00 	.word	0x40013c00

080029ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	460b      	mov	r3, r1
 80029f6:	807b      	strh	r3, [r7, #2]
 80029f8:	4613      	mov	r3, r2
 80029fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029fc:	787b      	ldrb	r3, [r7, #1]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d003      	beq.n	8002a0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a02:	887a      	ldrh	r2, [r7, #2]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002a08:	e003      	b.n	8002a12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002a0a:	887b      	ldrh	r3, [r7, #2]
 8002a0c:	041a      	lsls	r2, r3, #16
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	619a      	str	r2, [r3, #24]
}
 8002a12:	bf00      	nop
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr

08002a1e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	b085      	sub	sp, #20
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
 8002a26:	460b      	mov	r3, r1
 8002a28:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a30:	887a      	ldrh	r2, [r7, #2]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	4013      	ands	r3, r2
 8002a36:	041a      	lsls	r2, r3, #16
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	43d9      	mvns	r1, r3
 8002a3c:	887b      	ldrh	r3, [r7, #2]
 8002a3e:	400b      	ands	r3, r1
 8002a40:	431a      	orrs	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	619a      	str	r2, [r3, #24]
}
 8002a46:	bf00      	nop
 8002a48:	3714      	adds	r7, #20
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
	...

08002a54 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a58:	4b05      	ldr	r3, [pc, #20]	; (8002a70 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a04      	ldr	r2, [pc, #16]	; (8002a70 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a62:	6013      	str	r3, [r2, #0]
}
 8002a64:	bf00      	nop
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	40007000 	.word	0x40007000

08002a74 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002a7e:	4b23      	ldr	r3, [pc, #140]	; (8002b0c <HAL_PWREx_EnableOverDrive+0x98>)
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	4a22      	ldr	r2, [pc, #136]	; (8002b0c <HAL_PWREx_EnableOverDrive+0x98>)
 8002a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a88:	6413      	str	r3, [r2, #64]	; 0x40
 8002a8a:	4b20      	ldr	r3, [pc, #128]	; (8002b0c <HAL_PWREx_EnableOverDrive+0x98>)
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a92:	603b      	str	r3, [r7, #0]
 8002a94:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002a96:	4b1e      	ldr	r3, [pc, #120]	; (8002b10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a1d      	ldr	r2, [pc, #116]	; (8002b10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aa0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002aa2:	f7fe facf 	bl	8001044 <HAL_GetTick>
 8002aa6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002aa8:	e009      	b.n	8002abe <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002aaa:	f7fe facb 	bl	8001044 <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ab8:	d901      	bls.n	8002abe <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e022      	b.n	8002b04 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002abe:	4b14      	ldr	r3, [pc, #80]	; (8002b10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ac6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aca:	d1ee      	bne.n	8002aaa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002acc:	4b10      	ldr	r3, [pc, #64]	; (8002b10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a0f      	ldr	r2, [pc, #60]	; (8002b10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ad2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ad6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ad8:	f7fe fab4 	bl	8001044 <HAL_GetTick>
 8002adc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002ade:	e009      	b.n	8002af4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ae0:	f7fe fab0 	bl	8001044 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002aee:	d901      	bls.n	8002af4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e007      	b.n	8002b04 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002af4:	4b06      	ldr	r3, [pc, #24]	; (8002b10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b00:	d1ee      	bne.n	8002ae0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3708      	adds	r7, #8
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	40023800 	.word	0x40023800
 8002b10:	40007000 	.word	0x40007000

08002b14 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b086      	sub	sp, #24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e29b      	b.n	8003062 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f000 8087 	beq.w	8002c46 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b38:	4b96      	ldr	r3, [pc, #600]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f003 030c 	and.w	r3, r3, #12
 8002b40:	2b04      	cmp	r3, #4
 8002b42:	d00c      	beq.n	8002b5e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b44:	4b93      	ldr	r3, [pc, #588]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f003 030c 	and.w	r3, r3, #12
 8002b4c:	2b08      	cmp	r3, #8
 8002b4e:	d112      	bne.n	8002b76 <HAL_RCC_OscConfig+0x62>
 8002b50:	4b90      	ldr	r3, [pc, #576]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b5c:	d10b      	bne.n	8002b76 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b5e:	4b8d      	ldr	r3, [pc, #564]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d06c      	beq.n	8002c44 <HAL_RCC_OscConfig+0x130>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d168      	bne.n	8002c44 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e275      	b.n	8003062 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b7e:	d106      	bne.n	8002b8e <HAL_RCC_OscConfig+0x7a>
 8002b80:	4b84      	ldr	r3, [pc, #528]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a83      	ldr	r2, [pc, #524]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002b86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b8a:	6013      	str	r3, [r2, #0]
 8002b8c:	e02e      	b.n	8002bec <HAL_RCC_OscConfig+0xd8>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d10c      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x9c>
 8002b96:	4b7f      	ldr	r3, [pc, #508]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a7e      	ldr	r2, [pc, #504]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002b9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ba0:	6013      	str	r3, [r2, #0]
 8002ba2:	4b7c      	ldr	r3, [pc, #496]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a7b      	ldr	r2, [pc, #492]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002ba8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bac:	6013      	str	r3, [r2, #0]
 8002bae:	e01d      	b.n	8002bec <HAL_RCC_OscConfig+0xd8>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bb8:	d10c      	bne.n	8002bd4 <HAL_RCC_OscConfig+0xc0>
 8002bba:	4b76      	ldr	r3, [pc, #472]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a75      	ldr	r2, [pc, #468]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002bc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bc4:	6013      	str	r3, [r2, #0]
 8002bc6:	4b73      	ldr	r3, [pc, #460]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a72      	ldr	r2, [pc, #456]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bd0:	6013      	str	r3, [r2, #0]
 8002bd2:	e00b      	b.n	8002bec <HAL_RCC_OscConfig+0xd8>
 8002bd4:	4b6f      	ldr	r3, [pc, #444]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a6e      	ldr	r2, [pc, #440]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002bda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bde:	6013      	str	r3, [r2, #0]
 8002be0:	4b6c      	ldr	r3, [pc, #432]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a6b      	ldr	r2, [pc, #428]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002be6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d013      	beq.n	8002c1c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf4:	f7fe fa26 	bl	8001044 <HAL_GetTick>
 8002bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bfa:	e008      	b.n	8002c0e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bfc:	f7fe fa22 	bl	8001044 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b64      	cmp	r3, #100	; 0x64
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e229      	b.n	8003062 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c0e:	4b61      	ldr	r3, [pc, #388]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d0f0      	beq.n	8002bfc <HAL_RCC_OscConfig+0xe8>
 8002c1a:	e014      	b.n	8002c46 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c1c:	f7fe fa12 	bl	8001044 <HAL_GetTick>
 8002c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c22:	e008      	b.n	8002c36 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c24:	f7fe fa0e 	bl	8001044 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b64      	cmp	r3, #100	; 0x64
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e215      	b.n	8003062 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c36:	4b57      	ldr	r3, [pc, #348]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d1f0      	bne.n	8002c24 <HAL_RCC_OscConfig+0x110>
 8002c42:	e000      	b.n	8002c46 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d069      	beq.n	8002d26 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c52:	4b50      	ldr	r3, [pc, #320]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f003 030c 	and.w	r3, r3, #12
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00b      	beq.n	8002c76 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c5e:	4b4d      	ldr	r3, [pc, #308]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f003 030c 	and.w	r3, r3, #12
 8002c66:	2b08      	cmp	r3, #8
 8002c68:	d11c      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x190>
 8002c6a:	4b4a      	ldr	r3, [pc, #296]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d116      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c76:	4b47      	ldr	r3, [pc, #284]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d005      	beq.n	8002c8e <HAL_RCC_OscConfig+0x17a>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d001      	beq.n	8002c8e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e1e9      	b.n	8003062 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c8e:	4b41      	ldr	r3, [pc, #260]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	493d      	ldr	r1, [pc, #244]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ca2:	e040      	b.n	8002d26 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d023      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cac:	4b39      	ldr	r3, [pc, #228]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a38      	ldr	r2, [pc, #224]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002cb2:	f043 0301 	orr.w	r3, r3, #1
 8002cb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb8:	f7fe f9c4 	bl	8001044 <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cc0:	f7fe f9c0 	bl	8001044 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e1c7      	b.n	8003062 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd2:	4b30      	ldr	r3, [pc, #192]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d0f0      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cde:	4b2d      	ldr	r3, [pc, #180]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	4929      	ldr	r1, [pc, #164]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	600b      	str	r3, [r1, #0]
 8002cf2:	e018      	b.n	8002d26 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cf4:	4b27      	ldr	r3, [pc, #156]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a26      	ldr	r2, [pc, #152]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002cfa:	f023 0301 	bic.w	r3, r3, #1
 8002cfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d00:	f7fe f9a0 	bl	8001044 <HAL_GetTick>
 8002d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d06:	e008      	b.n	8002d1a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d08:	f7fe f99c 	bl	8001044 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e1a3      	b.n	8003062 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d1a:	4b1e      	ldr	r3, [pc, #120]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1f0      	bne.n	8002d08 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0308 	and.w	r3, r3, #8
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d038      	beq.n	8002da4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d019      	beq.n	8002d6e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d3a:	4b16      	ldr	r3, [pc, #88]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002d3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d3e:	4a15      	ldr	r2, [pc, #84]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002d40:	f043 0301 	orr.w	r3, r3, #1
 8002d44:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d46:	f7fe f97d 	bl	8001044 <HAL_GetTick>
 8002d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d4c:	e008      	b.n	8002d60 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d4e:	f7fe f979 	bl	8001044 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e180      	b.n	8003062 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d60:	4b0c      	ldr	r3, [pc, #48]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002d62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d64:	f003 0302 	and.w	r3, r3, #2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d0f0      	beq.n	8002d4e <HAL_RCC_OscConfig+0x23a>
 8002d6c:	e01a      	b.n	8002da4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d6e:	4b09      	ldr	r3, [pc, #36]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002d70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d72:	4a08      	ldr	r2, [pc, #32]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002d74:	f023 0301 	bic.w	r3, r3, #1
 8002d78:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d7a:	f7fe f963 	bl	8001044 <HAL_GetTick>
 8002d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d80:	e00a      	b.n	8002d98 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d82:	f7fe f95f 	bl	8001044 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d903      	bls.n	8002d98 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e166      	b.n	8003062 <HAL_RCC_OscConfig+0x54e>
 8002d94:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d98:	4b92      	ldr	r3, [pc, #584]	; (8002fe4 <HAL_RCC_OscConfig+0x4d0>)
 8002d9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1ee      	bne.n	8002d82 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0304 	and.w	r3, r3, #4
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f000 80a4 	beq.w	8002efa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002db2:	4b8c      	ldr	r3, [pc, #560]	; (8002fe4 <HAL_RCC_OscConfig+0x4d0>)
 8002db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d10d      	bne.n	8002dda <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dbe:	4b89      	ldr	r3, [pc, #548]	; (8002fe4 <HAL_RCC_OscConfig+0x4d0>)
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	4a88      	ldr	r2, [pc, #544]	; (8002fe4 <HAL_RCC_OscConfig+0x4d0>)
 8002dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8002dca:	4b86      	ldr	r3, [pc, #536]	; (8002fe4 <HAL_RCC_OscConfig+0x4d0>)
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd2:	60bb      	str	r3, [r7, #8]
 8002dd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dda:	4b83      	ldr	r3, [pc, #524]	; (8002fe8 <HAL_RCC_OscConfig+0x4d4>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d118      	bne.n	8002e18 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002de6:	4b80      	ldr	r3, [pc, #512]	; (8002fe8 <HAL_RCC_OscConfig+0x4d4>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a7f      	ldr	r2, [pc, #508]	; (8002fe8 <HAL_RCC_OscConfig+0x4d4>)
 8002dec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002df0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002df2:	f7fe f927 	bl	8001044 <HAL_GetTick>
 8002df6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002df8:	e008      	b.n	8002e0c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dfa:	f7fe f923 	bl	8001044 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	2b64      	cmp	r3, #100	; 0x64
 8002e06:	d901      	bls.n	8002e0c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e12a      	b.n	8003062 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e0c:	4b76      	ldr	r3, [pc, #472]	; (8002fe8 <HAL_RCC_OscConfig+0x4d4>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d0f0      	beq.n	8002dfa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d106      	bne.n	8002e2e <HAL_RCC_OscConfig+0x31a>
 8002e20:	4b70      	ldr	r3, [pc, #448]	; (8002fe4 <HAL_RCC_OscConfig+0x4d0>)
 8002e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e24:	4a6f      	ldr	r2, [pc, #444]	; (8002fe4 <HAL_RCC_OscConfig+0x4d0>)
 8002e26:	f043 0301 	orr.w	r3, r3, #1
 8002e2a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e2c:	e02d      	b.n	8002e8a <HAL_RCC_OscConfig+0x376>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d10c      	bne.n	8002e50 <HAL_RCC_OscConfig+0x33c>
 8002e36:	4b6b      	ldr	r3, [pc, #428]	; (8002fe4 <HAL_RCC_OscConfig+0x4d0>)
 8002e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e3a:	4a6a      	ldr	r2, [pc, #424]	; (8002fe4 <HAL_RCC_OscConfig+0x4d0>)
 8002e3c:	f023 0301 	bic.w	r3, r3, #1
 8002e40:	6713      	str	r3, [r2, #112]	; 0x70
 8002e42:	4b68      	ldr	r3, [pc, #416]	; (8002fe4 <HAL_RCC_OscConfig+0x4d0>)
 8002e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e46:	4a67      	ldr	r2, [pc, #412]	; (8002fe4 <HAL_RCC_OscConfig+0x4d0>)
 8002e48:	f023 0304 	bic.w	r3, r3, #4
 8002e4c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e4e:	e01c      	b.n	8002e8a <HAL_RCC_OscConfig+0x376>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	2b05      	cmp	r3, #5
 8002e56:	d10c      	bne.n	8002e72 <HAL_RCC_OscConfig+0x35e>
 8002e58:	4b62      	ldr	r3, [pc, #392]	; (8002fe4 <HAL_RCC_OscConfig+0x4d0>)
 8002e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e5c:	4a61      	ldr	r2, [pc, #388]	; (8002fe4 <HAL_RCC_OscConfig+0x4d0>)
 8002e5e:	f043 0304 	orr.w	r3, r3, #4
 8002e62:	6713      	str	r3, [r2, #112]	; 0x70
 8002e64:	4b5f      	ldr	r3, [pc, #380]	; (8002fe4 <HAL_RCC_OscConfig+0x4d0>)
 8002e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e68:	4a5e      	ldr	r2, [pc, #376]	; (8002fe4 <HAL_RCC_OscConfig+0x4d0>)
 8002e6a:	f043 0301 	orr.w	r3, r3, #1
 8002e6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e70:	e00b      	b.n	8002e8a <HAL_RCC_OscConfig+0x376>
 8002e72:	4b5c      	ldr	r3, [pc, #368]	; (8002fe4 <HAL_RCC_OscConfig+0x4d0>)
 8002e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e76:	4a5b      	ldr	r2, [pc, #364]	; (8002fe4 <HAL_RCC_OscConfig+0x4d0>)
 8002e78:	f023 0301 	bic.w	r3, r3, #1
 8002e7c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e7e:	4b59      	ldr	r3, [pc, #356]	; (8002fe4 <HAL_RCC_OscConfig+0x4d0>)
 8002e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e82:	4a58      	ldr	r2, [pc, #352]	; (8002fe4 <HAL_RCC_OscConfig+0x4d0>)
 8002e84:	f023 0304 	bic.w	r3, r3, #4
 8002e88:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d015      	beq.n	8002ebe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e92:	f7fe f8d7 	bl	8001044 <HAL_GetTick>
 8002e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e98:	e00a      	b.n	8002eb0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e9a:	f7fe f8d3 	bl	8001044 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e0d8      	b.n	8003062 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eb0:	4b4c      	ldr	r3, [pc, #304]	; (8002fe4 <HAL_RCC_OscConfig+0x4d0>)
 8002eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb4:	f003 0302 	and.w	r3, r3, #2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d0ee      	beq.n	8002e9a <HAL_RCC_OscConfig+0x386>
 8002ebc:	e014      	b.n	8002ee8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ebe:	f7fe f8c1 	bl	8001044 <HAL_GetTick>
 8002ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ec4:	e00a      	b.n	8002edc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ec6:	f7fe f8bd 	bl	8001044 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d901      	bls.n	8002edc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e0c2      	b.n	8003062 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002edc:	4b41      	ldr	r3, [pc, #260]	; (8002fe4 <HAL_RCC_OscConfig+0x4d0>)
 8002ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee0:	f003 0302 	and.w	r3, r3, #2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d1ee      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ee8:	7dfb      	ldrb	r3, [r7, #23]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d105      	bne.n	8002efa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eee:	4b3d      	ldr	r3, [pc, #244]	; (8002fe4 <HAL_RCC_OscConfig+0x4d0>)
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	4a3c      	ldr	r2, [pc, #240]	; (8002fe4 <HAL_RCC_OscConfig+0x4d0>)
 8002ef4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ef8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	f000 80ae 	beq.w	8003060 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f04:	4b37      	ldr	r3, [pc, #220]	; (8002fe4 <HAL_RCC_OscConfig+0x4d0>)
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f003 030c 	and.w	r3, r3, #12
 8002f0c:	2b08      	cmp	r3, #8
 8002f0e:	d06d      	beq.n	8002fec <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d14b      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f18:	4b32      	ldr	r3, [pc, #200]	; (8002fe4 <HAL_RCC_OscConfig+0x4d0>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a31      	ldr	r2, [pc, #196]	; (8002fe4 <HAL_RCC_OscConfig+0x4d0>)
 8002f1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f24:	f7fe f88e 	bl	8001044 <HAL_GetTick>
 8002f28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f2a:	e008      	b.n	8002f3e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f2c:	f7fe f88a 	bl	8001044 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e091      	b.n	8003062 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f3e:	4b29      	ldr	r3, [pc, #164]	; (8002fe4 <HAL_RCC_OscConfig+0x4d0>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1f0      	bne.n	8002f2c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	69da      	ldr	r2, [r3, #28]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a1b      	ldr	r3, [r3, #32]
 8002f52:	431a      	orrs	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f58:	019b      	lsls	r3, r3, #6
 8002f5a:	431a      	orrs	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f60:	085b      	lsrs	r3, r3, #1
 8002f62:	3b01      	subs	r3, #1
 8002f64:	041b      	lsls	r3, r3, #16
 8002f66:	431a      	orrs	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6c:	061b      	lsls	r3, r3, #24
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f74:	071b      	lsls	r3, r3, #28
 8002f76:	491b      	ldr	r1, [pc, #108]	; (8002fe4 <HAL_RCC_OscConfig+0x4d0>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f7c:	4b19      	ldr	r3, [pc, #100]	; (8002fe4 <HAL_RCC_OscConfig+0x4d0>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a18      	ldr	r2, [pc, #96]	; (8002fe4 <HAL_RCC_OscConfig+0x4d0>)
 8002f82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f88:	f7fe f85c 	bl	8001044 <HAL_GetTick>
 8002f8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f90:	f7fe f858 	bl	8001044 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e05f      	b.n	8003062 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fa2:	4b10      	ldr	r3, [pc, #64]	; (8002fe4 <HAL_RCC_OscConfig+0x4d0>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d0f0      	beq.n	8002f90 <HAL_RCC_OscConfig+0x47c>
 8002fae:	e057      	b.n	8003060 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fb0:	4b0c      	ldr	r3, [pc, #48]	; (8002fe4 <HAL_RCC_OscConfig+0x4d0>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a0b      	ldr	r2, [pc, #44]	; (8002fe4 <HAL_RCC_OscConfig+0x4d0>)
 8002fb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fbc:	f7fe f842 	bl	8001044 <HAL_GetTick>
 8002fc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fc2:	e008      	b.n	8002fd6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fc4:	f7fe f83e 	bl	8001044 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e045      	b.n	8003062 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fd6:	4b03      	ldr	r3, [pc, #12]	; (8002fe4 <HAL_RCC_OscConfig+0x4d0>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1f0      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x4b0>
 8002fe2:	e03d      	b.n	8003060 <HAL_RCC_OscConfig+0x54c>
 8002fe4:	40023800 	.word	0x40023800
 8002fe8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002fec:	4b1f      	ldr	r3, [pc, #124]	; (800306c <HAL_RCC_OscConfig+0x558>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d030      	beq.n	800305c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003004:	429a      	cmp	r2, r3
 8003006:	d129      	bne.n	800305c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003012:	429a      	cmp	r2, r3
 8003014:	d122      	bne.n	800305c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800301c:	4013      	ands	r3, r2
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003022:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003024:	4293      	cmp	r3, r2
 8003026:	d119      	bne.n	800305c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003032:	085b      	lsrs	r3, r3, #1
 8003034:	3b01      	subs	r3, #1
 8003036:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003038:	429a      	cmp	r2, r3
 800303a:	d10f      	bne.n	800305c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003046:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003048:	429a      	cmp	r2, r3
 800304a:	d107      	bne.n	800305c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003056:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003058:	429a      	cmp	r2, r3
 800305a:	d001      	beq.n	8003060 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e000      	b.n	8003062 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3718      	adds	r7, #24
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	40023800 	.word	0x40023800

08003070 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800307a:	2300      	movs	r3, #0
 800307c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d101      	bne.n	8003088 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e0d0      	b.n	800322a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003088:	4b6a      	ldr	r3, [pc, #424]	; (8003234 <HAL_RCC_ClockConfig+0x1c4>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 030f 	and.w	r3, r3, #15
 8003090:	683a      	ldr	r2, [r7, #0]
 8003092:	429a      	cmp	r2, r3
 8003094:	d910      	bls.n	80030b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003096:	4b67      	ldr	r3, [pc, #412]	; (8003234 <HAL_RCC_ClockConfig+0x1c4>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f023 020f 	bic.w	r2, r3, #15
 800309e:	4965      	ldr	r1, [pc, #404]	; (8003234 <HAL_RCC_ClockConfig+0x1c4>)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030a6:	4b63      	ldr	r3, [pc, #396]	; (8003234 <HAL_RCC_ClockConfig+0x1c4>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 030f 	and.w	r3, r3, #15
 80030ae:	683a      	ldr	r2, [r7, #0]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d001      	beq.n	80030b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e0b8      	b.n	800322a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0302 	and.w	r3, r3, #2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d020      	beq.n	8003106 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0304 	and.w	r3, r3, #4
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d005      	beq.n	80030dc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030d0:	4b59      	ldr	r3, [pc, #356]	; (8003238 <HAL_RCC_ClockConfig+0x1c8>)
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	4a58      	ldr	r2, [pc, #352]	; (8003238 <HAL_RCC_ClockConfig+0x1c8>)
 80030d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0308 	and.w	r3, r3, #8
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d005      	beq.n	80030f4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030e8:	4b53      	ldr	r3, [pc, #332]	; (8003238 <HAL_RCC_ClockConfig+0x1c8>)
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	4a52      	ldr	r2, [pc, #328]	; (8003238 <HAL_RCC_ClockConfig+0x1c8>)
 80030ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030f2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030f4:	4b50      	ldr	r3, [pc, #320]	; (8003238 <HAL_RCC_ClockConfig+0x1c8>)
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	494d      	ldr	r1, [pc, #308]	; (8003238 <HAL_RCC_ClockConfig+0x1c8>)
 8003102:	4313      	orrs	r3, r2
 8003104:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	2b00      	cmp	r3, #0
 8003110:	d040      	beq.n	8003194 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d107      	bne.n	800312a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800311a:	4b47      	ldr	r3, [pc, #284]	; (8003238 <HAL_RCC_ClockConfig+0x1c8>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d115      	bne.n	8003152 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e07f      	b.n	800322a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	2b02      	cmp	r3, #2
 8003130:	d107      	bne.n	8003142 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003132:	4b41      	ldr	r3, [pc, #260]	; (8003238 <HAL_RCC_ClockConfig+0x1c8>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d109      	bne.n	8003152 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e073      	b.n	800322a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003142:	4b3d      	ldr	r3, [pc, #244]	; (8003238 <HAL_RCC_ClockConfig+0x1c8>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d101      	bne.n	8003152 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e06b      	b.n	800322a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003152:	4b39      	ldr	r3, [pc, #228]	; (8003238 <HAL_RCC_ClockConfig+0x1c8>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f023 0203 	bic.w	r2, r3, #3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	4936      	ldr	r1, [pc, #216]	; (8003238 <HAL_RCC_ClockConfig+0x1c8>)
 8003160:	4313      	orrs	r3, r2
 8003162:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003164:	f7fd ff6e 	bl	8001044 <HAL_GetTick>
 8003168:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800316a:	e00a      	b.n	8003182 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800316c:	f7fd ff6a 	bl	8001044 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	f241 3288 	movw	r2, #5000	; 0x1388
 800317a:	4293      	cmp	r3, r2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e053      	b.n	800322a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003182:	4b2d      	ldr	r3, [pc, #180]	; (8003238 <HAL_RCC_ClockConfig+0x1c8>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f003 020c 	and.w	r2, r3, #12
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	429a      	cmp	r2, r3
 8003192:	d1eb      	bne.n	800316c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003194:	4b27      	ldr	r3, [pc, #156]	; (8003234 <HAL_RCC_ClockConfig+0x1c4>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 030f 	and.w	r3, r3, #15
 800319c:	683a      	ldr	r2, [r7, #0]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d210      	bcs.n	80031c4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031a2:	4b24      	ldr	r3, [pc, #144]	; (8003234 <HAL_RCC_ClockConfig+0x1c4>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f023 020f 	bic.w	r2, r3, #15
 80031aa:	4922      	ldr	r1, [pc, #136]	; (8003234 <HAL_RCC_ClockConfig+0x1c4>)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031b2:	4b20      	ldr	r3, [pc, #128]	; (8003234 <HAL_RCC_ClockConfig+0x1c4>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 030f 	and.w	r3, r3, #15
 80031ba:	683a      	ldr	r2, [r7, #0]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d001      	beq.n	80031c4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e032      	b.n	800322a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0304 	and.w	r3, r3, #4
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d008      	beq.n	80031e2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031d0:	4b19      	ldr	r3, [pc, #100]	; (8003238 <HAL_RCC_ClockConfig+0x1c8>)
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	4916      	ldr	r1, [pc, #88]	; (8003238 <HAL_RCC_ClockConfig+0x1c8>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0308 	and.w	r3, r3, #8
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d009      	beq.n	8003202 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031ee:	4b12      	ldr	r3, [pc, #72]	; (8003238 <HAL_RCC_ClockConfig+0x1c8>)
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	00db      	lsls	r3, r3, #3
 80031fc:	490e      	ldr	r1, [pc, #56]	; (8003238 <HAL_RCC_ClockConfig+0x1c8>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003202:	f000 f821 	bl	8003248 <HAL_RCC_GetSysClockFreq>
 8003206:	4602      	mov	r2, r0
 8003208:	4b0b      	ldr	r3, [pc, #44]	; (8003238 <HAL_RCC_ClockConfig+0x1c8>)
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	091b      	lsrs	r3, r3, #4
 800320e:	f003 030f 	and.w	r3, r3, #15
 8003212:	490a      	ldr	r1, [pc, #40]	; (800323c <HAL_RCC_ClockConfig+0x1cc>)
 8003214:	5ccb      	ldrb	r3, [r1, r3]
 8003216:	fa22 f303 	lsr.w	r3, r2, r3
 800321a:	4a09      	ldr	r2, [pc, #36]	; (8003240 <HAL_RCC_ClockConfig+0x1d0>)
 800321c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800321e:	4b09      	ldr	r3, [pc, #36]	; (8003244 <HAL_RCC_ClockConfig+0x1d4>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f7fd fd66 	bl	8000cf4 <HAL_InitTick>

  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	40023c00 	.word	0x40023c00
 8003238:	40023800 	.word	0x40023800
 800323c:	0801b710 	.word	0x0801b710
 8003240:	20000000 	.word	0x20000000
 8003244:	20000004 	.word	0x20000004

08003248 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003248:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800324c:	b084      	sub	sp, #16
 800324e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003250:	2300      	movs	r3, #0
 8003252:	607b      	str	r3, [r7, #4]
 8003254:	2300      	movs	r3, #0
 8003256:	60fb      	str	r3, [r7, #12]
 8003258:	2300      	movs	r3, #0
 800325a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800325c:	2300      	movs	r3, #0
 800325e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003260:	4b67      	ldr	r3, [pc, #412]	; (8003400 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f003 030c 	and.w	r3, r3, #12
 8003268:	2b08      	cmp	r3, #8
 800326a:	d00d      	beq.n	8003288 <HAL_RCC_GetSysClockFreq+0x40>
 800326c:	2b08      	cmp	r3, #8
 800326e:	f200 80bd 	bhi.w	80033ec <HAL_RCC_GetSysClockFreq+0x1a4>
 8003272:	2b00      	cmp	r3, #0
 8003274:	d002      	beq.n	800327c <HAL_RCC_GetSysClockFreq+0x34>
 8003276:	2b04      	cmp	r3, #4
 8003278:	d003      	beq.n	8003282 <HAL_RCC_GetSysClockFreq+0x3a>
 800327a:	e0b7      	b.n	80033ec <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800327c:	4b61      	ldr	r3, [pc, #388]	; (8003404 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800327e:	60bb      	str	r3, [r7, #8]
      break;
 8003280:	e0b7      	b.n	80033f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003282:	4b61      	ldr	r3, [pc, #388]	; (8003408 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003284:	60bb      	str	r3, [r7, #8]
      break;
 8003286:	e0b4      	b.n	80033f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003288:	4b5d      	ldr	r3, [pc, #372]	; (8003400 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003290:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003292:	4b5b      	ldr	r3, [pc, #364]	; (8003400 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d04d      	beq.n	800333a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800329e:	4b58      	ldr	r3, [pc, #352]	; (8003400 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	099b      	lsrs	r3, r3, #6
 80032a4:	461a      	mov	r2, r3
 80032a6:	f04f 0300 	mov.w	r3, #0
 80032aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80032ae:	f04f 0100 	mov.w	r1, #0
 80032b2:	ea02 0800 	and.w	r8, r2, r0
 80032b6:	ea03 0901 	and.w	r9, r3, r1
 80032ba:	4640      	mov	r0, r8
 80032bc:	4649      	mov	r1, r9
 80032be:	f04f 0200 	mov.w	r2, #0
 80032c2:	f04f 0300 	mov.w	r3, #0
 80032c6:	014b      	lsls	r3, r1, #5
 80032c8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80032cc:	0142      	lsls	r2, r0, #5
 80032ce:	4610      	mov	r0, r2
 80032d0:	4619      	mov	r1, r3
 80032d2:	ebb0 0008 	subs.w	r0, r0, r8
 80032d6:	eb61 0109 	sbc.w	r1, r1, r9
 80032da:	f04f 0200 	mov.w	r2, #0
 80032de:	f04f 0300 	mov.w	r3, #0
 80032e2:	018b      	lsls	r3, r1, #6
 80032e4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80032e8:	0182      	lsls	r2, r0, #6
 80032ea:	1a12      	subs	r2, r2, r0
 80032ec:	eb63 0301 	sbc.w	r3, r3, r1
 80032f0:	f04f 0000 	mov.w	r0, #0
 80032f4:	f04f 0100 	mov.w	r1, #0
 80032f8:	00d9      	lsls	r1, r3, #3
 80032fa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80032fe:	00d0      	lsls	r0, r2, #3
 8003300:	4602      	mov	r2, r0
 8003302:	460b      	mov	r3, r1
 8003304:	eb12 0208 	adds.w	r2, r2, r8
 8003308:	eb43 0309 	adc.w	r3, r3, r9
 800330c:	f04f 0000 	mov.w	r0, #0
 8003310:	f04f 0100 	mov.w	r1, #0
 8003314:	0259      	lsls	r1, r3, #9
 8003316:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800331a:	0250      	lsls	r0, r2, #9
 800331c:	4602      	mov	r2, r0
 800331e:	460b      	mov	r3, r1
 8003320:	4610      	mov	r0, r2
 8003322:	4619      	mov	r1, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	461a      	mov	r2, r3
 8003328:	f04f 0300 	mov.w	r3, #0
 800332c:	f7fc ffd8 	bl	80002e0 <__aeabi_uldivmod>
 8003330:	4602      	mov	r2, r0
 8003332:	460b      	mov	r3, r1
 8003334:	4613      	mov	r3, r2
 8003336:	60fb      	str	r3, [r7, #12]
 8003338:	e04a      	b.n	80033d0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800333a:	4b31      	ldr	r3, [pc, #196]	; (8003400 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	099b      	lsrs	r3, r3, #6
 8003340:	461a      	mov	r2, r3
 8003342:	f04f 0300 	mov.w	r3, #0
 8003346:	f240 10ff 	movw	r0, #511	; 0x1ff
 800334a:	f04f 0100 	mov.w	r1, #0
 800334e:	ea02 0400 	and.w	r4, r2, r0
 8003352:	ea03 0501 	and.w	r5, r3, r1
 8003356:	4620      	mov	r0, r4
 8003358:	4629      	mov	r1, r5
 800335a:	f04f 0200 	mov.w	r2, #0
 800335e:	f04f 0300 	mov.w	r3, #0
 8003362:	014b      	lsls	r3, r1, #5
 8003364:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003368:	0142      	lsls	r2, r0, #5
 800336a:	4610      	mov	r0, r2
 800336c:	4619      	mov	r1, r3
 800336e:	1b00      	subs	r0, r0, r4
 8003370:	eb61 0105 	sbc.w	r1, r1, r5
 8003374:	f04f 0200 	mov.w	r2, #0
 8003378:	f04f 0300 	mov.w	r3, #0
 800337c:	018b      	lsls	r3, r1, #6
 800337e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003382:	0182      	lsls	r2, r0, #6
 8003384:	1a12      	subs	r2, r2, r0
 8003386:	eb63 0301 	sbc.w	r3, r3, r1
 800338a:	f04f 0000 	mov.w	r0, #0
 800338e:	f04f 0100 	mov.w	r1, #0
 8003392:	00d9      	lsls	r1, r3, #3
 8003394:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003398:	00d0      	lsls	r0, r2, #3
 800339a:	4602      	mov	r2, r0
 800339c:	460b      	mov	r3, r1
 800339e:	1912      	adds	r2, r2, r4
 80033a0:	eb45 0303 	adc.w	r3, r5, r3
 80033a4:	f04f 0000 	mov.w	r0, #0
 80033a8:	f04f 0100 	mov.w	r1, #0
 80033ac:	0299      	lsls	r1, r3, #10
 80033ae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80033b2:	0290      	lsls	r0, r2, #10
 80033b4:	4602      	mov	r2, r0
 80033b6:	460b      	mov	r3, r1
 80033b8:	4610      	mov	r0, r2
 80033ba:	4619      	mov	r1, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	461a      	mov	r2, r3
 80033c0:	f04f 0300 	mov.w	r3, #0
 80033c4:	f7fc ff8c 	bl	80002e0 <__aeabi_uldivmod>
 80033c8:	4602      	mov	r2, r0
 80033ca:	460b      	mov	r3, r1
 80033cc:	4613      	mov	r3, r2
 80033ce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80033d0:	4b0b      	ldr	r3, [pc, #44]	; (8003400 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	0c1b      	lsrs	r3, r3, #16
 80033d6:	f003 0303 	and.w	r3, r3, #3
 80033da:	3301      	adds	r3, #1
 80033dc:	005b      	lsls	r3, r3, #1
 80033de:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80033e0:	68fa      	ldr	r2, [r7, #12]
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e8:	60bb      	str	r3, [r7, #8]
      break;
 80033ea:	e002      	b.n	80033f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033ec:	4b05      	ldr	r3, [pc, #20]	; (8003404 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80033ee:	60bb      	str	r3, [r7, #8]
      break;
 80033f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033f2:	68bb      	ldr	r3, [r7, #8]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3710      	adds	r7, #16
 80033f8:	46bd      	mov	sp, r7
 80033fa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80033fe:	bf00      	nop
 8003400:	40023800 	.word	0x40023800
 8003404:	00f42400 	.word	0x00f42400
 8003408:	007a1200 	.word	0x007a1200

0800340c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800340c:	b480      	push	{r7}
 800340e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003410:	4b03      	ldr	r3, [pc, #12]	; (8003420 <HAL_RCC_GetHCLKFreq+0x14>)
 8003412:	681b      	ldr	r3, [r3, #0]
}
 8003414:	4618      	mov	r0, r3
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	20000000 	.word	0x20000000

08003424 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003428:	f7ff fff0 	bl	800340c <HAL_RCC_GetHCLKFreq>
 800342c:	4602      	mov	r2, r0
 800342e:	4b05      	ldr	r3, [pc, #20]	; (8003444 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	0a9b      	lsrs	r3, r3, #10
 8003434:	f003 0307 	and.w	r3, r3, #7
 8003438:	4903      	ldr	r1, [pc, #12]	; (8003448 <HAL_RCC_GetPCLK1Freq+0x24>)
 800343a:	5ccb      	ldrb	r3, [r1, r3]
 800343c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003440:	4618      	mov	r0, r3
 8003442:	bd80      	pop	{r7, pc}
 8003444:	40023800 	.word	0x40023800
 8003448:	0801b720 	.word	0x0801b720

0800344c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003450:	f7ff ffdc 	bl	800340c <HAL_RCC_GetHCLKFreq>
 8003454:	4602      	mov	r2, r0
 8003456:	4b05      	ldr	r3, [pc, #20]	; (800346c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	0b5b      	lsrs	r3, r3, #13
 800345c:	f003 0307 	and.w	r3, r3, #7
 8003460:	4903      	ldr	r1, [pc, #12]	; (8003470 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003462:	5ccb      	ldrb	r3, [r1, r3]
 8003464:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003468:	4618      	mov	r0, r3
 800346a:	bd80      	pop	{r7, pc}
 800346c:	40023800 	.word	0x40023800
 8003470:	0801b720 	.word	0x0801b720

08003474 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	220f      	movs	r2, #15
 8003482:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003484:	4b12      	ldr	r3, [pc, #72]	; (80034d0 <HAL_RCC_GetClockConfig+0x5c>)
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f003 0203 	and.w	r2, r3, #3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003490:	4b0f      	ldr	r3, [pc, #60]	; (80034d0 <HAL_RCC_GetClockConfig+0x5c>)
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800349c:	4b0c      	ldr	r3, [pc, #48]	; (80034d0 <HAL_RCC_GetClockConfig+0x5c>)
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80034a8:	4b09      	ldr	r3, [pc, #36]	; (80034d0 <HAL_RCC_GetClockConfig+0x5c>)
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	08db      	lsrs	r3, r3, #3
 80034ae:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80034b6:	4b07      	ldr	r3, [pc, #28]	; (80034d4 <HAL_RCC_GetClockConfig+0x60>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 020f 	and.w	r2, r3, #15
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	601a      	str	r2, [r3, #0]
}
 80034c2:	bf00      	nop
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	40023800 	.word	0x40023800
 80034d4:	40023c00 	.word	0x40023c00

080034d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b088      	sub	sp, #32
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80034e0:	2300      	movs	r3, #0
 80034e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80034e4:	2300      	movs	r3, #0
 80034e6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80034e8:	2300      	movs	r3, #0
 80034ea:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80034ec:	2300      	movs	r3, #0
 80034ee:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80034f0:	2300      	movs	r3, #0
 80034f2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0301 	and.w	r3, r3, #1
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d012      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003500:	4b69      	ldr	r3, [pc, #420]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	4a68      	ldr	r2, [pc, #416]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003506:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800350a:	6093      	str	r3, [r2, #8]
 800350c:	4b66      	ldr	r3, [pc, #408]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800350e:	689a      	ldr	r2, [r3, #8]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003514:	4964      	ldr	r1, [pc, #400]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003516:	4313      	orrs	r3, r2
 8003518:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800351e:	2b00      	cmp	r3, #0
 8003520:	d101      	bne.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003522:	2301      	movs	r3, #1
 8003524:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d017      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003532:	4b5d      	ldr	r3, [pc, #372]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003534:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003538:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003540:	4959      	ldr	r1, [pc, #356]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003542:	4313      	orrs	r3, r2
 8003544:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800354c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003550:	d101      	bne.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003552:	2301      	movs	r3, #1
 8003554:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800355a:	2b00      	cmp	r3, #0
 800355c:	d101      	bne.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800355e:	2301      	movs	r3, #1
 8003560:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d017      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800356e:	4b4e      	ldr	r3, [pc, #312]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003570:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003574:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357c:	494a      	ldr	r1, [pc, #296]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800357e:	4313      	orrs	r3, r2
 8003580:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003588:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800358c:	d101      	bne.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800358e:	2301      	movs	r3, #1
 8003590:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800359a:	2301      	movs	r3, #1
 800359c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80035aa:	2301      	movs	r3, #1
 80035ac:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0320 	and.w	r3, r3, #32
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	f000 808b 	beq.w	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80035bc:	4b3a      	ldr	r3, [pc, #232]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c0:	4a39      	ldr	r2, [pc, #228]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035c6:	6413      	str	r3, [r2, #64]	; 0x40
 80035c8:	4b37      	ldr	r3, [pc, #220]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035d0:	60bb      	str	r3, [r7, #8]
 80035d2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80035d4:	4b35      	ldr	r3, [pc, #212]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a34      	ldr	r2, [pc, #208]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80035da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035e0:	f7fd fd30 	bl	8001044 <HAL_GetTick>
 80035e4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80035e6:	e008      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035e8:	f7fd fd2c 	bl	8001044 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b64      	cmp	r3, #100	; 0x64
 80035f4:	d901      	bls.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e38f      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80035fa:	4b2c      	ldr	r3, [pc, #176]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003602:	2b00      	cmp	r3, #0
 8003604:	d0f0      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003606:	4b28      	ldr	r3, [pc, #160]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800360e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d035      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800361e:	693a      	ldr	r2, [r7, #16]
 8003620:	429a      	cmp	r2, r3
 8003622:	d02e      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003624:	4b20      	ldr	r3, [pc, #128]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003628:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800362c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800362e:	4b1e      	ldr	r3, [pc, #120]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003632:	4a1d      	ldr	r2, [pc, #116]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003638:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800363a:	4b1b      	ldr	r3, [pc, #108]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800363c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363e:	4a1a      	ldr	r2, [pc, #104]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003640:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003644:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003646:	4a18      	ldr	r2, [pc, #96]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800364c:	4b16      	ldr	r3, [pc, #88]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800364e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	2b01      	cmp	r3, #1
 8003656:	d114      	bne.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003658:	f7fd fcf4 	bl	8001044 <HAL_GetTick>
 800365c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800365e:	e00a      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003660:	f7fd fcf0 	bl	8001044 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	f241 3288 	movw	r2, #5000	; 0x1388
 800366e:	4293      	cmp	r3, r2
 8003670:	d901      	bls.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e351      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003676:	4b0c      	ldr	r3, [pc, #48]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800367a:	f003 0302 	and.w	r3, r3, #2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d0ee      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800368a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800368e:	d111      	bne.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003690:	4b05      	ldr	r3, [pc, #20]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800369c:	4b04      	ldr	r3, [pc, #16]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800369e:	400b      	ands	r3, r1
 80036a0:	4901      	ldr	r1, [pc, #4]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	608b      	str	r3, [r1, #8]
 80036a6:	e00b      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80036a8:	40023800 	.word	0x40023800
 80036ac:	40007000 	.word	0x40007000
 80036b0:	0ffffcff 	.word	0x0ffffcff
 80036b4:	4bb3      	ldr	r3, [pc, #716]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	4ab2      	ldr	r2, [pc, #712]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036ba:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80036be:	6093      	str	r3, [r2, #8]
 80036c0:	4bb0      	ldr	r3, [pc, #704]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036cc:	49ad      	ldr	r1, [pc, #692]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0310 	and.w	r3, r3, #16
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d010      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80036de:	4ba9      	ldr	r3, [pc, #676]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036e4:	4aa7      	ldr	r2, [pc, #668]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036ea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80036ee:	4ba5      	ldr	r3, [pc, #660]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036f0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f8:	49a2      	ldr	r1, [pc, #648]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d00a      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800370c:	4b9d      	ldr	r3, [pc, #628]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800370e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003712:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800371a:	499a      	ldr	r1, [pc, #616]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800371c:	4313      	orrs	r3, r2
 800371e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00a      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800372e:	4b95      	ldr	r3, [pc, #596]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003734:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800373c:	4991      	ldr	r1, [pc, #580]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800373e:	4313      	orrs	r3, r2
 8003740:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d00a      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003750:	4b8c      	ldr	r3, [pc, #560]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003756:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800375e:	4989      	ldr	r1, [pc, #548]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003760:	4313      	orrs	r3, r2
 8003762:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00a      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003772:	4b84      	ldr	r3, [pc, #528]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003778:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003780:	4980      	ldr	r1, [pc, #512]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003782:	4313      	orrs	r3, r2
 8003784:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003790:	2b00      	cmp	r3, #0
 8003792:	d00a      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003794:	4b7b      	ldr	r3, [pc, #492]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800379a:	f023 0203 	bic.w	r2, r3, #3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a2:	4978      	ldr	r1, [pc, #480]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00a      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037b6:	4b73      	ldr	r3, [pc, #460]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037bc:	f023 020c 	bic.w	r2, r3, #12
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037c4:	496f      	ldr	r1, [pc, #444]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00a      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037d8:	4b6a      	ldr	r3, [pc, #424]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037de:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037e6:	4967      	ldr	r1, [pc, #412]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00a      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037fa:	4b62      	ldr	r3, [pc, #392]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003800:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003808:	495e      	ldr	r1, [pc, #376]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800380a:	4313      	orrs	r3, r2
 800380c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00a      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800381c:	4b59      	ldr	r3, [pc, #356]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800381e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003822:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800382a:	4956      	ldr	r1, [pc, #344]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800382c:	4313      	orrs	r3, r2
 800382e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00a      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800383e:	4b51      	ldr	r3, [pc, #324]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003844:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800384c:	494d      	ldr	r1, [pc, #308]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800384e:	4313      	orrs	r3, r2
 8003850:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d00a      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003860:	4b48      	ldr	r3, [pc, #288]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003866:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800386e:	4945      	ldr	r1, [pc, #276]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003870:	4313      	orrs	r3, r2
 8003872:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00a      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003882:	4b40      	ldr	r3, [pc, #256]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003888:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003890:	493c      	ldr	r1, [pc, #240]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003892:	4313      	orrs	r3, r2
 8003894:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00a      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80038a4:	4b37      	ldr	r3, [pc, #220]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038aa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038b2:	4934      	ldr	r1, [pc, #208]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d011      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80038c6:	4b2f      	ldr	r3, [pc, #188]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038cc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038d4:	492b      	ldr	r1, [pc, #172]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038e4:	d101      	bne.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80038e6:	2301      	movs	r3, #1
 80038e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0308 	and.w	r3, r3, #8
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80038f6:	2301      	movs	r3, #1
 80038f8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d00a      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003906:	4b1f      	ldr	r3, [pc, #124]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800390c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003914:	491b      	ldr	r1, [pc, #108]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003916:	4313      	orrs	r3, r2
 8003918:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d00b      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003928:	4b16      	ldr	r3, [pc, #88]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800392a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800392e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003938:	4912      	ldr	r1, [pc, #72]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800393a:	4313      	orrs	r3, r2
 800393c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d00b      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800394c:	4b0d      	ldr	r3, [pc, #52]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800394e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003952:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800395c:	4909      	ldr	r1, [pc, #36]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800395e:	4313      	orrs	r3, r2
 8003960:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d00f      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003970:	4b04      	ldr	r3, [pc, #16]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003972:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003976:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003980:	e002      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003982:	bf00      	nop
 8003984:	40023800 	.word	0x40023800
 8003988:	4986      	ldr	r1, [pc, #536]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800398a:	4313      	orrs	r3, r2
 800398c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00b      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800399c:	4b81      	ldr	r3, [pc, #516]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800399e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039a2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039ac:	497d      	ldr	r1, [pc, #500]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d006      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	f000 80d6 	beq.w	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80039c8:	4b76      	ldr	r3, [pc, #472]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a75      	ldr	r2, [pc, #468]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80039d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039d4:	f7fd fb36 	bl	8001044 <HAL_GetTick>
 80039d8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039da:	e008      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80039dc:	f7fd fb32 	bl	8001044 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b64      	cmp	r3, #100	; 0x64
 80039e8:	d901      	bls.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e195      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039ee:	4b6d      	ldr	r3, [pc, #436]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1f0      	bne.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d021      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d11d      	bne.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a0e:	4b65      	ldr	r3, [pc, #404]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a14:	0c1b      	lsrs	r3, r3, #16
 8003a16:	f003 0303 	and.w	r3, r3, #3
 8003a1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a1c:	4b61      	ldr	r3, [pc, #388]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a22:	0e1b      	lsrs	r3, r3, #24
 8003a24:	f003 030f 	and.w	r3, r3, #15
 8003a28:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	019a      	lsls	r2, r3, #6
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	041b      	lsls	r3, r3, #16
 8003a34:	431a      	orrs	r2, r3
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	061b      	lsls	r3, r3, #24
 8003a3a:	431a      	orrs	r2, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	071b      	lsls	r3, r3, #28
 8003a42:	4958      	ldr	r1, [pc, #352]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d004      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a5e:	d00a      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d02e      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a74:	d129      	bne.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a76:	4b4b      	ldr	r3, [pc, #300]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a7c:	0c1b      	lsrs	r3, r3, #16
 8003a7e:	f003 0303 	and.w	r3, r3, #3
 8003a82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a84:	4b47      	ldr	r3, [pc, #284]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a8a:	0f1b      	lsrs	r3, r3, #28
 8003a8c:	f003 0307 	and.w	r3, r3, #7
 8003a90:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	019a      	lsls	r2, r3, #6
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	041b      	lsls	r3, r3, #16
 8003a9c:	431a      	orrs	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	061b      	lsls	r3, r3, #24
 8003aa4:	431a      	orrs	r2, r3
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	071b      	lsls	r3, r3, #28
 8003aaa:	493e      	ldr	r1, [pc, #248]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003ab2:	4b3c      	ldr	r3, [pc, #240]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ab4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ab8:	f023 021f 	bic.w	r2, r3, #31
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	4938      	ldr	r1, [pc, #224]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d01d      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ad6:	4b33      	ldr	r3, [pc, #204]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ad8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003adc:	0e1b      	lsrs	r3, r3, #24
 8003ade:	f003 030f 	and.w	r3, r3, #15
 8003ae2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ae4:	4b2f      	ldr	r3, [pc, #188]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ae6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003aea:	0f1b      	lsrs	r3, r3, #28
 8003aec:	f003 0307 	and.w	r3, r3, #7
 8003af0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	019a      	lsls	r2, r3, #6
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	041b      	lsls	r3, r3, #16
 8003afe:	431a      	orrs	r2, r3
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	061b      	lsls	r3, r3, #24
 8003b04:	431a      	orrs	r2, r3
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	071b      	lsls	r3, r3, #28
 8003b0a:	4926      	ldr	r1, [pc, #152]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d011      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	019a      	lsls	r2, r3, #6
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	041b      	lsls	r3, r3, #16
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	061b      	lsls	r3, r3, #24
 8003b32:	431a      	orrs	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	071b      	lsls	r3, r3, #28
 8003b3a:	491a      	ldr	r1, [pc, #104]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003b42:	4b18      	ldr	r3, [pc, #96]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a17      	ldr	r2, [pc, #92]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b48:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b4e:	f7fd fa79 	bl	8001044 <HAL_GetTick>
 8003b52:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b54:	e008      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b56:	f7fd fa75 	bl	8001044 <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	2b64      	cmp	r3, #100	; 0x64
 8003b62:	d901      	bls.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e0d8      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b68:	4b0e      	ldr	r3, [pc, #56]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d0f0      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	f040 80ce 	bne.w	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003b7c:	4b09      	ldr	r3, [pc, #36]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a08      	ldr	r2, [pc, #32]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b88:	f7fd fa5c 	bl	8001044 <HAL_GetTick>
 8003b8c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b8e:	e00b      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b90:	f7fd fa58 	bl	8001044 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	2b64      	cmp	r3, #100	; 0x64
 8003b9c:	d904      	bls.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e0bb      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003ba2:	bf00      	nop
 8003ba4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003ba8:	4b5e      	ldr	r3, [pc, #376]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bb4:	d0ec      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d003      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d009      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d02e      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d12a      	bne.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003bde:	4b51      	ldr	r3, [pc, #324]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be4:	0c1b      	lsrs	r3, r3, #16
 8003be6:	f003 0303 	and.w	r3, r3, #3
 8003bea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003bec:	4b4d      	ldr	r3, [pc, #308]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf2:	0f1b      	lsrs	r3, r3, #28
 8003bf4:	f003 0307 	and.w	r3, r3, #7
 8003bf8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	019a      	lsls	r2, r3, #6
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	041b      	lsls	r3, r3, #16
 8003c04:	431a      	orrs	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	061b      	lsls	r3, r3, #24
 8003c0c:	431a      	orrs	r2, r3
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	071b      	lsls	r3, r3, #28
 8003c12:	4944      	ldr	r1, [pc, #272]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003c1a:	4b42      	ldr	r3, [pc, #264]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c20:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	021b      	lsls	r3, r3, #8
 8003c2c:	493d      	ldr	r1, [pc, #244]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d022      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c48:	d11d      	bne.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c4a:	4b36      	ldr	r3, [pc, #216]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c50:	0e1b      	lsrs	r3, r3, #24
 8003c52:	f003 030f 	and.w	r3, r3, #15
 8003c56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c58:	4b32      	ldr	r3, [pc, #200]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c5e:	0f1b      	lsrs	r3, r3, #28
 8003c60:	f003 0307 	and.w	r3, r3, #7
 8003c64:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	019a      	lsls	r2, r3, #6
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a1b      	ldr	r3, [r3, #32]
 8003c70:	041b      	lsls	r3, r3, #16
 8003c72:	431a      	orrs	r2, r3
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	061b      	lsls	r3, r3, #24
 8003c78:	431a      	orrs	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	071b      	lsls	r3, r3, #28
 8003c7e:	4929      	ldr	r1, [pc, #164]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0308 	and.w	r3, r3, #8
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d028      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c92:	4b24      	ldr	r3, [pc, #144]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c98:	0e1b      	lsrs	r3, r3, #24
 8003c9a:	f003 030f 	and.w	r3, r3, #15
 8003c9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003ca0:	4b20      	ldr	r3, [pc, #128]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca6:	0c1b      	lsrs	r3, r3, #16
 8003ca8:	f003 0303 	and.w	r3, r3, #3
 8003cac:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	019a      	lsls	r2, r3, #6
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	041b      	lsls	r3, r3, #16
 8003cb8:	431a      	orrs	r2, r3
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	061b      	lsls	r3, r3, #24
 8003cbe:	431a      	orrs	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	69db      	ldr	r3, [r3, #28]
 8003cc4:	071b      	lsls	r3, r3, #28
 8003cc6:	4917      	ldr	r1, [pc, #92]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003cce:	4b15      	ldr	r3, [pc, #84]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cd4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cdc:	4911      	ldr	r1, [pc, #68]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003ce4:	4b0f      	ldr	r3, [pc, #60]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a0e      	ldr	r2, [pc, #56]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cf0:	f7fd f9a8 	bl	8001044 <HAL_GetTick>
 8003cf4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003cf6:	e008      	b.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003cf8:	f7fd f9a4 	bl	8001044 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b64      	cmp	r3, #100	; 0x64
 8003d04:	d901      	bls.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e007      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d0a:	4b06      	ldr	r3, [pc, #24]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d16:	d1ef      	bne.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3720      	adds	r7, #32
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	40023800 	.word	0x40023800

08003d28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d101      	bne.n	8003d3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e049      	b.n	8003dce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d106      	bne.n	8003d54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f7fc feec 	bl	8000b2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2202      	movs	r2, #2
 8003d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	3304      	adds	r3, #4
 8003d64:	4619      	mov	r1, r3
 8003d66:	4610      	mov	r0, r2
 8003d68:	f000 fa24 	bl	80041b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3708      	adds	r7, #8
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
	...

08003dd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d001      	beq.n	8003df0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e054      	b.n	8003e9a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2202      	movs	r2, #2
 8003df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68da      	ldr	r2, [r3, #12]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f042 0201 	orr.w	r2, r2, #1
 8003e06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a26      	ldr	r2, [pc, #152]	; (8003ea8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d022      	beq.n	8003e58 <HAL_TIM_Base_Start_IT+0x80>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e1a:	d01d      	beq.n	8003e58 <HAL_TIM_Base_Start_IT+0x80>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a22      	ldr	r2, [pc, #136]	; (8003eac <HAL_TIM_Base_Start_IT+0xd4>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d018      	beq.n	8003e58 <HAL_TIM_Base_Start_IT+0x80>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a21      	ldr	r2, [pc, #132]	; (8003eb0 <HAL_TIM_Base_Start_IT+0xd8>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d013      	beq.n	8003e58 <HAL_TIM_Base_Start_IT+0x80>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a1f      	ldr	r2, [pc, #124]	; (8003eb4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d00e      	beq.n	8003e58 <HAL_TIM_Base_Start_IT+0x80>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a1e      	ldr	r2, [pc, #120]	; (8003eb8 <HAL_TIM_Base_Start_IT+0xe0>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d009      	beq.n	8003e58 <HAL_TIM_Base_Start_IT+0x80>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a1c      	ldr	r2, [pc, #112]	; (8003ebc <HAL_TIM_Base_Start_IT+0xe4>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d004      	beq.n	8003e58 <HAL_TIM_Base_Start_IT+0x80>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a1b      	ldr	r2, [pc, #108]	; (8003ec0 <HAL_TIM_Base_Start_IT+0xe8>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d115      	bne.n	8003e84 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	689a      	ldr	r2, [r3, #8]
 8003e5e:	4b19      	ldr	r3, [pc, #100]	; (8003ec4 <HAL_TIM_Base_Start_IT+0xec>)
 8003e60:	4013      	ands	r3, r2
 8003e62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2b06      	cmp	r3, #6
 8003e68:	d015      	beq.n	8003e96 <HAL_TIM_Base_Start_IT+0xbe>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e70:	d011      	beq.n	8003e96 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f042 0201 	orr.w	r2, r2, #1
 8003e80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e82:	e008      	b.n	8003e96 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f042 0201 	orr.w	r2, r2, #1
 8003e92:	601a      	str	r2, [r3, #0]
 8003e94:	e000      	b.n	8003e98 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e96:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3714      	adds	r7, #20
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	40010000 	.word	0x40010000
 8003eac:	40000400 	.word	0x40000400
 8003eb0:	40000800 	.word	0x40000800
 8003eb4:	40000c00 	.word	0x40000c00
 8003eb8:	40010400 	.word	0x40010400
 8003ebc:	40014000 	.word	0x40014000
 8003ec0:	40001800 	.word	0x40001800
 8003ec4:	00010007 	.word	0x00010007

08003ec8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68da      	ldr	r2, [r3, #12]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f022 0201 	bic.w	r2, r2, #1
 8003ede:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	6a1a      	ldr	r2, [r3, #32]
 8003ee6:	f241 1311 	movw	r3, #4369	; 0x1111
 8003eea:	4013      	ands	r3, r2
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d10f      	bne.n	8003f10 <HAL_TIM_Base_Stop_IT+0x48>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	6a1a      	ldr	r2, [r3, #32]
 8003ef6:	f240 4344 	movw	r3, #1092	; 0x444
 8003efa:	4013      	ands	r3, r2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d107      	bne.n	8003f10 <HAL_TIM_Base_Stop_IT+0x48>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f022 0201 	bic.w	r2, r2, #1
 8003f0e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr

08003f26 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f26:	b580      	push	{r7, lr}
 8003f28:	b082      	sub	sp, #8
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	f003 0302 	and.w	r3, r3, #2
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d122      	bne.n	8003f82 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	f003 0302 	and.w	r3, r3, #2
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d11b      	bne.n	8003f82 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f06f 0202 	mvn.w	r2, #2
 8003f52:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	699b      	ldr	r3, [r3, #24]
 8003f60:	f003 0303 	and.w	r3, r3, #3
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d003      	beq.n	8003f70 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 f905 	bl	8004178 <HAL_TIM_IC_CaptureCallback>
 8003f6e:	e005      	b.n	8003f7c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f000 f8f7 	bl	8004164 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 f908 	bl	800418c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	691b      	ldr	r3, [r3, #16]
 8003f88:	f003 0304 	and.w	r3, r3, #4
 8003f8c:	2b04      	cmp	r3, #4
 8003f8e:	d122      	bne.n	8003fd6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	f003 0304 	and.w	r3, r3, #4
 8003f9a:	2b04      	cmp	r3, #4
 8003f9c:	d11b      	bne.n	8003fd6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f06f 0204 	mvn.w	r2, #4
 8003fa6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2202      	movs	r2, #2
 8003fac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d003      	beq.n	8003fc4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f000 f8db 	bl	8004178 <HAL_TIM_IC_CaptureCallback>
 8003fc2:	e005      	b.n	8003fd0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f000 f8cd 	bl	8004164 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 f8de 	bl	800418c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	691b      	ldr	r3, [r3, #16]
 8003fdc:	f003 0308 	and.w	r3, r3, #8
 8003fe0:	2b08      	cmp	r3, #8
 8003fe2:	d122      	bne.n	800402a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	f003 0308 	and.w	r3, r3, #8
 8003fee:	2b08      	cmp	r3, #8
 8003ff0:	d11b      	bne.n	800402a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f06f 0208 	mvn.w	r2, #8
 8003ffa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2204      	movs	r2, #4
 8004000:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	69db      	ldr	r3, [r3, #28]
 8004008:	f003 0303 	and.w	r3, r3, #3
 800400c:	2b00      	cmp	r3, #0
 800400e:	d003      	beq.n	8004018 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f000 f8b1 	bl	8004178 <HAL_TIM_IC_CaptureCallback>
 8004016:	e005      	b.n	8004024 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f000 f8a3 	bl	8004164 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 f8b4 	bl	800418c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	f003 0310 	and.w	r3, r3, #16
 8004034:	2b10      	cmp	r3, #16
 8004036:	d122      	bne.n	800407e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	f003 0310 	and.w	r3, r3, #16
 8004042:	2b10      	cmp	r3, #16
 8004044:	d11b      	bne.n	800407e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f06f 0210 	mvn.w	r2, #16
 800404e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2208      	movs	r2, #8
 8004054:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	69db      	ldr	r3, [r3, #28]
 800405c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004060:	2b00      	cmp	r3, #0
 8004062:	d003      	beq.n	800406c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f000 f887 	bl	8004178 <HAL_TIM_IC_CaptureCallback>
 800406a:	e005      	b.n	8004078 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f000 f879 	bl	8004164 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 f88a 	bl	800418c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	f003 0301 	and.w	r3, r3, #1
 8004088:	2b01      	cmp	r3, #1
 800408a:	d10e      	bne.n	80040aa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	2b01      	cmp	r3, #1
 8004098:	d107      	bne.n	80040aa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f06f 0201 	mvn.w	r2, #1
 80040a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f7fc fd01 	bl	8000aac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040b4:	2b80      	cmp	r3, #128	; 0x80
 80040b6:	d10e      	bne.n	80040d6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040c2:	2b80      	cmp	r3, #128	; 0x80
 80040c4:	d107      	bne.n	80040d6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80040ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f000 f9a7 	bl	8004424 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040e4:	d10e      	bne.n	8004104 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040f0:	2b80      	cmp	r3, #128	; 0x80
 80040f2:	d107      	bne.n	8004104 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80040fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 f99a 	bl	8004438 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800410e:	2b40      	cmp	r3, #64	; 0x40
 8004110:	d10e      	bne.n	8004130 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800411c:	2b40      	cmp	r3, #64	; 0x40
 800411e:	d107      	bne.n	8004130 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 f838 	bl	80041a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	f003 0320 	and.w	r3, r3, #32
 800413a:	2b20      	cmp	r3, #32
 800413c:	d10e      	bne.n	800415c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	f003 0320 	and.w	r3, r3, #32
 8004148:	2b20      	cmp	r3, #32
 800414a:	d107      	bne.n	800415c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f06f 0220 	mvn.w	r2, #32
 8004154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 f95a 	bl	8004410 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800415c:	bf00      	nop
 800415e:	3708      	adds	r7, #8
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800416c:	bf00      	nop
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004180:	bf00      	nop
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004194:	bf00      	nop
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a40      	ldr	r2, [pc, #256]	; (80042c8 <TIM_Base_SetConfig+0x114>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d013      	beq.n	80041f4 <TIM_Base_SetConfig+0x40>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041d2:	d00f      	beq.n	80041f4 <TIM_Base_SetConfig+0x40>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4a3d      	ldr	r2, [pc, #244]	; (80042cc <TIM_Base_SetConfig+0x118>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d00b      	beq.n	80041f4 <TIM_Base_SetConfig+0x40>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a3c      	ldr	r2, [pc, #240]	; (80042d0 <TIM_Base_SetConfig+0x11c>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d007      	beq.n	80041f4 <TIM_Base_SetConfig+0x40>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a3b      	ldr	r2, [pc, #236]	; (80042d4 <TIM_Base_SetConfig+0x120>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d003      	beq.n	80041f4 <TIM_Base_SetConfig+0x40>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a3a      	ldr	r2, [pc, #232]	; (80042d8 <TIM_Base_SetConfig+0x124>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d108      	bne.n	8004206 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	4313      	orrs	r3, r2
 8004204:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a2f      	ldr	r2, [pc, #188]	; (80042c8 <TIM_Base_SetConfig+0x114>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d02b      	beq.n	8004266 <TIM_Base_SetConfig+0xb2>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004214:	d027      	beq.n	8004266 <TIM_Base_SetConfig+0xb2>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a2c      	ldr	r2, [pc, #176]	; (80042cc <TIM_Base_SetConfig+0x118>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d023      	beq.n	8004266 <TIM_Base_SetConfig+0xb2>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a2b      	ldr	r2, [pc, #172]	; (80042d0 <TIM_Base_SetConfig+0x11c>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d01f      	beq.n	8004266 <TIM_Base_SetConfig+0xb2>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a2a      	ldr	r2, [pc, #168]	; (80042d4 <TIM_Base_SetConfig+0x120>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d01b      	beq.n	8004266 <TIM_Base_SetConfig+0xb2>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a29      	ldr	r2, [pc, #164]	; (80042d8 <TIM_Base_SetConfig+0x124>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d017      	beq.n	8004266 <TIM_Base_SetConfig+0xb2>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a28      	ldr	r2, [pc, #160]	; (80042dc <TIM_Base_SetConfig+0x128>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d013      	beq.n	8004266 <TIM_Base_SetConfig+0xb2>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a27      	ldr	r2, [pc, #156]	; (80042e0 <TIM_Base_SetConfig+0x12c>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d00f      	beq.n	8004266 <TIM_Base_SetConfig+0xb2>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a26      	ldr	r2, [pc, #152]	; (80042e4 <TIM_Base_SetConfig+0x130>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d00b      	beq.n	8004266 <TIM_Base_SetConfig+0xb2>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a25      	ldr	r2, [pc, #148]	; (80042e8 <TIM_Base_SetConfig+0x134>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d007      	beq.n	8004266 <TIM_Base_SetConfig+0xb2>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a24      	ldr	r2, [pc, #144]	; (80042ec <TIM_Base_SetConfig+0x138>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d003      	beq.n	8004266 <TIM_Base_SetConfig+0xb2>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a23      	ldr	r2, [pc, #140]	; (80042f0 <TIM_Base_SetConfig+0x13c>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d108      	bne.n	8004278 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800426c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	4313      	orrs	r3, r2
 8004276:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	4313      	orrs	r3, r2
 8004284:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	689a      	ldr	r2, [r3, #8]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a0a      	ldr	r2, [pc, #40]	; (80042c8 <TIM_Base_SetConfig+0x114>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d003      	beq.n	80042ac <TIM_Base_SetConfig+0xf8>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a0c      	ldr	r2, [pc, #48]	; (80042d8 <TIM_Base_SetConfig+0x124>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d103      	bne.n	80042b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	691a      	ldr	r2, [r3, #16]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	615a      	str	r2, [r3, #20]
}
 80042ba:	bf00      	nop
 80042bc:	3714      	adds	r7, #20
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	40010000 	.word	0x40010000
 80042cc:	40000400 	.word	0x40000400
 80042d0:	40000800 	.word	0x40000800
 80042d4:	40000c00 	.word	0x40000c00
 80042d8:	40010400 	.word	0x40010400
 80042dc:	40014000 	.word	0x40014000
 80042e0:	40014400 	.word	0x40014400
 80042e4:	40014800 	.word	0x40014800
 80042e8:	40001800 	.word	0x40001800
 80042ec:	40001c00 	.word	0x40001c00
 80042f0:	40002000 	.word	0x40002000

080042f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004304:	2b01      	cmp	r3, #1
 8004306:	d101      	bne.n	800430c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004308:	2302      	movs	r3, #2
 800430a:	e06d      	b.n	80043e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2202      	movs	r2, #2
 8004318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a30      	ldr	r2, [pc, #192]	; (80043f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d004      	beq.n	8004340 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a2f      	ldr	r2, [pc, #188]	; (80043f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d108      	bne.n	8004352 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004346:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	4313      	orrs	r3, r2
 8004350:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004358:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	4313      	orrs	r3, r2
 8004362:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a20      	ldr	r2, [pc, #128]	; (80043f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d022      	beq.n	80043bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800437e:	d01d      	beq.n	80043bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a1d      	ldr	r2, [pc, #116]	; (80043fc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d018      	beq.n	80043bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a1c      	ldr	r2, [pc, #112]	; (8004400 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d013      	beq.n	80043bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a1a      	ldr	r2, [pc, #104]	; (8004404 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d00e      	beq.n	80043bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a15      	ldr	r2, [pc, #84]	; (80043f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d009      	beq.n	80043bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a16      	ldr	r2, [pc, #88]	; (8004408 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d004      	beq.n	80043bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a15      	ldr	r2, [pc, #84]	; (800440c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d10c      	bne.n	80043d6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	68ba      	ldr	r2, [r7, #8]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68ba      	ldr	r2, [r7, #8]
 80043d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2201      	movs	r2, #1
 80043da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3714      	adds	r7, #20
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr
 80043f4:	40010000 	.word	0x40010000
 80043f8:	40010400 	.word	0x40010400
 80043fc:	40000400 	.word	0x40000400
 8004400:	40000800 	.word	0x40000800
 8004404:	40000c00 	.word	0x40000c00
 8004408:	40014000 	.word	0x40014000
 800440c:	40001800 	.word	0x40001800

08004410 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004440:	bf00      	nop
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d101      	bne.n	800445e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e040      	b.n	80044e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004462:	2b00      	cmp	r3, #0
 8004464:	d106      	bne.n	8004474 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f7fc fb9e 	bl	8000bb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2224      	movs	r2, #36	; 0x24
 8004478:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f022 0201 	bic.w	r2, r2, #1
 8004488:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 fa56 	bl	800493c <UART_SetConfig>
 8004490:	4603      	mov	r3, r0
 8004492:	2b01      	cmp	r3, #1
 8004494:	d101      	bne.n	800449a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e022      	b.n	80044e0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d002      	beq.n	80044a8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 fcac 	bl	8004e00 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	685a      	ldr	r2, [r3, #4]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	689a      	ldr	r2, [r3, #8]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f042 0201 	orr.w	r2, r2, #1
 80044d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f000 fd33 	bl	8004f44 <UART_CheckIdleState>
 80044de:	4603      	mov	r3, r0
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3708      	adds	r7, #8
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b088      	sub	sp, #32
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	69db      	ldr	r3, [r3, #28]
 80044f6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004508:	69fa      	ldr	r2, [r7, #28]
 800450a:	f640 030f 	movw	r3, #2063	; 0x80f
 800450e:	4013      	ands	r3, r2
 8004510:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d113      	bne.n	8004540 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	f003 0320 	and.w	r3, r3, #32
 800451e:	2b00      	cmp	r3, #0
 8004520:	d00e      	beq.n	8004540 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	f003 0320 	and.w	r3, r3, #32
 8004528:	2b00      	cmp	r3, #0
 800452a:	d009      	beq.n	8004540 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004530:	2b00      	cmp	r3, #0
 8004532:	f000 81cc 	beq.w	80048ce <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	4798      	blx	r3
      }
      return;
 800453e:	e1c6      	b.n	80048ce <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	2b00      	cmp	r3, #0
 8004544:	f000 80e3 	beq.w	800470e <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	2b00      	cmp	r3, #0
 8004550:	d105      	bne.n	800455e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004552:	69ba      	ldr	r2, [r7, #24]
 8004554:	4ba5      	ldr	r3, [pc, #660]	; (80047ec <HAL_UART_IRQHandler+0x304>)
 8004556:	4013      	ands	r3, r2
 8004558:	2b00      	cmp	r3, #0
 800455a:	f000 80d8 	beq.w	800470e <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	f003 0301 	and.w	r3, r3, #1
 8004564:	2b00      	cmp	r3, #0
 8004566:	d010      	beq.n	800458a <HAL_UART_IRQHandler+0xa2>
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00b      	beq.n	800458a <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2201      	movs	r2, #1
 8004578:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004580:	f043 0201 	orr.w	r2, r3, #1
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	f003 0302 	and.w	r3, r3, #2
 8004590:	2b00      	cmp	r3, #0
 8004592:	d010      	beq.n	80045b6 <HAL_UART_IRQHandler+0xce>
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00b      	beq.n	80045b6 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2202      	movs	r2, #2
 80045a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045ac:	f043 0204 	orr.w	r2, r3, #4
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	f003 0304 	and.w	r3, r3, #4
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d010      	beq.n	80045e2 <HAL_UART_IRQHandler+0xfa>
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00b      	beq.n	80045e2 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2204      	movs	r2, #4
 80045d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045d8:	f043 0202 	orr.w	r2, r3, #2
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	f003 0308 	and.w	r3, r3, #8
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d015      	beq.n	8004618 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	f003 0320 	and.w	r3, r3, #32
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d104      	bne.n	8004600 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d00b      	beq.n	8004618 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2208      	movs	r2, #8
 8004606:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800460e:	f043 0208 	orr.w	r2, r3, #8
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800461e:	2b00      	cmp	r3, #0
 8004620:	d011      	beq.n	8004646 <HAL_UART_IRQHandler+0x15e>
 8004622:	69bb      	ldr	r3, [r7, #24]
 8004624:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00c      	beq.n	8004646 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004634:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800463c:	f043 0220 	orr.w	r2, r3, #32
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800464c:	2b00      	cmp	r3, #0
 800464e:	f000 8140 	beq.w	80048d2 <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	f003 0320 	and.w	r3, r3, #32
 8004658:	2b00      	cmp	r3, #0
 800465a:	d00c      	beq.n	8004676 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	f003 0320 	and.w	r3, r3, #32
 8004662:	2b00      	cmp	r3, #0
 8004664:	d007      	beq.n	8004676 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800466a:	2b00      	cmp	r3, #0
 800466c:	d003      	beq.n	8004676 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800467c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004688:	2b40      	cmp	r3, #64	; 0x40
 800468a:	d004      	beq.n	8004696 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004692:	2b00      	cmp	r3, #0
 8004694:	d031      	beq.n	80046fa <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 fd19 	bl	80050ce <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a6:	2b40      	cmp	r3, #64	; 0x40
 80046a8:	d123      	bne.n	80046f2 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	689a      	ldr	r2, [r3, #8]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046b8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d013      	beq.n	80046ea <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c6:	4a4a      	ldr	r2, [pc, #296]	; (80047f0 <HAL_UART_IRQHandler+0x308>)
 80046c8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7fc fe3a 	bl	8001348 <HAL_DMA_Abort_IT>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d017      	beq.n	800470a <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80046e4:	4610      	mov	r0, r2
 80046e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046e8:	e00f      	b.n	800470a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 f906 	bl	80048fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046f0:	e00b      	b.n	800470a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 f902 	bl	80048fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046f8:	e007      	b.n	800470a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 f8fe 	bl	80048fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004708:	e0e3      	b.n	80048d2 <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800470a:	bf00      	nop
    return;
 800470c:	e0e1      	b.n	80048d2 <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004712:	2b01      	cmp	r3, #1
 8004714:	f040 80a7 	bne.w	8004866 <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	f003 0310 	and.w	r3, r3, #16
 800471e:	2b00      	cmp	r3, #0
 8004720:	f000 80a1 	beq.w	8004866 <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	f003 0310 	and.w	r3, r3, #16
 800472a:	2b00      	cmp	r3, #0
 800472c:	f000 809b 	beq.w	8004866 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2210      	movs	r2, #16
 8004736:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004742:	2b40      	cmp	r3, #64	; 0x40
 8004744:	d156      	bne.n	80047f4 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8004750:	893b      	ldrh	r3, [r7, #8]
 8004752:	2b00      	cmp	r3, #0
 8004754:	f000 80bf 	beq.w	80048d6 <HAL_UART_IRQHandler+0x3ee>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800475e:	893a      	ldrh	r2, [r7, #8]
 8004760:	429a      	cmp	r2, r3
 8004762:	f080 80b8 	bcs.w	80048d6 <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	893a      	ldrh	r2, [r7, #8]
 800476a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004772:	69db      	ldr	r3, [r3, #28]
 8004774:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004778:	d02a      	beq.n	80047d0 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004788:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	689a      	ldr	r2, [r3, #8]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f022 0201 	bic.w	r2, r2, #1
 8004798:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	689a      	ldr	r2, [r3, #8]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047a8:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2220      	movs	r2, #32
 80047ae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f022 0210 	bic.w	r2, r2, #16
 80047c4:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7fc fd4c 	bl	8001268 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80047dc:	b29b      	uxth	r3, r3
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	4619      	mov	r1, r3
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f000 f893 	bl	8004910 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80047ea:	e074      	b.n	80048d6 <HAL_UART_IRQHandler+0x3ee>
 80047ec:	04000120 	.word	0x04000120
 80047f0:	0800512d 	.word	0x0800512d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004800:	b29b      	uxth	r3, r3
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800480c:	b29b      	uxth	r3, r3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d063      	beq.n	80048da <HAL_UART_IRQHandler+0x3f2>
          && (nb_rx_data > 0U))
 8004812:	897b      	ldrh	r3, [r7, #10]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d060      	beq.n	80048da <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004826:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	689a      	ldr	r2, [r3, #8]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f022 0201 	bic.w	r2, r2, #1
 8004836:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2220      	movs	r2, #32
 800483c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f022 0210 	bic.w	r2, r2, #16
 8004858:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800485a:	897b      	ldrh	r3, [r7, #10]
 800485c:	4619      	mov	r1, r3
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 f856 	bl	8004910 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004864:	e039      	b.n	80048da <HAL_UART_IRQHandler+0x3f2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800486c:	2b00      	cmp	r3, #0
 800486e:	d00d      	beq.n	800488c <HAL_UART_IRQHandler+0x3a4>
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d008      	beq.n	800488c <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004882:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 f84f 	bl	8004928 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800488a:	e029      	b.n	80048e0 <HAL_UART_IRQHandler+0x3f8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00d      	beq.n	80048b2 <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800489c:	2b00      	cmp	r3, #0
 800489e:	d008      	beq.n	80048b2 <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d01a      	beq.n	80048de <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	4798      	blx	r3
    }
    return;
 80048b0:	e015      	b.n	80048de <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d011      	beq.n	80048e0 <HAL_UART_IRQHandler+0x3f8>
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00c      	beq.n	80048e0 <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 fc46 	bl	8005158 <UART_EndTransmit_IT>
    return;
 80048cc:	e008      	b.n	80048e0 <HAL_UART_IRQHandler+0x3f8>
      return;
 80048ce:	bf00      	nop
 80048d0:	e006      	b.n	80048e0 <HAL_UART_IRQHandler+0x3f8>
    return;
 80048d2:	bf00      	nop
 80048d4:	e004      	b.n	80048e0 <HAL_UART_IRQHandler+0x3f8>
      return;
 80048d6:	bf00      	nop
 80048d8:	e002      	b.n	80048e0 <HAL_UART_IRQHandler+0x3f8>
      return;
 80048da:	bf00      	nop
 80048dc:	e000      	b.n	80048e0 <HAL_UART_IRQHandler+0x3f8>
    return;
 80048de:	bf00      	nop
  }

}
 80048e0:	3720      	adds	r7, #32
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop

080048e8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80048f0:	bf00      	nop
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004904:	bf00      	nop
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	460b      	mov	r3, r1
 800491a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800491c:	bf00      	nop
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004930:	bf00      	nop
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b088      	sub	sp, #32
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004944:	2300      	movs	r3, #0
 8004946:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	689a      	ldr	r2, [r3, #8]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	431a      	orrs	r2, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	695b      	ldr	r3, [r3, #20]
 8004956:	431a      	orrs	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	69db      	ldr	r3, [r3, #28]
 800495c:	4313      	orrs	r3, r2
 800495e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	4ba7      	ldr	r3, [pc, #668]	; (8004c04 <UART_SetConfig+0x2c8>)
 8004968:	4013      	ands	r3, r2
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	6812      	ldr	r2, [r2, #0]
 800496e:	6979      	ldr	r1, [r7, #20]
 8004970:	430b      	orrs	r3, r1
 8004972:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	68da      	ldr	r2, [r3, #12]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	430a      	orrs	r2, r1
 8004988:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6a1b      	ldr	r3, [r3, #32]
 8004994:	697a      	ldr	r2, [r7, #20]
 8004996:	4313      	orrs	r3, r2
 8004998:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	697a      	ldr	r2, [r7, #20]
 80049aa:	430a      	orrs	r2, r1
 80049ac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a95      	ldr	r2, [pc, #596]	; (8004c08 <UART_SetConfig+0x2cc>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d120      	bne.n	80049fa <UART_SetConfig+0xbe>
 80049b8:	4b94      	ldr	r3, [pc, #592]	; (8004c0c <UART_SetConfig+0x2d0>)
 80049ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049be:	f003 0303 	and.w	r3, r3, #3
 80049c2:	2b03      	cmp	r3, #3
 80049c4:	d816      	bhi.n	80049f4 <UART_SetConfig+0xb8>
 80049c6:	a201      	add	r2, pc, #4	; (adr r2, 80049cc <UART_SetConfig+0x90>)
 80049c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049cc:	080049dd 	.word	0x080049dd
 80049d0:	080049e9 	.word	0x080049e9
 80049d4:	080049e3 	.word	0x080049e3
 80049d8:	080049ef 	.word	0x080049ef
 80049dc:	2301      	movs	r3, #1
 80049de:	77fb      	strb	r3, [r7, #31]
 80049e0:	e14f      	b.n	8004c82 <UART_SetConfig+0x346>
 80049e2:	2302      	movs	r3, #2
 80049e4:	77fb      	strb	r3, [r7, #31]
 80049e6:	e14c      	b.n	8004c82 <UART_SetConfig+0x346>
 80049e8:	2304      	movs	r3, #4
 80049ea:	77fb      	strb	r3, [r7, #31]
 80049ec:	e149      	b.n	8004c82 <UART_SetConfig+0x346>
 80049ee:	2308      	movs	r3, #8
 80049f0:	77fb      	strb	r3, [r7, #31]
 80049f2:	e146      	b.n	8004c82 <UART_SetConfig+0x346>
 80049f4:	2310      	movs	r3, #16
 80049f6:	77fb      	strb	r3, [r7, #31]
 80049f8:	e143      	b.n	8004c82 <UART_SetConfig+0x346>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a84      	ldr	r2, [pc, #528]	; (8004c10 <UART_SetConfig+0x2d4>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d132      	bne.n	8004a6a <UART_SetConfig+0x12e>
 8004a04:	4b81      	ldr	r3, [pc, #516]	; (8004c0c <UART_SetConfig+0x2d0>)
 8004a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a0a:	f003 030c 	and.w	r3, r3, #12
 8004a0e:	2b0c      	cmp	r3, #12
 8004a10:	d828      	bhi.n	8004a64 <UART_SetConfig+0x128>
 8004a12:	a201      	add	r2, pc, #4	; (adr r2, 8004a18 <UART_SetConfig+0xdc>)
 8004a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a18:	08004a4d 	.word	0x08004a4d
 8004a1c:	08004a65 	.word	0x08004a65
 8004a20:	08004a65 	.word	0x08004a65
 8004a24:	08004a65 	.word	0x08004a65
 8004a28:	08004a59 	.word	0x08004a59
 8004a2c:	08004a65 	.word	0x08004a65
 8004a30:	08004a65 	.word	0x08004a65
 8004a34:	08004a65 	.word	0x08004a65
 8004a38:	08004a53 	.word	0x08004a53
 8004a3c:	08004a65 	.word	0x08004a65
 8004a40:	08004a65 	.word	0x08004a65
 8004a44:	08004a65 	.word	0x08004a65
 8004a48:	08004a5f 	.word	0x08004a5f
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	77fb      	strb	r3, [r7, #31]
 8004a50:	e117      	b.n	8004c82 <UART_SetConfig+0x346>
 8004a52:	2302      	movs	r3, #2
 8004a54:	77fb      	strb	r3, [r7, #31]
 8004a56:	e114      	b.n	8004c82 <UART_SetConfig+0x346>
 8004a58:	2304      	movs	r3, #4
 8004a5a:	77fb      	strb	r3, [r7, #31]
 8004a5c:	e111      	b.n	8004c82 <UART_SetConfig+0x346>
 8004a5e:	2308      	movs	r3, #8
 8004a60:	77fb      	strb	r3, [r7, #31]
 8004a62:	e10e      	b.n	8004c82 <UART_SetConfig+0x346>
 8004a64:	2310      	movs	r3, #16
 8004a66:	77fb      	strb	r3, [r7, #31]
 8004a68:	e10b      	b.n	8004c82 <UART_SetConfig+0x346>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a69      	ldr	r2, [pc, #420]	; (8004c14 <UART_SetConfig+0x2d8>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d120      	bne.n	8004ab6 <UART_SetConfig+0x17a>
 8004a74:	4b65      	ldr	r3, [pc, #404]	; (8004c0c <UART_SetConfig+0x2d0>)
 8004a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a7a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004a7e:	2b30      	cmp	r3, #48	; 0x30
 8004a80:	d013      	beq.n	8004aaa <UART_SetConfig+0x16e>
 8004a82:	2b30      	cmp	r3, #48	; 0x30
 8004a84:	d814      	bhi.n	8004ab0 <UART_SetConfig+0x174>
 8004a86:	2b20      	cmp	r3, #32
 8004a88:	d009      	beq.n	8004a9e <UART_SetConfig+0x162>
 8004a8a:	2b20      	cmp	r3, #32
 8004a8c:	d810      	bhi.n	8004ab0 <UART_SetConfig+0x174>
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d002      	beq.n	8004a98 <UART_SetConfig+0x15c>
 8004a92:	2b10      	cmp	r3, #16
 8004a94:	d006      	beq.n	8004aa4 <UART_SetConfig+0x168>
 8004a96:	e00b      	b.n	8004ab0 <UART_SetConfig+0x174>
 8004a98:	2300      	movs	r3, #0
 8004a9a:	77fb      	strb	r3, [r7, #31]
 8004a9c:	e0f1      	b.n	8004c82 <UART_SetConfig+0x346>
 8004a9e:	2302      	movs	r3, #2
 8004aa0:	77fb      	strb	r3, [r7, #31]
 8004aa2:	e0ee      	b.n	8004c82 <UART_SetConfig+0x346>
 8004aa4:	2304      	movs	r3, #4
 8004aa6:	77fb      	strb	r3, [r7, #31]
 8004aa8:	e0eb      	b.n	8004c82 <UART_SetConfig+0x346>
 8004aaa:	2308      	movs	r3, #8
 8004aac:	77fb      	strb	r3, [r7, #31]
 8004aae:	e0e8      	b.n	8004c82 <UART_SetConfig+0x346>
 8004ab0:	2310      	movs	r3, #16
 8004ab2:	77fb      	strb	r3, [r7, #31]
 8004ab4:	e0e5      	b.n	8004c82 <UART_SetConfig+0x346>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a57      	ldr	r2, [pc, #348]	; (8004c18 <UART_SetConfig+0x2dc>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d120      	bne.n	8004b02 <UART_SetConfig+0x1c6>
 8004ac0:	4b52      	ldr	r3, [pc, #328]	; (8004c0c <UART_SetConfig+0x2d0>)
 8004ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ac6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004aca:	2bc0      	cmp	r3, #192	; 0xc0
 8004acc:	d013      	beq.n	8004af6 <UART_SetConfig+0x1ba>
 8004ace:	2bc0      	cmp	r3, #192	; 0xc0
 8004ad0:	d814      	bhi.n	8004afc <UART_SetConfig+0x1c0>
 8004ad2:	2b80      	cmp	r3, #128	; 0x80
 8004ad4:	d009      	beq.n	8004aea <UART_SetConfig+0x1ae>
 8004ad6:	2b80      	cmp	r3, #128	; 0x80
 8004ad8:	d810      	bhi.n	8004afc <UART_SetConfig+0x1c0>
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d002      	beq.n	8004ae4 <UART_SetConfig+0x1a8>
 8004ade:	2b40      	cmp	r3, #64	; 0x40
 8004ae0:	d006      	beq.n	8004af0 <UART_SetConfig+0x1b4>
 8004ae2:	e00b      	b.n	8004afc <UART_SetConfig+0x1c0>
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	77fb      	strb	r3, [r7, #31]
 8004ae8:	e0cb      	b.n	8004c82 <UART_SetConfig+0x346>
 8004aea:	2302      	movs	r3, #2
 8004aec:	77fb      	strb	r3, [r7, #31]
 8004aee:	e0c8      	b.n	8004c82 <UART_SetConfig+0x346>
 8004af0:	2304      	movs	r3, #4
 8004af2:	77fb      	strb	r3, [r7, #31]
 8004af4:	e0c5      	b.n	8004c82 <UART_SetConfig+0x346>
 8004af6:	2308      	movs	r3, #8
 8004af8:	77fb      	strb	r3, [r7, #31]
 8004afa:	e0c2      	b.n	8004c82 <UART_SetConfig+0x346>
 8004afc:	2310      	movs	r3, #16
 8004afe:	77fb      	strb	r3, [r7, #31]
 8004b00:	e0bf      	b.n	8004c82 <UART_SetConfig+0x346>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a45      	ldr	r2, [pc, #276]	; (8004c1c <UART_SetConfig+0x2e0>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d125      	bne.n	8004b58 <UART_SetConfig+0x21c>
 8004b0c:	4b3f      	ldr	r3, [pc, #252]	; (8004c0c <UART_SetConfig+0x2d0>)
 8004b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b1a:	d017      	beq.n	8004b4c <UART_SetConfig+0x210>
 8004b1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b20:	d817      	bhi.n	8004b52 <UART_SetConfig+0x216>
 8004b22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b26:	d00b      	beq.n	8004b40 <UART_SetConfig+0x204>
 8004b28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b2c:	d811      	bhi.n	8004b52 <UART_SetConfig+0x216>
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d003      	beq.n	8004b3a <UART_SetConfig+0x1fe>
 8004b32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b36:	d006      	beq.n	8004b46 <UART_SetConfig+0x20a>
 8004b38:	e00b      	b.n	8004b52 <UART_SetConfig+0x216>
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	77fb      	strb	r3, [r7, #31]
 8004b3e:	e0a0      	b.n	8004c82 <UART_SetConfig+0x346>
 8004b40:	2302      	movs	r3, #2
 8004b42:	77fb      	strb	r3, [r7, #31]
 8004b44:	e09d      	b.n	8004c82 <UART_SetConfig+0x346>
 8004b46:	2304      	movs	r3, #4
 8004b48:	77fb      	strb	r3, [r7, #31]
 8004b4a:	e09a      	b.n	8004c82 <UART_SetConfig+0x346>
 8004b4c:	2308      	movs	r3, #8
 8004b4e:	77fb      	strb	r3, [r7, #31]
 8004b50:	e097      	b.n	8004c82 <UART_SetConfig+0x346>
 8004b52:	2310      	movs	r3, #16
 8004b54:	77fb      	strb	r3, [r7, #31]
 8004b56:	e094      	b.n	8004c82 <UART_SetConfig+0x346>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a30      	ldr	r2, [pc, #192]	; (8004c20 <UART_SetConfig+0x2e4>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d125      	bne.n	8004bae <UART_SetConfig+0x272>
 8004b62:	4b2a      	ldr	r3, [pc, #168]	; (8004c0c <UART_SetConfig+0x2d0>)
 8004b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b68:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004b6c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b70:	d017      	beq.n	8004ba2 <UART_SetConfig+0x266>
 8004b72:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b76:	d817      	bhi.n	8004ba8 <UART_SetConfig+0x26c>
 8004b78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b7c:	d00b      	beq.n	8004b96 <UART_SetConfig+0x25a>
 8004b7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b82:	d811      	bhi.n	8004ba8 <UART_SetConfig+0x26c>
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d003      	beq.n	8004b90 <UART_SetConfig+0x254>
 8004b88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b8c:	d006      	beq.n	8004b9c <UART_SetConfig+0x260>
 8004b8e:	e00b      	b.n	8004ba8 <UART_SetConfig+0x26c>
 8004b90:	2301      	movs	r3, #1
 8004b92:	77fb      	strb	r3, [r7, #31]
 8004b94:	e075      	b.n	8004c82 <UART_SetConfig+0x346>
 8004b96:	2302      	movs	r3, #2
 8004b98:	77fb      	strb	r3, [r7, #31]
 8004b9a:	e072      	b.n	8004c82 <UART_SetConfig+0x346>
 8004b9c:	2304      	movs	r3, #4
 8004b9e:	77fb      	strb	r3, [r7, #31]
 8004ba0:	e06f      	b.n	8004c82 <UART_SetConfig+0x346>
 8004ba2:	2308      	movs	r3, #8
 8004ba4:	77fb      	strb	r3, [r7, #31]
 8004ba6:	e06c      	b.n	8004c82 <UART_SetConfig+0x346>
 8004ba8:	2310      	movs	r3, #16
 8004baa:	77fb      	strb	r3, [r7, #31]
 8004bac:	e069      	b.n	8004c82 <UART_SetConfig+0x346>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a1c      	ldr	r2, [pc, #112]	; (8004c24 <UART_SetConfig+0x2e8>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d137      	bne.n	8004c28 <UART_SetConfig+0x2ec>
 8004bb8:	4b14      	ldr	r3, [pc, #80]	; (8004c0c <UART_SetConfig+0x2d0>)
 8004bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bbe:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004bc2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004bc6:	d017      	beq.n	8004bf8 <UART_SetConfig+0x2bc>
 8004bc8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004bcc:	d817      	bhi.n	8004bfe <UART_SetConfig+0x2c2>
 8004bce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bd2:	d00b      	beq.n	8004bec <UART_SetConfig+0x2b0>
 8004bd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bd8:	d811      	bhi.n	8004bfe <UART_SetConfig+0x2c2>
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d003      	beq.n	8004be6 <UART_SetConfig+0x2aa>
 8004bde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004be2:	d006      	beq.n	8004bf2 <UART_SetConfig+0x2b6>
 8004be4:	e00b      	b.n	8004bfe <UART_SetConfig+0x2c2>
 8004be6:	2300      	movs	r3, #0
 8004be8:	77fb      	strb	r3, [r7, #31]
 8004bea:	e04a      	b.n	8004c82 <UART_SetConfig+0x346>
 8004bec:	2302      	movs	r3, #2
 8004bee:	77fb      	strb	r3, [r7, #31]
 8004bf0:	e047      	b.n	8004c82 <UART_SetConfig+0x346>
 8004bf2:	2304      	movs	r3, #4
 8004bf4:	77fb      	strb	r3, [r7, #31]
 8004bf6:	e044      	b.n	8004c82 <UART_SetConfig+0x346>
 8004bf8:	2308      	movs	r3, #8
 8004bfa:	77fb      	strb	r3, [r7, #31]
 8004bfc:	e041      	b.n	8004c82 <UART_SetConfig+0x346>
 8004bfe:	2310      	movs	r3, #16
 8004c00:	77fb      	strb	r3, [r7, #31]
 8004c02:	e03e      	b.n	8004c82 <UART_SetConfig+0x346>
 8004c04:	efff69f3 	.word	0xefff69f3
 8004c08:	40011000 	.word	0x40011000
 8004c0c:	40023800 	.word	0x40023800
 8004c10:	40004400 	.word	0x40004400
 8004c14:	40004800 	.word	0x40004800
 8004c18:	40004c00 	.word	0x40004c00
 8004c1c:	40005000 	.word	0x40005000
 8004c20:	40011400 	.word	0x40011400
 8004c24:	40007800 	.word	0x40007800
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a71      	ldr	r2, [pc, #452]	; (8004df4 <UART_SetConfig+0x4b8>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d125      	bne.n	8004c7e <UART_SetConfig+0x342>
 8004c32:	4b71      	ldr	r3, [pc, #452]	; (8004df8 <UART_SetConfig+0x4bc>)
 8004c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004c3c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004c40:	d017      	beq.n	8004c72 <UART_SetConfig+0x336>
 8004c42:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004c46:	d817      	bhi.n	8004c78 <UART_SetConfig+0x33c>
 8004c48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c4c:	d00b      	beq.n	8004c66 <UART_SetConfig+0x32a>
 8004c4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c52:	d811      	bhi.n	8004c78 <UART_SetConfig+0x33c>
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d003      	beq.n	8004c60 <UART_SetConfig+0x324>
 8004c58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c5c:	d006      	beq.n	8004c6c <UART_SetConfig+0x330>
 8004c5e:	e00b      	b.n	8004c78 <UART_SetConfig+0x33c>
 8004c60:	2300      	movs	r3, #0
 8004c62:	77fb      	strb	r3, [r7, #31]
 8004c64:	e00d      	b.n	8004c82 <UART_SetConfig+0x346>
 8004c66:	2302      	movs	r3, #2
 8004c68:	77fb      	strb	r3, [r7, #31]
 8004c6a:	e00a      	b.n	8004c82 <UART_SetConfig+0x346>
 8004c6c:	2304      	movs	r3, #4
 8004c6e:	77fb      	strb	r3, [r7, #31]
 8004c70:	e007      	b.n	8004c82 <UART_SetConfig+0x346>
 8004c72:	2308      	movs	r3, #8
 8004c74:	77fb      	strb	r3, [r7, #31]
 8004c76:	e004      	b.n	8004c82 <UART_SetConfig+0x346>
 8004c78:	2310      	movs	r3, #16
 8004c7a:	77fb      	strb	r3, [r7, #31]
 8004c7c:	e001      	b.n	8004c82 <UART_SetConfig+0x346>
 8004c7e:	2310      	movs	r3, #16
 8004c80:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	69db      	ldr	r3, [r3, #28]
 8004c86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c8a:	d15b      	bne.n	8004d44 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8004c8c:	7ffb      	ldrb	r3, [r7, #31]
 8004c8e:	2b08      	cmp	r3, #8
 8004c90:	d827      	bhi.n	8004ce2 <UART_SetConfig+0x3a6>
 8004c92:	a201      	add	r2, pc, #4	; (adr r2, 8004c98 <UART_SetConfig+0x35c>)
 8004c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c98:	08004cbd 	.word	0x08004cbd
 8004c9c:	08004cc5 	.word	0x08004cc5
 8004ca0:	08004ccd 	.word	0x08004ccd
 8004ca4:	08004ce3 	.word	0x08004ce3
 8004ca8:	08004cd3 	.word	0x08004cd3
 8004cac:	08004ce3 	.word	0x08004ce3
 8004cb0:	08004ce3 	.word	0x08004ce3
 8004cb4:	08004ce3 	.word	0x08004ce3
 8004cb8:	08004cdb 	.word	0x08004cdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cbc:	f7fe fbb2 	bl	8003424 <HAL_RCC_GetPCLK1Freq>
 8004cc0:	61b8      	str	r0, [r7, #24]
        break;
 8004cc2:	e013      	b.n	8004cec <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cc4:	f7fe fbc2 	bl	800344c <HAL_RCC_GetPCLK2Freq>
 8004cc8:	61b8      	str	r0, [r7, #24]
        break;
 8004cca:	e00f      	b.n	8004cec <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ccc:	4b4b      	ldr	r3, [pc, #300]	; (8004dfc <UART_SetConfig+0x4c0>)
 8004cce:	61bb      	str	r3, [r7, #24]
        break;
 8004cd0:	e00c      	b.n	8004cec <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cd2:	f7fe fab9 	bl	8003248 <HAL_RCC_GetSysClockFreq>
 8004cd6:	61b8      	str	r0, [r7, #24]
        break;
 8004cd8:	e008      	b.n	8004cec <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cde:	61bb      	str	r3, [r7, #24]
        break;
 8004ce0:	e004      	b.n	8004cec <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	77bb      	strb	r3, [r7, #30]
        break;
 8004cea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d074      	beq.n	8004ddc <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	005a      	lsls	r2, r3, #1
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	085b      	lsrs	r3, r3, #1
 8004cfc:	441a      	add	r2, r3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	2b0f      	cmp	r3, #15
 8004d0e:	d916      	bls.n	8004d3e <UART_SetConfig+0x402>
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d16:	d212      	bcs.n	8004d3e <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	f023 030f 	bic.w	r3, r3, #15
 8004d20:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	085b      	lsrs	r3, r3, #1
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	f003 0307 	and.w	r3, r3, #7
 8004d2c:	b29a      	uxth	r2, r3
 8004d2e:	89fb      	ldrh	r3, [r7, #14]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	89fa      	ldrh	r2, [r7, #14]
 8004d3a:	60da      	str	r2, [r3, #12]
 8004d3c:	e04e      	b.n	8004ddc <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	77bb      	strb	r3, [r7, #30]
 8004d42:	e04b      	b.n	8004ddc <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d44:	7ffb      	ldrb	r3, [r7, #31]
 8004d46:	2b08      	cmp	r3, #8
 8004d48:	d827      	bhi.n	8004d9a <UART_SetConfig+0x45e>
 8004d4a:	a201      	add	r2, pc, #4	; (adr r2, 8004d50 <UART_SetConfig+0x414>)
 8004d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d50:	08004d75 	.word	0x08004d75
 8004d54:	08004d7d 	.word	0x08004d7d
 8004d58:	08004d85 	.word	0x08004d85
 8004d5c:	08004d9b 	.word	0x08004d9b
 8004d60:	08004d8b 	.word	0x08004d8b
 8004d64:	08004d9b 	.word	0x08004d9b
 8004d68:	08004d9b 	.word	0x08004d9b
 8004d6c:	08004d9b 	.word	0x08004d9b
 8004d70:	08004d93 	.word	0x08004d93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d74:	f7fe fb56 	bl	8003424 <HAL_RCC_GetPCLK1Freq>
 8004d78:	61b8      	str	r0, [r7, #24]
        break;
 8004d7a:	e013      	b.n	8004da4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d7c:	f7fe fb66 	bl	800344c <HAL_RCC_GetPCLK2Freq>
 8004d80:	61b8      	str	r0, [r7, #24]
        break;
 8004d82:	e00f      	b.n	8004da4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d84:	4b1d      	ldr	r3, [pc, #116]	; (8004dfc <UART_SetConfig+0x4c0>)
 8004d86:	61bb      	str	r3, [r7, #24]
        break;
 8004d88:	e00c      	b.n	8004da4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d8a:	f7fe fa5d 	bl	8003248 <HAL_RCC_GetSysClockFreq>
 8004d8e:	61b8      	str	r0, [r7, #24]
        break;
 8004d90:	e008      	b.n	8004da4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d96:	61bb      	str	r3, [r7, #24]
        break;
 8004d98:	e004      	b.n	8004da4 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	77bb      	strb	r3, [r7, #30]
        break;
 8004da2:	bf00      	nop
    }

    if (pclk != 0U)
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d018      	beq.n	8004ddc <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	085a      	lsrs	r2, r3, #1
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	441a      	add	r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	2b0f      	cmp	r3, #15
 8004dc4:	d908      	bls.n	8004dd8 <UART_SetConfig+0x49c>
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dcc:	d204      	bcs.n	8004dd8 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	693a      	ldr	r2, [r7, #16]
 8004dd4:	60da      	str	r2, [r3, #12]
 8004dd6:	e001      	b.n	8004ddc <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004de8:	7fbb      	ldrb	r3, [r7, #30]
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3720      	adds	r7, #32
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	40007c00 	.word	0x40007c00
 8004df8:	40023800 	.word	0x40023800
 8004dfc:	00f42400 	.word	0x00f42400

08004e00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0c:	f003 0301 	and.w	r3, r3, #1
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d00a      	beq.n	8004e2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	430a      	orrs	r2, r1
 8004e28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2e:	f003 0302 	and.w	r3, r3, #2
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00a      	beq.n	8004e4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	430a      	orrs	r2, r1
 8004e4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e50:	f003 0304 	and.w	r3, r3, #4
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d00a      	beq.n	8004e6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	430a      	orrs	r2, r1
 8004e6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e72:	f003 0308 	and.w	r3, r3, #8
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00a      	beq.n	8004e90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	430a      	orrs	r2, r1
 8004e8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e94:	f003 0310 	and.w	r3, r3, #16
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d00a      	beq.n	8004eb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	430a      	orrs	r2, r1
 8004eb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb6:	f003 0320 	and.w	r3, r3, #32
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d00a      	beq.n	8004ed4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	430a      	orrs	r2, r1
 8004ed2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d01a      	beq.n	8004f16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	430a      	orrs	r2, r1
 8004ef4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004efe:	d10a      	bne.n	8004f16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	430a      	orrs	r2, r1
 8004f14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d00a      	beq.n	8004f38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	430a      	orrs	r2, r1
 8004f36:	605a      	str	r2, [r3, #4]
  }
}
 8004f38:	bf00      	nop
 8004f3a:	370c      	adds	r7, #12
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr

08004f44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b086      	sub	sp, #24
 8004f48:	af02      	add	r7, sp, #8
 8004f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f54:	f7fc f876 	bl	8001044 <HAL_GetTick>
 8004f58:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0308 	and.w	r3, r3, #8
 8004f64:	2b08      	cmp	r3, #8
 8004f66:	d10e      	bne.n	8004f86 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f6c:	9300      	str	r3, [sp, #0]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 f82d 	bl	8004fd6 <UART_WaitOnFlagUntilTimeout>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d001      	beq.n	8004f86 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e023      	b.n	8004fce <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0304 	and.w	r3, r3, #4
 8004f90:	2b04      	cmp	r3, #4
 8004f92:	d10e      	bne.n	8004fb2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f98:	9300      	str	r3, [sp, #0]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 f817 	bl	8004fd6 <UART_WaitOnFlagUntilTimeout>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d001      	beq.n	8004fb2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e00d      	b.n	8004fce <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2220      	movs	r2, #32
 8004fb6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2220      	movs	r2, #32
 8004fbc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3710      	adds	r7, #16
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}

08004fd6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004fd6:	b580      	push	{r7, lr}
 8004fd8:	b084      	sub	sp, #16
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	60f8      	str	r0, [r7, #12]
 8004fde:	60b9      	str	r1, [r7, #8]
 8004fe0:	603b      	str	r3, [r7, #0]
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fe6:	e05e      	b.n	80050a6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fee:	d05a      	beq.n	80050a6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ff0:	f7fc f828 	bl	8001044 <HAL_GetTick>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	69ba      	ldr	r2, [r7, #24]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d302      	bcc.n	8005006 <UART_WaitOnFlagUntilTimeout+0x30>
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d11b      	bne.n	800503e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005014:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	689a      	ldr	r2, [r3, #8]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f022 0201 	bic.w	r2, r2, #1
 8005024:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2220      	movs	r2, #32
 800502a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2220      	movs	r2, #32
 8005030:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e043      	b.n	80050c6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0304 	and.w	r3, r3, #4
 8005048:	2b00      	cmp	r3, #0
 800504a:	d02c      	beq.n	80050a6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	69db      	ldr	r3, [r3, #28]
 8005052:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005056:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800505a:	d124      	bne.n	80050a6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005064:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005074:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	689a      	ldr	r2, [r3, #8]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f022 0201 	bic.w	r2, r2, #1
 8005084:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2220      	movs	r2, #32
 800508a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2220      	movs	r2, #32
 8005090:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2220      	movs	r2, #32
 8005096:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2200      	movs	r2, #0
 800509e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e00f      	b.n	80050c6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	69da      	ldr	r2, [r3, #28]
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	4013      	ands	r3, r2
 80050b0:	68ba      	ldr	r2, [r7, #8]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	bf0c      	ite	eq
 80050b6:	2301      	moveq	r3, #1
 80050b8:	2300      	movne	r3, #0
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	461a      	mov	r2, r3
 80050be:	79fb      	ldrb	r3, [r7, #7]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d091      	beq.n	8004fe8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3710      	adds	r7, #16
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}

080050ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050ce:	b480      	push	{r7}
 80050d0:	b083      	sub	sp, #12
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80050e4:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	689a      	ldr	r2, [r3, #8]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f022 0201 	bic.w	r2, r2, #1
 80050f4:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d107      	bne.n	800510e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f022 0210 	bic.w	r2, r2, #16
 800510c:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2220      	movs	r2, #32
 8005112:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005120:	bf00      	nop
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005138:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2200      	movs	r2, #0
 800513e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2200      	movs	r2, #0
 8005146:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800514a:	68f8      	ldr	r0, [r7, #12]
 800514c:	f7ff fbd6 	bl	80048fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005150:	bf00      	nop
 8005152:	3710      	adds	r7, #16
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800516e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2220      	movs	r2, #32
 8005174:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f7ff fbb3 	bl	80048e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005182:	bf00      	nop
 8005184:	3708      	adds	r7, #8
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
	...

0800518c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8005192:	4ba0      	ldr	r3, [pc, #640]	; (8005414 <MX_LWIP_Init+0x288>)
 8005194:	22c0      	movs	r2, #192	; 0xc0
 8005196:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8005198:	4b9e      	ldr	r3, [pc, #632]	; (8005414 <MX_LWIP_Init+0x288>)
 800519a:	22a8      	movs	r2, #168	; 0xa8
 800519c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 800519e:	4b9d      	ldr	r3, [pc, #628]	; (8005414 <MX_LWIP_Init+0x288>)
 80051a0:	2200      	movs	r2, #0
 80051a2:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 80051a4:	4b9b      	ldr	r3, [pc, #620]	; (8005414 <MX_LWIP_Init+0x288>)
 80051a6:	220a      	movs	r2, #10
 80051a8:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80051aa:	4b9b      	ldr	r3, [pc, #620]	; (8005418 <MX_LWIP_Init+0x28c>)
 80051ac:	22ff      	movs	r2, #255	; 0xff
 80051ae:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80051b0:	4b99      	ldr	r3, [pc, #612]	; (8005418 <MX_LWIP_Init+0x28c>)
 80051b2:	22ff      	movs	r2, #255	; 0xff
 80051b4:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80051b6:	4b98      	ldr	r3, [pc, #608]	; (8005418 <MX_LWIP_Init+0x28c>)
 80051b8:	22ff      	movs	r2, #255	; 0xff
 80051ba:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80051bc:	4b96      	ldr	r3, [pc, #600]	; (8005418 <MX_LWIP_Init+0x28c>)
 80051be:	2200      	movs	r2, #0
 80051c0:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80051c2:	4b96      	ldr	r3, [pc, #600]	; (800541c <MX_LWIP_Init+0x290>)
 80051c4:	22c0      	movs	r2, #192	; 0xc0
 80051c6:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80051c8:	4b94      	ldr	r3, [pc, #592]	; (800541c <MX_LWIP_Init+0x290>)
 80051ca:	22a8      	movs	r2, #168	; 0xa8
 80051cc:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 80051ce:	4b93      	ldr	r3, [pc, #588]	; (800541c <MX_LWIP_Init+0x290>)
 80051d0:	2200      	movs	r2, #0
 80051d2:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80051d4:	4b91      	ldr	r3, [pc, #580]	; (800541c <MX_LWIP_Init+0x290>)
 80051d6:	2201      	movs	r2, #1
 80051d8:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80051da:	2100      	movs	r1, #0
 80051dc:	2000      	movs	r0, #0
 80051de:	f005 f8ad 	bl	800a33c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80051e2:	4b8c      	ldr	r3, [pc, #560]	; (8005414 <MX_LWIP_Init+0x288>)
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	061a      	lsls	r2, r3, #24
 80051e8:	4b8a      	ldr	r3, [pc, #552]	; (8005414 <MX_LWIP_Init+0x288>)
 80051ea:	785b      	ldrb	r3, [r3, #1]
 80051ec:	041b      	lsls	r3, r3, #16
 80051ee:	431a      	orrs	r2, r3
 80051f0:	4b88      	ldr	r3, [pc, #544]	; (8005414 <MX_LWIP_Init+0x288>)
 80051f2:	789b      	ldrb	r3, [r3, #2]
 80051f4:	021b      	lsls	r3, r3, #8
 80051f6:	4313      	orrs	r3, r2
 80051f8:	4a86      	ldr	r2, [pc, #536]	; (8005414 <MX_LWIP_Init+0x288>)
 80051fa:	78d2      	ldrb	r2, [r2, #3]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	061a      	lsls	r2, r3, #24
 8005200:	4b84      	ldr	r3, [pc, #528]	; (8005414 <MX_LWIP_Init+0x288>)
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	0619      	lsls	r1, r3, #24
 8005206:	4b83      	ldr	r3, [pc, #524]	; (8005414 <MX_LWIP_Init+0x288>)
 8005208:	785b      	ldrb	r3, [r3, #1]
 800520a:	041b      	lsls	r3, r3, #16
 800520c:	4319      	orrs	r1, r3
 800520e:	4b81      	ldr	r3, [pc, #516]	; (8005414 <MX_LWIP_Init+0x288>)
 8005210:	789b      	ldrb	r3, [r3, #2]
 8005212:	021b      	lsls	r3, r3, #8
 8005214:	430b      	orrs	r3, r1
 8005216:	497f      	ldr	r1, [pc, #508]	; (8005414 <MX_LWIP_Init+0x288>)
 8005218:	78c9      	ldrb	r1, [r1, #3]
 800521a:	430b      	orrs	r3, r1
 800521c:	021b      	lsls	r3, r3, #8
 800521e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005222:	431a      	orrs	r2, r3
 8005224:	4b7b      	ldr	r3, [pc, #492]	; (8005414 <MX_LWIP_Init+0x288>)
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	0619      	lsls	r1, r3, #24
 800522a:	4b7a      	ldr	r3, [pc, #488]	; (8005414 <MX_LWIP_Init+0x288>)
 800522c:	785b      	ldrb	r3, [r3, #1]
 800522e:	041b      	lsls	r3, r3, #16
 8005230:	4319      	orrs	r1, r3
 8005232:	4b78      	ldr	r3, [pc, #480]	; (8005414 <MX_LWIP_Init+0x288>)
 8005234:	789b      	ldrb	r3, [r3, #2]
 8005236:	021b      	lsls	r3, r3, #8
 8005238:	430b      	orrs	r3, r1
 800523a:	4976      	ldr	r1, [pc, #472]	; (8005414 <MX_LWIP_Init+0x288>)
 800523c:	78c9      	ldrb	r1, [r1, #3]
 800523e:	430b      	orrs	r3, r1
 8005240:	0a1b      	lsrs	r3, r3, #8
 8005242:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005246:	431a      	orrs	r2, r3
 8005248:	4b72      	ldr	r3, [pc, #456]	; (8005414 <MX_LWIP_Init+0x288>)
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	0619      	lsls	r1, r3, #24
 800524e:	4b71      	ldr	r3, [pc, #452]	; (8005414 <MX_LWIP_Init+0x288>)
 8005250:	785b      	ldrb	r3, [r3, #1]
 8005252:	041b      	lsls	r3, r3, #16
 8005254:	4319      	orrs	r1, r3
 8005256:	4b6f      	ldr	r3, [pc, #444]	; (8005414 <MX_LWIP_Init+0x288>)
 8005258:	789b      	ldrb	r3, [r3, #2]
 800525a:	021b      	lsls	r3, r3, #8
 800525c:	430b      	orrs	r3, r1
 800525e:	496d      	ldr	r1, [pc, #436]	; (8005414 <MX_LWIP_Init+0x288>)
 8005260:	78c9      	ldrb	r1, [r1, #3]
 8005262:	430b      	orrs	r3, r1
 8005264:	0e1b      	lsrs	r3, r3, #24
 8005266:	4313      	orrs	r3, r2
 8005268:	4a6d      	ldr	r2, [pc, #436]	; (8005420 <MX_LWIP_Init+0x294>)
 800526a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800526c:	4b6a      	ldr	r3, [pc, #424]	; (8005418 <MX_LWIP_Init+0x28c>)
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	061a      	lsls	r2, r3, #24
 8005272:	4b69      	ldr	r3, [pc, #420]	; (8005418 <MX_LWIP_Init+0x28c>)
 8005274:	785b      	ldrb	r3, [r3, #1]
 8005276:	041b      	lsls	r3, r3, #16
 8005278:	431a      	orrs	r2, r3
 800527a:	4b67      	ldr	r3, [pc, #412]	; (8005418 <MX_LWIP_Init+0x28c>)
 800527c:	789b      	ldrb	r3, [r3, #2]
 800527e:	021b      	lsls	r3, r3, #8
 8005280:	4313      	orrs	r3, r2
 8005282:	4a65      	ldr	r2, [pc, #404]	; (8005418 <MX_LWIP_Init+0x28c>)
 8005284:	78d2      	ldrb	r2, [r2, #3]
 8005286:	4313      	orrs	r3, r2
 8005288:	061a      	lsls	r2, r3, #24
 800528a:	4b63      	ldr	r3, [pc, #396]	; (8005418 <MX_LWIP_Init+0x28c>)
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	0619      	lsls	r1, r3, #24
 8005290:	4b61      	ldr	r3, [pc, #388]	; (8005418 <MX_LWIP_Init+0x28c>)
 8005292:	785b      	ldrb	r3, [r3, #1]
 8005294:	041b      	lsls	r3, r3, #16
 8005296:	4319      	orrs	r1, r3
 8005298:	4b5f      	ldr	r3, [pc, #380]	; (8005418 <MX_LWIP_Init+0x28c>)
 800529a:	789b      	ldrb	r3, [r3, #2]
 800529c:	021b      	lsls	r3, r3, #8
 800529e:	430b      	orrs	r3, r1
 80052a0:	495d      	ldr	r1, [pc, #372]	; (8005418 <MX_LWIP_Init+0x28c>)
 80052a2:	78c9      	ldrb	r1, [r1, #3]
 80052a4:	430b      	orrs	r3, r1
 80052a6:	021b      	lsls	r3, r3, #8
 80052a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80052ac:	431a      	orrs	r2, r3
 80052ae:	4b5a      	ldr	r3, [pc, #360]	; (8005418 <MX_LWIP_Init+0x28c>)
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	0619      	lsls	r1, r3, #24
 80052b4:	4b58      	ldr	r3, [pc, #352]	; (8005418 <MX_LWIP_Init+0x28c>)
 80052b6:	785b      	ldrb	r3, [r3, #1]
 80052b8:	041b      	lsls	r3, r3, #16
 80052ba:	4319      	orrs	r1, r3
 80052bc:	4b56      	ldr	r3, [pc, #344]	; (8005418 <MX_LWIP_Init+0x28c>)
 80052be:	789b      	ldrb	r3, [r3, #2]
 80052c0:	021b      	lsls	r3, r3, #8
 80052c2:	430b      	orrs	r3, r1
 80052c4:	4954      	ldr	r1, [pc, #336]	; (8005418 <MX_LWIP_Init+0x28c>)
 80052c6:	78c9      	ldrb	r1, [r1, #3]
 80052c8:	430b      	orrs	r3, r1
 80052ca:	0a1b      	lsrs	r3, r3, #8
 80052cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80052d0:	431a      	orrs	r2, r3
 80052d2:	4b51      	ldr	r3, [pc, #324]	; (8005418 <MX_LWIP_Init+0x28c>)
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	0619      	lsls	r1, r3, #24
 80052d8:	4b4f      	ldr	r3, [pc, #316]	; (8005418 <MX_LWIP_Init+0x28c>)
 80052da:	785b      	ldrb	r3, [r3, #1]
 80052dc:	041b      	lsls	r3, r3, #16
 80052de:	4319      	orrs	r1, r3
 80052e0:	4b4d      	ldr	r3, [pc, #308]	; (8005418 <MX_LWIP_Init+0x28c>)
 80052e2:	789b      	ldrb	r3, [r3, #2]
 80052e4:	021b      	lsls	r3, r3, #8
 80052e6:	430b      	orrs	r3, r1
 80052e8:	494b      	ldr	r1, [pc, #300]	; (8005418 <MX_LWIP_Init+0x28c>)
 80052ea:	78c9      	ldrb	r1, [r1, #3]
 80052ec:	430b      	orrs	r3, r1
 80052ee:	0e1b      	lsrs	r3, r3, #24
 80052f0:	4313      	orrs	r3, r2
 80052f2:	4a4c      	ldr	r2, [pc, #304]	; (8005424 <MX_LWIP_Init+0x298>)
 80052f4:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80052f6:	4b49      	ldr	r3, [pc, #292]	; (800541c <MX_LWIP_Init+0x290>)
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	061a      	lsls	r2, r3, #24
 80052fc:	4b47      	ldr	r3, [pc, #284]	; (800541c <MX_LWIP_Init+0x290>)
 80052fe:	785b      	ldrb	r3, [r3, #1]
 8005300:	041b      	lsls	r3, r3, #16
 8005302:	431a      	orrs	r2, r3
 8005304:	4b45      	ldr	r3, [pc, #276]	; (800541c <MX_LWIP_Init+0x290>)
 8005306:	789b      	ldrb	r3, [r3, #2]
 8005308:	021b      	lsls	r3, r3, #8
 800530a:	4313      	orrs	r3, r2
 800530c:	4a43      	ldr	r2, [pc, #268]	; (800541c <MX_LWIP_Init+0x290>)
 800530e:	78d2      	ldrb	r2, [r2, #3]
 8005310:	4313      	orrs	r3, r2
 8005312:	061a      	lsls	r2, r3, #24
 8005314:	4b41      	ldr	r3, [pc, #260]	; (800541c <MX_LWIP_Init+0x290>)
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	0619      	lsls	r1, r3, #24
 800531a:	4b40      	ldr	r3, [pc, #256]	; (800541c <MX_LWIP_Init+0x290>)
 800531c:	785b      	ldrb	r3, [r3, #1]
 800531e:	041b      	lsls	r3, r3, #16
 8005320:	4319      	orrs	r1, r3
 8005322:	4b3e      	ldr	r3, [pc, #248]	; (800541c <MX_LWIP_Init+0x290>)
 8005324:	789b      	ldrb	r3, [r3, #2]
 8005326:	021b      	lsls	r3, r3, #8
 8005328:	430b      	orrs	r3, r1
 800532a:	493c      	ldr	r1, [pc, #240]	; (800541c <MX_LWIP_Init+0x290>)
 800532c:	78c9      	ldrb	r1, [r1, #3]
 800532e:	430b      	orrs	r3, r1
 8005330:	021b      	lsls	r3, r3, #8
 8005332:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005336:	431a      	orrs	r2, r3
 8005338:	4b38      	ldr	r3, [pc, #224]	; (800541c <MX_LWIP_Init+0x290>)
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	0619      	lsls	r1, r3, #24
 800533e:	4b37      	ldr	r3, [pc, #220]	; (800541c <MX_LWIP_Init+0x290>)
 8005340:	785b      	ldrb	r3, [r3, #1]
 8005342:	041b      	lsls	r3, r3, #16
 8005344:	4319      	orrs	r1, r3
 8005346:	4b35      	ldr	r3, [pc, #212]	; (800541c <MX_LWIP_Init+0x290>)
 8005348:	789b      	ldrb	r3, [r3, #2]
 800534a:	021b      	lsls	r3, r3, #8
 800534c:	430b      	orrs	r3, r1
 800534e:	4933      	ldr	r1, [pc, #204]	; (800541c <MX_LWIP_Init+0x290>)
 8005350:	78c9      	ldrb	r1, [r1, #3]
 8005352:	430b      	orrs	r3, r1
 8005354:	0a1b      	lsrs	r3, r3, #8
 8005356:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800535a:	431a      	orrs	r2, r3
 800535c:	4b2f      	ldr	r3, [pc, #188]	; (800541c <MX_LWIP_Init+0x290>)
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	0619      	lsls	r1, r3, #24
 8005362:	4b2e      	ldr	r3, [pc, #184]	; (800541c <MX_LWIP_Init+0x290>)
 8005364:	785b      	ldrb	r3, [r3, #1]
 8005366:	041b      	lsls	r3, r3, #16
 8005368:	4319      	orrs	r1, r3
 800536a:	4b2c      	ldr	r3, [pc, #176]	; (800541c <MX_LWIP_Init+0x290>)
 800536c:	789b      	ldrb	r3, [r3, #2]
 800536e:	021b      	lsls	r3, r3, #8
 8005370:	430b      	orrs	r3, r1
 8005372:	492a      	ldr	r1, [pc, #168]	; (800541c <MX_LWIP_Init+0x290>)
 8005374:	78c9      	ldrb	r1, [r1, #3]
 8005376:	430b      	orrs	r3, r1
 8005378:	0e1b      	lsrs	r3, r3, #24
 800537a:	4313      	orrs	r3, r2
 800537c:	4a2a      	ldr	r2, [pc, #168]	; (8005428 <MX_LWIP_Init+0x29c>)
 800537e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8005380:	4b2a      	ldr	r3, [pc, #168]	; (800542c <MX_LWIP_Init+0x2a0>)
 8005382:	9302      	str	r3, [sp, #8]
 8005384:	4b2a      	ldr	r3, [pc, #168]	; (8005430 <MX_LWIP_Init+0x2a4>)
 8005386:	9301      	str	r3, [sp, #4]
 8005388:	2300      	movs	r3, #0
 800538a:	9300      	str	r3, [sp, #0]
 800538c:	4b26      	ldr	r3, [pc, #152]	; (8005428 <MX_LWIP_Init+0x29c>)
 800538e:	4a25      	ldr	r2, [pc, #148]	; (8005424 <MX_LWIP_Init+0x298>)
 8005390:	4923      	ldr	r1, [pc, #140]	; (8005420 <MX_LWIP_Init+0x294>)
 8005392:	4828      	ldr	r0, [pc, #160]	; (8005434 <MX_LWIP_Init+0x2a8>)
 8005394:	f005 fd56 	bl	800ae44 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005398:	4826      	ldr	r0, [pc, #152]	; (8005434 <MX_LWIP_Init+0x2a8>)
 800539a:	f005 ff05 	bl	800b1a8 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800539e:	4b25      	ldr	r3, [pc, #148]	; (8005434 <MX_LWIP_Init+0x2a8>)
 80053a0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80053a4:	089b      	lsrs	r3, r3, #2
 80053a6:	f003 0301 	and.w	r3, r3, #1
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d003      	beq.n	80053b8 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80053b0:	4820      	ldr	r0, [pc, #128]	; (8005434 <MX_LWIP_Init+0x2a8>)
 80053b2:	f005 ff09 	bl	800b1c8 <netif_set_up>
 80053b6:	e002      	b.n	80053be <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80053b8:	481e      	ldr	r0, [pc, #120]	; (8005434 <MX_LWIP_Init+0x2a8>)
 80053ba:	f005 ff71 	bl	800b2a0 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80053be:	491e      	ldr	r1, [pc, #120]	; (8005438 <MX_LWIP_Init+0x2ac>)
 80053c0:	481c      	ldr	r0, [pc, #112]	; (8005434 <MX_LWIP_Init+0x2a8>)
 80053c2:	f006 f803 	bl	800b3cc <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  Netif_LinkSemaphore = osSemaphoreNew(1, 1, NULL);
 80053c6:	2200      	movs	r2, #0
 80053c8:	2101      	movs	r1, #1
 80053ca:	2001      	movs	r0, #1
 80053cc:	f000 ff1a 	bl	8006204 <osSemaphoreNew>
 80053d0:	4603      	mov	r3, r0
 80053d2:	4a1a      	ldr	r2, [pc, #104]	; (800543c <MX_LWIP_Init+0x2b0>)
 80053d4:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 80053d6:	4b1a      	ldr	r3, [pc, #104]	; (8005440 <MX_LWIP_Init+0x2b4>)
 80053d8:	4a16      	ldr	r2, [pc, #88]	; (8005434 <MX_LWIP_Init+0x2a8>)
 80053da:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 80053dc:	4b17      	ldr	r3, [pc, #92]	; (800543c <MX_LWIP_Init+0x2b0>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a17      	ldr	r2, [pc, #92]	; (8005440 <MX_LWIP_Init+0x2b4>)
 80053e2:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80053e4:	2224      	movs	r2, #36	; 0x24
 80053e6:	2100      	movs	r1, #0
 80053e8:	4816      	ldr	r0, [pc, #88]	; (8005444 <MX_LWIP_Init+0x2b8>)
 80053ea:	f012 fbd2 	bl	8017b92 <memset>
  attributes.name = "LinkThr";
 80053ee:	4b15      	ldr	r3, [pc, #84]	; (8005444 <MX_LWIP_Init+0x2b8>)
 80053f0:	4a15      	ldr	r2, [pc, #84]	; (8005448 <MX_LWIP_Init+0x2bc>)
 80053f2:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80053f4:	4b13      	ldr	r3, [pc, #76]	; (8005444 <MX_LWIP_Init+0x2b8>)
 80053f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80053fa:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 80053fc:	4b11      	ldr	r3, [pc, #68]	; (8005444 <MX_LWIP_Init+0x2b8>)
 80053fe:	2210      	movs	r2, #16
 8005400:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernetif_set_link, &link_arg, &attributes);
 8005402:	4a10      	ldr	r2, [pc, #64]	; (8005444 <MX_LWIP_Init+0x2b8>)
 8005404:	490e      	ldr	r1, [pc, #56]	; (8005440 <MX_LWIP_Init+0x2b4>)
 8005406:	4811      	ldr	r0, [pc, #68]	; (800544c <MX_LWIP_Init+0x2c0>)
 8005408:	f000 fce0 	bl	8005dcc <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800540c:	bf00      	nop
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	20005228 	.word	0x20005228
 8005418:	20005224 	.word	0x20005224
 800541c:	200051c4 	.word	0x200051c4
 8005420:	20005220 	.word	0x20005220
 8005424:	2000522c 	.word	0x2000522c
 8005428:	20005230 	.word	0x20005230
 800542c:	0800a279 	.word	0x0800a279
 8005430:	08005aa9 	.word	0x08005aa9
 8005434:	200051ec 	.word	0x200051ec
 8005438:	08005b8d 	.word	0x08005b8d
 800543c:	200001a4 	.word	0x200001a4
 8005440:	200051bc 	.word	0x200051bc
 8005444:	200051c8 	.word	0x200051c8
 8005448:	08018a80 	.word	0x08018a80
 800544c:	08005b15 	.word	0x08005b15

08005450 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b08e      	sub	sp, #56	; 0x38
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005458:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800545c:	2200      	movs	r2, #0
 800545e:	601a      	str	r2, [r3, #0]
 8005460:	605a      	str	r2, [r3, #4]
 8005462:	609a      	str	r2, [r3, #8]
 8005464:	60da      	str	r2, [r3, #12]
 8005466:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a52      	ldr	r2, [pc, #328]	; (80055b8 <HAL_ETH_MspInit+0x168>)
 800546e:	4293      	cmp	r3, r2
 8005470:	f040 809e 	bne.w	80055b0 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005474:	4b51      	ldr	r3, [pc, #324]	; (80055bc <HAL_ETH_MspInit+0x16c>)
 8005476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005478:	4a50      	ldr	r2, [pc, #320]	; (80055bc <HAL_ETH_MspInit+0x16c>)
 800547a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800547e:	6313      	str	r3, [r2, #48]	; 0x30
 8005480:	4b4e      	ldr	r3, [pc, #312]	; (80055bc <HAL_ETH_MspInit+0x16c>)
 8005482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005484:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005488:	623b      	str	r3, [r7, #32]
 800548a:	6a3b      	ldr	r3, [r7, #32]
 800548c:	4b4b      	ldr	r3, [pc, #300]	; (80055bc <HAL_ETH_MspInit+0x16c>)
 800548e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005490:	4a4a      	ldr	r2, [pc, #296]	; (80055bc <HAL_ETH_MspInit+0x16c>)
 8005492:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005496:	6313      	str	r3, [r2, #48]	; 0x30
 8005498:	4b48      	ldr	r3, [pc, #288]	; (80055bc <HAL_ETH_MspInit+0x16c>)
 800549a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800549c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80054a0:	61fb      	str	r3, [r7, #28]
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	4b45      	ldr	r3, [pc, #276]	; (80055bc <HAL_ETH_MspInit+0x16c>)
 80054a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a8:	4a44      	ldr	r2, [pc, #272]	; (80055bc <HAL_ETH_MspInit+0x16c>)
 80054aa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80054ae:	6313      	str	r3, [r2, #48]	; 0x30
 80054b0:	4b42      	ldr	r3, [pc, #264]	; (80055bc <HAL_ETH_MspInit+0x16c>)
 80054b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054b8:	61bb      	str	r3, [r7, #24]
 80054ba:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80054bc:	4b3f      	ldr	r3, [pc, #252]	; (80055bc <HAL_ETH_MspInit+0x16c>)
 80054be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c0:	4a3e      	ldr	r2, [pc, #248]	; (80055bc <HAL_ETH_MspInit+0x16c>)
 80054c2:	f043 0304 	orr.w	r3, r3, #4
 80054c6:	6313      	str	r3, [r2, #48]	; 0x30
 80054c8:	4b3c      	ldr	r3, [pc, #240]	; (80055bc <HAL_ETH_MspInit+0x16c>)
 80054ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054cc:	f003 0304 	and.w	r3, r3, #4
 80054d0:	617b      	str	r3, [r7, #20]
 80054d2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054d4:	4b39      	ldr	r3, [pc, #228]	; (80055bc <HAL_ETH_MspInit+0x16c>)
 80054d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d8:	4a38      	ldr	r2, [pc, #224]	; (80055bc <HAL_ETH_MspInit+0x16c>)
 80054da:	f043 0301 	orr.w	r3, r3, #1
 80054de:	6313      	str	r3, [r2, #48]	; 0x30
 80054e0:	4b36      	ldr	r3, [pc, #216]	; (80055bc <HAL_ETH_MspInit+0x16c>)
 80054e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e4:	f003 0301 	and.w	r3, r3, #1
 80054e8:	613b      	str	r3, [r7, #16]
 80054ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054ec:	4b33      	ldr	r3, [pc, #204]	; (80055bc <HAL_ETH_MspInit+0x16c>)
 80054ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f0:	4a32      	ldr	r2, [pc, #200]	; (80055bc <HAL_ETH_MspInit+0x16c>)
 80054f2:	f043 0302 	orr.w	r3, r3, #2
 80054f6:	6313      	str	r3, [r2, #48]	; 0x30
 80054f8:	4b30      	ldr	r3, [pc, #192]	; (80055bc <HAL_ETH_MspInit+0x16c>)
 80054fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054fc:	f003 0302 	and.w	r3, r3, #2
 8005500:	60fb      	str	r3, [r7, #12]
 8005502:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005504:	4b2d      	ldr	r3, [pc, #180]	; (80055bc <HAL_ETH_MspInit+0x16c>)
 8005506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005508:	4a2c      	ldr	r2, [pc, #176]	; (80055bc <HAL_ETH_MspInit+0x16c>)
 800550a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800550e:	6313      	str	r3, [r2, #48]	; 0x30
 8005510:	4b2a      	ldr	r3, [pc, #168]	; (80055bc <HAL_ETH_MspInit+0x16c>)
 8005512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005518:	60bb      	str	r3, [r7, #8]
 800551a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800551c:	2332      	movs	r3, #50	; 0x32
 800551e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005520:	2302      	movs	r3, #2
 8005522:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005524:	2300      	movs	r3, #0
 8005526:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005528:	2303      	movs	r3, #3
 800552a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800552c:	230b      	movs	r3, #11
 800552e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005530:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005534:	4619      	mov	r1, r3
 8005536:	4822      	ldr	r0, [pc, #136]	; (80055c0 <HAL_ETH_MspInit+0x170>)
 8005538:	f7fd f8ac 	bl	8002694 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800553c:	2386      	movs	r3, #134	; 0x86
 800553e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005540:	2302      	movs	r3, #2
 8005542:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005544:	2300      	movs	r3, #0
 8005546:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005548:	2303      	movs	r3, #3
 800554a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800554c:	230b      	movs	r3, #11
 800554e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005550:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005554:	4619      	mov	r1, r3
 8005556:	481b      	ldr	r0, [pc, #108]	; (80055c4 <HAL_ETH_MspInit+0x174>)
 8005558:	f7fd f89c 	bl	8002694 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800555c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005560:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005562:	2302      	movs	r3, #2
 8005564:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005566:	2300      	movs	r3, #0
 8005568:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800556a:	2303      	movs	r3, #3
 800556c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800556e:	230b      	movs	r3, #11
 8005570:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8005572:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005576:	4619      	mov	r1, r3
 8005578:	4813      	ldr	r0, [pc, #76]	; (80055c8 <HAL_ETH_MspInit+0x178>)
 800557a:	f7fd f88b 	bl	8002694 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800557e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005582:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005584:	2302      	movs	r3, #2
 8005586:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005588:	2300      	movs	r3, #0
 800558a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800558c:	2303      	movs	r3, #3
 800558e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005590:	230b      	movs	r3, #11
 8005592:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005594:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005598:	4619      	mov	r1, r3
 800559a:	480c      	ldr	r0, [pc, #48]	; (80055cc <HAL_ETH_MspInit+0x17c>)
 800559c:	f7fd f87a 	bl	8002694 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80055a0:	2200      	movs	r2, #0
 80055a2:	2105      	movs	r1, #5
 80055a4:	203d      	movs	r0, #61	; 0x3d
 80055a6:	f7fb fe35 	bl	8001214 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80055aa:	203d      	movs	r0, #61	; 0x3d
 80055ac:	f7fb fe4e 	bl	800124c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80055b0:	bf00      	nop
 80055b2:	3738      	adds	r7, #56	; 0x38
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	40028000 	.word	0x40028000
 80055bc:	40023800 	.word	0x40023800
 80055c0:	40020800 	.word	0x40020800
 80055c4:	40020000 	.word	0x40020000
 80055c8:	40020400 	.word	0x40020400
 80055cc:	40021800 	.word	0x40021800

080055d0 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 80055d8:	4b04      	ldr	r3, [pc, #16]	; (80055ec <HAL_ETH_RxCpltCallback+0x1c>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4618      	mov	r0, r3
 80055de:	f000 ff13 	bl	8006408 <osSemaphoreRelease>
}
 80055e2:	bf00      	nop
 80055e4:	3708      	adds	r7, #8
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	200001a8 	.word	0x200001a8

080055f0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b090      	sub	sp, #64	; 0x40
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80055f8:	2300      	movs	r3, #0
 80055fa:	63bb      	str	r3, [r7, #56]	; 0x38
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80055fc:	4b5d      	ldr	r3, [pc, #372]	; (8005774 <low_level_init+0x184>)
 80055fe:	4a5e      	ldr	r2, [pc, #376]	; (8005778 <low_level_init+0x188>)
 8005600:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8005602:	4b5c      	ldr	r3, [pc, #368]	; (8005774 <low_level_init+0x184>)
 8005604:	2201      	movs	r2, #1
 8005606:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8005608:	4b5a      	ldr	r3, [pc, #360]	; (8005774 <low_level_init+0x184>)
 800560a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800560e:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8005610:	4b58      	ldr	r3, [pc, #352]	; (8005774 <low_level_init+0x184>)
 8005612:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005616:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8005618:	4b56      	ldr	r3, [pc, #344]	; (8005774 <low_level_init+0x184>)
 800561a:	2201      	movs	r2, #1
 800561c:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800561e:	2300      	movs	r3, #0
 8005620:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 8005622:	2380      	movs	r3, #128	; 0x80
 8005624:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 8005626:	23e1      	movs	r3, #225	; 0xe1
 8005628:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 800562a:	2300      	movs	r3, #0
 800562c:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 800562e:	2300      	movs	r3, #0
 8005630:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 8005632:	2300      	movs	r3, #0
 8005634:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 8005636:	4a4f      	ldr	r2, [pc, #316]	; (8005774 <low_level_init+0x184>)
 8005638:	f107 030c 	add.w	r3, r7, #12
 800563c:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800563e:	4b4d      	ldr	r3, [pc, #308]	; (8005774 <low_level_init+0x184>)
 8005640:	2201      	movs	r2, #1
 8005642:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8005644:	4b4b      	ldr	r3, [pc, #300]	; (8005774 <low_level_init+0x184>)
 8005646:	2200      	movs	r2, #0
 8005648:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800564a:	4b4a      	ldr	r3, [pc, #296]	; (8005774 <low_level_init+0x184>)
 800564c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005650:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005652:	4848      	ldr	r0, [pc, #288]	; (8005774 <low_level_init+0x184>)
 8005654:	f7fb fe9a 	bl	800138c <HAL_ETH_Init>
 8005658:	4603      	mov	r3, r0
 800565a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 800565e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005662:	2b00      	cmp	r3, #0
 8005664:	d108      	bne.n	8005678 <low_level_init+0x88>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800566c:	f043 0304 	orr.w	r3, r3, #4
 8005670:	b2da      	uxtb	r2, r3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8005678:	2304      	movs	r3, #4
 800567a:	4a40      	ldr	r2, [pc, #256]	; (800577c <low_level_init+0x18c>)
 800567c:	4940      	ldr	r1, [pc, #256]	; (8005780 <low_level_init+0x190>)
 800567e:	483d      	ldr	r0, [pc, #244]	; (8005774 <low_level_init+0x184>)
 8005680:	f7fc f81e 	bl	80016c0 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8005684:	2304      	movs	r3, #4
 8005686:	4a3f      	ldr	r2, [pc, #252]	; (8005784 <low_level_init+0x194>)
 8005688:	493f      	ldr	r1, [pc, #252]	; (8005788 <low_level_init+0x198>)
 800568a:	483a      	ldr	r0, [pc, #232]	; (8005774 <low_level_init+0x184>)
 800568c:	f7fc f881 	bl	8001792 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2206      	movs	r2, #6
 8005694:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005698:	4b36      	ldr	r3, [pc, #216]	; (8005774 <low_level_init+0x184>)
 800569a:	695b      	ldr	r3, [r3, #20]
 800569c:	781a      	ldrb	r2, [r3, #0]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80056a4:	4b33      	ldr	r3, [pc, #204]	; (8005774 <low_level_init+0x184>)
 80056a6:	695b      	ldr	r3, [r3, #20]
 80056a8:	785a      	ldrb	r2, [r3, #1]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80056b0:	4b30      	ldr	r3, [pc, #192]	; (8005774 <low_level_init+0x184>)
 80056b2:	695b      	ldr	r3, [r3, #20]
 80056b4:	789a      	ldrb	r2, [r3, #2]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80056bc:	4b2d      	ldr	r3, [pc, #180]	; (8005774 <low_level_init+0x184>)
 80056be:	695b      	ldr	r3, [r3, #20]
 80056c0:	78da      	ldrb	r2, [r3, #3]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80056c8:	4b2a      	ldr	r3, [pc, #168]	; (8005774 <low_level_init+0x184>)
 80056ca:	695b      	ldr	r3, [r3, #20]
 80056cc:	791a      	ldrb	r2, [r3, #4]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80056d4:	4b27      	ldr	r3, [pc, #156]	; (8005774 <low_level_init+0x184>)
 80056d6:	695b      	ldr	r3, [r3, #20]
 80056d8:	795a      	ldrb	r2, [r3, #5]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80056e6:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80056ee:	f043 030a 	orr.w	r3, r3, #10
 80056f2:	b2da      	uxtb	r2, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
 80056fa:	2200      	movs	r2, #0
 80056fc:	2101      	movs	r1, #1
 80056fe:	2001      	movs	r0, #1
 8005700:	f000 fd80 	bl	8006204 <osSemaphoreNew>
 8005704:	4603      	mov	r3, r0
 8005706:	4a21      	ldr	r2, [pc, #132]	; (800578c <low_level_init+0x19c>)
 8005708:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800570a:	f107 0314 	add.w	r3, r7, #20
 800570e:	2224      	movs	r2, #36	; 0x24
 8005710:	2100      	movs	r1, #0
 8005712:	4618      	mov	r0, r3
 8005714:	f012 fa3d 	bl	8017b92 <memset>
  attributes.name = "EthIf";
 8005718:	4b1d      	ldr	r3, [pc, #116]	; (8005790 <low_level_init+0x1a0>)
 800571a:	617b      	str	r3, [r7, #20]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800571c:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8005720:	62bb      	str	r3, [r7, #40]	; 0x28
  attributes.priority = osPriorityRealtime;
 8005722:	2330      	movs	r3, #48	; 0x30
 8005724:	62fb      	str	r3, [r7, #44]	; 0x2c
  osThreadNew(ethernetif_input, netif, &attributes);
 8005726:	f107 0314 	add.w	r3, r7, #20
 800572a:	461a      	mov	r2, r3
 800572c:	6879      	ldr	r1, [r7, #4]
 800572e:	4819      	ldr	r0, [pc, #100]	; (8005794 <low_level_init+0x1a4>)
 8005730:	f000 fb4c 	bl	8005dcc <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8005734:	480f      	ldr	r0, [pc, #60]	; (8005774 <low_level_init+0x184>)
 8005736:	f7fc fb54 	bl	8001de2 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800573a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800573e:	461a      	mov	r2, r3
 8005740:	211d      	movs	r1, #29
 8005742:	480c      	ldr	r0, [pc, #48]	; (8005774 <low_level_init+0x184>)
 8005744:	f7fc fa7f 	bl	8001c46 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8005748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800574a:	f043 030b 	orr.w	r3, r3, #11
 800574e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8005750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005752:	461a      	mov	r2, r3
 8005754:	211d      	movs	r1, #29
 8005756:	4807      	ldr	r0, [pc, #28]	; (8005774 <low_level_init+0x184>)
 8005758:	f7fc fadd 	bl	8001d16 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800575c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005760:	461a      	mov	r2, r3
 8005762:	211d      	movs	r1, #29
 8005764:	4803      	ldr	r0, [pc, #12]	; (8005774 <low_level_init+0x184>)
 8005766:	f7fc fa6e 	bl	8001c46 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800576a:	bf00      	nop
 800576c:	3740      	adds	r7, #64	; 0x40
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	20006b04 	.word	0x20006b04
 8005778:	40028000 	.word	0x40028000
 800577c:	20006b4c 	.word	0x20006b4c
 8005780:	20005234 	.word	0x20005234
 8005784:	200052b4 	.word	0x200052b4
 8005788:	20006a84 	.word	0x20006a84
 800578c:	200001a8 	.word	0x200001a8
 8005790:	08018a88 	.word	0x08018a88
 8005794:	08005a49 	.word	0x08005a49

08005798 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b08a      	sub	sp, #40	; 0x28
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80057a2:	4b4b      	ldr	r3, [pc, #300]	; (80058d0 <low_level_output+0x138>)
 80057a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80057aa:	2300      	movs	r3, #0
 80057ac:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80057ae:	2300      	movs	r3, #0
 80057b0:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80057b2:	2300      	movs	r3, #0
 80057b4:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80057b6:	2300      	movs	r3, #0
 80057b8:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80057ba:	4b45      	ldr	r3, [pc, #276]	; (80058d0 <low_level_output+0x138>)
 80057bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057be:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80057c0:	2300      	movs	r3, #0
 80057c2:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	623b      	str	r3, [r7, #32]
 80057c8:	e05a      	b.n	8005880 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	da03      	bge.n	80057da <low_level_output+0x42>
      {
        errval = ERR_USE;
 80057d2:	23f8      	movs	r3, #248	; 0xf8
 80057d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80057d8:	e05c      	b.n	8005894 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80057da:	6a3b      	ldr	r3, [r7, #32]
 80057dc:	895b      	ldrh	r3, [r3, #10]
 80057de:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80057e0:	2300      	movs	r3, #0
 80057e2:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80057e4:	e02f      	b.n	8005846 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80057e6:	69fa      	ldr	r2, [r7, #28]
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	18d0      	adds	r0, r2, r3
 80057ec:	6a3b      	ldr	r3, [r7, #32]
 80057ee:	685a      	ldr	r2, [r3, #4]
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	18d1      	adds	r1, r2, r3
 80057f4:	693a      	ldr	r2, [r7, #16]
 80057f6:	f240 53f4 	movw	r3, #1524	; 0x5f4
 80057fa:	1a9b      	subs	r3, r3, r2
 80057fc:	461a      	mov	r2, r3
 80057fe:	f012 f9ba 	bl	8017b76 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8005802:	69bb      	ldr	r3, [r7, #24]
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2b00      	cmp	r3, #0
 800580e:	da03      	bge.n	8005818 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8005810:	23f8      	movs	r3, #248	; 0xf8
 8005812:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8005816:	e03d      	b.n	8005894 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800581e:	693a      	ldr	r2, [r7, #16]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	4413      	add	r3, r2
 8005824:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8005828:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800582a:	68ba      	ldr	r2, [r7, #8]
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005834:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8005836:	697a      	ldr	r2, [r7, #20]
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	1ad3      	subs	r3, r2, r3
 800583c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005840:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8005842:	2300      	movs	r3, #0
 8005844:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	4413      	add	r3, r2
 800584c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005850:	4293      	cmp	r3, r2
 8005852:	d8c8      	bhi.n	80057e6 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8005854:	69fa      	ldr	r2, [r7, #28]
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	18d0      	adds	r0, r2, r3
 800585a:	6a3b      	ldr	r3, [r7, #32]
 800585c:	685a      	ldr	r2, [r3, #4]
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	4413      	add	r3, r2
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	4619      	mov	r1, r3
 8005866:	f012 f986 	bl	8017b76 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800586a:	693a      	ldr	r2, [r7, #16]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	4413      	add	r3, r2
 8005870:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8005872:	697a      	ldr	r2, [r7, #20]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	4413      	add	r3, r2
 8005878:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800587a:	6a3b      	ldr	r3, [r7, #32]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	623b      	str	r3, [r7, #32]
 8005880:	6a3b      	ldr	r3, [r7, #32]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d1a1      	bne.n	80057ca <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8005886:	6979      	ldr	r1, [r7, #20]
 8005888:	4811      	ldr	r0, [pc, #68]	; (80058d0 <low_level_output+0x138>)
 800588a:	f7fb ffef 	bl	800186c <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800588e:	2300      	movs	r3, #0
 8005890:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8005894:	4b0e      	ldr	r3, [pc, #56]	; (80058d0 <low_level_output+0x138>)
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	f241 0314 	movw	r3, #4116	; 0x1014
 800589c:	4413      	add	r3, r2
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0320 	and.w	r3, r3, #32
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d00d      	beq.n	80058c4 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80058a8:	4b09      	ldr	r3, [pc, #36]	; (80058d0 <low_level_output+0x138>)
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	f241 0314 	movw	r3, #4116	; 0x1014
 80058b0:	4413      	add	r3, r2
 80058b2:	2220      	movs	r2, #32
 80058b4:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80058b6:	4b06      	ldr	r3, [pc, #24]	; (80058d0 <low_level_output+0x138>)
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	f241 0304 	movw	r3, #4100	; 0x1004
 80058be:	4413      	add	r3, r2
 80058c0:	2200      	movs	r2, #0
 80058c2:	601a      	str	r2, [r3, #0]
  }
  return errval;
 80058c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3728      	adds	r7, #40	; 0x28
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	20006b04 	.word	0x20006b04

080058d4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b08c      	sub	sp, #48	; 0x30
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80058dc:	2300      	movs	r3, #0
 80058de:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80058e0:	2300      	movs	r3, #0
 80058e2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80058e4:	2300      	movs	r3, #0
 80058e6:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80058e8:	2300      	movs	r3, #0
 80058ea:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80058ec:	2300      	movs	r3, #0
 80058ee:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80058f0:	2300      	movs	r3, #0
 80058f2:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80058f4:	2300      	movs	r3, #0
 80058f6:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 80058f8:	4851      	ldr	r0, [pc, #324]	; (8005a40 <low_level_input+0x16c>)
 80058fa:	f7fc f8a1 	bl	8001a40 <HAL_ETH_GetReceivedFrame_IT>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b00      	cmp	r3, #0
 8005902:	d005      	beq.n	8005910 <low_level_input+0x3c>
  {
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8005904:	2101      	movs	r1, #1
 8005906:	484f      	ldr	r0, [pc, #316]	; (8005a44 <low_level_input+0x170>)
 8005908:	f7fd f889 	bl	8002a1e <HAL_GPIO_TogglePin>
	    return NULL;
 800590c:	2300      	movs	r3, #0
 800590e:	e092      	b.n	8005a36 <low_level_input+0x162>

  }


  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8005910:	4b4b      	ldr	r3, [pc, #300]	; (8005a40 <low_level_input+0x16c>)
 8005912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005914:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8005916:	4b4a      	ldr	r3, [pc, #296]	; (8005a40 <low_level_input+0x16c>)
 8005918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591a:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 800591c:	89fb      	ldrh	r3, [r7, #14]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d007      	beq.n	8005932 <low_level_input+0x5e>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8005922:	89fb      	ldrh	r3, [r7, #14]
 8005924:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8005928:	4619      	mov	r1, r3
 800592a:	2000      	movs	r0, #0
 800592c:	f005 fe18 	bl	800b560 <pbuf_alloc>
 8005930:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8005932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005934:	2b00      	cmp	r3, #0
 8005936:	d04b      	beq.n	80059d0 <low_level_input+0xfc>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8005938:	4b41      	ldr	r3, [pc, #260]	; (8005a40 <low_level_input+0x16c>)
 800593a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800593c:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800593e:	2300      	movs	r3, #0
 8005940:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8005942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005944:	62bb      	str	r3, [r7, #40]	; 0x28
 8005946:	e040      	b.n	80059ca <low_level_input+0xf6>
    {
      byteslefttocopy = q->len;
 8005948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800594a:	895b      	ldrh	r3, [r3, #10]
 800594c:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800594e:	2300      	movs	r3, #0
 8005950:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8005952:	e021      	b.n	8005998 <low_level_input+0xc4>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8005954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005956:	685a      	ldr	r2, [r3, #4]
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	18d0      	adds	r0, r2, r3
 800595c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	18d1      	adds	r1, r2, r3
 8005962:	69fa      	ldr	r2, [r7, #28]
 8005964:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8005968:	1a9b      	subs	r3, r3, r2
 800596a:	461a      	mov	r2, r3
 800596c:	f012 f903 	bl	8017b76 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8005970:	6a3b      	ldr	r3, [r7, #32]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8005976:	6a3b      	ldr	r3, [r7, #32]
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800597c:	69fa      	ldr	r2, [r7, #28]
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	4413      	add	r3, r2
 8005982:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8005986:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8005988:	69ba      	ldr	r2, [r7, #24]
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005992:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8005994:	2300      	movs	r3, #0
 8005996:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8005998:	697a      	ldr	r2, [r7, #20]
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	4413      	add	r3, r2
 800599e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d8d6      	bhi.n	8005954 <low_level_input+0x80>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80059a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a8:	685a      	ldr	r2, [r3, #4]
 80059aa:	69bb      	ldr	r3, [r7, #24]
 80059ac:	18d0      	adds	r0, r2, r3
 80059ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	4413      	add	r3, r2
 80059b4:	697a      	ldr	r2, [r7, #20]
 80059b6:	4619      	mov	r1, r3
 80059b8:	f012 f8dd 	bl	8017b76 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80059bc:	69fa      	ldr	r2, [r7, #28]
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	4413      	add	r3, r2
 80059c2:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80059c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80059ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d1bb      	bne.n	8005948 <low_level_input+0x74>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80059d0:	4b1b      	ldr	r3, [pc, #108]	; (8005a40 <low_level_input+0x16c>)
 80059d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d4:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80059d6:	2300      	movs	r3, #0
 80059d8:	613b      	str	r3, [r7, #16]
 80059da:	e00b      	b.n	80059f4 <low_level_input+0x120>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80059dc:	6a3b      	ldr	r3, [r7, #32]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80059e4:	6a3b      	ldr	r3, [r7, #32]
 80059e6:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80059e8:	6a3b      	ldr	r3, [r7, #32]
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	3301      	adds	r3, #1
 80059f2:	613b      	str	r3, [r7, #16]
 80059f4:	4b12      	ldr	r3, [pc, #72]	; (8005a40 <low_level_input+0x16c>)
 80059f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f8:	693a      	ldr	r2, [r7, #16]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d3ee      	bcc.n	80059dc <low_level_input+0x108>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80059fe:	4b10      	ldr	r3, [pc, #64]	; (8005a40 <low_level_input+0x16c>)
 8005a00:	2200      	movs	r2, #0
 8005a02:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8005a04:	4b0e      	ldr	r3, [pc, #56]	; (8005a40 <low_level_input+0x16c>)
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	f241 0314 	movw	r3, #4116	; 0x1014
 8005a0c:	4413      	add	r3, r2
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d00d      	beq.n	8005a34 <low_level_input+0x160>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8005a18:	4b09      	ldr	r3, [pc, #36]	; (8005a40 <low_level_input+0x16c>)
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	f241 0314 	movw	r3, #4116	; 0x1014
 8005a20:	4413      	add	r3, r2
 8005a22:	2280      	movs	r2, #128	; 0x80
 8005a24:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8005a26:	4b06      	ldr	r3, [pc, #24]	; (8005a40 <low_level_input+0x16c>)
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	f241 0308 	movw	r3, #4104	; 0x1008
 8005a2e:	4413      	add	r3, r2
 8005a30:	2200      	movs	r2, #0
 8005a32:	601a      	str	r2, [r3, #0]
  }
  return p;
 8005a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3730      	adds	r7, #48	; 0x30
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	20006b04 	.word	0x20006b04
 8005a44:	40020400 	.word	0x40020400

08005a48 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b084      	sub	sp, #16
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005a54:	4b12      	ldr	r3, [pc, #72]	; (8005aa0 <ethernetif_input+0x58>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f04f 31ff 	mov.w	r1, #4294967295
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f000 fc6d 	bl	800633c <osSemaphoreAcquire>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d1f5      	bne.n	8005a54 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8005a68:	480e      	ldr	r0, [pc, #56]	; (8005aa4 <ethernetif_input+0x5c>)
 8005a6a:	f00e fadb 	bl	8014024 <sys_mutex_lock>
        p = low_level_input( netif );
 8005a6e:	68f8      	ldr	r0, [r7, #12]
 8005a70:	f7ff ff30 	bl	80058d4 <low_level_input>
 8005a74:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d00a      	beq.n	8005a92 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	691b      	ldr	r3, [r3, #16]
 8005a80:	68f9      	ldr	r1, [r7, #12]
 8005a82:	68b8      	ldr	r0, [r7, #8]
 8005a84:	4798      	blx	r3
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d002      	beq.n	8005a92 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8005a8c:	68b8      	ldr	r0, [r7, #8]
 8005a8e:	f006 f84b 	bl	800bb28 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8005a92:	4804      	ldr	r0, [pc, #16]	; (8005aa4 <ethernetif_input+0x5c>)
 8005a94:	f00e fad5 	bl	8014042 <sys_mutex_unlock>
      } while(p!=NULL);
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d1e4      	bne.n	8005a68 <ethernetif_input+0x20>
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005a9e:	e7d9      	b.n	8005a54 <ethernetif_input+0xc>
 8005aa0:	200001a8 	.word	0x200001a8
 8005aa4:	2000835c 	.word	0x2000835c

08005aa8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b082      	sub	sp, #8
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d106      	bne.n	8005ac4 <ethernetif_init+0x1c>
 8005ab6:	4b0e      	ldr	r3, [pc, #56]	; (8005af0 <ethernetif_init+0x48>)
 8005ab8:	f240 223e 	movw	r2, #574	; 0x23e
 8005abc:	490d      	ldr	r1, [pc, #52]	; (8005af4 <ethernetif_init+0x4c>)
 8005abe:	480e      	ldr	r0, [pc, #56]	; (8005af8 <ethernetif_init+0x50>)
 8005ac0:	f012 fbb8 	bl	8018234 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2273      	movs	r2, #115	; 0x73
 8005ac8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2274      	movs	r2, #116	; 0x74
 8005ad0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4a09      	ldr	r2, [pc, #36]	; (8005afc <ethernetif_init+0x54>)
 8005ad8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a08      	ldr	r2, [pc, #32]	; (8005b00 <ethernetif_init+0x58>)
 8005ade:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f7ff fd85 	bl	80055f0 <low_level_init>

  return ERR_OK;
 8005ae6:	2300      	movs	r3, #0
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3708      	adds	r7, #8
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	08018a90 	.word	0x08018a90
 8005af4:	08018aac 	.word	0x08018aac
 8005af8:	08018abc 	.word	0x08018abc
 8005afc:	0801220d 	.word	0x0801220d
 8005b00:	08005799 	.word	0x08005799

08005b04 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005b08:	f7fb fa9c 	bl	8001044 <HAL_GetTick>
 8005b0c:	4603      	mov	r3, r0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	bd80      	pop	{r7, pc}
	...

08005b14 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void* argument)

{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b084      	sub	sp, #16
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005b24:	f107 0308 	add.w	r3, r7, #8
 8005b28:	461a      	mov	r2, r3
 8005b2a:	2101      	movs	r1, #1
 8005b2c:	4816      	ldr	r0, [pc, #88]	; (8005b88 <ethernetif_set_link+0x74>)
 8005b2e:	f7fc f88a 	bl	8001c46 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	f003 0304 	and.w	r3, r3, #4
 8005b38:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005b42:	f003 0304 	and.w	r3, r3, #4
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d108      	bne.n	8005b5c <ethernetif_set_link+0x48>
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d005      	beq.n	8005b5c <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4618      	mov	r0, r3
 8005b56:	f005 fbd5 	bl	800b304 <netif_set_link_up>
 8005b5a:	e011      	b.n	8005b80 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005b64:	089b      	lsrs	r3, r3, #2
 8005b66:	f003 0301 	and.w	r3, r3, #1
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d007      	beq.n	8005b80 <ethernetif_set_link+0x6c>
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d104      	bne.n	8005b80 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f005 fbf6 	bl	800b36c <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8005b80:	20c8      	movs	r0, #200	; 0xc8
 8005b82:	f000 f9c9 	bl	8005f18 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005b86:	e7cd      	b.n	8005b24 <ethernetif_set_link+0x10>
 8005b88:	20006b04 	.word	0x20006b04

08005b8c <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8005b94:	2300      	movs	r3, #0
 8005b96:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005ba2:	089b      	lsrs	r3, r3, #2
 8005ba4:	f003 0301 	and.w	r3, r3, #1
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d05d      	beq.n	8005c6a <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8005bae:	4b34      	ldr	r3, [pc, #208]	; (8005c80 <ethernetif_update_config+0xf4>)
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d03f      	beq.n	8005c36 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8005bb6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005bba:	2100      	movs	r1, #0
 8005bbc:	4830      	ldr	r0, [pc, #192]	; (8005c80 <ethernetif_update_config+0xf4>)
 8005bbe:	f7fc f8aa 	bl	8001d16 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8005bc2:	f7fb fa3f 	bl	8001044 <HAL_GetTick>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005bca:	f107 0308 	add.w	r3, r7, #8
 8005bce:	461a      	mov	r2, r3
 8005bd0:	2101      	movs	r1, #1
 8005bd2:	482b      	ldr	r0, [pc, #172]	; (8005c80 <ethernetif_update_config+0xf4>)
 8005bd4:	f7fc f837 	bl	8001c46 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8005bd8:	f7fb fa34 	bl	8001044 <HAL_GetTick>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	1ad3      	subs	r3, r2, r3
 8005be2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005be6:	d828      	bhi.n	8005c3a <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	f003 0320 	and.w	r3, r3, #32
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d0eb      	beq.n	8005bca <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8005bf2:	f107 0308 	add.w	r3, r7, #8
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	2110      	movs	r1, #16
 8005bfa:	4821      	ldr	r0, [pc, #132]	; (8005c80 <ethernetif_update_config+0xf4>)
 8005bfc:	f7fc f823 	bl	8001c46 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	f003 0304 	and.w	r3, r3, #4
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d004      	beq.n	8005c14 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8005c0a:	4b1d      	ldr	r3, [pc, #116]	; (8005c80 <ethernetif_update_config+0xf4>)
 8005c0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c10:	60da      	str	r2, [r3, #12]
 8005c12:	e002      	b.n	8005c1a <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8005c14:	4b1a      	ldr	r3, [pc, #104]	; (8005c80 <ethernetif_update_config+0xf4>)
 8005c16:	2200      	movs	r2, #0
 8005c18:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	f003 0302 	and.w	r3, r3, #2
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d003      	beq.n	8005c2c <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8005c24:	4b16      	ldr	r3, [pc, #88]	; (8005c80 <ethernetif_update_config+0xf4>)
 8005c26:	2200      	movs	r2, #0
 8005c28:	609a      	str	r2, [r3, #8]
 8005c2a:	e016      	b.n	8005c5a <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8005c2c:	4b14      	ldr	r3, [pc, #80]	; (8005c80 <ethernetif_update_config+0xf4>)
 8005c2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005c32:	609a      	str	r2, [r3, #8]
 8005c34:	e011      	b.n	8005c5a <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8005c36:	bf00      	nop
 8005c38:	e000      	b.n	8005c3c <ethernetif_update_config+0xb0>
          goto error;
 8005c3a:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005c3c:	4b10      	ldr	r3, [pc, #64]	; (8005c80 <ethernetif_update_config+0xf4>)
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	08db      	lsrs	r3, r3, #3
 8005c42:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8005c44:	4b0e      	ldr	r3, [pc, #56]	; (8005c80 <ethernetif_update_config+0xf4>)
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	085b      	lsrs	r3, r3, #1
 8005c4a:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	461a      	mov	r2, r3
 8005c52:	2100      	movs	r1, #0
 8005c54:	480a      	ldr	r0, [pc, #40]	; (8005c80 <ethernetif_update_config+0xf4>)
 8005c56:	f7fc f85e 	bl	8001d16 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8005c5a:	2100      	movs	r1, #0
 8005c5c:	4808      	ldr	r0, [pc, #32]	; (8005c80 <ethernetif_update_config+0xf4>)
 8005c5e:	f7fc f91f 	bl	8001ea0 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8005c62:	4807      	ldr	r0, [pc, #28]	; (8005c80 <ethernetif_update_config+0xf4>)
 8005c64:	f7fc f8bd 	bl	8001de2 <HAL_ETH_Start>
 8005c68:	e002      	b.n	8005c70 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8005c6a:	4805      	ldr	r0, [pc, #20]	; (8005c80 <ethernetif_update_config+0xf4>)
 8005c6c:	f7fc f8e8 	bl	8001e40 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f000 f807 	bl	8005c84 <ethernetif_notify_conn_changed>
}
 8005c76:	bf00      	nop
 8005c78:	3710      	adds	r7, #16
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	20006b04 	.word	0x20006b04

08005c84 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8005c8c:	bf00      	nop
 8005c8e:	370c      	adds	r7, #12
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005c98:	b480      	push	{r7}
 8005c9a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8005c9c:	bf00      	nop
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
	...

08005ca8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005ca8:	b480      	push	{r7}
 8005caa:	b085      	sub	sp, #20
 8005cac:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cae:	f3ef 8305 	mrs	r3, IPSR
 8005cb2:	60bb      	str	r3, [r7, #8]
  return(result);
 8005cb4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d10f      	bne.n	8005cda <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cba:	f3ef 8310 	mrs	r3, PRIMASK
 8005cbe:	607b      	str	r3, [r7, #4]
  return(result);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d105      	bne.n	8005cd2 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005cc6:	f3ef 8311 	mrs	r3, BASEPRI
 8005cca:	603b      	str	r3, [r7, #0]
  return(result);
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d007      	beq.n	8005ce2 <osKernelInitialize+0x3a>
 8005cd2:	4b0e      	ldr	r3, [pc, #56]	; (8005d0c <osKernelInitialize+0x64>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	2b02      	cmp	r3, #2
 8005cd8:	d103      	bne.n	8005ce2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005cda:	f06f 0305 	mvn.w	r3, #5
 8005cde:	60fb      	str	r3, [r7, #12]
 8005ce0:	e00c      	b.n	8005cfc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005ce2:	4b0a      	ldr	r3, [pc, #40]	; (8005d0c <osKernelInitialize+0x64>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d105      	bne.n	8005cf6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005cea:	4b08      	ldr	r3, [pc, #32]	; (8005d0c <osKernelInitialize+0x64>)
 8005cec:	2201      	movs	r2, #1
 8005cee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	60fb      	str	r3, [r7, #12]
 8005cf4:	e002      	b.n	8005cfc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8005cfa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3714      	adds	r7, #20
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr
 8005d0a:	bf00      	nop
 8005d0c:	200001ac 	.word	0x200001ac

08005d10 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b084      	sub	sp, #16
 8005d14:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d16:	f3ef 8305 	mrs	r3, IPSR
 8005d1a:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d1c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d10f      	bne.n	8005d42 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d22:	f3ef 8310 	mrs	r3, PRIMASK
 8005d26:	607b      	str	r3, [r7, #4]
  return(result);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d105      	bne.n	8005d3a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005d2e:	f3ef 8311 	mrs	r3, BASEPRI
 8005d32:	603b      	str	r3, [r7, #0]
  return(result);
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d007      	beq.n	8005d4a <osKernelStart+0x3a>
 8005d3a:	4b0f      	ldr	r3, [pc, #60]	; (8005d78 <osKernelStart+0x68>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	2b02      	cmp	r3, #2
 8005d40:	d103      	bne.n	8005d4a <osKernelStart+0x3a>
    stat = osErrorISR;
 8005d42:	f06f 0305 	mvn.w	r3, #5
 8005d46:	60fb      	str	r3, [r7, #12]
 8005d48:	e010      	b.n	8005d6c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005d4a:	4b0b      	ldr	r3, [pc, #44]	; (8005d78 <osKernelStart+0x68>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d109      	bne.n	8005d66 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005d52:	f7ff ffa1 	bl	8005c98 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005d56:	4b08      	ldr	r3, [pc, #32]	; (8005d78 <osKernelStart+0x68>)
 8005d58:	2202      	movs	r2, #2
 8005d5a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005d5c:	f002 fac8 	bl	80082f0 <vTaskStartScheduler>
      stat = osOK;
 8005d60:	2300      	movs	r3, #0
 8005d62:	60fb      	str	r3, [r7, #12]
 8005d64:	e002      	b.n	8005d6c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8005d66:	f04f 33ff 	mov.w	r3, #4294967295
 8005d6a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3710      	adds	r7, #16
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	200001ac 	.word	0x200001ac

08005d7c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b084      	sub	sp, #16
 8005d80:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d82:	f3ef 8305 	mrs	r3, IPSR
 8005d86:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d88:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d10f      	bne.n	8005dae <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d8e:	f3ef 8310 	mrs	r3, PRIMASK
 8005d92:	607b      	str	r3, [r7, #4]
  return(result);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d105      	bne.n	8005da6 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005d9a:	f3ef 8311 	mrs	r3, BASEPRI
 8005d9e:	603b      	str	r3, [r7, #0]
  return(result);
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d007      	beq.n	8005db6 <osKernelGetTickCount+0x3a>
 8005da6:	4b08      	ldr	r3, [pc, #32]	; (8005dc8 <osKernelGetTickCount+0x4c>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d103      	bne.n	8005db6 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8005dae:	f002 fbd1 	bl	8008554 <xTaskGetTickCountFromISR>
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	e002      	b.n	8005dbc <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8005db6:	f002 fbbd 	bl	8008534 <xTaskGetTickCount>
 8005dba:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3710      	adds	r7, #16
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop
 8005dc8:	200001ac 	.word	0x200001ac

08005dcc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b090      	sub	sp, #64	; 0x40
 8005dd0:	af04      	add	r7, sp, #16
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ddc:	f3ef 8305 	mrs	r3, IPSR
 8005de0:	61fb      	str	r3, [r7, #28]
  return(result);
 8005de2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	f040 808f 	bne.w	8005f08 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dea:	f3ef 8310 	mrs	r3, PRIMASK
 8005dee:	61bb      	str	r3, [r7, #24]
  return(result);
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d105      	bne.n	8005e02 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005df6:	f3ef 8311 	mrs	r3, BASEPRI
 8005dfa:	617b      	str	r3, [r7, #20]
  return(result);
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d003      	beq.n	8005e0a <osThreadNew+0x3e>
 8005e02:	4b44      	ldr	r3, [pc, #272]	; (8005f14 <osThreadNew+0x148>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	2b02      	cmp	r3, #2
 8005e08:	d07e      	beq.n	8005f08 <osThreadNew+0x13c>
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d07b      	beq.n	8005f08 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8005e10:	2380      	movs	r3, #128	; 0x80
 8005e12:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005e14:	2318      	movs	r3, #24
 8005e16:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8005e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8005e20:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d045      	beq.n	8005eb4 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d002      	beq.n	8005e36 <osThreadNew+0x6a>
        name = attr->name;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	699b      	ldr	r3, [r3, #24]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d002      	beq.n	8005e44 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	699b      	ldr	r3, [r3, #24]
 8005e42:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d008      	beq.n	8005e5c <osThreadNew+0x90>
 8005e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4c:	2b38      	cmp	r3, #56	; 0x38
 8005e4e:	d805      	bhi.n	8005e5c <osThreadNew+0x90>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	f003 0301 	and.w	r3, r3, #1
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d001      	beq.n	8005e60 <osThreadNew+0x94>
        return (NULL);
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	e054      	b.n	8005f0a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	695b      	ldr	r3, [r3, #20]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d003      	beq.n	8005e70 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	695b      	ldr	r3, [r3, #20]
 8005e6c:	089b      	lsrs	r3, r3, #2
 8005e6e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d00e      	beq.n	8005e96 <osThreadNew+0xca>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	2bbb      	cmp	r3, #187	; 0xbb
 8005e7e:	d90a      	bls.n	8005e96 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d006      	beq.n	8005e96 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	695b      	ldr	r3, [r3, #20]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d002      	beq.n	8005e96 <osThreadNew+0xca>
        mem = 1;
 8005e90:	2301      	movs	r3, #1
 8005e92:	623b      	str	r3, [r7, #32]
 8005e94:	e010      	b.n	8005eb8 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d10c      	bne.n	8005eb8 <osThreadNew+0xec>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d108      	bne.n	8005eb8 <osThreadNew+0xec>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d104      	bne.n	8005eb8 <osThreadNew+0xec>
          mem = 0;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	623b      	str	r3, [r7, #32]
 8005eb2:	e001      	b.n	8005eb8 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005eb8:	6a3b      	ldr	r3, [r7, #32]
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d110      	bne.n	8005ee0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005ec6:	9202      	str	r2, [sp, #8]
 8005ec8:	9301      	str	r3, [sp, #4]
 8005eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ecc:	9300      	str	r3, [sp, #0]
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ed2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ed4:	68f8      	ldr	r0, [r7, #12]
 8005ed6:	f002 f815 	bl	8007f04 <xTaskCreateStatic>
 8005eda:	4603      	mov	r3, r0
 8005edc:	613b      	str	r3, [r7, #16]
 8005ede:	e013      	b.n	8005f08 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8005ee0:	6a3b      	ldr	r3, [r7, #32]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d110      	bne.n	8005f08 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee8:	b29a      	uxth	r2, r3
 8005eea:	f107 0310 	add.w	r3, r7, #16
 8005eee:	9301      	str	r3, [sp, #4]
 8005ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef2:	9300      	str	r3, [sp, #0]
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ef8:	68f8      	ldr	r0, [r7, #12]
 8005efa:	f002 f866 	bl	8007fca <xTaskCreate>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d001      	beq.n	8005f08 <osThreadNew+0x13c>
          hTask = NULL;
 8005f04:	2300      	movs	r3, #0
 8005f06:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005f08:	693b      	ldr	r3, [r7, #16]
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3730      	adds	r7, #48	; 0x30
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	200001ac 	.word	0x200001ac

08005f18 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b086      	sub	sp, #24
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f20:	f3ef 8305 	mrs	r3, IPSR
 8005f24:	613b      	str	r3, [r7, #16]
  return(result);
 8005f26:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d10f      	bne.n	8005f4c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f2c:	f3ef 8310 	mrs	r3, PRIMASK
 8005f30:	60fb      	str	r3, [r7, #12]
  return(result);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d105      	bne.n	8005f44 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005f38:	f3ef 8311 	mrs	r3, BASEPRI
 8005f3c:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d007      	beq.n	8005f54 <osDelay+0x3c>
 8005f44:	4b0a      	ldr	r3, [pc, #40]	; (8005f70 <osDelay+0x58>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	d103      	bne.n	8005f54 <osDelay+0x3c>
    stat = osErrorISR;
 8005f4c:	f06f 0305 	mvn.w	r3, #5
 8005f50:	617b      	str	r3, [r7, #20]
 8005f52:	e007      	b.n	8005f64 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005f54:	2300      	movs	r3, #0
 8005f56:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d002      	beq.n	8005f64 <osDelay+0x4c>
      vTaskDelay(ticks);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f002 f990 	bl	8008284 <vTaskDelay>
    }
  }

  return (stat);
 8005f64:	697b      	ldr	r3, [r7, #20]
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3718      	adds	r7, #24
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	200001ac 	.word	0x200001ac

08005f74 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b08a      	sub	sp, #40	; 0x28
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f80:	f3ef 8305 	mrs	r3, IPSR
 8005f84:	613b      	str	r3, [r7, #16]
  return(result);
 8005f86:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	f040 8085 	bne.w	8006098 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f8e:	f3ef 8310 	mrs	r3, PRIMASK
 8005f92:	60fb      	str	r3, [r7, #12]
  return(result);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d105      	bne.n	8005fa6 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005f9a:	f3ef 8311 	mrs	r3, BASEPRI
 8005f9e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d003      	beq.n	8005fae <osMutexNew+0x3a>
 8005fa6:	4b3f      	ldr	r3, [pc, #252]	; (80060a4 <osMutexNew+0x130>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	d074      	beq.n	8006098 <osMutexNew+0x124>
    if (attr != NULL) {
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d003      	beq.n	8005fbc <osMutexNew+0x48>
      type = attr->attr_bits;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	623b      	str	r3, [r7, #32]
 8005fba:	e001      	b.n	8005fc0 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005fc0:	6a3b      	ldr	r3, [r7, #32]
 8005fc2:	f003 0301 	and.w	r3, r3, #1
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d002      	beq.n	8005fd0 <osMutexNew+0x5c>
      rmtx = 1U;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	61fb      	str	r3, [r7, #28]
 8005fce:	e001      	b.n	8005fd4 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8005fd4:	6a3b      	ldr	r3, [r7, #32]
 8005fd6:	f003 0308 	and.w	r3, r3, #8
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d15c      	bne.n	8006098 <osMutexNew+0x124>
      mem = -1;
 8005fde:	f04f 33ff 	mov.w	r3, #4294967295
 8005fe2:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d015      	beq.n	8006016 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d006      	beq.n	8006000 <osMutexNew+0x8c>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	2b4f      	cmp	r3, #79	; 0x4f
 8005ff8:	d902      	bls.n	8006000 <osMutexNew+0x8c>
          mem = 1;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	61bb      	str	r3, [r7, #24]
 8005ffe:	e00c      	b.n	800601a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d108      	bne.n	800601a <osMutexNew+0xa6>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d104      	bne.n	800601a <osMutexNew+0xa6>
            mem = 0;
 8006010:	2300      	movs	r3, #0
 8006012:	61bb      	str	r3, [r7, #24]
 8006014:	e001      	b.n	800601a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8006016:	2300      	movs	r3, #0
 8006018:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	2b01      	cmp	r3, #1
 800601e:	d112      	bne.n	8006046 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8006020:	69fb      	ldr	r3, [r7, #28]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d007      	beq.n	8006036 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	4619      	mov	r1, r3
 800602c:	2004      	movs	r0, #4
 800602e:	f000 ffdc 	bl	8006fea <xQueueCreateMutexStatic>
 8006032:	6278      	str	r0, [r7, #36]	; 0x24
 8006034:	e016      	b.n	8006064 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	4619      	mov	r1, r3
 800603c:	2001      	movs	r0, #1
 800603e:	f000 ffd4 	bl	8006fea <xQueueCreateMutexStatic>
 8006042:	6278      	str	r0, [r7, #36]	; 0x24
 8006044:	e00e      	b.n	8006064 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d10b      	bne.n	8006064 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800604c:	69fb      	ldr	r3, [r7, #28]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d004      	beq.n	800605c <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8006052:	2004      	movs	r0, #4
 8006054:	f000 ffb1 	bl	8006fba <xQueueCreateMutex>
 8006058:	6278      	str	r0, [r7, #36]	; 0x24
 800605a:	e003      	b.n	8006064 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800605c:	2001      	movs	r0, #1
 800605e:	f000 ffac 	bl	8006fba <xQueueCreateMutex>
 8006062:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8006064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006066:	2b00      	cmp	r3, #0
 8006068:	d00c      	beq.n	8006084 <osMutexNew+0x110>
        if (attr != NULL) {
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d003      	beq.n	8006078 <osMutexNew+0x104>
          name = attr->name;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	617b      	str	r3, [r7, #20]
 8006076:	e001      	b.n	800607c <osMutexNew+0x108>
        } else {
          name = NULL;
 8006078:	2300      	movs	r3, #0
 800607a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800607c:	6979      	ldr	r1, [r7, #20]
 800607e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006080:	f001 feb8 	bl	8007df4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006086:	2b00      	cmp	r3, #0
 8006088:	d006      	beq.n	8006098 <osMutexNew+0x124>
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d003      	beq.n	8006098 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006092:	f043 0301 	orr.w	r3, r3, #1
 8006096:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8006098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800609a:	4618      	mov	r0, r3
 800609c:	3728      	adds	r7, #40	; 0x28
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	200001ac 	.word	0x200001ac

080060a8 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b088      	sub	sp, #32
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f023 0301 	bic.w	r3, r3, #1
 80060b8:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f003 0301 	and.w	r3, r3, #1
 80060c0:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80060c2:	2300      	movs	r3, #0
 80060c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060c6:	f3ef 8305 	mrs	r3, IPSR
 80060ca:	613b      	str	r3, [r7, #16]
  return(result);
 80060cc:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d10f      	bne.n	80060f2 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060d2:	f3ef 8310 	mrs	r3, PRIMASK
 80060d6:	60fb      	str	r3, [r7, #12]
  return(result);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d105      	bne.n	80060ea <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80060de:	f3ef 8311 	mrs	r3, BASEPRI
 80060e2:	60bb      	str	r3, [r7, #8]
  return(result);
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d007      	beq.n	80060fa <osMutexAcquire+0x52>
 80060ea:	4b1d      	ldr	r3, [pc, #116]	; (8006160 <osMutexAcquire+0xb8>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2b02      	cmp	r3, #2
 80060f0:	d103      	bne.n	80060fa <osMutexAcquire+0x52>
    stat = osErrorISR;
 80060f2:	f06f 0305 	mvn.w	r3, #5
 80060f6:	61fb      	str	r3, [r7, #28]
 80060f8:	e02c      	b.n	8006154 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 80060fa:	69bb      	ldr	r3, [r7, #24]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d103      	bne.n	8006108 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8006100:	f06f 0303 	mvn.w	r3, #3
 8006104:	61fb      	str	r3, [r7, #28]
 8006106:	e025      	b.n	8006154 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d011      	beq.n	8006132 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800610e:	6839      	ldr	r1, [r7, #0]
 8006110:	69b8      	ldr	r0, [r7, #24]
 8006112:	f000 ffbb 	bl	800708c <xQueueTakeMutexRecursive>
 8006116:	4603      	mov	r3, r0
 8006118:	2b01      	cmp	r3, #1
 800611a:	d01b      	beq.n	8006154 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d003      	beq.n	800612a <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8006122:	f06f 0301 	mvn.w	r3, #1
 8006126:	61fb      	str	r3, [r7, #28]
 8006128:	e014      	b.n	8006154 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800612a:	f06f 0302 	mvn.w	r3, #2
 800612e:	61fb      	str	r3, [r7, #28]
 8006130:	e010      	b.n	8006154 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8006132:	6839      	ldr	r1, [r7, #0]
 8006134:	69b8      	ldr	r0, [r7, #24]
 8006136:	f001 fb75 	bl	8007824 <xQueueSemaphoreTake>
 800613a:	4603      	mov	r3, r0
 800613c:	2b01      	cmp	r3, #1
 800613e:	d009      	beq.n	8006154 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d003      	beq.n	800614e <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8006146:	f06f 0301 	mvn.w	r3, #1
 800614a:	61fb      	str	r3, [r7, #28]
 800614c:	e002      	b.n	8006154 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800614e:	f06f 0302 	mvn.w	r3, #2
 8006152:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006154:	69fb      	ldr	r3, [r7, #28]
}
 8006156:	4618      	mov	r0, r3
 8006158:	3720      	adds	r7, #32
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
 800615e:	bf00      	nop
 8006160:	200001ac 	.word	0x200001ac

08006164 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006164:	b580      	push	{r7, lr}
 8006166:	b088      	sub	sp, #32
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f023 0301 	bic.w	r3, r3, #1
 8006172:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f003 0301 	and.w	r3, r3, #1
 800617a:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800617c:	2300      	movs	r3, #0
 800617e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006180:	f3ef 8305 	mrs	r3, IPSR
 8006184:	613b      	str	r3, [r7, #16]
  return(result);
 8006186:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8006188:	2b00      	cmp	r3, #0
 800618a:	d10f      	bne.n	80061ac <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800618c:	f3ef 8310 	mrs	r3, PRIMASK
 8006190:	60fb      	str	r3, [r7, #12]
  return(result);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d105      	bne.n	80061a4 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006198:	f3ef 8311 	mrs	r3, BASEPRI
 800619c:	60bb      	str	r3, [r7, #8]
  return(result);
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d007      	beq.n	80061b4 <osMutexRelease+0x50>
 80061a4:	4b16      	ldr	r3, [pc, #88]	; (8006200 <osMutexRelease+0x9c>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	2b02      	cmp	r3, #2
 80061aa:	d103      	bne.n	80061b4 <osMutexRelease+0x50>
    stat = osErrorISR;
 80061ac:	f06f 0305 	mvn.w	r3, #5
 80061b0:	61fb      	str	r3, [r7, #28]
 80061b2:	e01f      	b.n	80061f4 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d103      	bne.n	80061c2 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 80061ba:	f06f 0303 	mvn.w	r3, #3
 80061be:	61fb      	str	r3, [r7, #28]
 80061c0:	e018      	b.n	80061f4 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d009      	beq.n	80061dc <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80061c8:	69b8      	ldr	r0, [r7, #24]
 80061ca:	f000 ff29 	bl	8007020 <xQueueGiveMutexRecursive>
 80061ce:	4603      	mov	r3, r0
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d00f      	beq.n	80061f4 <osMutexRelease+0x90>
        stat = osErrorResource;
 80061d4:	f06f 0302 	mvn.w	r3, #2
 80061d8:	61fb      	str	r3, [r7, #28]
 80061da:	e00b      	b.n	80061f4 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80061dc:	2300      	movs	r3, #0
 80061de:	2200      	movs	r2, #0
 80061e0:	2100      	movs	r1, #0
 80061e2:	69b8      	ldr	r0, [r7, #24]
 80061e4:	f000 fffc 	bl	80071e0 <xQueueGenericSend>
 80061e8:	4603      	mov	r3, r0
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d002      	beq.n	80061f4 <osMutexRelease+0x90>
        stat = osErrorResource;
 80061ee:	f06f 0302 	mvn.w	r3, #2
 80061f2:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 80061f4:	69fb      	ldr	r3, [r7, #28]
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3720      	adds	r7, #32
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	200001ac 	.word	0x200001ac

08006204 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006204:	b580      	push	{r7, lr}
 8006206:	b08c      	sub	sp, #48	; 0x30
 8006208:	af02      	add	r7, sp, #8
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8006210:	2300      	movs	r3, #0
 8006212:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006214:	f3ef 8305 	mrs	r3, IPSR
 8006218:	61bb      	str	r3, [r7, #24]
  return(result);
 800621a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800621c:	2b00      	cmp	r3, #0
 800621e:	f040 8086 	bne.w	800632e <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006222:	f3ef 8310 	mrs	r3, PRIMASK
 8006226:	617b      	str	r3, [r7, #20]
  return(result);
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d105      	bne.n	800623a <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800622e:	f3ef 8311 	mrs	r3, BASEPRI
 8006232:	613b      	str	r3, [r7, #16]
  return(result);
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d003      	beq.n	8006242 <osSemaphoreNew+0x3e>
 800623a:	4b3f      	ldr	r3, [pc, #252]	; (8006338 <osSemaphoreNew+0x134>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	2b02      	cmp	r3, #2
 8006240:	d075      	beq.n	800632e <osSemaphoreNew+0x12a>
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d072      	beq.n	800632e <osSemaphoreNew+0x12a>
 8006248:	68ba      	ldr	r2, [r7, #8]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	429a      	cmp	r2, r3
 800624e:	d86e      	bhi.n	800632e <osSemaphoreNew+0x12a>
    mem = -1;
 8006250:	f04f 33ff 	mov.w	r3, #4294967295
 8006254:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d015      	beq.n	8006288 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d006      	beq.n	8006272 <osSemaphoreNew+0x6e>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	2b4f      	cmp	r3, #79	; 0x4f
 800626a:	d902      	bls.n	8006272 <osSemaphoreNew+0x6e>
        mem = 1;
 800626c:	2301      	movs	r3, #1
 800626e:	623b      	str	r3, [r7, #32]
 8006270:	e00c      	b.n	800628c <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d108      	bne.n	800628c <osSemaphoreNew+0x88>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d104      	bne.n	800628c <osSemaphoreNew+0x88>
          mem = 0;
 8006282:	2300      	movs	r3, #0
 8006284:	623b      	str	r3, [r7, #32]
 8006286:	e001      	b.n	800628c <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8006288:	2300      	movs	r3, #0
 800628a:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800628c:	6a3b      	ldr	r3, [r7, #32]
 800628e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006292:	d04c      	beq.n	800632e <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2b01      	cmp	r3, #1
 8006298:	d128      	bne.n	80062ec <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800629a:	6a3b      	ldr	r3, [r7, #32]
 800629c:	2b01      	cmp	r3, #1
 800629e:	d10a      	bne.n	80062b6 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	2203      	movs	r2, #3
 80062a6:	9200      	str	r2, [sp, #0]
 80062a8:	2200      	movs	r2, #0
 80062aa:	2100      	movs	r1, #0
 80062ac:	2001      	movs	r0, #1
 80062ae:	f000 fd83 	bl	8006db8 <xQueueGenericCreateStatic>
 80062b2:	6278      	str	r0, [r7, #36]	; 0x24
 80062b4:	e005      	b.n	80062c2 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80062b6:	2203      	movs	r2, #3
 80062b8:	2100      	movs	r1, #0
 80062ba:	2001      	movs	r0, #1
 80062bc:	f000 fdfe 	bl	8006ebc <xQueueGenericCreate>
 80062c0:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80062c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d022      	beq.n	800630e <osSemaphoreNew+0x10a>
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d01f      	beq.n	800630e <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80062ce:	2300      	movs	r3, #0
 80062d0:	2200      	movs	r2, #0
 80062d2:	2100      	movs	r1, #0
 80062d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80062d6:	f000 ff83 	bl	80071e0 <xQueueGenericSend>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d016      	beq.n	800630e <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 80062e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80062e2:	f001 fc39 	bl	8007b58 <vQueueDelete>
            hSemaphore = NULL;
 80062e6:	2300      	movs	r3, #0
 80062e8:	627b      	str	r3, [r7, #36]	; 0x24
 80062ea:	e010      	b.n	800630e <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 80062ec:	6a3b      	ldr	r3, [r7, #32]
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d108      	bne.n	8006304 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	461a      	mov	r2, r3
 80062f8:	68b9      	ldr	r1, [r7, #8]
 80062fa:	68f8      	ldr	r0, [r7, #12]
 80062fc:	f000 fefe 	bl	80070fc <xQueueCreateCountingSemaphoreStatic>
 8006300:	6278      	str	r0, [r7, #36]	; 0x24
 8006302:	e004      	b.n	800630e <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006304:	68b9      	ldr	r1, [r7, #8]
 8006306:	68f8      	ldr	r0, [r7, #12]
 8006308:	f000 ff33 	bl	8007172 <xQueueCreateCountingSemaphore>
 800630c:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800630e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006310:	2b00      	cmp	r3, #0
 8006312:	d00c      	beq.n	800632e <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d003      	beq.n	8006322 <osSemaphoreNew+0x11e>
          name = attr->name;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	61fb      	str	r3, [r7, #28]
 8006320:	e001      	b.n	8006326 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8006322:	2300      	movs	r3, #0
 8006324:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8006326:	69f9      	ldr	r1, [r7, #28]
 8006328:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800632a:	f001 fd63 	bl	8007df4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800632e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006330:	4618      	mov	r0, r3
 8006332:	3728      	adds	r7, #40	; 0x28
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}
 8006338:	200001ac 	.word	0x200001ac

0800633c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800633c:	b580      	push	{r7, lr}
 800633e:	b088      	sub	sp, #32
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800634a:	2300      	movs	r3, #0
 800634c:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800634e:	69bb      	ldr	r3, [r7, #24]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d103      	bne.n	800635c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8006354:	f06f 0303 	mvn.w	r3, #3
 8006358:	61fb      	str	r3, [r7, #28]
 800635a:	e04b      	b.n	80063f4 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800635c:	f3ef 8305 	mrs	r3, IPSR
 8006360:	617b      	str	r3, [r7, #20]
  return(result);
 8006362:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006364:	2b00      	cmp	r3, #0
 8006366:	d10f      	bne.n	8006388 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006368:	f3ef 8310 	mrs	r3, PRIMASK
 800636c:	613b      	str	r3, [r7, #16]
  return(result);
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d105      	bne.n	8006380 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006374:	f3ef 8311 	mrs	r3, BASEPRI
 8006378:	60fb      	str	r3, [r7, #12]
  return(result);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d026      	beq.n	80063ce <osSemaphoreAcquire+0x92>
 8006380:	4b1f      	ldr	r3, [pc, #124]	; (8006400 <osSemaphoreAcquire+0xc4>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2b02      	cmp	r3, #2
 8006386:	d122      	bne.n	80063ce <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d003      	beq.n	8006396 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800638e:	f06f 0303 	mvn.w	r3, #3
 8006392:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8006394:	e02d      	b.n	80063f2 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8006396:	2300      	movs	r3, #0
 8006398:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800639a:	f107 0308 	add.w	r3, r7, #8
 800639e:	461a      	mov	r2, r3
 80063a0:	2100      	movs	r1, #0
 80063a2:	69b8      	ldr	r0, [r7, #24]
 80063a4:	f001 fb52 	bl	8007a4c <xQueueReceiveFromISR>
 80063a8:	4603      	mov	r3, r0
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d003      	beq.n	80063b6 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 80063ae:	f06f 0302 	mvn.w	r3, #2
 80063b2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80063b4:	e01d      	b.n	80063f2 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d01a      	beq.n	80063f2 <osSemaphoreAcquire+0xb6>
 80063bc:	4b11      	ldr	r3, [pc, #68]	; (8006404 <osSemaphoreAcquire+0xc8>)
 80063be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063c2:	601a      	str	r2, [r3, #0]
 80063c4:	f3bf 8f4f 	dsb	sy
 80063c8:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 80063cc:	e011      	b.n	80063f2 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80063ce:	6839      	ldr	r1, [r7, #0]
 80063d0:	69b8      	ldr	r0, [r7, #24]
 80063d2:	f001 fa27 	bl	8007824 <xQueueSemaphoreTake>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d00b      	beq.n	80063f4 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d003      	beq.n	80063ea <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 80063e2:	f06f 0301 	mvn.w	r3, #1
 80063e6:	61fb      	str	r3, [r7, #28]
 80063e8:	e004      	b.n	80063f4 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 80063ea:	f06f 0302 	mvn.w	r3, #2
 80063ee:	61fb      	str	r3, [r7, #28]
 80063f0:	e000      	b.n	80063f4 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 80063f2:	bf00      	nop
      }
    }
  }

  return (stat);
 80063f4:	69fb      	ldr	r3, [r7, #28]
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3720      	adds	r7, #32
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
 80063fe:	bf00      	nop
 8006400:	200001ac 	.word	0x200001ac
 8006404:	e000ed04 	.word	0xe000ed04

08006408 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006408:	b580      	push	{r7, lr}
 800640a:	b088      	sub	sp, #32
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006414:	2300      	movs	r3, #0
 8006416:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d103      	bne.n	8006426 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800641e:	f06f 0303 	mvn.w	r3, #3
 8006422:	61fb      	str	r3, [r7, #28]
 8006424:	e03e      	b.n	80064a4 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006426:	f3ef 8305 	mrs	r3, IPSR
 800642a:	617b      	str	r3, [r7, #20]
  return(result);
 800642c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800642e:	2b00      	cmp	r3, #0
 8006430:	d10f      	bne.n	8006452 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006432:	f3ef 8310 	mrs	r3, PRIMASK
 8006436:	613b      	str	r3, [r7, #16]
  return(result);
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d105      	bne.n	800644a <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800643e:	f3ef 8311 	mrs	r3, BASEPRI
 8006442:	60fb      	str	r3, [r7, #12]
  return(result);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d01e      	beq.n	8006488 <osSemaphoreRelease+0x80>
 800644a:	4b19      	ldr	r3, [pc, #100]	; (80064b0 <osSemaphoreRelease+0xa8>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	2b02      	cmp	r3, #2
 8006450:	d11a      	bne.n	8006488 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8006452:	2300      	movs	r3, #0
 8006454:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006456:	f107 0308 	add.w	r3, r7, #8
 800645a:	4619      	mov	r1, r3
 800645c:	69b8      	ldr	r0, [r7, #24]
 800645e:	f001 f865 	bl	800752c <xQueueGiveFromISR>
 8006462:	4603      	mov	r3, r0
 8006464:	2b01      	cmp	r3, #1
 8006466:	d003      	beq.n	8006470 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8006468:	f06f 0302 	mvn.w	r3, #2
 800646c:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800646e:	e018      	b.n	80064a2 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d015      	beq.n	80064a2 <osSemaphoreRelease+0x9a>
 8006476:	4b0f      	ldr	r3, [pc, #60]	; (80064b4 <osSemaphoreRelease+0xac>)
 8006478:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800647c:	601a      	str	r2, [r3, #0]
 800647e:	f3bf 8f4f 	dsb	sy
 8006482:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006486:	e00c      	b.n	80064a2 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006488:	2300      	movs	r3, #0
 800648a:	2200      	movs	r2, #0
 800648c:	2100      	movs	r1, #0
 800648e:	69b8      	ldr	r0, [r7, #24]
 8006490:	f000 fea6 	bl	80071e0 <xQueueGenericSend>
 8006494:	4603      	mov	r3, r0
 8006496:	2b01      	cmp	r3, #1
 8006498:	d004      	beq.n	80064a4 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800649a:	f06f 0302 	mvn.w	r3, #2
 800649e:	61fb      	str	r3, [r7, #28]
 80064a0:	e000      	b.n	80064a4 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80064a2:	bf00      	nop
    }
  }

  return (stat);
 80064a4:	69fb      	ldr	r3, [r7, #28]
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3720      	adds	r7, #32
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	bf00      	nop
 80064b0:	200001ac 	.word	0x200001ac
 80064b4:	e000ed04 	.word	0xe000ed04

080064b8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b08c      	sub	sp, #48	; 0x30
 80064bc:	af02      	add	r7, sp, #8
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	60b9      	str	r1, [r7, #8]
 80064c2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80064c4:	2300      	movs	r3, #0
 80064c6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064c8:	f3ef 8305 	mrs	r3, IPSR
 80064cc:	61bb      	str	r3, [r7, #24]
  return(result);
 80064ce:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d16f      	bne.n	80065b4 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064d4:	f3ef 8310 	mrs	r3, PRIMASK
 80064d8:	617b      	str	r3, [r7, #20]
  return(result);
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d105      	bne.n	80064ec <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80064e0:	f3ef 8311 	mrs	r3, BASEPRI
 80064e4:	613b      	str	r3, [r7, #16]
  return(result);
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d003      	beq.n	80064f4 <osMessageQueueNew+0x3c>
 80064ec:	4b34      	ldr	r3, [pc, #208]	; (80065c0 <osMessageQueueNew+0x108>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	2b02      	cmp	r3, #2
 80064f2:	d05f      	beq.n	80065b4 <osMessageQueueNew+0xfc>
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d05c      	beq.n	80065b4 <osMessageQueueNew+0xfc>
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d059      	beq.n	80065b4 <osMessageQueueNew+0xfc>
    mem = -1;
 8006500:	f04f 33ff 	mov.w	r3, #4294967295
 8006504:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d029      	beq.n	8006560 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d012      	beq.n	800653a <osMessageQueueNew+0x82>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	2b4f      	cmp	r3, #79	; 0x4f
 800651a:	d90e      	bls.n	800653a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006520:	2b00      	cmp	r3, #0
 8006522:	d00a      	beq.n	800653a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	695a      	ldr	r2, [r3, #20]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	68b9      	ldr	r1, [r7, #8]
 800652c:	fb01 f303 	mul.w	r3, r1, r3
 8006530:	429a      	cmp	r2, r3
 8006532:	d302      	bcc.n	800653a <osMessageQueueNew+0x82>
        mem = 1;
 8006534:	2301      	movs	r3, #1
 8006536:	623b      	str	r3, [r7, #32]
 8006538:	e014      	b.n	8006564 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d110      	bne.n	8006564 <osMessageQueueNew+0xac>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	68db      	ldr	r3, [r3, #12]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d10c      	bne.n	8006564 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800654e:	2b00      	cmp	r3, #0
 8006550:	d108      	bne.n	8006564 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	695b      	ldr	r3, [r3, #20]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d104      	bne.n	8006564 <osMessageQueueNew+0xac>
          mem = 0;
 800655a:	2300      	movs	r3, #0
 800655c:	623b      	str	r3, [r7, #32]
 800655e:	e001      	b.n	8006564 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8006560:	2300      	movs	r3, #0
 8006562:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006564:	6a3b      	ldr	r3, [r7, #32]
 8006566:	2b01      	cmp	r3, #1
 8006568:	d10b      	bne.n	8006582 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	691a      	ldr	r2, [r3, #16]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	2100      	movs	r1, #0
 8006574:	9100      	str	r1, [sp, #0]
 8006576:	68b9      	ldr	r1, [r7, #8]
 8006578:	68f8      	ldr	r0, [r7, #12]
 800657a:	f000 fc1d 	bl	8006db8 <xQueueGenericCreateStatic>
 800657e:	6278      	str	r0, [r7, #36]	; 0x24
 8006580:	e008      	b.n	8006594 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8006582:	6a3b      	ldr	r3, [r7, #32]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d105      	bne.n	8006594 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8006588:	2200      	movs	r2, #0
 800658a:	68b9      	ldr	r1, [r7, #8]
 800658c:	68f8      	ldr	r0, [r7, #12]
 800658e:	f000 fc95 	bl	8006ebc <xQueueGenericCreate>
 8006592:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006596:	2b00      	cmp	r3, #0
 8006598:	d00c      	beq.n	80065b4 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d003      	beq.n	80065a8 <osMessageQueueNew+0xf0>
        name = attr->name;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	61fb      	str	r3, [r7, #28]
 80065a6:	e001      	b.n	80065ac <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 80065a8:	2300      	movs	r3, #0
 80065aa:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80065ac:	69f9      	ldr	r1, [r7, #28]
 80065ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80065b0:	f001 fc20 	bl	8007df4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80065b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3728      	adds	r7, #40	; 0x28
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop
 80065c0:	200001ac 	.word	0x200001ac

080065c4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b08a      	sub	sp, #40	; 0x28
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	60b9      	str	r1, [r7, #8]
 80065ce:	603b      	str	r3, [r7, #0]
 80065d0:	4613      	mov	r3, r2
 80065d2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80065d8:	2300      	movs	r3, #0
 80065da:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065dc:	f3ef 8305 	mrs	r3, IPSR
 80065e0:	61fb      	str	r3, [r7, #28]
  return(result);
 80065e2:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d10f      	bne.n	8006608 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065e8:	f3ef 8310 	mrs	r3, PRIMASK
 80065ec:	61bb      	str	r3, [r7, #24]
  return(result);
 80065ee:	69bb      	ldr	r3, [r7, #24]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d105      	bne.n	8006600 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80065f4:	f3ef 8311 	mrs	r3, BASEPRI
 80065f8:	617b      	str	r3, [r7, #20]
  return(result);
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d02c      	beq.n	800665a <osMessageQueuePut+0x96>
 8006600:	4b28      	ldr	r3, [pc, #160]	; (80066a4 <osMessageQueuePut+0xe0>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	2b02      	cmp	r3, #2
 8006606:	d128      	bne.n	800665a <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006608:	6a3b      	ldr	r3, [r7, #32]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d005      	beq.n	800661a <osMessageQueuePut+0x56>
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d002      	beq.n	800661a <osMessageQueuePut+0x56>
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d003      	beq.n	8006622 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800661a:	f06f 0303 	mvn.w	r3, #3
 800661e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006620:	e039      	b.n	8006696 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8006622:	2300      	movs	r3, #0
 8006624:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006626:	f107 0210 	add.w	r2, r7, #16
 800662a:	2300      	movs	r3, #0
 800662c:	68b9      	ldr	r1, [r7, #8]
 800662e:	6a38      	ldr	r0, [r7, #32]
 8006630:	f000 fedc 	bl	80073ec <xQueueGenericSendFromISR>
 8006634:	4603      	mov	r3, r0
 8006636:	2b01      	cmp	r3, #1
 8006638:	d003      	beq.n	8006642 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800663a:	f06f 0302 	mvn.w	r3, #2
 800663e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006640:	e029      	b.n	8006696 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d026      	beq.n	8006696 <osMessageQueuePut+0xd2>
 8006648:	4b17      	ldr	r3, [pc, #92]	; (80066a8 <osMessageQueuePut+0xe4>)
 800664a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800664e:	601a      	str	r2, [r3, #0]
 8006650:	f3bf 8f4f 	dsb	sy
 8006654:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006658:	e01d      	b.n	8006696 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800665a:	6a3b      	ldr	r3, [r7, #32]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d002      	beq.n	8006666 <osMessageQueuePut+0xa2>
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d103      	bne.n	800666e <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8006666:	f06f 0303 	mvn.w	r3, #3
 800666a:	627b      	str	r3, [r7, #36]	; 0x24
 800666c:	e014      	b.n	8006698 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800666e:	2300      	movs	r3, #0
 8006670:	683a      	ldr	r2, [r7, #0]
 8006672:	68b9      	ldr	r1, [r7, #8]
 8006674:	6a38      	ldr	r0, [r7, #32]
 8006676:	f000 fdb3 	bl	80071e0 <xQueueGenericSend>
 800667a:	4603      	mov	r3, r0
 800667c:	2b01      	cmp	r3, #1
 800667e:	d00b      	beq.n	8006698 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d003      	beq.n	800668e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8006686:	f06f 0301 	mvn.w	r3, #1
 800668a:	627b      	str	r3, [r7, #36]	; 0x24
 800668c:	e004      	b.n	8006698 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800668e:	f06f 0302 	mvn.w	r3, #2
 8006692:	627b      	str	r3, [r7, #36]	; 0x24
 8006694:	e000      	b.n	8006698 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006696:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800669a:	4618      	mov	r0, r3
 800669c:	3728      	adds	r7, #40	; 0x28
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	bf00      	nop
 80066a4:	200001ac 	.word	0x200001ac
 80066a8:	e000ed04 	.word	0xe000ed04

080066ac <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b08a      	sub	sp, #40	; 0x28
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	607a      	str	r2, [r7, #4]
 80066b8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80066be:	2300      	movs	r3, #0
 80066c0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066c2:	f3ef 8305 	mrs	r3, IPSR
 80066c6:	61fb      	str	r3, [r7, #28]
  return(result);
 80066c8:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d10f      	bne.n	80066ee <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066ce:	f3ef 8310 	mrs	r3, PRIMASK
 80066d2:	61bb      	str	r3, [r7, #24]
  return(result);
 80066d4:	69bb      	ldr	r3, [r7, #24]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d105      	bne.n	80066e6 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80066da:	f3ef 8311 	mrs	r3, BASEPRI
 80066de:	617b      	str	r3, [r7, #20]
  return(result);
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d02c      	beq.n	8006740 <osMessageQueueGet+0x94>
 80066e6:	4b28      	ldr	r3, [pc, #160]	; (8006788 <osMessageQueueGet+0xdc>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	2b02      	cmp	r3, #2
 80066ec:	d128      	bne.n	8006740 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80066ee:	6a3b      	ldr	r3, [r7, #32]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d005      	beq.n	8006700 <osMessageQueueGet+0x54>
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d002      	beq.n	8006700 <osMessageQueueGet+0x54>
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d003      	beq.n	8006708 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8006700:	f06f 0303 	mvn.w	r3, #3
 8006704:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006706:	e038      	b.n	800677a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8006708:	2300      	movs	r3, #0
 800670a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800670c:	f107 0310 	add.w	r3, r7, #16
 8006710:	461a      	mov	r2, r3
 8006712:	68b9      	ldr	r1, [r7, #8]
 8006714:	6a38      	ldr	r0, [r7, #32]
 8006716:	f001 f999 	bl	8007a4c <xQueueReceiveFromISR>
 800671a:	4603      	mov	r3, r0
 800671c:	2b01      	cmp	r3, #1
 800671e:	d003      	beq.n	8006728 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8006720:	f06f 0302 	mvn.w	r3, #2
 8006724:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006726:	e028      	b.n	800677a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d025      	beq.n	800677a <osMessageQueueGet+0xce>
 800672e:	4b17      	ldr	r3, [pc, #92]	; (800678c <osMessageQueueGet+0xe0>)
 8006730:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006734:	601a      	str	r2, [r3, #0]
 8006736:	f3bf 8f4f 	dsb	sy
 800673a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800673e:	e01c      	b.n	800677a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006740:	6a3b      	ldr	r3, [r7, #32]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d002      	beq.n	800674c <osMessageQueueGet+0xa0>
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d103      	bne.n	8006754 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800674c:	f06f 0303 	mvn.w	r3, #3
 8006750:	627b      	str	r3, [r7, #36]	; 0x24
 8006752:	e013      	b.n	800677c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006754:	683a      	ldr	r2, [r7, #0]
 8006756:	68b9      	ldr	r1, [r7, #8]
 8006758:	6a38      	ldr	r0, [r7, #32]
 800675a:	f000 ff7d 	bl	8007658 <xQueueReceive>
 800675e:	4603      	mov	r3, r0
 8006760:	2b01      	cmp	r3, #1
 8006762:	d00b      	beq.n	800677c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d003      	beq.n	8006772 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800676a:	f06f 0301 	mvn.w	r3, #1
 800676e:	627b      	str	r3, [r7, #36]	; 0x24
 8006770:	e004      	b.n	800677c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8006772:	f06f 0302 	mvn.w	r3, #2
 8006776:	627b      	str	r3, [r7, #36]	; 0x24
 8006778:	e000      	b.n	800677c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800677a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800677c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800677e:	4618      	mov	r0, r3
 8006780:	3728      	adds	r7, #40	; 0x28
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop
 8006788:	200001ac 	.word	0x200001ac
 800678c:	e000ed04 	.word	0xe000ed04

08006790 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006790:	b480      	push	{r7}
 8006792:	b085      	sub	sp, #20
 8006794:	af00      	add	r7, sp, #0
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	60b9      	str	r1, [r7, #8]
 800679a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	4a07      	ldr	r2, [pc, #28]	; (80067bc <vApplicationGetIdleTaskMemory+0x2c>)
 80067a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	4a06      	ldr	r2, [pc, #24]	; (80067c0 <vApplicationGetIdleTaskMemory+0x30>)
 80067a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2280      	movs	r2, #128	; 0x80
 80067ac:	601a      	str	r2, [r3, #0]
}
 80067ae:	bf00      	nop
 80067b0:	3714      	adds	r7, #20
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr
 80067ba:	bf00      	nop
 80067bc:	200001b0 	.word	0x200001b0
 80067c0:	2000026c 	.word	0x2000026c

080067c4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80067c4:	b480      	push	{r7}
 80067c6:	b085      	sub	sp, #20
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	4a07      	ldr	r2, [pc, #28]	; (80067f0 <vApplicationGetTimerTaskMemory+0x2c>)
 80067d4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	4a06      	ldr	r2, [pc, #24]	; (80067f4 <vApplicationGetTimerTaskMemory+0x30>)
 80067da:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80067e2:	601a      	str	r2, [r3, #0]
}
 80067e4:	bf00      	nop
 80067e6:	3714      	adds	r7, #20
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr
 80067f0:	2000046c 	.word	0x2000046c
 80067f4:	20000528 	.word	0x20000528

080067f8 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b082      	sub	sp, #8
 80067fc:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80067fe:	2020      	movs	r0, #32
 8006800:	f003 fa60 	bl	8009cc4 <pvPortMalloc>
 8006804:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d00a      	beq.n	8006822 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	3304      	adds	r3, #4
 8006816:	4618      	mov	r0, r3
 8006818:	f000 f9b0 	bl	8006b7c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8006822:	687b      	ldr	r3, [r7, #4]
	}
 8006824:	4618      	mov	r0, r3
 8006826:	3708      	adds	r7, #8
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b090      	sub	sp, #64	; 0x40
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	607a      	str	r2, [r7, #4]
 8006838:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800683e:	2300      	movs	r3, #0
 8006840:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8006842:	2300      	movs	r3, #0
 8006844:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d10c      	bne.n	8006866 <xEventGroupWaitBits+0x3a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800684c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006850:	b672      	cpsid	i
 8006852:	f383 8811 	msr	BASEPRI, r3
 8006856:	f3bf 8f6f 	isb	sy
 800685a:	f3bf 8f4f 	dsb	sy
 800685e:	b662      	cpsie	i
 8006860:	623b      	str	r3, [r7, #32]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006862:	bf00      	nop
 8006864:	e7fe      	b.n	8006864 <xEventGroupWaitBits+0x38>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800686c:	2b00      	cmp	r3, #0
 800686e:	d00c      	beq.n	800688a <xEventGroupWaitBits+0x5e>
	__asm volatile
 8006870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006874:	b672      	cpsid	i
 8006876:	f383 8811 	msr	BASEPRI, r3
 800687a:	f3bf 8f6f 	isb	sy
 800687e:	f3bf 8f4f 	dsb	sy
 8006882:	b662      	cpsie	i
 8006884:	61fb      	str	r3, [r7, #28]
}
 8006886:	bf00      	nop
 8006888:	e7fe      	b.n	8006888 <xEventGroupWaitBits+0x5c>
	configASSERT( uxBitsToWaitFor != 0 );
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d10c      	bne.n	80068aa <xEventGroupWaitBits+0x7e>
	__asm volatile
 8006890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006894:	b672      	cpsid	i
 8006896:	f383 8811 	msr	BASEPRI, r3
 800689a:	f3bf 8f6f 	isb	sy
 800689e:	f3bf 8f4f 	dsb	sy
 80068a2:	b662      	cpsie	i
 80068a4:	61bb      	str	r3, [r7, #24]
}
 80068a6:	bf00      	nop
 80068a8:	e7fe      	b.n	80068a8 <xEventGroupWaitBits+0x7c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80068aa:	f002 fa5b 	bl	8008d64 <xTaskGetSchedulerState>
 80068ae:	4603      	mov	r3, r0
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d102      	bne.n	80068ba <xEventGroupWaitBits+0x8e>
 80068b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d101      	bne.n	80068be <xEventGroupWaitBits+0x92>
 80068ba:	2301      	movs	r3, #1
 80068bc:	e000      	b.n	80068c0 <xEventGroupWaitBits+0x94>
 80068be:	2300      	movs	r3, #0
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d10c      	bne.n	80068de <xEventGroupWaitBits+0xb2>
	__asm volatile
 80068c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c8:	b672      	cpsid	i
 80068ca:	f383 8811 	msr	BASEPRI, r3
 80068ce:	f3bf 8f6f 	isb	sy
 80068d2:	f3bf 8f4f 	dsb	sy
 80068d6:	b662      	cpsie	i
 80068d8:	617b      	str	r3, [r7, #20]
}
 80068da:	bf00      	nop
 80068dc:	e7fe      	b.n	80068dc <xEventGroupWaitBits+0xb0>
	}
	#endif

	vTaskSuspendAll();
 80068de:	f001 fd7b 	bl	80083d8 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80068e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80068e8:	683a      	ldr	r2, [r7, #0]
 80068ea:	68b9      	ldr	r1, [r7, #8]
 80068ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80068ee:	f000 f90f 	bl	8006b10 <prvTestWaitCondition>
 80068f2:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80068f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d00e      	beq.n	8006918 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80068fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068fc:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80068fe:	2300      	movs	r3, #0
 8006900:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d028      	beq.n	800695a <xEventGroupWaitBits+0x12e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8006908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	43db      	mvns	r3, r3
 8006910:	401a      	ands	r2, r3
 8006912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006914:	601a      	str	r2, [r3, #0]
 8006916:	e020      	b.n	800695a <xEventGroupWaitBits+0x12e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8006918:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800691a:	2b00      	cmp	r3, #0
 800691c:	d104      	bne.n	8006928 <xEventGroupWaitBits+0xfc>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800691e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006920:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8006922:	2301      	movs	r3, #1
 8006924:	633b      	str	r3, [r7, #48]	; 0x30
 8006926:	e018      	b.n	800695a <xEventGroupWaitBits+0x12e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d003      	beq.n	8006936 <xEventGroupWaitBits+0x10a>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800692e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006930:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006934:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d003      	beq.n	8006944 <xEventGroupWaitBits+0x118>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800693c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800693e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006942:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8006944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006946:	1d18      	adds	r0, r3, #4
 8006948:	68ba      	ldr	r2, [r7, #8]
 800694a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800694c:	4313      	orrs	r3, r2
 800694e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006950:	4619      	mov	r1, r3
 8006952:	f001 ff59 	bl	8008808 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8006956:	2300      	movs	r3, #0
 8006958:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800695a:	f001 fd4b 	bl	80083f4 <xTaskResumeAll>
 800695e:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8006960:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006962:	2b00      	cmp	r3, #0
 8006964:	d031      	beq.n	80069ca <xEventGroupWaitBits+0x19e>
	{
		if( xAlreadyYielded == pdFALSE )
 8006966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006968:	2b00      	cmp	r3, #0
 800696a:	d107      	bne.n	800697c <xEventGroupWaitBits+0x150>
		{
			portYIELD_WITHIN_API();
 800696c:	4b19      	ldr	r3, [pc, #100]	; (80069d4 <xEventGroupWaitBits+0x1a8>)
 800696e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006972:	601a      	str	r2, [r3, #0]
 8006974:	f3bf 8f4f 	dsb	sy
 8006978:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800697c:	f002 fb70 	bl	8009060 <uxTaskResetEventItemValue>
 8006980:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8006982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006988:	2b00      	cmp	r3, #0
 800698a:	d11a      	bne.n	80069c2 <xEventGroupWaitBits+0x196>
		{
			taskENTER_CRITICAL();
 800698c:	f003 f86e 	bl	8009a6c <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8006990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8006996:	683a      	ldr	r2, [r7, #0]
 8006998:	68b9      	ldr	r1, [r7, #8]
 800699a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800699c:	f000 f8b8 	bl	8006b10 <prvTestWaitCondition>
 80069a0:	4603      	mov	r3, r0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d009      	beq.n	80069ba <xEventGroupWaitBits+0x18e>
				{
					if( xClearOnExit != pdFALSE )
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d006      	beq.n	80069ba <xEventGroupWaitBits+0x18e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80069ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	43db      	mvns	r3, r3
 80069b4:	401a      	ands	r2, r3
 80069b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069b8:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80069ba:	2301      	movs	r3, #1
 80069bc:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80069be:	f003 f889 	bl	8009ad4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80069c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069c4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80069c8:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80069ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3740      	adds	r7, #64	; 0x40
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}
 80069d4:	e000ed04 	.word	0xe000ed04

080069d8 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b08e      	sub	sp, #56	; 0x38
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80069e2:	2300      	movs	r3, #0
 80069e4:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80069ea:	2300      	movs	r3, #0
 80069ec:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d10c      	bne.n	8006a0e <xEventGroupSetBits+0x36>
	__asm volatile
 80069f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f8:	b672      	cpsid	i
 80069fa:	f383 8811 	msr	BASEPRI, r3
 80069fe:	f3bf 8f6f 	isb	sy
 8006a02:	f3bf 8f4f 	dsb	sy
 8006a06:	b662      	cpsie	i
 8006a08:	613b      	str	r3, [r7, #16]
}
 8006a0a:	bf00      	nop
 8006a0c:	e7fe      	b.n	8006a0c <xEventGroupSetBits+0x34>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d00c      	beq.n	8006a32 <xEventGroupSetBits+0x5a>
	__asm volatile
 8006a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a1c:	b672      	cpsid	i
 8006a1e:	f383 8811 	msr	BASEPRI, r3
 8006a22:	f3bf 8f6f 	isb	sy
 8006a26:	f3bf 8f4f 	dsb	sy
 8006a2a:	b662      	cpsie	i
 8006a2c:	60fb      	str	r3, [r7, #12]
}
 8006a2e:	bf00      	nop
 8006a30:	e7fe      	b.n	8006a30 <xEventGroupSetBits+0x58>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8006a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a34:	3304      	adds	r3, #4
 8006a36:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3a:	3308      	adds	r3, #8
 8006a3c:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8006a3e:	f001 fccb 	bl	80083d8 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8006a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a44:	68db      	ldr	r3, [r3, #12]
 8006a46:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8006a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	431a      	orrs	r2, r3
 8006a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a52:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8006a54:	e03c      	b.n	8006ad0 <xEventGroupSetBits+0xf8>
		{
			pxNext = listGET_NEXT( pxListItem );
 8006a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8006a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8006a62:	2300      	movs	r3, #0
 8006a64:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8006a66:	69bb      	ldr	r3, [r7, #24]
 8006a68:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006a6c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006a74:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d108      	bne.n	8006a92 <xEventGroupSetBits+0xba>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8006a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	69bb      	ldr	r3, [r7, #24]
 8006a86:	4013      	ands	r3, r2
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d00b      	beq.n	8006aa4 <xEventGroupSetBits+0xcc>
				{
					xMatchFound = pdTRUE;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a90:	e008      	b.n	8006aa4 <xEventGroupSetBits+0xcc>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8006a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	69bb      	ldr	r3, [r7, #24]
 8006a98:	4013      	ands	r3, r2
 8006a9a:	69ba      	ldr	r2, [r7, #24]
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d101      	bne.n	8006aa4 <xEventGroupSetBits+0xcc>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8006aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d010      	beq.n	8006acc <xEventGroupSetBits+0xf4>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d003      	beq.n	8006abc <xEventGroupSetBits+0xe4>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8006ab4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8006abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006ac8:	f001 ff72 	bl	80089b0 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8006acc:	69fb      	ldr	r3, [r7, #28]
 8006ace:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8006ad0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ad2:	6a3b      	ldr	r3, [r7, #32]
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d1be      	bne.n	8006a56 <xEventGroupSetBits+0x7e>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8006ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ade:	43db      	mvns	r3, r3
 8006ae0:	401a      	ands	r2, r3
 8006ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae4:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8006ae6:	f001 fc85 	bl	80083f4 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8006aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aec:	681b      	ldr	r3, [r3, #0]
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3738      	adds	r7, #56	; 0x38
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}

08006af6 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8006af6:	b580      	push	{r7, lr}
 8006af8:	b082      	sub	sp, #8
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6078      	str	r0, [r7, #4]
 8006afe:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8006b00:	6839      	ldr	r1, [r7, #0]
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f7ff ff68 	bl	80069d8 <xEventGroupSetBits>
}
 8006b08:	bf00      	nop
 8006b0a:	3708      	adds	r7, #8
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}

08006b10 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8006b10:	b480      	push	{r7}
 8006b12:	b087      	sub	sp, #28
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	60f8      	str	r0, [r7, #12]
 8006b18:	60b9      	str	r1, [r7, #8]
 8006b1a:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d107      	bne.n	8006b36 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8006b26:	68fa      	ldr	r2, [r7, #12]
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	4013      	ands	r3, r2
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d00a      	beq.n	8006b46 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8006b30:	2301      	movs	r3, #1
 8006b32:	617b      	str	r3, [r7, #20]
 8006b34:	e007      	b.n	8006b46 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8006b36:	68fa      	ldr	r2, [r7, #12]
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	4013      	ands	r3, r2
 8006b3c:	68ba      	ldr	r2, [r7, #8]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d101      	bne.n	8006b46 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8006b42:	2301      	movs	r3, #1
 8006b44:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8006b46:	697b      	ldr	r3, [r7, #20]
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	371c      	adds	r7, #28
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr

08006b54 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b086      	sub	sp, #24
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	60b9      	str	r1, [r7, #8]
 8006b5e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	68ba      	ldr	r2, [r7, #8]
 8006b64:	68f9      	ldr	r1, [r7, #12]
 8006b66:	4804      	ldr	r0, [pc, #16]	; (8006b78 <xEventGroupSetBitsFromISR+0x24>)
 8006b68:	f002 fe56 	bl	8009818 <xTimerPendFunctionCallFromISR>
 8006b6c:	6178      	str	r0, [r7, #20]

		return xReturn;
 8006b6e:	697b      	ldr	r3, [r7, #20]
	}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3718      	adds	r7, #24
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	08006af7 	.word	0x08006af7

08006b7c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f103 0208 	add.w	r2, r3, #8
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f04f 32ff 	mov.w	r2, #4294967295
 8006b94:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f103 0208 	add.w	r2, r3, #8
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f103 0208 	add.w	r2, r3, #8
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006bb0:	bf00      	nop
 8006bb2:	370c      	adds	r7, #12
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr

08006bbc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b083      	sub	sp, #12
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006bca:	bf00      	nop
 8006bcc:	370c      	adds	r7, #12
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr

08006bd6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006bd6:	b480      	push	{r7}
 8006bd8:	b085      	sub	sp, #20
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
 8006bde:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	68fa      	ldr	r2, [r7, #12]
 8006bea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	689a      	ldr	r2, [r3, #8]
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	683a      	ldr	r2, [r7, #0]
 8006bfa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	683a      	ldr	r2, [r7, #0]
 8006c00:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	1c5a      	adds	r2, r3, #1
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	601a      	str	r2, [r3, #0]
}
 8006c12:	bf00      	nop
 8006c14:	3714      	adds	r7, #20
 8006c16:	46bd      	mov	sp, r7
 8006c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1c:	4770      	bx	lr

08006c1e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006c1e:	b480      	push	{r7}
 8006c20:	b085      	sub	sp, #20
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6078      	str	r0, [r7, #4]
 8006c26:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c34:	d103      	bne.n	8006c3e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	691b      	ldr	r3, [r3, #16]
 8006c3a:	60fb      	str	r3, [r7, #12]
 8006c3c:	e00c      	b.n	8006c58 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	3308      	adds	r3, #8
 8006c42:	60fb      	str	r3, [r7, #12]
 8006c44:	e002      	b.n	8006c4c <vListInsert+0x2e>
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	60fb      	str	r3, [r7, #12]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	68ba      	ldr	r2, [r7, #8]
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d2f6      	bcs.n	8006c46 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	685a      	ldr	r2, [r3, #4]
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	683a      	ldr	r2, [r7, #0]
 8006c66:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	68fa      	ldr	r2, [r7, #12]
 8006c6c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	683a      	ldr	r2, [r7, #0]
 8006c72:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	687a      	ldr	r2, [r7, #4]
 8006c78:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	1c5a      	adds	r2, r3, #1
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	601a      	str	r2, [r3, #0]
}
 8006c84:	bf00      	nop
 8006c86:	3714      	adds	r7, #20
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr

08006c90 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006c90:	b480      	push	{r7}
 8006c92:	b085      	sub	sp, #20
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	691b      	ldr	r3, [r3, #16]
 8006c9c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	6892      	ldr	r2, [r2, #8]
 8006ca6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	6852      	ldr	r2, [r2, #4]
 8006cb0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d103      	bne.n	8006cc4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	689a      	ldr	r2, [r3, #8]
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	1e5a      	subs	r2, r3, #1
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3714      	adds	r7, #20
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr

08006ce4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d10c      	bne.n	8006d12 <xQueueGenericReset+0x2e>
	__asm volatile
 8006cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cfc:	b672      	cpsid	i
 8006cfe:	f383 8811 	msr	BASEPRI, r3
 8006d02:	f3bf 8f6f 	isb	sy
 8006d06:	f3bf 8f4f 	dsb	sy
 8006d0a:	b662      	cpsie	i
 8006d0c:	60bb      	str	r3, [r7, #8]
}
 8006d0e:	bf00      	nop
 8006d10:	e7fe      	b.n	8006d10 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8006d12:	f002 feab 	bl	8009a6c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d1e:	68f9      	ldr	r1, [r7, #12]
 8006d20:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006d22:	fb01 f303 	mul.w	r3, r1, r3
 8006d26:	441a      	add	r2, r3
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d42:	3b01      	subs	r3, #1
 8006d44:	68f9      	ldr	r1, [r7, #12]
 8006d46:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006d48:	fb01 f303 	mul.w	r3, r1, r3
 8006d4c:	441a      	add	r2, r3
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	22ff      	movs	r2, #255	; 0xff
 8006d56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	22ff      	movs	r2, #255	; 0xff
 8006d5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d114      	bne.n	8006d92 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	691b      	ldr	r3, [r3, #16]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d01a      	beq.n	8006da6 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	3310      	adds	r3, #16
 8006d74:	4618      	mov	r0, r3
 8006d76:	f001 fdb5 	bl	80088e4 <xTaskRemoveFromEventList>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d012      	beq.n	8006da6 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006d80:	4b0c      	ldr	r3, [pc, #48]	; (8006db4 <xQueueGenericReset+0xd0>)
 8006d82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d86:	601a      	str	r2, [r3, #0]
 8006d88:	f3bf 8f4f 	dsb	sy
 8006d8c:	f3bf 8f6f 	isb	sy
 8006d90:	e009      	b.n	8006da6 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	3310      	adds	r3, #16
 8006d96:	4618      	mov	r0, r3
 8006d98:	f7ff fef0 	bl	8006b7c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	3324      	adds	r3, #36	; 0x24
 8006da0:	4618      	mov	r0, r3
 8006da2:	f7ff feeb 	bl	8006b7c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006da6:	f002 fe95 	bl	8009ad4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006daa:	2301      	movs	r3, #1
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3710      	adds	r7, #16
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}
 8006db4:	e000ed04 	.word	0xe000ed04

08006db8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b08e      	sub	sp, #56	; 0x38
 8006dbc:	af02      	add	r7, sp, #8
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	60b9      	str	r1, [r7, #8]
 8006dc2:	607a      	str	r2, [r7, #4]
 8006dc4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d10c      	bne.n	8006de6 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8006dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd0:	b672      	cpsid	i
 8006dd2:	f383 8811 	msr	BASEPRI, r3
 8006dd6:	f3bf 8f6f 	isb	sy
 8006dda:	f3bf 8f4f 	dsb	sy
 8006dde:	b662      	cpsie	i
 8006de0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006de2:	bf00      	nop
 8006de4:	e7fe      	b.n	8006de4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d10c      	bne.n	8006e06 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8006dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df0:	b672      	cpsid	i
 8006df2:	f383 8811 	msr	BASEPRI, r3
 8006df6:	f3bf 8f6f 	isb	sy
 8006dfa:	f3bf 8f4f 	dsb	sy
 8006dfe:	b662      	cpsie	i
 8006e00:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006e02:	bf00      	nop
 8006e04:	e7fe      	b.n	8006e04 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d002      	beq.n	8006e12 <xQueueGenericCreateStatic+0x5a>
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d001      	beq.n	8006e16 <xQueueGenericCreateStatic+0x5e>
 8006e12:	2301      	movs	r3, #1
 8006e14:	e000      	b.n	8006e18 <xQueueGenericCreateStatic+0x60>
 8006e16:	2300      	movs	r3, #0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d10c      	bne.n	8006e36 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8006e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e20:	b672      	cpsid	i
 8006e22:	f383 8811 	msr	BASEPRI, r3
 8006e26:	f3bf 8f6f 	isb	sy
 8006e2a:	f3bf 8f4f 	dsb	sy
 8006e2e:	b662      	cpsie	i
 8006e30:	623b      	str	r3, [r7, #32]
}
 8006e32:	bf00      	nop
 8006e34:	e7fe      	b.n	8006e34 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d102      	bne.n	8006e42 <xQueueGenericCreateStatic+0x8a>
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d101      	bne.n	8006e46 <xQueueGenericCreateStatic+0x8e>
 8006e42:	2301      	movs	r3, #1
 8006e44:	e000      	b.n	8006e48 <xQueueGenericCreateStatic+0x90>
 8006e46:	2300      	movs	r3, #0
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d10c      	bne.n	8006e66 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8006e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e50:	b672      	cpsid	i
 8006e52:	f383 8811 	msr	BASEPRI, r3
 8006e56:	f3bf 8f6f 	isb	sy
 8006e5a:	f3bf 8f4f 	dsb	sy
 8006e5e:	b662      	cpsie	i
 8006e60:	61fb      	str	r3, [r7, #28]
}
 8006e62:	bf00      	nop
 8006e64:	e7fe      	b.n	8006e64 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006e66:	2350      	movs	r3, #80	; 0x50
 8006e68:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	2b50      	cmp	r3, #80	; 0x50
 8006e6e:	d00c      	beq.n	8006e8a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8006e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e74:	b672      	cpsid	i
 8006e76:	f383 8811 	msr	BASEPRI, r3
 8006e7a:	f3bf 8f6f 	isb	sy
 8006e7e:	f3bf 8f4f 	dsb	sy
 8006e82:	b662      	cpsie	i
 8006e84:	61bb      	str	r3, [r7, #24]
}
 8006e86:	bf00      	nop
 8006e88:	e7fe      	b.n	8006e88 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006e8a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d00d      	beq.n	8006eb2 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e98:	2201      	movs	r2, #1
 8006e9a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006e9e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea4:	9300      	str	r3, [sp, #0]
 8006ea6:	4613      	mov	r3, r2
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	68b9      	ldr	r1, [r7, #8]
 8006eac:	68f8      	ldr	r0, [r7, #12]
 8006eae:	f000 f847 	bl	8006f40 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3730      	adds	r7, #48	; 0x30
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b08a      	sub	sp, #40	; 0x28
 8006ec0:	af02      	add	r7, sp, #8
 8006ec2:	60f8      	str	r0, [r7, #12]
 8006ec4:	60b9      	str	r1, [r7, #8]
 8006ec6:	4613      	mov	r3, r2
 8006ec8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d10c      	bne.n	8006eea <xQueueGenericCreate+0x2e>
	__asm volatile
 8006ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed4:	b672      	cpsid	i
 8006ed6:	f383 8811 	msr	BASEPRI, r3
 8006eda:	f3bf 8f6f 	isb	sy
 8006ede:	f3bf 8f4f 	dsb	sy
 8006ee2:	b662      	cpsie	i
 8006ee4:	613b      	str	r3, [r7, #16]
}
 8006ee6:	bf00      	nop
 8006ee8:	e7fe      	b.n	8006ee8 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d102      	bne.n	8006ef6 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	61fb      	str	r3, [r7, #28]
 8006ef4:	e004      	b.n	8006f00 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	68ba      	ldr	r2, [r7, #8]
 8006efa:	fb02 f303 	mul.w	r3, r2, r3
 8006efe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006f00:	69fb      	ldr	r3, [r7, #28]
 8006f02:	3350      	adds	r3, #80	; 0x50
 8006f04:	4618      	mov	r0, r3
 8006f06:	f002 fedd 	bl	8009cc4 <pvPortMalloc>
 8006f0a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006f0c:	69bb      	ldr	r3, [r7, #24]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d011      	beq.n	8006f36 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	3350      	adds	r3, #80	; 0x50
 8006f1a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006f1c:	69bb      	ldr	r3, [r7, #24]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006f24:	79fa      	ldrb	r2, [r7, #7]
 8006f26:	69bb      	ldr	r3, [r7, #24]
 8006f28:	9300      	str	r3, [sp, #0]
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	697a      	ldr	r2, [r7, #20]
 8006f2e:	68b9      	ldr	r1, [r7, #8]
 8006f30:	68f8      	ldr	r0, [r7, #12]
 8006f32:	f000 f805 	bl	8006f40 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006f36:	69bb      	ldr	r3, [r7, #24]
	}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3720      	adds	r7, #32
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b084      	sub	sp, #16
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	60f8      	str	r0, [r7, #12]
 8006f48:	60b9      	str	r1, [r7, #8]
 8006f4a:	607a      	str	r2, [r7, #4]
 8006f4c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d103      	bne.n	8006f5c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006f54:	69bb      	ldr	r3, [r7, #24]
 8006f56:	69ba      	ldr	r2, [r7, #24]
 8006f58:	601a      	str	r2, [r3, #0]
 8006f5a:	e002      	b.n	8006f62 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006f5c:	69bb      	ldr	r3, [r7, #24]
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006f62:	69bb      	ldr	r3, [r7, #24]
 8006f64:	68fa      	ldr	r2, [r7, #12]
 8006f66:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006f68:	69bb      	ldr	r3, [r7, #24]
 8006f6a:	68ba      	ldr	r2, [r7, #8]
 8006f6c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006f6e:	2101      	movs	r1, #1
 8006f70:	69b8      	ldr	r0, [r7, #24]
 8006f72:	f7ff feb7 	bl	8006ce4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006f76:	69bb      	ldr	r3, [r7, #24]
 8006f78:	78fa      	ldrb	r2, [r7, #3]
 8006f7a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006f7e:	bf00      	nop
 8006f80:	3710      	adds	r7, #16
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}

08006f86 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006f86:	b580      	push	{r7, lr}
 8006f88:	b082      	sub	sp, #8
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d00e      	beq.n	8006fb2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2200      	movs	r2, #0
 8006f98:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	2200      	movs	r2, #0
 8006faa:	2100      	movs	r1, #0
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f000 f917 	bl	80071e0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006fb2:	bf00      	nop
 8006fb4:	3708      	adds	r7, #8
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}

08006fba <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006fba:	b580      	push	{r7, lr}
 8006fbc:	b086      	sub	sp, #24
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	617b      	str	r3, [r7, #20]
 8006fc8:	2300      	movs	r3, #0
 8006fca:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006fcc:	79fb      	ldrb	r3, [r7, #7]
 8006fce:	461a      	mov	r2, r3
 8006fd0:	6939      	ldr	r1, [r7, #16]
 8006fd2:	6978      	ldr	r0, [r7, #20]
 8006fd4:	f7ff ff72 	bl	8006ebc <xQueueGenericCreate>
 8006fd8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006fda:	68f8      	ldr	r0, [r7, #12]
 8006fdc:	f7ff ffd3 	bl	8006f86 <prvInitialiseMutex>

		return xNewQueue;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
	}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3718      	adds	r7, #24
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}

08006fea <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006fea:	b580      	push	{r7, lr}
 8006fec:	b088      	sub	sp, #32
 8006fee:	af02      	add	r7, sp, #8
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	6039      	str	r1, [r7, #0]
 8006ff4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	617b      	str	r3, [r7, #20]
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006ffe:	79fb      	ldrb	r3, [r7, #7]
 8007000:	9300      	str	r3, [sp, #0]
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	2200      	movs	r2, #0
 8007006:	6939      	ldr	r1, [r7, #16]
 8007008:	6978      	ldr	r0, [r7, #20]
 800700a:	f7ff fed5 	bl	8006db8 <xQueueGenericCreateStatic>
 800700e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007010:	68f8      	ldr	r0, [r7, #12]
 8007012:	f7ff ffb8 	bl	8006f86 <prvInitialiseMutex>

		return xNewQueue;
 8007016:	68fb      	ldr	r3, [r7, #12]
	}
 8007018:	4618      	mov	r0, r3
 800701a:	3718      	adds	r7, #24
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8007020:	b590      	push	{r4, r7, lr}
 8007022:	b087      	sub	sp, #28
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d10c      	bne.n	800704c <xQueueGiveMutexRecursive+0x2c>
	__asm volatile
 8007032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007036:	b672      	cpsid	i
 8007038:	f383 8811 	msr	BASEPRI, r3
 800703c:	f3bf 8f6f 	isb	sy
 8007040:	f3bf 8f4f 	dsb	sy
 8007044:	b662      	cpsie	i
 8007046:	60fb      	str	r3, [r7, #12]
}
 8007048:	bf00      	nop
 800704a:	e7fe      	b.n	800704a <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	689c      	ldr	r4, [r3, #8]
 8007050:	f001 fe78 	bl	8008d44 <xTaskGetCurrentTaskHandle>
 8007054:	4603      	mov	r3, r0
 8007056:	429c      	cmp	r4, r3
 8007058:	d111      	bne.n	800707e <xQueueGiveMutexRecursive+0x5e>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	68db      	ldr	r3, [r3, #12]
 800705e:	1e5a      	subs	r2, r3, #1
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	68db      	ldr	r3, [r3, #12]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d105      	bne.n	8007078 <xQueueGiveMutexRecursive+0x58>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800706c:	2300      	movs	r3, #0
 800706e:	2200      	movs	r2, #0
 8007070:	2100      	movs	r1, #0
 8007072:	6938      	ldr	r0, [r7, #16]
 8007074:	f000 f8b4 	bl	80071e0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8007078:	2301      	movs	r3, #1
 800707a:	617b      	str	r3, [r7, #20]
 800707c:	e001      	b.n	8007082 <xQueueGiveMutexRecursive+0x62>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800707e:	2300      	movs	r3, #0
 8007080:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8007082:	697b      	ldr	r3, [r7, #20]
	}
 8007084:	4618      	mov	r0, r3
 8007086:	371c      	adds	r7, #28
 8007088:	46bd      	mov	sp, r7
 800708a:	bd90      	pop	{r4, r7, pc}

0800708c <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800708c:	b590      	push	{r4, r7, lr}
 800708e:	b087      	sub	sp, #28
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d10c      	bne.n	80070ba <xQueueTakeMutexRecursive+0x2e>
	__asm volatile
 80070a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a4:	b672      	cpsid	i
 80070a6:	f383 8811 	msr	BASEPRI, r3
 80070aa:	f3bf 8f6f 	isb	sy
 80070ae:	f3bf 8f4f 	dsb	sy
 80070b2:	b662      	cpsie	i
 80070b4:	60fb      	str	r3, [r7, #12]
}
 80070b6:	bf00      	nop
 80070b8:	e7fe      	b.n	80070b8 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	689c      	ldr	r4, [r3, #8]
 80070be:	f001 fe41 	bl	8008d44 <xTaskGetCurrentTaskHandle>
 80070c2:	4603      	mov	r3, r0
 80070c4:	429c      	cmp	r4, r3
 80070c6:	d107      	bne.n	80070d8 <xQueueTakeMutexRecursive+0x4c>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	68db      	ldr	r3, [r3, #12]
 80070cc:	1c5a      	adds	r2, r3, #1
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80070d2:	2301      	movs	r3, #1
 80070d4:	617b      	str	r3, [r7, #20]
 80070d6:	e00c      	b.n	80070f2 <xQueueTakeMutexRecursive+0x66>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80070d8:	6839      	ldr	r1, [r7, #0]
 80070da:	6938      	ldr	r0, [r7, #16]
 80070dc:	f000 fba2 	bl	8007824 <xQueueSemaphoreTake>
 80070e0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d004      	beq.n	80070f2 <xQueueTakeMutexRecursive+0x66>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	68db      	ldr	r3, [r3, #12]
 80070ec:	1c5a      	adds	r2, r3, #1
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80070f2:	697b      	ldr	r3, [r7, #20]
	}
 80070f4:	4618      	mov	r0, r3
 80070f6:	371c      	adds	r7, #28
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd90      	pop	{r4, r7, pc}

080070fc <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b08a      	sub	sp, #40	; 0x28
 8007100:	af02      	add	r7, sp, #8
 8007102:	60f8      	str	r0, [r7, #12]
 8007104:	60b9      	str	r1, [r7, #8]
 8007106:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d10c      	bne.n	8007128 <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 800710e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007112:	b672      	cpsid	i
 8007114:	f383 8811 	msr	BASEPRI, r3
 8007118:	f3bf 8f6f 	isb	sy
 800711c:	f3bf 8f4f 	dsb	sy
 8007120:	b662      	cpsie	i
 8007122:	61bb      	str	r3, [r7, #24]
}
 8007124:	bf00      	nop
 8007126:	e7fe      	b.n	8007126 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007128:	68ba      	ldr	r2, [r7, #8]
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	429a      	cmp	r2, r3
 800712e:	d90c      	bls.n	800714a <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 8007130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007134:	b672      	cpsid	i
 8007136:	f383 8811 	msr	BASEPRI, r3
 800713a:	f3bf 8f6f 	isb	sy
 800713e:	f3bf 8f4f 	dsb	sy
 8007142:	b662      	cpsie	i
 8007144:	617b      	str	r3, [r7, #20]
}
 8007146:	bf00      	nop
 8007148:	e7fe      	b.n	8007148 <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800714a:	2302      	movs	r3, #2
 800714c:	9300      	str	r3, [sp, #0]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	2100      	movs	r1, #0
 8007154:	68f8      	ldr	r0, [r7, #12]
 8007156:	f7ff fe2f 	bl	8006db8 <xQueueGenericCreateStatic>
 800715a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800715c:	69fb      	ldr	r3, [r7, #28]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d002      	beq.n	8007168 <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007162:	69fb      	ldr	r3, [r7, #28]
 8007164:	68ba      	ldr	r2, [r7, #8]
 8007166:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007168:	69fb      	ldr	r3, [r7, #28]
	}
 800716a:	4618      	mov	r0, r3
 800716c:	3720      	adds	r7, #32
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}

08007172 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007172:	b580      	push	{r7, lr}
 8007174:	b086      	sub	sp, #24
 8007176:	af00      	add	r7, sp, #0
 8007178:	6078      	str	r0, [r7, #4]
 800717a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d10c      	bne.n	800719c <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 8007182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007186:	b672      	cpsid	i
 8007188:	f383 8811 	msr	BASEPRI, r3
 800718c:	f3bf 8f6f 	isb	sy
 8007190:	f3bf 8f4f 	dsb	sy
 8007194:	b662      	cpsie	i
 8007196:	613b      	str	r3, [r7, #16]
}
 8007198:	bf00      	nop
 800719a:	e7fe      	b.n	800719a <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 800719c:	683a      	ldr	r2, [r7, #0]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d90c      	bls.n	80071be <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 80071a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a8:	b672      	cpsid	i
 80071aa:	f383 8811 	msr	BASEPRI, r3
 80071ae:	f3bf 8f6f 	isb	sy
 80071b2:	f3bf 8f4f 	dsb	sy
 80071b6:	b662      	cpsie	i
 80071b8:	60fb      	str	r3, [r7, #12]
}
 80071ba:	bf00      	nop
 80071bc:	e7fe      	b.n	80071bc <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80071be:	2202      	movs	r2, #2
 80071c0:	2100      	movs	r1, #0
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f7ff fe7a 	bl	8006ebc <xQueueGenericCreate>
 80071c8:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d002      	beq.n	80071d6 <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	683a      	ldr	r2, [r7, #0]
 80071d4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80071d6:	697b      	ldr	r3, [r7, #20]
	}
 80071d8:	4618      	mov	r0, r3
 80071da:	3718      	adds	r7, #24
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b08e      	sub	sp, #56	; 0x38
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	607a      	str	r2, [r7, #4]
 80071ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80071ee:	2300      	movs	r3, #0
 80071f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80071f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d10c      	bne.n	8007216 <xQueueGenericSend+0x36>
	__asm volatile
 80071fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007200:	b672      	cpsid	i
 8007202:	f383 8811 	msr	BASEPRI, r3
 8007206:	f3bf 8f6f 	isb	sy
 800720a:	f3bf 8f4f 	dsb	sy
 800720e:	b662      	cpsie	i
 8007210:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007212:	bf00      	nop
 8007214:	e7fe      	b.n	8007214 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d103      	bne.n	8007224 <xQueueGenericSend+0x44>
 800721c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800721e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007220:	2b00      	cmp	r3, #0
 8007222:	d101      	bne.n	8007228 <xQueueGenericSend+0x48>
 8007224:	2301      	movs	r3, #1
 8007226:	e000      	b.n	800722a <xQueueGenericSend+0x4a>
 8007228:	2300      	movs	r3, #0
 800722a:	2b00      	cmp	r3, #0
 800722c:	d10c      	bne.n	8007248 <xQueueGenericSend+0x68>
	__asm volatile
 800722e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007232:	b672      	cpsid	i
 8007234:	f383 8811 	msr	BASEPRI, r3
 8007238:	f3bf 8f6f 	isb	sy
 800723c:	f3bf 8f4f 	dsb	sy
 8007240:	b662      	cpsie	i
 8007242:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007244:	bf00      	nop
 8007246:	e7fe      	b.n	8007246 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	2b02      	cmp	r3, #2
 800724c:	d103      	bne.n	8007256 <xQueueGenericSend+0x76>
 800724e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007252:	2b01      	cmp	r3, #1
 8007254:	d101      	bne.n	800725a <xQueueGenericSend+0x7a>
 8007256:	2301      	movs	r3, #1
 8007258:	e000      	b.n	800725c <xQueueGenericSend+0x7c>
 800725a:	2300      	movs	r3, #0
 800725c:	2b00      	cmp	r3, #0
 800725e:	d10c      	bne.n	800727a <xQueueGenericSend+0x9a>
	__asm volatile
 8007260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007264:	b672      	cpsid	i
 8007266:	f383 8811 	msr	BASEPRI, r3
 800726a:	f3bf 8f6f 	isb	sy
 800726e:	f3bf 8f4f 	dsb	sy
 8007272:	b662      	cpsie	i
 8007274:	623b      	str	r3, [r7, #32]
}
 8007276:	bf00      	nop
 8007278:	e7fe      	b.n	8007278 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800727a:	f001 fd73 	bl	8008d64 <xTaskGetSchedulerState>
 800727e:	4603      	mov	r3, r0
 8007280:	2b00      	cmp	r3, #0
 8007282:	d102      	bne.n	800728a <xQueueGenericSend+0xaa>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d101      	bne.n	800728e <xQueueGenericSend+0xae>
 800728a:	2301      	movs	r3, #1
 800728c:	e000      	b.n	8007290 <xQueueGenericSend+0xb0>
 800728e:	2300      	movs	r3, #0
 8007290:	2b00      	cmp	r3, #0
 8007292:	d10c      	bne.n	80072ae <xQueueGenericSend+0xce>
	__asm volatile
 8007294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007298:	b672      	cpsid	i
 800729a:	f383 8811 	msr	BASEPRI, r3
 800729e:	f3bf 8f6f 	isb	sy
 80072a2:	f3bf 8f4f 	dsb	sy
 80072a6:	b662      	cpsie	i
 80072a8:	61fb      	str	r3, [r7, #28]
}
 80072aa:	bf00      	nop
 80072ac:	e7fe      	b.n	80072ac <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80072ae:	f002 fbdd 	bl	8009a6c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80072b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d302      	bcc.n	80072c4 <xQueueGenericSend+0xe4>
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	2b02      	cmp	r3, #2
 80072c2:	d129      	bne.n	8007318 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80072c4:	683a      	ldr	r2, [r7, #0]
 80072c6:	68b9      	ldr	r1, [r7, #8]
 80072c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072ca:	f000 fc82 	bl	8007bd2 <prvCopyDataToQueue>
 80072ce:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80072d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d010      	beq.n	80072fa <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80072d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072da:	3324      	adds	r3, #36	; 0x24
 80072dc:	4618      	mov	r0, r3
 80072de:	f001 fb01 	bl	80088e4 <xTaskRemoveFromEventList>
 80072e2:	4603      	mov	r3, r0
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d013      	beq.n	8007310 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80072e8:	4b3f      	ldr	r3, [pc, #252]	; (80073e8 <xQueueGenericSend+0x208>)
 80072ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072ee:	601a      	str	r2, [r3, #0]
 80072f0:	f3bf 8f4f 	dsb	sy
 80072f4:	f3bf 8f6f 	isb	sy
 80072f8:	e00a      	b.n	8007310 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80072fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d007      	beq.n	8007310 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007300:	4b39      	ldr	r3, [pc, #228]	; (80073e8 <xQueueGenericSend+0x208>)
 8007302:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007306:	601a      	str	r2, [r3, #0]
 8007308:	f3bf 8f4f 	dsb	sy
 800730c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007310:	f002 fbe0 	bl	8009ad4 <vPortExitCritical>
				return pdPASS;
 8007314:	2301      	movs	r3, #1
 8007316:	e063      	b.n	80073e0 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d103      	bne.n	8007326 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800731e:	f002 fbd9 	bl	8009ad4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007322:	2300      	movs	r3, #0
 8007324:	e05c      	b.n	80073e0 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007328:	2b00      	cmp	r3, #0
 800732a:	d106      	bne.n	800733a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800732c:	f107 0314 	add.w	r3, r7, #20
 8007330:	4618      	mov	r0, r3
 8007332:	f001 fba3 	bl	8008a7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007336:	2301      	movs	r3, #1
 8007338:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800733a:	f002 fbcb 	bl	8009ad4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800733e:	f001 f84b 	bl	80083d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007342:	f002 fb93 	bl	8009a6c <vPortEnterCritical>
 8007346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007348:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800734c:	b25b      	sxtb	r3, r3
 800734e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007352:	d103      	bne.n	800735c <xQueueGenericSend+0x17c>
 8007354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007356:	2200      	movs	r2, #0
 8007358:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800735c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800735e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007362:	b25b      	sxtb	r3, r3
 8007364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007368:	d103      	bne.n	8007372 <xQueueGenericSend+0x192>
 800736a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800736c:	2200      	movs	r2, #0
 800736e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007372:	f002 fbaf 	bl	8009ad4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007376:	1d3a      	adds	r2, r7, #4
 8007378:	f107 0314 	add.w	r3, r7, #20
 800737c:	4611      	mov	r1, r2
 800737e:	4618      	mov	r0, r3
 8007380:	f001 fb92 	bl	8008aa8 <xTaskCheckForTimeOut>
 8007384:	4603      	mov	r3, r0
 8007386:	2b00      	cmp	r3, #0
 8007388:	d124      	bne.n	80073d4 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800738a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800738c:	f000 fd19 	bl	8007dc2 <prvIsQueueFull>
 8007390:	4603      	mov	r3, r0
 8007392:	2b00      	cmp	r3, #0
 8007394:	d018      	beq.n	80073c8 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007398:	3310      	adds	r3, #16
 800739a:	687a      	ldr	r2, [r7, #4]
 800739c:	4611      	mov	r1, r2
 800739e:	4618      	mov	r0, r3
 80073a0:	f001 fa0c 	bl	80087bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80073a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073a6:	f000 fca4 	bl	8007cf2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80073aa:	f001 f823 	bl	80083f4 <xTaskResumeAll>
 80073ae:	4603      	mov	r3, r0
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	f47f af7c 	bne.w	80072ae <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80073b6:	4b0c      	ldr	r3, [pc, #48]	; (80073e8 <xQueueGenericSend+0x208>)
 80073b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073bc:	601a      	str	r2, [r3, #0]
 80073be:	f3bf 8f4f 	dsb	sy
 80073c2:	f3bf 8f6f 	isb	sy
 80073c6:	e772      	b.n	80072ae <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80073c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073ca:	f000 fc92 	bl	8007cf2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80073ce:	f001 f811 	bl	80083f4 <xTaskResumeAll>
 80073d2:	e76c      	b.n	80072ae <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80073d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073d6:	f000 fc8c 	bl	8007cf2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80073da:	f001 f80b 	bl	80083f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80073de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3738      	adds	r7, #56	; 0x38
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}
 80073e8:	e000ed04 	.word	0xe000ed04

080073ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b08e      	sub	sp, #56	; 0x38
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	60b9      	str	r1, [r7, #8]
 80073f6:	607a      	str	r2, [r7, #4]
 80073f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80073fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007400:	2b00      	cmp	r3, #0
 8007402:	d10c      	bne.n	800741e <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8007404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007408:	b672      	cpsid	i
 800740a:	f383 8811 	msr	BASEPRI, r3
 800740e:	f3bf 8f6f 	isb	sy
 8007412:	f3bf 8f4f 	dsb	sy
 8007416:	b662      	cpsie	i
 8007418:	627b      	str	r3, [r7, #36]	; 0x24
}
 800741a:	bf00      	nop
 800741c:	e7fe      	b.n	800741c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d103      	bne.n	800742c <xQueueGenericSendFromISR+0x40>
 8007424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007428:	2b00      	cmp	r3, #0
 800742a:	d101      	bne.n	8007430 <xQueueGenericSendFromISR+0x44>
 800742c:	2301      	movs	r3, #1
 800742e:	e000      	b.n	8007432 <xQueueGenericSendFromISR+0x46>
 8007430:	2300      	movs	r3, #0
 8007432:	2b00      	cmp	r3, #0
 8007434:	d10c      	bne.n	8007450 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8007436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800743a:	b672      	cpsid	i
 800743c:	f383 8811 	msr	BASEPRI, r3
 8007440:	f3bf 8f6f 	isb	sy
 8007444:	f3bf 8f4f 	dsb	sy
 8007448:	b662      	cpsie	i
 800744a:	623b      	str	r3, [r7, #32]
}
 800744c:	bf00      	nop
 800744e:	e7fe      	b.n	800744e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	2b02      	cmp	r3, #2
 8007454:	d103      	bne.n	800745e <xQueueGenericSendFromISR+0x72>
 8007456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800745a:	2b01      	cmp	r3, #1
 800745c:	d101      	bne.n	8007462 <xQueueGenericSendFromISR+0x76>
 800745e:	2301      	movs	r3, #1
 8007460:	e000      	b.n	8007464 <xQueueGenericSendFromISR+0x78>
 8007462:	2300      	movs	r3, #0
 8007464:	2b00      	cmp	r3, #0
 8007466:	d10c      	bne.n	8007482 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8007468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800746c:	b672      	cpsid	i
 800746e:	f383 8811 	msr	BASEPRI, r3
 8007472:	f3bf 8f6f 	isb	sy
 8007476:	f3bf 8f4f 	dsb	sy
 800747a:	b662      	cpsie	i
 800747c:	61fb      	str	r3, [r7, #28]
}
 800747e:	bf00      	nop
 8007480:	e7fe      	b.n	8007480 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007482:	f002 fbdb 	bl	8009c3c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007486:	f3ef 8211 	mrs	r2, BASEPRI
 800748a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800748e:	b672      	cpsid	i
 8007490:	f383 8811 	msr	BASEPRI, r3
 8007494:	f3bf 8f6f 	isb	sy
 8007498:	f3bf 8f4f 	dsb	sy
 800749c:	b662      	cpsie	i
 800749e:	61ba      	str	r2, [r7, #24]
 80074a0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80074a2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80074a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80074a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074ae:	429a      	cmp	r2, r3
 80074b0:	d302      	bcc.n	80074b8 <xQueueGenericSendFromISR+0xcc>
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	2b02      	cmp	r3, #2
 80074b6:	d12c      	bne.n	8007512 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80074b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80074c2:	683a      	ldr	r2, [r7, #0]
 80074c4:	68b9      	ldr	r1, [r7, #8]
 80074c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074c8:	f000 fb83 	bl	8007bd2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80074cc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80074d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074d4:	d112      	bne.n	80074fc <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80074d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d016      	beq.n	800750c <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80074de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e0:	3324      	adds	r3, #36	; 0x24
 80074e2:	4618      	mov	r0, r3
 80074e4:	f001 f9fe 	bl	80088e4 <xTaskRemoveFromEventList>
 80074e8:	4603      	mov	r3, r0
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d00e      	beq.n	800750c <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d00b      	beq.n	800750c <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2201      	movs	r2, #1
 80074f8:	601a      	str	r2, [r3, #0]
 80074fa:	e007      	b.n	800750c <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80074fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007500:	3301      	adds	r3, #1
 8007502:	b2db      	uxtb	r3, r3
 8007504:	b25a      	sxtb	r2, r3
 8007506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007508:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800750c:	2301      	movs	r3, #1
 800750e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007510:	e001      	b.n	8007516 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007512:	2300      	movs	r3, #0
 8007514:	637b      	str	r3, [r7, #52]	; 0x34
 8007516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007518:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007520:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007524:	4618      	mov	r0, r3
 8007526:	3738      	adds	r7, #56	; 0x38
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}

0800752c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b08e      	sub	sp, #56	; 0x38
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800753a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800753c:	2b00      	cmp	r3, #0
 800753e:	d10c      	bne.n	800755a <xQueueGiveFromISR+0x2e>
	__asm volatile
 8007540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007544:	b672      	cpsid	i
 8007546:	f383 8811 	msr	BASEPRI, r3
 800754a:	f3bf 8f6f 	isb	sy
 800754e:	f3bf 8f4f 	dsb	sy
 8007552:	b662      	cpsie	i
 8007554:	623b      	str	r3, [r7, #32]
}
 8007556:	bf00      	nop
 8007558:	e7fe      	b.n	8007558 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800755a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800755c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800755e:	2b00      	cmp	r3, #0
 8007560:	d00c      	beq.n	800757c <xQueueGiveFromISR+0x50>
	__asm volatile
 8007562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007566:	b672      	cpsid	i
 8007568:	f383 8811 	msr	BASEPRI, r3
 800756c:	f3bf 8f6f 	isb	sy
 8007570:	f3bf 8f4f 	dsb	sy
 8007574:	b662      	cpsie	i
 8007576:	61fb      	str	r3, [r7, #28]
}
 8007578:	bf00      	nop
 800757a:	e7fe      	b.n	800757a <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800757c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d103      	bne.n	800758c <xQueueGiveFromISR+0x60>
 8007584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d101      	bne.n	8007590 <xQueueGiveFromISR+0x64>
 800758c:	2301      	movs	r3, #1
 800758e:	e000      	b.n	8007592 <xQueueGiveFromISR+0x66>
 8007590:	2300      	movs	r3, #0
 8007592:	2b00      	cmp	r3, #0
 8007594:	d10c      	bne.n	80075b0 <xQueueGiveFromISR+0x84>
	__asm volatile
 8007596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800759a:	b672      	cpsid	i
 800759c:	f383 8811 	msr	BASEPRI, r3
 80075a0:	f3bf 8f6f 	isb	sy
 80075a4:	f3bf 8f4f 	dsb	sy
 80075a8:	b662      	cpsie	i
 80075aa:	61bb      	str	r3, [r7, #24]
}
 80075ac:	bf00      	nop
 80075ae:	e7fe      	b.n	80075ae <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80075b0:	f002 fb44 	bl	8009c3c <vPortValidateInterruptPriority>
	__asm volatile
 80075b4:	f3ef 8211 	mrs	r2, BASEPRI
 80075b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075bc:	b672      	cpsid	i
 80075be:	f383 8811 	msr	BASEPRI, r3
 80075c2:	f3bf 8f6f 	isb	sy
 80075c6:	f3bf 8f4f 	dsb	sy
 80075ca:	b662      	cpsie	i
 80075cc:	617a      	str	r2, [r7, #20]
 80075ce:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80075d0:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80075d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80075d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075d8:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80075da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d22b      	bcs.n	800763c <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80075e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80075ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80075ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075f0:	1c5a      	adds	r2, r3, #1
 80075f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80075f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80075fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075fe:	d112      	bne.n	8007626 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007604:	2b00      	cmp	r3, #0
 8007606:	d016      	beq.n	8007636 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800760a:	3324      	adds	r3, #36	; 0x24
 800760c:	4618      	mov	r0, r3
 800760e:	f001 f969 	bl	80088e4 <xTaskRemoveFromEventList>
 8007612:	4603      	mov	r3, r0
 8007614:	2b00      	cmp	r3, #0
 8007616:	d00e      	beq.n	8007636 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d00b      	beq.n	8007636 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	2201      	movs	r2, #1
 8007622:	601a      	str	r2, [r3, #0]
 8007624:	e007      	b.n	8007636 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007626:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800762a:	3301      	adds	r3, #1
 800762c:	b2db      	uxtb	r3, r3
 800762e:	b25a      	sxtb	r2, r3
 8007630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007632:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007636:	2301      	movs	r3, #1
 8007638:	637b      	str	r3, [r7, #52]	; 0x34
 800763a:	e001      	b.n	8007640 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800763c:	2300      	movs	r3, #0
 800763e:	637b      	str	r3, [r7, #52]	; 0x34
 8007640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007642:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f383 8811 	msr	BASEPRI, r3
}
 800764a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800764c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800764e:	4618      	mov	r0, r3
 8007650:	3738      	adds	r7, #56	; 0x38
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
	...

08007658 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b08c      	sub	sp, #48	; 0x30
 800765c:	af00      	add	r7, sp, #0
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	60b9      	str	r1, [r7, #8]
 8007662:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007664:	2300      	movs	r3, #0
 8007666:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800766c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800766e:	2b00      	cmp	r3, #0
 8007670:	d10c      	bne.n	800768c <xQueueReceive+0x34>
	__asm volatile
 8007672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007676:	b672      	cpsid	i
 8007678:	f383 8811 	msr	BASEPRI, r3
 800767c:	f3bf 8f6f 	isb	sy
 8007680:	f3bf 8f4f 	dsb	sy
 8007684:	b662      	cpsie	i
 8007686:	623b      	str	r3, [r7, #32]
}
 8007688:	bf00      	nop
 800768a:	e7fe      	b.n	800768a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d103      	bne.n	800769a <xQueueReceive+0x42>
 8007692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007696:	2b00      	cmp	r3, #0
 8007698:	d101      	bne.n	800769e <xQueueReceive+0x46>
 800769a:	2301      	movs	r3, #1
 800769c:	e000      	b.n	80076a0 <xQueueReceive+0x48>
 800769e:	2300      	movs	r3, #0
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d10c      	bne.n	80076be <xQueueReceive+0x66>
	__asm volatile
 80076a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a8:	b672      	cpsid	i
 80076aa:	f383 8811 	msr	BASEPRI, r3
 80076ae:	f3bf 8f6f 	isb	sy
 80076b2:	f3bf 8f4f 	dsb	sy
 80076b6:	b662      	cpsie	i
 80076b8:	61fb      	str	r3, [r7, #28]
}
 80076ba:	bf00      	nop
 80076bc:	e7fe      	b.n	80076bc <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80076be:	f001 fb51 	bl	8008d64 <xTaskGetSchedulerState>
 80076c2:	4603      	mov	r3, r0
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d102      	bne.n	80076ce <xQueueReceive+0x76>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d101      	bne.n	80076d2 <xQueueReceive+0x7a>
 80076ce:	2301      	movs	r3, #1
 80076d0:	e000      	b.n	80076d4 <xQueueReceive+0x7c>
 80076d2:	2300      	movs	r3, #0
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d10c      	bne.n	80076f2 <xQueueReceive+0x9a>
	__asm volatile
 80076d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076dc:	b672      	cpsid	i
 80076de:	f383 8811 	msr	BASEPRI, r3
 80076e2:	f3bf 8f6f 	isb	sy
 80076e6:	f3bf 8f4f 	dsb	sy
 80076ea:	b662      	cpsie	i
 80076ec:	61bb      	str	r3, [r7, #24]
}
 80076ee:	bf00      	nop
 80076f0:	e7fe      	b.n	80076f0 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80076f2:	f002 f9bb 	bl	8009a6c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80076f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076fa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80076fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d01f      	beq.n	8007742 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007702:	68b9      	ldr	r1, [r7, #8]
 8007704:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007706:	f000 face 	bl	8007ca6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800770a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770c:	1e5a      	subs	r2, r3, #1
 800770e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007710:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007714:	691b      	ldr	r3, [r3, #16]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d00f      	beq.n	800773a <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800771a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800771c:	3310      	adds	r3, #16
 800771e:	4618      	mov	r0, r3
 8007720:	f001 f8e0 	bl	80088e4 <xTaskRemoveFromEventList>
 8007724:	4603      	mov	r3, r0
 8007726:	2b00      	cmp	r3, #0
 8007728:	d007      	beq.n	800773a <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800772a:	4b3d      	ldr	r3, [pc, #244]	; (8007820 <xQueueReceive+0x1c8>)
 800772c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007730:	601a      	str	r2, [r3, #0]
 8007732:	f3bf 8f4f 	dsb	sy
 8007736:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800773a:	f002 f9cb 	bl	8009ad4 <vPortExitCritical>
				return pdPASS;
 800773e:	2301      	movs	r3, #1
 8007740:	e069      	b.n	8007816 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d103      	bne.n	8007750 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007748:	f002 f9c4 	bl	8009ad4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800774c:	2300      	movs	r3, #0
 800774e:	e062      	b.n	8007816 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007752:	2b00      	cmp	r3, #0
 8007754:	d106      	bne.n	8007764 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007756:	f107 0310 	add.w	r3, r7, #16
 800775a:	4618      	mov	r0, r3
 800775c:	f001 f98e 	bl	8008a7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007760:	2301      	movs	r3, #1
 8007762:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007764:	f002 f9b6 	bl	8009ad4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007768:	f000 fe36 	bl	80083d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800776c:	f002 f97e 	bl	8009a6c <vPortEnterCritical>
 8007770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007772:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007776:	b25b      	sxtb	r3, r3
 8007778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800777c:	d103      	bne.n	8007786 <xQueueReceive+0x12e>
 800777e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007780:	2200      	movs	r2, #0
 8007782:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007788:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800778c:	b25b      	sxtb	r3, r3
 800778e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007792:	d103      	bne.n	800779c <xQueueReceive+0x144>
 8007794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007796:	2200      	movs	r2, #0
 8007798:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800779c:	f002 f99a 	bl	8009ad4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80077a0:	1d3a      	adds	r2, r7, #4
 80077a2:	f107 0310 	add.w	r3, r7, #16
 80077a6:	4611      	mov	r1, r2
 80077a8:	4618      	mov	r0, r3
 80077aa:	f001 f97d 	bl	8008aa8 <xTaskCheckForTimeOut>
 80077ae:	4603      	mov	r3, r0
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d123      	bne.n	80077fc <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80077b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077b6:	f000 faee 	bl	8007d96 <prvIsQueueEmpty>
 80077ba:	4603      	mov	r3, r0
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d017      	beq.n	80077f0 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80077c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c2:	3324      	adds	r3, #36	; 0x24
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	4611      	mov	r1, r2
 80077c8:	4618      	mov	r0, r3
 80077ca:	f000 fff7 	bl	80087bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80077ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077d0:	f000 fa8f 	bl	8007cf2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80077d4:	f000 fe0e 	bl	80083f4 <xTaskResumeAll>
 80077d8:	4603      	mov	r3, r0
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d189      	bne.n	80076f2 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 80077de:	4b10      	ldr	r3, [pc, #64]	; (8007820 <xQueueReceive+0x1c8>)
 80077e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077e4:	601a      	str	r2, [r3, #0]
 80077e6:	f3bf 8f4f 	dsb	sy
 80077ea:	f3bf 8f6f 	isb	sy
 80077ee:	e780      	b.n	80076f2 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80077f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077f2:	f000 fa7e 	bl	8007cf2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80077f6:	f000 fdfd 	bl	80083f4 <xTaskResumeAll>
 80077fa:	e77a      	b.n	80076f2 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80077fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077fe:	f000 fa78 	bl	8007cf2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007802:	f000 fdf7 	bl	80083f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007806:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007808:	f000 fac5 	bl	8007d96 <prvIsQueueEmpty>
 800780c:	4603      	mov	r3, r0
 800780e:	2b00      	cmp	r3, #0
 8007810:	f43f af6f 	beq.w	80076f2 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007814:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007816:	4618      	mov	r0, r3
 8007818:	3730      	adds	r7, #48	; 0x30
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
 800781e:	bf00      	nop
 8007820:	e000ed04 	.word	0xe000ed04

08007824 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b08e      	sub	sp, #56	; 0x38
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800782e:	2300      	movs	r3, #0
 8007830:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007836:	2300      	movs	r3, #0
 8007838:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800783a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800783c:	2b00      	cmp	r3, #0
 800783e:	d10c      	bne.n	800785a <xQueueSemaphoreTake+0x36>
	__asm volatile
 8007840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007844:	b672      	cpsid	i
 8007846:	f383 8811 	msr	BASEPRI, r3
 800784a:	f3bf 8f6f 	isb	sy
 800784e:	f3bf 8f4f 	dsb	sy
 8007852:	b662      	cpsie	i
 8007854:	623b      	str	r3, [r7, #32]
}
 8007856:	bf00      	nop
 8007858:	e7fe      	b.n	8007858 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800785a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800785c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800785e:	2b00      	cmp	r3, #0
 8007860:	d00c      	beq.n	800787c <xQueueSemaphoreTake+0x58>
	__asm volatile
 8007862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007866:	b672      	cpsid	i
 8007868:	f383 8811 	msr	BASEPRI, r3
 800786c:	f3bf 8f6f 	isb	sy
 8007870:	f3bf 8f4f 	dsb	sy
 8007874:	b662      	cpsie	i
 8007876:	61fb      	str	r3, [r7, #28]
}
 8007878:	bf00      	nop
 800787a:	e7fe      	b.n	800787a <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800787c:	f001 fa72 	bl	8008d64 <xTaskGetSchedulerState>
 8007880:	4603      	mov	r3, r0
 8007882:	2b00      	cmp	r3, #0
 8007884:	d102      	bne.n	800788c <xQueueSemaphoreTake+0x68>
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d101      	bne.n	8007890 <xQueueSemaphoreTake+0x6c>
 800788c:	2301      	movs	r3, #1
 800788e:	e000      	b.n	8007892 <xQueueSemaphoreTake+0x6e>
 8007890:	2300      	movs	r3, #0
 8007892:	2b00      	cmp	r3, #0
 8007894:	d10c      	bne.n	80078b0 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8007896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800789a:	b672      	cpsid	i
 800789c:	f383 8811 	msr	BASEPRI, r3
 80078a0:	f3bf 8f6f 	isb	sy
 80078a4:	f3bf 8f4f 	dsb	sy
 80078a8:	b662      	cpsie	i
 80078aa:	61bb      	str	r3, [r7, #24]
}
 80078ac:	bf00      	nop
 80078ae:	e7fe      	b.n	80078ae <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80078b0:	f002 f8dc 	bl	8009a6c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80078b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078b8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80078ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d024      	beq.n	800790a <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80078c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c2:	1e5a      	subs	r2, r3, #1
 80078c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078c6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80078c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d104      	bne.n	80078da <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80078d0:	f001 fbde 	bl	8009090 <pvTaskIncrementMutexHeldCount>
 80078d4:	4602      	mov	r2, r0
 80078d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078d8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80078da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078dc:	691b      	ldr	r3, [r3, #16]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d00f      	beq.n	8007902 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80078e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078e4:	3310      	adds	r3, #16
 80078e6:	4618      	mov	r0, r3
 80078e8:	f000 fffc 	bl	80088e4 <xTaskRemoveFromEventList>
 80078ec:	4603      	mov	r3, r0
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d007      	beq.n	8007902 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80078f2:	4b55      	ldr	r3, [pc, #340]	; (8007a48 <xQueueSemaphoreTake+0x224>)
 80078f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078f8:	601a      	str	r2, [r3, #0]
 80078fa:	f3bf 8f4f 	dsb	sy
 80078fe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007902:	f002 f8e7 	bl	8009ad4 <vPortExitCritical>
				return pdPASS;
 8007906:	2301      	movs	r3, #1
 8007908:	e099      	b.n	8007a3e <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d113      	bne.n	8007938 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007912:	2b00      	cmp	r3, #0
 8007914:	d00c      	beq.n	8007930 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8007916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800791a:	b672      	cpsid	i
 800791c:	f383 8811 	msr	BASEPRI, r3
 8007920:	f3bf 8f6f 	isb	sy
 8007924:	f3bf 8f4f 	dsb	sy
 8007928:	b662      	cpsie	i
 800792a:	617b      	str	r3, [r7, #20]
}
 800792c:	bf00      	nop
 800792e:	e7fe      	b.n	800792e <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007930:	f002 f8d0 	bl	8009ad4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007934:	2300      	movs	r3, #0
 8007936:	e082      	b.n	8007a3e <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800793a:	2b00      	cmp	r3, #0
 800793c:	d106      	bne.n	800794c <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800793e:	f107 030c 	add.w	r3, r7, #12
 8007942:	4618      	mov	r0, r3
 8007944:	f001 f89a 	bl	8008a7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007948:	2301      	movs	r3, #1
 800794a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800794c:	f002 f8c2 	bl	8009ad4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007950:	f000 fd42 	bl	80083d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007954:	f002 f88a 	bl	8009a6c <vPortEnterCritical>
 8007958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800795a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800795e:	b25b      	sxtb	r3, r3
 8007960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007964:	d103      	bne.n	800796e <xQueueSemaphoreTake+0x14a>
 8007966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007968:	2200      	movs	r2, #0
 800796a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800796e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007970:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007974:	b25b      	sxtb	r3, r3
 8007976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800797a:	d103      	bne.n	8007984 <xQueueSemaphoreTake+0x160>
 800797c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800797e:	2200      	movs	r2, #0
 8007980:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007984:	f002 f8a6 	bl	8009ad4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007988:	463a      	mov	r2, r7
 800798a:	f107 030c 	add.w	r3, r7, #12
 800798e:	4611      	mov	r1, r2
 8007990:	4618      	mov	r0, r3
 8007992:	f001 f889 	bl	8008aa8 <xTaskCheckForTimeOut>
 8007996:	4603      	mov	r3, r0
 8007998:	2b00      	cmp	r3, #0
 800799a:	d132      	bne.n	8007a02 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800799c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800799e:	f000 f9fa 	bl	8007d96 <prvIsQueueEmpty>
 80079a2:	4603      	mov	r3, r0
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d026      	beq.n	80079f6 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80079a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d109      	bne.n	80079c4 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 80079b0:	f002 f85c 	bl	8009a6c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80079b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	4618      	mov	r0, r3
 80079ba:	f001 f9f1 	bl	8008da0 <xTaskPriorityInherit>
 80079be:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80079c0:	f002 f888 	bl	8009ad4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80079c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079c6:	3324      	adds	r3, #36	; 0x24
 80079c8:	683a      	ldr	r2, [r7, #0]
 80079ca:	4611      	mov	r1, r2
 80079cc:	4618      	mov	r0, r3
 80079ce:	f000 fef5 	bl	80087bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80079d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80079d4:	f000 f98d 	bl	8007cf2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80079d8:	f000 fd0c 	bl	80083f4 <xTaskResumeAll>
 80079dc:	4603      	mov	r3, r0
 80079de:	2b00      	cmp	r3, #0
 80079e0:	f47f af66 	bne.w	80078b0 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 80079e4:	4b18      	ldr	r3, [pc, #96]	; (8007a48 <xQueueSemaphoreTake+0x224>)
 80079e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079ea:	601a      	str	r2, [r3, #0]
 80079ec:	f3bf 8f4f 	dsb	sy
 80079f0:	f3bf 8f6f 	isb	sy
 80079f4:	e75c      	b.n	80078b0 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80079f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80079f8:	f000 f97b 	bl	8007cf2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80079fc:	f000 fcfa 	bl	80083f4 <xTaskResumeAll>
 8007a00:	e756      	b.n	80078b0 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007a02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a04:	f000 f975 	bl	8007cf2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007a08:	f000 fcf4 	bl	80083f4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a0e:	f000 f9c2 	bl	8007d96 <prvIsQueueEmpty>
 8007a12:	4603      	mov	r3, r0
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	f43f af4b 	beq.w	80078b0 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d00d      	beq.n	8007a3c <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8007a20:	f002 f824 	bl	8009a6c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007a24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a26:	f000 f8bc 	bl	8007ba2 <prvGetDisinheritPriorityAfterTimeout>
 8007a2a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007a32:	4618      	mov	r0, r3
 8007a34:	f001 fa8e 	bl	8008f54 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007a38:	f002 f84c 	bl	8009ad4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007a3c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3738      	adds	r7, #56	; 0x38
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	bf00      	nop
 8007a48:	e000ed04 	.word	0xe000ed04

08007a4c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b08e      	sub	sp, #56	; 0x38
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	60f8      	str	r0, [r7, #12]
 8007a54:	60b9      	str	r1, [r7, #8]
 8007a56:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d10c      	bne.n	8007a7c <xQueueReceiveFromISR+0x30>
	__asm volatile
 8007a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a66:	b672      	cpsid	i
 8007a68:	f383 8811 	msr	BASEPRI, r3
 8007a6c:	f3bf 8f6f 	isb	sy
 8007a70:	f3bf 8f4f 	dsb	sy
 8007a74:	b662      	cpsie	i
 8007a76:	623b      	str	r3, [r7, #32]
}
 8007a78:	bf00      	nop
 8007a7a:	e7fe      	b.n	8007a7a <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d103      	bne.n	8007a8a <xQueueReceiveFromISR+0x3e>
 8007a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d101      	bne.n	8007a8e <xQueueReceiveFromISR+0x42>
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	e000      	b.n	8007a90 <xQueueReceiveFromISR+0x44>
 8007a8e:	2300      	movs	r3, #0
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d10c      	bne.n	8007aae <xQueueReceiveFromISR+0x62>
	__asm volatile
 8007a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a98:	b672      	cpsid	i
 8007a9a:	f383 8811 	msr	BASEPRI, r3
 8007a9e:	f3bf 8f6f 	isb	sy
 8007aa2:	f3bf 8f4f 	dsb	sy
 8007aa6:	b662      	cpsie	i
 8007aa8:	61fb      	str	r3, [r7, #28]
}
 8007aaa:	bf00      	nop
 8007aac:	e7fe      	b.n	8007aac <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007aae:	f002 f8c5 	bl	8009c3c <vPortValidateInterruptPriority>
	__asm volatile
 8007ab2:	f3ef 8211 	mrs	r2, BASEPRI
 8007ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aba:	b672      	cpsid	i
 8007abc:	f383 8811 	msr	BASEPRI, r3
 8007ac0:	f3bf 8f6f 	isb	sy
 8007ac4:	f3bf 8f4f 	dsb	sy
 8007ac8:	b662      	cpsie	i
 8007aca:	61ba      	str	r2, [r7, #24]
 8007acc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007ace:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d02f      	beq.n	8007b3e <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ae4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007ae8:	68b9      	ldr	r1, [r7, #8]
 8007aea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007aec:	f000 f8db 	bl	8007ca6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af2:	1e5a      	subs	r2, r3, #1
 8007af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007af8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b00:	d112      	bne.n	8007b28 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b04:	691b      	ldr	r3, [r3, #16]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d016      	beq.n	8007b38 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b0c:	3310      	adds	r3, #16
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f000 fee8 	bl	80088e4 <xTaskRemoveFromEventList>
 8007b14:	4603      	mov	r3, r0
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d00e      	beq.n	8007b38 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d00b      	beq.n	8007b38 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2201      	movs	r2, #1
 8007b24:	601a      	str	r2, [r3, #0]
 8007b26:	e007      	b.n	8007b38 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007b28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b2c:	3301      	adds	r3, #1
 8007b2e:	b2db      	uxtb	r3, r3
 8007b30:	b25a      	sxtb	r2, r3
 8007b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	637b      	str	r3, [r7, #52]	; 0x34
 8007b3c:	e001      	b.n	8007b42 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	637b      	str	r3, [r7, #52]	; 0x34
 8007b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b44:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	f383 8811 	msr	BASEPRI, r3
}
 8007b4c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3738      	adds	r7, #56	; 0x38
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}

08007b58 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b084      	sub	sp, #16
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d10c      	bne.n	8007b84 <vQueueDelete+0x2c>
	__asm volatile
 8007b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b6e:	b672      	cpsid	i
 8007b70:	f383 8811 	msr	BASEPRI, r3
 8007b74:	f3bf 8f6f 	isb	sy
 8007b78:	f3bf 8f4f 	dsb	sy
 8007b7c:	b662      	cpsie	i
 8007b7e:	60bb      	str	r3, [r7, #8]
}
 8007b80:	bf00      	nop
 8007b82:	e7fe      	b.n	8007b82 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007b84:	68f8      	ldr	r0, [r7, #12]
 8007b86:	f000 f95f 	bl	8007e48 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d102      	bne.n	8007b9a <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 8007b94:	68f8      	ldr	r0, [r7, #12]
 8007b96:	f002 f95f 	bl	8009e58 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007b9a:	bf00      	nop
 8007b9c:	3710      	adds	r7, #16
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}

08007ba2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007ba2:	b480      	push	{r7}
 8007ba4:	b085      	sub	sp, #20
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d006      	beq.n	8007bc0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007bbc:	60fb      	str	r3, [r7, #12]
 8007bbe:	e001      	b.n	8007bc4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
	}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3714      	adds	r7, #20
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr

08007bd2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007bd2:	b580      	push	{r7, lr}
 8007bd4:	b086      	sub	sp, #24
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	60f8      	str	r0, [r7, #12]
 8007bda:	60b9      	str	r1, [r7, #8]
 8007bdc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007bde:	2300      	movs	r3, #0
 8007be0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d10d      	bne.n	8007c0c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d14d      	bne.n	8007c94 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	689b      	ldr	r3, [r3, #8]
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f001 f937 	bl	8008e70 <xTaskPriorityDisinherit>
 8007c02:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2200      	movs	r2, #0
 8007c08:	609a      	str	r2, [r3, #8]
 8007c0a:	e043      	b.n	8007c94 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d119      	bne.n	8007c46 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	6858      	ldr	r0, [r3, #4]
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	68b9      	ldr	r1, [r7, #8]
 8007c1e:	f00f ffaa 	bl	8017b76 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	685a      	ldr	r2, [r3, #4]
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c2a:	441a      	add	r2, r3
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	685a      	ldr	r2, [r3, #4]
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	689b      	ldr	r3, [r3, #8]
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d32b      	bcc.n	8007c94 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681a      	ldr	r2, [r3, #0]
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	605a      	str	r2, [r3, #4]
 8007c44:	e026      	b.n	8007c94 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	68d8      	ldr	r0, [r3, #12]
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c4e:	461a      	mov	r2, r3
 8007c50:	68b9      	ldr	r1, [r7, #8]
 8007c52:	f00f ff90 	bl	8017b76 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	68da      	ldr	r2, [r3, #12]
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c5e:	425b      	negs	r3, r3
 8007c60:	441a      	add	r2, r3
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	68da      	ldr	r2, [r3, #12]
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d207      	bcs.n	8007c82 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	689a      	ldr	r2, [r3, #8]
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c7a:	425b      	negs	r3, r3
 8007c7c:	441a      	add	r2, r3
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2b02      	cmp	r3, #2
 8007c86:	d105      	bne.n	8007c94 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d002      	beq.n	8007c94 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	3b01      	subs	r3, #1
 8007c92:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	1c5a      	adds	r2, r3, #1
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007c9c:	697b      	ldr	r3, [r7, #20]
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3718      	adds	r7, #24
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}

08007ca6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007ca6:	b580      	push	{r7, lr}
 8007ca8:	b082      	sub	sp, #8
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	6078      	str	r0, [r7, #4]
 8007cae:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d018      	beq.n	8007cea <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	68da      	ldr	r2, [r3, #12]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cc0:	441a      	add	r2, r3
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	68da      	ldr	r2, [r3, #12]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	689b      	ldr	r3, [r3, #8]
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d303      	bcc.n	8007cda <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681a      	ldr	r2, [r3, #0]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	68d9      	ldr	r1, [r3, #12]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	6838      	ldr	r0, [r7, #0]
 8007ce6:	f00f ff46 	bl	8017b76 <memcpy>
	}
}
 8007cea:	bf00      	nop
 8007cec:	3708      	adds	r7, #8
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}

08007cf2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007cf2:	b580      	push	{r7, lr}
 8007cf4:	b084      	sub	sp, #16
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007cfa:	f001 feb7 	bl	8009a6c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d04:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d06:	e011      	b.n	8007d2c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d012      	beq.n	8007d36 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	3324      	adds	r3, #36	; 0x24
 8007d14:	4618      	mov	r0, r3
 8007d16:	f000 fde5 	bl	80088e4 <xTaskRemoveFromEventList>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d001      	beq.n	8007d24 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007d20:	f000 ff28 	bl	8008b74 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007d24:	7bfb      	ldrb	r3, [r7, #15]
 8007d26:	3b01      	subs	r3, #1
 8007d28:	b2db      	uxtb	r3, r3
 8007d2a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	dce9      	bgt.n	8007d08 <prvUnlockQueue+0x16>
 8007d34:	e000      	b.n	8007d38 <prvUnlockQueue+0x46>
					break;
 8007d36:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	22ff      	movs	r2, #255	; 0xff
 8007d3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007d40:	f001 fec8 	bl	8009ad4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007d44:	f001 fe92 	bl	8009a6c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d4e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d50:	e011      	b.n	8007d76 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	691b      	ldr	r3, [r3, #16]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d012      	beq.n	8007d80 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	3310      	adds	r3, #16
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f000 fdc0 	bl	80088e4 <xTaskRemoveFromEventList>
 8007d64:	4603      	mov	r3, r0
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d001      	beq.n	8007d6e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007d6a:	f000 ff03 	bl	8008b74 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007d6e:	7bbb      	ldrb	r3, [r7, #14]
 8007d70:	3b01      	subs	r3, #1
 8007d72:	b2db      	uxtb	r3, r3
 8007d74:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d76:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	dce9      	bgt.n	8007d52 <prvUnlockQueue+0x60>
 8007d7e:	e000      	b.n	8007d82 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007d80:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	22ff      	movs	r2, #255	; 0xff
 8007d86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007d8a:	f001 fea3 	bl	8009ad4 <vPortExitCritical>
}
 8007d8e:	bf00      	nop
 8007d90:	3710      	adds	r7, #16
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}

08007d96 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007d96:	b580      	push	{r7, lr}
 8007d98:	b084      	sub	sp, #16
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007d9e:	f001 fe65 	bl	8009a6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d102      	bne.n	8007db0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007daa:	2301      	movs	r3, #1
 8007dac:	60fb      	str	r3, [r7, #12]
 8007dae:	e001      	b.n	8007db4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007db0:	2300      	movs	r3, #0
 8007db2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007db4:	f001 fe8e 	bl	8009ad4 <vPortExitCritical>

	return xReturn;
 8007db8:	68fb      	ldr	r3, [r7, #12]
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3710      	adds	r7, #16
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}

08007dc2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007dc2:	b580      	push	{r7, lr}
 8007dc4:	b084      	sub	sp, #16
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007dca:	f001 fe4f 	bl	8009a6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	d102      	bne.n	8007de0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	60fb      	str	r3, [r7, #12]
 8007dde:	e001      	b.n	8007de4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007de0:	2300      	movs	r3, #0
 8007de2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007de4:	f001 fe76 	bl	8009ad4 <vPortExitCritical>

	return xReturn;
 8007de8:	68fb      	ldr	r3, [r7, #12]
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3710      	adds	r7, #16
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
	...

08007df4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007df4:	b480      	push	{r7}
 8007df6:	b085      	sub	sp, #20
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007dfe:	2300      	movs	r3, #0
 8007e00:	60fb      	str	r3, [r7, #12]
 8007e02:	e014      	b.n	8007e2e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007e04:	4a0f      	ldr	r2, [pc, #60]	; (8007e44 <vQueueAddToRegistry+0x50>)
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d10b      	bne.n	8007e28 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007e10:	490c      	ldr	r1, [pc, #48]	; (8007e44 <vQueueAddToRegistry+0x50>)
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	683a      	ldr	r2, [r7, #0]
 8007e16:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007e1a:	4a0a      	ldr	r2, [pc, #40]	; (8007e44 <vQueueAddToRegistry+0x50>)
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	00db      	lsls	r3, r3, #3
 8007e20:	4413      	add	r3, r2
 8007e22:	687a      	ldr	r2, [r7, #4]
 8007e24:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007e26:	e006      	b.n	8007e36 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	3301      	adds	r3, #1
 8007e2c:	60fb      	str	r3, [r7, #12]
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2b07      	cmp	r3, #7
 8007e32:	d9e7      	bls.n	8007e04 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007e34:	bf00      	nop
 8007e36:	bf00      	nop
 8007e38:	3714      	adds	r7, #20
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr
 8007e42:	bf00      	nop
 8007e44:	2000831c 	.word	0x2000831c

08007e48 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007e48:	b480      	push	{r7}
 8007e4a:	b085      	sub	sp, #20
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e50:	2300      	movs	r3, #0
 8007e52:	60fb      	str	r3, [r7, #12]
 8007e54:	e016      	b.n	8007e84 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007e56:	4a10      	ldr	r2, [pc, #64]	; (8007e98 <vQueueUnregisterQueue+0x50>)
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	00db      	lsls	r3, r3, #3
 8007e5c:	4413      	add	r3, r2
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	687a      	ldr	r2, [r7, #4]
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d10b      	bne.n	8007e7e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007e66:	4a0c      	ldr	r2, [pc, #48]	; (8007e98 <vQueueUnregisterQueue+0x50>)
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2100      	movs	r1, #0
 8007e6c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007e70:	4a09      	ldr	r2, [pc, #36]	; (8007e98 <vQueueUnregisterQueue+0x50>)
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	00db      	lsls	r3, r3, #3
 8007e76:	4413      	add	r3, r2
 8007e78:	2200      	movs	r2, #0
 8007e7a:	605a      	str	r2, [r3, #4]
				break;
 8007e7c:	e006      	b.n	8007e8c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	3301      	adds	r3, #1
 8007e82:	60fb      	str	r3, [r7, #12]
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	2b07      	cmp	r3, #7
 8007e88:	d9e5      	bls.n	8007e56 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007e8a:	bf00      	nop
 8007e8c:	bf00      	nop
 8007e8e:	3714      	adds	r7, #20
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr
 8007e98:	2000831c 	.word	0x2000831c

08007e9c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b086      	sub	sp, #24
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	60f8      	str	r0, [r7, #12]
 8007ea4:	60b9      	str	r1, [r7, #8]
 8007ea6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007eac:	f001 fdde 	bl	8009a6c <vPortEnterCritical>
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007eb6:	b25b      	sxtb	r3, r3
 8007eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ebc:	d103      	bne.n	8007ec6 <vQueueWaitForMessageRestricted+0x2a>
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ecc:	b25b      	sxtb	r3, r3
 8007ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ed2:	d103      	bne.n	8007edc <vQueueWaitForMessageRestricted+0x40>
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007edc:	f001 fdfa 	bl	8009ad4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d106      	bne.n	8007ef6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	3324      	adds	r3, #36	; 0x24
 8007eec:	687a      	ldr	r2, [r7, #4]
 8007eee:	68b9      	ldr	r1, [r7, #8]
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f000 fcc9 	bl	8008888 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007ef6:	6978      	ldr	r0, [r7, #20]
 8007ef8:	f7ff fefb 	bl	8007cf2 <prvUnlockQueue>
	}
 8007efc:	bf00      	nop
 8007efe:	3718      	adds	r7, #24
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b08e      	sub	sp, #56	; 0x38
 8007f08:	af04      	add	r7, sp, #16
 8007f0a:	60f8      	str	r0, [r7, #12]
 8007f0c:	60b9      	str	r1, [r7, #8]
 8007f0e:	607a      	str	r2, [r7, #4]
 8007f10:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d10c      	bne.n	8007f32 <xTaskCreateStatic+0x2e>
	__asm volatile
 8007f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f1c:	b672      	cpsid	i
 8007f1e:	f383 8811 	msr	BASEPRI, r3
 8007f22:	f3bf 8f6f 	isb	sy
 8007f26:	f3bf 8f4f 	dsb	sy
 8007f2a:	b662      	cpsie	i
 8007f2c:	623b      	str	r3, [r7, #32]
}
 8007f2e:	bf00      	nop
 8007f30:	e7fe      	b.n	8007f30 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8007f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d10c      	bne.n	8007f52 <xTaskCreateStatic+0x4e>
	__asm volatile
 8007f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f3c:	b672      	cpsid	i
 8007f3e:	f383 8811 	msr	BASEPRI, r3
 8007f42:	f3bf 8f6f 	isb	sy
 8007f46:	f3bf 8f4f 	dsb	sy
 8007f4a:	b662      	cpsie	i
 8007f4c:	61fb      	str	r3, [r7, #28]
}
 8007f4e:	bf00      	nop
 8007f50:	e7fe      	b.n	8007f50 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007f52:	23bc      	movs	r3, #188	; 0xbc
 8007f54:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	2bbc      	cmp	r3, #188	; 0xbc
 8007f5a:	d00c      	beq.n	8007f76 <xTaskCreateStatic+0x72>
	__asm volatile
 8007f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f60:	b672      	cpsid	i
 8007f62:	f383 8811 	msr	BASEPRI, r3
 8007f66:	f3bf 8f6f 	isb	sy
 8007f6a:	f3bf 8f4f 	dsb	sy
 8007f6e:	b662      	cpsie	i
 8007f70:	61bb      	str	r3, [r7, #24]
}
 8007f72:	bf00      	nop
 8007f74:	e7fe      	b.n	8007f74 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007f76:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d01e      	beq.n	8007fbc <xTaskCreateStatic+0xb8>
 8007f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d01b      	beq.n	8007fbc <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f86:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f8c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f90:	2202      	movs	r2, #2
 8007f92:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007f96:	2300      	movs	r3, #0
 8007f98:	9303      	str	r3, [sp, #12]
 8007f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9c:	9302      	str	r3, [sp, #8]
 8007f9e:	f107 0314 	add.w	r3, r7, #20
 8007fa2:	9301      	str	r3, [sp, #4]
 8007fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa6:	9300      	str	r3, [sp, #0]
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	687a      	ldr	r2, [r7, #4]
 8007fac:	68b9      	ldr	r1, [r7, #8]
 8007fae:	68f8      	ldr	r0, [r7, #12]
 8007fb0:	f000 f850 	bl	8008054 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007fb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007fb6:	f000 f8f5 	bl	80081a4 <prvAddNewTaskToReadyList>
 8007fba:	e001      	b.n	8007fc0 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007fc0:	697b      	ldr	r3, [r7, #20]
	}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3728      	adds	r7, #40	; 0x28
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}

08007fca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007fca:	b580      	push	{r7, lr}
 8007fcc:	b08c      	sub	sp, #48	; 0x30
 8007fce:	af04      	add	r7, sp, #16
 8007fd0:	60f8      	str	r0, [r7, #12]
 8007fd2:	60b9      	str	r1, [r7, #8]
 8007fd4:	603b      	str	r3, [r7, #0]
 8007fd6:	4613      	mov	r3, r2
 8007fd8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007fda:	88fb      	ldrh	r3, [r7, #6]
 8007fdc:	009b      	lsls	r3, r3, #2
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f001 fe70 	bl	8009cc4 <pvPortMalloc>
 8007fe4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d00e      	beq.n	800800a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007fec:	20bc      	movs	r0, #188	; 0xbc
 8007fee:	f001 fe69 	bl	8009cc4 <pvPortMalloc>
 8007ff2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007ff4:	69fb      	ldr	r3, [r7, #28]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d003      	beq.n	8008002 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007ffa:	69fb      	ldr	r3, [r7, #28]
 8007ffc:	697a      	ldr	r2, [r7, #20]
 8007ffe:	631a      	str	r2, [r3, #48]	; 0x30
 8008000:	e005      	b.n	800800e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008002:	6978      	ldr	r0, [r7, #20]
 8008004:	f001 ff28 	bl	8009e58 <vPortFree>
 8008008:	e001      	b.n	800800e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800800a:	2300      	movs	r3, #0
 800800c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800800e:	69fb      	ldr	r3, [r7, #28]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d017      	beq.n	8008044 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008014:	69fb      	ldr	r3, [r7, #28]
 8008016:	2200      	movs	r2, #0
 8008018:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800801c:	88fa      	ldrh	r2, [r7, #6]
 800801e:	2300      	movs	r3, #0
 8008020:	9303      	str	r3, [sp, #12]
 8008022:	69fb      	ldr	r3, [r7, #28]
 8008024:	9302      	str	r3, [sp, #8]
 8008026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008028:	9301      	str	r3, [sp, #4]
 800802a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800802c:	9300      	str	r3, [sp, #0]
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	68b9      	ldr	r1, [r7, #8]
 8008032:	68f8      	ldr	r0, [r7, #12]
 8008034:	f000 f80e 	bl	8008054 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008038:	69f8      	ldr	r0, [r7, #28]
 800803a:	f000 f8b3 	bl	80081a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800803e:	2301      	movs	r3, #1
 8008040:	61bb      	str	r3, [r7, #24]
 8008042:	e002      	b.n	800804a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008044:	f04f 33ff 	mov.w	r3, #4294967295
 8008048:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800804a:	69bb      	ldr	r3, [r7, #24]
	}
 800804c:	4618      	mov	r0, r3
 800804e:	3720      	adds	r7, #32
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b088      	sub	sp, #32
 8008058:	af00      	add	r7, sp, #0
 800805a:	60f8      	str	r0, [r7, #12]
 800805c:	60b9      	str	r1, [r7, #8]
 800805e:	607a      	str	r2, [r7, #4]
 8008060:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008064:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	009b      	lsls	r3, r3, #2
 800806a:	461a      	mov	r2, r3
 800806c:	21a5      	movs	r1, #165	; 0xa5
 800806e:	f00f fd90 	bl	8017b92 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008074:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008076:	6879      	ldr	r1, [r7, #4]
 8008078:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800807c:	440b      	add	r3, r1
 800807e:	009b      	lsls	r3, r3, #2
 8008080:	4413      	add	r3, r2
 8008082:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008084:	69bb      	ldr	r3, [r7, #24]
 8008086:	f023 0307 	bic.w	r3, r3, #7
 800808a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800808c:	69bb      	ldr	r3, [r7, #24]
 800808e:	f003 0307 	and.w	r3, r3, #7
 8008092:	2b00      	cmp	r3, #0
 8008094:	d00c      	beq.n	80080b0 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8008096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800809a:	b672      	cpsid	i
 800809c:	f383 8811 	msr	BASEPRI, r3
 80080a0:	f3bf 8f6f 	isb	sy
 80080a4:	f3bf 8f4f 	dsb	sy
 80080a8:	b662      	cpsie	i
 80080aa:	617b      	str	r3, [r7, #20]
}
 80080ac:	bf00      	nop
 80080ae:	e7fe      	b.n	80080ae <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d01f      	beq.n	80080f6 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80080b6:	2300      	movs	r3, #0
 80080b8:	61fb      	str	r3, [r7, #28]
 80080ba:	e012      	b.n	80080e2 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80080bc:	68ba      	ldr	r2, [r7, #8]
 80080be:	69fb      	ldr	r3, [r7, #28]
 80080c0:	4413      	add	r3, r2
 80080c2:	7819      	ldrb	r1, [r3, #0]
 80080c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080c6:	69fb      	ldr	r3, [r7, #28]
 80080c8:	4413      	add	r3, r2
 80080ca:	3334      	adds	r3, #52	; 0x34
 80080cc:	460a      	mov	r2, r1
 80080ce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80080d0:	68ba      	ldr	r2, [r7, #8]
 80080d2:	69fb      	ldr	r3, [r7, #28]
 80080d4:	4413      	add	r3, r2
 80080d6:	781b      	ldrb	r3, [r3, #0]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d006      	beq.n	80080ea <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80080dc:	69fb      	ldr	r3, [r7, #28]
 80080de:	3301      	adds	r3, #1
 80080e0:	61fb      	str	r3, [r7, #28]
 80080e2:	69fb      	ldr	r3, [r7, #28]
 80080e4:	2b0f      	cmp	r3, #15
 80080e6:	d9e9      	bls.n	80080bc <prvInitialiseNewTask+0x68>
 80080e8:	e000      	b.n	80080ec <prvInitialiseNewTask+0x98>
			{
				break;
 80080ea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80080ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ee:	2200      	movs	r2, #0
 80080f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80080f4:	e003      	b.n	80080fe <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80080f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f8:	2200      	movs	r2, #0
 80080fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80080fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008100:	2b37      	cmp	r3, #55	; 0x37
 8008102:	d901      	bls.n	8008108 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008104:	2337      	movs	r3, #55	; 0x37
 8008106:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800810a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800810c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800810e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008110:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008112:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008116:	2200      	movs	r2, #0
 8008118:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800811a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800811c:	3304      	adds	r3, #4
 800811e:	4618      	mov	r0, r3
 8008120:	f7fe fd4c 	bl	8006bbc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008126:	3318      	adds	r3, #24
 8008128:	4618      	mov	r0, r3
 800812a:	f7fe fd47 	bl	8006bbc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800812e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008130:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008132:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008136:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800813a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800813c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800813e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008140:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008142:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008146:	2200      	movs	r2, #0
 8008148:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800814c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800814e:	2200      	movs	r2, #0
 8008150:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008156:	3354      	adds	r3, #84	; 0x54
 8008158:	2260      	movs	r2, #96	; 0x60
 800815a:	2100      	movs	r1, #0
 800815c:	4618      	mov	r0, r3
 800815e:	f00f fd18 	bl	8017b92 <memset>
 8008162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008164:	4a0c      	ldr	r2, [pc, #48]	; (8008198 <prvInitialiseNewTask+0x144>)
 8008166:	659a      	str	r2, [r3, #88]	; 0x58
 8008168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800816a:	4a0c      	ldr	r2, [pc, #48]	; (800819c <prvInitialiseNewTask+0x148>)
 800816c:	65da      	str	r2, [r3, #92]	; 0x5c
 800816e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008170:	4a0b      	ldr	r2, [pc, #44]	; (80081a0 <prvInitialiseNewTask+0x14c>)
 8008172:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008174:	683a      	ldr	r2, [r7, #0]
 8008176:	68f9      	ldr	r1, [r7, #12]
 8008178:	69b8      	ldr	r0, [r7, #24]
 800817a:	f001 fb6d 	bl	8009858 <pxPortInitialiseStack>
 800817e:	4602      	mov	r2, r0
 8008180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008182:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008186:	2b00      	cmp	r3, #0
 8008188:	d002      	beq.n	8008190 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800818a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800818c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800818e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008190:	bf00      	nop
 8008192:	3720      	adds	r7, #32
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}
 8008198:	0801bb08 	.word	0x0801bb08
 800819c:	0801bb28 	.word	0x0801bb28
 80081a0:	0801bae8 	.word	0x0801bae8

080081a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b082      	sub	sp, #8
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80081ac:	f001 fc5e 	bl	8009a6c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80081b0:	4b2d      	ldr	r3, [pc, #180]	; (8008268 <prvAddNewTaskToReadyList+0xc4>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	3301      	adds	r3, #1
 80081b6:	4a2c      	ldr	r2, [pc, #176]	; (8008268 <prvAddNewTaskToReadyList+0xc4>)
 80081b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80081ba:	4b2c      	ldr	r3, [pc, #176]	; (800826c <prvAddNewTaskToReadyList+0xc8>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d109      	bne.n	80081d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80081c2:	4a2a      	ldr	r2, [pc, #168]	; (800826c <prvAddNewTaskToReadyList+0xc8>)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80081c8:	4b27      	ldr	r3, [pc, #156]	; (8008268 <prvAddNewTaskToReadyList+0xc4>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d110      	bne.n	80081f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80081d0:	f000 fcf4 	bl	8008bbc <prvInitialiseTaskLists>
 80081d4:	e00d      	b.n	80081f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80081d6:	4b26      	ldr	r3, [pc, #152]	; (8008270 <prvAddNewTaskToReadyList+0xcc>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d109      	bne.n	80081f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80081de:	4b23      	ldr	r3, [pc, #140]	; (800826c <prvAddNewTaskToReadyList+0xc8>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e8:	429a      	cmp	r2, r3
 80081ea:	d802      	bhi.n	80081f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80081ec:	4a1f      	ldr	r2, [pc, #124]	; (800826c <prvAddNewTaskToReadyList+0xc8>)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80081f2:	4b20      	ldr	r3, [pc, #128]	; (8008274 <prvAddNewTaskToReadyList+0xd0>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	3301      	adds	r3, #1
 80081f8:	4a1e      	ldr	r2, [pc, #120]	; (8008274 <prvAddNewTaskToReadyList+0xd0>)
 80081fa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80081fc:	4b1d      	ldr	r3, [pc, #116]	; (8008274 <prvAddNewTaskToReadyList+0xd0>)
 80081fe:	681a      	ldr	r2, [r3, #0]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008208:	4b1b      	ldr	r3, [pc, #108]	; (8008278 <prvAddNewTaskToReadyList+0xd4>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	429a      	cmp	r2, r3
 800820e:	d903      	bls.n	8008218 <prvAddNewTaskToReadyList+0x74>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008214:	4a18      	ldr	r2, [pc, #96]	; (8008278 <prvAddNewTaskToReadyList+0xd4>)
 8008216:	6013      	str	r3, [r2, #0]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800821c:	4613      	mov	r3, r2
 800821e:	009b      	lsls	r3, r3, #2
 8008220:	4413      	add	r3, r2
 8008222:	009b      	lsls	r3, r3, #2
 8008224:	4a15      	ldr	r2, [pc, #84]	; (800827c <prvAddNewTaskToReadyList+0xd8>)
 8008226:	441a      	add	r2, r3
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	3304      	adds	r3, #4
 800822c:	4619      	mov	r1, r3
 800822e:	4610      	mov	r0, r2
 8008230:	f7fe fcd1 	bl	8006bd6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008234:	f001 fc4e 	bl	8009ad4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008238:	4b0d      	ldr	r3, [pc, #52]	; (8008270 <prvAddNewTaskToReadyList+0xcc>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d00e      	beq.n	800825e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008240:	4b0a      	ldr	r3, [pc, #40]	; (800826c <prvAddNewTaskToReadyList+0xc8>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800824a:	429a      	cmp	r2, r3
 800824c:	d207      	bcs.n	800825e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800824e:	4b0c      	ldr	r3, [pc, #48]	; (8008280 <prvAddNewTaskToReadyList+0xdc>)
 8008250:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008254:	601a      	str	r2, [r3, #0]
 8008256:	f3bf 8f4f 	dsb	sy
 800825a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800825e:	bf00      	nop
 8008260:	3708      	adds	r7, #8
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}
 8008266:	bf00      	nop
 8008268:	20000dfc 	.word	0x20000dfc
 800826c:	20000928 	.word	0x20000928
 8008270:	20000e08 	.word	0x20000e08
 8008274:	20000e18 	.word	0x20000e18
 8008278:	20000e04 	.word	0x20000e04
 800827c:	2000092c 	.word	0x2000092c
 8008280:	e000ed04 	.word	0xe000ed04

08008284 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008284:	b580      	push	{r7, lr}
 8008286:	b084      	sub	sp, #16
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800828c:	2300      	movs	r3, #0
 800828e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d019      	beq.n	80082ca <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008296:	4b14      	ldr	r3, [pc, #80]	; (80082e8 <vTaskDelay+0x64>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d00c      	beq.n	80082b8 <vTaskDelay+0x34>
	__asm volatile
 800829e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a2:	b672      	cpsid	i
 80082a4:	f383 8811 	msr	BASEPRI, r3
 80082a8:	f3bf 8f6f 	isb	sy
 80082ac:	f3bf 8f4f 	dsb	sy
 80082b0:	b662      	cpsie	i
 80082b2:	60bb      	str	r3, [r7, #8]
}
 80082b4:	bf00      	nop
 80082b6:	e7fe      	b.n	80082b6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80082b8:	f000 f88e 	bl	80083d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80082bc:	2100      	movs	r1, #0
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 fefa 	bl	80090b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80082c4:	f000 f896 	bl	80083f4 <xTaskResumeAll>
 80082c8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d107      	bne.n	80082e0 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80082d0:	4b06      	ldr	r3, [pc, #24]	; (80082ec <vTaskDelay+0x68>)
 80082d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082d6:	601a      	str	r2, [r3, #0]
 80082d8:	f3bf 8f4f 	dsb	sy
 80082dc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80082e0:	bf00      	nop
 80082e2:	3710      	adds	r7, #16
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}
 80082e8:	20000e24 	.word	0x20000e24
 80082ec:	e000ed04 	.word	0xe000ed04

080082f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b08a      	sub	sp, #40	; 0x28
 80082f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80082f6:	2300      	movs	r3, #0
 80082f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80082fa:	2300      	movs	r3, #0
 80082fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80082fe:	463a      	mov	r2, r7
 8008300:	1d39      	adds	r1, r7, #4
 8008302:	f107 0308 	add.w	r3, r7, #8
 8008306:	4618      	mov	r0, r3
 8008308:	f7fe fa42 	bl	8006790 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800830c:	6839      	ldr	r1, [r7, #0]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	68ba      	ldr	r2, [r7, #8]
 8008312:	9202      	str	r2, [sp, #8]
 8008314:	9301      	str	r3, [sp, #4]
 8008316:	2300      	movs	r3, #0
 8008318:	9300      	str	r3, [sp, #0]
 800831a:	2300      	movs	r3, #0
 800831c:	460a      	mov	r2, r1
 800831e:	4926      	ldr	r1, [pc, #152]	; (80083b8 <vTaskStartScheduler+0xc8>)
 8008320:	4826      	ldr	r0, [pc, #152]	; (80083bc <vTaskStartScheduler+0xcc>)
 8008322:	f7ff fdef 	bl	8007f04 <xTaskCreateStatic>
 8008326:	4603      	mov	r3, r0
 8008328:	4a25      	ldr	r2, [pc, #148]	; (80083c0 <vTaskStartScheduler+0xd0>)
 800832a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800832c:	4b24      	ldr	r3, [pc, #144]	; (80083c0 <vTaskStartScheduler+0xd0>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d002      	beq.n	800833a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008334:	2301      	movs	r3, #1
 8008336:	617b      	str	r3, [r7, #20]
 8008338:	e001      	b.n	800833e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800833a:	2300      	movs	r3, #0
 800833c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	2b01      	cmp	r3, #1
 8008342:	d102      	bne.n	800834a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008344:	f000 ff0c 	bl	8009160 <xTimerCreateTimerTask>
 8008348:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	2b01      	cmp	r3, #1
 800834e:	d11d      	bne.n	800838c <vTaskStartScheduler+0x9c>
	__asm volatile
 8008350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008354:	b672      	cpsid	i
 8008356:	f383 8811 	msr	BASEPRI, r3
 800835a:	f3bf 8f6f 	isb	sy
 800835e:	f3bf 8f4f 	dsb	sy
 8008362:	b662      	cpsie	i
 8008364:	613b      	str	r3, [r7, #16]
}
 8008366:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008368:	4b16      	ldr	r3, [pc, #88]	; (80083c4 <vTaskStartScheduler+0xd4>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	3354      	adds	r3, #84	; 0x54
 800836e:	4a16      	ldr	r2, [pc, #88]	; (80083c8 <vTaskStartScheduler+0xd8>)
 8008370:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008372:	4b16      	ldr	r3, [pc, #88]	; (80083cc <vTaskStartScheduler+0xdc>)
 8008374:	f04f 32ff 	mov.w	r2, #4294967295
 8008378:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800837a:	4b15      	ldr	r3, [pc, #84]	; (80083d0 <vTaskStartScheduler+0xe0>)
 800837c:	2201      	movs	r2, #1
 800837e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008380:	4b14      	ldr	r3, [pc, #80]	; (80083d4 <vTaskStartScheduler+0xe4>)
 8008382:	2200      	movs	r2, #0
 8008384:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008386:	f001 faf3 	bl	8009970 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800838a:	e010      	b.n	80083ae <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008392:	d10c      	bne.n	80083ae <vTaskStartScheduler+0xbe>
	__asm volatile
 8008394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008398:	b672      	cpsid	i
 800839a:	f383 8811 	msr	BASEPRI, r3
 800839e:	f3bf 8f6f 	isb	sy
 80083a2:	f3bf 8f4f 	dsb	sy
 80083a6:	b662      	cpsie	i
 80083a8:	60fb      	str	r3, [r7, #12]
}
 80083aa:	bf00      	nop
 80083ac:	e7fe      	b.n	80083ac <vTaskStartScheduler+0xbc>
}
 80083ae:	bf00      	nop
 80083b0:	3718      	adds	r7, #24
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
 80083b6:	bf00      	nop
 80083b8:	08018ae4 	.word	0x08018ae4
 80083bc:	08008b8d 	.word	0x08008b8d
 80083c0:	20000e20 	.word	0x20000e20
 80083c4:	20000928 	.word	0x20000928
 80083c8:	20000120 	.word	0x20000120
 80083cc:	20000e1c 	.word	0x20000e1c
 80083d0:	20000e08 	.word	0x20000e08
 80083d4:	20000e00 	.word	0x20000e00

080083d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80083d8:	b480      	push	{r7}
 80083da:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80083dc:	4b04      	ldr	r3, [pc, #16]	; (80083f0 <vTaskSuspendAll+0x18>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	3301      	adds	r3, #1
 80083e2:	4a03      	ldr	r2, [pc, #12]	; (80083f0 <vTaskSuspendAll+0x18>)
 80083e4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80083e6:	bf00      	nop
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr
 80083f0:	20000e24 	.word	0x20000e24

080083f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80083fa:	2300      	movs	r3, #0
 80083fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80083fe:	2300      	movs	r3, #0
 8008400:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008402:	4b43      	ldr	r3, [pc, #268]	; (8008510 <xTaskResumeAll+0x11c>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d10c      	bne.n	8008424 <xTaskResumeAll+0x30>
	__asm volatile
 800840a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800840e:	b672      	cpsid	i
 8008410:	f383 8811 	msr	BASEPRI, r3
 8008414:	f3bf 8f6f 	isb	sy
 8008418:	f3bf 8f4f 	dsb	sy
 800841c:	b662      	cpsie	i
 800841e:	603b      	str	r3, [r7, #0]
}
 8008420:	bf00      	nop
 8008422:	e7fe      	b.n	8008422 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008424:	f001 fb22 	bl	8009a6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008428:	4b39      	ldr	r3, [pc, #228]	; (8008510 <xTaskResumeAll+0x11c>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	3b01      	subs	r3, #1
 800842e:	4a38      	ldr	r2, [pc, #224]	; (8008510 <xTaskResumeAll+0x11c>)
 8008430:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008432:	4b37      	ldr	r3, [pc, #220]	; (8008510 <xTaskResumeAll+0x11c>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d162      	bne.n	8008500 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800843a:	4b36      	ldr	r3, [pc, #216]	; (8008514 <xTaskResumeAll+0x120>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d05e      	beq.n	8008500 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008442:	e02f      	b.n	80084a4 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008444:	4b34      	ldr	r3, [pc, #208]	; (8008518 <xTaskResumeAll+0x124>)
 8008446:	68db      	ldr	r3, [r3, #12]
 8008448:	68db      	ldr	r3, [r3, #12]
 800844a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	3318      	adds	r3, #24
 8008450:	4618      	mov	r0, r3
 8008452:	f7fe fc1d 	bl	8006c90 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	3304      	adds	r3, #4
 800845a:	4618      	mov	r0, r3
 800845c:	f7fe fc18 	bl	8006c90 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008464:	4b2d      	ldr	r3, [pc, #180]	; (800851c <xTaskResumeAll+0x128>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	429a      	cmp	r2, r3
 800846a:	d903      	bls.n	8008474 <xTaskResumeAll+0x80>
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008470:	4a2a      	ldr	r2, [pc, #168]	; (800851c <xTaskResumeAll+0x128>)
 8008472:	6013      	str	r3, [r2, #0]
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008478:	4613      	mov	r3, r2
 800847a:	009b      	lsls	r3, r3, #2
 800847c:	4413      	add	r3, r2
 800847e:	009b      	lsls	r3, r3, #2
 8008480:	4a27      	ldr	r2, [pc, #156]	; (8008520 <xTaskResumeAll+0x12c>)
 8008482:	441a      	add	r2, r3
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	3304      	adds	r3, #4
 8008488:	4619      	mov	r1, r3
 800848a:	4610      	mov	r0, r2
 800848c:	f7fe fba3 	bl	8006bd6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008494:	4b23      	ldr	r3, [pc, #140]	; (8008524 <xTaskResumeAll+0x130>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800849a:	429a      	cmp	r2, r3
 800849c:	d302      	bcc.n	80084a4 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800849e:	4b22      	ldr	r3, [pc, #136]	; (8008528 <xTaskResumeAll+0x134>)
 80084a0:	2201      	movs	r2, #1
 80084a2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80084a4:	4b1c      	ldr	r3, [pc, #112]	; (8008518 <xTaskResumeAll+0x124>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d1cb      	bne.n	8008444 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d001      	beq.n	80084b6 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80084b2:	f000 fc27 	bl	8008d04 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80084b6:	4b1d      	ldr	r3, [pc, #116]	; (800852c <xTaskResumeAll+0x138>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d010      	beq.n	80084e4 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80084c2:	f000 f859 	bl	8008578 <xTaskIncrementTick>
 80084c6:	4603      	mov	r3, r0
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d002      	beq.n	80084d2 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80084cc:	4b16      	ldr	r3, [pc, #88]	; (8008528 <xTaskResumeAll+0x134>)
 80084ce:	2201      	movs	r2, #1
 80084d0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	3b01      	subs	r3, #1
 80084d6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d1f1      	bne.n	80084c2 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80084de:	4b13      	ldr	r3, [pc, #76]	; (800852c <xTaskResumeAll+0x138>)
 80084e0:	2200      	movs	r2, #0
 80084e2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80084e4:	4b10      	ldr	r3, [pc, #64]	; (8008528 <xTaskResumeAll+0x134>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d009      	beq.n	8008500 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80084ec:	2301      	movs	r3, #1
 80084ee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80084f0:	4b0f      	ldr	r3, [pc, #60]	; (8008530 <xTaskResumeAll+0x13c>)
 80084f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084f6:	601a      	str	r2, [r3, #0]
 80084f8:	f3bf 8f4f 	dsb	sy
 80084fc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008500:	f001 fae8 	bl	8009ad4 <vPortExitCritical>

	return xAlreadyYielded;
 8008504:	68bb      	ldr	r3, [r7, #8]
}
 8008506:	4618      	mov	r0, r3
 8008508:	3710      	adds	r7, #16
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop
 8008510:	20000e24 	.word	0x20000e24
 8008514:	20000dfc 	.word	0x20000dfc
 8008518:	20000dbc 	.word	0x20000dbc
 800851c:	20000e04 	.word	0x20000e04
 8008520:	2000092c 	.word	0x2000092c
 8008524:	20000928 	.word	0x20000928
 8008528:	20000e10 	.word	0x20000e10
 800852c:	20000e0c 	.word	0x20000e0c
 8008530:	e000ed04 	.word	0xe000ed04

08008534 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008534:	b480      	push	{r7}
 8008536:	b083      	sub	sp, #12
 8008538:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800853a:	4b05      	ldr	r3, [pc, #20]	; (8008550 <xTaskGetTickCount+0x1c>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008540:	687b      	ldr	r3, [r7, #4]
}
 8008542:	4618      	mov	r0, r3
 8008544:	370c      	adds	r7, #12
 8008546:	46bd      	mov	sp, r7
 8008548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854c:	4770      	bx	lr
 800854e:	bf00      	nop
 8008550:	20000e00 	.word	0x20000e00

08008554 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b082      	sub	sp, #8
 8008558:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800855a:	f001 fb6f 	bl	8009c3c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800855e:	2300      	movs	r3, #0
 8008560:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8008562:	4b04      	ldr	r3, [pc, #16]	; (8008574 <xTaskGetTickCountFromISR+0x20>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008568:	683b      	ldr	r3, [r7, #0]
}
 800856a:	4618      	mov	r0, r3
 800856c:	3708      	adds	r7, #8
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}
 8008572:	bf00      	nop
 8008574:	20000e00 	.word	0x20000e00

08008578 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b086      	sub	sp, #24
 800857c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800857e:	2300      	movs	r3, #0
 8008580:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008582:	4b50      	ldr	r3, [pc, #320]	; (80086c4 <xTaskIncrementTick+0x14c>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	2b00      	cmp	r3, #0
 8008588:	f040 808b 	bne.w	80086a2 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800858c:	4b4e      	ldr	r3, [pc, #312]	; (80086c8 <xTaskIncrementTick+0x150>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	3301      	adds	r3, #1
 8008592:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008594:	4a4c      	ldr	r2, [pc, #304]	; (80086c8 <xTaskIncrementTick+0x150>)
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d122      	bne.n	80085e6 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80085a0:	4b4a      	ldr	r3, [pc, #296]	; (80086cc <xTaskIncrementTick+0x154>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d00c      	beq.n	80085c4 <xTaskIncrementTick+0x4c>
	__asm volatile
 80085aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ae:	b672      	cpsid	i
 80085b0:	f383 8811 	msr	BASEPRI, r3
 80085b4:	f3bf 8f6f 	isb	sy
 80085b8:	f3bf 8f4f 	dsb	sy
 80085bc:	b662      	cpsie	i
 80085be:	603b      	str	r3, [r7, #0]
}
 80085c0:	bf00      	nop
 80085c2:	e7fe      	b.n	80085c2 <xTaskIncrementTick+0x4a>
 80085c4:	4b41      	ldr	r3, [pc, #260]	; (80086cc <xTaskIncrementTick+0x154>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	60fb      	str	r3, [r7, #12]
 80085ca:	4b41      	ldr	r3, [pc, #260]	; (80086d0 <xTaskIncrementTick+0x158>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4a3f      	ldr	r2, [pc, #252]	; (80086cc <xTaskIncrementTick+0x154>)
 80085d0:	6013      	str	r3, [r2, #0]
 80085d2:	4a3f      	ldr	r2, [pc, #252]	; (80086d0 <xTaskIncrementTick+0x158>)
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	6013      	str	r3, [r2, #0]
 80085d8:	4b3e      	ldr	r3, [pc, #248]	; (80086d4 <xTaskIncrementTick+0x15c>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	3301      	adds	r3, #1
 80085de:	4a3d      	ldr	r2, [pc, #244]	; (80086d4 <xTaskIncrementTick+0x15c>)
 80085e0:	6013      	str	r3, [r2, #0]
 80085e2:	f000 fb8f 	bl	8008d04 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80085e6:	4b3c      	ldr	r3, [pc, #240]	; (80086d8 <xTaskIncrementTick+0x160>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	693a      	ldr	r2, [r7, #16]
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d349      	bcc.n	8008684 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80085f0:	4b36      	ldr	r3, [pc, #216]	; (80086cc <xTaskIncrementTick+0x154>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d104      	bne.n	8008604 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085fa:	4b37      	ldr	r3, [pc, #220]	; (80086d8 <xTaskIncrementTick+0x160>)
 80085fc:	f04f 32ff 	mov.w	r2, #4294967295
 8008600:	601a      	str	r2, [r3, #0]
					break;
 8008602:	e03f      	b.n	8008684 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008604:	4b31      	ldr	r3, [pc, #196]	; (80086cc <xTaskIncrementTick+0x154>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	68db      	ldr	r3, [r3, #12]
 800860a:	68db      	ldr	r3, [r3, #12]
 800860c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008614:	693a      	ldr	r2, [r7, #16]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	429a      	cmp	r2, r3
 800861a:	d203      	bcs.n	8008624 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800861c:	4a2e      	ldr	r2, [pc, #184]	; (80086d8 <xTaskIncrementTick+0x160>)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008622:	e02f      	b.n	8008684 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	3304      	adds	r3, #4
 8008628:	4618      	mov	r0, r3
 800862a:	f7fe fb31 	bl	8006c90 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008632:	2b00      	cmp	r3, #0
 8008634:	d004      	beq.n	8008640 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	3318      	adds	r3, #24
 800863a:	4618      	mov	r0, r3
 800863c:	f7fe fb28 	bl	8006c90 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008644:	4b25      	ldr	r3, [pc, #148]	; (80086dc <xTaskIncrementTick+0x164>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	429a      	cmp	r2, r3
 800864a:	d903      	bls.n	8008654 <xTaskIncrementTick+0xdc>
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008650:	4a22      	ldr	r2, [pc, #136]	; (80086dc <xTaskIncrementTick+0x164>)
 8008652:	6013      	str	r3, [r2, #0]
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008658:	4613      	mov	r3, r2
 800865a:	009b      	lsls	r3, r3, #2
 800865c:	4413      	add	r3, r2
 800865e:	009b      	lsls	r3, r3, #2
 8008660:	4a1f      	ldr	r2, [pc, #124]	; (80086e0 <xTaskIncrementTick+0x168>)
 8008662:	441a      	add	r2, r3
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	3304      	adds	r3, #4
 8008668:	4619      	mov	r1, r3
 800866a:	4610      	mov	r0, r2
 800866c:	f7fe fab3 	bl	8006bd6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008674:	4b1b      	ldr	r3, [pc, #108]	; (80086e4 <xTaskIncrementTick+0x16c>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800867a:	429a      	cmp	r2, r3
 800867c:	d3b8      	bcc.n	80085f0 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800867e:	2301      	movs	r3, #1
 8008680:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008682:	e7b5      	b.n	80085f0 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008684:	4b17      	ldr	r3, [pc, #92]	; (80086e4 <xTaskIncrementTick+0x16c>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800868a:	4915      	ldr	r1, [pc, #84]	; (80086e0 <xTaskIncrementTick+0x168>)
 800868c:	4613      	mov	r3, r2
 800868e:	009b      	lsls	r3, r3, #2
 8008690:	4413      	add	r3, r2
 8008692:	009b      	lsls	r3, r3, #2
 8008694:	440b      	add	r3, r1
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	2b01      	cmp	r3, #1
 800869a:	d907      	bls.n	80086ac <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800869c:	2301      	movs	r3, #1
 800869e:	617b      	str	r3, [r7, #20]
 80086a0:	e004      	b.n	80086ac <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80086a2:	4b11      	ldr	r3, [pc, #68]	; (80086e8 <xTaskIncrementTick+0x170>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	3301      	adds	r3, #1
 80086a8:	4a0f      	ldr	r2, [pc, #60]	; (80086e8 <xTaskIncrementTick+0x170>)
 80086aa:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80086ac:	4b0f      	ldr	r3, [pc, #60]	; (80086ec <xTaskIncrementTick+0x174>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d001      	beq.n	80086b8 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 80086b4:	2301      	movs	r3, #1
 80086b6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80086b8:	697b      	ldr	r3, [r7, #20]
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3718      	adds	r7, #24
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}
 80086c2:	bf00      	nop
 80086c4:	20000e24 	.word	0x20000e24
 80086c8:	20000e00 	.word	0x20000e00
 80086cc:	20000db4 	.word	0x20000db4
 80086d0:	20000db8 	.word	0x20000db8
 80086d4:	20000e14 	.word	0x20000e14
 80086d8:	20000e1c 	.word	0x20000e1c
 80086dc:	20000e04 	.word	0x20000e04
 80086e0:	2000092c 	.word	0x2000092c
 80086e4:	20000928 	.word	0x20000928
 80086e8:	20000e0c 	.word	0x20000e0c
 80086ec:	20000e10 	.word	0x20000e10

080086f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80086f0:	b480      	push	{r7}
 80086f2:	b085      	sub	sp, #20
 80086f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80086f6:	4b2b      	ldr	r3, [pc, #172]	; (80087a4 <vTaskSwitchContext+0xb4>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d003      	beq.n	8008706 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80086fe:	4b2a      	ldr	r3, [pc, #168]	; (80087a8 <vTaskSwitchContext+0xb8>)
 8008700:	2201      	movs	r2, #1
 8008702:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008704:	e048      	b.n	8008798 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8008706:	4b28      	ldr	r3, [pc, #160]	; (80087a8 <vTaskSwitchContext+0xb8>)
 8008708:	2200      	movs	r2, #0
 800870a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800870c:	4b27      	ldr	r3, [pc, #156]	; (80087ac <vTaskSwitchContext+0xbc>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	60fb      	str	r3, [r7, #12]
 8008712:	e012      	b.n	800873a <vTaskSwitchContext+0x4a>
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d10c      	bne.n	8008734 <vTaskSwitchContext+0x44>
	__asm volatile
 800871a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800871e:	b672      	cpsid	i
 8008720:	f383 8811 	msr	BASEPRI, r3
 8008724:	f3bf 8f6f 	isb	sy
 8008728:	f3bf 8f4f 	dsb	sy
 800872c:	b662      	cpsie	i
 800872e:	607b      	str	r3, [r7, #4]
}
 8008730:	bf00      	nop
 8008732:	e7fe      	b.n	8008732 <vTaskSwitchContext+0x42>
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	3b01      	subs	r3, #1
 8008738:	60fb      	str	r3, [r7, #12]
 800873a:	491d      	ldr	r1, [pc, #116]	; (80087b0 <vTaskSwitchContext+0xc0>)
 800873c:	68fa      	ldr	r2, [r7, #12]
 800873e:	4613      	mov	r3, r2
 8008740:	009b      	lsls	r3, r3, #2
 8008742:	4413      	add	r3, r2
 8008744:	009b      	lsls	r3, r3, #2
 8008746:	440b      	add	r3, r1
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d0e2      	beq.n	8008714 <vTaskSwitchContext+0x24>
 800874e:	68fa      	ldr	r2, [r7, #12]
 8008750:	4613      	mov	r3, r2
 8008752:	009b      	lsls	r3, r3, #2
 8008754:	4413      	add	r3, r2
 8008756:	009b      	lsls	r3, r3, #2
 8008758:	4a15      	ldr	r2, [pc, #84]	; (80087b0 <vTaskSwitchContext+0xc0>)
 800875a:	4413      	add	r3, r2
 800875c:	60bb      	str	r3, [r7, #8]
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	685b      	ldr	r3, [r3, #4]
 8008762:	685a      	ldr	r2, [r3, #4]
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	605a      	str	r2, [r3, #4]
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	685a      	ldr	r2, [r3, #4]
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	3308      	adds	r3, #8
 8008770:	429a      	cmp	r2, r3
 8008772:	d104      	bne.n	800877e <vTaskSwitchContext+0x8e>
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	685b      	ldr	r3, [r3, #4]
 8008778:	685a      	ldr	r2, [r3, #4]
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	605a      	str	r2, [r3, #4]
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	68db      	ldr	r3, [r3, #12]
 8008784:	4a0b      	ldr	r2, [pc, #44]	; (80087b4 <vTaskSwitchContext+0xc4>)
 8008786:	6013      	str	r3, [r2, #0]
 8008788:	4a08      	ldr	r2, [pc, #32]	; (80087ac <vTaskSwitchContext+0xbc>)
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800878e:	4b09      	ldr	r3, [pc, #36]	; (80087b4 <vTaskSwitchContext+0xc4>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	3354      	adds	r3, #84	; 0x54
 8008794:	4a08      	ldr	r2, [pc, #32]	; (80087b8 <vTaskSwitchContext+0xc8>)
 8008796:	6013      	str	r3, [r2, #0]
}
 8008798:	bf00      	nop
 800879a:	3714      	adds	r7, #20
 800879c:	46bd      	mov	sp, r7
 800879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a2:	4770      	bx	lr
 80087a4:	20000e24 	.word	0x20000e24
 80087a8:	20000e10 	.word	0x20000e10
 80087ac:	20000e04 	.word	0x20000e04
 80087b0:	2000092c 	.word	0x2000092c
 80087b4:	20000928 	.word	0x20000928
 80087b8:	20000120 	.word	0x20000120

080087bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b084      	sub	sp, #16
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d10c      	bne.n	80087e6 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80087cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d0:	b672      	cpsid	i
 80087d2:	f383 8811 	msr	BASEPRI, r3
 80087d6:	f3bf 8f6f 	isb	sy
 80087da:	f3bf 8f4f 	dsb	sy
 80087de:	b662      	cpsie	i
 80087e0:	60fb      	str	r3, [r7, #12]
}
 80087e2:	bf00      	nop
 80087e4:	e7fe      	b.n	80087e4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80087e6:	4b07      	ldr	r3, [pc, #28]	; (8008804 <vTaskPlaceOnEventList+0x48>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	3318      	adds	r3, #24
 80087ec:	4619      	mov	r1, r3
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f7fe fa15 	bl	8006c1e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80087f4:	2101      	movs	r1, #1
 80087f6:	6838      	ldr	r0, [r7, #0]
 80087f8:	f000 fc5e 	bl	80090b8 <prvAddCurrentTaskToDelayedList>
}
 80087fc:	bf00      	nop
 80087fe:	3710      	adds	r7, #16
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}
 8008804:	20000928 	.word	0x20000928

08008808 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b086      	sub	sp, #24
 800880c:	af00      	add	r7, sp, #0
 800880e:	60f8      	str	r0, [r7, #12]
 8008810:	60b9      	str	r1, [r7, #8]
 8008812:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d10c      	bne.n	8008834 <vTaskPlaceOnUnorderedEventList+0x2c>
	__asm volatile
 800881a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800881e:	b672      	cpsid	i
 8008820:	f383 8811 	msr	BASEPRI, r3
 8008824:	f3bf 8f6f 	isb	sy
 8008828:	f3bf 8f4f 	dsb	sy
 800882c:	b662      	cpsie	i
 800882e:	617b      	str	r3, [r7, #20]
}
 8008830:	bf00      	nop
 8008832:	e7fe      	b.n	8008832 <vTaskPlaceOnUnorderedEventList+0x2a>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8008834:	4b12      	ldr	r3, [pc, #72]	; (8008880 <vTaskPlaceOnUnorderedEventList+0x78>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d10c      	bne.n	8008856 <vTaskPlaceOnUnorderedEventList+0x4e>
	__asm volatile
 800883c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008840:	b672      	cpsid	i
 8008842:	f383 8811 	msr	BASEPRI, r3
 8008846:	f3bf 8f6f 	isb	sy
 800884a:	f3bf 8f4f 	dsb	sy
 800884e:	b662      	cpsie	i
 8008850:	613b      	str	r3, [r7, #16]
}
 8008852:	bf00      	nop
 8008854:	e7fe      	b.n	8008854 <vTaskPlaceOnUnorderedEventList+0x4c>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8008856:	4b0b      	ldr	r3, [pc, #44]	; (8008884 <vTaskPlaceOnUnorderedEventList+0x7c>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	68ba      	ldr	r2, [r7, #8]
 800885c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8008860:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008862:	4b08      	ldr	r3, [pc, #32]	; (8008884 <vTaskPlaceOnUnorderedEventList+0x7c>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	3318      	adds	r3, #24
 8008868:	4619      	mov	r1, r3
 800886a:	68f8      	ldr	r0, [r7, #12]
 800886c:	f7fe f9b3 	bl	8006bd6 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008870:	2101      	movs	r1, #1
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f000 fc20 	bl	80090b8 <prvAddCurrentTaskToDelayedList>
}
 8008878:	bf00      	nop
 800887a:	3718      	adds	r7, #24
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}
 8008880:	20000e24 	.word	0x20000e24
 8008884:	20000928 	.word	0x20000928

08008888 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008888:	b580      	push	{r7, lr}
 800888a:	b086      	sub	sp, #24
 800888c:	af00      	add	r7, sp, #0
 800888e:	60f8      	str	r0, [r7, #12]
 8008890:	60b9      	str	r1, [r7, #8]
 8008892:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d10c      	bne.n	80088b4 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800889a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800889e:	b672      	cpsid	i
 80088a0:	f383 8811 	msr	BASEPRI, r3
 80088a4:	f3bf 8f6f 	isb	sy
 80088a8:	f3bf 8f4f 	dsb	sy
 80088ac:	b662      	cpsie	i
 80088ae:	617b      	str	r3, [r7, #20]
}
 80088b0:	bf00      	nop
 80088b2:	e7fe      	b.n	80088b2 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80088b4:	4b0a      	ldr	r3, [pc, #40]	; (80088e0 <vTaskPlaceOnEventListRestricted+0x58>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	3318      	adds	r3, #24
 80088ba:	4619      	mov	r1, r3
 80088bc:	68f8      	ldr	r0, [r7, #12]
 80088be:	f7fe f98a 	bl	8006bd6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d002      	beq.n	80088ce <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 80088c8:	f04f 33ff 	mov.w	r3, #4294967295
 80088cc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80088ce:	6879      	ldr	r1, [r7, #4]
 80088d0:	68b8      	ldr	r0, [r7, #8]
 80088d2:	f000 fbf1 	bl	80090b8 <prvAddCurrentTaskToDelayedList>
	}
 80088d6:	bf00      	nop
 80088d8:	3718      	adds	r7, #24
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}
 80088de:	bf00      	nop
 80088e0:	20000928 	.word	0x20000928

080088e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b086      	sub	sp, #24
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	68db      	ldr	r3, [r3, #12]
 80088f0:	68db      	ldr	r3, [r3, #12]
 80088f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d10c      	bne.n	8008914 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80088fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088fe:	b672      	cpsid	i
 8008900:	f383 8811 	msr	BASEPRI, r3
 8008904:	f3bf 8f6f 	isb	sy
 8008908:	f3bf 8f4f 	dsb	sy
 800890c:	b662      	cpsie	i
 800890e:	60fb      	str	r3, [r7, #12]
}
 8008910:	bf00      	nop
 8008912:	e7fe      	b.n	8008912 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	3318      	adds	r3, #24
 8008918:	4618      	mov	r0, r3
 800891a:	f7fe f9b9 	bl	8006c90 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800891e:	4b1e      	ldr	r3, [pc, #120]	; (8008998 <xTaskRemoveFromEventList+0xb4>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d11d      	bne.n	8008962 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	3304      	adds	r3, #4
 800892a:	4618      	mov	r0, r3
 800892c:	f7fe f9b0 	bl	8006c90 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008934:	4b19      	ldr	r3, [pc, #100]	; (800899c <xTaskRemoveFromEventList+0xb8>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	429a      	cmp	r2, r3
 800893a:	d903      	bls.n	8008944 <xTaskRemoveFromEventList+0x60>
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008940:	4a16      	ldr	r2, [pc, #88]	; (800899c <xTaskRemoveFromEventList+0xb8>)
 8008942:	6013      	str	r3, [r2, #0]
 8008944:	693b      	ldr	r3, [r7, #16]
 8008946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008948:	4613      	mov	r3, r2
 800894a:	009b      	lsls	r3, r3, #2
 800894c:	4413      	add	r3, r2
 800894e:	009b      	lsls	r3, r3, #2
 8008950:	4a13      	ldr	r2, [pc, #76]	; (80089a0 <xTaskRemoveFromEventList+0xbc>)
 8008952:	441a      	add	r2, r3
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	3304      	adds	r3, #4
 8008958:	4619      	mov	r1, r3
 800895a:	4610      	mov	r0, r2
 800895c:	f7fe f93b 	bl	8006bd6 <vListInsertEnd>
 8008960:	e005      	b.n	800896e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008962:	693b      	ldr	r3, [r7, #16]
 8008964:	3318      	adds	r3, #24
 8008966:	4619      	mov	r1, r3
 8008968:	480e      	ldr	r0, [pc, #56]	; (80089a4 <xTaskRemoveFromEventList+0xc0>)
 800896a:	f7fe f934 	bl	8006bd6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008972:	4b0d      	ldr	r3, [pc, #52]	; (80089a8 <xTaskRemoveFromEventList+0xc4>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008978:	429a      	cmp	r2, r3
 800897a:	d905      	bls.n	8008988 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800897c:	2301      	movs	r3, #1
 800897e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008980:	4b0a      	ldr	r3, [pc, #40]	; (80089ac <xTaskRemoveFromEventList+0xc8>)
 8008982:	2201      	movs	r2, #1
 8008984:	601a      	str	r2, [r3, #0]
 8008986:	e001      	b.n	800898c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8008988:	2300      	movs	r3, #0
 800898a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800898c:	697b      	ldr	r3, [r7, #20]
}
 800898e:	4618      	mov	r0, r3
 8008990:	3718      	adds	r7, #24
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
 8008996:	bf00      	nop
 8008998:	20000e24 	.word	0x20000e24
 800899c:	20000e04 	.word	0x20000e04
 80089a0:	2000092c 	.word	0x2000092c
 80089a4:	20000dbc 	.word	0x20000dbc
 80089a8:	20000928 	.word	0x20000928
 80089ac:	20000e10 	.word	0x20000e10

080089b0 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b086      	sub	sp, #24
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
 80089b8:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80089ba:	4b2b      	ldr	r3, [pc, #172]	; (8008a68 <vTaskRemoveFromUnorderedEventList+0xb8>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d10c      	bne.n	80089dc <vTaskRemoveFromUnorderedEventList+0x2c>
	__asm volatile
 80089c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c6:	b672      	cpsid	i
 80089c8:	f383 8811 	msr	BASEPRI, r3
 80089cc:	f3bf 8f6f 	isb	sy
 80089d0:	f3bf 8f4f 	dsb	sy
 80089d4:	b662      	cpsie	i
 80089d6:	613b      	str	r3, [r7, #16]
}
 80089d8:	bf00      	nop
 80089da:	e7fe      	b.n	80089da <vTaskRemoveFromUnorderedEventList+0x2a>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	68db      	ldr	r3, [r3, #12]
 80089ea:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d10c      	bne.n	8008a0c <vTaskRemoveFromUnorderedEventList+0x5c>
	__asm volatile
 80089f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f6:	b672      	cpsid	i
 80089f8:	f383 8811 	msr	BASEPRI, r3
 80089fc:	f3bf 8f6f 	isb	sy
 8008a00:	f3bf 8f4f 	dsb	sy
 8008a04:	b662      	cpsie	i
 8008a06:	60fb      	str	r3, [r7, #12]
}
 8008a08:	bf00      	nop
 8008a0a:	e7fe      	b.n	8008a0a <vTaskRemoveFromUnorderedEventList+0x5a>
	( void ) uxListRemove( pxEventListItem );
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f7fe f93f 	bl	8006c90 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	3304      	adds	r3, #4
 8008a16:	4618      	mov	r0, r3
 8008a18:	f7fe f93a 	bl	8006c90 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a20:	4b12      	ldr	r3, [pc, #72]	; (8008a6c <vTaskRemoveFromUnorderedEventList+0xbc>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	429a      	cmp	r2, r3
 8008a26:	d903      	bls.n	8008a30 <vTaskRemoveFromUnorderedEventList+0x80>
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a2c:	4a0f      	ldr	r2, [pc, #60]	; (8008a6c <vTaskRemoveFromUnorderedEventList+0xbc>)
 8008a2e:	6013      	str	r3, [r2, #0]
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a34:	4613      	mov	r3, r2
 8008a36:	009b      	lsls	r3, r3, #2
 8008a38:	4413      	add	r3, r2
 8008a3a:	009b      	lsls	r3, r3, #2
 8008a3c:	4a0c      	ldr	r2, [pc, #48]	; (8008a70 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8008a3e:	441a      	add	r2, r3
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	3304      	adds	r3, #4
 8008a44:	4619      	mov	r1, r3
 8008a46:	4610      	mov	r0, r2
 8008a48:	f7fe f8c5 	bl	8006bd6 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a50:	4b08      	ldr	r3, [pc, #32]	; (8008a74 <vTaskRemoveFromUnorderedEventList+0xc4>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a56:	429a      	cmp	r2, r3
 8008a58:	d902      	bls.n	8008a60 <vTaskRemoveFromUnorderedEventList+0xb0>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8008a5a:	4b07      	ldr	r3, [pc, #28]	; (8008a78 <vTaskRemoveFromUnorderedEventList+0xc8>)
 8008a5c:	2201      	movs	r2, #1
 8008a5e:	601a      	str	r2, [r3, #0]
	}
}
 8008a60:	bf00      	nop
 8008a62:	3718      	adds	r7, #24
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}
 8008a68:	20000e24 	.word	0x20000e24
 8008a6c:	20000e04 	.word	0x20000e04
 8008a70:	2000092c 	.word	0x2000092c
 8008a74:	20000928 	.word	0x20000928
 8008a78:	20000e10 	.word	0x20000e10

08008a7c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b083      	sub	sp, #12
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008a84:	4b06      	ldr	r3, [pc, #24]	; (8008aa0 <vTaskInternalSetTimeOutState+0x24>)
 8008a86:	681a      	ldr	r2, [r3, #0]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008a8c:	4b05      	ldr	r3, [pc, #20]	; (8008aa4 <vTaskInternalSetTimeOutState+0x28>)
 8008a8e:	681a      	ldr	r2, [r3, #0]
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	605a      	str	r2, [r3, #4]
}
 8008a94:	bf00      	nop
 8008a96:	370c      	adds	r7, #12
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr
 8008aa0:	20000e14 	.word	0x20000e14
 8008aa4:	20000e00 	.word	0x20000e00

08008aa8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b088      	sub	sp, #32
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d10c      	bne.n	8008ad2 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8008ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008abc:	b672      	cpsid	i
 8008abe:	f383 8811 	msr	BASEPRI, r3
 8008ac2:	f3bf 8f6f 	isb	sy
 8008ac6:	f3bf 8f4f 	dsb	sy
 8008aca:	b662      	cpsie	i
 8008acc:	613b      	str	r3, [r7, #16]
}
 8008ace:	bf00      	nop
 8008ad0:	e7fe      	b.n	8008ad0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d10c      	bne.n	8008af2 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8008ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008adc:	b672      	cpsid	i
 8008ade:	f383 8811 	msr	BASEPRI, r3
 8008ae2:	f3bf 8f6f 	isb	sy
 8008ae6:	f3bf 8f4f 	dsb	sy
 8008aea:	b662      	cpsie	i
 8008aec:	60fb      	str	r3, [r7, #12]
}
 8008aee:	bf00      	nop
 8008af0:	e7fe      	b.n	8008af0 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8008af2:	f000 ffbb 	bl	8009a6c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008af6:	4b1d      	ldr	r3, [pc, #116]	; (8008b6c <xTaskCheckForTimeOut+0xc4>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	69ba      	ldr	r2, [r7, #24]
 8008b02:	1ad3      	subs	r3, r2, r3
 8008b04:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b0e:	d102      	bne.n	8008b16 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008b10:	2300      	movs	r3, #0
 8008b12:	61fb      	str	r3, [r7, #28]
 8008b14:	e023      	b.n	8008b5e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681a      	ldr	r2, [r3, #0]
 8008b1a:	4b15      	ldr	r3, [pc, #84]	; (8008b70 <xTaskCheckForTimeOut+0xc8>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	d007      	beq.n	8008b32 <xTaskCheckForTimeOut+0x8a>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	685b      	ldr	r3, [r3, #4]
 8008b26:	69ba      	ldr	r2, [r7, #24]
 8008b28:	429a      	cmp	r2, r3
 8008b2a:	d302      	bcc.n	8008b32 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	61fb      	str	r3, [r7, #28]
 8008b30:	e015      	b.n	8008b5e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	697a      	ldr	r2, [r7, #20]
 8008b38:	429a      	cmp	r2, r3
 8008b3a:	d20b      	bcs.n	8008b54 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	681a      	ldr	r2, [r3, #0]
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	1ad2      	subs	r2, r2, r3
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f7ff ff97 	bl	8008a7c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	61fb      	str	r3, [r7, #28]
 8008b52:	e004      	b.n	8008b5e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	2200      	movs	r2, #0
 8008b58:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008b5e:	f000 ffb9 	bl	8009ad4 <vPortExitCritical>

	return xReturn;
 8008b62:	69fb      	ldr	r3, [r7, #28]
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3720      	adds	r7, #32
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}
 8008b6c:	20000e00 	.word	0x20000e00
 8008b70:	20000e14 	.word	0x20000e14

08008b74 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008b74:	b480      	push	{r7}
 8008b76:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008b78:	4b03      	ldr	r3, [pc, #12]	; (8008b88 <vTaskMissedYield+0x14>)
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	601a      	str	r2, [r3, #0]
}
 8008b7e:	bf00      	nop
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr
 8008b88:	20000e10 	.word	0x20000e10

08008b8c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b082      	sub	sp, #8
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008b94:	f000 f852 	bl	8008c3c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008b98:	4b06      	ldr	r3, [pc, #24]	; (8008bb4 <prvIdleTask+0x28>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d9f9      	bls.n	8008b94 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008ba0:	4b05      	ldr	r3, [pc, #20]	; (8008bb8 <prvIdleTask+0x2c>)
 8008ba2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ba6:	601a      	str	r2, [r3, #0]
 8008ba8:	f3bf 8f4f 	dsb	sy
 8008bac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008bb0:	e7f0      	b.n	8008b94 <prvIdleTask+0x8>
 8008bb2:	bf00      	nop
 8008bb4:	2000092c 	.word	0x2000092c
 8008bb8:	e000ed04 	.word	0xe000ed04

08008bbc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b082      	sub	sp, #8
 8008bc0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	607b      	str	r3, [r7, #4]
 8008bc6:	e00c      	b.n	8008be2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008bc8:	687a      	ldr	r2, [r7, #4]
 8008bca:	4613      	mov	r3, r2
 8008bcc:	009b      	lsls	r3, r3, #2
 8008bce:	4413      	add	r3, r2
 8008bd0:	009b      	lsls	r3, r3, #2
 8008bd2:	4a12      	ldr	r2, [pc, #72]	; (8008c1c <prvInitialiseTaskLists+0x60>)
 8008bd4:	4413      	add	r3, r2
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f7fd ffd0 	bl	8006b7c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	3301      	adds	r3, #1
 8008be0:	607b      	str	r3, [r7, #4]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2b37      	cmp	r3, #55	; 0x37
 8008be6:	d9ef      	bls.n	8008bc8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008be8:	480d      	ldr	r0, [pc, #52]	; (8008c20 <prvInitialiseTaskLists+0x64>)
 8008bea:	f7fd ffc7 	bl	8006b7c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008bee:	480d      	ldr	r0, [pc, #52]	; (8008c24 <prvInitialiseTaskLists+0x68>)
 8008bf0:	f7fd ffc4 	bl	8006b7c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008bf4:	480c      	ldr	r0, [pc, #48]	; (8008c28 <prvInitialiseTaskLists+0x6c>)
 8008bf6:	f7fd ffc1 	bl	8006b7c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008bfa:	480c      	ldr	r0, [pc, #48]	; (8008c2c <prvInitialiseTaskLists+0x70>)
 8008bfc:	f7fd ffbe 	bl	8006b7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008c00:	480b      	ldr	r0, [pc, #44]	; (8008c30 <prvInitialiseTaskLists+0x74>)
 8008c02:	f7fd ffbb 	bl	8006b7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008c06:	4b0b      	ldr	r3, [pc, #44]	; (8008c34 <prvInitialiseTaskLists+0x78>)
 8008c08:	4a05      	ldr	r2, [pc, #20]	; (8008c20 <prvInitialiseTaskLists+0x64>)
 8008c0a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008c0c:	4b0a      	ldr	r3, [pc, #40]	; (8008c38 <prvInitialiseTaskLists+0x7c>)
 8008c0e:	4a05      	ldr	r2, [pc, #20]	; (8008c24 <prvInitialiseTaskLists+0x68>)
 8008c10:	601a      	str	r2, [r3, #0]
}
 8008c12:	bf00      	nop
 8008c14:	3708      	adds	r7, #8
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}
 8008c1a:	bf00      	nop
 8008c1c:	2000092c 	.word	0x2000092c
 8008c20:	20000d8c 	.word	0x20000d8c
 8008c24:	20000da0 	.word	0x20000da0
 8008c28:	20000dbc 	.word	0x20000dbc
 8008c2c:	20000dd0 	.word	0x20000dd0
 8008c30:	20000de8 	.word	0x20000de8
 8008c34:	20000db4 	.word	0x20000db4
 8008c38:	20000db8 	.word	0x20000db8

08008c3c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b082      	sub	sp, #8
 8008c40:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008c42:	e019      	b.n	8008c78 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008c44:	f000 ff12 	bl	8009a6c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c48:	4b10      	ldr	r3, [pc, #64]	; (8008c8c <prvCheckTasksWaitingTermination+0x50>)
 8008c4a:	68db      	ldr	r3, [r3, #12]
 8008c4c:	68db      	ldr	r3, [r3, #12]
 8008c4e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	3304      	adds	r3, #4
 8008c54:	4618      	mov	r0, r3
 8008c56:	f7fe f81b 	bl	8006c90 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008c5a:	4b0d      	ldr	r3, [pc, #52]	; (8008c90 <prvCheckTasksWaitingTermination+0x54>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	3b01      	subs	r3, #1
 8008c60:	4a0b      	ldr	r2, [pc, #44]	; (8008c90 <prvCheckTasksWaitingTermination+0x54>)
 8008c62:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008c64:	4b0b      	ldr	r3, [pc, #44]	; (8008c94 <prvCheckTasksWaitingTermination+0x58>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	3b01      	subs	r3, #1
 8008c6a:	4a0a      	ldr	r2, [pc, #40]	; (8008c94 <prvCheckTasksWaitingTermination+0x58>)
 8008c6c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008c6e:	f000 ff31 	bl	8009ad4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f000 f810 	bl	8008c98 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008c78:	4b06      	ldr	r3, [pc, #24]	; (8008c94 <prvCheckTasksWaitingTermination+0x58>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d1e1      	bne.n	8008c44 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008c80:	bf00      	nop
 8008c82:	bf00      	nop
 8008c84:	3708      	adds	r7, #8
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}
 8008c8a:	bf00      	nop
 8008c8c:	20000dd0 	.word	0x20000dd0
 8008c90:	20000dfc 	.word	0x20000dfc
 8008c94:	20000de4 	.word	0x20000de4

08008c98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b084      	sub	sp, #16
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	3354      	adds	r3, #84	; 0x54
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f00f fb2b 	bl	8018300 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d108      	bne.n	8008cc6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f001 f8cd 	bl	8009e58 <vPortFree>
				vPortFree( pxTCB );
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f001 f8ca 	bl	8009e58 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008cc4:	e01a      	b.n	8008cfc <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008ccc:	2b01      	cmp	r3, #1
 8008cce:	d103      	bne.n	8008cd8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f001 f8c1 	bl	8009e58 <vPortFree>
	}
 8008cd6:	e011      	b.n	8008cfc <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008cde:	2b02      	cmp	r3, #2
 8008ce0:	d00c      	beq.n	8008cfc <prvDeleteTCB+0x64>
	__asm volatile
 8008ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce6:	b672      	cpsid	i
 8008ce8:	f383 8811 	msr	BASEPRI, r3
 8008cec:	f3bf 8f6f 	isb	sy
 8008cf0:	f3bf 8f4f 	dsb	sy
 8008cf4:	b662      	cpsie	i
 8008cf6:	60fb      	str	r3, [r7, #12]
}
 8008cf8:	bf00      	nop
 8008cfa:	e7fe      	b.n	8008cfa <prvDeleteTCB+0x62>
	}
 8008cfc:	bf00      	nop
 8008cfe:	3710      	adds	r7, #16
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}

08008d04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008d04:	b480      	push	{r7}
 8008d06:	b083      	sub	sp, #12
 8008d08:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d0a:	4b0c      	ldr	r3, [pc, #48]	; (8008d3c <prvResetNextTaskUnblockTime+0x38>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d104      	bne.n	8008d1e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008d14:	4b0a      	ldr	r3, [pc, #40]	; (8008d40 <prvResetNextTaskUnblockTime+0x3c>)
 8008d16:	f04f 32ff 	mov.w	r2, #4294967295
 8008d1a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008d1c:	e008      	b.n	8008d30 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d1e:	4b07      	ldr	r3, [pc, #28]	; (8008d3c <prvResetNextTaskUnblockTime+0x38>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	68db      	ldr	r3, [r3, #12]
 8008d24:	68db      	ldr	r3, [r3, #12]
 8008d26:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	4a04      	ldr	r2, [pc, #16]	; (8008d40 <prvResetNextTaskUnblockTime+0x3c>)
 8008d2e:	6013      	str	r3, [r2, #0]
}
 8008d30:	bf00      	nop
 8008d32:	370c      	adds	r7, #12
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr
 8008d3c:	20000db4 	.word	0x20000db4
 8008d40:	20000e1c 	.word	0x20000e1c

08008d44 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008d44:	b480      	push	{r7}
 8008d46:	b083      	sub	sp, #12
 8008d48:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8008d4a:	4b05      	ldr	r3, [pc, #20]	; (8008d60 <xTaskGetCurrentTaskHandle+0x1c>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008d50:	687b      	ldr	r3, [r7, #4]
	}
 8008d52:	4618      	mov	r0, r3
 8008d54:	370c      	adds	r7, #12
 8008d56:	46bd      	mov	sp, r7
 8008d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5c:	4770      	bx	lr
 8008d5e:	bf00      	nop
 8008d60:	20000928 	.word	0x20000928

08008d64 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008d64:	b480      	push	{r7}
 8008d66:	b083      	sub	sp, #12
 8008d68:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008d6a:	4b0b      	ldr	r3, [pc, #44]	; (8008d98 <xTaskGetSchedulerState+0x34>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d102      	bne.n	8008d78 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008d72:	2301      	movs	r3, #1
 8008d74:	607b      	str	r3, [r7, #4]
 8008d76:	e008      	b.n	8008d8a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d78:	4b08      	ldr	r3, [pc, #32]	; (8008d9c <xTaskGetSchedulerState+0x38>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d102      	bne.n	8008d86 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008d80:	2302      	movs	r3, #2
 8008d82:	607b      	str	r3, [r7, #4]
 8008d84:	e001      	b.n	8008d8a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008d86:	2300      	movs	r3, #0
 8008d88:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008d8a:	687b      	ldr	r3, [r7, #4]
	}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	370c      	adds	r7, #12
 8008d90:	46bd      	mov	sp, r7
 8008d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d96:	4770      	bx	lr
 8008d98:	20000e08 	.word	0x20000e08
 8008d9c:	20000e24 	.word	0x20000e24

08008da0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b084      	sub	sp, #16
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008dac:	2300      	movs	r3, #0
 8008dae:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d051      	beq.n	8008e5a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dba:	4b2a      	ldr	r3, [pc, #168]	; (8008e64 <xTaskPriorityInherit+0xc4>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dc0:	429a      	cmp	r2, r3
 8008dc2:	d241      	bcs.n	8008e48 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	699b      	ldr	r3, [r3, #24]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	db06      	blt.n	8008dda <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008dcc:	4b25      	ldr	r3, [pc, #148]	; (8008e64 <xTaskPriorityInherit+0xc4>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dd2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	6959      	ldr	r1, [r3, #20]
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008de2:	4613      	mov	r3, r2
 8008de4:	009b      	lsls	r3, r3, #2
 8008de6:	4413      	add	r3, r2
 8008de8:	009b      	lsls	r3, r3, #2
 8008dea:	4a1f      	ldr	r2, [pc, #124]	; (8008e68 <xTaskPriorityInherit+0xc8>)
 8008dec:	4413      	add	r3, r2
 8008dee:	4299      	cmp	r1, r3
 8008df0:	d122      	bne.n	8008e38 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	3304      	adds	r3, #4
 8008df6:	4618      	mov	r0, r3
 8008df8:	f7fd ff4a 	bl	8006c90 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008dfc:	4b19      	ldr	r3, [pc, #100]	; (8008e64 <xTaskPriorityInherit+0xc4>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e0a:	4b18      	ldr	r3, [pc, #96]	; (8008e6c <xTaskPriorityInherit+0xcc>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	429a      	cmp	r2, r3
 8008e10:	d903      	bls.n	8008e1a <xTaskPriorityInherit+0x7a>
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e16:	4a15      	ldr	r2, [pc, #84]	; (8008e6c <xTaskPriorityInherit+0xcc>)
 8008e18:	6013      	str	r3, [r2, #0]
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e1e:	4613      	mov	r3, r2
 8008e20:	009b      	lsls	r3, r3, #2
 8008e22:	4413      	add	r3, r2
 8008e24:	009b      	lsls	r3, r3, #2
 8008e26:	4a10      	ldr	r2, [pc, #64]	; (8008e68 <xTaskPriorityInherit+0xc8>)
 8008e28:	441a      	add	r2, r3
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	3304      	adds	r3, #4
 8008e2e:	4619      	mov	r1, r3
 8008e30:	4610      	mov	r0, r2
 8008e32:	f7fd fed0 	bl	8006bd6 <vListInsertEnd>
 8008e36:	e004      	b.n	8008e42 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008e38:	4b0a      	ldr	r3, [pc, #40]	; (8008e64 <xTaskPriorityInherit+0xc4>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008e42:	2301      	movs	r3, #1
 8008e44:	60fb      	str	r3, [r7, #12]
 8008e46:	e008      	b.n	8008e5a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008e4c:	4b05      	ldr	r3, [pc, #20]	; (8008e64 <xTaskPriorityInherit+0xc4>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e52:	429a      	cmp	r2, r3
 8008e54:	d201      	bcs.n	8008e5a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008e56:	2301      	movs	r3, #1
 8008e58:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
	}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	3710      	adds	r7, #16
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd80      	pop	{r7, pc}
 8008e64:	20000928 	.word	0x20000928
 8008e68:	2000092c 	.word	0x2000092c
 8008e6c:	20000e04 	.word	0x20000e04

08008e70 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b086      	sub	sp, #24
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d05a      	beq.n	8008f3c <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008e86:	4b30      	ldr	r3, [pc, #192]	; (8008f48 <xTaskPriorityDisinherit+0xd8>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	693a      	ldr	r2, [r7, #16]
 8008e8c:	429a      	cmp	r2, r3
 8008e8e:	d00c      	beq.n	8008eaa <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8008e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e94:	b672      	cpsid	i
 8008e96:	f383 8811 	msr	BASEPRI, r3
 8008e9a:	f3bf 8f6f 	isb	sy
 8008e9e:	f3bf 8f4f 	dsb	sy
 8008ea2:	b662      	cpsie	i
 8008ea4:	60fb      	str	r3, [r7, #12]
}
 8008ea6:	bf00      	nop
 8008ea8:	e7fe      	b.n	8008ea8 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d10c      	bne.n	8008ecc <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8008eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb6:	b672      	cpsid	i
 8008eb8:	f383 8811 	msr	BASEPRI, r3
 8008ebc:	f3bf 8f6f 	isb	sy
 8008ec0:	f3bf 8f4f 	dsb	sy
 8008ec4:	b662      	cpsie	i
 8008ec6:	60bb      	str	r3, [r7, #8]
}
 8008ec8:	bf00      	nop
 8008eca:	e7fe      	b.n	8008eca <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ed0:	1e5a      	subs	r2, r3, #1
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	d02c      	beq.n	8008f3c <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008ee2:	693b      	ldr	r3, [r7, #16]
 8008ee4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d128      	bne.n	8008f3c <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008eea:	693b      	ldr	r3, [r7, #16]
 8008eec:	3304      	adds	r3, #4
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f7fd fece 	bl	8006c90 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008efc:	693b      	ldr	r3, [r7, #16]
 8008efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f00:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f0c:	4b0f      	ldr	r3, [pc, #60]	; (8008f4c <xTaskPriorityDisinherit+0xdc>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	429a      	cmp	r2, r3
 8008f12:	d903      	bls.n	8008f1c <xTaskPriorityDisinherit+0xac>
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f18:	4a0c      	ldr	r2, [pc, #48]	; (8008f4c <xTaskPriorityDisinherit+0xdc>)
 8008f1a:	6013      	str	r3, [r2, #0]
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f20:	4613      	mov	r3, r2
 8008f22:	009b      	lsls	r3, r3, #2
 8008f24:	4413      	add	r3, r2
 8008f26:	009b      	lsls	r3, r3, #2
 8008f28:	4a09      	ldr	r2, [pc, #36]	; (8008f50 <xTaskPriorityDisinherit+0xe0>)
 8008f2a:	441a      	add	r2, r3
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	3304      	adds	r3, #4
 8008f30:	4619      	mov	r1, r3
 8008f32:	4610      	mov	r0, r2
 8008f34:	f7fd fe4f 	bl	8006bd6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008f38:	2301      	movs	r3, #1
 8008f3a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008f3c:	697b      	ldr	r3, [r7, #20]
	}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3718      	adds	r7, #24
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}
 8008f46:	bf00      	nop
 8008f48:	20000928 	.word	0x20000928
 8008f4c:	20000e04 	.word	0x20000e04
 8008f50:	2000092c 	.word	0x2000092c

08008f54 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b088      	sub	sp, #32
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
 8008f5c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008f62:	2301      	movs	r3, #1
 8008f64:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d06e      	beq.n	800904a <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008f6c:	69bb      	ldr	r3, [r7, #24]
 8008f6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d10c      	bne.n	8008f8e <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 8008f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f78:	b672      	cpsid	i
 8008f7a:	f383 8811 	msr	BASEPRI, r3
 8008f7e:	f3bf 8f6f 	isb	sy
 8008f82:	f3bf 8f4f 	dsb	sy
 8008f86:	b662      	cpsie	i
 8008f88:	60fb      	str	r3, [r7, #12]
}
 8008f8a:	bf00      	nop
 8008f8c:	e7fe      	b.n	8008f8c <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008f8e:	69bb      	ldr	r3, [r7, #24]
 8008f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f92:	683a      	ldr	r2, [r7, #0]
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d902      	bls.n	8008f9e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	61fb      	str	r3, [r7, #28]
 8008f9c:	e002      	b.n	8008fa4 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008f9e:	69bb      	ldr	r3, [r7, #24]
 8008fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fa2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008fa4:	69bb      	ldr	r3, [r7, #24]
 8008fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fa8:	69fa      	ldr	r2, [r7, #28]
 8008faa:	429a      	cmp	r2, r3
 8008fac:	d04d      	beq.n	800904a <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008fae:	69bb      	ldr	r3, [r7, #24]
 8008fb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fb2:	697a      	ldr	r2, [r7, #20]
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	d148      	bne.n	800904a <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008fb8:	4b26      	ldr	r3, [pc, #152]	; (8009054 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	69ba      	ldr	r2, [r7, #24]
 8008fbe:	429a      	cmp	r2, r3
 8008fc0:	d10c      	bne.n	8008fdc <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 8008fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fc6:	b672      	cpsid	i
 8008fc8:	f383 8811 	msr	BASEPRI, r3
 8008fcc:	f3bf 8f6f 	isb	sy
 8008fd0:	f3bf 8f4f 	dsb	sy
 8008fd4:	b662      	cpsie	i
 8008fd6:	60bb      	str	r3, [r7, #8]
}
 8008fd8:	bf00      	nop
 8008fda:	e7fe      	b.n	8008fda <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008fdc:	69bb      	ldr	r3, [r7, #24]
 8008fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fe0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008fe2:	69bb      	ldr	r3, [r7, #24]
 8008fe4:	69fa      	ldr	r2, [r7, #28]
 8008fe6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008fe8:	69bb      	ldr	r3, [r7, #24]
 8008fea:	699b      	ldr	r3, [r3, #24]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	db04      	blt.n	8008ffa <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ff0:	69fb      	ldr	r3, [r7, #28]
 8008ff2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008ff6:	69bb      	ldr	r3, [r7, #24]
 8008ff8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008ffa:	69bb      	ldr	r3, [r7, #24]
 8008ffc:	6959      	ldr	r1, [r3, #20]
 8008ffe:	693a      	ldr	r2, [r7, #16]
 8009000:	4613      	mov	r3, r2
 8009002:	009b      	lsls	r3, r3, #2
 8009004:	4413      	add	r3, r2
 8009006:	009b      	lsls	r3, r3, #2
 8009008:	4a13      	ldr	r2, [pc, #76]	; (8009058 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800900a:	4413      	add	r3, r2
 800900c:	4299      	cmp	r1, r3
 800900e:	d11c      	bne.n	800904a <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009010:	69bb      	ldr	r3, [r7, #24]
 8009012:	3304      	adds	r3, #4
 8009014:	4618      	mov	r0, r3
 8009016:	f7fd fe3b 	bl	8006c90 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800901a:	69bb      	ldr	r3, [r7, #24]
 800901c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800901e:	4b0f      	ldr	r3, [pc, #60]	; (800905c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	429a      	cmp	r2, r3
 8009024:	d903      	bls.n	800902e <vTaskPriorityDisinheritAfterTimeout+0xda>
 8009026:	69bb      	ldr	r3, [r7, #24]
 8009028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800902a:	4a0c      	ldr	r2, [pc, #48]	; (800905c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800902c:	6013      	str	r3, [r2, #0]
 800902e:	69bb      	ldr	r3, [r7, #24]
 8009030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009032:	4613      	mov	r3, r2
 8009034:	009b      	lsls	r3, r3, #2
 8009036:	4413      	add	r3, r2
 8009038:	009b      	lsls	r3, r3, #2
 800903a:	4a07      	ldr	r2, [pc, #28]	; (8009058 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800903c:	441a      	add	r2, r3
 800903e:	69bb      	ldr	r3, [r7, #24]
 8009040:	3304      	adds	r3, #4
 8009042:	4619      	mov	r1, r3
 8009044:	4610      	mov	r0, r2
 8009046:	f7fd fdc6 	bl	8006bd6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800904a:	bf00      	nop
 800904c:	3720      	adds	r7, #32
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}
 8009052:	bf00      	nop
 8009054:	20000928 	.word	0x20000928
 8009058:	2000092c 	.word	0x2000092c
 800905c:	20000e04 	.word	0x20000e04

08009060 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8009060:	b480      	push	{r7}
 8009062:	b083      	sub	sp, #12
 8009064:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8009066:	4b09      	ldr	r3, [pc, #36]	; (800908c <uxTaskResetEventItemValue+0x2c>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	699b      	ldr	r3, [r3, #24]
 800906c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800906e:	4b07      	ldr	r3, [pc, #28]	; (800908c <uxTaskResetEventItemValue+0x2c>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009074:	4b05      	ldr	r3, [pc, #20]	; (800908c <uxTaskResetEventItemValue+0x2c>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800907c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800907e:	687b      	ldr	r3, [r7, #4]
}
 8009080:	4618      	mov	r0, r3
 8009082:	370c      	adds	r7, #12
 8009084:	46bd      	mov	sp, r7
 8009086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908a:	4770      	bx	lr
 800908c:	20000928 	.word	0x20000928

08009090 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009090:	b480      	push	{r7}
 8009092:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009094:	4b07      	ldr	r3, [pc, #28]	; (80090b4 <pvTaskIncrementMutexHeldCount+0x24>)
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d004      	beq.n	80090a6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800909c:	4b05      	ldr	r3, [pc, #20]	; (80090b4 <pvTaskIncrementMutexHeldCount+0x24>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80090a2:	3201      	adds	r2, #1
 80090a4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80090a6:	4b03      	ldr	r3, [pc, #12]	; (80090b4 <pvTaskIncrementMutexHeldCount+0x24>)
 80090a8:	681b      	ldr	r3, [r3, #0]
	}
 80090aa:	4618      	mov	r0, r3
 80090ac:	46bd      	mov	sp, r7
 80090ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b2:	4770      	bx	lr
 80090b4:	20000928 	.word	0x20000928

080090b8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b084      	sub	sp, #16
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
 80090c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80090c2:	4b21      	ldr	r3, [pc, #132]	; (8009148 <prvAddCurrentTaskToDelayedList+0x90>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80090c8:	4b20      	ldr	r3, [pc, #128]	; (800914c <prvAddCurrentTaskToDelayedList+0x94>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	3304      	adds	r3, #4
 80090ce:	4618      	mov	r0, r3
 80090d0:	f7fd fdde 	bl	8006c90 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090da:	d10a      	bne.n	80090f2 <prvAddCurrentTaskToDelayedList+0x3a>
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d007      	beq.n	80090f2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80090e2:	4b1a      	ldr	r3, [pc, #104]	; (800914c <prvAddCurrentTaskToDelayedList+0x94>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	3304      	adds	r3, #4
 80090e8:	4619      	mov	r1, r3
 80090ea:	4819      	ldr	r0, [pc, #100]	; (8009150 <prvAddCurrentTaskToDelayedList+0x98>)
 80090ec:	f7fd fd73 	bl	8006bd6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80090f0:	e026      	b.n	8009140 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80090f2:	68fa      	ldr	r2, [r7, #12]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	4413      	add	r3, r2
 80090f8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80090fa:	4b14      	ldr	r3, [pc, #80]	; (800914c <prvAddCurrentTaskToDelayedList+0x94>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	68ba      	ldr	r2, [r7, #8]
 8009100:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009102:	68ba      	ldr	r2, [r7, #8]
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	429a      	cmp	r2, r3
 8009108:	d209      	bcs.n	800911e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800910a:	4b12      	ldr	r3, [pc, #72]	; (8009154 <prvAddCurrentTaskToDelayedList+0x9c>)
 800910c:	681a      	ldr	r2, [r3, #0]
 800910e:	4b0f      	ldr	r3, [pc, #60]	; (800914c <prvAddCurrentTaskToDelayedList+0x94>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	3304      	adds	r3, #4
 8009114:	4619      	mov	r1, r3
 8009116:	4610      	mov	r0, r2
 8009118:	f7fd fd81 	bl	8006c1e <vListInsert>
}
 800911c:	e010      	b.n	8009140 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800911e:	4b0e      	ldr	r3, [pc, #56]	; (8009158 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009120:	681a      	ldr	r2, [r3, #0]
 8009122:	4b0a      	ldr	r3, [pc, #40]	; (800914c <prvAddCurrentTaskToDelayedList+0x94>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	3304      	adds	r3, #4
 8009128:	4619      	mov	r1, r3
 800912a:	4610      	mov	r0, r2
 800912c:	f7fd fd77 	bl	8006c1e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009130:	4b0a      	ldr	r3, [pc, #40]	; (800915c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	68ba      	ldr	r2, [r7, #8]
 8009136:	429a      	cmp	r2, r3
 8009138:	d202      	bcs.n	8009140 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800913a:	4a08      	ldr	r2, [pc, #32]	; (800915c <prvAddCurrentTaskToDelayedList+0xa4>)
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	6013      	str	r3, [r2, #0]
}
 8009140:	bf00      	nop
 8009142:	3710      	adds	r7, #16
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}
 8009148:	20000e00 	.word	0x20000e00
 800914c:	20000928 	.word	0x20000928
 8009150:	20000de8 	.word	0x20000de8
 8009154:	20000db8 	.word	0x20000db8
 8009158:	20000db4 	.word	0x20000db4
 800915c:	20000e1c 	.word	0x20000e1c

08009160 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b08a      	sub	sp, #40	; 0x28
 8009164:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009166:	2300      	movs	r3, #0
 8009168:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800916a:	f000 fb15 	bl	8009798 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800916e:	4b1d      	ldr	r3, [pc, #116]	; (80091e4 <xTimerCreateTimerTask+0x84>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d021      	beq.n	80091ba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009176:	2300      	movs	r3, #0
 8009178:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800917a:	2300      	movs	r3, #0
 800917c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800917e:	1d3a      	adds	r2, r7, #4
 8009180:	f107 0108 	add.w	r1, r7, #8
 8009184:	f107 030c 	add.w	r3, r7, #12
 8009188:	4618      	mov	r0, r3
 800918a:	f7fd fb1b 	bl	80067c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800918e:	6879      	ldr	r1, [r7, #4]
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	68fa      	ldr	r2, [r7, #12]
 8009194:	9202      	str	r2, [sp, #8]
 8009196:	9301      	str	r3, [sp, #4]
 8009198:	2302      	movs	r3, #2
 800919a:	9300      	str	r3, [sp, #0]
 800919c:	2300      	movs	r3, #0
 800919e:	460a      	mov	r2, r1
 80091a0:	4911      	ldr	r1, [pc, #68]	; (80091e8 <xTimerCreateTimerTask+0x88>)
 80091a2:	4812      	ldr	r0, [pc, #72]	; (80091ec <xTimerCreateTimerTask+0x8c>)
 80091a4:	f7fe feae 	bl	8007f04 <xTaskCreateStatic>
 80091a8:	4603      	mov	r3, r0
 80091aa:	4a11      	ldr	r2, [pc, #68]	; (80091f0 <xTimerCreateTimerTask+0x90>)
 80091ac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80091ae:	4b10      	ldr	r3, [pc, #64]	; (80091f0 <xTimerCreateTimerTask+0x90>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d001      	beq.n	80091ba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80091b6:	2301      	movs	r3, #1
 80091b8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d10c      	bne.n	80091da <xTimerCreateTimerTask+0x7a>
	__asm volatile
 80091c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c4:	b672      	cpsid	i
 80091c6:	f383 8811 	msr	BASEPRI, r3
 80091ca:	f3bf 8f6f 	isb	sy
 80091ce:	f3bf 8f4f 	dsb	sy
 80091d2:	b662      	cpsie	i
 80091d4:	613b      	str	r3, [r7, #16]
}
 80091d6:	bf00      	nop
 80091d8:	e7fe      	b.n	80091d8 <xTimerCreateTimerTask+0x78>
	return xReturn;
 80091da:	697b      	ldr	r3, [r7, #20]
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3718      	adds	r7, #24
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}
 80091e4:	20000e58 	.word	0x20000e58
 80091e8:	08018aec 	.word	0x08018aec
 80091ec:	08009331 	.word	0x08009331
 80091f0:	20000e5c 	.word	0x20000e5c

080091f4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b08a      	sub	sp, #40	; 0x28
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	60f8      	str	r0, [r7, #12]
 80091fc:	60b9      	str	r1, [r7, #8]
 80091fe:	607a      	str	r2, [r7, #4]
 8009200:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009202:	2300      	movs	r3, #0
 8009204:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d10c      	bne.n	8009226 <xTimerGenericCommand+0x32>
	__asm volatile
 800920c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009210:	b672      	cpsid	i
 8009212:	f383 8811 	msr	BASEPRI, r3
 8009216:	f3bf 8f6f 	isb	sy
 800921a:	f3bf 8f4f 	dsb	sy
 800921e:	b662      	cpsie	i
 8009220:	623b      	str	r3, [r7, #32]
}
 8009222:	bf00      	nop
 8009224:	e7fe      	b.n	8009224 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009226:	4b1a      	ldr	r3, [pc, #104]	; (8009290 <xTimerGenericCommand+0x9c>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d02a      	beq.n	8009284 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	2b05      	cmp	r3, #5
 800923e:	dc18      	bgt.n	8009272 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009240:	f7ff fd90 	bl	8008d64 <xTaskGetSchedulerState>
 8009244:	4603      	mov	r3, r0
 8009246:	2b02      	cmp	r3, #2
 8009248:	d109      	bne.n	800925e <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800924a:	4b11      	ldr	r3, [pc, #68]	; (8009290 <xTimerGenericCommand+0x9c>)
 800924c:	6818      	ldr	r0, [r3, #0]
 800924e:	f107 0110 	add.w	r1, r7, #16
 8009252:	2300      	movs	r3, #0
 8009254:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009256:	f7fd ffc3 	bl	80071e0 <xQueueGenericSend>
 800925a:	6278      	str	r0, [r7, #36]	; 0x24
 800925c:	e012      	b.n	8009284 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800925e:	4b0c      	ldr	r3, [pc, #48]	; (8009290 <xTimerGenericCommand+0x9c>)
 8009260:	6818      	ldr	r0, [r3, #0]
 8009262:	f107 0110 	add.w	r1, r7, #16
 8009266:	2300      	movs	r3, #0
 8009268:	2200      	movs	r2, #0
 800926a:	f7fd ffb9 	bl	80071e0 <xQueueGenericSend>
 800926e:	6278      	str	r0, [r7, #36]	; 0x24
 8009270:	e008      	b.n	8009284 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009272:	4b07      	ldr	r3, [pc, #28]	; (8009290 <xTimerGenericCommand+0x9c>)
 8009274:	6818      	ldr	r0, [r3, #0]
 8009276:	f107 0110 	add.w	r1, r7, #16
 800927a:	2300      	movs	r3, #0
 800927c:	683a      	ldr	r2, [r7, #0]
 800927e:	f7fe f8b5 	bl	80073ec <xQueueGenericSendFromISR>
 8009282:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009286:	4618      	mov	r0, r3
 8009288:	3728      	adds	r7, #40	; 0x28
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}
 800928e:	bf00      	nop
 8009290:	20000e58 	.word	0x20000e58

08009294 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b088      	sub	sp, #32
 8009298:	af02      	add	r7, sp, #8
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800929e:	4b23      	ldr	r3, [pc, #140]	; (800932c <prvProcessExpiredTimer+0x98>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	68db      	ldr	r3, [r3, #12]
 80092a4:	68db      	ldr	r3, [r3, #12]
 80092a6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	3304      	adds	r3, #4
 80092ac:	4618      	mov	r0, r3
 80092ae:	f7fd fcef 	bl	8006c90 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80092b8:	f003 0304 	and.w	r3, r3, #4
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d024      	beq.n	800930a <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	699a      	ldr	r2, [r3, #24]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	18d1      	adds	r1, r2, r3
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	683a      	ldr	r2, [r7, #0]
 80092cc:	6978      	ldr	r0, [r7, #20]
 80092ce:	f000 f8d3 	bl	8009478 <prvInsertTimerInActiveList>
 80092d2:	4603      	mov	r3, r0
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d021      	beq.n	800931c <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80092d8:	2300      	movs	r3, #0
 80092da:	9300      	str	r3, [sp, #0]
 80092dc:	2300      	movs	r3, #0
 80092de:	687a      	ldr	r2, [r7, #4]
 80092e0:	2100      	movs	r1, #0
 80092e2:	6978      	ldr	r0, [r7, #20]
 80092e4:	f7ff ff86 	bl	80091f4 <xTimerGenericCommand>
 80092e8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d115      	bne.n	800931c <prvProcessExpiredTimer+0x88>
	__asm volatile
 80092f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f4:	b672      	cpsid	i
 80092f6:	f383 8811 	msr	BASEPRI, r3
 80092fa:	f3bf 8f6f 	isb	sy
 80092fe:	f3bf 8f4f 	dsb	sy
 8009302:	b662      	cpsie	i
 8009304:	60fb      	str	r3, [r7, #12]
}
 8009306:	bf00      	nop
 8009308:	e7fe      	b.n	8009308 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009310:	f023 0301 	bic.w	r3, r3, #1
 8009314:	b2da      	uxtb	r2, r3
 8009316:	697b      	ldr	r3, [r7, #20]
 8009318:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800931c:	697b      	ldr	r3, [r7, #20]
 800931e:	6a1b      	ldr	r3, [r3, #32]
 8009320:	6978      	ldr	r0, [r7, #20]
 8009322:	4798      	blx	r3
}
 8009324:	bf00      	nop
 8009326:	3718      	adds	r7, #24
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}
 800932c:	20000e50 	.word	0x20000e50

08009330 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b084      	sub	sp, #16
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009338:	f107 0308 	add.w	r3, r7, #8
 800933c:	4618      	mov	r0, r3
 800933e:	f000 f857 	bl	80093f0 <prvGetNextExpireTime>
 8009342:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	4619      	mov	r1, r3
 8009348:	68f8      	ldr	r0, [r7, #12]
 800934a:	f000 f803 	bl	8009354 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800934e:	f000 f8d5 	bl	80094fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009352:	e7f1      	b.n	8009338 <prvTimerTask+0x8>

08009354 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b084      	sub	sp, #16
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
 800935c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800935e:	f7ff f83b 	bl	80083d8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009362:	f107 0308 	add.w	r3, r7, #8
 8009366:	4618      	mov	r0, r3
 8009368:	f000 f866 	bl	8009438 <prvSampleTimeNow>
 800936c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d130      	bne.n	80093d6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d10a      	bne.n	8009390 <prvProcessTimerOrBlockTask+0x3c>
 800937a:	687a      	ldr	r2, [r7, #4]
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	429a      	cmp	r2, r3
 8009380:	d806      	bhi.n	8009390 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009382:	f7ff f837 	bl	80083f4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009386:	68f9      	ldr	r1, [r7, #12]
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f7ff ff83 	bl	8009294 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800938e:	e024      	b.n	80093da <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d008      	beq.n	80093a8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009396:	4b13      	ldr	r3, [pc, #76]	; (80093e4 <prvProcessTimerOrBlockTask+0x90>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d101      	bne.n	80093a4 <prvProcessTimerOrBlockTask+0x50>
 80093a0:	2301      	movs	r3, #1
 80093a2:	e000      	b.n	80093a6 <prvProcessTimerOrBlockTask+0x52>
 80093a4:	2300      	movs	r3, #0
 80093a6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80093a8:	4b0f      	ldr	r3, [pc, #60]	; (80093e8 <prvProcessTimerOrBlockTask+0x94>)
 80093aa:	6818      	ldr	r0, [r3, #0]
 80093ac:	687a      	ldr	r2, [r7, #4]
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	1ad3      	subs	r3, r2, r3
 80093b2:	683a      	ldr	r2, [r7, #0]
 80093b4:	4619      	mov	r1, r3
 80093b6:	f7fe fd71 	bl	8007e9c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80093ba:	f7ff f81b 	bl	80083f4 <xTaskResumeAll>
 80093be:	4603      	mov	r3, r0
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d10a      	bne.n	80093da <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80093c4:	4b09      	ldr	r3, [pc, #36]	; (80093ec <prvProcessTimerOrBlockTask+0x98>)
 80093c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093ca:	601a      	str	r2, [r3, #0]
 80093cc:	f3bf 8f4f 	dsb	sy
 80093d0:	f3bf 8f6f 	isb	sy
}
 80093d4:	e001      	b.n	80093da <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80093d6:	f7ff f80d 	bl	80083f4 <xTaskResumeAll>
}
 80093da:	bf00      	nop
 80093dc:	3710      	adds	r7, #16
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}
 80093e2:	bf00      	nop
 80093e4:	20000e54 	.word	0x20000e54
 80093e8:	20000e58 	.word	0x20000e58
 80093ec:	e000ed04 	.word	0xe000ed04

080093f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80093f0:	b480      	push	{r7}
 80093f2:	b085      	sub	sp, #20
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80093f8:	4b0e      	ldr	r3, [pc, #56]	; (8009434 <prvGetNextExpireTime+0x44>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d101      	bne.n	8009406 <prvGetNextExpireTime+0x16>
 8009402:	2201      	movs	r2, #1
 8009404:	e000      	b.n	8009408 <prvGetNextExpireTime+0x18>
 8009406:	2200      	movs	r2, #0
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d105      	bne.n	8009420 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009414:	4b07      	ldr	r3, [pc, #28]	; (8009434 <prvGetNextExpireTime+0x44>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	68db      	ldr	r3, [r3, #12]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	60fb      	str	r3, [r7, #12]
 800941e:	e001      	b.n	8009424 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009420:	2300      	movs	r3, #0
 8009422:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009424:	68fb      	ldr	r3, [r7, #12]
}
 8009426:	4618      	mov	r0, r3
 8009428:	3714      	adds	r7, #20
 800942a:	46bd      	mov	sp, r7
 800942c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009430:	4770      	bx	lr
 8009432:	bf00      	nop
 8009434:	20000e50 	.word	0x20000e50

08009438 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b084      	sub	sp, #16
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009440:	f7ff f878 	bl	8008534 <xTaskGetTickCount>
 8009444:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009446:	4b0b      	ldr	r3, [pc, #44]	; (8009474 <prvSampleTimeNow+0x3c>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	68fa      	ldr	r2, [r7, #12]
 800944c:	429a      	cmp	r2, r3
 800944e:	d205      	bcs.n	800945c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009450:	f000 f93c 	bl	80096cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2201      	movs	r2, #1
 8009458:	601a      	str	r2, [r3, #0]
 800945a:	e002      	b.n	8009462 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2200      	movs	r2, #0
 8009460:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009462:	4a04      	ldr	r2, [pc, #16]	; (8009474 <prvSampleTimeNow+0x3c>)
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009468:	68fb      	ldr	r3, [r7, #12]
}
 800946a:	4618      	mov	r0, r3
 800946c:	3710      	adds	r7, #16
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}
 8009472:	bf00      	nop
 8009474:	20000e60 	.word	0x20000e60

08009478 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b086      	sub	sp, #24
 800947c:	af00      	add	r7, sp, #0
 800947e:	60f8      	str	r0, [r7, #12]
 8009480:	60b9      	str	r1, [r7, #8]
 8009482:	607a      	str	r2, [r7, #4]
 8009484:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009486:	2300      	movs	r3, #0
 8009488:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	68ba      	ldr	r2, [r7, #8]
 800948e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	68fa      	ldr	r2, [r7, #12]
 8009494:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009496:	68ba      	ldr	r2, [r7, #8]
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	429a      	cmp	r2, r3
 800949c:	d812      	bhi.n	80094c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800949e:	687a      	ldr	r2, [r7, #4]
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	1ad2      	subs	r2, r2, r3
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	699b      	ldr	r3, [r3, #24]
 80094a8:	429a      	cmp	r2, r3
 80094aa:	d302      	bcc.n	80094b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80094ac:	2301      	movs	r3, #1
 80094ae:	617b      	str	r3, [r7, #20]
 80094b0:	e01b      	b.n	80094ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80094b2:	4b10      	ldr	r3, [pc, #64]	; (80094f4 <prvInsertTimerInActiveList+0x7c>)
 80094b4:	681a      	ldr	r2, [r3, #0]
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	3304      	adds	r3, #4
 80094ba:	4619      	mov	r1, r3
 80094bc:	4610      	mov	r0, r2
 80094be:	f7fd fbae 	bl	8006c1e <vListInsert>
 80094c2:	e012      	b.n	80094ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80094c4:	687a      	ldr	r2, [r7, #4]
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	429a      	cmp	r2, r3
 80094ca:	d206      	bcs.n	80094da <prvInsertTimerInActiveList+0x62>
 80094cc:	68ba      	ldr	r2, [r7, #8]
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	429a      	cmp	r2, r3
 80094d2:	d302      	bcc.n	80094da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80094d4:	2301      	movs	r3, #1
 80094d6:	617b      	str	r3, [r7, #20]
 80094d8:	e007      	b.n	80094ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80094da:	4b07      	ldr	r3, [pc, #28]	; (80094f8 <prvInsertTimerInActiveList+0x80>)
 80094dc:	681a      	ldr	r2, [r3, #0]
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	3304      	adds	r3, #4
 80094e2:	4619      	mov	r1, r3
 80094e4:	4610      	mov	r0, r2
 80094e6:	f7fd fb9a 	bl	8006c1e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80094ea:	697b      	ldr	r3, [r7, #20]
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	3718      	adds	r7, #24
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}
 80094f4:	20000e54 	.word	0x20000e54
 80094f8:	20000e50 	.word	0x20000e50

080094fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b08e      	sub	sp, #56	; 0x38
 8009500:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009502:	e0d0      	b.n	80096a6 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2b00      	cmp	r3, #0
 8009508:	da1a      	bge.n	8009540 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800950a:	1d3b      	adds	r3, r7, #4
 800950c:	3304      	adds	r3, #4
 800950e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009512:	2b00      	cmp	r3, #0
 8009514:	d10c      	bne.n	8009530 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8009516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800951a:	b672      	cpsid	i
 800951c:	f383 8811 	msr	BASEPRI, r3
 8009520:	f3bf 8f6f 	isb	sy
 8009524:	f3bf 8f4f 	dsb	sy
 8009528:	b662      	cpsie	i
 800952a:	61fb      	str	r3, [r7, #28]
}
 800952c:	bf00      	nop
 800952e:	e7fe      	b.n	800952e <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009536:	6850      	ldr	r0, [r2, #4]
 8009538:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800953a:	6892      	ldr	r2, [r2, #8]
 800953c:	4611      	mov	r1, r2
 800953e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2b00      	cmp	r3, #0
 8009544:	f2c0 80ae 	blt.w	80096a4 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800954c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800954e:	695b      	ldr	r3, [r3, #20]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d004      	beq.n	800955e <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009556:	3304      	adds	r3, #4
 8009558:	4618      	mov	r0, r3
 800955a:	f7fd fb99 	bl	8006c90 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800955e:	463b      	mov	r3, r7
 8009560:	4618      	mov	r0, r3
 8009562:	f7ff ff69 	bl	8009438 <prvSampleTimeNow>
 8009566:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2b09      	cmp	r3, #9
 800956c:	f200 809b 	bhi.w	80096a6 <prvProcessReceivedCommands+0x1aa>
 8009570:	a201      	add	r2, pc, #4	; (adr r2, 8009578 <prvProcessReceivedCommands+0x7c>)
 8009572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009576:	bf00      	nop
 8009578:	080095a1 	.word	0x080095a1
 800957c:	080095a1 	.word	0x080095a1
 8009580:	080095a1 	.word	0x080095a1
 8009584:	08009619 	.word	0x08009619
 8009588:	0800962d 	.word	0x0800962d
 800958c:	0800967b 	.word	0x0800967b
 8009590:	080095a1 	.word	0x080095a1
 8009594:	080095a1 	.word	0x080095a1
 8009598:	08009619 	.word	0x08009619
 800959c:	0800962d 	.word	0x0800962d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80095a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095a6:	f043 0301 	orr.w	r3, r3, #1
 80095aa:	b2da      	uxtb	r2, r3
 80095ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80095b2:	68ba      	ldr	r2, [r7, #8]
 80095b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095b6:	699b      	ldr	r3, [r3, #24]
 80095b8:	18d1      	adds	r1, r2, r3
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095c0:	f7ff ff5a 	bl	8009478 <prvInsertTimerInActiveList>
 80095c4:	4603      	mov	r3, r0
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d06d      	beq.n	80096a6 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80095ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095cc:	6a1b      	ldr	r3, [r3, #32]
 80095ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095d0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80095d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095d8:	f003 0304 	and.w	r3, r3, #4
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d062      	beq.n	80096a6 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80095e0:	68ba      	ldr	r2, [r7, #8]
 80095e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e4:	699b      	ldr	r3, [r3, #24]
 80095e6:	441a      	add	r2, r3
 80095e8:	2300      	movs	r3, #0
 80095ea:	9300      	str	r3, [sp, #0]
 80095ec:	2300      	movs	r3, #0
 80095ee:	2100      	movs	r1, #0
 80095f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095f2:	f7ff fdff 	bl	80091f4 <xTimerGenericCommand>
 80095f6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80095f8:	6a3b      	ldr	r3, [r7, #32]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d153      	bne.n	80096a6 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 80095fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009602:	b672      	cpsid	i
 8009604:	f383 8811 	msr	BASEPRI, r3
 8009608:	f3bf 8f6f 	isb	sy
 800960c:	f3bf 8f4f 	dsb	sy
 8009610:	b662      	cpsie	i
 8009612:	61bb      	str	r3, [r7, #24]
}
 8009614:	bf00      	nop
 8009616:	e7fe      	b.n	8009616 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800961a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800961e:	f023 0301 	bic.w	r3, r3, #1
 8009622:	b2da      	uxtb	r2, r3
 8009624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009626:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800962a:	e03c      	b.n	80096a6 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800962c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800962e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009632:	f043 0301 	orr.w	r3, r3, #1
 8009636:	b2da      	uxtb	r2, r3
 8009638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800963a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800963e:	68ba      	ldr	r2, [r7, #8]
 8009640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009642:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009646:	699b      	ldr	r3, [r3, #24]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d10c      	bne.n	8009666 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800964c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009650:	b672      	cpsid	i
 8009652:	f383 8811 	msr	BASEPRI, r3
 8009656:	f3bf 8f6f 	isb	sy
 800965a:	f3bf 8f4f 	dsb	sy
 800965e:	b662      	cpsie	i
 8009660:	617b      	str	r3, [r7, #20]
}
 8009662:	bf00      	nop
 8009664:	e7fe      	b.n	8009664 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009668:	699a      	ldr	r2, [r3, #24]
 800966a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800966c:	18d1      	adds	r1, r2, r3
 800966e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009672:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009674:	f7ff ff00 	bl	8009478 <prvInsertTimerInActiveList>
					break;
 8009678:	e015      	b.n	80096a6 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800967a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800967c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009680:	f003 0302 	and.w	r3, r3, #2
 8009684:	2b00      	cmp	r3, #0
 8009686:	d103      	bne.n	8009690 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8009688:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800968a:	f000 fbe5 	bl	8009e58 <vPortFree>
 800968e:	e00a      	b.n	80096a6 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009692:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009696:	f023 0301 	bic.w	r3, r3, #1
 800969a:	b2da      	uxtb	r2, r3
 800969c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800969e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80096a2:	e000      	b.n	80096a6 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80096a4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80096a6:	4b08      	ldr	r3, [pc, #32]	; (80096c8 <prvProcessReceivedCommands+0x1cc>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	1d39      	adds	r1, r7, #4
 80096ac:	2200      	movs	r2, #0
 80096ae:	4618      	mov	r0, r3
 80096b0:	f7fd ffd2 	bl	8007658 <xQueueReceive>
 80096b4:	4603      	mov	r3, r0
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	f47f af24 	bne.w	8009504 <prvProcessReceivedCommands+0x8>
	}
}
 80096bc:	bf00      	nop
 80096be:	bf00      	nop
 80096c0:	3730      	adds	r7, #48	; 0x30
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}
 80096c6:	bf00      	nop
 80096c8:	20000e58 	.word	0x20000e58

080096cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b088      	sub	sp, #32
 80096d0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80096d2:	e04a      	b.n	800976a <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80096d4:	4b2e      	ldr	r3, [pc, #184]	; (8009790 <prvSwitchTimerLists+0xc4>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	68db      	ldr	r3, [r3, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096de:	4b2c      	ldr	r3, [pc, #176]	; (8009790 <prvSwitchTimerLists+0xc4>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	68db      	ldr	r3, [r3, #12]
 80096e4:	68db      	ldr	r3, [r3, #12]
 80096e6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	3304      	adds	r3, #4
 80096ec:	4618      	mov	r0, r3
 80096ee:	f7fd facf 	bl	8006c90 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	6a1b      	ldr	r3, [r3, #32]
 80096f6:	68f8      	ldr	r0, [r7, #12]
 80096f8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009700:	f003 0304 	and.w	r3, r3, #4
 8009704:	2b00      	cmp	r3, #0
 8009706:	d030      	beq.n	800976a <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	699b      	ldr	r3, [r3, #24]
 800970c:	693a      	ldr	r2, [r7, #16]
 800970e:	4413      	add	r3, r2
 8009710:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009712:	68ba      	ldr	r2, [r7, #8]
 8009714:	693b      	ldr	r3, [r7, #16]
 8009716:	429a      	cmp	r2, r3
 8009718:	d90e      	bls.n	8009738 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	68ba      	ldr	r2, [r7, #8]
 800971e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	68fa      	ldr	r2, [r7, #12]
 8009724:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009726:	4b1a      	ldr	r3, [pc, #104]	; (8009790 <prvSwitchTimerLists+0xc4>)
 8009728:	681a      	ldr	r2, [r3, #0]
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	3304      	adds	r3, #4
 800972e:	4619      	mov	r1, r3
 8009730:	4610      	mov	r0, r2
 8009732:	f7fd fa74 	bl	8006c1e <vListInsert>
 8009736:	e018      	b.n	800976a <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009738:	2300      	movs	r3, #0
 800973a:	9300      	str	r3, [sp, #0]
 800973c:	2300      	movs	r3, #0
 800973e:	693a      	ldr	r2, [r7, #16]
 8009740:	2100      	movs	r1, #0
 8009742:	68f8      	ldr	r0, [r7, #12]
 8009744:	f7ff fd56 	bl	80091f4 <xTimerGenericCommand>
 8009748:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d10c      	bne.n	800976a <prvSwitchTimerLists+0x9e>
	__asm volatile
 8009750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009754:	b672      	cpsid	i
 8009756:	f383 8811 	msr	BASEPRI, r3
 800975a:	f3bf 8f6f 	isb	sy
 800975e:	f3bf 8f4f 	dsb	sy
 8009762:	b662      	cpsie	i
 8009764:	603b      	str	r3, [r7, #0]
}
 8009766:	bf00      	nop
 8009768:	e7fe      	b.n	8009768 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800976a:	4b09      	ldr	r3, [pc, #36]	; (8009790 <prvSwitchTimerLists+0xc4>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d1af      	bne.n	80096d4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009774:	4b06      	ldr	r3, [pc, #24]	; (8009790 <prvSwitchTimerLists+0xc4>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800977a:	4b06      	ldr	r3, [pc, #24]	; (8009794 <prvSwitchTimerLists+0xc8>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	4a04      	ldr	r2, [pc, #16]	; (8009790 <prvSwitchTimerLists+0xc4>)
 8009780:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009782:	4a04      	ldr	r2, [pc, #16]	; (8009794 <prvSwitchTimerLists+0xc8>)
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	6013      	str	r3, [r2, #0]
}
 8009788:	bf00      	nop
 800978a:	3718      	adds	r7, #24
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}
 8009790:	20000e50 	.word	0x20000e50
 8009794:	20000e54 	.word	0x20000e54

08009798 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b082      	sub	sp, #8
 800979c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800979e:	f000 f965 	bl	8009a6c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80097a2:	4b15      	ldr	r3, [pc, #84]	; (80097f8 <prvCheckForValidListAndQueue+0x60>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d120      	bne.n	80097ec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80097aa:	4814      	ldr	r0, [pc, #80]	; (80097fc <prvCheckForValidListAndQueue+0x64>)
 80097ac:	f7fd f9e6 	bl	8006b7c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80097b0:	4813      	ldr	r0, [pc, #76]	; (8009800 <prvCheckForValidListAndQueue+0x68>)
 80097b2:	f7fd f9e3 	bl	8006b7c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80097b6:	4b13      	ldr	r3, [pc, #76]	; (8009804 <prvCheckForValidListAndQueue+0x6c>)
 80097b8:	4a10      	ldr	r2, [pc, #64]	; (80097fc <prvCheckForValidListAndQueue+0x64>)
 80097ba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80097bc:	4b12      	ldr	r3, [pc, #72]	; (8009808 <prvCheckForValidListAndQueue+0x70>)
 80097be:	4a10      	ldr	r2, [pc, #64]	; (8009800 <prvCheckForValidListAndQueue+0x68>)
 80097c0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80097c2:	2300      	movs	r3, #0
 80097c4:	9300      	str	r3, [sp, #0]
 80097c6:	4b11      	ldr	r3, [pc, #68]	; (800980c <prvCheckForValidListAndQueue+0x74>)
 80097c8:	4a11      	ldr	r2, [pc, #68]	; (8009810 <prvCheckForValidListAndQueue+0x78>)
 80097ca:	2110      	movs	r1, #16
 80097cc:	200a      	movs	r0, #10
 80097ce:	f7fd faf3 	bl	8006db8 <xQueueGenericCreateStatic>
 80097d2:	4603      	mov	r3, r0
 80097d4:	4a08      	ldr	r2, [pc, #32]	; (80097f8 <prvCheckForValidListAndQueue+0x60>)
 80097d6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80097d8:	4b07      	ldr	r3, [pc, #28]	; (80097f8 <prvCheckForValidListAndQueue+0x60>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d005      	beq.n	80097ec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80097e0:	4b05      	ldr	r3, [pc, #20]	; (80097f8 <prvCheckForValidListAndQueue+0x60>)
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	490b      	ldr	r1, [pc, #44]	; (8009814 <prvCheckForValidListAndQueue+0x7c>)
 80097e6:	4618      	mov	r0, r3
 80097e8:	f7fe fb04 	bl	8007df4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80097ec:	f000 f972 	bl	8009ad4 <vPortExitCritical>
}
 80097f0:	bf00      	nop
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}
 80097f6:	bf00      	nop
 80097f8:	20000e58 	.word	0x20000e58
 80097fc:	20000e28 	.word	0x20000e28
 8009800:	20000e3c 	.word	0x20000e3c
 8009804:	20000e50 	.word	0x20000e50
 8009808:	20000e54 	.word	0x20000e54
 800980c:	20000f04 	.word	0x20000f04
 8009810:	20000e64 	.word	0x20000e64
 8009814:	08018af4 	.word	0x08018af4

08009818 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009818:	b580      	push	{r7, lr}
 800981a:	b08a      	sub	sp, #40	; 0x28
 800981c:	af00      	add	r7, sp, #0
 800981e:	60f8      	str	r0, [r7, #12]
 8009820:	60b9      	str	r1, [r7, #8]
 8009822:	607a      	str	r2, [r7, #4]
 8009824:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8009826:	f06f 0301 	mvn.w	r3, #1
 800982a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009838:	4b06      	ldr	r3, [pc, #24]	; (8009854 <xTimerPendFunctionCallFromISR+0x3c>)
 800983a:	6818      	ldr	r0, [r3, #0]
 800983c:	f107 0114 	add.w	r1, r7, #20
 8009840:	2300      	movs	r3, #0
 8009842:	683a      	ldr	r2, [r7, #0]
 8009844:	f7fd fdd2 	bl	80073ec <xQueueGenericSendFromISR>
 8009848:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800984a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800984c:	4618      	mov	r0, r3
 800984e:	3728      	adds	r7, #40	; 0x28
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}
 8009854:	20000e58 	.word	0x20000e58

08009858 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009858:	b480      	push	{r7}
 800985a:	b085      	sub	sp, #20
 800985c:	af00      	add	r7, sp, #0
 800985e:	60f8      	str	r0, [r7, #12]
 8009860:	60b9      	str	r1, [r7, #8]
 8009862:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	3b04      	subs	r3, #4
 8009868:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009870:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	3b04      	subs	r3, #4
 8009876:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	f023 0201 	bic.w	r2, r3, #1
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	3b04      	subs	r3, #4
 8009886:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009888:	4a0c      	ldr	r2, [pc, #48]	; (80098bc <pxPortInitialiseStack+0x64>)
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	3b14      	subs	r3, #20
 8009892:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009894:	687a      	ldr	r2, [r7, #4]
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	3b04      	subs	r3, #4
 800989e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	f06f 0202 	mvn.w	r2, #2
 80098a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	3b20      	subs	r3, #32
 80098ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80098ae:	68fb      	ldr	r3, [r7, #12]
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	3714      	adds	r7, #20
 80098b4:	46bd      	mov	sp, r7
 80098b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ba:	4770      	bx	lr
 80098bc:	080098c1 	.word	0x080098c1

080098c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80098c0:	b480      	push	{r7}
 80098c2:	b085      	sub	sp, #20
 80098c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80098c6:	2300      	movs	r3, #0
 80098c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80098ca:	4b14      	ldr	r3, [pc, #80]	; (800991c <prvTaskExitError+0x5c>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098d2:	d00c      	beq.n	80098ee <prvTaskExitError+0x2e>
	__asm volatile
 80098d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d8:	b672      	cpsid	i
 80098da:	f383 8811 	msr	BASEPRI, r3
 80098de:	f3bf 8f6f 	isb	sy
 80098e2:	f3bf 8f4f 	dsb	sy
 80098e6:	b662      	cpsie	i
 80098e8:	60fb      	str	r3, [r7, #12]
}
 80098ea:	bf00      	nop
 80098ec:	e7fe      	b.n	80098ec <prvTaskExitError+0x2c>
	__asm volatile
 80098ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f2:	b672      	cpsid	i
 80098f4:	f383 8811 	msr	BASEPRI, r3
 80098f8:	f3bf 8f6f 	isb	sy
 80098fc:	f3bf 8f4f 	dsb	sy
 8009900:	b662      	cpsie	i
 8009902:	60bb      	str	r3, [r7, #8]
}
 8009904:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009906:	bf00      	nop
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d0fc      	beq.n	8009908 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800990e:	bf00      	nop
 8009910:	bf00      	nop
 8009912:	3714      	adds	r7, #20
 8009914:	46bd      	mov	sp, r7
 8009916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991a:	4770      	bx	lr
 800991c:	2000000c 	.word	0x2000000c

08009920 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009920:	4b07      	ldr	r3, [pc, #28]	; (8009940 <pxCurrentTCBConst2>)
 8009922:	6819      	ldr	r1, [r3, #0]
 8009924:	6808      	ldr	r0, [r1, #0]
 8009926:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800992a:	f380 8809 	msr	PSP, r0
 800992e:	f3bf 8f6f 	isb	sy
 8009932:	f04f 0000 	mov.w	r0, #0
 8009936:	f380 8811 	msr	BASEPRI, r0
 800993a:	4770      	bx	lr
 800993c:	f3af 8000 	nop.w

08009940 <pxCurrentTCBConst2>:
 8009940:	20000928 	.word	0x20000928
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009944:	bf00      	nop
 8009946:	bf00      	nop

08009948 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009948:	4808      	ldr	r0, [pc, #32]	; (800996c <prvPortStartFirstTask+0x24>)
 800994a:	6800      	ldr	r0, [r0, #0]
 800994c:	6800      	ldr	r0, [r0, #0]
 800994e:	f380 8808 	msr	MSP, r0
 8009952:	f04f 0000 	mov.w	r0, #0
 8009956:	f380 8814 	msr	CONTROL, r0
 800995a:	b662      	cpsie	i
 800995c:	b661      	cpsie	f
 800995e:	f3bf 8f4f 	dsb	sy
 8009962:	f3bf 8f6f 	isb	sy
 8009966:	df00      	svc	0
 8009968:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800996a:	bf00      	nop
 800996c:	e000ed08 	.word	0xe000ed08

08009970 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b084      	sub	sp, #16
 8009974:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009976:	4b37      	ldr	r3, [pc, #220]	; (8009a54 <xPortStartScheduler+0xe4>)
 8009978:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	781b      	ldrb	r3, [r3, #0]
 800997e:	b2db      	uxtb	r3, r3
 8009980:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	22ff      	movs	r2, #255	; 0xff
 8009986:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	781b      	ldrb	r3, [r3, #0]
 800998c:	b2db      	uxtb	r3, r3
 800998e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009990:	78fb      	ldrb	r3, [r7, #3]
 8009992:	b2db      	uxtb	r3, r3
 8009994:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009998:	b2da      	uxtb	r2, r3
 800999a:	4b2f      	ldr	r3, [pc, #188]	; (8009a58 <xPortStartScheduler+0xe8>)
 800999c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800999e:	4b2f      	ldr	r3, [pc, #188]	; (8009a5c <xPortStartScheduler+0xec>)
 80099a0:	2207      	movs	r2, #7
 80099a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80099a4:	e009      	b.n	80099ba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80099a6:	4b2d      	ldr	r3, [pc, #180]	; (8009a5c <xPortStartScheduler+0xec>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	3b01      	subs	r3, #1
 80099ac:	4a2b      	ldr	r2, [pc, #172]	; (8009a5c <xPortStartScheduler+0xec>)
 80099ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80099b0:	78fb      	ldrb	r3, [r7, #3]
 80099b2:	b2db      	uxtb	r3, r3
 80099b4:	005b      	lsls	r3, r3, #1
 80099b6:	b2db      	uxtb	r3, r3
 80099b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80099ba:	78fb      	ldrb	r3, [r7, #3]
 80099bc:	b2db      	uxtb	r3, r3
 80099be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099c2:	2b80      	cmp	r3, #128	; 0x80
 80099c4:	d0ef      	beq.n	80099a6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80099c6:	4b25      	ldr	r3, [pc, #148]	; (8009a5c <xPortStartScheduler+0xec>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f1c3 0307 	rsb	r3, r3, #7
 80099ce:	2b04      	cmp	r3, #4
 80099d0:	d00c      	beq.n	80099ec <xPortStartScheduler+0x7c>
	__asm volatile
 80099d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d6:	b672      	cpsid	i
 80099d8:	f383 8811 	msr	BASEPRI, r3
 80099dc:	f3bf 8f6f 	isb	sy
 80099e0:	f3bf 8f4f 	dsb	sy
 80099e4:	b662      	cpsie	i
 80099e6:	60bb      	str	r3, [r7, #8]
}
 80099e8:	bf00      	nop
 80099ea:	e7fe      	b.n	80099ea <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80099ec:	4b1b      	ldr	r3, [pc, #108]	; (8009a5c <xPortStartScheduler+0xec>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	021b      	lsls	r3, r3, #8
 80099f2:	4a1a      	ldr	r2, [pc, #104]	; (8009a5c <xPortStartScheduler+0xec>)
 80099f4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80099f6:	4b19      	ldr	r3, [pc, #100]	; (8009a5c <xPortStartScheduler+0xec>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80099fe:	4a17      	ldr	r2, [pc, #92]	; (8009a5c <xPortStartScheduler+0xec>)
 8009a00:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	b2da      	uxtb	r2, r3
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009a0a:	4b15      	ldr	r3, [pc, #84]	; (8009a60 <xPortStartScheduler+0xf0>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	4a14      	ldr	r2, [pc, #80]	; (8009a60 <xPortStartScheduler+0xf0>)
 8009a10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009a14:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009a16:	4b12      	ldr	r3, [pc, #72]	; (8009a60 <xPortStartScheduler+0xf0>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	4a11      	ldr	r2, [pc, #68]	; (8009a60 <xPortStartScheduler+0xf0>)
 8009a1c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009a20:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009a22:	f000 f8dd 	bl	8009be0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009a26:	4b0f      	ldr	r3, [pc, #60]	; (8009a64 <xPortStartScheduler+0xf4>)
 8009a28:	2200      	movs	r2, #0
 8009a2a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009a2c:	f000 f8fc 	bl	8009c28 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009a30:	4b0d      	ldr	r3, [pc, #52]	; (8009a68 <xPortStartScheduler+0xf8>)
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	4a0c      	ldr	r2, [pc, #48]	; (8009a68 <xPortStartScheduler+0xf8>)
 8009a36:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009a3a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009a3c:	f7ff ff84 	bl	8009948 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009a40:	f7fe fe56 	bl	80086f0 <vTaskSwitchContext>
	prvTaskExitError();
 8009a44:	f7ff ff3c 	bl	80098c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009a48:	2300      	movs	r3, #0
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	3710      	adds	r7, #16
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}
 8009a52:	bf00      	nop
 8009a54:	e000e400 	.word	0xe000e400
 8009a58:	20000f54 	.word	0x20000f54
 8009a5c:	20000f58 	.word	0x20000f58
 8009a60:	e000ed20 	.word	0xe000ed20
 8009a64:	2000000c 	.word	0x2000000c
 8009a68:	e000ef34 	.word	0xe000ef34

08009a6c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b083      	sub	sp, #12
 8009a70:	af00      	add	r7, sp, #0
	__asm volatile
 8009a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a76:	b672      	cpsid	i
 8009a78:	f383 8811 	msr	BASEPRI, r3
 8009a7c:	f3bf 8f6f 	isb	sy
 8009a80:	f3bf 8f4f 	dsb	sy
 8009a84:	b662      	cpsie	i
 8009a86:	607b      	str	r3, [r7, #4]
}
 8009a88:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009a8a:	4b10      	ldr	r3, [pc, #64]	; (8009acc <vPortEnterCritical+0x60>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	3301      	adds	r3, #1
 8009a90:	4a0e      	ldr	r2, [pc, #56]	; (8009acc <vPortEnterCritical+0x60>)
 8009a92:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009a94:	4b0d      	ldr	r3, [pc, #52]	; (8009acc <vPortEnterCritical+0x60>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	2b01      	cmp	r3, #1
 8009a9a:	d111      	bne.n	8009ac0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009a9c:	4b0c      	ldr	r3, [pc, #48]	; (8009ad0 <vPortEnterCritical+0x64>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	b2db      	uxtb	r3, r3
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d00c      	beq.n	8009ac0 <vPortEnterCritical+0x54>
	__asm volatile
 8009aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aaa:	b672      	cpsid	i
 8009aac:	f383 8811 	msr	BASEPRI, r3
 8009ab0:	f3bf 8f6f 	isb	sy
 8009ab4:	f3bf 8f4f 	dsb	sy
 8009ab8:	b662      	cpsie	i
 8009aba:	603b      	str	r3, [r7, #0]
}
 8009abc:	bf00      	nop
 8009abe:	e7fe      	b.n	8009abe <vPortEnterCritical+0x52>
	}
}
 8009ac0:	bf00      	nop
 8009ac2:	370c      	adds	r7, #12
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aca:	4770      	bx	lr
 8009acc:	2000000c 	.word	0x2000000c
 8009ad0:	e000ed04 	.word	0xe000ed04

08009ad4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b083      	sub	sp, #12
 8009ad8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009ada:	4b13      	ldr	r3, [pc, #76]	; (8009b28 <vPortExitCritical+0x54>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d10c      	bne.n	8009afc <vPortExitCritical+0x28>
	__asm volatile
 8009ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ae6:	b672      	cpsid	i
 8009ae8:	f383 8811 	msr	BASEPRI, r3
 8009aec:	f3bf 8f6f 	isb	sy
 8009af0:	f3bf 8f4f 	dsb	sy
 8009af4:	b662      	cpsie	i
 8009af6:	607b      	str	r3, [r7, #4]
}
 8009af8:	bf00      	nop
 8009afa:	e7fe      	b.n	8009afa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8009afc:	4b0a      	ldr	r3, [pc, #40]	; (8009b28 <vPortExitCritical+0x54>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	3b01      	subs	r3, #1
 8009b02:	4a09      	ldr	r2, [pc, #36]	; (8009b28 <vPortExitCritical+0x54>)
 8009b04:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009b06:	4b08      	ldr	r3, [pc, #32]	; (8009b28 <vPortExitCritical+0x54>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d105      	bne.n	8009b1a <vPortExitCritical+0x46>
 8009b0e:	2300      	movs	r3, #0
 8009b10:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	f383 8811 	msr	BASEPRI, r3
}
 8009b18:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009b1a:	bf00      	nop
 8009b1c:	370c      	adds	r7, #12
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b24:	4770      	bx	lr
 8009b26:	bf00      	nop
 8009b28:	2000000c 	.word	0x2000000c
 8009b2c:	00000000 	.word	0x00000000

08009b30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009b30:	f3ef 8009 	mrs	r0, PSP
 8009b34:	f3bf 8f6f 	isb	sy
 8009b38:	4b15      	ldr	r3, [pc, #84]	; (8009b90 <pxCurrentTCBConst>)
 8009b3a:	681a      	ldr	r2, [r3, #0]
 8009b3c:	f01e 0f10 	tst.w	lr, #16
 8009b40:	bf08      	it	eq
 8009b42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009b46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b4a:	6010      	str	r0, [r2, #0]
 8009b4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009b50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009b54:	b672      	cpsid	i
 8009b56:	f380 8811 	msr	BASEPRI, r0
 8009b5a:	f3bf 8f4f 	dsb	sy
 8009b5e:	f3bf 8f6f 	isb	sy
 8009b62:	b662      	cpsie	i
 8009b64:	f7fe fdc4 	bl	80086f0 <vTaskSwitchContext>
 8009b68:	f04f 0000 	mov.w	r0, #0
 8009b6c:	f380 8811 	msr	BASEPRI, r0
 8009b70:	bc09      	pop	{r0, r3}
 8009b72:	6819      	ldr	r1, [r3, #0]
 8009b74:	6808      	ldr	r0, [r1, #0]
 8009b76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b7a:	f01e 0f10 	tst.w	lr, #16
 8009b7e:	bf08      	it	eq
 8009b80:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009b84:	f380 8809 	msr	PSP, r0
 8009b88:	f3bf 8f6f 	isb	sy
 8009b8c:	4770      	bx	lr
 8009b8e:	bf00      	nop

08009b90 <pxCurrentTCBConst>:
 8009b90:	20000928 	.word	0x20000928
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009b94:	bf00      	nop
 8009b96:	bf00      	nop

08009b98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b082      	sub	sp, #8
 8009b9c:	af00      	add	r7, sp, #0
	__asm volatile
 8009b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba2:	b672      	cpsid	i
 8009ba4:	f383 8811 	msr	BASEPRI, r3
 8009ba8:	f3bf 8f6f 	isb	sy
 8009bac:	f3bf 8f4f 	dsb	sy
 8009bb0:	b662      	cpsie	i
 8009bb2:	607b      	str	r3, [r7, #4]
}
 8009bb4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009bb6:	f7fe fcdf 	bl	8008578 <xTaskIncrementTick>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d003      	beq.n	8009bc8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009bc0:	4b06      	ldr	r3, [pc, #24]	; (8009bdc <SysTick_Handler+0x44>)
 8009bc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bc6:	601a      	str	r2, [r3, #0]
 8009bc8:	2300      	movs	r3, #0
 8009bca:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	f383 8811 	msr	BASEPRI, r3
}
 8009bd2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009bd4:	bf00      	nop
 8009bd6:	3708      	adds	r7, #8
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}
 8009bdc:	e000ed04 	.word	0xe000ed04

08009be0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009be0:	b480      	push	{r7}
 8009be2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009be4:	4b0b      	ldr	r3, [pc, #44]	; (8009c14 <vPortSetupTimerInterrupt+0x34>)
 8009be6:	2200      	movs	r2, #0
 8009be8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009bea:	4b0b      	ldr	r3, [pc, #44]	; (8009c18 <vPortSetupTimerInterrupt+0x38>)
 8009bec:	2200      	movs	r2, #0
 8009bee:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009bf0:	4b0a      	ldr	r3, [pc, #40]	; (8009c1c <vPortSetupTimerInterrupt+0x3c>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	4a0a      	ldr	r2, [pc, #40]	; (8009c20 <vPortSetupTimerInterrupt+0x40>)
 8009bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8009bfa:	099b      	lsrs	r3, r3, #6
 8009bfc:	4a09      	ldr	r2, [pc, #36]	; (8009c24 <vPortSetupTimerInterrupt+0x44>)
 8009bfe:	3b01      	subs	r3, #1
 8009c00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009c02:	4b04      	ldr	r3, [pc, #16]	; (8009c14 <vPortSetupTimerInterrupt+0x34>)
 8009c04:	2207      	movs	r2, #7
 8009c06:	601a      	str	r2, [r3, #0]
}
 8009c08:	bf00      	nop
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c10:	4770      	bx	lr
 8009c12:	bf00      	nop
 8009c14:	e000e010 	.word	0xe000e010
 8009c18:	e000e018 	.word	0xe000e018
 8009c1c:	20000000 	.word	0x20000000
 8009c20:	10624dd3 	.word	0x10624dd3
 8009c24:	e000e014 	.word	0xe000e014

08009c28 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009c28:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009c38 <vPortEnableVFP+0x10>
 8009c2c:	6801      	ldr	r1, [r0, #0]
 8009c2e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009c32:	6001      	str	r1, [r0, #0]
 8009c34:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009c36:	bf00      	nop
 8009c38:	e000ed88 	.word	0xe000ed88

08009c3c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009c3c:	b480      	push	{r7}
 8009c3e:	b085      	sub	sp, #20
 8009c40:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009c42:	f3ef 8305 	mrs	r3, IPSR
 8009c46:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	2b0f      	cmp	r3, #15
 8009c4c:	d916      	bls.n	8009c7c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009c4e:	4a19      	ldr	r2, [pc, #100]	; (8009cb4 <vPortValidateInterruptPriority+0x78>)
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	4413      	add	r3, r2
 8009c54:	781b      	ldrb	r3, [r3, #0]
 8009c56:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009c58:	4b17      	ldr	r3, [pc, #92]	; (8009cb8 <vPortValidateInterruptPriority+0x7c>)
 8009c5a:	781b      	ldrb	r3, [r3, #0]
 8009c5c:	7afa      	ldrb	r2, [r7, #11]
 8009c5e:	429a      	cmp	r2, r3
 8009c60:	d20c      	bcs.n	8009c7c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8009c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c66:	b672      	cpsid	i
 8009c68:	f383 8811 	msr	BASEPRI, r3
 8009c6c:	f3bf 8f6f 	isb	sy
 8009c70:	f3bf 8f4f 	dsb	sy
 8009c74:	b662      	cpsie	i
 8009c76:	607b      	str	r3, [r7, #4]
}
 8009c78:	bf00      	nop
 8009c7a:	e7fe      	b.n	8009c7a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009c7c:	4b0f      	ldr	r3, [pc, #60]	; (8009cbc <vPortValidateInterruptPriority+0x80>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009c84:	4b0e      	ldr	r3, [pc, #56]	; (8009cc0 <vPortValidateInterruptPriority+0x84>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	429a      	cmp	r2, r3
 8009c8a:	d90c      	bls.n	8009ca6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8009c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c90:	b672      	cpsid	i
 8009c92:	f383 8811 	msr	BASEPRI, r3
 8009c96:	f3bf 8f6f 	isb	sy
 8009c9a:	f3bf 8f4f 	dsb	sy
 8009c9e:	b662      	cpsie	i
 8009ca0:	603b      	str	r3, [r7, #0]
}
 8009ca2:	bf00      	nop
 8009ca4:	e7fe      	b.n	8009ca4 <vPortValidateInterruptPriority+0x68>
	}
 8009ca6:	bf00      	nop
 8009ca8:	3714      	adds	r7, #20
 8009caa:	46bd      	mov	sp, r7
 8009cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb0:	4770      	bx	lr
 8009cb2:	bf00      	nop
 8009cb4:	e000e3f0 	.word	0xe000e3f0
 8009cb8:	20000f54 	.word	0x20000f54
 8009cbc:	e000ed0c 	.word	0xe000ed0c
 8009cc0:	20000f58 	.word	0x20000f58

08009cc4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b08a      	sub	sp, #40	; 0x28
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009ccc:	2300      	movs	r3, #0
 8009cce:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009cd0:	f7fe fb82 	bl	80083d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009cd4:	4b5b      	ldr	r3, [pc, #364]	; (8009e44 <pvPortMalloc+0x180>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d101      	bne.n	8009ce0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009cdc:	f000 f91a 	bl	8009f14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009ce0:	4b59      	ldr	r3, [pc, #356]	; (8009e48 <pvPortMalloc+0x184>)
 8009ce2:	681a      	ldr	r2, [r3, #0]
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	4013      	ands	r3, r2
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	f040 8092 	bne.w	8009e12 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d01f      	beq.n	8009d34 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8009cf4:	2208      	movs	r2, #8
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	4413      	add	r3, r2
 8009cfa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f003 0307 	and.w	r3, r3, #7
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d016      	beq.n	8009d34 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f023 0307 	bic.w	r3, r3, #7
 8009d0c:	3308      	adds	r3, #8
 8009d0e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f003 0307 	and.w	r3, r3, #7
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d00c      	beq.n	8009d34 <pvPortMalloc+0x70>
	__asm volatile
 8009d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d1e:	b672      	cpsid	i
 8009d20:	f383 8811 	msr	BASEPRI, r3
 8009d24:	f3bf 8f6f 	isb	sy
 8009d28:	f3bf 8f4f 	dsb	sy
 8009d2c:	b662      	cpsie	i
 8009d2e:	617b      	str	r3, [r7, #20]
}
 8009d30:	bf00      	nop
 8009d32:	e7fe      	b.n	8009d32 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d06b      	beq.n	8009e12 <pvPortMalloc+0x14e>
 8009d3a:	4b44      	ldr	r3, [pc, #272]	; (8009e4c <pvPortMalloc+0x188>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	687a      	ldr	r2, [r7, #4]
 8009d40:	429a      	cmp	r2, r3
 8009d42:	d866      	bhi.n	8009e12 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009d44:	4b42      	ldr	r3, [pc, #264]	; (8009e50 <pvPortMalloc+0x18c>)
 8009d46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009d48:	4b41      	ldr	r3, [pc, #260]	; (8009e50 <pvPortMalloc+0x18c>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009d4e:	e004      	b.n	8009d5a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8009d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d5c:	685b      	ldr	r3, [r3, #4]
 8009d5e:	687a      	ldr	r2, [r7, #4]
 8009d60:	429a      	cmp	r2, r3
 8009d62:	d903      	bls.n	8009d6c <pvPortMalloc+0xa8>
 8009d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d1f1      	bne.n	8009d50 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009d6c:	4b35      	ldr	r3, [pc, #212]	; (8009e44 <pvPortMalloc+0x180>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d72:	429a      	cmp	r2, r3
 8009d74:	d04d      	beq.n	8009e12 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009d76:	6a3b      	ldr	r3, [r7, #32]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	2208      	movs	r2, #8
 8009d7c:	4413      	add	r3, r2
 8009d7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d82:	681a      	ldr	r2, [r3, #0]
 8009d84:	6a3b      	ldr	r3, [r7, #32]
 8009d86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d8a:	685a      	ldr	r2, [r3, #4]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	1ad2      	subs	r2, r2, r3
 8009d90:	2308      	movs	r3, #8
 8009d92:	005b      	lsls	r3, r3, #1
 8009d94:	429a      	cmp	r2, r3
 8009d96:	d921      	bls.n	8009ddc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009d98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	4413      	add	r3, r2
 8009d9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009da0:	69bb      	ldr	r3, [r7, #24]
 8009da2:	f003 0307 	and.w	r3, r3, #7
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d00c      	beq.n	8009dc4 <pvPortMalloc+0x100>
	__asm volatile
 8009daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dae:	b672      	cpsid	i
 8009db0:	f383 8811 	msr	BASEPRI, r3
 8009db4:	f3bf 8f6f 	isb	sy
 8009db8:	f3bf 8f4f 	dsb	sy
 8009dbc:	b662      	cpsie	i
 8009dbe:	613b      	str	r3, [r7, #16]
}
 8009dc0:	bf00      	nop
 8009dc2:	e7fe      	b.n	8009dc2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc6:	685a      	ldr	r2, [r3, #4]
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	1ad2      	subs	r2, r2, r3
 8009dcc:	69bb      	ldr	r3, [r7, #24]
 8009dce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd2:	687a      	ldr	r2, [r7, #4]
 8009dd4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009dd6:	69b8      	ldr	r0, [r7, #24]
 8009dd8:	f000 f8fe 	bl	8009fd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009ddc:	4b1b      	ldr	r3, [pc, #108]	; (8009e4c <pvPortMalloc+0x188>)
 8009dde:	681a      	ldr	r2, [r3, #0]
 8009de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de2:	685b      	ldr	r3, [r3, #4]
 8009de4:	1ad3      	subs	r3, r2, r3
 8009de6:	4a19      	ldr	r2, [pc, #100]	; (8009e4c <pvPortMalloc+0x188>)
 8009de8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009dea:	4b18      	ldr	r3, [pc, #96]	; (8009e4c <pvPortMalloc+0x188>)
 8009dec:	681a      	ldr	r2, [r3, #0]
 8009dee:	4b19      	ldr	r3, [pc, #100]	; (8009e54 <pvPortMalloc+0x190>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	429a      	cmp	r2, r3
 8009df4:	d203      	bcs.n	8009dfe <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009df6:	4b15      	ldr	r3, [pc, #84]	; (8009e4c <pvPortMalloc+0x188>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	4a16      	ldr	r2, [pc, #88]	; (8009e54 <pvPortMalloc+0x190>)
 8009dfc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e00:	685a      	ldr	r2, [r3, #4]
 8009e02:	4b11      	ldr	r3, [pc, #68]	; (8009e48 <pvPortMalloc+0x184>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	431a      	orrs	r2, r3
 8009e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e0a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e0e:	2200      	movs	r2, #0
 8009e10:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009e12:	f7fe faef 	bl	80083f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e16:	69fb      	ldr	r3, [r7, #28]
 8009e18:	f003 0307 	and.w	r3, r3, #7
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d00c      	beq.n	8009e3a <pvPortMalloc+0x176>
	__asm volatile
 8009e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e24:	b672      	cpsid	i
 8009e26:	f383 8811 	msr	BASEPRI, r3
 8009e2a:	f3bf 8f6f 	isb	sy
 8009e2e:	f3bf 8f4f 	dsb	sy
 8009e32:	b662      	cpsie	i
 8009e34:	60fb      	str	r3, [r7, #12]
}
 8009e36:	bf00      	nop
 8009e38:	e7fe      	b.n	8009e38 <pvPortMalloc+0x174>
	return pvReturn;
 8009e3a:	69fb      	ldr	r3, [r7, #28]
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	3728      	adds	r7, #40	; 0x28
 8009e40:	46bd      	mov	sp, r7
 8009e42:	bd80      	pop	{r7, pc}
 8009e44:	20004b64 	.word	0x20004b64
 8009e48:	20004b70 	.word	0x20004b70
 8009e4c:	20004b68 	.word	0x20004b68
 8009e50:	20004b5c 	.word	0x20004b5c
 8009e54:	20004b6c 	.word	0x20004b6c

08009e58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b086      	sub	sp, #24
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d04c      	beq.n	8009f04 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009e6a:	2308      	movs	r3, #8
 8009e6c:	425b      	negs	r3, r3
 8009e6e:	697a      	ldr	r2, [r7, #20]
 8009e70:	4413      	add	r3, r2
 8009e72:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009e74:	697b      	ldr	r3, [r7, #20]
 8009e76:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009e78:	693b      	ldr	r3, [r7, #16]
 8009e7a:	685a      	ldr	r2, [r3, #4]
 8009e7c:	4b23      	ldr	r3, [pc, #140]	; (8009f0c <vPortFree+0xb4>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	4013      	ands	r3, r2
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d10c      	bne.n	8009ea0 <vPortFree+0x48>
	__asm volatile
 8009e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e8a:	b672      	cpsid	i
 8009e8c:	f383 8811 	msr	BASEPRI, r3
 8009e90:	f3bf 8f6f 	isb	sy
 8009e94:	f3bf 8f4f 	dsb	sy
 8009e98:	b662      	cpsie	i
 8009e9a:	60fb      	str	r3, [r7, #12]
}
 8009e9c:	bf00      	nop
 8009e9e:	e7fe      	b.n	8009e9e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d00c      	beq.n	8009ec2 <vPortFree+0x6a>
	__asm volatile
 8009ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eac:	b672      	cpsid	i
 8009eae:	f383 8811 	msr	BASEPRI, r3
 8009eb2:	f3bf 8f6f 	isb	sy
 8009eb6:	f3bf 8f4f 	dsb	sy
 8009eba:	b662      	cpsie	i
 8009ebc:	60bb      	str	r3, [r7, #8]
}
 8009ebe:	bf00      	nop
 8009ec0:	e7fe      	b.n	8009ec0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	685a      	ldr	r2, [r3, #4]
 8009ec6:	4b11      	ldr	r3, [pc, #68]	; (8009f0c <vPortFree+0xb4>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	4013      	ands	r3, r2
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d019      	beq.n	8009f04 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009ed0:	693b      	ldr	r3, [r7, #16]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d115      	bne.n	8009f04 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	685a      	ldr	r2, [r3, #4]
 8009edc:	4b0b      	ldr	r3, [pc, #44]	; (8009f0c <vPortFree+0xb4>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	43db      	mvns	r3, r3
 8009ee2:	401a      	ands	r2, r3
 8009ee4:	693b      	ldr	r3, [r7, #16]
 8009ee6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009ee8:	f7fe fa76 	bl	80083d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	685a      	ldr	r2, [r3, #4]
 8009ef0:	4b07      	ldr	r3, [pc, #28]	; (8009f10 <vPortFree+0xb8>)
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	4413      	add	r3, r2
 8009ef6:	4a06      	ldr	r2, [pc, #24]	; (8009f10 <vPortFree+0xb8>)
 8009ef8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009efa:	6938      	ldr	r0, [r7, #16]
 8009efc:	f000 f86c 	bl	8009fd8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009f00:	f7fe fa78 	bl	80083f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009f04:	bf00      	nop
 8009f06:	3718      	adds	r7, #24
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bd80      	pop	{r7, pc}
 8009f0c:	20004b70 	.word	0x20004b70
 8009f10:	20004b68 	.word	0x20004b68

08009f14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009f14:	b480      	push	{r7}
 8009f16:	b085      	sub	sp, #20
 8009f18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009f1a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009f1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009f20:	4b27      	ldr	r3, [pc, #156]	; (8009fc0 <prvHeapInit+0xac>)
 8009f22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	f003 0307 	and.w	r3, r3, #7
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d00c      	beq.n	8009f48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	3307      	adds	r3, #7
 8009f32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	f023 0307 	bic.w	r3, r3, #7
 8009f3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009f3c:	68ba      	ldr	r2, [r7, #8]
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	1ad3      	subs	r3, r2, r3
 8009f42:	4a1f      	ldr	r2, [pc, #124]	; (8009fc0 <prvHeapInit+0xac>)
 8009f44:	4413      	add	r3, r2
 8009f46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009f4c:	4a1d      	ldr	r2, [pc, #116]	; (8009fc4 <prvHeapInit+0xb0>)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009f52:	4b1c      	ldr	r3, [pc, #112]	; (8009fc4 <prvHeapInit+0xb0>)
 8009f54:	2200      	movs	r2, #0
 8009f56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	68ba      	ldr	r2, [r7, #8]
 8009f5c:	4413      	add	r3, r2
 8009f5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009f60:	2208      	movs	r2, #8
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	1a9b      	subs	r3, r3, r2
 8009f66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	f023 0307 	bic.w	r3, r3, #7
 8009f6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	4a15      	ldr	r2, [pc, #84]	; (8009fc8 <prvHeapInit+0xb4>)
 8009f74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009f76:	4b14      	ldr	r3, [pc, #80]	; (8009fc8 <prvHeapInit+0xb4>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009f7e:	4b12      	ldr	r3, [pc, #72]	; (8009fc8 <prvHeapInit+0xb4>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	2200      	movs	r2, #0
 8009f84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	68fa      	ldr	r2, [r7, #12]
 8009f8e:	1ad2      	subs	r2, r2, r3
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009f94:	4b0c      	ldr	r3, [pc, #48]	; (8009fc8 <prvHeapInit+0xb4>)
 8009f96:	681a      	ldr	r2, [r3, #0]
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	685b      	ldr	r3, [r3, #4]
 8009fa0:	4a0a      	ldr	r2, [pc, #40]	; (8009fcc <prvHeapInit+0xb8>)
 8009fa2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	685b      	ldr	r3, [r3, #4]
 8009fa8:	4a09      	ldr	r2, [pc, #36]	; (8009fd0 <prvHeapInit+0xbc>)
 8009faa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009fac:	4b09      	ldr	r3, [pc, #36]	; (8009fd4 <prvHeapInit+0xc0>)
 8009fae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009fb2:	601a      	str	r2, [r3, #0]
}
 8009fb4:	bf00      	nop
 8009fb6:	3714      	adds	r7, #20
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbe:	4770      	bx	lr
 8009fc0:	20000f5c 	.word	0x20000f5c
 8009fc4:	20004b5c 	.word	0x20004b5c
 8009fc8:	20004b64 	.word	0x20004b64
 8009fcc:	20004b6c 	.word	0x20004b6c
 8009fd0:	20004b68 	.word	0x20004b68
 8009fd4:	20004b70 	.word	0x20004b70

08009fd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b085      	sub	sp, #20
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009fe0:	4b28      	ldr	r3, [pc, #160]	; (800a084 <prvInsertBlockIntoFreeList+0xac>)
 8009fe2:	60fb      	str	r3, [r7, #12]
 8009fe4:	e002      	b.n	8009fec <prvInsertBlockIntoFreeList+0x14>
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	60fb      	str	r3, [r7, #12]
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	687a      	ldr	r2, [r7, #4]
 8009ff2:	429a      	cmp	r2, r3
 8009ff4:	d8f7      	bhi.n	8009fe6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	685b      	ldr	r3, [r3, #4]
 8009ffe:	68ba      	ldr	r2, [r7, #8]
 800a000:	4413      	add	r3, r2
 800a002:	687a      	ldr	r2, [r7, #4]
 800a004:	429a      	cmp	r2, r3
 800a006:	d108      	bne.n	800a01a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	685a      	ldr	r2, [r3, #4]
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	685b      	ldr	r3, [r3, #4]
 800a010:	441a      	add	r2, r3
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	685b      	ldr	r3, [r3, #4]
 800a022:	68ba      	ldr	r2, [r7, #8]
 800a024:	441a      	add	r2, r3
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	429a      	cmp	r2, r3
 800a02c:	d118      	bne.n	800a060 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681a      	ldr	r2, [r3, #0]
 800a032:	4b15      	ldr	r3, [pc, #84]	; (800a088 <prvInsertBlockIntoFreeList+0xb0>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	429a      	cmp	r2, r3
 800a038:	d00d      	beq.n	800a056 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	685a      	ldr	r2, [r3, #4]
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	685b      	ldr	r3, [r3, #4]
 800a044:	441a      	add	r2, r3
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	681a      	ldr	r2, [r3, #0]
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	601a      	str	r2, [r3, #0]
 800a054:	e008      	b.n	800a068 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a056:	4b0c      	ldr	r3, [pc, #48]	; (800a088 <prvInsertBlockIntoFreeList+0xb0>)
 800a058:	681a      	ldr	r2, [r3, #0]
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	601a      	str	r2, [r3, #0]
 800a05e:	e003      	b.n	800a068 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681a      	ldr	r2, [r3, #0]
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a068:	68fa      	ldr	r2, [r7, #12]
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	429a      	cmp	r2, r3
 800a06e:	d002      	beq.n	800a076 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	687a      	ldr	r2, [r7, #4]
 800a074:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a076:	bf00      	nop
 800a078:	3714      	adds	r7, #20
 800a07a:	46bd      	mov	sp, r7
 800a07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a080:	4770      	bx	lr
 800a082:	bf00      	nop
 800a084:	20004b5c 	.word	0x20004b5c
 800a088:	20004b64 	.word	0x20004b64

0800a08c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b084      	sub	sp, #16
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
 800a094:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800a096:	f007 fa7b 	bl	8011590 <sys_timeouts_sleeptime>
 800a09a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0a2:	d10b      	bne.n	800a0bc <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800a0a4:	4813      	ldr	r0, [pc, #76]	; (800a0f4 <tcpip_timeouts_mbox_fetch+0x68>)
 800a0a6:	f009 ffcc 	bl	8014042 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	6839      	ldr	r1, [r7, #0]
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f009 ff54 	bl	8013f5c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800a0b4:	480f      	ldr	r0, [pc, #60]	; (800a0f4 <tcpip_timeouts_mbox_fetch+0x68>)
 800a0b6:	f009 ffb5 	bl	8014024 <sys_mutex_lock>
    return;
 800a0ba:	e018      	b.n	800a0ee <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d102      	bne.n	800a0c8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800a0c2:	f007 fa2b 	bl	801151c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a0c6:	e7e6      	b.n	800a096 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800a0c8:	480a      	ldr	r0, [pc, #40]	; (800a0f4 <tcpip_timeouts_mbox_fetch+0x68>)
 800a0ca:	f009 ffba 	bl	8014042 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800a0ce:	68fa      	ldr	r2, [r7, #12]
 800a0d0:	6839      	ldr	r1, [r7, #0]
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f009 ff42 	bl	8013f5c <sys_arch_mbox_fetch>
 800a0d8:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800a0da:	4806      	ldr	r0, [pc, #24]	; (800a0f4 <tcpip_timeouts_mbox_fetch+0x68>)
 800a0dc:	f009 ffa2 	bl	8014024 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0e6:	d102      	bne.n	800a0ee <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800a0e8:	f007 fa18 	bl	801151c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a0ec:	e7d3      	b.n	800a096 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800a0ee:	3710      	adds	r7, #16
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}
 800a0f4:	2000835c 	.word	0x2000835c

0800a0f8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b084      	sub	sp, #16
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800a100:	4810      	ldr	r0, [pc, #64]	; (800a144 <tcpip_thread+0x4c>)
 800a102:	f009 ff8f 	bl	8014024 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800a106:	4b10      	ldr	r3, [pc, #64]	; (800a148 <tcpip_thread+0x50>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d005      	beq.n	800a11a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800a10e:	4b0e      	ldr	r3, [pc, #56]	; (800a148 <tcpip_thread+0x50>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	4a0e      	ldr	r2, [pc, #56]	; (800a14c <tcpip_thread+0x54>)
 800a114:	6812      	ldr	r2, [r2, #0]
 800a116:	4610      	mov	r0, r2
 800a118:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a11a:	f107 030c 	add.w	r3, r7, #12
 800a11e:	4619      	mov	r1, r3
 800a120:	480b      	ldr	r0, [pc, #44]	; (800a150 <tcpip_thread+0x58>)
 800a122:	f7ff ffb3 	bl	800a08c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d106      	bne.n	800a13a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a12c:	4b09      	ldr	r3, [pc, #36]	; (800a154 <tcpip_thread+0x5c>)
 800a12e:	2291      	movs	r2, #145	; 0x91
 800a130:	4909      	ldr	r1, [pc, #36]	; (800a158 <tcpip_thread+0x60>)
 800a132:	480a      	ldr	r0, [pc, #40]	; (800a15c <tcpip_thread+0x64>)
 800a134:	f00e f87e 	bl	8018234 <iprintf>
      continue;
 800a138:	e003      	b.n	800a142 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	4618      	mov	r0, r3
 800a13e:	f000 f80f 	bl	800a160 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a142:	e7ea      	b.n	800a11a <tcpip_thread+0x22>
 800a144:	2000835c 	.word	0x2000835c
 800a148:	20004b74 	.word	0x20004b74
 800a14c:	20004b78 	.word	0x20004b78
 800a150:	20004b7c 	.word	0x20004b7c
 800a154:	08018afc 	.word	0x08018afc
 800a158:	08018b2c 	.word	0x08018b2c
 800a15c:	08018b4c 	.word	0x08018b4c

0800a160 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b082      	sub	sp, #8
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	781b      	ldrb	r3, [r3, #0]
 800a16c:	2b02      	cmp	r3, #2
 800a16e:	d026      	beq.n	800a1be <tcpip_thread_handle_msg+0x5e>
 800a170:	2b02      	cmp	r3, #2
 800a172:	dc2b      	bgt.n	800a1cc <tcpip_thread_handle_msg+0x6c>
 800a174:	2b00      	cmp	r3, #0
 800a176:	d002      	beq.n	800a17e <tcpip_thread_handle_msg+0x1e>
 800a178:	2b01      	cmp	r3, #1
 800a17a:	d015      	beq.n	800a1a8 <tcpip_thread_handle_msg+0x48>
 800a17c:	e026      	b.n	800a1cc <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	68db      	ldr	r3, [r3, #12]
 800a182:	687a      	ldr	r2, [r7, #4]
 800a184:	6850      	ldr	r0, [r2, #4]
 800a186:	687a      	ldr	r2, [r7, #4]
 800a188:	6892      	ldr	r2, [r2, #8]
 800a18a:	4611      	mov	r1, r2
 800a18c:	4798      	blx	r3
 800a18e:	4603      	mov	r3, r0
 800a190:	2b00      	cmp	r3, #0
 800a192:	d004      	beq.n	800a19e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	685b      	ldr	r3, [r3, #4]
 800a198:	4618      	mov	r0, r3
 800a19a:	f001 fcc5 	bl	800bb28 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a19e:	6879      	ldr	r1, [r7, #4]
 800a1a0:	2009      	movs	r0, #9
 800a1a2:	f000 fe1d 	bl	800ade0 <memp_free>
      break;
 800a1a6:	e018      	b.n	800a1da <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	685b      	ldr	r3, [r3, #4]
 800a1ac:	687a      	ldr	r2, [r7, #4]
 800a1ae:	6892      	ldr	r2, [r2, #8]
 800a1b0:	4610      	mov	r0, r2
 800a1b2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800a1b4:	6879      	ldr	r1, [r7, #4]
 800a1b6:	2008      	movs	r0, #8
 800a1b8:	f000 fe12 	bl	800ade0 <memp_free>
      break;
 800a1bc:	e00d      	b.n	800a1da <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	685b      	ldr	r3, [r3, #4]
 800a1c2:	687a      	ldr	r2, [r7, #4]
 800a1c4:	6892      	ldr	r2, [r2, #8]
 800a1c6:	4610      	mov	r0, r2
 800a1c8:	4798      	blx	r3
      break;
 800a1ca:	e006      	b.n	800a1da <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a1cc:	4b05      	ldr	r3, [pc, #20]	; (800a1e4 <tcpip_thread_handle_msg+0x84>)
 800a1ce:	22cf      	movs	r2, #207	; 0xcf
 800a1d0:	4905      	ldr	r1, [pc, #20]	; (800a1e8 <tcpip_thread_handle_msg+0x88>)
 800a1d2:	4806      	ldr	r0, [pc, #24]	; (800a1ec <tcpip_thread_handle_msg+0x8c>)
 800a1d4:	f00e f82e 	bl	8018234 <iprintf>
      break;
 800a1d8:	bf00      	nop
  }
}
 800a1da:	bf00      	nop
 800a1dc:	3708      	adds	r7, #8
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}
 800a1e2:	bf00      	nop
 800a1e4:	08018afc 	.word	0x08018afc
 800a1e8:	08018b2c 	.word	0x08018b2c
 800a1ec:	08018b4c 	.word	0x08018b4c

0800a1f0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b086      	sub	sp, #24
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	60f8      	str	r0, [r7, #12]
 800a1f8:	60b9      	str	r1, [r7, #8]
 800a1fa:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a1fc:	481a      	ldr	r0, [pc, #104]	; (800a268 <tcpip_inpkt+0x78>)
 800a1fe:	f009 fede 	bl	8013fbe <sys_mbox_valid>
 800a202:	4603      	mov	r3, r0
 800a204:	2b00      	cmp	r3, #0
 800a206:	d105      	bne.n	800a214 <tcpip_inpkt+0x24>
 800a208:	4b18      	ldr	r3, [pc, #96]	; (800a26c <tcpip_inpkt+0x7c>)
 800a20a:	22fc      	movs	r2, #252	; 0xfc
 800a20c:	4918      	ldr	r1, [pc, #96]	; (800a270 <tcpip_inpkt+0x80>)
 800a20e:	4819      	ldr	r0, [pc, #100]	; (800a274 <tcpip_inpkt+0x84>)
 800a210:	f00e f810 	bl	8018234 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800a214:	2009      	movs	r0, #9
 800a216:	f000 fd91 	bl	800ad3c <memp_malloc>
 800a21a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d102      	bne.n	800a228 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800a222:	f04f 33ff 	mov.w	r3, #4294967295
 800a226:	e01a      	b.n	800a25e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800a228:	697b      	ldr	r3, [r7, #20]
 800a22a:	2200      	movs	r2, #0
 800a22c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	68fa      	ldr	r2, [r7, #12]
 800a232:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800a234:	697b      	ldr	r3, [r7, #20]
 800a236:	68ba      	ldr	r2, [r7, #8]
 800a238:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800a23a:	697b      	ldr	r3, [r7, #20]
 800a23c:	687a      	ldr	r2, [r7, #4]
 800a23e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a240:	6979      	ldr	r1, [r7, #20]
 800a242:	4809      	ldr	r0, [pc, #36]	; (800a268 <tcpip_inpkt+0x78>)
 800a244:	f009 fe70 	bl	8013f28 <sys_mbox_trypost>
 800a248:	4603      	mov	r3, r0
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d006      	beq.n	800a25c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a24e:	6979      	ldr	r1, [r7, #20]
 800a250:	2009      	movs	r0, #9
 800a252:	f000 fdc5 	bl	800ade0 <memp_free>
    return ERR_MEM;
 800a256:	f04f 33ff 	mov.w	r3, #4294967295
 800a25a:	e000      	b.n	800a25e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800a25c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800a25e:	4618      	mov	r0, r3
 800a260:	3718      	adds	r7, #24
 800a262:	46bd      	mov	sp, r7
 800a264:	bd80      	pop	{r7, pc}
 800a266:	bf00      	nop
 800a268:	20004b7c 	.word	0x20004b7c
 800a26c:	08018afc 	.word	0x08018afc
 800a270:	08018b74 	.word	0x08018b74
 800a274:	08018b4c 	.word	0x08018b4c

0800a278 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b082      	sub	sp, #8
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
 800a280:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a288:	f003 0318 	and.w	r3, r3, #24
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d006      	beq.n	800a29e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800a290:	4a08      	ldr	r2, [pc, #32]	; (800a2b4 <tcpip_input+0x3c>)
 800a292:	6839      	ldr	r1, [r7, #0]
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f7ff ffab 	bl	800a1f0 <tcpip_inpkt>
 800a29a:	4603      	mov	r3, r0
 800a29c:	e005      	b.n	800a2aa <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800a29e:	4a06      	ldr	r2, [pc, #24]	; (800a2b8 <tcpip_input+0x40>)
 800a2a0:	6839      	ldr	r1, [r7, #0]
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f7ff ffa4 	bl	800a1f0 <tcpip_inpkt>
 800a2a8:	4603      	mov	r3, r0
}
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	3708      	adds	r7, #8
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}
 800a2b2:	bf00      	nop
 800a2b4:	08013d49 	.word	0x08013d49
 800a2b8:	08012c5d 	.word	0x08012c5d

0800a2bc <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b084      	sub	sp, #16
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
 800a2c4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a2c6:	4819      	ldr	r0, [pc, #100]	; (800a32c <tcpip_try_callback+0x70>)
 800a2c8:	f009 fe79 	bl	8013fbe <sys_mbox_valid>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d106      	bne.n	800a2e0 <tcpip_try_callback+0x24>
 800a2d2:	4b17      	ldr	r3, [pc, #92]	; (800a330 <tcpip_try_callback+0x74>)
 800a2d4:	f240 125d 	movw	r2, #349	; 0x15d
 800a2d8:	4916      	ldr	r1, [pc, #88]	; (800a334 <tcpip_try_callback+0x78>)
 800a2da:	4817      	ldr	r0, [pc, #92]	; (800a338 <tcpip_try_callback+0x7c>)
 800a2dc:	f00d ffaa 	bl	8018234 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800a2e0:	2008      	movs	r0, #8
 800a2e2:	f000 fd2b 	bl	800ad3c <memp_malloc>
 800a2e6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d102      	bne.n	800a2f4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800a2ee:	f04f 33ff 	mov.w	r3, #4294967295
 800a2f2:	e017      	b.n	800a324 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	2201      	movs	r2, #1
 800a2f8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	687a      	ldr	r2, [r7, #4]
 800a2fe:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	683a      	ldr	r2, [r7, #0]
 800a304:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a306:	68f9      	ldr	r1, [r7, #12]
 800a308:	4808      	ldr	r0, [pc, #32]	; (800a32c <tcpip_try_callback+0x70>)
 800a30a:	f009 fe0d 	bl	8013f28 <sys_mbox_trypost>
 800a30e:	4603      	mov	r3, r0
 800a310:	2b00      	cmp	r3, #0
 800a312:	d006      	beq.n	800a322 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800a314:	68f9      	ldr	r1, [r7, #12]
 800a316:	2008      	movs	r0, #8
 800a318:	f000 fd62 	bl	800ade0 <memp_free>
    return ERR_MEM;
 800a31c:	f04f 33ff 	mov.w	r3, #4294967295
 800a320:	e000      	b.n	800a324 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800a322:	2300      	movs	r3, #0
}
 800a324:	4618      	mov	r0, r3
 800a326:	3710      	adds	r7, #16
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd80      	pop	{r7, pc}
 800a32c:	20004b7c 	.word	0x20004b7c
 800a330:	08018afc 	.word	0x08018afc
 800a334:	08018b74 	.word	0x08018b74
 800a338:	08018b4c 	.word	0x08018b4c

0800a33c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b084      	sub	sp, #16
 800a340:	af02      	add	r7, sp, #8
 800a342:	6078      	str	r0, [r7, #4]
 800a344:	6039      	str	r1, [r7, #0]
  lwip_init();
 800a346:	f000 f871 	bl	800a42c <lwip_init>

  tcpip_init_done = initfunc;
 800a34a:	4a17      	ldr	r2, [pc, #92]	; (800a3a8 <tcpip_init+0x6c>)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800a350:	4a16      	ldr	r2, [pc, #88]	; (800a3ac <tcpip_init+0x70>)
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800a356:	210c      	movs	r1, #12
 800a358:	4815      	ldr	r0, [pc, #84]	; (800a3b0 <tcpip_init+0x74>)
 800a35a:	f009 fdcb 	bl	8013ef4 <sys_mbox_new>
 800a35e:	4603      	mov	r3, r0
 800a360:	2b00      	cmp	r3, #0
 800a362:	d006      	beq.n	800a372 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800a364:	4b13      	ldr	r3, [pc, #76]	; (800a3b4 <tcpip_init+0x78>)
 800a366:	f240 2261 	movw	r2, #609	; 0x261
 800a36a:	4913      	ldr	r1, [pc, #76]	; (800a3b8 <tcpip_init+0x7c>)
 800a36c:	4813      	ldr	r0, [pc, #76]	; (800a3bc <tcpip_init+0x80>)
 800a36e:	f00d ff61 	bl	8018234 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800a372:	4813      	ldr	r0, [pc, #76]	; (800a3c0 <tcpip_init+0x84>)
 800a374:	f009 fe40 	bl	8013ff8 <sys_mutex_new>
 800a378:	4603      	mov	r3, r0
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d006      	beq.n	800a38c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800a37e:	4b0d      	ldr	r3, [pc, #52]	; (800a3b4 <tcpip_init+0x78>)
 800a380:	f240 2265 	movw	r2, #613	; 0x265
 800a384:	490f      	ldr	r1, [pc, #60]	; (800a3c4 <tcpip_init+0x88>)
 800a386:	480d      	ldr	r0, [pc, #52]	; (800a3bc <tcpip_init+0x80>)
 800a388:	f00d ff54 	bl	8018234 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800a38c:	2318      	movs	r3, #24
 800a38e:	9300      	str	r3, [sp, #0]
 800a390:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a394:	2200      	movs	r2, #0
 800a396:	490c      	ldr	r1, [pc, #48]	; (800a3c8 <tcpip_init+0x8c>)
 800a398:	480c      	ldr	r0, [pc, #48]	; (800a3cc <tcpip_init+0x90>)
 800a39a:	f009 fe5f 	bl	801405c <sys_thread_new>
}
 800a39e:	bf00      	nop
 800a3a0:	3708      	adds	r7, #8
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}
 800a3a6:	bf00      	nop
 800a3a8:	20004b74 	.word	0x20004b74
 800a3ac:	20004b78 	.word	0x20004b78
 800a3b0:	20004b7c 	.word	0x20004b7c
 800a3b4:	08018afc 	.word	0x08018afc
 800a3b8:	08018b84 	.word	0x08018b84
 800a3bc:	08018b4c 	.word	0x08018b4c
 800a3c0:	2000835c 	.word	0x2000835c
 800a3c4:	08018ba8 	.word	0x08018ba8
 800a3c8:	0800a0f9 	.word	0x0800a0f9
 800a3cc:	08018bcc 	.word	0x08018bcc

0800a3d0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b083      	sub	sp, #12
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800a3da:	88fb      	ldrh	r3, [r7, #6]
 800a3dc:	021b      	lsls	r3, r3, #8
 800a3de:	b21a      	sxth	r2, r3
 800a3e0:	88fb      	ldrh	r3, [r7, #6]
 800a3e2:	0a1b      	lsrs	r3, r3, #8
 800a3e4:	b29b      	uxth	r3, r3
 800a3e6:	b21b      	sxth	r3, r3
 800a3e8:	4313      	orrs	r3, r2
 800a3ea:	b21b      	sxth	r3, r3
 800a3ec:	b29b      	uxth	r3, r3
}
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	370c      	adds	r7, #12
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f8:	4770      	bx	lr

0800a3fa <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800a3fa:	b480      	push	{r7}
 800a3fc:	b083      	sub	sp, #12
 800a3fe:	af00      	add	r7, sp, #0
 800a400:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	061a      	lsls	r2, r3, #24
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	021b      	lsls	r3, r3, #8
 800a40a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a40e:	431a      	orrs	r2, r3
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	0a1b      	lsrs	r3, r3, #8
 800a414:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a418:	431a      	orrs	r2, r3
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	0e1b      	lsrs	r3, r3, #24
 800a41e:	4313      	orrs	r3, r2
}
 800a420:	4618      	mov	r0, r3
 800a422:	370c      	adds	r7, #12
 800a424:	46bd      	mov	sp, r7
 800a426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42a:	4770      	bx	lr

0800a42c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b082      	sub	sp, #8
 800a430:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800a432:	2300      	movs	r3, #0
 800a434:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800a436:	f009 fdd3 	bl	8013fe0 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800a43a:	f000 f8d5 	bl	800a5e8 <mem_init>
  memp_init();
 800a43e:	f000 fc31 	bl	800aca4 <memp_init>
  pbuf_init();
  netif_init();
 800a442:	f000 fcf7 	bl	800ae34 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800a446:	f007 f8db 	bl	8011600 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800a44a:	f001 fe07 	bl	800c05c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800a44e:	f007 f81d 	bl	801148c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800a452:	bf00      	nop
 800a454:	3708      	adds	r7, #8
 800a456:	46bd      	mov	sp, r7
 800a458:	bd80      	pop	{r7, pc}
	...

0800a45c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800a45c:	b480      	push	{r7}
 800a45e:	b083      	sub	sp, #12
 800a460:	af00      	add	r7, sp, #0
 800a462:	4603      	mov	r3, r0
 800a464:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800a466:	4b05      	ldr	r3, [pc, #20]	; (800a47c <ptr_to_mem+0x20>)
 800a468:	681a      	ldr	r2, [r3, #0]
 800a46a:	88fb      	ldrh	r3, [r7, #6]
 800a46c:	4413      	add	r3, r2
}
 800a46e:	4618      	mov	r0, r3
 800a470:	370c      	adds	r7, #12
 800a472:	46bd      	mov	sp, r7
 800a474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a478:	4770      	bx	lr
 800a47a:	bf00      	nop
 800a47c:	20004b80 	.word	0x20004b80

0800a480 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800a480:	b480      	push	{r7}
 800a482:	b083      	sub	sp, #12
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800a488:	4b05      	ldr	r3, [pc, #20]	; (800a4a0 <mem_to_ptr+0x20>)
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	687a      	ldr	r2, [r7, #4]
 800a48e:	1ad3      	subs	r3, r2, r3
 800a490:	b29b      	uxth	r3, r3
}
 800a492:	4618      	mov	r0, r3
 800a494:	370c      	adds	r7, #12
 800a496:	46bd      	mov	sp, r7
 800a498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49c:	4770      	bx	lr
 800a49e:	bf00      	nop
 800a4a0:	20004b80 	.word	0x20004b80

0800a4a4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800a4a4:	b590      	push	{r4, r7, lr}
 800a4a6:	b085      	sub	sp, #20
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800a4ac:	4b45      	ldr	r3, [pc, #276]	; (800a5c4 <plug_holes+0x120>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	687a      	ldr	r2, [r7, #4]
 800a4b2:	429a      	cmp	r2, r3
 800a4b4:	d206      	bcs.n	800a4c4 <plug_holes+0x20>
 800a4b6:	4b44      	ldr	r3, [pc, #272]	; (800a5c8 <plug_holes+0x124>)
 800a4b8:	f240 12df 	movw	r2, #479	; 0x1df
 800a4bc:	4943      	ldr	r1, [pc, #268]	; (800a5cc <plug_holes+0x128>)
 800a4be:	4844      	ldr	r0, [pc, #272]	; (800a5d0 <plug_holes+0x12c>)
 800a4c0:	f00d feb8 	bl	8018234 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800a4c4:	4b43      	ldr	r3, [pc, #268]	; (800a5d4 <plug_holes+0x130>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	687a      	ldr	r2, [r7, #4]
 800a4ca:	429a      	cmp	r2, r3
 800a4cc:	d306      	bcc.n	800a4dc <plug_holes+0x38>
 800a4ce:	4b3e      	ldr	r3, [pc, #248]	; (800a5c8 <plug_holes+0x124>)
 800a4d0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800a4d4:	4940      	ldr	r1, [pc, #256]	; (800a5d8 <plug_holes+0x134>)
 800a4d6:	483e      	ldr	r0, [pc, #248]	; (800a5d0 <plug_holes+0x12c>)
 800a4d8:	f00d feac 	bl	8018234 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	791b      	ldrb	r3, [r3, #4]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d006      	beq.n	800a4f2 <plug_holes+0x4e>
 800a4e4:	4b38      	ldr	r3, [pc, #224]	; (800a5c8 <plug_holes+0x124>)
 800a4e6:	f240 12e1 	movw	r2, #481	; 0x1e1
 800a4ea:	493c      	ldr	r1, [pc, #240]	; (800a5dc <plug_holes+0x138>)
 800a4ec:	4838      	ldr	r0, [pc, #224]	; (800a5d0 <plug_holes+0x12c>)
 800a4ee:	f00d fea1 	bl	8018234 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	881b      	ldrh	r3, [r3, #0]
 800a4f6:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a4fa:	d906      	bls.n	800a50a <plug_holes+0x66>
 800a4fc:	4b32      	ldr	r3, [pc, #200]	; (800a5c8 <plug_holes+0x124>)
 800a4fe:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800a502:	4937      	ldr	r1, [pc, #220]	; (800a5e0 <plug_holes+0x13c>)
 800a504:	4832      	ldr	r0, [pc, #200]	; (800a5d0 <plug_holes+0x12c>)
 800a506:	f00d fe95 	bl	8018234 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	881b      	ldrh	r3, [r3, #0]
 800a50e:	4618      	mov	r0, r3
 800a510:	f7ff ffa4 	bl	800a45c <ptr_to_mem>
 800a514:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800a516:	687a      	ldr	r2, [r7, #4]
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	429a      	cmp	r2, r3
 800a51c:	d024      	beq.n	800a568 <plug_holes+0xc4>
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	791b      	ldrb	r3, [r3, #4]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d120      	bne.n	800a568 <plug_holes+0xc4>
 800a526:	4b2b      	ldr	r3, [pc, #172]	; (800a5d4 <plug_holes+0x130>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	68fa      	ldr	r2, [r7, #12]
 800a52c:	429a      	cmp	r2, r3
 800a52e:	d01b      	beq.n	800a568 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800a530:	4b2c      	ldr	r3, [pc, #176]	; (800a5e4 <plug_holes+0x140>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	68fa      	ldr	r2, [r7, #12]
 800a536:	429a      	cmp	r2, r3
 800a538:	d102      	bne.n	800a540 <plug_holes+0x9c>
      lfree = mem;
 800a53a:	4a2a      	ldr	r2, [pc, #168]	; (800a5e4 <plug_holes+0x140>)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	881a      	ldrh	r2, [r3, #0]
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	881b      	ldrh	r3, [r3, #0]
 800a54c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a550:	d00a      	beq.n	800a568 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	881b      	ldrh	r3, [r3, #0]
 800a556:	4618      	mov	r0, r3
 800a558:	f7ff ff80 	bl	800a45c <ptr_to_mem>
 800a55c:	4604      	mov	r4, r0
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f7ff ff8e 	bl	800a480 <mem_to_ptr>
 800a564:	4603      	mov	r3, r0
 800a566:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	885b      	ldrh	r3, [r3, #2]
 800a56c:	4618      	mov	r0, r3
 800a56e:	f7ff ff75 	bl	800a45c <ptr_to_mem>
 800a572:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800a574:	68ba      	ldr	r2, [r7, #8]
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	429a      	cmp	r2, r3
 800a57a:	d01f      	beq.n	800a5bc <plug_holes+0x118>
 800a57c:	68bb      	ldr	r3, [r7, #8]
 800a57e:	791b      	ldrb	r3, [r3, #4]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d11b      	bne.n	800a5bc <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800a584:	4b17      	ldr	r3, [pc, #92]	; (800a5e4 <plug_holes+0x140>)
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	687a      	ldr	r2, [r7, #4]
 800a58a:	429a      	cmp	r2, r3
 800a58c:	d102      	bne.n	800a594 <plug_holes+0xf0>
      lfree = pmem;
 800a58e:	4a15      	ldr	r2, [pc, #84]	; (800a5e4 <plug_holes+0x140>)
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	881a      	ldrh	r2, [r3, #0]
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	881b      	ldrh	r3, [r3, #0]
 800a5a0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a5a4:	d00a      	beq.n	800a5bc <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	881b      	ldrh	r3, [r3, #0]
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	f7ff ff56 	bl	800a45c <ptr_to_mem>
 800a5b0:	4604      	mov	r4, r0
 800a5b2:	68b8      	ldr	r0, [r7, #8]
 800a5b4:	f7ff ff64 	bl	800a480 <mem_to_ptr>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800a5bc:	bf00      	nop
 800a5be:	3714      	adds	r7, #20
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	bd90      	pop	{r4, r7, pc}
 800a5c4:	20004b80 	.word	0x20004b80
 800a5c8:	08018bdc 	.word	0x08018bdc
 800a5cc:	08018c0c 	.word	0x08018c0c
 800a5d0:	08018c24 	.word	0x08018c24
 800a5d4:	20004b84 	.word	0x20004b84
 800a5d8:	08018c4c 	.word	0x08018c4c
 800a5dc:	08018c68 	.word	0x08018c68
 800a5e0:	08018c84 	.word	0x08018c84
 800a5e4:	20004b8c 	.word	0x20004b8c

0800a5e8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b082      	sub	sp, #8
 800a5ec:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a5ee:	4b1f      	ldr	r3, [pc, #124]	; (800a66c <mem_init+0x84>)
 800a5f0:	3303      	adds	r3, #3
 800a5f2:	f023 0303 	bic.w	r3, r3, #3
 800a5f6:	461a      	mov	r2, r3
 800a5f8:	4b1d      	ldr	r3, [pc, #116]	; (800a670 <mem_init+0x88>)
 800a5fa:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800a5fc:	4b1c      	ldr	r3, [pc, #112]	; (800a670 <mem_init+0x88>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800a608:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2200      	movs	r2, #0
 800a60e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2200      	movs	r2, #0
 800a614:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800a616:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 800a61a:	f7ff ff1f 	bl	800a45c <ptr_to_mem>
 800a61e:	4603      	mov	r3, r0
 800a620:	4a14      	ldr	r2, [pc, #80]	; (800a674 <mem_init+0x8c>)
 800a622:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800a624:	4b13      	ldr	r3, [pc, #76]	; (800a674 <mem_init+0x8c>)
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	2201      	movs	r2, #1
 800a62a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800a62c:	4b11      	ldr	r3, [pc, #68]	; (800a674 <mem_init+0x8c>)
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800a634:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800a636:	4b0f      	ldr	r3, [pc, #60]	; (800a674 <mem_init+0x8c>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800a63e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800a640:	4b0b      	ldr	r3, [pc, #44]	; (800a670 <mem_init+0x88>)
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	4a0c      	ldr	r2, [pc, #48]	; (800a678 <mem_init+0x90>)
 800a646:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800a648:	480c      	ldr	r0, [pc, #48]	; (800a67c <mem_init+0x94>)
 800a64a:	f009 fcd5 	bl	8013ff8 <sys_mutex_new>
 800a64e:	4603      	mov	r3, r0
 800a650:	2b00      	cmp	r3, #0
 800a652:	d006      	beq.n	800a662 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800a654:	4b0a      	ldr	r3, [pc, #40]	; (800a680 <mem_init+0x98>)
 800a656:	f240 221f 	movw	r2, #543	; 0x21f
 800a65a:	490a      	ldr	r1, [pc, #40]	; (800a684 <mem_init+0x9c>)
 800a65c:	480a      	ldr	r0, [pc, #40]	; (800a688 <mem_init+0xa0>)
 800a65e:	f00d fde9 	bl	8018234 <iprintf>
  }
}
 800a662:	bf00      	nop
 800a664:	3708      	adds	r7, #8
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}
 800a66a:	bf00      	nop
 800a66c:	20008378 	.word	0x20008378
 800a670:	20004b80 	.word	0x20004b80
 800a674:	20004b84 	.word	0x20004b84
 800a678:	20004b8c 	.word	0x20004b8c
 800a67c:	20004b88 	.word	0x20004b88
 800a680:	08018bdc 	.word	0x08018bdc
 800a684:	08018cb0 	.word	0x08018cb0
 800a688:	08018c24 	.word	0x08018c24

0800a68c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b086      	sub	sp, #24
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f7ff fef3 	bl	800a480 <mem_to_ptr>
 800a69a:	4603      	mov	r3, r0
 800a69c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	881b      	ldrh	r3, [r3, #0]
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	f7ff feda 	bl	800a45c <ptr_to_mem>
 800a6a8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	885b      	ldrh	r3, [r3, #2]
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	f7ff fed4 	bl	800a45c <ptr_to_mem>
 800a6b4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	881b      	ldrh	r3, [r3, #0]
 800a6ba:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a6be:	d818      	bhi.n	800a6f2 <mem_link_valid+0x66>
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	885b      	ldrh	r3, [r3, #2]
 800a6c4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a6c8:	d813      	bhi.n	800a6f2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a6ce:	8afa      	ldrh	r2, [r7, #22]
 800a6d0:	429a      	cmp	r2, r3
 800a6d2:	d004      	beq.n	800a6de <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	881b      	ldrh	r3, [r3, #0]
 800a6d8:	8afa      	ldrh	r2, [r7, #22]
 800a6da:	429a      	cmp	r2, r3
 800a6dc:	d109      	bne.n	800a6f2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a6de:	4b08      	ldr	r3, [pc, #32]	; (800a700 <mem_link_valid+0x74>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a6e2:	693a      	ldr	r2, [r7, #16]
 800a6e4:	429a      	cmp	r2, r3
 800a6e6:	d006      	beq.n	800a6f6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a6e8:	693b      	ldr	r3, [r7, #16]
 800a6ea:	885b      	ldrh	r3, [r3, #2]
 800a6ec:	8afa      	ldrh	r2, [r7, #22]
 800a6ee:	429a      	cmp	r2, r3
 800a6f0:	d001      	beq.n	800a6f6 <mem_link_valid+0x6a>
    return 0;
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	e000      	b.n	800a6f8 <mem_link_valid+0x6c>
  }
  return 1;
 800a6f6:	2301      	movs	r3, #1
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	3718      	adds	r7, #24
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bd80      	pop	{r7, pc}
 800a700:	20004b84 	.word	0x20004b84

0800a704 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b088      	sub	sp, #32
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d070      	beq.n	800a7f4 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	f003 0303 	and.w	r3, r3, #3
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d00d      	beq.n	800a738 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800a71c:	4b37      	ldr	r3, [pc, #220]	; (800a7fc <mem_free+0xf8>)
 800a71e:	f240 2273 	movw	r2, #627	; 0x273
 800a722:	4937      	ldr	r1, [pc, #220]	; (800a800 <mem_free+0xfc>)
 800a724:	4837      	ldr	r0, [pc, #220]	; (800a804 <mem_free+0x100>)
 800a726:	f00d fd85 	bl	8018234 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a72a:	f009 fcb7 	bl	801409c <sys_arch_protect>
 800a72e:	60f8      	str	r0, [r7, #12]
 800a730:	68f8      	ldr	r0, [r7, #12]
 800a732:	f009 fcc1 	bl	80140b8 <sys_arch_unprotect>
    return;
 800a736:	e05e      	b.n	800a7f6 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	3b08      	subs	r3, #8
 800a73c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800a73e:	4b32      	ldr	r3, [pc, #200]	; (800a808 <mem_free+0x104>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	69fa      	ldr	r2, [r7, #28]
 800a744:	429a      	cmp	r2, r3
 800a746:	d306      	bcc.n	800a756 <mem_free+0x52>
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f103 020c 	add.w	r2, r3, #12
 800a74e:	4b2f      	ldr	r3, [pc, #188]	; (800a80c <mem_free+0x108>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	429a      	cmp	r2, r3
 800a754:	d90d      	bls.n	800a772 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800a756:	4b29      	ldr	r3, [pc, #164]	; (800a7fc <mem_free+0xf8>)
 800a758:	f240 227f 	movw	r2, #639	; 0x27f
 800a75c:	492c      	ldr	r1, [pc, #176]	; (800a810 <mem_free+0x10c>)
 800a75e:	4829      	ldr	r0, [pc, #164]	; (800a804 <mem_free+0x100>)
 800a760:	f00d fd68 	bl	8018234 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a764:	f009 fc9a 	bl	801409c <sys_arch_protect>
 800a768:	6138      	str	r0, [r7, #16]
 800a76a:	6938      	ldr	r0, [r7, #16]
 800a76c:	f009 fca4 	bl	80140b8 <sys_arch_unprotect>
    return;
 800a770:	e041      	b.n	800a7f6 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a772:	4828      	ldr	r0, [pc, #160]	; (800a814 <mem_free+0x110>)
 800a774:	f009 fc56 	bl	8014024 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800a778:	69fb      	ldr	r3, [r7, #28]
 800a77a:	791b      	ldrb	r3, [r3, #4]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d110      	bne.n	800a7a2 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800a780:	4b1e      	ldr	r3, [pc, #120]	; (800a7fc <mem_free+0xf8>)
 800a782:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800a786:	4924      	ldr	r1, [pc, #144]	; (800a818 <mem_free+0x114>)
 800a788:	481e      	ldr	r0, [pc, #120]	; (800a804 <mem_free+0x100>)
 800a78a:	f00d fd53 	bl	8018234 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a78e:	4821      	ldr	r0, [pc, #132]	; (800a814 <mem_free+0x110>)
 800a790:	f009 fc57 	bl	8014042 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a794:	f009 fc82 	bl	801409c <sys_arch_protect>
 800a798:	6178      	str	r0, [r7, #20]
 800a79a:	6978      	ldr	r0, [r7, #20]
 800a79c:	f009 fc8c 	bl	80140b8 <sys_arch_unprotect>
    return;
 800a7a0:	e029      	b.n	800a7f6 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800a7a2:	69f8      	ldr	r0, [r7, #28]
 800a7a4:	f7ff ff72 	bl	800a68c <mem_link_valid>
 800a7a8:	4603      	mov	r3, r0
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d110      	bne.n	800a7d0 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800a7ae:	4b13      	ldr	r3, [pc, #76]	; (800a7fc <mem_free+0xf8>)
 800a7b0:	f240 2295 	movw	r2, #661	; 0x295
 800a7b4:	4919      	ldr	r1, [pc, #100]	; (800a81c <mem_free+0x118>)
 800a7b6:	4813      	ldr	r0, [pc, #76]	; (800a804 <mem_free+0x100>)
 800a7b8:	f00d fd3c 	bl	8018234 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a7bc:	4815      	ldr	r0, [pc, #84]	; (800a814 <mem_free+0x110>)
 800a7be:	f009 fc40 	bl	8014042 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a7c2:	f009 fc6b 	bl	801409c <sys_arch_protect>
 800a7c6:	61b8      	str	r0, [r7, #24]
 800a7c8:	69b8      	ldr	r0, [r7, #24]
 800a7ca:	f009 fc75 	bl	80140b8 <sys_arch_unprotect>
    return;
 800a7ce:	e012      	b.n	800a7f6 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800a7d0:	69fb      	ldr	r3, [r7, #28]
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800a7d6:	4b12      	ldr	r3, [pc, #72]	; (800a820 <mem_free+0x11c>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	69fa      	ldr	r2, [r7, #28]
 800a7dc:	429a      	cmp	r2, r3
 800a7de:	d202      	bcs.n	800a7e6 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800a7e0:	4a0f      	ldr	r2, [pc, #60]	; (800a820 <mem_free+0x11c>)
 800a7e2:	69fb      	ldr	r3, [r7, #28]
 800a7e4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800a7e6:	69f8      	ldr	r0, [r7, #28]
 800a7e8:	f7ff fe5c 	bl	800a4a4 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a7ec:	4809      	ldr	r0, [pc, #36]	; (800a814 <mem_free+0x110>)
 800a7ee:	f009 fc28 	bl	8014042 <sys_mutex_unlock>
 800a7f2:	e000      	b.n	800a7f6 <mem_free+0xf2>
    return;
 800a7f4:	bf00      	nop
}
 800a7f6:	3720      	adds	r7, #32
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd80      	pop	{r7, pc}
 800a7fc:	08018bdc 	.word	0x08018bdc
 800a800:	08018ccc 	.word	0x08018ccc
 800a804:	08018c24 	.word	0x08018c24
 800a808:	20004b80 	.word	0x20004b80
 800a80c:	20004b84 	.word	0x20004b84
 800a810:	08018cf0 	.word	0x08018cf0
 800a814:	20004b88 	.word	0x20004b88
 800a818:	08018d0c 	.word	0x08018d0c
 800a81c:	08018d34 	.word	0x08018d34
 800a820:	20004b8c 	.word	0x20004b8c

0800a824 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b088      	sub	sp, #32
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
 800a82c:	460b      	mov	r3, r1
 800a82e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800a830:	887b      	ldrh	r3, [r7, #2]
 800a832:	3303      	adds	r3, #3
 800a834:	b29b      	uxth	r3, r3
 800a836:	f023 0303 	bic.w	r3, r3, #3
 800a83a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800a83c:	8bfb      	ldrh	r3, [r7, #30]
 800a83e:	2b0b      	cmp	r3, #11
 800a840:	d801      	bhi.n	800a846 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800a842:	230c      	movs	r3, #12
 800a844:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800a846:	8bfb      	ldrh	r3, [r7, #30]
 800a848:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a84c:	d803      	bhi.n	800a856 <mem_trim+0x32>
 800a84e:	8bfa      	ldrh	r2, [r7, #30]
 800a850:	887b      	ldrh	r3, [r7, #2]
 800a852:	429a      	cmp	r2, r3
 800a854:	d201      	bcs.n	800a85a <mem_trim+0x36>
    return NULL;
 800a856:	2300      	movs	r3, #0
 800a858:	e0d8      	b.n	800aa0c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a85a:	4b6e      	ldr	r3, [pc, #440]	; (800aa14 <mem_trim+0x1f0>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	687a      	ldr	r2, [r7, #4]
 800a860:	429a      	cmp	r2, r3
 800a862:	d304      	bcc.n	800a86e <mem_trim+0x4a>
 800a864:	4b6c      	ldr	r3, [pc, #432]	; (800aa18 <mem_trim+0x1f4>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	687a      	ldr	r2, [r7, #4]
 800a86a:	429a      	cmp	r2, r3
 800a86c:	d306      	bcc.n	800a87c <mem_trim+0x58>
 800a86e:	4b6b      	ldr	r3, [pc, #428]	; (800aa1c <mem_trim+0x1f8>)
 800a870:	f240 22d1 	movw	r2, #721	; 0x2d1
 800a874:	496a      	ldr	r1, [pc, #424]	; (800aa20 <mem_trim+0x1fc>)
 800a876:	486b      	ldr	r0, [pc, #428]	; (800aa24 <mem_trim+0x200>)
 800a878:	f00d fcdc 	bl	8018234 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a87c:	4b65      	ldr	r3, [pc, #404]	; (800aa14 <mem_trim+0x1f0>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	687a      	ldr	r2, [r7, #4]
 800a882:	429a      	cmp	r2, r3
 800a884:	d304      	bcc.n	800a890 <mem_trim+0x6c>
 800a886:	4b64      	ldr	r3, [pc, #400]	; (800aa18 <mem_trim+0x1f4>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	687a      	ldr	r2, [r7, #4]
 800a88c:	429a      	cmp	r2, r3
 800a88e:	d307      	bcc.n	800a8a0 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a890:	f009 fc04 	bl	801409c <sys_arch_protect>
 800a894:	60b8      	str	r0, [r7, #8]
 800a896:	68b8      	ldr	r0, [r7, #8]
 800a898:	f009 fc0e 	bl	80140b8 <sys_arch_unprotect>
    return rmem;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	e0b5      	b.n	800aa0c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	3b08      	subs	r3, #8
 800a8a4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800a8a6:	69b8      	ldr	r0, [r7, #24]
 800a8a8:	f7ff fdea 	bl	800a480 <mem_to_ptr>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800a8b0:	69bb      	ldr	r3, [r7, #24]
 800a8b2:	881a      	ldrh	r2, [r3, #0]
 800a8b4:	8afb      	ldrh	r3, [r7, #22]
 800a8b6:	1ad3      	subs	r3, r2, r3
 800a8b8:	b29b      	uxth	r3, r3
 800a8ba:	3b08      	subs	r3, #8
 800a8bc:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800a8be:	8bfa      	ldrh	r2, [r7, #30]
 800a8c0:	8abb      	ldrh	r3, [r7, #20]
 800a8c2:	429a      	cmp	r2, r3
 800a8c4:	d906      	bls.n	800a8d4 <mem_trim+0xb0>
 800a8c6:	4b55      	ldr	r3, [pc, #340]	; (800aa1c <mem_trim+0x1f8>)
 800a8c8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800a8cc:	4956      	ldr	r1, [pc, #344]	; (800aa28 <mem_trim+0x204>)
 800a8ce:	4855      	ldr	r0, [pc, #340]	; (800aa24 <mem_trim+0x200>)
 800a8d0:	f00d fcb0 	bl	8018234 <iprintf>
  if (newsize > size) {
 800a8d4:	8bfa      	ldrh	r2, [r7, #30]
 800a8d6:	8abb      	ldrh	r3, [r7, #20]
 800a8d8:	429a      	cmp	r2, r3
 800a8da:	d901      	bls.n	800a8e0 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800a8dc:	2300      	movs	r3, #0
 800a8de:	e095      	b.n	800aa0c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800a8e0:	8bfa      	ldrh	r2, [r7, #30]
 800a8e2:	8abb      	ldrh	r3, [r7, #20]
 800a8e4:	429a      	cmp	r2, r3
 800a8e6:	d101      	bne.n	800a8ec <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	e08f      	b.n	800aa0c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a8ec:	484f      	ldr	r0, [pc, #316]	; (800aa2c <mem_trim+0x208>)
 800a8ee:	f009 fb99 	bl	8014024 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800a8f2:	69bb      	ldr	r3, [r7, #24]
 800a8f4:	881b      	ldrh	r3, [r3, #0]
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f7ff fdb0 	bl	800a45c <ptr_to_mem>
 800a8fc:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800a8fe:	693b      	ldr	r3, [r7, #16]
 800a900:	791b      	ldrb	r3, [r3, #4]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d13f      	bne.n	800a986 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a906:	69bb      	ldr	r3, [r7, #24]
 800a908:	881b      	ldrh	r3, [r3, #0]
 800a90a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a90e:	d106      	bne.n	800a91e <mem_trim+0xfa>
 800a910:	4b42      	ldr	r3, [pc, #264]	; (800aa1c <mem_trim+0x1f8>)
 800a912:	f240 22f5 	movw	r2, #757	; 0x2f5
 800a916:	4946      	ldr	r1, [pc, #280]	; (800aa30 <mem_trim+0x20c>)
 800a918:	4842      	ldr	r0, [pc, #264]	; (800aa24 <mem_trim+0x200>)
 800a91a:	f00d fc8b 	bl	8018234 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800a91e:	693b      	ldr	r3, [r7, #16]
 800a920:	881b      	ldrh	r3, [r3, #0]
 800a922:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a924:	8afa      	ldrh	r2, [r7, #22]
 800a926:	8bfb      	ldrh	r3, [r7, #30]
 800a928:	4413      	add	r3, r2
 800a92a:	b29b      	uxth	r3, r3
 800a92c:	3308      	adds	r3, #8
 800a92e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800a930:	4b40      	ldr	r3, [pc, #256]	; (800aa34 <mem_trim+0x210>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	693a      	ldr	r2, [r7, #16]
 800a936:	429a      	cmp	r2, r3
 800a938:	d106      	bne.n	800a948 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800a93a:	89fb      	ldrh	r3, [r7, #14]
 800a93c:	4618      	mov	r0, r3
 800a93e:	f7ff fd8d 	bl	800a45c <ptr_to_mem>
 800a942:	4603      	mov	r3, r0
 800a944:	4a3b      	ldr	r2, [pc, #236]	; (800aa34 <mem_trim+0x210>)
 800a946:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800a948:	89fb      	ldrh	r3, [r7, #14]
 800a94a:	4618      	mov	r0, r3
 800a94c:	f7ff fd86 	bl	800a45c <ptr_to_mem>
 800a950:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800a952:	693b      	ldr	r3, [r7, #16]
 800a954:	2200      	movs	r2, #0
 800a956:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800a958:	693b      	ldr	r3, [r7, #16]
 800a95a:	89ba      	ldrh	r2, [r7, #12]
 800a95c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800a95e:	693b      	ldr	r3, [r7, #16]
 800a960:	8afa      	ldrh	r2, [r7, #22]
 800a962:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800a964:	69bb      	ldr	r3, [r7, #24]
 800a966:	89fa      	ldrh	r2, [r7, #14]
 800a968:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a96a:	693b      	ldr	r3, [r7, #16]
 800a96c:	881b      	ldrh	r3, [r3, #0]
 800a96e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a972:	d047      	beq.n	800aa04 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a974:	693b      	ldr	r3, [r7, #16]
 800a976:	881b      	ldrh	r3, [r3, #0]
 800a978:	4618      	mov	r0, r3
 800a97a:	f7ff fd6f 	bl	800a45c <ptr_to_mem>
 800a97e:	4602      	mov	r2, r0
 800a980:	89fb      	ldrh	r3, [r7, #14]
 800a982:	8053      	strh	r3, [r2, #2]
 800a984:	e03e      	b.n	800aa04 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800a986:	8bfb      	ldrh	r3, [r7, #30]
 800a988:	f103 0214 	add.w	r2, r3, #20
 800a98c:	8abb      	ldrh	r3, [r7, #20]
 800a98e:	429a      	cmp	r2, r3
 800a990:	d838      	bhi.n	800aa04 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a992:	8afa      	ldrh	r2, [r7, #22]
 800a994:	8bfb      	ldrh	r3, [r7, #30]
 800a996:	4413      	add	r3, r2
 800a998:	b29b      	uxth	r3, r3
 800a99a:	3308      	adds	r3, #8
 800a99c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a99e:	69bb      	ldr	r3, [r7, #24]
 800a9a0:	881b      	ldrh	r3, [r3, #0]
 800a9a2:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a9a6:	d106      	bne.n	800a9b6 <mem_trim+0x192>
 800a9a8:	4b1c      	ldr	r3, [pc, #112]	; (800aa1c <mem_trim+0x1f8>)
 800a9aa:	f240 3216 	movw	r2, #790	; 0x316
 800a9ae:	4920      	ldr	r1, [pc, #128]	; (800aa30 <mem_trim+0x20c>)
 800a9b0:	481c      	ldr	r0, [pc, #112]	; (800aa24 <mem_trim+0x200>)
 800a9b2:	f00d fc3f 	bl	8018234 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800a9b6:	89fb      	ldrh	r3, [r7, #14]
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	f7ff fd4f 	bl	800a45c <ptr_to_mem>
 800a9be:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800a9c0:	4b1c      	ldr	r3, [pc, #112]	; (800aa34 <mem_trim+0x210>)
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	693a      	ldr	r2, [r7, #16]
 800a9c6:	429a      	cmp	r2, r3
 800a9c8:	d202      	bcs.n	800a9d0 <mem_trim+0x1ac>
      lfree = mem2;
 800a9ca:	4a1a      	ldr	r2, [pc, #104]	; (800aa34 <mem_trim+0x210>)
 800a9cc:	693b      	ldr	r3, [r7, #16]
 800a9ce:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800a9d0:	693b      	ldr	r3, [r7, #16]
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800a9d6:	69bb      	ldr	r3, [r7, #24]
 800a9d8:	881a      	ldrh	r2, [r3, #0]
 800a9da:	693b      	ldr	r3, [r7, #16]
 800a9dc:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800a9de:	693b      	ldr	r3, [r7, #16]
 800a9e0:	8afa      	ldrh	r2, [r7, #22]
 800a9e2:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800a9e4:	69bb      	ldr	r3, [r7, #24]
 800a9e6:	89fa      	ldrh	r2, [r7, #14]
 800a9e8:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a9ea:	693b      	ldr	r3, [r7, #16]
 800a9ec:	881b      	ldrh	r3, [r3, #0]
 800a9ee:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a9f2:	d007      	beq.n	800aa04 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a9f4:	693b      	ldr	r3, [r7, #16]
 800a9f6:	881b      	ldrh	r3, [r3, #0]
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	f7ff fd2f 	bl	800a45c <ptr_to_mem>
 800a9fe:	4602      	mov	r2, r0
 800aa00:	89fb      	ldrh	r3, [r7, #14]
 800aa02:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800aa04:	4809      	ldr	r0, [pc, #36]	; (800aa2c <mem_trim+0x208>)
 800aa06:	f009 fb1c 	bl	8014042 <sys_mutex_unlock>
  return rmem;
 800aa0a:	687b      	ldr	r3, [r7, #4]
}
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	3720      	adds	r7, #32
 800aa10:	46bd      	mov	sp, r7
 800aa12:	bd80      	pop	{r7, pc}
 800aa14:	20004b80 	.word	0x20004b80
 800aa18:	20004b84 	.word	0x20004b84
 800aa1c:	08018bdc 	.word	0x08018bdc
 800aa20:	08018d68 	.word	0x08018d68
 800aa24:	08018c24 	.word	0x08018c24
 800aa28:	08018d80 	.word	0x08018d80
 800aa2c:	20004b88 	.word	0x20004b88
 800aa30:	08018da0 	.word	0x08018da0
 800aa34:	20004b8c 	.word	0x20004b8c

0800aa38 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b088      	sub	sp, #32
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	4603      	mov	r3, r0
 800aa40:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800aa42:	88fb      	ldrh	r3, [r7, #6]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d101      	bne.n	800aa4c <mem_malloc+0x14>
    return NULL;
 800aa48:	2300      	movs	r3, #0
 800aa4a:	e0e2      	b.n	800ac12 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800aa4c:	88fb      	ldrh	r3, [r7, #6]
 800aa4e:	3303      	adds	r3, #3
 800aa50:	b29b      	uxth	r3, r3
 800aa52:	f023 0303 	bic.w	r3, r3, #3
 800aa56:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800aa58:	8bbb      	ldrh	r3, [r7, #28]
 800aa5a:	2b0b      	cmp	r3, #11
 800aa5c:	d801      	bhi.n	800aa62 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800aa5e:	230c      	movs	r3, #12
 800aa60:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800aa62:	8bbb      	ldrh	r3, [r7, #28]
 800aa64:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800aa68:	d803      	bhi.n	800aa72 <mem_malloc+0x3a>
 800aa6a:	8bba      	ldrh	r2, [r7, #28]
 800aa6c:	88fb      	ldrh	r3, [r7, #6]
 800aa6e:	429a      	cmp	r2, r3
 800aa70:	d201      	bcs.n	800aa76 <mem_malloc+0x3e>
    return NULL;
 800aa72:	2300      	movs	r3, #0
 800aa74:	e0cd      	b.n	800ac12 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800aa76:	4869      	ldr	r0, [pc, #420]	; (800ac1c <mem_malloc+0x1e4>)
 800aa78:	f009 fad4 	bl	8014024 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800aa7c:	4b68      	ldr	r3, [pc, #416]	; (800ac20 <mem_malloc+0x1e8>)
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	4618      	mov	r0, r3
 800aa82:	f7ff fcfd 	bl	800a480 <mem_to_ptr>
 800aa86:	4603      	mov	r3, r0
 800aa88:	83fb      	strh	r3, [r7, #30]
 800aa8a:	e0b7      	b.n	800abfc <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800aa8c:	8bfb      	ldrh	r3, [r7, #30]
 800aa8e:	4618      	mov	r0, r3
 800aa90:	f7ff fce4 	bl	800a45c <ptr_to_mem>
 800aa94:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	791b      	ldrb	r3, [r3, #4]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	f040 80a7 	bne.w	800abee <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800aaa0:	697b      	ldr	r3, [r7, #20]
 800aaa2:	881b      	ldrh	r3, [r3, #0]
 800aaa4:	461a      	mov	r2, r3
 800aaa6:	8bfb      	ldrh	r3, [r7, #30]
 800aaa8:	1ad3      	subs	r3, r2, r3
 800aaaa:	f1a3 0208 	sub.w	r2, r3, #8
 800aaae:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800aab0:	429a      	cmp	r2, r3
 800aab2:	f0c0 809c 	bcc.w	800abee <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800aab6:	697b      	ldr	r3, [r7, #20]
 800aab8:	881b      	ldrh	r3, [r3, #0]
 800aaba:	461a      	mov	r2, r3
 800aabc:	8bfb      	ldrh	r3, [r7, #30]
 800aabe:	1ad3      	subs	r3, r2, r3
 800aac0:	f1a3 0208 	sub.w	r2, r3, #8
 800aac4:	8bbb      	ldrh	r3, [r7, #28]
 800aac6:	3314      	adds	r3, #20
 800aac8:	429a      	cmp	r2, r3
 800aaca:	d333      	bcc.n	800ab34 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800aacc:	8bfa      	ldrh	r2, [r7, #30]
 800aace:	8bbb      	ldrh	r3, [r7, #28]
 800aad0:	4413      	add	r3, r2
 800aad2:	b29b      	uxth	r3, r3
 800aad4:	3308      	adds	r3, #8
 800aad6:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800aad8:	8a7b      	ldrh	r3, [r7, #18]
 800aada:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800aade:	d106      	bne.n	800aaee <mem_malloc+0xb6>
 800aae0:	4b50      	ldr	r3, [pc, #320]	; (800ac24 <mem_malloc+0x1ec>)
 800aae2:	f240 3287 	movw	r2, #903	; 0x387
 800aae6:	4950      	ldr	r1, [pc, #320]	; (800ac28 <mem_malloc+0x1f0>)
 800aae8:	4850      	ldr	r0, [pc, #320]	; (800ac2c <mem_malloc+0x1f4>)
 800aaea:	f00d fba3 	bl	8018234 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800aaee:	8a7b      	ldrh	r3, [r7, #18]
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	f7ff fcb3 	bl	800a45c <ptr_to_mem>
 800aaf6:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	2200      	movs	r2, #0
 800aafc:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800aafe:	697b      	ldr	r3, [r7, #20]
 800ab00:	881a      	ldrh	r2, [r3, #0]
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	8bfa      	ldrh	r2, [r7, #30]
 800ab0a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800ab0c:	697b      	ldr	r3, [r7, #20]
 800ab0e:	8a7a      	ldrh	r2, [r7, #18]
 800ab10:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800ab12:	697b      	ldr	r3, [r7, #20]
 800ab14:	2201      	movs	r2, #1
 800ab16:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	881b      	ldrh	r3, [r3, #0]
 800ab1c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800ab20:	d00b      	beq.n	800ab3a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	881b      	ldrh	r3, [r3, #0]
 800ab26:	4618      	mov	r0, r3
 800ab28:	f7ff fc98 	bl	800a45c <ptr_to_mem>
 800ab2c:	4602      	mov	r2, r0
 800ab2e:	8a7b      	ldrh	r3, [r7, #18]
 800ab30:	8053      	strh	r3, [r2, #2]
 800ab32:	e002      	b.n	800ab3a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800ab34:	697b      	ldr	r3, [r7, #20]
 800ab36:	2201      	movs	r2, #1
 800ab38:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800ab3a:	4b39      	ldr	r3, [pc, #228]	; (800ac20 <mem_malloc+0x1e8>)
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	697a      	ldr	r2, [r7, #20]
 800ab40:	429a      	cmp	r2, r3
 800ab42:	d127      	bne.n	800ab94 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800ab44:	4b36      	ldr	r3, [pc, #216]	; (800ac20 <mem_malloc+0x1e8>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800ab4a:	e005      	b.n	800ab58 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800ab4c:	69bb      	ldr	r3, [r7, #24]
 800ab4e:	881b      	ldrh	r3, [r3, #0]
 800ab50:	4618      	mov	r0, r3
 800ab52:	f7ff fc83 	bl	800a45c <ptr_to_mem>
 800ab56:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800ab58:	69bb      	ldr	r3, [r7, #24]
 800ab5a:	791b      	ldrb	r3, [r3, #4]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d004      	beq.n	800ab6a <mem_malloc+0x132>
 800ab60:	4b33      	ldr	r3, [pc, #204]	; (800ac30 <mem_malloc+0x1f8>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	69ba      	ldr	r2, [r7, #24]
 800ab66:	429a      	cmp	r2, r3
 800ab68:	d1f0      	bne.n	800ab4c <mem_malloc+0x114>
          }
          lfree = cur;
 800ab6a:	4a2d      	ldr	r2, [pc, #180]	; (800ac20 <mem_malloc+0x1e8>)
 800ab6c:	69bb      	ldr	r3, [r7, #24]
 800ab6e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800ab70:	4b2b      	ldr	r3, [pc, #172]	; (800ac20 <mem_malloc+0x1e8>)
 800ab72:	681a      	ldr	r2, [r3, #0]
 800ab74:	4b2e      	ldr	r3, [pc, #184]	; (800ac30 <mem_malloc+0x1f8>)
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	429a      	cmp	r2, r3
 800ab7a:	d00b      	beq.n	800ab94 <mem_malloc+0x15c>
 800ab7c:	4b28      	ldr	r3, [pc, #160]	; (800ac20 <mem_malloc+0x1e8>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	791b      	ldrb	r3, [r3, #4]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d006      	beq.n	800ab94 <mem_malloc+0x15c>
 800ab86:	4b27      	ldr	r3, [pc, #156]	; (800ac24 <mem_malloc+0x1ec>)
 800ab88:	f240 32b5 	movw	r2, #949	; 0x3b5
 800ab8c:	4929      	ldr	r1, [pc, #164]	; (800ac34 <mem_malloc+0x1fc>)
 800ab8e:	4827      	ldr	r0, [pc, #156]	; (800ac2c <mem_malloc+0x1f4>)
 800ab90:	f00d fb50 	bl	8018234 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800ab94:	4821      	ldr	r0, [pc, #132]	; (800ac1c <mem_malloc+0x1e4>)
 800ab96:	f009 fa54 	bl	8014042 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800ab9a:	8bba      	ldrh	r2, [r7, #28]
 800ab9c:	697b      	ldr	r3, [r7, #20]
 800ab9e:	4413      	add	r3, r2
 800aba0:	3308      	adds	r3, #8
 800aba2:	4a23      	ldr	r2, [pc, #140]	; (800ac30 <mem_malloc+0x1f8>)
 800aba4:	6812      	ldr	r2, [r2, #0]
 800aba6:	4293      	cmp	r3, r2
 800aba8:	d906      	bls.n	800abb8 <mem_malloc+0x180>
 800abaa:	4b1e      	ldr	r3, [pc, #120]	; (800ac24 <mem_malloc+0x1ec>)
 800abac:	f240 32b9 	movw	r2, #953	; 0x3b9
 800abb0:	4921      	ldr	r1, [pc, #132]	; (800ac38 <mem_malloc+0x200>)
 800abb2:	481e      	ldr	r0, [pc, #120]	; (800ac2c <mem_malloc+0x1f4>)
 800abb4:	f00d fb3e 	bl	8018234 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800abb8:	697b      	ldr	r3, [r7, #20]
 800abba:	f003 0303 	and.w	r3, r3, #3
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d006      	beq.n	800abd0 <mem_malloc+0x198>
 800abc2:	4b18      	ldr	r3, [pc, #96]	; (800ac24 <mem_malloc+0x1ec>)
 800abc4:	f240 32bb 	movw	r2, #955	; 0x3bb
 800abc8:	491c      	ldr	r1, [pc, #112]	; (800ac3c <mem_malloc+0x204>)
 800abca:	4818      	ldr	r0, [pc, #96]	; (800ac2c <mem_malloc+0x1f4>)
 800abcc:	f00d fb32 	bl	8018234 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800abd0:	697b      	ldr	r3, [r7, #20]
 800abd2:	f003 0303 	and.w	r3, r3, #3
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d006      	beq.n	800abe8 <mem_malloc+0x1b0>
 800abda:	4b12      	ldr	r3, [pc, #72]	; (800ac24 <mem_malloc+0x1ec>)
 800abdc:	f240 32bd 	movw	r2, #957	; 0x3bd
 800abe0:	4917      	ldr	r1, [pc, #92]	; (800ac40 <mem_malloc+0x208>)
 800abe2:	4812      	ldr	r0, [pc, #72]	; (800ac2c <mem_malloc+0x1f4>)
 800abe4:	f00d fb26 	bl	8018234 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800abe8:	697b      	ldr	r3, [r7, #20]
 800abea:	3308      	adds	r3, #8
 800abec:	e011      	b.n	800ac12 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800abee:	8bfb      	ldrh	r3, [r7, #30]
 800abf0:	4618      	mov	r0, r3
 800abf2:	f7ff fc33 	bl	800a45c <ptr_to_mem>
 800abf6:	4603      	mov	r3, r0
 800abf8:	881b      	ldrh	r3, [r3, #0]
 800abfa:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800abfc:	8bfa      	ldrh	r2, [r7, #30]
 800abfe:	8bbb      	ldrh	r3, [r7, #28]
 800ac00:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 800ac04:	429a      	cmp	r2, r3
 800ac06:	f4ff af41 	bcc.w	800aa8c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800ac0a:	4804      	ldr	r0, [pc, #16]	; (800ac1c <mem_malloc+0x1e4>)
 800ac0c:	f009 fa19 	bl	8014042 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800ac10:	2300      	movs	r3, #0
}
 800ac12:	4618      	mov	r0, r3
 800ac14:	3720      	adds	r7, #32
 800ac16:	46bd      	mov	sp, r7
 800ac18:	bd80      	pop	{r7, pc}
 800ac1a:	bf00      	nop
 800ac1c:	20004b88 	.word	0x20004b88
 800ac20:	20004b8c 	.word	0x20004b8c
 800ac24:	08018bdc 	.word	0x08018bdc
 800ac28:	08018da0 	.word	0x08018da0
 800ac2c:	08018c24 	.word	0x08018c24
 800ac30:	20004b84 	.word	0x20004b84
 800ac34:	08018db4 	.word	0x08018db4
 800ac38:	08018dd0 	.word	0x08018dd0
 800ac3c:	08018e00 	.word	0x08018e00
 800ac40:	08018e30 	.word	0x08018e30

0800ac44 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800ac44:	b480      	push	{r7}
 800ac46:	b085      	sub	sp, #20
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	689b      	ldr	r3, [r3, #8]
 800ac50:	2200      	movs	r2, #0
 800ac52:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	685b      	ldr	r3, [r3, #4]
 800ac58:	3303      	adds	r3, #3
 800ac5a:	f023 0303 	bic.w	r3, r3, #3
 800ac5e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800ac60:	2300      	movs	r3, #0
 800ac62:	60fb      	str	r3, [r7, #12]
 800ac64:	e011      	b.n	800ac8a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	689b      	ldr	r3, [r3, #8]
 800ac6a:	681a      	ldr	r2, [r3, #0]
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	689b      	ldr	r3, [r3, #8]
 800ac74:	68ba      	ldr	r2, [r7, #8]
 800ac76:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	881b      	ldrh	r3, [r3, #0]
 800ac7c:	461a      	mov	r2, r3
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	4413      	add	r3, r2
 800ac82:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	3301      	adds	r3, #1
 800ac88:	60fb      	str	r3, [r7, #12]
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	885b      	ldrh	r3, [r3, #2]
 800ac8e:	461a      	mov	r2, r3
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	4293      	cmp	r3, r2
 800ac94:	dbe7      	blt.n	800ac66 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800ac96:	bf00      	nop
 800ac98:	bf00      	nop
 800ac9a:	3714      	adds	r7, #20
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca2:	4770      	bx	lr

0800aca4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b082      	sub	sp, #8
 800aca8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800acaa:	2300      	movs	r3, #0
 800acac:	80fb      	strh	r3, [r7, #6]
 800acae:	e009      	b.n	800acc4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800acb0:	88fb      	ldrh	r3, [r7, #6]
 800acb2:	4a08      	ldr	r2, [pc, #32]	; (800acd4 <memp_init+0x30>)
 800acb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800acb8:	4618      	mov	r0, r3
 800acba:	f7ff ffc3 	bl	800ac44 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800acbe:	88fb      	ldrh	r3, [r7, #6]
 800acc0:	3301      	adds	r3, #1
 800acc2:	80fb      	strh	r3, [r7, #6]
 800acc4:	88fb      	ldrh	r3, [r7, #6]
 800acc6:	2b0c      	cmp	r3, #12
 800acc8:	d9f2      	bls.n	800acb0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800acca:	bf00      	nop
 800accc:	bf00      	nop
 800acce:	3708      	adds	r7, #8
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}
 800acd4:	0801b7c4 	.word	0x0801b7c4

0800acd8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b084      	sub	sp, #16
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800ace0:	f009 f9dc 	bl	801409c <sys_arch_protect>
 800ace4:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	689b      	ldr	r3, [r3, #8]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800acee:	68bb      	ldr	r3, [r7, #8]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d015      	beq.n	800ad20 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	689b      	ldr	r3, [r3, #8]
 800acf8:	68ba      	ldr	r2, [r7, #8]
 800acfa:	6812      	ldr	r2, [r2, #0]
 800acfc:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800acfe:	68bb      	ldr	r3, [r7, #8]
 800ad00:	f003 0303 	and.w	r3, r3, #3
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d006      	beq.n	800ad16 <do_memp_malloc_pool+0x3e>
 800ad08:	4b09      	ldr	r3, [pc, #36]	; (800ad30 <do_memp_malloc_pool+0x58>)
 800ad0a:	f44f 728c 	mov.w	r2, #280	; 0x118
 800ad0e:	4909      	ldr	r1, [pc, #36]	; (800ad34 <do_memp_malloc_pool+0x5c>)
 800ad10:	4809      	ldr	r0, [pc, #36]	; (800ad38 <do_memp_malloc_pool+0x60>)
 800ad12:	f00d fa8f 	bl	8018234 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800ad16:	68f8      	ldr	r0, [r7, #12]
 800ad18:	f009 f9ce 	bl	80140b8 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800ad1c:	68bb      	ldr	r3, [r7, #8]
 800ad1e:	e003      	b.n	800ad28 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800ad20:	68f8      	ldr	r0, [r7, #12]
 800ad22:	f009 f9c9 	bl	80140b8 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800ad26:	2300      	movs	r3, #0
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	3710      	adds	r7, #16
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd80      	pop	{r7, pc}
 800ad30:	08018e54 	.word	0x08018e54
 800ad34:	08018e84 	.word	0x08018e84
 800ad38:	08018ea8 	.word	0x08018ea8

0800ad3c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b084      	sub	sp, #16
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	4603      	mov	r3, r0
 800ad44:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800ad46:	79fb      	ldrb	r3, [r7, #7]
 800ad48:	2b0c      	cmp	r3, #12
 800ad4a:	d908      	bls.n	800ad5e <memp_malloc+0x22>
 800ad4c:	4b0a      	ldr	r3, [pc, #40]	; (800ad78 <memp_malloc+0x3c>)
 800ad4e:	f240 1257 	movw	r2, #343	; 0x157
 800ad52:	490a      	ldr	r1, [pc, #40]	; (800ad7c <memp_malloc+0x40>)
 800ad54:	480a      	ldr	r0, [pc, #40]	; (800ad80 <memp_malloc+0x44>)
 800ad56:	f00d fa6d 	bl	8018234 <iprintf>
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	e008      	b.n	800ad70 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800ad5e:	79fb      	ldrb	r3, [r7, #7]
 800ad60:	4a08      	ldr	r2, [pc, #32]	; (800ad84 <memp_malloc+0x48>)
 800ad62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad66:	4618      	mov	r0, r3
 800ad68:	f7ff ffb6 	bl	800acd8 <do_memp_malloc_pool>
 800ad6c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800ad6e:	68fb      	ldr	r3, [r7, #12]
}
 800ad70:	4618      	mov	r0, r3
 800ad72:	3710      	adds	r7, #16
 800ad74:	46bd      	mov	sp, r7
 800ad76:	bd80      	pop	{r7, pc}
 800ad78:	08018e54 	.word	0x08018e54
 800ad7c:	08018ee4 	.word	0x08018ee4
 800ad80:	08018ea8 	.word	0x08018ea8
 800ad84:	0801b7c4 	.word	0x0801b7c4

0800ad88 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b084      	sub	sp, #16
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
 800ad90:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	f003 0303 	and.w	r3, r3, #3
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d006      	beq.n	800adaa <do_memp_free_pool+0x22>
 800ad9c:	4b0d      	ldr	r3, [pc, #52]	; (800add4 <do_memp_free_pool+0x4c>)
 800ad9e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800ada2:	490d      	ldr	r1, [pc, #52]	; (800add8 <do_memp_free_pool+0x50>)
 800ada4:	480d      	ldr	r0, [pc, #52]	; (800addc <do_memp_free_pool+0x54>)
 800ada6:	f00d fa45 	bl	8018234 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800adae:	f009 f975 	bl	801409c <sys_arch_protect>
 800adb2:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	689b      	ldr	r3, [r3, #8]
 800adb8:	681a      	ldr	r2, [r3, #0]
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	689b      	ldr	r3, [r3, #8]
 800adc2:	68fa      	ldr	r2, [r7, #12]
 800adc4:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800adc6:	68b8      	ldr	r0, [r7, #8]
 800adc8:	f009 f976 	bl	80140b8 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800adcc:	bf00      	nop
 800adce:	3710      	adds	r7, #16
 800add0:	46bd      	mov	sp, r7
 800add2:	bd80      	pop	{r7, pc}
 800add4:	08018e54 	.word	0x08018e54
 800add8:	08018f04 	.word	0x08018f04
 800addc:	08018ea8 	.word	0x08018ea8

0800ade0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b082      	sub	sp, #8
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	4603      	mov	r3, r0
 800ade8:	6039      	str	r1, [r7, #0]
 800adea:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800adec:	79fb      	ldrb	r3, [r7, #7]
 800adee:	2b0c      	cmp	r3, #12
 800adf0:	d907      	bls.n	800ae02 <memp_free+0x22>
 800adf2:	4b0c      	ldr	r3, [pc, #48]	; (800ae24 <memp_free+0x44>)
 800adf4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800adf8:	490b      	ldr	r1, [pc, #44]	; (800ae28 <memp_free+0x48>)
 800adfa:	480c      	ldr	r0, [pc, #48]	; (800ae2c <memp_free+0x4c>)
 800adfc:	f00d fa1a 	bl	8018234 <iprintf>
 800ae00:	e00c      	b.n	800ae1c <memp_free+0x3c>

  if (mem == NULL) {
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d008      	beq.n	800ae1a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800ae08:	79fb      	ldrb	r3, [r7, #7]
 800ae0a:	4a09      	ldr	r2, [pc, #36]	; (800ae30 <memp_free+0x50>)
 800ae0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae10:	6839      	ldr	r1, [r7, #0]
 800ae12:	4618      	mov	r0, r3
 800ae14:	f7ff ffb8 	bl	800ad88 <do_memp_free_pool>
 800ae18:	e000      	b.n	800ae1c <memp_free+0x3c>
    return;
 800ae1a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800ae1c:	3708      	adds	r7, #8
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	bd80      	pop	{r7, pc}
 800ae22:	bf00      	nop
 800ae24:	08018e54 	.word	0x08018e54
 800ae28:	08018f24 	.word	0x08018f24
 800ae2c:	08018ea8 	.word	0x08018ea8
 800ae30:	0801b7c4 	.word	0x0801b7c4

0800ae34 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800ae34:	b480      	push	{r7}
 800ae36:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800ae38:	bf00      	nop
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae40:	4770      	bx	lr
	...

0800ae44 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b086      	sub	sp, #24
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	60f8      	str	r0, [r7, #12]
 800ae4c:	60b9      	str	r1, [r7, #8]
 800ae4e:	607a      	str	r2, [r7, #4]
 800ae50:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d108      	bne.n	800ae6a <netif_add+0x26>
 800ae58:	4b57      	ldr	r3, [pc, #348]	; (800afb8 <netif_add+0x174>)
 800ae5a:	f240 1227 	movw	r2, #295	; 0x127
 800ae5e:	4957      	ldr	r1, [pc, #348]	; (800afbc <netif_add+0x178>)
 800ae60:	4857      	ldr	r0, [pc, #348]	; (800afc0 <netif_add+0x17c>)
 800ae62:	f00d f9e7 	bl	8018234 <iprintf>
 800ae66:	2300      	movs	r3, #0
 800ae68:	e0a2      	b.n	800afb0 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800ae6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d108      	bne.n	800ae82 <netif_add+0x3e>
 800ae70:	4b51      	ldr	r3, [pc, #324]	; (800afb8 <netif_add+0x174>)
 800ae72:	f44f 7294 	mov.w	r2, #296	; 0x128
 800ae76:	4953      	ldr	r1, [pc, #332]	; (800afc4 <netif_add+0x180>)
 800ae78:	4851      	ldr	r0, [pc, #324]	; (800afc0 <netif_add+0x17c>)
 800ae7a:	f00d f9db 	bl	8018234 <iprintf>
 800ae7e:	2300      	movs	r3, #0
 800ae80:	e096      	b.n	800afb0 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800ae82:	68bb      	ldr	r3, [r7, #8]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d101      	bne.n	800ae8c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800ae88:	4b4f      	ldr	r3, [pc, #316]	; (800afc8 <netif_add+0x184>)
 800ae8a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d101      	bne.n	800ae96 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800ae92:	4b4d      	ldr	r3, [pc, #308]	; (800afc8 <netif_add+0x184>)
 800ae94:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d101      	bne.n	800aea0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800ae9c:	4b4a      	ldr	r3, [pc, #296]	; (800afc8 <netif_add+0x184>)
 800ae9e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	2200      	movs	r2, #0
 800aea4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	2200      	movs	r2, #0
 800aeaa:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	2200      	movs	r2, #0
 800aeb0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	4a45      	ldr	r2, [pc, #276]	; (800afcc <netif_add+0x188>)
 800aeb6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	2200      	movs	r2, #0
 800aebc:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	2200      	movs	r2, #0
 800aec2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	2200      	movs	r2, #0
 800aeca:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	6a3a      	ldr	r2, [r7, #32]
 800aed0:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800aed2:	4b3f      	ldr	r3, [pc, #252]	; (800afd0 <netif_add+0x18c>)
 800aed4:	781a      	ldrb	r2, [r3, #0]
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aee0:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	687a      	ldr	r2, [r7, #4]
 800aee6:	68b9      	ldr	r1, [r7, #8]
 800aee8:	68f8      	ldr	r0, [r7, #12]
 800aeea:	f000 f913 	bl	800b114 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800aeee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aef0:	68f8      	ldr	r0, [r7, #12]
 800aef2:	4798      	blx	r3
 800aef4:	4603      	mov	r3, r0
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d001      	beq.n	800aefe <netif_add+0xba>
    return NULL;
 800aefa:	2300      	movs	r3, #0
 800aefc:	e058      	b.n	800afb0 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800af04:	2bff      	cmp	r3, #255	; 0xff
 800af06:	d103      	bne.n	800af10 <netif_add+0xcc>
        netif->num = 0;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	2200      	movs	r2, #0
 800af0c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800af10:	2300      	movs	r3, #0
 800af12:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800af14:	4b2f      	ldr	r3, [pc, #188]	; (800afd4 <netif_add+0x190>)
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	617b      	str	r3, [r7, #20]
 800af1a:	e02b      	b.n	800af74 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800af1c:	697a      	ldr	r2, [r7, #20]
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	429a      	cmp	r2, r3
 800af22:	d106      	bne.n	800af32 <netif_add+0xee>
 800af24:	4b24      	ldr	r3, [pc, #144]	; (800afb8 <netif_add+0x174>)
 800af26:	f240 128b 	movw	r2, #395	; 0x18b
 800af2a:	492b      	ldr	r1, [pc, #172]	; (800afd8 <netif_add+0x194>)
 800af2c:	4824      	ldr	r0, [pc, #144]	; (800afc0 <netif_add+0x17c>)
 800af2e:	f00d f981 	bl	8018234 <iprintf>
        num_netifs++;
 800af32:	693b      	ldr	r3, [r7, #16]
 800af34:	3301      	adds	r3, #1
 800af36:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800af38:	693b      	ldr	r3, [r7, #16]
 800af3a:	2bff      	cmp	r3, #255	; 0xff
 800af3c:	dd06      	ble.n	800af4c <netif_add+0x108>
 800af3e:	4b1e      	ldr	r3, [pc, #120]	; (800afb8 <netif_add+0x174>)
 800af40:	f240 128d 	movw	r2, #397	; 0x18d
 800af44:	4925      	ldr	r1, [pc, #148]	; (800afdc <netif_add+0x198>)
 800af46:	481e      	ldr	r0, [pc, #120]	; (800afc0 <netif_add+0x17c>)
 800af48:	f00d f974 	bl	8018234 <iprintf>
        if (netif2->num == netif->num) {
 800af4c:	697b      	ldr	r3, [r7, #20]
 800af4e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800af58:	429a      	cmp	r2, r3
 800af5a:	d108      	bne.n	800af6e <netif_add+0x12a>
          netif->num++;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800af62:	3301      	adds	r3, #1
 800af64:	b2da      	uxtb	r2, r3
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800af6c:	e005      	b.n	800af7a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800af6e:	697b      	ldr	r3, [r7, #20]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	617b      	str	r3, [r7, #20]
 800af74:	697b      	ldr	r3, [r7, #20]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d1d0      	bne.n	800af1c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800af7a:	697b      	ldr	r3, [r7, #20]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d1be      	bne.n	800aefe <netif_add+0xba>
  }
  if (netif->num == 254) {
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800af86:	2bfe      	cmp	r3, #254	; 0xfe
 800af88:	d103      	bne.n	800af92 <netif_add+0x14e>
    netif_num = 0;
 800af8a:	4b11      	ldr	r3, [pc, #68]	; (800afd0 <netif_add+0x18c>)
 800af8c:	2200      	movs	r2, #0
 800af8e:	701a      	strb	r2, [r3, #0]
 800af90:	e006      	b.n	800afa0 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800af98:	3301      	adds	r3, #1
 800af9a:	b2da      	uxtb	r2, r3
 800af9c:	4b0c      	ldr	r3, [pc, #48]	; (800afd0 <netif_add+0x18c>)
 800af9e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800afa0:	4b0c      	ldr	r3, [pc, #48]	; (800afd4 <netif_add+0x190>)
 800afa2:	681a      	ldr	r2, [r3, #0]
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800afa8:	4a0a      	ldr	r2, [pc, #40]	; (800afd4 <netif_add+0x190>)
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800afae:	68fb      	ldr	r3, [r7, #12]
}
 800afb0:	4618      	mov	r0, r3
 800afb2:	3718      	adds	r7, #24
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}
 800afb8:	08018f40 	.word	0x08018f40
 800afbc:	08018fd4 	.word	0x08018fd4
 800afc0:	08018f90 	.word	0x08018f90
 800afc4:	08018ff0 	.word	0x08018ff0
 800afc8:	0801b838 	.word	0x0801b838
 800afcc:	0800b3ef 	.word	0x0800b3ef
 800afd0:	20004bc4 	.word	0x20004bc4
 800afd4:	2000dc34 	.word	0x2000dc34
 800afd8:	08019014 	.word	0x08019014
 800afdc:	08019028 	.word	0x08019028

0800afe0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b082      	sub	sp, #8
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
 800afe8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800afea:	6839      	ldr	r1, [r7, #0]
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f002 fb7d 	bl	800d6ec <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800aff2:	6839      	ldr	r1, [r7, #0]
 800aff4:	6878      	ldr	r0, [r7, #4]
 800aff6:	f006 fc8d 	bl	8011914 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800affa:	bf00      	nop
 800affc:	3708      	adds	r7, #8
 800affe:	46bd      	mov	sp, r7
 800b000:	bd80      	pop	{r7, pc}
	...

0800b004 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b086      	sub	sp, #24
 800b008:	af00      	add	r7, sp, #0
 800b00a:	60f8      	str	r0, [r7, #12]
 800b00c:	60b9      	str	r1, [r7, #8]
 800b00e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800b010:	68bb      	ldr	r3, [r7, #8]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d106      	bne.n	800b024 <netif_do_set_ipaddr+0x20>
 800b016:	4b1d      	ldr	r3, [pc, #116]	; (800b08c <netif_do_set_ipaddr+0x88>)
 800b018:	f240 12cb 	movw	r2, #459	; 0x1cb
 800b01c:	491c      	ldr	r1, [pc, #112]	; (800b090 <netif_do_set_ipaddr+0x8c>)
 800b01e:	481d      	ldr	r0, [pc, #116]	; (800b094 <netif_do_set_ipaddr+0x90>)
 800b020:	f00d f908 	bl	8018234 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d106      	bne.n	800b038 <netif_do_set_ipaddr+0x34>
 800b02a:	4b18      	ldr	r3, [pc, #96]	; (800b08c <netif_do_set_ipaddr+0x88>)
 800b02c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800b030:	4917      	ldr	r1, [pc, #92]	; (800b090 <netif_do_set_ipaddr+0x8c>)
 800b032:	4818      	ldr	r0, [pc, #96]	; (800b094 <netif_do_set_ipaddr+0x90>)
 800b034:	f00d f8fe 	bl	8018234 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800b038:	68bb      	ldr	r3, [r7, #8]
 800b03a:	681a      	ldr	r2, [r3, #0]
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	3304      	adds	r3, #4
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	429a      	cmp	r2, r3
 800b044:	d01c      	beq.n	800b080 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800b046:	68bb      	ldr	r3, [r7, #8]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	3304      	adds	r3, #4
 800b050:	681a      	ldr	r2, [r3, #0]
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800b056:	f107 0314 	add.w	r3, r7, #20
 800b05a:	4619      	mov	r1, r3
 800b05c:	6878      	ldr	r0, [r7, #4]
 800b05e:	f7ff ffbf 	bl	800afe0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d002      	beq.n	800b06e <netif_do_set_ipaddr+0x6a>
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	e000      	b.n	800b070 <netif_do_set_ipaddr+0x6c>
 800b06e:	2300      	movs	r3, #0
 800b070:	68fa      	ldr	r2, [r7, #12]
 800b072:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800b074:	2101      	movs	r1, #1
 800b076:	68f8      	ldr	r0, [r7, #12]
 800b078:	f000 f8d2 	bl	800b220 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800b07c:	2301      	movs	r3, #1
 800b07e:	e000      	b.n	800b082 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800b080:	2300      	movs	r3, #0
}
 800b082:	4618      	mov	r0, r3
 800b084:	3718      	adds	r7, #24
 800b086:	46bd      	mov	sp, r7
 800b088:	bd80      	pop	{r7, pc}
 800b08a:	bf00      	nop
 800b08c:	08018f40 	.word	0x08018f40
 800b090:	08019058 	.word	0x08019058
 800b094:	08018f90 	.word	0x08018f90

0800b098 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800b098:	b480      	push	{r7}
 800b09a:	b085      	sub	sp, #20
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	60f8      	str	r0, [r7, #12]
 800b0a0:	60b9      	str	r1, [r7, #8]
 800b0a2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	681a      	ldr	r2, [r3, #0]
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	3308      	adds	r3, #8
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	429a      	cmp	r2, r3
 800b0b0:	d00a      	beq.n	800b0c8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d002      	beq.n	800b0be <netif_do_set_netmask+0x26>
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	e000      	b.n	800b0c0 <netif_do_set_netmask+0x28>
 800b0be:	2300      	movs	r3, #0
 800b0c0:	68fa      	ldr	r2, [r7, #12]
 800b0c2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800b0c4:	2301      	movs	r3, #1
 800b0c6:	e000      	b.n	800b0ca <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800b0c8:	2300      	movs	r3, #0
}
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	3714      	adds	r7, #20
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d4:	4770      	bx	lr

0800b0d6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800b0d6:	b480      	push	{r7}
 800b0d8:	b085      	sub	sp, #20
 800b0da:	af00      	add	r7, sp, #0
 800b0dc:	60f8      	str	r0, [r7, #12]
 800b0de:	60b9      	str	r1, [r7, #8]
 800b0e0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800b0e2:	68bb      	ldr	r3, [r7, #8]
 800b0e4:	681a      	ldr	r2, [r3, #0]
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	330c      	adds	r3, #12
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	429a      	cmp	r2, r3
 800b0ee:	d00a      	beq.n	800b106 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800b0f0:	68bb      	ldr	r3, [r7, #8]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d002      	beq.n	800b0fc <netif_do_set_gw+0x26>
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	e000      	b.n	800b0fe <netif_do_set_gw+0x28>
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	68fa      	ldr	r2, [r7, #12]
 800b100:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800b102:	2301      	movs	r3, #1
 800b104:	e000      	b.n	800b108 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800b106:	2300      	movs	r3, #0
}
 800b108:	4618      	mov	r0, r3
 800b10a:	3714      	adds	r7, #20
 800b10c:	46bd      	mov	sp, r7
 800b10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b112:	4770      	bx	lr

0800b114 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b088      	sub	sp, #32
 800b118:	af00      	add	r7, sp, #0
 800b11a:	60f8      	str	r0, [r7, #12]
 800b11c:	60b9      	str	r1, [r7, #8]
 800b11e:	607a      	str	r2, [r7, #4]
 800b120:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800b122:	2300      	movs	r3, #0
 800b124:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800b126:	2300      	movs	r3, #0
 800b128:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b12a:	68bb      	ldr	r3, [r7, #8]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d101      	bne.n	800b134 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800b130:	4b1c      	ldr	r3, [pc, #112]	; (800b1a4 <netif_set_addr+0x90>)
 800b132:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d101      	bne.n	800b13e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800b13a:	4b1a      	ldr	r3, [pc, #104]	; (800b1a4 <netif_set_addr+0x90>)
 800b13c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d101      	bne.n	800b148 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800b144:	4b17      	ldr	r3, [pc, #92]	; (800b1a4 <netif_set_addr+0x90>)
 800b146:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d003      	beq.n	800b156 <netif_set_addr+0x42>
 800b14e:	68bb      	ldr	r3, [r7, #8]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d101      	bne.n	800b15a <netif_set_addr+0x46>
 800b156:	2301      	movs	r3, #1
 800b158:	e000      	b.n	800b15c <netif_set_addr+0x48>
 800b15a:	2300      	movs	r3, #0
 800b15c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800b15e:	697b      	ldr	r3, [r7, #20]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d006      	beq.n	800b172 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b164:	f107 0310 	add.w	r3, r7, #16
 800b168:	461a      	mov	r2, r3
 800b16a:	68b9      	ldr	r1, [r7, #8]
 800b16c:	68f8      	ldr	r0, [r7, #12]
 800b16e:	f7ff ff49 	bl	800b004 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800b172:	69fa      	ldr	r2, [r7, #28]
 800b174:	6879      	ldr	r1, [r7, #4]
 800b176:	68f8      	ldr	r0, [r7, #12]
 800b178:	f7ff ff8e 	bl	800b098 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800b17c:	69ba      	ldr	r2, [r7, #24]
 800b17e:	6839      	ldr	r1, [r7, #0]
 800b180:	68f8      	ldr	r0, [r7, #12]
 800b182:	f7ff ffa8 	bl	800b0d6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800b186:	697b      	ldr	r3, [r7, #20]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d106      	bne.n	800b19a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b18c:	f107 0310 	add.w	r3, r7, #16
 800b190:	461a      	mov	r2, r3
 800b192:	68b9      	ldr	r1, [r7, #8]
 800b194:	68f8      	ldr	r0, [r7, #12]
 800b196:	f7ff ff35 	bl	800b004 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800b19a:	bf00      	nop
 800b19c:	3720      	adds	r7, #32
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}
 800b1a2:	bf00      	nop
 800b1a4:	0801b838 	.word	0x0801b838

0800b1a8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800b1a8:	b480      	push	{r7}
 800b1aa:	b083      	sub	sp, #12
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800b1b0:	4a04      	ldr	r2, [pc, #16]	; (800b1c4 <netif_set_default+0x1c>)
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800b1b6:	bf00      	nop
 800b1b8:	370c      	adds	r7, #12
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c0:	4770      	bx	lr
 800b1c2:	bf00      	nop
 800b1c4:	2000dc38 	.word	0x2000dc38

0800b1c8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b082      	sub	sp, #8
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d107      	bne.n	800b1e6 <netif_set_up+0x1e>
 800b1d6:	4b0f      	ldr	r3, [pc, #60]	; (800b214 <netif_set_up+0x4c>)
 800b1d8:	f44f 7254 	mov.w	r2, #848	; 0x350
 800b1dc:	490e      	ldr	r1, [pc, #56]	; (800b218 <netif_set_up+0x50>)
 800b1de:	480f      	ldr	r0, [pc, #60]	; (800b21c <netif_set_up+0x54>)
 800b1e0:	f00d f828 	bl	8018234 <iprintf>
 800b1e4:	e013      	b.n	800b20e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b1ec:	f003 0301 	and.w	r3, r3, #1
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d10c      	bne.n	800b20e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b1fa:	f043 0301 	orr.w	r3, r3, #1
 800b1fe:	b2da      	uxtb	r2, r3
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b206:	2103      	movs	r1, #3
 800b208:	6878      	ldr	r0, [r7, #4]
 800b20a:	f000 f809 	bl	800b220 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800b20e:	3708      	adds	r7, #8
 800b210:	46bd      	mov	sp, r7
 800b212:	bd80      	pop	{r7, pc}
 800b214:	08018f40 	.word	0x08018f40
 800b218:	080190c8 	.word	0x080190c8
 800b21c:	08018f90 	.word	0x08018f90

0800b220 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b082      	sub	sp, #8
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
 800b228:	460b      	mov	r3, r1
 800b22a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d106      	bne.n	800b240 <netif_issue_reports+0x20>
 800b232:	4b18      	ldr	r3, [pc, #96]	; (800b294 <netif_issue_reports+0x74>)
 800b234:	f240 326d 	movw	r2, #877	; 0x36d
 800b238:	4917      	ldr	r1, [pc, #92]	; (800b298 <netif_issue_reports+0x78>)
 800b23a:	4818      	ldr	r0, [pc, #96]	; (800b29c <netif_issue_reports+0x7c>)
 800b23c:	f00c fffa 	bl	8018234 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b246:	f003 0304 	and.w	r3, r3, #4
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d01e      	beq.n	800b28c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b254:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d017      	beq.n	800b28c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b25c:	78fb      	ldrb	r3, [r7, #3]
 800b25e:	f003 0301 	and.w	r3, r3, #1
 800b262:	2b00      	cmp	r3, #0
 800b264:	d013      	beq.n	800b28e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	3304      	adds	r3, #4
 800b26a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d00e      	beq.n	800b28e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b276:	f003 0308 	and.w	r3, r3, #8
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d007      	beq.n	800b28e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	3304      	adds	r3, #4
 800b282:	4619      	mov	r1, r3
 800b284:	6878      	ldr	r0, [r7, #4]
 800b286:	f007 faaf 	bl	80127e8 <etharp_request>
 800b28a:	e000      	b.n	800b28e <netif_issue_reports+0x6e>
    return;
 800b28c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800b28e:	3708      	adds	r7, #8
 800b290:	46bd      	mov	sp, r7
 800b292:	bd80      	pop	{r7, pc}
 800b294:	08018f40 	.word	0x08018f40
 800b298:	080190e4 	.word	0x080190e4
 800b29c:	08018f90 	.word	0x08018f90

0800b2a0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b082      	sub	sp, #8
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d107      	bne.n	800b2be <netif_set_down+0x1e>
 800b2ae:	4b12      	ldr	r3, [pc, #72]	; (800b2f8 <netif_set_down+0x58>)
 800b2b0:	f240 329b 	movw	r2, #923	; 0x39b
 800b2b4:	4911      	ldr	r1, [pc, #68]	; (800b2fc <netif_set_down+0x5c>)
 800b2b6:	4812      	ldr	r0, [pc, #72]	; (800b300 <netif_set_down+0x60>)
 800b2b8:	f00c ffbc 	bl	8018234 <iprintf>
 800b2bc:	e019      	b.n	800b2f2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b2c4:	f003 0301 	and.w	r3, r3, #1
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d012      	beq.n	800b2f2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b2d2:	f023 0301 	bic.w	r3, r3, #1
 800b2d6:	b2da      	uxtb	r2, r3
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b2e4:	f003 0308 	and.w	r3, r3, #8
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d002      	beq.n	800b2f2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800b2ec:	6878      	ldr	r0, [r7, #4]
 800b2ee:	f006 fe39 	bl	8011f64 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800b2f2:	3708      	adds	r7, #8
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}
 800b2f8:	08018f40 	.word	0x08018f40
 800b2fc:	08019108 	.word	0x08019108
 800b300:	08018f90 	.word	0x08018f90

0800b304 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b082      	sub	sp, #8
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d107      	bne.n	800b322 <netif_set_link_up+0x1e>
 800b312:	4b13      	ldr	r3, [pc, #76]	; (800b360 <netif_set_link_up+0x5c>)
 800b314:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800b318:	4912      	ldr	r1, [pc, #72]	; (800b364 <netif_set_link_up+0x60>)
 800b31a:	4813      	ldr	r0, [pc, #76]	; (800b368 <netif_set_link_up+0x64>)
 800b31c:	f00c ff8a 	bl	8018234 <iprintf>
 800b320:	e01b      	b.n	800b35a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b328:	f003 0304 	and.w	r3, r3, #4
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d114      	bne.n	800b35a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b336:	f043 0304 	orr.w	r3, r3, #4
 800b33a:	b2da      	uxtb	r2, r3
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b342:	2103      	movs	r1, #3
 800b344:	6878      	ldr	r0, [r7, #4]
 800b346:	f7ff ff6b 	bl	800b220 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	69db      	ldr	r3, [r3, #28]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d003      	beq.n	800b35a <netif_set_link_up+0x56>
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	69db      	ldr	r3, [r3, #28]
 800b356:	6878      	ldr	r0, [r7, #4]
 800b358:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b35a:	3708      	adds	r7, #8
 800b35c:	46bd      	mov	sp, r7
 800b35e:	bd80      	pop	{r7, pc}
 800b360:	08018f40 	.word	0x08018f40
 800b364:	08019128 	.word	0x08019128
 800b368:	08018f90 	.word	0x08018f90

0800b36c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b082      	sub	sp, #8
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d107      	bne.n	800b38a <netif_set_link_down+0x1e>
 800b37a:	4b11      	ldr	r3, [pc, #68]	; (800b3c0 <netif_set_link_down+0x54>)
 800b37c:	f240 4206 	movw	r2, #1030	; 0x406
 800b380:	4910      	ldr	r1, [pc, #64]	; (800b3c4 <netif_set_link_down+0x58>)
 800b382:	4811      	ldr	r0, [pc, #68]	; (800b3c8 <netif_set_link_down+0x5c>)
 800b384:	f00c ff56 	bl	8018234 <iprintf>
 800b388:	e017      	b.n	800b3ba <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b390:	f003 0304 	and.w	r3, r3, #4
 800b394:	2b00      	cmp	r3, #0
 800b396:	d010      	beq.n	800b3ba <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b39e:	f023 0304 	bic.w	r3, r3, #4
 800b3a2:	b2da      	uxtb	r2, r3
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	69db      	ldr	r3, [r3, #28]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d003      	beq.n	800b3ba <netif_set_link_down+0x4e>
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	69db      	ldr	r3, [r3, #28]
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b3ba:	3708      	adds	r7, #8
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	bd80      	pop	{r7, pc}
 800b3c0:	08018f40 	.word	0x08018f40
 800b3c4:	0801914c 	.word	0x0801914c
 800b3c8:	08018f90 	.word	0x08018f90

0800b3cc <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800b3cc:	b480      	push	{r7}
 800b3ce:	b083      	sub	sp, #12
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
 800b3d4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d002      	beq.n	800b3e2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	683a      	ldr	r2, [r7, #0]
 800b3e0:	61da      	str	r2, [r3, #28]
  }
}
 800b3e2:	bf00      	nop
 800b3e4:	370c      	adds	r7, #12
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ec:	4770      	bx	lr

0800b3ee <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800b3ee:	b480      	push	{r7}
 800b3f0:	b085      	sub	sp, #20
 800b3f2:	af00      	add	r7, sp, #0
 800b3f4:	60f8      	str	r0, [r7, #12]
 800b3f6:	60b9      	str	r1, [r7, #8]
 800b3f8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800b3fa:	f06f 030b 	mvn.w	r3, #11
}
 800b3fe:	4618      	mov	r0, r3
 800b400:	3714      	adds	r7, #20
 800b402:	46bd      	mov	sp, r7
 800b404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b408:	4770      	bx	lr
	...

0800b40c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800b40c:	b480      	push	{r7}
 800b40e:	b085      	sub	sp, #20
 800b410:	af00      	add	r7, sp, #0
 800b412:	4603      	mov	r3, r0
 800b414:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800b416:	79fb      	ldrb	r3, [r7, #7]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d013      	beq.n	800b444 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800b41c:	4b0d      	ldr	r3, [pc, #52]	; (800b454 <netif_get_by_index+0x48>)
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	60fb      	str	r3, [r7, #12]
 800b422:	e00c      	b.n	800b43e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b42a:	3301      	adds	r3, #1
 800b42c:	b2db      	uxtb	r3, r3
 800b42e:	79fa      	ldrb	r2, [r7, #7]
 800b430:	429a      	cmp	r2, r3
 800b432:	d101      	bne.n	800b438 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	e006      	b.n	800b446 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	60fb      	str	r3, [r7, #12]
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d1ef      	bne.n	800b424 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800b444:	2300      	movs	r3, #0
}
 800b446:	4618      	mov	r0, r3
 800b448:	3714      	adds	r7, #20
 800b44a:	46bd      	mov	sp, r7
 800b44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b450:	4770      	bx	lr
 800b452:	bf00      	nop
 800b454:	2000dc34 	.word	0x2000dc34

0800b458 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b082      	sub	sp, #8
 800b45c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800b45e:	f008 fe1d 	bl	801409c <sys_arch_protect>
 800b462:	6038      	str	r0, [r7, #0]
 800b464:	4b0d      	ldr	r3, [pc, #52]	; (800b49c <pbuf_free_ooseq+0x44>)
 800b466:	2200      	movs	r2, #0
 800b468:	701a      	strb	r2, [r3, #0]
 800b46a:	6838      	ldr	r0, [r7, #0]
 800b46c:	f008 fe24 	bl	80140b8 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b470:	4b0b      	ldr	r3, [pc, #44]	; (800b4a0 <pbuf_free_ooseq+0x48>)
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	607b      	str	r3, [r7, #4]
 800b476:	e00a      	b.n	800b48e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d003      	beq.n	800b488 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800b480:	6878      	ldr	r0, [r7, #4]
 800b482:	f002 f971 	bl	800d768 <tcp_free_ooseq>
      return;
 800b486:	e005      	b.n	800b494 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	68db      	ldr	r3, [r3, #12]
 800b48c:	607b      	str	r3, [r7, #4]
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d1f1      	bne.n	800b478 <pbuf_free_ooseq+0x20>
    }
  }
}
 800b494:	3708      	adds	r7, #8
 800b496:	46bd      	mov	sp, r7
 800b498:	bd80      	pop	{r7, pc}
 800b49a:	bf00      	nop
 800b49c:	2000dc3c 	.word	0x2000dc3c
 800b4a0:	2000dc44 	.word	0x2000dc44

0800b4a4 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b082      	sub	sp, #8
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800b4ac:	f7ff ffd4 	bl	800b458 <pbuf_free_ooseq>
}
 800b4b0:	bf00      	nop
 800b4b2:	3708      	adds	r7, #8
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bd80      	pop	{r7, pc}

0800b4b8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b082      	sub	sp, #8
 800b4bc:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800b4be:	f008 fded 	bl	801409c <sys_arch_protect>
 800b4c2:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800b4c4:	4b0f      	ldr	r3, [pc, #60]	; (800b504 <pbuf_pool_is_empty+0x4c>)
 800b4c6:	781b      	ldrb	r3, [r3, #0]
 800b4c8:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800b4ca:	4b0e      	ldr	r3, [pc, #56]	; (800b504 <pbuf_pool_is_empty+0x4c>)
 800b4cc:	2201      	movs	r2, #1
 800b4ce:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800b4d0:	6878      	ldr	r0, [r7, #4]
 800b4d2:	f008 fdf1 	bl	80140b8 <sys_arch_unprotect>

  if (!queued) {
 800b4d6:	78fb      	ldrb	r3, [r7, #3]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d10f      	bne.n	800b4fc <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800b4dc:	2100      	movs	r1, #0
 800b4de:	480a      	ldr	r0, [pc, #40]	; (800b508 <pbuf_pool_is_empty+0x50>)
 800b4e0:	f7fe feec 	bl	800a2bc <tcpip_try_callback>
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d008      	beq.n	800b4fc <pbuf_pool_is_empty+0x44>
 800b4ea:	f008 fdd7 	bl	801409c <sys_arch_protect>
 800b4ee:	6078      	str	r0, [r7, #4]
 800b4f0:	4b04      	ldr	r3, [pc, #16]	; (800b504 <pbuf_pool_is_empty+0x4c>)
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	701a      	strb	r2, [r3, #0]
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	f008 fdde 	bl	80140b8 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800b4fc:	bf00      	nop
 800b4fe:	3708      	adds	r7, #8
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}
 800b504:	2000dc3c 	.word	0x2000dc3c
 800b508:	0800b4a5 	.word	0x0800b4a5

0800b50c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800b50c:	b480      	push	{r7}
 800b50e:	b085      	sub	sp, #20
 800b510:	af00      	add	r7, sp, #0
 800b512:	60f8      	str	r0, [r7, #12]
 800b514:	60b9      	str	r1, [r7, #8]
 800b516:	4611      	mov	r1, r2
 800b518:	461a      	mov	r2, r3
 800b51a:	460b      	mov	r3, r1
 800b51c:	80fb      	strh	r3, [r7, #6]
 800b51e:	4613      	mov	r3, r2
 800b520:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	2200      	movs	r2, #0
 800b526:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	68ba      	ldr	r2, [r7, #8]
 800b52c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	88fa      	ldrh	r2, [r7, #6]
 800b532:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	88ba      	ldrh	r2, [r7, #4]
 800b538:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800b53a:	8b3b      	ldrh	r3, [r7, #24]
 800b53c:	b2da      	uxtb	r2, r3
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	7f3a      	ldrb	r2, [r7, #28]
 800b546:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	2201      	movs	r2, #1
 800b54c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	2200      	movs	r2, #0
 800b552:	73da      	strb	r2, [r3, #15]
}
 800b554:	bf00      	nop
 800b556:	3714      	adds	r7, #20
 800b558:	46bd      	mov	sp, r7
 800b55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55e:	4770      	bx	lr

0800b560 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b08c      	sub	sp, #48	; 0x30
 800b564:	af02      	add	r7, sp, #8
 800b566:	4603      	mov	r3, r0
 800b568:	71fb      	strb	r3, [r7, #7]
 800b56a:	460b      	mov	r3, r1
 800b56c:	80bb      	strh	r3, [r7, #4]
 800b56e:	4613      	mov	r3, r2
 800b570:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800b572:	79fb      	ldrb	r3, [r7, #7]
 800b574:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800b576:	887b      	ldrh	r3, [r7, #2]
 800b578:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b57c:	d07f      	beq.n	800b67e <pbuf_alloc+0x11e>
 800b57e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b582:	f300 80c8 	bgt.w	800b716 <pbuf_alloc+0x1b6>
 800b586:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b58a:	d010      	beq.n	800b5ae <pbuf_alloc+0x4e>
 800b58c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b590:	f300 80c1 	bgt.w	800b716 <pbuf_alloc+0x1b6>
 800b594:	2b01      	cmp	r3, #1
 800b596:	d002      	beq.n	800b59e <pbuf_alloc+0x3e>
 800b598:	2b41      	cmp	r3, #65	; 0x41
 800b59a:	f040 80bc 	bne.w	800b716 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800b59e:	887a      	ldrh	r2, [r7, #2]
 800b5a0:	88bb      	ldrh	r3, [r7, #4]
 800b5a2:	4619      	mov	r1, r3
 800b5a4:	2000      	movs	r0, #0
 800b5a6:	f000 f8d1 	bl	800b74c <pbuf_alloc_reference>
 800b5aa:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800b5ac:	e0bd      	b.n	800b72a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800b5b6:	88bb      	ldrh	r3, [r7, #4]
 800b5b8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800b5ba:	200c      	movs	r0, #12
 800b5bc:	f7ff fbbe 	bl	800ad3c <memp_malloc>
 800b5c0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800b5c2:	693b      	ldr	r3, [r7, #16]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d109      	bne.n	800b5dc <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800b5c8:	f7ff ff76 	bl	800b4b8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800b5cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d002      	beq.n	800b5d8 <pbuf_alloc+0x78>
            pbuf_free(p);
 800b5d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b5d4:	f000 faa8 	bl	800bb28 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800b5d8:	2300      	movs	r3, #0
 800b5da:	e0a7      	b.n	800b72c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800b5dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b5de:	3303      	adds	r3, #3
 800b5e0:	b29b      	uxth	r3, r3
 800b5e2:	f023 0303 	bic.w	r3, r3, #3
 800b5e6:	b29b      	uxth	r3, r3
 800b5e8:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800b5ec:	b29b      	uxth	r3, r3
 800b5ee:	8b7a      	ldrh	r2, [r7, #26]
 800b5f0:	4293      	cmp	r3, r2
 800b5f2:	bf28      	it	cs
 800b5f4:	4613      	movcs	r3, r2
 800b5f6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800b5f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b5fa:	3310      	adds	r3, #16
 800b5fc:	693a      	ldr	r2, [r7, #16]
 800b5fe:	4413      	add	r3, r2
 800b600:	3303      	adds	r3, #3
 800b602:	f023 0303 	bic.w	r3, r3, #3
 800b606:	4618      	mov	r0, r3
 800b608:	89f9      	ldrh	r1, [r7, #14]
 800b60a:	8b7a      	ldrh	r2, [r7, #26]
 800b60c:	2300      	movs	r3, #0
 800b60e:	9301      	str	r3, [sp, #4]
 800b610:	887b      	ldrh	r3, [r7, #2]
 800b612:	9300      	str	r3, [sp, #0]
 800b614:	460b      	mov	r3, r1
 800b616:	4601      	mov	r1, r0
 800b618:	6938      	ldr	r0, [r7, #16]
 800b61a:	f7ff ff77 	bl	800b50c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800b61e:	693b      	ldr	r3, [r7, #16]
 800b620:	685b      	ldr	r3, [r3, #4]
 800b622:	f003 0303 	and.w	r3, r3, #3
 800b626:	2b00      	cmp	r3, #0
 800b628:	d006      	beq.n	800b638 <pbuf_alloc+0xd8>
 800b62a:	4b42      	ldr	r3, [pc, #264]	; (800b734 <pbuf_alloc+0x1d4>)
 800b62c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b630:	4941      	ldr	r1, [pc, #260]	; (800b738 <pbuf_alloc+0x1d8>)
 800b632:	4842      	ldr	r0, [pc, #264]	; (800b73c <pbuf_alloc+0x1dc>)
 800b634:	f00c fdfe 	bl	8018234 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800b638:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b63a:	3303      	adds	r3, #3
 800b63c:	f023 0303 	bic.w	r3, r3, #3
 800b640:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800b644:	d106      	bne.n	800b654 <pbuf_alloc+0xf4>
 800b646:	4b3b      	ldr	r3, [pc, #236]	; (800b734 <pbuf_alloc+0x1d4>)
 800b648:	f44f 7281 	mov.w	r2, #258	; 0x102
 800b64c:	493c      	ldr	r1, [pc, #240]	; (800b740 <pbuf_alloc+0x1e0>)
 800b64e:	483b      	ldr	r0, [pc, #236]	; (800b73c <pbuf_alloc+0x1dc>)
 800b650:	f00c fdf0 	bl	8018234 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800b654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b656:	2b00      	cmp	r3, #0
 800b658:	d102      	bne.n	800b660 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800b65a:	693b      	ldr	r3, [r7, #16]
 800b65c:	627b      	str	r3, [r7, #36]	; 0x24
 800b65e:	e002      	b.n	800b666 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800b660:	69fb      	ldr	r3, [r7, #28]
 800b662:	693a      	ldr	r2, [r7, #16]
 800b664:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800b666:	693b      	ldr	r3, [r7, #16]
 800b668:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800b66a:	8b7a      	ldrh	r2, [r7, #26]
 800b66c:	89fb      	ldrh	r3, [r7, #14]
 800b66e:	1ad3      	subs	r3, r2, r3
 800b670:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800b672:	2300      	movs	r3, #0
 800b674:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800b676:	8b7b      	ldrh	r3, [r7, #26]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d19e      	bne.n	800b5ba <pbuf_alloc+0x5a>
      break;
 800b67c:	e055      	b.n	800b72a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800b67e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b680:	3303      	adds	r3, #3
 800b682:	b29b      	uxth	r3, r3
 800b684:	f023 0303 	bic.w	r3, r3, #3
 800b688:	b29a      	uxth	r2, r3
 800b68a:	88bb      	ldrh	r3, [r7, #4]
 800b68c:	3303      	adds	r3, #3
 800b68e:	b29b      	uxth	r3, r3
 800b690:	f023 0303 	bic.w	r3, r3, #3
 800b694:	b29b      	uxth	r3, r3
 800b696:	4413      	add	r3, r2
 800b698:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800b69a:	8b3b      	ldrh	r3, [r7, #24]
 800b69c:	3310      	adds	r3, #16
 800b69e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b6a0:	8b3a      	ldrh	r2, [r7, #24]
 800b6a2:	88bb      	ldrh	r3, [r7, #4]
 800b6a4:	3303      	adds	r3, #3
 800b6a6:	f023 0303 	bic.w	r3, r3, #3
 800b6aa:	429a      	cmp	r2, r3
 800b6ac:	d306      	bcc.n	800b6bc <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800b6ae:	8afa      	ldrh	r2, [r7, #22]
 800b6b0:	88bb      	ldrh	r3, [r7, #4]
 800b6b2:	3303      	adds	r3, #3
 800b6b4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b6b8:	429a      	cmp	r2, r3
 800b6ba:	d201      	bcs.n	800b6c0 <pbuf_alloc+0x160>
        return NULL;
 800b6bc:	2300      	movs	r3, #0
 800b6be:	e035      	b.n	800b72c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800b6c0:	8afb      	ldrh	r3, [r7, #22]
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	f7ff f9b8 	bl	800aa38 <mem_malloc>
 800b6c8:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800b6ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d101      	bne.n	800b6d4 <pbuf_alloc+0x174>
        return NULL;
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	e02b      	b.n	800b72c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800b6d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b6d6:	3310      	adds	r3, #16
 800b6d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6da:	4413      	add	r3, r2
 800b6dc:	3303      	adds	r3, #3
 800b6de:	f023 0303 	bic.w	r3, r3, #3
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	88b9      	ldrh	r1, [r7, #4]
 800b6e6:	88ba      	ldrh	r2, [r7, #4]
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	9301      	str	r3, [sp, #4]
 800b6ec:	887b      	ldrh	r3, [r7, #2]
 800b6ee:	9300      	str	r3, [sp, #0]
 800b6f0:	460b      	mov	r3, r1
 800b6f2:	4601      	mov	r1, r0
 800b6f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b6f6:	f7ff ff09 	bl	800b50c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800b6fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6fc:	685b      	ldr	r3, [r3, #4]
 800b6fe:	f003 0303 	and.w	r3, r3, #3
 800b702:	2b00      	cmp	r3, #0
 800b704:	d010      	beq.n	800b728 <pbuf_alloc+0x1c8>
 800b706:	4b0b      	ldr	r3, [pc, #44]	; (800b734 <pbuf_alloc+0x1d4>)
 800b708:	f44f 7291 	mov.w	r2, #290	; 0x122
 800b70c:	490d      	ldr	r1, [pc, #52]	; (800b744 <pbuf_alloc+0x1e4>)
 800b70e:	480b      	ldr	r0, [pc, #44]	; (800b73c <pbuf_alloc+0x1dc>)
 800b710:	f00c fd90 	bl	8018234 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800b714:	e008      	b.n	800b728 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800b716:	4b07      	ldr	r3, [pc, #28]	; (800b734 <pbuf_alloc+0x1d4>)
 800b718:	f240 1227 	movw	r2, #295	; 0x127
 800b71c:	490a      	ldr	r1, [pc, #40]	; (800b748 <pbuf_alloc+0x1e8>)
 800b71e:	4807      	ldr	r0, [pc, #28]	; (800b73c <pbuf_alloc+0x1dc>)
 800b720:	f00c fd88 	bl	8018234 <iprintf>
      return NULL;
 800b724:	2300      	movs	r3, #0
 800b726:	e001      	b.n	800b72c <pbuf_alloc+0x1cc>
      break;
 800b728:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800b72a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b72c:	4618      	mov	r0, r3
 800b72e:	3728      	adds	r7, #40	; 0x28
 800b730:	46bd      	mov	sp, r7
 800b732:	bd80      	pop	{r7, pc}
 800b734:	08019170 	.word	0x08019170
 800b738:	080191a0 	.word	0x080191a0
 800b73c:	080191d0 	.word	0x080191d0
 800b740:	080191f8 	.word	0x080191f8
 800b744:	0801922c 	.word	0x0801922c
 800b748:	08019258 	.word	0x08019258

0800b74c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b086      	sub	sp, #24
 800b750:	af02      	add	r7, sp, #8
 800b752:	6078      	str	r0, [r7, #4]
 800b754:	460b      	mov	r3, r1
 800b756:	807b      	strh	r3, [r7, #2]
 800b758:	4613      	mov	r3, r2
 800b75a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800b75c:	883b      	ldrh	r3, [r7, #0]
 800b75e:	2b41      	cmp	r3, #65	; 0x41
 800b760:	d009      	beq.n	800b776 <pbuf_alloc_reference+0x2a>
 800b762:	883b      	ldrh	r3, [r7, #0]
 800b764:	2b01      	cmp	r3, #1
 800b766:	d006      	beq.n	800b776 <pbuf_alloc_reference+0x2a>
 800b768:	4b0f      	ldr	r3, [pc, #60]	; (800b7a8 <pbuf_alloc_reference+0x5c>)
 800b76a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800b76e:	490f      	ldr	r1, [pc, #60]	; (800b7ac <pbuf_alloc_reference+0x60>)
 800b770:	480f      	ldr	r0, [pc, #60]	; (800b7b0 <pbuf_alloc_reference+0x64>)
 800b772:	f00c fd5f 	bl	8018234 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800b776:	200b      	movs	r0, #11
 800b778:	f7ff fae0 	bl	800ad3c <memp_malloc>
 800b77c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d101      	bne.n	800b788 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800b784:	2300      	movs	r3, #0
 800b786:	e00b      	b.n	800b7a0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800b788:	8879      	ldrh	r1, [r7, #2]
 800b78a:	887a      	ldrh	r2, [r7, #2]
 800b78c:	2300      	movs	r3, #0
 800b78e:	9301      	str	r3, [sp, #4]
 800b790:	883b      	ldrh	r3, [r7, #0]
 800b792:	9300      	str	r3, [sp, #0]
 800b794:	460b      	mov	r3, r1
 800b796:	6879      	ldr	r1, [r7, #4]
 800b798:	68f8      	ldr	r0, [r7, #12]
 800b79a:	f7ff feb7 	bl	800b50c <pbuf_init_alloced_pbuf>
  return p;
 800b79e:	68fb      	ldr	r3, [r7, #12]
}
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	3710      	adds	r7, #16
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}
 800b7a8:	08019170 	.word	0x08019170
 800b7ac:	08019274 	.word	0x08019274
 800b7b0:	080191d0 	.word	0x080191d0

0800b7b4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b088      	sub	sp, #32
 800b7b8:	af02      	add	r7, sp, #8
 800b7ba:	607b      	str	r3, [r7, #4]
 800b7bc:	4603      	mov	r3, r0
 800b7be:	73fb      	strb	r3, [r7, #15]
 800b7c0:	460b      	mov	r3, r1
 800b7c2:	81bb      	strh	r3, [r7, #12]
 800b7c4:	4613      	mov	r3, r2
 800b7c6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800b7c8:	7bfb      	ldrb	r3, [r7, #15]
 800b7ca:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800b7cc:	8a7b      	ldrh	r3, [r7, #18]
 800b7ce:	3303      	adds	r3, #3
 800b7d0:	f023 0203 	bic.w	r2, r3, #3
 800b7d4:	89bb      	ldrh	r3, [r7, #12]
 800b7d6:	441a      	add	r2, r3
 800b7d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b7da:	429a      	cmp	r2, r3
 800b7dc:	d901      	bls.n	800b7e2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800b7de:	2300      	movs	r3, #0
 800b7e0:	e018      	b.n	800b814 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800b7e2:	6a3b      	ldr	r3, [r7, #32]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d007      	beq.n	800b7f8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800b7e8:	8a7b      	ldrh	r3, [r7, #18]
 800b7ea:	3303      	adds	r3, #3
 800b7ec:	f023 0303 	bic.w	r3, r3, #3
 800b7f0:	6a3a      	ldr	r2, [r7, #32]
 800b7f2:	4413      	add	r3, r2
 800b7f4:	617b      	str	r3, [r7, #20]
 800b7f6:	e001      	b.n	800b7fc <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800b7fc:	6878      	ldr	r0, [r7, #4]
 800b7fe:	89b9      	ldrh	r1, [r7, #12]
 800b800:	89ba      	ldrh	r2, [r7, #12]
 800b802:	2302      	movs	r3, #2
 800b804:	9301      	str	r3, [sp, #4]
 800b806:	897b      	ldrh	r3, [r7, #10]
 800b808:	9300      	str	r3, [sp, #0]
 800b80a:	460b      	mov	r3, r1
 800b80c:	6979      	ldr	r1, [r7, #20]
 800b80e:	f7ff fe7d 	bl	800b50c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800b812:	687b      	ldr	r3, [r7, #4]
}
 800b814:	4618      	mov	r0, r3
 800b816:	3718      	adds	r7, #24
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}

0800b81c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b084      	sub	sp, #16
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
 800b824:	460b      	mov	r3, r1
 800b826:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d106      	bne.n	800b83c <pbuf_realloc+0x20>
 800b82e:	4b3a      	ldr	r3, [pc, #232]	; (800b918 <pbuf_realloc+0xfc>)
 800b830:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800b834:	4939      	ldr	r1, [pc, #228]	; (800b91c <pbuf_realloc+0x100>)
 800b836:	483a      	ldr	r0, [pc, #232]	; (800b920 <pbuf_realloc+0x104>)
 800b838:	f00c fcfc 	bl	8018234 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	891b      	ldrh	r3, [r3, #8]
 800b840:	887a      	ldrh	r2, [r7, #2]
 800b842:	429a      	cmp	r2, r3
 800b844:	d263      	bcs.n	800b90e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	891a      	ldrh	r2, [r3, #8]
 800b84a:	887b      	ldrh	r3, [r7, #2]
 800b84c:	1ad3      	subs	r3, r2, r3
 800b84e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800b850:	887b      	ldrh	r3, [r7, #2]
 800b852:	817b      	strh	r3, [r7, #10]
  q = p;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800b858:	e018      	b.n	800b88c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	895b      	ldrh	r3, [r3, #10]
 800b85e:	897a      	ldrh	r2, [r7, #10]
 800b860:	1ad3      	subs	r3, r2, r3
 800b862:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	891a      	ldrh	r2, [r3, #8]
 800b868:	893b      	ldrh	r3, [r7, #8]
 800b86a:	1ad3      	subs	r3, r2, r3
 800b86c:	b29a      	uxth	r2, r3
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d106      	bne.n	800b88c <pbuf_realloc+0x70>
 800b87e:	4b26      	ldr	r3, [pc, #152]	; (800b918 <pbuf_realloc+0xfc>)
 800b880:	f240 12af 	movw	r2, #431	; 0x1af
 800b884:	4927      	ldr	r1, [pc, #156]	; (800b924 <pbuf_realloc+0x108>)
 800b886:	4826      	ldr	r0, [pc, #152]	; (800b920 <pbuf_realloc+0x104>)
 800b888:	f00c fcd4 	bl	8018234 <iprintf>
  while (rem_len > q->len) {
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	895b      	ldrh	r3, [r3, #10]
 800b890:	897a      	ldrh	r2, [r7, #10]
 800b892:	429a      	cmp	r2, r3
 800b894:	d8e1      	bhi.n	800b85a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	7b1b      	ldrb	r3, [r3, #12]
 800b89a:	f003 030f 	and.w	r3, r3, #15
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d121      	bne.n	800b8e6 <pbuf_realloc+0xca>
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	895b      	ldrh	r3, [r3, #10]
 800b8a6:	897a      	ldrh	r2, [r7, #10]
 800b8a8:	429a      	cmp	r2, r3
 800b8aa:	d01c      	beq.n	800b8e6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	7b5b      	ldrb	r3, [r3, #13]
 800b8b0:	f003 0302 	and.w	r3, r3, #2
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d116      	bne.n	800b8e6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	685a      	ldr	r2, [r3, #4]
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	1ad3      	subs	r3, r2, r3
 800b8c0:	b29a      	uxth	r2, r3
 800b8c2:	897b      	ldrh	r3, [r7, #10]
 800b8c4:	4413      	add	r3, r2
 800b8c6:	b29b      	uxth	r3, r3
 800b8c8:	4619      	mov	r1, r3
 800b8ca:	68f8      	ldr	r0, [r7, #12]
 800b8cc:	f7fe ffaa 	bl	800a824 <mem_trim>
 800b8d0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d106      	bne.n	800b8e6 <pbuf_realloc+0xca>
 800b8d8:	4b0f      	ldr	r3, [pc, #60]	; (800b918 <pbuf_realloc+0xfc>)
 800b8da:	f240 12bd 	movw	r2, #445	; 0x1bd
 800b8de:	4912      	ldr	r1, [pc, #72]	; (800b928 <pbuf_realloc+0x10c>)
 800b8e0:	480f      	ldr	r0, [pc, #60]	; (800b920 <pbuf_realloc+0x104>)
 800b8e2:	f00c fca7 	bl	8018234 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	897a      	ldrh	r2, [r7, #10]
 800b8ea:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	895a      	ldrh	r2, [r3, #10]
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d004      	beq.n	800b906 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	4618      	mov	r0, r3
 800b902:	f000 f911 	bl	800bb28 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	2200      	movs	r2, #0
 800b90a:	601a      	str	r2, [r3, #0]
 800b90c:	e000      	b.n	800b910 <pbuf_realloc+0xf4>
    return;
 800b90e:	bf00      	nop

}
 800b910:	3710      	adds	r7, #16
 800b912:	46bd      	mov	sp, r7
 800b914:	bd80      	pop	{r7, pc}
 800b916:	bf00      	nop
 800b918:	08019170 	.word	0x08019170
 800b91c:	08019288 	.word	0x08019288
 800b920:	080191d0 	.word	0x080191d0
 800b924:	080192a0 	.word	0x080192a0
 800b928:	080192b8 	.word	0x080192b8

0800b92c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b086      	sub	sp, #24
 800b930:	af00      	add	r7, sp, #0
 800b932:	60f8      	str	r0, [r7, #12]
 800b934:	60b9      	str	r1, [r7, #8]
 800b936:	4613      	mov	r3, r2
 800b938:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d106      	bne.n	800b94e <pbuf_add_header_impl+0x22>
 800b940:	4b2b      	ldr	r3, [pc, #172]	; (800b9f0 <pbuf_add_header_impl+0xc4>)
 800b942:	f240 12df 	movw	r2, #479	; 0x1df
 800b946:	492b      	ldr	r1, [pc, #172]	; (800b9f4 <pbuf_add_header_impl+0xc8>)
 800b948:	482b      	ldr	r0, [pc, #172]	; (800b9f8 <pbuf_add_header_impl+0xcc>)
 800b94a:	f00c fc73 	bl	8018234 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d003      	beq.n	800b95c <pbuf_add_header_impl+0x30>
 800b954:	68bb      	ldr	r3, [r7, #8]
 800b956:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b95a:	d301      	bcc.n	800b960 <pbuf_add_header_impl+0x34>
    return 1;
 800b95c:	2301      	movs	r3, #1
 800b95e:	e043      	b.n	800b9e8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800b960:	68bb      	ldr	r3, [r7, #8]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d101      	bne.n	800b96a <pbuf_add_header_impl+0x3e>
    return 0;
 800b966:	2300      	movs	r3, #0
 800b968:	e03e      	b.n	800b9e8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800b96a:	68bb      	ldr	r3, [r7, #8]
 800b96c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	891a      	ldrh	r2, [r3, #8]
 800b972:	8a7b      	ldrh	r3, [r7, #18]
 800b974:	4413      	add	r3, r2
 800b976:	b29b      	uxth	r3, r3
 800b978:	8a7a      	ldrh	r2, [r7, #18]
 800b97a:	429a      	cmp	r2, r3
 800b97c:	d901      	bls.n	800b982 <pbuf_add_header_impl+0x56>
    return 1;
 800b97e:	2301      	movs	r3, #1
 800b980:	e032      	b.n	800b9e8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	7b1b      	ldrb	r3, [r3, #12]
 800b986:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800b988:	8a3b      	ldrh	r3, [r7, #16]
 800b98a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d00c      	beq.n	800b9ac <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	685a      	ldr	r2, [r3, #4]
 800b996:	68bb      	ldr	r3, [r7, #8]
 800b998:	425b      	negs	r3, r3
 800b99a:	4413      	add	r3, r2
 800b99c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	3310      	adds	r3, #16
 800b9a2:	697a      	ldr	r2, [r7, #20]
 800b9a4:	429a      	cmp	r2, r3
 800b9a6:	d20d      	bcs.n	800b9c4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	e01d      	b.n	800b9e8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800b9ac:	79fb      	ldrb	r3, [r7, #7]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d006      	beq.n	800b9c0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	685a      	ldr	r2, [r3, #4]
 800b9b6:	68bb      	ldr	r3, [r7, #8]
 800b9b8:	425b      	negs	r3, r3
 800b9ba:	4413      	add	r3, r2
 800b9bc:	617b      	str	r3, [r7, #20]
 800b9be:	e001      	b.n	800b9c4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800b9c0:	2301      	movs	r3, #1
 800b9c2:	e011      	b.n	800b9e8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	697a      	ldr	r2, [r7, #20]
 800b9c8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	895a      	ldrh	r2, [r3, #10]
 800b9ce:	8a7b      	ldrh	r3, [r7, #18]
 800b9d0:	4413      	add	r3, r2
 800b9d2:	b29a      	uxth	r2, r3
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	891a      	ldrh	r2, [r3, #8]
 800b9dc:	8a7b      	ldrh	r3, [r7, #18]
 800b9de:	4413      	add	r3, r2
 800b9e0:	b29a      	uxth	r2, r3
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	811a      	strh	r2, [r3, #8]


  return 0;
 800b9e6:	2300      	movs	r3, #0
}
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	3718      	adds	r7, #24
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	bd80      	pop	{r7, pc}
 800b9f0:	08019170 	.word	0x08019170
 800b9f4:	080192d4 	.word	0x080192d4
 800b9f8:	080191d0 	.word	0x080191d0

0800b9fc <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b082      	sub	sp, #8
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
 800ba04:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800ba06:	2200      	movs	r2, #0
 800ba08:	6839      	ldr	r1, [r7, #0]
 800ba0a:	6878      	ldr	r0, [r7, #4]
 800ba0c:	f7ff ff8e 	bl	800b92c <pbuf_add_header_impl>
 800ba10:	4603      	mov	r3, r0
}
 800ba12:	4618      	mov	r0, r3
 800ba14:	3708      	adds	r7, #8
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bd80      	pop	{r7, pc}
	...

0800ba1c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b084      	sub	sp, #16
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
 800ba24:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d106      	bne.n	800ba3a <pbuf_remove_header+0x1e>
 800ba2c:	4b20      	ldr	r3, [pc, #128]	; (800bab0 <pbuf_remove_header+0x94>)
 800ba2e:	f240 224b 	movw	r2, #587	; 0x24b
 800ba32:	4920      	ldr	r1, [pc, #128]	; (800bab4 <pbuf_remove_header+0x98>)
 800ba34:	4820      	ldr	r0, [pc, #128]	; (800bab8 <pbuf_remove_header+0x9c>)
 800ba36:	f00c fbfd 	bl	8018234 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d003      	beq.n	800ba48 <pbuf_remove_header+0x2c>
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba46:	d301      	bcc.n	800ba4c <pbuf_remove_header+0x30>
    return 1;
 800ba48:	2301      	movs	r3, #1
 800ba4a:	e02c      	b.n	800baa6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d101      	bne.n	800ba56 <pbuf_remove_header+0x3a>
    return 0;
 800ba52:	2300      	movs	r3, #0
 800ba54:	e027      	b.n	800baa6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	895b      	ldrh	r3, [r3, #10]
 800ba5e:	89fa      	ldrh	r2, [r7, #14]
 800ba60:	429a      	cmp	r2, r3
 800ba62:	d908      	bls.n	800ba76 <pbuf_remove_header+0x5a>
 800ba64:	4b12      	ldr	r3, [pc, #72]	; (800bab0 <pbuf_remove_header+0x94>)
 800ba66:	f240 2255 	movw	r2, #597	; 0x255
 800ba6a:	4914      	ldr	r1, [pc, #80]	; (800babc <pbuf_remove_header+0xa0>)
 800ba6c:	4812      	ldr	r0, [pc, #72]	; (800bab8 <pbuf_remove_header+0x9c>)
 800ba6e:	f00c fbe1 	bl	8018234 <iprintf>
 800ba72:	2301      	movs	r3, #1
 800ba74:	e017      	b.n	800baa6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	685b      	ldr	r3, [r3, #4]
 800ba7a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	685a      	ldr	r2, [r3, #4]
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	441a      	add	r2, r3
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	895a      	ldrh	r2, [r3, #10]
 800ba8c:	89fb      	ldrh	r3, [r7, #14]
 800ba8e:	1ad3      	subs	r3, r2, r3
 800ba90:	b29a      	uxth	r2, r3
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	891a      	ldrh	r2, [r3, #8]
 800ba9a:	89fb      	ldrh	r3, [r7, #14]
 800ba9c:	1ad3      	subs	r3, r2, r3
 800ba9e:	b29a      	uxth	r2, r3
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800baa4:	2300      	movs	r3, #0
}
 800baa6:	4618      	mov	r0, r3
 800baa8:	3710      	adds	r7, #16
 800baaa:	46bd      	mov	sp, r7
 800baac:	bd80      	pop	{r7, pc}
 800baae:	bf00      	nop
 800bab0:	08019170 	.word	0x08019170
 800bab4:	080192d4 	.word	0x080192d4
 800bab8:	080191d0 	.word	0x080191d0
 800babc:	080192e0 	.word	0x080192e0

0800bac0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b082      	sub	sp, #8
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
 800bac8:	460b      	mov	r3, r1
 800baca:	807b      	strh	r3, [r7, #2]
 800bacc:	4613      	mov	r3, r2
 800bace:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800bad0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	da08      	bge.n	800baea <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800bad8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800badc:	425b      	negs	r3, r3
 800bade:	4619      	mov	r1, r3
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	f7ff ff9b 	bl	800ba1c <pbuf_remove_header>
 800bae6:	4603      	mov	r3, r0
 800bae8:	e007      	b.n	800bafa <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800baea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800baee:	787a      	ldrb	r2, [r7, #1]
 800baf0:	4619      	mov	r1, r3
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	f7ff ff1a 	bl	800b92c <pbuf_add_header_impl>
 800baf8:	4603      	mov	r3, r0
  }
}
 800bafa:	4618      	mov	r0, r3
 800bafc:	3708      	adds	r7, #8
 800bafe:	46bd      	mov	sp, r7
 800bb00:	bd80      	pop	{r7, pc}

0800bb02 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800bb02:	b580      	push	{r7, lr}
 800bb04:	b082      	sub	sp, #8
 800bb06:	af00      	add	r7, sp, #0
 800bb08:	6078      	str	r0, [r7, #4]
 800bb0a:	460b      	mov	r3, r1
 800bb0c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800bb0e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bb12:	2201      	movs	r2, #1
 800bb14:	4619      	mov	r1, r3
 800bb16:	6878      	ldr	r0, [r7, #4]
 800bb18:	f7ff ffd2 	bl	800bac0 <pbuf_header_impl>
 800bb1c:	4603      	mov	r3, r0
}
 800bb1e:	4618      	mov	r0, r3
 800bb20:	3708      	adds	r7, #8
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bd80      	pop	{r7, pc}
	...

0800bb28 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b088      	sub	sp, #32
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d10b      	bne.n	800bb4e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d106      	bne.n	800bb4a <pbuf_free+0x22>
 800bb3c:	4b3b      	ldr	r3, [pc, #236]	; (800bc2c <pbuf_free+0x104>)
 800bb3e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800bb42:	493b      	ldr	r1, [pc, #236]	; (800bc30 <pbuf_free+0x108>)
 800bb44:	483b      	ldr	r0, [pc, #236]	; (800bc34 <pbuf_free+0x10c>)
 800bb46:	f00c fb75 	bl	8018234 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	e069      	b.n	800bc22 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800bb4e:	2300      	movs	r3, #0
 800bb50:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800bb52:	e062      	b.n	800bc1a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800bb54:	f008 faa2 	bl	801409c <sys_arch_protect>
 800bb58:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	7b9b      	ldrb	r3, [r3, #14]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d106      	bne.n	800bb70 <pbuf_free+0x48>
 800bb62:	4b32      	ldr	r3, [pc, #200]	; (800bc2c <pbuf_free+0x104>)
 800bb64:	f240 22f1 	movw	r2, #753	; 0x2f1
 800bb68:	4933      	ldr	r1, [pc, #204]	; (800bc38 <pbuf_free+0x110>)
 800bb6a:	4832      	ldr	r0, [pc, #200]	; (800bc34 <pbuf_free+0x10c>)
 800bb6c:	f00c fb62 	bl	8018234 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	7b9b      	ldrb	r3, [r3, #14]
 800bb74:	3b01      	subs	r3, #1
 800bb76:	b2da      	uxtb	r2, r3
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	739a      	strb	r2, [r3, #14]
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	7b9b      	ldrb	r3, [r3, #14]
 800bb80:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800bb82:	69b8      	ldr	r0, [r7, #24]
 800bb84:	f008 fa98 	bl	80140b8 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800bb88:	7dfb      	ldrb	r3, [r7, #23]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d143      	bne.n	800bc16 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	7b1b      	ldrb	r3, [r3, #12]
 800bb98:	f003 030f 	and.w	r3, r3, #15
 800bb9c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	7b5b      	ldrb	r3, [r3, #13]
 800bba2:	f003 0302 	and.w	r3, r3, #2
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d011      	beq.n	800bbce <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800bbae:	68bb      	ldr	r3, [r7, #8]
 800bbb0:	691b      	ldr	r3, [r3, #16]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d106      	bne.n	800bbc4 <pbuf_free+0x9c>
 800bbb6:	4b1d      	ldr	r3, [pc, #116]	; (800bc2c <pbuf_free+0x104>)
 800bbb8:	f240 22ff 	movw	r2, #767	; 0x2ff
 800bbbc:	491f      	ldr	r1, [pc, #124]	; (800bc3c <pbuf_free+0x114>)
 800bbbe:	481d      	ldr	r0, [pc, #116]	; (800bc34 <pbuf_free+0x10c>)
 800bbc0:	f00c fb38 	bl	8018234 <iprintf>
        pc->custom_free_function(p);
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	691b      	ldr	r3, [r3, #16]
 800bbc8:	6878      	ldr	r0, [r7, #4]
 800bbca:	4798      	blx	r3
 800bbcc:	e01d      	b.n	800bc0a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800bbce:	7bfb      	ldrb	r3, [r7, #15]
 800bbd0:	2b02      	cmp	r3, #2
 800bbd2:	d104      	bne.n	800bbde <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800bbd4:	6879      	ldr	r1, [r7, #4]
 800bbd6:	200c      	movs	r0, #12
 800bbd8:	f7ff f902 	bl	800ade0 <memp_free>
 800bbdc:	e015      	b.n	800bc0a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800bbde:	7bfb      	ldrb	r3, [r7, #15]
 800bbe0:	2b01      	cmp	r3, #1
 800bbe2:	d104      	bne.n	800bbee <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800bbe4:	6879      	ldr	r1, [r7, #4]
 800bbe6:	200b      	movs	r0, #11
 800bbe8:	f7ff f8fa 	bl	800ade0 <memp_free>
 800bbec:	e00d      	b.n	800bc0a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800bbee:	7bfb      	ldrb	r3, [r7, #15]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d103      	bne.n	800bbfc <pbuf_free+0xd4>
          mem_free(p);
 800bbf4:	6878      	ldr	r0, [r7, #4]
 800bbf6:	f7fe fd85 	bl	800a704 <mem_free>
 800bbfa:	e006      	b.n	800bc0a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800bbfc:	4b0b      	ldr	r3, [pc, #44]	; (800bc2c <pbuf_free+0x104>)
 800bbfe:	f240 320f 	movw	r2, #783	; 0x30f
 800bc02:	490f      	ldr	r1, [pc, #60]	; (800bc40 <pbuf_free+0x118>)
 800bc04:	480b      	ldr	r0, [pc, #44]	; (800bc34 <pbuf_free+0x10c>)
 800bc06:	f00c fb15 	bl	8018234 <iprintf>
        }
      }
      count++;
 800bc0a:	7ffb      	ldrb	r3, [r7, #31]
 800bc0c:	3301      	adds	r3, #1
 800bc0e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800bc10:	693b      	ldr	r3, [r7, #16]
 800bc12:	607b      	str	r3, [r7, #4]
 800bc14:	e001      	b.n	800bc1a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800bc16:	2300      	movs	r3, #0
 800bc18:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d199      	bne.n	800bb54 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800bc20:	7ffb      	ldrb	r3, [r7, #31]
}
 800bc22:	4618      	mov	r0, r3
 800bc24:	3720      	adds	r7, #32
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}
 800bc2a:	bf00      	nop
 800bc2c:	08019170 	.word	0x08019170
 800bc30:	080192d4 	.word	0x080192d4
 800bc34:	080191d0 	.word	0x080191d0
 800bc38:	08019300 	.word	0x08019300
 800bc3c:	08019318 	.word	0x08019318
 800bc40:	0801933c 	.word	0x0801933c

0800bc44 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800bc44:	b480      	push	{r7}
 800bc46:	b085      	sub	sp, #20
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800bc50:	e005      	b.n	800bc5e <pbuf_clen+0x1a>
    ++len;
 800bc52:	89fb      	ldrh	r3, [r7, #14]
 800bc54:	3301      	adds	r3, #1
 800bc56:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d1f6      	bne.n	800bc52 <pbuf_clen+0xe>
  }
  return len;
 800bc64:	89fb      	ldrh	r3, [r7, #14]
}
 800bc66:	4618      	mov	r0, r3
 800bc68:	3714      	adds	r7, #20
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc70:	4770      	bx	lr
	...

0800bc74 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b084      	sub	sp, #16
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d016      	beq.n	800bcb0 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800bc82:	f008 fa0b 	bl	801409c <sys_arch_protect>
 800bc86:	60f8      	str	r0, [r7, #12]
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	7b9b      	ldrb	r3, [r3, #14]
 800bc8c:	3301      	adds	r3, #1
 800bc8e:	b2da      	uxtb	r2, r3
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	739a      	strb	r2, [r3, #14]
 800bc94:	68f8      	ldr	r0, [r7, #12]
 800bc96:	f008 fa0f 	bl	80140b8 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	7b9b      	ldrb	r3, [r3, #14]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d106      	bne.n	800bcb0 <pbuf_ref+0x3c>
 800bca2:	4b05      	ldr	r3, [pc, #20]	; (800bcb8 <pbuf_ref+0x44>)
 800bca4:	f240 3242 	movw	r2, #834	; 0x342
 800bca8:	4904      	ldr	r1, [pc, #16]	; (800bcbc <pbuf_ref+0x48>)
 800bcaa:	4805      	ldr	r0, [pc, #20]	; (800bcc0 <pbuf_ref+0x4c>)
 800bcac:	f00c fac2 	bl	8018234 <iprintf>
  }
}
 800bcb0:	bf00      	nop
 800bcb2:	3710      	adds	r7, #16
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	bd80      	pop	{r7, pc}
 800bcb8:	08019170 	.word	0x08019170
 800bcbc:	08019350 	.word	0x08019350
 800bcc0:	080191d0 	.word	0x080191d0

0800bcc4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b084      	sub	sp, #16
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
 800bccc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d002      	beq.n	800bcda <pbuf_cat+0x16>
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d107      	bne.n	800bcea <pbuf_cat+0x26>
 800bcda:	4b20      	ldr	r3, [pc, #128]	; (800bd5c <pbuf_cat+0x98>)
 800bcdc:	f240 3259 	movw	r2, #857	; 0x359
 800bce0:	491f      	ldr	r1, [pc, #124]	; (800bd60 <pbuf_cat+0x9c>)
 800bce2:	4820      	ldr	r0, [pc, #128]	; (800bd64 <pbuf_cat+0xa0>)
 800bce4:	f00c faa6 	bl	8018234 <iprintf>
 800bce8:	e034      	b.n	800bd54 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	60fb      	str	r3, [r7, #12]
 800bcee:	e00a      	b.n	800bd06 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	891a      	ldrh	r2, [r3, #8]
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	891b      	ldrh	r3, [r3, #8]
 800bcf8:	4413      	add	r3, r2
 800bcfa:	b29a      	uxth	r2, r3
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	60fb      	str	r3, [r7, #12]
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d1f0      	bne.n	800bcf0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	891a      	ldrh	r2, [r3, #8]
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	895b      	ldrh	r3, [r3, #10]
 800bd16:	429a      	cmp	r2, r3
 800bd18:	d006      	beq.n	800bd28 <pbuf_cat+0x64>
 800bd1a:	4b10      	ldr	r3, [pc, #64]	; (800bd5c <pbuf_cat+0x98>)
 800bd1c:	f240 3262 	movw	r2, #866	; 0x362
 800bd20:	4911      	ldr	r1, [pc, #68]	; (800bd68 <pbuf_cat+0xa4>)
 800bd22:	4810      	ldr	r0, [pc, #64]	; (800bd64 <pbuf_cat+0xa0>)
 800bd24:	f00c fa86 	bl	8018234 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d006      	beq.n	800bd3e <pbuf_cat+0x7a>
 800bd30:	4b0a      	ldr	r3, [pc, #40]	; (800bd5c <pbuf_cat+0x98>)
 800bd32:	f240 3263 	movw	r2, #867	; 0x363
 800bd36:	490d      	ldr	r1, [pc, #52]	; (800bd6c <pbuf_cat+0xa8>)
 800bd38:	480a      	ldr	r0, [pc, #40]	; (800bd64 <pbuf_cat+0xa0>)
 800bd3a:	f00c fa7b 	bl	8018234 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	891a      	ldrh	r2, [r3, #8]
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	891b      	ldrh	r3, [r3, #8]
 800bd46:	4413      	add	r3, r2
 800bd48:	b29a      	uxth	r2, r3
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	683a      	ldr	r2, [r7, #0]
 800bd52:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800bd54:	3710      	adds	r7, #16
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bd80      	pop	{r7, pc}
 800bd5a:	bf00      	nop
 800bd5c:	08019170 	.word	0x08019170
 800bd60:	08019364 	.word	0x08019364
 800bd64:	080191d0 	.word	0x080191d0
 800bd68:	0801939c 	.word	0x0801939c
 800bd6c:	080193cc 	.word	0x080193cc

0800bd70 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b086      	sub	sp, #24
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
 800bd78:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	617b      	str	r3, [r7, #20]
 800bd7e:	2300      	movs	r3, #0
 800bd80:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d008      	beq.n	800bd9a <pbuf_copy+0x2a>
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d005      	beq.n	800bd9a <pbuf_copy+0x2a>
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	891a      	ldrh	r2, [r3, #8]
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	891b      	ldrh	r3, [r3, #8]
 800bd96:	429a      	cmp	r2, r3
 800bd98:	d209      	bcs.n	800bdae <pbuf_copy+0x3e>
 800bd9a:	4b57      	ldr	r3, [pc, #348]	; (800bef8 <pbuf_copy+0x188>)
 800bd9c:	f240 32c9 	movw	r2, #969	; 0x3c9
 800bda0:	4956      	ldr	r1, [pc, #344]	; (800befc <pbuf_copy+0x18c>)
 800bda2:	4857      	ldr	r0, [pc, #348]	; (800bf00 <pbuf_copy+0x190>)
 800bda4:	f00c fa46 	bl	8018234 <iprintf>
 800bda8:	f06f 030f 	mvn.w	r3, #15
 800bdac:	e09f      	b.n	800beee <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	895b      	ldrh	r3, [r3, #10]
 800bdb2:	461a      	mov	r2, r3
 800bdb4:	697b      	ldr	r3, [r7, #20]
 800bdb6:	1ad2      	subs	r2, r2, r3
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	895b      	ldrh	r3, [r3, #10]
 800bdbc:	4619      	mov	r1, r3
 800bdbe:	693b      	ldr	r3, [r7, #16]
 800bdc0:	1acb      	subs	r3, r1, r3
 800bdc2:	429a      	cmp	r2, r3
 800bdc4:	d306      	bcc.n	800bdd4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	895b      	ldrh	r3, [r3, #10]
 800bdca:	461a      	mov	r2, r3
 800bdcc:	693b      	ldr	r3, [r7, #16]
 800bdce:	1ad3      	subs	r3, r2, r3
 800bdd0:	60fb      	str	r3, [r7, #12]
 800bdd2:	e005      	b.n	800bde0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	895b      	ldrh	r3, [r3, #10]
 800bdd8:	461a      	mov	r2, r3
 800bdda:	697b      	ldr	r3, [r7, #20]
 800bddc:	1ad3      	subs	r3, r2, r3
 800bdde:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	685a      	ldr	r2, [r3, #4]
 800bde4:	697b      	ldr	r3, [r7, #20]
 800bde6:	18d0      	adds	r0, r2, r3
 800bde8:	683b      	ldr	r3, [r7, #0]
 800bdea:	685a      	ldr	r2, [r3, #4]
 800bdec:	693b      	ldr	r3, [r7, #16]
 800bdee:	4413      	add	r3, r2
 800bdf0:	68fa      	ldr	r2, [r7, #12]
 800bdf2:	4619      	mov	r1, r3
 800bdf4:	f00b febf 	bl	8017b76 <memcpy>
    offset_to += len;
 800bdf8:	697a      	ldr	r2, [r7, #20]
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	4413      	add	r3, r2
 800bdfe:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800be00:	693a      	ldr	r2, [r7, #16]
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	4413      	add	r3, r2
 800be06:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	895b      	ldrh	r3, [r3, #10]
 800be0c:	461a      	mov	r2, r3
 800be0e:	697b      	ldr	r3, [r7, #20]
 800be10:	4293      	cmp	r3, r2
 800be12:	d906      	bls.n	800be22 <pbuf_copy+0xb2>
 800be14:	4b38      	ldr	r3, [pc, #224]	; (800bef8 <pbuf_copy+0x188>)
 800be16:	f240 32d9 	movw	r2, #985	; 0x3d9
 800be1a:	493a      	ldr	r1, [pc, #232]	; (800bf04 <pbuf_copy+0x194>)
 800be1c:	4838      	ldr	r0, [pc, #224]	; (800bf00 <pbuf_copy+0x190>)
 800be1e:	f00c fa09 	bl	8018234 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800be22:	683b      	ldr	r3, [r7, #0]
 800be24:	895b      	ldrh	r3, [r3, #10]
 800be26:	461a      	mov	r2, r3
 800be28:	693b      	ldr	r3, [r7, #16]
 800be2a:	4293      	cmp	r3, r2
 800be2c:	d906      	bls.n	800be3c <pbuf_copy+0xcc>
 800be2e:	4b32      	ldr	r3, [pc, #200]	; (800bef8 <pbuf_copy+0x188>)
 800be30:	f240 32da 	movw	r2, #986	; 0x3da
 800be34:	4934      	ldr	r1, [pc, #208]	; (800bf08 <pbuf_copy+0x198>)
 800be36:	4832      	ldr	r0, [pc, #200]	; (800bf00 <pbuf_copy+0x190>)
 800be38:	f00c f9fc 	bl	8018234 <iprintf>
    if (offset_from >= p_from->len) {
 800be3c:	683b      	ldr	r3, [r7, #0]
 800be3e:	895b      	ldrh	r3, [r3, #10]
 800be40:	461a      	mov	r2, r3
 800be42:	693b      	ldr	r3, [r7, #16]
 800be44:	4293      	cmp	r3, r2
 800be46:	d304      	bcc.n	800be52 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800be48:	2300      	movs	r3, #0
 800be4a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800be4c:	683b      	ldr	r3, [r7, #0]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	895b      	ldrh	r3, [r3, #10]
 800be56:	461a      	mov	r2, r3
 800be58:	697b      	ldr	r3, [r7, #20]
 800be5a:	4293      	cmp	r3, r2
 800be5c:	d114      	bne.n	800be88 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800be5e:	2300      	movs	r3, #0
 800be60:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d10c      	bne.n	800be88 <pbuf_copy+0x118>
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d009      	beq.n	800be88 <pbuf_copy+0x118>
 800be74:	4b20      	ldr	r3, [pc, #128]	; (800bef8 <pbuf_copy+0x188>)
 800be76:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800be7a:	4924      	ldr	r1, [pc, #144]	; (800bf0c <pbuf_copy+0x19c>)
 800be7c:	4820      	ldr	r0, [pc, #128]	; (800bf00 <pbuf_copy+0x190>)
 800be7e:	f00c f9d9 	bl	8018234 <iprintf>
 800be82:	f06f 030f 	mvn.w	r3, #15
 800be86:	e032      	b.n	800beee <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800be88:	683b      	ldr	r3, [r7, #0]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d013      	beq.n	800beb6 <pbuf_copy+0x146>
 800be8e:	683b      	ldr	r3, [r7, #0]
 800be90:	895a      	ldrh	r2, [r3, #10]
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	891b      	ldrh	r3, [r3, #8]
 800be96:	429a      	cmp	r2, r3
 800be98:	d10d      	bne.n	800beb6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d009      	beq.n	800beb6 <pbuf_copy+0x146>
 800bea2:	4b15      	ldr	r3, [pc, #84]	; (800bef8 <pbuf_copy+0x188>)
 800bea4:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800bea8:	4919      	ldr	r1, [pc, #100]	; (800bf10 <pbuf_copy+0x1a0>)
 800beaa:	4815      	ldr	r0, [pc, #84]	; (800bf00 <pbuf_copy+0x190>)
 800beac:	f00c f9c2 	bl	8018234 <iprintf>
 800beb0:	f06f 0305 	mvn.w	r3, #5
 800beb4:	e01b      	b.n	800beee <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d013      	beq.n	800bee4 <pbuf_copy+0x174>
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	895a      	ldrh	r2, [r3, #10]
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	891b      	ldrh	r3, [r3, #8]
 800bec4:	429a      	cmp	r2, r3
 800bec6:	d10d      	bne.n	800bee4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d009      	beq.n	800bee4 <pbuf_copy+0x174>
 800bed0:	4b09      	ldr	r3, [pc, #36]	; (800bef8 <pbuf_copy+0x188>)
 800bed2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800bed6:	490e      	ldr	r1, [pc, #56]	; (800bf10 <pbuf_copy+0x1a0>)
 800bed8:	4809      	ldr	r0, [pc, #36]	; (800bf00 <pbuf_copy+0x190>)
 800beda:	f00c f9ab 	bl	8018234 <iprintf>
 800bede:	f06f 0305 	mvn.w	r3, #5
 800bee2:	e004      	b.n	800beee <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800bee4:	683b      	ldr	r3, [r7, #0]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	f47f af61 	bne.w	800bdae <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800beec:	2300      	movs	r3, #0
}
 800beee:	4618      	mov	r0, r3
 800bef0:	3718      	adds	r7, #24
 800bef2:	46bd      	mov	sp, r7
 800bef4:	bd80      	pop	{r7, pc}
 800bef6:	bf00      	nop
 800bef8:	08019170 	.word	0x08019170
 800befc:	08019418 	.word	0x08019418
 800bf00:	080191d0 	.word	0x080191d0
 800bf04:	08019448 	.word	0x08019448
 800bf08:	08019460 	.word	0x08019460
 800bf0c:	0801947c 	.word	0x0801947c
 800bf10:	0801948c 	.word	0x0801948c

0800bf14 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b088      	sub	sp, #32
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	60f8      	str	r0, [r7, #12]
 800bf1c:	60b9      	str	r1, [r7, #8]
 800bf1e:	4611      	mov	r1, r2
 800bf20:	461a      	mov	r2, r3
 800bf22:	460b      	mov	r3, r1
 800bf24:	80fb      	strh	r3, [r7, #6]
 800bf26:	4613      	mov	r3, r2
 800bf28:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800bf2e:	2300      	movs	r3, #0
 800bf30:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d108      	bne.n	800bf4a <pbuf_copy_partial+0x36>
 800bf38:	4b2b      	ldr	r3, [pc, #172]	; (800bfe8 <pbuf_copy_partial+0xd4>)
 800bf3a:	f240 420a 	movw	r2, #1034	; 0x40a
 800bf3e:	492b      	ldr	r1, [pc, #172]	; (800bfec <pbuf_copy_partial+0xd8>)
 800bf40:	482b      	ldr	r0, [pc, #172]	; (800bff0 <pbuf_copy_partial+0xdc>)
 800bf42:	f00c f977 	bl	8018234 <iprintf>
 800bf46:	2300      	movs	r3, #0
 800bf48:	e04a      	b.n	800bfe0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800bf4a:	68bb      	ldr	r3, [r7, #8]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d108      	bne.n	800bf62 <pbuf_copy_partial+0x4e>
 800bf50:	4b25      	ldr	r3, [pc, #148]	; (800bfe8 <pbuf_copy_partial+0xd4>)
 800bf52:	f240 420b 	movw	r2, #1035	; 0x40b
 800bf56:	4927      	ldr	r1, [pc, #156]	; (800bff4 <pbuf_copy_partial+0xe0>)
 800bf58:	4825      	ldr	r0, [pc, #148]	; (800bff0 <pbuf_copy_partial+0xdc>)
 800bf5a:	f00c f96b 	bl	8018234 <iprintf>
 800bf5e:	2300      	movs	r3, #0
 800bf60:	e03e      	b.n	800bfe0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	61fb      	str	r3, [r7, #28]
 800bf66:	e034      	b.n	800bfd2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800bf68:	88bb      	ldrh	r3, [r7, #4]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d00a      	beq.n	800bf84 <pbuf_copy_partial+0x70>
 800bf6e:	69fb      	ldr	r3, [r7, #28]
 800bf70:	895b      	ldrh	r3, [r3, #10]
 800bf72:	88ba      	ldrh	r2, [r7, #4]
 800bf74:	429a      	cmp	r2, r3
 800bf76:	d305      	bcc.n	800bf84 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800bf78:	69fb      	ldr	r3, [r7, #28]
 800bf7a:	895b      	ldrh	r3, [r3, #10]
 800bf7c:	88ba      	ldrh	r2, [r7, #4]
 800bf7e:	1ad3      	subs	r3, r2, r3
 800bf80:	80bb      	strh	r3, [r7, #4]
 800bf82:	e023      	b.n	800bfcc <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800bf84:	69fb      	ldr	r3, [r7, #28]
 800bf86:	895a      	ldrh	r2, [r3, #10]
 800bf88:	88bb      	ldrh	r3, [r7, #4]
 800bf8a:	1ad3      	subs	r3, r2, r3
 800bf8c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800bf8e:	8b3a      	ldrh	r2, [r7, #24]
 800bf90:	88fb      	ldrh	r3, [r7, #6]
 800bf92:	429a      	cmp	r2, r3
 800bf94:	d901      	bls.n	800bf9a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800bf96:	88fb      	ldrh	r3, [r7, #6]
 800bf98:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800bf9a:	8b7b      	ldrh	r3, [r7, #26]
 800bf9c:	68ba      	ldr	r2, [r7, #8]
 800bf9e:	18d0      	adds	r0, r2, r3
 800bfa0:	69fb      	ldr	r3, [r7, #28]
 800bfa2:	685a      	ldr	r2, [r3, #4]
 800bfa4:	88bb      	ldrh	r3, [r7, #4]
 800bfa6:	4413      	add	r3, r2
 800bfa8:	8b3a      	ldrh	r2, [r7, #24]
 800bfaa:	4619      	mov	r1, r3
 800bfac:	f00b fde3 	bl	8017b76 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800bfb0:	8afa      	ldrh	r2, [r7, #22]
 800bfb2:	8b3b      	ldrh	r3, [r7, #24]
 800bfb4:	4413      	add	r3, r2
 800bfb6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800bfb8:	8b7a      	ldrh	r2, [r7, #26]
 800bfba:	8b3b      	ldrh	r3, [r7, #24]
 800bfbc:	4413      	add	r3, r2
 800bfbe:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800bfc0:	88fa      	ldrh	r2, [r7, #6]
 800bfc2:	8b3b      	ldrh	r3, [r7, #24]
 800bfc4:	1ad3      	subs	r3, r2, r3
 800bfc6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800bfc8:	2300      	movs	r3, #0
 800bfca:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800bfcc:	69fb      	ldr	r3, [r7, #28]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	61fb      	str	r3, [r7, #28]
 800bfd2:	88fb      	ldrh	r3, [r7, #6]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d002      	beq.n	800bfde <pbuf_copy_partial+0xca>
 800bfd8:	69fb      	ldr	r3, [r7, #28]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d1c4      	bne.n	800bf68 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800bfde:	8afb      	ldrh	r3, [r7, #22]
}
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	3720      	adds	r7, #32
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bd80      	pop	{r7, pc}
 800bfe8:	08019170 	.word	0x08019170
 800bfec:	080194b8 	.word	0x080194b8
 800bff0:	080191d0 	.word	0x080191d0
 800bff4:	080194d8 	.word	0x080194d8

0800bff8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b084      	sub	sp, #16
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	4603      	mov	r3, r0
 800c000:	603a      	str	r2, [r7, #0]
 800c002:	71fb      	strb	r3, [r7, #7]
 800c004:	460b      	mov	r3, r1
 800c006:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	8919      	ldrh	r1, [r3, #8]
 800c00c:	88ba      	ldrh	r2, [r7, #4]
 800c00e:	79fb      	ldrb	r3, [r7, #7]
 800c010:	4618      	mov	r0, r3
 800c012:	f7ff faa5 	bl	800b560 <pbuf_alloc>
 800c016:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d101      	bne.n	800c022 <pbuf_clone+0x2a>
    return NULL;
 800c01e:	2300      	movs	r3, #0
 800c020:	e011      	b.n	800c046 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800c022:	6839      	ldr	r1, [r7, #0]
 800c024:	68f8      	ldr	r0, [r7, #12]
 800c026:	f7ff fea3 	bl	800bd70 <pbuf_copy>
 800c02a:	4603      	mov	r3, r0
 800c02c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800c02e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d006      	beq.n	800c044 <pbuf_clone+0x4c>
 800c036:	4b06      	ldr	r3, [pc, #24]	; (800c050 <pbuf_clone+0x58>)
 800c038:	f240 5224 	movw	r2, #1316	; 0x524
 800c03c:	4905      	ldr	r1, [pc, #20]	; (800c054 <pbuf_clone+0x5c>)
 800c03e:	4806      	ldr	r0, [pc, #24]	; (800c058 <pbuf_clone+0x60>)
 800c040:	f00c f8f8 	bl	8018234 <iprintf>
  return q;
 800c044:	68fb      	ldr	r3, [r7, #12]
}
 800c046:	4618      	mov	r0, r3
 800c048:	3710      	adds	r7, #16
 800c04a:	46bd      	mov	sp, r7
 800c04c:	bd80      	pop	{r7, pc}
 800c04e:	bf00      	nop
 800c050:	08019170 	.word	0x08019170
 800c054:	080195e4 	.word	0x080195e4
 800c058:	080191d0 	.word	0x080191d0

0800c05c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c060:	f00c f900 	bl	8018264 <rand>
 800c064:	4603      	mov	r3, r0
 800c066:	b29b      	uxth	r3, r3
 800c068:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c06c:	b29b      	uxth	r3, r3
 800c06e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800c072:	b29a      	uxth	r2, r3
 800c074:	4b01      	ldr	r3, [pc, #4]	; (800c07c <tcp_init+0x20>)
 800c076:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c078:	bf00      	nop
 800c07a:	bd80      	pop	{r7, pc}
 800c07c:	20000010 	.word	0x20000010

0800c080 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b082      	sub	sp, #8
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	7d1b      	ldrb	r3, [r3, #20]
 800c08c:	2b01      	cmp	r3, #1
 800c08e:	d105      	bne.n	800c09c <tcp_free+0x1c>
 800c090:	4b06      	ldr	r3, [pc, #24]	; (800c0ac <tcp_free+0x2c>)
 800c092:	22d4      	movs	r2, #212	; 0xd4
 800c094:	4906      	ldr	r1, [pc, #24]	; (800c0b0 <tcp_free+0x30>)
 800c096:	4807      	ldr	r0, [pc, #28]	; (800c0b4 <tcp_free+0x34>)
 800c098:	f00c f8cc 	bl	8018234 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800c09c:	6879      	ldr	r1, [r7, #4]
 800c09e:	2001      	movs	r0, #1
 800c0a0:	f7fe fe9e 	bl	800ade0 <memp_free>
}
 800c0a4:	bf00      	nop
 800c0a6:	3708      	adds	r7, #8
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	bd80      	pop	{r7, pc}
 800c0ac:	08019670 	.word	0x08019670
 800c0b0:	080196a0 	.word	0x080196a0
 800c0b4:	080196b4 	.word	0x080196b4

0800c0b8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b082      	sub	sp, #8
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	7d1b      	ldrb	r3, [r3, #20]
 800c0c4:	2b01      	cmp	r3, #1
 800c0c6:	d105      	bne.n	800c0d4 <tcp_free_listen+0x1c>
 800c0c8:	4b06      	ldr	r3, [pc, #24]	; (800c0e4 <tcp_free_listen+0x2c>)
 800c0ca:	22df      	movs	r2, #223	; 0xdf
 800c0cc:	4906      	ldr	r1, [pc, #24]	; (800c0e8 <tcp_free_listen+0x30>)
 800c0ce:	4807      	ldr	r0, [pc, #28]	; (800c0ec <tcp_free_listen+0x34>)
 800c0d0:	f00c f8b0 	bl	8018234 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800c0d4:	6879      	ldr	r1, [r7, #4]
 800c0d6:	2002      	movs	r0, #2
 800c0d8:	f7fe fe82 	bl	800ade0 <memp_free>
}
 800c0dc:	bf00      	nop
 800c0de:	3708      	adds	r7, #8
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	bd80      	pop	{r7, pc}
 800c0e4:	08019670 	.word	0x08019670
 800c0e8:	080196dc 	.word	0x080196dc
 800c0ec:	080196b4 	.word	0x080196b4

0800c0f0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800c0f4:	f000 fea2 	bl	800ce3c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800c0f8:	4b07      	ldr	r3, [pc, #28]	; (800c118 <tcp_tmr+0x28>)
 800c0fa:	781b      	ldrb	r3, [r3, #0]
 800c0fc:	3301      	adds	r3, #1
 800c0fe:	b2da      	uxtb	r2, r3
 800c100:	4b05      	ldr	r3, [pc, #20]	; (800c118 <tcp_tmr+0x28>)
 800c102:	701a      	strb	r2, [r3, #0]
 800c104:	4b04      	ldr	r3, [pc, #16]	; (800c118 <tcp_tmr+0x28>)
 800c106:	781b      	ldrb	r3, [r3, #0]
 800c108:	f003 0301 	and.w	r3, r3, #1
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d001      	beq.n	800c114 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800c110:	f000 fb54 	bl	800c7bc <tcp_slowtmr>
  }
}
 800c114:	bf00      	nop
 800c116:	bd80      	pop	{r7, pc}
 800c118:	20004bc5 	.word	0x20004bc5

0800c11c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b084      	sub	sp, #16
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
 800c124:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800c126:	683b      	ldr	r3, [r7, #0]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d105      	bne.n	800c138 <tcp_remove_listener+0x1c>
 800c12c:	4b0d      	ldr	r3, [pc, #52]	; (800c164 <tcp_remove_listener+0x48>)
 800c12e:	22ff      	movs	r2, #255	; 0xff
 800c130:	490d      	ldr	r1, [pc, #52]	; (800c168 <tcp_remove_listener+0x4c>)
 800c132:	480e      	ldr	r0, [pc, #56]	; (800c16c <tcp_remove_listener+0x50>)
 800c134:	f00c f87e 	bl	8018234 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	60fb      	str	r3, [r7, #12]
 800c13c:	e00a      	b.n	800c154 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c142:	683a      	ldr	r2, [r7, #0]
 800c144:	429a      	cmp	r2, r3
 800c146:	d102      	bne.n	800c14e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	2200      	movs	r2, #0
 800c14c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	68db      	ldr	r3, [r3, #12]
 800c152:	60fb      	str	r3, [r7, #12]
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d1f1      	bne.n	800c13e <tcp_remove_listener+0x22>
    }
  }
}
 800c15a:	bf00      	nop
 800c15c:	bf00      	nop
 800c15e:	3710      	adds	r7, #16
 800c160:	46bd      	mov	sp, r7
 800c162:	bd80      	pop	{r7, pc}
 800c164:	08019670 	.word	0x08019670
 800c168:	080196f8 	.word	0x080196f8
 800c16c:	080196b4 	.word	0x080196b4

0800c170 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b084      	sub	sp, #16
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d106      	bne.n	800c18c <tcp_listen_closed+0x1c>
 800c17e:	4b14      	ldr	r3, [pc, #80]	; (800c1d0 <tcp_listen_closed+0x60>)
 800c180:	f240 1211 	movw	r2, #273	; 0x111
 800c184:	4913      	ldr	r1, [pc, #76]	; (800c1d4 <tcp_listen_closed+0x64>)
 800c186:	4814      	ldr	r0, [pc, #80]	; (800c1d8 <tcp_listen_closed+0x68>)
 800c188:	f00c f854 	bl	8018234 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	7d1b      	ldrb	r3, [r3, #20]
 800c190:	2b01      	cmp	r3, #1
 800c192:	d006      	beq.n	800c1a2 <tcp_listen_closed+0x32>
 800c194:	4b0e      	ldr	r3, [pc, #56]	; (800c1d0 <tcp_listen_closed+0x60>)
 800c196:	f44f 7289 	mov.w	r2, #274	; 0x112
 800c19a:	4910      	ldr	r1, [pc, #64]	; (800c1dc <tcp_listen_closed+0x6c>)
 800c19c:	480e      	ldr	r0, [pc, #56]	; (800c1d8 <tcp_listen_closed+0x68>)
 800c19e:	f00c f849 	bl	8018234 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c1a2:	2301      	movs	r3, #1
 800c1a4:	60fb      	str	r3, [r7, #12]
 800c1a6:	e00b      	b.n	800c1c0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800c1a8:	4a0d      	ldr	r2, [pc, #52]	; (800c1e0 <tcp_listen_closed+0x70>)
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	6879      	ldr	r1, [r7, #4]
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	f7ff ffb1 	bl	800c11c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	3301      	adds	r3, #1
 800c1be:	60fb      	str	r3, [r7, #12]
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	2b03      	cmp	r3, #3
 800c1c4:	d9f0      	bls.n	800c1a8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800c1c6:	bf00      	nop
 800c1c8:	bf00      	nop
 800c1ca:	3710      	adds	r7, #16
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	bd80      	pop	{r7, pc}
 800c1d0:	08019670 	.word	0x08019670
 800c1d4:	08019720 	.word	0x08019720
 800c1d8:	080196b4 	.word	0x080196b4
 800c1dc:	0801972c 	.word	0x0801972c
 800c1e0:	0801b810 	.word	0x0801b810

0800c1e4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800c1e4:	b5b0      	push	{r4, r5, r7, lr}
 800c1e6:	b088      	sub	sp, #32
 800c1e8:	af04      	add	r7, sp, #16
 800c1ea:	6078      	str	r0, [r7, #4]
 800c1ec:	460b      	mov	r3, r1
 800c1ee:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d106      	bne.n	800c204 <tcp_close_shutdown+0x20>
 800c1f6:	4b63      	ldr	r3, [pc, #396]	; (800c384 <tcp_close_shutdown+0x1a0>)
 800c1f8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800c1fc:	4962      	ldr	r1, [pc, #392]	; (800c388 <tcp_close_shutdown+0x1a4>)
 800c1fe:	4863      	ldr	r0, [pc, #396]	; (800c38c <tcp_close_shutdown+0x1a8>)
 800c200:	f00c f818 	bl	8018234 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800c204:	78fb      	ldrb	r3, [r7, #3]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d066      	beq.n	800c2d8 <tcp_close_shutdown+0xf4>
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	7d1b      	ldrb	r3, [r3, #20]
 800c20e:	2b04      	cmp	r3, #4
 800c210:	d003      	beq.n	800c21a <tcp_close_shutdown+0x36>
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	7d1b      	ldrb	r3, [r3, #20]
 800c216:	2b07      	cmp	r3, #7
 800c218:	d15e      	bne.n	800c2d8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d104      	bne.n	800c22c <tcp_close_shutdown+0x48>
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c226:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c22a:	d055      	beq.n	800c2d8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	8b5b      	ldrh	r3, [r3, #26]
 800c230:	f003 0310 	and.w	r3, r3, #16
 800c234:	2b00      	cmp	r3, #0
 800c236:	d106      	bne.n	800c246 <tcp_close_shutdown+0x62>
 800c238:	4b52      	ldr	r3, [pc, #328]	; (800c384 <tcp_close_shutdown+0x1a0>)
 800c23a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800c23e:	4954      	ldr	r1, [pc, #336]	; (800c390 <tcp_close_shutdown+0x1ac>)
 800c240:	4852      	ldr	r0, [pc, #328]	; (800c38c <tcp_close_shutdown+0x1a8>)
 800c242:	f00b fff7 	bl	8018234 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c24e:	687d      	ldr	r5, [r7, #4]
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	3304      	adds	r3, #4
 800c254:	687a      	ldr	r2, [r7, #4]
 800c256:	8ad2      	ldrh	r2, [r2, #22]
 800c258:	6879      	ldr	r1, [r7, #4]
 800c25a:	8b09      	ldrh	r1, [r1, #24]
 800c25c:	9102      	str	r1, [sp, #8]
 800c25e:	9201      	str	r2, [sp, #4]
 800c260:	9300      	str	r3, [sp, #0]
 800c262:	462b      	mov	r3, r5
 800c264:	4622      	mov	r2, r4
 800c266:	4601      	mov	r1, r0
 800c268:	6878      	ldr	r0, [r7, #4]
 800c26a:	f004 fe8d 	bl	8010f88 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800c26e:	6878      	ldr	r0, [r7, #4]
 800c270:	f001 f8c6 	bl	800d400 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c274:	4b47      	ldr	r3, [pc, #284]	; (800c394 <tcp_close_shutdown+0x1b0>)
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	687a      	ldr	r2, [r7, #4]
 800c27a:	429a      	cmp	r2, r3
 800c27c:	d105      	bne.n	800c28a <tcp_close_shutdown+0xa6>
 800c27e:	4b45      	ldr	r3, [pc, #276]	; (800c394 <tcp_close_shutdown+0x1b0>)
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	68db      	ldr	r3, [r3, #12]
 800c284:	4a43      	ldr	r2, [pc, #268]	; (800c394 <tcp_close_shutdown+0x1b0>)
 800c286:	6013      	str	r3, [r2, #0]
 800c288:	e013      	b.n	800c2b2 <tcp_close_shutdown+0xce>
 800c28a:	4b42      	ldr	r3, [pc, #264]	; (800c394 <tcp_close_shutdown+0x1b0>)
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	60fb      	str	r3, [r7, #12]
 800c290:	e00c      	b.n	800c2ac <tcp_close_shutdown+0xc8>
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	68db      	ldr	r3, [r3, #12]
 800c296:	687a      	ldr	r2, [r7, #4]
 800c298:	429a      	cmp	r2, r3
 800c29a:	d104      	bne.n	800c2a6 <tcp_close_shutdown+0xc2>
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	68da      	ldr	r2, [r3, #12]
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	60da      	str	r2, [r3, #12]
 800c2a4:	e005      	b.n	800c2b2 <tcp_close_shutdown+0xce>
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	68db      	ldr	r3, [r3, #12]
 800c2aa:	60fb      	str	r3, [r7, #12]
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d1ef      	bne.n	800c292 <tcp_close_shutdown+0xae>
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	60da      	str	r2, [r3, #12]
 800c2b8:	4b37      	ldr	r3, [pc, #220]	; (800c398 <tcp_close_shutdown+0x1b4>)
 800c2ba:	2201      	movs	r2, #1
 800c2bc:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800c2be:	4b37      	ldr	r3, [pc, #220]	; (800c39c <tcp_close_shutdown+0x1b8>)
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	687a      	ldr	r2, [r7, #4]
 800c2c4:	429a      	cmp	r2, r3
 800c2c6:	d102      	bne.n	800c2ce <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800c2c8:	f003 fd5a 	bl	800fd80 <tcp_trigger_input_pcb_close>
 800c2cc:	e002      	b.n	800c2d4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800c2ce:	6878      	ldr	r0, [r7, #4]
 800c2d0:	f7ff fed6 	bl	800c080 <tcp_free>
      }
      return ERR_OK;
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	e050      	b.n	800c37a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	7d1b      	ldrb	r3, [r3, #20]
 800c2dc:	2b02      	cmp	r3, #2
 800c2de:	d03b      	beq.n	800c358 <tcp_close_shutdown+0x174>
 800c2e0:	2b02      	cmp	r3, #2
 800c2e2:	dc44      	bgt.n	800c36e <tcp_close_shutdown+0x18a>
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d002      	beq.n	800c2ee <tcp_close_shutdown+0x10a>
 800c2e8:	2b01      	cmp	r3, #1
 800c2ea:	d02a      	beq.n	800c342 <tcp_close_shutdown+0x15e>
 800c2ec:	e03f      	b.n	800c36e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	8adb      	ldrh	r3, [r3, #22]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d021      	beq.n	800c33a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c2f6:	4b2a      	ldr	r3, [pc, #168]	; (800c3a0 <tcp_close_shutdown+0x1bc>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	687a      	ldr	r2, [r7, #4]
 800c2fc:	429a      	cmp	r2, r3
 800c2fe:	d105      	bne.n	800c30c <tcp_close_shutdown+0x128>
 800c300:	4b27      	ldr	r3, [pc, #156]	; (800c3a0 <tcp_close_shutdown+0x1bc>)
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	68db      	ldr	r3, [r3, #12]
 800c306:	4a26      	ldr	r2, [pc, #152]	; (800c3a0 <tcp_close_shutdown+0x1bc>)
 800c308:	6013      	str	r3, [r2, #0]
 800c30a:	e013      	b.n	800c334 <tcp_close_shutdown+0x150>
 800c30c:	4b24      	ldr	r3, [pc, #144]	; (800c3a0 <tcp_close_shutdown+0x1bc>)
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	60bb      	str	r3, [r7, #8]
 800c312:	e00c      	b.n	800c32e <tcp_close_shutdown+0x14a>
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	68db      	ldr	r3, [r3, #12]
 800c318:	687a      	ldr	r2, [r7, #4]
 800c31a:	429a      	cmp	r2, r3
 800c31c:	d104      	bne.n	800c328 <tcp_close_shutdown+0x144>
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	68da      	ldr	r2, [r3, #12]
 800c322:	68bb      	ldr	r3, [r7, #8]
 800c324:	60da      	str	r2, [r3, #12]
 800c326:	e005      	b.n	800c334 <tcp_close_shutdown+0x150>
 800c328:	68bb      	ldr	r3, [r7, #8]
 800c32a:	68db      	ldr	r3, [r3, #12]
 800c32c:	60bb      	str	r3, [r7, #8]
 800c32e:	68bb      	ldr	r3, [r7, #8]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d1ef      	bne.n	800c314 <tcp_close_shutdown+0x130>
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	2200      	movs	r2, #0
 800c338:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800c33a:	6878      	ldr	r0, [r7, #4]
 800c33c:	f7ff fea0 	bl	800c080 <tcp_free>
      break;
 800c340:	e01a      	b.n	800c378 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	f7ff ff14 	bl	800c170 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800c348:	6879      	ldr	r1, [r7, #4]
 800c34a:	4816      	ldr	r0, [pc, #88]	; (800c3a4 <tcp_close_shutdown+0x1c0>)
 800c34c:	f001 f8a8 	bl	800d4a0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800c350:	6878      	ldr	r0, [r7, #4]
 800c352:	f7ff feb1 	bl	800c0b8 <tcp_free_listen>
      break;
 800c356:	e00f      	b.n	800c378 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c358:	6879      	ldr	r1, [r7, #4]
 800c35a:	480e      	ldr	r0, [pc, #56]	; (800c394 <tcp_close_shutdown+0x1b0>)
 800c35c:	f001 f8a0 	bl	800d4a0 <tcp_pcb_remove>
 800c360:	4b0d      	ldr	r3, [pc, #52]	; (800c398 <tcp_close_shutdown+0x1b4>)
 800c362:	2201      	movs	r2, #1
 800c364:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800c366:	6878      	ldr	r0, [r7, #4]
 800c368:	f7ff fe8a 	bl	800c080 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800c36c:	e004      	b.n	800c378 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800c36e:	6878      	ldr	r0, [r7, #4]
 800c370:	f000 f81a 	bl	800c3a8 <tcp_close_shutdown_fin>
 800c374:	4603      	mov	r3, r0
 800c376:	e000      	b.n	800c37a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800c378:	2300      	movs	r3, #0
}
 800c37a:	4618      	mov	r0, r3
 800c37c:	3710      	adds	r7, #16
 800c37e:	46bd      	mov	sp, r7
 800c380:	bdb0      	pop	{r4, r5, r7, pc}
 800c382:	bf00      	nop
 800c384:	08019670 	.word	0x08019670
 800c388:	08019744 	.word	0x08019744
 800c38c:	080196b4 	.word	0x080196b4
 800c390:	08019764 	.word	0x08019764
 800c394:	2000dc44 	.word	0x2000dc44
 800c398:	2000dc40 	.word	0x2000dc40
 800c39c:	2000dc58 	.word	0x2000dc58
 800c3a0:	2000dc50 	.word	0x2000dc50
 800c3a4:	2000dc4c 	.word	0x2000dc4c

0800c3a8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b084      	sub	sp, #16
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d106      	bne.n	800c3c4 <tcp_close_shutdown_fin+0x1c>
 800c3b6:	4b2e      	ldr	r3, [pc, #184]	; (800c470 <tcp_close_shutdown_fin+0xc8>)
 800c3b8:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800c3bc:	492d      	ldr	r1, [pc, #180]	; (800c474 <tcp_close_shutdown_fin+0xcc>)
 800c3be:	482e      	ldr	r0, [pc, #184]	; (800c478 <tcp_close_shutdown_fin+0xd0>)
 800c3c0:	f00b ff38 	bl	8018234 <iprintf>

  switch (pcb->state) {
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	7d1b      	ldrb	r3, [r3, #20]
 800c3c8:	2b07      	cmp	r3, #7
 800c3ca:	d020      	beq.n	800c40e <tcp_close_shutdown_fin+0x66>
 800c3cc:	2b07      	cmp	r3, #7
 800c3ce:	dc2b      	bgt.n	800c428 <tcp_close_shutdown_fin+0x80>
 800c3d0:	2b03      	cmp	r3, #3
 800c3d2:	d002      	beq.n	800c3da <tcp_close_shutdown_fin+0x32>
 800c3d4:	2b04      	cmp	r3, #4
 800c3d6:	d00d      	beq.n	800c3f4 <tcp_close_shutdown_fin+0x4c>
 800c3d8:	e026      	b.n	800c428 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800c3da:	6878      	ldr	r0, [r7, #4]
 800c3dc:	f003 fee2 	bl	80101a4 <tcp_send_fin>
 800c3e0:	4603      	mov	r3, r0
 800c3e2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c3e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d11f      	bne.n	800c42c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	2205      	movs	r2, #5
 800c3f0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c3f2:	e01b      	b.n	800c42c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800c3f4:	6878      	ldr	r0, [r7, #4]
 800c3f6:	f003 fed5 	bl	80101a4 <tcp_send_fin>
 800c3fa:	4603      	mov	r3, r0
 800c3fc:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c3fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d114      	bne.n	800c430 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	2205      	movs	r2, #5
 800c40a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c40c:	e010      	b.n	800c430 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800c40e:	6878      	ldr	r0, [r7, #4]
 800c410:	f003 fec8 	bl	80101a4 <tcp_send_fin>
 800c414:	4603      	mov	r3, r0
 800c416:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c418:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d109      	bne.n	800c434 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	2209      	movs	r2, #9
 800c424:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c426:	e005      	b.n	800c434 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800c428:	2300      	movs	r3, #0
 800c42a:	e01c      	b.n	800c466 <tcp_close_shutdown_fin+0xbe>
      break;
 800c42c:	bf00      	nop
 800c42e:	e002      	b.n	800c436 <tcp_close_shutdown_fin+0x8e>
      break;
 800c430:	bf00      	nop
 800c432:	e000      	b.n	800c436 <tcp_close_shutdown_fin+0x8e>
      break;
 800c434:	bf00      	nop
  }

  if (err == ERR_OK) {
 800c436:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d103      	bne.n	800c446 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800c43e:	6878      	ldr	r0, [r7, #4]
 800c440:	f003 ffee 	bl	8010420 <tcp_output>
 800c444:	e00d      	b.n	800c462 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800c446:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c44a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c44e:	d108      	bne.n	800c462 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	8b5b      	ldrh	r3, [r3, #26]
 800c454:	f043 0308 	orr.w	r3, r3, #8
 800c458:	b29a      	uxth	r2, r3
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800c45e:	2300      	movs	r3, #0
 800c460:	e001      	b.n	800c466 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800c462:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c466:	4618      	mov	r0, r3
 800c468:	3710      	adds	r7, #16
 800c46a:	46bd      	mov	sp, r7
 800c46c:	bd80      	pop	{r7, pc}
 800c46e:	bf00      	nop
 800c470:	08019670 	.word	0x08019670
 800c474:	08019720 	.word	0x08019720
 800c478:	080196b4 	.word	0x080196b4

0800c47c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b082      	sub	sp, #8
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d109      	bne.n	800c49e <tcp_close+0x22>
 800c48a:	4b0f      	ldr	r3, [pc, #60]	; (800c4c8 <tcp_close+0x4c>)
 800c48c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800c490:	490e      	ldr	r1, [pc, #56]	; (800c4cc <tcp_close+0x50>)
 800c492:	480f      	ldr	r0, [pc, #60]	; (800c4d0 <tcp_close+0x54>)
 800c494:	f00b fece 	bl	8018234 <iprintf>
 800c498:	f06f 030f 	mvn.w	r3, #15
 800c49c:	e00f      	b.n	800c4be <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	7d1b      	ldrb	r3, [r3, #20]
 800c4a2:	2b01      	cmp	r3, #1
 800c4a4:	d006      	beq.n	800c4b4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	8b5b      	ldrh	r3, [r3, #26]
 800c4aa:	f043 0310 	orr.w	r3, r3, #16
 800c4ae:	b29a      	uxth	r2, r3
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800c4b4:	2101      	movs	r1, #1
 800c4b6:	6878      	ldr	r0, [r7, #4]
 800c4b8:	f7ff fe94 	bl	800c1e4 <tcp_close_shutdown>
 800c4bc:	4603      	mov	r3, r0
}
 800c4be:	4618      	mov	r0, r3
 800c4c0:	3708      	adds	r7, #8
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	bd80      	pop	{r7, pc}
 800c4c6:	bf00      	nop
 800c4c8:	08019670 	.word	0x08019670
 800c4cc:	08019780 	.word	0x08019780
 800c4d0:	080196b4 	.word	0x080196b4

0800c4d4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b08e      	sub	sp, #56	; 0x38
 800c4d8:	af04      	add	r7, sp, #16
 800c4da:	6078      	str	r0, [r7, #4]
 800c4dc:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d107      	bne.n	800c4f4 <tcp_abandon+0x20>
 800c4e4:	4b52      	ldr	r3, [pc, #328]	; (800c630 <tcp_abandon+0x15c>)
 800c4e6:	f240 223d 	movw	r2, #573	; 0x23d
 800c4ea:	4952      	ldr	r1, [pc, #328]	; (800c634 <tcp_abandon+0x160>)
 800c4ec:	4852      	ldr	r0, [pc, #328]	; (800c638 <tcp_abandon+0x164>)
 800c4ee:	f00b fea1 	bl	8018234 <iprintf>
 800c4f2:	e099      	b.n	800c628 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	7d1b      	ldrb	r3, [r3, #20]
 800c4f8:	2b01      	cmp	r3, #1
 800c4fa:	d106      	bne.n	800c50a <tcp_abandon+0x36>
 800c4fc:	4b4c      	ldr	r3, [pc, #304]	; (800c630 <tcp_abandon+0x15c>)
 800c4fe:	f44f 7210 	mov.w	r2, #576	; 0x240
 800c502:	494e      	ldr	r1, [pc, #312]	; (800c63c <tcp_abandon+0x168>)
 800c504:	484c      	ldr	r0, [pc, #304]	; (800c638 <tcp_abandon+0x164>)
 800c506:	f00b fe95 	bl	8018234 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	7d1b      	ldrb	r3, [r3, #20]
 800c50e:	2b0a      	cmp	r3, #10
 800c510:	d107      	bne.n	800c522 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800c512:	6879      	ldr	r1, [r7, #4]
 800c514:	484a      	ldr	r0, [pc, #296]	; (800c640 <tcp_abandon+0x16c>)
 800c516:	f000 ffc3 	bl	800d4a0 <tcp_pcb_remove>
    tcp_free(pcb);
 800c51a:	6878      	ldr	r0, [r7, #4]
 800c51c:	f7ff fdb0 	bl	800c080 <tcp_free>
 800c520:	e082      	b.n	800c628 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800c522:	2300      	movs	r3, #0
 800c524:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800c526:	2300      	movs	r3, #0
 800c528:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c52e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c534:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c53c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	691b      	ldr	r3, [r3, #16]
 800c542:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	7d1b      	ldrb	r3, [r3, #20]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d126      	bne.n	800c59a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	8adb      	ldrh	r3, [r3, #22]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d02e      	beq.n	800c5b2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c554:	4b3b      	ldr	r3, [pc, #236]	; (800c644 <tcp_abandon+0x170>)
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	687a      	ldr	r2, [r7, #4]
 800c55a:	429a      	cmp	r2, r3
 800c55c:	d105      	bne.n	800c56a <tcp_abandon+0x96>
 800c55e:	4b39      	ldr	r3, [pc, #228]	; (800c644 <tcp_abandon+0x170>)
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	68db      	ldr	r3, [r3, #12]
 800c564:	4a37      	ldr	r2, [pc, #220]	; (800c644 <tcp_abandon+0x170>)
 800c566:	6013      	str	r3, [r2, #0]
 800c568:	e013      	b.n	800c592 <tcp_abandon+0xbe>
 800c56a:	4b36      	ldr	r3, [pc, #216]	; (800c644 <tcp_abandon+0x170>)
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	61fb      	str	r3, [r7, #28]
 800c570:	e00c      	b.n	800c58c <tcp_abandon+0xb8>
 800c572:	69fb      	ldr	r3, [r7, #28]
 800c574:	68db      	ldr	r3, [r3, #12]
 800c576:	687a      	ldr	r2, [r7, #4]
 800c578:	429a      	cmp	r2, r3
 800c57a:	d104      	bne.n	800c586 <tcp_abandon+0xb2>
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	68da      	ldr	r2, [r3, #12]
 800c580:	69fb      	ldr	r3, [r7, #28]
 800c582:	60da      	str	r2, [r3, #12]
 800c584:	e005      	b.n	800c592 <tcp_abandon+0xbe>
 800c586:	69fb      	ldr	r3, [r7, #28]
 800c588:	68db      	ldr	r3, [r3, #12]
 800c58a:	61fb      	str	r3, [r7, #28]
 800c58c:	69fb      	ldr	r3, [r7, #28]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d1ef      	bne.n	800c572 <tcp_abandon+0x9e>
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	2200      	movs	r2, #0
 800c596:	60da      	str	r2, [r3, #12]
 800c598:	e00b      	b.n	800c5b2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800c59a:	683b      	ldr	r3, [r7, #0]
 800c59c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	8adb      	ldrh	r3, [r3, #22]
 800c5a2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c5a4:	6879      	ldr	r1, [r7, #4]
 800c5a6:	4828      	ldr	r0, [pc, #160]	; (800c648 <tcp_abandon+0x174>)
 800c5a8:	f000 ff7a 	bl	800d4a0 <tcp_pcb_remove>
 800c5ac:	4b27      	ldr	r3, [pc, #156]	; (800c64c <tcp_abandon+0x178>)
 800c5ae:	2201      	movs	r2, #1
 800c5b0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d004      	beq.n	800c5c4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5be:	4618      	mov	r0, r3
 800c5c0:	f000 fd1c 	bl	800cffc <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d004      	beq.n	800c5d6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	f000 fd13 	bl	800cffc <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d004      	beq.n	800c5e8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	f000 fd0a 	bl	800cffc <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800c5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d00e      	beq.n	800c60c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800c5ee:	6879      	ldr	r1, [r7, #4]
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	3304      	adds	r3, #4
 800c5f4:	687a      	ldr	r2, [r7, #4]
 800c5f6:	8b12      	ldrh	r2, [r2, #24]
 800c5f8:	9202      	str	r2, [sp, #8]
 800c5fa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c5fc:	9201      	str	r2, [sp, #4]
 800c5fe:	9300      	str	r3, [sp, #0]
 800c600:	460b      	mov	r3, r1
 800c602:	697a      	ldr	r2, [r7, #20]
 800c604:	69b9      	ldr	r1, [r7, #24]
 800c606:	6878      	ldr	r0, [r7, #4]
 800c608:	f004 fcbe 	bl	8010f88 <tcp_rst>
    }
    last_state = pcb->state;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	7d1b      	ldrb	r3, [r3, #20]
 800c610:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800c612:	6878      	ldr	r0, [r7, #4]
 800c614:	f7ff fd34 	bl	800c080 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800c618:	693b      	ldr	r3, [r7, #16]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d004      	beq.n	800c628 <tcp_abandon+0x154>
 800c61e:	693b      	ldr	r3, [r7, #16]
 800c620:	f06f 010c 	mvn.w	r1, #12
 800c624:	68f8      	ldr	r0, [r7, #12]
 800c626:	4798      	blx	r3
  }
}
 800c628:	3728      	adds	r7, #40	; 0x28
 800c62a:	46bd      	mov	sp, r7
 800c62c:	bd80      	pop	{r7, pc}
 800c62e:	bf00      	nop
 800c630:	08019670 	.word	0x08019670
 800c634:	080197b4 	.word	0x080197b4
 800c638:	080196b4 	.word	0x080196b4
 800c63c:	080197d0 	.word	0x080197d0
 800c640:	2000dc54 	.word	0x2000dc54
 800c644:	2000dc50 	.word	0x2000dc50
 800c648:	2000dc44 	.word	0x2000dc44
 800c64c:	2000dc40 	.word	0x2000dc40

0800c650 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b082      	sub	sp, #8
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800c658:	2101      	movs	r1, #1
 800c65a:	6878      	ldr	r0, [r7, #4]
 800c65c:	f7ff ff3a 	bl	800c4d4 <tcp_abandon>
}
 800c660:	bf00      	nop
 800c662:	3708      	adds	r7, #8
 800c664:	46bd      	mov	sp, r7
 800c666:	bd80      	pop	{r7, pc}

0800c668 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b084      	sub	sp, #16
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d106      	bne.n	800c684 <tcp_update_rcv_ann_wnd+0x1c>
 800c676:	4b25      	ldr	r3, [pc, #148]	; (800c70c <tcp_update_rcv_ann_wnd+0xa4>)
 800c678:	f240 32a6 	movw	r2, #934	; 0x3a6
 800c67c:	4924      	ldr	r1, [pc, #144]	; (800c710 <tcp_update_rcv_ann_wnd+0xa8>)
 800c67e:	4825      	ldr	r0, [pc, #148]	; (800c714 <tcp_update_rcv_ann_wnd+0xac>)
 800c680:	f00b fdd8 	bl	8018234 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c688:	687a      	ldr	r2, [r7, #4]
 800c68a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800c68c:	4413      	add	r3, r2
 800c68e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c694:	687a      	ldr	r2, [r7, #4]
 800c696:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800c698:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800c69c:	bf28      	it	cs
 800c69e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800c6a2:	b292      	uxth	r2, r2
 800c6a4:	4413      	add	r3, r2
 800c6a6:	68fa      	ldr	r2, [r7, #12]
 800c6a8:	1ad3      	subs	r3, r2, r3
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	db08      	blt.n	800c6c0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6ba:	68fa      	ldr	r2, [r7, #12]
 800c6bc:	1ad3      	subs	r3, r2, r3
 800c6be:	e020      	b.n	800c702 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6c8:	1ad3      	subs	r3, r2, r3
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	dd03      	ble.n	800c6d6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c6d4:	e014      	b.n	800c700 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6de:	1ad3      	subs	r3, r2, r3
 800c6e0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800c6e2:	68bb      	ldr	r3, [r7, #8]
 800c6e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c6e8:	d306      	bcc.n	800c6f8 <tcp_update_rcv_ann_wnd+0x90>
 800c6ea:	4b08      	ldr	r3, [pc, #32]	; (800c70c <tcp_update_rcv_ann_wnd+0xa4>)
 800c6ec:	f240 32b6 	movw	r2, #950	; 0x3b6
 800c6f0:	4909      	ldr	r1, [pc, #36]	; (800c718 <tcp_update_rcv_ann_wnd+0xb0>)
 800c6f2:	4808      	ldr	r0, [pc, #32]	; (800c714 <tcp_update_rcv_ann_wnd+0xac>)
 800c6f4:	f00b fd9e 	bl	8018234 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800c6f8:	68bb      	ldr	r3, [r7, #8]
 800c6fa:	b29a      	uxth	r2, r3
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800c700:	2300      	movs	r3, #0
  }
}
 800c702:	4618      	mov	r0, r3
 800c704:	3710      	adds	r7, #16
 800c706:	46bd      	mov	sp, r7
 800c708:	bd80      	pop	{r7, pc}
 800c70a:	bf00      	nop
 800c70c:	08019670 	.word	0x08019670
 800c710:	080198cc 	.word	0x080198cc
 800c714:	080196b4 	.word	0x080196b4
 800c718:	080198f0 	.word	0x080198f0

0800c71c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b084      	sub	sp, #16
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
 800c724:	460b      	mov	r3, r1
 800c726:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d107      	bne.n	800c73e <tcp_recved+0x22>
 800c72e:	4b1f      	ldr	r3, [pc, #124]	; (800c7ac <tcp_recved+0x90>)
 800c730:	f240 32cf 	movw	r2, #975	; 0x3cf
 800c734:	491e      	ldr	r1, [pc, #120]	; (800c7b0 <tcp_recved+0x94>)
 800c736:	481f      	ldr	r0, [pc, #124]	; (800c7b4 <tcp_recved+0x98>)
 800c738:	f00b fd7c 	bl	8018234 <iprintf>
 800c73c:	e032      	b.n	800c7a4 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	7d1b      	ldrb	r3, [r3, #20]
 800c742:	2b01      	cmp	r3, #1
 800c744:	d106      	bne.n	800c754 <tcp_recved+0x38>
 800c746:	4b19      	ldr	r3, [pc, #100]	; (800c7ac <tcp_recved+0x90>)
 800c748:	f240 32d2 	movw	r2, #978	; 0x3d2
 800c74c:	491a      	ldr	r1, [pc, #104]	; (800c7b8 <tcp_recved+0x9c>)
 800c74e:	4819      	ldr	r0, [pc, #100]	; (800c7b4 <tcp_recved+0x98>)
 800c750:	f00b fd70 	bl	8018234 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c758:	887b      	ldrh	r3, [r7, #2]
 800c75a:	4413      	add	r3, r2
 800c75c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800c75e:	89fb      	ldrh	r3, [r7, #14]
 800c760:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c764:	d804      	bhi.n	800c770 <tcp_recved+0x54>
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c76a:	89fa      	ldrh	r2, [r7, #14]
 800c76c:	429a      	cmp	r2, r3
 800c76e:	d204      	bcs.n	800c77a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c776:	851a      	strh	r2, [r3, #40]	; 0x28
 800c778:	e002      	b.n	800c780 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	89fa      	ldrh	r2, [r7, #14]
 800c77e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800c780:	6878      	ldr	r0, [r7, #4]
 800c782:	f7ff ff71 	bl	800c668 <tcp_update_rcv_ann_wnd>
 800c786:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800c788:	68bb      	ldr	r3, [r7, #8]
 800c78a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800c78e:	d309      	bcc.n	800c7a4 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	8b5b      	ldrh	r3, [r3, #26]
 800c794:	f043 0302 	orr.w	r3, r3, #2
 800c798:	b29a      	uxth	r2, r3
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c79e:	6878      	ldr	r0, [r7, #4]
 800c7a0:	f003 fe3e 	bl	8010420 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800c7a4:	3710      	adds	r7, #16
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	bd80      	pop	{r7, pc}
 800c7aa:	bf00      	nop
 800c7ac:	08019670 	.word	0x08019670
 800c7b0:	0801990c 	.word	0x0801990c
 800c7b4:	080196b4 	.word	0x080196b4
 800c7b8:	08019924 	.word	0x08019924

0800c7bc <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800c7bc:	b5b0      	push	{r4, r5, r7, lr}
 800c7be:	b090      	sub	sp, #64	; 0x40
 800c7c0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800c7c8:	4b94      	ldr	r3, [pc, #592]	; (800ca1c <tcp_slowtmr+0x260>)
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	3301      	adds	r3, #1
 800c7ce:	4a93      	ldr	r2, [pc, #588]	; (800ca1c <tcp_slowtmr+0x260>)
 800c7d0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800c7d2:	4b93      	ldr	r3, [pc, #588]	; (800ca20 <tcp_slowtmr+0x264>)
 800c7d4:	781b      	ldrb	r3, [r3, #0]
 800c7d6:	3301      	adds	r3, #1
 800c7d8:	b2da      	uxtb	r2, r3
 800c7da:	4b91      	ldr	r3, [pc, #580]	; (800ca20 <tcp_slowtmr+0x264>)
 800c7dc:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800c7de:	2300      	movs	r3, #0
 800c7e0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800c7e2:	4b90      	ldr	r3, [pc, #576]	; (800ca24 <tcp_slowtmr+0x268>)
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800c7e8:	e29d      	b.n	800cd26 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800c7ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ec:	7d1b      	ldrb	r3, [r3, #20]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d106      	bne.n	800c800 <tcp_slowtmr+0x44>
 800c7f2:	4b8d      	ldr	r3, [pc, #564]	; (800ca28 <tcp_slowtmr+0x26c>)
 800c7f4:	f240 42be 	movw	r2, #1214	; 0x4be
 800c7f8:	498c      	ldr	r1, [pc, #560]	; (800ca2c <tcp_slowtmr+0x270>)
 800c7fa:	488d      	ldr	r0, [pc, #564]	; (800ca30 <tcp_slowtmr+0x274>)
 800c7fc:	f00b fd1a 	bl	8018234 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800c800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c802:	7d1b      	ldrb	r3, [r3, #20]
 800c804:	2b01      	cmp	r3, #1
 800c806:	d106      	bne.n	800c816 <tcp_slowtmr+0x5a>
 800c808:	4b87      	ldr	r3, [pc, #540]	; (800ca28 <tcp_slowtmr+0x26c>)
 800c80a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800c80e:	4989      	ldr	r1, [pc, #548]	; (800ca34 <tcp_slowtmr+0x278>)
 800c810:	4887      	ldr	r0, [pc, #540]	; (800ca30 <tcp_slowtmr+0x274>)
 800c812:	f00b fd0f 	bl	8018234 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800c816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c818:	7d1b      	ldrb	r3, [r3, #20]
 800c81a:	2b0a      	cmp	r3, #10
 800c81c:	d106      	bne.n	800c82c <tcp_slowtmr+0x70>
 800c81e:	4b82      	ldr	r3, [pc, #520]	; (800ca28 <tcp_slowtmr+0x26c>)
 800c820:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800c824:	4984      	ldr	r1, [pc, #528]	; (800ca38 <tcp_slowtmr+0x27c>)
 800c826:	4882      	ldr	r0, [pc, #520]	; (800ca30 <tcp_slowtmr+0x274>)
 800c828:	f00b fd04 	bl	8018234 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800c82c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c82e:	7f9a      	ldrb	r2, [r3, #30]
 800c830:	4b7b      	ldr	r3, [pc, #492]	; (800ca20 <tcp_slowtmr+0x264>)
 800c832:	781b      	ldrb	r3, [r3, #0]
 800c834:	429a      	cmp	r2, r3
 800c836:	d105      	bne.n	800c844 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800c838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c83a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c83c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c83e:	68db      	ldr	r3, [r3, #12]
 800c840:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800c842:	e270      	b.n	800cd26 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800c844:	4b76      	ldr	r3, [pc, #472]	; (800ca20 <tcp_slowtmr+0x264>)
 800c846:	781a      	ldrb	r2, [r3, #0]
 800c848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c84a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800c84c:	2300      	movs	r3, #0
 800c84e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800c852:	2300      	movs	r3, #0
 800c854:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800c858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c85a:	7d1b      	ldrb	r3, [r3, #20]
 800c85c:	2b02      	cmp	r3, #2
 800c85e:	d10a      	bne.n	800c876 <tcp_slowtmr+0xba>
 800c860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c862:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c866:	2b05      	cmp	r3, #5
 800c868:	d905      	bls.n	800c876 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800c86a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c86e:	3301      	adds	r3, #1
 800c870:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c874:	e11e      	b.n	800cab4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800c876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c878:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c87c:	2b0b      	cmp	r3, #11
 800c87e:	d905      	bls.n	800c88c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800c880:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c884:	3301      	adds	r3, #1
 800c886:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c88a:	e113      	b.n	800cab4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800c88c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c88e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c892:	2b00      	cmp	r3, #0
 800c894:	d075      	beq.n	800c982 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800c896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d006      	beq.n	800c8ac <tcp_slowtmr+0xf0>
 800c89e:	4b62      	ldr	r3, [pc, #392]	; (800ca28 <tcp_slowtmr+0x26c>)
 800c8a0:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800c8a4:	4965      	ldr	r1, [pc, #404]	; (800ca3c <tcp_slowtmr+0x280>)
 800c8a6:	4862      	ldr	r0, [pc, #392]	; (800ca30 <tcp_slowtmr+0x274>)
 800c8a8:	f00b fcc4 	bl	8018234 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800c8ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d106      	bne.n	800c8c2 <tcp_slowtmr+0x106>
 800c8b4:	4b5c      	ldr	r3, [pc, #368]	; (800ca28 <tcp_slowtmr+0x26c>)
 800c8b6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800c8ba:	4961      	ldr	r1, [pc, #388]	; (800ca40 <tcp_slowtmr+0x284>)
 800c8bc:	485c      	ldr	r0, [pc, #368]	; (800ca30 <tcp_slowtmr+0x274>)
 800c8be:	f00b fcb9 	bl	8018234 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800c8c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8c4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c8c8:	2b0b      	cmp	r3, #11
 800c8ca:	d905      	bls.n	800c8d8 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800c8cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c8d0:	3301      	adds	r3, #1
 800c8d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c8d6:	e0ed      	b.n	800cab4 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800c8d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8da:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c8de:	3b01      	subs	r3, #1
 800c8e0:	4a58      	ldr	r2, [pc, #352]	; (800ca44 <tcp_slowtmr+0x288>)
 800c8e2:	5cd3      	ldrb	r3, [r2, r3]
 800c8e4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800c8e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8e8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c8ec:	7c7a      	ldrb	r2, [r7, #17]
 800c8ee:	429a      	cmp	r2, r3
 800c8f0:	d907      	bls.n	800c902 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800c8f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8f4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c8f8:	3301      	adds	r3, #1
 800c8fa:	b2da      	uxtb	r2, r3
 800c8fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8fe:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800c902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c904:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c908:	7c7a      	ldrb	r2, [r7, #17]
 800c90a:	429a      	cmp	r2, r3
 800c90c:	f200 80d2 	bhi.w	800cab4 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800c910:	2301      	movs	r3, #1
 800c912:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800c914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c916:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d108      	bne.n	800c930 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800c91e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c920:	f004 fc26 	bl	8011170 <tcp_zero_window_probe>
 800c924:	4603      	mov	r3, r0
 800c926:	2b00      	cmp	r3, #0
 800c928:	d014      	beq.n	800c954 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800c92a:	2300      	movs	r3, #0
 800c92c:	623b      	str	r3, [r7, #32]
 800c92e:	e011      	b.n	800c954 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800c930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c932:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c936:	4619      	mov	r1, r3
 800c938:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c93a:	f003 faeb 	bl	800ff14 <tcp_split_unsent_seg>
 800c93e:	4603      	mov	r3, r0
 800c940:	2b00      	cmp	r3, #0
 800c942:	d107      	bne.n	800c954 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800c944:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c946:	f003 fd6b 	bl	8010420 <tcp_output>
 800c94a:	4603      	mov	r3, r0
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d101      	bne.n	800c954 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800c950:	2300      	movs	r3, #0
 800c952:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800c954:	6a3b      	ldr	r3, [r7, #32]
 800c956:	2b00      	cmp	r3, #0
 800c958:	f000 80ac 	beq.w	800cab4 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800c95c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c95e:	2200      	movs	r2, #0
 800c960:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800c964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c966:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c96a:	2b06      	cmp	r3, #6
 800c96c:	f200 80a2 	bhi.w	800cab4 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800c970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c972:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c976:	3301      	adds	r3, #1
 800c978:	b2da      	uxtb	r2, r3
 800c97a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c97c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800c980:	e098      	b.n	800cab4 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800c982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c984:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c988:	2b00      	cmp	r3, #0
 800c98a:	db0f      	blt.n	800c9ac <tcp_slowtmr+0x1f0>
 800c98c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c98e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c992:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c996:	4293      	cmp	r3, r2
 800c998:	d008      	beq.n	800c9ac <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800c99a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c99c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c9a0:	b29b      	uxth	r3, r3
 800c9a2:	3301      	adds	r3, #1
 800c9a4:	b29b      	uxth	r3, r3
 800c9a6:	b21a      	sxth	r2, r3
 800c9a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9aa:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800c9ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9ae:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800c9b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9b4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800c9b8:	429a      	cmp	r2, r3
 800c9ba:	db7b      	blt.n	800cab4 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800c9bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c9be:	f004 f821 	bl	8010a04 <tcp_rexmit_rto_prepare>
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d007      	beq.n	800c9d8 <tcp_slowtmr+0x21c>
 800c9c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d171      	bne.n	800cab4 <tcp_slowtmr+0x2f8>
 800c9d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d06d      	beq.n	800cab4 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800c9d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9da:	7d1b      	ldrb	r3, [r3, #20]
 800c9dc:	2b02      	cmp	r3, #2
 800c9de:	d03a      	beq.n	800ca56 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800c9e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c9e6:	2b0c      	cmp	r3, #12
 800c9e8:	bf28      	it	cs
 800c9ea:	230c      	movcs	r3, #12
 800c9ec:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800c9ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9f0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c9f4:	10db      	asrs	r3, r3, #3
 800c9f6:	b21b      	sxth	r3, r3
 800c9f8:	461a      	mov	r2, r3
 800c9fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9fc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ca00:	4413      	add	r3, r2
 800ca02:	7efa      	ldrb	r2, [r7, #27]
 800ca04:	4910      	ldr	r1, [pc, #64]	; (800ca48 <tcp_slowtmr+0x28c>)
 800ca06:	5c8a      	ldrb	r2, [r1, r2]
 800ca08:	4093      	lsls	r3, r2
 800ca0a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800ca0c:	697b      	ldr	r3, [r7, #20]
 800ca0e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800ca12:	4293      	cmp	r3, r2
 800ca14:	dc1a      	bgt.n	800ca4c <tcp_slowtmr+0x290>
 800ca16:	697b      	ldr	r3, [r7, #20]
 800ca18:	b21a      	sxth	r2, r3
 800ca1a:	e019      	b.n	800ca50 <tcp_slowtmr+0x294>
 800ca1c:	2000dc48 	.word	0x2000dc48
 800ca20:	20004bc6 	.word	0x20004bc6
 800ca24:	2000dc44 	.word	0x2000dc44
 800ca28:	08019670 	.word	0x08019670
 800ca2c:	080199b4 	.word	0x080199b4
 800ca30:	080196b4 	.word	0x080196b4
 800ca34:	080199e0 	.word	0x080199e0
 800ca38:	08019a0c 	.word	0x08019a0c
 800ca3c:	08019a3c 	.word	0x08019a3c
 800ca40:	08019a70 	.word	0x08019a70
 800ca44:	0801b808 	.word	0x0801b808
 800ca48:	0801b7f8 	.word	0x0801b7f8
 800ca4c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ca50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca52:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800ca56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca58:	2200      	movs	r2, #0
 800ca5a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800ca5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca5e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ca62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca64:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ca68:	4293      	cmp	r3, r2
 800ca6a:	bf28      	it	cs
 800ca6c:	4613      	movcs	r3, r2
 800ca6e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800ca70:	8a7b      	ldrh	r3, [r7, #18]
 800ca72:	085b      	lsrs	r3, r3, #1
 800ca74:	b29a      	uxth	r2, r3
 800ca76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca78:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800ca7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca7e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ca82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ca86:	005b      	lsls	r3, r3, #1
 800ca88:	b29b      	uxth	r3, r3
 800ca8a:	429a      	cmp	r2, r3
 800ca8c:	d206      	bcs.n	800ca9c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800ca8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ca92:	005b      	lsls	r3, r3, #1
 800ca94:	b29a      	uxth	r2, r3
 800ca96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca98:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800ca9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca9e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800caa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caa2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800caa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caa8:	2200      	movs	r2, #0
 800caaa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800caae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cab0:	f004 f818 	bl	8010ae4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800cab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cab6:	7d1b      	ldrb	r3, [r3, #20]
 800cab8:	2b06      	cmp	r3, #6
 800caba:	d111      	bne.n	800cae0 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800cabc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cabe:	8b5b      	ldrh	r3, [r3, #26]
 800cac0:	f003 0310 	and.w	r3, r3, #16
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d00b      	beq.n	800cae0 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cac8:	4b9c      	ldr	r3, [pc, #624]	; (800cd3c <tcp_slowtmr+0x580>)
 800caca:	681a      	ldr	r2, [r3, #0]
 800cacc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cace:	6a1b      	ldr	r3, [r3, #32]
 800cad0:	1ad3      	subs	r3, r2, r3
 800cad2:	2b28      	cmp	r3, #40	; 0x28
 800cad4:	d904      	bls.n	800cae0 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800cad6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cada:	3301      	adds	r3, #1
 800cadc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800cae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cae2:	7a5b      	ldrb	r3, [r3, #9]
 800cae4:	f003 0308 	and.w	r3, r3, #8
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d04a      	beq.n	800cb82 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800caec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caee:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800caf0:	2b04      	cmp	r3, #4
 800caf2:	d003      	beq.n	800cafc <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800caf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caf6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800caf8:	2b07      	cmp	r3, #7
 800cafa:	d142      	bne.n	800cb82 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cafc:	4b8f      	ldr	r3, [pc, #572]	; (800cd3c <tcp_slowtmr+0x580>)
 800cafe:	681a      	ldr	r2, [r3, #0]
 800cb00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb02:	6a1b      	ldr	r3, [r3, #32]
 800cb04:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800cb06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb08:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800cb0c:	4b8c      	ldr	r3, [pc, #560]	; (800cd40 <tcp_slowtmr+0x584>)
 800cb0e:	440b      	add	r3, r1
 800cb10:	498c      	ldr	r1, [pc, #560]	; (800cd44 <tcp_slowtmr+0x588>)
 800cb12:	fba1 1303 	umull	r1, r3, r1, r3
 800cb16:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cb18:	429a      	cmp	r2, r3
 800cb1a:	d90a      	bls.n	800cb32 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800cb1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb20:	3301      	adds	r3, #1
 800cb22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800cb26:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cb2a:	3301      	adds	r3, #1
 800cb2c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cb30:	e027      	b.n	800cb82 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cb32:	4b82      	ldr	r3, [pc, #520]	; (800cd3c <tcp_slowtmr+0x580>)
 800cb34:	681a      	ldr	r2, [r3, #0]
 800cb36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb38:	6a1b      	ldr	r3, [r3, #32]
 800cb3a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800cb3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb3e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800cb42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb44:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800cb48:	4618      	mov	r0, r3
 800cb4a:	4b7f      	ldr	r3, [pc, #508]	; (800cd48 <tcp_slowtmr+0x58c>)
 800cb4c:	fb03 f300 	mul.w	r3, r3, r0
 800cb50:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800cb52:	497c      	ldr	r1, [pc, #496]	; (800cd44 <tcp_slowtmr+0x588>)
 800cb54:	fba1 1303 	umull	r1, r3, r1, r3
 800cb58:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cb5a:	429a      	cmp	r2, r3
 800cb5c:	d911      	bls.n	800cb82 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800cb5e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cb60:	f004 fac6 	bl	80110f0 <tcp_keepalive>
 800cb64:	4603      	mov	r3, r0
 800cb66:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800cb6a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d107      	bne.n	800cb82 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800cb72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb74:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800cb78:	3301      	adds	r3, #1
 800cb7a:	b2da      	uxtb	r2, r3
 800cb7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb7e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800cb82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d011      	beq.n	800cbae <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800cb8a:	4b6c      	ldr	r3, [pc, #432]	; (800cd3c <tcp_slowtmr+0x580>)
 800cb8c:	681a      	ldr	r2, [r3, #0]
 800cb8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb90:	6a1b      	ldr	r3, [r3, #32]
 800cb92:	1ad2      	subs	r2, r2, r3
 800cb94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb96:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800cb9a:	4619      	mov	r1, r3
 800cb9c:	460b      	mov	r3, r1
 800cb9e:	005b      	lsls	r3, r3, #1
 800cba0:	440b      	add	r3, r1
 800cba2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800cba4:	429a      	cmp	r2, r3
 800cba6:	d302      	bcc.n	800cbae <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800cba8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cbaa:	f000 fddd 	bl	800d768 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800cbae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbb0:	7d1b      	ldrb	r3, [r3, #20]
 800cbb2:	2b03      	cmp	r3, #3
 800cbb4:	d10b      	bne.n	800cbce <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cbb6:	4b61      	ldr	r3, [pc, #388]	; (800cd3c <tcp_slowtmr+0x580>)
 800cbb8:	681a      	ldr	r2, [r3, #0]
 800cbba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbbc:	6a1b      	ldr	r3, [r3, #32]
 800cbbe:	1ad3      	subs	r3, r2, r3
 800cbc0:	2b28      	cmp	r3, #40	; 0x28
 800cbc2:	d904      	bls.n	800cbce <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800cbc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cbc8:	3301      	adds	r3, #1
 800cbca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800cbce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbd0:	7d1b      	ldrb	r3, [r3, #20]
 800cbd2:	2b09      	cmp	r3, #9
 800cbd4:	d10b      	bne.n	800cbee <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800cbd6:	4b59      	ldr	r3, [pc, #356]	; (800cd3c <tcp_slowtmr+0x580>)
 800cbd8:	681a      	ldr	r2, [r3, #0]
 800cbda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbdc:	6a1b      	ldr	r3, [r3, #32]
 800cbde:	1ad3      	subs	r3, r2, r3
 800cbe0:	2bf0      	cmp	r3, #240	; 0xf0
 800cbe2:	d904      	bls.n	800cbee <tcp_slowtmr+0x432>
        ++pcb_remove;
 800cbe4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cbe8:	3301      	adds	r3, #1
 800cbea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800cbee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d060      	beq.n	800ccb8 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800cbf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cbfc:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800cbfe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cc00:	f000 fbfe 	bl	800d400 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800cc04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d010      	beq.n	800cc2c <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800cc0a:	4b50      	ldr	r3, [pc, #320]	; (800cd4c <tcp_slowtmr+0x590>)
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc10:	429a      	cmp	r2, r3
 800cc12:	d106      	bne.n	800cc22 <tcp_slowtmr+0x466>
 800cc14:	4b4e      	ldr	r3, [pc, #312]	; (800cd50 <tcp_slowtmr+0x594>)
 800cc16:	f240 526d 	movw	r2, #1389	; 0x56d
 800cc1a:	494e      	ldr	r1, [pc, #312]	; (800cd54 <tcp_slowtmr+0x598>)
 800cc1c:	484e      	ldr	r0, [pc, #312]	; (800cd58 <tcp_slowtmr+0x59c>)
 800cc1e:	f00b fb09 	bl	8018234 <iprintf>
        prev->next = pcb->next;
 800cc22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc24:	68da      	ldr	r2, [r3, #12]
 800cc26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc28:	60da      	str	r2, [r3, #12]
 800cc2a:	e00f      	b.n	800cc4c <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800cc2c:	4b47      	ldr	r3, [pc, #284]	; (800cd4c <tcp_slowtmr+0x590>)
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc32:	429a      	cmp	r2, r3
 800cc34:	d006      	beq.n	800cc44 <tcp_slowtmr+0x488>
 800cc36:	4b46      	ldr	r3, [pc, #280]	; (800cd50 <tcp_slowtmr+0x594>)
 800cc38:	f240 5271 	movw	r2, #1393	; 0x571
 800cc3c:	4947      	ldr	r1, [pc, #284]	; (800cd5c <tcp_slowtmr+0x5a0>)
 800cc3e:	4846      	ldr	r0, [pc, #280]	; (800cd58 <tcp_slowtmr+0x59c>)
 800cc40:	f00b faf8 	bl	8018234 <iprintf>
        tcp_active_pcbs = pcb->next;
 800cc44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc46:	68db      	ldr	r3, [r3, #12]
 800cc48:	4a40      	ldr	r2, [pc, #256]	; (800cd4c <tcp_slowtmr+0x590>)
 800cc4a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800cc4c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d013      	beq.n	800cc7c <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800cc54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc56:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800cc58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc5a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800cc5c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800cc5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc60:	3304      	adds	r3, #4
 800cc62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc64:	8ad2      	ldrh	r2, [r2, #22]
 800cc66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cc68:	8b09      	ldrh	r1, [r1, #24]
 800cc6a:	9102      	str	r1, [sp, #8]
 800cc6c:	9201      	str	r2, [sp, #4]
 800cc6e:	9300      	str	r3, [sp, #0]
 800cc70:	462b      	mov	r3, r5
 800cc72:	4622      	mov	r2, r4
 800cc74:	4601      	mov	r1, r0
 800cc76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cc78:	f004 f986 	bl	8010f88 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800cc7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc7e:	691b      	ldr	r3, [r3, #16]
 800cc80:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800cc82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc84:	7d1b      	ldrb	r3, [r3, #20]
 800cc86:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800cc88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc8a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800cc8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc8e:	68db      	ldr	r3, [r3, #12]
 800cc90:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800cc92:	6838      	ldr	r0, [r7, #0]
 800cc94:	f7ff f9f4 	bl	800c080 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800cc98:	4b31      	ldr	r3, [pc, #196]	; (800cd60 <tcp_slowtmr+0x5a4>)
 800cc9a:	2200      	movs	r2, #0
 800cc9c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d004      	beq.n	800ccae <tcp_slowtmr+0x4f2>
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	f06f 010c 	mvn.w	r1, #12
 800ccaa:	68b8      	ldr	r0, [r7, #8]
 800ccac:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800ccae:	4b2c      	ldr	r3, [pc, #176]	; (800cd60 <tcp_slowtmr+0x5a4>)
 800ccb0:	781b      	ldrb	r3, [r3, #0]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d037      	beq.n	800cd26 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800ccb6:	e592      	b.n	800c7de <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800ccb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccba:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ccbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccbe:	68db      	ldr	r3, [r3, #12]
 800ccc0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800ccc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccc4:	7f1b      	ldrb	r3, [r3, #28]
 800ccc6:	3301      	adds	r3, #1
 800ccc8:	b2da      	uxtb	r2, r3
 800ccca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cccc:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800ccce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccd0:	7f1a      	ldrb	r2, [r3, #28]
 800ccd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccd4:	7f5b      	ldrb	r3, [r3, #29]
 800ccd6:	429a      	cmp	r2, r3
 800ccd8:	d325      	bcc.n	800cd26 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800ccda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccdc:	2200      	movs	r2, #0
 800ccde:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800cce0:	4b1f      	ldr	r3, [pc, #124]	; (800cd60 <tcp_slowtmr+0x5a4>)
 800cce2:	2200      	movs	r2, #0
 800cce4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800cce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cce8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d00b      	beq.n	800cd08 <tcp_slowtmr+0x54c>
 800ccf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ccf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ccf8:	6912      	ldr	r2, [r2, #16]
 800ccfa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ccfc:	4610      	mov	r0, r2
 800ccfe:	4798      	blx	r3
 800cd00:	4603      	mov	r3, r0
 800cd02:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800cd06:	e002      	b.n	800cd0e <tcp_slowtmr+0x552>
 800cd08:	2300      	movs	r3, #0
 800cd0a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800cd0e:	4b14      	ldr	r3, [pc, #80]	; (800cd60 <tcp_slowtmr+0x5a4>)
 800cd10:	781b      	ldrb	r3, [r3, #0]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d000      	beq.n	800cd18 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800cd16:	e562      	b.n	800c7de <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800cd18:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d102      	bne.n	800cd26 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800cd20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cd22:	f003 fb7d 	bl	8010420 <tcp_output>
  while (pcb != NULL) {
 800cd26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	f47f ad5e 	bne.w	800c7ea <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800cd2e:	2300      	movs	r3, #0
 800cd30:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800cd32:	4b0c      	ldr	r3, [pc, #48]	; (800cd64 <tcp_slowtmr+0x5a8>)
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800cd38:	e069      	b.n	800ce0e <tcp_slowtmr+0x652>
 800cd3a:	bf00      	nop
 800cd3c:	2000dc48 	.word	0x2000dc48
 800cd40:	000a4cb8 	.word	0x000a4cb8
 800cd44:	10624dd3 	.word	0x10624dd3
 800cd48:	000124f8 	.word	0x000124f8
 800cd4c:	2000dc44 	.word	0x2000dc44
 800cd50:	08019670 	.word	0x08019670
 800cd54:	08019aa8 	.word	0x08019aa8
 800cd58:	080196b4 	.word	0x080196b4
 800cd5c:	08019ad4 	.word	0x08019ad4
 800cd60:	2000dc40 	.word	0x2000dc40
 800cd64:	2000dc54 	.word	0x2000dc54
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800cd68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd6a:	7d1b      	ldrb	r3, [r3, #20]
 800cd6c:	2b0a      	cmp	r3, #10
 800cd6e:	d006      	beq.n	800cd7e <tcp_slowtmr+0x5c2>
 800cd70:	4b2b      	ldr	r3, [pc, #172]	; (800ce20 <tcp_slowtmr+0x664>)
 800cd72:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800cd76:	492b      	ldr	r1, [pc, #172]	; (800ce24 <tcp_slowtmr+0x668>)
 800cd78:	482b      	ldr	r0, [pc, #172]	; (800ce28 <tcp_slowtmr+0x66c>)
 800cd7a:	f00b fa5b 	bl	8018234 <iprintf>
    pcb_remove = 0;
 800cd7e:	2300      	movs	r3, #0
 800cd80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800cd84:	4b29      	ldr	r3, [pc, #164]	; (800ce2c <tcp_slowtmr+0x670>)
 800cd86:	681a      	ldr	r2, [r3, #0]
 800cd88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd8a:	6a1b      	ldr	r3, [r3, #32]
 800cd8c:	1ad3      	subs	r3, r2, r3
 800cd8e:	2bf0      	cmp	r3, #240	; 0xf0
 800cd90:	d904      	bls.n	800cd9c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800cd92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd96:	3301      	adds	r3, #1
 800cd98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800cd9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d02f      	beq.n	800ce04 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800cda4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cda6:	f000 fb2b 	bl	800d400 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800cdaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d010      	beq.n	800cdd2 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800cdb0:	4b1f      	ldr	r3, [pc, #124]	; (800ce30 <tcp_slowtmr+0x674>)
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cdb6:	429a      	cmp	r2, r3
 800cdb8:	d106      	bne.n	800cdc8 <tcp_slowtmr+0x60c>
 800cdba:	4b19      	ldr	r3, [pc, #100]	; (800ce20 <tcp_slowtmr+0x664>)
 800cdbc:	f240 52af 	movw	r2, #1455	; 0x5af
 800cdc0:	491c      	ldr	r1, [pc, #112]	; (800ce34 <tcp_slowtmr+0x678>)
 800cdc2:	4819      	ldr	r0, [pc, #100]	; (800ce28 <tcp_slowtmr+0x66c>)
 800cdc4:	f00b fa36 	bl	8018234 <iprintf>
        prev->next = pcb->next;
 800cdc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdca:	68da      	ldr	r2, [r3, #12]
 800cdcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdce:	60da      	str	r2, [r3, #12]
 800cdd0:	e00f      	b.n	800cdf2 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800cdd2:	4b17      	ldr	r3, [pc, #92]	; (800ce30 <tcp_slowtmr+0x674>)
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cdd8:	429a      	cmp	r2, r3
 800cdda:	d006      	beq.n	800cdea <tcp_slowtmr+0x62e>
 800cddc:	4b10      	ldr	r3, [pc, #64]	; (800ce20 <tcp_slowtmr+0x664>)
 800cdde:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800cde2:	4915      	ldr	r1, [pc, #84]	; (800ce38 <tcp_slowtmr+0x67c>)
 800cde4:	4810      	ldr	r0, [pc, #64]	; (800ce28 <tcp_slowtmr+0x66c>)
 800cde6:	f00b fa25 	bl	8018234 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800cdea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdec:	68db      	ldr	r3, [r3, #12]
 800cdee:	4a10      	ldr	r2, [pc, #64]	; (800ce30 <tcp_slowtmr+0x674>)
 800cdf0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800cdf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdf4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800cdf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdf8:	68db      	ldr	r3, [r3, #12]
 800cdfa:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800cdfc:	69f8      	ldr	r0, [r7, #28]
 800cdfe:	f7ff f93f 	bl	800c080 <tcp_free>
 800ce02:	e004      	b.n	800ce0e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800ce04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce06:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ce08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce0a:	68db      	ldr	r3, [r3, #12]
 800ce0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ce0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d1a9      	bne.n	800cd68 <tcp_slowtmr+0x5ac>
    }
  }
}
 800ce14:	bf00      	nop
 800ce16:	bf00      	nop
 800ce18:	3730      	adds	r7, #48	; 0x30
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	bdb0      	pop	{r4, r5, r7, pc}
 800ce1e:	bf00      	nop
 800ce20:	08019670 	.word	0x08019670
 800ce24:	08019b00 	.word	0x08019b00
 800ce28:	080196b4 	.word	0x080196b4
 800ce2c:	2000dc48 	.word	0x2000dc48
 800ce30:	2000dc54 	.word	0x2000dc54
 800ce34:	08019b30 	.word	0x08019b30
 800ce38:	08019b58 	.word	0x08019b58

0800ce3c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b082      	sub	sp, #8
 800ce40:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800ce42:	4b2d      	ldr	r3, [pc, #180]	; (800cef8 <tcp_fasttmr+0xbc>)
 800ce44:	781b      	ldrb	r3, [r3, #0]
 800ce46:	3301      	adds	r3, #1
 800ce48:	b2da      	uxtb	r2, r3
 800ce4a:	4b2b      	ldr	r3, [pc, #172]	; (800cef8 <tcp_fasttmr+0xbc>)
 800ce4c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800ce4e:	4b2b      	ldr	r3, [pc, #172]	; (800cefc <tcp_fasttmr+0xc0>)
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ce54:	e048      	b.n	800cee8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	7f9a      	ldrb	r2, [r3, #30]
 800ce5a:	4b27      	ldr	r3, [pc, #156]	; (800cef8 <tcp_fasttmr+0xbc>)
 800ce5c:	781b      	ldrb	r3, [r3, #0]
 800ce5e:	429a      	cmp	r2, r3
 800ce60:	d03f      	beq.n	800cee2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800ce62:	4b25      	ldr	r3, [pc, #148]	; (800cef8 <tcp_fasttmr+0xbc>)
 800ce64:	781a      	ldrb	r2, [r3, #0]
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	8b5b      	ldrh	r3, [r3, #26]
 800ce6e:	f003 0301 	and.w	r3, r3, #1
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d010      	beq.n	800ce98 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	8b5b      	ldrh	r3, [r3, #26]
 800ce7a:	f043 0302 	orr.w	r3, r3, #2
 800ce7e:	b29a      	uxth	r2, r3
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800ce84:	6878      	ldr	r0, [r7, #4]
 800ce86:	f003 facb 	bl	8010420 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	8b5b      	ldrh	r3, [r3, #26]
 800ce8e:	f023 0303 	bic.w	r3, r3, #3
 800ce92:	b29a      	uxth	r2, r3
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	8b5b      	ldrh	r3, [r3, #26]
 800ce9c:	f003 0308 	and.w	r3, r3, #8
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d009      	beq.n	800ceb8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	8b5b      	ldrh	r3, [r3, #26]
 800cea8:	f023 0308 	bic.w	r3, r3, #8
 800ceac:	b29a      	uxth	r2, r3
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800ceb2:	6878      	ldr	r0, [r7, #4]
 800ceb4:	f7ff fa78 	bl	800c3a8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	68db      	ldr	r3, [r3, #12]
 800cebc:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d00a      	beq.n	800cedc <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800cec6:	4b0e      	ldr	r3, [pc, #56]	; (800cf00 <tcp_fasttmr+0xc4>)
 800cec8:	2200      	movs	r2, #0
 800ceca:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800cecc:	6878      	ldr	r0, [r7, #4]
 800cece:	f000 f819 	bl	800cf04 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800ced2:	4b0b      	ldr	r3, [pc, #44]	; (800cf00 <tcp_fasttmr+0xc4>)
 800ced4:	781b      	ldrb	r3, [r3, #0]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d000      	beq.n	800cedc <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800ceda:	e7b8      	b.n	800ce4e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800cedc:	683b      	ldr	r3, [r7, #0]
 800cede:	607b      	str	r3, [r7, #4]
 800cee0:	e002      	b.n	800cee8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	68db      	ldr	r3, [r3, #12]
 800cee6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d1b3      	bne.n	800ce56 <tcp_fasttmr+0x1a>
    }
  }
}
 800ceee:	bf00      	nop
 800cef0:	bf00      	nop
 800cef2:	3708      	adds	r7, #8
 800cef4:	46bd      	mov	sp, r7
 800cef6:	bd80      	pop	{r7, pc}
 800cef8:	20004bc6 	.word	0x20004bc6
 800cefc:	2000dc44 	.word	0x2000dc44
 800cf00:	2000dc40 	.word	0x2000dc40

0800cf04 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800cf04:	b590      	push	{r4, r7, lr}
 800cf06:	b085      	sub	sp, #20
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d109      	bne.n	800cf26 <tcp_process_refused_data+0x22>
 800cf12:	4b37      	ldr	r3, [pc, #220]	; (800cff0 <tcp_process_refused_data+0xec>)
 800cf14:	f240 6209 	movw	r2, #1545	; 0x609
 800cf18:	4936      	ldr	r1, [pc, #216]	; (800cff4 <tcp_process_refused_data+0xf0>)
 800cf1a:	4837      	ldr	r0, [pc, #220]	; (800cff8 <tcp_process_refused_data+0xf4>)
 800cf1c:	f00b f98a 	bl	8018234 <iprintf>
 800cf20:	f06f 030f 	mvn.w	r3, #15
 800cf24:	e060      	b.n	800cfe8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cf2a:	7b5b      	ldrb	r3, [r3, #13]
 800cf2c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cf32:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	2200      	movs	r2, #0
 800cf38:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d00b      	beq.n	800cf5c <tcp_process_refused_data+0x58>
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	6918      	ldr	r0, [r3, #16]
 800cf4e:	2300      	movs	r3, #0
 800cf50:	68ba      	ldr	r2, [r7, #8]
 800cf52:	6879      	ldr	r1, [r7, #4]
 800cf54:	47a0      	blx	r4
 800cf56:	4603      	mov	r3, r0
 800cf58:	73fb      	strb	r3, [r7, #15]
 800cf5a:	e007      	b.n	800cf6c <tcp_process_refused_data+0x68>
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	68ba      	ldr	r2, [r7, #8]
 800cf60:	6879      	ldr	r1, [r7, #4]
 800cf62:	2000      	movs	r0, #0
 800cf64:	f000 f8a4 	bl	800d0b0 <tcp_recv_null>
 800cf68:	4603      	mov	r3, r0
 800cf6a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800cf6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d12a      	bne.n	800cfca <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800cf74:	7bbb      	ldrb	r3, [r7, #14]
 800cf76:	f003 0320 	and.w	r3, r3, #32
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d033      	beq.n	800cfe6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf82:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800cf86:	d005      	beq.n	800cf94 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf8c:	3301      	adds	r3, #1
 800cf8e:	b29a      	uxth	r2, r3
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d00b      	beq.n	800cfb6 <tcp_process_refused_data+0xb2>
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	6918      	ldr	r0, [r3, #16]
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	2200      	movs	r2, #0
 800cfac:	6879      	ldr	r1, [r7, #4]
 800cfae:	47a0      	blx	r4
 800cfb0:	4603      	mov	r3, r0
 800cfb2:	73fb      	strb	r3, [r7, #15]
 800cfb4:	e001      	b.n	800cfba <tcp_process_refused_data+0xb6>
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800cfba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cfbe:	f113 0f0d 	cmn.w	r3, #13
 800cfc2:	d110      	bne.n	800cfe6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800cfc4:	f06f 030c 	mvn.w	r3, #12
 800cfc8:	e00e      	b.n	800cfe8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800cfca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cfce:	f113 0f0d 	cmn.w	r3, #13
 800cfd2:	d102      	bne.n	800cfda <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800cfd4:	f06f 030c 	mvn.w	r3, #12
 800cfd8:	e006      	b.n	800cfe8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	68ba      	ldr	r2, [r7, #8]
 800cfde:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800cfe0:	f06f 0304 	mvn.w	r3, #4
 800cfe4:	e000      	b.n	800cfe8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800cfe6:	2300      	movs	r3, #0
}
 800cfe8:	4618      	mov	r0, r3
 800cfea:	3714      	adds	r7, #20
 800cfec:	46bd      	mov	sp, r7
 800cfee:	bd90      	pop	{r4, r7, pc}
 800cff0:	08019670 	.word	0x08019670
 800cff4:	08019b80 	.word	0x08019b80
 800cff8:	080196b4 	.word	0x080196b4

0800cffc <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b084      	sub	sp, #16
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800d004:	e007      	b.n	800d016 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800d00c:	6878      	ldr	r0, [r7, #4]
 800d00e:	f000 f80a 	bl	800d026 <tcp_seg_free>
    seg = next;
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d1f4      	bne.n	800d006 <tcp_segs_free+0xa>
  }
}
 800d01c:	bf00      	nop
 800d01e:	bf00      	nop
 800d020:	3710      	adds	r7, #16
 800d022:	46bd      	mov	sp, r7
 800d024:	bd80      	pop	{r7, pc}

0800d026 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800d026:	b580      	push	{r7, lr}
 800d028:	b082      	sub	sp, #8
 800d02a:	af00      	add	r7, sp, #0
 800d02c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d00c      	beq.n	800d04e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	685b      	ldr	r3, [r3, #4]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d004      	beq.n	800d046 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	685b      	ldr	r3, [r3, #4]
 800d040:	4618      	mov	r0, r3
 800d042:	f7fe fd71 	bl	800bb28 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800d046:	6879      	ldr	r1, [r7, #4]
 800d048:	2003      	movs	r0, #3
 800d04a:	f7fd fec9 	bl	800ade0 <memp_free>
  }
}
 800d04e:	bf00      	nop
 800d050:	3708      	adds	r7, #8
 800d052:	46bd      	mov	sp, r7
 800d054:	bd80      	pop	{r7, pc}
	...

0800d058 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b084      	sub	sp, #16
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d106      	bne.n	800d074 <tcp_seg_copy+0x1c>
 800d066:	4b0f      	ldr	r3, [pc, #60]	; (800d0a4 <tcp_seg_copy+0x4c>)
 800d068:	f240 6282 	movw	r2, #1666	; 0x682
 800d06c:	490e      	ldr	r1, [pc, #56]	; (800d0a8 <tcp_seg_copy+0x50>)
 800d06e:	480f      	ldr	r0, [pc, #60]	; (800d0ac <tcp_seg_copy+0x54>)
 800d070:	f00b f8e0 	bl	8018234 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800d074:	2003      	movs	r0, #3
 800d076:	f7fd fe61 	bl	800ad3c <memp_malloc>
 800d07a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d101      	bne.n	800d086 <tcp_seg_copy+0x2e>
    return NULL;
 800d082:	2300      	movs	r3, #0
 800d084:	e00a      	b.n	800d09c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800d086:	2210      	movs	r2, #16
 800d088:	6879      	ldr	r1, [r7, #4]
 800d08a:	68f8      	ldr	r0, [r7, #12]
 800d08c:	f00a fd73 	bl	8017b76 <memcpy>
  pbuf_ref(cseg->p);
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	685b      	ldr	r3, [r3, #4]
 800d094:	4618      	mov	r0, r3
 800d096:	f7fe fded 	bl	800bc74 <pbuf_ref>
  return cseg;
 800d09a:	68fb      	ldr	r3, [r7, #12]
}
 800d09c:	4618      	mov	r0, r3
 800d09e:	3710      	adds	r7, #16
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	bd80      	pop	{r7, pc}
 800d0a4:	08019670 	.word	0x08019670
 800d0a8:	08019bc4 	.word	0x08019bc4
 800d0ac:	080196b4 	.word	0x080196b4

0800d0b0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	b084      	sub	sp, #16
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	60f8      	str	r0, [r7, #12]
 800d0b8:	60b9      	str	r1, [r7, #8]
 800d0ba:	607a      	str	r2, [r7, #4]
 800d0bc:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800d0be:	68bb      	ldr	r3, [r7, #8]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d109      	bne.n	800d0d8 <tcp_recv_null+0x28>
 800d0c4:	4b12      	ldr	r3, [pc, #72]	; (800d110 <tcp_recv_null+0x60>)
 800d0c6:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800d0ca:	4912      	ldr	r1, [pc, #72]	; (800d114 <tcp_recv_null+0x64>)
 800d0cc:	4812      	ldr	r0, [pc, #72]	; (800d118 <tcp_recv_null+0x68>)
 800d0ce:	f00b f8b1 	bl	8018234 <iprintf>
 800d0d2:	f06f 030f 	mvn.w	r3, #15
 800d0d6:	e016      	b.n	800d106 <tcp_recv_null+0x56>

  if (p != NULL) {
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d009      	beq.n	800d0f2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	891b      	ldrh	r3, [r3, #8]
 800d0e2:	4619      	mov	r1, r3
 800d0e4:	68b8      	ldr	r0, [r7, #8]
 800d0e6:	f7ff fb19 	bl	800c71c <tcp_recved>
    pbuf_free(p);
 800d0ea:	6878      	ldr	r0, [r7, #4]
 800d0ec:	f7fe fd1c 	bl	800bb28 <pbuf_free>
 800d0f0:	e008      	b.n	800d104 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800d0f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d104      	bne.n	800d104 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800d0fa:	68b8      	ldr	r0, [r7, #8]
 800d0fc:	f7ff f9be 	bl	800c47c <tcp_close>
 800d100:	4603      	mov	r3, r0
 800d102:	e000      	b.n	800d106 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800d104:	2300      	movs	r3, #0
}
 800d106:	4618      	mov	r0, r3
 800d108:	3710      	adds	r7, #16
 800d10a:	46bd      	mov	sp, r7
 800d10c:	bd80      	pop	{r7, pc}
 800d10e:	bf00      	nop
 800d110:	08019670 	.word	0x08019670
 800d114:	08019be0 	.word	0x08019be0
 800d118:	080196b4 	.word	0x080196b4

0800d11c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b086      	sub	sp, #24
 800d120:	af00      	add	r7, sp, #0
 800d122:	4603      	mov	r3, r0
 800d124:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800d126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	db01      	blt.n	800d132 <tcp_kill_prio+0x16>
 800d12e:	79fb      	ldrb	r3, [r7, #7]
 800d130:	e000      	b.n	800d134 <tcp_kill_prio+0x18>
 800d132:	237f      	movs	r3, #127	; 0x7f
 800d134:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800d136:	7afb      	ldrb	r3, [r7, #11]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d034      	beq.n	800d1a6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800d13c:	7afb      	ldrb	r3, [r7, #11]
 800d13e:	3b01      	subs	r3, #1
 800d140:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800d142:	2300      	movs	r3, #0
 800d144:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d146:	2300      	movs	r3, #0
 800d148:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d14a:	4b19      	ldr	r3, [pc, #100]	; (800d1b0 <tcp_kill_prio+0x94>)
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	617b      	str	r3, [r7, #20]
 800d150:	e01f      	b.n	800d192 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800d152:	697b      	ldr	r3, [r7, #20]
 800d154:	7d5b      	ldrb	r3, [r3, #21]
 800d156:	7afa      	ldrb	r2, [r7, #11]
 800d158:	429a      	cmp	r2, r3
 800d15a:	d80c      	bhi.n	800d176 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d15c:	697b      	ldr	r3, [r7, #20]
 800d15e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800d160:	7afa      	ldrb	r2, [r7, #11]
 800d162:	429a      	cmp	r2, r3
 800d164:	d112      	bne.n	800d18c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d166:	4b13      	ldr	r3, [pc, #76]	; (800d1b4 <tcp_kill_prio+0x98>)
 800d168:	681a      	ldr	r2, [r3, #0]
 800d16a:	697b      	ldr	r3, [r7, #20]
 800d16c:	6a1b      	ldr	r3, [r3, #32]
 800d16e:	1ad3      	subs	r3, r2, r3
 800d170:	68fa      	ldr	r2, [r7, #12]
 800d172:	429a      	cmp	r2, r3
 800d174:	d80a      	bhi.n	800d18c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800d176:	4b0f      	ldr	r3, [pc, #60]	; (800d1b4 <tcp_kill_prio+0x98>)
 800d178:	681a      	ldr	r2, [r3, #0]
 800d17a:	697b      	ldr	r3, [r7, #20]
 800d17c:	6a1b      	ldr	r3, [r3, #32]
 800d17e:	1ad3      	subs	r3, r2, r3
 800d180:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800d182:	697b      	ldr	r3, [r7, #20]
 800d184:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800d186:	697b      	ldr	r3, [r7, #20]
 800d188:	7d5b      	ldrb	r3, [r3, #21]
 800d18a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d18c:	697b      	ldr	r3, [r7, #20]
 800d18e:	68db      	ldr	r3, [r3, #12]
 800d190:	617b      	str	r3, [r7, #20]
 800d192:	697b      	ldr	r3, [r7, #20]
 800d194:	2b00      	cmp	r3, #0
 800d196:	d1dc      	bne.n	800d152 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800d198:	693b      	ldr	r3, [r7, #16]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d004      	beq.n	800d1a8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d19e:	6938      	ldr	r0, [r7, #16]
 800d1a0:	f7ff fa56 	bl	800c650 <tcp_abort>
 800d1a4:	e000      	b.n	800d1a8 <tcp_kill_prio+0x8c>
    return;
 800d1a6:	bf00      	nop
  }
}
 800d1a8:	3718      	adds	r7, #24
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bd80      	pop	{r7, pc}
 800d1ae:	bf00      	nop
 800d1b0:	2000dc44 	.word	0x2000dc44
 800d1b4:	2000dc48 	.word	0x2000dc48

0800d1b8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b086      	sub	sp, #24
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	4603      	mov	r3, r0
 800d1c0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800d1c2:	79fb      	ldrb	r3, [r7, #7]
 800d1c4:	2b08      	cmp	r3, #8
 800d1c6:	d009      	beq.n	800d1dc <tcp_kill_state+0x24>
 800d1c8:	79fb      	ldrb	r3, [r7, #7]
 800d1ca:	2b09      	cmp	r3, #9
 800d1cc:	d006      	beq.n	800d1dc <tcp_kill_state+0x24>
 800d1ce:	4b1a      	ldr	r3, [pc, #104]	; (800d238 <tcp_kill_state+0x80>)
 800d1d0:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800d1d4:	4919      	ldr	r1, [pc, #100]	; (800d23c <tcp_kill_state+0x84>)
 800d1d6:	481a      	ldr	r0, [pc, #104]	; (800d240 <tcp_kill_state+0x88>)
 800d1d8:	f00b f82c 	bl	8018234 <iprintf>

  inactivity = 0;
 800d1dc:	2300      	movs	r3, #0
 800d1de:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d1e4:	4b17      	ldr	r3, [pc, #92]	; (800d244 <tcp_kill_state+0x8c>)
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	617b      	str	r3, [r7, #20]
 800d1ea:	e017      	b.n	800d21c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800d1ec:	697b      	ldr	r3, [r7, #20]
 800d1ee:	7d1b      	ldrb	r3, [r3, #20]
 800d1f0:	79fa      	ldrb	r2, [r7, #7]
 800d1f2:	429a      	cmp	r2, r3
 800d1f4:	d10f      	bne.n	800d216 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d1f6:	4b14      	ldr	r3, [pc, #80]	; (800d248 <tcp_kill_state+0x90>)
 800d1f8:	681a      	ldr	r2, [r3, #0]
 800d1fa:	697b      	ldr	r3, [r7, #20]
 800d1fc:	6a1b      	ldr	r3, [r3, #32]
 800d1fe:	1ad3      	subs	r3, r2, r3
 800d200:	68fa      	ldr	r2, [r7, #12]
 800d202:	429a      	cmp	r2, r3
 800d204:	d807      	bhi.n	800d216 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800d206:	4b10      	ldr	r3, [pc, #64]	; (800d248 <tcp_kill_state+0x90>)
 800d208:	681a      	ldr	r2, [r3, #0]
 800d20a:	697b      	ldr	r3, [r7, #20]
 800d20c:	6a1b      	ldr	r3, [r3, #32]
 800d20e:	1ad3      	subs	r3, r2, r3
 800d210:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800d212:	697b      	ldr	r3, [r7, #20]
 800d214:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d216:	697b      	ldr	r3, [r7, #20]
 800d218:	68db      	ldr	r3, [r3, #12]
 800d21a:	617b      	str	r3, [r7, #20]
 800d21c:	697b      	ldr	r3, [r7, #20]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d1e4      	bne.n	800d1ec <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800d222:	693b      	ldr	r3, [r7, #16]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d003      	beq.n	800d230 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800d228:	2100      	movs	r1, #0
 800d22a:	6938      	ldr	r0, [r7, #16]
 800d22c:	f7ff f952 	bl	800c4d4 <tcp_abandon>
  }
}
 800d230:	bf00      	nop
 800d232:	3718      	adds	r7, #24
 800d234:	46bd      	mov	sp, r7
 800d236:	bd80      	pop	{r7, pc}
 800d238:	08019670 	.word	0x08019670
 800d23c:	08019bfc 	.word	0x08019bfc
 800d240:	080196b4 	.word	0x080196b4
 800d244:	2000dc44 	.word	0x2000dc44
 800d248:	2000dc48 	.word	0x2000dc48

0800d24c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b084      	sub	sp, #16
 800d250:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800d252:	2300      	movs	r3, #0
 800d254:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800d256:	2300      	movs	r3, #0
 800d258:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d25a:	4b12      	ldr	r3, [pc, #72]	; (800d2a4 <tcp_kill_timewait+0x58>)
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	60fb      	str	r3, [r7, #12]
 800d260:	e012      	b.n	800d288 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d262:	4b11      	ldr	r3, [pc, #68]	; (800d2a8 <tcp_kill_timewait+0x5c>)
 800d264:	681a      	ldr	r2, [r3, #0]
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	6a1b      	ldr	r3, [r3, #32]
 800d26a:	1ad3      	subs	r3, r2, r3
 800d26c:	687a      	ldr	r2, [r7, #4]
 800d26e:	429a      	cmp	r2, r3
 800d270:	d807      	bhi.n	800d282 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800d272:	4b0d      	ldr	r3, [pc, #52]	; (800d2a8 <tcp_kill_timewait+0x5c>)
 800d274:	681a      	ldr	r2, [r3, #0]
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	6a1b      	ldr	r3, [r3, #32]
 800d27a:	1ad3      	subs	r3, r2, r3
 800d27c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	68db      	ldr	r3, [r3, #12]
 800d286:	60fb      	str	r3, [r7, #12]
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d1e9      	bne.n	800d262 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800d28e:	68bb      	ldr	r3, [r7, #8]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d002      	beq.n	800d29a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d294:	68b8      	ldr	r0, [r7, #8]
 800d296:	f7ff f9db 	bl	800c650 <tcp_abort>
  }
}
 800d29a:	bf00      	nop
 800d29c:	3710      	adds	r7, #16
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	bd80      	pop	{r7, pc}
 800d2a2:	bf00      	nop
 800d2a4:	2000dc54 	.word	0x2000dc54
 800d2a8:	2000dc48 	.word	0x2000dc48

0800d2ac <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b082      	sub	sp, #8
 800d2b0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800d2b2:	4b10      	ldr	r3, [pc, #64]	; (800d2f4 <tcp_handle_closepend+0x48>)
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d2b8:	e014      	b.n	800d2e4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	68db      	ldr	r3, [r3, #12]
 800d2be:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	8b5b      	ldrh	r3, [r3, #26]
 800d2c4:	f003 0308 	and.w	r3, r3, #8
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d009      	beq.n	800d2e0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	8b5b      	ldrh	r3, [r3, #26]
 800d2d0:	f023 0308 	bic.w	r3, r3, #8
 800d2d4:	b29a      	uxth	r2, r3
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800d2da:	6878      	ldr	r0, [r7, #4]
 800d2dc:	f7ff f864 	bl	800c3a8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800d2e0:	683b      	ldr	r3, [r7, #0]
 800d2e2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d1e7      	bne.n	800d2ba <tcp_handle_closepend+0xe>
  }
}
 800d2ea:	bf00      	nop
 800d2ec:	bf00      	nop
 800d2ee:	3708      	adds	r7, #8
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	bd80      	pop	{r7, pc}
 800d2f4:	2000dc44 	.word	0x2000dc44

0800d2f8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b084      	sub	sp, #16
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	4603      	mov	r3, r0
 800d300:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d302:	2001      	movs	r0, #1
 800d304:	f7fd fd1a 	bl	800ad3c <memp_malloc>
 800d308:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d126      	bne.n	800d35e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800d310:	f7ff ffcc 	bl	800d2ac <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800d314:	f7ff ff9a 	bl	800d24c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d318:	2001      	movs	r0, #1
 800d31a:	f7fd fd0f 	bl	800ad3c <memp_malloc>
 800d31e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d11b      	bne.n	800d35e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800d326:	2009      	movs	r0, #9
 800d328:	f7ff ff46 	bl	800d1b8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d32c:	2001      	movs	r0, #1
 800d32e:	f7fd fd05 	bl	800ad3c <memp_malloc>
 800d332:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d111      	bne.n	800d35e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800d33a:	2008      	movs	r0, #8
 800d33c:	f7ff ff3c 	bl	800d1b8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d340:	2001      	movs	r0, #1
 800d342:	f7fd fcfb 	bl	800ad3c <memp_malloc>
 800d346:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d107      	bne.n	800d35e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800d34e:	79fb      	ldrb	r3, [r7, #7]
 800d350:	4618      	mov	r0, r3
 800d352:	f7ff fee3 	bl	800d11c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d356:	2001      	movs	r0, #1
 800d358:	f7fd fcf0 	bl	800ad3c <memp_malloc>
 800d35c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d03f      	beq.n	800d3e4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800d364:	229c      	movs	r2, #156	; 0x9c
 800d366:	2100      	movs	r1, #0
 800d368:	68f8      	ldr	r0, [r7, #12]
 800d36a:	f00a fc12 	bl	8017b92 <memset>
    pcb->prio = prio;
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	79fa      	ldrb	r2, [r7, #7]
 800d372:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d37a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d384:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	22ff      	movs	r2, #255	; 0xff
 800d392:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d39a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	2206      	movs	r2, #6
 800d3a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	2206      	movs	r2, #6
 800d3a8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d3b0:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	2201      	movs	r2, #1
 800d3b6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800d3ba:	4b0d      	ldr	r3, [pc, #52]	; (800d3f0 <tcp_alloc+0xf8>)
 800d3bc:	681a      	ldr	r2, [r3, #0]
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800d3c2:	4b0c      	ldr	r3, [pc, #48]	; (800d3f4 <tcp_alloc+0xfc>)
 800d3c4:	781a      	ldrb	r2, [r3, #0]
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d3d0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	4a08      	ldr	r2, [pc, #32]	; (800d3f8 <tcp_alloc+0x100>)
 800d3d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	4a07      	ldr	r2, [pc, #28]	; (800d3fc <tcp_alloc+0x104>)
 800d3e0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800d3e4:	68fb      	ldr	r3, [r7, #12]
}
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	3710      	adds	r7, #16
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	bd80      	pop	{r7, pc}
 800d3ee:	bf00      	nop
 800d3f0:	2000dc48 	.word	0x2000dc48
 800d3f4:	20004bc6 	.word	0x20004bc6
 800d3f8:	0800d0b1 	.word	0x0800d0b1
 800d3fc:	006ddd00 	.word	0x006ddd00

0800d400 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800d400:	b580      	push	{r7, lr}
 800d402:	b082      	sub	sp, #8
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d107      	bne.n	800d41e <tcp_pcb_purge+0x1e>
 800d40e:	4b21      	ldr	r3, [pc, #132]	; (800d494 <tcp_pcb_purge+0x94>)
 800d410:	f640 0251 	movw	r2, #2129	; 0x851
 800d414:	4920      	ldr	r1, [pc, #128]	; (800d498 <tcp_pcb_purge+0x98>)
 800d416:	4821      	ldr	r0, [pc, #132]	; (800d49c <tcp_pcb_purge+0x9c>)
 800d418:	f00a ff0c 	bl	8018234 <iprintf>
 800d41c:	e037      	b.n	800d48e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	7d1b      	ldrb	r3, [r3, #20]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d033      	beq.n	800d48e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800d42a:	2b0a      	cmp	r3, #10
 800d42c:	d02f      	beq.n	800d48e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800d432:	2b01      	cmp	r3, #1
 800d434:	d02b      	beq.n	800d48e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d007      	beq.n	800d44e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d442:	4618      	mov	r0, r3
 800d444:	f7fe fb70 	bl	800bb28 <pbuf_free>
      pcb->refused_data = NULL;
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	2200      	movs	r2, #0
 800d44c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d452:	2b00      	cmp	r3, #0
 800d454:	d002      	beq.n	800d45c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800d456:	6878      	ldr	r0, [r7, #4]
 800d458:	f000 f986 	bl	800d768 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d462:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d468:	4618      	mov	r0, r3
 800d46a:	f7ff fdc7 	bl	800cffc <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d472:	4618      	mov	r0, r3
 800d474:	f7ff fdc2 	bl	800cffc <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	2200      	movs	r2, #0
 800d47c:	66da      	str	r2, [r3, #108]	; 0x6c
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	2200      	movs	r2, #0
 800d48a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800d48e:	3708      	adds	r7, #8
 800d490:	46bd      	mov	sp, r7
 800d492:	bd80      	pop	{r7, pc}
 800d494:	08019670 	.word	0x08019670
 800d498:	08019cbc 	.word	0x08019cbc
 800d49c:	080196b4 	.word	0x080196b4

0800d4a0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b084      	sub	sp, #16
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
 800d4a8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800d4aa:	683b      	ldr	r3, [r7, #0]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d106      	bne.n	800d4be <tcp_pcb_remove+0x1e>
 800d4b0:	4b3e      	ldr	r3, [pc, #248]	; (800d5ac <tcp_pcb_remove+0x10c>)
 800d4b2:	f640 0283 	movw	r2, #2179	; 0x883
 800d4b6:	493e      	ldr	r1, [pc, #248]	; (800d5b0 <tcp_pcb_remove+0x110>)
 800d4b8:	483e      	ldr	r0, [pc, #248]	; (800d5b4 <tcp_pcb_remove+0x114>)
 800d4ba:	f00a febb 	bl	8018234 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d106      	bne.n	800d4d2 <tcp_pcb_remove+0x32>
 800d4c4:	4b39      	ldr	r3, [pc, #228]	; (800d5ac <tcp_pcb_remove+0x10c>)
 800d4c6:	f640 0284 	movw	r2, #2180	; 0x884
 800d4ca:	493b      	ldr	r1, [pc, #236]	; (800d5b8 <tcp_pcb_remove+0x118>)
 800d4cc:	4839      	ldr	r0, [pc, #228]	; (800d5b4 <tcp_pcb_remove+0x114>)
 800d4ce:	f00a feb1 	bl	8018234 <iprintf>

  TCP_RMV(pcblist, pcb);
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	683a      	ldr	r2, [r7, #0]
 800d4d8:	429a      	cmp	r2, r3
 800d4da:	d105      	bne.n	800d4e8 <tcp_pcb_remove+0x48>
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	68da      	ldr	r2, [r3, #12]
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	601a      	str	r2, [r3, #0]
 800d4e6:	e013      	b.n	800d510 <tcp_pcb_remove+0x70>
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	60fb      	str	r3, [r7, #12]
 800d4ee:	e00c      	b.n	800d50a <tcp_pcb_remove+0x6a>
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	68db      	ldr	r3, [r3, #12]
 800d4f4:	683a      	ldr	r2, [r7, #0]
 800d4f6:	429a      	cmp	r2, r3
 800d4f8:	d104      	bne.n	800d504 <tcp_pcb_remove+0x64>
 800d4fa:	683b      	ldr	r3, [r7, #0]
 800d4fc:	68da      	ldr	r2, [r3, #12]
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	60da      	str	r2, [r3, #12]
 800d502:	e005      	b.n	800d510 <tcp_pcb_remove+0x70>
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	68db      	ldr	r3, [r3, #12]
 800d508:	60fb      	str	r3, [r7, #12]
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d1ef      	bne.n	800d4f0 <tcp_pcb_remove+0x50>
 800d510:	683b      	ldr	r3, [r7, #0]
 800d512:	2200      	movs	r2, #0
 800d514:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800d516:	6838      	ldr	r0, [r7, #0]
 800d518:	f7ff ff72 	bl	800d400 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800d51c:	683b      	ldr	r3, [r7, #0]
 800d51e:	7d1b      	ldrb	r3, [r3, #20]
 800d520:	2b0a      	cmp	r3, #10
 800d522:	d013      	beq.n	800d54c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800d524:	683b      	ldr	r3, [r7, #0]
 800d526:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800d528:	2b01      	cmp	r3, #1
 800d52a:	d00f      	beq.n	800d54c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800d52c:	683b      	ldr	r3, [r7, #0]
 800d52e:	8b5b      	ldrh	r3, [r3, #26]
 800d530:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800d534:	2b00      	cmp	r3, #0
 800d536:	d009      	beq.n	800d54c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800d538:	683b      	ldr	r3, [r7, #0]
 800d53a:	8b5b      	ldrh	r3, [r3, #26]
 800d53c:	f043 0302 	orr.w	r3, r3, #2
 800d540:	b29a      	uxth	r2, r3
 800d542:	683b      	ldr	r3, [r7, #0]
 800d544:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d546:	6838      	ldr	r0, [r7, #0]
 800d548:	f002 ff6a 	bl	8010420 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800d54c:	683b      	ldr	r3, [r7, #0]
 800d54e:	7d1b      	ldrb	r3, [r3, #20]
 800d550:	2b01      	cmp	r3, #1
 800d552:	d020      	beq.n	800d596 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800d554:	683b      	ldr	r3, [r7, #0]
 800d556:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d006      	beq.n	800d56a <tcp_pcb_remove+0xca>
 800d55c:	4b13      	ldr	r3, [pc, #76]	; (800d5ac <tcp_pcb_remove+0x10c>)
 800d55e:	f640 0293 	movw	r2, #2195	; 0x893
 800d562:	4916      	ldr	r1, [pc, #88]	; (800d5bc <tcp_pcb_remove+0x11c>)
 800d564:	4813      	ldr	r0, [pc, #76]	; (800d5b4 <tcp_pcb_remove+0x114>)
 800d566:	f00a fe65 	bl	8018234 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800d56a:	683b      	ldr	r3, [r7, #0]
 800d56c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d006      	beq.n	800d580 <tcp_pcb_remove+0xe0>
 800d572:	4b0e      	ldr	r3, [pc, #56]	; (800d5ac <tcp_pcb_remove+0x10c>)
 800d574:	f640 0294 	movw	r2, #2196	; 0x894
 800d578:	4911      	ldr	r1, [pc, #68]	; (800d5c0 <tcp_pcb_remove+0x120>)
 800d57a:	480e      	ldr	r0, [pc, #56]	; (800d5b4 <tcp_pcb_remove+0x114>)
 800d57c:	f00a fe5a 	bl	8018234 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800d580:	683b      	ldr	r3, [r7, #0]
 800d582:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d584:	2b00      	cmp	r3, #0
 800d586:	d006      	beq.n	800d596 <tcp_pcb_remove+0xf6>
 800d588:	4b08      	ldr	r3, [pc, #32]	; (800d5ac <tcp_pcb_remove+0x10c>)
 800d58a:	f640 0296 	movw	r2, #2198	; 0x896
 800d58e:	490d      	ldr	r1, [pc, #52]	; (800d5c4 <tcp_pcb_remove+0x124>)
 800d590:	4808      	ldr	r0, [pc, #32]	; (800d5b4 <tcp_pcb_remove+0x114>)
 800d592:	f00a fe4f 	bl	8018234 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800d596:	683b      	ldr	r3, [r7, #0]
 800d598:	2200      	movs	r2, #0
 800d59a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800d59c:	683b      	ldr	r3, [r7, #0]
 800d59e:	2200      	movs	r2, #0
 800d5a0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800d5a2:	bf00      	nop
 800d5a4:	3710      	adds	r7, #16
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	bd80      	pop	{r7, pc}
 800d5aa:	bf00      	nop
 800d5ac:	08019670 	.word	0x08019670
 800d5b0:	08019cd8 	.word	0x08019cd8
 800d5b4:	080196b4 	.word	0x080196b4
 800d5b8:	08019cf4 	.word	0x08019cf4
 800d5bc:	08019d14 	.word	0x08019d14
 800d5c0:	08019d2c 	.word	0x08019d2c
 800d5c4:	08019d48 	.word	0x08019d48

0800d5c8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b082      	sub	sp, #8
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d106      	bne.n	800d5e4 <tcp_next_iss+0x1c>
 800d5d6:	4b0a      	ldr	r3, [pc, #40]	; (800d600 <tcp_next_iss+0x38>)
 800d5d8:	f640 02af 	movw	r2, #2223	; 0x8af
 800d5dc:	4909      	ldr	r1, [pc, #36]	; (800d604 <tcp_next_iss+0x3c>)
 800d5de:	480a      	ldr	r0, [pc, #40]	; (800d608 <tcp_next_iss+0x40>)
 800d5e0:	f00a fe28 	bl	8018234 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800d5e4:	4b09      	ldr	r3, [pc, #36]	; (800d60c <tcp_next_iss+0x44>)
 800d5e6:	681a      	ldr	r2, [r3, #0]
 800d5e8:	4b09      	ldr	r3, [pc, #36]	; (800d610 <tcp_next_iss+0x48>)
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	4413      	add	r3, r2
 800d5ee:	4a07      	ldr	r2, [pc, #28]	; (800d60c <tcp_next_iss+0x44>)
 800d5f0:	6013      	str	r3, [r2, #0]
  return iss;
 800d5f2:	4b06      	ldr	r3, [pc, #24]	; (800d60c <tcp_next_iss+0x44>)
 800d5f4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	3708      	adds	r7, #8
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	bd80      	pop	{r7, pc}
 800d5fe:	bf00      	nop
 800d600:	08019670 	.word	0x08019670
 800d604:	08019d60 	.word	0x08019d60
 800d608:	080196b4 	.word	0x080196b4
 800d60c:	20000014 	.word	0x20000014
 800d610:	2000dc48 	.word	0x2000dc48

0800d614 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800d614:	b580      	push	{r7, lr}
 800d616:	b086      	sub	sp, #24
 800d618:	af00      	add	r7, sp, #0
 800d61a:	4603      	mov	r3, r0
 800d61c:	60b9      	str	r1, [r7, #8]
 800d61e:	607a      	str	r2, [r7, #4]
 800d620:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d106      	bne.n	800d636 <tcp_eff_send_mss_netif+0x22>
 800d628:	4b14      	ldr	r3, [pc, #80]	; (800d67c <tcp_eff_send_mss_netif+0x68>)
 800d62a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800d62e:	4914      	ldr	r1, [pc, #80]	; (800d680 <tcp_eff_send_mss_netif+0x6c>)
 800d630:	4814      	ldr	r0, [pc, #80]	; (800d684 <tcp_eff_send_mss_netif+0x70>)
 800d632:	f00a fdff 	bl	8018234 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800d636:	68bb      	ldr	r3, [r7, #8]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d101      	bne.n	800d640 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800d63c:	89fb      	ldrh	r3, [r7, #14]
 800d63e:	e019      	b.n	800d674 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800d640:	68bb      	ldr	r3, [r7, #8]
 800d642:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d644:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800d646:	8afb      	ldrh	r3, [r7, #22]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d012      	beq.n	800d672 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800d64c:	2328      	movs	r3, #40	; 0x28
 800d64e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800d650:	8afa      	ldrh	r2, [r7, #22]
 800d652:	8abb      	ldrh	r3, [r7, #20]
 800d654:	429a      	cmp	r2, r3
 800d656:	d904      	bls.n	800d662 <tcp_eff_send_mss_netif+0x4e>
 800d658:	8afa      	ldrh	r2, [r7, #22]
 800d65a:	8abb      	ldrh	r3, [r7, #20]
 800d65c:	1ad3      	subs	r3, r2, r3
 800d65e:	b29b      	uxth	r3, r3
 800d660:	e000      	b.n	800d664 <tcp_eff_send_mss_netif+0x50>
 800d662:	2300      	movs	r3, #0
 800d664:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800d666:	8a7a      	ldrh	r2, [r7, #18]
 800d668:	89fb      	ldrh	r3, [r7, #14]
 800d66a:	4293      	cmp	r3, r2
 800d66c:	bf28      	it	cs
 800d66e:	4613      	movcs	r3, r2
 800d670:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800d672:	89fb      	ldrh	r3, [r7, #14]
}
 800d674:	4618      	mov	r0, r3
 800d676:	3718      	adds	r7, #24
 800d678:	46bd      	mov	sp, r7
 800d67a:	bd80      	pop	{r7, pc}
 800d67c:	08019670 	.word	0x08019670
 800d680:	08019d7c 	.word	0x08019d7c
 800d684:	080196b4 	.word	0x080196b4

0800d688 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b084      	sub	sp, #16
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
 800d690:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800d692:	683b      	ldr	r3, [r7, #0]
 800d694:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d119      	bne.n	800d6d0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800d69c:	4b10      	ldr	r3, [pc, #64]	; (800d6e0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800d69e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800d6a2:	4910      	ldr	r1, [pc, #64]	; (800d6e4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800d6a4:	4810      	ldr	r0, [pc, #64]	; (800d6e8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800d6a6:	f00a fdc5 	bl	8018234 <iprintf>

  while (pcb != NULL) {
 800d6aa:	e011      	b.n	800d6d0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	681a      	ldr	r2, [r3, #0]
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	429a      	cmp	r2, r3
 800d6b6:	d108      	bne.n	800d6ca <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	68db      	ldr	r3, [r3, #12]
 800d6bc:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800d6be:	68f8      	ldr	r0, [r7, #12]
 800d6c0:	f7fe ffc6 	bl	800c650 <tcp_abort>
      pcb = next;
 800d6c4:	68bb      	ldr	r3, [r7, #8]
 800d6c6:	60fb      	str	r3, [r7, #12]
 800d6c8:	e002      	b.n	800d6d0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	68db      	ldr	r3, [r3, #12]
 800d6ce:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d1ea      	bne.n	800d6ac <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800d6d6:	bf00      	nop
 800d6d8:	bf00      	nop
 800d6da:	3710      	adds	r7, #16
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	bd80      	pop	{r7, pc}
 800d6e0:	08019670 	.word	0x08019670
 800d6e4:	08019da4 	.word	0x08019da4
 800d6e8:	080196b4 	.word	0x080196b4

0800d6ec <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b084      	sub	sp, #16
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
 800d6f4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d02a      	beq.n	800d752 <tcp_netif_ip_addr_changed+0x66>
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d026      	beq.n	800d752 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800d704:	4b15      	ldr	r3, [pc, #84]	; (800d75c <tcp_netif_ip_addr_changed+0x70>)
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	4619      	mov	r1, r3
 800d70a:	6878      	ldr	r0, [r7, #4]
 800d70c:	f7ff ffbc 	bl	800d688 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800d710:	4b13      	ldr	r3, [pc, #76]	; (800d760 <tcp_netif_ip_addr_changed+0x74>)
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	4619      	mov	r1, r3
 800d716:	6878      	ldr	r0, [r7, #4]
 800d718:	f7ff ffb6 	bl	800d688 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800d71c:	683b      	ldr	r3, [r7, #0]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d017      	beq.n	800d752 <tcp_netif_ip_addr_changed+0x66>
 800d722:	683b      	ldr	r3, [r7, #0]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	2b00      	cmp	r3, #0
 800d728:	d013      	beq.n	800d752 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d72a:	4b0e      	ldr	r3, [pc, #56]	; (800d764 <tcp_netif_ip_addr_changed+0x78>)
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	60fb      	str	r3, [r7, #12]
 800d730:	e00c      	b.n	800d74c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	681a      	ldr	r2, [r3, #0]
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	429a      	cmp	r2, r3
 800d73c:	d103      	bne.n	800d746 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800d73e:	683b      	ldr	r3, [r7, #0]
 800d740:	681a      	ldr	r2, [r3, #0]
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	68db      	ldr	r3, [r3, #12]
 800d74a:	60fb      	str	r3, [r7, #12]
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d1ef      	bne.n	800d732 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800d752:	bf00      	nop
 800d754:	3710      	adds	r7, #16
 800d756:	46bd      	mov	sp, r7
 800d758:	bd80      	pop	{r7, pc}
 800d75a:	bf00      	nop
 800d75c:	2000dc44 	.word	0x2000dc44
 800d760:	2000dc50 	.word	0x2000dc50
 800d764:	2000dc4c 	.word	0x2000dc4c

0800d768 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b082      	sub	sp, #8
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d774:	2b00      	cmp	r3, #0
 800d776:	d007      	beq.n	800d788 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d77c:	4618      	mov	r0, r3
 800d77e:	f7ff fc3d 	bl	800cffc <tcp_segs_free>
    pcb->ooseq = NULL;
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	2200      	movs	r2, #0
 800d786:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800d788:	bf00      	nop
 800d78a:	3708      	adds	r7, #8
 800d78c:	46bd      	mov	sp, r7
 800d78e:	bd80      	pop	{r7, pc}

0800d790 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800d790:	b590      	push	{r4, r7, lr}
 800d792:	b08d      	sub	sp, #52	; 0x34
 800d794:	af04      	add	r7, sp, #16
 800d796:	6078      	str	r0, [r7, #4]
 800d798:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d105      	bne.n	800d7ac <tcp_input+0x1c>
 800d7a0:	4b9b      	ldr	r3, [pc, #620]	; (800da10 <tcp_input+0x280>)
 800d7a2:	2283      	movs	r2, #131	; 0x83
 800d7a4:	499b      	ldr	r1, [pc, #620]	; (800da14 <tcp_input+0x284>)
 800d7a6:	489c      	ldr	r0, [pc, #624]	; (800da18 <tcp_input+0x288>)
 800d7a8:	f00a fd44 	bl	8018234 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	685b      	ldr	r3, [r3, #4]
 800d7b0:	4a9a      	ldr	r2, [pc, #616]	; (800da1c <tcp_input+0x28c>)
 800d7b2:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	895b      	ldrh	r3, [r3, #10]
 800d7b8:	2b13      	cmp	r3, #19
 800d7ba:	f240 83c4 	bls.w	800df46 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d7be:	4b98      	ldr	r3, [pc, #608]	; (800da20 <tcp_input+0x290>)
 800d7c0:	695b      	ldr	r3, [r3, #20]
 800d7c2:	4a97      	ldr	r2, [pc, #604]	; (800da20 <tcp_input+0x290>)
 800d7c4:	6812      	ldr	r2, [r2, #0]
 800d7c6:	4611      	mov	r1, r2
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	f005 fc43 	bl	8013054 <ip4_addr_isbroadcast_u32>
 800d7ce:	4603      	mov	r3, r0
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	f040 83ba 	bne.w	800df4a <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800d7d6:	4b92      	ldr	r3, [pc, #584]	; (800da20 <tcp_input+0x290>)
 800d7d8:	695b      	ldr	r3, [r3, #20]
 800d7da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d7de:	2be0      	cmp	r3, #224	; 0xe0
 800d7e0:	f000 83b3 	beq.w	800df4a <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800d7e4:	4b8d      	ldr	r3, [pc, #564]	; (800da1c <tcp_input+0x28c>)
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	899b      	ldrh	r3, [r3, #12]
 800d7ea:	b29b      	uxth	r3, r3
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	f7fc fdef 	bl	800a3d0 <lwip_htons>
 800d7f2:	4603      	mov	r3, r0
 800d7f4:	0b1b      	lsrs	r3, r3, #12
 800d7f6:	b29b      	uxth	r3, r3
 800d7f8:	b2db      	uxtb	r3, r3
 800d7fa:	009b      	lsls	r3, r3, #2
 800d7fc:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800d7fe:	7cbb      	ldrb	r3, [r7, #18]
 800d800:	2b13      	cmp	r3, #19
 800d802:	f240 83a4 	bls.w	800df4e <tcp_input+0x7be>
 800d806:	7cbb      	ldrb	r3, [r7, #18]
 800d808:	b29a      	uxth	r2, r3
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	891b      	ldrh	r3, [r3, #8]
 800d80e:	429a      	cmp	r2, r3
 800d810:	f200 839d 	bhi.w	800df4e <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800d814:	7cbb      	ldrb	r3, [r7, #18]
 800d816:	b29b      	uxth	r3, r3
 800d818:	3b14      	subs	r3, #20
 800d81a:	b29a      	uxth	r2, r3
 800d81c:	4b81      	ldr	r3, [pc, #516]	; (800da24 <tcp_input+0x294>)
 800d81e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800d820:	4b81      	ldr	r3, [pc, #516]	; (800da28 <tcp_input+0x298>)
 800d822:	2200      	movs	r2, #0
 800d824:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	895a      	ldrh	r2, [r3, #10]
 800d82a:	7cbb      	ldrb	r3, [r7, #18]
 800d82c:	b29b      	uxth	r3, r3
 800d82e:	429a      	cmp	r2, r3
 800d830:	d309      	bcc.n	800d846 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800d832:	4b7c      	ldr	r3, [pc, #496]	; (800da24 <tcp_input+0x294>)
 800d834:	881a      	ldrh	r2, [r3, #0]
 800d836:	4b7d      	ldr	r3, [pc, #500]	; (800da2c <tcp_input+0x29c>)
 800d838:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800d83a:	7cbb      	ldrb	r3, [r7, #18]
 800d83c:	4619      	mov	r1, r3
 800d83e:	6878      	ldr	r0, [r7, #4]
 800d840:	f7fe f8ec 	bl	800ba1c <pbuf_remove_header>
 800d844:	e04e      	b.n	800d8e4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d105      	bne.n	800d85a <tcp_input+0xca>
 800d84e:	4b70      	ldr	r3, [pc, #448]	; (800da10 <tcp_input+0x280>)
 800d850:	22c2      	movs	r2, #194	; 0xc2
 800d852:	4977      	ldr	r1, [pc, #476]	; (800da30 <tcp_input+0x2a0>)
 800d854:	4870      	ldr	r0, [pc, #448]	; (800da18 <tcp_input+0x288>)
 800d856:	f00a fced 	bl	8018234 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800d85a:	2114      	movs	r1, #20
 800d85c:	6878      	ldr	r0, [r7, #4]
 800d85e:	f7fe f8dd 	bl	800ba1c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	895a      	ldrh	r2, [r3, #10]
 800d866:	4b71      	ldr	r3, [pc, #452]	; (800da2c <tcp_input+0x29c>)
 800d868:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800d86a:	4b6e      	ldr	r3, [pc, #440]	; (800da24 <tcp_input+0x294>)
 800d86c:	881a      	ldrh	r2, [r3, #0]
 800d86e:	4b6f      	ldr	r3, [pc, #444]	; (800da2c <tcp_input+0x29c>)
 800d870:	881b      	ldrh	r3, [r3, #0]
 800d872:	1ad3      	subs	r3, r2, r3
 800d874:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800d876:	4b6d      	ldr	r3, [pc, #436]	; (800da2c <tcp_input+0x29c>)
 800d878:	881b      	ldrh	r3, [r3, #0]
 800d87a:	4619      	mov	r1, r3
 800d87c:	6878      	ldr	r0, [r7, #4]
 800d87e:	f7fe f8cd 	bl	800ba1c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	895b      	ldrh	r3, [r3, #10]
 800d888:	8a3a      	ldrh	r2, [r7, #16]
 800d88a:	429a      	cmp	r2, r3
 800d88c:	f200 8361 	bhi.w	800df52 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	685b      	ldr	r3, [r3, #4]
 800d896:	4a64      	ldr	r2, [pc, #400]	; (800da28 <tcp_input+0x298>)
 800d898:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	8a3a      	ldrh	r2, [r7, #16]
 800d8a0:	4611      	mov	r1, r2
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	f7fe f8ba 	bl	800ba1c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	891a      	ldrh	r2, [r3, #8]
 800d8ac:	8a3b      	ldrh	r3, [r7, #16]
 800d8ae:	1ad3      	subs	r3, r2, r3
 800d8b0:	b29a      	uxth	r2, r3
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	895b      	ldrh	r3, [r3, #10]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d005      	beq.n	800d8ca <tcp_input+0x13a>
 800d8be:	4b54      	ldr	r3, [pc, #336]	; (800da10 <tcp_input+0x280>)
 800d8c0:	22df      	movs	r2, #223	; 0xdf
 800d8c2:	495c      	ldr	r1, [pc, #368]	; (800da34 <tcp_input+0x2a4>)
 800d8c4:	4854      	ldr	r0, [pc, #336]	; (800da18 <tcp_input+0x288>)
 800d8c6:	f00a fcb5 	bl	8018234 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	891a      	ldrh	r2, [r3, #8]
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	891b      	ldrh	r3, [r3, #8]
 800d8d4:	429a      	cmp	r2, r3
 800d8d6:	d005      	beq.n	800d8e4 <tcp_input+0x154>
 800d8d8:	4b4d      	ldr	r3, [pc, #308]	; (800da10 <tcp_input+0x280>)
 800d8da:	22e0      	movs	r2, #224	; 0xe0
 800d8dc:	4956      	ldr	r1, [pc, #344]	; (800da38 <tcp_input+0x2a8>)
 800d8de:	484e      	ldr	r0, [pc, #312]	; (800da18 <tcp_input+0x288>)
 800d8e0:	f00a fca8 	bl	8018234 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800d8e4:	4b4d      	ldr	r3, [pc, #308]	; (800da1c <tcp_input+0x28c>)
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	881b      	ldrh	r3, [r3, #0]
 800d8ea:	b29b      	uxth	r3, r3
 800d8ec:	4a4b      	ldr	r2, [pc, #300]	; (800da1c <tcp_input+0x28c>)
 800d8ee:	6814      	ldr	r4, [r2, #0]
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	f7fc fd6d 	bl	800a3d0 <lwip_htons>
 800d8f6:	4603      	mov	r3, r0
 800d8f8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800d8fa:	4b48      	ldr	r3, [pc, #288]	; (800da1c <tcp_input+0x28c>)
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	885b      	ldrh	r3, [r3, #2]
 800d900:	b29b      	uxth	r3, r3
 800d902:	4a46      	ldr	r2, [pc, #280]	; (800da1c <tcp_input+0x28c>)
 800d904:	6814      	ldr	r4, [r2, #0]
 800d906:	4618      	mov	r0, r3
 800d908:	f7fc fd62 	bl	800a3d0 <lwip_htons>
 800d90c:	4603      	mov	r3, r0
 800d90e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800d910:	4b42      	ldr	r3, [pc, #264]	; (800da1c <tcp_input+0x28c>)
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	685b      	ldr	r3, [r3, #4]
 800d916:	4a41      	ldr	r2, [pc, #260]	; (800da1c <tcp_input+0x28c>)
 800d918:	6814      	ldr	r4, [r2, #0]
 800d91a:	4618      	mov	r0, r3
 800d91c:	f7fc fd6d 	bl	800a3fa <lwip_htonl>
 800d920:	4603      	mov	r3, r0
 800d922:	6063      	str	r3, [r4, #4]
 800d924:	6863      	ldr	r3, [r4, #4]
 800d926:	4a45      	ldr	r2, [pc, #276]	; (800da3c <tcp_input+0x2ac>)
 800d928:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800d92a:	4b3c      	ldr	r3, [pc, #240]	; (800da1c <tcp_input+0x28c>)
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	689b      	ldr	r3, [r3, #8]
 800d930:	4a3a      	ldr	r2, [pc, #232]	; (800da1c <tcp_input+0x28c>)
 800d932:	6814      	ldr	r4, [r2, #0]
 800d934:	4618      	mov	r0, r3
 800d936:	f7fc fd60 	bl	800a3fa <lwip_htonl>
 800d93a:	4603      	mov	r3, r0
 800d93c:	60a3      	str	r3, [r4, #8]
 800d93e:	68a3      	ldr	r3, [r4, #8]
 800d940:	4a3f      	ldr	r2, [pc, #252]	; (800da40 <tcp_input+0x2b0>)
 800d942:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800d944:	4b35      	ldr	r3, [pc, #212]	; (800da1c <tcp_input+0x28c>)
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	89db      	ldrh	r3, [r3, #14]
 800d94a:	b29b      	uxth	r3, r3
 800d94c:	4a33      	ldr	r2, [pc, #204]	; (800da1c <tcp_input+0x28c>)
 800d94e:	6814      	ldr	r4, [r2, #0]
 800d950:	4618      	mov	r0, r3
 800d952:	f7fc fd3d 	bl	800a3d0 <lwip_htons>
 800d956:	4603      	mov	r3, r0
 800d958:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800d95a:	4b30      	ldr	r3, [pc, #192]	; (800da1c <tcp_input+0x28c>)
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	899b      	ldrh	r3, [r3, #12]
 800d960:	b29b      	uxth	r3, r3
 800d962:	4618      	mov	r0, r3
 800d964:	f7fc fd34 	bl	800a3d0 <lwip_htons>
 800d968:	4603      	mov	r3, r0
 800d96a:	b2db      	uxtb	r3, r3
 800d96c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d970:	b2da      	uxtb	r2, r3
 800d972:	4b34      	ldr	r3, [pc, #208]	; (800da44 <tcp_input+0x2b4>)
 800d974:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	891a      	ldrh	r2, [r3, #8]
 800d97a:	4b33      	ldr	r3, [pc, #204]	; (800da48 <tcp_input+0x2b8>)
 800d97c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800d97e:	4b31      	ldr	r3, [pc, #196]	; (800da44 <tcp_input+0x2b4>)
 800d980:	781b      	ldrb	r3, [r3, #0]
 800d982:	f003 0303 	and.w	r3, r3, #3
 800d986:	2b00      	cmp	r3, #0
 800d988:	d00c      	beq.n	800d9a4 <tcp_input+0x214>
    tcplen++;
 800d98a:	4b2f      	ldr	r3, [pc, #188]	; (800da48 <tcp_input+0x2b8>)
 800d98c:	881b      	ldrh	r3, [r3, #0]
 800d98e:	3301      	adds	r3, #1
 800d990:	b29a      	uxth	r2, r3
 800d992:	4b2d      	ldr	r3, [pc, #180]	; (800da48 <tcp_input+0x2b8>)
 800d994:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	891a      	ldrh	r2, [r3, #8]
 800d99a:	4b2b      	ldr	r3, [pc, #172]	; (800da48 <tcp_input+0x2b8>)
 800d99c:	881b      	ldrh	r3, [r3, #0]
 800d99e:	429a      	cmp	r2, r3
 800d9a0:	f200 82d9 	bhi.w	800df56 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d9a8:	4b28      	ldr	r3, [pc, #160]	; (800da4c <tcp_input+0x2bc>)
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	61fb      	str	r3, [r7, #28]
 800d9ae:	e09d      	b.n	800daec <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800d9b0:	69fb      	ldr	r3, [r7, #28]
 800d9b2:	7d1b      	ldrb	r3, [r3, #20]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d105      	bne.n	800d9c4 <tcp_input+0x234>
 800d9b8:	4b15      	ldr	r3, [pc, #84]	; (800da10 <tcp_input+0x280>)
 800d9ba:	22fb      	movs	r2, #251	; 0xfb
 800d9bc:	4924      	ldr	r1, [pc, #144]	; (800da50 <tcp_input+0x2c0>)
 800d9be:	4816      	ldr	r0, [pc, #88]	; (800da18 <tcp_input+0x288>)
 800d9c0:	f00a fc38 	bl	8018234 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800d9c4:	69fb      	ldr	r3, [r7, #28]
 800d9c6:	7d1b      	ldrb	r3, [r3, #20]
 800d9c8:	2b0a      	cmp	r3, #10
 800d9ca:	d105      	bne.n	800d9d8 <tcp_input+0x248>
 800d9cc:	4b10      	ldr	r3, [pc, #64]	; (800da10 <tcp_input+0x280>)
 800d9ce:	22fc      	movs	r2, #252	; 0xfc
 800d9d0:	4920      	ldr	r1, [pc, #128]	; (800da54 <tcp_input+0x2c4>)
 800d9d2:	4811      	ldr	r0, [pc, #68]	; (800da18 <tcp_input+0x288>)
 800d9d4:	f00a fc2e 	bl	8018234 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800d9d8:	69fb      	ldr	r3, [r7, #28]
 800d9da:	7d1b      	ldrb	r3, [r3, #20]
 800d9dc:	2b01      	cmp	r3, #1
 800d9de:	d105      	bne.n	800d9ec <tcp_input+0x25c>
 800d9e0:	4b0b      	ldr	r3, [pc, #44]	; (800da10 <tcp_input+0x280>)
 800d9e2:	22fd      	movs	r2, #253	; 0xfd
 800d9e4:	491c      	ldr	r1, [pc, #112]	; (800da58 <tcp_input+0x2c8>)
 800d9e6:	480c      	ldr	r0, [pc, #48]	; (800da18 <tcp_input+0x288>)
 800d9e8:	f00a fc24 	bl	8018234 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d9ec:	69fb      	ldr	r3, [r7, #28]
 800d9ee:	7a1b      	ldrb	r3, [r3, #8]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d033      	beq.n	800da5c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d9f4:	69fb      	ldr	r3, [r7, #28]
 800d9f6:	7a1a      	ldrb	r2, [r3, #8]
 800d9f8:	4b09      	ldr	r3, [pc, #36]	; (800da20 <tcp_input+0x290>)
 800d9fa:	685b      	ldr	r3, [r3, #4]
 800d9fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800da00:	3301      	adds	r3, #1
 800da02:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800da04:	429a      	cmp	r2, r3
 800da06:	d029      	beq.n	800da5c <tcp_input+0x2cc>
      prev = pcb;
 800da08:	69fb      	ldr	r3, [r7, #28]
 800da0a:	61bb      	str	r3, [r7, #24]
      continue;
 800da0c:	e06b      	b.n	800dae6 <tcp_input+0x356>
 800da0e:	bf00      	nop
 800da10:	08019dd8 	.word	0x08019dd8
 800da14:	08019e0c 	.word	0x08019e0c
 800da18:	08019e24 	.word	0x08019e24
 800da1c:	20004bd8 	.word	0x20004bd8
 800da20:	20008360 	.word	0x20008360
 800da24:	20004bdc 	.word	0x20004bdc
 800da28:	20004be0 	.word	0x20004be0
 800da2c:	20004bde 	.word	0x20004bde
 800da30:	08019e4c 	.word	0x08019e4c
 800da34:	08019e5c 	.word	0x08019e5c
 800da38:	08019e68 	.word	0x08019e68
 800da3c:	20004be8 	.word	0x20004be8
 800da40:	20004bec 	.word	0x20004bec
 800da44:	20004bf4 	.word	0x20004bf4
 800da48:	20004bf2 	.word	0x20004bf2
 800da4c:	2000dc44 	.word	0x2000dc44
 800da50:	08019e88 	.word	0x08019e88
 800da54:	08019eb0 	.word	0x08019eb0
 800da58:	08019edc 	.word	0x08019edc
    }

    if (pcb->remote_port == tcphdr->src &&
 800da5c:	69fb      	ldr	r3, [r7, #28]
 800da5e:	8b1a      	ldrh	r2, [r3, #24]
 800da60:	4b94      	ldr	r3, [pc, #592]	; (800dcb4 <tcp_input+0x524>)
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	881b      	ldrh	r3, [r3, #0]
 800da66:	b29b      	uxth	r3, r3
 800da68:	429a      	cmp	r2, r3
 800da6a:	d13a      	bne.n	800dae2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800da6c:	69fb      	ldr	r3, [r7, #28]
 800da6e:	8ada      	ldrh	r2, [r3, #22]
 800da70:	4b90      	ldr	r3, [pc, #576]	; (800dcb4 <tcp_input+0x524>)
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	885b      	ldrh	r3, [r3, #2]
 800da76:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800da78:	429a      	cmp	r2, r3
 800da7a:	d132      	bne.n	800dae2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800da7c:	69fb      	ldr	r3, [r7, #28]
 800da7e:	685a      	ldr	r2, [r3, #4]
 800da80:	4b8d      	ldr	r3, [pc, #564]	; (800dcb8 <tcp_input+0x528>)
 800da82:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800da84:	429a      	cmp	r2, r3
 800da86:	d12c      	bne.n	800dae2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800da88:	69fb      	ldr	r3, [r7, #28]
 800da8a:	681a      	ldr	r2, [r3, #0]
 800da8c:	4b8a      	ldr	r3, [pc, #552]	; (800dcb8 <tcp_input+0x528>)
 800da8e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800da90:	429a      	cmp	r2, r3
 800da92:	d126      	bne.n	800dae2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800da94:	69fb      	ldr	r3, [r7, #28]
 800da96:	68db      	ldr	r3, [r3, #12]
 800da98:	69fa      	ldr	r2, [r7, #28]
 800da9a:	429a      	cmp	r2, r3
 800da9c:	d106      	bne.n	800daac <tcp_input+0x31c>
 800da9e:	4b87      	ldr	r3, [pc, #540]	; (800dcbc <tcp_input+0x52c>)
 800daa0:	f240 120d 	movw	r2, #269	; 0x10d
 800daa4:	4986      	ldr	r1, [pc, #536]	; (800dcc0 <tcp_input+0x530>)
 800daa6:	4887      	ldr	r0, [pc, #540]	; (800dcc4 <tcp_input+0x534>)
 800daa8:	f00a fbc4 	bl	8018234 <iprintf>
      if (prev != NULL) {
 800daac:	69bb      	ldr	r3, [r7, #24]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d00a      	beq.n	800dac8 <tcp_input+0x338>
        prev->next = pcb->next;
 800dab2:	69fb      	ldr	r3, [r7, #28]
 800dab4:	68da      	ldr	r2, [r3, #12]
 800dab6:	69bb      	ldr	r3, [r7, #24]
 800dab8:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800daba:	4b83      	ldr	r3, [pc, #524]	; (800dcc8 <tcp_input+0x538>)
 800dabc:	681a      	ldr	r2, [r3, #0]
 800dabe:	69fb      	ldr	r3, [r7, #28]
 800dac0:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800dac2:	4a81      	ldr	r2, [pc, #516]	; (800dcc8 <tcp_input+0x538>)
 800dac4:	69fb      	ldr	r3, [r7, #28]
 800dac6:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800dac8:	69fb      	ldr	r3, [r7, #28]
 800daca:	68db      	ldr	r3, [r3, #12]
 800dacc:	69fa      	ldr	r2, [r7, #28]
 800dace:	429a      	cmp	r2, r3
 800dad0:	d111      	bne.n	800daf6 <tcp_input+0x366>
 800dad2:	4b7a      	ldr	r3, [pc, #488]	; (800dcbc <tcp_input+0x52c>)
 800dad4:	f240 1215 	movw	r2, #277	; 0x115
 800dad8:	497c      	ldr	r1, [pc, #496]	; (800dccc <tcp_input+0x53c>)
 800dada:	487a      	ldr	r0, [pc, #488]	; (800dcc4 <tcp_input+0x534>)
 800dadc:	f00a fbaa 	bl	8018234 <iprintf>
      break;
 800dae0:	e009      	b.n	800daf6 <tcp_input+0x366>
    }
    prev = pcb;
 800dae2:	69fb      	ldr	r3, [r7, #28]
 800dae4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dae6:	69fb      	ldr	r3, [r7, #28]
 800dae8:	68db      	ldr	r3, [r3, #12]
 800daea:	61fb      	str	r3, [r7, #28]
 800daec:	69fb      	ldr	r3, [r7, #28]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	f47f af5e 	bne.w	800d9b0 <tcp_input+0x220>
 800daf4:	e000      	b.n	800daf8 <tcp_input+0x368>
      break;
 800daf6:	bf00      	nop
  }

  if (pcb == NULL) {
 800daf8:	69fb      	ldr	r3, [r7, #28]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	f040 8095 	bne.w	800dc2a <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800db00:	4b73      	ldr	r3, [pc, #460]	; (800dcd0 <tcp_input+0x540>)
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	61fb      	str	r3, [r7, #28]
 800db06:	e03f      	b.n	800db88 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800db08:	69fb      	ldr	r3, [r7, #28]
 800db0a:	7d1b      	ldrb	r3, [r3, #20]
 800db0c:	2b0a      	cmp	r3, #10
 800db0e:	d006      	beq.n	800db1e <tcp_input+0x38e>
 800db10:	4b6a      	ldr	r3, [pc, #424]	; (800dcbc <tcp_input+0x52c>)
 800db12:	f240 121f 	movw	r2, #287	; 0x11f
 800db16:	496f      	ldr	r1, [pc, #444]	; (800dcd4 <tcp_input+0x544>)
 800db18:	486a      	ldr	r0, [pc, #424]	; (800dcc4 <tcp_input+0x534>)
 800db1a:	f00a fb8b 	bl	8018234 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800db1e:	69fb      	ldr	r3, [r7, #28]
 800db20:	7a1b      	ldrb	r3, [r3, #8]
 800db22:	2b00      	cmp	r3, #0
 800db24:	d009      	beq.n	800db3a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800db26:	69fb      	ldr	r3, [r7, #28]
 800db28:	7a1a      	ldrb	r2, [r3, #8]
 800db2a:	4b63      	ldr	r3, [pc, #396]	; (800dcb8 <tcp_input+0x528>)
 800db2c:	685b      	ldr	r3, [r3, #4]
 800db2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800db32:	3301      	adds	r3, #1
 800db34:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800db36:	429a      	cmp	r2, r3
 800db38:	d122      	bne.n	800db80 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800db3a:	69fb      	ldr	r3, [r7, #28]
 800db3c:	8b1a      	ldrh	r2, [r3, #24]
 800db3e:	4b5d      	ldr	r3, [pc, #372]	; (800dcb4 <tcp_input+0x524>)
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	881b      	ldrh	r3, [r3, #0]
 800db44:	b29b      	uxth	r3, r3
 800db46:	429a      	cmp	r2, r3
 800db48:	d11b      	bne.n	800db82 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800db4a:	69fb      	ldr	r3, [r7, #28]
 800db4c:	8ada      	ldrh	r2, [r3, #22]
 800db4e:	4b59      	ldr	r3, [pc, #356]	; (800dcb4 <tcp_input+0x524>)
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	885b      	ldrh	r3, [r3, #2]
 800db54:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800db56:	429a      	cmp	r2, r3
 800db58:	d113      	bne.n	800db82 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800db5a:	69fb      	ldr	r3, [r7, #28]
 800db5c:	685a      	ldr	r2, [r3, #4]
 800db5e:	4b56      	ldr	r3, [pc, #344]	; (800dcb8 <tcp_input+0x528>)
 800db60:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800db62:	429a      	cmp	r2, r3
 800db64:	d10d      	bne.n	800db82 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800db66:	69fb      	ldr	r3, [r7, #28]
 800db68:	681a      	ldr	r2, [r3, #0]
 800db6a:	4b53      	ldr	r3, [pc, #332]	; (800dcb8 <tcp_input+0x528>)
 800db6c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800db6e:	429a      	cmp	r2, r3
 800db70:	d107      	bne.n	800db82 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800db72:	69f8      	ldr	r0, [r7, #28]
 800db74:	f000 fb54 	bl	800e220 <tcp_timewait_input>
        }
        pbuf_free(p);
 800db78:	6878      	ldr	r0, [r7, #4]
 800db7a:	f7fd ffd5 	bl	800bb28 <pbuf_free>
        return;
 800db7e:	e1f0      	b.n	800df62 <tcp_input+0x7d2>
        continue;
 800db80:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800db82:	69fb      	ldr	r3, [r7, #28]
 800db84:	68db      	ldr	r3, [r3, #12]
 800db86:	61fb      	str	r3, [r7, #28]
 800db88:	69fb      	ldr	r3, [r7, #28]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d1bc      	bne.n	800db08 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800db8e:	2300      	movs	r3, #0
 800db90:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800db92:	4b51      	ldr	r3, [pc, #324]	; (800dcd8 <tcp_input+0x548>)
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	617b      	str	r3, [r7, #20]
 800db98:	e02a      	b.n	800dbf0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800db9a:	697b      	ldr	r3, [r7, #20]
 800db9c:	7a1b      	ldrb	r3, [r3, #8]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d00c      	beq.n	800dbbc <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800dba2:	697b      	ldr	r3, [r7, #20]
 800dba4:	7a1a      	ldrb	r2, [r3, #8]
 800dba6:	4b44      	ldr	r3, [pc, #272]	; (800dcb8 <tcp_input+0x528>)
 800dba8:	685b      	ldr	r3, [r3, #4]
 800dbaa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dbae:	3301      	adds	r3, #1
 800dbb0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800dbb2:	429a      	cmp	r2, r3
 800dbb4:	d002      	beq.n	800dbbc <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800dbb6:	697b      	ldr	r3, [r7, #20]
 800dbb8:	61bb      	str	r3, [r7, #24]
        continue;
 800dbba:	e016      	b.n	800dbea <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800dbbc:	697b      	ldr	r3, [r7, #20]
 800dbbe:	8ada      	ldrh	r2, [r3, #22]
 800dbc0:	4b3c      	ldr	r3, [pc, #240]	; (800dcb4 <tcp_input+0x524>)
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	885b      	ldrh	r3, [r3, #2]
 800dbc6:	b29b      	uxth	r3, r3
 800dbc8:	429a      	cmp	r2, r3
 800dbca:	d10c      	bne.n	800dbe6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800dbcc:	697b      	ldr	r3, [r7, #20]
 800dbce:	681a      	ldr	r2, [r3, #0]
 800dbd0:	4b39      	ldr	r3, [pc, #228]	; (800dcb8 <tcp_input+0x528>)
 800dbd2:	695b      	ldr	r3, [r3, #20]
 800dbd4:	429a      	cmp	r2, r3
 800dbd6:	d00f      	beq.n	800dbf8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800dbd8:	697b      	ldr	r3, [r7, #20]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d00d      	beq.n	800dbfa <tcp_input+0x46a>
 800dbde:	697b      	ldr	r3, [r7, #20]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d009      	beq.n	800dbfa <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800dbe6:	697b      	ldr	r3, [r7, #20]
 800dbe8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dbea:	697b      	ldr	r3, [r7, #20]
 800dbec:	68db      	ldr	r3, [r3, #12]
 800dbee:	617b      	str	r3, [r7, #20]
 800dbf0:	697b      	ldr	r3, [r7, #20]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d1d1      	bne.n	800db9a <tcp_input+0x40a>
 800dbf6:	e000      	b.n	800dbfa <tcp_input+0x46a>
            break;
 800dbf8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800dbfa:	697b      	ldr	r3, [r7, #20]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d014      	beq.n	800dc2a <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800dc00:	69bb      	ldr	r3, [r7, #24]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d00a      	beq.n	800dc1c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800dc06:	697b      	ldr	r3, [r7, #20]
 800dc08:	68da      	ldr	r2, [r3, #12]
 800dc0a:	69bb      	ldr	r3, [r7, #24]
 800dc0c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800dc0e:	4b32      	ldr	r3, [pc, #200]	; (800dcd8 <tcp_input+0x548>)
 800dc10:	681a      	ldr	r2, [r3, #0]
 800dc12:	697b      	ldr	r3, [r7, #20]
 800dc14:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800dc16:	4a30      	ldr	r2, [pc, #192]	; (800dcd8 <tcp_input+0x548>)
 800dc18:	697b      	ldr	r3, [r7, #20]
 800dc1a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800dc1c:	6978      	ldr	r0, [r7, #20]
 800dc1e:	f000 fa01 	bl	800e024 <tcp_listen_input>
      }
      pbuf_free(p);
 800dc22:	6878      	ldr	r0, [r7, #4]
 800dc24:	f7fd ff80 	bl	800bb28 <pbuf_free>
      return;
 800dc28:	e19b      	b.n	800df62 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800dc2a:	69fb      	ldr	r3, [r7, #28]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	f000 8160 	beq.w	800def2 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800dc32:	4b2a      	ldr	r3, [pc, #168]	; (800dcdc <tcp_input+0x54c>)
 800dc34:	2200      	movs	r2, #0
 800dc36:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	891a      	ldrh	r2, [r3, #8]
 800dc3c:	4b27      	ldr	r3, [pc, #156]	; (800dcdc <tcp_input+0x54c>)
 800dc3e:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800dc40:	4a26      	ldr	r2, [pc, #152]	; (800dcdc <tcp_input+0x54c>)
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800dc46:	4b1b      	ldr	r3, [pc, #108]	; (800dcb4 <tcp_input+0x524>)
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	4a24      	ldr	r2, [pc, #144]	; (800dcdc <tcp_input+0x54c>)
 800dc4c:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800dc4e:	4b24      	ldr	r3, [pc, #144]	; (800dce0 <tcp_input+0x550>)
 800dc50:	2200      	movs	r2, #0
 800dc52:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800dc54:	4b23      	ldr	r3, [pc, #140]	; (800dce4 <tcp_input+0x554>)
 800dc56:	2200      	movs	r2, #0
 800dc58:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800dc5a:	4b23      	ldr	r3, [pc, #140]	; (800dce8 <tcp_input+0x558>)
 800dc5c:	2200      	movs	r2, #0
 800dc5e:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800dc60:	4b22      	ldr	r3, [pc, #136]	; (800dcec <tcp_input+0x55c>)
 800dc62:	781b      	ldrb	r3, [r3, #0]
 800dc64:	f003 0308 	and.w	r3, r3, #8
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d006      	beq.n	800dc7a <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	7b5b      	ldrb	r3, [r3, #13]
 800dc70:	f043 0301 	orr.w	r3, r3, #1
 800dc74:	b2da      	uxtb	r2, r3
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800dc7a:	69fb      	ldr	r3, [r7, #28]
 800dc7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d038      	beq.n	800dcf4 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800dc82:	69f8      	ldr	r0, [r7, #28]
 800dc84:	f7ff f93e 	bl	800cf04 <tcp_process_refused_data>
 800dc88:	4603      	mov	r3, r0
 800dc8a:	f113 0f0d 	cmn.w	r3, #13
 800dc8e:	d007      	beq.n	800dca0 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800dc90:	69fb      	ldr	r3, [r7, #28]
 800dc92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d02d      	beq.n	800dcf4 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800dc98:	4b15      	ldr	r3, [pc, #84]	; (800dcf0 <tcp_input+0x560>)
 800dc9a:	881b      	ldrh	r3, [r3, #0]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d029      	beq.n	800dcf4 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800dca0:	69fb      	ldr	r3, [r7, #28]
 800dca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	f040 8104 	bne.w	800deb2 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800dcaa:	69f8      	ldr	r0, [r7, #28]
 800dcac:	f003 f9be 	bl	801102c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800dcb0:	e0ff      	b.n	800deb2 <tcp_input+0x722>
 800dcb2:	bf00      	nop
 800dcb4:	20004bd8 	.word	0x20004bd8
 800dcb8:	20008360 	.word	0x20008360
 800dcbc:	08019dd8 	.word	0x08019dd8
 800dcc0:	08019f04 	.word	0x08019f04
 800dcc4:	08019e24 	.word	0x08019e24
 800dcc8:	2000dc44 	.word	0x2000dc44
 800dccc:	08019f30 	.word	0x08019f30
 800dcd0:	2000dc54 	.word	0x2000dc54
 800dcd4:	08019f5c 	.word	0x08019f5c
 800dcd8:	2000dc4c 	.word	0x2000dc4c
 800dcdc:	20004bc8 	.word	0x20004bc8
 800dce0:	20004bf8 	.word	0x20004bf8
 800dce4:	20004bf5 	.word	0x20004bf5
 800dce8:	20004bf0 	.word	0x20004bf0
 800dcec:	20004bf4 	.word	0x20004bf4
 800dcf0:	20004bf2 	.word	0x20004bf2
      }
    }
    tcp_input_pcb = pcb;
 800dcf4:	4a9c      	ldr	r2, [pc, #624]	; (800df68 <tcp_input+0x7d8>)
 800dcf6:	69fb      	ldr	r3, [r7, #28]
 800dcf8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800dcfa:	69f8      	ldr	r0, [r7, #28]
 800dcfc:	f000 fb0a 	bl	800e314 <tcp_process>
 800dd00:	4603      	mov	r3, r0
 800dd02:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800dd04:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dd08:	f113 0f0d 	cmn.w	r3, #13
 800dd0c:	f000 80d3 	beq.w	800deb6 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800dd10:	4b96      	ldr	r3, [pc, #600]	; (800df6c <tcp_input+0x7dc>)
 800dd12:	781b      	ldrb	r3, [r3, #0]
 800dd14:	f003 0308 	and.w	r3, r3, #8
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d015      	beq.n	800dd48 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800dd1c:	69fb      	ldr	r3, [r7, #28]
 800dd1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d008      	beq.n	800dd38 <tcp_input+0x5a8>
 800dd26:	69fb      	ldr	r3, [r7, #28]
 800dd28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd2c:	69fa      	ldr	r2, [r7, #28]
 800dd2e:	6912      	ldr	r2, [r2, #16]
 800dd30:	f06f 010d 	mvn.w	r1, #13
 800dd34:	4610      	mov	r0, r2
 800dd36:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800dd38:	69f9      	ldr	r1, [r7, #28]
 800dd3a:	488d      	ldr	r0, [pc, #564]	; (800df70 <tcp_input+0x7e0>)
 800dd3c:	f7ff fbb0 	bl	800d4a0 <tcp_pcb_remove>
        tcp_free(pcb);
 800dd40:	69f8      	ldr	r0, [r7, #28]
 800dd42:	f7fe f99d 	bl	800c080 <tcp_free>
 800dd46:	e0c1      	b.n	800decc <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800dd48:	2300      	movs	r3, #0
 800dd4a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800dd4c:	4b89      	ldr	r3, [pc, #548]	; (800df74 <tcp_input+0x7e4>)
 800dd4e:	881b      	ldrh	r3, [r3, #0]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d01d      	beq.n	800dd90 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800dd54:	4b87      	ldr	r3, [pc, #540]	; (800df74 <tcp_input+0x7e4>)
 800dd56:	881b      	ldrh	r3, [r3, #0]
 800dd58:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800dd5a:	69fb      	ldr	r3, [r7, #28]
 800dd5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d00a      	beq.n	800dd7a <tcp_input+0x5ea>
 800dd64:	69fb      	ldr	r3, [r7, #28]
 800dd66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dd6a:	69fa      	ldr	r2, [r7, #28]
 800dd6c:	6910      	ldr	r0, [r2, #16]
 800dd6e:	89fa      	ldrh	r2, [r7, #14]
 800dd70:	69f9      	ldr	r1, [r7, #28]
 800dd72:	4798      	blx	r3
 800dd74:	4603      	mov	r3, r0
 800dd76:	74fb      	strb	r3, [r7, #19]
 800dd78:	e001      	b.n	800dd7e <tcp_input+0x5ee>
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800dd7e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dd82:	f113 0f0d 	cmn.w	r3, #13
 800dd86:	f000 8098 	beq.w	800deba <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800dd8a:	4b7a      	ldr	r3, [pc, #488]	; (800df74 <tcp_input+0x7e4>)
 800dd8c:	2200      	movs	r2, #0
 800dd8e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800dd90:	69f8      	ldr	r0, [r7, #28]
 800dd92:	f000 f907 	bl	800dfa4 <tcp_input_delayed_close>
 800dd96:	4603      	mov	r3, r0
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	f040 8090 	bne.w	800debe <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800dd9e:	4b76      	ldr	r3, [pc, #472]	; (800df78 <tcp_input+0x7e8>)
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d041      	beq.n	800de2a <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800dda6:	69fb      	ldr	r3, [r7, #28]
 800dda8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d006      	beq.n	800ddbc <tcp_input+0x62c>
 800ddae:	4b73      	ldr	r3, [pc, #460]	; (800df7c <tcp_input+0x7ec>)
 800ddb0:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800ddb4:	4972      	ldr	r1, [pc, #456]	; (800df80 <tcp_input+0x7f0>)
 800ddb6:	4873      	ldr	r0, [pc, #460]	; (800df84 <tcp_input+0x7f4>)
 800ddb8:	f00a fa3c 	bl	8018234 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800ddbc:	69fb      	ldr	r3, [r7, #28]
 800ddbe:	8b5b      	ldrh	r3, [r3, #26]
 800ddc0:	f003 0310 	and.w	r3, r3, #16
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d008      	beq.n	800ddda <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800ddc8:	4b6b      	ldr	r3, [pc, #428]	; (800df78 <tcp_input+0x7e8>)
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	4618      	mov	r0, r3
 800ddce:	f7fd feab 	bl	800bb28 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800ddd2:	69f8      	ldr	r0, [r7, #28]
 800ddd4:	f7fe fc3c 	bl	800c650 <tcp_abort>
            goto aborted;
 800ddd8:	e078      	b.n	800decc <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800ddda:	69fb      	ldr	r3, [r7, #28]
 800dddc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d00c      	beq.n	800ddfe <tcp_input+0x66e>
 800dde4:	69fb      	ldr	r3, [r7, #28]
 800dde6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ddea:	69fb      	ldr	r3, [r7, #28]
 800ddec:	6918      	ldr	r0, [r3, #16]
 800ddee:	4b62      	ldr	r3, [pc, #392]	; (800df78 <tcp_input+0x7e8>)
 800ddf0:	681a      	ldr	r2, [r3, #0]
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	69f9      	ldr	r1, [r7, #28]
 800ddf6:	47a0      	blx	r4
 800ddf8:	4603      	mov	r3, r0
 800ddfa:	74fb      	strb	r3, [r7, #19]
 800ddfc:	e008      	b.n	800de10 <tcp_input+0x680>
 800ddfe:	4b5e      	ldr	r3, [pc, #376]	; (800df78 <tcp_input+0x7e8>)
 800de00:	681a      	ldr	r2, [r3, #0]
 800de02:	2300      	movs	r3, #0
 800de04:	69f9      	ldr	r1, [r7, #28]
 800de06:	2000      	movs	r0, #0
 800de08:	f7ff f952 	bl	800d0b0 <tcp_recv_null>
 800de0c:	4603      	mov	r3, r0
 800de0e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800de10:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800de14:	f113 0f0d 	cmn.w	r3, #13
 800de18:	d053      	beq.n	800dec2 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800de1a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d003      	beq.n	800de2a <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800de22:	4b55      	ldr	r3, [pc, #340]	; (800df78 <tcp_input+0x7e8>)
 800de24:	681a      	ldr	r2, [r3, #0]
 800de26:	69fb      	ldr	r3, [r7, #28]
 800de28:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800de2a:	4b50      	ldr	r3, [pc, #320]	; (800df6c <tcp_input+0x7dc>)
 800de2c:	781b      	ldrb	r3, [r3, #0]
 800de2e:	f003 0320 	and.w	r3, r3, #32
 800de32:	2b00      	cmp	r3, #0
 800de34:	d030      	beq.n	800de98 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800de36:	69fb      	ldr	r3, [r7, #28]
 800de38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d009      	beq.n	800de52 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800de3e:	69fb      	ldr	r3, [r7, #28]
 800de40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800de42:	7b5a      	ldrb	r2, [r3, #13]
 800de44:	69fb      	ldr	r3, [r7, #28]
 800de46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800de48:	f042 0220 	orr.w	r2, r2, #32
 800de4c:	b2d2      	uxtb	r2, r2
 800de4e:	735a      	strb	r2, [r3, #13]
 800de50:	e022      	b.n	800de98 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800de52:	69fb      	ldr	r3, [r7, #28]
 800de54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800de56:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800de5a:	d005      	beq.n	800de68 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800de5c:	69fb      	ldr	r3, [r7, #28]
 800de5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800de60:	3301      	adds	r3, #1
 800de62:	b29a      	uxth	r2, r3
 800de64:	69fb      	ldr	r3, [r7, #28]
 800de66:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800de68:	69fb      	ldr	r3, [r7, #28]
 800de6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d00b      	beq.n	800de8a <tcp_input+0x6fa>
 800de72:	69fb      	ldr	r3, [r7, #28]
 800de74:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800de78:	69fb      	ldr	r3, [r7, #28]
 800de7a:	6918      	ldr	r0, [r3, #16]
 800de7c:	2300      	movs	r3, #0
 800de7e:	2200      	movs	r2, #0
 800de80:	69f9      	ldr	r1, [r7, #28]
 800de82:	47a0      	blx	r4
 800de84:	4603      	mov	r3, r0
 800de86:	74fb      	strb	r3, [r7, #19]
 800de88:	e001      	b.n	800de8e <tcp_input+0x6fe>
 800de8a:	2300      	movs	r3, #0
 800de8c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800de8e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800de92:	f113 0f0d 	cmn.w	r3, #13
 800de96:	d016      	beq.n	800dec6 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800de98:	4b33      	ldr	r3, [pc, #204]	; (800df68 <tcp_input+0x7d8>)
 800de9a:	2200      	movs	r2, #0
 800de9c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800de9e:	69f8      	ldr	r0, [r7, #28]
 800dea0:	f000 f880 	bl	800dfa4 <tcp_input_delayed_close>
 800dea4:	4603      	mov	r3, r0
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d10f      	bne.n	800deca <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800deaa:	69f8      	ldr	r0, [r7, #28]
 800deac:	f002 fab8 	bl	8010420 <tcp_output>
 800deb0:	e00c      	b.n	800decc <tcp_input+0x73c>
        goto aborted;
 800deb2:	bf00      	nop
 800deb4:	e00a      	b.n	800decc <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800deb6:	bf00      	nop
 800deb8:	e008      	b.n	800decc <tcp_input+0x73c>
              goto aborted;
 800deba:	bf00      	nop
 800debc:	e006      	b.n	800decc <tcp_input+0x73c>
          goto aborted;
 800debe:	bf00      	nop
 800dec0:	e004      	b.n	800decc <tcp_input+0x73c>
            goto aborted;
 800dec2:	bf00      	nop
 800dec4:	e002      	b.n	800decc <tcp_input+0x73c>
              goto aborted;
 800dec6:	bf00      	nop
 800dec8:	e000      	b.n	800decc <tcp_input+0x73c>
          goto aborted;
 800deca:	bf00      	nop
    tcp_input_pcb = NULL;
 800decc:	4b26      	ldr	r3, [pc, #152]	; (800df68 <tcp_input+0x7d8>)
 800dece:	2200      	movs	r2, #0
 800ded0:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800ded2:	4b29      	ldr	r3, [pc, #164]	; (800df78 <tcp_input+0x7e8>)
 800ded4:	2200      	movs	r2, #0
 800ded6:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800ded8:	4b2b      	ldr	r3, [pc, #172]	; (800df88 <tcp_input+0x7f8>)
 800deda:	685b      	ldr	r3, [r3, #4]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d03f      	beq.n	800df60 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800dee0:	4b29      	ldr	r3, [pc, #164]	; (800df88 <tcp_input+0x7f8>)
 800dee2:	685b      	ldr	r3, [r3, #4]
 800dee4:	4618      	mov	r0, r3
 800dee6:	f7fd fe1f 	bl	800bb28 <pbuf_free>
      inseg.p = NULL;
 800deea:	4b27      	ldr	r3, [pc, #156]	; (800df88 <tcp_input+0x7f8>)
 800deec:	2200      	movs	r2, #0
 800deee:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800def0:	e036      	b.n	800df60 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800def2:	4b26      	ldr	r3, [pc, #152]	; (800df8c <tcp_input+0x7fc>)
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	899b      	ldrh	r3, [r3, #12]
 800def8:	b29b      	uxth	r3, r3
 800defa:	4618      	mov	r0, r3
 800defc:	f7fc fa68 	bl	800a3d0 <lwip_htons>
 800df00:	4603      	mov	r3, r0
 800df02:	b2db      	uxtb	r3, r3
 800df04:	f003 0304 	and.w	r3, r3, #4
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d118      	bne.n	800df3e <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800df0c:	4b20      	ldr	r3, [pc, #128]	; (800df90 <tcp_input+0x800>)
 800df0e:	6819      	ldr	r1, [r3, #0]
 800df10:	4b20      	ldr	r3, [pc, #128]	; (800df94 <tcp_input+0x804>)
 800df12:	881b      	ldrh	r3, [r3, #0]
 800df14:	461a      	mov	r2, r3
 800df16:	4b20      	ldr	r3, [pc, #128]	; (800df98 <tcp_input+0x808>)
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800df1c:	4b1b      	ldr	r3, [pc, #108]	; (800df8c <tcp_input+0x7fc>)
 800df1e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800df20:	885b      	ldrh	r3, [r3, #2]
 800df22:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800df24:	4a19      	ldr	r2, [pc, #100]	; (800df8c <tcp_input+0x7fc>)
 800df26:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800df28:	8812      	ldrh	r2, [r2, #0]
 800df2a:	b292      	uxth	r2, r2
 800df2c:	9202      	str	r2, [sp, #8]
 800df2e:	9301      	str	r3, [sp, #4]
 800df30:	4b1a      	ldr	r3, [pc, #104]	; (800df9c <tcp_input+0x80c>)
 800df32:	9300      	str	r3, [sp, #0]
 800df34:	4b1a      	ldr	r3, [pc, #104]	; (800dfa0 <tcp_input+0x810>)
 800df36:	4602      	mov	r2, r0
 800df38:	2000      	movs	r0, #0
 800df3a:	f003 f825 	bl	8010f88 <tcp_rst>
    pbuf_free(p);
 800df3e:	6878      	ldr	r0, [r7, #4]
 800df40:	f7fd fdf2 	bl	800bb28 <pbuf_free>
  return;
 800df44:	e00c      	b.n	800df60 <tcp_input+0x7d0>
    goto dropped;
 800df46:	bf00      	nop
 800df48:	e006      	b.n	800df58 <tcp_input+0x7c8>
    goto dropped;
 800df4a:	bf00      	nop
 800df4c:	e004      	b.n	800df58 <tcp_input+0x7c8>
    goto dropped;
 800df4e:	bf00      	nop
 800df50:	e002      	b.n	800df58 <tcp_input+0x7c8>
      goto dropped;
 800df52:	bf00      	nop
 800df54:	e000      	b.n	800df58 <tcp_input+0x7c8>
      goto dropped;
 800df56:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800df58:	6878      	ldr	r0, [r7, #4]
 800df5a:	f7fd fde5 	bl	800bb28 <pbuf_free>
 800df5e:	e000      	b.n	800df62 <tcp_input+0x7d2>
  return;
 800df60:	bf00      	nop
}
 800df62:	3724      	adds	r7, #36	; 0x24
 800df64:	46bd      	mov	sp, r7
 800df66:	bd90      	pop	{r4, r7, pc}
 800df68:	2000dc58 	.word	0x2000dc58
 800df6c:	20004bf5 	.word	0x20004bf5
 800df70:	2000dc44 	.word	0x2000dc44
 800df74:	20004bf0 	.word	0x20004bf0
 800df78:	20004bf8 	.word	0x20004bf8
 800df7c:	08019dd8 	.word	0x08019dd8
 800df80:	08019f8c 	.word	0x08019f8c
 800df84:	08019e24 	.word	0x08019e24
 800df88:	20004bc8 	.word	0x20004bc8
 800df8c:	20004bd8 	.word	0x20004bd8
 800df90:	20004bec 	.word	0x20004bec
 800df94:	20004bf2 	.word	0x20004bf2
 800df98:	20004be8 	.word	0x20004be8
 800df9c:	20008370 	.word	0x20008370
 800dfa0:	20008374 	.word	0x20008374

0800dfa4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b082      	sub	sp, #8
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d106      	bne.n	800dfc0 <tcp_input_delayed_close+0x1c>
 800dfb2:	4b17      	ldr	r3, [pc, #92]	; (800e010 <tcp_input_delayed_close+0x6c>)
 800dfb4:	f240 225a 	movw	r2, #602	; 0x25a
 800dfb8:	4916      	ldr	r1, [pc, #88]	; (800e014 <tcp_input_delayed_close+0x70>)
 800dfba:	4817      	ldr	r0, [pc, #92]	; (800e018 <tcp_input_delayed_close+0x74>)
 800dfbc:	f00a f93a 	bl	8018234 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800dfc0:	4b16      	ldr	r3, [pc, #88]	; (800e01c <tcp_input_delayed_close+0x78>)
 800dfc2:	781b      	ldrb	r3, [r3, #0]
 800dfc4:	f003 0310 	and.w	r3, r3, #16
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d01c      	beq.n	800e006 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	8b5b      	ldrh	r3, [r3, #26]
 800dfd0:	f003 0310 	and.w	r3, r3, #16
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d10d      	bne.n	800dff4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d008      	beq.n	800dff4 <tcp_input_delayed_close+0x50>
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dfe8:	687a      	ldr	r2, [r7, #4]
 800dfea:	6912      	ldr	r2, [r2, #16]
 800dfec:	f06f 010e 	mvn.w	r1, #14
 800dff0:	4610      	mov	r0, r2
 800dff2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800dff4:	6879      	ldr	r1, [r7, #4]
 800dff6:	480a      	ldr	r0, [pc, #40]	; (800e020 <tcp_input_delayed_close+0x7c>)
 800dff8:	f7ff fa52 	bl	800d4a0 <tcp_pcb_remove>
    tcp_free(pcb);
 800dffc:	6878      	ldr	r0, [r7, #4]
 800dffe:	f7fe f83f 	bl	800c080 <tcp_free>
    return 1;
 800e002:	2301      	movs	r3, #1
 800e004:	e000      	b.n	800e008 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800e006:	2300      	movs	r3, #0
}
 800e008:	4618      	mov	r0, r3
 800e00a:	3708      	adds	r7, #8
 800e00c:	46bd      	mov	sp, r7
 800e00e:	bd80      	pop	{r7, pc}
 800e010:	08019dd8 	.word	0x08019dd8
 800e014:	08019fa8 	.word	0x08019fa8
 800e018:	08019e24 	.word	0x08019e24
 800e01c:	20004bf5 	.word	0x20004bf5
 800e020:	2000dc44 	.word	0x2000dc44

0800e024 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800e024:	b590      	push	{r4, r7, lr}
 800e026:	b08b      	sub	sp, #44	; 0x2c
 800e028:	af04      	add	r7, sp, #16
 800e02a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800e02c:	4b6f      	ldr	r3, [pc, #444]	; (800e1ec <tcp_listen_input+0x1c8>)
 800e02e:	781b      	ldrb	r3, [r3, #0]
 800e030:	f003 0304 	and.w	r3, r3, #4
 800e034:	2b00      	cmp	r3, #0
 800e036:	f040 80d2 	bne.w	800e1de <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d106      	bne.n	800e04e <tcp_listen_input+0x2a>
 800e040:	4b6b      	ldr	r3, [pc, #428]	; (800e1f0 <tcp_listen_input+0x1cc>)
 800e042:	f240 2281 	movw	r2, #641	; 0x281
 800e046:	496b      	ldr	r1, [pc, #428]	; (800e1f4 <tcp_listen_input+0x1d0>)
 800e048:	486b      	ldr	r0, [pc, #428]	; (800e1f8 <tcp_listen_input+0x1d4>)
 800e04a:	f00a f8f3 	bl	8018234 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800e04e:	4b67      	ldr	r3, [pc, #412]	; (800e1ec <tcp_listen_input+0x1c8>)
 800e050:	781b      	ldrb	r3, [r3, #0]
 800e052:	f003 0310 	and.w	r3, r3, #16
 800e056:	2b00      	cmp	r3, #0
 800e058:	d019      	beq.n	800e08e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e05a:	4b68      	ldr	r3, [pc, #416]	; (800e1fc <tcp_listen_input+0x1d8>)
 800e05c:	6819      	ldr	r1, [r3, #0]
 800e05e:	4b68      	ldr	r3, [pc, #416]	; (800e200 <tcp_listen_input+0x1dc>)
 800e060:	881b      	ldrh	r3, [r3, #0]
 800e062:	461a      	mov	r2, r3
 800e064:	4b67      	ldr	r3, [pc, #412]	; (800e204 <tcp_listen_input+0x1e0>)
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e06a:	4b67      	ldr	r3, [pc, #412]	; (800e208 <tcp_listen_input+0x1e4>)
 800e06c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e06e:	885b      	ldrh	r3, [r3, #2]
 800e070:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e072:	4a65      	ldr	r2, [pc, #404]	; (800e208 <tcp_listen_input+0x1e4>)
 800e074:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e076:	8812      	ldrh	r2, [r2, #0]
 800e078:	b292      	uxth	r2, r2
 800e07a:	9202      	str	r2, [sp, #8]
 800e07c:	9301      	str	r3, [sp, #4]
 800e07e:	4b63      	ldr	r3, [pc, #396]	; (800e20c <tcp_listen_input+0x1e8>)
 800e080:	9300      	str	r3, [sp, #0]
 800e082:	4b63      	ldr	r3, [pc, #396]	; (800e210 <tcp_listen_input+0x1ec>)
 800e084:	4602      	mov	r2, r0
 800e086:	6878      	ldr	r0, [r7, #4]
 800e088:	f002 ff7e 	bl	8010f88 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800e08c:	e0a9      	b.n	800e1e2 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800e08e:	4b57      	ldr	r3, [pc, #348]	; (800e1ec <tcp_listen_input+0x1c8>)
 800e090:	781b      	ldrb	r3, [r3, #0]
 800e092:	f003 0302 	and.w	r3, r3, #2
 800e096:	2b00      	cmp	r3, #0
 800e098:	f000 80a3 	beq.w	800e1e2 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	7d5b      	ldrb	r3, [r3, #21]
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	f7ff f929 	bl	800d2f8 <tcp_alloc>
 800e0a6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800e0a8:	697b      	ldr	r3, [r7, #20]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d111      	bne.n	800e0d2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	699b      	ldr	r3, [r3, #24]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d00a      	beq.n	800e0cc <tcp_listen_input+0xa8>
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	699b      	ldr	r3, [r3, #24]
 800e0ba:	687a      	ldr	r2, [r7, #4]
 800e0bc:	6910      	ldr	r0, [r2, #16]
 800e0be:	f04f 32ff 	mov.w	r2, #4294967295
 800e0c2:	2100      	movs	r1, #0
 800e0c4:	4798      	blx	r3
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	73bb      	strb	r3, [r7, #14]
      return;
 800e0ca:	e08b      	b.n	800e1e4 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e0cc:	23f0      	movs	r3, #240	; 0xf0
 800e0ce:	73bb      	strb	r3, [r7, #14]
      return;
 800e0d0:	e088      	b.n	800e1e4 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800e0d2:	4b50      	ldr	r3, [pc, #320]	; (800e214 <tcp_listen_input+0x1f0>)
 800e0d4:	695a      	ldr	r2, [r3, #20]
 800e0d6:	697b      	ldr	r3, [r7, #20]
 800e0d8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800e0da:	4b4e      	ldr	r3, [pc, #312]	; (800e214 <tcp_listen_input+0x1f0>)
 800e0dc:	691a      	ldr	r2, [r3, #16]
 800e0de:	697b      	ldr	r3, [r7, #20]
 800e0e0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	8ada      	ldrh	r2, [r3, #22]
 800e0e6:	697b      	ldr	r3, [r7, #20]
 800e0e8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800e0ea:	4b47      	ldr	r3, [pc, #284]	; (800e208 <tcp_listen_input+0x1e4>)
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	881b      	ldrh	r3, [r3, #0]
 800e0f0:	b29a      	uxth	r2, r3
 800e0f2:	697b      	ldr	r3, [r7, #20]
 800e0f4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800e0f6:	697b      	ldr	r3, [r7, #20]
 800e0f8:	2203      	movs	r2, #3
 800e0fa:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800e0fc:	4b41      	ldr	r3, [pc, #260]	; (800e204 <tcp_listen_input+0x1e0>)
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	1c5a      	adds	r2, r3, #1
 800e102:	697b      	ldr	r3, [r7, #20]
 800e104:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800e106:	697b      	ldr	r3, [r7, #20]
 800e108:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e10a:	697b      	ldr	r3, [r7, #20]
 800e10c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800e10e:	6978      	ldr	r0, [r7, #20]
 800e110:	f7ff fa5a 	bl	800d5c8 <tcp_next_iss>
 800e114:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800e116:	697b      	ldr	r3, [r7, #20]
 800e118:	693a      	ldr	r2, [r7, #16]
 800e11a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800e11c:	697b      	ldr	r3, [r7, #20]
 800e11e:	693a      	ldr	r2, [r7, #16]
 800e120:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800e122:	697b      	ldr	r3, [r7, #20]
 800e124:	693a      	ldr	r2, [r7, #16]
 800e126:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800e128:	697b      	ldr	r3, [r7, #20]
 800e12a:	693a      	ldr	r2, [r7, #16]
 800e12c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800e12e:	4b35      	ldr	r3, [pc, #212]	; (800e204 <tcp_listen_input+0x1e0>)
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	1e5a      	subs	r2, r3, #1
 800e134:	697b      	ldr	r3, [r7, #20]
 800e136:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	691a      	ldr	r2, [r3, #16]
 800e13c:	697b      	ldr	r3, [r7, #20]
 800e13e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800e140:	697b      	ldr	r3, [r7, #20]
 800e142:	687a      	ldr	r2, [r7, #4]
 800e144:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	7a5b      	ldrb	r3, [r3, #9]
 800e14a:	f003 030c 	and.w	r3, r3, #12
 800e14e:	b2da      	uxtb	r2, r3
 800e150:	697b      	ldr	r3, [r7, #20]
 800e152:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	7a1a      	ldrb	r2, [r3, #8]
 800e158:	697b      	ldr	r3, [r7, #20]
 800e15a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800e15c:	4b2e      	ldr	r3, [pc, #184]	; (800e218 <tcp_listen_input+0x1f4>)
 800e15e:	681a      	ldr	r2, [r3, #0]
 800e160:	697b      	ldr	r3, [r7, #20]
 800e162:	60da      	str	r2, [r3, #12]
 800e164:	4a2c      	ldr	r2, [pc, #176]	; (800e218 <tcp_listen_input+0x1f4>)
 800e166:	697b      	ldr	r3, [r7, #20]
 800e168:	6013      	str	r3, [r2, #0]
 800e16a:	f003 f8cf 	bl	801130c <tcp_timer_needed>
 800e16e:	4b2b      	ldr	r3, [pc, #172]	; (800e21c <tcp_listen_input+0x1f8>)
 800e170:	2201      	movs	r2, #1
 800e172:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800e174:	6978      	ldr	r0, [r7, #20]
 800e176:	f001 fd8d 	bl	800fc94 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800e17a:	4b23      	ldr	r3, [pc, #140]	; (800e208 <tcp_listen_input+0x1e4>)
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	89db      	ldrh	r3, [r3, #14]
 800e180:	b29a      	uxth	r2, r3
 800e182:	697b      	ldr	r3, [r7, #20]
 800e184:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800e188:	697b      	ldr	r3, [r7, #20]
 800e18a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e18e:	697b      	ldr	r3, [r7, #20]
 800e190:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800e194:	697b      	ldr	r3, [r7, #20]
 800e196:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e198:	697b      	ldr	r3, [r7, #20]
 800e19a:	3304      	adds	r3, #4
 800e19c:	4618      	mov	r0, r3
 800e19e:	f004 fcc3 	bl	8012b28 <ip4_route>
 800e1a2:	4601      	mov	r1, r0
 800e1a4:	697b      	ldr	r3, [r7, #20]
 800e1a6:	3304      	adds	r3, #4
 800e1a8:	461a      	mov	r2, r3
 800e1aa:	4620      	mov	r0, r4
 800e1ac:	f7ff fa32 	bl	800d614 <tcp_eff_send_mss_netif>
 800e1b0:	4603      	mov	r3, r0
 800e1b2:	461a      	mov	r2, r3
 800e1b4:	697b      	ldr	r3, [r7, #20]
 800e1b6:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800e1b8:	2112      	movs	r1, #18
 800e1ba:	6978      	ldr	r0, [r7, #20]
 800e1bc:	f002 f842 	bl	8010244 <tcp_enqueue_flags>
 800e1c0:	4603      	mov	r3, r0
 800e1c2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800e1c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d004      	beq.n	800e1d6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800e1cc:	2100      	movs	r1, #0
 800e1ce:	6978      	ldr	r0, [r7, #20]
 800e1d0:	f7fe f980 	bl	800c4d4 <tcp_abandon>
      return;
 800e1d4:	e006      	b.n	800e1e4 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800e1d6:	6978      	ldr	r0, [r7, #20]
 800e1d8:	f002 f922 	bl	8010420 <tcp_output>
  return;
 800e1dc:	e001      	b.n	800e1e2 <tcp_listen_input+0x1be>
    return;
 800e1de:	bf00      	nop
 800e1e0:	e000      	b.n	800e1e4 <tcp_listen_input+0x1c0>
  return;
 800e1e2:	bf00      	nop
}
 800e1e4:	371c      	adds	r7, #28
 800e1e6:	46bd      	mov	sp, r7
 800e1e8:	bd90      	pop	{r4, r7, pc}
 800e1ea:	bf00      	nop
 800e1ec:	20004bf4 	.word	0x20004bf4
 800e1f0:	08019dd8 	.word	0x08019dd8
 800e1f4:	08019fd0 	.word	0x08019fd0
 800e1f8:	08019e24 	.word	0x08019e24
 800e1fc:	20004bec 	.word	0x20004bec
 800e200:	20004bf2 	.word	0x20004bf2
 800e204:	20004be8 	.word	0x20004be8
 800e208:	20004bd8 	.word	0x20004bd8
 800e20c:	20008370 	.word	0x20008370
 800e210:	20008374 	.word	0x20008374
 800e214:	20008360 	.word	0x20008360
 800e218:	2000dc44 	.word	0x2000dc44
 800e21c:	2000dc40 	.word	0x2000dc40

0800e220 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800e220:	b580      	push	{r7, lr}
 800e222:	b086      	sub	sp, #24
 800e224:	af04      	add	r7, sp, #16
 800e226:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800e228:	4b2f      	ldr	r3, [pc, #188]	; (800e2e8 <tcp_timewait_input+0xc8>)
 800e22a:	781b      	ldrb	r3, [r3, #0]
 800e22c:	f003 0304 	and.w	r3, r3, #4
 800e230:	2b00      	cmp	r3, #0
 800e232:	d153      	bne.n	800e2dc <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d106      	bne.n	800e248 <tcp_timewait_input+0x28>
 800e23a:	4b2c      	ldr	r3, [pc, #176]	; (800e2ec <tcp_timewait_input+0xcc>)
 800e23c:	f240 22ee 	movw	r2, #750	; 0x2ee
 800e240:	492b      	ldr	r1, [pc, #172]	; (800e2f0 <tcp_timewait_input+0xd0>)
 800e242:	482c      	ldr	r0, [pc, #176]	; (800e2f4 <tcp_timewait_input+0xd4>)
 800e244:	f009 fff6 	bl	8018234 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800e248:	4b27      	ldr	r3, [pc, #156]	; (800e2e8 <tcp_timewait_input+0xc8>)
 800e24a:	781b      	ldrb	r3, [r3, #0]
 800e24c:	f003 0302 	and.w	r3, r3, #2
 800e250:	2b00      	cmp	r3, #0
 800e252:	d02a      	beq.n	800e2aa <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800e254:	4b28      	ldr	r3, [pc, #160]	; (800e2f8 <tcp_timewait_input+0xd8>)
 800e256:	681a      	ldr	r2, [r3, #0]
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e25c:	1ad3      	subs	r3, r2, r3
 800e25e:	2b00      	cmp	r3, #0
 800e260:	db2d      	blt.n	800e2be <tcp_timewait_input+0x9e>
 800e262:	4b25      	ldr	r3, [pc, #148]	; (800e2f8 <tcp_timewait_input+0xd8>)
 800e264:	681a      	ldr	r2, [r3, #0]
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e26a:	6879      	ldr	r1, [r7, #4]
 800e26c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e26e:	440b      	add	r3, r1
 800e270:	1ad3      	subs	r3, r2, r3
 800e272:	2b00      	cmp	r3, #0
 800e274:	dc23      	bgt.n	800e2be <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e276:	4b21      	ldr	r3, [pc, #132]	; (800e2fc <tcp_timewait_input+0xdc>)
 800e278:	6819      	ldr	r1, [r3, #0]
 800e27a:	4b21      	ldr	r3, [pc, #132]	; (800e300 <tcp_timewait_input+0xe0>)
 800e27c:	881b      	ldrh	r3, [r3, #0]
 800e27e:	461a      	mov	r2, r3
 800e280:	4b1d      	ldr	r3, [pc, #116]	; (800e2f8 <tcp_timewait_input+0xd8>)
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e286:	4b1f      	ldr	r3, [pc, #124]	; (800e304 <tcp_timewait_input+0xe4>)
 800e288:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e28a:	885b      	ldrh	r3, [r3, #2]
 800e28c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e28e:	4a1d      	ldr	r2, [pc, #116]	; (800e304 <tcp_timewait_input+0xe4>)
 800e290:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e292:	8812      	ldrh	r2, [r2, #0]
 800e294:	b292      	uxth	r2, r2
 800e296:	9202      	str	r2, [sp, #8]
 800e298:	9301      	str	r3, [sp, #4]
 800e29a:	4b1b      	ldr	r3, [pc, #108]	; (800e308 <tcp_timewait_input+0xe8>)
 800e29c:	9300      	str	r3, [sp, #0]
 800e29e:	4b1b      	ldr	r3, [pc, #108]	; (800e30c <tcp_timewait_input+0xec>)
 800e2a0:	4602      	mov	r2, r0
 800e2a2:	6878      	ldr	r0, [r7, #4]
 800e2a4:	f002 fe70 	bl	8010f88 <tcp_rst>
      return;
 800e2a8:	e01b      	b.n	800e2e2 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800e2aa:	4b0f      	ldr	r3, [pc, #60]	; (800e2e8 <tcp_timewait_input+0xc8>)
 800e2ac:	781b      	ldrb	r3, [r3, #0]
 800e2ae:	f003 0301 	and.w	r3, r3, #1
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d003      	beq.n	800e2be <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800e2b6:	4b16      	ldr	r3, [pc, #88]	; (800e310 <tcp_timewait_input+0xf0>)
 800e2b8:	681a      	ldr	r2, [r3, #0]
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800e2be:	4b10      	ldr	r3, [pc, #64]	; (800e300 <tcp_timewait_input+0xe0>)
 800e2c0:	881b      	ldrh	r3, [r3, #0]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d00c      	beq.n	800e2e0 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	8b5b      	ldrh	r3, [r3, #26]
 800e2ca:	f043 0302 	orr.w	r3, r3, #2
 800e2ce:	b29a      	uxth	r2, r3
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e2d4:	6878      	ldr	r0, [r7, #4]
 800e2d6:	f002 f8a3 	bl	8010420 <tcp_output>
  }
  return;
 800e2da:	e001      	b.n	800e2e0 <tcp_timewait_input+0xc0>
    return;
 800e2dc:	bf00      	nop
 800e2de:	e000      	b.n	800e2e2 <tcp_timewait_input+0xc2>
  return;
 800e2e0:	bf00      	nop
}
 800e2e2:	3708      	adds	r7, #8
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	bd80      	pop	{r7, pc}
 800e2e8:	20004bf4 	.word	0x20004bf4
 800e2ec:	08019dd8 	.word	0x08019dd8
 800e2f0:	08019ff0 	.word	0x08019ff0
 800e2f4:	08019e24 	.word	0x08019e24
 800e2f8:	20004be8 	.word	0x20004be8
 800e2fc:	20004bec 	.word	0x20004bec
 800e300:	20004bf2 	.word	0x20004bf2
 800e304:	20004bd8 	.word	0x20004bd8
 800e308:	20008370 	.word	0x20008370
 800e30c:	20008374 	.word	0x20008374
 800e310:	2000dc48 	.word	0x2000dc48

0800e314 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800e314:	b590      	push	{r4, r7, lr}
 800e316:	b08d      	sub	sp, #52	; 0x34
 800e318:	af04      	add	r7, sp, #16
 800e31a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800e31c:	2300      	movs	r3, #0
 800e31e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800e320:	2300      	movs	r3, #0
 800e322:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d106      	bne.n	800e338 <tcp_process+0x24>
 800e32a:	4ba5      	ldr	r3, [pc, #660]	; (800e5c0 <tcp_process+0x2ac>)
 800e32c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800e330:	49a4      	ldr	r1, [pc, #656]	; (800e5c4 <tcp_process+0x2b0>)
 800e332:	48a5      	ldr	r0, [pc, #660]	; (800e5c8 <tcp_process+0x2b4>)
 800e334:	f009 ff7e 	bl	8018234 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800e338:	4ba4      	ldr	r3, [pc, #656]	; (800e5cc <tcp_process+0x2b8>)
 800e33a:	781b      	ldrb	r3, [r3, #0]
 800e33c:	f003 0304 	and.w	r3, r3, #4
 800e340:	2b00      	cmp	r3, #0
 800e342:	d04e      	beq.n	800e3e2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	7d1b      	ldrb	r3, [r3, #20]
 800e348:	2b02      	cmp	r3, #2
 800e34a:	d108      	bne.n	800e35e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e350:	4b9f      	ldr	r3, [pc, #636]	; (800e5d0 <tcp_process+0x2bc>)
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	429a      	cmp	r2, r3
 800e356:	d123      	bne.n	800e3a0 <tcp_process+0x8c>
        acceptable = 1;
 800e358:	2301      	movs	r3, #1
 800e35a:	76fb      	strb	r3, [r7, #27]
 800e35c:	e020      	b.n	800e3a0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e362:	4b9c      	ldr	r3, [pc, #624]	; (800e5d4 <tcp_process+0x2c0>)
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	429a      	cmp	r2, r3
 800e368:	d102      	bne.n	800e370 <tcp_process+0x5c>
        acceptable = 1;
 800e36a:	2301      	movs	r3, #1
 800e36c:	76fb      	strb	r3, [r7, #27]
 800e36e:	e017      	b.n	800e3a0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e370:	4b98      	ldr	r3, [pc, #608]	; (800e5d4 <tcp_process+0x2c0>)
 800e372:	681a      	ldr	r2, [r3, #0]
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e378:	1ad3      	subs	r3, r2, r3
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	db10      	blt.n	800e3a0 <tcp_process+0x8c>
 800e37e:	4b95      	ldr	r3, [pc, #596]	; (800e5d4 <tcp_process+0x2c0>)
 800e380:	681a      	ldr	r2, [r3, #0]
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e386:	6879      	ldr	r1, [r7, #4]
 800e388:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e38a:	440b      	add	r3, r1
 800e38c:	1ad3      	subs	r3, r2, r3
 800e38e:	2b00      	cmp	r3, #0
 800e390:	dc06      	bgt.n	800e3a0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	8b5b      	ldrh	r3, [r3, #26]
 800e396:	f043 0302 	orr.w	r3, r3, #2
 800e39a:	b29a      	uxth	r2, r3
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800e3a0:	7efb      	ldrb	r3, [r7, #27]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d01b      	beq.n	800e3de <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	7d1b      	ldrb	r3, [r3, #20]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d106      	bne.n	800e3bc <tcp_process+0xa8>
 800e3ae:	4b84      	ldr	r3, [pc, #528]	; (800e5c0 <tcp_process+0x2ac>)
 800e3b0:	f44f 724e 	mov.w	r2, #824	; 0x338
 800e3b4:	4988      	ldr	r1, [pc, #544]	; (800e5d8 <tcp_process+0x2c4>)
 800e3b6:	4884      	ldr	r0, [pc, #528]	; (800e5c8 <tcp_process+0x2b4>)
 800e3b8:	f009 ff3c 	bl	8018234 <iprintf>
      recv_flags |= TF_RESET;
 800e3bc:	4b87      	ldr	r3, [pc, #540]	; (800e5dc <tcp_process+0x2c8>)
 800e3be:	781b      	ldrb	r3, [r3, #0]
 800e3c0:	f043 0308 	orr.w	r3, r3, #8
 800e3c4:	b2da      	uxtb	r2, r3
 800e3c6:	4b85      	ldr	r3, [pc, #532]	; (800e5dc <tcp_process+0x2c8>)
 800e3c8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	8b5b      	ldrh	r3, [r3, #26]
 800e3ce:	f023 0301 	bic.w	r3, r3, #1
 800e3d2:	b29a      	uxth	r2, r3
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800e3d8:	f06f 030d 	mvn.w	r3, #13
 800e3dc:	e37a      	b.n	800ead4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800e3de:	2300      	movs	r3, #0
 800e3e0:	e378      	b.n	800ead4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800e3e2:	4b7a      	ldr	r3, [pc, #488]	; (800e5cc <tcp_process+0x2b8>)
 800e3e4:	781b      	ldrb	r3, [r3, #0]
 800e3e6:	f003 0302 	and.w	r3, r3, #2
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d010      	beq.n	800e410 <tcp_process+0xfc>
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	7d1b      	ldrb	r3, [r3, #20]
 800e3f2:	2b02      	cmp	r3, #2
 800e3f4:	d00c      	beq.n	800e410 <tcp_process+0xfc>
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	7d1b      	ldrb	r3, [r3, #20]
 800e3fa:	2b03      	cmp	r3, #3
 800e3fc:	d008      	beq.n	800e410 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	8b5b      	ldrh	r3, [r3, #26]
 800e402:	f043 0302 	orr.w	r3, r3, #2
 800e406:	b29a      	uxth	r2, r3
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800e40c:	2300      	movs	r3, #0
 800e40e:	e361      	b.n	800ead4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	8b5b      	ldrh	r3, [r3, #26]
 800e414:	f003 0310 	and.w	r3, r3, #16
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d103      	bne.n	800e424 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800e41c:	4b70      	ldr	r3, [pc, #448]	; (800e5e0 <tcp_process+0x2cc>)
 800e41e:	681a      	ldr	r2, [r3, #0]
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	2200      	movs	r2, #0
 800e428:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	2200      	movs	r2, #0
 800e430:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800e434:	6878      	ldr	r0, [r7, #4]
 800e436:	f001 fc2d 	bl	800fc94 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	7d1b      	ldrb	r3, [r3, #20]
 800e43e:	3b02      	subs	r3, #2
 800e440:	2b07      	cmp	r3, #7
 800e442:	f200 8337 	bhi.w	800eab4 <tcp_process+0x7a0>
 800e446:	a201      	add	r2, pc, #4	; (adr r2, 800e44c <tcp_process+0x138>)
 800e448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e44c:	0800e46d 	.word	0x0800e46d
 800e450:	0800e69d 	.word	0x0800e69d
 800e454:	0800e815 	.word	0x0800e815
 800e458:	0800e83f 	.word	0x0800e83f
 800e45c:	0800e963 	.word	0x0800e963
 800e460:	0800e815 	.word	0x0800e815
 800e464:	0800e9ef 	.word	0x0800e9ef
 800e468:	0800ea7f 	.word	0x0800ea7f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800e46c:	4b57      	ldr	r3, [pc, #348]	; (800e5cc <tcp_process+0x2b8>)
 800e46e:	781b      	ldrb	r3, [r3, #0]
 800e470:	f003 0310 	and.w	r3, r3, #16
 800e474:	2b00      	cmp	r3, #0
 800e476:	f000 80e4 	beq.w	800e642 <tcp_process+0x32e>
 800e47a:	4b54      	ldr	r3, [pc, #336]	; (800e5cc <tcp_process+0x2b8>)
 800e47c:	781b      	ldrb	r3, [r3, #0]
 800e47e:	f003 0302 	and.w	r3, r3, #2
 800e482:	2b00      	cmp	r3, #0
 800e484:	f000 80dd 	beq.w	800e642 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e48c:	1c5a      	adds	r2, r3, #1
 800e48e:	4b50      	ldr	r3, [pc, #320]	; (800e5d0 <tcp_process+0x2bc>)
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	429a      	cmp	r2, r3
 800e494:	f040 80d5 	bne.w	800e642 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800e498:	4b4e      	ldr	r3, [pc, #312]	; (800e5d4 <tcp_process+0x2c0>)
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	1c5a      	adds	r2, r3, #1
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800e4aa:	4b49      	ldr	r3, [pc, #292]	; (800e5d0 <tcp_process+0x2bc>)
 800e4ac:	681a      	ldr	r2, [r3, #0]
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800e4b2:	4b4c      	ldr	r3, [pc, #304]	; (800e5e4 <tcp_process+0x2d0>)
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	89db      	ldrh	r3, [r3, #14]
 800e4b8:	b29a      	uxth	r2, r3
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800e4cc:	4b41      	ldr	r3, [pc, #260]	; (800e5d4 <tcp_process+0x2c0>)
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	1e5a      	subs	r2, r3, #1
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	2204      	movs	r2, #4
 800e4da:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	3304      	adds	r3, #4
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	f004 fb1f 	bl	8012b28 <ip4_route>
 800e4ea:	4601      	mov	r1, r0
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	3304      	adds	r3, #4
 800e4f0:	461a      	mov	r2, r3
 800e4f2:	4620      	mov	r0, r4
 800e4f4:	f7ff f88e 	bl	800d614 <tcp_eff_send_mss_netif>
 800e4f8:	4603      	mov	r3, r0
 800e4fa:	461a      	mov	r2, r3
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e504:	009a      	lsls	r2, r3, #2
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e50a:	005b      	lsls	r3, r3, #1
 800e50c:	f241 111c 	movw	r1, #4380	; 0x111c
 800e510:	428b      	cmp	r3, r1
 800e512:	bf38      	it	cc
 800e514:	460b      	movcc	r3, r1
 800e516:	429a      	cmp	r2, r3
 800e518:	d204      	bcs.n	800e524 <tcp_process+0x210>
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e51e:	009b      	lsls	r3, r3, #2
 800e520:	b29b      	uxth	r3, r3
 800e522:	e00d      	b.n	800e540 <tcp_process+0x22c>
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e528:	005b      	lsls	r3, r3, #1
 800e52a:	f241 121c 	movw	r2, #4380	; 0x111c
 800e52e:	4293      	cmp	r3, r2
 800e530:	d904      	bls.n	800e53c <tcp_process+0x228>
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e536:	005b      	lsls	r3, r3, #1
 800e538:	b29b      	uxth	r3, r3
 800e53a:	e001      	b.n	800e540 <tcp_process+0x22c>
 800e53c:	f241 131c 	movw	r3, #4380	; 0x111c
 800e540:	687a      	ldr	r2, [r7, #4]
 800e542:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d106      	bne.n	800e55e <tcp_process+0x24a>
 800e550:	4b1b      	ldr	r3, [pc, #108]	; (800e5c0 <tcp_process+0x2ac>)
 800e552:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800e556:	4924      	ldr	r1, [pc, #144]	; (800e5e8 <tcp_process+0x2d4>)
 800e558:	481b      	ldr	r0, [pc, #108]	; (800e5c8 <tcp_process+0x2b4>)
 800e55a:	f009 fe6b 	bl	8018234 <iprintf>
        --pcb->snd_queuelen;
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e564:	3b01      	subs	r3, #1
 800e566:	b29a      	uxth	r2, r3
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e572:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800e574:	69fb      	ldr	r3, [r7, #28]
 800e576:	2b00      	cmp	r3, #0
 800e578:	d111      	bne.n	800e59e <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e57e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800e580:	69fb      	ldr	r3, [r7, #28]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d106      	bne.n	800e594 <tcp_process+0x280>
 800e586:	4b0e      	ldr	r3, [pc, #56]	; (800e5c0 <tcp_process+0x2ac>)
 800e588:	f44f 725d 	mov.w	r2, #884	; 0x374
 800e58c:	4917      	ldr	r1, [pc, #92]	; (800e5ec <tcp_process+0x2d8>)
 800e58e:	480e      	ldr	r0, [pc, #56]	; (800e5c8 <tcp_process+0x2b4>)
 800e590:	f009 fe50 	bl	8018234 <iprintf>
          pcb->unsent = rseg->next;
 800e594:	69fb      	ldr	r3, [r7, #28]
 800e596:	681a      	ldr	r2, [r3, #0]
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	66da      	str	r2, [r3, #108]	; 0x6c
 800e59c:	e003      	b.n	800e5a6 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800e59e:	69fb      	ldr	r3, [r7, #28]
 800e5a0:	681a      	ldr	r2, [r3, #0]
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800e5a6:	69f8      	ldr	r0, [r7, #28]
 800e5a8:	f7fe fd3d 	bl	800d026 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d11d      	bne.n	800e5f0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e5ba:	861a      	strh	r2, [r3, #48]	; 0x30
 800e5bc:	e01f      	b.n	800e5fe <tcp_process+0x2ea>
 800e5be:	bf00      	nop
 800e5c0:	08019dd8 	.word	0x08019dd8
 800e5c4:	0801a010 	.word	0x0801a010
 800e5c8:	08019e24 	.word	0x08019e24
 800e5cc:	20004bf4 	.word	0x20004bf4
 800e5d0:	20004bec 	.word	0x20004bec
 800e5d4:	20004be8 	.word	0x20004be8
 800e5d8:	0801a02c 	.word	0x0801a02c
 800e5dc:	20004bf5 	.word	0x20004bf5
 800e5e0:	2000dc48 	.word	0x2000dc48
 800e5e4:	20004bd8 	.word	0x20004bd8
 800e5e8:	0801a04c 	.word	0x0801a04c
 800e5ec:	0801a064 	.word	0x0801a064
        } else {
          pcb->rtime = 0;
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	2200      	movs	r2, #0
 800e5fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e604:	2b00      	cmp	r3, #0
 800e606:	d00a      	beq.n	800e61e <tcp_process+0x30a>
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e60e:	687a      	ldr	r2, [r7, #4]
 800e610:	6910      	ldr	r0, [r2, #16]
 800e612:	2200      	movs	r2, #0
 800e614:	6879      	ldr	r1, [r7, #4]
 800e616:	4798      	blx	r3
 800e618:	4603      	mov	r3, r0
 800e61a:	76bb      	strb	r3, [r7, #26]
 800e61c:	e001      	b.n	800e622 <tcp_process+0x30e>
 800e61e:	2300      	movs	r3, #0
 800e620:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800e622:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e626:	f113 0f0d 	cmn.w	r3, #13
 800e62a:	d102      	bne.n	800e632 <tcp_process+0x31e>
          return ERR_ABRT;
 800e62c:	f06f 030c 	mvn.w	r3, #12
 800e630:	e250      	b.n	800ead4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	8b5b      	ldrh	r3, [r3, #26]
 800e636:	f043 0302 	orr.w	r3, r3, #2
 800e63a:	b29a      	uxth	r2, r3
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800e640:	e23a      	b.n	800eab8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800e642:	4b9d      	ldr	r3, [pc, #628]	; (800e8b8 <tcp_process+0x5a4>)
 800e644:	781b      	ldrb	r3, [r3, #0]
 800e646:	f003 0310 	and.w	r3, r3, #16
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	f000 8234 	beq.w	800eab8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e650:	4b9a      	ldr	r3, [pc, #616]	; (800e8bc <tcp_process+0x5a8>)
 800e652:	6819      	ldr	r1, [r3, #0]
 800e654:	4b9a      	ldr	r3, [pc, #616]	; (800e8c0 <tcp_process+0x5ac>)
 800e656:	881b      	ldrh	r3, [r3, #0]
 800e658:	461a      	mov	r2, r3
 800e65a:	4b9a      	ldr	r3, [pc, #616]	; (800e8c4 <tcp_process+0x5b0>)
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e660:	4b99      	ldr	r3, [pc, #612]	; (800e8c8 <tcp_process+0x5b4>)
 800e662:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e664:	885b      	ldrh	r3, [r3, #2]
 800e666:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e668:	4a97      	ldr	r2, [pc, #604]	; (800e8c8 <tcp_process+0x5b4>)
 800e66a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e66c:	8812      	ldrh	r2, [r2, #0]
 800e66e:	b292      	uxth	r2, r2
 800e670:	9202      	str	r2, [sp, #8]
 800e672:	9301      	str	r3, [sp, #4]
 800e674:	4b95      	ldr	r3, [pc, #596]	; (800e8cc <tcp_process+0x5b8>)
 800e676:	9300      	str	r3, [sp, #0]
 800e678:	4b95      	ldr	r3, [pc, #596]	; (800e8d0 <tcp_process+0x5bc>)
 800e67a:	4602      	mov	r2, r0
 800e67c:	6878      	ldr	r0, [r7, #4]
 800e67e:	f002 fc83 	bl	8010f88 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e688:	2b05      	cmp	r3, #5
 800e68a:	f200 8215 	bhi.w	800eab8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	2200      	movs	r2, #0
 800e692:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800e694:	6878      	ldr	r0, [r7, #4]
 800e696:	f002 fa4d 	bl	8010b34 <tcp_rexmit_rto>
      break;
 800e69a:	e20d      	b.n	800eab8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800e69c:	4b86      	ldr	r3, [pc, #536]	; (800e8b8 <tcp_process+0x5a4>)
 800e69e:	781b      	ldrb	r3, [r3, #0]
 800e6a0:	f003 0310 	and.w	r3, r3, #16
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	f000 80a1 	beq.w	800e7ec <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e6aa:	4b84      	ldr	r3, [pc, #528]	; (800e8bc <tcp_process+0x5a8>)
 800e6ac:	681a      	ldr	r2, [r3, #0]
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e6b2:	1ad3      	subs	r3, r2, r3
 800e6b4:	3b01      	subs	r3, #1
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	db7e      	blt.n	800e7b8 <tcp_process+0x4a4>
 800e6ba:	4b80      	ldr	r3, [pc, #512]	; (800e8bc <tcp_process+0x5a8>)
 800e6bc:	681a      	ldr	r2, [r3, #0]
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e6c2:	1ad3      	subs	r3, r2, r3
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	dc77      	bgt.n	800e7b8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	2204      	movs	r2, #4
 800e6cc:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d102      	bne.n	800e6dc <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800e6d6:	23fa      	movs	r3, #250	; 0xfa
 800e6d8:	76bb      	strb	r3, [r7, #26]
 800e6da:	e01d      	b.n	800e718 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6e0:	699b      	ldr	r3, [r3, #24]
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d106      	bne.n	800e6f4 <tcp_process+0x3e0>
 800e6e6:	4b7b      	ldr	r3, [pc, #492]	; (800e8d4 <tcp_process+0x5c0>)
 800e6e8:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800e6ec:	497a      	ldr	r1, [pc, #488]	; (800e8d8 <tcp_process+0x5c4>)
 800e6ee:	487b      	ldr	r0, [pc, #492]	; (800e8dc <tcp_process+0x5c8>)
 800e6f0:	f009 fda0 	bl	8018234 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6f8:	699b      	ldr	r3, [r3, #24]
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d00a      	beq.n	800e714 <tcp_process+0x400>
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e702:	699b      	ldr	r3, [r3, #24]
 800e704:	687a      	ldr	r2, [r7, #4]
 800e706:	6910      	ldr	r0, [r2, #16]
 800e708:	2200      	movs	r2, #0
 800e70a:	6879      	ldr	r1, [r7, #4]
 800e70c:	4798      	blx	r3
 800e70e:	4603      	mov	r3, r0
 800e710:	76bb      	strb	r3, [r7, #26]
 800e712:	e001      	b.n	800e718 <tcp_process+0x404>
 800e714:	23f0      	movs	r3, #240	; 0xf0
 800e716:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800e718:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d00a      	beq.n	800e736 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800e720:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e724:	f113 0f0d 	cmn.w	r3, #13
 800e728:	d002      	beq.n	800e730 <tcp_process+0x41c>
              tcp_abort(pcb);
 800e72a:	6878      	ldr	r0, [r7, #4]
 800e72c:	f7fd ff90 	bl	800c650 <tcp_abort>
            }
            return ERR_ABRT;
 800e730:	f06f 030c 	mvn.w	r3, #12
 800e734:	e1ce      	b.n	800ead4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800e736:	6878      	ldr	r0, [r7, #4]
 800e738:	f000 fae0 	bl	800ecfc <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800e73c:	4b68      	ldr	r3, [pc, #416]	; (800e8e0 <tcp_process+0x5cc>)
 800e73e:	881b      	ldrh	r3, [r3, #0]
 800e740:	2b00      	cmp	r3, #0
 800e742:	d005      	beq.n	800e750 <tcp_process+0x43c>
            recv_acked--;
 800e744:	4b66      	ldr	r3, [pc, #408]	; (800e8e0 <tcp_process+0x5cc>)
 800e746:	881b      	ldrh	r3, [r3, #0]
 800e748:	3b01      	subs	r3, #1
 800e74a:	b29a      	uxth	r2, r3
 800e74c:	4b64      	ldr	r3, [pc, #400]	; (800e8e0 <tcp_process+0x5cc>)
 800e74e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e754:	009a      	lsls	r2, r3, #2
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e75a:	005b      	lsls	r3, r3, #1
 800e75c:	f241 111c 	movw	r1, #4380	; 0x111c
 800e760:	428b      	cmp	r3, r1
 800e762:	bf38      	it	cc
 800e764:	460b      	movcc	r3, r1
 800e766:	429a      	cmp	r2, r3
 800e768:	d204      	bcs.n	800e774 <tcp_process+0x460>
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e76e:	009b      	lsls	r3, r3, #2
 800e770:	b29b      	uxth	r3, r3
 800e772:	e00d      	b.n	800e790 <tcp_process+0x47c>
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e778:	005b      	lsls	r3, r3, #1
 800e77a:	f241 121c 	movw	r2, #4380	; 0x111c
 800e77e:	4293      	cmp	r3, r2
 800e780:	d904      	bls.n	800e78c <tcp_process+0x478>
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e786:	005b      	lsls	r3, r3, #1
 800e788:	b29b      	uxth	r3, r3
 800e78a:	e001      	b.n	800e790 <tcp_process+0x47c>
 800e78c:	f241 131c 	movw	r3, #4380	; 0x111c
 800e790:	687a      	ldr	r2, [r7, #4]
 800e792:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800e796:	4b53      	ldr	r3, [pc, #332]	; (800e8e4 <tcp_process+0x5d0>)
 800e798:	781b      	ldrb	r3, [r3, #0]
 800e79a:	f003 0320 	and.w	r3, r3, #32
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d037      	beq.n	800e812 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	8b5b      	ldrh	r3, [r3, #26]
 800e7a6:	f043 0302 	orr.w	r3, r3, #2
 800e7aa:	b29a      	uxth	r2, r3
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	2207      	movs	r2, #7
 800e7b4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800e7b6:	e02c      	b.n	800e812 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e7b8:	4b40      	ldr	r3, [pc, #256]	; (800e8bc <tcp_process+0x5a8>)
 800e7ba:	6819      	ldr	r1, [r3, #0]
 800e7bc:	4b40      	ldr	r3, [pc, #256]	; (800e8c0 <tcp_process+0x5ac>)
 800e7be:	881b      	ldrh	r3, [r3, #0]
 800e7c0:	461a      	mov	r2, r3
 800e7c2:	4b40      	ldr	r3, [pc, #256]	; (800e8c4 <tcp_process+0x5b0>)
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e7c8:	4b3f      	ldr	r3, [pc, #252]	; (800e8c8 <tcp_process+0x5b4>)
 800e7ca:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e7cc:	885b      	ldrh	r3, [r3, #2]
 800e7ce:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e7d0:	4a3d      	ldr	r2, [pc, #244]	; (800e8c8 <tcp_process+0x5b4>)
 800e7d2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e7d4:	8812      	ldrh	r2, [r2, #0]
 800e7d6:	b292      	uxth	r2, r2
 800e7d8:	9202      	str	r2, [sp, #8]
 800e7da:	9301      	str	r3, [sp, #4]
 800e7dc:	4b3b      	ldr	r3, [pc, #236]	; (800e8cc <tcp_process+0x5b8>)
 800e7de:	9300      	str	r3, [sp, #0]
 800e7e0:	4b3b      	ldr	r3, [pc, #236]	; (800e8d0 <tcp_process+0x5bc>)
 800e7e2:	4602      	mov	r2, r0
 800e7e4:	6878      	ldr	r0, [r7, #4]
 800e7e6:	f002 fbcf 	bl	8010f88 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800e7ea:	e167      	b.n	800eabc <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800e7ec:	4b32      	ldr	r3, [pc, #200]	; (800e8b8 <tcp_process+0x5a4>)
 800e7ee:	781b      	ldrb	r3, [r3, #0]
 800e7f0:	f003 0302 	and.w	r3, r3, #2
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	f000 8161 	beq.w	800eabc <tcp_process+0x7a8>
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7fe:	1e5a      	subs	r2, r3, #1
 800e800:	4b30      	ldr	r3, [pc, #192]	; (800e8c4 <tcp_process+0x5b0>)
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	429a      	cmp	r2, r3
 800e806:	f040 8159 	bne.w	800eabc <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800e80a:	6878      	ldr	r0, [r7, #4]
 800e80c:	f002 f9b4 	bl	8010b78 <tcp_rexmit>
      break;
 800e810:	e154      	b.n	800eabc <tcp_process+0x7a8>
 800e812:	e153      	b.n	800eabc <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800e814:	6878      	ldr	r0, [r7, #4]
 800e816:	f000 fa71 	bl	800ecfc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800e81a:	4b32      	ldr	r3, [pc, #200]	; (800e8e4 <tcp_process+0x5d0>)
 800e81c:	781b      	ldrb	r3, [r3, #0]
 800e81e:	f003 0320 	and.w	r3, r3, #32
 800e822:	2b00      	cmp	r3, #0
 800e824:	f000 814c 	beq.w	800eac0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	8b5b      	ldrh	r3, [r3, #26]
 800e82c:	f043 0302 	orr.w	r3, r3, #2
 800e830:	b29a      	uxth	r2, r3
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	2207      	movs	r2, #7
 800e83a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e83c:	e140      	b.n	800eac0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800e83e:	6878      	ldr	r0, [r7, #4]
 800e840:	f000 fa5c 	bl	800ecfc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e844:	4b27      	ldr	r3, [pc, #156]	; (800e8e4 <tcp_process+0x5d0>)
 800e846:	781b      	ldrb	r3, [r3, #0]
 800e848:	f003 0320 	and.w	r3, r3, #32
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d071      	beq.n	800e934 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e850:	4b19      	ldr	r3, [pc, #100]	; (800e8b8 <tcp_process+0x5a4>)
 800e852:	781b      	ldrb	r3, [r3, #0]
 800e854:	f003 0310 	and.w	r3, r3, #16
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d060      	beq.n	800e91e <tcp_process+0x60a>
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e860:	4b16      	ldr	r3, [pc, #88]	; (800e8bc <tcp_process+0x5a8>)
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	429a      	cmp	r2, r3
 800e866:	d15a      	bne.n	800e91e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d156      	bne.n	800e91e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	8b5b      	ldrh	r3, [r3, #26]
 800e874:	f043 0302 	orr.w	r3, r3, #2
 800e878:	b29a      	uxth	r2, r3
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800e87e:	6878      	ldr	r0, [r7, #4]
 800e880:	f7fe fdbe 	bl	800d400 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800e884:	4b18      	ldr	r3, [pc, #96]	; (800e8e8 <tcp_process+0x5d4>)
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	687a      	ldr	r2, [r7, #4]
 800e88a:	429a      	cmp	r2, r3
 800e88c:	d105      	bne.n	800e89a <tcp_process+0x586>
 800e88e:	4b16      	ldr	r3, [pc, #88]	; (800e8e8 <tcp_process+0x5d4>)
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	68db      	ldr	r3, [r3, #12]
 800e894:	4a14      	ldr	r2, [pc, #80]	; (800e8e8 <tcp_process+0x5d4>)
 800e896:	6013      	str	r3, [r2, #0]
 800e898:	e02e      	b.n	800e8f8 <tcp_process+0x5e4>
 800e89a:	4b13      	ldr	r3, [pc, #76]	; (800e8e8 <tcp_process+0x5d4>)
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	617b      	str	r3, [r7, #20]
 800e8a0:	e027      	b.n	800e8f2 <tcp_process+0x5de>
 800e8a2:	697b      	ldr	r3, [r7, #20]
 800e8a4:	68db      	ldr	r3, [r3, #12]
 800e8a6:	687a      	ldr	r2, [r7, #4]
 800e8a8:	429a      	cmp	r2, r3
 800e8aa:	d11f      	bne.n	800e8ec <tcp_process+0x5d8>
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	68da      	ldr	r2, [r3, #12]
 800e8b0:	697b      	ldr	r3, [r7, #20]
 800e8b2:	60da      	str	r2, [r3, #12]
 800e8b4:	e020      	b.n	800e8f8 <tcp_process+0x5e4>
 800e8b6:	bf00      	nop
 800e8b8:	20004bf4 	.word	0x20004bf4
 800e8bc:	20004bec 	.word	0x20004bec
 800e8c0:	20004bf2 	.word	0x20004bf2
 800e8c4:	20004be8 	.word	0x20004be8
 800e8c8:	20004bd8 	.word	0x20004bd8
 800e8cc:	20008370 	.word	0x20008370
 800e8d0:	20008374 	.word	0x20008374
 800e8d4:	08019dd8 	.word	0x08019dd8
 800e8d8:	0801a078 	.word	0x0801a078
 800e8dc:	08019e24 	.word	0x08019e24
 800e8e0:	20004bf0 	.word	0x20004bf0
 800e8e4:	20004bf5 	.word	0x20004bf5
 800e8e8:	2000dc44 	.word	0x2000dc44
 800e8ec:	697b      	ldr	r3, [r7, #20]
 800e8ee:	68db      	ldr	r3, [r3, #12]
 800e8f0:	617b      	str	r3, [r7, #20]
 800e8f2:	697b      	ldr	r3, [r7, #20]
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d1d4      	bne.n	800e8a2 <tcp_process+0x58e>
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	2200      	movs	r2, #0
 800e8fc:	60da      	str	r2, [r3, #12]
 800e8fe:	4b77      	ldr	r3, [pc, #476]	; (800eadc <tcp_process+0x7c8>)
 800e900:	2201      	movs	r2, #1
 800e902:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	220a      	movs	r2, #10
 800e908:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800e90a:	4b75      	ldr	r3, [pc, #468]	; (800eae0 <tcp_process+0x7cc>)
 800e90c:	681a      	ldr	r2, [r3, #0]
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	60da      	str	r2, [r3, #12]
 800e912:	4a73      	ldr	r2, [pc, #460]	; (800eae0 <tcp_process+0x7cc>)
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	6013      	str	r3, [r2, #0]
 800e918:	f002 fcf8 	bl	801130c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800e91c:	e0d2      	b.n	800eac4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	8b5b      	ldrh	r3, [r3, #26]
 800e922:	f043 0302 	orr.w	r3, r3, #2
 800e926:	b29a      	uxth	r2, r3
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	2208      	movs	r2, #8
 800e930:	751a      	strb	r2, [r3, #20]
      break;
 800e932:	e0c7      	b.n	800eac4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e934:	4b6b      	ldr	r3, [pc, #428]	; (800eae4 <tcp_process+0x7d0>)
 800e936:	781b      	ldrb	r3, [r3, #0]
 800e938:	f003 0310 	and.w	r3, r3, #16
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	f000 80c1 	beq.w	800eac4 <tcp_process+0x7b0>
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e946:	4b68      	ldr	r3, [pc, #416]	; (800eae8 <tcp_process+0x7d4>)
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	429a      	cmp	r2, r3
 800e94c:	f040 80ba 	bne.w	800eac4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e954:	2b00      	cmp	r3, #0
 800e956:	f040 80b5 	bne.w	800eac4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	2206      	movs	r2, #6
 800e95e:	751a      	strb	r2, [r3, #20]
      break;
 800e960:	e0b0      	b.n	800eac4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800e962:	6878      	ldr	r0, [r7, #4]
 800e964:	f000 f9ca 	bl	800ecfc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e968:	4b60      	ldr	r3, [pc, #384]	; (800eaec <tcp_process+0x7d8>)
 800e96a:	781b      	ldrb	r3, [r3, #0]
 800e96c:	f003 0320 	and.w	r3, r3, #32
 800e970:	2b00      	cmp	r3, #0
 800e972:	f000 80a9 	beq.w	800eac8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	8b5b      	ldrh	r3, [r3, #26]
 800e97a:	f043 0302 	orr.w	r3, r3, #2
 800e97e:	b29a      	uxth	r2, r3
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800e984:	6878      	ldr	r0, [r7, #4]
 800e986:	f7fe fd3b 	bl	800d400 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e98a:	4b59      	ldr	r3, [pc, #356]	; (800eaf0 <tcp_process+0x7dc>)
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	687a      	ldr	r2, [r7, #4]
 800e990:	429a      	cmp	r2, r3
 800e992:	d105      	bne.n	800e9a0 <tcp_process+0x68c>
 800e994:	4b56      	ldr	r3, [pc, #344]	; (800eaf0 <tcp_process+0x7dc>)
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	68db      	ldr	r3, [r3, #12]
 800e99a:	4a55      	ldr	r2, [pc, #340]	; (800eaf0 <tcp_process+0x7dc>)
 800e99c:	6013      	str	r3, [r2, #0]
 800e99e:	e013      	b.n	800e9c8 <tcp_process+0x6b4>
 800e9a0:	4b53      	ldr	r3, [pc, #332]	; (800eaf0 <tcp_process+0x7dc>)
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	613b      	str	r3, [r7, #16]
 800e9a6:	e00c      	b.n	800e9c2 <tcp_process+0x6ae>
 800e9a8:	693b      	ldr	r3, [r7, #16]
 800e9aa:	68db      	ldr	r3, [r3, #12]
 800e9ac:	687a      	ldr	r2, [r7, #4]
 800e9ae:	429a      	cmp	r2, r3
 800e9b0:	d104      	bne.n	800e9bc <tcp_process+0x6a8>
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	68da      	ldr	r2, [r3, #12]
 800e9b6:	693b      	ldr	r3, [r7, #16]
 800e9b8:	60da      	str	r2, [r3, #12]
 800e9ba:	e005      	b.n	800e9c8 <tcp_process+0x6b4>
 800e9bc:	693b      	ldr	r3, [r7, #16]
 800e9be:	68db      	ldr	r3, [r3, #12]
 800e9c0:	613b      	str	r3, [r7, #16]
 800e9c2:	693b      	ldr	r3, [r7, #16]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d1ef      	bne.n	800e9a8 <tcp_process+0x694>
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	2200      	movs	r2, #0
 800e9cc:	60da      	str	r2, [r3, #12]
 800e9ce:	4b43      	ldr	r3, [pc, #268]	; (800eadc <tcp_process+0x7c8>)
 800e9d0:	2201      	movs	r2, #1
 800e9d2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	220a      	movs	r2, #10
 800e9d8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e9da:	4b41      	ldr	r3, [pc, #260]	; (800eae0 <tcp_process+0x7cc>)
 800e9dc:	681a      	ldr	r2, [r3, #0]
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	60da      	str	r2, [r3, #12]
 800e9e2:	4a3f      	ldr	r2, [pc, #252]	; (800eae0 <tcp_process+0x7cc>)
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	6013      	str	r3, [r2, #0]
 800e9e8:	f002 fc90 	bl	801130c <tcp_timer_needed>
      }
      break;
 800e9ec:	e06c      	b.n	800eac8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800e9ee:	6878      	ldr	r0, [r7, #4]
 800e9f0:	f000 f984 	bl	800ecfc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e9f4:	4b3b      	ldr	r3, [pc, #236]	; (800eae4 <tcp_process+0x7d0>)
 800e9f6:	781b      	ldrb	r3, [r3, #0]
 800e9f8:	f003 0310 	and.w	r3, r3, #16
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d065      	beq.n	800eacc <tcp_process+0x7b8>
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ea04:	4b38      	ldr	r3, [pc, #224]	; (800eae8 <tcp_process+0x7d4>)
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	429a      	cmp	r2, r3
 800ea0a:	d15f      	bne.n	800eacc <tcp_process+0x7b8>
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d15b      	bne.n	800eacc <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800ea14:	6878      	ldr	r0, [r7, #4]
 800ea16:	f7fe fcf3 	bl	800d400 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ea1a:	4b35      	ldr	r3, [pc, #212]	; (800eaf0 <tcp_process+0x7dc>)
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	687a      	ldr	r2, [r7, #4]
 800ea20:	429a      	cmp	r2, r3
 800ea22:	d105      	bne.n	800ea30 <tcp_process+0x71c>
 800ea24:	4b32      	ldr	r3, [pc, #200]	; (800eaf0 <tcp_process+0x7dc>)
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	68db      	ldr	r3, [r3, #12]
 800ea2a:	4a31      	ldr	r2, [pc, #196]	; (800eaf0 <tcp_process+0x7dc>)
 800ea2c:	6013      	str	r3, [r2, #0]
 800ea2e:	e013      	b.n	800ea58 <tcp_process+0x744>
 800ea30:	4b2f      	ldr	r3, [pc, #188]	; (800eaf0 <tcp_process+0x7dc>)
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	60fb      	str	r3, [r7, #12]
 800ea36:	e00c      	b.n	800ea52 <tcp_process+0x73e>
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	68db      	ldr	r3, [r3, #12]
 800ea3c:	687a      	ldr	r2, [r7, #4]
 800ea3e:	429a      	cmp	r2, r3
 800ea40:	d104      	bne.n	800ea4c <tcp_process+0x738>
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	68da      	ldr	r2, [r3, #12]
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	60da      	str	r2, [r3, #12]
 800ea4a:	e005      	b.n	800ea58 <tcp_process+0x744>
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	68db      	ldr	r3, [r3, #12]
 800ea50:	60fb      	str	r3, [r7, #12]
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d1ef      	bne.n	800ea38 <tcp_process+0x724>
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	2200      	movs	r2, #0
 800ea5c:	60da      	str	r2, [r3, #12]
 800ea5e:	4b1f      	ldr	r3, [pc, #124]	; (800eadc <tcp_process+0x7c8>)
 800ea60:	2201      	movs	r2, #1
 800ea62:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	220a      	movs	r2, #10
 800ea68:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ea6a:	4b1d      	ldr	r3, [pc, #116]	; (800eae0 <tcp_process+0x7cc>)
 800ea6c:	681a      	ldr	r2, [r3, #0]
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	60da      	str	r2, [r3, #12]
 800ea72:	4a1b      	ldr	r2, [pc, #108]	; (800eae0 <tcp_process+0x7cc>)
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	6013      	str	r3, [r2, #0]
 800ea78:	f002 fc48 	bl	801130c <tcp_timer_needed>
      }
      break;
 800ea7c:	e026      	b.n	800eacc <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800ea7e:	6878      	ldr	r0, [r7, #4]
 800ea80:	f000 f93c 	bl	800ecfc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ea84:	4b17      	ldr	r3, [pc, #92]	; (800eae4 <tcp_process+0x7d0>)
 800ea86:	781b      	ldrb	r3, [r3, #0]
 800ea88:	f003 0310 	and.w	r3, r3, #16
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d01f      	beq.n	800ead0 <tcp_process+0x7bc>
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ea94:	4b14      	ldr	r3, [pc, #80]	; (800eae8 <tcp_process+0x7d4>)
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	429a      	cmp	r2, r3
 800ea9a:	d119      	bne.n	800ead0 <tcp_process+0x7bc>
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d115      	bne.n	800ead0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800eaa4:	4b11      	ldr	r3, [pc, #68]	; (800eaec <tcp_process+0x7d8>)
 800eaa6:	781b      	ldrb	r3, [r3, #0]
 800eaa8:	f043 0310 	orr.w	r3, r3, #16
 800eaac:	b2da      	uxtb	r2, r3
 800eaae:	4b0f      	ldr	r3, [pc, #60]	; (800eaec <tcp_process+0x7d8>)
 800eab0:	701a      	strb	r2, [r3, #0]
      }
      break;
 800eab2:	e00d      	b.n	800ead0 <tcp_process+0x7bc>
    default:
      break;
 800eab4:	bf00      	nop
 800eab6:	e00c      	b.n	800ead2 <tcp_process+0x7be>
      break;
 800eab8:	bf00      	nop
 800eaba:	e00a      	b.n	800ead2 <tcp_process+0x7be>
      break;
 800eabc:	bf00      	nop
 800eabe:	e008      	b.n	800ead2 <tcp_process+0x7be>
      break;
 800eac0:	bf00      	nop
 800eac2:	e006      	b.n	800ead2 <tcp_process+0x7be>
      break;
 800eac4:	bf00      	nop
 800eac6:	e004      	b.n	800ead2 <tcp_process+0x7be>
      break;
 800eac8:	bf00      	nop
 800eaca:	e002      	b.n	800ead2 <tcp_process+0x7be>
      break;
 800eacc:	bf00      	nop
 800eace:	e000      	b.n	800ead2 <tcp_process+0x7be>
      break;
 800ead0:	bf00      	nop
  }
  return ERR_OK;
 800ead2:	2300      	movs	r3, #0
}
 800ead4:	4618      	mov	r0, r3
 800ead6:	3724      	adds	r7, #36	; 0x24
 800ead8:	46bd      	mov	sp, r7
 800eada:	bd90      	pop	{r4, r7, pc}
 800eadc:	2000dc40 	.word	0x2000dc40
 800eae0:	2000dc54 	.word	0x2000dc54
 800eae4:	20004bf4 	.word	0x20004bf4
 800eae8:	20004bec 	.word	0x20004bec
 800eaec:	20004bf5 	.word	0x20004bf5
 800eaf0:	2000dc44 	.word	0x2000dc44

0800eaf4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800eaf4:	b590      	push	{r4, r7, lr}
 800eaf6:	b085      	sub	sp, #20
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	6078      	str	r0, [r7, #4]
 800eafc:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d106      	bne.n	800eb12 <tcp_oos_insert_segment+0x1e>
 800eb04:	4b3b      	ldr	r3, [pc, #236]	; (800ebf4 <tcp_oos_insert_segment+0x100>)
 800eb06:	f240 421f 	movw	r2, #1055	; 0x41f
 800eb0a:	493b      	ldr	r1, [pc, #236]	; (800ebf8 <tcp_oos_insert_segment+0x104>)
 800eb0c:	483b      	ldr	r0, [pc, #236]	; (800ebfc <tcp_oos_insert_segment+0x108>)
 800eb0e:	f009 fb91 	bl	8018234 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	68db      	ldr	r3, [r3, #12]
 800eb16:	899b      	ldrh	r3, [r3, #12]
 800eb18:	b29b      	uxth	r3, r3
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	f7fb fc58 	bl	800a3d0 <lwip_htons>
 800eb20:	4603      	mov	r3, r0
 800eb22:	b2db      	uxtb	r3, r3
 800eb24:	f003 0301 	and.w	r3, r3, #1
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d028      	beq.n	800eb7e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800eb2c:	6838      	ldr	r0, [r7, #0]
 800eb2e:	f7fe fa65 	bl	800cffc <tcp_segs_free>
    next = NULL;
 800eb32:	2300      	movs	r3, #0
 800eb34:	603b      	str	r3, [r7, #0]
 800eb36:	e056      	b.n	800ebe6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800eb38:	683b      	ldr	r3, [r7, #0]
 800eb3a:	68db      	ldr	r3, [r3, #12]
 800eb3c:	899b      	ldrh	r3, [r3, #12]
 800eb3e:	b29b      	uxth	r3, r3
 800eb40:	4618      	mov	r0, r3
 800eb42:	f7fb fc45 	bl	800a3d0 <lwip_htons>
 800eb46:	4603      	mov	r3, r0
 800eb48:	b2db      	uxtb	r3, r3
 800eb4a:	f003 0301 	and.w	r3, r3, #1
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d00d      	beq.n	800eb6e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	68db      	ldr	r3, [r3, #12]
 800eb56:	899b      	ldrh	r3, [r3, #12]
 800eb58:	b29c      	uxth	r4, r3
 800eb5a:	2001      	movs	r0, #1
 800eb5c:	f7fb fc38 	bl	800a3d0 <lwip_htons>
 800eb60:	4603      	mov	r3, r0
 800eb62:	461a      	mov	r2, r3
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	68db      	ldr	r3, [r3, #12]
 800eb68:	4322      	orrs	r2, r4
 800eb6a:	b292      	uxth	r2, r2
 800eb6c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800eb6e:	683b      	ldr	r3, [r7, #0]
 800eb70:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800eb72:	683b      	ldr	r3, [r7, #0]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800eb78:	68f8      	ldr	r0, [r7, #12]
 800eb7a:	f7fe fa54 	bl	800d026 <tcp_seg_free>
    while (next &&
 800eb7e:	683b      	ldr	r3, [r7, #0]
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d00e      	beq.n	800eba2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	891b      	ldrh	r3, [r3, #8]
 800eb88:	461a      	mov	r2, r3
 800eb8a:	4b1d      	ldr	r3, [pc, #116]	; (800ec00 <tcp_oos_insert_segment+0x10c>)
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	441a      	add	r2, r3
 800eb90:	683b      	ldr	r3, [r7, #0]
 800eb92:	68db      	ldr	r3, [r3, #12]
 800eb94:	685b      	ldr	r3, [r3, #4]
 800eb96:	6839      	ldr	r1, [r7, #0]
 800eb98:	8909      	ldrh	r1, [r1, #8]
 800eb9a:	440b      	add	r3, r1
 800eb9c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	daca      	bge.n	800eb38 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800eba2:	683b      	ldr	r3, [r7, #0]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d01e      	beq.n	800ebe6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	891b      	ldrh	r3, [r3, #8]
 800ebac:	461a      	mov	r2, r3
 800ebae:	4b14      	ldr	r3, [pc, #80]	; (800ec00 <tcp_oos_insert_segment+0x10c>)
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	441a      	add	r2, r3
 800ebb4:	683b      	ldr	r3, [r7, #0]
 800ebb6:	68db      	ldr	r3, [r3, #12]
 800ebb8:	685b      	ldr	r3, [r3, #4]
 800ebba:	1ad3      	subs	r3, r2, r3
    if (next &&
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	dd12      	ble.n	800ebe6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800ebc0:	683b      	ldr	r3, [r7, #0]
 800ebc2:	68db      	ldr	r3, [r3, #12]
 800ebc4:	685b      	ldr	r3, [r3, #4]
 800ebc6:	b29a      	uxth	r2, r3
 800ebc8:	4b0d      	ldr	r3, [pc, #52]	; (800ec00 <tcp_oos_insert_segment+0x10c>)
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	b29b      	uxth	r3, r3
 800ebce:	1ad3      	subs	r3, r2, r3
 800ebd0:	b29a      	uxth	r2, r3
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	685a      	ldr	r2, [r3, #4]
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	891b      	ldrh	r3, [r3, #8]
 800ebde:	4619      	mov	r1, r3
 800ebe0:	4610      	mov	r0, r2
 800ebe2:	f7fc fe1b 	bl	800b81c <pbuf_realloc>
    }
  }
  cseg->next = next;
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	683a      	ldr	r2, [r7, #0]
 800ebea:	601a      	str	r2, [r3, #0]
}
 800ebec:	bf00      	nop
 800ebee:	3714      	adds	r7, #20
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	bd90      	pop	{r4, r7, pc}
 800ebf4:	08019dd8 	.word	0x08019dd8
 800ebf8:	0801a098 	.word	0x0801a098
 800ebfc:	08019e24 	.word	0x08019e24
 800ec00:	20004be8 	.word	0x20004be8

0800ec04 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800ec04:	b5b0      	push	{r4, r5, r7, lr}
 800ec06:	b086      	sub	sp, #24
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	60f8      	str	r0, [r7, #12]
 800ec0c:	60b9      	str	r1, [r7, #8]
 800ec0e:	607a      	str	r2, [r7, #4]
 800ec10:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800ec12:	e03e      	b.n	800ec92 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800ec14:	68bb      	ldr	r3, [r7, #8]
 800ec16:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800ec18:	68bb      	ldr	r3, [r7, #8]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800ec1e:	697b      	ldr	r3, [r7, #20]
 800ec20:	685b      	ldr	r3, [r3, #4]
 800ec22:	4618      	mov	r0, r3
 800ec24:	f7fd f80e 	bl	800bc44 <pbuf_clen>
 800ec28:	4603      	mov	r3, r0
 800ec2a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ec32:	8a7a      	ldrh	r2, [r7, #18]
 800ec34:	429a      	cmp	r2, r3
 800ec36:	d906      	bls.n	800ec46 <tcp_free_acked_segments+0x42>
 800ec38:	4b2a      	ldr	r3, [pc, #168]	; (800ece4 <tcp_free_acked_segments+0xe0>)
 800ec3a:	f240 4257 	movw	r2, #1111	; 0x457
 800ec3e:	492a      	ldr	r1, [pc, #168]	; (800ece8 <tcp_free_acked_segments+0xe4>)
 800ec40:	482a      	ldr	r0, [pc, #168]	; (800ecec <tcp_free_acked_segments+0xe8>)
 800ec42:	f009 faf7 	bl	8018234 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800ec4c:	8a7b      	ldrh	r3, [r7, #18]
 800ec4e:	1ad3      	subs	r3, r2, r3
 800ec50:	b29a      	uxth	r2, r3
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800ec58:	697b      	ldr	r3, [r7, #20]
 800ec5a:	891a      	ldrh	r2, [r3, #8]
 800ec5c:	4b24      	ldr	r3, [pc, #144]	; (800ecf0 <tcp_free_acked_segments+0xec>)
 800ec5e:	881b      	ldrh	r3, [r3, #0]
 800ec60:	4413      	add	r3, r2
 800ec62:	b29a      	uxth	r2, r3
 800ec64:	4b22      	ldr	r3, [pc, #136]	; (800ecf0 <tcp_free_acked_segments+0xec>)
 800ec66:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800ec68:	6978      	ldr	r0, [r7, #20]
 800ec6a:	f7fe f9dc 	bl	800d026 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d00c      	beq.n	800ec92 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800ec78:	68bb      	ldr	r3, [r7, #8]
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d109      	bne.n	800ec92 <tcp_free_acked_segments+0x8e>
 800ec7e:	683b      	ldr	r3, [r7, #0]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d106      	bne.n	800ec92 <tcp_free_acked_segments+0x8e>
 800ec84:	4b17      	ldr	r3, [pc, #92]	; (800ece4 <tcp_free_acked_segments+0xe0>)
 800ec86:	f240 4261 	movw	r2, #1121	; 0x461
 800ec8a:	491a      	ldr	r1, [pc, #104]	; (800ecf4 <tcp_free_acked_segments+0xf0>)
 800ec8c:	4817      	ldr	r0, [pc, #92]	; (800ecec <tcp_free_acked_segments+0xe8>)
 800ec8e:	f009 fad1 	bl	8018234 <iprintf>
  while (seg_list != NULL &&
 800ec92:	68bb      	ldr	r3, [r7, #8]
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d020      	beq.n	800ecda <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800ec98:	68bb      	ldr	r3, [r7, #8]
 800ec9a:	68db      	ldr	r3, [r3, #12]
 800ec9c:	685b      	ldr	r3, [r3, #4]
 800ec9e:	4618      	mov	r0, r3
 800eca0:	f7fb fbab 	bl	800a3fa <lwip_htonl>
 800eca4:	4604      	mov	r4, r0
 800eca6:	68bb      	ldr	r3, [r7, #8]
 800eca8:	891b      	ldrh	r3, [r3, #8]
 800ecaa:	461d      	mov	r5, r3
 800ecac:	68bb      	ldr	r3, [r7, #8]
 800ecae:	68db      	ldr	r3, [r3, #12]
 800ecb0:	899b      	ldrh	r3, [r3, #12]
 800ecb2:	b29b      	uxth	r3, r3
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	f7fb fb8b 	bl	800a3d0 <lwip_htons>
 800ecba:	4603      	mov	r3, r0
 800ecbc:	b2db      	uxtb	r3, r3
 800ecbe:	f003 0303 	and.w	r3, r3, #3
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d001      	beq.n	800ecca <tcp_free_acked_segments+0xc6>
 800ecc6:	2301      	movs	r3, #1
 800ecc8:	e000      	b.n	800eccc <tcp_free_acked_segments+0xc8>
 800ecca:	2300      	movs	r3, #0
 800eccc:	442b      	add	r3, r5
 800ecce:	18e2      	adds	r2, r4, r3
 800ecd0:	4b09      	ldr	r3, [pc, #36]	; (800ecf8 <tcp_free_acked_segments+0xf4>)
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	dd9c      	ble.n	800ec14 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800ecda:	68bb      	ldr	r3, [r7, #8]
}
 800ecdc:	4618      	mov	r0, r3
 800ecde:	3718      	adds	r7, #24
 800ece0:	46bd      	mov	sp, r7
 800ece2:	bdb0      	pop	{r4, r5, r7, pc}
 800ece4:	08019dd8 	.word	0x08019dd8
 800ece8:	0801a0c0 	.word	0x0801a0c0
 800ecec:	08019e24 	.word	0x08019e24
 800ecf0:	20004bf0 	.word	0x20004bf0
 800ecf4:	0801a0e8 	.word	0x0801a0e8
 800ecf8:	20004bec 	.word	0x20004bec

0800ecfc <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800ecfc:	b5b0      	push	{r4, r5, r7, lr}
 800ecfe:	b094      	sub	sp, #80	; 0x50
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800ed04:	2300      	movs	r3, #0
 800ed06:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d106      	bne.n	800ed1c <tcp_receive+0x20>
 800ed0e:	4ba6      	ldr	r3, [pc, #664]	; (800efa8 <tcp_receive+0x2ac>)
 800ed10:	f240 427b 	movw	r2, #1147	; 0x47b
 800ed14:	49a5      	ldr	r1, [pc, #660]	; (800efac <tcp_receive+0x2b0>)
 800ed16:	48a6      	ldr	r0, [pc, #664]	; (800efb0 <tcp_receive+0x2b4>)
 800ed18:	f009 fa8c 	bl	8018234 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	7d1b      	ldrb	r3, [r3, #20]
 800ed20:	2b03      	cmp	r3, #3
 800ed22:	d806      	bhi.n	800ed32 <tcp_receive+0x36>
 800ed24:	4ba0      	ldr	r3, [pc, #640]	; (800efa8 <tcp_receive+0x2ac>)
 800ed26:	f240 427c 	movw	r2, #1148	; 0x47c
 800ed2a:	49a2      	ldr	r1, [pc, #648]	; (800efb4 <tcp_receive+0x2b8>)
 800ed2c:	48a0      	ldr	r0, [pc, #640]	; (800efb0 <tcp_receive+0x2b4>)
 800ed2e:	f009 fa81 	bl	8018234 <iprintf>

  if (flags & TCP_ACK) {
 800ed32:	4ba1      	ldr	r3, [pc, #644]	; (800efb8 <tcp_receive+0x2bc>)
 800ed34:	781b      	ldrb	r3, [r3, #0]
 800ed36:	f003 0310 	and.w	r3, r3, #16
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	f000 8263 	beq.w	800f206 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ed46:	461a      	mov	r2, r3
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ed4c:	4413      	add	r3, r2
 800ed4e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ed54:	4b99      	ldr	r3, [pc, #612]	; (800efbc <tcp_receive+0x2c0>)
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	1ad3      	subs	r3, r2, r3
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	db1b      	blt.n	800ed96 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ed62:	4b96      	ldr	r3, [pc, #600]	; (800efbc <tcp_receive+0x2c0>)
 800ed64:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ed66:	429a      	cmp	r2, r3
 800ed68:	d106      	bne.n	800ed78 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ed6e:	4b94      	ldr	r3, [pc, #592]	; (800efc0 <tcp_receive+0x2c4>)
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	1ad3      	subs	r3, r2, r3
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	db0e      	blt.n	800ed96 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ed7c:	4b90      	ldr	r3, [pc, #576]	; (800efc0 <tcp_receive+0x2c4>)
 800ed7e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ed80:	429a      	cmp	r2, r3
 800ed82:	d125      	bne.n	800edd0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ed84:	4b8f      	ldr	r3, [pc, #572]	; (800efc4 <tcp_receive+0x2c8>)
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	89db      	ldrh	r3, [r3, #14]
 800ed8a:	b29a      	uxth	r2, r3
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ed92:	429a      	cmp	r2, r3
 800ed94:	d91c      	bls.n	800edd0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800ed96:	4b8b      	ldr	r3, [pc, #556]	; (800efc4 <tcp_receive+0x2c8>)
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	89db      	ldrh	r3, [r3, #14]
 800ed9c:	b29a      	uxth	r2, r3
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800edb0:	429a      	cmp	r2, r3
 800edb2:	d205      	bcs.n	800edc0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800edc0:	4b7e      	ldr	r3, [pc, #504]	; (800efbc <tcp_receive+0x2c0>)
 800edc2:	681a      	ldr	r2, [r3, #0]
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800edc8:	4b7d      	ldr	r3, [pc, #500]	; (800efc0 <tcp_receive+0x2c4>)
 800edca:	681a      	ldr	r2, [r3, #0]
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800edd0:	4b7b      	ldr	r3, [pc, #492]	; (800efc0 <tcp_receive+0x2c4>)
 800edd2:	681a      	ldr	r2, [r3, #0]
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800edd8:	1ad3      	subs	r3, r2, r3
 800edda:	2b00      	cmp	r3, #0
 800eddc:	dc58      	bgt.n	800ee90 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800edde:	4b7a      	ldr	r3, [pc, #488]	; (800efc8 <tcp_receive+0x2cc>)
 800ede0:	881b      	ldrh	r3, [r3, #0]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d14b      	bne.n	800ee7e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800edea:	687a      	ldr	r2, [r7, #4]
 800edec:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800edf0:	4413      	add	r3, r2
 800edf2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800edf4:	429a      	cmp	r2, r3
 800edf6:	d142      	bne.n	800ee7e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	db3d      	blt.n	800ee7e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ee06:	4b6e      	ldr	r3, [pc, #440]	; (800efc0 <tcp_receive+0x2c4>)
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	429a      	cmp	r2, r3
 800ee0c:	d137      	bne.n	800ee7e <tcp_receive+0x182>
              found_dupack = 1;
 800ee0e:	2301      	movs	r3, #1
 800ee10:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ee18:	2bff      	cmp	r3, #255	; 0xff
 800ee1a:	d007      	beq.n	800ee2c <tcp_receive+0x130>
                ++pcb->dupacks;
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ee22:	3301      	adds	r3, #1
 800ee24:	b2da      	uxtb	r2, r3
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ee32:	2b03      	cmp	r3, #3
 800ee34:	d91b      	bls.n	800ee6e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ee40:	4413      	add	r3, r2
 800ee42:	b29a      	uxth	r2, r3
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ee4a:	429a      	cmp	r2, r3
 800ee4c:	d30a      	bcc.n	800ee64 <tcp_receive+0x168>
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ee58:	4413      	add	r3, r2
 800ee5a:	b29a      	uxth	r2, r3
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ee62:	e004      	b.n	800ee6e <tcp_receive+0x172>
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ee6a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ee74:	2b02      	cmp	r3, #2
 800ee76:	d902      	bls.n	800ee7e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800ee78:	6878      	ldr	r0, [r7, #4]
 800ee7a:	f001 fee9 	bl	8010c50 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800ee7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	f040 8160 	bne.w	800f146 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	2200      	movs	r2, #0
 800ee8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ee8e:	e15a      	b.n	800f146 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ee90:	4b4b      	ldr	r3, [pc, #300]	; (800efc0 <tcp_receive+0x2c4>)
 800ee92:	681a      	ldr	r2, [r3, #0]
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee98:	1ad3      	subs	r3, r2, r3
 800ee9a:	3b01      	subs	r3, #1
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	f2c0 814d 	blt.w	800f13c <tcp_receive+0x440>
 800eea2:	4b47      	ldr	r3, [pc, #284]	; (800efc0 <tcp_receive+0x2c4>)
 800eea4:	681a      	ldr	r2, [r3, #0]
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eeaa:	1ad3      	subs	r3, r2, r3
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	f300 8145 	bgt.w	800f13c <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	8b5b      	ldrh	r3, [r3, #26]
 800eeb6:	f003 0304 	and.w	r3, r3, #4
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d010      	beq.n	800eee0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	8b5b      	ldrh	r3, [r3, #26]
 800eec2:	f023 0304 	bic.w	r3, r3, #4
 800eec6:	b29a      	uxth	r2, r3
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	2200      	movs	r2, #0
 800eedc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	2200      	movs	r2, #0
 800eee4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800eeee:	10db      	asrs	r3, r3, #3
 800eef0:	b21b      	sxth	r3, r3
 800eef2:	b29a      	uxth	r2, r3
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800eefa:	b29b      	uxth	r3, r3
 800eefc:	4413      	add	r3, r2
 800eefe:	b29b      	uxth	r3, r3
 800ef00:	b21a      	sxth	r2, r3
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800ef08:	4b2d      	ldr	r3, [pc, #180]	; (800efc0 <tcp_receive+0x2c4>)
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	b29a      	uxth	r2, r3
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ef12:	b29b      	uxth	r3, r3
 800ef14:	1ad3      	subs	r3, r2, r3
 800ef16:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	2200      	movs	r2, #0
 800ef1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800ef20:	4b27      	ldr	r3, [pc, #156]	; (800efc0 <tcp_receive+0x2c4>)
 800ef22:	681a      	ldr	r2, [r3, #0]
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	7d1b      	ldrb	r3, [r3, #20]
 800ef2c:	2b03      	cmp	r3, #3
 800ef2e:	f240 8096 	bls.w	800f05e <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ef3e:	429a      	cmp	r2, r3
 800ef40:	d244      	bcs.n	800efcc <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	8b5b      	ldrh	r3, [r3, #26]
 800ef46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d001      	beq.n	800ef52 <tcp_receive+0x256>
 800ef4e:	2301      	movs	r3, #1
 800ef50:	e000      	b.n	800ef54 <tcp_receive+0x258>
 800ef52:	2302      	movs	r3, #2
 800ef54:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800ef58:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800ef5c:	b29a      	uxth	r2, r3
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ef62:	fb12 f303 	smulbb	r3, r2, r3
 800ef66:	b29b      	uxth	r3, r3
 800ef68:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ef6a:	4293      	cmp	r3, r2
 800ef6c:	bf28      	it	cs
 800ef6e:	4613      	movcs	r3, r2
 800ef70:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ef78:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ef7a:	4413      	add	r3, r2
 800ef7c:	b29a      	uxth	r2, r3
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ef84:	429a      	cmp	r2, r3
 800ef86:	d309      	bcc.n	800ef9c <tcp_receive+0x2a0>
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ef8e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ef90:	4413      	add	r3, r2
 800ef92:	b29a      	uxth	r2, r3
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ef9a:	e060      	b.n	800f05e <tcp_receive+0x362>
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800efa2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800efa6:	e05a      	b.n	800f05e <tcp_receive+0x362>
 800efa8:	08019dd8 	.word	0x08019dd8
 800efac:	0801a108 	.word	0x0801a108
 800efb0:	08019e24 	.word	0x08019e24
 800efb4:	0801a124 	.word	0x0801a124
 800efb8:	20004bf4 	.word	0x20004bf4
 800efbc:	20004be8 	.word	0x20004be8
 800efc0:	20004bec 	.word	0x20004bec
 800efc4:	20004bd8 	.word	0x20004bd8
 800efc8:	20004bf2 	.word	0x20004bf2
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800efd2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800efd4:	4413      	add	r3, r2
 800efd6:	b29a      	uxth	r2, r3
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800efde:	429a      	cmp	r2, r3
 800efe0:	d309      	bcc.n	800eff6 <tcp_receive+0x2fa>
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800efe8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800efea:	4413      	add	r3, r2
 800efec:	b29a      	uxth	r2, r3
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800eff4:	e004      	b.n	800f000 <tcp_receive+0x304>
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800effc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f00c:	429a      	cmp	r2, r3
 800f00e:	d326      	bcc.n	800f05e <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f01c:	1ad3      	subs	r3, r2, r3
 800f01e:	b29a      	uxth	r2, r3
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f030:	4413      	add	r3, r2
 800f032:	b29a      	uxth	r2, r3
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f03a:	429a      	cmp	r2, r3
 800f03c:	d30a      	bcc.n	800f054 <tcp_receive+0x358>
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f048:	4413      	add	r3, r2
 800f04a:	b29a      	uxth	r2, r3
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f052:	e004      	b.n	800f05e <tcp_receive+0x362>
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f05a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f066:	4a98      	ldr	r2, [pc, #608]	; (800f2c8 <tcp_receive+0x5cc>)
 800f068:	6878      	ldr	r0, [r7, #4]
 800f06a:	f7ff fdcb 	bl	800ec04 <tcp_free_acked_segments>
 800f06e:	4602      	mov	r2, r0
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f07c:	4a93      	ldr	r2, [pc, #588]	; (800f2cc <tcp_receive+0x5d0>)
 800f07e:	6878      	ldr	r0, [r7, #4]
 800f080:	f7ff fdc0 	bl	800ec04 <tcp_free_acked_segments>
 800f084:	4602      	mov	r2, r0
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d104      	bne.n	800f09c <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f098:	861a      	strh	r2, [r3, #48]	; 0x30
 800f09a:	e002      	b.n	800f0a2 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	2200      	movs	r2, #0
 800f0a0:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	2200      	movs	r2, #0
 800f0a6:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d103      	bne.n	800f0b8 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	2200      	movs	r2, #0
 800f0b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800f0be:	4b84      	ldr	r3, [pc, #528]	; (800f2d0 <tcp_receive+0x5d4>)
 800f0c0:	881b      	ldrh	r3, [r3, #0]
 800f0c2:	4413      	add	r3, r2
 800f0c4:	b29a      	uxth	r2, r3
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	8b5b      	ldrh	r3, [r3, #26]
 800f0d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d035      	beq.n	800f144 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d118      	bne.n	800f112 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d00c      	beq.n	800f102 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0f0:	68db      	ldr	r3, [r3, #12]
 800f0f2:	685b      	ldr	r3, [r3, #4]
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	f7fb f980 	bl	800a3fa <lwip_htonl>
 800f0fa:	4603      	mov	r3, r0
 800f0fc:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	dc20      	bgt.n	800f144 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	8b5b      	ldrh	r3, [r3, #26]
 800f106:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f10a:	b29a      	uxth	r2, r3
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f110:	e018      	b.n	800f144 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f11a:	68db      	ldr	r3, [r3, #12]
 800f11c:	685b      	ldr	r3, [r3, #4]
 800f11e:	4618      	mov	r0, r3
 800f120:	f7fb f96b 	bl	800a3fa <lwip_htonl>
 800f124:	4603      	mov	r3, r0
 800f126:	1ae3      	subs	r3, r4, r3
 800f128:	2b00      	cmp	r3, #0
 800f12a:	dc0b      	bgt.n	800f144 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	8b5b      	ldrh	r3, [r3, #26]
 800f130:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f134:	b29a      	uxth	r2, r3
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f13a:	e003      	b.n	800f144 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800f13c:	6878      	ldr	r0, [r7, #4]
 800f13e:	f001 ff75 	bl	801102c <tcp_send_empty_ack>
 800f142:	e000      	b.n	800f146 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f144:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d05b      	beq.n	800f206 <tcp_receive+0x50a>
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f152:	4b60      	ldr	r3, [pc, #384]	; (800f2d4 <tcp_receive+0x5d8>)
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	1ad3      	subs	r3, r2, r3
 800f158:	2b00      	cmp	r3, #0
 800f15a:	da54      	bge.n	800f206 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800f15c:	4b5e      	ldr	r3, [pc, #376]	; (800f2d8 <tcp_receive+0x5dc>)
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	b29a      	uxth	r2, r3
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f166:	b29b      	uxth	r3, r3
 800f168:	1ad3      	subs	r3, r2, r3
 800f16a:	b29b      	uxth	r3, r3
 800f16c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800f170:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f17a:	10db      	asrs	r3, r3, #3
 800f17c:	b21b      	sxth	r3, r3
 800f17e:	b29b      	uxth	r3, r3
 800f180:	1ad3      	subs	r3, r2, r3
 800f182:	b29b      	uxth	r3, r3
 800f184:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f18e:	b29a      	uxth	r2, r3
 800f190:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f194:	4413      	add	r3, r2
 800f196:	b29b      	uxth	r3, r3
 800f198:	b21a      	sxth	r2, r3
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800f19e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	da05      	bge.n	800f1b2 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800f1a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f1aa:	425b      	negs	r3, r3
 800f1ac:	b29b      	uxth	r3, r3
 800f1ae:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800f1b2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f1bc:	109b      	asrs	r3, r3, #2
 800f1be:	b21b      	sxth	r3, r3
 800f1c0:	b29b      	uxth	r3, r3
 800f1c2:	1ad3      	subs	r3, r2, r3
 800f1c4:	b29b      	uxth	r3, r3
 800f1c6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f1d0:	b29a      	uxth	r2, r3
 800f1d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f1d6:	4413      	add	r3, r2
 800f1d8:	b29b      	uxth	r3, r3
 800f1da:	b21a      	sxth	r2, r3
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f1e6:	10db      	asrs	r3, r3, #3
 800f1e8:	b21b      	sxth	r3, r3
 800f1ea:	b29a      	uxth	r2, r3
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f1f2:	b29b      	uxth	r3, r3
 800f1f4:	4413      	add	r3, r2
 800f1f6:	b29b      	uxth	r3, r3
 800f1f8:	b21a      	sxth	r2, r3
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	2200      	movs	r2, #0
 800f204:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800f206:	4b35      	ldr	r3, [pc, #212]	; (800f2dc <tcp_receive+0x5e0>)
 800f208:	881b      	ldrh	r3, [r3, #0]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	f000 84e1 	beq.w	800fbd2 <tcp_receive+0xed6>
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	7d1b      	ldrb	r3, [r3, #20]
 800f214:	2b06      	cmp	r3, #6
 800f216:	f200 84dc 	bhi.w	800fbd2 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f21e:	4b30      	ldr	r3, [pc, #192]	; (800f2e0 <tcp_receive+0x5e4>)
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	1ad3      	subs	r3, r2, r3
 800f224:	3b01      	subs	r3, #1
 800f226:	2b00      	cmp	r3, #0
 800f228:	f2c0 808e 	blt.w	800f348 <tcp_receive+0x64c>
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f230:	4b2a      	ldr	r3, [pc, #168]	; (800f2dc <tcp_receive+0x5e0>)
 800f232:	881b      	ldrh	r3, [r3, #0]
 800f234:	4619      	mov	r1, r3
 800f236:	4b2a      	ldr	r3, [pc, #168]	; (800f2e0 <tcp_receive+0x5e4>)
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	440b      	add	r3, r1
 800f23c:	1ad3      	subs	r3, r2, r3
 800f23e:	3301      	adds	r3, #1
 800f240:	2b00      	cmp	r3, #0
 800f242:	f300 8081 	bgt.w	800f348 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800f246:	4b27      	ldr	r3, [pc, #156]	; (800f2e4 <tcp_receive+0x5e8>)
 800f248:	685b      	ldr	r3, [r3, #4]
 800f24a:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f250:	4b23      	ldr	r3, [pc, #140]	; (800f2e0 <tcp_receive+0x5e4>)
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	1ad3      	subs	r3, r2, r3
 800f256:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800f258:	4b22      	ldr	r3, [pc, #136]	; (800f2e4 <tcp_receive+0x5e8>)
 800f25a:	685b      	ldr	r3, [r3, #4]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d106      	bne.n	800f26e <tcp_receive+0x572>
 800f260:	4b21      	ldr	r3, [pc, #132]	; (800f2e8 <tcp_receive+0x5ec>)
 800f262:	f240 5294 	movw	r2, #1428	; 0x594
 800f266:	4921      	ldr	r1, [pc, #132]	; (800f2ec <tcp_receive+0x5f0>)
 800f268:	4821      	ldr	r0, [pc, #132]	; (800f2f0 <tcp_receive+0x5f4>)
 800f26a:	f008 ffe3 	bl	8018234 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800f26e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f270:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f274:	4293      	cmp	r3, r2
 800f276:	d906      	bls.n	800f286 <tcp_receive+0x58a>
 800f278:	4b1b      	ldr	r3, [pc, #108]	; (800f2e8 <tcp_receive+0x5ec>)
 800f27a:	f240 5295 	movw	r2, #1429	; 0x595
 800f27e:	491d      	ldr	r1, [pc, #116]	; (800f2f4 <tcp_receive+0x5f8>)
 800f280:	481b      	ldr	r0, [pc, #108]	; (800f2f0 <tcp_receive+0x5f4>)
 800f282:	f008 ffd7 	bl	8018234 <iprintf>
      off = (u16_t)off32;
 800f286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f288:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f28c:	4b15      	ldr	r3, [pc, #84]	; (800f2e4 <tcp_receive+0x5e8>)
 800f28e:	685b      	ldr	r3, [r3, #4]
 800f290:	891b      	ldrh	r3, [r3, #8]
 800f292:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f296:	429a      	cmp	r2, r3
 800f298:	d906      	bls.n	800f2a8 <tcp_receive+0x5ac>
 800f29a:	4b13      	ldr	r3, [pc, #76]	; (800f2e8 <tcp_receive+0x5ec>)
 800f29c:	f240 5297 	movw	r2, #1431	; 0x597
 800f2a0:	4915      	ldr	r1, [pc, #84]	; (800f2f8 <tcp_receive+0x5fc>)
 800f2a2:	4813      	ldr	r0, [pc, #76]	; (800f2f0 <tcp_receive+0x5f4>)
 800f2a4:	f008 ffc6 	bl	8018234 <iprintf>
      inseg.len -= off;
 800f2a8:	4b0e      	ldr	r3, [pc, #56]	; (800f2e4 <tcp_receive+0x5e8>)
 800f2aa:	891a      	ldrh	r2, [r3, #8]
 800f2ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f2b0:	1ad3      	subs	r3, r2, r3
 800f2b2:	b29a      	uxth	r2, r3
 800f2b4:	4b0b      	ldr	r3, [pc, #44]	; (800f2e4 <tcp_receive+0x5e8>)
 800f2b6:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800f2b8:	4b0a      	ldr	r3, [pc, #40]	; (800f2e4 <tcp_receive+0x5e8>)
 800f2ba:	685b      	ldr	r3, [r3, #4]
 800f2bc:	891a      	ldrh	r2, [r3, #8]
 800f2be:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f2c2:	1ad3      	subs	r3, r2, r3
 800f2c4:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800f2c6:	e029      	b.n	800f31c <tcp_receive+0x620>
 800f2c8:	0801a140 	.word	0x0801a140
 800f2cc:	0801a148 	.word	0x0801a148
 800f2d0:	20004bf0 	.word	0x20004bf0
 800f2d4:	20004bec 	.word	0x20004bec
 800f2d8:	2000dc48 	.word	0x2000dc48
 800f2dc:	20004bf2 	.word	0x20004bf2
 800f2e0:	20004be8 	.word	0x20004be8
 800f2e4:	20004bc8 	.word	0x20004bc8
 800f2e8:	08019dd8 	.word	0x08019dd8
 800f2ec:	0801a150 	.word	0x0801a150
 800f2f0:	08019e24 	.word	0x08019e24
 800f2f4:	0801a160 	.word	0x0801a160
 800f2f8:	0801a170 	.word	0x0801a170
        off -= p->len;
 800f2fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f2fe:	895b      	ldrh	r3, [r3, #10]
 800f300:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f304:	1ad3      	subs	r3, r2, r3
 800f306:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800f30a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f30c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f30e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800f310:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f312:	2200      	movs	r2, #0
 800f314:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800f316:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800f31c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f31e:	895b      	ldrh	r3, [r3, #10]
 800f320:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f324:	429a      	cmp	r2, r3
 800f326:	d8e9      	bhi.n	800f2fc <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800f328:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f32c:	4619      	mov	r1, r3
 800f32e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f330:	f7fc fb74 	bl	800ba1c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f338:	4a91      	ldr	r2, [pc, #580]	; (800f580 <tcp_receive+0x884>)
 800f33a:	6013      	str	r3, [r2, #0]
 800f33c:	4b91      	ldr	r3, [pc, #580]	; (800f584 <tcp_receive+0x888>)
 800f33e:	68db      	ldr	r3, [r3, #12]
 800f340:	4a8f      	ldr	r2, [pc, #572]	; (800f580 <tcp_receive+0x884>)
 800f342:	6812      	ldr	r2, [r2, #0]
 800f344:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f346:	e00d      	b.n	800f364 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800f348:	4b8d      	ldr	r3, [pc, #564]	; (800f580 <tcp_receive+0x884>)
 800f34a:	681a      	ldr	r2, [r3, #0]
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f350:	1ad3      	subs	r3, r2, r3
 800f352:	2b00      	cmp	r3, #0
 800f354:	da06      	bge.n	800f364 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	8b5b      	ldrh	r3, [r3, #26]
 800f35a:	f043 0302 	orr.w	r3, r3, #2
 800f35e:	b29a      	uxth	r2, r3
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f364:	4b86      	ldr	r3, [pc, #536]	; (800f580 <tcp_receive+0x884>)
 800f366:	681a      	ldr	r2, [r3, #0]
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f36c:	1ad3      	subs	r3, r2, r3
 800f36e:	2b00      	cmp	r3, #0
 800f370:	f2c0 842a 	blt.w	800fbc8 <tcp_receive+0xecc>
 800f374:	4b82      	ldr	r3, [pc, #520]	; (800f580 <tcp_receive+0x884>)
 800f376:	681a      	ldr	r2, [r3, #0]
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f37c:	6879      	ldr	r1, [r7, #4]
 800f37e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f380:	440b      	add	r3, r1
 800f382:	1ad3      	subs	r3, r2, r3
 800f384:	3301      	adds	r3, #1
 800f386:	2b00      	cmp	r3, #0
 800f388:	f300 841e 	bgt.w	800fbc8 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f390:	4b7b      	ldr	r3, [pc, #492]	; (800f580 <tcp_receive+0x884>)
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	429a      	cmp	r2, r3
 800f396:	f040 829a 	bne.w	800f8ce <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800f39a:	4b7a      	ldr	r3, [pc, #488]	; (800f584 <tcp_receive+0x888>)
 800f39c:	891c      	ldrh	r4, [r3, #8]
 800f39e:	4b79      	ldr	r3, [pc, #484]	; (800f584 <tcp_receive+0x888>)
 800f3a0:	68db      	ldr	r3, [r3, #12]
 800f3a2:	899b      	ldrh	r3, [r3, #12]
 800f3a4:	b29b      	uxth	r3, r3
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	f7fb f812 	bl	800a3d0 <lwip_htons>
 800f3ac:	4603      	mov	r3, r0
 800f3ae:	b2db      	uxtb	r3, r3
 800f3b0:	f003 0303 	and.w	r3, r3, #3
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d001      	beq.n	800f3bc <tcp_receive+0x6c0>
 800f3b8:	2301      	movs	r3, #1
 800f3ba:	e000      	b.n	800f3be <tcp_receive+0x6c2>
 800f3bc:	2300      	movs	r3, #0
 800f3be:	4423      	add	r3, r4
 800f3c0:	b29a      	uxth	r2, r3
 800f3c2:	4b71      	ldr	r3, [pc, #452]	; (800f588 <tcp_receive+0x88c>)
 800f3c4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f3ca:	4b6f      	ldr	r3, [pc, #444]	; (800f588 <tcp_receive+0x88c>)
 800f3cc:	881b      	ldrh	r3, [r3, #0]
 800f3ce:	429a      	cmp	r2, r3
 800f3d0:	d275      	bcs.n	800f4be <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f3d2:	4b6c      	ldr	r3, [pc, #432]	; (800f584 <tcp_receive+0x888>)
 800f3d4:	68db      	ldr	r3, [r3, #12]
 800f3d6:	899b      	ldrh	r3, [r3, #12]
 800f3d8:	b29b      	uxth	r3, r3
 800f3da:	4618      	mov	r0, r3
 800f3dc:	f7fa fff8 	bl	800a3d0 <lwip_htons>
 800f3e0:	4603      	mov	r3, r0
 800f3e2:	b2db      	uxtb	r3, r3
 800f3e4:	f003 0301 	and.w	r3, r3, #1
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d01f      	beq.n	800f42c <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800f3ec:	4b65      	ldr	r3, [pc, #404]	; (800f584 <tcp_receive+0x888>)
 800f3ee:	68db      	ldr	r3, [r3, #12]
 800f3f0:	899b      	ldrh	r3, [r3, #12]
 800f3f2:	b29b      	uxth	r3, r3
 800f3f4:	b21b      	sxth	r3, r3
 800f3f6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f3fa:	b21c      	sxth	r4, r3
 800f3fc:	4b61      	ldr	r3, [pc, #388]	; (800f584 <tcp_receive+0x888>)
 800f3fe:	68db      	ldr	r3, [r3, #12]
 800f400:	899b      	ldrh	r3, [r3, #12]
 800f402:	b29b      	uxth	r3, r3
 800f404:	4618      	mov	r0, r3
 800f406:	f7fa ffe3 	bl	800a3d0 <lwip_htons>
 800f40a:	4603      	mov	r3, r0
 800f40c:	b2db      	uxtb	r3, r3
 800f40e:	b29b      	uxth	r3, r3
 800f410:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800f414:	b29b      	uxth	r3, r3
 800f416:	4618      	mov	r0, r3
 800f418:	f7fa ffda 	bl	800a3d0 <lwip_htons>
 800f41c:	4603      	mov	r3, r0
 800f41e:	b21b      	sxth	r3, r3
 800f420:	4323      	orrs	r3, r4
 800f422:	b21a      	sxth	r2, r3
 800f424:	4b57      	ldr	r3, [pc, #348]	; (800f584 <tcp_receive+0x888>)
 800f426:	68db      	ldr	r3, [r3, #12]
 800f428:	b292      	uxth	r2, r2
 800f42a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f430:	4b54      	ldr	r3, [pc, #336]	; (800f584 <tcp_receive+0x888>)
 800f432:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f434:	4b53      	ldr	r3, [pc, #332]	; (800f584 <tcp_receive+0x888>)
 800f436:	68db      	ldr	r3, [r3, #12]
 800f438:	899b      	ldrh	r3, [r3, #12]
 800f43a:	b29b      	uxth	r3, r3
 800f43c:	4618      	mov	r0, r3
 800f43e:	f7fa ffc7 	bl	800a3d0 <lwip_htons>
 800f442:	4603      	mov	r3, r0
 800f444:	b2db      	uxtb	r3, r3
 800f446:	f003 0302 	and.w	r3, r3, #2
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d005      	beq.n	800f45a <tcp_receive+0x75e>
            inseg.len -= 1;
 800f44e:	4b4d      	ldr	r3, [pc, #308]	; (800f584 <tcp_receive+0x888>)
 800f450:	891b      	ldrh	r3, [r3, #8]
 800f452:	3b01      	subs	r3, #1
 800f454:	b29a      	uxth	r2, r3
 800f456:	4b4b      	ldr	r3, [pc, #300]	; (800f584 <tcp_receive+0x888>)
 800f458:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800f45a:	4b4a      	ldr	r3, [pc, #296]	; (800f584 <tcp_receive+0x888>)
 800f45c:	685b      	ldr	r3, [r3, #4]
 800f45e:	4a49      	ldr	r2, [pc, #292]	; (800f584 <tcp_receive+0x888>)
 800f460:	8912      	ldrh	r2, [r2, #8]
 800f462:	4611      	mov	r1, r2
 800f464:	4618      	mov	r0, r3
 800f466:	f7fc f9d9 	bl	800b81c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800f46a:	4b46      	ldr	r3, [pc, #280]	; (800f584 <tcp_receive+0x888>)
 800f46c:	891c      	ldrh	r4, [r3, #8]
 800f46e:	4b45      	ldr	r3, [pc, #276]	; (800f584 <tcp_receive+0x888>)
 800f470:	68db      	ldr	r3, [r3, #12]
 800f472:	899b      	ldrh	r3, [r3, #12]
 800f474:	b29b      	uxth	r3, r3
 800f476:	4618      	mov	r0, r3
 800f478:	f7fa ffaa 	bl	800a3d0 <lwip_htons>
 800f47c:	4603      	mov	r3, r0
 800f47e:	b2db      	uxtb	r3, r3
 800f480:	f003 0303 	and.w	r3, r3, #3
 800f484:	2b00      	cmp	r3, #0
 800f486:	d001      	beq.n	800f48c <tcp_receive+0x790>
 800f488:	2301      	movs	r3, #1
 800f48a:	e000      	b.n	800f48e <tcp_receive+0x792>
 800f48c:	2300      	movs	r3, #0
 800f48e:	4423      	add	r3, r4
 800f490:	b29a      	uxth	r2, r3
 800f492:	4b3d      	ldr	r3, [pc, #244]	; (800f588 <tcp_receive+0x88c>)
 800f494:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f496:	4b3c      	ldr	r3, [pc, #240]	; (800f588 <tcp_receive+0x88c>)
 800f498:	881b      	ldrh	r3, [r3, #0]
 800f49a:	461a      	mov	r2, r3
 800f49c:	4b38      	ldr	r3, [pc, #224]	; (800f580 <tcp_receive+0x884>)
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	441a      	add	r2, r3
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4a6:	6879      	ldr	r1, [r7, #4]
 800f4a8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f4aa:	440b      	add	r3, r1
 800f4ac:	429a      	cmp	r2, r3
 800f4ae:	d006      	beq.n	800f4be <tcp_receive+0x7c2>
 800f4b0:	4b36      	ldr	r3, [pc, #216]	; (800f58c <tcp_receive+0x890>)
 800f4b2:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800f4b6:	4936      	ldr	r1, [pc, #216]	; (800f590 <tcp_receive+0x894>)
 800f4b8:	4836      	ldr	r0, [pc, #216]	; (800f594 <tcp_receive+0x898>)
 800f4ba:	f008 febb 	bl	8018234 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	f000 80e7 	beq.w	800f696 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f4c8:	4b2e      	ldr	r3, [pc, #184]	; (800f584 <tcp_receive+0x888>)
 800f4ca:	68db      	ldr	r3, [r3, #12]
 800f4cc:	899b      	ldrh	r3, [r3, #12]
 800f4ce:	b29b      	uxth	r3, r3
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	f7fa ff7d 	bl	800a3d0 <lwip_htons>
 800f4d6:	4603      	mov	r3, r0
 800f4d8:	b2db      	uxtb	r3, r3
 800f4da:	f003 0301 	and.w	r3, r3, #1
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d010      	beq.n	800f504 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800f4e2:	e00a      	b.n	800f4fa <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f4e8:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f4ee:	681a      	ldr	r2, [r3, #0]
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800f4f4:	68f8      	ldr	r0, [r7, #12]
 800f4f6:	f7fd fd96 	bl	800d026 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d1f0      	bne.n	800f4e4 <tcp_receive+0x7e8>
 800f502:	e0c8      	b.n	800f696 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f508:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800f50a:	e052      	b.n	800f5b2 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f50c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f50e:	68db      	ldr	r3, [r3, #12]
 800f510:	899b      	ldrh	r3, [r3, #12]
 800f512:	b29b      	uxth	r3, r3
 800f514:	4618      	mov	r0, r3
 800f516:	f7fa ff5b 	bl	800a3d0 <lwip_htons>
 800f51a:	4603      	mov	r3, r0
 800f51c:	b2db      	uxtb	r3, r3
 800f51e:	f003 0301 	and.w	r3, r3, #1
 800f522:	2b00      	cmp	r3, #0
 800f524:	d03d      	beq.n	800f5a2 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800f526:	4b17      	ldr	r3, [pc, #92]	; (800f584 <tcp_receive+0x888>)
 800f528:	68db      	ldr	r3, [r3, #12]
 800f52a:	899b      	ldrh	r3, [r3, #12]
 800f52c:	b29b      	uxth	r3, r3
 800f52e:	4618      	mov	r0, r3
 800f530:	f7fa ff4e 	bl	800a3d0 <lwip_htons>
 800f534:	4603      	mov	r3, r0
 800f536:	b2db      	uxtb	r3, r3
 800f538:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d130      	bne.n	800f5a2 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800f540:	4b10      	ldr	r3, [pc, #64]	; (800f584 <tcp_receive+0x888>)
 800f542:	68db      	ldr	r3, [r3, #12]
 800f544:	899b      	ldrh	r3, [r3, #12]
 800f546:	b29c      	uxth	r4, r3
 800f548:	2001      	movs	r0, #1
 800f54a:	f7fa ff41 	bl	800a3d0 <lwip_htons>
 800f54e:	4603      	mov	r3, r0
 800f550:	461a      	mov	r2, r3
 800f552:	4b0c      	ldr	r3, [pc, #48]	; (800f584 <tcp_receive+0x888>)
 800f554:	68db      	ldr	r3, [r3, #12]
 800f556:	4322      	orrs	r2, r4
 800f558:	b292      	uxth	r2, r2
 800f55a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800f55c:	4b09      	ldr	r3, [pc, #36]	; (800f584 <tcp_receive+0x888>)
 800f55e:	891c      	ldrh	r4, [r3, #8]
 800f560:	4b08      	ldr	r3, [pc, #32]	; (800f584 <tcp_receive+0x888>)
 800f562:	68db      	ldr	r3, [r3, #12]
 800f564:	899b      	ldrh	r3, [r3, #12]
 800f566:	b29b      	uxth	r3, r3
 800f568:	4618      	mov	r0, r3
 800f56a:	f7fa ff31 	bl	800a3d0 <lwip_htons>
 800f56e:	4603      	mov	r3, r0
 800f570:	b2db      	uxtb	r3, r3
 800f572:	f003 0303 	and.w	r3, r3, #3
 800f576:	2b00      	cmp	r3, #0
 800f578:	d00e      	beq.n	800f598 <tcp_receive+0x89c>
 800f57a:	2301      	movs	r3, #1
 800f57c:	e00d      	b.n	800f59a <tcp_receive+0x89e>
 800f57e:	bf00      	nop
 800f580:	20004be8 	.word	0x20004be8
 800f584:	20004bc8 	.word	0x20004bc8
 800f588:	20004bf2 	.word	0x20004bf2
 800f58c:	08019dd8 	.word	0x08019dd8
 800f590:	0801a180 	.word	0x0801a180
 800f594:	08019e24 	.word	0x08019e24
 800f598:	2300      	movs	r3, #0
 800f59a:	4423      	add	r3, r4
 800f59c:	b29a      	uxth	r2, r3
 800f59e:	4b98      	ldr	r3, [pc, #608]	; (800f800 <tcp_receive+0xb04>)
 800f5a0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800f5a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5a4:	613b      	str	r3, [r7, #16]
              next = next->next;
 800f5a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800f5ac:	6938      	ldr	r0, [r7, #16]
 800f5ae:	f7fd fd3a 	bl	800d026 <tcp_seg_free>
            while (next &&
 800f5b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d00e      	beq.n	800f5d6 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800f5b8:	4b91      	ldr	r3, [pc, #580]	; (800f800 <tcp_receive+0xb04>)
 800f5ba:	881b      	ldrh	r3, [r3, #0]
 800f5bc:	461a      	mov	r2, r3
 800f5be:	4b91      	ldr	r3, [pc, #580]	; (800f804 <tcp_receive+0xb08>)
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	441a      	add	r2, r3
 800f5c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5c6:	68db      	ldr	r3, [r3, #12]
 800f5c8:	685b      	ldr	r3, [r3, #4]
 800f5ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f5cc:	8909      	ldrh	r1, [r1, #8]
 800f5ce:	440b      	add	r3, r1
 800f5d0:	1ad3      	subs	r3, r2, r3
            while (next &&
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	da9a      	bge.n	800f50c <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800f5d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d059      	beq.n	800f690 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800f5dc:	4b88      	ldr	r3, [pc, #544]	; (800f800 <tcp_receive+0xb04>)
 800f5de:	881b      	ldrh	r3, [r3, #0]
 800f5e0:	461a      	mov	r2, r3
 800f5e2:	4b88      	ldr	r3, [pc, #544]	; (800f804 <tcp_receive+0xb08>)
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	441a      	add	r2, r3
 800f5e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5ea:	68db      	ldr	r3, [r3, #12]
 800f5ec:	685b      	ldr	r3, [r3, #4]
 800f5ee:	1ad3      	subs	r3, r2, r3
            if (next &&
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	dd4d      	ble.n	800f690 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800f5f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5f6:	68db      	ldr	r3, [r3, #12]
 800f5f8:	685b      	ldr	r3, [r3, #4]
 800f5fa:	b29a      	uxth	r2, r3
 800f5fc:	4b81      	ldr	r3, [pc, #516]	; (800f804 <tcp_receive+0xb08>)
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	b29b      	uxth	r3, r3
 800f602:	1ad3      	subs	r3, r2, r3
 800f604:	b29a      	uxth	r2, r3
 800f606:	4b80      	ldr	r3, [pc, #512]	; (800f808 <tcp_receive+0xb0c>)
 800f608:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f60a:	4b7f      	ldr	r3, [pc, #508]	; (800f808 <tcp_receive+0xb0c>)
 800f60c:	68db      	ldr	r3, [r3, #12]
 800f60e:	899b      	ldrh	r3, [r3, #12]
 800f610:	b29b      	uxth	r3, r3
 800f612:	4618      	mov	r0, r3
 800f614:	f7fa fedc 	bl	800a3d0 <lwip_htons>
 800f618:	4603      	mov	r3, r0
 800f61a:	b2db      	uxtb	r3, r3
 800f61c:	f003 0302 	and.w	r3, r3, #2
 800f620:	2b00      	cmp	r3, #0
 800f622:	d005      	beq.n	800f630 <tcp_receive+0x934>
                inseg.len -= 1;
 800f624:	4b78      	ldr	r3, [pc, #480]	; (800f808 <tcp_receive+0xb0c>)
 800f626:	891b      	ldrh	r3, [r3, #8]
 800f628:	3b01      	subs	r3, #1
 800f62a:	b29a      	uxth	r2, r3
 800f62c:	4b76      	ldr	r3, [pc, #472]	; (800f808 <tcp_receive+0xb0c>)
 800f62e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800f630:	4b75      	ldr	r3, [pc, #468]	; (800f808 <tcp_receive+0xb0c>)
 800f632:	685b      	ldr	r3, [r3, #4]
 800f634:	4a74      	ldr	r2, [pc, #464]	; (800f808 <tcp_receive+0xb0c>)
 800f636:	8912      	ldrh	r2, [r2, #8]
 800f638:	4611      	mov	r1, r2
 800f63a:	4618      	mov	r0, r3
 800f63c:	f7fc f8ee 	bl	800b81c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800f640:	4b71      	ldr	r3, [pc, #452]	; (800f808 <tcp_receive+0xb0c>)
 800f642:	891c      	ldrh	r4, [r3, #8]
 800f644:	4b70      	ldr	r3, [pc, #448]	; (800f808 <tcp_receive+0xb0c>)
 800f646:	68db      	ldr	r3, [r3, #12]
 800f648:	899b      	ldrh	r3, [r3, #12]
 800f64a:	b29b      	uxth	r3, r3
 800f64c:	4618      	mov	r0, r3
 800f64e:	f7fa febf 	bl	800a3d0 <lwip_htons>
 800f652:	4603      	mov	r3, r0
 800f654:	b2db      	uxtb	r3, r3
 800f656:	f003 0303 	and.w	r3, r3, #3
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d001      	beq.n	800f662 <tcp_receive+0x966>
 800f65e:	2301      	movs	r3, #1
 800f660:	e000      	b.n	800f664 <tcp_receive+0x968>
 800f662:	2300      	movs	r3, #0
 800f664:	4423      	add	r3, r4
 800f666:	b29a      	uxth	r2, r3
 800f668:	4b65      	ldr	r3, [pc, #404]	; (800f800 <tcp_receive+0xb04>)
 800f66a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800f66c:	4b64      	ldr	r3, [pc, #400]	; (800f800 <tcp_receive+0xb04>)
 800f66e:	881b      	ldrh	r3, [r3, #0]
 800f670:	461a      	mov	r2, r3
 800f672:	4b64      	ldr	r3, [pc, #400]	; (800f804 <tcp_receive+0xb08>)
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	441a      	add	r2, r3
 800f678:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f67a:	68db      	ldr	r3, [r3, #12]
 800f67c:	685b      	ldr	r3, [r3, #4]
 800f67e:	429a      	cmp	r2, r3
 800f680:	d006      	beq.n	800f690 <tcp_receive+0x994>
 800f682:	4b62      	ldr	r3, [pc, #392]	; (800f80c <tcp_receive+0xb10>)
 800f684:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800f688:	4961      	ldr	r1, [pc, #388]	; (800f810 <tcp_receive+0xb14>)
 800f68a:	4862      	ldr	r0, [pc, #392]	; (800f814 <tcp_receive+0xb18>)
 800f68c:	f008 fdd2 	bl	8018234 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f694:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800f696:	4b5a      	ldr	r3, [pc, #360]	; (800f800 <tcp_receive+0xb04>)
 800f698:	881b      	ldrh	r3, [r3, #0]
 800f69a:	461a      	mov	r2, r3
 800f69c:	4b59      	ldr	r3, [pc, #356]	; (800f804 <tcp_receive+0xb08>)
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	441a      	add	r2, r3
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f6aa:	4b55      	ldr	r3, [pc, #340]	; (800f800 <tcp_receive+0xb04>)
 800f6ac:	881b      	ldrh	r3, [r3, #0]
 800f6ae:	429a      	cmp	r2, r3
 800f6b0:	d206      	bcs.n	800f6c0 <tcp_receive+0x9c4>
 800f6b2:	4b56      	ldr	r3, [pc, #344]	; (800f80c <tcp_receive+0xb10>)
 800f6b4:	f240 6207 	movw	r2, #1543	; 0x607
 800f6b8:	4957      	ldr	r1, [pc, #348]	; (800f818 <tcp_receive+0xb1c>)
 800f6ba:	4856      	ldr	r0, [pc, #344]	; (800f814 <tcp_receive+0xb18>)
 800f6bc:	f008 fdba 	bl	8018234 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f6c4:	4b4e      	ldr	r3, [pc, #312]	; (800f800 <tcp_receive+0xb04>)
 800f6c6:	881b      	ldrh	r3, [r3, #0]
 800f6c8:	1ad3      	subs	r3, r2, r3
 800f6ca:	b29a      	uxth	r2, r3
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800f6d0:	6878      	ldr	r0, [r7, #4]
 800f6d2:	f7fc ffc9 	bl	800c668 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800f6d6:	4b4c      	ldr	r3, [pc, #304]	; (800f808 <tcp_receive+0xb0c>)
 800f6d8:	685b      	ldr	r3, [r3, #4]
 800f6da:	891b      	ldrh	r3, [r3, #8]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d006      	beq.n	800f6ee <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800f6e0:	4b49      	ldr	r3, [pc, #292]	; (800f808 <tcp_receive+0xb0c>)
 800f6e2:	685b      	ldr	r3, [r3, #4]
 800f6e4:	4a4d      	ldr	r2, [pc, #308]	; (800f81c <tcp_receive+0xb20>)
 800f6e6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800f6e8:	4b47      	ldr	r3, [pc, #284]	; (800f808 <tcp_receive+0xb0c>)
 800f6ea:	2200      	movs	r2, #0
 800f6ec:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f6ee:	4b46      	ldr	r3, [pc, #280]	; (800f808 <tcp_receive+0xb0c>)
 800f6f0:	68db      	ldr	r3, [r3, #12]
 800f6f2:	899b      	ldrh	r3, [r3, #12]
 800f6f4:	b29b      	uxth	r3, r3
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	f7fa fe6a 	bl	800a3d0 <lwip_htons>
 800f6fc:	4603      	mov	r3, r0
 800f6fe:	b2db      	uxtb	r3, r3
 800f700:	f003 0301 	and.w	r3, r3, #1
 800f704:	2b00      	cmp	r3, #0
 800f706:	f000 80b8 	beq.w	800f87a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800f70a:	4b45      	ldr	r3, [pc, #276]	; (800f820 <tcp_receive+0xb24>)
 800f70c:	781b      	ldrb	r3, [r3, #0]
 800f70e:	f043 0320 	orr.w	r3, r3, #32
 800f712:	b2da      	uxtb	r2, r3
 800f714:	4b42      	ldr	r3, [pc, #264]	; (800f820 <tcp_receive+0xb24>)
 800f716:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800f718:	e0af      	b.n	800f87a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f71e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f724:	68db      	ldr	r3, [r3, #12]
 800f726:	685b      	ldr	r3, [r3, #4]
 800f728:	4a36      	ldr	r2, [pc, #216]	; (800f804 <tcp_receive+0xb08>)
 800f72a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800f72c:	68bb      	ldr	r3, [r7, #8]
 800f72e:	891b      	ldrh	r3, [r3, #8]
 800f730:	461c      	mov	r4, r3
 800f732:	68bb      	ldr	r3, [r7, #8]
 800f734:	68db      	ldr	r3, [r3, #12]
 800f736:	899b      	ldrh	r3, [r3, #12]
 800f738:	b29b      	uxth	r3, r3
 800f73a:	4618      	mov	r0, r3
 800f73c:	f7fa fe48 	bl	800a3d0 <lwip_htons>
 800f740:	4603      	mov	r3, r0
 800f742:	b2db      	uxtb	r3, r3
 800f744:	f003 0303 	and.w	r3, r3, #3
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d001      	beq.n	800f750 <tcp_receive+0xa54>
 800f74c:	2301      	movs	r3, #1
 800f74e:	e000      	b.n	800f752 <tcp_receive+0xa56>
 800f750:	2300      	movs	r3, #0
 800f752:	191a      	adds	r2, r3, r4
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f758:	441a      	add	r2, r3
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f762:	461c      	mov	r4, r3
 800f764:	68bb      	ldr	r3, [r7, #8]
 800f766:	891b      	ldrh	r3, [r3, #8]
 800f768:	461d      	mov	r5, r3
 800f76a:	68bb      	ldr	r3, [r7, #8]
 800f76c:	68db      	ldr	r3, [r3, #12]
 800f76e:	899b      	ldrh	r3, [r3, #12]
 800f770:	b29b      	uxth	r3, r3
 800f772:	4618      	mov	r0, r3
 800f774:	f7fa fe2c 	bl	800a3d0 <lwip_htons>
 800f778:	4603      	mov	r3, r0
 800f77a:	b2db      	uxtb	r3, r3
 800f77c:	f003 0303 	and.w	r3, r3, #3
 800f780:	2b00      	cmp	r3, #0
 800f782:	d001      	beq.n	800f788 <tcp_receive+0xa8c>
 800f784:	2301      	movs	r3, #1
 800f786:	e000      	b.n	800f78a <tcp_receive+0xa8e>
 800f788:	2300      	movs	r3, #0
 800f78a:	442b      	add	r3, r5
 800f78c:	429c      	cmp	r4, r3
 800f78e:	d206      	bcs.n	800f79e <tcp_receive+0xaa2>
 800f790:	4b1e      	ldr	r3, [pc, #120]	; (800f80c <tcp_receive+0xb10>)
 800f792:	f240 622b 	movw	r2, #1579	; 0x62b
 800f796:	4923      	ldr	r1, [pc, #140]	; (800f824 <tcp_receive+0xb28>)
 800f798:	481e      	ldr	r0, [pc, #120]	; (800f814 <tcp_receive+0xb18>)
 800f79a:	f008 fd4b 	bl	8018234 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800f79e:	68bb      	ldr	r3, [r7, #8]
 800f7a0:	891b      	ldrh	r3, [r3, #8]
 800f7a2:	461c      	mov	r4, r3
 800f7a4:	68bb      	ldr	r3, [r7, #8]
 800f7a6:	68db      	ldr	r3, [r3, #12]
 800f7a8:	899b      	ldrh	r3, [r3, #12]
 800f7aa:	b29b      	uxth	r3, r3
 800f7ac:	4618      	mov	r0, r3
 800f7ae:	f7fa fe0f 	bl	800a3d0 <lwip_htons>
 800f7b2:	4603      	mov	r3, r0
 800f7b4:	b2db      	uxtb	r3, r3
 800f7b6:	f003 0303 	and.w	r3, r3, #3
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d001      	beq.n	800f7c2 <tcp_receive+0xac6>
 800f7be:	2301      	movs	r3, #1
 800f7c0:	e000      	b.n	800f7c4 <tcp_receive+0xac8>
 800f7c2:	2300      	movs	r3, #0
 800f7c4:	1919      	adds	r1, r3, r4
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f7ca:	b28b      	uxth	r3, r1
 800f7cc:	1ad3      	subs	r3, r2, r3
 800f7ce:	b29a      	uxth	r2, r3
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800f7d4:	6878      	ldr	r0, [r7, #4]
 800f7d6:	f7fc ff47 	bl	800c668 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800f7da:	68bb      	ldr	r3, [r7, #8]
 800f7dc:	685b      	ldr	r3, [r3, #4]
 800f7de:	891b      	ldrh	r3, [r3, #8]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d028      	beq.n	800f836 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800f7e4:	4b0d      	ldr	r3, [pc, #52]	; (800f81c <tcp_receive+0xb20>)
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d01d      	beq.n	800f828 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800f7ec:	4b0b      	ldr	r3, [pc, #44]	; (800f81c <tcp_receive+0xb20>)
 800f7ee:	681a      	ldr	r2, [r3, #0]
 800f7f0:	68bb      	ldr	r3, [r7, #8]
 800f7f2:	685b      	ldr	r3, [r3, #4]
 800f7f4:	4619      	mov	r1, r3
 800f7f6:	4610      	mov	r0, r2
 800f7f8:	f7fc fa64 	bl	800bcc4 <pbuf_cat>
 800f7fc:	e018      	b.n	800f830 <tcp_receive+0xb34>
 800f7fe:	bf00      	nop
 800f800:	20004bf2 	.word	0x20004bf2
 800f804:	20004be8 	.word	0x20004be8
 800f808:	20004bc8 	.word	0x20004bc8
 800f80c:	08019dd8 	.word	0x08019dd8
 800f810:	0801a1b8 	.word	0x0801a1b8
 800f814:	08019e24 	.word	0x08019e24
 800f818:	0801a1f4 	.word	0x0801a1f4
 800f81c:	20004bf8 	.word	0x20004bf8
 800f820:	20004bf5 	.word	0x20004bf5
 800f824:	0801a214 	.word	0x0801a214
            } else {
              recv_data = cseg->p;
 800f828:	68bb      	ldr	r3, [r7, #8]
 800f82a:	685b      	ldr	r3, [r3, #4]
 800f82c:	4a70      	ldr	r2, [pc, #448]	; (800f9f0 <tcp_receive+0xcf4>)
 800f82e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800f830:	68bb      	ldr	r3, [r7, #8]
 800f832:	2200      	movs	r2, #0
 800f834:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f836:	68bb      	ldr	r3, [r7, #8]
 800f838:	68db      	ldr	r3, [r3, #12]
 800f83a:	899b      	ldrh	r3, [r3, #12]
 800f83c:	b29b      	uxth	r3, r3
 800f83e:	4618      	mov	r0, r3
 800f840:	f7fa fdc6 	bl	800a3d0 <lwip_htons>
 800f844:	4603      	mov	r3, r0
 800f846:	b2db      	uxtb	r3, r3
 800f848:	f003 0301 	and.w	r3, r3, #1
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d00d      	beq.n	800f86c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800f850:	4b68      	ldr	r3, [pc, #416]	; (800f9f4 <tcp_receive+0xcf8>)
 800f852:	781b      	ldrb	r3, [r3, #0]
 800f854:	f043 0320 	orr.w	r3, r3, #32
 800f858:	b2da      	uxtb	r2, r3
 800f85a:	4b66      	ldr	r3, [pc, #408]	; (800f9f4 <tcp_receive+0xcf8>)
 800f85c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	7d1b      	ldrb	r3, [r3, #20]
 800f862:	2b04      	cmp	r3, #4
 800f864:	d102      	bne.n	800f86c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	2207      	movs	r2, #7
 800f86a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800f86c:	68bb      	ldr	r3, [r7, #8]
 800f86e:	681a      	ldr	r2, [r3, #0]
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800f874:	68b8      	ldr	r0, [r7, #8]
 800f876:	f7fd fbd6 	bl	800d026 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d008      	beq.n	800f894 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f886:	68db      	ldr	r3, [r3, #12]
 800f888:	685a      	ldr	r2, [r3, #4]
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800f88e:	429a      	cmp	r2, r3
 800f890:	f43f af43 	beq.w	800f71a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	8b5b      	ldrh	r3, [r3, #26]
 800f898:	f003 0301 	and.w	r3, r3, #1
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d00e      	beq.n	800f8be <tcp_receive+0xbc2>
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	8b5b      	ldrh	r3, [r3, #26]
 800f8a4:	f023 0301 	bic.w	r3, r3, #1
 800f8a8:	b29a      	uxth	r2, r3
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	835a      	strh	r2, [r3, #26]
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	8b5b      	ldrh	r3, [r3, #26]
 800f8b2:	f043 0302 	orr.w	r3, r3, #2
 800f8b6:	b29a      	uxth	r2, r3
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f8bc:	e188      	b.n	800fbd0 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	8b5b      	ldrh	r3, [r3, #26]
 800f8c2:	f043 0301 	orr.w	r3, r3, #1
 800f8c6:	b29a      	uxth	r2, r3
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f8cc:	e180      	b.n	800fbd0 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d106      	bne.n	800f8e4 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800f8d6:	4848      	ldr	r0, [pc, #288]	; (800f9f8 <tcp_receive+0xcfc>)
 800f8d8:	f7fd fbbe 	bl	800d058 <tcp_seg_copy>
 800f8dc:	4602      	mov	r2, r0
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	675a      	str	r2, [r3, #116]	; 0x74
 800f8e2:	e16d      	b.n	800fbc0 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800f8e4:	2300      	movs	r3, #0
 800f8e6:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f8ec:	63bb      	str	r3, [r7, #56]	; 0x38
 800f8ee:	e157      	b.n	800fba0 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800f8f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8f2:	68db      	ldr	r3, [r3, #12]
 800f8f4:	685a      	ldr	r2, [r3, #4]
 800f8f6:	4b41      	ldr	r3, [pc, #260]	; (800f9fc <tcp_receive+0xd00>)
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	429a      	cmp	r2, r3
 800f8fc:	d11d      	bne.n	800f93a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800f8fe:	4b3e      	ldr	r3, [pc, #248]	; (800f9f8 <tcp_receive+0xcfc>)
 800f900:	891a      	ldrh	r2, [r3, #8]
 800f902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f904:	891b      	ldrh	r3, [r3, #8]
 800f906:	429a      	cmp	r2, r3
 800f908:	f240 814f 	bls.w	800fbaa <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f90c:	483a      	ldr	r0, [pc, #232]	; (800f9f8 <tcp_receive+0xcfc>)
 800f90e:	f7fd fba3 	bl	800d058 <tcp_seg_copy>
 800f912:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800f914:	697b      	ldr	r3, [r7, #20]
 800f916:	2b00      	cmp	r3, #0
 800f918:	f000 8149 	beq.w	800fbae <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800f91c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d003      	beq.n	800f92a <tcp_receive+0xc2e>
                    prev->next = cseg;
 800f922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f924:	697a      	ldr	r2, [r7, #20]
 800f926:	601a      	str	r2, [r3, #0]
 800f928:	e002      	b.n	800f930 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	697a      	ldr	r2, [r7, #20]
 800f92e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800f930:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f932:	6978      	ldr	r0, [r7, #20]
 800f934:	f7ff f8de 	bl	800eaf4 <tcp_oos_insert_segment>
                }
                break;
 800f938:	e139      	b.n	800fbae <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800f93a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d117      	bne.n	800f970 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800f940:	4b2e      	ldr	r3, [pc, #184]	; (800f9fc <tcp_receive+0xd00>)
 800f942:	681a      	ldr	r2, [r3, #0]
 800f944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f946:	68db      	ldr	r3, [r3, #12]
 800f948:	685b      	ldr	r3, [r3, #4]
 800f94a:	1ad3      	subs	r3, r2, r3
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	da57      	bge.n	800fa00 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f950:	4829      	ldr	r0, [pc, #164]	; (800f9f8 <tcp_receive+0xcfc>)
 800f952:	f7fd fb81 	bl	800d058 <tcp_seg_copy>
 800f956:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800f958:	69bb      	ldr	r3, [r7, #24]
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	f000 8129 	beq.w	800fbb2 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	69ba      	ldr	r2, [r7, #24]
 800f964:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800f966:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f968:	69b8      	ldr	r0, [r7, #24]
 800f96a:	f7ff f8c3 	bl	800eaf4 <tcp_oos_insert_segment>
                  }
                  break;
 800f96e:	e120      	b.n	800fbb2 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800f970:	4b22      	ldr	r3, [pc, #136]	; (800f9fc <tcp_receive+0xd00>)
 800f972:	681a      	ldr	r2, [r3, #0]
 800f974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f976:	68db      	ldr	r3, [r3, #12]
 800f978:	685b      	ldr	r3, [r3, #4]
 800f97a:	1ad3      	subs	r3, r2, r3
 800f97c:	3b01      	subs	r3, #1
 800f97e:	2b00      	cmp	r3, #0
 800f980:	db3e      	blt.n	800fa00 <tcp_receive+0xd04>
 800f982:	4b1e      	ldr	r3, [pc, #120]	; (800f9fc <tcp_receive+0xd00>)
 800f984:	681a      	ldr	r2, [r3, #0]
 800f986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f988:	68db      	ldr	r3, [r3, #12]
 800f98a:	685b      	ldr	r3, [r3, #4]
 800f98c:	1ad3      	subs	r3, r2, r3
 800f98e:	3301      	adds	r3, #1
 800f990:	2b00      	cmp	r3, #0
 800f992:	dc35      	bgt.n	800fa00 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f994:	4818      	ldr	r0, [pc, #96]	; (800f9f8 <tcp_receive+0xcfc>)
 800f996:	f7fd fb5f 	bl	800d058 <tcp_seg_copy>
 800f99a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800f99c:	69fb      	ldr	r3, [r7, #28]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	f000 8109 	beq.w	800fbb6 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800f9a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9a6:	68db      	ldr	r3, [r3, #12]
 800f9a8:	685b      	ldr	r3, [r3, #4]
 800f9aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f9ac:	8912      	ldrh	r2, [r2, #8]
 800f9ae:	441a      	add	r2, r3
 800f9b0:	4b12      	ldr	r3, [pc, #72]	; (800f9fc <tcp_receive+0xd00>)
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	1ad3      	subs	r3, r2, r3
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	dd12      	ble.n	800f9e0 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800f9ba:	4b10      	ldr	r3, [pc, #64]	; (800f9fc <tcp_receive+0xd00>)
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	b29a      	uxth	r2, r3
 800f9c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9c2:	68db      	ldr	r3, [r3, #12]
 800f9c4:	685b      	ldr	r3, [r3, #4]
 800f9c6:	b29b      	uxth	r3, r3
 800f9c8:	1ad3      	subs	r3, r2, r3
 800f9ca:	b29a      	uxth	r2, r3
 800f9cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9ce:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800f9d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9d2:	685a      	ldr	r2, [r3, #4]
 800f9d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9d6:	891b      	ldrh	r3, [r3, #8]
 800f9d8:	4619      	mov	r1, r3
 800f9da:	4610      	mov	r0, r2
 800f9dc:	f7fb ff1e 	bl	800b81c <pbuf_realloc>
                    }
                    prev->next = cseg;
 800f9e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9e2:	69fa      	ldr	r2, [r7, #28]
 800f9e4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800f9e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f9e8:	69f8      	ldr	r0, [r7, #28]
 800f9ea:	f7ff f883 	bl	800eaf4 <tcp_oos_insert_segment>
                  }
                  break;
 800f9ee:	e0e2      	b.n	800fbb6 <tcp_receive+0xeba>
 800f9f0:	20004bf8 	.word	0x20004bf8
 800f9f4:	20004bf5 	.word	0x20004bf5
 800f9f8:	20004bc8 	.word	0x20004bc8
 800f9fc:	20004be8 	.word	0x20004be8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800fa00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa02:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800fa04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	f040 80c6 	bne.w	800fb9a <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800fa0e:	4b80      	ldr	r3, [pc, #512]	; (800fc10 <tcp_receive+0xf14>)
 800fa10:	681a      	ldr	r2, [r3, #0]
 800fa12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa14:	68db      	ldr	r3, [r3, #12]
 800fa16:	685b      	ldr	r3, [r3, #4]
 800fa18:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	f340 80bd 	ble.w	800fb9a <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800fa20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa22:	68db      	ldr	r3, [r3, #12]
 800fa24:	899b      	ldrh	r3, [r3, #12]
 800fa26:	b29b      	uxth	r3, r3
 800fa28:	4618      	mov	r0, r3
 800fa2a:	f7fa fcd1 	bl	800a3d0 <lwip_htons>
 800fa2e:	4603      	mov	r3, r0
 800fa30:	b2db      	uxtb	r3, r3
 800fa32:	f003 0301 	and.w	r3, r3, #1
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	f040 80bf 	bne.w	800fbba <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800fa3c:	4875      	ldr	r0, [pc, #468]	; (800fc14 <tcp_receive+0xf18>)
 800fa3e:	f7fd fb0b 	bl	800d058 <tcp_seg_copy>
 800fa42:	4602      	mov	r2, r0
 800fa44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa46:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800fa48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	f000 80b6 	beq.w	800fbbe <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800fa52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa54:	68db      	ldr	r3, [r3, #12]
 800fa56:	685b      	ldr	r3, [r3, #4]
 800fa58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fa5a:	8912      	ldrh	r2, [r2, #8]
 800fa5c:	441a      	add	r2, r3
 800fa5e:	4b6c      	ldr	r3, [pc, #432]	; (800fc10 <tcp_receive+0xf14>)
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	1ad3      	subs	r3, r2, r3
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	dd12      	ble.n	800fa8e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800fa68:	4b69      	ldr	r3, [pc, #420]	; (800fc10 <tcp_receive+0xf14>)
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	b29a      	uxth	r2, r3
 800fa6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa70:	68db      	ldr	r3, [r3, #12]
 800fa72:	685b      	ldr	r3, [r3, #4]
 800fa74:	b29b      	uxth	r3, r3
 800fa76:	1ad3      	subs	r3, r2, r3
 800fa78:	b29a      	uxth	r2, r3
 800fa7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa7c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800fa7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa80:	685a      	ldr	r2, [r3, #4]
 800fa82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa84:	891b      	ldrh	r3, [r3, #8]
 800fa86:	4619      	mov	r1, r3
 800fa88:	4610      	mov	r0, r2
 800fa8a:	f7fb fec7 	bl	800b81c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800fa8e:	4b62      	ldr	r3, [pc, #392]	; (800fc18 <tcp_receive+0xf1c>)
 800fa90:	881b      	ldrh	r3, [r3, #0]
 800fa92:	461a      	mov	r2, r3
 800fa94:	4b5e      	ldr	r3, [pc, #376]	; (800fc10 <tcp_receive+0xf14>)
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	441a      	add	r2, r3
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa9e:	6879      	ldr	r1, [r7, #4]
 800faa0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800faa2:	440b      	add	r3, r1
 800faa4:	1ad3      	subs	r3, r2, r3
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	f340 8089 	ble.w	800fbbe <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800faac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	68db      	ldr	r3, [r3, #12]
 800fab2:	899b      	ldrh	r3, [r3, #12]
 800fab4:	b29b      	uxth	r3, r3
 800fab6:	4618      	mov	r0, r3
 800fab8:	f7fa fc8a 	bl	800a3d0 <lwip_htons>
 800fabc:	4603      	mov	r3, r0
 800fabe:	b2db      	uxtb	r3, r3
 800fac0:	f003 0301 	and.w	r3, r3, #1
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d022      	beq.n	800fb0e <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800fac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	68db      	ldr	r3, [r3, #12]
 800face:	899b      	ldrh	r3, [r3, #12]
 800fad0:	b29b      	uxth	r3, r3
 800fad2:	b21b      	sxth	r3, r3
 800fad4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800fad8:	b21c      	sxth	r4, r3
 800fada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	68db      	ldr	r3, [r3, #12]
 800fae0:	899b      	ldrh	r3, [r3, #12]
 800fae2:	b29b      	uxth	r3, r3
 800fae4:	4618      	mov	r0, r3
 800fae6:	f7fa fc73 	bl	800a3d0 <lwip_htons>
 800faea:	4603      	mov	r3, r0
 800faec:	b2db      	uxtb	r3, r3
 800faee:	b29b      	uxth	r3, r3
 800faf0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800faf4:	b29b      	uxth	r3, r3
 800faf6:	4618      	mov	r0, r3
 800faf8:	f7fa fc6a 	bl	800a3d0 <lwip_htons>
 800fafc:	4603      	mov	r3, r0
 800fafe:	b21b      	sxth	r3, r3
 800fb00:	4323      	orrs	r3, r4
 800fb02:	b21a      	sxth	r2, r3
 800fb04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	68db      	ldr	r3, [r3, #12]
 800fb0a:	b292      	uxth	r2, r2
 800fb0c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb12:	b29a      	uxth	r2, r3
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fb18:	4413      	add	r3, r2
 800fb1a:	b299      	uxth	r1, r3
 800fb1c:	4b3c      	ldr	r3, [pc, #240]	; (800fc10 <tcp_receive+0xf14>)
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	b29a      	uxth	r2, r3
 800fb22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	1a8a      	subs	r2, r1, r2
 800fb28:	b292      	uxth	r2, r2
 800fb2a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800fb2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	685a      	ldr	r2, [r3, #4]
 800fb32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	891b      	ldrh	r3, [r3, #8]
 800fb38:	4619      	mov	r1, r3
 800fb3a:	4610      	mov	r0, r2
 800fb3c:	f7fb fe6e 	bl	800b81c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800fb40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	891c      	ldrh	r4, [r3, #8]
 800fb46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	68db      	ldr	r3, [r3, #12]
 800fb4c:	899b      	ldrh	r3, [r3, #12]
 800fb4e:	b29b      	uxth	r3, r3
 800fb50:	4618      	mov	r0, r3
 800fb52:	f7fa fc3d 	bl	800a3d0 <lwip_htons>
 800fb56:	4603      	mov	r3, r0
 800fb58:	b2db      	uxtb	r3, r3
 800fb5a:	f003 0303 	and.w	r3, r3, #3
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d001      	beq.n	800fb66 <tcp_receive+0xe6a>
 800fb62:	2301      	movs	r3, #1
 800fb64:	e000      	b.n	800fb68 <tcp_receive+0xe6c>
 800fb66:	2300      	movs	r3, #0
 800fb68:	4423      	add	r3, r4
 800fb6a:	b29a      	uxth	r2, r3
 800fb6c:	4b2a      	ldr	r3, [pc, #168]	; (800fc18 <tcp_receive+0xf1c>)
 800fb6e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800fb70:	4b29      	ldr	r3, [pc, #164]	; (800fc18 <tcp_receive+0xf1c>)
 800fb72:	881b      	ldrh	r3, [r3, #0]
 800fb74:	461a      	mov	r2, r3
 800fb76:	4b26      	ldr	r3, [pc, #152]	; (800fc10 <tcp_receive+0xf14>)
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	441a      	add	r2, r3
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb80:	6879      	ldr	r1, [r7, #4]
 800fb82:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fb84:	440b      	add	r3, r1
 800fb86:	429a      	cmp	r2, r3
 800fb88:	d019      	beq.n	800fbbe <tcp_receive+0xec2>
 800fb8a:	4b24      	ldr	r3, [pc, #144]	; (800fc1c <tcp_receive+0xf20>)
 800fb8c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800fb90:	4923      	ldr	r1, [pc, #140]	; (800fc20 <tcp_receive+0xf24>)
 800fb92:	4824      	ldr	r0, [pc, #144]	; (800fc24 <tcp_receive+0xf28>)
 800fb94:	f008 fb4e 	bl	8018234 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800fb98:	e011      	b.n	800fbbe <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800fb9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	63bb      	str	r3, [r7, #56]	; 0x38
 800fba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	f47f aea4 	bne.w	800f8f0 <tcp_receive+0xbf4>
 800fba8:	e00a      	b.n	800fbc0 <tcp_receive+0xec4>
                break;
 800fbaa:	bf00      	nop
 800fbac:	e008      	b.n	800fbc0 <tcp_receive+0xec4>
                break;
 800fbae:	bf00      	nop
 800fbb0:	e006      	b.n	800fbc0 <tcp_receive+0xec4>
                  break;
 800fbb2:	bf00      	nop
 800fbb4:	e004      	b.n	800fbc0 <tcp_receive+0xec4>
                  break;
 800fbb6:	bf00      	nop
 800fbb8:	e002      	b.n	800fbc0 <tcp_receive+0xec4>
                  break;
 800fbba:	bf00      	nop
 800fbbc:	e000      	b.n	800fbc0 <tcp_receive+0xec4>
                break;
 800fbbe:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800fbc0:	6878      	ldr	r0, [r7, #4]
 800fbc2:	f001 fa33 	bl	801102c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800fbc6:	e003      	b.n	800fbd0 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800fbc8:	6878      	ldr	r0, [r7, #4]
 800fbca:	f001 fa2f 	bl	801102c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fbce:	e01a      	b.n	800fc06 <tcp_receive+0xf0a>
 800fbd0:	e019      	b.n	800fc06 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800fbd2:	4b0f      	ldr	r3, [pc, #60]	; (800fc10 <tcp_receive+0xf14>)
 800fbd4:	681a      	ldr	r2, [r3, #0]
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbda:	1ad3      	subs	r3, r2, r3
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	db0a      	blt.n	800fbf6 <tcp_receive+0xefa>
 800fbe0:	4b0b      	ldr	r3, [pc, #44]	; (800fc10 <tcp_receive+0xf14>)
 800fbe2:	681a      	ldr	r2, [r3, #0]
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbe8:	6879      	ldr	r1, [r7, #4]
 800fbea:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fbec:	440b      	add	r3, r1
 800fbee:	1ad3      	subs	r3, r2, r3
 800fbf0:	3301      	adds	r3, #1
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	dd07      	ble.n	800fc06 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	8b5b      	ldrh	r3, [r3, #26]
 800fbfa:	f043 0302 	orr.w	r3, r3, #2
 800fbfe:	b29a      	uxth	r2, r3
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800fc04:	e7ff      	b.n	800fc06 <tcp_receive+0xf0a>
 800fc06:	bf00      	nop
 800fc08:	3750      	adds	r7, #80	; 0x50
 800fc0a:	46bd      	mov	sp, r7
 800fc0c:	bdb0      	pop	{r4, r5, r7, pc}
 800fc0e:	bf00      	nop
 800fc10:	20004be8 	.word	0x20004be8
 800fc14:	20004bc8 	.word	0x20004bc8
 800fc18:	20004bf2 	.word	0x20004bf2
 800fc1c:	08019dd8 	.word	0x08019dd8
 800fc20:	0801a180 	.word	0x0801a180
 800fc24:	08019e24 	.word	0x08019e24

0800fc28 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800fc28:	b480      	push	{r7}
 800fc2a:	b083      	sub	sp, #12
 800fc2c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800fc2e:	4b15      	ldr	r3, [pc, #84]	; (800fc84 <tcp_get_next_optbyte+0x5c>)
 800fc30:	881b      	ldrh	r3, [r3, #0]
 800fc32:	1c5a      	adds	r2, r3, #1
 800fc34:	b291      	uxth	r1, r2
 800fc36:	4a13      	ldr	r2, [pc, #76]	; (800fc84 <tcp_get_next_optbyte+0x5c>)
 800fc38:	8011      	strh	r1, [r2, #0]
 800fc3a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800fc3c:	4b12      	ldr	r3, [pc, #72]	; (800fc88 <tcp_get_next_optbyte+0x60>)
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d004      	beq.n	800fc4e <tcp_get_next_optbyte+0x26>
 800fc44:	4b11      	ldr	r3, [pc, #68]	; (800fc8c <tcp_get_next_optbyte+0x64>)
 800fc46:	881b      	ldrh	r3, [r3, #0]
 800fc48:	88fa      	ldrh	r2, [r7, #6]
 800fc4a:	429a      	cmp	r2, r3
 800fc4c:	d208      	bcs.n	800fc60 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800fc4e:	4b10      	ldr	r3, [pc, #64]	; (800fc90 <tcp_get_next_optbyte+0x68>)
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	3314      	adds	r3, #20
 800fc54:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800fc56:	88fb      	ldrh	r3, [r7, #6]
 800fc58:	683a      	ldr	r2, [r7, #0]
 800fc5a:	4413      	add	r3, r2
 800fc5c:	781b      	ldrb	r3, [r3, #0]
 800fc5e:	e00b      	b.n	800fc78 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800fc60:	88fb      	ldrh	r3, [r7, #6]
 800fc62:	b2da      	uxtb	r2, r3
 800fc64:	4b09      	ldr	r3, [pc, #36]	; (800fc8c <tcp_get_next_optbyte+0x64>)
 800fc66:	881b      	ldrh	r3, [r3, #0]
 800fc68:	b2db      	uxtb	r3, r3
 800fc6a:	1ad3      	subs	r3, r2, r3
 800fc6c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800fc6e:	4b06      	ldr	r3, [pc, #24]	; (800fc88 <tcp_get_next_optbyte+0x60>)
 800fc70:	681a      	ldr	r2, [r3, #0]
 800fc72:	797b      	ldrb	r3, [r7, #5]
 800fc74:	4413      	add	r3, r2
 800fc76:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fc78:	4618      	mov	r0, r3
 800fc7a:	370c      	adds	r7, #12
 800fc7c:	46bd      	mov	sp, r7
 800fc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc82:	4770      	bx	lr
 800fc84:	20004be4 	.word	0x20004be4
 800fc88:	20004be0 	.word	0x20004be0
 800fc8c:	20004bde 	.word	0x20004bde
 800fc90:	20004bd8 	.word	0x20004bd8

0800fc94 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800fc94:	b580      	push	{r7, lr}
 800fc96:	b084      	sub	sp, #16
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d106      	bne.n	800fcb0 <tcp_parseopt+0x1c>
 800fca2:	4b32      	ldr	r3, [pc, #200]	; (800fd6c <tcp_parseopt+0xd8>)
 800fca4:	f240 727d 	movw	r2, #1917	; 0x77d
 800fca8:	4931      	ldr	r1, [pc, #196]	; (800fd70 <tcp_parseopt+0xdc>)
 800fcaa:	4832      	ldr	r0, [pc, #200]	; (800fd74 <tcp_parseopt+0xe0>)
 800fcac:	f008 fac2 	bl	8018234 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800fcb0:	4b31      	ldr	r3, [pc, #196]	; (800fd78 <tcp_parseopt+0xe4>)
 800fcb2:	881b      	ldrh	r3, [r3, #0]
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d055      	beq.n	800fd64 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800fcb8:	4b30      	ldr	r3, [pc, #192]	; (800fd7c <tcp_parseopt+0xe8>)
 800fcba:	2200      	movs	r2, #0
 800fcbc:	801a      	strh	r2, [r3, #0]
 800fcbe:	e045      	b.n	800fd4c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800fcc0:	f7ff ffb2 	bl	800fc28 <tcp_get_next_optbyte>
 800fcc4:	4603      	mov	r3, r0
 800fcc6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800fcc8:	7bfb      	ldrb	r3, [r7, #15]
 800fcca:	2b02      	cmp	r3, #2
 800fccc:	d006      	beq.n	800fcdc <tcp_parseopt+0x48>
 800fcce:	2b02      	cmp	r3, #2
 800fcd0:	dc2b      	bgt.n	800fd2a <tcp_parseopt+0x96>
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d041      	beq.n	800fd5a <tcp_parseopt+0xc6>
 800fcd6:	2b01      	cmp	r3, #1
 800fcd8:	d127      	bne.n	800fd2a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800fcda:	e037      	b.n	800fd4c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800fcdc:	f7ff ffa4 	bl	800fc28 <tcp_get_next_optbyte>
 800fce0:	4603      	mov	r3, r0
 800fce2:	2b04      	cmp	r3, #4
 800fce4:	d13b      	bne.n	800fd5e <tcp_parseopt+0xca>
 800fce6:	4b25      	ldr	r3, [pc, #148]	; (800fd7c <tcp_parseopt+0xe8>)
 800fce8:	881b      	ldrh	r3, [r3, #0]
 800fcea:	3301      	adds	r3, #1
 800fcec:	4a22      	ldr	r2, [pc, #136]	; (800fd78 <tcp_parseopt+0xe4>)
 800fcee:	8812      	ldrh	r2, [r2, #0]
 800fcf0:	4293      	cmp	r3, r2
 800fcf2:	da34      	bge.n	800fd5e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800fcf4:	f7ff ff98 	bl	800fc28 <tcp_get_next_optbyte>
 800fcf8:	4603      	mov	r3, r0
 800fcfa:	b29b      	uxth	r3, r3
 800fcfc:	021b      	lsls	r3, r3, #8
 800fcfe:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800fd00:	f7ff ff92 	bl	800fc28 <tcp_get_next_optbyte>
 800fd04:	4603      	mov	r3, r0
 800fd06:	b29a      	uxth	r2, r3
 800fd08:	89bb      	ldrh	r3, [r7, #12]
 800fd0a:	4313      	orrs	r3, r2
 800fd0c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800fd0e:	89bb      	ldrh	r3, [r7, #12]
 800fd10:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800fd14:	d804      	bhi.n	800fd20 <tcp_parseopt+0x8c>
 800fd16:	89bb      	ldrh	r3, [r7, #12]
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d001      	beq.n	800fd20 <tcp_parseopt+0x8c>
 800fd1c:	89ba      	ldrh	r2, [r7, #12]
 800fd1e:	e001      	b.n	800fd24 <tcp_parseopt+0x90>
 800fd20:	f44f 7206 	mov.w	r2, #536	; 0x218
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800fd28:	e010      	b.n	800fd4c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800fd2a:	f7ff ff7d 	bl	800fc28 <tcp_get_next_optbyte>
 800fd2e:	4603      	mov	r3, r0
 800fd30:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800fd32:	7afb      	ldrb	r3, [r7, #11]
 800fd34:	2b01      	cmp	r3, #1
 800fd36:	d914      	bls.n	800fd62 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800fd38:	7afb      	ldrb	r3, [r7, #11]
 800fd3a:	b29a      	uxth	r2, r3
 800fd3c:	4b0f      	ldr	r3, [pc, #60]	; (800fd7c <tcp_parseopt+0xe8>)
 800fd3e:	881b      	ldrh	r3, [r3, #0]
 800fd40:	4413      	add	r3, r2
 800fd42:	b29b      	uxth	r3, r3
 800fd44:	3b02      	subs	r3, #2
 800fd46:	b29a      	uxth	r2, r3
 800fd48:	4b0c      	ldr	r3, [pc, #48]	; (800fd7c <tcp_parseopt+0xe8>)
 800fd4a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800fd4c:	4b0b      	ldr	r3, [pc, #44]	; (800fd7c <tcp_parseopt+0xe8>)
 800fd4e:	881a      	ldrh	r2, [r3, #0]
 800fd50:	4b09      	ldr	r3, [pc, #36]	; (800fd78 <tcp_parseopt+0xe4>)
 800fd52:	881b      	ldrh	r3, [r3, #0]
 800fd54:	429a      	cmp	r2, r3
 800fd56:	d3b3      	bcc.n	800fcc0 <tcp_parseopt+0x2c>
 800fd58:	e004      	b.n	800fd64 <tcp_parseopt+0xd0>
          return;
 800fd5a:	bf00      	nop
 800fd5c:	e002      	b.n	800fd64 <tcp_parseopt+0xd0>
            return;
 800fd5e:	bf00      	nop
 800fd60:	e000      	b.n	800fd64 <tcp_parseopt+0xd0>
            return;
 800fd62:	bf00      	nop
      }
    }
  }
}
 800fd64:	3710      	adds	r7, #16
 800fd66:	46bd      	mov	sp, r7
 800fd68:	bd80      	pop	{r7, pc}
 800fd6a:	bf00      	nop
 800fd6c:	08019dd8 	.word	0x08019dd8
 800fd70:	0801a23c 	.word	0x0801a23c
 800fd74:	08019e24 	.word	0x08019e24
 800fd78:	20004bdc 	.word	0x20004bdc
 800fd7c:	20004be4 	.word	0x20004be4

0800fd80 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800fd80:	b480      	push	{r7}
 800fd82:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800fd84:	4b05      	ldr	r3, [pc, #20]	; (800fd9c <tcp_trigger_input_pcb_close+0x1c>)
 800fd86:	781b      	ldrb	r3, [r3, #0]
 800fd88:	f043 0310 	orr.w	r3, r3, #16
 800fd8c:	b2da      	uxtb	r2, r3
 800fd8e:	4b03      	ldr	r3, [pc, #12]	; (800fd9c <tcp_trigger_input_pcb_close+0x1c>)
 800fd90:	701a      	strb	r2, [r3, #0]
}
 800fd92:	bf00      	nop
 800fd94:	46bd      	mov	sp, r7
 800fd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd9a:	4770      	bx	lr
 800fd9c:	20004bf5 	.word	0x20004bf5

0800fda0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800fda0:	b580      	push	{r7, lr}
 800fda2:	b084      	sub	sp, #16
 800fda4:	af00      	add	r7, sp, #0
 800fda6:	60f8      	str	r0, [r7, #12]
 800fda8:	60b9      	str	r1, [r7, #8]
 800fdaa:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d00a      	beq.n	800fdc8 <tcp_route+0x28>
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	7a1b      	ldrb	r3, [r3, #8]
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d006      	beq.n	800fdc8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	7a1b      	ldrb	r3, [r3, #8]
 800fdbe:	4618      	mov	r0, r3
 800fdc0:	f7fb fb24 	bl	800b40c <netif_get_by_index>
 800fdc4:	4603      	mov	r3, r0
 800fdc6:	e003      	b.n	800fdd0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800fdc8:	6878      	ldr	r0, [r7, #4]
 800fdca:	f002 fead 	bl	8012b28 <ip4_route>
 800fdce:	4603      	mov	r3, r0
  }
}
 800fdd0:	4618      	mov	r0, r3
 800fdd2:	3710      	adds	r7, #16
 800fdd4:	46bd      	mov	sp, r7
 800fdd6:	bd80      	pop	{r7, pc}

0800fdd8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800fdd8:	b590      	push	{r4, r7, lr}
 800fdda:	b087      	sub	sp, #28
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	60f8      	str	r0, [r7, #12]
 800fde0:	60b9      	str	r1, [r7, #8]
 800fde2:	603b      	str	r3, [r7, #0]
 800fde4:	4613      	mov	r3, r2
 800fde6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d105      	bne.n	800fdfa <tcp_create_segment+0x22>
 800fdee:	4b44      	ldr	r3, [pc, #272]	; (800ff00 <tcp_create_segment+0x128>)
 800fdf0:	22a3      	movs	r2, #163	; 0xa3
 800fdf2:	4944      	ldr	r1, [pc, #272]	; (800ff04 <tcp_create_segment+0x12c>)
 800fdf4:	4844      	ldr	r0, [pc, #272]	; (800ff08 <tcp_create_segment+0x130>)
 800fdf6:	f008 fa1d 	bl	8018234 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800fdfa:	68bb      	ldr	r3, [r7, #8]
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d105      	bne.n	800fe0c <tcp_create_segment+0x34>
 800fe00:	4b3f      	ldr	r3, [pc, #252]	; (800ff00 <tcp_create_segment+0x128>)
 800fe02:	22a4      	movs	r2, #164	; 0xa4
 800fe04:	4941      	ldr	r1, [pc, #260]	; (800ff0c <tcp_create_segment+0x134>)
 800fe06:	4840      	ldr	r0, [pc, #256]	; (800ff08 <tcp_create_segment+0x130>)
 800fe08:	f008 fa14 	bl	8018234 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800fe0c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fe10:	009b      	lsls	r3, r3, #2
 800fe12:	b2db      	uxtb	r3, r3
 800fe14:	f003 0304 	and.w	r3, r3, #4
 800fe18:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800fe1a:	2003      	movs	r0, #3
 800fe1c:	f7fa ff8e 	bl	800ad3c <memp_malloc>
 800fe20:	6138      	str	r0, [r7, #16]
 800fe22:	693b      	ldr	r3, [r7, #16]
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d104      	bne.n	800fe32 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800fe28:	68b8      	ldr	r0, [r7, #8]
 800fe2a:	f7fb fe7d 	bl	800bb28 <pbuf_free>
    return NULL;
 800fe2e:	2300      	movs	r3, #0
 800fe30:	e061      	b.n	800fef6 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800fe32:	693b      	ldr	r3, [r7, #16]
 800fe34:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800fe38:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800fe3a:	693b      	ldr	r3, [r7, #16]
 800fe3c:	2200      	movs	r2, #0
 800fe3e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800fe40:	693b      	ldr	r3, [r7, #16]
 800fe42:	68ba      	ldr	r2, [r7, #8]
 800fe44:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800fe46:	68bb      	ldr	r3, [r7, #8]
 800fe48:	891a      	ldrh	r2, [r3, #8]
 800fe4a:	7dfb      	ldrb	r3, [r7, #23]
 800fe4c:	b29b      	uxth	r3, r3
 800fe4e:	429a      	cmp	r2, r3
 800fe50:	d205      	bcs.n	800fe5e <tcp_create_segment+0x86>
 800fe52:	4b2b      	ldr	r3, [pc, #172]	; (800ff00 <tcp_create_segment+0x128>)
 800fe54:	22b0      	movs	r2, #176	; 0xb0
 800fe56:	492e      	ldr	r1, [pc, #184]	; (800ff10 <tcp_create_segment+0x138>)
 800fe58:	482b      	ldr	r0, [pc, #172]	; (800ff08 <tcp_create_segment+0x130>)
 800fe5a:	f008 f9eb 	bl	8018234 <iprintf>
  seg->len = p->tot_len - optlen;
 800fe5e:	68bb      	ldr	r3, [r7, #8]
 800fe60:	891a      	ldrh	r2, [r3, #8]
 800fe62:	7dfb      	ldrb	r3, [r7, #23]
 800fe64:	b29b      	uxth	r3, r3
 800fe66:	1ad3      	subs	r3, r2, r3
 800fe68:	b29a      	uxth	r2, r3
 800fe6a:	693b      	ldr	r3, [r7, #16]
 800fe6c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800fe6e:	2114      	movs	r1, #20
 800fe70:	68b8      	ldr	r0, [r7, #8]
 800fe72:	f7fb fdc3 	bl	800b9fc <pbuf_add_header>
 800fe76:	4603      	mov	r3, r0
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d004      	beq.n	800fe86 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800fe7c:	6938      	ldr	r0, [r7, #16]
 800fe7e:	f7fd f8d2 	bl	800d026 <tcp_seg_free>
    return NULL;
 800fe82:	2300      	movs	r3, #0
 800fe84:	e037      	b.n	800fef6 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800fe86:	693b      	ldr	r3, [r7, #16]
 800fe88:	685b      	ldr	r3, [r3, #4]
 800fe8a:	685a      	ldr	r2, [r3, #4]
 800fe8c:	693b      	ldr	r3, [r7, #16]
 800fe8e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	8ada      	ldrh	r2, [r3, #22]
 800fe94:	693b      	ldr	r3, [r7, #16]
 800fe96:	68dc      	ldr	r4, [r3, #12]
 800fe98:	4610      	mov	r0, r2
 800fe9a:	f7fa fa99 	bl	800a3d0 <lwip_htons>
 800fe9e:	4603      	mov	r3, r0
 800fea0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	8b1a      	ldrh	r2, [r3, #24]
 800fea6:	693b      	ldr	r3, [r7, #16]
 800fea8:	68dc      	ldr	r4, [r3, #12]
 800feaa:	4610      	mov	r0, r2
 800feac:	f7fa fa90 	bl	800a3d0 <lwip_htons>
 800feb0:	4603      	mov	r3, r0
 800feb2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800feb4:	693b      	ldr	r3, [r7, #16]
 800feb6:	68dc      	ldr	r4, [r3, #12]
 800feb8:	6838      	ldr	r0, [r7, #0]
 800feba:	f7fa fa9e 	bl	800a3fa <lwip_htonl>
 800febe:	4603      	mov	r3, r0
 800fec0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800fec2:	7dfb      	ldrb	r3, [r7, #23]
 800fec4:	089b      	lsrs	r3, r3, #2
 800fec6:	b2db      	uxtb	r3, r3
 800fec8:	b29b      	uxth	r3, r3
 800feca:	3305      	adds	r3, #5
 800fecc:	b29b      	uxth	r3, r3
 800fece:	031b      	lsls	r3, r3, #12
 800fed0:	b29a      	uxth	r2, r3
 800fed2:	79fb      	ldrb	r3, [r7, #7]
 800fed4:	b29b      	uxth	r3, r3
 800fed6:	4313      	orrs	r3, r2
 800fed8:	b29a      	uxth	r2, r3
 800feda:	693b      	ldr	r3, [r7, #16]
 800fedc:	68dc      	ldr	r4, [r3, #12]
 800fede:	4610      	mov	r0, r2
 800fee0:	f7fa fa76 	bl	800a3d0 <lwip_htons>
 800fee4:	4603      	mov	r3, r0
 800fee6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800fee8:	693b      	ldr	r3, [r7, #16]
 800feea:	68db      	ldr	r3, [r3, #12]
 800feec:	2200      	movs	r2, #0
 800feee:	749a      	strb	r2, [r3, #18]
 800fef0:	2200      	movs	r2, #0
 800fef2:	74da      	strb	r2, [r3, #19]
  return seg;
 800fef4:	693b      	ldr	r3, [r7, #16]
}
 800fef6:	4618      	mov	r0, r3
 800fef8:	371c      	adds	r7, #28
 800fefa:	46bd      	mov	sp, r7
 800fefc:	bd90      	pop	{r4, r7, pc}
 800fefe:	bf00      	nop
 800ff00:	0801a258 	.word	0x0801a258
 800ff04:	0801a28c 	.word	0x0801a28c
 800ff08:	0801a2ac 	.word	0x0801a2ac
 800ff0c:	0801a2d4 	.word	0x0801a2d4
 800ff10:	0801a2f8 	.word	0x0801a2f8

0800ff14 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800ff14:	b590      	push	{r4, r7, lr}
 800ff16:	b08b      	sub	sp, #44	; 0x2c
 800ff18:	af02      	add	r7, sp, #8
 800ff1a:	6078      	str	r0, [r7, #4]
 800ff1c:	460b      	mov	r3, r1
 800ff1e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800ff20:	2300      	movs	r3, #0
 800ff22:	61fb      	str	r3, [r7, #28]
 800ff24:	2300      	movs	r3, #0
 800ff26:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800ff28:	2300      	movs	r3, #0
 800ff2a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d106      	bne.n	800ff40 <tcp_split_unsent_seg+0x2c>
 800ff32:	4b95      	ldr	r3, [pc, #596]	; (8010188 <tcp_split_unsent_seg+0x274>)
 800ff34:	f240 324b 	movw	r2, #843	; 0x34b
 800ff38:	4994      	ldr	r1, [pc, #592]	; (801018c <tcp_split_unsent_seg+0x278>)
 800ff3a:	4895      	ldr	r0, [pc, #596]	; (8010190 <tcp_split_unsent_seg+0x27c>)
 800ff3c:	f008 f97a 	bl	8018234 <iprintf>

  useg = pcb->unsent;
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ff44:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800ff46:	697b      	ldr	r3, [r7, #20]
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d102      	bne.n	800ff52 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800ff4c:	f04f 33ff 	mov.w	r3, #4294967295
 800ff50:	e116      	b.n	8010180 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800ff52:	887b      	ldrh	r3, [r7, #2]
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d109      	bne.n	800ff6c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800ff58:	4b8b      	ldr	r3, [pc, #556]	; (8010188 <tcp_split_unsent_seg+0x274>)
 800ff5a:	f240 3253 	movw	r2, #851	; 0x353
 800ff5e:	498d      	ldr	r1, [pc, #564]	; (8010194 <tcp_split_unsent_seg+0x280>)
 800ff60:	488b      	ldr	r0, [pc, #556]	; (8010190 <tcp_split_unsent_seg+0x27c>)
 800ff62:	f008 f967 	bl	8018234 <iprintf>
    return ERR_VAL;
 800ff66:	f06f 0305 	mvn.w	r3, #5
 800ff6a:	e109      	b.n	8010180 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800ff6c:	697b      	ldr	r3, [r7, #20]
 800ff6e:	891b      	ldrh	r3, [r3, #8]
 800ff70:	887a      	ldrh	r2, [r7, #2]
 800ff72:	429a      	cmp	r2, r3
 800ff74:	d301      	bcc.n	800ff7a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800ff76:	2300      	movs	r3, #0
 800ff78:	e102      	b.n	8010180 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ff7e:	887a      	ldrh	r2, [r7, #2]
 800ff80:	429a      	cmp	r2, r3
 800ff82:	d906      	bls.n	800ff92 <tcp_split_unsent_seg+0x7e>
 800ff84:	4b80      	ldr	r3, [pc, #512]	; (8010188 <tcp_split_unsent_seg+0x274>)
 800ff86:	f240 325b 	movw	r2, #859	; 0x35b
 800ff8a:	4983      	ldr	r1, [pc, #524]	; (8010198 <tcp_split_unsent_seg+0x284>)
 800ff8c:	4880      	ldr	r0, [pc, #512]	; (8010190 <tcp_split_unsent_seg+0x27c>)
 800ff8e:	f008 f951 	bl	8018234 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800ff92:	697b      	ldr	r3, [r7, #20]
 800ff94:	891b      	ldrh	r3, [r3, #8]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d106      	bne.n	800ffa8 <tcp_split_unsent_seg+0x94>
 800ff9a:	4b7b      	ldr	r3, [pc, #492]	; (8010188 <tcp_split_unsent_seg+0x274>)
 800ff9c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800ffa0:	497e      	ldr	r1, [pc, #504]	; (801019c <tcp_split_unsent_seg+0x288>)
 800ffa2:	487b      	ldr	r0, [pc, #492]	; (8010190 <tcp_split_unsent_seg+0x27c>)
 800ffa4:	f008 f946 	bl	8018234 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800ffa8:	697b      	ldr	r3, [r7, #20]
 800ffaa:	7a9b      	ldrb	r3, [r3, #10]
 800ffac:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800ffae:	7bfb      	ldrb	r3, [r7, #15]
 800ffb0:	009b      	lsls	r3, r3, #2
 800ffb2:	b2db      	uxtb	r3, r3
 800ffb4:	f003 0304 	and.w	r3, r3, #4
 800ffb8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800ffba:	697b      	ldr	r3, [r7, #20]
 800ffbc:	891a      	ldrh	r2, [r3, #8]
 800ffbe:	887b      	ldrh	r3, [r7, #2]
 800ffc0:	1ad3      	subs	r3, r2, r3
 800ffc2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800ffc4:	7bbb      	ldrb	r3, [r7, #14]
 800ffc6:	b29a      	uxth	r2, r3
 800ffc8:	89bb      	ldrh	r3, [r7, #12]
 800ffca:	4413      	add	r3, r2
 800ffcc:	b29b      	uxth	r3, r3
 800ffce:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ffd2:	4619      	mov	r1, r3
 800ffd4:	2036      	movs	r0, #54	; 0x36
 800ffd6:	f7fb fac3 	bl	800b560 <pbuf_alloc>
 800ffda:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ffdc:	693b      	ldr	r3, [r7, #16]
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	f000 80b7 	beq.w	8010152 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800ffe4:	697b      	ldr	r3, [r7, #20]
 800ffe6:	685b      	ldr	r3, [r3, #4]
 800ffe8:	891a      	ldrh	r2, [r3, #8]
 800ffea:	697b      	ldr	r3, [r7, #20]
 800ffec:	891b      	ldrh	r3, [r3, #8]
 800ffee:	1ad3      	subs	r3, r2, r3
 800fff0:	b29a      	uxth	r2, r3
 800fff2:	887b      	ldrh	r3, [r7, #2]
 800fff4:	4413      	add	r3, r2
 800fff6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800fff8:	697b      	ldr	r3, [r7, #20]
 800fffa:	6858      	ldr	r0, [r3, #4]
 800fffc:	693b      	ldr	r3, [r7, #16]
 800fffe:	685a      	ldr	r2, [r3, #4]
 8010000:	7bbb      	ldrb	r3, [r7, #14]
 8010002:	18d1      	adds	r1, r2, r3
 8010004:	897b      	ldrh	r3, [r7, #10]
 8010006:	89ba      	ldrh	r2, [r7, #12]
 8010008:	f7fb ff84 	bl	800bf14 <pbuf_copy_partial>
 801000c:	4603      	mov	r3, r0
 801000e:	461a      	mov	r2, r3
 8010010:	89bb      	ldrh	r3, [r7, #12]
 8010012:	4293      	cmp	r3, r2
 8010014:	f040 809f 	bne.w	8010156 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8010018:	697b      	ldr	r3, [r7, #20]
 801001a:	68db      	ldr	r3, [r3, #12]
 801001c:	899b      	ldrh	r3, [r3, #12]
 801001e:	b29b      	uxth	r3, r3
 8010020:	4618      	mov	r0, r3
 8010022:	f7fa f9d5 	bl	800a3d0 <lwip_htons>
 8010026:	4603      	mov	r3, r0
 8010028:	b2db      	uxtb	r3, r3
 801002a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801002e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8010030:	2300      	movs	r3, #0
 8010032:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8010034:	7efb      	ldrb	r3, [r7, #27]
 8010036:	f003 0308 	and.w	r3, r3, #8
 801003a:	2b00      	cmp	r3, #0
 801003c:	d007      	beq.n	801004e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801003e:	7efb      	ldrb	r3, [r7, #27]
 8010040:	f023 0308 	bic.w	r3, r3, #8
 8010044:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8010046:	7ebb      	ldrb	r3, [r7, #26]
 8010048:	f043 0308 	orr.w	r3, r3, #8
 801004c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801004e:	7efb      	ldrb	r3, [r7, #27]
 8010050:	f003 0301 	and.w	r3, r3, #1
 8010054:	2b00      	cmp	r3, #0
 8010056:	d007      	beq.n	8010068 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8010058:	7efb      	ldrb	r3, [r7, #27]
 801005a:	f023 0301 	bic.w	r3, r3, #1
 801005e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8010060:	7ebb      	ldrb	r3, [r7, #26]
 8010062:	f043 0301 	orr.w	r3, r3, #1
 8010066:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8010068:	697b      	ldr	r3, [r7, #20]
 801006a:	68db      	ldr	r3, [r3, #12]
 801006c:	685b      	ldr	r3, [r3, #4]
 801006e:	4618      	mov	r0, r3
 8010070:	f7fa f9c3 	bl	800a3fa <lwip_htonl>
 8010074:	4602      	mov	r2, r0
 8010076:	887b      	ldrh	r3, [r7, #2]
 8010078:	18d1      	adds	r1, r2, r3
 801007a:	7eba      	ldrb	r2, [r7, #26]
 801007c:	7bfb      	ldrb	r3, [r7, #15]
 801007e:	9300      	str	r3, [sp, #0]
 8010080:	460b      	mov	r3, r1
 8010082:	6939      	ldr	r1, [r7, #16]
 8010084:	6878      	ldr	r0, [r7, #4]
 8010086:	f7ff fea7 	bl	800fdd8 <tcp_create_segment>
 801008a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801008c:	69fb      	ldr	r3, [r7, #28]
 801008e:	2b00      	cmp	r3, #0
 8010090:	d063      	beq.n	801015a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8010092:	697b      	ldr	r3, [r7, #20]
 8010094:	685b      	ldr	r3, [r3, #4]
 8010096:	4618      	mov	r0, r3
 8010098:	f7fb fdd4 	bl	800bc44 <pbuf_clen>
 801009c:	4603      	mov	r3, r0
 801009e:	461a      	mov	r2, r3
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80100a6:	1a9b      	subs	r3, r3, r2
 80100a8:	b29a      	uxth	r2, r3
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80100b0:	697b      	ldr	r3, [r7, #20]
 80100b2:	6858      	ldr	r0, [r3, #4]
 80100b4:	697b      	ldr	r3, [r7, #20]
 80100b6:	685b      	ldr	r3, [r3, #4]
 80100b8:	891a      	ldrh	r2, [r3, #8]
 80100ba:	89bb      	ldrh	r3, [r7, #12]
 80100bc:	1ad3      	subs	r3, r2, r3
 80100be:	b29b      	uxth	r3, r3
 80100c0:	4619      	mov	r1, r3
 80100c2:	f7fb fbab 	bl	800b81c <pbuf_realloc>
  useg->len -= remainder;
 80100c6:	697b      	ldr	r3, [r7, #20]
 80100c8:	891a      	ldrh	r2, [r3, #8]
 80100ca:	89bb      	ldrh	r3, [r7, #12]
 80100cc:	1ad3      	subs	r3, r2, r3
 80100ce:	b29a      	uxth	r2, r3
 80100d0:	697b      	ldr	r3, [r7, #20]
 80100d2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80100d4:	697b      	ldr	r3, [r7, #20]
 80100d6:	68db      	ldr	r3, [r3, #12]
 80100d8:	899b      	ldrh	r3, [r3, #12]
 80100da:	b29c      	uxth	r4, r3
 80100dc:	7efb      	ldrb	r3, [r7, #27]
 80100de:	b29b      	uxth	r3, r3
 80100e0:	4618      	mov	r0, r3
 80100e2:	f7fa f975 	bl	800a3d0 <lwip_htons>
 80100e6:	4603      	mov	r3, r0
 80100e8:	461a      	mov	r2, r3
 80100ea:	697b      	ldr	r3, [r7, #20]
 80100ec:	68db      	ldr	r3, [r3, #12]
 80100ee:	4322      	orrs	r2, r4
 80100f0:	b292      	uxth	r2, r2
 80100f2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80100f4:	697b      	ldr	r3, [r7, #20]
 80100f6:	685b      	ldr	r3, [r3, #4]
 80100f8:	4618      	mov	r0, r3
 80100fa:	f7fb fda3 	bl	800bc44 <pbuf_clen>
 80100fe:	4603      	mov	r3, r0
 8010100:	461a      	mov	r2, r3
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010108:	4413      	add	r3, r2
 801010a:	b29a      	uxth	r2, r3
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010112:	69fb      	ldr	r3, [r7, #28]
 8010114:	685b      	ldr	r3, [r3, #4]
 8010116:	4618      	mov	r0, r3
 8010118:	f7fb fd94 	bl	800bc44 <pbuf_clen>
 801011c:	4603      	mov	r3, r0
 801011e:	461a      	mov	r2, r3
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010126:	4413      	add	r3, r2
 8010128:	b29a      	uxth	r2, r3
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8010130:	697b      	ldr	r3, [r7, #20]
 8010132:	681a      	ldr	r2, [r3, #0]
 8010134:	69fb      	ldr	r3, [r7, #28]
 8010136:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8010138:	697b      	ldr	r3, [r7, #20]
 801013a:	69fa      	ldr	r2, [r7, #28]
 801013c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801013e:	69fb      	ldr	r3, [r7, #28]
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	2b00      	cmp	r3, #0
 8010144:	d103      	bne.n	801014e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	2200      	movs	r2, #0
 801014a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801014e:	2300      	movs	r3, #0
 8010150:	e016      	b.n	8010180 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8010152:	bf00      	nop
 8010154:	e002      	b.n	801015c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010156:	bf00      	nop
 8010158:	e000      	b.n	801015c <tcp_split_unsent_seg+0x248>
    goto memerr;
 801015a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801015c:	69fb      	ldr	r3, [r7, #28]
 801015e:	2b00      	cmp	r3, #0
 8010160:	d006      	beq.n	8010170 <tcp_split_unsent_seg+0x25c>
 8010162:	4b09      	ldr	r3, [pc, #36]	; (8010188 <tcp_split_unsent_seg+0x274>)
 8010164:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8010168:	490d      	ldr	r1, [pc, #52]	; (80101a0 <tcp_split_unsent_seg+0x28c>)
 801016a:	4809      	ldr	r0, [pc, #36]	; (8010190 <tcp_split_unsent_seg+0x27c>)
 801016c:	f008 f862 	bl	8018234 <iprintf>
  if (p != NULL) {
 8010170:	693b      	ldr	r3, [r7, #16]
 8010172:	2b00      	cmp	r3, #0
 8010174:	d002      	beq.n	801017c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8010176:	6938      	ldr	r0, [r7, #16]
 8010178:	f7fb fcd6 	bl	800bb28 <pbuf_free>
  }

  return ERR_MEM;
 801017c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010180:	4618      	mov	r0, r3
 8010182:	3724      	adds	r7, #36	; 0x24
 8010184:	46bd      	mov	sp, r7
 8010186:	bd90      	pop	{r4, r7, pc}
 8010188:	0801a258 	.word	0x0801a258
 801018c:	0801a5ec 	.word	0x0801a5ec
 8010190:	0801a2ac 	.word	0x0801a2ac
 8010194:	0801a610 	.word	0x0801a610
 8010198:	0801a634 	.word	0x0801a634
 801019c:	0801a644 	.word	0x0801a644
 80101a0:	0801a654 	.word	0x0801a654

080101a4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80101a4:	b590      	push	{r4, r7, lr}
 80101a6:	b085      	sub	sp, #20
 80101a8:	af00      	add	r7, sp, #0
 80101aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d106      	bne.n	80101c0 <tcp_send_fin+0x1c>
 80101b2:	4b21      	ldr	r3, [pc, #132]	; (8010238 <tcp_send_fin+0x94>)
 80101b4:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80101b8:	4920      	ldr	r1, [pc, #128]	; (801023c <tcp_send_fin+0x98>)
 80101ba:	4821      	ldr	r0, [pc, #132]	; (8010240 <tcp_send_fin+0x9c>)
 80101bc:	f008 f83a 	bl	8018234 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d02e      	beq.n	8010226 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80101cc:	60fb      	str	r3, [r7, #12]
 80101ce:	e002      	b.n	80101d6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d1f8      	bne.n	80101d0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	68db      	ldr	r3, [r3, #12]
 80101e2:	899b      	ldrh	r3, [r3, #12]
 80101e4:	b29b      	uxth	r3, r3
 80101e6:	4618      	mov	r0, r3
 80101e8:	f7fa f8f2 	bl	800a3d0 <lwip_htons>
 80101ec:	4603      	mov	r3, r0
 80101ee:	b2db      	uxtb	r3, r3
 80101f0:	f003 0307 	and.w	r3, r3, #7
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d116      	bne.n	8010226 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	68db      	ldr	r3, [r3, #12]
 80101fc:	899b      	ldrh	r3, [r3, #12]
 80101fe:	b29c      	uxth	r4, r3
 8010200:	2001      	movs	r0, #1
 8010202:	f7fa f8e5 	bl	800a3d0 <lwip_htons>
 8010206:	4603      	mov	r3, r0
 8010208:	461a      	mov	r2, r3
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	68db      	ldr	r3, [r3, #12]
 801020e:	4322      	orrs	r2, r4
 8010210:	b292      	uxth	r2, r2
 8010212:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	8b5b      	ldrh	r3, [r3, #26]
 8010218:	f043 0320 	orr.w	r3, r3, #32
 801021c:	b29a      	uxth	r2, r3
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8010222:	2300      	movs	r3, #0
 8010224:	e004      	b.n	8010230 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8010226:	2101      	movs	r1, #1
 8010228:	6878      	ldr	r0, [r7, #4]
 801022a:	f000 f80b 	bl	8010244 <tcp_enqueue_flags>
 801022e:	4603      	mov	r3, r0
}
 8010230:	4618      	mov	r0, r3
 8010232:	3714      	adds	r7, #20
 8010234:	46bd      	mov	sp, r7
 8010236:	bd90      	pop	{r4, r7, pc}
 8010238:	0801a258 	.word	0x0801a258
 801023c:	0801a660 	.word	0x0801a660
 8010240:	0801a2ac 	.word	0x0801a2ac

08010244 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8010244:	b580      	push	{r7, lr}
 8010246:	b08a      	sub	sp, #40	; 0x28
 8010248:	af02      	add	r7, sp, #8
 801024a:	6078      	str	r0, [r7, #4]
 801024c:	460b      	mov	r3, r1
 801024e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8010250:	2300      	movs	r3, #0
 8010252:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8010254:	2300      	movs	r3, #0
 8010256:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8010258:	78fb      	ldrb	r3, [r7, #3]
 801025a:	f003 0303 	and.w	r3, r3, #3
 801025e:	2b00      	cmp	r3, #0
 8010260:	d106      	bne.n	8010270 <tcp_enqueue_flags+0x2c>
 8010262:	4b67      	ldr	r3, [pc, #412]	; (8010400 <tcp_enqueue_flags+0x1bc>)
 8010264:	f240 4211 	movw	r2, #1041	; 0x411
 8010268:	4966      	ldr	r1, [pc, #408]	; (8010404 <tcp_enqueue_flags+0x1c0>)
 801026a:	4867      	ldr	r0, [pc, #412]	; (8010408 <tcp_enqueue_flags+0x1c4>)
 801026c:	f007 ffe2 	bl	8018234 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	2b00      	cmp	r3, #0
 8010274:	d106      	bne.n	8010284 <tcp_enqueue_flags+0x40>
 8010276:	4b62      	ldr	r3, [pc, #392]	; (8010400 <tcp_enqueue_flags+0x1bc>)
 8010278:	f240 4213 	movw	r2, #1043	; 0x413
 801027c:	4963      	ldr	r1, [pc, #396]	; (801040c <tcp_enqueue_flags+0x1c8>)
 801027e:	4862      	ldr	r0, [pc, #392]	; (8010408 <tcp_enqueue_flags+0x1c4>)
 8010280:	f007 ffd8 	bl	8018234 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8010284:	78fb      	ldrb	r3, [r7, #3]
 8010286:	f003 0302 	and.w	r3, r3, #2
 801028a:	2b00      	cmp	r3, #0
 801028c:	d001      	beq.n	8010292 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801028e:	2301      	movs	r3, #1
 8010290:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010292:	7ffb      	ldrb	r3, [r7, #31]
 8010294:	009b      	lsls	r3, r3, #2
 8010296:	b2db      	uxtb	r3, r3
 8010298:	f003 0304 	and.w	r3, r3, #4
 801029c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801029e:	7dfb      	ldrb	r3, [r7, #23]
 80102a0:	b29b      	uxth	r3, r3
 80102a2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80102a6:	4619      	mov	r1, r3
 80102a8:	2036      	movs	r0, #54	; 0x36
 80102aa:	f7fb f959 	bl	800b560 <pbuf_alloc>
 80102ae:	6138      	str	r0, [r7, #16]
 80102b0:	693b      	ldr	r3, [r7, #16]
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d109      	bne.n	80102ca <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	8b5b      	ldrh	r3, [r3, #26]
 80102ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80102be:	b29a      	uxth	r2, r3
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80102c4:	f04f 33ff 	mov.w	r3, #4294967295
 80102c8:	e095      	b.n	80103f6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80102ca:	693b      	ldr	r3, [r7, #16]
 80102cc:	895a      	ldrh	r2, [r3, #10]
 80102ce:	7dfb      	ldrb	r3, [r7, #23]
 80102d0:	b29b      	uxth	r3, r3
 80102d2:	429a      	cmp	r2, r3
 80102d4:	d206      	bcs.n	80102e4 <tcp_enqueue_flags+0xa0>
 80102d6:	4b4a      	ldr	r3, [pc, #296]	; (8010400 <tcp_enqueue_flags+0x1bc>)
 80102d8:	f240 4239 	movw	r2, #1081	; 0x439
 80102dc:	494c      	ldr	r1, [pc, #304]	; (8010410 <tcp_enqueue_flags+0x1cc>)
 80102de:	484a      	ldr	r0, [pc, #296]	; (8010408 <tcp_enqueue_flags+0x1c4>)
 80102e0:	f007 ffa8 	bl	8018234 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80102e8:	78fa      	ldrb	r2, [r7, #3]
 80102ea:	7ffb      	ldrb	r3, [r7, #31]
 80102ec:	9300      	str	r3, [sp, #0]
 80102ee:	460b      	mov	r3, r1
 80102f0:	6939      	ldr	r1, [r7, #16]
 80102f2:	6878      	ldr	r0, [r7, #4]
 80102f4:	f7ff fd70 	bl	800fdd8 <tcp_create_segment>
 80102f8:	60f8      	str	r0, [r7, #12]
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d109      	bne.n	8010314 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	8b5b      	ldrh	r3, [r3, #26]
 8010304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010308:	b29a      	uxth	r2, r3
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801030e:	f04f 33ff 	mov.w	r3, #4294967295
 8010312:	e070      	b.n	80103f6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	68db      	ldr	r3, [r3, #12]
 8010318:	f003 0303 	and.w	r3, r3, #3
 801031c:	2b00      	cmp	r3, #0
 801031e:	d006      	beq.n	801032e <tcp_enqueue_flags+0xea>
 8010320:	4b37      	ldr	r3, [pc, #220]	; (8010400 <tcp_enqueue_flags+0x1bc>)
 8010322:	f240 4242 	movw	r2, #1090	; 0x442
 8010326:	493b      	ldr	r1, [pc, #236]	; (8010414 <tcp_enqueue_flags+0x1d0>)
 8010328:	4837      	ldr	r0, [pc, #220]	; (8010408 <tcp_enqueue_flags+0x1c4>)
 801032a:	f007 ff83 	bl	8018234 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	891b      	ldrh	r3, [r3, #8]
 8010332:	2b00      	cmp	r3, #0
 8010334:	d006      	beq.n	8010344 <tcp_enqueue_flags+0x100>
 8010336:	4b32      	ldr	r3, [pc, #200]	; (8010400 <tcp_enqueue_flags+0x1bc>)
 8010338:	f240 4243 	movw	r2, #1091	; 0x443
 801033c:	4936      	ldr	r1, [pc, #216]	; (8010418 <tcp_enqueue_flags+0x1d4>)
 801033e:	4832      	ldr	r0, [pc, #200]	; (8010408 <tcp_enqueue_flags+0x1c4>)
 8010340:	f007 ff78 	bl	8018234 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010348:	2b00      	cmp	r3, #0
 801034a:	d103      	bne.n	8010354 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	68fa      	ldr	r2, [r7, #12]
 8010350:	66da      	str	r2, [r3, #108]	; 0x6c
 8010352:	e00d      	b.n	8010370 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010358:	61bb      	str	r3, [r7, #24]
 801035a:	e002      	b.n	8010362 <tcp_enqueue_flags+0x11e>
 801035c:	69bb      	ldr	r3, [r7, #24]
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	61bb      	str	r3, [r7, #24]
 8010362:	69bb      	ldr	r3, [r7, #24]
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	2b00      	cmp	r3, #0
 8010368:	d1f8      	bne.n	801035c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801036a:	69bb      	ldr	r3, [r7, #24]
 801036c:	68fa      	ldr	r2, [r7, #12]
 801036e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	2200      	movs	r2, #0
 8010374:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8010378:	78fb      	ldrb	r3, [r7, #3]
 801037a:	f003 0302 	and.w	r3, r3, #2
 801037e:	2b00      	cmp	r3, #0
 8010380:	d104      	bne.n	801038c <tcp_enqueue_flags+0x148>
 8010382:	78fb      	ldrb	r3, [r7, #3]
 8010384:	f003 0301 	and.w	r3, r3, #1
 8010388:	2b00      	cmp	r3, #0
 801038a:	d004      	beq.n	8010396 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010390:	1c5a      	adds	r2, r3, #1
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8010396:	78fb      	ldrb	r3, [r7, #3]
 8010398:	f003 0301 	and.w	r3, r3, #1
 801039c:	2b00      	cmp	r3, #0
 801039e:	d006      	beq.n	80103ae <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	8b5b      	ldrh	r3, [r3, #26]
 80103a4:	f043 0320 	orr.w	r3, r3, #32
 80103a8:	b29a      	uxth	r2, r3
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	685b      	ldr	r3, [r3, #4]
 80103b2:	4618      	mov	r0, r3
 80103b4:	f7fb fc46 	bl	800bc44 <pbuf_clen>
 80103b8:	4603      	mov	r3, r0
 80103ba:	461a      	mov	r2, r3
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80103c2:	4413      	add	r3, r2
 80103c4:	b29a      	uxth	r2, r3
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d00e      	beq.n	80103f4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d10a      	bne.n	80103f4 <tcp_enqueue_flags+0x1b0>
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d106      	bne.n	80103f4 <tcp_enqueue_flags+0x1b0>
 80103e6:	4b06      	ldr	r3, [pc, #24]	; (8010400 <tcp_enqueue_flags+0x1bc>)
 80103e8:	f240 4265 	movw	r2, #1125	; 0x465
 80103ec:	490b      	ldr	r1, [pc, #44]	; (801041c <tcp_enqueue_flags+0x1d8>)
 80103ee:	4806      	ldr	r0, [pc, #24]	; (8010408 <tcp_enqueue_flags+0x1c4>)
 80103f0:	f007 ff20 	bl	8018234 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80103f4:	2300      	movs	r3, #0
}
 80103f6:	4618      	mov	r0, r3
 80103f8:	3720      	adds	r7, #32
 80103fa:	46bd      	mov	sp, r7
 80103fc:	bd80      	pop	{r7, pc}
 80103fe:	bf00      	nop
 8010400:	0801a258 	.word	0x0801a258
 8010404:	0801a67c 	.word	0x0801a67c
 8010408:	0801a2ac 	.word	0x0801a2ac
 801040c:	0801a6d4 	.word	0x0801a6d4
 8010410:	0801a6f4 	.word	0x0801a6f4
 8010414:	0801a730 	.word	0x0801a730
 8010418:	0801a748 	.word	0x0801a748
 801041c:	0801a774 	.word	0x0801a774

08010420 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8010420:	b5b0      	push	{r4, r5, r7, lr}
 8010422:	b08a      	sub	sp, #40	; 0x28
 8010424:	af00      	add	r7, sp, #0
 8010426:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	2b00      	cmp	r3, #0
 801042c:	d106      	bne.n	801043c <tcp_output+0x1c>
 801042e:	4b9e      	ldr	r3, [pc, #632]	; (80106a8 <tcp_output+0x288>)
 8010430:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8010434:	499d      	ldr	r1, [pc, #628]	; (80106ac <tcp_output+0x28c>)
 8010436:	489e      	ldr	r0, [pc, #632]	; (80106b0 <tcp_output+0x290>)
 8010438:	f007 fefc 	bl	8018234 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	7d1b      	ldrb	r3, [r3, #20]
 8010440:	2b01      	cmp	r3, #1
 8010442:	d106      	bne.n	8010452 <tcp_output+0x32>
 8010444:	4b98      	ldr	r3, [pc, #608]	; (80106a8 <tcp_output+0x288>)
 8010446:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801044a:	499a      	ldr	r1, [pc, #616]	; (80106b4 <tcp_output+0x294>)
 801044c:	4898      	ldr	r0, [pc, #608]	; (80106b0 <tcp_output+0x290>)
 801044e:	f007 fef1 	bl	8018234 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8010452:	4b99      	ldr	r3, [pc, #612]	; (80106b8 <tcp_output+0x298>)
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	687a      	ldr	r2, [r7, #4]
 8010458:	429a      	cmp	r2, r3
 801045a:	d101      	bne.n	8010460 <tcp_output+0x40>
    return ERR_OK;
 801045c:	2300      	movs	r3, #0
 801045e:	e1ce      	b.n	80107fe <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801046c:	4293      	cmp	r3, r2
 801046e:	bf28      	it	cs
 8010470:	4613      	movcs	r3, r2
 8010472:	b29b      	uxth	r3, r3
 8010474:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801047a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801047c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801047e:	2b00      	cmp	r3, #0
 8010480:	d10b      	bne.n	801049a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	8b5b      	ldrh	r3, [r3, #26]
 8010486:	f003 0302 	and.w	r3, r3, #2
 801048a:	2b00      	cmp	r3, #0
 801048c:	f000 81aa 	beq.w	80107e4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8010490:	6878      	ldr	r0, [r7, #4]
 8010492:	f000 fdcb 	bl	801102c <tcp_send_empty_ack>
 8010496:	4603      	mov	r3, r0
 8010498:	e1b1      	b.n	80107fe <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801049a:	6879      	ldr	r1, [r7, #4]
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	3304      	adds	r3, #4
 80104a0:	461a      	mov	r2, r3
 80104a2:	6878      	ldr	r0, [r7, #4]
 80104a4:	f7ff fc7c 	bl	800fda0 <tcp_route>
 80104a8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80104aa:	697b      	ldr	r3, [r7, #20]
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d102      	bne.n	80104b6 <tcp_output+0x96>
    return ERR_RTE;
 80104b0:	f06f 0303 	mvn.w	r3, #3
 80104b4:	e1a3      	b.n	80107fe <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d003      	beq.n	80104c4 <tcp_output+0xa4>
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d111      	bne.n	80104e8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80104c4:	697b      	ldr	r3, [r7, #20]
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d002      	beq.n	80104d0 <tcp_output+0xb0>
 80104ca:	697b      	ldr	r3, [r7, #20]
 80104cc:	3304      	adds	r3, #4
 80104ce:	e000      	b.n	80104d2 <tcp_output+0xb2>
 80104d0:	2300      	movs	r3, #0
 80104d2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80104d4:	693b      	ldr	r3, [r7, #16]
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d102      	bne.n	80104e0 <tcp_output+0xc0>
      return ERR_RTE;
 80104da:	f06f 0303 	mvn.w	r3, #3
 80104de:	e18e      	b.n	80107fe <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80104e0:	693b      	ldr	r3, [r7, #16]
 80104e2:	681a      	ldr	r2, [r3, #0]
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80104e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104ea:	68db      	ldr	r3, [r3, #12]
 80104ec:	685b      	ldr	r3, [r3, #4]
 80104ee:	4618      	mov	r0, r3
 80104f0:	f7f9 ff83 	bl	800a3fa <lwip_htonl>
 80104f4:	4602      	mov	r2, r0
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80104fa:	1ad3      	subs	r3, r2, r3
 80104fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80104fe:	8912      	ldrh	r2, [r2, #8]
 8010500:	4413      	add	r3, r2
 8010502:	69ba      	ldr	r2, [r7, #24]
 8010504:	429a      	cmp	r2, r3
 8010506:	d227      	bcs.n	8010558 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801050e:	461a      	mov	r2, r3
 8010510:	69bb      	ldr	r3, [r7, #24]
 8010512:	4293      	cmp	r3, r2
 8010514:	d114      	bne.n	8010540 <tcp_output+0x120>
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801051a:	2b00      	cmp	r3, #0
 801051c:	d110      	bne.n	8010540 <tcp_output+0x120>
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010524:	2b00      	cmp	r3, #0
 8010526:	d10b      	bne.n	8010540 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	2200      	movs	r2, #0
 801052c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	2201      	movs	r2, #1
 8010534:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	2200      	movs	r2, #0
 801053c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	8b5b      	ldrh	r3, [r3, #26]
 8010544:	f003 0302 	and.w	r3, r3, #2
 8010548:	2b00      	cmp	r3, #0
 801054a:	f000 814d 	beq.w	80107e8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801054e:	6878      	ldr	r0, [r7, #4]
 8010550:	f000 fd6c 	bl	801102c <tcp_send_empty_ack>
 8010554:	4603      	mov	r3, r0
 8010556:	e152      	b.n	80107fe <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	2200      	movs	r2, #0
 801055c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010564:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8010566:	6a3b      	ldr	r3, [r7, #32]
 8010568:	2b00      	cmp	r3, #0
 801056a:	f000 811c 	beq.w	80107a6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801056e:	e002      	b.n	8010576 <tcp_output+0x156>
 8010570:	6a3b      	ldr	r3, [r7, #32]
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	623b      	str	r3, [r7, #32]
 8010576:	6a3b      	ldr	r3, [r7, #32]
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	2b00      	cmp	r3, #0
 801057c:	d1f8      	bne.n	8010570 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801057e:	e112      	b.n	80107a6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8010580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010582:	68db      	ldr	r3, [r3, #12]
 8010584:	899b      	ldrh	r3, [r3, #12]
 8010586:	b29b      	uxth	r3, r3
 8010588:	4618      	mov	r0, r3
 801058a:	f7f9 ff21 	bl	800a3d0 <lwip_htons>
 801058e:	4603      	mov	r3, r0
 8010590:	b2db      	uxtb	r3, r3
 8010592:	f003 0304 	and.w	r3, r3, #4
 8010596:	2b00      	cmp	r3, #0
 8010598:	d006      	beq.n	80105a8 <tcp_output+0x188>
 801059a:	4b43      	ldr	r3, [pc, #268]	; (80106a8 <tcp_output+0x288>)
 801059c:	f240 5236 	movw	r2, #1334	; 0x536
 80105a0:	4946      	ldr	r1, [pc, #280]	; (80106bc <tcp_output+0x29c>)
 80105a2:	4843      	ldr	r0, [pc, #268]	; (80106b0 <tcp_output+0x290>)
 80105a4:	f007 fe46 	bl	8018234 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d01f      	beq.n	80105f0 <tcp_output+0x1d0>
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	8b5b      	ldrh	r3, [r3, #26]
 80105b4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d119      	bne.n	80105f0 <tcp_output+0x1d0>
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d00b      	beq.n	80105dc <tcp_output+0x1bc>
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d110      	bne.n	80105f0 <tcp_output+0x1d0>
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80105d2:	891a      	ldrh	r2, [r3, #8]
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80105d8:	429a      	cmp	r2, r3
 80105da:	d209      	bcs.n	80105f0 <tcp_output+0x1d0>
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d004      	beq.n	80105f0 <tcp_output+0x1d0>
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80105ec:	2b08      	cmp	r3, #8
 80105ee:	d901      	bls.n	80105f4 <tcp_output+0x1d4>
 80105f0:	2301      	movs	r3, #1
 80105f2:	e000      	b.n	80105f6 <tcp_output+0x1d6>
 80105f4:	2300      	movs	r3, #0
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d106      	bne.n	8010608 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	8b5b      	ldrh	r3, [r3, #26]
 80105fe:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010602:	2b00      	cmp	r3, #0
 8010604:	f000 80e4 	beq.w	80107d0 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	7d1b      	ldrb	r3, [r3, #20]
 801060c:	2b02      	cmp	r3, #2
 801060e:	d00d      	beq.n	801062c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8010610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010612:	68db      	ldr	r3, [r3, #12]
 8010614:	899b      	ldrh	r3, [r3, #12]
 8010616:	b29c      	uxth	r4, r3
 8010618:	2010      	movs	r0, #16
 801061a:	f7f9 fed9 	bl	800a3d0 <lwip_htons>
 801061e:	4603      	mov	r3, r0
 8010620:	461a      	mov	r2, r3
 8010622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010624:	68db      	ldr	r3, [r3, #12]
 8010626:	4322      	orrs	r2, r4
 8010628:	b292      	uxth	r2, r2
 801062a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801062c:	697a      	ldr	r2, [r7, #20]
 801062e:	6879      	ldr	r1, [r7, #4]
 8010630:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010632:	f000 f909 	bl	8010848 <tcp_output_segment>
 8010636:	4603      	mov	r3, r0
 8010638:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801063a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801063e:	2b00      	cmp	r3, #0
 8010640:	d009      	beq.n	8010656 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	8b5b      	ldrh	r3, [r3, #26]
 8010646:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801064a:	b29a      	uxth	r2, r3
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	835a      	strh	r2, [r3, #26]
      return err;
 8010650:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010654:	e0d3      	b.n	80107fe <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8010656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010658:	681a      	ldr	r2, [r3, #0]
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	7d1b      	ldrb	r3, [r3, #20]
 8010662:	2b02      	cmp	r3, #2
 8010664:	d006      	beq.n	8010674 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	8b5b      	ldrh	r3, [r3, #26]
 801066a:	f023 0303 	bic.w	r3, r3, #3
 801066e:	b29a      	uxth	r2, r3
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010676:	68db      	ldr	r3, [r3, #12]
 8010678:	685b      	ldr	r3, [r3, #4]
 801067a:	4618      	mov	r0, r3
 801067c:	f7f9 febd 	bl	800a3fa <lwip_htonl>
 8010680:	4604      	mov	r4, r0
 8010682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010684:	891b      	ldrh	r3, [r3, #8]
 8010686:	461d      	mov	r5, r3
 8010688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801068a:	68db      	ldr	r3, [r3, #12]
 801068c:	899b      	ldrh	r3, [r3, #12]
 801068e:	b29b      	uxth	r3, r3
 8010690:	4618      	mov	r0, r3
 8010692:	f7f9 fe9d 	bl	800a3d0 <lwip_htons>
 8010696:	4603      	mov	r3, r0
 8010698:	b2db      	uxtb	r3, r3
 801069a:	f003 0303 	and.w	r3, r3, #3
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d00e      	beq.n	80106c0 <tcp_output+0x2a0>
 80106a2:	2301      	movs	r3, #1
 80106a4:	e00d      	b.n	80106c2 <tcp_output+0x2a2>
 80106a6:	bf00      	nop
 80106a8:	0801a258 	.word	0x0801a258
 80106ac:	0801a79c 	.word	0x0801a79c
 80106b0:	0801a2ac 	.word	0x0801a2ac
 80106b4:	0801a7b4 	.word	0x0801a7b4
 80106b8:	2000dc58 	.word	0x2000dc58
 80106bc:	0801a7dc 	.word	0x0801a7dc
 80106c0:	2300      	movs	r3, #0
 80106c2:	442b      	add	r3, r5
 80106c4:	4423      	add	r3, r4
 80106c6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80106cc:	68bb      	ldr	r3, [r7, #8]
 80106ce:	1ad3      	subs	r3, r2, r3
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	da02      	bge.n	80106da <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	68ba      	ldr	r2, [r7, #8]
 80106d8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80106da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106dc:	891b      	ldrh	r3, [r3, #8]
 80106de:	461c      	mov	r4, r3
 80106e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106e2:	68db      	ldr	r3, [r3, #12]
 80106e4:	899b      	ldrh	r3, [r3, #12]
 80106e6:	b29b      	uxth	r3, r3
 80106e8:	4618      	mov	r0, r3
 80106ea:	f7f9 fe71 	bl	800a3d0 <lwip_htons>
 80106ee:	4603      	mov	r3, r0
 80106f0:	b2db      	uxtb	r3, r3
 80106f2:	f003 0303 	and.w	r3, r3, #3
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d001      	beq.n	80106fe <tcp_output+0x2de>
 80106fa:	2301      	movs	r3, #1
 80106fc:	e000      	b.n	8010700 <tcp_output+0x2e0>
 80106fe:	2300      	movs	r3, #0
 8010700:	4423      	add	r3, r4
 8010702:	2b00      	cmp	r3, #0
 8010704:	d049      	beq.n	801079a <tcp_output+0x37a>
      seg->next = NULL;
 8010706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010708:	2200      	movs	r2, #0
 801070a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010710:	2b00      	cmp	r3, #0
 8010712:	d105      	bne.n	8010720 <tcp_output+0x300>
        pcb->unacked = seg;
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010718:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801071a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801071c:	623b      	str	r3, [r7, #32]
 801071e:	e03f      	b.n	80107a0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8010720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010722:	68db      	ldr	r3, [r3, #12]
 8010724:	685b      	ldr	r3, [r3, #4]
 8010726:	4618      	mov	r0, r3
 8010728:	f7f9 fe67 	bl	800a3fa <lwip_htonl>
 801072c:	4604      	mov	r4, r0
 801072e:	6a3b      	ldr	r3, [r7, #32]
 8010730:	68db      	ldr	r3, [r3, #12]
 8010732:	685b      	ldr	r3, [r3, #4]
 8010734:	4618      	mov	r0, r3
 8010736:	f7f9 fe60 	bl	800a3fa <lwip_htonl>
 801073a:	4603      	mov	r3, r0
 801073c:	1ae3      	subs	r3, r4, r3
 801073e:	2b00      	cmp	r3, #0
 8010740:	da24      	bge.n	801078c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	3370      	adds	r3, #112	; 0x70
 8010746:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010748:	e002      	b.n	8010750 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801074a:	69fb      	ldr	r3, [r7, #28]
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010750:	69fb      	ldr	r3, [r7, #28]
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	2b00      	cmp	r3, #0
 8010756:	d011      	beq.n	801077c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010758:	69fb      	ldr	r3, [r7, #28]
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	68db      	ldr	r3, [r3, #12]
 801075e:	685b      	ldr	r3, [r3, #4]
 8010760:	4618      	mov	r0, r3
 8010762:	f7f9 fe4a 	bl	800a3fa <lwip_htonl>
 8010766:	4604      	mov	r4, r0
 8010768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801076a:	68db      	ldr	r3, [r3, #12]
 801076c:	685b      	ldr	r3, [r3, #4]
 801076e:	4618      	mov	r0, r3
 8010770:	f7f9 fe43 	bl	800a3fa <lwip_htonl>
 8010774:	4603      	mov	r3, r0
 8010776:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8010778:	2b00      	cmp	r3, #0
 801077a:	dbe6      	blt.n	801074a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801077c:	69fb      	ldr	r3, [r7, #28]
 801077e:	681a      	ldr	r2, [r3, #0]
 8010780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010782:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8010784:	69fb      	ldr	r3, [r7, #28]
 8010786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010788:	601a      	str	r2, [r3, #0]
 801078a:	e009      	b.n	80107a0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801078c:	6a3b      	ldr	r3, [r7, #32]
 801078e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010790:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8010792:	6a3b      	ldr	r3, [r7, #32]
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	623b      	str	r3, [r7, #32]
 8010798:	e002      	b.n	80107a0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801079a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801079c:	f7fc fc43 	bl	800d026 <tcp_seg_free>
    }
    seg = pcb->unsent;
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80107a4:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80107a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d012      	beq.n	80107d2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80107ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107ae:	68db      	ldr	r3, [r3, #12]
 80107b0:	685b      	ldr	r3, [r3, #4]
 80107b2:	4618      	mov	r0, r3
 80107b4:	f7f9 fe21 	bl	800a3fa <lwip_htonl>
 80107b8:	4602      	mov	r2, r0
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80107be:	1ad3      	subs	r3, r2, r3
 80107c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80107c2:	8912      	ldrh	r2, [r2, #8]
 80107c4:	4413      	add	r3, r2
  while (seg != NULL &&
 80107c6:	69ba      	ldr	r2, [r7, #24]
 80107c8:	429a      	cmp	r2, r3
 80107ca:	f4bf aed9 	bcs.w	8010580 <tcp_output+0x160>
 80107ce:	e000      	b.n	80107d2 <tcp_output+0x3b2>
      break;
 80107d0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d108      	bne.n	80107ec <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	2200      	movs	r2, #0
 80107de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80107e2:	e004      	b.n	80107ee <tcp_output+0x3ce>
    goto output_done;
 80107e4:	bf00      	nop
 80107e6:	e002      	b.n	80107ee <tcp_output+0x3ce>
    goto output_done;
 80107e8:	bf00      	nop
 80107ea:	e000      	b.n	80107ee <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80107ec:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	8b5b      	ldrh	r3, [r3, #26]
 80107f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80107f6:	b29a      	uxth	r2, r3
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80107fc:	2300      	movs	r3, #0
}
 80107fe:	4618      	mov	r0, r3
 8010800:	3728      	adds	r7, #40	; 0x28
 8010802:	46bd      	mov	sp, r7
 8010804:	bdb0      	pop	{r4, r5, r7, pc}
 8010806:	bf00      	nop

08010808 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8010808:	b580      	push	{r7, lr}
 801080a:	b082      	sub	sp, #8
 801080c:	af00      	add	r7, sp, #0
 801080e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	2b00      	cmp	r3, #0
 8010814:	d106      	bne.n	8010824 <tcp_output_segment_busy+0x1c>
 8010816:	4b09      	ldr	r3, [pc, #36]	; (801083c <tcp_output_segment_busy+0x34>)
 8010818:	f240 529a 	movw	r2, #1434	; 0x59a
 801081c:	4908      	ldr	r1, [pc, #32]	; (8010840 <tcp_output_segment_busy+0x38>)
 801081e:	4809      	ldr	r0, [pc, #36]	; (8010844 <tcp_output_segment_busy+0x3c>)
 8010820:	f007 fd08 	bl	8018234 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	685b      	ldr	r3, [r3, #4]
 8010828:	7b9b      	ldrb	r3, [r3, #14]
 801082a:	2b01      	cmp	r3, #1
 801082c:	d001      	beq.n	8010832 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801082e:	2301      	movs	r3, #1
 8010830:	e000      	b.n	8010834 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8010832:	2300      	movs	r3, #0
}
 8010834:	4618      	mov	r0, r3
 8010836:	3708      	adds	r7, #8
 8010838:	46bd      	mov	sp, r7
 801083a:	bd80      	pop	{r7, pc}
 801083c:	0801a258 	.word	0x0801a258
 8010840:	0801a7f4 	.word	0x0801a7f4
 8010844:	0801a2ac 	.word	0x0801a2ac

08010848 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8010848:	b5b0      	push	{r4, r5, r7, lr}
 801084a:	b08c      	sub	sp, #48	; 0x30
 801084c:	af04      	add	r7, sp, #16
 801084e:	60f8      	str	r0, [r7, #12]
 8010850:	60b9      	str	r1, [r7, #8]
 8010852:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	2b00      	cmp	r3, #0
 8010858:	d106      	bne.n	8010868 <tcp_output_segment+0x20>
 801085a:	4b63      	ldr	r3, [pc, #396]	; (80109e8 <tcp_output_segment+0x1a0>)
 801085c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8010860:	4962      	ldr	r1, [pc, #392]	; (80109ec <tcp_output_segment+0x1a4>)
 8010862:	4863      	ldr	r0, [pc, #396]	; (80109f0 <tcp_output_segment+0x1a8>)
 8010864:	f007 fce6 	bl	8018234 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8010868:	68bb      	ldr	r3, [r7, #8]
 801086a:	2b00      	cmp	r3, #0
 801086c:	d106      	bne.n	801087c <tcp_output_segment+0x34>
 801086e:	4b5e      	ldr	r3, [pc, #376]	; (80109e8 <tcp_output_segment+0x1a0>)
 8010870:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8010874:	495f      	ldr	r1, [pc, #380]	; (80109f4 <tcp_output_segment+0x1ac>)
 8010876:	485e      	ldr	r0, [pc, #376]	; (80109f0 <tcp_output_segment+0x1a8>)
 8010878:	f007 fcdc 	bl	8018234 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	2b00      	cmp	r3, #0
 8010880:	d106      	bne.n	8010890 <tcp_output_segment+0x48>
 8010882:	4b59      	ldr	r3, [pc, #356]	; (80109e8 <tcp_output_segment+0x1a0>)
 8010884:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8010888:	495b      	ldr	r1, [pc, #364]	; (80109f8 <tcp_output_segment+0x1b0>)
 801088a:	4859      	ldr	r0, [pc, #356]	; (80109f0 <tcp_output_segment+0x1a8>)
 801088c:	f007 fcd2 	bl	8018234 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8010890:	68f8      	ldr	r0, [r7, #12]
 8010892:	f7ff ffb9 	bl	8010808 <tcp_output_segment_busy>
 8010896:	4603      	mov	r3, r0
 8010898:	2b00      	cmp	r3, #0
 801089a:	d001      	beq.n	80108a0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801089c:	2300      	movs	r3, #0
 801089e:	e09f      	b.n	80109e0 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80108a0:	68bb      	ldr	r3, [r7, #8]
 80108a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	68dc      	ldr	r4, [r3, #12]
 80108a8:	4610      	mov	r0, r2
 80108aa:	f7f9 fda6 	bl	800a3fa <lwip_htonl>
 80108ae:	4603      	mov	r3, r0
 80108b0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80108b2:	68bb      	ldr	r3, [r7, #8]
 80108b4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	68dc      	ldr	r4, [r3, #12]
 80108ba:	4610      	mov	r0, r2
 80108bc:	f7f9 fd88 	bl	800a3d0 <lwip_htons>
 80108c0:	4603      	mov	r3, r0
 80108c2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80108c4:	68bb      	ldr	r3, [r7, #8]
 80108c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108c8:	68ba      	ldr	r2, [r7, #8]
 80108ca:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80108cc:	441a      	add	r2, r3
 80108ce:	68bb      	ldr	r3, [r7, #8]
 80108d0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	68db      	ldr	r3, [r3, #12]
 80108d6:	3314      	adds	r3, #20
 80108d8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	7a9b      	ldrb	r3, [r3, #10]
 80108de:	f003 0301 	and.w	r3, r3, #1
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d015      	beq.n	8010912 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80108e6:	68bb      	ldr	r3, [r7, #8]
 80108e8:	3304      	adds	r3, #4
 80108ea:	461a      	mov	r2, r3
 80108ec:	6879      	ldr	r1, [r7, #4]
 80108ee:	f44f 7006 	mov.w	r0, #536	; 0x218
 80108f2:	f7fc fe8f 	bl	800d614 <tcp_eff_send_mss_netif>
 80108f6:	4603      	mov	r3, r0
 80108f8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80108fa:	8b7b      	ldrh	r3, [r7, #26]
 80108fc:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8010900:	4618      	mov	r0, r3
 8010902:	f7f9 fd7a 	bl	800a3fa <lwip_htonl>
 8010906:	4602      	mov	r2, r0
 8010908:	69fb      	ldr	r3, [r7, #28]
 801090a:	601a      	str	r2, [r3, #0]
    opts += 1;
 801090c:	69fb      	ldr	r3, [r7, #28]
 801090e:	3304      	adds	r3, #4
 8010910:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8010912:	68bb      	ldr	r3, [r7, #8]
 8010914:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010918:	2b00      	cmp	r3, #0
 801091a:	da02      	bge.n	8010922 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801091c:	68bb      	ldr	r3, [r7, #8]
 801091e:	2200      	movs	r2, #0
 8010920:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8010922:	68bb      	ldr	r3, [r7, #8]
 8010924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010926:	2b00      	cmp	r3, #0
 8010928:	d10c      	bne.n	8010944 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801092a:	4b34      	ldr	r3, [pc, #208]	; (80109fc <tcp_output_segment+0x1b4>)
 801092c:	681a      	ldr	r2, [r3, #0]
 801092e:	68bb      	ldr	r3, [r7, #8]
 8010930:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	68db      	ldr	r3, [r3, #12]
 8010936:	685b      	ldr	r3, [r3, #4]
 8010938:	4618      	mov	r0, r3
 801093a:	f7f9 fd5e 	bl	800a3fa <lwip_htonl>
 801093e:	4602      	mov	r2, r0
 8010940:	68bb      	ldr	r3, [r7, #8]
 8010942:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	68da      	ldr	r2, [r3, #12]
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	685b      	ldr	r3, [r3, #4]
 801094c:	685b      	ldr	r3, [r3, #4]
 801094e:	1ad3      	subs	r3, r2, r3
 8010950:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	685b      	ldr	r3, [r3, #4]
 8010956:	8959      	ldrh	r1, [r3, #10]
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	685b      	ldr	r3, [r3, #4]
 801095c:	8b3a      	ldrh	r2, [r7, #24]
 801095e:	1a8a      	subs	r2, r1, r2
 8010960:	b292      	uxth	r2, r2
 8010962:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	685b      	ldr	r3, [r3, #4]
 8010968:	8919      	ldrh	r1, [r3, #8]
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	685b      	ldr	r3, [r3, #4]
 801096e:	8b3a      	ldrh	r2, [r7, #24]
 8010970:	1a8a      	subs	r2, r1, r2
 8010972:	b292      	uxth	r2, r2
 8010974:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	685b      	ldr	r3, [r3, #4]
 801097a:	68fa      	ldr	r2, [r7, #12]
 801097c:	68d2      	ldr	r2, [r2, #12]
 801097e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	68db      	ldr	r3, [r3, #12]
 8010984:	2200      	movs	r2, #0
 8010986:	741a      	strb	r2, [r3, #16]
 8010988:	2200      	movs	r2, #0
 801098a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	68db      	ldr	r3, [r3, #12]
 8010990:	f103 0214 	add.w	r2, r3, #20
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	7a9b      	ldrb	r3, [r3, #10]
 8010998:	009b      	lsls	r3, r3, #2
 801099a:	f003 0304 	and.w	r3, r3, #4
 801099e:	4413      	add	r3, r2
 80109a0:	69fa      	ldr	r2, [r7, #28]
 80109a2:	429a      	cmp	r2, r3
 80109a4:	d006      	beq.n	80109b4 <tcp_output_segment+0x16c>
 80109a6:	4b10      	ldr	r3, [pc, #64]	; (80109e8 <tcp_output_segment+0x1a0>)
 80109a8:	f240 621c 	movw	r2, #1564	; 0x61c
 80109ac:	4914      	ldr	r1, [pc, #80]	; (8010a00 <tcp_output_segment+0x1b8>)
 80109ae:	4810      	ldr	r0, [pc, #64]	; (80109f0 <tcp_output_segment+0x1a8>)
 80109b0:	f007 fc40 	bl	8018234 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80109b4:	68fb      	ldr	r3, [r7, #12]
 80109b6:	6858      	ldr	r0, [r3, #4]
 80109b8:	68b9      	ldr	r1, [r7, #8]
 80109ba:	68bb      	ldr	r3, [r7, #8]
 80109bc:	1d1c      	adds	r4, r3, #4
 80109be:	68bb      	ldr	r3, [r7, #8]
 80109c0:	7add      	ldrb	r5, [r3, #11]
 80109c2:	68bb      	ldr	r3, [r7, #8]
 80109c4:	7a9b      	ldrb	r3, [r3, #10]
 80109c6:	687a      	ldr	r2, [r7, #4]
 80109c8:	9202      	str	r2, [sp, #8]
 80109ca:	2206      	movs	r2, #6
 80109cc:	9201      	str	r2, [sp, #4]
 80109ce:	9300      	str	r3, [sp, #0]
 80109d0:	462b      	mov	r3, r5
 80109d2:	4622      	mov	r2, r4
 80109d4:	f002 fa66 	bl	8012ea4 <ip4_output_if>
 80109d8:	4603      	mov	r3, r0
 80109da:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80109dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80109e0:	4618      	mov	r0, r3
 80109e2:	3720      	adds	r7, #32
 80109e4:	46bd      	mov	sp, r7
 80109e6:	bdb0      	pop	{r4, r5, r7, pc}
 80109e8:	0801a258 	.word	0x0801a258
 80109ec:	0801a81c 	.word	0x0801a81c
 80109f0:	0801a2ac 	.word	0x0801a2ac
 80109f4:	0801a83c 	.word	0x0801a83c
 80109f8:	0801a85c 	.word	0x0801a85c
 80109fc:	2000dc48 	.word	0x2000dc48
 8010a00:	0801a880 	.word	0x0801a880

08010a04 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8010a04:	b5b0      	push	{r4, r5, r7, lr}
 8010a06:	b084      	sub	sp, #16
 8010a08:	af00      	add	r7, sp, #0
 8010a0a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d106      	bne.n	8010a20 <tcp_rexmit_rto_prepare+0x1c>
 8010a12:	4b31      	ldr	r3, [pc, #196]	; (8010ad8 <tcp_rexmit_rto_prepare+0xd4>)
 8010a14:	f240 6263 	movw	r2, #1635	; 0x663
 8010a18:	4930      	ldr	r1, [pc, #192]	; (8010adc <tcp_rexmit_rto_prepare+0xd8>)
 8010a1a:	4831      	ldr	r0, [pc, #196]	; (8010ae0 <tcp_rexmit_rto_prepare+0xdc>)
 8010a1c:	f007 fc0a 	bl	8018234 <iprintf>

  if (pcb->unacked == NULL) {
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d102      	bne.n	8010a2e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8010a28:	f06f 0305 	mvn.w	r3, #5
 8010a2c:	e050      	b.n	8010ad0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010a32:	60fb      	str	r3, [r7, #12]
 8010a34:	e00b      	b.n	8010a4e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8010a36:	68f8      	ldr	r0, [r7, #12]
 8010a38:	f7ff fee6 	bl	8010808 <tcp_output_segment_busy>
 8010a3c:	4603      	mov	r3, r0
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d002      	beq.n	8010a48 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8010a42:	f06f 0305 	mvn.w	r3, #5
 8010a46:	e043      	b.n	8010ad0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	60fb      	str	r3, [r7, #12]
 8010a4e:	68fb      	ldr	r3, [r7, #12]
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d1ef      	bne.n	8010a36 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8010a56:	68f8      	ldr	r0, [r7, #12]
 8010a58:	f7ff fed6 	bl	8010808 <tcp_output_segment_busy>
 8010a5c:	4603      	mov	r3, r0
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d002      	beq.n	8010a68 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8010a62:	f06f 0305 	mvn.w	r3, #5
 8010a66:	e033      	b.n	8010ad0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	2200      	movs	r2, #0
 8010a7c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	8b5b      	ldrh	r3, [r3, #26]
 8010a82:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8010a86:	b29a      	uxth	r2, r3
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	68db      	ldr	r3, [r3, #12]
 8010a90:	685b      	ldr	r3, [r3, #4]
 8010a92:	4618      	mov	r0, r3
 8010a94:	f7f9 fcb1 	bl	800a3fa <lwip_htonl>
 8010a98:	4604      	mov	r4, r0
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	891b      	ldrh	r3, [r3, #8]
 8010a9e:	461d      	mov	r5, r3
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	68db      	ldr	r3, [r3, #12]
 8010aa4:	899b      	ldrh	r3, [r3, #12]
 8010aa6:	b29b      	uxth	r3, r3
 8010aa8:	4618      	mov	r0, r3
 8010aaa:	f7f9 fc91 	bl	800a3d0 <lwip_htons>
 8010aae:	4603      	mov	r3, r0
 8010ab0:	b2db      	uxtb	r3, r3
 8010ab2:	f003 0303 	and.w	r3, r3, #3
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d001      	beq.n	8010abe <tcp_rexmit_rto_prepare+0xba>
 8010aba:	2301      	movs	r3, #1
 8010abc:	e000      	b.n	8010ac0 <tcp_rexmit_rto_prepare+0xbc>
 8010abe:	2300      	movs	r3, #0
 8010ac0:	442b      	add	r3, r5
 8010ac2:	18e2      	adds	r2, r4, r3
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	2200      	movs	r2, #0
 8010acc:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8010ace:	2300      	movs	r3, #0
}
 8010ad0:	4618      	mov	r0, r3
 8010ad2:	3710      	adds	r7, #16
 8010ad4:	46bd      	mov	sp, r7
 8010ad6:	bdb0      	pop	{r4, r5, r7, pc}
 8010ad8:	0801a258 	.word	0x0801a258
 8010adc:	0801a894 	.word	0x0801a894
 8010ae0:	0801a2ac 	.word	0x0801a2ac

08010ae4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8010ae4:	b580      	push	{r7, lr}
 8010ae6:	b082      	sub	sp, #8
 8010ae8:	af00      	add	r7, sp, #0
 8010aea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d106      	bne.n	8010b00 <tcp_rexmit_rto_commit+0x1c>
 8010af2:	4b0d      	ldr	r3, [pc, #52]	; (8010b28 <tcp_rexmit_rto_commit+0x44>)
 8010af4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8010af8:	490c      	ldr	r1, [pc, #48]	; (8010b2c <tcp_rexmit_rto_commit+0x48>)
 8010afa:	480d      	ldr	r0, [pc, #52]	; (8010b30 <tcp_rexmit_rto_commit+0x4c>)
 8010afc:	f007 fb9a 	bl	8018234 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010b06:	2bff      	cmp	r3, #255	; 0xff
 8010b08:	d007      	beq.n	8010b1a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010b10:	3301      	adds	r3, #1
 8010b12:	b2da      	uxtb	r2, r3
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8010b1a:	6878      	ldr	r0, [r7, #4]
 8010b1c:	f7ff fc80 	bl	8010420 <tcp_output>
}
 8010b20:	bf00      	nop
 8010b22:	3708      	adds	r7, #8
 8010b24:	46bd      	mov	sp, r7
 8010b26:	bd80      	pop	{r7, pc}
 8010b28:	0801a258 	.word	0x0801a258
 8010b2c:	0801a8b8 	.word	0x0801a8b8
 8010b30:	0801a2ac 	.word	0x0801a2ac

08010b34 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8010b34:	b580      	push	{r7, lr}
 8010b36:	b082      	sub	sp, #8
 8010b38:	af00      	add	r7, sp, #0
 8010b3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d106      	bne.n	8010b50 <tcp_rexmit_rto+0x1c>
 8010b42:	4b0a      	ldr	r3, [pc, #40]	; (8010b6c <tcp_rexmit_rto+0x38>)
 8010b44:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8010b48:	4909      	ldr	r1, [pc, #36]	; (8010b70 <tcp_rexmit_rto+0x3c>)
 8010b4a:	480a      	ldr	r0, [pc, #40]	; (8010b74 <tcp_rexmit_rto+0x40>)
 8010b4c:	f007 fb72 	bl	8018234 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8010b50:	6878      	ldr	r0, [r7, #4]
 8010b52:	f7ff ff57 	bl	8010a04 <tcp_rexmit_rto_prepare>
 8010b56:	4603      	mov	r3, r0
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d102      	bne.n	8010b62 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8010b5c:	6878      	ldr	r0, [r7, #4]
 8010b5e:	f7ff ffc1 	bl	8010ae4 <tcp_rexmit_rto_commit>
  }
}
 8010b62:	bf00      	nop
 8010b64:	3708      	adds	r7, #8
 8010b66:	46bd      	mov	sp, r7
 8010b68:	bd80      	pop	{r7, pc}
 8010b6a:	bf00      	nop
 8010b6c:	0801a258 	.word	0x0801a258
 8010b70:	0801a8dc 	.word	0x0801a8dc
 8010b74:	0801a2ac 	.word	0x0801a2ac

08010b78 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8010b78:	b590      	push	{r4, r7, lr}
 8010b7a:	b085      	sub	sp, #20
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d106      	bne.n	8010b94 <tcp_rexmit+0x1c>
 8010b86:	4b2f      	ldr	r3, [pc, #188]	; (8010c44 <tcp_rexmit+0xcc>)
 8010b88:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8010b8c:	492e      	ldr	r1, [pc, #184]	; (8010c48 <tcp_rexmit+0xd0>)
 8010b8e:	482f      	ldr	r0, [pc, #188]	; (8010c4c <tcp_rexmit+0xd4>)
 8010b90:	f007 fb50 	bl	8018234 <iprintf>

  if (pcb->unacked == NULL) {
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d102      	bne.n	8010ba2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8010b9c:	f06f 0305 	mvn.w	r3, #5
 8010ba0:	e04c      	b.n	8010c3c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010ba6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8010ba8:	68b8      	ldr	r0, [r7, #8]
 8010baa:	f7ff fe2d 	bl	8010808 <tcp_output_segment_busy>
 8010bae:	4603      	mov	r3, r0
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d002      	beq.n	8010bba <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8010bb4:	f06f 0305 	mvn.w	r3, #5
 8010bb8:	e040      	b.n	8010c3c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8010bba:	68bb      	ldr	r3, [r7, #8]
 8010bbc:	681a      	ldr	r2, [r3, #0]
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	336c      	adds	r3, #108	; 0x6c
 8010bc6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010bc8:	e002      	b.n	8010bd0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d011      	beq.n	8010bfc <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010bd8:	68fb      	ldr	r3, [r7, #12]
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	68db      	ldr	r3, [r3, #12]
 8010bde:	685b      	ldr	r3, [r3, #4]
 8010be0:	4618      	mov	r0, r3
 8010be2:	f7f9 fc0a 	bl	800a3fa <lwip_htonl>
 8010be6:	4604      	mov	r4, r0
 8010be8:	68bb      	ldr	r3, [r7, #8]
 8010bea:	68db      	ldr	r3, [r3, #12]
 8010bec:	685b      	ldr	r3, [r3, #4]
 8010bee:	4618      	mov	r0, r3
 8010bf0:	f7f9 fc03 	bl	800a3fa <lwip_htonl>
 8010bf4:	4603      	mov	r3, r0
 8010bf6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	dbe6      	blt.n	8010bca <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	681a      	ldr	r2, [r3, #0]
 8010c00:	68bb      	ldr	r3, [r7, #8]
 8010c02:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	68ba      	ldr	r2, [r7, #8]
 8010c08:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8010c0a:	68bb      	ldr	r3, [r7, #8]
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d103      	bne.n	8010c1a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	2200      	movs	r2, #0
 8010c16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010c20:	2bff      	cmp	r3, #255	; 0xff
 8010c22:	d007      	beq.n	8010c34 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010c2a:	3301      	adds	r3, #1
 8010c2c:	b2da      	uxtb	r2, r3
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	2200      	movs	r2, #0
 8010c38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8010c3a:	2300      	movs	r3, #0
}
 8010c3c:	4618      	mov	r0, r3
 8010c3e:	3714      	adds	r7, #20
 8010c40:	46bd      	mov	sp, r7
 8010c42:	bd90      	pop	{r4, r7, pc}
 8010c44:	0801a258 	.word	0x0801a258
 8010c48:	0801a8f8 	.word	0x0801a8f8
 8010c4c:	0801a2ac 	.word	0x0801a2ac

08010c50 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8010c50:	b580      	push	{r7, lr}
 8010c52:	b082      	sub	sp, #8
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d106      	bne.n	8010c6c <tcp_rexmit_fast+0x1c>
 8010c5e:	4b2a      	ldr	r3, [pc, #168]	; (8010d08 <tcp_rexmit_fast+0xb8>)
 8010c60:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8010c64:	4929      	ldr	r1, [pc, #164]	; (8010d0c <tcp_rexmit_fast+0xbc>)
 8010c66:	482a      	ldr	r0, [pc, #168]	; (8010d10 <tcp_rexmit_fast+0xc0>)
 8010c68:	f007 fae4 	bl	8018234 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d045      	beq.n	8010d00 <tcp_rexmit_fast+0xb0>
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	8b5b      	ldrh	r3, [r3, #26]
 8010c78:	f003 0304 	and.w	r3, r3, #4
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d13f      	bne.n	8010d00 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8010c80:	6878      	ldr	r0, [r7, #4]
 8010c82:	f7ff ff79 	bl	8010b78 <tcp_rexmit>
 8010c86:	4603      	mov	r3, r0
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d139      	bne.n	8010d00 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010c98:	4293      	cmp	r3, r2
 8010c9a:	bf28      	it	cs
 8010c9c:	4613      	movcs	r3, r2
 8010c9e:	b29b      	uxth	r3, r3
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	da00      	bge.n	8010ca6 <tcp_rexmit_fast+0x56>
 8010ca4:	3301      	adds	r3, #1
 8010ca6:	105b      	asrs	r3, r3, #1
 8010ca8:	b29a      	uxth	r2, r3
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010cb6:	461a      	mov	r2, r3
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010cbc:	005b      	lsls	r3, r3, #1
 8010cbe:	429a      	cmp	r2, r3
 8010cc0:	d206      	bcs.n	8010cd0 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010cc6:	005b      	lsls	r3, r3, #1
 8010cc8:	b29a      	uxth	r2, r3
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010cda:	4619      	mov	r1, r3
 8010cdc:	0049      	lsls	r1, r1, #1
 8010cde:	440b      	add	r3, r1
 8010ce0:	b29b      	uxth	r3, r3
 8010ce2:	4413      	add	r3, r2
 8010ce4:	b29a      	uxth	r2, r3
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	8b5b      	ldrh	r3, [r3, #26]
 8010cf0:	f043 0304 	orr.w	r3, r3, #4
 8010cf4:	b29a      	uxth	r2, r3
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	2200      	movs	r2, #0
 8010cfe:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8010d00:	bf00      	nop
 8010d02:	3708      	adds	r7, #8
 8010d04:	46bd      	mov	sp, r7
 8010d06:	bd80      	pop	{r7, pc}
 8010d08:	0801a258 	.word	0x0801a258
 8010d0c:	0801a910 	.word	0x0801a910
 8010d10:	0801a2ac 	.word	0x0801a2ac

08010d14 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8010d14:	b580      	push	{r7, lr}
 8010d16:	b086      	sub	sp, #24
 8010d18:	af00      	add	r7, sp, #0
 8010d1a:	60f8      	str	r0, [r7, #12]
 8010d1c:	607b      	str	r3, [r7, #4]
 8010d1e:	460b      	mov	r3, r1
 8010d20:	817b      	strh	r3, [r7, #10]
 8010d22:	4613      	mov	r3, r2
 8010d24:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8010d26:	897a      	ldrh	r2, [r7, #10]
 8010d28:	893b      	ldrh	r3, [r7, #8]
 8010d2a:	4413      	add	r3, r2
 8010d2c:	b29b      	uxth	r3, r3
 8010d2e:	3314      	adds	r3, #20
 8010d30:	b29b      	uxth	r3, r3
 8010d32:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010d36:	4619      	mov	r1, r3
 8010d38:	2022      	movs	r0, #34	; 0x22
 8010d3a:	f7fa fc11 	bl	800b560 <pbuf_alloc>
 8010d3e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8010d40:	697b      	ldr	r3, [r7, #20]
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d04d      	beq.n	8010de2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8010d46:	897b      	ldrh	r3, [r7, #10]
 8010d48:	3313      	adds	r3, #19
 8010d4a:	697a      	ldr	r2, [r7, #20]
 8010d4c:	8952      	ldrh	r2, [r2, #10]
 8010d4e:	4293      	cmp	r3, r2
 8010d50:	db06      	blt.n	8010d60 <tcp_output_alloc_header_common+0x4c>
 8010d52:	4b26      	ldr	r3, [pc, #152]	; (8010dec <tcp_output_alloc_header_common+0xd8>)
 8010d54:	f240 7223 	movw	r2, #1827	; 0x723
 8010d58:	4925      	ldr	r1, [pc, #148]	; (8010df0 <tcp_output_alloc_header_common+0xdc>)
 8010d5a:	4826      	ldr	r0, [pc, #152]	; (8010df4 <tcp_output_alloc_header_common+0xe0>)
 8010d5c:	f007 fa6a 	bl	8018234 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8010d60:	697b      	ldr	r3, [r7, #20]
 8010d62:	685b      	ldr	r3, [r3, #4]
 8010d64:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8010d66:	8c3b      	ldrh	r3, [r7, #32]
 8010d68:	4618      	mov	r0, r3
 8010d6a:	f7f9 fb31 	bl	800a3d0 <lwip_htons>
 8010d6e:	4603      	mov	r3, r0
 8010d70:	461a      	mov	r2, r3
 8010d72:	693b      	ldr	r3, [r7, #16]
 8010d74:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8010d76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010d78:	4618      	mov	r0, r3
 8010d7a:	f7f9 fb29 	bl	800a3d0 <lwip_htons>
 8010d7e:	4603      	mov	r3, r0
 8010d80:	461a      	mov	r2, r3
 8010d82:	693b      	ldr	r3, [r7, #16]
 8010d84:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8010d86:	693b      	ldr	r3, [r7, #16]
 8010d88:	687a      	ldr	r2, [r7, #4]
 8010d8a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8010d8c:	68f8      	ldr	r0, [r7, #12]
 8010d8e:	f7f9 fb34 	bl	800a3fa <lwip_htonl>
 8010d92:	4602      	mov	r2, r0
 8010d94:	693b      	ldr	r3, [r7, #16]
 8010d96:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8010d98:	897b      	ldrh	r3, [r7, #10]
 8010d9a:	089b      	lsrs	r3, r3, #2
 8010d9c:	b29b      	uxth	r3, r3
 8010d9e:	3305      	adds	r3, #5
 8010da0:	b29b      	uxth	r3, r3
 8010da2:	031b      	lsls	r3, r3, #12
 8010da4:	b29a      	uxth	r2, r3
 8010da6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010daa:	b29b      	uxth	r3, r3
 8010dac:	4313      	orrs	r3, r2
 8010dae:	b29b      	uxth	r3, r3
 8010db0:	4618      	mov	r0, r3
 8010db2:	f7f9 fb0d 	bl	800a3d0 <lwip_htons>
 8010db6:	4603      	mov	r3, r0
 8010db8:	461a      	mov	r2, r3
 8010dba:	693b      	ldr	r3, [r7, #16]
 8010dbc:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8010dbe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010dc0:	4618      	mov	r0, r3
 8010dc2:	f7f9 fb05 	bl	800a3d0 <lwip_htons>
 8010dc6:	4603      	mov	r3, r0
 8010dc8:	461a      	mov	r2, r3
 8010dca:	693b      	ldr	r3, [r7, #16]
 8010dcc:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8010dce:	693b      	ldr	r3, [r7, #16]
 8010dd0:	2200      	movs	r2, #0
 8010dd2:	741a      	strb	r2, [r3, #16]
 8010dd4:	2200      	movs	r2, #0
 8010dd6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8010dd8:	693b      	ldr	r3, [r7, #16]
 8010dda:	2200      	movs	r2, #0
 8010ddc:	749a      	strb	r2, [r3, #18]
 8010dde:	2200      	movs	r2, #0
 8010de0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8010de2:	697b      	ldr	r3, [r7, #20]
}
 8010de4:	4618      	mov	r0, r3
 8010de6:	3718      	adds	r7, #24
 8010de8:	46bd      	mov	sp, r7
 8010dea:	bd80      	pop	{r7, pc}
 8010dec:	0801a258 	.word	0x0801a258
 8010df0:	0801a930 	.word	0x0801a930
 8010df4:	0801a2ac 	.word	0x0801a2ac

08010df8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8010df8:	b5b0      	push	{r4, r5, r7, lr}
 8010dfa:	b08a      	sub	sp, #40	; 0x28
 8010dfc:	af04      	add	r7, sp, #16
 8010dfe:	60f8      	str	r0, [r7, #12]
 8010e00:	607b      	str	r3, [r7, #4]
 8010e02:	460b      	mov	r3, r1
 8010e04:	817b      	strh	r3, [r7, #10]
 8010e06:	4613      	mov	r3, r2
 8010e08:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8010e0a:	68fb      	ldr	r3, [r7, #12]
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d106      	bne.n	8010e1e <tcp_output_alloc_header+0x26>
 8010e10:	4b15      	ldr	r3, [pc, #84]	; (8010e68 <tcp_output_alloc_header+0x70>)
 8010e12:	f240 7242 	movw	r2, #1858	; 0x742
 8010e16:	4915      	ldr	r1, [pc, #84]	; (8010e6c <tcp_output_alloc_header+0x74>)
 8010e18:	4815      	ldr	r0, [pc, #84]	; (8010e70 <tcp_output_alloc_header+0x78>)
 8010e1a:	f007 fa0b 	bl	8018234 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	8adb      	ldrh	r3, [r3, #22]
 8010e26:	68fa      	ldr	r2, [r7, #12]
 8010e28:	8b12      	ldrh	r2, [r2, #24]
 8010e2a:	68f9      	ldr	r1, [r7, #12]
 8010e2c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8010e2e:	893d      	ldrh	r5, [r7, #8]
 8010e30:	897c      	ldrh	r4, [r7, #10]
 8010e32:	9103      	str	r1, [sp, #12]
 8010e34:	2110      	movs	r1, #16
 8010e36:	9102      	str	r1, [sp, #8]
 8010e38:	9201      	str	r2, [sp, #4]
 8010e3a:	9300      	str	r3, [sp, #0]
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	462a      	mov	r2, r5
 8010e40:	4621      	mov	r1, r4
 8010e42:	f7ff ff67 	bl	8010d14 <tcp_output_alloc_header_common>
 8010e46:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8010e48:	697b      	ldr	r3, [r7, #20]
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d006      	beq.n	8010e5c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e52:	68fa      	ldr	r2, [r7, #12]
 8010e54:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8010e56:	441a      	add	r2, r3
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8010e5c:	697b      	ldr	r3, [r7, #20]
}
 8010e5e:	4618      	mov	r0, r3
 8010e60:	3718      	adds	r7, #24
 8010e62:	46bd      	mov	sp, r7
 8010e64:	bdb0      	pop	{r4, r5, r7, pc}
 8010e66:	bf00      	nop
 8010e68:	0801a258 	.word	0x0801a258
 8010e6c:	0801a960 	.word	0x0801a960
 8010e70:	0801a2ac 	.word	0x0801a2ac

08010e74 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8010e74:	b580      	push	{r7, lr}
 8010e76:	b088      	sub	sp, #32
 8010e78:	af00      	add	r7, sp, #0
 8010e7a:	60f8      	str	r0, [r7, #12]
 8010e7c:	60b9      	str	r1, [r7, #8]
 8010e7e:	4611      	mov	r1, r2
 8010e80:	461a      	mov	r2, r3
 8010e82:	460b      	mov	r3, r1
 8010e84:	71fb      	strb	r3, [r7, #7]
 8010e86:	4613      	mov	r3, r2
 8010e88:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8010e8a:	2300      	movs	r3, #0
 8010e8c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8010e8e:	68bb      	ldr	r3, [r7, #8]
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d106      	bne.n	8010ea2 <tcp_output_fill_options+0x2e>
 8010e94:	4b13      	ldr	r3, [pc, #76]	; (8010ee4 <tcp_output_fill_options+0x70>)
 8010e96:	f240 7256 	movw	r2, #1878	; 0x756
 8010e9a:	4913      	ldr	r1, [pc, #76]	; (8010ee8 <tcp_output_fill_options+0x74>)
 8010e9c:	4813      	ldr	r0, [pc, #76]	; (8010eec <tcp_output_fill_options+0x78>)
 8010e9e:	f007 f9c9 	bl	8018234 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8010ea2:	68bb      	ldr	r3, [r7, #8]
 8010ea4:	685b      	ldr	r3, [r3, #4]
 8010ea6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8010ea8:	69bb      	ldr	r3, [r7, #24]
 8010eaa:	3314      	adds	r3, #20
 8010eac:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8010eae:	69bb      	ldr	r3, [r7, #24]
 8010eb0:	f103 0214 	add.w	r2, r3, #20
 8010eb4:	8bfb      	ldrh	r3, [r7, #30]
 8010eb6:	009b      	lsls	r3, r3, #2
 8010eb8:	4619      	mov	r1, r3
 8010eba:	79fb      	ldrb	r3, [r7, #7]
 8010ebc:	009b      	lsls	r3, r3, #2
 8010ebe:	f003 0304 	and.w	r3, r3, #4
 8010ec2:	440b      	add	r3, r1
 8010ec4:	4413      	add	r3, r2
 8010ec6:	697a      	ldr	r2, [r7, #20]
 8010ec8:	429a      	cmp	r2, r3
 8010eca:	d006      	beq.n	8010eda <tcp_output_fill_options+0x66>
 8010ecc:	4b05      	ldr	r3, [pc, #20]	; (8010ee4 <tcp_output_fill_options+0x70>)
 8010ece:	f240 7275 	movw	r2, #1909	; 0x775
 8010ed2:	4907      	ldr	r1, [pc, #28]	; (8010ef0 <tcp_output_fill_options+0x7c>)
 8010ed4:	4805      	ldr	r0, [pc, #20]	; (8010eec <tcp_output_fill_options+0x78>)
 8010ed6:	f007 f9ad 	bl	8018234 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8010eda:	bf00      	nop
 8010edc:	3720      	adds	r7, #32
 8010ede:	46bd      	mov	sp, r7
 8010ee0:	bd80      	pop	{r7, pc}
 8010ee2:	bf00      	nop
 8010ee4:	0801a258 	.word	0x0801a258
 8010ee8:	0801a988 	.word	0x0801a988
 8010eec:	0801a2ac 	.word	0x0801a2ac
 8010ef0:	0801a880 	.word	0x0801a880

08010ef4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8010ef4:	b580      	push	{r7, lr}
 8010ef6:	b08a      	sub	sp, #40	; 0x28
 8010ef8:	af04      	add	r7, sp, #16
 8010efa:	60f8      	str	r0, [r7, #12]
 8010efc:	60b9      	str	r1, [r7, #8]
 8010efe:	607a      	str	r2, [r7, #4]
 8010f00:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8010f02:	68bb      	ldr	r3, [r7, #8]
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d106      	bne.n	8010f16 <tcp_output_control_segment+0x22>
 8010f08:	4b1c      	ldr	r3, [pc, #112]	; (8010f7c <tcp_output_control_segment+0x88>)
 8010f0a:	f240 7287 	movw	r2, #1927	; 0x787
 8010f0e:	491c      	ldr	r1, [pc, #112]	; (8010f80 <tcp_output_control_segment+0x8c>)
 8010f10:	481c      	ldr	r0, [pc, #112]	; (8010f84 <tcp_output_control_segment+0x90>)
 8010f12:	f007 f98f 	bl	8018234 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8010f16:	683a      	ldr	r2, [r7, #0]
 8010f18:	6879      	ldr	r1, [r7, #4]
 8010f1a:	68f8      	ldr	r0, [r7, #12]
 8010f1c:	f7fe ff40 	bl	800fda0 <tcp_route>
 8010f20:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8010f22:	693b      	ldr	r3, [r7, #16]
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d102      	bne.n	8010f2e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8010f28:	23fc      	movs	r3, #252	; 0xfc
 8010f2a:	75fb      	strb	r3, [r7, #23]
 8010f2c:	e01c      	b.n	8010f68 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8010f2e:	68fb      	ldr	r3, [r7, #12]
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d006      	beq.n	8010f42 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8010f34:	68fb      	ldr	r3, [r7, #12]
 8010f36:	7adb      	ldrb	r3, [r3, #11]
 8010f38:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	7a9b      	ldrb	r3, [r3, #10]
 8010f3e:	757b      	strb	r3, [r7, #21]
 8010f40:	e003      	b.n	8010f4a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8010f42:	23ff      	movs	r3, #255	; 0xff
 8010f44:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8010f46:	2300      	movs	r3, #0
 8010f48:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8010f4a:	7dba      	ldrb	r2, [r7, #22]
 8010f4c:	693b      	ldr	r3, [r7, #16]
 8010f4e:	9302      	str	r3, [sp, #8]
 8010f50:	2306      	movs	r3, #6
 8010f52:	9301      	str	r3, [sp, #4]
 8010f54:	7d7b      	ldrb	r3, [r7, #21]
 8010f56:	9300      	str	r3, [sp, #0]
 8010f58:	4613      	mov	r3, r2
 8010f5a:	683a      	ldr	r2, [r7, #0]
 8010f5c:	6879      	ldr	r1, [r7, #4]
 8010f5e:	68b8      	ldr	r0, [r7, #8]
 8010f60:	f001 ffa0 	bl	8012ea4 <ip4_output_if>
 8010f64:	4603      	mov	r3, r0
 8010f66:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8010f68:	68b8      	ldr	r0, [r7, #8]
 8010f6a:	f7fa fddd 	bl	800bb28 <pbuf_free>
  return err;
 8010f6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010f72:	4618      	mov	r0, r3
 8010f74:	3718      	adds	r7, #24
 8010f76:	46bd      	mov	sp, r7
 8010f78:	bd80      	pop	{r7, pc}
 8010f7a:	bf00      	nop
 8010f7c:	0801a258 	.word	0x0801a258
 8010f80:	0801a9b0 	.word	0x0801a9b0
 8010f84:	0801a2ac 	.word	0x0801a2ac

08010f88 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8010f88:	b590      	push	{r4, r7, lr}
 8010f8a:	b08b      	sub	sp, #44	; 0x2c
 8010f8c:	af04      	add	r7, sp, #16
 8010f8e:	60f8      	str	r0, [r7, #12]
 8010f90:	60b9      	str	r1, [r7, #8]
 8010f92:	607a      	str	r2, [r7, #4]
 8010f94:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8010f96:	683b      	ldr	r3, [r7, #0]
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d106      	bne.n	8010faa <tcp_rst+0x22>
 8010f9c:	4b1f      	ldr	r3, [pc, #124]	; (801101c <tcp_rst+0x94>)
 8010f9e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8010fa2:	491f      	ldr	r1, [pc, #124]	; (8011020 <tcp_rst+0x98>)
 8010fa4:	481f      	ldr	r0, [pc, #124]	; (8011024 <tcp_rst+0x9c>)
 8010fa6:	f007 f945 	bl	8018234 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8010faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d106      	bne.n	8010fbe <tcp_rst+0x36>
 8010fb0:	4b1a      	ldr	r3, [pc, #104]	; (801101c <tcp_rst+0x94>)
 8010fb2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8010fb6:	491c      	ldr	r1, [pc, #112]	; (8011028 <tcp_rst+0xa0>)
 8010fb8:	481a      	ldr	r0, [pc, #104]	; (8011024 <tcp_rst+0x9c>)
 8010fba:	f007 f93b 	bl	8018234 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010fbe:	2300      	movs	r3, #0
 8010fc0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8010fc2:	f246 0308 	movw	r3, #24584	; 0x6008
 8010fc6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8010fc8:	7dfb      	ldrb	r3, [r7, #23]
 8010fca:	b29c      	uxth	r4, r3
 8010fcc:	68b8      	ldr	r0, [r7, #8]
 8010fce:	f7f9 fa14 	bl	800a3fa <lwip_htonl>
 8010fd2:	4602      	mov	r2, r0
 8010fd4:	8abb      	ldrh	r3, [r7, #20]
 8010fd6:	9303      	str	r3, [sp, #12]
 8010fd8:	2314      	movs	r3, #20
 8010fda:	9302      	str	r3, [sp, #8]
 8010fdc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8010fde:	9301      	str	r3, [sp, #4]
 8010fe0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010fe2:	9300      	str	r3, [sp, #0]
 8010fe4:	4613      	mov	r3, r2
 8010fe6:	2200      	movs	r2, #0
 8010fe8:	4621      	mov	r1, r4
 8010fea:	6878      	ldr	r0, [r7, #4]
 8010fec:	f7ff fe92 	bl	8010d14 <tcp_output_alloc_header_common>
 8010ff0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8010ff2:	693b      	ldr	r3, [r7, #16]
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d00c      	beq.n	8011012 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010ff8:	7dfb      	ldrb	r3, [r7, #23]
 8010ffa:	2200      	movs	r2, #0
 8010ffc:	6939      	ldr	r1, [r7, #16]
 8010ffe:	68f8      	ldr	r0, [r7, #12]
 8011000:	f7ff ff38 	bl	8010e74 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8011004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011006:	683a      	ldr	r2, [r7, #0]
 8011008:	6939      	ldr	r1, [r7, #16]
 801100a:	68f8      	ldr	r0, [r7, #12]
 801100c:	f7ff ff72 	bl	8010ef4 <tcp_output_control_segment>
 8011010:	e000      	b.n	8011014 <tcp_rst+0x8c>
    return;
 8011012:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8011014:	371c      	adds	r7, #28
 8011016:	46bd      	mov	sp, r7
 8011018:	bd90      	pop	{r4, r7, pc}
 801101a:	bf00      	nop
 801101c:	0801a258 	.word	0x0801a258
 8011020:	0801a9dc 	.word	0x0801a9dc
 8011024:	0801a2ac 	.word	0x0801a2ac
 8011028:	0801a9f8 	.word	0x0801a9f8

0801102c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801102c:	b590      	push	{r4, r7, lr}
 801102e:	b087      	sub	sp, #28
 8011030:	af00      	add	r7, sp, #0
 8011032:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8011034:	2300      	movs	r3, #0
 8011036:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8011038:	2300      	movs	r3, #0
 801103a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	2b00      	cmp	r3, #0
 8011040:	d106      	bne.n	8011050 <tcp_send_empty_ack+0x24>
 8011042:	4b28      	ldr	r3, [pc, #160]	; (80110e4 <tcp_send_empty_ack+0xb8>)
 8011044:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8011048:	4927      	ldr	r1, [pc, #156]	; (80110e8 <tcp_send_empty_ack+0xbc>)
 801104a:	4828      	ldr	r0, [pc, #160]	; (80110ec <tcp_send_empty_ack+0xc0>)
 801104c:	f007 f8f2 	bl	8018234 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011050:	7dfb      	ldrb	r3, [r7, #23]
 8011052:	009b      	lsls	r3, r3, #2
 8011054:	b2db      	uxtb	r3, r3
 8011056:	f003 0304 	and.w	r3, r3, #4
 801105a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801105c:	7d7b      	ldrb	r3, [r7, #21]
 801105e:	b29c      	uxth	r4, r3
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011064:	4618      	mov	r0, r3
 8011066:	f7f9 f9c8 	bl	800a3fa <lwip_htonl>
 801106a:	4603      	mov	r3, r0
 801106c:	2200      	movs	r2, #0
 801106e:	4621      	mov	r1, r4
 8011070:	6878      	ldr	r0, [r7, #4]
 8011072:	f7ff fec1 	bl	8010df8 <tcp_output_alloc_header>
 8011076:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011078:	693b      	ldr	r3, [r7, #16]
 801107a:	2b00      	cmp	r3, #0
 801107c:	d109      	bne.n	8011092 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	8b5b      	ldrh	r3, [r3, #26]
 8011082:	f043 0303 	orr.w	r3, r3, #3
 8011086:	b29a      	uxth	r2, r3
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801108c:	f06f 0301 	mvn.w	r3, #1
 8011090:	e023      	b.n	80110da <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8011092:	7dbb      	ldrb	r3, [r7, #22]
 8011094:	7dfa      	ldrb	r2, [r7, #23]
 8011096:	6939      	ldr	r1, [r7, #16]
 8011098:	6878      	ldr	r0, [r7, #4]
 801109a:	f7ff feeb 	bl	8010e74 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801109e:	687a      	ldr	r2, [r7, #4]
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	3304      	adds	r3, #4
 80110a4:	6939      	ldr	r1, [r7, #16]
 80110a6:	6878      	ldr	r0, [r7, #4]
 80110a8:	f7ff ff24 	bl	8010ef4 <tcp_output_control_segment>
 80110ac:	4603      	mov	r3, r0
 80110ae:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80110b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d007      	beq.n	80110c8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	8b5b      	ldrh	r3, [r3, #26]
 80110bc:	f043 0303 	orr.w	r3, r3, #3
 80110c0:	b29a      	uxth	r2, r3
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	835a      	strh	r2, [r3, #26]
 80110c6:	e006      	b.n	80110d6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	8b5b      	ldrh	r3, [r3, #26]
 80110cc:	f023 0303 	bic.w	r3, r3, #3
 80110d0:	b29a      	uxth	r2, r3
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80110d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80110da:	4618      	mov	r0, r3
 80110dc:	371c      	adds	r7, #28
 80110de:	46bd      	mov	sp, r7
 80110e0:	bd90      	pop	{r4, r7, pc}
 80110e2:	bf00      	nop
 80110e4:	0801a258 	.word	0x0801a258
 80110e8:	0801aa14 	.word	0x0801aa14
 80110ec:	0801a2ac 	.word	0x0801a2ac

080110f0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80110f0:	b590      	push	{r4, r7, lr}
 80110f2:	b087      	sub	sp, #28
 80110f4:	af00      	add	r7, sp, #0
 80110f6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80110f8:	2300      	movs	r3, #0
 80110fa:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d106      	bne.n	8011110 <tcp_keepalive+0x20>
 8011102:	4b18      	ldr	r3, [pc, #96]	; (8011164 <tcp_keepalive+0x74>)
 8011104:	f640 0224 	movw	r2, #2084	; 0x824
 8011108:	4917      	ldr	r1, [pc, #92]	; (8011168 <tcp_keepalive+0x78>)
 801110a:	4818      	ldr	r0, [pc, #96]	; (801116c <tcp_keepalive+0x7c>)
 801110c:	f007 f892 	bl	8018234 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8011110:	7dfb      	ldrb	r3, [r7, #23]
 8011112:	b29c      	uxth	r4, r3
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011118:	3b01      	subs	r3, #1
 801111a:	4618      	mov	r0, r3
 801111c:	f7f9 f96d 	bl	800a3fa <lwip_htonl>
 8011120:	4603      	mov	r3, r0
 8011122:	2200      	movs	r2, #0
 8011124:	4621      	mov	r1, r4
 8011126:	6878      	ldr	r0, [r7, #4]
 8011128:	f7ff fe66 	bl	8010df8 <tcp_output_alloc_header>
 801112c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801112e:	693b      	ldr	r3, [r7, #16]
 8011130:	2b00      	cmp	r3, #0
 8011132:	d102      	bne.n	801113a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8011134:	f04f 33ff 	mov.w	r3, #4294967295
 8011138:	e010      	b.n	801115c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801113a:	7dfb      	ldrb	r3, [r7, #23]
 801113c:	2200      	movs	r2, #0
 801113e:	6939      	ldr	r1, [r7, #16]
 8011140:	6878      	ldr	r0, [r7, #4]
 8011142:	f7ff fe97 	bl	8010e74 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011146:	687a      	ldr	r2, [r7, #4]
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	3304      	adds	r3, #4
 801114c:	6939      	ldr	r1, [r7, #16]
 801114e:	6878      	ldr	r0, [r7, #4]
 8011150:	f7ff fed0 	bl	8010ef4 <tcp_output_control_segment>
 8011154:	4603      	mov	r3, r0
 8011156:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011158:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801115c:	4618      	mov	r0, r3
 801115e:	371c      	adds	r7, #28
 8011160:	46bd      	mov	sp, r7
 8011162:	bd90      	pop	{r4, r7, pc}
 8011164:	0801a258 	.word	0x0801a258
 8011168:	0801aa34 	.word	0x0801aa34
 801116c:	0801a2ac 	.word	0x0801a2ac

08011170 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8011170:	b590      	push	{r4, r7, lr}
 8011172:	b08b      	sub	sp, #44	; 0x2c
 8011174:	af00      	add	r7, sp, #0
 8011176:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011178:	2300      	movs	r3, #0
 801117a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	2b00      	cmp	r3, #0
 8011182:	d106      	bne.n	8011192 <tcp_zero_window_probe+0x22>
 8011184:	4b4c      	ldr	r3, [pc, #304]	; (80112b8 <tcp_zero_window_probe+0x148>)
 8011186:	f640 024f 	movw	r2, #2127	; 0x84f
 801118a:	494c      	ldr	r1, [pc, #304]	; (80112bc <tcp_zero_window_probe+0x14c>)
 801118c:	484c      	ldr	r0, [pc, #304]	; (80112c0 <tcp_zero_window_probe+0x150>)
 801118e:	f007 f851 	bl	8018234 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011196:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8011198:	6a3b      	ldr	r3, [r7, #32]
 801119a:	2b00      	cmp	r3, #0
 801119c:	d101      	bne.n	80111a2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801119e:	2300      	movs	r3, #0
 80111a0:	e086      	b.n	80112b0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80111a8:	2bff      	cmp	r3, #255	; 0xff
 80111aa:	d007      	beq.n	80111bc <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80111b2:	3301      	adds	r3, #1
 80111b4:	b2da      	uxtb	r2, r3
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80111bc:	6a3b      	ldr	r3, [r7, #32]
 80111be:	68db      	ldr	r3, [r3, #12]
 80111c0:	899b      	ldrh	r3, [r3, #12]
 80111c2:	b29b      	uxth	r3, r3
 80111c4:	4618      	mov	r0, r3
 80111c6:	f7f9 f903 	bl	800a3d0 <lwip_htons>
 80111ca:	4603      	mov	r3, r0
 80111cc:	b2db      	uxtb	r3, r3
 80111ce:	f003 0301 	and.w	r3, r3, #1
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d005      	beq.n	80111e2 <tcp_zero_window_probe+0x72>
 80111d6:	6a3b      	ldr	r3, [r7, #32]
 80111d8:	891b      	ldrh	r3, [r3, #8]
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d101      	bne.n	80111e2 <tcp_zero_window_probe+0x72>
 80111de:	2301      	movs	r3, #1
 80111e0:	e000      	b.n	80111e4 <tcp_zero_window_probe+0x74>
 80111e2:	2300      	movs	r3, #0
 80111e4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80111e6:	7ffb      	ldrb	r3, [r7, #31]
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	bf0c      	ite	eq
 80111ec:	2301      	moveq	r3, #1
 80111ee:	2300      	movne	r3, #0
 80111f0:	b2db      	uxtb	r3, r3
 80111f2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80111f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80111f8:	b299      	uxth	r1, r3
 80111fa:	6a3b      	ldr	r3, [r7, #32]
 80111fc:	68db      	ldr	r3, [r3, #12]
 80111fe:	685b      	ldr	r3, [r3, #4]
 8011200:	8bba      	ldrh	r2, [r7, #28]
 8011202:	6878      	ldr	r0, [r7, #4]
 8011204:	f7ff fdf8 	bl	8010df8 <tcp_output_alloc_header>
 8011208:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801120a:	69bb      	ldr	r3, [r7, #24]
 801120c:	2b00      	cmp	r3, #0
 801120e:	d102      	bne.n	8011216 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8011210:	f04f 33ff 	mov.w	r3, #4294967295
 8011214:	e04c      	b.n	80112b0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8011216:	69bb      	ldr	r3, [r7, #24]
 8011218:	685b      	ldr	r3, [r3, #4]
 801121a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801121c:	7ffb      	ldrb	r3, [r7, #31]
 801121e:	2b00      	cmp	r3, #0
 8011220:	d011      	beq.n	8011246 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8011222:	697b      	ldr	r3, [r7, #20]
 8011224:	899b      	ldrh	r3, [r3, #12]
 8011226:	b29b      	uxth	r3, r3
 8011228:	b21b      	sxth	r3, r3
 801122a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801122e:	b21c      	sxth	r4, r3
 8011230:	2011      	movs	r0, #17
 8011232:	f7f9 f8cd 	bl	800a3d0 <lwip_htons>
 8011236:	4603      	mov	r3, r0
 8011238:	b21b      	sxth	r3, r3
 801123a:	4323      	orrs	r3, r4
 801123c:	b21b      	sxth	r3, r3
 801123e:	b29a      	uxth	r2, r3
 8011240:	697b      	ldr	r3, [r7, #20]
 8011242:	819a      	strh	r2, [r3, #12]
 8011244:	e010      	b.n	8011268 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8011246:	69bb      	ldr	r3, [r7, #24]
 8011248:	685b      	ldr	r3, [r3, #4]
 801124a:	3314      	adds	r3, #20
 801124c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801124e:	6a3b      	ldr	r3, [r7, #32]
 8011250:	6858      	ldr	r0, [r3, #4]
 8011252:	6a3b      	ldr	r3, [r7, #32]
 8011254:	685b      	ldr	r3, [r3, #4]
 8011256:	891a      	ldrh	r2, [r3, #8]
 8011258:	6a3b      	ldr	r3, [r7, #32]
 801125a:	891b      	ldrh	r3, [r3, #8]
 801125c:	1ad3      	subs	r3, r2, r3
 801125e:	b29b      	uxth	r3, r3
 8011260:	2201      	movs	r2, #1
 8011262:	6939      	ldr	r1, [r7, #16]
 8011264:	f7fa fe56 	bl	800bf14 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8011268:	6a3b      	ldr	r3, [r7, #32]
 801126a:	68db      	ldr	r3, [r3, #12]
 801126c:	685b      	ldr	r3, [r3, #4]
 801126e:	4618      	mov	r0, r3
 8011270:	f7f9 f8c3 	bl	800a3fa <lwip_htonl>
 8011274:	4603      	mov	r3, r0
 8011276:	3301      	adds	r3, #1
 8011278:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	1ad3      	subs	r3, r2, r3
 8011282:	2b00      	cmp	r3, #0
 8011284:	da02      	bge.n	801128c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	68fa      	ldr	r2, [r7, #12]
 801128a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801128c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011290:	2200      	movs	r2, #0
 8011292:	69b9      	ldr	r1, [r7, #24]
 8011294:	6878      	ldr	r0, [r7, #4]
 8011296:	f7ff fded 	bl	8010e74 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801129a:	687a      	ldr	r2, [r7, #4]
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	3304      	adds	r3, #4
 80112a0:	69b9      	ldr	r1, [r7, #24]
 80112a2:	6878      	ldr	r0, [r7, #4]
 80112a4:	f7ff fe26 	bl	8010ef4 <tcp_output_control_segment>
 80112a8:	4603      	mov	r3, r0
 80112aa:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80112ac:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80112b0:	4618      	mov	r0, r3
 80112b2:	372c      	adds	r7, #44	; 0x2c
 80112b4:	46bd      	mov	sp, r7
 80112b6:	bd90      	pop	{r4, r7, pc}
 80112b8:	0801a258 	.word	0x0801a258
 80112bc:	0801aa50 	.word	0x0801aa50
 80112c0:	0801a2ac 	.word	0x0801a2ac

080112c4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80112c4:	b580      	push	{r7, lr}
 80112c6:	b082      	sub	sp, #8
 80112c8:	af00      	add	r7, sp, #0
 80112ca:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80112cc:	f7fa ff10 	bl	800c0f0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80112d0:	4b0a      	ldr	r3, [pc, #40]	; (80112fc <tcpip_tcp_timer+0x38>)
 80112d2:	681b      	ldr	r3, [r3, #0]
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d103      	bne.n	80112e0 <tcpip_tcp_timer+0x1c>
 80112d8:	4b09      	ldr	r3, [pc, #36]	; (8011300 <tcpip_tcp_timer+0x3c>)
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d005      	beq.n	80112ec <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80112e0:	2200      	movs	r2, #0
 80112e2:	4908      	ldr	r1, [pc, #32]	; (8011304 <tcpip_tcp_timer+0x40>)
 80112e4:	20fa      	movs	r0, #250	; 0xfa
 80112e6:	f000 f8f3 	bl	80114d0 <sys_timeout>
 80112ea:	e003      	b.n	80112f4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80112ec:	4b06      	ldr	r3, [pc, #24]	; (8011308 <tcpip_tcp_timer+0x44>)
 80112ee:	2200      	movs	r2, #0
 80112f0:	601a      	str	r2, [r3, #0]
  }
}
 80112f2:	bf00      	nop
 80112f4:	bf00      	nop
 80112f6:	3708      	adds	r7, #8
 80112f8:	46bd      	mov	sp, r7
 80112fa:	bd80      	pop	{r7, pc}
 80112fc:	2000dc44 	.word	0x2000dc44
 8011300:	2000dc54 	.word	0x2000dc54
 8011304:	080112c5 	.word	0x080112c5
 8011308:	20004c04 	.word	0x20004c04

0801130c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801130c:	b580      	push	{r7, lr}
 801130e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8011310:	4b0a      	ldr	r3, [pc, #40]	; (801133c <tcp_timer_needed+0x30>)
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	2b00      	cmp	r3, #0
 8011316:	d10f      	bne.n	8011338 <tcp_timer_needed+0x2c>
 8011318:	4b09      	ldr	r3, [pc, #36]	; (8011340 <tcp_timer_needed+0x34>)
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	2b00      	cmp	r3, #0
 801131e:	d103      	bne.n	8011328 <tcp_timer_needed+0x1c>
 8011320:	4b08      	ldr	r3, [pc, #32]	; (8011344 <tcp_timer_needed+0x38>)
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	2b00      	cmp	r3, #0
 8011326:	d007      	beq.n	8011338 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8011328:	4b04      	ldr	r3, [pc, #16]	; (801133c <tcp_timer_needed+0x30>)
 801132a:	2201      	movs	r2, #1
 801132c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801132e:	2200      	movs	r2, #0
 8011330:	4905      	ldr	r1, [pc, #20]	; (8011348 <tcp_timer_needed+0x3c>)
 8011332:	20fa      	movs	r0, #250	; 0xfa
 8011334:	f000 f8cc 	bl	80114d0 <sys_timeout>
  }
}
 8011338:	bf00      	nop
 801133a:	bd80      	pop	{r7, pc}
 801133c:	20004c04 	.word	0x20004c04
 8011340:	2000dc44 	.word	0x2000dc44
 8011344:	2000dc54 	.word	0x2000dc54
 8011348:	080112c5 	.word	0x080112c5

0801134c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801134c:	b580      	push	{r7, lr}
 801134e:	b086      	sub	sp, #24
 8011350:	af00      	add	r7, sp, #0
 8011352:	60f8      	str	r0, [r7, #12]
 8011354:	60b9      	str	r1, [r7, #8]
 8011356:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8011358:	200a      	movs	r0, #10
 801135a:	f7f9 fcef 	bl	800ad3c <memp_malloc>
 801135e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8011360:	693b      	ldr	r3, [r7, #16]
 8011362:	2b00      	cmp	r3, #0
 8011364:	d109      	bne.n	801137a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8011366:	693b      	ldr	r3, [r7, #16]
 8011368:	2b00      	cmp	r3, #0
 801136a:	d151      	bne.n	8011410 <sys_timeout_abs+0xc4>
 801136c:	4b2a      	ldr	r3, [pc, #168]	; (8011418 <sys_timeout_abs+0xcc>)
 801136e:	22be      	movs	r2, #190	; 0xbe
 8011370:	492a      	ldr	r1, [pc, #168]	; (801141c <sys_timeout_abs+0xd0>)
 8011372:	482b      	ldr	r0, [pc, #172]	; (8011420 <sys_timeout_abs+0xd4>)
 8011374:	f006 ff5e 	bl	8018234 <iprintf>
    return;
 8011378:	e04a      	b.n	8011410 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801137a:	693b      	ldr	r3, [r7, #16]
 801137c:	2200      	movs	r2, #0
 801137e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8011380:	693b      	ldr	r3, [r7, #16]
 8011382:	68ba      	ldr	r2, [r7, #8]
 8011384:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8011386:	693b      	ldr	r3, [r7, #16]
 8011388:	687a      	ldr	r2, [r7, #4]
 801138a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801138c:	693b      	ldr	r3, [r7, #16]
 801138e:	68fa      	ldr	r2, [r7, #12]
 8011390:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8011392:	4b24      	ldr	r3, [pc, #144]	; (8011424 <sys_timeout_abs+0xd8>)
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	2b00      	cmp	r3, #0
 8011398:	d103      	bne.n	80113a2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801139a:	4a22      	ldr	r2, [pc, #136]	; (8011424 <sys_timeout_abs+0xd8>)
 801139c:	693b      	ldr	r3, [r7, #16]
 801139e:	6013      	str	r3, [r2, #0]
    return;
 80113a0:	e037      	b.n	8011412 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80113a2:	693b      	ldr	r3, [r7, #16]
 80113a4:	685a      	ldr	r2, [r3, #4]
 80113a6:	4b1f      	ldr	r3, [pc, #124]	; (8011424 <sys_timeout_abs+0xd8>)
 80113a8:	681b      	ldr	r3, [r3, #0]
 80113aa:	685b      	ldr	r3, [r3, #4]
 80113ac:	1ad3      	subs	r3, r2, r3
 80113ae:	0fdb      	lsrs	r3, r3, #31
 80113b0:	f003 0301 	and.w	r3, r3, #1
 80113b4:	b2db      	uxtb	r3, r3
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d007      	beq.n	80113ca <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80113ba:	4b1a      	ldr	r3, [pc, #104]	; (8011424 <sys_timeout_abs+0xd8>)
 80113bc:	681a      	ldr	r2, [r3, #0]
 80113be:	693b      	ldr	r3, [r7, #16]
 80113c0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80113c2:	4a18      	ldr	r2, [pc, #96]	; (8011424 <sys_timeout_abs+0xd8>)
 80113c4:	693b      	ldr	r3, [r7, #16]
 80113c6:	6013      	str	r3, [r2, #0]
 80113c8:	e023      	b.n	8011412 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80113ca:	4b16      	ldr	r3, [pc, #88]	; (8011424 <sys_timeout_abs+0xd8>)
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	617b      	str	r3, [r7, #20]
 80113d0:	e01a      	b.n	8011408 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80113d2:	697b      	ldr	r3, [r7, #20]
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d00b      	beq.n	80113f2 <sys_timeout_abs+0xa6>
 80113da:	693b      	ldr	r3, [r7, #16]
 80113dc:	685a      	ldr	r2, [r3, #4]
 80113de:	697b      	ldr	r3, [r7, #20]
 80113e0:	681b      	ldr	r3, [r3, #0]
 80113e2:	685b      	ldr	r3, [r3, #4]
 80113e4:	1ad3      	subs	r3, r2, r3
 80113e6:	0fdb      	lsrs	r3, r3, #31
 80113e8:	f003 0301 	and.w	r3, r3, #1
 80113ec:	b2db      	uxtb	r3, r3
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d007      	beq.n	8011402 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80113f2:	697b      	ldr	r3, [r7, #20]
 80113f4:	681a      	ldr	r2, [r3, #0]
 80113f6:	693b      	ldr	r3, [r7, #16]
 80113f8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80113fa:	697b      	ldr	r3, [r7, #20]
 80113fc:	693a      	ldr	r2, [r7, #16]
 80113fe:	601a      	str	r2, [r3, #0]
        break;
 8011400:	e007      	b.n	8011412 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8011402:	697b      	ldr	r3, [r7, #20]
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	617b      	str	r3, [r7, #20]
 8011408:	697b      	ldr	r3, [r7, #20]
 801140a:	2b00      	cmp	r3, #0
 801140c:	d1e1      	bne.n	80113d2 <sys_timeout_abs+0x86>
 801140e:	e000      	b.n	8011412 <sys_timeout_abs+0xc6>
    return;
 8011410:	bf00      	nop
      }
    }
  }
}
 8011412:	3718      	adds	r7, #24
 8011414:	46bd      	mov	sp, r7
 8011416:	bd80      	pop	{r7, pc}
 8011418:	0801aa74 	.word	0x0801aa74
 801141c:	0801aaa8 	.word	0x0801aaa8
 8011420:	0801aae8 	.word	0x0801aae8
 8011424:	20004bfc 	.word	0x20004bfc

08011428 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8011428:	b580      	push	{r7, lr}
 801142a:	b086      	sub	sp, #24
 801142c:	af00      	add	r7, sp, #0
 801142e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8011434:	697b      	ldr	r3, [r7, #20]
 8011436:	685b      	ldr	r3, [r3, #4]
 8011438:	4798      	blx	r3

  now = sys_now();
 801143a:	f7f4 fb63 	bl	8005b04 <sys_now>
 801143e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8011440:	697b      	ldr	r3, [r7, #20]
 8011442:	681a      	ldr	r2, [r3, #0]
 8011444:	4b0f      	ldr	r3, [pc, #60]	; (8011484 <lwip_cyclic_timer+0x5c>)
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	4413      	add	r3, r2
 801144a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801144c:	68fa      	ldr	r2, [r7, #12]
 801144e:	693b      	ldr	r3, [r7, #16]
 8011450:	1ad3      	subs	r3, r2, r3
 8011452:	0fdb      	lsrs	r3, r3, #31
 8011454:	f003 0301 	and.w	r3, r3, #1
 8011458:	b2db      	uxtb	r3, r3
 801145a:	2b00      	cmp	r3, #0
 801145c:	d009      	beq.n	8011472 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801145e:	697b      	ldr	r3, [r7, #20]
 8011460:	681a      	ldr	r2, [r3, #0]
 8011462:	693b      	ldr	r3, [r7, #16]
 8011464:	4413      	add	r3, r2
 8011466:	687a      	ldr	r2, [r7, #4]
 8011468:	4907      	ldr	r1, [pc, #28]	; (8011488 <lwip_cyclic_timer+0x60>)
 801146a:	4618      	mov	r0, r3
 801146c:	f7ff ff6e 	bl	801134c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8011470:	e004      	b.n	801147c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8011472:	687a      	ldr	r2, [r7, #4]
 8011474:	4904      	ldr	r1, [pc, #16]	; (8011488 <lwip_cyclic_timer+0x60>)
 8011476:	68f8      	ldr	r0, [r7, #12]
 8011478:	f7ff ff68 	bl	801134c <sys_timeout_abs>
}
 801147c:	bf00      	nop
 801147e:	3718      	adds	r7, #24
 8011480:	46bd      	mov	sp, r7
 8011482:	bd80      	pop	{r7, pc}
 8011484:	20004c00 	.word	0x20004c00
 8011488:	08011429 	.word	0x08011429

0801148c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801148c:	b580      	push	{r7, lr}
 801148e:	b082      	sub	sp, #8
 8011490:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011492:	2301      	movs	r3, #1
 8011494:	607b      	str	r3, [r7, #4]
 8011496:	e00e      	b.n	80114b6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8011498:	4a0b      	ldr	r2, [pc, #44]	; (80114c8 <sys_timeouts_init+0x3c>)
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	00db      	lsls	r3, r3, #3
 80114a4:	4a08      	ldr	r2, [pc, #32]	; (80114c8 <sys_timeouts_init+0x3c>)
 80114a6:	4413      	add	r3, r2
 80114a8:	461a      	mov	r2, r3
 80114aa:	4908      	ldr	r1, [pc, #32]	; (80114cc <sys_timeouts_init+0x40>)
 80114ac:	f000 f810 	bl	80114d0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	3301      	adds	r3, #1
 80114b4:	607b      	str	r3, [r7, #4]
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	2b02      	cmp	r3, #2
 80114ba:	d9ed      	bls.n	8011498 <sys_timeouts_init+0xc>
  }
}
 80114bc:	bf00      	nop
 80114be:	bf00      	nop
 80114c0:	3708      	adds	r7, #8
 80114c2:	46bd      	mov	sp, r7
 80114c4:	bd80      	pop	{r7, pc}
 80114c6:	bf00      	nop
 80114c8:	0801b820 	.word	0x0801b820
 80114cc:	08011429 	.word	0x08011429

080114d0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80114d0:	b580      	push	{r7, lr}
 80114d2:	b086      	sub	sp, #24
 80114d4:	af00      	add	r7, sp, #0
 80114d6:	60f8      	str	r0, [r7, #12]
 80114d8:	60b9      	str	r1, [r7, #8]
 80114da:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80114e2:	d306      	bcc.n	80114f2 <sys_timeout+0x22>
 80114e4:	4b0a      	ldr	r3, [pc, #40]	; (8011510 <sys_timeout+0x40>)
 80114e6:	f240 1229 	movw	r2, #297	; 0x129
 80114ea:	490a      	ldr	r1, [pc, #40]	; (8011514 <sys_timeout+0x44>)
 80114ec:	480a      	ldr	r0, [pc, #40]	; (8011518 <sys_timeout+0x48>)
 80114ee:	f006 fea1 	bl	8018234 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80114f2:	f7f4 fb07 	bl	8005b04 <sys_now>
 80114f6:	4602      	mov	r2, r0
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	4413      	add	r3, r2
 80114fc:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80114fe:	687a      	ldr	r2, [r7, #4]
 8011500:	68b9      	ldr	r1, [r7, #8]
 8011502:	6978      	ldr	r0, [r7, #20]
 8011504:	f7ff ff22 	bl	801134c <sys_timeout_abs>
#endif
}
 8011508:	bf00      	nop
 801150a:	3718      	adds	r7, #24
 801150c:	46bd      	mov	sp, r7
 801150e:	bd80      	pop	{r7, pc}
 8011510:	0801aa74 	.word	0x0801aa74
 8011514:	0801ab10 	.word	0x0801ab10
 8011518:	0801aae8 	.word	0x0801aae8

0801151c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801151c:	b580      	push	{r7, lr}
 801151e:	b084      	sub	sp, #16
 8011520:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8011522:	f7f4 faef 	bl	8005b04 <sys_now>
 8011526:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8011528:	4b17      	ldr	r3, [pc, #92]	; (8011588 <sys_check_timeouts+0x6c>)
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801152e:	68bb      	ldr	r3, [r7, #8]
 8011530:	2b00      	cmp	r3, #0
 8011532:	d022      	beq.n	801157a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8011534:	68bb      	ldr	r3, [r7, #8]
 8011536:	685b      	ldr	r3, [r3, #4]
 8011538:	68fa      	ldr	r2, [r7, #12]
 801153a:	1ad3      	subs	r3, r2, r3
 801153c:	0fdb      	lsrs	r3, r3, #31
 801153e:	f003 0301 	and.w	r3, r3, #1
 8011542:	b2db      	uxtb	r3, r3
 8011544:	2b00      	cmp	r3, #0
 8011546:	d11a      	bne.n	801157e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8011548:	68bb      	ldr	r3, [r7, #8]
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	4a0e      	ldr	r2, [pc, #56]	; (8011588 <sys_check_timeouts+0x6c>)
 801154e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8011550:	68bb      	ldr	r3, [r7, #8]
 8011552:	689b      	ldr	r3, [r3, #8]
 8011554:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8011556:	68bb      	ldr	r3, [r7, #8]
 8011558:	68db      	ldr	r3, [r3, #12]
 801155a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801155c:	68bb      	ldr	r3, [r7, #8]
 801155e:	685b      	ldr	r3, [r3, #4]
 8011560:	4a0a      	ldr	r2, [pc, #40]	; (801158c <sys_check_timeouts+0x70>)
 8011562:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8011564:	68b9      	ldr	r1, [r7, #8]
 8011566:	200a      	movs	r0, #10
 8011568:	f7f9 fc3a 	bl	800ade0 <memp_free>
    if (handler != NULL) {
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	2b00      	cmp	r3, #0
 8011570:	d0da      	beq.n	8011528 <sys_check_timeouts+0xc>
      handler(arg);
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	6838      	ldr	r0, [r7, #0]
 8011576:	4798      	blx	r3
  do {
 8011578:	e7d6      	b.n	8011528 <sys_check_timeouts+0xc>
      return;
 801157a:	bf00      	nop
 801157c:	e000      	b.n	8011580 <sys_check_timeouts+0x64>
      return;
 801157e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8011580:	3710      	adds	r7, #16
 8011582:	46bd      	mov	sp, r7
 8011584:	bd80      	pop	{r7, pc}
 8011586:	bf00      	nop
 8011588:	20004bfc 	.word	0x20004bfc
 801158c:	20004c00 	.word	0x20004c00

08011590 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8011590:	b580      	push	{r7, lr}
 8011592:	b082      	sub	sp, #8
 8011594:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8011596:	4b16      	ldr	r3, [pc, #88]	; (80115f0 <sys_timeouts_sleeptime+0x60>)
 8011598:	681b      	ldr	r3, [r3, #0]
 801159a:	2b00      	cmp	r3, #0
 801159c:	d102      	bne.n	80115a4 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801159e:	f04f 33ff 	mov.w	r3, #4294967295
 80115a2:	e020      	b.n	80115e6 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 80115a4:	f7f4 faae 	bl	8005b04 <sys_now>
 80115a8:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80115aa:	4b11      	ldr	r3, [pc, #68]	; (80115f0 <sys_timeouts_sleeptime+0x60>)
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	685a      	ldr	r2, [r3, #4]
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	1ad3      	subs	r3, r2, r3
 80115b4:	0fdb      	lsrs	r3, r3, #31
 80115b6:	f003 0301 	and.w	r3, r3, #1
 80115ba:	b2db      	uxtb	r3, r3
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d001      	beq.n	80115c4 <sys_timeouts_sleeptime+0x34>
    return 0;
 80115c0:	2300      	movs	r3, #0
 80115c2:	e010      	b.n	80115e6 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80115c4:	4b0a      	ldr	r3, [pc, #40]	; (80115f0 <sys_timeouts_sleeptime+0x60>)
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	685a      	ldr	r2, [r3, #4]
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	1ad3      	subs	r3, r2, r3
 80115ce:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80115d0:	683b      	ldr	r3, [r7, #0]
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	da06      	bge.n	80115e4 <sys_timeouts_sleeptime+0x54>
 80115d6:	4b07      	ldr	r3, [pc, #28]	; (80115f4 <sys_timeouts_sleeptime+0x64>)
 80115d8:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80115dc:	4906      	ldr	r1, [pc, #24]	; (80115f8 <sys_timeouts_sleeptime+0x68>)
 80115de:	4807      	ldr	r0, [pc, #28]	; (80115fc <sys_timeouts_sleeptime+0x6c>)
 80115e0:	f006 fe28 	bl	8018234 <iprintf>
    return ret;
 80115e4:	683b      	ldr	r3, [r7, #0]
  }
}
 80115e6:	4618      	mov	r0, r3
 80115e8:	3708      	adds	r7, #8
 80115ea:	46bd      	mov	sp, r7
 80115ec:	bd80      	pop	{r7, pc}
 80115ee:	bf00      	nop
 80115f0:	20004bfc 	.word	0x20004bfc
 80115f4:	0801aa74 	.word	0x0801aa74
 80115f8:	0801ab48 	.word	0x0801ab48
 80115fc:	0801aae8 	.word	0x0801aae8

08011600 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8011600:	b580      	push	{r7, lr}
 8011602:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8011604:	f006 fe2e 	bl	8018264 <rand>
 8011608:	4603      	mov	r3, r0
 801160a:	b29b      	uxth	r3, r3
 801160c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011610:	b29b      	uxth	r3, r3
 8011612:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8011616:	b29a      	uxth	r2, r3
 8011618:	4b01      	ldr	r3, [pc, #4]	; (8011620 <udp_init+0x20>)
 801161a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801161c:	bf00      	nop
 801161e:	bd80      	pop	{r7, pc}
 8011620:	20000018 	.word	0x20000018

08011624 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8011624:	b580      	push	{r7, lr}
 8011626:	b084      	sub	sp, #16
 8011628:	af00      	add	r7, sp, #0
 801162a:	60f8      	str	r0, [r7, #12]
 801162c:	60b9      	str	r1, [r7, #8]
 801162e:	4613      	mov	r3, r2
 8011630:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8011632:	68fb      	ldr	r3, [r7, #12]
 8011634:	2b00      	cmp	r3, #0
 8011636:	d105      	bne.n	8011644 <udp_input_local_match+0x20>
 8011638:	4b27      	ldr	r3, [pc, #156]	; (80116d8 <udp_input_local_match+0xb4>)
 801163a:	2287      	movs	r2, #135	; 0x87
 801163c:	4927      	ldr	r1, [pc, #156]	; (80116dc <udp_input_local_match+0xb8>)
 801163e:	4828      	ldr	r0, [pc, #160]	; (80116e0 <udp_input_local_match+0xbc>)
 8011640:	f006 fdf8 	bl	8018234 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8011644:	68bb      	ldr	r3, [r7, #8]
 8011646:	2b00      	cmp	r3, #0
 8011648:	d105      	bne.n	8011656 <udp_input_local_match+0x32>
 801164a:	4b23      	ldr	r3, [pc, #140]	; (80116d8 <udp_input_local_match+0xb4>)
 801164c:	2288      	movs	r2, #136	; 0x88
 801164e:	4925      	ldr	r1, [pc, #148]	; (80116e4 <udp_input_local_match+0xc0>)
 8011650:	4823      	ldr	r0, [pc, #140]	; (80116e0 <udp_input_local_match+0xbc>)
 8011652:	f006 fdef 	bl	8018234 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011656:	68fb      	ldr	r3, [r7, #12]
 8011658:	7a1b      	ldrb	r3, [r3, #8]
 801165a:	2b00      	cmp	r3, #0
 801165c:	d00b      	beq.n	8011676 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	7a1a      	ldrb	r2, [r3, #8]
 8011662:	4b21      	ldr	r3, [pc, #132]	; (80116e8 <udp_input_local_match+0xc4>)
 8011664:	685b      	ldr	r3, [r3, #4]
 8011666:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801166a:	3301      	adds	r3, #1
 801166c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801166e:	429a      	cmp	r2, r3
 8011670:	d001      	beq.n	8011676 <udp_input_local_match+0x52>
    return 0;
 8011672:	2300      	movs	r3, #0
 8011674:	e02b      	b.n	80116ce <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8011676:	79fb      	ldrb	r3, [r7, #7]
 8011678:	2b00      	cmp	r3, #0
 801167a:	d018      	beq.n	80116ae <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801167c:	68fb      	ldr	r3, [r7, #12]
 801167e:	2b00      	cmp	r3, #0
 8011680:	d013      	beq.n	80116aa <udp_input_local_match+0x86>
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	2b00      	cmp	r3, #0
 8011688:	d00f      	beq.n	80116aa <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801168a:	4b17      	ldr	r3, [pc, #92]	; (80116e8 <udp_input_local_match+0xc4>)
 801168c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801168e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011692:	d00a      	beq.n	80116aa <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8011694:	68fb      	ldr	r3, [r7, #12]
 8011696:	681a      	ldr	r2, [r3, #0]
 8011698:	4b13      	ldr	r3, [pc, #76]	; (80116e8 <udp_input_local_match+0xc4>)
 801169a:	695b      	ldr	r3, [r3, #20]
 801169c:	405a      	eors	r2, r3
 801169e:	68bb      	ldr	r3, [r7, #8]
 80116a0:	3308      	adds	r3, #8
 80116a2:	681b      	ldr	r3, [r3, #0]
 80116a4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d110      	bne.n	80116cc <udp_input_local_match+0xa8>
          return 1;
 80116aa:	2301      	movs	r3, #1
 80116ac:	e00f      	b.n	80116ce <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80116ae:	68fb      	ldr	r3, [r7, #12]
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d009      	beq.n	80116c8 <udp_input_local_match+0xa4>
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	681b      	ldr	r3, [r3, #0]
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d005      	beq.n	80116c8 <udp_input_local_match+0xa4>
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	681a      	ldr	r2, [r3, #0]
 80116c0:	4b09      	ldr	r3, [pc, #36]	; (80116e8 <udp_input_local_match+0xc4>)
 80116c2:	695b      	ldr	r3, [r3, #20]
 80116c4:	429a      	cmp	r2, r3
 80116c6:	d101      	bne.n	80116cc <udp_input_local_match+0xa8>
        return 1;
 80116c8:	2301      	movs	r3, #1
 80116ca:	e000      	b.n	80116ce <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80116cc:	2300      	movs	r3, #0
}
 80116ce:	4618      	mov	r0, r3
 80116d0:	3710      	adds	r7, #16
 80116d2:	46bd      	mov	sp, r7
 80116d4:	bd80      	pop	{r7, pc}
 80116d6:	bf00      	nop
 80116d8:	0801ab5c 	.word	0x0801ab5c
 80116dc:	0801ab8c 	.word	0x0801ab8c
 80116e0:	0801abb0 	.word	0x0801abb0
 80116e4:	0801abd8 	.word	0x0801abd8
 80116e8:	20008360 	.word	0x20008360

080116ec <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80116ec:	b590      	push	{r4, r7, lr}
 80116ee:	b08d      	sub	sp, #52	; 0x34
 80116f0:	af02      	add	r7, sp, #8
 80116f2:	6078      	str	r0, [r7, #4]
 80116f4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80116f6:	2300      	movs	r3, #0
 80116f8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d105      	bne.n	801170c <udp_input+0x20>
 8011700:	4b7c      	ldr	r3, [pc, #496]	; (80118f4 <udp_input+0x208>)
 8011702:	22cf      	movs	r2, #207	; 0xcf
 8011704:	497c      	ldr	r1, [pc, #496]	; (80118f8 <udp_input+0x20c>)
 8011706:	487d      	ldr	r0, [pc, #500]	; (80118fc <udp_input+0x210>)
 8011708:	f006 fd94 	bl	8018234 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801170c:	683b      	ldr	r3, [r7, #0]
 801170e:	2b00      	cmp	r3, #0
 8011710:	d105      	bne.n	801171e <udp_input+0x32>
 8011712:	4b78      	ldr	r3, [pc, #480]	; (80118f4 <udp_input+0x208>)
 8011714:	22d0      	movs	r2, #208	; 0xd0
 8011716:	497a      	ldr	r1, [pc, #488]	; (8011900 <udp_input+0x214>)
 8011718:	4878      	ldr	r0, [pc, #480]	; (80118fc <udp_input+0x210>)
 801171a:	f006 fd8b 	bl	8018234 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	895b      	ldrh	r3, [r3, #10]
 8011722:	2b07      	cmp	r3, #7
 8011724:	d803      	bhi.n	801172e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8011726:	6878      	ldr	r0, [r7, #4]
 8011728:	f7fa f9fe 	bl	800bb28 <pbuf_free>
    goto end;
 801172c:	e0de      	b.n	80118ec <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	685b      	ldr	r3, [r3, #4]
 8011732:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8011734:	4b73      	ldr	r3, [pc, #460]	; (8011904 <udp_input+0x218>)
 8011736:	695b      	ldr	r3, [r3, #20]
 8011738:	4a72      	ldr	r2, [pc, #456]	; (8011904 <udp_input+0x218>)
 801173a:	6812      	ldr	r2, [r2, #0]
 801173c:	4611      	mov	r1, r2
 801173e:	4618      	mov	r0, r3
 8011740:	f001 fc88 	bl	8013054 <ip4_addr_isbroadcast_u32>
 8011744:	4603      	mov	r3, r0
 8011746:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8011748:	697b      	ldr	r3, [r7, #20]
 801174a:	881b      	ldrh	r3, [r3, #0]
 801174c:	b29b      	uxth	r3, r3
 801174e:	4618      	mov	r0, r3
 8011750:	f7f8 fe3e 	bl	800a3d0 <lwip_htons>
 8011754:	4603      	mov	r3, r0
 8011756:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8011758:	697b      	ldr	r3, [r7, #20]
 801175a:	885b      	ldrh	r3, [r3, #2]
 801175c:	b29b      	uxth	r3, r3
 801175e:	4618      	mov	r0, r3
 8011760:	f7f8 fe36 	bl	800a3d0 <lwip_htons>
 8011764:	4603      	mov	r3, r0
 8011766:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8011768:	2300      	movs	r3, #0
 801176a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801176c:	2300      	movs	r3, #0
 801176e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8011770:	2300      	movs	r3, #0
 8011772:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011774:	4b64      	ldr	r3, [pc, #400]	; (8011908 <udp_input+0x21c>)
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	627b      	str	r3, [r7, #36]	; 0x24
 801177a:	e054      	b.n	8011826 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801177c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801177e:	8a5b      	ldrh	r3, [r3, #18]
 8011780:	89fa      	ldrh	r2, [r7, #14]
 8011782:	429a      	cmp	r2, r3
 8011784:	d14a      	bne.n	801181c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8011786:	7cfb      	ldrb	r3, [r7, #19]
 8011788:	461a      	mov	r2, r3
 801178a:	6839      	ldr	r1, [r7, #0]
 801178c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801178e:	f7ff ff49 	bl	8011624 <udp_input_local_match>
 8011792:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8011794:	2b00      	cmp	r3, #0
 8011796:	d041      	beq.n	801181c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8011798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801179a:	7c1b      	ldrb	r3, [r3, #16]
 801179c:	f003 0304 	and.w	r3, r3, #4
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d11d      	bne.n	80117e0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80117a4:	69fb      	ldr	r3, [r7, #28]
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d102      	bne.n	80117b0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80117aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117ac:	61fb      	str	r3, [r7, #28]
 80117ae:	e017      	b.n	80117e0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80117b0:	7cfb      	ldrb	r3, [r7, #19]
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d014      	beq.n	80117e0 <udp_input+0xf4>
 80117b6:	4b53      	ldr	r3, [pc, #332]	; (8011904 <udp_input+0x218>)
 80117b8:	695b      	ldr	r3, [r3, #20]
 80117ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117be:	d10f      	bne.n	80117e0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80117c0:	69fb      	ldr	r3, [r7, #28]
 80117c2:	681a      	ldr	r2, [r3, #0]
 80117c4:	683b      	ldr	r3, [r7, #0]
 80117c6:	3304      	adds	r3, #4
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	429a      	cmp	r2, r3
 80117cc:	d008      	beq.n	80117e0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80117ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117d0:	681a      	ldr	r2, [r3, #0]
 80117d2:	683b      	ldr	r3, [r7, #0]
 80117d4:	3304      	adds	r3, #4
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	429a      	cmp	r2, r3
 80117da:	d101      	bne.n	80117e0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80117dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117de:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80117e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117e2:	8a9b      	ldrh	r3, [r3, #20]
 80117e4:	8a3a      	ldrh	r2, [r7, #16]
 80117e6:	429a      	cmp	r2, r3
 80117e8:	d118      	bne.n	801181c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80117ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117ec:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d005      	beq.n	80117fe <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80117f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117f4:	685a      	ldr	r2, [r3, #4]
 80117f6:	4b43      	ldr	r3, [pc, #268]	; (8011904 <udp_input+0x218>)
 80117f8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80117fa:	429a      	cmp	r2, r3
 80117fc:	d10e      	bne.n	801181c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80117fe:	6a3b      	ldr	r3, [r7, #32]
 8011800:	2b00      	cmp	r3, #0
 8011802:	d014      	beq.n	801182e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8011804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011806:	68da      	ldr	r2, [r3, #12]
 8011808:	6a3b      	ldr	r3, [r7, #32]
 801180a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801180c:	4b3e      	ldr	r3, [pc, #248]	; (8011908 <udp_input+0x21c>)
 801180e:	681a      	ldr	r2, [r3, #0]
 8011810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011812:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8011814:	4a3c      	ldr	r2, [pc, #240]	; (8011908 <udp_input+0x21c>)
 8011816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011818:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801181a:	e008      	b.n	801182e <udp_input+0x142>
      }
    }

    prev = pcb;
 801181c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801181e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011822:	68db      	ldr	r3, [r3, #12]
 8011824:	627b      	str	r3, [r7, #36]	; 0x24
 8011826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011828:	2b00      	cmp	r3, #0
 801182a:	d1a7      	bne.n	801177c <udp_input+0x90>
 801182c:	e000      	b.n	8011830 <udp_input+0x144>
        break;
 801182e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8011830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011832:	2b00      	cmp	r3, #0
 8011834:	d101      	bne.n	801183a <udp_input+0x14e>
    pcb = uncon_pcb;
 8011836:	69fb      	ldr	r3, [r7, #28]
 8011838:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801183a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801183c:	2b00      	cmp	r3, #0
 801183e:	d002      	beq.n	8011846 <udp_input+0x15a>
    for_us = 1;
 8011840:	2301      	movs	r3, #1
 8011842:	76fb      	strb	r3, [r7, #27]
 8011844:	e00a      	b.n	801185c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8011846:	683b      	ldr	r3, [r7, #0]
 8011848:	3304      	adds	r3, #4
 801184a:	681a      	ldr	r2, [r3, #0]
 801184c:	4b2d      	ldr	r3, [pc, #180]	; (8011904 <udp_input+0x218>)
 801184e:	695b      	ldr	r3, [r3, #20]
 8011850:	429a      	cmp	r2, r3
 8011852:	bf0c      	ite	eq
 8011854:	2301      	moveq	r3, #1
 8011856:	2300      	movne	r3, #0
 8011858:	b2db      	uxtb	r3, r3
 801185a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801185c:	7efb      	ldrb	r3, [r7, #27]
 801185e:	2b00      	cmp	r3, #0
 8011860:	d041      	beq.n	80118e6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8011862:	2108      	movs	r1, #8
 8011864:	6878      	ldr	r0, [r7, #4]
 8011866:	f7fa f8d9 	bl	800ba1c <pbuf_remove_header>
 801186a:	4603      	mov	r3, r0
 801186c:	2b00      	cmp	r3, #0
 801186e:	d00a      	beq.n	8011886 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8011870:	4b20      	ldr	r3, [pc, #128]	; (80118f4 <udp_input+0x208>)
 8011872:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8011876:	4925      	ldr	r1, [pc, #148]	; (801190c <udp_input+0x220>)
 8011878:	4820      	ldr	r0, [pc, #128]	; (80118fc <udp_input+0x210>)
 801187a:	f006 fcdb 	bl	8018234 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801187e:	6878      	ldr	r0, [r7, #4]
 8011880:	f7fa f952 	bl	800bb28 <pbuf_free>
      goto end;
 8011884:	e032      	b.n	80118ec <udp_input+0x200>
    }

    if (pcb != NULL) {
 8011886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011888:	2b00      	cmp	r3, #0
 801188a:	d012      	beq.n	80118b2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801188c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801188e:	699b      	ldr	r3, [r3, #24]
 8011890:	2b00      	cmp	r3, #0
 8011892:	d00a      	beq.n	80118aa <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8011894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011896:	699c      	ldr	r4, [r3, #24]
 8011898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801189a:	69d8      	ldr	r0, [r3, #28]
 801189c:	8a3b      	ldrh	r3, [r7, #16]
 801189e:	9300      	str	r3, [sp, #0]
 80118a0:	4b1b      	ldr	r3, [pc, #108]	; (8011910 <udp_input+0x224>)
 80118a2:	687a      	ldr	r2, [r7, #4]
 80118a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80118a6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80118a8:	e021      	b.n	80118ee <udp_input+0x202>
        pbuf_free(p);
 80118aa:	6878      	ldr	r0, [r7, #4]
 80118ac:	f7fa f93c 	bl	800bb28 <pbuf_free>
        goto end;
 80118b0:	e01c      	b.n	80118ec <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80118b2:	7cfb      	ldrb	r3, [r7, #19]
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d112      	bne.n	80118de <udp_input+0x1f2>
 80118b8:	4b12      	ldr	r3, [pc, #72]	; (8011904 <udp_input+0x218>)
 80118ba:	695b      	ldr	r3, [r3, #20]
 80118bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80118c0:	2be0      	cmp	r3, #224	; 0xe0
 80118c2:	d00c      	beq.n	80118de <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80118c4:	4b0f      	ldr	r3, [pc, #60]	; (8011904 <udp_input+0x218>)
 80118c6:	899b      	ldrh	r3, [r3, #12]
 80118c8:	3308      	adds	r3, #8
 80118ca:	b29b      	uxth	r3, r3
 80118cc:	b21b      	sxth	r3, r3
 80118ce:	4619      	mov	r1, r3
 80118d0:	6878      	ldr	r0, [r7, #4]
 80118d2:	f7fa f916 	bl	800bb02 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80118d6:	2103      	movs	r1, #3
 80118d8:	6878      	ldr	r0, [r7, #4]
 80118da:	f001 f89b 	bl	8012a14 <icmp_dest_unreach>
      pbuf_free(p);
 80118de:	6878      	ldr	r0, [r7, #4]
 80118e0:	f7fa f922 	bl	800bb28 <pbuf_free>
  return;
 80118e4:	e003      	b.n	80118ee <udp_input+0x202>
    pbuf_free(p);
 80118e6:	6878      	ldr	r0, [r7, #4]
 80118e8:	f7fa f91e 	bl	800bb28 <pbuf_free>
  return;
 80118ec:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80118ee:	372c      	adds	r7, #44	; 0x2c
 80118f0:	46bd      	mov	sp, r7
 80118f2:	bd90      	pop	{r4, r7, pc}
 80118f4:	0801ab5c 	.word	0x0801ab5c
 80118f8:	0801ac00 	.word	0x0801ac00
 80118fc:	0801abb0 	.word	0x0801abb0
 8011900:	0801ac18 	.word	0x0801ac18
 8011904:	20008360 	.word	0x20008360
 8011908:	2000dc5c 	.word	0x2000dc5c
 801190c:	0801ac34 	.word	0x0801ac34
 8011910:	20008370 	.word	0x20008370

08011914 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011914:	b480      	push	{r7}
 8011916:	b085      	sub	sp, #20
 8011918:	af00      	add	r7, sp, #0
 801191a:	6078      	str	r0, [r7, #4]
 801191c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	2b00      	cmp	r3, #0
 8011922:	d01e      	beq.n	8011962 <udp_netif_ip_addr_changed+0x4e>
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	2b00      	cmp	r3, #0
 801192a:	d01a      	beq.n	8011962 <udp_netif_ip_addr_changed+0x4e>
 801192c:	683b      	ldr	r3, [r7, #0]
 801192e:	2b00      	cmp	r3, #0
 8011930:	d017      	beq.n	8011962 <udp_netif_ip_addr_changed+0x4e>
 8011932:	683b      	ldr	r3, [r7, #0]
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	2b00      	cmp	r3, #0
 8011938:	d013      	beq.n	8011962 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801193a:	4b0d      	ldr	r3, [pc, #52]	; (8011970 <udp_netif_ip_addr_changed+0x5c>)
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	60fb      	str	r3, [r7, #12]
 8011940:	e00c      	b.n	801195c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8011942:	68fb      	ldr	r3, [r7, #12]
 8011944:	681a      	ldr	r2, [r3, #0]
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	429a      	cmp	r2, r3
 801194c:	d103      	bne.n	8011956 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801194e:	683b      	ldr	r3, [r7, #0]
 8011950:	681a      	ldr	r2, [r3, #0]
 8011952:	68fb      	ldr	r3, [r7, #12]
 8011954:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	68db      	ldr	r3, [r3, #12]
 801195a:	60fb      	str	r3, [r7, #12]
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	2b00      	cmp	r3, #0
 8011960:	d1ef      	bne.n	8011942 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8011962:	bf00      	nop
 8011964:	3714      	adds	r7, #20
 8011966:	46bd      	mov	sp, r7
 8011968:	f85d 7b04 	ldr.w	r7, [sp], #4
 801196c:	4770      	bx	lr
 801196e:	bf00      	nop
 8011970:	2000dc5c 	.word	0x2000dc5c

08011974 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8011974:	b580      	push	{r7, lr}
 8011976:	b082      	sub	sp, #8
 8011978:	af00      	add	r7, sp, #0
 801197a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801197c:	4915      	ldr	r1, [pc, #84]	; (80119d4 <etharp_free_entry+0x60>)
 801197e:	687a      	ldr	r2, [r7, #4]
 8011980:	4613      	mov	r3, r2
 8011982:	005b      	lsls	r3, r3, #1
 8011984:	4413      	add	r3, r2
 8011986:	00db      	lsls	r3, r3, #3
 8011988:	440b      	add	r3, r1
 801198a:	681b      	ldr	r3, [r3, #0]
 801198c:	2b00      	cmp	r3, #0
 801198e:	d013      	beq.n	80119b8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8011990:	4910      	ldr	r1, [pc, #64]	; (80119d4 <etharp_free_entry+0x60>)
 8011992:	687a      	ldr	r2, [r7, #4]
 8011994:	4613      	mov	r3, r2
 8011996:	005b      	lsls	r3, r3, #1
 8011998:	4413      	add	r3, r2
 801199a:	00db      	lsls	r3, r3, #3
 801199c:	440b      	add	r3, r1
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	4618      	mov	r0, r3
 80119a2:	f7fa f8c1 	bl	800bb28 <pbuf_free>
    arp_table[i].q = NULL;
 80119a6:	490b      	ldr	r1, [pc, #44]	; (80119d4 <etharp_free_entry+0x60>)
 80119a8:	687a      	ldr	r2, [r7, #4]
 80119aa:	4613      	mov	r3, r2
 80119ac:	005b      	lsls	r3, r3, #1
 80119ae:	4413      	add	r3, r2
 80119b0:	00db      	lsls	r3, r3, #3
 80119b2:	440b      	add	r3, r1
 80119b4:	2200      	movs	r2, #0
 80119b6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80119b8:	4906      	ldr	r1, [pc, #24]	; (80119d4 <etharp_free_entry+0x60>)
 80119ba:	687a      	ldr	r2, [r7, #4]
 80119bc:	4613      	mov	r3, r2
 80119be:	005b      	lsls	r3, r3, #1
 80119c0:	4413      	add	r3, r2
 80119c2:	00db      	lsls	r3, r3, #3
 80119c4:	440b      	add	r3, r1
 80119c6:	3314      	adds	r3, #20
 80119c8:	2200      	movs	r2, #0
 80119ca:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80119cc:	bf00      	nop
 80119ce:	3708      	adds	r7, #8
 80119d0:	46bd      	mov	sp, r7
 80119d2:	bd80      	pop	{r7, pc}
 80119d4:	20004c08 	.word	0x20004c08

080119d8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80119d8:	b580      	push	{r7, lr}
 80119da:	b082      	sub	sp, #8
 80119dc:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80119de:	2300      	movs	r3, #0
 80119e0:	607b      	str	r3, [r7, #4]
 80119e2:	e096      	b.n	8011b12 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80119e4:	494f      	ldr	r1, [pc, #316]	; (8011b24 <etharp_tmr+0x14c>)
 80119e6:	687a      	ldr	r2, [r7, #4]
 80119e8:	4613      	mov	r3, r2
 80119ea:	005b      	lsls	r3, r3, #1
 80119ec:	4413      	add	r3, r2
 80119ee:	00db      	lsls	r3, r3, #3
 80119f0:	440b      	add	r3, r1
 80119f2:	3314      	adds	r3, #20
 80119f4:	781b      	ldrb	r3, [r3, #0]
 80119f6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80119f8:	78fb      	ldrb	r3, [r7, #3]
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	f000 8086 	beq.w	8011b0c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8011a00:	4948      	ldr	r1, [pc, #288]	; (8011b24 <etharp_tmr+0x14c>)
 8011a02:	687a      	ldr	r2, [r7, #4]
 8011a04:	4613      	mov	r3, r2
 8011a06:	005b      	lsls	r3, r3, #1
 8011a08:	4413      	add	r3, r2
 8011a0a:	00db      	lsls	r3, r3, #3
 8011a0c:	440b      	add	r3, r1
 8011a0e:	3312      	adds	r3, #18
 8011a10:	881b      	ldrh	r3, [r3, #0]
 8011a12:	3301      	adds	r3, #1
 8011a14:	b298      	uxth	r0, r3
 8011a16:	4943      	ldr	r1, [pc, #268]	; (8011b24 <etharp_tmr+0x14c>)
 8011a18:	687a      	ldr	r2, [r7, #4]
 8011a1a:	4613      	mov	r3, r2
 8011a1c:	005b      	lsls	r3, r3, #1
 8011a1e:	4413      	add	r3, r2
 8011a20:	00db      	lsls	r3, r3, #3
 8011a22:	440b      	add	r3, r1
 8011a24:	3312      	adds	r3, #18
 8011a26:	4602      	mov	r2, r0
 8011a28:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011a2a:	493e      	ldr	r1, [pc, #248]	; (8011b24 <etharp_tmr+0x14c>)
 8011a2c:	687a      	ldr	r2, [r7, #4]
 8011a2e:	4613      	mov	r3, r2
 8011a30:	005b      	lsls	r3, r3, #1
 8011a32:	4413      	add	r3, r2
 8011a34:	00db      	lsls	r3, r3, #3
 8011a36:	440b      	add	r3, r1
 8011a38:	3312      	adds	r3, #18
 8011a3a:	881b      	ldrh	r3, [r3, #0]
 8011a3c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8011a40:	d215      	bcs.n	8011a6e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8011a42:	4938      	ldr	r1, [pc, #224]	; (8011b24 <etharp_tmr+0x14c>)
 8011a44:	687a      	ldr	r2, [r7, #4]
 8011a46:	4613      	mov	r3, r2
 8011a48:	005b      	lsls	r3, r3, #1
 8011a4a:	4413      	add	r3, r2
 8011a4c:	00db      	lsls	r3, r3, #3
 8011a4e:	440b      	add	r3, r1
 8011a50:	3314      	adds	r3, #20
 8011a52:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011a54:	2b01      	cmp	r3, #1
 8011a56:	d10e      	bne.n	8011a76 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8011a58:	4932      	ldr	r1, [pc, #200]	; (8011b24 <etharp_tmr+0x14c>)
 8011a5a:	687a      	ldr	r2, [r7, #4]
 8011a5c:	4613      	mov	r3, r2
 8011a5e:	005b      	lsls	r3, r3, #1
 8011a60:	4413      	add	r3, r2
 8011a62:	00db      	lsls	r3, r3, #3
 8011a64:	440b      	add	r3, r1
 8011a66:	3312      	adds	r3, #18
 8011a68:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8011a6a:	2b04      	cmp	r3, #4
 8011a6c:	d903      	bls.n	8011a76 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8011a6e:	6878      	ldr	r0, [r7, #4]
 8011a70:	f7ff ff80 	bl	8011974 <etharp_free_entry>
 8011a74:	e04a      	b.n	8011b0c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8011a76:	492b      	ldr	r1, [pc, #172]	; (8011b24 <etharp_tmr+0x14c>)
 8011a78:	687a      	ldr	r2, [r7, #4]
 8011a7a:	4613      	mov	r3, r2
 8011a7c:	005b      	lsls	r3, r3, #1
 8011a7e:	4413      	add	r3, r2
 8011a80:	00db      	lsls	r3, r3, #3
 8011a82:	440b      	add	r3, r1
 8011a84:	3314      	adds	r3, #20
 8011a86:	781b      	ldrb	r3, [r3, #0]
 8011a88:	2b03      	cmp	r3, #3
 8011a8a:	d10a      	bne.n	8011aa2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8011a8c:	4925      	ldr	r1, [pc, #148]	; (8011b24 <etharp_tmr+0x14c>)
 8011a8e:	687a      	ldr	r2, [r7, #4]
 8011a90:	4613      	mov	r3, r2
 8011a92:	005b      	lsls	r3, r3, #1
 8011a94:	4413      	add	r3, r2
 8011a96:	00db      	lsls	r3, r3, #3
 8011a98:	440b      	add	r3, r1
 8011a9a:	3314      	adds	r3, #20
 8011a9c:	2204      	movs	r2, #4
 8011a9e:	701a      	strb	r2, [r3, #0]
 8011aa0:	e034      	b.n	8011b0c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8011aa2:	4920      	ldr	r1, [pc, #128]	; (8011b24 <etharp_tmr+0x14c>)
 8011aa4:	687a      	ldr	r2, [r7, #4]
 8011aa6:	4613      	mov	r3, r2
 8011aa8:	005b      	lsls	r3, r3, #1
 8011aaa:	4413      	add	r3, r2
 8011aac:	00db      	lsls	r3, r3, #3
 8011aae:	440b      	add	r3, r1
 8011ab0:	3314      	adds	r3, #20
 8011ab2:	781b      	ldrb	r3, [r3, #0]
 8011ab4:	2b04      	cmp	r3, #4
 8011ab6:	d10a      	bne.n	8011ace <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8011ab8:	491a      	ldr	r1, [pc, #104]	; (8011b24 <etharp_tmr+0x14c>)
 8011aba:	687a      	ldr	r2, [r7, #4]
 8011abc:	4613      	mov	r3, r2
 8011abe:	005b      	lsls	r3, r3, #1
 8011ac0:	4413      	add	r3, r2
 8011ac2:	00db      	lsls	r3, r3, #3
 8011ac4:	440b      	add	r3, r1
 8011ac6:	3314      	adds	r3, #20
 8011ac8:	2202      	movs	r2, #2
 8011aca:	701a      	strb	r2, [r3, #0]
 8011acc:	e01e      	b.n	8011b0c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8011ace:	4915      	ldr	r1, [pc, #84]	; (8011b24 <etharp_tmr+0x14c>)
 8011ad0:	687a      	ldr	r2, [r7, #4]
 8011ad2:	4613      	mov	r3, r2
 8011ad4:	005b      	lsls	r3, r3, #1
 8011ad6:	4413      	add	r3, r2
 8011ad8:	00db      	lsls	r3, r3, #3
 8011ada:	440b      	add	r3, r1
 8011adc:	3314      	adds	r3, #20
 8011ade:	781b      	ldrb	r3, [r3, #0]
 8011ae0:	2b01      	cmp	r3, #1
 8011ae2:	d113      	bne.n	8011b0c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8011ae4:	490f      	ldr	r1, [pc, #60]	; (8011b24 <etharp_tmr+0x14c>)
 8011ae6:	687a      	ldr	r2, [r7, #4]
 8011ae8:	4613      	mov	r3, r2
 8011aea:	005b      	lsls	r3, r3, #1
 8011aec:	4413      	add	r3, r2
 8011aee:	00db      	lsls	r3, r3, #3
 8011af0:	440b      	add	r3, r1
 8011af2:	3308      	adds	r3, #8
 8011af4:	6818      	ldr	r0, [r3, #0]
 8011af6:	687a      	ldr	r2, [r7, #4]
 8011af8:	4613      	mov	r3, r2
 8011afa:	005b      	lsls	r3, r3, #1
 8011afc:	4413      	add	r3, r2
 8011afe:	00db      	lsls	r3, r3, #3
 8011b00:	4a08      	ldr	r2, [pc, #32]	; (8011b24 <etharp_tmr+0x14c>)
 8011b02:	4413      	add	r3, r2
 8011b04:	3304      	adds	r3, #4
 8011b06:	4619      	mov	r1, r3
 8011b08:	f000 fe6e 	bl	80127e8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	3301      	adds	r3, #1
 8011b10:	607b      	str	r3, [r7, #4]
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	2b09      	cmp	r3, #9
 8011b16:	f77f af65 	ble.w	80119e4 <etharp_tmr+0xc>
      }
    }
  }
}
 8011b1a:	bf00      	nop
 8011b1c:	bf00      	nop
 8011b1e:	3708      	adds	r7, #8
 8011b20:	46bd      	mov	sp, r7
 8011b22:	bd80      	pop	{r7, pc}
 8011b24:	20004c08 	.word	0x20004c08

08011b28 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8011b28:	b580      	push	{r7, lr}
 8011b2a:	b08a      	sub	sp, #40	; 0x28
 8011b2c:	af00      	add	r7, sp, #0
 8011b2e:	60f8      	str	r0, [r7, #12]
 8011b30:	460b      	mov	r3, r1
 8011b32:	607a      	str	r2, [r7, #4]
 8011b34:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8011b36:	230a      	movs	r3, #10
 8011b38:	84fb      	strh	r3, [r7, #38]	; 0x26
 8011b3a:	230a      	movs	r3, #10
 8011b3c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8011b3e:	230a      	movs	r3, #10
 8011b40:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8011b42:	2300      	movs	r3, #0
 8011b44:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8011b46:	230a      	movs	r3, #10
 8011b48:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8011b4a:	2300      	movs	r3, #0
 8011b4c:	83bb      	strh	r3, [r7, #28]
 8011b4e:	2300      	movs	r3, #0
 8011b50:	837b      	strh	r3, [r7, #26]
 8011b52:	2300      	movs	r3, #0
 8011b54:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011b56:	2300      	movs	r3, #0
 8011b58:	843b      	strh	r3, [r7, #32]
 8011b5a:	e0ae      	b.n	8011cba <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8011b5c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011b60:	49a6      	ldr	r1, [pc, #664]	; (8011dfc <etharp_find_entry+0x2d4>)
 8011b62:	4613      	mov	r3, r2
 8011b64:	005b      	lsls	r3, r3, #1
 8011b66:	4413      	add	r3, r2
 8011b68:	00db      	lsls	r3, r3, #3
 8011b6a:	440b      	add	r3, r1
 8011b6c:	3314      	adds	r3, #20
 8011b6e:	781b      	ldrb	r3, [r3, #0]
 8011b70:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8011b72:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011b76:	2b0a      	cmp	r3, #10
 8011b78:	d105      	bne.n	8011b86 <etharp_find_entry+0x5e>
 8011b7a:	7dfb      	ldrb	r3, [r7, #23]
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d102      	bne.n	8011b86 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8011b80:	8c3b      	ldrh	r3, [r7, #32]
 8011b82:	847b      	strh	r3, [r7, #34]	; 0x22
 8011b84:	e095      	b.n	8011cb2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8011b86:	7dfb      	ldrb	r3, [r7, #23]
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	f000 8092 	beq.w	8011cb2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8011b8e:	7dfb      	ldrb	r3, [r7, #23]
 8011b90:	2b01      	cmp	r3, #1
 8011b92:	d009      	beq.n	8011ba8 <etharp_find_entry+0x80>
 8011b94:	7dfb      	ldrb	r3, [r7, #23]
 8011b96:	2b01      	cmp	r3, #1
 8011b98:	d806      	bhi.n	8011ba8 <etharp_find_entry+0x80>
 8011b9a:	4b99      	ldr	r3, [pc, #612]	; (8011e00 <etharp_find_entry+0x2d8>)
 8011b9c:	f240 1223 	movw	r2, #291	; 0x123
 8011ba0:	4998      	ldr	r1, [pc, #608]	; (8011e04 <etharp_find_entry+0x2dc>)
 8011ba2:	4899      	ldr	r0, [pc, #612]	; (8011e08 <etharp_find_entry+0x2e0>)
 8011ba4:	f006 fb46 	bl	8018234 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d020      	beq.n	8011bf0 <etharp_find_entry+0xc8>
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	6819      	ldr	r1, [r3, #0]
 8011bb2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011bb6:	4891      	ldr	r0, [pc, #580]	; (8011dfc <etharp_find_entry+0x2d4>)
 8011bb8:	4613      	mov	r3, r2
 8011bba:	005b      	lsls	r3, r3, #1
 8011bbc:	4413      	add	r3, r2
 8011bbe:	00db      	lsls	r3, r3, #3
 8011bc0:	4403      	add	r3, r0
 8011bc2:	3304      	adds	r3, #4
 8011bc4:	681b      	ldr	r3, [r3, #0]
 8011bc6:	4299      	cmp	r1, r3
 8011bc8:	d112      	bne.n	8011bf0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d00c      	beq.n	8011bea <etharp_find_entry+0xc2>
 8011bd0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011bd4:	4989      	ldr	r1, [pc, #548]	; (8011dfc <etharp_find_entry+0x2d4>)
 8011bd6:	4613      	mov	r3, r2
 8011bd8:	005b      	lsls	r3, r3, #1
 8011bda:	4413      	add	r3, r2
 8011bdc:	00db      	lsls	r3, r3, #3
 8011bde:	440b      	add	r3, r1
 8011be0:	3308      	adds	r3, #8
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	687a      	ldr	r2, [r7, #4]
 8011be6:	429a      	cmp	r2, r3
 8011be8:	d102      	bne.n	8011bf0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8011bea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011bee:	e100      	b.n	8011df2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8011bf0:	7dfb      	ldrb	r3, [r7, #23]
 8011bf2:	2b01      	cmp	r3, #1
 8011bf4:	d140      	bne.n	8011c78 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8011bf6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011bfa:	4980      	ldr	r1, [pc, #512]	; (8011dfc <etharp_find_entry+0x2d4>)
 8011bfc:	4613      	mov	r3, r2
 8011bfe:	005b      	lsls	r3, r3, #1
 8011c00:	4413      	add	r3, r2
 8011c02:	00db      	lsls	r3, r3, #3
 8011c04:	440b      	add	r3, r1
 8011c06:	681b      	ldr	r3, [r3, #0]
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d01a      	beq.n	8011c42 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8011c0c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011c10:	497a      	ldr	r1, [pc, #488]	; (8011dfc <etharp_find_entry+0x2d4>)
 8011c12:	4613      	mov	r3, r2
 8011c14:	005b      	lsls	r3, r3, #1
 8011c16:	4413      	add	r3, r2
 8011c18:	00db      	lsls	r3, r3, #3
 8011c1a:	440b      	add	r3, r1
 8011c1c:	3312      	adds	r3, #18
 8011c1e:	881b      	ldrh	r3, [r3, #0]
 8011c20:	8bba      	ldrh	r2, [r7, #28]
 8011c22:	429a      	cmp	r2, r3
 8011c24:	d845      	bhi.n	8011cb2 <etharp_find_entry+0x18a>
            old_queue = i;
 8011c26:	8c3b      	ldrh	r3, [r7, #32]
 8011c28:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8011c2a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011c2e:	4973      	ldr	r1, [pc, #460]	; (8011dfc <etharp_find_entry+0x2d4>)
 8011c30:	4613      	mov	r3, r2
 8011c32:	005b      	lsls	r3, r3, #1
 8011c34:	4413      	add	r3, r2
 8011c36:	00db      	lsls	r3, r3, #3
 8011c38:	440b      	add	r3, r1
 8011c3a:	3312      	adds	r3, #18
 8011c3c:	881b      	ldrh	r3, [r3, #0]
 8011c3e:	83bb      	strh	r3, [r7, #28]
 8011c40:	e037      	b.n	8011cb2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8011c42:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011c46:	496d      	ldr	r1, [pc, #436]	; (8011dfc <etharp_find_entry+0x2d4>)
 8011c48:	4613      	mov	r3, r2
 8011c4a:	005b      	lsls	r3, r3, #1
 8011c4c:	4413      	add	r3, r2
 8011c4e:	00db      	lsls	r3, r3, #3
 8011c50:	440b      	add	r3, r1
 8011c52:	3312      	adds	r3, #18
 8011c54:	881b      	ldrh	r3, [r3, #0]
 8011c56:	8b7a      	ldrh	r2, [r7, #26]
 8011c58:	429a      	cmp	r2, r3
 8011c5a:	d82a      	bhi.n	8011cb2 <etharp_find_entry+0x18a>
            old_pending = i;
 8011c5c:	8c3b      	ldrh	r3, [r7, #32]
 8011c5e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8011c60:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011c64:	4965      	ldr	r1, [pc, #404]	; (8011dfc <etharp_find_entry+0x2d4>)
 8011c66:	4613      	mov	r3, r2
 8011c68:	005b      	lsls	r3, r3, #1
 8011c6a:	4413      	add	r3, r2
 8011c6c:	00db      	lsls	r3, r3, #3
 8011c6e:	440b      	add	r3, r1
 8011c70:	3312      	adds	r3, #18
 8011c72:	881b      	ldrh	r3, [r3, #0]
 8011c74:	837b      	strh	r3, [r7, #26]
 8011c76:	e01c      	b.n	8011cb2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8011c78:	7dfb      	ldrb	r3, [r7, #23]
 8011c7a:	2b01      	cmp	r3, #1
 8011c7c:	d919      	bls.n	8011cb2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8011c7e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011c82:	495e      	ldr	r1, [pc, #376]	; (8011dfc <etharp_find_entry+0x2d4>)
 8011c84:	4613      	mov	r3, r2
 8011c86:	005b      	lsls	r3, r3, #1
 8011c88:	4413      	add	r3, r2
 8011c8a:	00db      	lsls	r3, r3, #3
 8011c8c:	440b      	add	r3, r1
 8011c8e:	3312      	adds	r3, #18
 8011c90:	881b      	ldrh	r3, [r3, #0]
 8011c92:	8b3a      	ldrh	r2, [r7, #24]
 8011c94:	429a      	cmp	r2, r3
 8011c96:	d80c      	bhi.n	8011cb2 <etharp_find_entry+0x18a>
            old_stable = i;
 8011c98:	8c3b      	ldrh	r3, [r7, #32]
 8011c9a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8011c9c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011ca0:	4956      	ldr	r1, [pc, #344]	; (8011dfc <etharp_find_entry+0x2d4>)
 8011ca2:	4613      	mov	r3, r2
 8011ca4:	005b      	lsls	r3, r3, #1
 8011ca6:	4413      	add	r3, r2
 8011ca8:	00db      	lsls	r3, r3, #3
 8011caa:	440b      	add	r3, r1
 8011cac:	3312      	adds	r3, #18
 8011cae:	881b      	ldrh	r3, [r3, #0]
 8011cb0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011cb2:	8c3b      	ldrh	r3, [r7, #32]
 8011cb4:	3301      	adds	r3, #1
 8011cb6:	b29b      	uxth	r3, r3
 8011cb8:	843b      	strh	r3, [r7, #32]
 8011cba:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011cbe:	2b09      	cmp	r3, #9
 8011cc0:	f77f af4c 	ble.w	8011b5c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8011cc4:	7afb      	ldrb	r3, [r7, #11]
 8011cc6:	f003 0302 	and.w	r3, r3, #2
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d108      	bne.n	8011ce0 <etharp_find_entry+0x1b8>
 8011cce:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011cd2:	2b0a      	cmp	r3, #10
 8011cd4:	d107      	bne.n	8011ce6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8011cd6:	7afb      	ldrb	r3, [r7, #11]
 8011cd8:	f003 0301 	and.w	r3, r3, #1
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d102      	bne.n	8011ce6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8011ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8011ce4:	e085      	b.n	8011df2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8011ce6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011cea:	2b09      	cmp	r3, #9
 8011cec:	dc02      	bgt.n	8011cf4 <etharp_find_entry+0x1cc>
    i = empty;
 8011cee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011cf0:	843b      	strh	r3, [r7, #32]
 8011cf2:	e039      	b.n	8011d68 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8011cf4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8011cf8:	2b09      	cmp	r3, #9
 8011cfa:	dc14      	bgt.n	8011d26 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8011cfc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011cfe:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8011d00:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011d04:	493d      	ldr	r1, [pc, #244]	; (8011dfc <etharp_find_entry+0x2d4>)
 8011d06:	4613      	mov	r3, r2
 8011d08:	005b      	lsls	r3, r3, #1
 8011d0a:	4413      	add	r3, r2
 8011d0c:	00db      	lsls	r3, r3, #3
 8011d0e:	440b      	add	r3, r1
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d018      	beq.n	8011d48 <etharp_find_entry+0x220>
 8011d16:	4b3a      	ldr	r3, [pc, #232]	; (8011e00 <etharp_find_entry+0x2d8>)
 8011d18:	f240 126d 	movw	r2, #365	; 0x16d
 8011d1c:	493b      	ldr	r1, [pc, #236]	; (8011e0c <etharp_find_entry+0x2e4>)
 8011d1e:	483a      	ldr	r0, [pc, #232]	; (8011e08 <etharp_find_entry+0x2e0>)
 8011d20:	f006 fa88 	bl	8018234 <iprintf>
 8011d24:	e010      	b.n	8011d48 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8011d26:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8011d2a:	2b09      	cmp	r3, #9
 8011d2c:	dc02      	bgt.n	8011d34 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8011d2e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011d30:	843b      	strh	r3, [r7, #32]
 8011d32:	e009      	b.n	8011d48 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8011d34:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011d38:	2b09      	cmp	r3, #9
 8011d3a:	dc02      	bgt.n	8011d42 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8011d3c:	8bfb      	ldrh	r3, [r7, #30]
 8011d3e:	843b      	strh	r3, [r7, #32]
 8011d40:	e002      	b.n	8011d48 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8011d42:	f04f 33ff 	mov.w	r3, #4294967295
 8011d46:	e054      	b.n	8011df2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011d48:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011d4c:	2b09      	cmp	r3, #9
 8011d4e:	dd06      	ble.n	8011d5e <etharp_find_entry+0x236>
 8011d50:	4b2b      	ldr	r3, [pc, #172]	; (8011e00 <etharp_find_entry+0x2d8>)
 8011d52:	f240 127f 	movw	r2, #383	; 0x17f
 8011d56:	492e      	ldr	r1, [pc, #184]	; (8011e10 <etharp_find_entry+0x2e8>)
 8011d58:	482b      	ldr	r0, [pc, #172]	; (8011e08 <etharp_find_entry+0x2e0>)
 8011d5a:	f006 fa6b 	bl	8018234 <iprintf>
    etharp_free_entry(i);
 8011d5e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011d62:	4618      	mov	r0, r3
 8011d64:	f7ff fe06 	bl	8011974 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011d68:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011d6c:	2b09      	cmp	r3, #9
 8011d6e:	dd06      	ble.n	8011d7e <etharp_find_entry+0x256>
 8011d70:	4b23      	ldr	r3, [pc, #140]	; (8011e00 <etharp_find_entry+0x2d8>)
 8011d72:	f240 1283 	movw	r2, #387	; 0x183
 8011d76:	4926      	ldr	r1, [pc, #152]	; (8011e10 <etharp_find_entry+0x2e8>)
 8011d78:	4823      	ldr	r0, [pc, #140]	; (8011e08 <etharp_find_entry+0x2e0>)
 8011d7a:	f006 fa5b 	bl	8018234 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8011d7e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011d82:	491e      	ldr	r1, [pc, #120]	; (8011dfc <etharp_find_entry+0x2d4>)
 8011d84:	4613      	mov	r3, r2
 8011d86:	005b      	lsls	r3, r3, #1
 8011d88:	4413      	add	r3, r2
 8011d8a:	00db      	lsls	r3, r3, #3
 8011d8c:	440b      	add	r3, r1
 8011d8e:	3314      	adds	r3, #20
 8011d90:	781b      	ldrb	r3, [r3, #0]
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d006      	beq.n	8011da4 <etharp_find_entry+0x27c>
 8011d96:	4b1a      	ldr	r3, [pc, #104]	; (8011e00 <etharp_find_entry+0x2d8>)
 8011d98:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8011d9c:	491d      	ldr	r1, [pc, #116]	; (8011e14 <etharp_find_entry+0x2ec>)
 8011d9e:	481a      	ldr	r0, [pc, #104]	; (8011e08 <etharp_find_entry+0x2e0>)
 8011da0:	f006 fa48 	bl	8018234 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8011da4:	68fb      	ldr	r3, [r7, #12]
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d00b      	beq.n	8011dc2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8011daa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011dae:	68fb      	ldr	r3, [r7, #12]
 8011db0:	6819      	ldr	r1, [r3, #0]
 8011db2:	4812      	ldr	r0, [pc, #72]	; (8011dfc <etharp_find_entry+0x2d4>)
 8011db4:	4613      	mov	r3, r2
 8011db6:	005b      	lsls	r3, r3, #1
 8011db8:	4413      	add	r3, r2
 8011dba:	00db      	lsls	r3, r3, #3
 8011dbc:	4403      	add	r3, r0
 8011dbe:	3304      	adds	r3, #4
 8011dc0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8011dc2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011dc6:	490d      	ldr	r1, [pc, #52]	; (8011dfc <etharp_find_entry+0x2d4>)
 8011dc8:	4613      	mov	r3, r2
 8011dca:	005b      	lsls	r3, r3, #1
 8011dcc:	4413      	add	r3, r2
 8011dce:	00db      	lsls	r3, r3, #3
 8011dd0:	440b      	add	r3, r1
 8011dd2:	3312      	adds	r3, #18
 8011dd4:	2200      	movs	r2, #0
 8011dd6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8011dd8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011ddc:	4907      	ldr	r1, [pc, #28]	; (8011dfc <etharp_find_entry+0x2d4>)
 8011dde:	4613      	mov	r3, r2
 8011de0:	005b      	lsls	r3, r3, #1
 8011de2:	4413      	add	r3, r2
 8011de4:	00db      	lsls	r3, r3, #3
 8011de6:	440b      	add	r3, r1
 8011de8:	3308      	adds	r3, #8
 8011dea:	687a      	ldr	r2, [r7, #4]
 8011dec:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8011dee:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8011df2:	4618      	mov	r0, r3
 8011df4:	3728      	adds	r7, #40	; 0x28
 8011df6:	46bd      	mov	sp, r7
 8011df8:	bd80      	pop	{r7, pc}
 8011dfa:	bf00      	nop
 8011dfc:	20004c08 	.word	0x20004c08
 8011e00:	0801aec0 	.word	0x0801aec0
 8011e04:	0801aef8 	.word	0x0801aef8
 8011e08:	0801af38 	.word	0x0801af38
 8011e0c:	0801af60 	.word	0x0801af60
 8011e10:	0801af78 	.word	0x0801af78
 8011e14:	0801af8c 	.word	0x0801af8c

08011e18 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8011e18:	b580      	push	{r7, lr}
 8011e1a:	b088      	sub	sp, #32
 8011e1c:	af02      	add	r7, sp, #8
 8011e1e:	60f8      	str	r0, [r7, #12]
 8011e20:	60b9      	str	r1, [r7, #8]
 8011e22:	607a      	str	r2, [r7, #4]
 8011e24:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8011e26:	68fb      	ldr	r3, [r7, #12]
 8011e28:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011e2c:	2b06      	cmp	r3, #6
 8011e2e:	d006      	beq.n	8011e3e <etharp_update_arp_entry+0x26>
 8011e30:	4b48      	ldr	r3, [pc, #288]	; (8011f54 <etharp_update_arp_entry+0x13c>)
 8011e32:	f240 12a9 	movw	r2, #425	; 0x1a9
 8011e36:	4948      	ldr	r1, [pc, #288]	; (8011f58 <etharp_update_arp_entry+0x140>)
 8011e38:	4848      	ldr	r0, [pc, #288]	; (8011f5c <etharp_update_arp_entry+0x144>)
 8011e3a:	f006 f9fb 	bl	8018234 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8011e3e:	68bb      	ldr	r3, [r7, #8]
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d012      	beq.n	8011e6a <etharp_update_arp_entry+0x52>
 8011e44:	68bb      	ldr	r3, [r7, #8]
 8011e46:	681b      	ldr	r3, [r3, #0]
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d00e      	beq.n	8011e6a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011e4c:	68bb      	ldr	r3, [r7, #8]
 8011e4e:	681b      	ldr	r3, [r3, #0]
 8011e50:	68f9      	ldr	r1, [r7, #12]
 8011e52:	4618      	mov	r0, r3
 8011e54:	f001 f8fe 	bl	8013054 <ip4_addr_isbroadcast_u32>
 8011e58:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d105      	bne.n	8011e6a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8011e5e:	68bb      	ldr	r3, [r7, #8]
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011e66:	2be0      	cmp	r3, #224	; 0xe0
 8011e68:	d102      	bne.n	8011e70 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8011e6a:	f06f 030f 	mvn.w	r3, #15
 8011e6e:	e06c      	b.n	8011f4a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8011e70:	78fb      	ldrb	r3, [r7, #3]
 8011e72:	68fa      	ldr	r2, [r7, #12]
 8011e74:	4619      	mov	r1, r3
 8011e76:	68b8      	ldr	r0, [r7, #8]
 8011e78:	f7ff fe56 	bl	8011b28 <etharp_find_entry>
 8011e7c:	4603      	mov	r3, r0
 8011e7e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8011e80:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	da02      	bge.n	8011e8e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8011e88:	8afb      	ldrh	r3, [r7, #22]
 8011e8a:	b25b      	sxtb	r3, r3
 8011e8c:	e05d      	b.n	8011f4a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8011e8e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011e92:	4933      	ldr	r1, [pc, #204]	; (8011f60 <etharp_update_arp_entry+0x148>)
 8011e94:	4613      	mov	r3, r2
 8011e96:	005b      	lsls	r3, r3, #1
 8011e98:	4413      	add	r3, r2
 8011e9a:	00db      	lsls	r3, r3, #3
 8011e9c:	440b      	add	r3, r1
 8011e9e:	3314      	adds	r3, #20
 8011ea0:	2202      	movs	r2, #2
 8011ea2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8011ea4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011ea8:	492d      	ldr	r1, [pc, #180]	; (8011f60 <etharp_update_arp_entry+0x148>)
 8011eaa:	4613      	mov	r3, r2
 8011eac:	005b      	lsls	r3, r3, #1
 8011eae:	4413      	add	r3, r2
 8011eb0:	00db      	lsls	r3, r3, #3
 8011eb2:	440b      	add	r3, r1
 8011eb4:	3308      	adds	r3, #8
 8011eb6:	68fa      	ldr	r2, [r7, #12]
 8011eb8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8011eba:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011ebe:	4613      	mov	r3, r2
 8011ec0:	005b      	lsls	r3, r3, #1
 8011ec2:	4413      	add	r3, r2
 8011ec4:	00db      	lsls	r3, r3, #3
 8011ec6:	3308      	adds	r3, #8
 8011ec8:	4a25      	ldr	r2, [pc, #148]	; (8011f60 <etharp_update_arp_entry+0x148>)
 8011eca:	4413      	add	r3, r2
 8011ecc:	3304      	adds	r3, #4
 8011ece:	2206      	movs	r2, #6
 8011ed0:	6879      	ldr	r1, [r7, #4]
 8011ed2:	4618      	mov	r0, r3
 8011ed4:	f005 fe4f 	bl	8017b76 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8011ed8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011edc:	4920      	ldr	r1, [pc, #128]	; (8011f60 <etharp_update_arp_entry+0x148>)
 8011ede:	4613      	mov	r3, r2
 8011ee0:	005b      	lsls	r3, r3, #1
 8011ee2:	4413      	add	r3, r2
 8011ee4:	00db      	lsls	r3, r3, #3
 8011ee6:	440b      	add	r3, r1
 8011ee8:	3312      	adds	r3, #18
 8011eea:	2200      	movs	r2, #0
 8011eec:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8011eee:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011ef2:	491b      	ldr	r1, [pc, #108]	; (8011f60 <etharp_update_arp_entry+0x148>)
 8011ef4:	4613      	mov	r3, r2
 8011ef6:	005b      	lsls	r3, r3, #1
 8011ef8:	4413      	add	r3, r2
 8011efa:	00db      	lsls	r3, r3, #3
 8011efc:	440b      	add	r3, r1
 8011efe:	681b      	ldr	r3, [r3, #0]
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d021      	beq.n	8011f48 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8011f04:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011f08:	4915      	ldr	r1, [pc, #84]	; (8011f60 <etharp_update_arp_entry+0x148>)
 8011f0a:	4613      	mov	r3, r2
 8011f0c:	005b      	lsls	r3, r3, #1
 8011f0e:	4413      	add	r3, r2
 8011f10:	00db      	lsls	r3, r3, #3
 8011f12:	440b      	add	r3, r1
 8011f14:	681b      	ldr	r3, [r3, #0]
 8011f16:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8011f18:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011f1c:	4910      	ldr	r1, [pc, #64]	; (8011f60 <etharp_update_arp_entry+0x148>)
 8011f1e:	4613      	mov	r3, r2
 8011f20:	005b      	lsls	r3, r3, #1
 8011f22:	4413      	add	r3, r2
 8011f24:	00db      	lsls	r3, r3, #3
 8011f26:	440b      	add	r3, r1
 8011f28:	2200      	movs	r2, #0
 8011f2a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8011f2c:	68fb      	ldr	r3, [r7, #12]
 8011f2e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8011f32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011f36:	9300      	str	r3, [sp, #0]
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	6939      	ldr	r1, [r7, #16]
 8011f3c:	68f8      	ldr	r0, [r7, #12]
 8011f3e:	f001 ff91 	bl	8013e64 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8011f42:	6938      	ldr	r0, [r7, #16]
 8011f44:	f7f9 fdf0 	bl	800bb28 <pbuf_free>
  }
  return ERR_OK;
 8011f48:	2300      	movs	r3, #0
}
 8011f4a:	4618      	mov	r0, r3
 8011f4c:	3718      	adds	r7, #24
 8011f4e:	46bd      	mov	sp, r7
 8011f50:	bd80      	pop	{r7, pc}
 8011f52:	bf00      	nop
 8011f54:	0801aec0 	.word	0x0801aec0
 8011f58:	0801afb8 	.word	0x0801afb8
 8011f5c:	0801af38 	.word	0x0801af38
 8011f60:	20004c08 	.word	0x20004c08

08011f64 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8011f64:	b580      	push	{r7, lr}
 8011f66:	b084      	sub	sp, #16
 8011f68:	af00      	add	r7, sp, #0
 8011f6a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011f6c:	2300      	movs	r3, #0
 8011f6e:	60fb      	str	r3, [r7, #12]
 8011f70:	e01e      	b.n	8011fb0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8011f72:	4913      	ldr	r1, [pc, #76]	; (8011fc0 <etharp_cleanup_netif+0x5c>)
 8011f74:	68fa      	ldr	r2, [r7, #12]
 8011f76:	4613      	mov	r3, r2
 8011f78:	005b      	lsls	r3, r3, #1
 8011f7a:	4413      	add	r3, r2
 8011f7c:	00db      	lsls	r3, r3, #3
 8011f7e:	440b      	add	r3, r1
 8011f80:	3314      	adds	r3, #20
 8011f82:	781b      	ldrb	r3, [r3, #0]
 8011f84:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8011f86:	7afb      	ldrb	r3, [r7, #11]
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d00e      	beq.n	8011faa <etharp_cleanup_netif+0x46>
 8011f8c:	490c      	ldr	r1, [pc, #48]	; (8011fc0 <etharp_cleanup_netif+0x5c>)
 8011f8e:	68fa      	ldr	r2, [r7, #12]
 8011f90:	4613      	mov	r3, r2
 8011f92:	005b      	lsls	r3, r3, #1
 8011f94:	4413      	add	r3, r2
 8011f96:	00db      	lsls	r3, r3, #3
 8011f98:	440b      	add	r3, r1
 8011f9a:	3308      	adds	r3, #8
 8011f9c:	681b      	ldr	r3, [r3, #0]
 8011f9e:	687a      	ldr	r2, [r7, #4]
 8011fa0:	429a      	cmp	r2, r3
 8011fa2:	d102      	bne.n	8011faa <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8011fa4:	68f8      	ldr	r0, [r7, #12]
 8011fa6:	f7ff fce5 	bl	8011974 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011faa:	68fb      	ldr	r3, [r7, #12]
 8011fac:	3301      	adds	r3, #1
 8011fae:	60fb      	str	r3, [r7, #12]
 8011fb0:	68fb      	ldr	r3, [r7, #12]
 8011fb2:	2b09      	cmp	r3, #9
 8011fb4:	dddd      	ble.n	8011f72 <etharp_cleanup_netif+0xe>
    }
  }
}
 8011fb6:	bf00      	nop
 8011fb8:	bf00      	nop
 8011fba:	3710      	adds	r7, #16
 8011fbc:	46bd      	mov	sp, r7
 8011fbe:	bd80      	pop	{r7, pc}
 8011fc0:	20004c08 	.word	0x20004c08

08011fc4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8011fc4:	b5b0      	push	{r4, r5, r7, lr}
 8011fc6:	b08a      	sub	sp, #40	; 0x28
 8011fc8:	af04      	add	r7, sp, #16
 8011fca:	6078      	str	r0, [r7, #4]
 8011fcc:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8011fce:	683b      	ldr	r3, [r7, #0]
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d107      	bne.n	8011fe4 <etharp_input+0x20>
 8011fd4:	4b3d      	ldr	r3, [pc, #244]	; (80120cc <etharp_input+0x108>)
 8011fd6:	f240 228a 	movw	r2, #650	; 0x28a
 8011fda:	493d      	ldr	r1, [pc, #244]	; (80120d0 <etharp_input+0x10c>)
 8011fdc:	483d      	ldr	r0, [pc, #244]	; (80120d4 <etharp_input+0x110>)
 8011fde:	f006 f929 	bl	8018234 <iprintf>
 8011fe2:	e06f      	b.n	80120c4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	685b      	ldr	r3, [r3, #4]
 8011fe8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8011fea:	693b      	ldr	r3, [r7, #16]
 8011fec:	881b      	ldrh	r3, [r3, #0]
 8011fee:	b29b      	uxth	r3, r3
 8011ff0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011ff4:	d10c      	bne.n	8012010 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011ff6:	693b      	ldr	r3, [r7, #16]
 8011ff8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8011ffa:	2b06      	cmp	r3, #6
 8011ffc:	d108      	bne.n	8012010 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011ffe:	693b      	ldr	r3, [r7, #16]
 8012000:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012002:	2b04      	cmp	r3, #4
 8012004:	d104      	bne.n	8012010 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8012006:	693b      	ldr	r3, [r7, #16]
 8012008:	885b      	ldrh	r3, [r3, #2]
 801200a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801200c:	2b08      	cmp	r3, #8
 801200e:	d003      	beq.n	8012018 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8012010:	6878      	ldr	r0, [r7, #4]
 8012012:	f7f9 fd89 	bl	800bb28 <pbuf_free>
    return;
 8012016:	e055      	b.n	80120c4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8012018:	693b      	ldr	r3, [r7, #16]
 801201a:	330e      	adds	r3, #14
 801201c:	681b      	ldr	r3, [r3, #0]
 801201e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8012020:	693b      	ldr	r3, [r7, #16]
 8012022:	3318      	adds	r3, #24
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012028:	683b      	ldr	r3, [r7, #0]
 801202a:	3304      	adds	r3, #4
 801202c:	681b      	ldr	r3, [r3, #0]
 801202e:	2b00      	cmp	r3, #0
 8012030:	d102      	bne.n	8012038 <etharp_input+0x74>
    for_us = 0;
 8012032:	2300      	movs	r3, #0
 8012034:	75fb      	strb	r3, [r7, #23]
 8012036:	e009      	b.n	801204c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8012038:	68ba      	ldr	r2, [r7, #8]
 801203a:	683b      	ldr	r3, [r7, #0]
 801203c:	3304      	adds	r3, #4
 801203e:	681b      	ldr	r3, [r3, #0]
 8012040:	429a      	cmp	r2, r3
 8012042:	bf0c      	ite	eq
 8012044:	2301      	moveq	r3, #1
 8012046:	2300      	movne	r3, #0
 8012048:	b2db      	uxtb	r3, r3
 801204a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801204c:	693b      	ldr	r3, [r7, #16]
 801204e:	f103 0208 	add.w	r2, r3, #8
 8012052:	7dfb      	ldrb	r3, [r7, #23]
 8012054:	2b00      	cmp	r3, #0
 8012056:	d001      	beq.n	801205c <etharp_input+0x98>
 8012058:	2301      	movs	r3, #1
 801205a:	e000      	b.n	801205e <etharp_input+0x9a>
 801205c:	2302      	movs	r3, #2
 801205e:	f107 010c 	add.w	r1, r7, #12
 8012062:	6838      	ldr	r0, [r7, #0]
 8012064:	f7ff fed8 	bl	8011e18 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8012068:	693b      	ldr	r3, [r7, #16]
 801206a:	88db      	ldrh	r3, [r3, #6]
 801206c:	b29b      	uxth	r3, r3
 801206e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012072:	d003      	beq.n	801207c <etharp_input+0xb8>
 8012074:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012078:	d01e      	beq.n	80120b8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801207a:	e020      	b.n	80120be <etharp_input+0xfa>
      if (for_us) {
 801207c:	7dfb      	ldrb	r3, [r7, #23]
 801207e:	2b00      	cmp	r3, #0
 8012080:	d01c      	beq.n	80120bc <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8012082:	683b      	ldr	r3, [r7, #0]
 8012084:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8012088:	693b      	ldr	r3, [r7, #16]
 801208a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801208e:	683b      	ldr	r3, [r7, #0]
 8012090:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8012094:	683b      	ldr	r3, [r7, #0]
 8012096:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8012098:	693a      	ldr	r2, [r7, #16]
 801209a:	3208      	adds	r2, #8
        etharp_raw(netif,
 801209c:	2102      	movs	r1, #2
 801209e:	9103      	str	r1, [sp, #12]
 80120a0:	f107 010c 	add.w	r1, r7, #12
 80120a4:	9102      	str	r1, [sp, #8]
 80120a6:	9201      	str	r2, [sp, #4]
 80120a8:	9300      	str	r3, [sp, #0]
 80120aa:	462b      	mov	r3, r5
 80120ac:	4622      	mov	r2, r4
 80120ae:	4601      	mov	r1, r0
 80120b0:	6838      	ldr	r0, [r7, #0]
 80120b2:	f000 faeb 	bl	801268c <etharp_raw>
      break;
 80120b6:	e001      	b.n	80120bc <etharp_input+0xf8>
      break;
 80120b8:	bf00      	nop
 80120ba:	e000      	b.n	80120be <etharp_input+0xfa>
      break;
 80120bc:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80120be:	6878      	ldr	r0, [r7, #4]
 80120c0:	f7f9 fd32 	bl	800bb28 <pbuf_free>
}
 80120c4:	3718      	adds	r7, #24
 80120c6:	46bd      	mov	sp, r7
 80120c8:	bdb0      	pop	{r4, r5, r7, pc}
 80120ca:	bf00      	nop
 80120cc:	0801aec0 	.word	0x0801aec0
 80120d0:	0801b010 	.word	0x0801b010
 80120d4:	0801af38 	.word	0x0801af38

080120d8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80120d8:	b580      	push	{r7, lr}
 80120da:	b086      	sub	sp, #24
 80120dc:	af02      	add	r7, sp, #8
 80120de:	60f8      	str	r0, [r7, #12]
 80120e0:	60b9      	str	r1, [r7, #8]
 80120e2:	4613      	mov	r3, r2
 80120e4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80120e6:	79fa      	ldrb	r2, [r7, #7]
 80120e8:	4944      	ldr	r1, [pc, #272]	; (80121fc <etharp_output_to_arp_index+0x124>)
 80120ea:	4613      	mov	r3, r2
 80120ec:	005b      	lsls	r3, r3, #1
 80120ee:	4413      	add	r3, r2
 80120f0:	00db      	lsls	r3, r3, #3
 80120f2:	440b      	add	r3, r1
 80120f4:	3314      	adds	r3, #20
 80120f6:	781b      	ldrb	r3, [r3, #0]
 80120f8:	2b01      	cmp	r3, #1
 80120fa:	d806      	bhi.n	801210a <etharp_output_to_arp_index+0x32>
 80120fc:	4b40      	ldr	r3, [pc, #256]	; (8012200 <etharp_output_to_arp_index+0x128>)
 80120fe:	f240 22ee 	movw	r2, #750	; 0x2ee
 8012102:	4940      	ldr	r1, [pc, #256]	; (8012204 <etharp_output_to_arp_index+0x12c>)
 8012104:	4840      	ldr	r0, [pc, #256]	; (8012208 <etharp_output_to_arp_index+0x130>)
 8012106:	f006 f895 	bl	8018234 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801210a:	79fa      	ldrb	r2, [r7, #7]
 801210c:	493b      	ldr	r1, [pc, #236]	; (80121fc <etharp_output_to_arp_index+0x124>)
 801210e:	4613      	mov	r3, r2
 8012110:	005b      	lsls	r3, r3, #1
 8012112:	4413      	add	r3, r2
 8012114:	00db      	lsls	r3, r3, #3
 8012116:	440b      	add	r3, r1
 8012118:	3314      	adds	r3, #20
 801211a:	781b      	ldrb	r3, [r3, #0]
 801211c:	2b02      	cmp	r3, #2
 801211e:	d153      	bne.n	80121c8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8012120:	79fa      	ldrb	r2, [r7, #7]
 8012122:	4936      	ldr	r1, [pc, #216]	; (80121fc <etharp_output_to_arp_index+0x124>)
 8012124:	4613      	mov	r3, r2
 8012126:	005b      	lsls	r3, r3, #1
 8012128:	4413      	add	r3, r2
 801212a:	00db      	lsls	r3, r3, #3
 801212c:	440b      	add	r3, r1
 801212e:	3312      	adds	r3, #18
 8012130:	881b      	ldrh	r3, [r3, #0]
 8012132:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8012136:	d919      	bls.n	801216c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8012138:	79fa      	ldrb	r2, [r7, #7]
 801213a:	4613      	mov	r3, r2
 801213c:	005b      	lsls	r3, r3, #1
 801213e:	4413      	add	r3, r2
 8012140:	00db      	lsls	r3, r3, #3
 8012142:	4a2e      	ldr	r2, [pc, #184]	; (80121fc <etharp_output_to_arp_index+0x124>)
 8012144:	4413      	add	r3, r2
 8012146:	3304      	adds	r3, #4
 8012148:	4619      	mov	r1, r3
 801214a:	68f8      	ldr	r0, [r7, #12]
 801214c:	f000 fb4c 	bl	80127e8 <etharp_request>
 8012150:	4603      	mov	r3, r0
 8012152:	2b00      	cmp	r3, #0
 8012154:	d138      	bne.n	80121c8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012156:	79fa      	ldrb	r2, [r7, #7]
 8012158:	4928      	ldr	r1, [pc, #160]	; (80121fc <etharp_output_to_arp_index+0x124>)
 801215a:	4613      	mov	r3, r2
 801215c:	005b      	lsls	r3, r3, #1
 801215e:	4413      	add	r3, r2
 8012160:	00db      	lsls	r3, r3, #3
 8012162:	440b      	add	r3, r1
 8012164:	3314      	adds	r3, #20
 8012166:	2203      	movs	r2, #3
 8012168:	701a      	strb	r2, [r3, #0]
 801216a:	e02d      	b.n	80121c8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801216c:	79fa      	ldrb	r2, [r7, #7]
 801216e:	4923      	ldr	r1, [pc, #140]	; (80121fc <etharp_output_to_arp_index+0x124>)
 8012170:	4613      	mov	r3, r2
 8012172:	005b      	lsls	r3, r3, #1
 8012174:	4413      	add	r3, r2
 8012176:	00db      	lsls	r3, r3, #3
 8012178:	440b      	add	r3, r1
 801217a:	3312      	adds	r3, #18
 801217c:	881b      	ldrh	r3, [r3, #0]
 801217e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8012182:	d321      	bcc.n	80121c8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8012184:	79fa      	ldrb	r2, [r7, #7]
 8012186:	4613      	mov	r3, r2
 8012188:	005b      	lsls	r3, r3, #1
 801218a:	4413      	add	r3, r2
 801218c:	00db      	lsls	r3, r3, #3
 801218e:	4a1b      	ldr	r2, [pc, #108]	; (80121fc <etharp_output_to_arp_index+0x124>)
 8012190:	4413      	add	r3, r2
 8012192:	1d19      	adds	r1, r3, #4
 8012194:	79fa      	ldrb	r2, [r7, #7]
 8012196:	4613      	mov	r3, r2
 8012198:	005b      	lsls	r3, r3, #1
 801219a:	4413      	add	r3, r2
 801219c:	00db      	lsls	r3, r3, #3
 801219e:	3308      	adds	r3, #8
 80121a0:	4a16      	ldr	r2, [pc, #88]	; (80121fc <etharp_output_to_arp_index+0x124>)
 80121a2:	4413      	add	r3, r2
 80121a4:	3304      	adds	r3, #4
 80121a6:	461a      	mov	r2, r3
 80121a8:	68f8      	ldr	r0, [r7, #12]
 80121aa:	f000 fafb 	bl	80127a4 <etharp_request_dst>
 80121ae:	4603      	mov	r3, r0
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d109      	bne.n	80121c8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80121b4:	79fa      	ldrb	r2, [r7, #7]
 80121b6:	4911      	ldr	r1, [pc, #68]	; (80121fc <etharp_output_to_arp_index+0x124>)
 80121b8:	4613      	mov	r3, r2
 80121ba:	005b      	lsls	r3, r3, #1
 80121bc:	4413      	add	r3, r2
 80121be:	00db      	lsls	r3, r3, #3
 80121c0:	440b      	add	r3, r1
 80121c2:	3314      	adds	r3, #20
 80121c4:	2203      	movs	r2, #3
 80121c6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80121c8:	68fb      	ldr	r3, [r7, #12]
 80121ca:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80121ce:	79fa      	ldrb	r2, [r7, #7]
 80121d0:	4613      	mov	r3, r2
 80121d2:	005b      	lsls	r3, r3, #1
 80121d4:	4413      	add	r3, r2
 80121d6:	00db      	lsls	r3, r3, #3
 80121d8:	3308      	adds	r3, #8
 80121da:	4a08      	ldr	r2, [pc, #32]	; (80121fc <etharp_output_to_arp_index+0x124>)
 80121dc:	4413      	add	r3, r2
 80121de:	3304      	adds	r3, #4
 80121e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80121e4:	9200      	str	r2, [sp, #0]
 80121e6:	460a      	mov	r2, r1
 80121e8:	68b9      	ldr	r1, [r7, #8]
 80121ea:	68f8      	ldr	r0, [r7, #12]
 80121ec:	f001 fe3a 	bl	8013e64 <ethernet_output>
 80121f0:	4603      	mov	r3, r0
}
 80121f2:	4618      	mov	r0, r3
 80121f4:	3710      	adds	r7, #16
 80121f6:	46bd      	mov	sp, r7
 80121f8:	bd80      	pop	{r7, pc}
 80121fa:	bf00      	nop
 80121fc:	20004c08 	.word	0x20004c08
 8012200:	0801aec0 	.word	0x0801aec0
 8012204:	0801b030 	.word	0x0801b030
 8012208:	0801af38 	.word	0x0801af38

0801220c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801220c:	b580      	push	{r7, lr}
 801220e:	b08a      	sub	sp, #40	; 0x28
 8012210:	af02      	add	r7, sp, #8
 8012212:	60f8      	str	r0, [r7, #12]
 8012214:	60b9      	str	r1, [r7, #8]
 8012216:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801221c:	68fb      	ldr	r3, [r7, #12]
 801221e:	2b00      	cmp	r3, #0
 8012220:	d106      	bne.n	8012230 <etharp_output+0x24>
 8012222:	4b73      	ldr	r3, [pc, #460]	; (80123f0 <etharp_output+0x1e4>)
 8012224:	f240 321e 	movw	r2, #798	; 0x31e
 8012228:	4972      	ldr	r1, [pc, #456]	; (80123f4 <etharp_output+0x1e8>)
 801222a:	4873      	ldr	r0, [pc, #460]	; (80123f8 <etharp_output+0x1ec>)
 801222c:	f006 f802 	bl	8018234 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8012230:	68bb      	ldr	r3, [r7, #8]
 8012232:	2b00      	cmp	r3, #0
 8012234:	d106      	bne.n	8012244 <etharp_output+0x38>
 8012236:	4b6e      	ldr	r3, [pc, #440]	; (80123f0 <etharp_output+0x1e4>)
 8012238:	f240 321f 	movw	r2, #799	; 0x31f
 801223c:	496f      	ldr	r1, [pc, #444]	; (80123fc <etharp_output+0x1f0>)
 801223e:	486e      	ldr	r0, [pc, #440]	; (80123f8 <etharp_output+0x1ec>)
 8012240:	f005 fff8 	bl	8018234 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	2b00      	cmp	r3, #0
 8012248:	d106      	bne.n	8012258 <etharp_output+0x4c>
 801224a:	4b69      	ldr	r3, [pc, #420]	; (80123f0 <etharp_output+0x1e4>)
 801224c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8012250:	496b      	ldr	r1, [pc, #428]	; (8012400 <etharp_output+0x1f4>)
 8012252:	4869      	ldr	r0, [pc, #420]	; (80123f8 <etharp_output+0x1ec>)
 8012254:	f005 ffee 	bl	8018234 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	68f9      	ldr	r1, [r7, #12]
 801225e:	4618      	mov	r0, r3
 8012260:	f000 fef8 	bl	8013054 <ip4_addr_isbroadcast_u32>
 8012264:	4603      	mov	r3, r0
 8012266:	2b00      	cmp	r3, #0
 8012268:	d002      	beq.n	8012270 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801226a:	4b66      	ldr	r3, [pc, #408]	; (8012404 <etharp_output+0x1f8>)
 801226c:	61fb      	str	r3, [r7, #28]
 801226e:	e0af      	b.n	80123d0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	681b      	ldr	r3, [r3, #0]
 8012274:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012278:	2be0      	cmp	r3, #224	; 0xe0
 801227a:	d118      	bne.n	80122ae <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801227c:	2301      	movs	r3, #1
 801227e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8012280:	2300      	movs	r3, #0
 8012282:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8012284:	235e      	movs	r3, #94	; 0x5e
 8012286:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	3301      	adds	r3, #1
 801228c:	781b      	ldrb	r3, [r3, #0]
 801228e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012292:	b2db      	uxtb	r3, r3
 8012294:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	3302      	adds	r3, #2
 801229a:	781b      	ldrb	r3, [r3, #0]
 801229c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	3303      	adds	r3, #3
 80122a2:	781b      	ldrb	r3, [r3, #0]
 80122a4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80122a6:	f107 0310 	add.w	r3, r7, #16
 80122aa:	61fb      	str	r3, [r7, #28]
 80122ac:	e090      	b.n	80123d0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	681a      	ldr	r2, [r3, #0]
 80122b2:	68fb      	ldr	r3, [r7, #12]
 80122b4:	3304      	adds	r3, #4
 80122b6:	681b      	ldr	r3, [r3, #0]
 80122b8:	405a      	eors	r2, r3
 80122ba:	68fb      	ldr	r3, [r7, #12]
 80122bc:	3308      	adds	r3, #8
 80122be:	681b      	ldr	r3, [r3, #0]
 80122c0:	4013      	ands	r3, r2
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d012      	beq.n	80122ec <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	681b      	ldr	r3, [r3, #0]
 80122ca:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80122cc:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80122d0:	4293      	cmp	r3, r2
 80122d2:	d00b      	beq.n	80122ec <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80122d4:	68fb      	ldr	r3, [r7, #12]
 80122d6:	330c      	adds	r3, #12
 80122d8:	681b      	ldr	r3, [r3, #0]
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d003      	beq.n	80122e6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80122de:	68fb      	ldr	r3, [r7, #12]
 80122e0:	330c      	adds	r3, #12
 80122e2:	61bb      	str	r3, [r7, #24]
 80122e4:	e002      	b.n	80122ec <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80122e6:	f06f 0303 	mvn.w	r3, #3
 80122ea:	e07d      	b.n	80123e8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80122ec:	4b46      	ldr	r3, [pc, #280]	; (8012408 <etharp_output+0x1fc>)
 80122ee:	781b      	ldrb	r3, [r3, #0]
 80122f0:	4619      	mov	r1, r3
 80122f2:	4a46      	ldr	r2, [pc, #280]	; (801240c <etharp_output+0x200>)
 80122f4:	460b      	mov	r3, r1
 80122f6:	005b      	lsls	r3, r3, #1
 80122f8:	440b      	add	r3, r1
 80122fa:	00db      	lsls	r3, r3, #3
 80122fc:	4413      	add	r3, r2
 80122fe:	3314      	adds	r3, #20
 8012300:	781b      	ldrb	r3, [r3, #0]
 8012302:	2b01      	cmp	r3, #1
 8012304:	d925      	bls.n	8012352 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8012306:	4b40      	ldr	r3, [pc, #256]	; (8012408 <etharp_output+0x1fc>)
 8012308:	781b      	ldrb	r3, [r3, #0]
 801230a:	4619      	mov	r1, r3
 801230c:	4a3f      	ldr	r2, [pc, #252]	; (801240c <etharp_output+0x200>)
 801230e:	460b      	mov	r3, r1
 8012310:	005b      	lsls	r3, r3, #1
 8012312:	440b      	add	r3, r1
 8012314:	00db      	lsls	r3, r3, #3
 8012316:	4413      	add	r3, r2
 8012318:	3308      	adds	r3, #8
 801231a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801231c:	68fa      	ldr	r2, [r7, #12]
 801231e:	429a      	cmp	r2, r3
 8012320:	d117      	bne.n	8012352 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8012322:	69bb      	ldr	r3, [r7, #24]
 8012324:	681a      	ldr	r2, [r3, #0]
 8012326:	4b38      	ldr	r3, [pc, #224]	; (8012408 <etharp_output+0x1fc>)
 8012328:	781b      	ldrb	r3, [r3, #0]
 801232a:	4618      	mov	r0, r3
 801232c:	4937      	ldr	r1, [pc, #220]	; (801240c <etharp_output+0x200>)
 801232e:	4603      	mov	r3, r0
 8012330:	005b      	lsls	r3, r3, #1
 8012332:	4403      	add	r3, r0
 8012334:	00db      	lsls	r3, r3, #3
 8012336:	440b      	add	r3, r1
 8012338:	3304      	adds	r3, #4
 801233a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801233c:	429a      	cmp	r2, r3
 801233e:	d108      	bne.n	8012352 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8012340:	4b31      	ldr	r3, [pc, #196]	; (8012408 <etharp_output+0x1fc>)
 8012342:	781b      	ldrb	r3, [r3, #0]
 8012344:	461a      	mov	r2, r3
 8012346:	68b9      	ldr	r1, [r7, #8]
 8012348:	68f8      	ldr	r0, [r7, #12]
 801234a:	f7ff fec5 	bl	80120d8 <etharp_output_to_arp_index>
 801234e:	4603      	mov	r3, r0
 8012350:	e04a      	b.n	80123e8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8012352:	2300      	movs	r3, #0
 8012354:	75fb      	strb	r3, [r7, #23]
 8012356:	e031      	b.n	80123bc <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012358:	7dfa      	ldrb	r2, [r7, #23]
 801235a:	492c      	ldr	r1, [pc, #176]	; (801240c <etharp_output+0x200>)
 801235c:	4613      	mov	r3, r2
 801235e:	005b      	lsls	r3, r3, #1
 8012360:	4413      	add	r3, r2
 8012362:	00db      	lsls	r3, r3, #3
 8012364:	440b      	add	r3, r1
 8012366:	3314      	adds	r3, #20
 8012368:	781b      	ldrb	r3, [r3, #0]
 801236a:	2b01      	cmp	r3, #1
 801236c:	d923      	bls.n	80123b6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801236e:	7dfa      	ldrb	r2, [r7, #23]
 8012370:	4926      	ldr	r1, [pc, #152]	; (801240c <etharp_output+0x200>)
 8012372:	4613      	mov	r3, r2
 8012374:	005b      	lsls	r3, r3, #1
 8012376:	4413      	add	r3, r2
 8012378:	00db      	lsls	r3, r3, #3
 801237a:	440b      	add	r3, r1
 801237c:	3308      	adds	r3, #8
 801237e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012380:	68fa      	ldr	r2, [r7, #12]
 8012382:	429a      	cmp	r2, r3
 8012384:	d117      	bne.n	80123b6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8012386:	69bb      	ldr	r3, [r7, #24]
 8012388:	6819      	ldr	r1, [r3, #0]
 801238a:	7dfa      	ldrb	r2, [r7, #23]
 801238c:	481f      	ldr	r0, [pc, #124]	; (801240c <etharp_output+0x200>)
 801238e:	4613      	mov	r3, r2
 8012390:	005b      	lsls	r3, r3, #1
 8012392:	4413      	add	r3, r2
 8012394:	00db      	lsls	r3, r3, #3
 8012396:	4403      	add	r3, r0
 8012398:	3304      	adds	r3, #4
 801239a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801239c:	4299      	cmp	r1, r3
 801239e:	d10a      	bne.n	80123b6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80123a0:	4a19      	ldr	r2, [pc, #100]	; (8012408 <etharp_output+0x1fc>)
 80123a2:	7dfb      	ldrb	r3, [r7, #23]
 80123a4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80123a6:	7dfb      	ldrb	r3, [r7, #23]
 80123a8:	461a      	mov	r2, r3
 80123aa:	68b9      	ldr	r1, [r7, #8]
 80123ac:	68f8      	ldr	r0, [r7, #12]
 80123ae:	f7ff fe93 	bl	80120d8 <etharp_output_to_arp_index>
 80123b2:	4603      	mov	r3, r0
 80123b4:	e018      	b.n	80123e8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80123b6:	7dfb      	ldrb	r3, [r7, #23]
 80123b8:	3301      	adds	r3, #1
 80123ba:	75fb      	strb	r3, [r7, #23]
 80123bc:	7dfb      	ldrb	r3, [r7, #23]
 80123be:	2b09      	cmp	r3, #9
 80123c0:	d9ca      	bls.n	8012358 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80123c2:	68ba      	ldr	r2, [r7, #8]
 80123c4:	69b9      	ldr	r1, [r7, #24]
 80123c6:	68f8      	ldr	r0, [r7, #12]
 80123c8:	f000 f822 	bl	8012410 <etharp_query>
 80123cc:	4603      	mov	r3, r0
 80123ce:	e00b      	b.n	80123e8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80123d0:	68fb      	ldr	r3, [r7, #12]
 80123d2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80123d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80123da:	9300      	str	r3, [sp, #0]
 80123dc:	69fb      	ldr	r3, [r7, #28]
 80123de:	68b9      	ldr	r1, [r7, #8]
 80123e0:	68f8      	ldr	r0, [r7, #12]
 80123e2:	f001 fd3f 	bl	8013e64 <ethernet_output>
 80123e6:	4603      	mov	r3, r0
}
 80123e8:	4618      	mov	r0, r3
 80123ea:	3720      	adds	r7, #32
 80123ec:	46bd      	mov	sp, r7
 80123ee:	bd80      	pop	{r7, pc}
 80123f0:	0801aec0 	.word	0x0801aec0
 80123f4:	0801b010 	.word	0x0801b010
 80123f8:	0801af38 	.word	0x0801af38
 80123fc:	0801b060 	.word	0x0801b060
 8012400:	0801b000 	.word	0x0801b000
 8012404:	0801b83c 	.word	0x0801b83c
 8012408:	20004cf8 	.word	0x20004cf8
 801240c:	20004c08 	.word	0x20004c08

08012410 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8012410:	b580      	push	{r7, lr}
 8012412:	b08c      	sub	sp, #48	; 0x30
 8012414:	af02      	add	r7, sp, #8
 8012416:	60f8      	str	r0, [r7, #12]
 8012418:	60b9      	str	r1, [r7, #8]
 801241a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801241c:	68fb      	ldr	r3, [r7, #12]
 801241e:	3326      	adds	r3, #38	; 0x26
 8012420:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8012422:	23ff      	movs	r3, #255	; 0xff
 8012424:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8012428:	2300      	movs	r3, #0
 801242a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801242c:	68bb      	ldr	r3, [r7, #8]
 801242e:	681b      	ldr	r3, [r3, #0]
 8012430:	68f9      	ldr	r1, [r7, #12]
 8012432:	4618      	mov	r0, r3
 8012434:	f000 fe0e 	bl	8013054 <ip4_addr_isbroadcast_u32>
 8012438:	4603      	mov	r3, r0
 801243a:	2b00      	cmp	r3, #0
 801243c:	d10c      	bne.n	8012458 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801243e:	68bb      	ldr	r3, [r7, #8]
 8012440:	681b      	ldr	r3, [r3, #0]
 8012442:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012446:	2be0      	cmp	r3, #224	; 0xe0
 8012448:	d006      	beq.n	8012458 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801244a:	68bb      	ldr	r3, [r7, #8]
 801244c:	2b00      	cmp	r3, #0
 801244e:	d003      	beq.n	8012458 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8012450:	68bb      	ldr	r3, [r7, #8]
 8012452:	681b      	ldr	r3, [r3, #0]
 8012454:	2b00      	cmp	r3, #0
 8012456:	d102      	bne.n	801245e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012458:	f06f 030f 	mvn.w	r3, #15
 801245c:	e101      	b.n	8012662 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801245e:	68fa      	ldr	r2, [r7, #12]
 8012460:	2101      	movs	r1, #1
 8012462:	68b8      	ldr	r0, [r7, #8]
 8012464:	f7ff fb60 	bl	8011b28 <etharp_find_entry>
 8012468:	4603      	mov	r3, r0
 801246a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801246c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012470:	2b00      	cmp	r3, #0
 8012472:	da02      	bge.n	801247a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8012474:	8a7b      	ldrh	r3, [r7, #18]
 8012476:	b25b      	sxtb	r3, r3
 8012478:	e0f3      	b.n	8012662 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801247a:	8a7b      	ldrh	r3, [r7, #18]
 801247c:	2b7e      	cmp	r3, #126	; 0x7e
 801247e:	d906      	bls.n	801248e <etharp_query+0x7e>
 8012480:	4b7a      	ldr	r3, [pc, #488]	; (801266c <etharp_query+0x25c>)
 8012482:	f240 32c1 	movw	r2, #961	; 0x3c1
 8012486:	497a      	ldr	r1, [pc, #488]	; (8012670 <etharp_query+0x260>)
 8012488:	487a      	ldr	r0, [pc, #488]	; (8012674 <etharp_query+0x264>)
 801248a:	f005 fed3 	bl	8018234 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801248e:	8a7b      	ldrh	r3, [r7, #18]
 8012490:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8012492:	7c7a      	ldrb	r2, [r7, #17]
 8012494:	4978      	ldr	r1, [pc, #480]	; (8012678 <etharp_query+0x268>)
 8012496:	4613      	mov	r3, r2
 8012498:	005b      	lsls	r3, r3, #1
 801249a:	4413      	add	r3, r2
 801249c:	00db      	lsls	r3, r3, #3
 801249e:	440b      	add	r3, r1
 80124a0:	3314      	adds	r3, #20
 80124a2:	781b      	ldrb	r3, [r3, #0]
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	d115      	bne.n	80124d4 <etharp_query+0xc4>
    is_new_entry = 1;
 80124a8:	2301      	movs	r3, #1
 80124aa:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80124ac:	7c7a      	ldrb	r2, [r7, #17]
 80124ae:	4972      	ldr	r1, [pc, #456]	; (8012678 <etharp_query+0x268>)
 80124b0:	4613      	mov	r3, r2
 80124b2:	005b      	lsls	r3, r3, #1
 80124b4:	4413      	add	r3, r2
 80124b6:	00db      	lsls	r3, r3, #3
 80124b8:	440b      	add	r3, r1
 80124ba:	3314      	adds	r3, #20
 80124bc:	2201      	movs	r2, #1
 80124be:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80124c0:	7c7a      	ldrb	r2, [r7, #17]
 80124c2:	496d      	ldr	r1, [pc, #436]	; (8012678 <etharp_query+0x268>)
 80124c4:	4613      	mov	r3, r2
 80124c6:	005b      	lsls	r3, r3, #1
 80124c8:	4413      	add	r3, r2
 80124ca:	00db      	lsls	r3, r3, #3
 80124cc:	440b      	add	r3, r1
 80124ce:	3308      	adds	r3, #8
 80124d0:	68fa      	ldr	r2, [r7, #12]
 80124d2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80124d4:	7c7a      	ldrb	r2, [r7, #17]
 80124d6:	4968      	ldr	r1, [pc, #416]	; (8012678 <etharp_query+0x268>)
 80124d8:	4613      	mov	r3, r2
 80124da:	005b      	lsls	r3, r3, #1
 80124dc:	4413      	add	r3, r2
 80124de:	00db      	lsls	r3, r3, #3
 80124e0:	440b      	add	r3, r1
 80124e2:	3314      	adds	r3, #20
 80124e4:	781b      	ldrb	r3, [r3, #0]
 80124e6:	2b01      	cmp	r3, #1
 80124e8:	d011      	beq.n	801250e <etharp_query+0xfe>
 80124ea:	7c7a      	ldrb	r2, [r7, #17]
 80124ec:	4962      	ldr	r1, [pc, #392]	; (8012678 <etharp_query+0x268>)
 80124ee:	4613      	mov	r3, r2
 80124f0:	005b      	lsls	r3, r3, #1
 80124f2:	4413      	add	r3, r2
 80124f4:	00db      	lsls	r3, r3, #3
 80124f6:	440b      	add	r3, r1
 80124f8:	3314      	adds	r3, #20
 80124fa:	781b      	ldrb	r3, [r3, #0]
 80124fc:	2b01      	cmp	r3, #1
 80124fe:	d806      	bhi.n	801250e <etharp_query+0xfe>
 8012500:	4b5a      	ldr	r3, [pc, #360]	; (801266c <etharp_query+0x25c>)
 8012502:	f240 32cd 	movw	r2, #973	; 0x3cd
 8012506:	495d      	ldr	r1, [pc, #372]	; (801267c <etharp_query+0x26c>)
 8012508:	485a      	ldr	r0, [pc, #360]	; (8012674 <etharp_query+0x264>)
 801250a:	f005 fe93 	bl	8018234 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801250e:	6a3b      	ldr	r3, [r7, #32]
 8012510:	2b00      	cmp	r3, #0
 8012512:	d102      	bne.n	801251a <etharp_query+0x10a>
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	2b00      	cmp	r3, #0
 8012518:	d10c      	bne.n	8012534 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801251a:	68b9      	ldr	r1, [r7, #8]
 801251c:	68f8      	ldr	r0, [r7, #12]
 801251e:	f000 f963 	bl	80127e8 <etharp_request>
 8012522:	4603      	mov	r3, r0
 8012524:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	2b00      	cmp	r3, #0
 801252c:	d102      	bne.n	8012534 <etharp_query+0x124>
      return result;
 801252e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012532:	e096      	b.n	8012662 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	2b00      	cmp	r3, #0
 8012538:	d106      	bne.n	8012548 <etharp_query+0x138>
 801253a:	4b4c      	ldr	r3, [pc, #304]	; (801266c <etharp_query+0x25c>)
 801253c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8012540:	494f      	ldr	r1, [pc, #316]	; (8012680 <etharp_query+0x270>)
 8012542:	484c      	ldr	r0, [pc, #304]	; (8012674 <etharp_query+0x264>)
 8012544:	f005 fe76 	bl	8018234 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8012548:	7c7a      	ldrb	r2, [r7, #17]
 801254a:	494b      	ldr	r1, [pc, #300]	; (8012678 <etharp_query+0x268>)
 801254c:	4613      	mov	r3, r2
 801254e:	005b      	lsls	r3, r3, #1
 8012550:	4413      	add	r3, r2
 8012552:	00db      	lsls	r3, r3, #3
 8012554:	440b      	add	r3, r1
 8012556:	3314      	adds	r3, #20
 8012558:	781b      	ldrb	r3, [r3, #0]
 801255a:	2b01      	cmp	r3, #1
 801255c:	d917      	bls.n	801258e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801255e:	4a49      	ldr	r2, [pc, #292]	; (8012684 <etharp_query+0x274>)
 8012560:	7c7b      	ldrb	r3, [r7, #17]
 8012562:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8012564:	7c7a      	ldrb	r2, [r7, #17]
 8012566:	4613      	mov	r3, r2
 8012568:	005b      	lsls	r3, r3, #1
 801256a:	4413      	add	r3, r2
 801256c:	00db      	lsls	r3, r3, #3
 801256e:	3308      	adds	r3, #8
 8012570:	4a41      	ldr	r2, [pc, #260]	; (8012678 <etharp_query+0x268>)
 8012572:	4413      	add	r3, r2
 8012574:	3304      	adds	r3, #4
 8012576:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801257a:	9200      	str	r2, [sp, #0]
 801257c:	697a      	ldr	r2, [r7, #20]
 801257e:	6879      	ldr	r1, [r7, #4]
 8012580:	68f8      	ldr	r0, [r7, #12]
 8012582:	f001 fc6f 	bl	8013e64 <ethernet_output>
 8012586:	4603      	mov	r3, r0
 8012588:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801258c:	e067      	b.n	801265e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801258e:	7c7a      	ldrb	r2, [r7, #17]
 8012590:	4939      	ldr	r1, [pc, #228]	; (8012678 <etharp_query+0x268>)
 8012592:	4613      	mov	r3, r2
 8012594:	005b      	lsls	r3, r3, #1
 8012596:	4413      	add	r3, r2
 8012598:	00db      	lsls	r3, r3, #3
 801259a:	440b      	add	r3, r1
 801259c:	3314      	adds	r3, #20
 801259e:	781b      	ldrb	r3, [r3, #0]
 80125a0:	2b01      	cmp	r3, #1
 80125a2:	d15c      	bne.n	801265e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80125a4:	2300      	movs	r3, #0
 80125a6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	61fb      	str	r3, [r7, #28]
    while (p) {
 80125ac:	e01c      	b.n	80125e8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80125ae:	69fb      	ldr	r3, [r7, #28]
 80125b0:	895a      	ldrh	r2, [r3, #10]
 80125b2:	69fb      	ldr	r3, [r7, #28]
 80125b4:	891b      	ldrh	r3, [r3, #8]
 80125b6:	429a      	cmp	r2, r3
 80125b8:	d10a      	bne.n	80125d0 <etharp_query+0x1c0>
 80125ba:	69fb      	ldr	r3, [r7, #28]
 80125bc:	681b      	ldr	r3, [r3, #0]
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d006      	beq.n	80125d0 <etharp_query+0x1c0>
 80125c2:	4b2a      	ldr	r3, [pc, #168]	; (801266c <etharp_query+0x25c>)
 80125c4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80125c8:	492f      	ldr	r1, [pc, #188]	; (8012688 <etharp_query+0x278>)
 80125ca:	482a      	ldr	r0, [pc, #168]	; (8012674 <etharp_query+0x264>)
 80125cc:	f005 fe32 	bl	8018234 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80125d0:	69fb      	ldr	r3, [r7, #28]
 80125d2:	7b1b      	ldrb	r3, [r3, #12]
 80125d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d002      	beq.n	80125e2 <etharp_query+0x1d2>
        copy_needed = 1;
 80125dc:	2301      	movs	r3, #1
 80125de:	61bb      	str	r3, [r7, #24]
        break;
 80125e0:	e005      	b.n	80125ee <etharp_query+0x1de>
      }
      p = p->next;
 80125e2:	69fb      	ldr	r3, [r7, #28]
 80125e4:	681b      	ldr	r3, [r3, #0]
 80125e6:	61fb      	str	r3, [r7, #28]
    while (p) {
 80125e8:	69fb      	ldr	r3, [r7, #28]
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	d1df      	bne.n	80125ae <etharp_query+0x19e>
    }
    if (copy_needed) {
 80125ee:	69bb      	ldr	r3, [r7, #24]
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d007      	beq.n	8012604 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80125f4:	687a      	ldr	r2, [r7, #4]
 80125f6:	f44f 7120 	mov.w	r1, #640	; 0x280
 80125fa:	200e      	movs	r0, #14
 80125fc:	f7f9 fcfc 	bl	800bff8 <pbuf_clone>
 8012600:	61f8      	str	r0, [r7, #28]
 8012602:	e004      	b.n	801260e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8012608:	69f8      	ldr	r0, [r7, #28]
 801260a:	f7f9 fb33 	bl	800bc74 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801260e:	69fb      	ldr	r3, [r7, #28]
 8012610:	2b00      	cmp	r3, #0
 8012612:	d021      	beq.n	8012658 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8012614:	7c7a      	ldrb	r2, [r7, #17]
 8012616:	4918      	ldr	r1, [pc, #96]	; (8012678 <etharp_query+0x268>)
 8012618:	4613      	mov	r3, r2
 801261a:	005b      	lsls	r3, r3, #1
 801261c:	4413      	add	r3, r2
 801261e:	00db      	lsls	r3, r3, #3
 8012620:	440b      	add	r3, r1
 8012622:	681b      	ldr	r3, [r3, #0]
 8012624:	2b00      	cmp	r3, #0
 8012626:	d00a      	beq.n	801263e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8012628:	7c7a      	ldrb	r2, [r7, #17]
 801262a:	4913      	ldr	r1, [pc, #76]	; (8012678 <etharp_query+0x268>)
 801262c:	4613      	mov	r3, r2
 801262e:	005b      	lsls	r3, r3, #1
 8012630:	4413      	add	r3, r2
 8012632:	00db      	lsls	r3, r3, #3
 8012634:	440b      	add	r3, r1
 8012636:	681b      	ldr	r3, [r3, #0]
 8012638:	4618      	mov	r0, r3
 801263a:	f7f9 fa75 	bl	800bb28 <pbuf_free>
      }
      arp_table[i].q = p;
 801263e:	7c7a      	ldrb	r2, [r7, #17]
 8012640:	490d      	ldr	r1, [pc, #52]	; (8012678 <etharp_query+0x268>)
 8012642:	4613      	mov	r3, r2
 8012644:	005b      	lsls	r3, r3, #1
 8012646:	4413      	add	r3, r2
 8012648:	00db      	lsls	r3, r3, #3
 801264a:	440b      	add	r3, r1
 801264c:	69fa      	ldr	r2, [r7, #28]
 801264e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8012650:	2300      	movs	r3, #0
 8012652:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012656:	e002      	b.n	801265e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8012658:	23ff      	movs	r3, #255	; 0xff
 801265a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801265e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8012662:	4618      	mov	r0, r3
 8012664:	3728      	adds	r7, #40	; 0x28
 8012666:	46bd      	mov	sp, r7
 8012668:	bd80      	pop	{r7, pc}
 801266a:	bf00      	nop
 801266c:	0801aec0 	.word	0x0801aec0
 8012670:	0801b06c 	.word	0x0801b06c
 8012674:	0801af38 	.word	0x0801af38
 8012678:	20004c08 	.word	0x20004c08
 801267c:	0801b07c 	.word	0x0801b07c
 8012680:	0801b060 	.word	0x0801b060
 8012684:	20004cf8 	.word	0x20004cf8
 8012688:	0801b0a4 	.word	0x0801b0a4

0801268c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801268c:	b580      	push	{r7, lr}
 801268e:	b08a      	sub	sp, #40	; 0x28
 8012690:	af02      	add	r7, sp, #8
 8012692:	60f8      	str	r0, [r7, #12]
 8012694:	60b9      	str	r1, [r7, #8]
 8012696:	607a      	str	r2, [r7, #4]
 8012698:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801269a:	2300      	movs	r3, #0
 801269c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801269e:	68fb      	ldr	r3, [r7, #12]
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	d106      	bne.n	80126b2 <etharp_raw+0x26>
 80126a4:	4b3a      	ldr	r3, [pc, #232]	; (8012790 <etharp_raw+0x104>)
 80126a6:	f240 4257 	movw	r2, #1111	; 0x457
 80126aa:	493a      	ldr	r1, [pc, #232]	; (8012794 <etharp_raw+0x108>)
 80126ac:	483a      	ldr	r0, [pc, #232]	; (8012798 <etharp_raw+0x10c>)
 80126ae:	f005 fdc1 	bl	8018234 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80126b2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80126b6:	211c      	movs	r1, #28
 80126b8:	200e      	movs	r0, #14
 80126ba:	f7f8 ff51 	bl	800b560 <pbuf_alloc>
 80126be:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80126c0:	69bb      	ldr	r3, [r7, #24]
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d102      	bne.n	80126cc <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80126c6:	f04f 33ff 	mov.w	r3, #4294967295
 80126ca:	e05d      	b.n	8012788 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80126cc:	69bb      	ldr	r3, [r7, #24]
 80126ce:	895b      	ldrh	r3, [r3, #10]
 80126d0:	2b1b      	cmp	r3, #27
 80126d2:	d806      	bhi.n	80126e2 <etharp_raw+0x56>
 80126d4:	4b2e      	ldr	r3, [pc, #184]	; (8012790 <etharp_raw+0x104>)
 80126d6:	f240 4262 	movw	r2, #1122	; 0x462
 80126da:	4930      	ldr	r1, [pc, #192]	; (801279c <etharp_raw+0x110>)
 80126dc:	482e      	ldr	r0, [pc, #184]	; (8012798 <etharp_raw+0x10c>)
 80126de:	f005 fda9 	bl	8018234 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80126e2:	69bb      	ldr	r3, [r7, #24]
 80126e4:	685b      	ldr	r3, [r3, #4]
 80126e6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80126e8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80126ea:	4618      	mov	r0, r3
 80126ec:	f7f7 fe70 	bl	800a3d0 <lwip_htons>
 80126f0:	4603      	mov	r3, r0
 80126f2:	461a      	mov	r2, r3
 80126f4:	697b      	ldr	r3, [r7, #20]
 80126f6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80126f8:	68fb      	ldr	r3, [r7, #12]
 80126fa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80126fe:	2b06      	cmp	r3, #6
 8012700:	d006      	beq.n	8012710 <etharp_raw+0x84>
 8012702:	4b23      	ldr	r3, [pc, #140]	; (8012790 <etharp_raw+0x104>)
 8012704:	f240 4269 	movw	r2, #1129	; 0x469
 8012708:	4925      	ldr	r1, [pc, #148]	; (80127a0 <etharp_raw+0x114>)
 801270a:	4823      	ldr	r0, [pc, #140]	; (8012798 <etharp_raw+0x10c>)
 801270c:	f005 fd92 	bl	8018234 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8012710:	697b      	ldr	r3, [r7, #20]
 8012712:	3308      	adds	r3, #8
 8012714:	2206      	movs	r2, #6
 8012716:	6839      	ldr	r1, [r7, #0]
 8012718:	4618      	mov	r0, r3
 801271a:	f005 fa2c 	bl	8017b76 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801271e:	697b      	ldr	r3, [r7, #20]
 8012720:	3312      	adds	r3, #18
 8012722:	2206      	movs	r2, #6
 8012724:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012726:	4618      	mov	r0, r3
 8012728:	f005 fa25 	bl	8017b76 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801272c:	697b      	ldr	r3, [r7, #20]
 801272e:	330e      	adds	r3, #14
 8012730:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012732:	6812      	ldr	r2, [r2, #0]
 8012734:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8012736:	697b      	ldr	r3, [r7, #20]
 8012738:	3318      	adds	r3, #24
 801273a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801273c:	6812      	ldr	r2, [r2, #0]
 801273e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8012740:	697b      	ldr	r3, [r7, #20]
 8012742:	2200      	movs	r2, #0
 8012744:	701a      	strb	r2, [r3, #0]
 8012746:	2200      	movs	r2, #0
 8012748:	f042 0201 	orr.w	r2, r2, #1
 801274c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801274e:	697b      	ldr	r3, [r7, #20]
 8012750:	2200      	movs	r2, #0
 8012752:	f042 0208 	orr.w	r2, r2, #8
 8012756:	709a      	strb	r2, [r3, #2]
 8012758:	2200      	movs	r2, #0
 801275a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801275c:	697b      	ldr	r3, [r7, #20]
 801275e:	2206      	movs	r2, #6
 8012760:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8012762:	697b      	ldr	r3, [r7, #20]
 8012764:	2204      	movs	r2, #4
 8012766:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8012768:	f640 0306 	movw	r3, #2054	; 0x806
 801276c:	9300      	str	r3, [sp, #0]
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	68ba      	ldr	r2, [r7, #8]
 8012772:	69b9      	ldr	r1, [r7, #24]
 8012774:	68f8      	ldr	r0, [r7, #12]
 8012776:	f001 fb75 	bl	8013e64 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801277a:	69b8      	ldr	r0, [r7, #24]
 801277c:	f7f9 f9d4 	bl	800bb28 <pbuf_free>
  p = NULL;
 8012780:	2300      	movs	r3, #0
 8012782:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8012784:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012788:	4618      	mov	r0, r3
 801278a:	3720      	adds	r7, #32
 801278c:	46bd      	mov	sp, r7
 801278e:	bd80      	pop	{r7, pc}
 8012790:	0801aec0 	.word	0x0801aec0
 8012794:	0801b010 	.word	0x0801b010
 8012798:	0801af38 	.word	0x0801af38
 801279c:	0801b0c0 	.word	0x0801b0c0
 80127a0:	0801b0f4 	.word	0x0801b0f4

080127a4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80127a4:	b580      	push	{r7, lr}
 80127a6:	b088      	sub	sp, #32
 80127a8:	af04      	add	r7, sp, #16
 80127aa:	60f8      	str	r0, [r7, #12]
 80127ac:	60b9      	str	r1, [r7, #8]
 80127ae:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80127b0:	68fb      	ldr	r3, [r7, #12]
 80127b2:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80127b6:	68fb      	ldr	r3, [r7, #12]
 80127b8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80127bc:	68fb      	ldr	r3, [r7, #12]
 80127be:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80127c0:	2201      	movs	r2, #1
 80127c2:	9203      	str	r2, [sp, #12]
 80127c4:	68ba      	ldr	r2, [r7, #8]
 80127c6:	9202      	str	r2, [sp, #8]
 80127c8:	4a06      	ldr	r2, [pc, #24]	; (80127e4 <etharp_request_dst+0x40>)
 80127ca:	9201      	str	r2, [sp, #4]
 80127cc:	9300      	str	r3, [sp, #0]
 80127ce:	4603      	mov	r3, r0
 80127d0:	687a      	ldr	r2, [r7, #4]
 80127d2:	68f8      	ldr	r0, [r7, #12]
 80127d4:	f7ff ff5a 	bl	801268c <etharp_raw>
 80127d8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80127da:	4618      	mov	r0, r3
 80127dc:	3710      	adds	r7, #16
 80127de:	46bd      	mov	sp, r7
 80127e0:	bd80      	pop	{r7, pc}
 80127e2:	bf00      	nop
 80127e4:	0801b844 	.word	0x0801b844

080127e8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80127e8:	b580      	push	{r7, lr}
 80127ea:	b082      	sub	sp, #8
 80127ec:	af00      	add	r7, sp, #0
 80127ee:	6078      	str	r0, [r7, #4]
 80127f0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80127f2:	4a05      	ldr	r2, [pc, #20]	; (8012808 <etharp_request+0x20>)
 80127f4:	6839      	ldr	r1, [r7, #0]
 80127f6:	6878      	ldr	r0, [r7, #4]
 80127f8:	f7ff ffd4 	bl	80127a4 <etharp_request_dst>
 80127fc:	4603      	mov	r3, r0
}
 80127fe:	4618      	mov	r0, r3
 8012800:	3708      	adds	r7, #8
 8012802:	46bd      	mov	sp, r7
 8012804:	bd80      	pop	{r7, pc}
 8012806:	bf00      	nop
 8012808:	0801b83c 	.word	0x0801b83c

0801280c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801280c:	b580      	push	{r7, lr}
 801280e:	b08e      	sub	sp, #56	; 0x38
 8012810:	af04      	add	r7, sp, #16
 8012812:	6078      	str	r0, [r7, #4]
 8012814:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8012816:	4b79      	ldr	r3, [pc, #484]	; (80129fc <icmp_input+0x1f0>)
 8012818:	689b      	ldr	r3, [r3, #8]
 801281a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801281c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801281e:	781b      	ldrb	r3, [r3, #0]
 8012820:	f003 030f 	and.w	r3, r3, #15
 8012824:	b2db      	uxtb	r3, r3
 8012826:	009b      	lsls	r3, r3, #2
 8012828:	b2db      	uxtb	r3, r3
 801282a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801282c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801282e:	2b13      	cmp	r3, #19
 8012830:	f240 80cd 	bls.w	80129ce <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	895b      	ldrh	r3, [r3, #10]
 8012838:	2b03      	cmp	r3, #3
 801283a:	f240 80ca 	bls.w	80129d2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	685b      	ldr	r3, [r3, #4]
 8012842:	781b      	ldrb	r3, [r3, #0]
 8012844:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8012848:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801284c:	2b00      	cmp	r3, #0
 801284e:	f000 80b7 	beq.w	80129c0 <icmp_input+0x1b4>
 8012852:	2b08      	cmp	r3, #8
 8012854:	f040 80b7 	bne.w	80129c6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8012858:	4b69      	ldr	r3, [pc, #420]	; (8012a00 <icmp_input+0x1f4>)
 801285a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801285c:	4b67      	ldr	r3, [pc, #412]	; (80129fc <icmp_input+0x1f0>)
 801285e:	695b      	ldr	r3, [r3, #20]
 8012860:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012864:	2be0      	cmp	r3, #224	; 0xe0
 8012866:	f000 80bb 	beq.w	80129e0 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801286a:	4b64      	ldr	r3, [pc, #400]	; (80129fc <icmp_input+0x1f0>)
 801286c:	695b      	ldr	r3, [r3, #20]
 801286e:	4a63      	ldr	r2, [pc, #396]	; (80129fc <icmp_input+0x1f0>)
 8012870:	6812      	ldr	r2, [r2, #0]
 8012872:	4611      	mov	r1, r2
 8012874:	4618      	mov	r0, r3
 8012876:	f000 fbed 	bl	8013054 <ip4_addr_isbroadcast_u32>
 801287a:	4603      	mov	r3, r0
 801287c:	2b00      	cmp	r3, #0
 801287e:	f040 80b1 	bne.w	80129e4 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	891b      	ldrh	r3, [r3, #8]
 8012886:	2b07      	cmp	r3, #7
 8012888:	f240 80a5 	bls.w	80129d6 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801288c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801288e:	330e      	adds	r3, #14
 8012890:	4619      	mov	r1, r3
 8012892:	6878      	ldr	r0, [r7, #4]
 8012894:	f7f9 f8b2 	bl	800b9fc <pbuf_add_header>
 8012898:	4603      	mov	r3, r0
 801289a:	2b00      	cmp	r3, #0
 801289c:	d04b      	beq.n	8012936 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	891a      	ldrh	r2, [r3, #8]
 80128a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80128a4:	4413      	add	r3, r2
 80128a6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	891b      	ldrh	r3, [r3, #8]
 80128ac:	8b7a      	ldrh	r2, [r7, #26]
 80128ae:	429a      	cmp	r2, r3
 80128b0:	f0c0 809a 	bcc.w	80129e8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80128b4:	8b7b      	ldrh	r3, [r7, #26]
 80128b6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80128ba:	4619      	mov	r1, r3
 80128bc:	200e      	movs	r0, #14
 80128be:	f7f8 fe4f 	bl	800b560 <pbuf_alloc>
 80128c2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80128c4:	697b      	ldr	r3, [r7, #20]
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	f000 8090 	beq.w	80129ec <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80128cc:	697b      	ldr	r3, [r7, #20]
 80128ce:	895b      	ldrh	r3, [r3, #10]
 80128d0:	461a      	mov	r2, r3
 80128d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80128d4:	3308      	adds	r3, #8
 80128d6:	429a      	cmp	r2, r3
 80128d8:	d203      	bcs.n	80128e2 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80128da:	6978      	ldr	r0, [r7, #20]
 80128dc:	f7f9 f924 	bl	800bb28 <pbuf_free>
          goto icmperr;
 80128e0:	e085      	b.n	80129ee <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80128e2:	697b      	ldr	r3, [r7, #20]
 80128e4:	685b      	ldr	r3, [r3, #4]
 80128e6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80128e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80128ea:	4618      	mov	r0, r3
 80128ec:	f005 f943 	bl	8017b76 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80128f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80128f2:	4619      	mov	r1, r3
 80128f4:	6978      	ldr	r0, [r7, #20]
 80128f6:	f7f9 f891 	bl	800ba1c <pbuf_remove_header>
 80128fa:	4603      	mov	r3, r0
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	d009      	beq.n	8012914 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8012900:	4b40      	ldr	r3, [pc, #256]	; (8012a04 <icmp_input+0x1f8>)
 8012902:	22b6      	movs	r2, #182	; 0xb6
 8012904:	4940      	ldr	r1, [pc, #256]	; (8012a08 <icmp_input+0x1fc>)
 8012906:	4841      	ldr	r0, [pc, #260]	; (8012a0c <icmp_input+0x200>)
 8012908:	f005 fc94 	bl	8018234 <iprintf>
          pbuf_free(r);
 801290c:	6978      	ldr	r0, [r7, #20]
 801290e:	f7f9 f90b 	bl	800bb28 <pbuf_free>
          goto icmperr;
 8012912:	e06c      	b.n	80129ee <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8012914:	6879      	ldr	r1, [r7, #4]
 8012916:	6978      	ldr	r0, [r7, #20]
 8012918:	f7f9 fa2a 	bl	800bd70 <pbuf_copy>
 801291c:	4603      	mov	r3, r0
 801291e:	2b00      	cmp	r3, #0
 8012920:	d003      	beq.n	801292a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8012922:	6978      	ldr	r0, [r7, #20]
 8012924:	f7f9 f900 	bl	800bb28 <pbuf_free>
          goto icmperr;
 8012928:	e061      	b.n	80129ee <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801292a:	6878      	ldr	r0, [r7, #4]
 801292c:	f7f9 f8fc 	bl	800bb28 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8012930:	697b      	ldr	r3, [r7, #20]
 8012932:	607b      	str	r3, [r7, #4]
 8012934:	e00f      	b.n	8012956 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8012936:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012938:	330e      	adds	r3, #14
 801293a:	4619      	mov	r1, r3
 801293c:	6878      	ldr	r0, [r7, #4]
 801293e:	f7f9 f86d 	bl	800ba1c <pbuf_remove_header>
 8012942:	4603      	mov	r3, r0
 8012944:	2b00      	cmp	r3, #0
 8012946:	d006      	beq.n	8012956 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8012948:	4b2e      	ldr	r3, [pc, #184]	; (8012a04 <icmp_input+0x1f8>)
 801294a:	22c7      	movs	r2, #199	; 0xc7
 801294c:	4930      	ldr	r1, [pc, #192]	; (8012a10 <icmp_input+0x204>)
 801294e:	482f      	ldr	r0, [pc, #188]	; (8012a0c <icmp_input+0x200>)
 8012950:	f005 fc70 	bl	8018234 <iprintf>
          goto icmperr;
 8012954:	e04b      	b.n	80129ee <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	685b      	ldr	r3, [r3, #4]
 801295a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801295c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801295e:	4619      	mov	r1, r3
 8012960:	6878      	ldr	r0, [r7, #4]
 8012962:	f7f9 f84b 	bl	800b9fc <pbuf_add_header>
 8012966:	4603      	mov	r3, r0
 8012968:	2b00      	cmp	r3, #0
 801296a:	d12b      	bne.n	80129c4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	685b      	ldr	r3, [r3, #4]
 8012970:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8012972:	69fb      	ldr	r3, [r7, #28]
 8012974:	681a      	ldr	r2, [r3, #0]
 8012976:	68fb      	ldr	r3, [r7, #12]
 8012978:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801297a:	4b20      	ldr	r3, [pc, #128]	; (80129fc <icmp_input+0x1f0>)
 801297c:	691a      	ldr	r2, [r3, #16]
 801297e:	68fb      	ldr	r3, [r7, #12]
 8012980:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8012982:	693b      	ldr	r3, [r7, #16]
 8012984:	2200      	movs	r2, #0
 8012986:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8012988:	693b      	ldr	r3, [r7, #16]
 801298a:	2200      	movs	r2, #0
 801298c:	709a      	strb	r2, [r3, #2]
 801298e:	2200      	movs	r2, #0
 8012990:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8012992:	68fb      	ldr	r3, [r7, #12]
 8012994:	22ff      	movs	r2, #255	; 0xff
 8012996:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8012998:	68fb      	ldr	r3, [r7, #12]
 801299a:	2200      	movs	r2, #0
 801299c:	729a      	strb	r2, [r3, #10]
 801299e:	2200      	movs	r2, #0
 80129a0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80129a2:	683b      	ldr	r3, [r7, #0]
 80129a4:	9302      	str	r3, [sp, #8]
 80129a6:	2301      	movs	r3, #1
 80129a8:	9301      	str	r3, [sp, #4]
 80129aa:	2300      	movs	r3, #0
 80129ac:	9300      	str	r3, [sp, #0]
 80129ae:	23ff      	movs	r3, #255	; 0xff
 80129b0:	2200      	movs	r2, #0
 80129b2:	69f9      	ldr	r1, [r7, #28]
 80129b4:	6878      	ldr	r0, [r7, #4]
 80129b6:	f000 fa75 	bl	8012ea4 <ip4_output_if>
 80129ba:	4603      	mov	r3, r0
 80129bc:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80129be:	e001      	b.n	80129c4 <icmp_input+0x1b8>
      break;
 80129c0:	bf00      	nop
 80129c2:	e000      	b.n	80129c6 <icmp_input+0x1ba>
      break;
 80129c4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80129c6:	6878      	ldr	r0, [r7, #4]
 80129c8:	f7f9 f8ae 	bl	800bb28 <pbuf_free>
  return;
 80129cc:	e013      	b.n	80129f6 <icmp_input+0x1ea>
    goto lenerr;
 80129ce:	bf00      	nop
 80129d0:	e002      	b.n	80129d8 <icmp_input+0x1cc>
    goto lenerr;
 80129d2:	bf00      	nop
 80129d4:	e000      	b.n	80129d8 <icmp_input+0x1cc>
        goto lenerr;
 80129d6:	bf00      	nop
lenerr:
  pbuf_free(p);
 80129d8:	6878      	ldr	r0, [r7, #4]
 80129da:	f7f9 f8a5 	bl	800bb28 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80129de:	e00a      	b.n	80129f6 <icmp_input+0x1ea>
        goto icmperr;
 80129e0:	bf00      	nop
 80129e2:	e004      	b.n	80129ee <icmp_input+0x1e2>
        goto icmperr;
 80129e4:	bf00      	nop
 80129e6:	e002      	b.n	80129ee <icmp_input+0x1e2>
          goto icmperr;
 80129e8:	bf00      	nop
 80129ea:	e000      	b.n	80129ee <icmp_input+0x1e2>
          goto icmperr;
 80129ec:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80129ee:	6878      	ldr	r0, [r7, #4]
 80129f0:	f7f9 f89a 	bl	800bb28 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80129f4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80129f6:	3728      	adds	r7, #40	; 0x28
 80129f8:	46bd      	mov	sp, r7
 80129fa:	bd80      	pop	{r7, pc}
 80129fc:	20008360 	.word	0x20008360
 8012a00:	20008374 	.word	0x20008374
 8012a04:	0801b138 	.word	0x0801b138
 8012a08:	0801b170 	.word	0x0801b170
 8012a0c:	0801b1a8 	.word	0x0801b1a8
 8012a10:	0801b1d0 	.word	0x0801b1d0

08012a14 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8012a14:	b580      	push	{r7, lr}
 8012a16:	b082      	sub	sp, #8
 8012a18:	af00      	add	r7, sp, #0
 8012a1a:	6078      	str	r0, [r7, #4]
 8012a1c:	460b      	mov	r3, r1
 8012a1e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8012a20:	78fb      	ldrb	r3, [r7, #3]
 8012a22:	461a      	mov	r2, r3
 8012a24:	2103      	movs	r1, #3
 8012a26:	6878      	ldr	r0, [r7, #4]
 8012a28:	f000 f814 	bl	8012a54 <icmp_send_response>
}
 8012a2c:	bf00      	nop
 8012a2e:	3708      	adds	r7, #8
 8012a30:	46bd      	mov	sp, r7
 8012a32:	bd80      	pop	{r7, pc}

08012a34 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8012a34:	b580      	push	{r7, lr}
 8012a36:	b082      	sub	sp, #8
 8012a38:	af00      	add	r7, sp, #0
 8012a3a:	6078      	str	r0, [r7, #4]
 8012a3c:	460b      	mov	r3, r1
 8012a3e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8012a40:	78fb      	ldrb	r3, [r7, #3]
 8012a42:	461a      	mov	r2, r3
 8012a44:	210b      	movs	r1, #11
 8012a46:	6878      	ldr	r0, [r7, #4]
 8012a48:	f000 f804 	bl	8012a54 <icmp_send_response>
}
 8012a4c:	bf00      	nop
 8012a4e:	3708      	adds	r7, #8
 8012a50:	46bd      	mov	sp, r7
 8012a52:	bd80      	pop	{r7, pc}

08012a54 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8012a54:	b580      	push	{r7, lr}
 8012a56:	b08c      	sub	sp, #48	; 0x30
 8012a58:	af04      	add	r7, sp, #16
 8012a5a:	6078      	str	r0, [r7, #4]
 8012a5c:	460b      	mov	r3, r1
 8012a5e:	70fb      	strb	r3, [r7, #3]
 8012a60:	4613      	mov	r3, r2
 8012a62:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8012a64:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012a68:	2124      	movs	r1, #36	; 0x24
 8012a6a:	2022      	movs	r0, #34	; 0x22
 8012a6c:	f7f8 fd78 	bl	800b560 <pbuf_alloc>
 8012a70:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8012a72:	69fb      	ldr	r3, [r7, #28]
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	d04c      	beq.n	8012b12 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8012a78:	69fb      	ldr	r3, [r7, #28]
 8012a7a:	895b      	ldrh	r3, [r3, #10]
 8012a7c:	2b23      	cmp	r3, #35	; 0x23
 8012a7e:	d806      	bhi.n	8012a8e <icmp_send_response+0x3a>
 8012a80:	4b26      	ldr	r3, [pc, #152]	; (8012b1c <icmp_send_response+0xc8>)
 8012a82:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8012a86:	4926      	ldr	r1, [pc, #152]	; (8012b20 <icmp_send_response+0xcc>)
 8012a88:	4826      	ldr	r0, [pc, #152]	; (8012b24 <icmp_send_response+0xd0>)
 8012a8a:	f005 fbd3 	bl	8018234 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	685b      	ldr	r3, [r3, #4]
 8012a92:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8012a94:	69fb      	ldr	r3, [r7, #28]
 8012a96:	685b      	ldr	r3, [r3, #4]
 8012a98:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8012a9a:	697b      	ldr	r3, [r7, #20]
 8012a9c:	78fa      	ldrb	r2, [r7, #3]
 8012a9e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8012aa0:	697b      	ldr	r3, [r7, #20]
 8012aa2:	78ba      	ldrb	r2, [r7, #2]
 8012aa4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8012aa6:	697b      	ldr	r3, [r7, #20]
 8012aa8:	2200      	movs	r2, #0
 8012aaa:	711a      	strb	r2, [r3, #4]
 8012aac:	2200      	movs	r2, #0
 8012aae:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8012ab0:	697b      	ldr	r3, [r7, #20]
 8012ab2:	2200      	movs	r2, #0
 8012ab4:	719a      	strb	r2, [r3, #6]
 8012ab6:	2200      	movs	r2, #0
 8012ab8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8012aba:	69fb      	ldr	r3, [r7, #28]
 8012abc:	685b      	ldr	r3, [r3, #4]
 8012abe:	f103 0008 	add.w	r0, r3, #8
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	685b      	ldr	r3, [r3, #4]
 8012ac6:	221c      	movs	r2, #28
 8012ac8:	4619      	mov	r1, r3
 8012aca:	f005 f854 	bl	8017b76 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8012ace:	69bb      	ldr	r3, [r7, #24]
 8012ad0:	68db      	ldr	r3, [r3, #12]
 8012ad2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8012ad4:	f107 030c 	add.w	r3, r7, #12
 8012ad8:	4618      	mov	r0, r3
 8012ada:	f000 f825 	bl	8012b28 <ip4_route>
 8012ade:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8012ae0:	693b      	ldr	r3, [r7, #16]
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	d011      	beq.n	8012b0a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8012ae6:	697b      	ldr	r3, [r7, #20]
 8012ae8:	2200      	movs	r2, #0
 8012aea:	709a      	strb	r2, [r3, #2]
 8012aec:	2200      	movs	r2, #0
 8012aee:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8012af0:	f107 020c 	add.w	r2, r7, #12
 8012af4:	693b      	ldr	r3, [r7, #16]
 8012af6:	9302      	str	r3, [sp, #8]
 8012af8:	2301      	movs	r3, #1
 8012afa:	9301      	str	r3, [sp, #4]
 8012afc:	2300      	movs	r3, #0
 8012afe:	9300      	str	r3, [sp, #0]
 8012b00:	23ff      	movs	r3, #255	; 0xff
 8012b02:	2100      	movs	r1, #0
 8012b04:	69f8      	ldr	r0, [r7, #28]
 8012b06:	f000 f9cd 	bl	8012ea4 <ip4_output_if>
  }
  pbuf_free(q);
 8012b0a:	69f8      	ldr	r0, [r7, #28]
 8012b0c:	f7f9 f80c 	bl	800bb28 <pbuf_free>
 8012b10:	e000      	b.n	8012b14 <icmp_send_response+0xc0>
    return;
 8012b12:	bf00      	nop
}
 8012b14:	3720      	adds	r7, #32
 8012b16:	46bd      	mov	sp, r7
 8012b18:	bd80      	pop	{r7, pc}
 8012b1a:	bf00      	nop
 8012b1c:	0801b138 	.word	0x0801b138
 8012b20:	0801b204 	.word	0x0801b204
 8012b24:	0801b1a8 	.word	0x0801b1a8

08012b28 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8012b28:	b480      	push	{r7}
 8012b2a:	b085      	sub	sp, #20
 8012b2c:	af00      	add	r7, sp, #0
 8012b2e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8012b30:	4b33      	ldr	r3, [pc, #204]	; (8012c00 <ip4_route+0xd8>)
 8012b32:	681b      	ldr	r3, [r3, #0]
 8012b34:	60fb      	str	r3, [r7, #12]
 8012b36:	e036      	b.n	8012ba6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012b38:	68fb      	ldr	r3, [r7, #12]
 8012b3a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012b3e:	f003 0301 	and.w	r3, r3, #1
 8012b42:	b2db      	uxtb	r3, r3
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d02b      	beq.n	8012ba0 <ip4_route+0x78>
 8012b48:	68fb      	ldr	r3, [r7, #12]
 8012b4a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012b4e:	089b      	lsrs	r3, r3, #2
 8012b50:	f003 0301 	and.w	r3, r3, #1
 8012b54:	b2db      	uxtb	r3, r3
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d022      	beq.n	8012ba0 <ip4_route+0x78>
 8012b5a:	68fb      	ldr	r3, [r7, #12]
 8012b5c:	3304      	adds	r3, #4
 8012b5e:	681b      	ldr	r3, [r3, #0]
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d01d      	beq.n	8012ba0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	681a      	ldr	r2, [r3, #0]
 8012b68:	68fb      	ldr	r3, [r7, #12]
 8012b6a:	3304      	adds	r3, #4
 8012b6c:	681b      	ldr	r3, [r3, #0]
 8012b6e:	405a      	eors	r2, r3
 8012b70:	68fb      	ldr	r3, [r7, #12]
 8012b72:	3308      	adds	r3, #8
 8012b74:	681b      	ldr	r3, [r3, #0]
 8012b76:	4013      	ands	r3, r2
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d101      	bne.n	8012b80 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8012b7c:	68fb      	ldr	r3, [r7, #12]
 8012b7e:	e038      	b.n	8012bf2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8012b80:	68fb      	ldr	r3, [r7, #12]
 8012b82:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012b86:	f003 0302 	and.w	r3, r3, #2
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	d108      	bne.n	8012ba0 <ip4_route+0x78>
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	681a      	ldr	r2, [r3, #0]
 8012b92:	68fb      	ldr	r3, [r7, #12]
 8012b94:	330c      	adds	r3, #12
 8012b96:	681b      	ldr	r3, [r3, #0]
 8012b98:	429a      	cmp	r2, r3
 8012b9a:	d101      	bne.n	8012ba0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8012b9c:	68fb      	ldr	r3, [r7, #12]
 8012b9e:	e028      	b.n	8012bf2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8012ba0:	68fb      	ldr	r3, [r7, #12]
 8012ba2:	681b      	ldr	r3, [r3, #0]
 8012ba4:	60fb      	str	r3, [r7, #12]
 8012ba6:	68fb      	ldr	r3, [r7, #12]
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d1c5      	bne.n	8012b38 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8012bac:	4b15      	ldr	r3, [pc, #84]	; (8012c04 <ip4_route+0xdc>)
 8012bae:	681b      	ldr	r3, [r3, #0]
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d01a      	beq.n	8012bea <ip4_route+0xc2>
 8012bb4:	4b13      	ldr	r3, [pc, #76]	; (8012c04 <ip4_route+0xdc>)
 8012bb6:	681b      	ldr	r3, [r3, #0]
 8012bb8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012bbc:	f003 0301 	and.w	r3, r3, #1
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d012      	beq.n	8012bea <ip4_route+0xc2>
 8012bc4:	4b0f      	ldr	r3, [pc, #60]	; (8012c04 <ip4_route+0xdc>)
 8012bc6:	681b      	ldr	r3, [r3, #0]
 8012bc8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012bcc:	f003 0304 	and.w	r3, r3, #4
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d00a      	beq.n	8012bea <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8012bd4:	4b0b      	ldr	r3, [pc, #44]	; (8012c04 <ip4_route+0xdc>)
 8012bd6:	681b      	ldr	r3, [r3, #0]
 8012bd8:	3304      	adds	r3, #4
 8012bda:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d004      	beq.n	8012bea <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	681b      	ldr	r3, [r3, #0]
 8012be4:	b2db      	uxtb	r3, r3
 8012be6:	2b7f      	cmp	r3, #127	; 0x7f
 8012be8:	d101      	bne.n	8012bee <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8012bea:	2300      	movs	r3, #0
 8012bec:	e001      	b.n	8012bf2 <ip4_route+0xca>
  }

  return netif_default;
 8012bee:	4b05      	ldr	r3, [pc, #20]	; (8012c04 <ip4_route+0xdc>)
 8012bf0:	681b      	ldr	r3, [r3, #0]
}
 8012bf2:	4618      	mov	r0, r3
 8012bf4:	3714      	adds	r7, #20
 8012bf6:	46bd      	mov	sp, r7
 8012bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bfc:	4770      	bx	lr
 8012bfe:	bf00      	nop
 8012c00:	2000dc34 	.word	0x2000dc34
 8012c04:	2000dc38 	.word	0x2000dc38

08012c08 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8012c08:	b580      	push	{r7, lr}
 8012c0a:	b082      	sub	sp, #8
 8012c0c:	af00      	add	r7, sp, #0
 8012c0e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012c16:	f003 0301 	and.w	r3, r3, #1
 8012c1a:	b2db      	uxtb	r3, r3
 8012c1c:	2b00      	cmp	r3, #0
 8012c1e:	d016      	beq.n	8012c4e <ip4_input_accept+0x46>
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	3304      	adds	r3, #4
 8012c24:	681b      	ldr	r3, [r3, #0]
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	d011      	beq.n	8012c4e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012c2a:	4b0b      	ldr	r3, [pc, #44]	; (8012c58 <ip4_input_accept+0x50>)
 8012c2c:	695a      	ldr	r2, [r3, #20]
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	3304      	adds	r3, #4
 8012c32:	681b      	ldr	r3, [r3, #0]
 8012c34:	429a      	cmp	r2, r3
 8012c36:	d008      	beq.n	8012c4a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8012c38:	4b07      	ldr	r3, [pc, #28]	; (8012c58 <ip4_input_accept+0x50>)
 8012c3a:	695b      	ldr	r3, [r3, #20]
 8012c3c:	6879      	ldr	r1, [r7, #4]
 8012c3e:	4618      	mov	r0, r3
 8012c40:	f000 fa08 	bl	8013054 <ip4_addr_isbroadcast_u32>
 8012c44:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d001      	beq.n	8012c4e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8012c4a:	2301      	movs	r3, #1
 8012c4c:	e000      	b.n	8012c50 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8012c4e:	2300      	movs	r3, #0
}
 8012c50:	4618      	mov	r0, r3
 8012c52:	3708      	adds	r7, #8
 8012c54:	46bd      	mov	sp, r7
 8012c56:	bd80      	pop	{r7, pc}
 8012c58:	20008360 	.word	0x20008360

08012c5c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8012c5c:	b580      	push	{r7, lr}
 8012c5e:	b086      	sub	sp, #24
 8012c60:	af00      	add	r7, sp, #0
 8012c62:	6078      	str	r0, [r7, #4]
 8012c64:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	685b      	ldr	r3, [r3, #4]
 8012c6a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8012c6c:	697b      	ldr	r3, [r7, #20]
 8012c6e:	781b      	ldrb	r3, [r3, #0]
 8012c70:	091b      	lsrs	r3, r3, #4
 8012c72:	b2db      	uxtb	r3, r3
 8012c74:	2b04      	cmp	r3, #4
 8012c76:	d004      	beq.n	8012c82 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8012c78:	6878      	ldr	r0, [r7, #4]
 8012c7a:	f7f8 ff55 	bl	800bb28 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8012c7e:	2300      	movs	r3, #0
 8012c80:	e107      	b.n	8012e92 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8012c82:	697b      	ldr	r3, [r7, #20]
 8012c84:	781b      	ldrb	r3, [r3, #0]
 8012c86:	f003 030f 	and.w	r3, r3, #15
 8012c8a:	b2db      	uxtb	r3, r3
 8012c8c:	009b      	lsls	r3, r3, #2
 8012c8e:	b2db      	uxtb	r3, r3
 8012c90:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8012c92:	697b      	ldr	r3, [r7, #20]
 8012c94:	885b      	ldrh	r3, [r3, #2]
 8012c96:	b29b      	uxth	r3, r3
 8012c98:	4618      	mov	r0, r3
 8012c9a:	f7f7 fb99 	bl	800a3d0 <lwip_htons>
 8012c9e:	4603      	mov	r3, r0
 8012ca0:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	891b      	ldrh	r3, [r3, #8]
 8012ca6:	89ba      	ldrh	r2, [r7, #12]
 8012ca8:	429a      	cmp	r2, r3
 8012caa:	d204      	bcs.n	8012cb6 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8012cac:	89bb      	ldrh	r3, [r7, #12]
 8012cae:	4619      	mov	r1, r3
 8012cb0:	6878      	ldr	r0, [r7, #4]
 8012cb2:	f7f8 fdb3 	bl	800b81c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	895b      	ldrh	r3, [r3, #10]
 8012cba:	89fa      	ldrh	r2, [r7, #14]
 8012cbc:	429a      	cmp	r2, r3
 8012cbe:	d807      	bhi.n	8012cd0 <ip4_input+0x74>
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	891b      	ldrh	r3, [r3, #8]
 8012cc4:	89ba      	ldrh	r2, [r7, #12]
 8012cc6:	429a      	cmp	r2, r3
 8012cc8:	d802      	bhi.n	8012cd0 <ip4_input+0x74>
 8012cca:	89fb      	ldrh	r3, [r7, #14]
 8012ccc:	2b13      	cmp	r3, #19
 8012cce:	d804      	bhi.n	8012cda <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8012cd0:	6878      	ldr	r0, [r7, #4]
 8012cd2:	f7f8 ff29 	bl	800bb28 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8012cd6:	2300      	movs	r3, #0
 8012cd8:	e0db      	b.n	8012e92 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8012cda:	697b      	ldr	r3, [r7, #20]
 8012cdc:	691b      	ldr	r3, [r3, #16]
 8012cde:	4a6f      	ldr	r2, [pc, #444]	; (8012e9c <ip4_input+0x240>)
 8012ce0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8012ce2:	697b      	ldr	r3, [r7, #20]
 8012ce4:	68db      	ldr	r3, [r3, #12]
 8012ce6:	4a6d      	ldr	r2, [pc, #436]	; (8012e9c <ip4_input+0x240>)
 8012ce8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012cea:	4b6c      	ldr	r3, [pc, #432]	; (8012e9c <ip4_input+0x240>)
 8012cec:	695b      	ldr	r3, [r3, #20]
 8012cee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012cf2:	2be0      	cmp	r3, #224	; 0xe0
 8012cf4:	d112      	bne.n	8012d1c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8012cf6:	683b      	ldr	r3, [r7, #0]
 8012cf8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012cfc:	f003 0301 	and.w	r3, r3, #1
 8012d00:	b2db      	uxtb	r3, r3
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	d007      	beq.n	8012d16 <ip4_input+0xba>
 8012d06:	683b      	ldr	r3, [r7, #0]
 8012d08:	3304      	adds	r3, #4
 8012d0a:	681b      	ldr	r3, [r3, #0]
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d002      	beq.n	8012d16 <ip4_input+0xba>
      netif = inp;
 8012d10:	683b      	ldr	r3, [r7, #0]
 8012d12:	613b      	str	r3, [r7, #16]
 8012d14:	e02a      	b.n	8012d6c <ip4_input+0x110>
    } else {
      netif = NULL;
 8012d16:	2300      	movs	r3, #0
 8012d18:	613b      	str	r3, [r7, #16]
 8012d1a:	e027      	b.n	8012d6c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8012d1c:	6838      	ldr	r0, [r7, #0]
 8012d1e:	f7ff ff73 	bl	8012c08 <ip4_input_accept>
 8012d22:	4603      	mov	r3, r0
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d002      	beq.n	8012d2e <ip4_input+0xd2>
      netif = inp;
 8012d28:	683b      	ldr	r3, [r7, #0]
 8012d2a:	613b      	str	r3, [r7, #16]
 8012d2c:	e01e      	b.n	8012d6c <ip4_input+0x110>
    } else {
      netif = NULL;
 8012d2e:	2300      	movs	r3, #0
 8012d30:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8012d32:	4b5a      	ldr	r3, [pc, #360]	; (8012e9c <ip4_input+0x240>)
 8012d34:	695b      	ldr	r3, [r3, #20]
 8012d36:	b2db      	uxtb	r3, r3
 8012d38:	2b7f      	cmp	r3, #127	; 0x7f
 8012d3a:	d017      	beq.n	8012d6c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8012d3c:	4b58      	ldr	r3, [pc, #352]	; (8012ea0 <ip4_input+0x244>)
 8012d3e:	681b      	ldr	r3, [r3, #0]
 8012d40:	613b      	str	r3, [r7, #16]
 8012d42:	e00e      	b.n	8012d62 <ip4_input+0x106>
          if (netif == inp) {
 8012d44:	693a      	ldr	r2, [r7, #16]
 8012d46:	683b      	ldr	r3, [r7, #0]
 8012d48:	429a      	cmp	r2, r3
 8012d4a:	d006      	beq.n	8012d5a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8012d4c:	6938      	ldr	r0, [r7, #16]
 8012d4e:	f7ff ff5b 	bl	8012c08 <ip4_input_accept>
 8012d52:	4603      	mov	r3, r0
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d108      	bne.n	8012d6a <ip4_input+0x10e>
 8012d58:	e000      	b.n	8012d5c <ip4_input+0x100>
            continue;
 8012d5a:	bf00      	nop
        NETIF_FOREACH(netif) {
 8012d5c:	693b      	ldr	r3, [r7, #16]
 8012d5e:	681b      	ldr	r3, [r3, #0]
 8012d60:	613b      	str	r3, [r7, #16]
 8012d62:	693b      	ldr	r3, [r7, #16]
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d1ed      	bne.n	8012d44 <ip4_input+0xe8>
 8012d68:	e000      	b.n	8012d6c <ip4_input+0x110>
            break;
 8012d6a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012d6c:	4b4b      	ldr	r3, [pc, #300]	; (8012e9c <ip4_input+0x240>)
 8012d6e:	691b      	ldr	r3, [r3, #16]
 8012d70:	6839      	ldr	r1, [r7, #0]
 8012d72:	4618      	mov	r0, r3
 8012d74:	f000 f96e 	bl	8013054 <ip4_addr_isbroadcast_u32>
 8012d78:	4603      	mov	r3, r0
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	d105      	bne.n	8012d8a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8012d7e:	4b47      	ldr	r3, [pc, #284]	; (8012e9c <ip4_input+0x240>)
 8012d80:	691b      	ldr	r3, [r3, #16]
 8012d82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012d86:	2be0      	cmp	r3, #224	; 0xe0
 8012d88:	d104      	bne.n	8012d94 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8012d8a:	6878      	ldr	r0, [r7, #4]
 8012d8c:	f7f8 fecc 	bl	800bb28 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8012d90:	2300      	movs	r3, #0
 8012d92:	e07e      	b.n	8012e92 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8012d94:	693b      	ldr	r3, [r7, #16]
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	d104      	bne.n	8012da4 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8012d9a:	6878      	ldr	r0, [r7, #4]
 8012d9c:	f7f8 fec4 	bl	800bb28 <pbuf_free>
    return ERR_OK;
 8012da0:	2300      	movs	r3, #0
 8012da2:	e076      	b.n	8012e92 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8012da4:	697b      	ldr	r3, [r7, #20]
 8012da6:	88db      	ldrh	r3, [r3, #6]
 8012da8:	b29b      	uxth	r3, r3
 8012daa:	461a      	mov	r2, r3
 8012dac:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8012db0:	4013      	ands	r3, r2
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	d00b      	beq.n	8012dce <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8012db6:	6878      	ldr	r0, [r7, #4]
 8012db8:	f000 fc92 	bl	80136e0 <ip4_reass>
 8012dbc:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d101      	bne.n	8012dc8 <ip4_input+0x16c>
      return ERR_OK;
 8012dc4:	2300      	movs	r3, #0
 8012dc6:	e064      	b.n	8012e92 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	685b      	ldr	r3, [r3, #4]
 8012dcc:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8012dce:	4a33      	ldr	r2, [pc, #204]	; (8012e9c <ip4_input+0x240>)
 8012dd0:	693b      	ldr	r3, [r7, #16]
 8012dd2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8012dd4:	4a31      	ldr	r2, [pc, #196]	; (8012e9c <ip4_input+0x240>)
 8012dd6:	683b      	ldr	r3, [r7, #0]
 8012dd8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8012dda:	4a30      	ldr	r2, [pc, #192]	; (8012e9c <ip4_input+0x240>)
 8012ddc:	697b      	ldr	r3, [r7, #20]
 8012dde:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8012de0:	697b      	ldr	r3, [r7, #20]
 8012de2:	781b      	ldrb	r3, [r3, #0]
 8012de4:	f003 030f 	and.w	r3, r3, #15
 8012de8:	b2db      	uxtb	r3, r3
 8012dea:	009b      	lsls	r3, r3, #2
 8012dec:	b2db      	uxtb	r3, r3
 8012dee:	b29a      	uxth	r2, r3
 8012df0:	4b2a      	ldr	r3, [pc, #168]	; (8012e9c <ip4_input+0x240>)
 8012df2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8012df4:	89fb      	ldrh	r3, [r7, #14]
 8012df6:	4619      	mov	r1, r3
 8012df8:	6878      	ldr	r0, [r7, #4]
 8012dfa:	f7f8 fe0f 	bl	800ba1c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8012dfe:	697b      	ldr	r3, [r7, #20]
 8012e00:	7a5b      	ldrb	r3, [r3, #9]
 8012e02:	2b11      	cmp	r3, #17
 8012e04:	d006      	beq.n	8012e14 <ip4_input+0x1b8>
 8012e06:	2b11      	cmp	r3, #17
 8012e08:	dc13      	bgt.n	8012e32 <ip4_input+0x1d6>
 8012e0a:	2b01      	cmp	r3, #1
 8012e0c:	d00c      	beq.n	8012e28 <ip4_input+0x1cc>
 8012e0e:	2b06      	cmp	r3, #6
 8012e10:	d005      	beq.n	8012e1e <ip4_input+0x1c2>
 8012e12:	e00e      	b.n	8012e32 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8012e14:	6839      	ldr	r1, [r7, #0]
 8012e16:	6878      	ldr	r0, [r7, #4]
 8012e18:	f7fe fc68 	bl	80116ec <udp_input>
        break;
 8012e1c:	e026      	b.n	8012e6c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8012e1e:	6839      	ldr	r1, [r7, #0]
 8012e20:	6878      	ldr	r0, [r7, #4]
 8012e22:	f7fa fcb5 	bl	800d790 <tcp_input>
        break;
 8012e26:	e021      	b.n	8012e6c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8012e28:	6839      	ldr	r1, [r7, #0]
 8012e2a:	6878      	ldr	r0, [r7, #4]
 8012e2c:	f7ff fcee 	bl	801280c <icmp_input>
        break;
 8012e30:	e01c      	b.n	8012e6c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012e32:	4b1a      	ldr	r3, [pc, #104]	; (8012e9c <ip4_input+0x240>)
 8012e34:	695b      	ldr	r3, [r3, #20]
 8012e36:	6939      	ldr	r1, [r7, #16]
 8012e38:	4618      	mov	r0, r3
 8012e3a:	f000 f90b 	bl	8013054 <ip4_addr_isbroadcast_u32>
 8012e3e:	4603      	mov	r3, r0
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	d10f      	bne.n	8012e64 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012e44:	4b15      	ldr	r3, [pc, #84]	; (8012e9c <ip4_input+0x240>)
 8012e46:	695b      	ldr	r3, [r3, #20]
 8012e48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012e4c:	2be0      	cmp	r3, #224	; 0xe0
 8012e4e:	d009      	beq.n	8012e64 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8012e50:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012e54:	4619      	mov	r1, r3
 8012e56:	6878      	ldr	r0, [r7, #4]
 8012e58:	f7f8 fe53 	bl	800bb02 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8012e5c:	2102      	movs	r1, #2
 8012e5e:	6878      	ldr	r0, [r7, #4]
 8012e60:	f7ff fdd8 	bl	8012a14 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8012e64:	6878      	ldr	r0, [r7, #4]
 8012e66:	f7f8 fe5f 	bl	800bb28 <pbuf_free>
        break;
 8012e6a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8012e6c:	4b0b      	ldr	r3, [pc, #44]	; (8012e9c <ip4_input+0x240>)
 8012e6e:	2200      	movs	r2, #0
 8012e70:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8012e72:	4b0a      	ldr	r3, [pc, #40]	; (8012e9c <ip4_input+0x240>)
 8012e74:	2200      	movs	r2, #0
 8012e76:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8012e78:	4b08      	ldr	r3, [pc, #32]	; (8012e9c <ip4_input+0x240>)
 8012e7a:	2200      	movs	r2, #0
 8012e7c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8012e7e:	4b07      	ldr	r3, [pc, #28]	; (8012e9c <ip4_input+0x240>)
 8012e80:	2200      	movs	r2, #0
 8012e82:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8012e84:	4b05      	ldr	r3, [pc, #20]	; (8012e9c <ip4_input+0x240>)
 8012e86:	2200      	movs	r2, #0
 8012e88:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8012e8a:	4b04      	ldr	r3, [pc, #16]	; (8012e9c <ip4_input+0x240>)
 8012e8c:	2200      	movs	r2, #0
 8012e8e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8012e90:	2300      	movs	r3, #0
}
 8012e92:	4618      	mov	r0, r3
 8012e94:	3718      	adds	r7, #24
 8012e96:	46bd      	mov	sp, r7
 8012e98:	bd80      	pop	{r7, pc}
 8012e9a:	bf00      	nop
 8012e9c:	20008360 	.word	0x20008360
 8012ea0:	2000dc34 	.word	0x2000dc34

08012ea4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8012ea4:	b580      	push	{r7, lr}
 8012ea6:	b08a      	sub	sp, #40	; 0x28
 8012ea8:	af04      	add	r7, sp, #16
 8012eaa:	60f8      	str	r0, [r7, #12]
 8012eac:	60b9      	str	r1, [r7, #8]
 8012eae:	607a      	str	r2, [r7, #4]
 8012eb0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8012eb2:	68bb      	ldr	r3, [r7, #8]
 8012eb4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	d009      	beq.n	8012ed0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8012ebc:	68bb      	ldr	r3, [r7, #8]
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	d003      	beq.n	8012eca <ip4_output_if+0x26>
 8012ec2:	68bb      	ldr	r3, [r7, #8]
 8012ec4:	681b      	ldr	r3, [r3, #0]
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d102      	bne.n	8012ed0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8012eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ecc:	3304      	adds	r3, #4
 8012ece:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8012ed0:	78fa      	ldrb	r2, [r7, #3]
 8012ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ed4:	9302      	str	r3, [sp, #8]
 8012ed6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012eda:	9301      	str	r3, [sp, #4]
 8012edc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012ee0:	9300      	str	r3, [sp, #0]
 8012ee2:	4613      	mov	r3, r2
 8012ee4:	687a      	ldr	r2, [r7, #4]
 8012ee6:	6979      	ldr	r1, [r7, #20]
 8012ee8:	68f8      	ldr	r0, [r7, #12]
 8012eea:	f000 f805 	bl	8012ef8 <ip4_output_if_src>
 8012eee:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8012ef0:	4618      	mov	r0, r3
 8012ef2:	3718      	adds	r7, #24
 8012ef4:	46bd      	mov	sp, r7
 8012ef6:	bd80      	pop	{r7, pc}

08012ef8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8012ef8:	b580      	push	{r7, lr}
 8012efa:	b088      	sub	sp, #32
 8012efc:	af00      	add	r7, sp, #0
 8012efe:	60f8      	str	r0, [r7, #12]
 8012f00:	60b9      	str	r1, [r7, #8]
 8012f02:	607a      	str	r2, [r7, #4]
 8012f04:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8012f06:	68fb      	ldr	r3, [r7, #12]
 8012f08:	7b9b      	ldrb	r3, [r3, #14]
 8012f0a:	2b01      	cmp	r3, #1
 8012f0c:	d006      	beq.n	8012f1c <ip4_output_if_src+0x24>
 8012f0e:	4b4b      	ldr	r3, [pc, #300]	; (801303c <ip4_output_if_src+0x144>)
 8012f10:	f44f 7255 	mov.w	r2, #852	; 0x354
 8012f14:	494a      	ldr	r1, [pc, #296]	; (8013040 <ip4_output_if_src+0x148>)
 8012f16:	484b      	ldr	r0, [pc, #300]	; (8013044 <ip4_output_if_src+0x14c>)
 8012f18:	f005 f98c 	bl	8018234 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	d060      	beq.n	8012fe4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8012f22:	2314      	movs	r3, #20
 8012f24:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8012f26:	2114      	movs	r1, #20
 8012f28:	68f8      	ldr	r0, [r7, #12]
 8012f2a:	f7f8 fd67 	bl	800b9fc <pbuf_add_header>
 8012f2e:	4603      	mov	r3, r0
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d002      	beq.n	8012f3a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012f34:	f06f 0301 	mvn.w	r3, #1
 8012f38:	e07c      	b.n	8013034 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8012f3a:	68fb      	ldr	r3, [r7, #12]
 8012f3c:	685b      	ldr	r3, [r3, #4]
 8012f3e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8012f40:	68fb      	ldr	r3, [r7, #12]
 8012f42:	895b      	ldrh	r3, [r3, #10]
 8012f44:	2b13      	cmp	r3, #19
 8012f46:	d806      	bhi.n	8012f56 <ip4_output_if_src+0x5e>
 8012f48:	4b3c      	ldr	r3, [pc, #240]	; (801303c <ip4_output_if_src+0x144>)
 8012f4a:	f44f 7262 	mov.w	r2, #904	; 0x388
 8012f4e:	493e      	ldr	r1, [pc, #248]	; (8013048 <ip4_output_if_src+0x150>)
 8012f50:	483c      	ldr	r0, [pc, #240]	; (8013044 <ip4_output_if_src+0x14c>)
 8012f52:	f005 f96f 	bl	8018234 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8012f56:	69fb      	ldr	r3, [r7, #28]
 8012f58:	78fa      	ldrb	r2, [r7, #3]
 8012f5a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8012f5c:	69fb      	ldr	r3, [r7, #28]
 8012f5e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8012f62:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	681a      	ldr	r2, [r3, #0]
 8012f68:	69fb      	ldr	r3, [r7, #28]
 8012f6a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8012f6c:	8b7b      	ldrh	r3, [r7, #26]
 8012f6e:	089b      	lsrs	r3, r3, #2
 8012f70:	b29b      	uxth	r3, r3
 8012f72:	b2db      	uxtb	r3, r3
 8012f74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012f78:	b2da      	uxtb	r2, r3
 8012f7a:	69fb      	ldr	r3, [r7, #28]
 8012f7c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8012f7e:	69fb      	ldr	r3, [r7, #28]
 8012f80:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012f84:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8012f86:	68fb      	ldr	r3, [r7, #12]
 8012f88:	891b      	ldrh	r3, [r3, #8]
 8012f8a:	4618      	mov	r0, r3
 8012f8c:	f7f7 fa20 	bl	800a3d0 <lwip_htons>
 8012f90:	4603      	mov	r3, r0
 8012f92:	461a      	mov	r2, r3
 8012f94:	69fb      	ldr	r3, [r7, #28]
 8012f96:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8012f98:	69fb      	ldr	r3, [r7, #28]
 8012f9a:	2200      	movs	r2, #0
 8012f9c:	719a      	strb	r2, [r3, #6]
 8012f9e:	2200      	movs	r2, #0
 8012fa0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8012fa2:	4b2a      	ldr	r3, [pc, #168]	; (801304c <ip4_output_if_src+0x154>)
 8012fa4:	881b      	ldrh	r3, [r3, #0]
 8012fa6:	4618      	mov	r0, r3
 8012fa8:	f7f7 fa12 	bl	800a3d0 <lwip_htons>
 8012fac:	4603      	mov	r3, r0
 8012fae:	461a      	mov	r2, r3
 8012fb0:	69fb      	ldr	r3, [r7, #28]
 8012fb2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8012fb4:	4b25      	ldr	r3, [pc, #148]	; (801304c <ip4_output_if_src+0x154>)
 8012fb6:	881b      	ldrh	r3, [r3, #0]
 8012fb8:	3301      	adds	r3, #1
 8012fba:	b29a      	uxth	r2, r3
 8012fbc:	4b23      	ldr	r3, [pc, #140]	; (801304c <ip4_output_if_src+0x154>)
 8012fbe:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8012fc0:	68bb      	ldr	r3, [r7, #8]
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d104      	bne.n	8012fd0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8012fc6:	4b22      	ldr	r3, [pc, #136]	; (8013050 <ip4_output_if_src+0x158>)
 8012fc8:	681a      	ldr	r2, [r3, #0]
 8012fca:	69fb      	ldr	r3, [r7, #28]
 8012fcc:	60da      	str	r2, [r3, #12]
 8012fce:	e003      	b.n	8012fd8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8012fd0:	68bb      	ldr	r3, [r7, #8]
 8012fd2:	681a      	ldr	r2, [r3, #0]
 8012fd4:	69fb      	ldr	r3, [r7, #28]
 8012fd6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8012fd8:	69fb      	ldr	r3, [r7, #28]
 8012fda:	2200      	movs	r2, #0
 8012fdc:	729a      	strb	r2, [r3, #10]
 8012fde:	2200      	movs	r2, #0
 8012fe0:	72da      	strb	r2, [r3, #11]
 8012fe2:	e00f      	b.n	8013004 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8012fe4:	68fb      	ldr	r3, [r7, #12]
 8012fe6:	895b      	ldrh	r3, [r3, #10]
 8012fe8:	2b13      	cmp	r3, #19
 8012fea:	d802      	bhi.n	8012ff2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012fec:	f06f 0301 	mvn.w	r3, #1
 8012ff0:	e020      	b.n	8013034 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8012ff2:	68fb      	ldr	r3, [r7, #12]
 8012ff4:	685b      	ldr	r3, [r3, #4]
 8012ff6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8012ff8:	69fb      	ldr	r3, [r7, #28]
 8012ffa:	691b      	ldr	r3, [r3, #16]
 8012ffc:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8012ffe:	f107 0314 	add.w	r3, r7, #20
 8013002:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8013004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013006:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013008:	2b00      	cmp	r3, #0
 801300a:	d00c      	beq.n	8013026 <ip4_output_if_src+0x12e>
 801300c:	68fb      	ldr	r3, [r7, #12]
 801300e:	891a      	ldrh	r2, [r3, #8]
 8013010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013012:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013014:	429a      	cmp	r2, r3
 8013016:	d906      	bls.n	8013026 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8013018:	687a      	ldr	r2, [r7, #4]
 801301a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801301c:	68f8      	ldr	r0, [r7, #12]
 801301e:	f000 fd4d 	bl	8013abc <ip4_frag>
 8013022:	4603      	mov	r3, r0
 8013024:	e006      	b.n	8013034 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8013026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013028:	695b      	ldr	r3, [r3, #20]
 801302a:	687a      	ldr	r2, [r7, #4]
 801302c:	68f9      	ldr	r1, [r7, #12]
 801302e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013030:	4798      	blx	r3
 8013032:	4603      	mov	r3, r0
}
 8013034:	4618      	mov	r0, r3
 8013036:	3720      	adds	r7, #32
 8013038:	46bd      	mov	sp, r7
 801303a:	bd80      	pop	{r7, pc}
 801303c:	0801b230 	.word	0x0801b230
 8013040:	0801b264 	.word	0x0801b264
 8013044:	0801b270 	.word	0x0801b270
 8013048:	0801b298 	.word	0x0801b298
 801304c:	20004cfa 	.word	0x20004cfa
 8013050:	0801b838 	.word	0x0801b838

08013054 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8013054:	b480      	push	{r7}
 8013056:	b085      	sub	sp, #20
 8013058:	af00      	add	r7, sp, #0
 801305a:	6078      	str	r0, [r7, #4]
 801305c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013068:	d002      	beq.n	8013070 <ip4_addr_isbroadcast_u32+0x1c>
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	2b00      	cmp	r3, #0
 801306e:	d101      	bne.n	8013074 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8013070:	2301      	movs	r3, #1
 8013072:	e02a      	b.n	80130ca <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8013074:	683b      	ldr	r3, [r7, #0]
 8013076:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801307a:	f003 0302 	and.w	r3, r3, #2
 801307e:	2b00      	cmp	r3, #0
 8013080:	d101      	bne.n	8013086 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8013082:	2300      	movs	r3, #0
 8013084:	e021      	b.n	80130ca <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8013086:	683b      	ldr	r3, [r7, #0]
 8013088:	3304      	adds	r3, #4
 801308a:	681b      	ldr	r3, [r3, #0]
 801308c:	687a      	ldr	r2, [r7, #4]
 801308e:	429a      	cmp	r2, r3
 8013090:	d101      	bne.n	8013096 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8013092:	2300      	movs	r3, #0
 8013094:	e019      	b.n	80130ca <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8013096:	68fa      	ldr	r2, [r7, #12]
 8013098:	683b      	ldr	r3, [r7, #0]
 801309a:	3304      	adds	r3, #4
 801309c:	681b      	ldr	r3, [r3, #0]
 801309e:	405a      	eors	r2, r3
 80130a0:	683b      	ldr	r3, [r7, #0]
 80130a2:	3308      	adds	r3, #8
 80130a4:	681b      	ldr	r3, [r3, #0]
 80130a6:	4013      	ands	r3, r2
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d10d      	bne.n	80130c8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80130ac:	683b      	ldr	r3, [r7, #0]
 80130ae:	3308      	adds	r3, #8
 80130b0:	681b      	ldr	r3, [r3, #0]
 80130b2:	43da      	mvns	r2, r3
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80130b8:	683b      	ldr	r3, [r7, #0]
 80130ba:	3308      	adds	r3, #8
 80130bc:	681b      	ldr	r3, [r3, #0]
 80130be:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80130c0:	429a      	cmp	r2, r3
 80130c2:	d101      	bne.n	80130c8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80130c4:	2301      	movs	r3, #1
 80130c6:	e000      	b.n	80130ca <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80130c8:	2300      	movs	r3, #0
  }
}
 80130ca:	4618      	mov	r0, r3
 80130cc:	3714      	adds	r7, #20
 80130ce:	46bd      	mov	sp, r7
 80130d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130d4:	4770      	bx	lr
	...

080130d8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80130d8:	b580      	push	{r7, lr}
 80130da:	b084      	sub	sp, #16
 80130dc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80130de:	2300      	movs	r3, #0
 80130e0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80130e2:	4b12      	ldr	r3, [pc, #72]	; (801312c <ip_reass_tmr+0x54>)
 80130e4:	681b      	ldr	r3, [r3, #0]
 80130e6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80130e8:	e018      	b.n	801311c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80130ea:	68fb      	ldr	r3, [r7, #12]
 80130ec:	7fdb      	ldrb	r3, [r3, #31]
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d00b      	beq.n	801310a <ip_reass_tmr+0x32>
      r->timer--;
 80130f2:	68fb      	ldr	r3, [r7, #12]
 80130f4:	7fdb      	ldrb	r3, [r3, #31]
 80130f6:	3b01      	subs	r3, #1
 80130f8:	b2da      	uxtb	r2, r3
 80130fa:	68fb      	ldr	r3, [r7, #12]
 80130fc:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80130fe:	68fb      	ldr	r3, [r7, #12]
 8013100:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	681b      	ldr	r3, [r3, #0]
 8013106:	60fb      	str	r3, [r7, #12]
 8013108:	e008      	b.n	801311c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801310a:	68fb      	ldr	r3, [r7, #12]
 801310c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801310e:	68fb      	ldr	r3, [r7, #12]
 8013110:	681b      	ldr	r3, [r3, #0]
 8013112:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8013114:	68b9      	ldr	r1, [r7, #8]
 8013116:	6878      	ldr	r0, [r7, #4]
 8013118:	f000 f80a 	bl	8013130 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801311c:	68fb      	ldr	r3, [r7, #12]
 801311e:	2b00      	cmp	r3, #0
 8013120:	d1e3      	bne.n	80130ea <ip_reass_tmr+0x12>
    }
  }
}
 8013122:	bf00      	nop
 8013124:	bf00      	nop
 8013126:	3710      	adds	r7, #16
 8013128:	46bd      	mov	sp, r7
 801312a:	bd80      	pop	{r7, pc}
 801312c:	20004cfc 	.word	0x20004cfc

08013130 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013130:	b580      	push	{r7, lr}
 8013132:	b088      	sub	sp, #32
 8013134:	af00      	add	r7, sp, #0
 8013136:	6078      	str	r0, [r7, #4]
 8013138:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801313a:	2300      	movs	r3, #0
 801313c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801313e:	683a      	ldr	r2, [r7, #0]
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	429a      	cmp	r2, r3
 8013144:	d105      	bne.n	8013152 <ip_reass_free_complete_datagram+0x22>
 8013146:	4b45      	ldr	r3, [pc, #276]	; (801325c <ip_reass_free_complete_datagram+0x12c>)
 8013148:	22ab      	movs	r2, #171	; 0xab
 801314a:	4945      	ldr	r1, [pc, #276]	; (8013260 <ip_reass_free_complete_datagram+0x130>)
 801314c:	4845      	ldr	r0, [pc, #276]	; (8013264 <ip_reass_free_complete_datagram+0x134>)
 801314e:	f005 f871 	bl	8018234 <iprintf>
  if (prev != NULL) {
 8013152:	683b      	ldr	r3, [r7, #0]
 8013154:	2b00      	cmp	r3, #0
 8013156:	d00a      	beq.n	801316e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8013158:	683b      	ldr	r3, [r7, #0]
 801315a:	681b      	ldr	r3, [r3, #0]
 801315c:	687a      	ldr	r2, [r7, #4]
 801315e:	429a      	cmp	r2, r3
 8013160:	d005      	beq.n	801316e <ip_reass_free_complete_datagram+0x3e>
 8013162:	4b3e      	ldr	r3, [pc, #248]	; (801325c <ip_reass_free_complete_datagram+0x12c>)
 8013164:	22ad      	movs	r2, #173	; 0xad
 8013166:	4940      	ldr	r1, [pc, #256]	; (8013268 <ip_reass_free_complete_datagram+0x138>)
 8013168:	483e      	ldr	r0, [pc, #248]	; (8013264 <ip_reass_free_complete_datagram+0x134>)
 801316a:	f005 f863 	bl	8018234 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	685b      	ldr	r3, [r3, #4]
 8013172:	685b      	ldr	r3, [r3, #4]
 8013174:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8013176:	697b      	ldr	r3, [r7, #20]
 8013178:	889b      	ldrh	r3, [r3, #4]
 801317a:	b29b      	uxth	r3, r3
 801317c:	2b00      	cmp	r3, #0
 801317e:	d12a      	bne.n	80131d6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	685b      	ldr	r3, [r3, #4]
 8013184:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8013186:	697b      	ldr	r3, [r7, #20]
 8013188:	681a      	ldr	r2, [r3, #0]
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801318e:	69bb      	ldr	r3, [r7, #24]
 8013190:	6858      	ldr	r0, [r3, #4]
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	3308      	adds	r3, #8
 8013196:	2214      	movs	r2, #20
 8013198:	4619      	mov	r1, r3
 801319a:	f004 fcec 	bl	8017b76 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801319e:	2101      	movs	r1, #1
 80131a0:	69b8      	ldr	r0, [r7, #24]
 80131a2:	f7ff fc47 	bl	8012a34 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80131a6:	69b8      	ldr	r0, [r7, #24]
 80131a8:	f7f8 fd4c 	bl	800bc44 <pbuf_clen>
 80131ac:	4603      	mov	r3, r0
 80131ae:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80131b0:	8bfa      	ldrh	r2, [r7, #30]
 80131b2:	8a7b      	ldrh	r3, [r7, #18]
 80131b4:	4413      	add	r3, r2
 80131b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80131ba:	db05      	blt.n	80131c8 <ip_reass_free_complete_datagram+0x98>
 80131bc:	4b27      	ldr	r3, [pc, #156]	; (801325c <ip_reass_free_complete_datagram+0x12c>)
 80131be:	22bc      	movs	r2, #188	; 0xbc
 80131c0:	492a      	ldr	r1, [pc, #168]	; (801326c <ip_reass_free_complete_datagram+0x13c>)
 80131c2:	4828      	ldr	r0, [pc, #160]	; (8013264 <ip_reass_free_complete_datagram+0x134>)
 80131c4:	f005 f836 	bl	8018234 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80131c8:	8bfa      	ldrh	r2, [r7, #30]
 80131ca:	8a7b      	ldrh	r3, [r7, #18]
 80131cc:	4413      	add	r3, r2
 80131ce:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80131d0:	69b8      	ldr	r0, [r7, #24]
 80131d2:	f7f8 fca9 	bl	800bb28 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	685b      	ldr	r3, [r3, #4]
 80131da:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80131dc:	e01f      	b.n	801321e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80131de:	69bb      	ldr	r3, [r7, #24]
 80131e0:	685b      	ldr	r3, [r3, #4]
 80131e2:	617b      	str	r3, [r7, #20]
    pcur = p;
 80131e4:	69bb      	ldr	r3, [r7, #24]
 80131e6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80131e8:	697b      	ldr	r3, [r7, #20]
 80131ea:	681b      	ldr	r3, [r3, #0]
 80131ec:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80131ee:	68f8      	ldr	r0, [r7, #12]
 80131f0:	f7f8 fd28 	bl	800bc44 <pbuf_clen>
 80131f4:	4603      	mov	r3, r0
 80131f6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80131f8:	8bfa      	ldrh	r2, [r7, #30]
 80131fa:	8a7b      	ldrh	r3, [r7, #18]
 80131fc:	4413      	add	r3, r2
 80131fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013202:	db05      	blt.n	8013210 <ip_reass_free_complete_datagram+0xe0>
 8013204:	4b15      	ldr	r3, [pc, #84]	; (801325c <ip_reass_free_complete_datagram+0x12c>)
 8013206:	22cc      	movs	r2, #204	; 0xcc
 8013208:	4918      	ldr	r1, [pc, #96]	; (801326c <ip_reass_free_complete_datagram+0x13c>)
 801320a:	4816      	ldr	r0, [pc, #88]	; (8013264 <ip_reass_free_complete_datagram+0x134>)
 801320c:	f005 f812 	bl	8018234 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013210:	8bfa      	ldrh	r2, [r7, #30]
 8013212:	8a7b      	ldrh	r3, [r7, #18]
 8013214:	4413      	add	r3, r2
 8013216:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8013218:	68f8      	ldr	r0, [r7, #12]
 801321a:	f7f8 fc85 	bl	800bb28 <pbuf_free>
  while (p != NULL) {
 801321e:	69bb      	ldr	r3, [r7, #24]
 8013220:	2b00      	cmp	r3, #0
 8013222:	d1dc      	bne.n	80131de <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8013224:	6839      	ldr	r1, [r7, #0]
 8013226:	6878      	ldr	r0, [r7, #4]
 8013228:	f000 f8c2 	bl	80133b0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801322c:	4b10      	ldr	r3, [pc, #64]	; (8013270 <ip_reass_free_complete_datagram+0x140>)
 801322e:	881b      	ldrh	r3, [r3, #0]
 8013230:	8bfa      	ldrh	r2, [r7, #30]
 8013232:	429a      	cmp	r2, r3
 8013234:	d905      	bls.n	8013242 <ip_reass_free_complete_datagram+0x112>
 8013236:	4b09      	ldr	r3, [pc, #36]	; (801325c <ip_reass_free_complete_datagram+0x12c>)
 8013238:	22d2      	movs	r2, #210	; 0xd2
 801323a:	490e      	ldr	r1, [pc, #56]	; (8013274 <ip_reass_free_complete_datagram+0x144>)
 801323c:	4809      	ldr	r0, [pc, #36]	; (8013264 <ip_reass_free_complete_datagram+0x134>)
 801323e:	f004 fff9 	bl	8018234 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8013242:	4b0b      	ldr	r3, [pc, #44]	; (8013270 <ip_reass_free_complete_datagram+0x140>)
 8013244:	881a      	ldrh	r2, [r3, #0]
 8013246:	8bfb      	ldrh	r3, [r7, #30]
 8013248:	1ad3      	subs	r3, r2, r3
 801324a:	b29a      	uxth	r2, r3
 801324c:	4b08      	ldr	r3, [pc, #32]	; (8013270 <ip_reass_free_complete_datagram+0x140>)
 801324e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8013250:	8bfb      	ldrh	r3, [r7, #30]
}
 8013252:	4618      	mov	r0, r3
 8013254:	3720      	adds	r7, #32
 8013256:	46bd      	mov	sp, r7
 8013258:	bd80      	pop	{r7, pc}
 801325a:	bf00      	nop
 801325c:	0801b2c8 	.word	0x0801b2c8
 8013260:	0801b304 	.word	0x0801b304
 8013264:	0801b310 	.word	0x0801b310
 8013268:	0801b338 	.word	0x0801b338
 801326c:	0801b34c 	.word	0x0801b34c
 8013270:	20004d00 	.word	0x20004d00
 8013274:	0801b36c 	.word	0x0801b36c

08013278 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8013278:	b580      	push	{r7, lr}
 801327a:	b08a      	sub	sp, #40	; 0x28
 801327c:	af00      	add	r7, sp, #0
 801327e:	6078      	str	r0, [r7, #4]
 8013280:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8013282:	2300      	movs	r3, #0
 8013284:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8013286:	2300      	movs	r3, #0
 8013288:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801328a:	2300      	movs	r3, #0
 801328c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801328e:	2300      	movs	r3, #0
 8013290:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8013292:	2300      	movs	r3, #0
 8013294:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8013296:	4b28      	ldr	r3, [pc, #160]	; (8013338 <ip_reass_remove_oldest_datagram+0xc0>)
 8013298:	681b      	ldr	r3, [r3, #0]
 801329a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801329c:	e030      	b.n	8013300 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801329e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132a0:	695a      	ldr	r2, [r3, #20]
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	68db      	ldr	r3, [r3, #12]
 80132a6:	429a      	cmp	r2, r3
 80132a8:	d10c      	bne.n	80132c4 <ip_reass_remove_oldest_datagram+0x4c>
 80132aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132ac:	699a      	ldr	r2, [r3, #24]
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	691b      	ldr	r3, [r3, #16]
 80132b2:	429a      	cmp	r2, r3
 80132b4:	d106      	bne.n	80132c4 <ip_reass_remove_oldest_datagram+0x4c>
 80132b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132b8:	899a      	ldrh	r2, [r3, #12]
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	889b      	ldrh	r3, [r3, #4]
 80132be:	b29b      	uxth	r3, r3
 80132c0:	429a      	cmp	r2, r3
 80132c2:	d014      	beq.n	80132ee <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80132c4:	693b      	ldr	r3, [r7, #16]
 80132c6:	3301      	adds	r3, #1
 80132c8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80132ca:	6a3b      	ldr	r3, [r7, #32]
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d104      	bne.n	80132da <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80132d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132d2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80132d4:	69fb      	ldr	r3, [r7, #28]
 80132d6:	61bb      	str	r3, [r7, #24]
 80132d8:	e009      	b.n	80132ee <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80132da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132dc:	7fda      	ldrb	r2, [r3, #31]
 80132de:	6a3b      	ldr	r3, [r7, #32]
 80132e0:	7fdb      	ldrb	r3, [r3, #31]
 80132e2:	429a      	cmp	r2, r3
 80132e4:	d803      	bhi.n	80132ee <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80132e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132e8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80132ea:	69fb      	ldr	r3, [r7, #28]
 80132ec:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80132ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132f0:	681b      	ldr	r3, [r3, #0]
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d001      	beq.n	80132fa <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80132f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132f8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80132fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132fc:	681b      	ldr	r3, [r3, #0]
 80132fe:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8013300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013302:	2b00      	cmp	r3, #0
 8013304:	d1cb      	bne.n	801329e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8013306:	6a3b      	ldr	r3, [r7, #32]
 8013308:	2b00      	cmp	r3, #0
 801330a:	d008      	beq.n	801331e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801330c:	69b9      	ldr	r1, [r7, #24]
 801330e:	6a38      	ldr	r0, [r7, #32]
 8013310:	f7ff ff0e 	bl	8013130 <ip_reass_free_complete_datagram>
 8013314:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8013316:	697a      	ldr	r2, [r7, #20]
 8013318:	68fb      	ldr	r3, [r7, #12]
 801331a:	4413      	add	r3, r2
 801331c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801331e:	697a      	ldr	r2, [r7, #20]
 8013320:	683b      	ldr	r3, [r7, #0]
 8013322:	429a      	cmp	r2, r3
 8013324:	da02      	bge.n	801332c <ip_reass_remove_oldest_datagram+0xb4>
 8013326:	693b      	ldr	r3, [r7, #16]
 8013328:	2b01      	cmp	r3, #1
 801332a:	dcac      	bgt.n	8013286 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801332c:	697b      	ldr	r3, [r7, #20]
}
 801332e:	4618      	mov	r0, r3
 8013330:	3728      	adds	r7, #40	; 0x28
 8013332:	46bd      	mov	sp, r7
 8013334:	bd80      	pop	{r7, pc}
 8013336:	bf00      	nop
 8013338:	20004cfc 	.word	0x20004cfc

0801333c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801333c:	b580      	push	{r7, lr}
 801333e:	b084      	sub	sp, #16
 8013340:	af00      	add	r7, sp, #0
 8013342:	6078      	str	r0, [r7, #4]
 8013344:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013346:	2004      	movs	r0, #4
 8013348:	f7f7 fcf8 	bl	800ad3c <memp_malloc>
 801334c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801334e:	68fb      	ldr	r3, [r7, #12]
 8013350:	2b00      	cmp	r3, #0
 8013352:	d110      	bne.n	8013376 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8013354:	6839      	ldr	r1, [r7, #0]
 8013356:	6878      	ldr	r0, [r7, #4]
 8013358:	f7ff ff8e 	bl	8013278 <ip_reass_remove_oldest_datagram>
 801335c:	4602      	mov	r2, r0
 801335e:	683b      	ldr	r3, [r7, #0]
 8013360:	4293      	cmp	r3, r2
 8013362:	dc03      	bgt.n	801336c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013364:	2004      	movs	r0, #4
 8013366:	f7f7 fce9 	bl	800ad3c <memp_malloc>
 801336a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801336c:	68fb      	ldr	r3, [r7, #12]
 801336e:	2b00      	cmp	r3, #0
 8013370:	d101      	bne.n	8013376 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8013372:	2300      	movs	r3, #0
 8013374:	e016      	b.n	80133a4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8013376:	2220      	movs	r2, #32
 8013378:	2100      	movs	r1, #0
 801337a:	68f8      	ldr	r0, [r7, #12]
 801337c:	f004 fc09 	bl	8017b92 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8013380:	68fb      	ldr	r3, [r7, #12]
 8013382:	220f      	movs	r2, #15
 8013384:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8013386:	4b09      	ldr	r3, [pc, #36]	; (80133ac <ip_reass_enqueue_new_datagram+0x70>)
 8013388:	681a      	ldr	r2, [r3, #0]
 801338a:	68fb      	ldr	r3, [r7, #12]
 801338c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801338e:	4a07      	ldr	r2, [pc, #28]	; (80133ac <ip_reass_enqueue_new_datagram+0x70>)
 8013390:	68fb      	ldr	r3, [r7, #12]
 8013392:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8013394:	68fb      	ldr	r3, [r7, #12]
 8013396:	3308      	adds	r3, #8
 8013398:	2214      	movs	r2, #20
 801339a:	6879      	ldr	r1, [r7, #4]
 801339c:	4618      	mov	r0, r3
 801339e:	f004 fbea 	bl	8017b76 <memcpy>
  return ipr;
 80133a2:	68fb      	ldr	r3, [r7, #12]
}
 80133a4:	4618      	mov	r0, r3
 80133a6:	3710      	adds	r7, #16
 80133a8:	46bd      	mov	sp, r7
 80133aa:	bd80      	pop	{r7, pc}
 80133ac:	20004cfc 	.word	0x20004cfc

080133b0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80133b0:	b580      	push	{r7, lr}
 80133b2:	b082      	sub	sp, #8
 80133b4:	af00      	add	r7, sp, #0
 80133b6:	6078      	str	r0, [r7, #4]
 80133b8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80133ba:	4b10      	ldr	r3, [pc, #64]	; (80133fc <ip_reass_dequeue_datagram+0x4c>)
 80133bc:	681b      	ldr	r3, [r3, #0]
 80133be:	687a      	ldr	r2, [r7, #4]
 80133c0:	429a      	cmp	r2, r3
 80133c2:	d104      	bne.n	80133ce <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	681b      	ldr	r3, [r3, #0]
 80133c8:	4a0c      	ldr	r2, [pc, #48]	; (80133fc <ip_reass_dequeue_datagram+0x4c>)
 80133ca:	6013      	str	r3, [r2, #0]
 80133cc:	e00d      	b.n	80133ea <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80133ce:	683b      	ldr	r3, [r7, #0]
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d106      	bne.n	80133e2 <ip_reass_dequeue_datagram+0x32>
 80133d4:	4b0a      	ldr	r3, [pc, #40]	; (8013400 <ip_reass_dequeue_datagram+0x50>)
 80133d6:	f240 1245 	movw	r2, #325	; 0x145
 80133da:	490a      	ldr	r1, [pc, #40]	; (8013404 <ip_reass_dequeue_datagram+0x54>)
 80133dc:	480a      	ldr	r0, [pc, #40]	; (8013408 <ip_reass_dequeue_datagram+0x58>)
 80133de:	f004 ff29 	bl	8018234 <iprintf>
    prev->next = ipr->next;
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	681a      	ldr	r2, [r3, #0]
 80133e6:	683b      	ldr	r3, [r7, #0]
 80133e8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80133ea:	6879      	ldr	r1, [r7, #4]
 80133ec:	2004      	movs	r0, #4
 80133ee:	f7f7 fcf7 	bl	800ade0 <memp_free>
}
 80133f2:	bf00      	nop
 80133f4:	3708      	adds	r7, #8
 80133f6:	46bd      	mov	sp, r7
 80133f8:	bd80      	pop	{r7, pc}
 80133fa:	bf00      	nop
 80133fc:	20004cfc 	.word	0x20004cfc
 8013400:	0801b2c8 	.word	0x0801b2c8
 8013404:	0801b390 	.word	0x0801b390
 8013408:	0801b310 	.word	0x0801b310

0801340c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801340c:	b580      	push	{r7, lr}
 801340e:	b08c      	sub	sp, #48	; 0x30
 8013410:	af00      	add	r7, sp, #0
 8013412:	60f8      	str	r0, [r7, #12]
 8013414:	60b9      	str	r1, [r7, #8]
 8013416:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8013418:	2300      	movs	r3, #0
 801341a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801341c:	2301      	movs	r3, #1
 801341e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8013420:	68bb      	ldr	r3, [r7, #8]
 8013422:	685b      	ldr	r3, [r3, #4]
 8013424:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8013426:	69fb      	ldr	r3, [r7, #28]
 8013428:	885b      	ldrh	r3, [r3, #2]
 801342a:	b29b      	uxth	r3, r3
 801342c:	4618      	mov	r0, r3
 801342e:	f7f6 ffcf 	bl	800a3d0 <lwip_htons>
 8013432:	4603      	mov	r3, r0
 8013434:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8013436:	69fb      	ldr	r3, [r7, #28]
 8013438:	781b      	ldrb	r3, [r3, #0]
 801343a:	f003 030f 	and.w	r3, r3, #15
 801343e:	b2db      	uxtb	r3, r3
 8013440:	009b      	lsls	r3, r3, #2
 8013442:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8013444:	7e7b      	ldrb	r3, [r7, #25]
 8013446:	b29b      	uxth	r3, r3
 8013448:	8b7a      	ldrh	r2, [r7, #26]
 801344a:	429a      	cmp	r2, r3
 801344c:	d202      	bcs.n	8013454 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801344e:	f04f 33ff 	mov.w	r3, #4294967295
 8013452:	e135      	b.n	80136c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8013454:	7e7b      	ldrb	r3, [r7, #25]
 8013456:	b29b      	uxth	r3, r3
 8013458:	8b7a      	ldrh	r2, [r7, #26]
 801345a:	1ad3      	subs	r3, r2, r3
 801345c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801345e:	69fb      	ldr	r3, [r7, #28]
 8013460:	88db      	ldrh	r3, [r3, #6]
 8013462:	b29b      	uxth	r3, r3
 8013464:	4618      	mov	r0, r3
 8013466:	f7f6 ffb3 	bl	800a3d0 <lwip_htons>
 801346a:	4603      	mov	r3, r0
 801346c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013470:	b29b      	uxth	r3, r3
 8013472:	00db      	lsls	r3, r3, #3
 8013474:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8013476:	68bb      	ldr	r3, [r7, #8]
 8013478:	685b      	ldr	r3, [r3, #4]
 801347a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801347c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801347e:	2200      	movs	r2, #0
 8013480:	701a      	strb	r2, [r3, #0]
 8013482:	2200      	movs	r2, #0
 8013484:	705a      	strb	r2, [r3, #1]
 8013486:	2200      	movs	r2, #0
 8013488:	709a      	strb	r2, [r3, #2]
 801348a:	2200      	movs	r2, #0
 801348c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801348e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013490:	8afa      	ldrh	r2, [r7, #22]
 8013492:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8013494:	8afa      	ldrh	r2, [r7, #22]
 8013496:	8b7b      	ldrh	r3, [r7, #26]
 8013498:	4413      	add	r3, r2
 801349a:	b29a      	uxth	r2, r3
 801349c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801349e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80134a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134a2:	88db      	ldrh	r3, [r3, #6]
 80134a4:	b29b      	uxth	r3, r3
 80134a6:	8afa      	ldrh	r2, [r7, #22]
 80134a8:	429a      	cmp	r2, r3
 80134aa:	d902      	bls.n	80134b2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80134ac:	f04f 33ff 	mov.w	r3, #4294967295
 80134b0:	e106      	b.n	80136c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80134b2:	68fb      	ldr	r3, [r7, #12]
 80134b4:	685b      	ldr	r3, [r3, #4]
 80134b6:	627b      	str	r3, [r7, #36]	; 0x24
 80134b8:	e068      	b.n	801358c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80134ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134bc:	685b      	ldr	r3, [r3, #4]
 80134be:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80134c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134c2:	889b      	ldrh	r3, [r3, #4]
 80134c4:	b29a      	uxth	r2, r3
 80134c6:	693b      	ldr	r3, [r7, #16]
 80134c8:	889b      	ldrh	r3, [r3, #4]
 80134ca:	b29b      	uxth	r3, r3
 80134cc:	429a      	cmp	r2, r3
 80134ce:	d235      	bcs.n	801353c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80134d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80134d4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80134d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d020      	beq.n	801351e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80134dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134de:	889b      	ldrh	r3, [r3, #4]
 80134e0:	b29a      	uxth	r2, r3
 80134e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134e4:	88db      	ldrh	r3, [r3, #6]
 80134e6:	b29b      	uxth	r3, r3
 80134e8:	429a      	cmp	r2, r3
 80134ea:	d307      	bcc.n	80134fc <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80134ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134ee:	88db      	ldrh	r3, [r3, #6]
 80134f0:	b29a      	uxth	r2, r3
 80134f2:	693b      	ldr	r3, [r7, #16]
 80134f4:	889b      	ldrh	r3, [r3, #4]
 80134f6:	b29b      	uxth	r3, r3
 80134f8:	429a      	cmp	r2, r3
 80134fa:	d902      	bls.n	8013502 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80134fc:	f04f 33ff 	mov.w	r3, #4294967295
 8013500:	e0de      	b.n	80136c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8013502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013504:	68ba      	ldr	r2, [r7, #8]
 8013506:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8013508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801350a:	88db      	ldrh	r3, [r3, #6]
 801350c:	b29a      	uxth	r2, r3
 801350e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013510:	889b      	ldrh	r3, [r3, #4]
 8013512:	b29b      	uxth	r3, r3
 8013514:	429a      	cmp	r2, r3
 8013516:	d03d      	beq.n	8013594 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013518:	2300      	movs	r3, #0
 801351a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801351c:	e03a      	b.n	8013594 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801351e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013520:	88db      	ldrh	r3, [r3, #6]
 8013522:	b29a      	uxth	r2, r3
 8013524:	693b      	ldr	r3, [r7, #16]
 8013526:	889b      	ldrh	r3, [r3, #4]
 8013528:	b29b      	uxth	r3, r3
 801352a:	429a      	cmp	r2, r3
 801352c:	d902      	bls.n	8013534 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801352e:	f04f 33ff 	mov.w	r3, #4294967295
 8013532:	e0c5      	b.n	80136c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8013534:	68fb      	ldr	r3, [r7, #12]
 8013536:	68ba      	ldr	r2, [r7, #8]
 8013538:	605a      	str	r2, [r3, #4]
      break;
 801353a:	e02b      	b.n	8013594 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801353c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801353e:	889b      	ldrh	r3, [r3, #4]
 8013540:	b29a      	uxth	r2, r3
 8013542:	693b      	ldr	r3, [r7, #16]
 8013544:	889b      	ldrh	r3, [r3, #4]
 8013546:	b29b      	uxth	r3, r3
 8013548:	429a      	cmp	r2, r3
 801354a:	d102      	bne.n	8013552 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801354c:	f04f 33ff 	mov.w	r3, #4294967295
 8013550:	e0b6      	b.n	80136c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8013552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013554:	889b      	ldrh	r3, [r3, #4]
 8013556:	b29a      	uxth	r2, r3
 8013558:	693b      	ldr	r3, [r7, #16]
 801355a:	88db      	ldrh	r3, [r3, #6]
 801355c:	b29b      	uxth	r3, r3
 801355e:	429a      	cmp	r2, r3
 8013560:	d202      	bcs.n	8013568 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013562:	f04f 33ff 	mov.w	r3, #4294967295
 8013566:	e0ab      	b.n	80136c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8013568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801356a:	2b00      	cmp	r3, #0
 801356c:	d009      	beq.n	8013582 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801356e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013570:	88db      	ldrh	r3, [r3, #6]
 8013572:	b29a      	uxth	r2, r3
 8013574:	693b      	ldr	r3, [r7, #16]
 8013576:	889b      	ldrh	r3, [r3, #4]
 8013578:	b29b      	uxth	r3, r3
 801357a:	429a      	cmp	r2, r3
 801357c:	d001      	beq.n	8013582 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801357e:	2300      	movs	r3, #0
 8013580:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8013582:	693b      	ldr	r3, [r7, #16]
 8013584:	681b      	ldr	r3, [r3, #0]
 8013586:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8013588:	693b      	ldr	r3, [r7, #16]
 801358a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801358c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801358e:	2b00      	cmp	r3, #0
 8013590:	d193      	bne.n	80134ba <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8013592:	e000      	b.n	8013596 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8013594:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8013596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013598:	2b00      	cmp	r3, #0
 801359a:	d12d      	bne.n	80135f8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801359c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801359e:	2b00      	cmp	r3, #0
 80135a0:	d01c      	beq.n	80135dc <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80135a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135a4:	88db      	ldrh	r3, [r3, #6]
 80135a6:	b29a      	uxth	r2, r3
 80135a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135aa:	889b      	ldrh	r3, [r3, #4]
 80135ac:	b29b      	uxth	r3, r3
 80135ae:	429a      	cmp	r2, r3
 80135b0:	d906      	bls.n	80135c0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80135b2:	4b45      	ldr	r3, [pc, #276]	; (80136c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80135b4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80135b8:	4944      	ldr	r1, [pc, #272]	; (80136cc <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80135ba:	4845      	ldr	r0, [pc, #276]	; (80136d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80135bc:	f004 fe3a 	bl	8018234 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80135c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135c2:	68ba      	ldr	r2, [r7, #8]
 80135c4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80135c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135c8:	88db      	ldrh	r3, [r3, #6]
 80135ca:	b29a      	uxth	r2, r3
 80135cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135ce:	889b      	ldrh	r3, [r3, #4]
 80135d0:	b29b      	uxth	r3, r3
 80135d2:	429a      	cmp	r2, r3
 80135d4:	d010      	beq.n	80135f8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80135d6:	2300      	movs	r3, #0
 80135d8:	623b      	str	r3, [r7, #32]
 80135da:	e00d      	b.n	80135f8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80135dc:	68fb      	ldr	r3, [r7, #12]
 80135de:	685b      	ldr	r3, [r3, #4]
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	d006      	beq.n	80135f2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80135e4:	4b38      	ldr	r3, [pc, #224]	; (80136c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80135e6:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80135ea:	493a      	ldr	r1, [pc, #232]	; (80136d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80135ec:	4838      	ldr	r0, [pc, #224]	; (80136d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80135ee:	f004 fe21 	bl	8018234 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80135f2:	68fb      	ldr	r3, [r7, #12]
 80135f4:	68ba      	ldr	r2, [r7, #8]
 80135f6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	d105      	bne.n	801360a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80135fe:	68fb      	ldr	r3, [r7, #12]
 8013600:	7f9b      	ldrb	r3, [r3, #30]
 8013602:	f003 0301 	and.w	r3, r3, #1
 8013606:	2b00      	cmp	r3, #0
 8013608:	d059      	beq.n	80136be <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801360a:	6a3b      	ldr	r3, [r7, #32]
 801360c:	2b00      	cmp	r3, #0
 801360e:	d04f      	beq.n	80136b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8013610:	68fb      	ldr	r3, [r7, #12]
 8013612:	685b      	ldr	r3, [r3, #4]
 8013614:	2b00      	cmp	r3, #0
 8013616:	d006      	beq.n	8013626 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8013618:	68fb      	ldr	r3, [r7, #12]
 801361a:	685b      	ldr	r3, [r3, #4]
 801361c:	685b      	ldr	r3, [r3, #4]
 801361e:	889b      	ldrh	r3, [r3, #4]
 8013620:	b29b      	uxth	r3, r3
 8013622:	2b00      	cmp	r3, #0
 8013624:	d002      	beq.n	801362c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8013626:	2300      	movs	r3, #0
 8013628:	623b      	str	r3, [r7, #32]
 801362a:	e041      	b.n	80136b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801362c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801362e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8013630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013632:	681b      	ldr	r3, [r3, #0]
 8013634:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8013636:	e012      	b.n	801365e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8013638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801363a:	685b      	ldr	r3, [r3, #4]
 801363c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801363e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013640:	88db      	ldrh	r3, [r3, #6]
 8013642:	b29a      	uxth	r2, r3
 8013644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013646:	889b      	ldrh	r3, [r3, #4]
 8013648:	b29b      	uxth	r3, r3
 801364a:	429a      	cmp	r2, r3
 801364c:	d002      	beq.n	8013654 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801364e:	2300      	movs	r3, #0
 8013650:	623b      	str	r3, [r7, #32]
            break;
 8013652:	e007      	b.n	8013664 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8013654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013656:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8013658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801365a:	681b      	ldr	r3, [r3, #0]
 801365c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801365e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013660:	2b00      	cmp	r3, #0
 8013662:	d1e9      	bne.n	8013638 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8013664:	6a3b      	ldr	r3, [r7, #32]
 8013666:	2b00      	cmp	r3, #0
 8013668:	d022      	beq.n	80136b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801366a:	68fb      	ldr	r3, [r7, #12]
 801366c:	685b      	ldr	r3, [r3, #4]
 801366e:	2b00      	cmp	r3, #0
 8013670:	d106      	bne.n	8013680 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8013672:	4b15      	ldr	r3, [pc, #84]	; (80136c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013674:	f240 12df 	movw	r2, #479	; 0x1df
 8013678:	4917      	ldr	r1, [pc, #92]	; (80136d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801367a:	4815      	ldr	r0, [pc, #84]	; (80136d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801367c:	f004 fdda 	bl	8018234 <iprintf>
          LWIP_ASSERT("sanity check",
 8013680:	68fb      	ldr	r3, [r7, #12]
 8013682:	685b      	ldr	r3, [r3, #4]
 8013684:	685b      	ldr	r3, [r3, #4]
 8013686:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013688:	429a      	cmp	r2, r3
 801368a:	d106      	bne.n	801369a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801368c:	4b0e      	ldr	r3, [pc, #56]	; (80136c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801368e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8013692:	4911      	ldr	r1, [pc, #68]	; (80136d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013694:	480e      	ldr	r0, [pc, #56]	; (80136d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013696:	f004 fdcd 	bl	8018234 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801369a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801369c:	681b      	ldr	r3, [r3, #0]
 801369e:	2b00      	cmp	r3, #0
 80136a0:	d006      	beq.n	80136b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80136a2:	4b09      	ldr	r3, [pc, #36]	; (80136c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80136a4:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80136a8:	490c      	ldr	r1, [pc, #48]	; (80136dc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80136aa:	4809      	ldr	r0, [pc, #36]	; (80136d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80136ac:	f004 fdc2 	bl	8018234 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80136b0:	6a3b      	ldr	r3, [r7, #32]
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	bf14      	ite	ne
 80136b6:	2301      	movne	r3, #1
 80136b8:	2300      	moveq	r3, #0
 80136ba:	b2db      	uxtb	r3, r3
 80136bc:	e000      	b.n	80136c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80136be:	2300      	movs	r3, #0
}
 80136c0:	4618      	mov	r0, r3
 80136c2:	3730      	adds	r7, #48	; 0x30
 80136c4:	46bd      	mov	sp, r7
 80136c6:	bd80      	pop	{r7, pc}
 80136c8:	0801b2c8 	.word	0x0801b2c8
 80136cc:	0801b3ac 	.word	0x0801b3ac
 80136d0:	0801b310 	.word	0x0801b310
 80136d4:	0801b3cc 	.word	0x0801b3cc
 80136d8:	0801b404 	.word	0x0801b404
 80136dc:	0801b414 	.word	0x0801b414

080136e0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80136e0:	b580      	push	{r7, lr}
 80136e2:	b08e      	sub	sp, #56	; 0x38
 80136e4:	af00      	add	r7, sp, #0
 80136e6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	685b      	ldr	r3, [r3, #4]
 80136ec:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80136ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136f0:	781b      	ldrb	r3, [r3, #0]
 80136f2:	f003 030f 	and.w	r3, r3, #15
 80136f6:	b2db      	uxtb	r3, r3
 80136f8:	009b      	lsls	r3, r3, #2
 80136fa:	b2db      	uxtb	r3, r3
 80136fc:	2b14      	cmp	r3, #20
 80136fe:	f040 8167 	bne.w	80139d0 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8013702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013704:	88db      	ldrh	r3, [r3, #6]
 8013706:	b29b      	uxth	r3, r3
 8013708:	4618      	mov	r0, r3
 801370a:	f7f6 fe61 	bl	800a3d0 <lwip_htons>
 801370e:	4603      	mov	r3, r0
 8013710:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013714:	b29b      	uxth	r3, r3
 8013716:	00db      	lsls	r3, r3, #3
 8013718:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801371a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801371c:	885b      	ldrh	r3, [r3, #2]
 801371e:	b29b      	uxth	r3, r3
 8013720:	4618      	mov	r0, r3
 8013722:	f7f6 fe55 	bl	800a3d0 <lwip_htons>
 8013726:	4603      	mov	r3, r0
 8013728:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801372a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801372c:	781b      	ldrb	r3, [r3, #0]
 801372e:	f003 030f 	and.w	r3, r3, #15
 8013732:	b2db      	uxtb	r3, r3
 8013734:	009b      	lsls	r3, r3, #2
 8013736:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801373a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801373e:	b29b      	uxth	r3, r3
 8013740:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013742:	429a      	cmp	r2, r3
 8013744:	f0c0 8146 	bcc.w	80139d4 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8013748:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801374c:	b29b      	uxth	r3, r3
 801374e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013750:	1ad3      	subs	r3, r2, r3
 8013752:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8013754:	6878      	ldr	r0, [r7, #4]
 8013756:	f7f8 fa75 	bl	800bc44 <pbuf_clen>
 801375a:	4603      	mov	r3, r0
 801375c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801375e:	4b9f      	ldr	r3, [pc, #636]	; (80139dc <ip4_reass+0x2fc>)
 8013760:	881b      	ldrh	r3, [r3, #0]
 8013762:	461a      	mov	r2, r3
 8013764:	8c3b      	ldrh	r3, [r7, #32]
 8013766:	4413      	add	r3, r2
 8013768:	2b0a      	cmp	r3, #10
 801376a:	dd10      	ble.n	801378e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801376c:	8c3b      	ldrh	r3, [r7, #32]
 801376e:	4619      	mov	r1, r3
 8013770:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013772:	f7ff fd81 	bl	8013278 <ip_reass_remove_oldest_datagram>
 8013776:	4603      	mov	r3, r0
 8013778:	2b00      	cmp	r3, #0
 801377a:	f000 812d 	beq.w	80139d8 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801377e:	4b97      	ldr	r3, [pc, #604]	; (80139dc <ip4_reass+0x2fc>)
 8013780:	881b      	ldrh	r3, [r3, #0]
 8013782:	461a      	mov	r2, r3
 8013784:	8c3b      	ldrh	r3, [r7, #32]
 8013786:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013788:	2b0a      	cmp	r3, #10
 801378a:	f300 8125 	bgt.w	80139d8 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801378e:	4b94      	ldr	r3, [pc, #592]	; (80139e0 <ip4_reass+0x300>)
 8013790:	681b      	ldr	r3, [r3, #0]
 8013792:	633b      	str	r3, [r7, #48]	; 0x30
 8013794:	e015      	b.n	80137c2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8013796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013798:	695a      	ldr	r2, [r3, #20]
 801379a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801379c:	68db      	ldr	r3, [r3, #12]
 801379e:	429a      	cmp	r2, r3
 80137a0:	d10c      	bne.n	80137bc <ip4_reass+0xdc>
 80137a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137a4:	699a      	ldr	r2, [r3, #24]
 80137a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137a8:	691b      	ldr	r3, [r3, #16]
 80137aa:	429a      	cmp	r2, r3
 80137ac:	d106      	bne.n	80137bc <ip4_reass+0xdc>
 80137ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137b0:	899a      	ldrh	r2, [r3, #12]
 80137b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137b4:	889b      	ldrh	r3, [r3, #4]
 80137b6:	b29b      	uxth	r3, r3
 80137b8:	429a      	cmp	r2, r3
 80137ba:	d006      	beq.n	80137ca <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80137bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137be:	681b      	ldr	r3, [r3, #0]
 80137c0:	633b      	str	r3, [r7, #48]	; 0x30
 80137c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d1e6      	bne.n	8013796 <ip4_reass+0xb6>
 80137c8:	e000      	b.n	80137cc <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80137ca:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80137cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137ce:	2b00      	cmp	r3, #0
 80137d0:	d109      	bne.n	80137e6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80137d2:	8c3b      	ldrh	r3, [r7, #32]
 80137d4:	4619      	mov	r1, r3
 80137d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80137d8:	f7ff fdb0 	bl	801333c <ip_reass_enqueue_new_datagram>
 80137dc:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80137de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d11c      	bne.n	801381e <ip4_reass+0x13e>
      goto nullreturn;
 80137e4:	e109      	b.n	80139fa <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80137e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137e8:	88db      	ldrh	r3, [r3, #6]
 80137ea:	b29b      	uxth	r3, r3
 80137ec:	4618      	mov	r0, r3
 80137ee:	f7f6 fdef 	bl	800a3d0 <lwip_htons>
 80137f2:	4603      	mov	r3, r0
 80137f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d110      	bne.n	801381e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80137fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137fe:	89db      	ldrh	r3, [r3, #14]
 8013800:	4618      	mov	r0, r3
 8013802:	f7f6 fde5 	bl	800a3d0 <lwip_htons>
 8013806:	4603      	mov	r3, r0
 8013808:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801380c:	2b00      	cmp	r3, #0
 801380e:	d006      	beq.n	801381e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8013810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013812:	3308      	adds	r3, #8
 8013814:	2214      	movs	r2, #20
 8013816:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013818:	4618      	mov	r0, r3
 801381a:	f004 f9ac 	bl	8017b76 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801381e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013820:	88db      	ldrh	r3, [r3, #6]
 8013822:	b29b      	uxth	r3, r3
 8013824:	f003 0320 	and.w	r3, r3, #32
 8013828:	2b00      	cmp	r3, #0
 801382a:	bf0c      	ite	eq
 801382c:	2301      	moveq	r3, #1
 801382e:	2300      	movne	r3, #0
 8013830:	b2db      	uxtb	r3, r3
 8013832:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8013834:	69fb      	ldr	r3, [r7, #28]
 8013836:	2b00      	cmp	r3, #0
 8013838:	d00e      	beq.n	8013858 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801383a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801383c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801383e:	4413      	add	r3, r2
 8013840:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8013842:	8b7a      	ldrh	r2, [r7, #26]
 8013844:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013846:	429a      	cmp	r2, r3
 8013848:	f0c0 80a0 	bcc.w	801398c <ip4_reass+0x2ac>
 801384c:	8b7b      	ldrh	r3, [r7, #26]
 801384e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8013852:	4293      	cmp	r3, r2
 8013854:	f200 809a 	bhi.w	801398c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8013858:	69fa      	ldr	r2, [r7, #28]
 801385a:	6879      	ldr	r1, [r7, #4]
 801385c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801385e:	f7ff fdd5 	bl	801340c <ip_reass_chain_frag_into_datagram_and_validate>
 8013862:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8013864:	697b      	ldr	r3, [r7, #20]
 8013866:	f1b3 3fff 	cmp.w	r3, #4294967295
 801386a:	f000 8091 	beq.w	8013990 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801386e:	4b5b      	ldr	r3, [pc, #364]	; (80139dc <ip4_reass+0x2fc>)
 8013870:	881a      	ldrh	r2, [r3, #0]
 8013872:	8c3b      	ldrh	r3, [r7, #32]
 8013874:	4413      	add	r3, r2
 8013876:	b29a      	uxth	r2, r3
 8013878:	4b58      	ldr	r3, [pc, #352]	; (80139dc <ip4_reass+0x2fc>)
 801387a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801387c:	69fb      	ldr	r3, [r7, #28]
 801387e:	2b00      	cmp	r3, #0
 8013880:	d00d      	beq.n	801389e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8013882:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013884:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013886:	4413      	add	r3, r2
 8013888:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801388a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801388c:	8a7a      	ldrh	r2, [r7, #18]
 801388e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8013890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013892:	7f9b      	ldrb	r3, [r3, #30]
 8013894:	f043 0301 	orr.w	r3, r3, #1
 8013898:	b2da      	uxtb	r2, r3
 801389a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801389c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801389e:	697b      	ldr	r3, [r7, #20]
 80138a0:	2b01      	cmp	r3, #1
 80138a2:	d171      	bne.n	8013988 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80138a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138a6:	8b9b      	ldrh	r3, [r3, #28]
 80138a8:	3314      	adds	r3, #20
 80138aa:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80138ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138ae:	685b      	ldr	r3, [r3, #4]
 80138b0:	685b      	ldr	r3, [r3, #4]
 80138b2:	681b      	ldr	r3, [r3, #0]
 80138b4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80138b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138b8:	685b      	ldr	r3, [r3, #4]
 80138ba:	685b      	ldr	r3, [r3, #4]
 80138bc:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80138be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138c0:	3308      	adds	r3, #8
 80138c2:	2214      	movs	r2, #20
 80138c4:	4619      	mov	r1, r3
 80138c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80138c8:	f004 f955 	bl	8017b76 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80138cc:	8a3b      	ldrh	r3, [r7, #16]
 80138ce:	4618      	mov	r0, r3
 80138d0:	f7f6 fd7e 	bl	800a3d0 <lwip_htons>
 80138d4:	4603      	mov	r3, r0
 80138d6:	461a      	mov	r2, r3
 80138d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138da:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80138dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138de:	2200      	movs	r2, #0
 80138e0:	719a      	strb	r2, [r3, #6]
 80138e2:	2200      	movs	r2, #0
 80138e4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80138e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138e8:	2200      	movs	r2, #0
 80138ea:	729a      	strb	r2, [r3, #10]
 80138ec:	2200      	movs	r2, #0
 80138ee:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80138f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138f2:	685b      	ldr	r3, [r3, #4]
 80138f4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80138f6:	e00d      	b.n	8013914 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80138f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80138fa:	685b      	ldr	r3, [r3, #4]
 80138fc:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80138fe:	2114      	movs	r1, #20
 8013900:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013902:	f7f8 f88b 	bl	800ba1c <pbuf_remove_header>
      pbuf_cat(p, r);
 8013906:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013908:	6878      	ldr	r0, [r7, #4]
 801390a:	f7f8 f9db 	bl	800bcc4 <pbuf_cat>
      r = iprh->next_pbuf;
 801390e:	68fb      	ldr	r3, [r7, #12]
 8013910:	681b      	ldr	r3, [r3, #0]
 8013912:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8013914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013916:	2b00      	cmp	r3, #0
 8013918:	d1ee      	bne.n	80138f8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801391a:	4b31      	ldr	r3, [pc, #196]	; (80139e0 <ip4_reass+0x300>)
 801391c:	681b      	ldr	r3, [r3, #0]
 801391e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013920:	429a      	cmp	r2, r3
 8013922:	d102      	bne.n	801392a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8013924:	2300      	movs	r3, #0
 8013926:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013928:	e010      	b.n	801394c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801392a:	4b2d      	ldr	r3, [pc, #180]	; (80139e0 <ip4_reass+0x300>)
 801392c:	681b      	ldr	r3, [r3, #0]
 801392e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013930:	e007      	b.n	8013942 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8013932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013934:	681b      	ldr	r3, [r3, #0]
 8013936:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013938:	429a      	cmp	r2, r3
 801393a:	d006      	beq.n	801394a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801393c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801393e:	681b      	ldr	r3, [r3, #0]
 8013940:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013944:	2b00      	cmp	r3, #0
 8013946:	d1f4      	bne.n	8013932 <ip4_reass+0x252>
 8013948:	e000      	b.n	801394c <ip4_reass+0x26c>
          break;
 801394a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801394c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801394e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013950:	f7ff fd2e 	bl	80133b0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8013954:	6878      	ldr	r0, [r7, #4]
 8013956:	f7f8 f975 	bl	800bc44 <pbuf_clen>
 801395a:	4603      	mov	r3, r0
 801395c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801395e:	4b1f      	ldr	r3, [pc, #124]	; (80139dc <ip4_reass+0x2fc>)
 8013960:	881b      	ldrh	r3, [r3, #0]
 8013962:	8c3a      	ldrh	r2, [r7, #32]
 8013964:	429a      	cmp	r2, r3
 8013966:	d906      	bls.n	8013976 <ip4_reass+0x296>
 8013968:	4b1e      	ldr	r3, [pc, #120]	; (80139e4 <ip4_reass+0x304>)
 801396a:	f240 229b 	movw	r2, #667	; 0x29b
 801396e:	491e      	ldr	r1, [pc, #120]	; (80139e8 <ip4_reass+0x308>)
 8013970:	481e      	ldr	r0, [pc, #120]	; (80139ec <ip4_reass+0x30c>)
 8013972:	f004 fc5f 	bl	8018234 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8013976:	4b19      	ldr	r3, [pc, #100]	; (80139dc <ip4_reass+0x2fc>)
 8013978:	881a      	ldrh	r2, [r3, #0]
 801397a:	8c3b      	ldrh	r3, [r7, #32]
 801397c:	1ad3      	subs	r3, r2, r3
 801397e:	b29a      	uxth	r2, r3
 8013980:	4b16      	ldr	r3, [pc, #88]	; (80139dc <ip4_reass+0x2fc>)
 8013982:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	e03c      	b.n	8013a02 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8013988:	2300      	movs	r3, #0
 801398a:	e03a      	b.n	8013a02 <ip4_reass+0x322>
      goto nullreturn_ipr;
 801398c:	bf00      	nop
 801398e:	e000      	b.n	8013992 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8013990:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8013992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013994:	2b00      	cmp	r3, #0
 8013996:	d106      	bne.n	80139a6 <ip4_reass+0x2c6>
 8013998:	4b12      	ldr	r3, [pc, #72]	; (80139e4 <ip4_reass+0x304>)
 801399a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801399e:	4914      	ldr	r1, [pc, #80]	; (80139f0 <ip4_reass+0x310>)
 80139a0:	4812      	ldr	r0, [pc, #72]	; (80139ec <ip4_reass+0x30c>)
 80139a2:	f004 fc47 	bl	8018234 <iprintf>
  if (ipr->p == NULL) {
 80139a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139a8:	685b      	ldr	r3, [r3, #4]
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	d124      	bne.n	80139f8 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80139ae:	4b0c      	ldr	r3, [pc, #48]	; (80139e0 <ip4_reass+0x300>)
 80139b0:	681b      	ldr	r3, [r3, #0]
 80139b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80139b4:	429a      	cmp	r2, r3
 80139b6:	d006      	beq.n	80139c6 <ip4_reass+0x2e6>
 80139b8:	4b0a      	ldr	r3, [pc, #40]	; (80139e4 <ip4_reass+0x304>)
 80139ba:	f240 22ab 	movw	r2, #683	; 0x2ab
 80139be:	490d      	ldr	r1, [pc, #52]	; (80139f4 <ip4_reass+0x314>)
 80139c0:	480a      	ldr	r0, [pc, #40]	; (80139ec <ip4_reass+0x30c>)
 80139c2:	f004 fc37 	bl	8018234 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80139c6:	2100      	movs	r1, #0
 80139c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80139ca:	f7ff fcf1 	bl	80133b0 <ip_reass_dequeue_datagram>
 80139ce:	e014      	b.n	80139fa <ip4_reass+0x31a>
    goto nullreturn;
 80139d0:	bf00      	nop
 80139d2:	e012      	b.n	80139fa <ip4_reass+0x31a>
    goto nullreturn;
 80139d4:	bf00      	nop
 80139d6:	e010      	b.n	80139fa <ip4_reass+0x31a>
      goto nullreturn;
 80139d8:	bf00      	nop
 80139da:	e00e      	b.n	80139fa <ip4_reass+0x31a>
 80139dc:	20004d00 	.word	0x20004d00
 80139e0:	20004cfc 	.word	0x20004cfc
 80139e4:	0801b2c8 	.word	0x0801b2c8
 80139e8:	0801b438 	.word	0x0801b438
 80139ec:	0801b310 	.word	0x0801b310
 80139f0:	0801b454 	.word	0x0801b454
 80139f4:	0801b460 	.word	0x0801b460
  }

nullreturn:
 80139f8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80139fa:	6878      	ldr	r0, [r7, #4]
 80139fc:	f7f8 f894 	bl	800bb28 <pbuf_free>
  return NULL;
 8013a00:	2300      	movs	r3, #0
}
 8013a02:	4618      	mov	r0, r3
 8013a04:	3738      	adds	r7, #56	; 0x38
 8013a06:	46bd      	mov	sp, r7
 8013a08:	bd80      	pop	{r7, pc}
 8013a0a:	bf00      	nop

08013a0c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8013a0c:	b580      	push	{r7, lr}
 8013a0e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8013a10:	2005      	movs	r0, #5
 8013a12:	f7f7 f993 	bl	800ad3c <memp_malloc>
 8013a16:	4603      	mov	r3, r0
}
 8013a18:	4618      	mov	r0, r3
 8013a1a:	bd80      	pop	{r7, pc}

08013a1c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8013a1c:	b580      	push	{r7, lr}
 8013a1e:	b082      	sub	sp, #8
 8013a20:	af00      	add	r7, sp, #0
 8013a22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d106      	bne.n	8013a38 <ip_frag_free_pbuf_custom_ref+0x1c>
 8013a2a:	4b07      	ldr	r3, [pc, #28]	; (8013a48 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8013a2c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8013a30:	4906      	ldr	r1, [pc, #24]	; (8013a4c <ip_frag_free_pbuf_custom_ref+0x30>)
 8013a32:	4807      	ldr	r0, [pc, #28]	; (8013a50 <ip_frag_free_pbuf_custom_ref+0x34>)
 8013a34:	f004 fbfe 	bl	8018234 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8013a38:	6879      	ldr	r1, [r7, #4]
 8013a3a:	2005      	movs	r0, #5
 8013a3c:	f7f7 f9d0 	bl	800ade0 <memp_free>
}
 8013a40:	bf00      	nop
 8013a42:	3708      	adds	r7, #8
 8013a44:	46bd      	mov	sp, r7
 8013a46:	bd80      	pop	{r7, pc}
 8013a48:	0801b2c8 	.word	0x0801b2c8
 8013a4c:	0801b480 	.word	0x0801b480
 8013a50:	0801b310 	.word	0x0801b310

08013a54 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8013a54:	b580      	push	{r7, lr}
 8013a56:	b084      	sub	sp, #16
 8013a58:	af00      	add	r7, sp, #0
 8013a5a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8013a60:	68fb      	ldr	r3, [r7, #12]
 8013a62:	2b00      	cmp	r3, #0
 8013a64:	d106      	bne.n	8013a74 <ipfrag_free_pbuf_custom+0x20>
 8013a66:	4b11      	ldr	r3, [pc, #68]	; (8013aac <ipfrag_free_pbuf_custom+0x58>)
 8013a68:	f240 22ce 	movw	r2, #718	; 0x2ce
 8013a6c:	4910      	ldr	r1, [pc, #64]	; (8013ab0 <ipfrag_free_pbuf_custom+0x5c>)
 8013a6e:	4811      	ldr	r0, [pc, #68]	; (8013ab4 <ipfrag_free_pbuf_custom+0x60>)
 8013a70:	f004 fbe0 	bl	8018234 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8013a74:	68fa      	ldr	r2, [r7, #12]
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	429a      	cmp	r2, r3
 8013a7a:	d006      	beq.n	8013a8a <ipfrag_free_pbuf_custom+0x36>
 8013a7c:	4b0b      	ldr	r3, [pc, #44]	; (8013aac <ipfrag_free_pbuf_custom+0x58>)
 8013a7e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8013a82:	490d      	ldr	r1, [pc, #52]	; (8013ab8 <ipfrag_free_pbuf_custom+0x64>)
 8013a84:	480b      	ldr	r0, [pc, #44]	; (8013ab4 <ipfrag_free_pbuf_custom+0x60>)
 8013a86:	f004 fbd5 	bl	8018234 <iprintf>
  if (pcr->original != NULL) {
 8013a8a:	68fb      	ldr	r3, [r7, #12]
 8013a8c:	695b      	ldr	r3, [r3, #20]
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d004      	beq.n	8013a9c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8013a92:	68fb      	ldr	r3, [r7, #12]
 8013a94:	695b      	ldr	r3, [r3, #20]
 8013a96:	4618      	mov	r0, r3
 8013a98:	f7f8 f846 	bl	800bb28 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8013a9c:	68f8      	ldr	r0, [r7, #12]
 8013a9e:	f7ff ffbd 	bl	8013a1c <ip_frag_free_pbuf_custom_ref>
}
 8013aa2:	bf00      	nop
 8013aa4:	3710      	adds	r7, #16
 8013aa6:	46bd      	mov	sp, r7
 8013aa8:	bd80      	pop	{r7, pc}
 8013aaa:	bf00      	nop
 8013aac:	0801b2c8 	.word	0x0801b2c8
 8013ab0:	0801b48c 	.word	0x0801b48c
 8013ab4:	0801b310 	.word	0x0801b310
 8013ab8:	0801b498 	.word	0x0801b498

08013abc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8013abc:	b580      	push	{r7, lr}
 8013abe:	b094      	sub	sp, #80	; 0x50
 8013ac0:	af02      	add	r7, sp, #8
 8013ac2:	60f8      	str	r0, [r7, #12]
 8013ac4:	60b9      	str	r1, [r7, #8]
 8013ac6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8013ac8:	2300      	movs	r3, #0
 8013aca:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8013ace:	68bb      	ldr	r3, [r7, #8]
 8013ad0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013ad2:	3b14      	subs	r3, #20
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	da00      	bge.n	8013ada <ip4_frag+0x1e>
 8013ad8:	3307      	adds	r3, #7
 8013ada:	10db      	asrs	r3, r3, #3
 8013adc:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8013ade:	2314      	movs	r3, #20
 8013ae0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8013ae2:	68fb      	ldr	r3, [r7, #12]
 8013ae4:	685b      	ldr	r3, [r3, #4]
 8013ae6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8013ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013aea:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8013aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013aee:	781b      	ldrb	r3, [r3, #0]
 8013af0:	f003 030f 	and.w	r3, r3, #15
 8013af4:	b2db      	uxtb	r3, r3
 8013af6:	009b      	lsls	r3, r3, #2
 8013af8:	b2db      	uxtb	r3, r3
 8013afa:	2b14      	cmp	r3, #20
 8013afc:	d002      	beq.n	8013b04 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8013afe:	f06f 0305 	mvn.w	r3, #5
 8013b02:	e110      	b.n	8013d26 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8013b04:	68fb      	ldr	r3, [r7, #12]
 8013b06:	895b      	ldrh	r3, [r3, #10]
 8013b08:	2b13      	cmp	r3, #19
 8013b0a:	d809      	bhi.n	8013b20 <ip4_frag+0x64>
 8013b0c:	4b88      	ldr	r3, [pc, #544]	; (8013d30 <ip4_frag+0x274>)
 8013b0e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8013b12:	4988      	ldr	r1, [pc, #544]	; (8013d34 <ip4_frag+0x278>)
 8013b14:	4888      	ldr	r0, [pc, #544]	; (8013d38 <ip4_frag+0x27c>)
 8013b16:	f004 fb8d 	bl	8018234 <iprintf>
 8013b1a:	f06f 0305 	mvn.w	r3, #5
 8013b1e:	e102      	b.n	8013d26 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8013b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b22:	88db      	ldrh	r3, [r3, #6]
 8013b24:	b29b      	uxth	r3, r3
 8013b26:	4618      	mov	r0, r3
 8013b28:	f7f6 fc52 	bl	800a3d0 <lwip_htons>
 8013b2c:	4603      	mov	r3, r0
 8013b2e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8013b30:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013b32:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013b36:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8013b3a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013b3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013b40:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8013b42:	68fb      	ldr	r3, [r7, #12]
 8013b44:	891b      	ldrh	r3, [r3, #8]
 8013b46:	3b14      	subs	r3, #20
 8013b48:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8013b4c:	e0e1      	b.n	8013d12 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8013b4e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013b50:	00db      	lsls	r3, r3, #3
 8013b52:	b29b      	uxth	r3, r3
 8013b54:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013b58:	4293      	cmp	r3, r2
 8013b5a:	bf28      	it	cs
 8013b5c:	4613      	movcs	r3, r2
 8013b5e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8013b60:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013b64:	2114      	movs	r1, #20
 8013b66:	200e      	movs	r0, #14
 8013b68:	f7f7 fcfa 	bl	800b560 <pbuf_alloc>
 8013b6c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8013b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	f000 80d5 	beq.w	8013d20 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8013b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b78:	895b      	ldrh	r3, [r3, #10]
 8013b7a:	2b13      	cmp	r3, #19
 8013b7c:	d806      	bhi.n	8013b8c <ip4_frag+0xd0>
 8013b7e:	4b6c      	ldr	r3, [pc, #432]	; (8013d30 <ip4_frag+0x274>)
 8013b80:	f44f 7249 	mov.w	r2, #804	; 0x324
 8013b84:	496d      	ldr	r1, [pc, #436]	; (8013d3c <ip4_frag+0x280>)
 8013b86:	486c      	ldr	r0, [pc, #432]	; (8013d38 <ip4_frag+0x27c>)
 8013b88:	f004 fb54 	bl	8018234 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8013b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b8e:	685b      	ldr	r3, [r3, #4]
 8013b90:	2214      	movs	r2, #20
 8013b92:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013b94:	4618      	mov	r0, r3
 8013b96:	f003 ffee 	bl	8017b76 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8013b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b9c:	685b      	ldr	r3, [r3, #4]
 8013b9e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8013ba0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013ba2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8013ba6:	e064      	b.n	8013c72 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8013ba8:	68fb      	ldr	r3, [r7, #12]
 8013baa:	895a      	ldrh	r2, [r3, #10]
 8013bac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013bae:	1ad3      	subs	r3, r2, r3
 8013bb0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8013bb2:	68fb      	ldr	r3, [r7, #12]
 8013bb4:	895b      	ldrh	r3, [r3, #10]
 8013bb6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8013bb8:	429a      	cmp	r2, r3
 8013bba:	d906      	bls.n	8013bca <ip4_frag+0x10e>
 8013bbc:	4b5c      	ldr	r3, [pc, #368]	; (8013d30 <ip4_frag+0x274>)
 8013bbe:	f240 322d 	movw	r2, #813	; 0x32d
 8013bc2:	495f      	ldr	r1, [pc, #380]	; (8013d40 <ip4_frag+0x284>)
 8013bc4:	485c      	ldr	r0, [pc, #368]	; (8013d38 <ip4_frag+0x27c>)
 8013bc6:	f004 fb35 	bl	8018234 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8013bca:	8bfa      	ldrh	r2, [r7, #30]
 8013bcc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013bd0:	4293      	cmp	r3, r2
 8013bd2:	bf28      	it	cs
 8013bd4:	4613      	movcs	r3, r2
 8013bd6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8013bda:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d105      	bne.n	8013bee <ip4_frag+0x132>
        poff = 0;
 8013be2:	2300      	movs	r3, #0
 8013be4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8013be6:	68fb      	ldr	r3, [r7, #12]
 8013be8:	681b      	ldr	r3, [r3, #0]
 8013bea:	60fb      	str	r3, [r7, #12]
        continue;
 8013bec:	e041      	b.n	8013c72 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8013bee:	f7ff ff0d 	bl	8013a0c <ip_frag_alloc_pbuf_custom_ref>
 8013bf2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8013bf4:	69bb      	ldr	r3, [r7, #24]
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	d103      	bne.n	8013c02 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8013bfa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013bfc:	f7f7 ff94 	bl	800bb28 <pbuf_free>
        goto memerr;
 8013c00:	e08f      	b.n	8013d22 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013c02:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8013c04:	68fb      	ldr	r3, [r7, #12]
 8013c06:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013c08:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013c0a:	4413      	add	r3, r2
 8013c0c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8013c10:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8013c14:	9201      	str	r2, [sp, #4]
 8013c16:	9300      	str	r3, [sp, #0]
 8013c18:	4603      	mov	r3, r0
 8013c1a:	2241      	movs	r2, #65	; 0x41
 8013c1c:	2000      	movs	r0, #0
 8013c1e:	f7f7 fdc9 	bl	800b7b4 <pbuf_alloced_custom>
 8013c22:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8013c24:	697b      	ldr	r3, [r7, #20]
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	d106      	bne.n	8013c38 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8013c2a:	69b8      	ldr	r0, [r7, #24]
 8013c2c:	f7ff fef6 	bl	8013a1c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8013c30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013c32:	f7f7 ff79 	bl	800bb28 <pbuf_free>
        goto memerr;
 8013c36:	e074      	b.n	8013d22 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8013c38:	68f8      	ldr	r0, [r7, #12]
 8013c3a:	f7f8 f81b 	bl	800bc74 <pbuf_ref>
      pcr->original = p;
 8013c3e:	69bb      	ldr	r3, [r7, #24]
 8013c40:	68fa      	ldr	r2, [r7, #12]
 8013c42:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8013c44:	69bb      	ldr	r3, [r7, #24]
 8013c46:	4a3f      	ldr	r2, [pc, #252]	; (8013d44 <ip4_frag+0x288>)
 8013c48:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8013c4a:	6979      	ldr	r1, [r7, #20]
 8013c4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013c4e:	f7f8 f839 	bl	800bcc4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8013c52:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8013c56:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013c5a:	1ad3      	subs	r3, r2, r3
 8013c5c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8013c60:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	d004      	beq.n	8013c72 <ip4_frag+0x1b6>
        poff = 0;
 8013c68:	2300      	movs	r3, #0
 8013c6a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8013c6c:	68fb      	ldr	r3, [r7, #12]
 8013c6e:	681b      	ldr	r3, [r3, #0]
 8013c70:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8013c72:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d196      	bne.n	8013ba8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8013c7a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8013c7c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013c80:	4413      	add	r3, r2
 8013c82:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8013c84:	68bb      	ldr	r3, [r7, #8]
 8013c86:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013c88:	f1a3 0213 	sub.w	r2, r3, #19
 8013c8c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013c90:	429a      	cmp	r2, r3
 8013c92:	bfcc      	ite	gt
 8013c94:	2301      	movgt	r3, #1
 8013c96:	2300      	movle	r3, #0
 8013c98:	b2db      	uxtb	r3, r3
 8013c9a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8013c9c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013ca0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013ca4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8013ca6:	6a3b      	ldr	r3, [r7, #32]
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	d002      	beq.n	8013cb2 <ip4_frag+0x1f6>
 8013cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	d003      	beq.n	8013cba <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8013cb2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013cb4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8013cb8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8013cba:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013cbc:	4618      	mov	r0, r3
 8013cbe:	f7f6 fb87 	bl	800a3d0 <lwip_htons>
 8013cc2:	4603      	mov	r3, r0
 8013cc4:	461a      	mov	r2, r3
 8013cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cc8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8013cca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013ccc:	3314      	adds	r3, #20
 8013cce:	b29b      	uxth	r3, r3
 8013cd0:	4618      	mov	r0, r3
 8013cd2:	f7f6 fb7d 	bl	800a3d0 <lwip_htons>
 8013cd6:	4603      	mov	r3, r0
 8013cd8:	461a      	mov	r2, r3
 8013cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cdc:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8013cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ce0:	2200      	movs	r2, #0
 8013ce2:	729a      	strb	r2, [r3, #10]
 8013ce4:	2200      	movs	r2, #0
 8013ce6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8013ce8:	68bb      	ldr	r3, [r7, #8]
 8013cea:	695b      	ldr	r3, [r3, #20]
 8013cec:	687a      	ldr	r2, [r7, #4]
 8013cee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013cf0:	68b8      	ldr	r0, [r7, #8]
 8013cf2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8013cf4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013cf6:	f7f7 ff17 	bl	800bb28 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8013cfa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013cfe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013d00:	1ad3      	subs	r3, r2, r3
 8013d02:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8013d06:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8013d0a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013d0c:	4413      	add	r3, r2
 8013d0e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8013d12:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	f47f af19 	bne.w	8013b4e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8013d1c:	2300      	movs	r3, #0
 8013d1e:	e002      	b.n	8013d26 <ip4_frag+0x26a>
      goto memerr;
 8013d20:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8013d22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013d26:	4618      	mov	r0, r3
 8013d28:	3748      	adds	r7, #72	; 0x48
 8013d2a:	46bd      	mov	sp, r7
 8013d2c:	bd80      	pop	{r7, pc}
 8013d2e:	bf00      	nop
 8013d30:	0801b2c8 	.word	0x0801b2c8
 8013d34:	0801b4a4 	.word	0x0801b4a4
 8013d38:	0801b310 	.word	0x0801b310
 8013d3c:	0801b4c0 	.word	0x0801b4c0
 8013d40:	0801b4e0 	.word	0x0801b4e0
 8013d44:	08013a55 	.word	0x08013a55

08013d48 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8013d48:	b580      	push	{r7, lr}
 8013d4a:	b086      	sub	sp, #24
 8013d4c:	af00      	add	r7, sp, #0
 8013d4e:	6078      	str	r0, [r7, #4]
 8013d50:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8013d52:	230e      	movs	r3, #14
 8013d54:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	895b      	ldrh	r3, [r3, #10]
 8013d5a:	2b0e      	cmp	r3, #14
 8013d5c:	d96e      	bls.n	8013e3c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	7bdb      	ldrb	r3, [r3, #15]
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d106      	bne.n	8013d74 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8013d66:	683b      	ldr	r3, [r7, #0]
 8013d68:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013d6c:	3301      	adds	r3, #1
 8013d6e:	b2da      	uxtb	r2, r3
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	685b      	ldr	r3, [r3, #4]
 8013d78:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8013d7a:	693b      	ldr	r3, [r7, #16]
 8013d7c:	7b1a      	ldrb	r2, [r3, #12]
 8013d7e:	7b5b      	ldrb	r3, [r3, #13]
 8013d80:	021b      	lsls	r3, r3, #8
 8013d82:	4313      	orrs	r3, r2
 8013d84:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8013d86:	693b      	ldr	r3, [r7, #16]
 8013d88:	781b      	ldrb	r3, [r3, #0]
 8013d8a:	f003 0301 	and.w	r3, r3, #1
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d023      	beq.n	8013dda <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8013d92:	693b      	ldr	r3, [r7, #16]
 8013d94:	781b      	ldrb	r3, [r3, #0]
 8013d96:	2b01      	cmp	r3, #1
 8013d98:	d10f      	bne.n	8013dba <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013d9a:	693b      	ldr	r3, [r7, #16]
 8013d9c:	785b      	ldrb	r3, [r3, #1]
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	d11b      	bne.n	8013dda <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8013da2:	693b      	ldr	r3, [r7, #16]
 8013da4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013da6:	2b5e      	cmp	r3, #94	; 0x5e
 8013da8:	d117      	bne.n	8013dda <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	7b5b      	ldrb	r3, [r3, #13]
 8013dae:	f043 0310 	orr.w	r3, r3, #16
 8013db2:	b2da      	uxtb	r2, r3
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	735a      	strb	r2, [r3, #13]
 8013db8:	e00f      	b.n	8013dda <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8013dba:	693b      	ldr	r3, [r7, #16]
 8013dbc:	2206      	movs	r2, #6
 8013dbe:	4928      	ldr	r1, [pc, #160]	; (8013e60 <ethernet_input+0x118>)
 8013dc0:	4618      	mov	r0, r3
 8013dc2:	f003 feca 	bl	8017b5a <memcmp>
 8013dc6:	4603      	mov	r3, r0
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	d106      	bne.n	8013dda <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	7b5b      	ldrb	r3, [r3, #13]
 8013dd0:	f043 0308 	orr.w	r3, r3, #8
 8013dd4:	b2da      	uxtb	r2, r3
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8013dda:	89fb      	ldrh	r3, [r7, #14]
 8013ddc:	2b08      	cmp	r3, #8
 8013dde:	d003      	beq.n	8013de8 <ethernet_input+0xa0>
 8013de0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8013de4:	d014      	beq.n	8013e10 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8013de6:	e032      	b.n	8013e4e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013de8:	683b      	ldr	r3, [r7, #0]
 8013dea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013dee:	f003 0308 	and.w	r3, r3, #8
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	d024      	beq.n	8013e40 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013df6:	8afb      	ldrh	r3, [r7, #22]
 8013df8:	4619      	mov	r1, r3
 8013dfa:	6878      	ldr	r0, [r7, #4]
 8013dfc:	f7f7 fe0e 	bl	800ba1c <pbuf_remove_header>
 8013e00:	4603      	mov	r3, r0
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	d11e      	bne.n	8013e44 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8013e06:	6839      	ldr	r1, [r7, #0]
 8013e08:	6878      	ldr	r0, [r7, #4]
 8013e0a:	f7fe ff27 	bl	8012c5c <ip4_input>
      break;
 8013e0e:	e013      	b.n	8013e38 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013e10:	683b      	ldr	r3, [r7, #0]
 8013e12:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013e16:	f003 0308 	and.w	r3, r3, #8
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	d014      	beq.n	8013e48 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013e1e:	8afb      	ldrh	r3, [r7, #22]
 8013e20:	4619      	mov	r1, r3
 8013e22:	6878      	ldr	r0, [r7, #4]
 8013e24:	f7f7 fdfa 	bl	800ba1c <pbuf_remove_header>
 8013e28:	4603      	mov	r3, r0
 8013e2a:	2b00      	cmp	r3, #0
 8013e2c:	d10e      	bne.n	8013e4c <ethernet_input+0x104>
        etharp_input(p, netif);
 8013e2e:	6839      	ldr	r1, [r7, #0]
 8013e30:	6878      	ldr	r0, [r7, #4]
 8013e32:	f7fe f8c7 	bl	8011fc4 <etharp_input>
      break;
 8013e36:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8013e38:	2300      	movs	r3, #0
 8013e3a:	e00c      	b.n	8013e56 <ethernet_input+0x10e>
    goto free_and_return;
 8013e3c:	bf00      	nop
 8013e3e:	e006      	b.n	8013e4e <ethernet_input+0x106>
        goto free_and_return;
 8013e40:	bf00      	nop
 8013e42:	e004      	b.n	8013e4e <ethernet_input+0x106>
        goto free_and_return;
 8013e44:	bf00      	nop
 8013e46:	e002      	b.n	8013e4e <ethernet_input+0x106>
        goto free_and_return;
 8013e48:	bf00      	nop
 8013e4a:	e000      	b.n	8013e4e <ethernet_input+0x106>
        goto free_and_return;
 8013e4c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8013e4e:	6878      	ldr	r0, [r7, #4]
 8013e50:	f7f7 fe6a 	bl	800bb28 <pbuf_free>
  return ERR_OK;
 8013e54:	2300      	movs	r3, #0
}
 8013e56:	4618      	mov	r0, r3
 8013e58:	3718      	adds	r7, #24
 8013e5a:	46bd      	mov	sp, r7
 8013e5c:	bd80      	pop	{r7, pc}
 8013e5e:	bf00      	nop
 8013e60:	0801b83c 	.word	0x0801b83c

08013e64 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8013e64:	b580      	push	{r7, lr}
 8013e66:	b086      	sub	sp, #24
 8013e68:	af00      	add	r7, sp, #0
 8013e6a:	60f8      	str	r0, [r7, #12]
 8013e6c:	60b9      	str	r1, [r7, #8]
 8013e6e:	607a      	str	r2, [r7, #4]
 8013e70:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8013e72:	8c3b      	ldrh	r3, [r7, #32]
 8013e74:	4618      	mov	r0, r3
 8013e76:	f7f6 faab 	bl	800a3d0 <lwip_htons>
 8013e7a:	4603      	mov	r3, r0
 8013e7c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8013e7e:	210e      	movs	r1, #14
 8013e80:	68b8      	ldr	r0, [r7, #8]
 8013e82:	f7f7 fdbb 	bl	800b9fc <pbuf_add_header>
 8013e86:	4603      	mov	r3, r0
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	d125      	bne.n	8013ed8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8013e8c:	68bb      	ldr	r3, [r7, #8]
 8013e8e:	685b      	ldr	r3, [r3, #4]
 8013e90:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8013e92:	693b      	ldr	r3, [r7, #16]
 8013e94:	8afa      	ldrh	r2, [r7, #22]
 8013e96:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8013e98:	693b      	ldr	r3, [r7, #16]
 8013e9a:	2206      	movs	r2, #6
 8013e9c:	6839      	ldr	r1, [r7, #0]
 8013e9e:	4618      	mov	r0, r3
 8013ea0:	f003 fe69 	bl	8017b76 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8013ea4:	693b      	ldr	r3, [r7, #16]
 8013ea6:	3306      	adds	r3, #6
 8013ea8:	2206      	movs	r2, #6
 8013eaa:	6879      	ldr	r1, [r7, #4]
 8013eac:	4618      	mov	r0, r3
 8013eae:	f003 fe62 	bl	8017b76 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8013eb2:	68fb      	ldr	r3, [r7, #12]
 8013eb4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013eb8:	2b06      	cmp	r3, #6
 8013eba:	d006      	beq.n	8013eca <ethernet_output+0x66>
 8013ebc:	4b0a      	ldr	r3, [pc, #40]	; (8013ee8 <ethernet_output+0x84>)
 8013ebe:	f44f 7299 	mov.w	r2, #306	; 0x132
 8013ec2:	490a      	ldr	r1, [pc, #40]	; (8013eec <ethernet_output+0x88>)
 8013ec4:	480a      	ldr	r0, [pc, #40]	; (8013ef0 <ethernet_output+0x8c>)
 8013ec6:	f004 f9b5 	bl	8018234 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8013eca:	68fb      	ldr	r3, [r7, #12]
 8013ecc:	699b      	ldr	r3, [r3, #24]
 8013ece:	68b9      	ldr	r1, [r7, #8]
 8013ed0:	68f8      	ldr	r0, [r7, #12]
 8013ed2:	4798      	blx	r3
 8013ed4:	4603      	mov	r3, r0
 8013ed6:	e002      	b.n	8013ede <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8013ed8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8013eda:	f06f 0301 	mvn.w	r3, #1
}
 8013ede:	4618      	mov	r0, r3
 8013ee0:	3718      	adds	r7, #24
 8013ee2:	46bd      	mov	sp, r7
 8013ee4:	bd80      	pop	{r7, pc}
 8013ee6:	bf00      	nop
 8013ee8:	0801b4f0 	.word	0x0801b4f0
 8013eec:	0801b528 	.word	0x0801b528
 8013ef0:	0801b55c 	.word	0x0801b55c

08013ef4 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8013ef4:	b580      	push	{r7, lr}
 8013ef6:	b082      	sub	sp, #8
 8013ef8:	af00      	add	r7, sp, #0
 8013efa:	6078      	str	r0, [r7, #4]
 8013efc:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8013efe:	683b      	ldr	r3, [r7, #0]
 8013f00:	2200      	movs	r2, #0
 8013f02:	2104      	movs	r1, #4
 8013f04:	4618      	mov	r0, r3
 8013f06:	f7f2 fad7 	bl	80064b8 <osMessageQueueNew>
 8013f0a:	4602      	mov	r2, r0
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	681b      	ldr	r3, [r3, #0]
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d102      	bne.n	8013f1e <sys_mbox_new+0x2a>
    return ERR_MEM;
 8013f18:	f04f 33ff 	mov.w	r3, #4294967295
 8013f1c:	e000      	b.n	8013f20 <sys_mbox_new+0x2c>

  return ERR_OK;
 8013f1e:	2300      	movs	r3, #0
}
 8013f20:	4618      	mov	r0, r3
 8013f22:	3708      	adds	r7, #8
 8013f24:	46bd      	mov	sp, r7
 8013f26:	bd80      	pop	{r7, pc}

08013f28 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8013f28:	b580      	push	{r7, lr}
 8013f2a:	b084      	sub	sp, #16
 8013f2c:	af00      	add	r7, sp, #0
 8013f2e:	6078      	str	r0, [r7, #4]
 8013f30:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	6818      	ldr	r0, [r3, #0]
 8013f36:	4639      	mov	r1, r7
 8013f38:	2300      	movs	r3, #0
 8013f3a:	2200      	movs	r2, #0
 8013f3c:	f7f2 fb42 	bl	80065c4 <osMessageQueuePut>
 8013f40:	4603      	mov	r3, r0
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	d102      	bne.n	8013f4c <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8013f46:	2300      	movs	r3, #0
 8013f48:	73fb      	strb	r3, [r7, #15]
 8013f4a:	e001      	b.n	8013f50 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8013f4c:	23ff      	movs	r3, #255	; 0xff
 8013f4e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8013f50:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013f54:	4618      	mov	r0, r3
 8013f56:	3710      	adds	r7, #16
 8013f58:	46bd      	mov	sp, r7
 8013f5a:	bd80      	pop	{r7, pc}

08013f5c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8013f5c:	b580      	push	{r7, lr}
 8013f5e:	b086      	sub	sp, #24
 8013f60:	af00      	add	r7, sp, #0
 8013f62:	60f8      	str	r0, [r7, #12]
 8013f64:	60b9      	str	r1, [r7, #8]
 8013f66:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8013f68:	f7f1 ff08 	bl	8005d7c <osKernelGetTickCount>
 8013f6c:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	d013      	beq.n	8013f9c <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8013f74:	68fb      	ldr	r3, [r7, #12]
 8013f76:	6818      	ldr	r0, [r3, #0]
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	2200      	movs	r2, #0
 8013f7c:	68b9      	ldr	r1, [r7, #8]
 8013f7e:	f7f2 fb95 	bl	80066ac <osMessageQueueGet>
 8013f82:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8013f84:	693b      	ldr	r3, [r7, #16]
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	d105      	bne.n	8013f96 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8013f8a:	f7f1 fef7 	bl	8005d7c <osKernelGetTickCount>
 8013f8e:	4602      	mov	r2, r0
 8013f90:	697b      	ldr	r3, [r7, #20]
 8013f92:	1ad3      	subs	r3, r2, r3
 8013f94:	e00f      	b.n	8013fb6 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8013f96:	f04f 33ff 	mov.w	r3, #4294967295
 8013f9a:	e00c      	b.n	8013fb6 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8013f9c:	68fb      	ldr	r3, [r7, #12]
 8013f9e:	6818      	ldr	r0, [r3, #0]
 8013fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8013fa4:	2200      	movs	r2, #0
 8013fa6:	68b9      	ldr	r1, [r7, #8]
 8013fa8:	f7f2 fb80 	bl	80066ac <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8013fac:	f7f1 fee6 	bl	8005d7c <osKernelGetTickCount>
 8013fb0:	4602      	mov	r2, r0
 8013fb2:	697b      	ldr	r3, [r7, #20]
 8013fb4:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8013fb6:	4618      	mov	r0, r3
 8013fb8:	3718      	adds	r7, #24
 8013fba:	46bd      	mov	sp, r7
 8013fbc:	bd80      	pop	{r7, pc}

08013fbe <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8013fbe:	b480      	push	{r7}
 8013fc0:	b083      	sub	sp, #12
 8013fc2:	af00      	add	r7, sp, #0
 8013fc4:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	681b      	ldr	r3, [r3, #0]
 8013fca:	2b00      	cmp	r3, #0
 8013fcc:	d101      	bne.n	8013fd2 <sys_mbox_valid+0x14>
    return 0;
 8013fce:	2300      	movs	r3, #0
 8013fd0:	e000      	b.n	8013fd4 <sys_mbox_valid+0x16>
  else
    return 1;
 8013fd2:	2301      	movs	r3, #1
}
 8013fd4:	4618      	mov	r0, r3
 8013fd6:	370c      	adds	r7, #12
 8013fd8:	46bd      	mov	sp, r7
 8013fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fde:	4770      	bx	lr

08013fe0 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8013fe0:	b580      	push	{r7, lr}
 8013fe2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8013fe4:	2000      	movs	r0, #0
 8013fe6:	f7f1 ffc5 	bl	8005f74 <osMutexNew>
 8013fea:	4603      	mov	r3, r0
 8013fec:	4a01      	ldr	r2, [pc, #4]	; (8013ff4 <sys_init+0x14>)
 8013fee:	6013      	str	r3, [r2, #0]
#endif
}
 8013ff0:	bf00      	nop
 8013ff2:	bd80      	pop	{r7, pc}
 8013ff4:	2000dc64 	.word	0x2000dc64

08013ff8 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8013ff8:	b580      	push	{r7, lr}
 8013ffa:	b082      	sub	sp, #8
 8013ffc:	af00      	add	r7, sp, #0
 8013ffe:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8014000:	2000      	movs	r0, #0
 8014002:	f7f1 ffb7 	bl	8005f74 <osMutexNew>
 8014006:	4602      	mov	r2, r0
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	681b      	ldr	r3, [r3, #0]
 8014010:	2b00      	cmp	r3, #0
 8014012:	d102      	bne.n	801401a <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8014014:	f04f 33ff 	mov.w	r3, #4294967295
 8014018:	e000      	b.n	801401c <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801401a:	2300      	movs	r3, #0
}
 801401c:	4618      	mov	r0, r3
 801401e:	3708      	adds	r7, #8
 8014020:	46bd      	mov	sp, r7
 8014022:	bd80      	pop	{r7, pc}

08014024 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8014024:	b580      	push	{r7, lr}
 8014026:	b082      	sub	sp, #8
 8014028:	af00      	add	r7, sp, #0
 801402a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	681b      	ldr	r3, [r3, #0]
 8014030:	f04f 31ff 	mov.w	r1, #4294967295
 8014034:	4618      	mov	r0, r3
 8014036:	f7f2 f837 	bl	80060a8 <osMutexAcquire>
#endif
}
 801403a:	bf00      	nop
 801403c:	3708      	adds	r7, #8
 801403e:	46bd      	mov	sp, r7
 8014040:	bd80      	pop	{r7, pc}

08014042 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8014042:	b580      	push	{r7, lr}
 8014044:	b082      	sub	sp, #8
 8014046:	af00      	add	r7, sp, #0
 8014048:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	681b      	ldr	r3, [r3, #0]
 801404e:	4618      	mov	r0, r3
 8014050:	f7f2 f888 	bl	8006164 <osMutexRelease>
}
 8014054:	bf00      	nop
 8014056:	3708      	adds	r7, #8
 8014058:	46bd      	mov	sp, r7
 801405a:	bd80      	pop	{r7, pc}

0801405c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801405c:	b580      	push	{r7, lr}
 801405e:	b08e      	sub	sp, #56	; 0x38
 8014060:	af00      	add	r7, sp, #0
 8014062:	60f8      	str	r0, [r7, #12]
 8014064:	60b9      	str	r1, [r7, #8]
 8014066:	607a      	str	r2, [r7, #4]
 8014068:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801406a:	f107 0314 	add.w	r3, r7, #20
 801406e:	2224      	movs	r2, #36	; 0x24
 8014070:	2100      	movs	r1, #0
 8014072:	4618      	mov	r0, r3
 8014074:	f003 fd8d 	bl	8017b92 <memset>
 8014078:	68fb      	ldr	r3, [r7, #12]
 801407a:	617b      	str	r3, [r7, #20]
 801407c:	683b      	ldr	r3, [r7, #0]
 801407e:	62bb      	str	r3, [r7, #40]	; 0x28
 8014080:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014082:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8014084:	f107 0314 	add.w	r3, r7, #20
 8014088:	461a      	mov	r2, r3
 801408a:	6879      	ldr	r1, [r7, #4]
 801408c:	68b8      	ldr	r0, [r7, #8]
 801408e:	f7f1 fe9d 	bl	8005dcc <osThreadNew>
 8014092:	4603      	mov	r3, r0
#endif
}
 8014094:	4618      	mov	r0, r3
 8014096:	3738      	adds	r7, #56	; 0x38
 8014098:	46bd      	mov	sp, r7
 801409a:	bd80      	pop	{r7, pc}

0801409c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801409c:	b580      	push	{r7, lr}
 801409e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 80140a0:	4b04      	ldr	r3, [pc, #16]	; (80140b4 <sys_arch_protect+0x18>)
 80140a2:	681b      	ldr	r3, [r3, #0]
 80140a4:	f04f 31ff 	mov.w	r1, #4294967295
 80140a8:	4618      	mov	r0, r3
 80140aa:	f7f1 fffd 	bl	80060a8 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 80140ae:	2301      	movs	r3, #1
}
 80140b0:	4618      	mov	r0, r3
 80140b2:	bd80      	pop	{r7, pc}
 80140b4:	2000dc64 	.word	0x2000dc64

080140b8 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80140b8:	b580      	push	{r7, lr}
 80140ba:	b082      	sub	sp, #8
 80140bc:	af00      	add	r7, sp, #0
 80140be:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80140c0:	4b04      	ldr	r3, [pc, #16]	; (80140d4 <sys_arch_unprotect+0x1c>)
 80140c2:	681b      	ldr	r3, [r3, #0]
 80140c4:	4618      	mov	r0, r3
 80140c6:	f7f2 f84d 	bl	8006164 <osMutexRelease>
}
 80140ca:	bf00      	nop
 80140cc:	3708      	adds	r7, #8
 80140ce:	46bd      	mov	sp, r7
 80140d0:	bd80      	pop	{r7, pc}
 80140d2:	bf00      	nop
 80140d4:	2000dc64 	.word	0x2000dc64

080140d8 <eMBFuncReadCoils>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
 80140d8:	b580      	push	{r7, lr}
 80140da:	b086      	sub	sp, #24
 80140dc:	af00      	add	r7, sp, #0
 80140de:	6078      	str	r0, [r7, #4]
 80140e0:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usCoilCount;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 80140e2:	2300      	movs	r3, #0
 80140e4:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 80140e6:	683b      	ldr	r3, [r7, #0]
 80140e8:	881b      	ldrh	r3, [r3, #0]
 80140ea:	2b05      	cmp	r3, #5
 80140ec:	d16c      	bne.n	80141c8 <eMBFuncReadCoils+0xf0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	3301      	adds	r3, #1
 80140f2:	781b      	ldrb	r3, [r3, #0]
 80140f4:	b29b      	uxth	r3, r3
 80140f6:	021b      	lsls	r3, r3, #8
 80140f8:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	3302      	adds	r3, #2
 80140fe:	781b      	ldrb	r3, [r3, #0]
 8014100:	b29a      	uxth	r2, r3
 8014102:	8abb      	ldrh	r3, [r7, #20]
 8014104:	4313      	orrs	r3, r2
 8014106:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8014108:	8abb      	ldrh	r3, [r7, #20]
 801410a:	3301      	adds	r3, #1
 801410c:	82bb      	strh	r3, [r7, #20]

        usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	3303      	adds	r3, #3
 8014112:	781b      	ldrb	r3, [r3, #0]
 8014114:	b29b      	uxth	r3, r3
 8014116:	021b      	lsls	r3, r3, #8
 8014118:	827b      	strh	r3, [r7, #18]
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	3304      	adds	r3, #4
 801411e:	781b      	ldrb	r3, [r3, #0]
 8014120:	b29a      	uxth	r2, r3
 8014122:	8a7b      	ldrh	r3, [r7, #18]
 8014124:	4313      	orrs	r3, r2
 8014126:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usCoilCount >= 1 ) &&
 8014128:	8a7b      	ldrh	r3, [r7, #18]
 801412a:	2b00      	cmp	r3, #0
 801412c:	d049      	beq.n	80141c2 <eMBFuncReadCoils+0xea>
 801412e:	8a7b      	ldrh	r3, [r7, #18]
 8014130:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8014134:	d245      	bcs.n	80141c2 <eMBFuncReadCoils+0xea>
            ( usCoilCount < MB_PDU_FUNC_READ_COILCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 801413a:	683b      	ldr	r3, [r7, #0]
 801413c:	2200      	movs	r2, #0
 801413e:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_COILS;
 8014140:	68fb      	ldr	r3, [r7, #12]
 8014142:	1c5a      	adds	r2, r3, #1
 8014144:	60fa      	str	r2, [r7, #12]
 8014146:	2201      	movs	r2, #1
 8014148:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 801414a:	683b      	ldr	r3, [r7, #0]
 801414c:	881b      	ldrh	r3, [r3, #0]
 801414e:	3301      	adds	r3, #1
 8014150:	b29a      	uxth	r2, r3
 8014152:	683b      	ldr	r3, [r7, #0]
 8014154:	801a      	strh	r2, [r3, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usCoilCount & 0x0007 ) != 0 )
 8014156:	8a7b      	ldrh	r3, [r7, #18]
 8014158:	f003 0307 	and.w	r3, r3, #7
 801415c:	2b00      	cmp	r3, #0
 801415e:	d006      	beq.n	801416e <eMBFuncReadCoils+0x96>
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
 8014160:	8a7b      	ldrh	r3, [r7, #18]
 8014162:	08db      	lsrs	r3, r3, #3
 8014164:	b29b      	uxth	r3, r3
 8014166:	b2db      	uxtb	r3, r3
 8014168:	3301      	adds	r3, #1
 801416a:	75fb      	strb	r3, [r7, #23]
 801416c:	e003      	b.n	8014176 <eMBFuncReadCoils+0x9e>
            }
            else
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
 801416e:	8a7b      	ldrh	r3, [r7, #18]
 8014170:	08db      	lsrs	r3, r3, #3
 8014172:	b29b      	uxth	r3, r3
 8014174:	75fb      	strb	r3, [r7, #23]
            }
            *pucFrameCur++ = ucNBytes;
 8014176:	68fb      	ldr	r3, [r7, #12]
 8014178:	1c5a      	adds	r2, r3, #1
 801417a:	60fa      	str	r2, [r7, #12]
 801417c:	7dfa      	ldrb	r2, [r7, #23]
 801417e:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8014180:	683b      	ldr	r3, [r7, #0]
 8014182:	881b      	ldrh	r3, [r3, #0]
 8014184:	3301      	adds	r3, #1
 8014186:	b29a      	uxth	r2, r3
 8014188:	683b      	ldr	r3, [r7, #0]
 801418a:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
 801418c:	8a7a      	ldrh	r2, [r7, #18]
 801418e:	8ab9      	ldrh	r1, [r7, #20]
 8014190:	2300      	movs	r3, #0
 8014192:	68f8      	ldr	r0, [r7, #12]
 8014194:	f002 fb3a 	bl	801680c <eMBRegCoilsCB>
 8014198:	4603      	mov	r3, r0
 801419a:	72fb      	strb	r3, [r7, #11]
                               MB_REG_READ );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 801419c:	7afb      	ldrb	r3, [r7, #11]
 801419e:	2b00      	cmp	r3, #0
 80141a0:	d006      	beq.n	80141b0 <eMBFuncReadCoils+0xd8>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 80141a2:	7afb      	ldrb	r3, [r7, #11]
 80141a4:	4618      	mov	r0, r3
 80141a6:	f001 f8f3 	bl	8015390 <prveMBError2Exception>
 80141aa:	4603      	mov	r3, r0
 80141ac:	75bb      	strb	r3, [r7, #22]
            if( eRegStatus != MB_ENOERR )
 80141ae:	e00d      	b.n	80141cc <eMBFuncReadCoils+0xf4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 80141b0:	683b      	ldr	r3, [r7, #0]
 80141b2:	881a      	ldrh	r2, [r3, #0]
 80141b4:	7dfb      	ldrb	r3, [r7, #23]
 80141b6:	b29b      	uxth	r3, r3
 80141b8:	4413      	add	r3, r2
 80141ba:	b29a      	uxth	r2, r3
 80141bc:	683b      	ldr	r3, [r7, #0]
 80141be:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 80141c0:	e004      	b.n	80141cc <eMBFuncReadCoils+0xf4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80141c2:	2303      	movs	r3, #3
 80141c4:	75bb      	strb	r3, [r7, #22]
 80141c6:	e001      	b.n	80141cc <eMBFuncReadCoils+0xf4>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80141c8:	2303      	movs	r3, #3
 80141ca:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 80141cc:	7dbb      	ldrb	r3, [r7, #22]
}
 80141ce:	4618      	mov	r0, r3
 80141d0:	3718      	adds	r7, #24
 80141d2:	46bd      	mov	sp, r7
 80141d4:	bd80      	pop	{r7, pc}

080141d6 <eMBFuncWriteCoil>:

#if MB_FUNC_WRITE_COIL_ENABLED > 0
eMBException
eMBFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
{
 80141d6:	b580      	push	{r7, lr}
 80141d8:	b084      	sub	sp, #16
 80141da:	af00      	add	r7, sp, #0
 80141dc:	6078      	str	r0, [r7, #4]
 80141de:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
 80141e0:	2300      	movs	r3, #0
 80141e2:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 80141e4:	683b      	ldr	r3, [r7, #0]
 80141e6:	881b      	ldrh	r3, [r3, #0]
 80141e8:	2b05      	cmp	r3, #5
 80141ea:	d140      	bne.n	801426e <eMBFuncWriteCoil+0x98>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	3301      	adds	r3, #1
 80141f0:	781b      	ldrb	r3, [r3, #0]
 80141f2:	b29b      	uxth	r3, r3
 80141f4:	021b      	lsls	r3, r3, #8
 80141f6:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	3302      	adds	r3, #2
 80141fc:	781b      	ldrb	r3, [r3, #0]
 80141fe:	b29a      	uxth	r2, r3
 8014200:	89bb      	ldrh	r3, [r7, #12]
 8014202:	4313      	orrs	r3, r2
 8014204:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8014206:	89bb      	ldrh	r3, [r7, #12]
 8014208:	3301      	adds	r3, #1
 801420a:	81bb      	strh	r3, [r7, #12]

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	3304      	adds	r3, #4
 8014210:	781b      	ldrb	r3, [r3, #0]
 8014212:	2b00      	cmp	r3, #0
 8014214:	d128      	bne.n	8014268 <eMBFuncWriteCoil+0x92>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	3303      	adds	r3, #3
 801421a:	781b      	ldrb	r3, [r3, #0]
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 801421c:	2bff      	cmp	r3, #255	; 0xff
 801421e:	d004      	beq.n	801422a <eMBFuncWriteCoil+0x54>
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	3303      	adds	r3, #3
 8014224:	781b      	ldrb	r3, [r3, #0]
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 8014226:	2b00      	cmp	r3, #0
 8014228:	d11e      	bne.n	8014268 <eMBFuncWriteCoil+0x92>
        {
            ucBuf[1] = 0;
 801422a:	2300      	movs	r3, #0
 801422c:	727b      	strb	r3, [r7, #9]
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	3303      	adds	r3, #3
 8014232:	781b      	ldrb	r3, [r3, #0]
 8014234:	2bff      	cmp	r3, #255	; 0xff
 8014236:	d102      	bne.n	801423e <eMBFuncWriteCoil+0x68>
            {
                ucBuf[0] = 1;
 8014238:	2301      	movs	r3, #1
 801423a:	723b      	strb	r3, [r7, #8]
 801423c:	e001      	b.n	8014242 <eMBFuncWriteCoil+0x6c>
            }
            else
            {
                ucBuf[0] = 0;
 801423e:	2300      	movs	r3, #0
 8014240:	723b      	strb	r3, [r7, #8]
            }
            eRegStatus =
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );
 8014242:	89b9      	ldrh	r1, [r7, #12]
 8014244:	f107 0008 	add.w	r0, r7, #8
 8014248:	2301      	movs	r3, #1
 801424a:	2201      	movs	r2, #1
 801424c:	f002 fade 	bl	801680c <eMBRegCoilsCB>
 8014250:	4603      	mov	r3, r0
 8014252:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8014254:	7afb      	ldrb	r3, [r7, #11]
 8014256:	2b00      	cmp	r3, #0
 8014258:	d00b      	beq.n	8014272 <eMBFuncWriteCoil+0x9c>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 801425a:	7afb      	ldrb	r3, [r7, #11]
 801425c:	4618      	mov	r0, r3
 801425e:	f001 f897 	bl	8015390 <prveMBError2Exception>
 8014262:	4603      	mov	r3, r0
 8014264:	73fb      	strb	r3, [r7, #15]
            if( eRegStatus != MB_ENOERR )
 8014266:	e004      	b.n	8014272 <eMBFuncWriteCoil+0x9c>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8014268:	2303      	movs	r3, #3
 801426a:	73fb      	strb	r3, [r7, #15]
 801426c:	e001      	b.n	8014272 <eMBFuncWriteCoil+0x9c>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 801426e:	2303      	movs	r3, #3
 8014270:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 8014272:	7bfb      	ldrb	r3, [r7, #15]
}
 8014274:	4618      	mov	r0, r3
 8014276:	3710      	adds	r7, #16
 8014278:	46bd      	mov	sp, r7
 801427a:	bd80      	pop	{r7, pc}

0801427c <eMBFuncWriteMultipleCoils>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_COILS_ENABLED > 0
eMBException
eMBFuncWriteMultipleCoils( UCHAR * pucFrame, USHORT * usLen )
{
 801427c:	b580      	push	{r7, lr}
 801427e:	b084      	sub	sp, #16
 8014280:	af00      	add	r7, sp, #0
 8014282:	6078      	str	r0, [r7, #4]
 8014284:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usCoilCnt;
    UCHAR           ucByteCount;
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
 8014286:	2300      	movs	r3, #0
 8014288:	73bb      	strb	r3, [r7, #14]
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 801428a:	683b      	ldr	r3, [r7, #0]
 801428c:	881b      	ldrh	r3, [r3, #0]
 801428e:	2b05      	cmp	r3, #5
 8014290:	d954      	bls.n	801433c <eMBFuncWriteMultipleCoils+0xc0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	3301      	adds	r3, #1
 8014296:	781b      	ldrb	r3, [r3, #0]
 8014298:	b29b      	uxth	r3, r3
 801429a:	021b      	lsls	r3, r3, #8
 801429c:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	3302      	adds	r3, #2
 80142a2:	781b      	ldrb	r3, [r3, #0]
 80142a4:	b29a      	uxth	r2, r3
 80142a6:	89bb      	ldrh	r3, [r7, #12]
 80142a8:	4313      	orrs	r3, r2
 80142aa:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 80142ac:	89bb      	ldrh	r3, [r7, #12]
 80142ae:	3301      	adds	r3, #1
 80142b0:	81bb      	strh	r3, [r7, #12]

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	3303      	adds	r3, #3
 80142b6:	781b      	ldrb	r3, [r3, #0]
 80142b8:	b29b      	uxth	r3, r3
 80142ba:	021b      	lsls	r3, r3, #8
 80142bc:	817b      	strh	r3, [r7, #10]
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	3304      	adds	r3, #4
 80142c2:	781b      	ldrb	r3, [r3, #0]
 80142c4:	b29a      	uxth	r2, r3
 80142c6:	897b      	ldrh	r3, [r7, #10]
 80142c8:	4313      	orrs	r3, r2
 80142ca:	817b      	strh	r3, [r7, #10]

        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	795b      	ldrb	r3, [r3, #5]
 80142d0:	727b      	strb	r3, [r7, #9]

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
 80142d2:	897b      	ldrh	r3, [r7, #10]
 80142d4:	f003 0307 	and.w	r3, r3, #7
 80142d8:	2b00      	cmp	r3, #0
 80142da:	d006      	beq.n	80142ea <eMBFuncWriteMultipleCoils+0x6e>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 80142dc:	897b      	ldrh	r3, [r7, #10]
 80142de:	08db      	lsrs	r3, r3, #3
 80142e0:	b29b      	uxth	r3, r3
 80142e2:	b2db      	uxtb	r3, r3
 80142e4:	3301      	adds	r3, #1
 80142e6:	73fb      	strb	r3, [r7, #15]
 80142e8:	e003      	b.n	80142f2 <eMBFuncWriteMultipleCoils+0x76>
        }
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
 80142ea:	897b      	ldrh	r3, [r7, #10]
 80142ec:	08db      	lsrs	r3, r3, #3
 80142ee:	b29b      	uxth	r3, r3
 80142f0:	73fb      	strb	r3, [r7, #15]
        }

        if( ( usCoilCnt >= 1 ) &&
 80142f2:	897b      	ldrh	r3, [r7, #10]
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	d01e      	beq.n	8014336 <eMBFuncWriteMultipleCoils+0xba>
 80142f8:	897b      	ldrh	r3, [r7, #10]
 80142fa:	f5b3 6ff6 	cmp.w	r3, #1968	; 0x7b0
 80142fe:	d81a      	bhi.n	8014336 <eMBFuncWriteMultipleCoils+0xba>
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
 8014300:	7bfa      	ldrb	r2, [r7, #15]
 8014302:	7a7b      	ldrb	r3, [r7, #9]
 8014304:	429a      	cmp	r2, r3
 8014306:	d116      	bne.n	8014336 <eMBFuncWriteMultipleCoils+0xba>
            ( ucByteCountVerify == ucByteCount ) )
        {
            eRegStatus =
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	1d98      	adds	r0, r3, #6
 801430c:	897a      	ldrh	r2, [r7, #10]
 801430e:	89b9      	ldrh	r1, [r7, #12]
 8014310:	2301      	movs	r3, #1
 8014312:	f002 fa7b 	bl	801680c <eMBRegCoilsCB>
 8014316:	4603      	mov	r3, r0
 8014318:	723b      	strb	r3, [r7, #8]
                               usRegAddress, usCoilCnt, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 801431a:	7a3b      	ldrb	r3, [r7, #8]
 801431c:	2b00      	cmp	r3, #0
 801431e:	d006      	beq.n	801432e <eMBFuncWriteMultipleCoils+0xb2>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8014320:	7a3b      	ldrb	r3, [r7, #8]
 8014322:	4618      	mov	r0, r3
 8014324:	f001 f834 	bl	8015390 <prveMBError2Exception>
 8014328:	4603      	mov	r3, r0
 801432a:	73bb      	strb	r3, [r7, #14]
            if( eRegStatus != MB_ENOERR )
 801432c:	e008      	b.n	8014340 <eMBFuncWriteMultipleCoils+0xc4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 801432e:	683b      	ldr	r3, [r7, #0]
 8014330:	2205      	movs	r2, #5
 8014332:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8014334:	e004      	b.n	8014340 <eMBFuncWriteMultipleCoils+0xc4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8014336:	2303      	movs	r3, #3
 8014338:	73bb      	strb	r3, [r7, #14]
 801433a:	e001      	b.n	8014340 <eMBFuncWriteMultipleCoils+0xc4>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 801433c:	2303      	movs	r3, #3
 801433e:	73bb      	strb	r3, [r7, #14]
    }
    return eStatus;
 8014340:	7bbb      	ldrb	r3, [r7, #14]
}
 8014342:	4618      	mov	r0, r3
 8014344:	3710      	adds	r7, #16
 8014346:	46bd      	mov	sp, r7
 8014348:	bd80      	pop	{r7, pc}

0801434a <eMBMasterFuncReadCoils>:
    return eErrStatus;
}

eMBException
eMBMasterFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
 801434a:	b580      	push	{r7, lr}
 801434c:	b086      	sub	sp, #24
 801434e:	af00      	add	r7, sp, #0
 8014350:	6078      	str	r0, [r7, #4]
 8014352:	6039      	str	r1, [r7, #0]
    UCHAR          *ucMBFrame;
    USHORT          usRegAddress;
    USHORT          usCoilCount;
    UCHAR           ucByteCount;

    eMBException    eStatus = MB_EX_NONE;
 8014354:	2300      	movs	r3, #0
 8014356:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, and it's read mode. This request don't need execute. */
    if ( xMBMasterRequestIsBroadcast() )
 8014358:	f003 faa6 	bl	80178a8 <xMBMasterRequestIsBroadcast>
 801435c:	4603      	mov	r3, r0
 801435e:	2b00      	cmp	r3, #0
 8014360:	d002      	beq.n	8014368 <eMBMasterFuncReadCoils+0x1e>
    {
    	eStatus = MB_EX_NONE;
 8014362:	2300      	movs	r3, #0
 8014364:	75bb      	strb	r3, [r7, #22]
 8014366:	e056      	b.n	8014416 <eMBMasterFuncReadCoils+0xcc>
    }
    else if ( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
 8014368:	683b      	ldr	r3, [r7, #0]
 801436a:	881b      	ldrh	r3, [r3, #0]
 801436c:	2b01      	cmp	r3, #1
 801436e:	d950      	bls.n	8014412 <eMBMasterFuncReadCoils+0xc8>
    {
    	vMBMasterGetPDUSndBuf(&ucMBFrame);
 8014370:	f107 030c 	add.w	r3, r7, #12
 8014374:	4618      	mov	r0, r3
 8014376:	f003 fa6b 	bl	8017850 <vMBMasterGetPDUSndBuf>
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
 801437a:	68fb      	ldr	r3, [r7, #12]
 801437c:	3301      	adds	r3, #1
 801437e:	781b      	ldrb	r3, [r3, #0]
 8014380:	b29b      	uxth	r3, r3
 8014382:	021b      	lsls	r3, r3, #8
 8014384:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
 8014386:	68fb      	ldr	r3, [r7, #12]
 8014388:	3302      	adds	r3, #2
 801438a:	781b      	ldrb	r3, [r3, #0]
 801438c:	b29a      	uxth	r2, r3
 801438e:	8abb      	ldrh	r3, [r7, #20]
 8014390:	4313      	orrs	r3, r2
 8014392:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8014394:	8abb      	ldrh	r3, [r7, #20]
 8014396:	3301      	adds	r3, #1
 8014398:	82bb      	strh	r3, [r7, #20]

        usCoilCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_COILCNT_OFF] << 8 );
 801439a:	68fb      	ldr	r3, [r7, #12]
 801439c:	3303      	adds	r3, #3
 801439e:	781b      	ldrb	r3, [r3, #0]
 80143a0:	b29b      	uxth	r3, r3
 80143a2:	021b      	lsls	r3, r3, #8
 80143a4:	827b      	strh	r3, [r7, #18]
        usCoilCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_COILCNT_OFF + 1] );
 80143a6:	68fb      	ldr	r3, [r7, #12]
 80143a8:	3304      	adds	r3, #4
 80143aa:	781b      	ldrb	r3, [r3, #0]
 80143ac:	b29a      	uxth	r2, r3
 80143ae:	8a7b      	ldrh	r3, [r7, #18]
 80143b0:	4313      	orrs	r3, r2
 80143b2:	827b      	strh	r3, [r7, #18]

        /* Test if the quantity of coils is a multiple of 8. If not last
         * byte is only partially field with unused coils set to zero. */
        if( ( usCoilCount & 0x0007 ) != 0 )
 80143b4:	8a7b      	ldrh	r3, [r7, #18]
 80143b6:	f003 0307 	and.w	r3, r3, #7
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d006      	beq.n	80143cc <eMBMasterFuncReadCoils+0x82>
        {
        	ucByteCount = ( UCHAR )( usCoilCount / 8 + 1 );
 80143be:	8a7b      	ldrh	r3, [r7, #18]
 80143c0:	08db      	lsrs	r3, r3, #3
 80143c2:	b29b      	uxth	r3, r3
 80143c4:	b2db      	uxtb	r3, r3
 80143c6:	3301      	adds	r3, #1
 80143c8:	75fb      	strb	r3, [r7, #23]
 80143ca:	e003      	b.n	80143d4 <eMBMasterFuncReadCoils+0x8a>
        }
        else
        {
        	ucByteCount = ( UCHAR )( usCoilCount / 8 );
 80143cc:	8a7b      	ldrh	r3, [r7, #18]
 80143ce:	08db      	lsrs	r3, r3, #3
 80143d0:	b29b      	uxth	r3, r3
 80143d2:	75fb      	strb	r3, [r7, #23]
        }

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usCoilCount >= 1 ) &&
 80143d4:	8a7b      	ldrh	r3, [r7, #18]
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	d018      	beq.n	801440c <eMBMasterFuncReadCoils+0xc2>
            ( ucByteCount == pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] ) )
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	3301      	adds	r3, #1
 80143de:	781b      	ldrb	r3, [r3, #0]
        if( ( usCoilCount >= 1 ) &&
 80143e0:	7dfa      	ldrb	r2, [r7, #23]
 80143e2:	429a      	cmp	r2, r3
 80143e4:	d112      	bne.n	801440c <eMBMasterFuncReadCoils+0xc2>
        {
        	/* Make callback to fill the buffer. */
            eRegStatus = eMBMasterRegCoilsCB( &pucFrame[MB_PDU_FUNC_READ_VALUES_OFF], usRegAddress, usCoilCount, MB_REG_READ );
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	1c98      	adds	r0, r3, #2
 80143ea:	8a7a      	ldrh	r2, [r7, #18]
 80143ec:	8ab9      	ldrh	r1, [r7, #20]
 80143ee:	2300      	movs	r3, #0
 80143f0:	f002 fc1a 	bl	8016c28 <eMBMasterRegCoilsCB>
 80143f4:	4603      	mov	r3, r0
 80143f6:	747b      	strb	r3, [r7, #17]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80143f8:	7c7b      	ldrb	r3, [r7, #17]
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	d00b      	beq.n	8014416 <eMBMasterFuncReadCoils+0xcc>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 80143fe:	7c7b      	ldrb	r3, [r7, #17]
 8014400:	4618      	mov	r0, r3
 8014402:	f000 ffc5 	bl	8015390 <prveMBError2Exception>
 8014406:	4603      	mov	r3, r0
 8014408:	75bb      	strb	r3, [r7, #22]
            if( eRegStatus != MB_ENOERR )
 801440a:	e004      	b.n	8014416 <eMBMasterFuncReadCoils+0xcc>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 801440c:	2303      	movs	r3, #3
 801440e:	75bb      	strb	r3, [r7, #22]
 8014410:	e001      	b.n	8014416 <eMBMasterFuncReadCoils+0xcc>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8014412:	2303      	movs	r3, #3
 8014414:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 8014416:	7dbb      	ldrb	r3, [r7, #22]
}
 8014418:	4618      	mov	r0, r3
 801441a:	3718      	adds	r7, #24
 801441c:	46bd      	mov	sp, r7
 801441e:	bd80      	pop	{r7, pc}

08014420 <eMBMasterReqWriteCoil>:
 *
 * @see eMBMasterReqWriteMultipleCoils
 */
eMBMasterReqErrCode
eMBMasterReqWriteCoil( UCHAR ucSndAddr, USHORT usCoilAddr, USHORT usCoilData, LONG lTimeOut )
{
 8014420:	b580      	push	{r7, lr}
 8014422:	b086      	sub	sp, #24
 8014424:	af00      	add	r7, sp, #0
 8014426:	607b      	str	r3, [r7, #4]
 8014428:	4603      	mov	r3, r0
 801442a:	73fb      	strb	r3, [r7, #15]
 801442c:	460b      	mov	r3, r1
 801442e:	81bb      	strh	r3, [r7, #12]
 8014430:	4613      	mov	r3, r2
 8014432:	817b      	strh	r3, [r7, #10]
    UCHAR                 *ucMBFrame;
    eMBMasterReqErrCode    eErrStatus = MB_MRE_NO_ERR;
 8014434:	2300      	movs	r3, #0
 8014436:	75fb      	strb	r3, [r7, #23]

    if ( ucSndAddr > MB_MASTER_TOTAL_SLAVE_NUM ) eErrStatus = MB_MRE_ILL_ARG;
 8014438:	7bfb      	ldrb	r3, [r7, #15]
 801443a:	2b10      	cmp	r3, #16
 801443c:	d902      	bls.n	8014444 <eMBMasterReqWriteCoil+0x24>
 801443e:	2302      	movs	r3, #2
 8014440:	75fb      	strb	r3, [r7, #23]
 8014442:	e040      	b.n	80144c6 <eMBMasterReqWriteCoil+0xa6>
    else if ( ( usCoilData != 0xFF00 ) && ( usCoilData != 0x0000 ) ) eErrStatus = MB_MRE_ILL_ARG;
 8014444:	897b      	ldrh	r3, [r7, #10]
 8014446:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 801444a:	d005      	beq.n	8014458 <eMBMasterReqWriteCoil+0x38>
 801444c:	897b      	ldrh	r3, [r7, #10]
 801444e:	2b00      	cmp	r3, #0
 8014450:	d002      	beq.n	8014458 <eMBMasterReqWriteCoil+0x38>
 8014452:	2302      	movs	r3, #2
 8014454:	75fb      	strb	r3, [r7, #23]
 8014456:	e036      	b.n	80144c6 <eMBMasterReqWriteCoil+0xa6>
    else if ( xMBMasterRunResTake( lTimeOut ) == FALSE ) eErrStatus = MB_MRE_MASTER_BUSY;
 8014458:	6878      	ldr	r0, [r7, #4]
 801445a:	f001 fda7 	bl	8015fac <xMBMasterRunResTake>
 801445e:	4603      	mov	r3, r0
 8014460:	2b00      	cmp	r3, #0
 8014462:	d102      	bne.n	801446a <eMBMasterReqWriteCoil+0x4a>
 8014464:	2305      	movs	r3, #5
 8014466:	75fb      	strb	r3, [r7, #23]
 8014468:	e02d      	b.n	80144c6 <eMBMasterReqWriteCoil+0xa6>
    else
    {
		vMBMasterGetPDUSndBuf(&ucMBFrame);
 801446a:	f107 0310 	add.w	r3, r7, #16
 801446e:	4618      	mov	r0, r3
 8014470:	f003 f9ee 	bl	8017850 <vMBMasterGetPDUSndBuf>
		vMBMasterSetDestAddress(ucSndAddr);
 8014474:	7bfb      	ldrb	r3, [r7, #15]
 8014476:	4618      	mov	r0, r3
 8014478:	f001 fafa 	bl	8015a70 <vMBMasterSetDestAddress>
		ucMBFrame[MB_PDU_FUNC_OFF]                = MB_FUNC_WRITE_SINGLE_COIL;
 801447c:	693b      	ldr	r3, [r7, #16]
 801447e:	2205      	movs	r2, #5
 8014480:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_WRITE_ADDR_OFF]      = usCoilAddr >> 8;
 8014482:	89bb      	ldrh	r3, [r7, #12]
 8014484:	0a1b      	lsrs	r3, r3, #8
 8014486:	b29a      	uxth	r2, r3
 8014488:	693b      	ldr	r3, [r7, #16]
 801448a:	3301      	adds	r3, #1
 801448c:	b2d2      	uxtb	r2, r2
 801448e:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_WRITE_ADDR_OFF + 1]  = usCoilAddr;
 8014490:	693b      	ldr	r3, [r7, #16]
 8014492:	3302      	adds	r3, #2
 8014494:	89ba      	ldrh	r2, [r7, #12]
 8014496:	b2d2      	uxtb	r2, r2
 8014498:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_WRITE_VALUE_OFF ]    = usCoilData >> 8;
 801449a:	897b      	ldrh	r3, [r7, #10]
 801449c:	0a1b      	lsrs	r3, r3, #8
 801449e:	b29a      	uxth	r2, r3
 80144a0:	693b      	ldr	r3, [r7, #16]
 80144a2:	3303      	adds	r3, #3
 80144a4:	b2d2      	uxtb	r2, r2
 80144a6:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_WRITE_VALUE_OFF + 1] = usCoilData;
 80144a8:	693b      	ldr	r3, [r7, #16]
 80144aa:	3304      	adds	r3, #4
 80144ac:	897a      	ldrh	r2, [r7, #10]
 80144ae:	b2d2      	uxtb	r2, r2
 80144b0:	701a      	strb	r2, [r3, #0]
		vMBMasterSetPDUSndLength( MB_PDU_SIZE_MIN + MB_PDU_REQ_WRITE_SIZE );
 80144b2:	2005      	movs	r0, #5
 80144b4:	f003 f9dc 	bl	8017870 <vMBMasterSetPDUSndLength>
		( void ) xMBMasterPortEventPost( EV_MASTER_FRAME_SENT );
 80144b8:	2008      	movs	r0, #8
 80144ba:	f001 fce1 	bl	8015e80 <xMBMasterPortEventPost>
		eErrStatus = eMBMasterWaitRequestFinish( );
 80144be:	f001 fde5 	bl	801608c <eMBMasterWaitRequestFinish>
 80144c2:	4603      	mov	r3, r0
 80144c4:	75fb      	strb	r3, [r7, #23]
    }
    return eErrStatus;
 80144c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80144c8:	4618      	mov	r0, r3
 80144ca:	3718      	adds	r7, #24
 80144cc:	46bd      	mov	sp, r7
 80144ce:	bd80      	pop	{r7, pc}

080144d0 <eMBMasterFuncWriteCoil>:

eMBException
eMBMasterFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
{
 80144d0:	b580      	push	{r7, lr}
 80144d2:	b084      	sub	sp, #16
 80144d4:	af00      	add	r7, sp, #0
 80144d6:	6078      	str	r0, [r7, #4]
 80144d8:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
 80144da:	2300      	movs	r3, #0
 80144dc:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 80144de:	683b      	ldr	r3, [r7, #0]
 80144e0:	881b      	ldrh	r3, [r3, #0]
 80144e2:	2b05      	cmp	r3, #5
 80144e4:	d140      	bne.n	8014568 <eMBMasterFuncWriteCoil+0x98>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	3301      	adds	r3, #1
 80144ea:	781b      	ldrb	r3, [r3, #0]
 80144ec:	b29b      	uxth	r3, r3
 80144ee:	021b      	lsls	r3, r3, #8
 80144f0:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 80144f2:	687b      	ldr	r3, [r7, #4]
 80144f4:	3302      	adds	r3, #2
 80144f6:	781b      	ldrb	r3, [r3, #0]
 80144f8:	b29a      	uxth	r2, r3
 80144fa:	89bb      	ldrh	r3, [r7, #12]
 80144fc:	4313      	orrs	r3, r2
 80144fe:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8014500:	89bb      	ldrh	r3, [r7, #12]
 8014502:	3301      	adds	r3, #1
 8014504:	81bb      	strh	r3, [r7, #12]

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	3304      	adds	r3, #4
 801450a:	781b      	ldrb	r3, [r3, #0]
 801450c:	2b00      	cmp	r3, #0
 801450e:	d128      	bne.n	8014562 <eMBMasterFuncWriteCoil+0x92>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	3303      	adds	r3, #3
 8014514:	781b      	ldrb	r3, [r3, #0]
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8014516:	2bff      	cmp	r3, #255	; 0xff
 8014518:	d004      	beq.n	8014524 <eMBMasterFuncWriteCoil+0x54>
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	3303      	adds	r3, #3
 801451e:	781b      	ldrb	r3, [r3, #0]
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 8014520:	2b00      	cmp	r3, #0
 8014522:	d11e      	bne.n	8014562 <eMBMasterFuncWriteCoil+0x92>
        {
            ucBuf[1] = 0;
 8014524:	2300      	movs	r3, #0
 8014526:	727b      	strb	r3, [r7, #9]
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	3303      	adds	r3, #3
 801452c:	781b      	ldrb	r3, [r3, #0]
 801452e:	2bff      	cmp	r3, #255	; 0xff
 8014530:	d102      	bne.n	8014538 <eMBMasterFuncWriteCoil+0x68>
            {
                ucBuf[0] = 1;
 8014532:	2301      	movs	r3, #1
 8014534:	723b      	strb	r3, [r7, #8]
 8014536:	e001      	b.n	801453c <eMBMasterFuncWriteCoil+0x6c>
            }
            else
            {
                ucBuf[0] = 0;
 8014538:	2300      	movs	r3, #0
 801453a:	723b      	strb	r3, [r7, #8]
            }
            eRegStatus =
                eMBMasterRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );
 801453c:	89b9      	ldrh	r1, [r7, #12]
 801453e:	f107 0008 	add.w	r0, r7, #8
 8014542:	2301      	movs	r3, #1
 8014544:	2201      	movs	r2, #1
 8014546:	f002 fb6f 	bl	8016c28 <eMBMasterRegCoilsCB>
 801454a:	4603      	mov	r3, r0
 801454c:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 801454e:	7afb      	ldrb	r3, [r7, #11]
 8014550:	2b00      	cmp	r3, #0
 8014552:	d00b      	beq.n	801456c <eMBMasterFuncWriteCoil+0x9c>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8014554:	7afb      	ldrb	r3, [r7, #11]
 8014556:	4618      	mov	r0, r3
 8014558:	f000 ff1a 	bl	8015390 <prveMBError2Exception>
 801455c:	4603      	mov	r3, r0
 801455e:	73fb      	strb	r3, [r7, #15]
            if( eRegStatus != MB_ENOERR )
 8014560:	e004      	b.n	801456c <eMBMasterFuncWriteCoil+0x9c>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8014562:	2303      	movs	r3, #3
 8014564:	73fb      	strb	r3, [r7, #15]
 8014566:	e001      	b.n	801456c <eMBMasterFuncWriteCoil+0x9c>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8014568:	2303      	movs	r3, #3
 801456a:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 801456c:	7bfb      	ldrb	r3, [r7, #15]
}
 801456e:	4618      	mov	r0, r3
 8014570:	3710      	adds	r7, #16
 8014572:	46bd      	mov	sp, r7
 8014574:	bd80      	pop	{r7, pc}

08014576 <eMBMasterFuncWriteMultipleCoils>:
    return eErrStatus;
}

eMBException
eMBMasterFuncWriteMultipleCoils( UCHAR * pucFrame, USHORT * usLen )
{
 8014576:	b580      	push	{r7, lr}
 8014578:	b086      	sub	sp, #24
 801457a:	af00      	add	r7, sp, #0
 801457c:	6078      	str	r0, [r7, #4]
 801457e:	6039      	str	r1, [r7, #0]
    USHORT          usCoilCnt;
    UCHAR           ucByteCount;
    UCHAR           ucByteCountVerify;
    UCHAR          *ucMBFrame;

    eMBException    eStatus = MB_EX_NONE;
 8014580:	2300      	movs	r3, #0
 8014582:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, the *usLen is not need check. */
    if( ( *usLen == MB_PDU_FUNC_WRITE_MUL_SIZE ) || xMBMasterRequestIsBroadcast() )
 8014584:	683b      	ldr	r3, [r7, #0]
 8014586:	881b      	ldrh	r3, [r3, #0]
 8014588:	2b05      	cmp	r3, #5
 801458a:	d004      	beq.n	8014596 <eMBMasterFuncWriteMultipleCoils+0x20>
 801458c:	f003 f98c 	bl	80178a8 <xMBMasterRequestIsBroadcast>
 8014590:	4603      	mov	r3, r0
 8014592:	2b00      	cmp	r3, #0
 8014594:	d052      	beq.n	801463c <eMBMasterFuncWriteMultipleCoils+0xc6>
    {
    	vMBMasterGetPDUSndBuf(&ucMBFrame);
 8014596:	f107 030c 	add.w	r3, r7, #12
 801459a:	4618      	mov	r0, r3
 801459c:	f003 f958 	bl	8017850 <vMBMasterGetPDUSndBuf>
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 80145a0:	687b      	ldr	r3, [r7, #4]
 80145a2:	3301      	adds	r3, #1
 80145a4:	781b      	ldrb	r3, [r3, #0]
 80145a6:	b29b      	uxth	r3, r3
 80145a8:	021b      	lsls	r3, r3, #8
 80145aa:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	3302      	adds	r3, #2
 80145b0:	781b      	ldrb	r3, [r3, #0]
 80145b2:	b29a      	uxth	r2, r3
 80145b4:	8abb      	ldrh	r3, [r7, #20]
 80145b6:	4313      	orrs	r3, r2
 80145b8:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 80145ba:	8abb      	ldrh	r3, [r7, #20]
 80145bc:	3301      	adds	r3, #1
 80145be:	82bb      	strh	r3, [r7, #20]

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	3303      	adds	r3, #3
 80145c4:	781b      	ldrb	r3, [r3, #0]
 80145c6:	b29b      	uxth	r3, r3
 80145c8:	021b      	lsls	r3, r3, #8
 80145ca:	827b      	strh	r3, [r7, #18]
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	3304      	adds	r3, #4
 80145d0:	781b      	ldrb	r3, [r3, #0]
 80145d2:	b29a      	uxth	r2, r3
 80145d4:	8a7b      	ldrh	r3, [r7, #18]
 80145d6:	4313      	orrs	r3, r2
 80145d8:	827b      	strh	r3, [r7, #18]

        ucByteCount = ucMBFrame[MB_PDU_REQ_WRITE_MUL_BYTECNT_OFF];
 80145da:	68fb      	ldr	r3, [r7, #12]
 80145dc:	795b      	ldrb	r3, [r3, #5]
 80145de:	747b      	strb	r3, [r7, #17]

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
 80145e0:	8a7b      	ldrh	r3, [r7, #18]
 80145e2:	f003 0307 	and.w	r3, r3, #7
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	d006      	beq.n	80145f8 <eMBMasterFuncWriteMultipleCoils+0x82>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 80145ea:	8a7b      	ldrh	r3, [r7, #18]
 80145ec:	08db      	lsrs	r3, r3, #3
 80145ee:	b29b      	uxth	r3, r3
 80145f0:	b2db      	uxtb	r3, r3
 80145f2:	3301      	adds	r3, #1
 80145f4:	75fb      	strb	r3, [r7, #23]
 80145f6:	e003      	b.n	8014600 <eMBMasterFuncWriteMultipleCoils+0x8a>
        }
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
 80145f8:	8a7b      	ldrh	r3, [r7, #18]
 80145fa:	08db      	lsrs	r3, r3, #3
 80145fc:	b29b      	uxth	r3, r3
 80145fe:	75fb      	strb	r3, [r7, #23]
        }

        if( ( usCoilCnt >= 1 ) && ( ucByteCountVerify == ucByteCount ) )
 8014600:	8a7b      	ldrh	r3, [r7, #18]
 8014602:	2b00      	cmp	r3, #0
 8014604:	d016      	beq.n	8014634 <eMBMasterFuncWriteMultipleCoils+0xbe>
 8014606:	7dfa      	ldrb	r2, [r7, #23]
 8014608:	7c7b      	ldrb	r3, [r7, #17]
 801460a:	429a      	cmp	r2, r3
 801460c:	d112      	bne.n	8014634 <eMBMasterFuncWriteMultipleCoils+0xbe>
        {
            eRegStatus =
                eMBMasterRegCoilsCB( &ucMBFrame[MB_PDU_REQ_WRITE_MUL_VALUES_OFF],
 801460e:	68fb      	ldr	r3, [r7, #12]
 8014610:	1d98      	adds	r0, r3, #6
 8014612:	8a7a      	ldrh	r2, [r7, #18]
 8014614:	8ab9      	ldrh	r1, [r7, #20]
 8014616:	2301      	movs	r3, #1
 8014618:	f002 fb06 	bl	8016c28 <eMBMasterRegCoilsCB>
 801461c:	4603      	mov	r3, r0
 801461e:	743b      	strb	r3, [r7, #16]
                               usRegAddress, usCoilCnt, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8014620:	7c3b      	ldrb	r3, [r7, #16]
 8014622:	2b00      	cmp	r3, #0
 8014624:	d009      	beq.n	801463a <eMBMasterFuncWriteMultipleCoils+0xc4>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8014626:	7c3b      	ldrb	r3, [r7, #16]
 8014628:	4618      	mov	r0, r3
 801462a:	f000 feb1 	bl	8015390 <prveMBError2Exception>
 801462e:	4603      	mov	r3, r0
 8014630:	75bb      	strb	r3, [r7, #22]
            if( eRegStatus != MB_ENOERR )
 8014632:	e002      	b.n	801463a <eMBMasterFuncWriteMultipleCoils+0xc4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8014634:	2303      	movs	r3, #3
 8014636:	75bb      	strb	r3, [r7, #22]
        if( ( usCoilCnt >= 1 ) && ( ucByteCountVerify == ucByteCount ) )
 8014638:	e002      	b.n	8014640 <eMBMasterFuncWriteMultipleCoils+0xca>
 801463a:	e001      	b.n	8014640 <eMBMasterFuncWriteMultipleCoils+0xca>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 801463c:	2303      	movs	r3, #3
 801463e:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 8014640:	7dbb      	ldrb	r3, [r7, #22]
}
 8014642:	4618      	mov	r0, r3
 8014644:	3718      	adds	r7, #24
 8014646:	46bd      	mov	sp, r7
 8014648:	bd80      	pop	{r7, pc}

0801464a <eMBFuncReadDiscreteInputs>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
 801464a:	b580      	push	{r7, lr}
 801464c:	b086      	sub	sp, #24
 801464e:	af00      	add	r7, sp, #0
 8014650:	6078      	str	r0, [r7, #4]
 8014652:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usDiscreteCnt;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8014654:	2300      	movs	r3, #0
 8014656:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8014658:	683b      	ldr	r3, [r7, #0]
 801465a:	881b      	ldrh	r3, [r3, #0]
 801465c:	2b05      	cmp	r3, #5
 801465e:	d16c      	bne.n	801473a <eMBFuncReadDiscreteInputs+0xf0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	3301      	adds	r3, #1
 8014664:	781b      	ldrb	r3, [r3, #0]
 8014666:	b29b      	uxth	r3, r3
 8014668:	021b      	lsls	r3, r3, #8
 801466a:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	3302      	adds	r3, #2
 8014670:	781b      	ldrb	r3, [r3, #0]
 8014672:	b29a      	uxth	r2, r3
 8014674:	8abb      	ldrh	r3, [r7, #20]
 8014676:	4313      	orrs	r3, r2
 8014678:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 801467a:	8abb      	ldrh	r3, [r7, #20]
 801467c:	3301      	adds	r3, #1
 801467e:	82bb      	strh	r3, [r7, #20]

        usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	3303      	adds	r3, #3
 8014684:	781b      	ldrb	r3, [r3, #0]
 8014686:	b29b      	uxth	r3, r3
 8014688:	021b      	lsls	r3, r3, #8
 801468a:	827b      	strh	r3, [r7, #18]
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	3304      	adds	r3, #4
 8014690:	781b      	ldrb	r3, [r3, #0]
 8014692:	b29a      	uxth	r2, r3
 8014694:	8a7b      	ldrh	r3, [r7, #18]
 8014696:	4313      	orrs	r3, r2
 8014698:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usDiscreteCnt >= 1 ) &&
 801469a:	8a7b      	ldrh	r3, [r7, #18]
 801469c:	2b00      	cmp	r3, #0
 801469e:	d049      	beq.n	8014734 <eMBFuncReadDiscreteInputs+0xea>
 80146a0:	8a7b      	ldrh	r3, [r7, #18]
 80146a2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80146a6:	d245      	bcs.n	8014734 <eMBFuncReadDiscreteInputs+0xea>
            ( usDiscreteCnt < MB_PDU_FUNC_READ_DISCCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 80146ac:	683b      	ldr	r3, [r7, #0]
 80146ae:	2200      	movs	r2, #0
 80146b0:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
 80146b2:	68fb      	ldr	r3, [r7, #12]
 80146b4:	1c5a      	adds	r2, r3, #1
 80146b6:	60fa      	str	r2, [r7, #12]
 80146b8:	2202      	movs	r2, #2
 80146ba:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80146bc:	683b      	ldr	r3, [r7, #0]
 80146be:	881b      	ldrh	r3, [r3, #0]
 80146c0:	3301      	adds	r3, #1
 80146c2:	b29a      	uxth	r2, r3
 80146c4:	683b      	ldr	r3, [r7, #0]
 80146c6:	801a      	strh	r2, [r3, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
 80146c8:	8a7b      	ldrh	r3, [r7, #18]
 80146ca:	f003 0307 	and.w	r3, r3, #7
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	d006      	beq.n	80146e0 <eMBFuncReadDiscreteInputs+0x96>
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
 80146d2:	8a7b      	ldrh	r3, [r7, #18]
 80146d4:	08db      	lsrs	r3, r3, #3
 80146d6:	b29b      	uxth	r3, r3
 80146d8:	b2db      	uxtb	r3, r3
 80146da:	3301      	adds	r3, #1
 80146dc:	75fb      	strb	r3, [r7, #23]
 80146de:	e003      	b.n	80146e8 <eMBFuncReadDiscreteInputs+0x9e>
            }
            else
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
 80146e0:	8a7b      	ldrh	r3, [r7, #18]
 80146e2:	08db      	lsrs	r3, r3, #3
 80146e4:	b29b      	uxth	r3, r3
 80146e6:	75fb      	strb	r3, [r7, #23]
            }
            *pucFrameCur++ = ucNBytes;
 80146e8:	68fb      	ldr	r3, [r7, #12]
 80146ea:	1c5a      	adds	r2, r3, #1
 80146ec:	60fa      	str	r2, [r7, #12]
 80146ee:	7dfa      	ldrb	r2, [r7, #23]
 80146f0:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80146f2:	683b      	ldr	r3, [r7, #0]
 80146f4:	881b      	ldrh	r3, [r3, #0]
 80146f6:	3301      	adds	r3, #1
 80146f8:	b29a      	uxth	r2, r3
 80146fa:	683b      	ldr	r3, [r7, #0]
 80146fc:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );
 80146fe:	8a7a      	ldrh	r2, [r7, #18]
 8014700:	8abb      	ldrh	r3, [r7, #20]
 8014702:	4619      	mov	r1, r3
 8014704:	68f8      	ldr	r0, [r7, #12]
 8014706:	f002 f92f 	bl	8016968 <eMBRegDiscreteCB>
 801470a:	4603      	mov	r3, r0
 801470c:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 801470e:	7afb      	ldrb	r3, [r7, #11]
 8014710:	2b00      	cmp	r3, #0
 8014712:	d006      	beq.n	8014722 <eMBFuncReadDiscreteInputs+0xd8>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8014714:	7afb      	ldrb	r3, [r7, #11]
 8014716:	4618      	mov	r0, r3
 8014718:	f000 fe3a 	bl	8015390 <prveMBError2Exception>
 801471c:	4603      	mov	r3, r0
 801471e:	75bb      	strb	r3, [r7, #22]
            if( eRegStatus != MB_ENOERR )
 8014720:	e00d      	b.n	801473e <eMBFuncReadDiscreteInputs+0xf4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 8014722:	683b      	ldr	r3, [r7, #0]
 8014724:	881a      	ldrh	r2, [r3, #0]
 8014726:	7dfb      	ldrb	r3, [r7, #23]
 8014728:	b29b      	uxth	r3, r3
 801472a:	4413      	add	r3, r2
 801472c:	b29a      	uxth	r2, r3
 801472e:	683b      	ldr	r3, [r7, #0]
 8014730:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8014732:	e004      	b.n	801473e <eMBFuncReadDiscreteInputs+0xf4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8014734:	2303      	movs	r3, #3
 8014736:	75bb      	strb	r3, [r7, #22]
 8014738:	e001      	b.n	801473e <eMBFuncReadDiscreteInputs+0xf4>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 801473a:	2303      	movs	r3, #3
 801473c:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 801473e:	7dbb      	ldrb	r3, [r7, #22]
}
 8014740:	4618      	mov	r0, r3
 8014742:	3718      	adds	r7, #24
 8014744:	46bd      	mov	sp, r7
 8014746:	bd80      	pop	{r7, pc}

08014748 <eMBMasterReqReadDiscreteInputs>:
 *
 * @return error code
 */
eMBMasterReqErrCode
eMBMasterReqReadDiscreteInputs( UCHAR ucSndAddr, USHORT usDiscreteAddr, USHORT usNDiscreteIn, LONG lTimeOut )
{
 8014748:	b580      	push	{r7, lr}
 801474a:	b086      	sub	sp, #24
 801474c:	af00      	add	r7, sp, #0
 801474e:	607b      	str	r3, [r7, #4]
 8014750:	4603      	mov	r3, r0
 8014752:	73fb      	strb	r3, [r7, #15]
 8014754:	460b      	mov	r3, r1
 8014756:	81bb      	strh	r3, [r7, #12]
 8014758:	4613      	mov	r3, r2
 801475a:	817b      	strh	r3, [r7, #10]
    UCHAR                 *ucMBFrame;
    eMBMasterReqErrCode    eErrStatus = MB_MRE_NO_ERR;
 801475c:	2300      	movs	r3, #0
 801475e:	75fb      	strb	r3, [r7, #23]

    if ( ucSndAddr > MB_MASTER_TOTAL_SLAVE_NUM ) eErrStatus = MB_MRE_ILL_ARG;
 8014760:	7bfb      	ldrb	r3, [r7, #15]
 8014762:	2b10      	cmp	r3, #16
 8014764:	d902      	bls.n	801476c <eMBMasterReqReadDiscreteInputs+0x24>
 8014766:	2302      	movs	r3, #2
 8014768:	75fb      	strb	r3, [r7, #23]
 801476a:	e036      	b.n	80147da <eMBMasterReqReadDiscreteInputs+0x92>
    else if ( xMBMasterRunResTake( lTimeOut ) == FALSE ) eErrStatus = MB_MRE_MASTER_BUSY;
 801476c:	6878      	ldr	r0, [r7, #4]
 801476e:	f001 fc1d 	bl	8015fac <xMBMasterRunResTake>
 8014772:	4603      	mov	r3, r0
 8014774:	2b00      	cmp	r3, #0
 8014776:	d102      	bne.n	801477e <eMBMasterReqReadDiscreteInputs+0x36>
 8014778:	2305      	movs	r3, #5
 801477a:	75fb      	strb	r3, [r7, #23]
 801477c:	e02d      	b.n	80147da <eMBMasterReqReadDiscreteInputs+0x92>
    else
    {
		vMBMasterGetPDUSndBuf(&ucMBFrame);
 801477e:	f107 0310 	add.w	r3, r7, #16
 8014782:	4618      	mov	r0, r3
 8014784:	f003 f864 	bl	8017850 <vMBMasterGetPDUSndBuf>
		vMBMasterSetDestAddress(ucSndAddr);
 8014788:	7bfb      	ldrb	r3, [r7, #15]
 801478a:	4618      	mov	r0, r3
 801478c:	f001 f970 	bl	8015a70 <vMBMasterSetDestAddress>
		ucMBFrame[MB_PDU_FUNC_OFF]                 = MB_FUNC_READ_DISCRETE_INPUTS;
 8014790:	693b      	ldr	r3, [r7, #16]
 8014792:	2202      	movs	r2, #2
 8014794:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF]        = usDiscreteAddr >> 8;
 8014796:	89bb      	ldrh	r3, [r7, #12]
 8014798:	0a1b      	lsrs	r3, r3, #8
 801479a:	b29a      	uxth	r2, r3
 801479c:	693b      	ldr	r3, [r7, #16]
 801479e:	3301      	adds	r3, #1
 80147a0:	b2d2      	uxtb	r2, r2
 80147a2:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1]    = usDiscreteAddr;
 80147a4:	693b      	ldr	r3, [r7, #16]
 80147a6:	3302      	adds	r3, #2
 80147a8:	89ba      	ldrh	r2, [r7, #12]
 80147aa:	b2d2      	uxtb	r2, r2
 80147ac:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_READ_DISCCNT_OFF ]    = usNDiscreteIn >> 8;
 80147ae:	897b      	ldrh	r3, [r7, #10]
 80147b0:	0a1b      	lsrs	r3, r3, #8
 80147b2:	b29a      	uxth	r2, r3
 80147b4:	693b      	ldr	r3, [r7, #16]
 80147b6:	3303      	adds	r3, #3
 80147b8:	b2d2      	uxtb	r2, r2
 80147ba:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_READ_DISCCNT_OFF + 1] = usNDiscreteIn;
 80147bc:	693b      	ldr	r3, [r7, #16]
 80147be:	3304      	adds	r3, #4
 80147c0:	897a      	ldrh	r2, [r7, #10]
 80147c2:	b2d2      	uxtb	r2, r2
 80147c4:	701a      	strb	r2, [r3, #0]
		vMBMasterSetPDUSndLength( MB_PDU_SIZE_MIN + MB_PDU_REQ_READ_SIZE );
 80147c6:	2005      	movs	r0, #5
 80147c8:	f003 f852 	bl	8017870 <vMBMasterSetPDUSndLength>
		( void ) xMBMasterPortEventPost( EV_MASTER_FRAME_SENT );
 80147cc:	2008      	movs	r0, #8
 80147ce:	f001 fb57 	bl	8015e80 <xMBMasterPortEventPost>
		eErrStatus = eMBMasterWaitRequestFinish( );
 80147d2:	f001 fc5b 	bl	801608c <eMBMasterWaitRequestFinish>
 80147d6:	4603      	mov	r3, r0
 80147d8:	75fb      	strb	r3, [r7, #23]
    }
    return eErrStatus;
 80147da:	7dfb      	ldrb	r3, [r7, #23]
}
 80147dc:	4618      	mov	r0, r3
 80147de:	3718      	adds	r7, #24
 80147e0:	46bd      	mov	sp, r7
 80147e2:	bd80      	pop	{r7, pc}

080147e4 <eMBMasterFuncReadDiscreteInputs>:

eMBException
eMBMasterFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
 80147e4:	b580      	push	{r7, lr}
 80147e6:	b086      	sub	sp, #24
 80147e8:	af00      	add	r7, sp, #0
 80147ea:	6078      	str	r0, [r7, #4]
 80147ec:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usDiscreteCnt;
    UCHAR           ucNBytes;
    UCHAR          *ucMBFrame;

    eMBException    eStatus = MB_EX_NONE;
 80147ee:	2300      	movs	r3, #0
 80147f0:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, and it's read mode. This request don't need execute. */
    if ( xMBMasterRequestIsBroadcast() )
 80147f2:	f003 f859 	bl	80178a8 <xMBMasterRequestIsBroadcast>
 80147f6:	4603      	mov	r3, r0
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	d002      	beq.n	8014802 <eMBMasterFuncReadDiscreteInputs+0x1e>
    {
    	eStatus = MB_EX_NONE;
 80147fc:	2300      	movs	r3, #0
 80147fe:	75bb      	strb	r3, [r7, #22]
 8014800:	e056      	b.n	80148b0 <eMBMasterFuncReadDiscreteInputs+0xcc>
    }
    else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
 8014802:	683b      	ldr	r3, [r7, #0]
 8014804:	881b      	ldrh	r3, [r3, #0]
 8014806:	2b01      	cmp	r3, #1
 8014808:	d950      	bls.n	80148ac <eMBMasterFuncReadDiscreteInputs+0xc8>
    {
    	vMBMasterGetPDUSndBuf(&ucMBFrame);
 801480a:	f107 030c 	add.w	r3, r7, #12
 801480e:	4618      	mov	r0, r3
 8014810:	f003 f81e 	bl	8017850 <vMBMasterGetPDUSndBuf>
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
 8014814:	68fb      	ldr	r3, [r7, #12]
 8014816:	3301      	adds	r3, #1
 8014818:	781b      	ldrb	r3, [r3, #0]
 801481a:	b29b      	uxth	r3, r3
 801481c:	021b      	lsls	r3, r3, #8
 801481e:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
 8014820:	68fb      	ldr	r3, [r7, #12]
 8014822:	3302      	adds	r3, #2
 8014824:	781b      	ldrb	r3, [r3, #0]
 8014826:	b29a      	uxth	r2, r3
 8014828:	8abb      	ldrh	r3, [r7, #20]
 801482a:	4313      	orrs	r3, r2
 801482c:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 801482e:	8abb      	ldrh	r3, [r7, #20]
 8014830:	3301      	adds	r3, #1
 8014832:	82bb      	strh	r3, [r7, #20]

        usDiscreteCnt = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_DISCCNT_OFF] << 8 );
 8014834:	68fb      	ldr	r3, [r7, #12]
 8014836:	3303      	adds	r3, #3
 8014838:	781b      	ldrb	r3, [r3, #0]
 801483a:	b29b      	uxth	r3, r3
 801483c:	021b      	lsls	r3, r3, #8
 801483e:	827b      	strh	r3, [r7, #18]
        usDiscreteCnt |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_DISCCNT_OFF + 1] );
 8014840:	68fb      	ldr	r3, [r7, #12]
 8014842:	3304      	adds	r3, #4
 8014844:	781b      	ldrb	r3, [r3, #0]
 8014846:	b29a      	uxth	r2, r3
 8014848:	8a7b      	ldrh	r3, [r7, #18]
 801484a:	4313      	orrs	r3, r2
 801484c:	827b      	strh	r3, [r7, #18]

        /* Test if the quantity of coils is a multiple of 8. If not last
         * byte is only partially field with unused coils set to zero. */
        if( ( usDiscreteCnt & 0x0007 ) != 0 )
 801484e:	8a7b      	ldrh	r3, [r7, #18]
 8014850:	f003 0307 	and.w	r3, r3, #7
 8014854:	2b00      	cmp	r3, #0
 8014856:	d006      	beq.n	8014866 <eMBMasterFuncReadDiscreteInputs+0x82>
        {
        	ucNBytes = ( UCHAR )( usDiscreteCnt / 8 + 1 );
 8014858:	8a7b      	ldrh	r3, [r7, #18]
 801485a:	08db      	lsrs	r3, r3, #3
 801485c:	b29b      	uxth	r3, r3
 801485e:	b2db      	uxtb	r3, r3
 8014860:	3301      	adds	r3, #1
 8014862:	75fb      	strb	r3, [r7, #23]
 8014864:	e003      	b.n	801486e <eMBMasterFuncReadDiscreteInputs+0x8a>
        }
        else
        {
        	ucNBytes = ( UCHAR )( usDiscreteCnt / 8 );
 8014866:	8a7b      	ldrh	r3, [r7, #18]
 8014868:	08db      	lsrs	r3, r3, #3
 801486a:	b29b      	uxth	r3, r3
 801486c:	75fb      	strb	r3, [r7, #23]
        }

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
		if ((usDiscreteCnt >= 1) && ucNBytes == pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF])
 801486e:	8a7b      	ldrh	r3, [r7, #18]
 8014870:	2b00      	cmp	r3, #0
 8014872:	d018      	beq.n	80148a6 <eMBMasterFuncReadDiscreteInputs+0xc2>
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	3301      	adds	r3, #1
 8014878:	781b      	ldrb	r3, [r3, #0]
 801487a:	7dfa      	ldrb	r2, [r7, #23]
 801487c:	429a      	cmp	r2, r3
 801487e:	d112      	bne.n	80148a6 <eMBMasterFuncReadDiscreteInputs+0xc2>
        {
	       	/* Make callback to fill the buffer. */
			eRegStatus = eMBMasterRegDiscreteCB( &pucFrame[MB_PDU_FUNC_READ_VALUES_OFF], usRegAddress, usDiscreteCnt );
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	3302      	adds	r3, #2
 8014884:	8a7a      	ldrh	r2, [r7, #18]
 8014886:	8ab9      	ldrh	r1, [r7, #20]
 8014888:	4618      	mov	r0, r3
 801488a:	f002 fa83 	bl	8016d94 <eMBMasterRegDiscreteCB>
 801488e:	4603      	mov	r3, r0
 8014890:	747b      	strb	r3, [r7, #17]

			/* If an error occured convert it into a Modbus exception. */
			if( eRegStatus != MB_ENOERR )
 8014892:	7c7b      	ldrb	r3, [r7, #17]
 8014894:	2b00      	cmp	r3, #0
 8014896:	d00b      	beq.n	80148b0 <eMBMasterFuncReadDiscreteInputs+0xcc>
			{
				eStatus = prveMBError2Exception( eRegStatus );
 8014898:	7c7b      	ldrb	r3, [r7, #17]
 801489a:	4618      	mov	r0, r3
 801489c:	f000 fd78 	bl	8015390 <prveMBError2Exception>
 80148a0:	4603      	mov	r3, r0
 80148a2:	75bb      	strb	r3, [r7, #22]
			if( eRegStatus != MB_ENOERR )
 80148a4:	e004      	b.n	80148b0 <eMBMasterFuncReadDiscreteInputs+0xcc>
			}
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80148a6:	2303      	movs	r3, #3
 80148a8:	75bb      	strb	r3, [r7, #22]
 80148aa:	e001      	b.n	80148b0 <eMBMasterFuncReadDiscreteInputs+0xcc>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80148ac:	2303      	movs	r3, #3
 80148ae:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 80148b0:	7dbb      	ldrb	r3, [r7, #22]
}
 80148b2:	4618      	mov	r0, r3
 80148b4:	3718      	adds	r7, #24
 80148b6:	46bd      	mov	sp, r7
 80148b8:	bd80      	pop	{r7, pc}

080148ba <eMBFuncWriteHoldingRegister>:

#if MB_FUNC_WRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 80148ba:	b580      	push	{r7, lr}
 80148bc:	b084      	sub	sp, #16
 80148be:	af00      	add	r7, sp, #0
 80148c0:	6078      	str	r0, [r7, #4]
 80148c2:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
 80148c4:	2300      	movs	r3, #0
 80148c6:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 80148c8:	683b      	ldr	r3, [r7, #0]
 80148ca:	881b      	ldrh	r3, [r3, #0]
 80148cc:	2b05      	cmp	r3, #5
 80148ce:	d122      	bne.n	8014916 <eMBFuncWriteHoldingRegister+0x5c>
    {
        usRegAddress  = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	3301      	adds	r3, #1
 80148d4:	781b      	ldrb	r3, [r3, #0]
 80148d6:	b29b      	uxth	r3, r3
 80148d8:	021b      	lsls	r3, r3, #8
 80148da:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	3302      	adds	r3, #2
 80148e0:	781b      	ldrb	r3, [r3, #0]
 80148e2:	b29a      	uxth	r2, r3
 80148e4:	89bb      	ldrh	r3, [r7, #12]
 80148e6:	4313      	orrs	r3, r2
 80148e8:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 80148ea:	89bb      	ldrh	r3, [r7, #12]
 80148ec:	3301      	adds	r3, #1
 80148ee:	81bb      	strh	r3, [r7, #12]

        /* Make callback to update the value. */
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	1cd8      	adds	r0, r3, #3
 80148f4:	89b9      	ldrh	r1, [r7, #12]
 80148f6:	2301      	movs	r3, #1
 80148f8:	2201      	movs	r2, #1
 80148fa:	f001 ff01 	bl	8016700 <eMBRegHoldingCB>
 80148fe:	4603      	mov	r3, r0
 8014900:	72fb      	strb	r3, [r7, #11]
                                      usRegAddress, 1, MB_REG_WRITE );

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
 8014902:	7afb      	ldrb	r3, [r7, #11]
 8014904:	2b00      	cmp	r3, #0
 8014906:	d008      	beq.n	801491a <eMBFuncWriteHoldingRegister+0x60>
        {
            eStatus = prveMBError2Exception( eRegStatus );
 8014908:	7afb      	ldrb	r3, [r7, #11]
 801490a:	4618      	mov	r0, r3
 801490c:	f000 fd40 	bl	8015390 <prveMBError2Exception>
 8014910:	4603      	mov	r3, r0
 8014912:	73fb      	strb	r3, [r7, #15]
 8014914:	e001      	b.n	801491a <eMBFuncWriteHoldingRegister+0x60>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8014916:	2303      	movs	r3, #3
 8014918:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 801491a:	7bfb      	ldrb	r3, [r7, #15]
}
 801491c:	4618      	mov	r0, r3
 801491e:	3710      	adds	r7, #16
 8014920:	46bd      	mov	sp, r7
 8014922:	bd80      	pop	{r7, pc}

08014924 <eMBFuncWriteMultipleHoldingRegister>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_HOLDING_ENABLED > 0
eMBException
eMBFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8014924:	b580      	push	{r7, lr}
 8014926:	b084      	sub	sp, #16
 8014928:	af00      	add	r7, sp, #0
 801492a:	6078      	str	r0, [r7, #4]
 801492c:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
 801492e:	2300      	movs	r3, #0
 8014930:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8014932:	683b      	ldr	r3, [r7, #0]
 8014934:	881b      	ldrh	r3, [r3, #0]
 8014936:	2b05      	cmp	r3, #5
 8014938:	d946      	bls.n	80149c8 <eMBFuncWriteMultipleHoldingRegister+0xa4>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	3301      	adds	r3, #1
 801493e:	781b      	ldrb	r3, [r3, #0]
 8014940:	b29b      	uxth	r3, r3
 8014942:	021b      	lsls	r3, r3, #8
 8014944:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	3302      	adds	r3, #2
 801494a:	781b      	ldrb	r3, [r3, #0]
 801494c:	b29a      	uxth	r2, r3
 801494e:	89bb      	ldrh	r3, [r7, #12]
 8014950:	4313      	orrs	r3, r2
 8014952:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8014954:	89bb      	ldrh	r3, [r7, #12]
 8014956:	3301      	adds	r3, #1
 8014958:	81bb      	strh	r3, [r7, #12]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	3303      	adds	r3, #3
 801495e:	781b      	ldrb	r3, [r3, #0]
 8014960:	b29b      	uxth	r3, r3
 8014962:	021b      	lsls	r3, r3, #8
 8014964:	817b      	strh	r3, [r7, #10]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	3304      	adds	r3, #4
 801496a:	781b      	ldrb	r3, [r3, #0]
 801496c:	b29a      	uxth	r2, r3
 801496e:	897b      	ldrh	r3, [r7, #10]
 8014970:	4313      	orrs	r3, r2
 8014972:	817b      	strh	r3, [r7, #10]

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	795b      	ldrb	r3, [r3, #5]
 8014978:	727b      	strb	r3, [r7, #9]

        if( ( usRegCount >= 1 ) &&
 801497a:	897b      	ldrh	r3, [r7, #10]
 801497c:	2b00      	cmp	r3, #0
 801497e:	d020      	beq.n	80149c2 <eMBFuncWriteMultipleHoldingRegister+0x9e>
 8014980:	897b      	ldrh	r3, [r7, #10]
 8014982:	2b78      	cmp	r3, #120	; 0x78
 8014984:	d81d      	bhi.n	80149c2 <eMBFuncWriteMultipleHoldingRegister+0x9e>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
 8014986:	897b      	ldrh	r3, [r7, #10]
 8014988:	b2db      	uxtb	r3, r3
 801498a:	005b      	lsls	r3, r3, #1
 801498c:	b2db      	uxtb	r3, r3
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
 801498e:	7a7a      	ldrb	r2, [r7, #9]
 8014990:	429a      	cmp	r2, r3
 8014992:	d116      	bne.n	80149c2 <eMBFuncWriteMultipleHoldingRegister+0x9e>
        {
            /* Make callback to update the register values. */
            eRegStatus =
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	1d98      	adds	r0, r3, #6
 8014998:	897a      	ldrh	r2, [r7, #10]
 801499a:	89b9      	ldrh	r1, [r7, #12]
 801499c:	2301      	movs	r3, #1
 801499e:	f001 feaf 	bl	8016700 <eMBRegHoldingCB>
 80149a2:	4603      	mov	r3, r0
 80149a4:	723b      	strb	r3, [r7, #8]
                                 usRegAddress, usRegCount, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80149a6:	7a3b      	ldrb	r3, [r7, #8]
 80149a8:	2b00      	cmp	r3, #0
 80149aa:	d006      	beq.n	80149ba <eMBFuncWriteMultipleHoldingRegister+0x96>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 80149ac:	7a3b      	ldrb	r3, [r7, #8]
 80149ae:	4618      	mov	r0, r3
 80149b0:	f000 fcee 	bl	8015390 <prveMBError2Exception>
 80149b4:	4603      	mov	r3, r0
 80149b6:	73fb      	strb	r3, [r7, #15]
            if( eRegStatus != MB_ENOERR )
 80149b8:	e008      	b.n	80149cc <eMBFuncWriteMultipleHoldingRegister+0xa8>
            {
                /* The response contains the function code, the starting
                 * address and the quantity of registers. We reuse the
                 * old values in the buffer because they are still valid.
                 */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 80149ba:	683b      	ldr	r3, [r7, #0]
 80149bc:	2205      	movs	r2, #5
 80149be:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 80149c0:	e004      	b.n	80149cc <eMBFuncWriteMultipleHoldingRegister+0xa8>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80149c2:	2303      	movs	r3, #3
 80149c4:	73fb      	strb	r3, [r7, #15]
 80149c6:	e001      	b.n	80149cc <eMBFuncWriteMultipleHoldingRegister+0xa8>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80149c8:	2303      	movs	r3, #3
 80149ca:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 80149cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80149ce:	4618      	mov	r0, r3
 80149d0:	3710      	adds	r7, #16
 80149d2:	46bd      	mov	sp, r7
 80149d4:	bd80      	pop	{r7, pc}

080149d6 <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 80149d6:	b580      	push	{r7, lr}
 80149d8:	b086      	sub	sp, #24
 80149da:	af00      	add	r7, sp, #0
 80149dc:	6078      	str	r0, [r7, #4]
 80149de:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 80149e0:	2300      	movs	r3, #0
 80149e2:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 80149e4:	683b      	ldr	r3, [r7, #0]
 80149e6:	881b      	ldrh	r3, [r3, #0]
 80149e8:	2b05      	cmp	r3, #5
 80149ea:	d15c      	bne.n	8014aa6 <eMBFuncReadHoldingRegister+0xd0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	3301      	adds	r3, #1
 80149f0:	781b      	ldrb	r3, [r3, #0]
 80149f2:	b29b      	uxth	r3, r3
 80149f4:	021b      	lsls	r3, r3, #8
 80149f6:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	3302      	adds	r3, #2
 80149fc:	781b      	ldrb	r3, [r3, #0]
 80149fe:	b29a      	uxth	r2, r3
 8014a00:	8abb      	ldrh	r3, [r7, #20]
 8014a02:	4313      	orrs	r3, r2
 8014a04:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8014a06:	8abb      	ldrh	r3, [r7, #20]
 8014a08:	3301      	adds	r3, #1
 8014a0a:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	3303      	adds	r3, #3
 8014a10:	781b      	ldrb	r3, [r3, #0]
 8014a12:	b29b      	uxth	r3, r3
 8014a14:	021b      	lsls	r3, r3, #8
 8014a16:	827b      	strh	r3, [r7, #18]
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	3304      	adds	r3, #4
 8014a1c:	781b      	ldrb	r3, [r3, #0]
 8014a1e:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
 8014a20:	8a7b      	ldrh	r3, [r7, #18]
 8014a22:	2b00      	cmp	r3, #0
 8014a24:	d03c      	beq.n	8014aa0 <eMBFuncReadHoldingRegister+0xca>
 8014a26:	8a7b      	ldrh	r3, [r7, #18]
 8014a28:	2b7d      	cmp	r3, #125	; 0x7d
 8014a2a:	d839      	bhi.n	8014aa0 <eMBFuncReadHoldingRegister+0xca>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8014a30:	683b      	ldr	r3, [r7, #0]
 8014a32:	2200      	movs	r2, #0
 8014a34:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 8014a36:	68fb      	ldr	r3, [r7, #12]
 8014a38:	1c5a      	adds	r2, r3, #1
 8014a3a:	60fa      	str	r2, [r7, #12]
 8014a3c:	2203      	movs	r2, #3
 8014a3e:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8014a40:	683b      	ldr	r3, [r7, #0]
 8014a42:	881b      	ldrh	r3, [r3, #0]
 8014a44:	3301      	adds	r3, #1
 8014a46:	b29a      	uxth	r2, r3
 8014a48:	683b      	ldr	r3, [r7, #0]
 8014a4a:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 8014a4c:	8a7b      	ldrh	r3, [r7, #18]
 8014a4e:	b2da      	uxtb	r2, r3
 8014a50:	68fb      	ldr	r3, [r7, #12]
 8014a52:	1c59      	adds	r1, r3, #1
 8014a54:	60f9      	str	r1, [r7, #12]
 8014a56:	0052      	lsls	r2, r2, #1
 8014a58:	b2d2      	uxtb	r2, r2
 8014a5a:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8014a5c:	683b      	ldr	r3, [r7, #0]
 8014a5e:	881b      	ldrh	r3, [r3, #0]
 8014a60:	3301      	adds	r3, #1
 8014a62:	b29a      	uxth	r2, r3
 8014a64:	683b      	ldr	r3, [r7, #0]
 8014a66:	801a      	strh	r2, [r3, #0]

            /* Make callback to fill the buffer. */
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 8014a68:	8a7a      	ldrh	r2, [r7, #18]
 8014a6a:	8ab9      	ldrh	r1, [r7, #20]
 8014a6c:	2300      	movs	r3, #0
 8014a6e:	68f8      	ldr	r0, [r7, #12]
 8014a70:	f001 fe46 	bl	8016700 <eMBRegHoldingCB>
 8014a74:	4603      	mov	r3, r0
 8014a76:	72fb      	strb	r3, [r7, #11]
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8014a78:	7afb      	ldrb	r3, [r7, #11]
 8014a7a:	2b00      	cmp	r3, #0
 8014a7c:	d006      	beq.n	8014a8c <eMBFuncReadHoldingRegister+0xb6>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8014a7e:	7afb      	ldrb	r3, [r7, #11]
 8014a80:	4618      	mov	r0, r3
 8014a82:	f000 fc85 	bl	8015390 <prveMBError2Exception>
 8014a86:	4603      	mov	r3, r0
 8014a88:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 8014a8a:	e00e      	b.n	8014aaa <eMBFuncReadHoldingRegister+0xd4>
            }
            else
            {
                *usLen += usRegCount * 2;
 8014a8c:	683b      	ldr	r3, [r7, #0]
 8014a8e:	881a      	ldrh	r2, [r3, #0]
 8014a90:	8a7b      	ldrh	r3, [r7, #18]
 8014a92:	005b      	lsls	r3, r3, #1
 8014a94:	b29b      	uxth	r3, r3
 8014a96:	4413      	add	r3, r2
 8014a98:	b29a      	uxth	r2, r3
 8014a9a:	683b      	ldr	r3, [r7, #0]
 8014a9c:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8014a9e:	e004      	b.n	8014aaa <eMBFuncReadHoldingRegister+0xd4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8014aa0:	2303      	movs	r3, #3
 8014aa2:	75fb      	strb	r3, [r7, #23]
 8014aa4:	e001      	b.n	8014aaa <eMBFuncReadHoldingRegister+0xd4>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8014aa6:	2303      	movs	r3, #3
 8014aa8:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 8014aaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8014aac:	4618      	mov	r0, r3
 8014aae:	3718      	adds	r7, #24
 8014ab0:	46bd      	mov	sp, r7
 8014ab2:	bd80      	pop	{r7, pc}

08014ab4 <eMBFuncReadWriteMultipleHoldingRegister>:

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8014ab4:	b580      	push	{r7, lr}
 8014ab6:	b086      	sub	sp, #24
 8014ab8:	af00      	add	r7, sp, #0
 8014aba:	6078      	str	r0, [r7, #4]
 8014abc:	6039      	str	r1, [r7, #0]
    USHORT          usRegWriteAddress;
    USHORT          usRegWriteCount;
    UCHAR           ucRegWriteByteCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8014abe:	2300      	movs	r3, #0
 8014ac0:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8014ac2:	683b      	ldr	r3, [r7, #0]
 8014ac4:	881b      	ldrh	r3, [r3, #0]
 8014ac6:	2b09      	cmp	r3, #9
 8014ac8:	f240 8099 	bls.w	8014bfe <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	3301      	adds	r3, #1
 8014ad0:	781b      	ldrb	r3, [r3, #0]
 8014ad2:	b29b      	uxth	r3, r3
 8014ad4:	021b      	lsls	r3, r3, #8
 8014ad6:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	3302      	adds	r3, #2
 8014adc:	781b      	ldrb	r3, [r3, #0]
 8014ade:	b29a      	uxth	r2, r3
 8014ae0:	8abb      	ldrh	r3, [r7, #20]
 8014ae2:	4313      	orrs	r3, r2
 8014ae4:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress++;
 8014ae6:	8abb      	ldrh	r3, [r7, #20]
 8014ae8:	3301      	adds	r3, #1
 8014aea:	82bb      	strh	r3, [r7, #20]

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	3303      	adds	r3, #3
 8014af0:	781b      	ldrb	r3, [r3, #0]
 8014af2:	b29b      	uxth	r3, r3
 8014af4:	021b      	lsls	r3, r3, #8
 8014af6:	827b      	strh	r3, [r7, #18]
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	3304      	adds	r3, #4
 8014afc:	781b      	ldrb	r3, [r3, #0]
 8014afe:	b29a      	uxth	r2, r3
 8014b00:	8a7b      	ldrh	r3, [r7, #18]
 8014b02:	4313      	orrs	r3, r2
 8014b04:	827b      	strh	r3, [r7, #18]

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	3305      	adds	r3, #5
 8014b0a:	781b      	ldrb	r3, [r3, #0]
 8014b0c:	b29b      	uxth	r3, r3
 8014b0e:	021b      	lsls	r3, r3, #8
 8014b10:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 8014b12:	687b      	ldr	r3, [r7, #4]
 8014b14:	3306      	adds	r3, #6
 8014b16:	781b      	ldrb	r3, [r3, #0]
 8014b18:	b29a      	uxth	r2, r3
 8014b1a:	8a3b      	ldrh	r3, [r7, #16]
 8014b1c:	4313      	orrs	r3, r2
 8014b1e:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress++;
 8014b20:	8a3b      	ldrh	r3, [r7, #16]
 8014b22:	3301      	adds	r3, #1
 8014b24:	823b      	strh	r3, [r7, #16]

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	3307      	adds	r3, #7
 8014b2a:	781b      	ldrb	r3, [r3, #0]
 8014b2c:	b29b      	uxth	r3, r3
 8014b2e:	021b      	lsls	r3, r3, #8
 8014b30:	81fb      	strh	r3, [r7, #14]
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
 8014b32:	687b      	ldr	r3, [r7, #4]
 8014b34:	3308      	adds	r3, #8
 8014b36:	781b      	ldrb	r3, [r3, #0]
 8014b38:	b29a      	uxth	r2, r3
 8014b3a:	89fb      	ldrh	r3, [r7, #14]
 8014b3c:	4313      	orrs	r3, r2
 8014b3e:	81fb      	strh	r3, [r7, #14]

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	7a5b      	ldrb	r3, [r3, #9]
 8014b44:	737b      	strb	r3, [r7, #13]

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 8014b46:	8a7b      	ldrh	r3, [r7, #18]
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	d056      	beq.n	8014bfa <eMBFuncReadWriteMultipleHoldingRegister+0x146>
 8014b4c:	8a7b      	ldrh	r3, [r7, #18]
 8014b4e:	2b7d      	cmp	r3, #125	; 0x7d
 8014b50:	d853      	bhi.n	8014bfa <eMBFuncReadWriteMultipleHoldingRegister+0x146>
 8014b52:	89fb      	ldrh	r3, [r7, #14]
 8014b54:	2b00      	cmp	r3, #0
 8014b56:	d050      	beq.n	8014bfa <eMBFuncReadWriteMultipleHoldingRegister+0x146>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 8014b58:	89fb      	ldrh	r3, [r7, #14]
 8014b5a:	2b79      	cmp	r3, #121	; 0x79
 8014b5c:	d84d      	bhi.n	8014bfa <eMBFuncReadWriteMultipleHoldingRegister+0x146>
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
 8014b5e:	89fb      	ldrh	r3, [r7, #14]
 8014b60:	005a      	lsls	r2, r3, #1
 8014b62:	7b7b      	ldrb	r3, [r7, #13]
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 8014b64:	429a      	cmp	r2, r3
 8014b66:	d148      	bne.n	8014bfa <eMBFuncReadWriteMultipleHoldingRegister+0x146>
        {
            /* Make callback to update the register values. */
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	f103 000a 	add.w	r0, r3, #10
 8014b6e:	89fa      	ldrh	r2, [r7, #14]
 8014b70:	8a39      	ldrh	r1, [r7, #16]
 8014b72:	2301      	movs	r3, #1
 8014b74:	f001 fdc4 	bl	8016700 <eMBRegHoldingCB>
 8014b78:	4603      	mov	r3, r0
 8014b7a:	75bb      	strb	r3, [r7, #22]
                                          usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );

            if( eRegStatus == MB_ENOERR )
 8014b7c:	7dbb      	ldrb	r3, [r7, #22]
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	d131      	bne.n	8014be6 <eMBFuncReadWriteMultipleHoldingRegister+0x132>
            {
                /* Set the current PDU data pointer to the beginning. */
                pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	60bb      	str	r3, [r7, #8]
                *usLen = MB_PDU_FUNC_OFF;
 8014b86:	683b      	ldr	r3, [r7, #0]
 8014b88:	2200      	movs	r2, #0
 8014b8a:	801a      	strh	r2, [r3, #0]

                /* First byte contains the function code. */
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 8014b8c:	68bb      	ldr	r3, [r7, #8]
 8014b8e:	1c5a      	adds	r2, r3, #1
 8014b90:	60ba      	str	r2, [r7, #8]
 8014b92:	2217      	movs	r2, #23
 8014b94:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 8014b96:	683b      	ldr	r3, [r7, #0]
 8014b98:	881b      	ldrh	r3, [r3, #0]
 8014b9a:	3301      	adds	r3, #1
 8014b9c:	b29a      	uxth	r2, r3
 8014b9e:	683b      	ldr	r3, [r7, #0]
 8014ba0:	801a      	strh	r2, [r3, #0]

                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 8014ba2:	8a7b      	ldrh	r3, [r7, #18]
 8014ba4:	b2da      	uxtb	r2, r3
 8014ba6:	68bb      	ldr	r3, [r7, #8]
 8014ba8:	1c59      	adds	r1, r3, #1
 8014baa:	60b9      	str	r1, [r7, #8]
 8014bac:	0052      	lsls	r2, r2, #1
 8014bae:	b2d2      	uxtb	r2, r2
 8014bb0:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 8014bb2:	683b      	ldr	r3, [r7, #0]
 8014bb4:	881b      	ldrh	r3, [r3, #0]
 8014bb6:	3301      	adds	r3, #1
 8014bb8:	b29a      	uxth	r2, r3
 8014bba:	683b      	ldr	r3, [r7, #0]
 8014bbc:	801a      	strh	r2, [r3, #0]

                /* Make the read callback. */
                eRegStatus =
                    eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
 8014bbe:	8a7a      	ldrh	r2, [r7, #18]
 8014bc0:	8ab9      	ldrh	r1, [r7, #20]
 8014bc2:	2300      	movs	r3, #0
 8014bc4:	68b8      	ldr	r0, [r7, #8]
 8014bc6:	f001 fd9b 	bl	8016700 <eMBRegHoldingCB>
 8014bca:	4603      	mov	r3, r0
 8014bcc:	75bb      	strb	r3, [r7, #22]
                if( eRegStatus == MB_ENOERR )
 8014bce:	7dbb      	ldrb	r3, [r7, #22]
 8014bd0:	2b00      	cmp	r3, #0
 8014bd2:	d108      	bne.n	8014be6 <eMBFuncReadWriteMultipleHoldingRegister+0x132>
                {
                    *usLen += 2 * usRegReadCount;
 8014bd4:	683b      	ldr	r3, [r7, #0]
 8014bd6:	881a      	ldrh	r2, [r3, #0]
 8014bd8:	8a7b      	ldrh	r3, [r7, #18]
 8014bda:	005b      	lsls	r3, r3, #1
 8014bdc:	b29b      	uxth	r3, r3
 8014bde:	4413      	add	r3, r2
 8014be0:	b29a      	uxth	r2, r3
 8014be2:	683b      	ldr	r3, [r7, #0]
 8014be4:	801a      	strh	r2, [r3, #0]
                }
            }
            if( eRegStatus != MB_ENOERR )
 8014be6:	7dbb      	ldrb	r3, [r7, #22]
 8014be8:	2b00      	cmp	r3, #0
 8014bea:	d008      	beq.n	8014bfe <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8014bec:	7dbb      	ldrb	r3, [r7, #22]
 8014bee:	4618      	mov	r0, r3
 8014bf0:	f000 fbce 	bl	8015390 <prveMBError2Exception>
 8014bf4:	4603      	mov	r3, r0
 8014bf6:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 8014bf8:	e001      	b.n	8014bfe <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8014bfa:	2303      	movs	r3, #3
 8014bfc:	75fb      	strb	r3, [r7, #23]
        }
    }
    return eStatus;
 8014bfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8014c00:	4618      	mov	r0, r3
 8014c02:	3718      	adds	r7, #24
 8014c04:	46bd      	mov	sp, r7
 8014c06:	bd80      	pop	{r7, pc}

08014c08 <eMBMasterFuncWriteHoldingRegister>:
    return eErrStatus;
}

eMBException
eMBMasterFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8014c08:	b580      	push	{r7, lr}
 8014c0a:	b084      	sub	sp, #16
 8014c0c:	af00      	add	r7, sp, #0
 8014c0e:	6078      	str	r0, [r7, #4]
 8014c10:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
 8014c12:	2300      	movs	r3, #0
 8014c14:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_SIZE_MIN + MB_PDU_FUNC_WRITE_SIZE ) )
 8014c16:	683b      	ldr	r3, [r7, #0]
 8014c18:	881b      	ldrh	r3, [r3, #0]
 8014c1a:	2b05      	cmp	r3, #5
 8014c1c:	d122      	bne.n	8014c64 <eMBMasterFuncWriteHoldingRegister+0x5c>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	3301      	adds	r3, #1
 8014c22:	781b      	ldrb	r3, [r3, #0]
 8014c24:	b29b      	uxth	r3, r3
 8014c26:	021b      	lsls	r3, r3, #8
 8014c28:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	3302      	adds	r3, #2
 8014c2e:	781b      	ldrb	r3, [r3, #0]
 8014c30:	b29a      	uxth	r2, r3
 8014c32:	89bb      	ldrh	r3, [r7, #12]
 8014c34:	4313      	orrs	r3, r2
 8014c36:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8014c38:	89bb      	ldrh	r3, [r7, #12]
 8014c3a:	3301      	adds	r3, #1
 8014c3c:	81bb      	strh	r3, [r7, #12]

        /* Make callback to update the value. */
        eRegStatus = eMBMasterRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	1cd8      	adds	r0, r3, #3
 8014c42:	89b9      	ldrh	r1, [r7, #12]
 8014c44:	2301      	movs	r3, #1
 8014c46:	2201      	movs	r2, #1
 8014c48:	f001 ff62 	bl	8016b10 <eMBMasterRegHoldingCB>
 8014c4c:	4603      	mov	r3, r0
 8014c4e:	72fb      	strb	r3, [r7, #11]
                                      usRegAddress, 1, MB_REG_WRITE );

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
 8014c50:	7afb      	ldrb	r3, [r7, #11]
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	d008      	beq.n	8014c68 <eMBMasterFuncWriteHoldingRegister+0x60>
        {
            eStatus = prveMBError2Exception( eRegStatus );
 8014c56:	7afb      	ldrb	r3, [r7, #11]
 8014c58:	4618      	mov	r0, r3
 8014c5a:	f000 fb99 	bl	8015390 <prveMBError2Exception>
 8014c5e:	4603      	mov	r3, r0
 8014c60:	73fb      	strb	r3, [r7, #15]
 8014c62:	e001      	b.n	8014c68 <eMBMasterFuncWriteHoldingRegister+0x60>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8014c64:	2303      	movs	r3, #3
 8014c66:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 8014c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8014c6a:	4618      	mov	r0, r3
 8014c6c:	3710      	adds	r7, #16
 8014c6e:	46bd      	mov	sp, r7
 8014c70:	bd80      	pop	{r7, pc}

08014c72 <eMBMasterReqWriteMultipleHoldingRegister>:
eMBMasterReqWriteMultipleHoldingRegister( 	UCHAR ucSndAddr,
											USHORT usRegAddr,
											USHORT usNRegs,
											USHORT * pusDataBuffer,
											LONG lTimeOut )
{
 8014c72:	b580      	push	{r7, lr}
 8014c74:	b086      	sub	sp, #24
 8014c76:	af00      	add	r7, sp, #0
 8014c78:	607b      	str	r3, [r7, #4]
 8014c7a:	4603      	mov	r3, r0
 8014c7c:	73fb      	strb	r3, [r7, #15]
 8014c7e:	460b      	mov	r3, r1
 8014c80:	81bb      	strh	r3, [r7, #12]
 8014c82:	4613      	mov	r3, r2
 8014c84:	817b      	strh	r3, [r7, #10]
    UCHAR                 *ucMBFrame;
    USHORT                 usRegIndex = 0;
 8014c86:	2300      	movs	r3, #0
 8014c88:	82fb      	strh	r3, [r7, #22]
    eMBMasterReqErrCode    eErrStatus = MB_MRE_NO_ERR;
 8014c8a:	2300      	movs	r3, #0
 8014c8c:	757b      	strb	r3, [r7, #21]

    if ( ucSndAddr > MB_MASTER_TOTAL_SLAVE_NUM ) eErrStatus = MB_MRE_ILL_ARG;
 8014c8e:	7bfb      	ldrb	r3, [r7, #15]
 8014c90:	2b10      	cmp	r3, #16
 8014c92:	d902      	bls.n	8014c9a <eMBMasterReqWriteMultipleHoldingRegister+0x28>
 8014c94:	2302      	movs	r3, #2
 8014c96:	757b      	strb	r3, [r7, #21]
 8014c98:	e062      	b.n	8014d60 <eMBMasterReqWriteMultipleHoldingRegister+0xee>
    else if ( xMBMasterRunResTake( lTimeOut ) == FALSE ) eErrStatus = MB_MRE_MASTER_BUSY;
 8014c9a:	6a38      	ldr	r0, [r7, #32]
 8014c9c:	f001 f986 	bl	8015fac <xMBMasterRunResTake>
 8014ca0:	4603      	mov	r3, r0
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	d102      	bne.n	8014cac <eMBMasterReqWriteMultipleHoldingRegister+0x3a>
 8014ca6:	2305      	movs	r3, #5
 8014ca8:	757b      	strb	r3, [r7, #21]
 8014caa:	e059      	b.n	8014d60 <eMBMasterReqWriteMultipleHoldingRegister+0xee>
    else
    {
		vMBMasterGetPDUSndBuf(&ucMBFrame);
 8014cac:	f107 0310 	add.w	r3, r7, #16
 8014cb0:	4618      	mov	r0, r3
 8014cb2:	f002 fdcd 	bl	8017850 <vMBMasterGetPDUSndBuf>
		vMBMasterSetDestAddress(ucSndAddr);
 8014cb6:	7bfb      	ldrb	r3, [r7, #15]
 8014cb8:	4618      	mov	r0, r3
 8014cba:	f000 fed9 	bl	8015a70 <vMBMasterSetDestAddress>
		ucMBFrame[MB_PDU_FUNC_OFF]                     = MB_FUNC_WRITE_MULTIPLE_REGISTERS;
 8014cbe:	693b      	ldr	r3, [r7, #16]
 8014cc0:	2210      	movs	r2, #16
 8014cc2:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_WRITE_MUL_ADDR_OFF]       = usRegAddr >> 8;
 8014cc4:	89bb      	ldrh	r3, [r7, #12]
 8014cc6:	0a1b      	lsrs	r3, r3, #8
 8014cc8:	b29a      	uxth	r2, r3
 8014cca:	693b      	ldr	r3, [r7, #16]
 8014ccc:	3301      	adds	r3, #1
 8014cce:	b2d2      	uxtb	r2, r2
 8014cd0:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_WRITE_MUL_ADDR_OFF + 1]   = usRegAddr;
 8014cd2:	693b      	ldr	r3, [r7, #16]
 8014cd4:	3302      	adds	r3, #2
 8014cd6:	89ba      	ldrh	r2, [r7, #12]
 8014cd8:	b2d2      	uxtb	r2, r2
 8014cda:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_WRITE_MUL_REGCNT_OFF]     = usNRegs >> 8;
 8014cdc:	897b      	ldrh	r3, [r7, #10]
 8014cde:	0a1b      	lsrs	r3, r3, #8
 8014ce0:	b29a      	uxth	r2, r3
 8014ce2:	693b      	ldr	r3, [r7, #16]
 8014ce4:	3303      	adds	r3, #3
 8014ce6:	b2d2      	uxtb	r2, r2
 8014ce8:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_WRITE_MUL_REGCNT_OFF + 1] = usNRegs ;
 8014cea:	693b      	ldr	r3, [r7, #16]
 8014cec:	3304      	adds	r3, #4
 8014cee:	897a      	ldrh	r2, [r7, #10]
 8014cf0:	b2d2      	uxtb	r2, r2
 8014cf2:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_WRITE_MUL_BYTECNT_OFF]    = usNRegs * 2;
 8014cf4:	897b      	ldrh	r3, [r7, #10]
 8014cf6:	b2da      	uxtb	r2, r3
 8014cf8:	693b      	ldr	r3, [r7, #16]
 8014cfa:	3305      	adds	r3, #5
 8014cfc:	0052      	lsls	r2, r2, #1
 8014cfe:	b2d2      	uxtb	r2, r2
 8014d00:	701a      	strb	r2, [r3, #0]
		ucMBFrame += MB_PDU_REQ_WRITE_MUL_VALUES_OFF;
 8014d02:	693b      	ldr	r3, [r7, #16]
 8014d04:	3306      	adds	r3, #6
 8014d06:	613b      	str	r3, [r7, #16]
		while( usNRegs > usRegIndex)
 8014d08:	e017      	b.n	8014d3a <eMBMasterReqWriteMultipleHoldingRegister+0xc8>
		{
			*ucMBFrame++ = pusDataBuffer[usRegIndex] >> 8;
 8014d0a:	8afb      	ldrh	r3, [r7, #22]
 8014d0c:	005b      	lsls	r3, r3, #1
 8014d0e:	687a      	ldr	r2, [r7, #4]
 8014d10:	4413      	add	r3, r2
 8014d12:	881b      	ldrh	r3, [r3, #0]
 8014d14:	0a1b      	lsrs	r3, r3, #8
 8014d16:	b299      	uxth	r1, r3
 8014d18:	693b      	ldr	r3, [r7, #16]
 8014d1a:	1c5a      	adds	r2, r3, #1
 8014d1c:	613a      	str	r2, [r7, #16]
 8014d1e:	b2ca      	uxtb	r2, r1
 8014d20:	701a      	strb	r2, [r3, #0]
			*ucMBFrame++ = pusDataBuffer[usRegIndex++] ;
 8014d22:	8afb      	ldrh	r3, [r7, #22]
 8014d24:	1c5a      	adds	r2, r3, #1
 8014d26:	82fa      	strh	r2, [r7, #22]
 8014d28:	005b      	lsls	r3, r3, #1
 8014d2a:	687a      	ldr	r2, [r7, #4]
 8014d2c:	4413      	add	r3, r2
 8014d2e:	8819      	ldrh	r1, [r3, #0]
 8014d30:	693b      	ldr	r3, [r7, #16]
 8014d32:	1c5a      	adds	r2, r3, #1
 8014d34:	613a      	str	r2, [r7, #16]
 8014d36:	b2ca      	uxtb	r2, r1
 8014d38:	701a      	strb	r2, [r3, #0]
		while( usNRegs > usRegIndex)
 8014d3a:	897a      	ldrh	r2, [r7, #10]
 8014d3c:	8afb      	ldrh	r3, [r7, #22]
 8014d3e:	429a      	cmp	r2, r3
 8014d40:	d8e3      	bhi.n	8014d0a <eMBMasterReqWriteMultipleHoldingRegister+0x98>
		}
		vMBMasterSetPDUSndLength( MB_PDU_SIZE_MIN + MB_PDU_REQ_WRITE_MUL_SIZE_MIN + 2*usNRegs );
 8014d42:	897b      	ldrh	r3, [r7, #10]
 8014d44:	3303      	adds	r3, #3
 8014d46:	b29b      	uxth	r3, r3
 8014d48:	005b      	lsls	r3, r3, #1
 8014d4a:	b29b      	uxth	r3, r3
 8014d4c:	4618      	mov	r0, r3
 8014d4e:	f002 fd8f 	bl	8017870 <vMBMasterSetPDUSndLength>
		( void ) xMBMasterPortEventPost( EV_MASTER_FRAME_SENT );
 8014d52:	2008      	movs	r0, #8
 8014d54:	f001 f894 	bl	8015e80 <xMBMasterPortEventPost>
		eErrStatus = eMBMasterWaitRequestFinish( );
 8014d58:	f001 f998 	bl	801608c <eMBMasterWaitRequestFinish>
 8014d5c:	4603      	mov	r3, r0
 8014d5e:	757b      	strb	r3, [r7, #21]
    }
    return eErrStatus;
 8014d60:	7d7b      	ldrb	r3, [r7, #21]
}
 8014d62:	4618      	mov	r0, r3
 8014d64:	3718      	adds	r7, #24
 8014d66:	46bd      	mov	sp, r7
 8014d68:	bd80      	pop	{r7, pc}

08014d6a <eMBMasterFuncWriteMultipleHoldingRegister>:

eMBException
eMBMasterFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8014d6a:	b580      	push	{r7, lr}
 8014d6c:	b086      	sub	sp, #24
 8014d6e:	af00      	add	r7, sp, #0
 8014d70:	6078      	str	r0, [r7, #4]
 8014d72:	6039      	str	r1, [r7, #0]
    UCHAR          *ucMBFrame;
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
 8014d74:	2300      	movs	r3, #0
 8014d76:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, the *usLen is not need check. */
    if( ( *usLen == MB_PDU_SIZE_MIN + MB_PDU_FUNC_WRITE_MUL_SIZE ) || xMBMasterRequestIsBroadcast() )
 8014d78:	683b      	ldr	r3, [r7, #0]
 8014d7a:	881b      	ldrh	r3, [r3, #0]
 8014d7c:	2b05      	cmp	r3, #5
 8014d7e:	d004      	beq.n	8014d8a <eMBMasterFuncWriteMultipleHoldingRegister+0x20>
 8014d80:	f002 fd92 	bl	80178a8 <xMBMasterRequestIsBroadcast>
 8014d84:	4603      	mov	r3, r0
 8014d86:	2b00      	cmp	r3, #0
 8014d88:	d03f      	beq.n	8014e0a <eMBMasterFuncWriteMultipleHoldingRegister+0xa0>
    {
		vMBMasterGetPDUSndBuf(&ucMBFrame);
 8014d8a:	f107 030c 	add.w	r3, r7, #12
 8014d8e:	4618      	mov	r0, r3
 8014d90:	f002 fd5e 	bl	8017850 <vMBMasterGetPDUSndBuf>
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_WRITE_MUL_ADDR_OFF] << 8 );
 8014d94:	68fb      	ldr	r3, [r7, #12]
 8014d96:	3301      	adds	r3, #1
 8014d98:	781b      	ldrb	r3, [r3, #0]
 8014d9a:	b29b      	uxth	r3, r3
 8014d9c:	021b      	lsls	r3, r3, #8
 8014d9e:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_WRITE_MUL_ADDR_OFF + 1] );
 8014da0:	68fb      	ldr	r3, [r7, #12]
 8014da2:	3302      	adds	r3, #2
 8014da4:	781b      	ldrb	r3, [r3, #0]
 8014da6:	b29a      	uxth	r2, r3
 8014da8:	8abb      	ldrh	r3, [r7, #20]
 8014daa:	4313      	orrs	r3, r2
 8014dac:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8014dae:	8abb      	ldrh	r3, [r7, #20]
 8014db0:	3301      	adds	r3, #1
 8014db2:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_WRITE_MUL_REGCNT_OFF] << 8 );
 8014db4:	68fb      	ldr	r3, [r7, #12]
 8014db6:	3303      	adds	r3, #3
 8014db8:	781b      	ldrb	r3, [r3, #0]
 8014dba:	b29b      	uxth	r3, r3
 8014dbc:	021b      	lsls	r3, r3, #8
 8014dbe:	827b      	strh	r3, [r7, #18]
        usRegCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_WRITE_MUL_REGCNT_OFF + 1] );
 8014dc0:	68fb      	ldr	r3, [r7, #12]
 8014dc2:	3304      	adds	r3, #4
 8014dc4:	781b      	ldrb	r3, [r3, #0]
 8014dc6:	b29a      	uxth	r2, r3
 8014dc8:	8a7b      	ldrh	r3, [r7, #18]
 8014dca:	4313      	orrs	r3, r2
 8014dcc:	827b      	strh	r3, [r7, #18]

        ucRegByteCount = ucMBFrame[MB_PDU_REQ_WRITE_MUL_BYTECNT_OFF];
 8014dce:	68fb      	ldr	r3, [r7, #12]
 8014dd0:	795b      	ldrb	r3, [r3, #5]
 8014dd2:	747b      	strb	r3, [r7, #17]

        if( ucRegByteCount == 2 * usRegCount )
 8014dd4:	7c7a      	ldrb	r2, [r7, #17]
 8014dd6:	8a7b      	ldrh	r3, [r7, #18]
 8014dd8:	005b      	lsls	r3, r3, #1
 8014dda:	429a      	cmp	r2, r3
 8014ddc:	d112      	bne.n	8014e04 <eMBMasterFuncWriteMultipleHoldingRegister+0x9a>
        {
            /* Make callback to update the register values. */
            eRegStatus =
                eMBMasterRegHoldingCB( &ucMBFrame[MB_PDU_REQ_WRITE_MUL_VALUES_OFF],
 8014dde:	68fb      	ldr	r3, [r7, #12]
 8014de0:	1d98      	adds	r0, r3, #6
 8014de2:	8a7a      	ldrh	r2, [r7, #18]
 8014de4:	8ab9      	ldrh	r1, [r7, #20]
 8014de6:	2301      	movs	r3, #1
 8014de8:	f001 fe92 	bl	8016b10 <eMBMasterRegHoldingCB>
 8014dec:	4603      	mov	r3, r0
 8014dee:	743b      	strb	r3, [r7, #16]
                                 usRegAddress, usRegCount, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8014df0:	7c3b      	ldrb	r3, [r7, #16]
 8014df2:	2b00      	cmp	r3, #0
 8014df4:	d00c      	beq.n	8014e10 <eMBMasterFuncWriteMultipleHoldingRegister+0xa6>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8014df6:	7c3b      	ldrb	r3, [r7, #16]
 8014df8:	4618      	mov	r0, r3
 8014dfa:	f000 fac9 	bl	8015390 <prveMBError2Exception>
 8014dfe:	4603      	mov	r3, r0
 8014e00:	75fb      	strb	r3, [r7, #23]
        if( ucRegByteCount == 2 * usRegCount )
 8014e02:	e005      	b.n	8014e10 <eMBMasterFuncWriteMultipleHoldingRegister+0xa6>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8014e04:	2303      	movs	r3, #3
 8014e06:	75fb      	strb	r3, [r7, #23]
        if( ucRegByteCount == 2 * usRegCount )
 8014e08:	e002      	b.n	8014e10 <eMBMasterFuncWriteMultipleHoldingRegister+0xa6>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8014e0a:	2303      	movs	r3, #3
 8014e0c:	75fb      	strb	r3, [r7, #23]
 8014e0e:	e000      	b.n	8014e12 <eMBMasterFuncWriteMultipleHoldingRegister+0xa8>
        if( ucRegByteCount == 2 * usRegCount )
 8014e10:	bf00      	nop
    }
    return eStatus;
 8014e12:	7dfb      	ldrb	r3, [r7, #23]
}
 8014e14:	4618      	mov	r0, r3
 8014e16:	3718      	adds	r7, #24
 8014e18:	46bd      	mov	sp, r7
 8014e1a:	bd80      	pop	{r7, pc}

08014e1c <eMBMasterFuncReadHoldingRegister>:
    return eErrStatus;
}

eMBException
eMBMasterFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8014e1c:	b580      	push	{r7, lr}
 8014e1e:	b086      	sub	sp, #24
 8014e20:	af00      	add	r7, sp, #0
 8014e22:	6078      	str	r0, [r7, #4]
 8014e24:	6039      	str	r1, [r7, #0]
    UCHAR          *ucMBFrame;
    USHORT          usRegAddress;
    USHORT          usRegCount;

    eMBException    eStatus = MB_EX_NONE;
 8014e26:	2300      	movs	r3, #0
 8014e28:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, and it's read mode. This request don't need execute. */
    if ( xMBMasterRequestIsBroadcast() )
 8014e2a:	f002 fd3d 	bl	80178a8 <xMBMasterRequestIsBroadcast>
 8014e2e:	4603      	mov	r3, r0
 8014e30:	2b00      	cmp	r3, #0
 8014e32:	d002      	beq.n	8014e3a <eMBMasterFuncReadHoldingRegister+0x1e>
    {
    	eStatus = MB_EX_NONE;
 8014e34:	2300      	movs	r3, #0
 8014e36:	75fb      	strb	r3, [r7, #23]
 8014e38:	e047      	b.n	8014eca <eMBMasterFuncReadHoldingRegister+0xae>
    }
    else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
 8014e3a:	683b      	ldr	r3, [r7, #0]
 8014e3c:	881b      	ldrh	r3, [r3, #0]
 8014e3e:	2b01      	cmp	r3, #1
 8014e40:	d941      	bls.n	8014ec6 <eMBMasterFuncReadHoldingRegister+0xaa>
    {
		vMBMasterGetPDUSndBuf(&ucMBFrame);
 8014e42:	f107 030c 	add.w	r3, r7, #12
 8014e46:	4618      	mov	r0, r3
 8014e48:	f002 fd02 	bl	8017850 <vMBMasterGetPDUSndBuf>
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
 8014e4c:	68fb      	ldr	r3, [r7, #12]
 8014e4e:	3301      	adds	r3, #1
 8014e50:	781b      	ldrb	r3, [r3, #0]
 8014e52:	b29b      	uxth	r3, r3
 8014e54:	021b      	lsls	r3, r3, #8
 8014e56:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
 8014e58:	68fb      	ldr	r3, [r7, #12]
 8014e5a:	3302      	adds	r3, #2
 8014e5c:	781b      	ldrb	r3, [r3, #0]
 8014e5e:	b29a      	uxth	r2, r3
 8014e60:	8abb      	ldrh	r3, [r7, #20]
 8014e62:	4313      	orrs	r3, r2
 8014e64:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8014e66:	8abb      	ldrh	r3, [r7, #20]
 8014e68:	3301      	adds	r3, #1
 8014e6a:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF] << 8 );
 8014e6c:	68fb      	ldr	r3, [r7, #12]
 8014e6e:	3303      	adds	r3, #3
 8014e70:	781b      	ldrb	r3, [r3, #0]
 8014e72:	b29b      	uxth	r3, r3
 8014e74:	021b      	lsls	r3, r3, #8
 8014e76:	827b      	strh	r3, [r7, #18]
        usRegCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF + 1] );
 8014e78:	68fb      	ldr	r3, [r7, #12]
 8014e7a:	3304      	adds	r3, #4
 8014e7c:	781b      	ldrb	r3, [r3, #0]
 8014e7e:	b29a      	uxth	r2, r3
 8014e80:	8a7b      	ldrh	r3, [r7, #18]
 8014e82:	4313      	orrs	r3, r2
 8014e84:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception.
         */
        if( ( usRegCount >= 1 ) && ( 2 * usRegCount == pucFrame[MB_PDU_FUNC_READ_BYTECNT_OFF] ) )
 8014e86:	8a7b      	ldrh	r3, [r7, #18]
 8014e88:	2b00      	cmp	r3, #0
 8014e8a:	d019      	beq.n	8014ec0 <eMBMasterFuncReadHoldingRegister+0xa4>
 8014e8c:	8a7b      	ldrh	r3, [r7, #18]
 8014e8e:	005b      	lsls	r3, r3, #1
 8014e90:	687a      	ldr	r2, [r7, #4]
 8014e92:	3201      	adds	r2, #1
 8014e94:	7812      	ldrb	r2, [r2, #0]
 8014e96:	4293      	cmp	r3, r2
 8014e98:	d112      	bne.n	8014ec0 <eMBMasterFuncReadHoldingRegister+0xa4>
        {
            /* Make callback to fill the buffer. */
            eRegStatus = eMBMasterRegHoldingCB( &pucFrame[MB_PDU_FUNC_READ_VALUES_OFF], usRegAddress, usRegCount, MB_REG_READ );
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	1c98      	adds	r0, r3, #2
 8014e9e:	8a7a      	ldrh	r2, [r7, #18]
 8014ea0:	8ab9      	ldrh	r1, [r7, #20]
 8014ea2:	2300      	movs	r3, #0
 8014ea4:	f001 fe34 	bl	8016b10 <eMBMasterRegHoldingCB>
 8014ea8:	4603      	mov	r3, r0
 8014eaa:	747b      	strb	r3, [r7, #17]
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8014eac:	7c7b      	ldrb	r3, [r7, #17]
 8014eae:	2b00      	cmp	r3, #0
 8014eb0:	d00b      	beq.n	8014eca <eMBMasterFuncReadHoldingRegister+0xae>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8014eb2:	7c7b      	ldrb	r3, [r7, #17]
 8014eb4:	4618      	mov	r0, r3
 8014eb6:	f000 fa6b 	bl	8015390 <prveMBError2Exception>
 8014eba:	4603      	mov	r3, r0
 8014ebc:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 8014ebe:	e004      	b.n	8014eca <eMBMasterFuncReadHoldingRegister+0xae>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8014ec0:	2303      	movs	r3, #3
 8014ec2:	75fb      	strb	r3, [r7, #23]
 8014ec4:	e001      	b.n	8014eca <eMBMasterFuncReadHoldingRegister+0xae>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8014ec6:	2303      	movs	r3, #3
 8014ec8:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 8014eca:	7dfb      	ldrb	r3, [r7, #23]
}
 8014ecc:	4618      	mov	r0, r3
 8014ece:	3718      	adds	r7, #24
 8014ed0:	46bd      	mov	sp, r7
 8014ed2:	bd80      	pop	{r7, pc}

08014ed4 <eMBMasterFuncReadWriteMultipleHoldingRegister>:
    return eErrStatus;
}

eMBException
eMBMasterFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8014ed4:	b580      	push	{r7, lr}
 8014ed6:	b086      	sub	sp, #24
 8014ed8:	af00      	add	r7, sp, #0
 8014eda:	6078      	str	r0, [r7, #4]
 8014edc:	6039      	str	r1, [r7, #0]
    USHORT          usRegReadCount;
    USHORT          usRegWriteAddress;
    USHORT          usRegWriteCount;
    UCHAR          *ucMBFrame;

    eMBException    eStatus = MB_EX_NONE;
 8014ede:	2300      	movs	r3, #0
 8014ee0:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, and it's read mode. This request don't need execute. */
    if ( xMBMasterRequestIsBroadcast() )
 8014ee2:	f002 fce1 	bl	80178a8 <xMBMasterRequestIsBroadcast>
 8014ee6:	4603      	mov	r3, r0
 8014ee8:	2b00      	cmp	r3, #0
 8014eea:	d002      	beq.n	8014ef2 <eMBMasterFuncReadWriteMultipleHoldingRegister+0x1e>
    {
    	eStatus = MB_EX_NONE;
 8014eec:	2300      	movs	r3, #0
 8014eee:	75fb      	strb	r3, [r7, #23]
 8014ef0:	e06b      	b.n	8014fca <eMBMasterFuncReadWriteMultipleHoldingRegister+0xf6>
    }
    else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READWRITE_SIZE_MIN )
 8014ef2:	683b      	ldr	r3, [r7, #0]
 8014ef4:	881b      	ldrh	r3, [r3, #0]
 8014ef6:	2b01      	cmp	r3, #1
 8014ef8:	d967      	bls.n	8014fca <eMBMasterFuncReadWriteMultipleHoldingRegister+0xf6>
    {
    	vMBMasterGetPDUSndBuf(&ucMBFrame);
 8014efa:	f107 0308 	add.w	r3, r7, #8
 8014efe:	4618      	mov	r0, r3
 8014f00:	f002 fca6 	bl	8017850 <vMBMasterGetPDUSndBuf>
        usRegReadAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_ADDR_OFF] << 8U );
 8014f04:	68bb      	ldr	r3, [r7, #8]
 8014f06:	3301      	adds	r3, #1
 8014f08:	781b      	ldrb	r3, [r3, #0]
 8014f0a:	b29b      	uxth	r3, r3
 8014f0c:	021b      	lsls	r3, r3, #8
 8014f0e:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_ADDR_OFF + 1] );
 8014f10:	68bb      	ldr	r3, [r7, #8]
 8014f12:	3302      	adds	r3, #2
 8014f14:	781b      	ldrb	r3, [r3, #0]
 8014f16:	b29a      	uxth	r2, r3
 8014f18:	8abb      	ldrh	r3, [r7, #20]
 8014f1a:	4313      	orrs	r3, r2
 8014f1c:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress++;
 8014f1e:	8abb      	ldrh	r3, [r7, #20]
 8014f20:	3301      	adds	r3, #1
 8014f22:	82bb      	strh	r3, [r7, #20]

        usRegReadCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_REGCNT_OFF] << 8U );
 8014f24:	68bb      	ldr	r3, [r7, #8]
 8014f26:	3303      	adds	r3, #3
 8014f28:	781b      	ldrb	r3, [r3, #0]
 8014f2a:	b29b      	uxth	r3, r3
 8014f2c:	021b      	lsls	r3, r3, #8
 8014f2e:	827b      	strh	r3, [r7, #18]
        usRegReadCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_REGCNT_OFF + 1] );
 8014f30:	68bb      	ldr	r3, [r7, #8]
 8014f32:	3304      	adds	r3, #4
 8014f34:	781b      	ldrb	r3, [r3, #0]
 8014f36:	b29a      	uxth	r2, r3
 8014f38:	8a7b      	ldrh	r3, [r7, #18]
 8014f3a:	4313      	orrs	r3, r2
 8014f3c:	827b      	strh	r3, [r7, #18]

        usRegWriteAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_ADDR_OFF] << 8U );
 8014f3e:	68bb      	ldr	r3, [r7, #8]
 8014f40:	3305      	adds	r3, #5
 8014f42:	781b      	ldrb	r3, [r3, #0]
 8014f44:	b29b      	uxth	r3, r3
 8014f46:	021b      	lsls	r3, r3, #8
 8014f48:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_ADDR_OFF + 1] );
 8014f4a:	68bb      	ldr	r3, [r7, #8]
 8014f4c:	3306      	adds	r3, #6
 8014f4e:	781b      	ldrb	r3, [r3, #0]
 8014f50:	b29a      	uxth	r2, r3
 8014f52:	8a3b      	ldrh	r3, [r7, #16]
 8014f54:	4313      	orrs	r3, r2
 8014f56:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress++;
 8014f58:	8a3b      	ldrh	r3, [r7, #16]
 8014f5a:	3301      	adds	r3, #1
 8014f5c:	823b      	strh	r3, [r7, #16]

        usRegWriteCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_REGCNT_OFF] << 8U );
 8014f5e:	68bb      	ldr	r3, [r7, #8]
 8014f60:	3307      	adds	r3, #7
 8014f62:	781b      	ldrb	r3, [r3, #0]
 8014f64:	b29b      	uxth	r3, r3
 8014f66:	021b      	lsls	r3, r3, #8
 8014f68:	81fb      	strh	r3, [r7, #14]
        usRegWriteCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_REGCNT_OFF + 1] );
 8014f6a:	68bb      	ldr	r3, [r7, #8]
 8014f6c:	3308      	adds	r3, #8
 8014f6e:	781b      	ldrb	r3, [r3, #0]
 8014f70:	b29a      	uxth	r2, r3
 8014f72:	89fb      	ldrh	r3, [r7, #14]
 8014f74:	4313      	orrs	r3, r2
 8014f76:	81fb      	strh	r3, [r7, #14]

        if( ( 2 * usRegReadCount ) == pucFrame[MB_PDU_FUNC_READWRITE_READ_BYTECNT_OFF] )
 8014f78:	8a7b      	ldrh	r3, [r7, #18]
 8014f7a:	005b      	lsls	r3, r3, #1
 8014f7c:	687a      	ldr	r2, [r7, #4]
 8014f7e:	3201      	adds	r2, #1
 8014f80:	7812      	ldrb	r2, [r2, #0]
 8014f82:	4293      	cmp	r3, r2
 8014f84:	d11f      	bne.n	8014fc6 <eMBMasterFuncReadWriteMultipleHoldingRegister+0xf2>
        {
            /* Make callback to update the register values. */
            eRegStatus = eMBMasterRegHoldingCB( &ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_VALUES_OFF],
 8014f86:	68bb      	ldr	r3, [r7, #8]
 8014f88:	f103 000a 	add.w	r0, r3, #10
 8014f8c:	89fa      	ldrh	r2, [r7, #14]
 8014f8e:	8a39      	ldrh	r1, [r7, #16]
 8014f90:	2301      	movs	r3, #1
 8014f92:	f001 fdbd 	bl	8016b10 <eMBMasterRegHoldingCB>
 8014f96:	4603      	mov	r3, r0
 8014f98:	75bb      	strb	r3, [r7, #22]
                                           usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );

            if( eRegStatus == MB_ENOERR )
 8014f9a:	7dbb      	ldrb	r3, [r7, #22]
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	d108      	bne.n	8014fb2 <eMBMasterFuncReadWriteMultipleHoldingRegister+0xde>
            {
                /* Make the read callback. */
				eRegStatus = eMBMasterRegHoldingCB(&pucFrame[MB_PDU_FUNC_READWRITE_READ_VALUES_OFF],
 8014fa0:	687b      	ldr	r3, [r7, #4]
 8014fa2:	1c98      	adds	r0, r3, #2
 8014fa4:	8a7a      	ldrh	r2, [r7, #18]
 8014fa6:	8ab9      	ldrh	r1, [r7, #20]
 8014fa8:	2300      	movs	r3, #0
 8014faa:	f001 fdb1 	bl	8016b10 <eMBMasterRegHoldingCB>
 8014fae:	4603      	mov	r3, r0
 8014fb0:	75bb      	strb	r3, [r7, #22]
						                      usRegReadAddress, usRegReadCount, MB_REG_READ);
            }
            if( eRegStatus != MB_ENOERR )
 8014fb2:	7dbb      	ldrb	r3, [r7, #22]
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	d008      	beq.n	8014fca <eMBMasterFuncReadWriteMultipleHoldingRegister+0xf6>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8014fb8:	7dbb      	ldrb	r3, [r7, #22]
 8014fba:	4618      	mov	r0, r3
 8014fbc:	f000 f9e8 	bl	8015390 <prveMBError2Exception>
 8014fc0:	4603      	mov	r3, r0
 8014fc2:	75fb      	strb	r3, [r7, #23]
 8014fc4:	e001      	b.n	8014fca <eMBMasterFuncReadWriteMultipleHoldingRegister+0xf6>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8014fc6:	2303      	movs	r3, #3
 8014fc8:	75fb      	strb	r3, [r7, #23]
        }
    }
    return eStatus;
 8014fca:	7dfb      	ldrb	r3, [r7, #23]
}
 8014fcc:	4618      	mov	r0, r3
 8014fce:	3718      	adds	r7, #24
 8014fd0:	46bd      	mov	sp, r7
 8014fd2:	bd80      	pop	{r7, pc}

08014fd4 <eMBFuncReadInputRegister>:
/* ----------------------- Start implementation -----------------------------*/
#if MB_FUNC_READ_INPUT_ENABLED > 0

eMBException
eMBFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8014fd4:	b580      	push	{r7, lr}
 8014fd6:	b086      	sub	sp, #24
 8014fd8:	af00      	add	r7, sp, #0
 8014fda:	6078      	str	r0, [r7, #4]
 8014fdc:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8014fde:	2300      	movs	r3, #0
 8014fe0:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8014fe2:	683b      	ldr	r3, [r7, #0]
 8014fe4:	881b      	ldrh	r3, [r3, #0]
 8014fe6:	2b05      	cmp	r3, #5
 8014fe8:	d15f      	bne.n	80150aa <eMBFuncReadInputRegister+0xd6>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	3301      	adds	r3, #1
 8014fee:	781b      	ldrb	r3, [r3, #0]
 8014ff0:	b29b      	uxth	r3, r3
 8014ff2:	021b      	lsls	r3, r3, #8
 8014ff4:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	3302      	adds	r3, #2
 8014ffa:	781b      	ldrb	r3, [r3, #0]
 8014ffc:	b29a      	uxth	r2, r3
 8014ffe:	8abb      	ldrh	r3, [r7, #20]
 8015000:	4313      	orrs	r3, r2
 8015002:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8015004:	8abb      	ldrh	r3, [r7, #20]
 8015006:	3301      	adds	r3, #1
 8015008:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	3303      	adds	r3, #3
 801500e:	781b      	ldrb	r3, [r3, #0]
 8015010:	b29b      	uxth	r3, r3
 8015012:	021b      	lsls	r3, r3, #8
 8015014:	827b      	strh	r3, [r7, #18]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	3304      	adds	r3, #4
 801501a:	781b      	ldrb	r3, [r3, #0]
 801501c:	b29a      	uxth	r2, r3
 801501e:	8a7b      	ldrh	r3, [r7, #18]
 8015020:	4313      	orrs	r3, r2
 8015022:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 )
 8015024:	8a7b      	ldrh	r3, [r7, #18]
 8015026:	2b00      	cmp	r3, #0
 8015028:	d03c      	beq.n	80150a4 <eMBFuncReadInputRegister+0xd0>
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
 801502a:	8a7b      	ldrh	r3, [r7, #18]
 801502c:	2b7c      	cmp	r3, #124	; 0x7c
 801502e:	d839      	bhi.n	80150a4 <eMBFuncReadInputRegister+0xd0>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8015034:	683b      	ldr	r3, [r7, #0]
 8015036:	2200      	movs	r2, #0
 8015038:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
 801503a:	68fb      	ldr	r3, [r7, #12]
 801503c:	1c5a      	adds	r2, r3, #1
 801503e:	60fa      	str	r2, [r7, #12]
 8015040:	2204      	movs	r2, #4
 8015042:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8015044:	683b      	ldr	r3, [r7, #0]
 8015046:	881b      	ldrh	r3, [r3, #0]
 8015048:	3301      	adds	r3, #1
 801504a:	b29a      	uxth	r2, r3
 801504c:	683b      	ldr	r3, [r7, #0]
 801504e:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
 8015050:	8a7b      	ldrh	r3, [r7, #18]
 8015052:	b2da      	uxtb	r2, r3
 8015054:	68fb      	ldr	r3, [r7, #12]
 8015056:	1c59      	adds	r1, r3, #1
 8015058:	60f9      	str	r1, [r7, #12]
 801505a:	0052      	lsls	r2, r2, #1
 801505c:	b2d2      	uxtb	r2, r2
 801505e:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8015060:	683b      	ldr	r3, [r7, #0]
 8015062:	881b      	ldrh	r3, [r3, #0]
 8015064:	3301      	adds	r3, #1
 8015066:	b29a      	uxth	r2, r3
 8015068:	683b      	ldr	r3, [r7, #0]
 801506a:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );
 801506c:	8a7a      	ldrh	r2, [r7, #18]
 801506e:	8abb      	ldrh	r3, [r7, #20]
 8015070:	4619      	mov	r1, r3
 8015072:	68f8      	ldr	r0, [r7, #12]
 8015074:	f001 faf0 	bl	8016658 <eMBRegInputCB>
 8015078:	4603      	mov	r3, r0
 801507a:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 801507c:	7afb      	ldrb	r3, [r7, #11]
 801507e:	2b00      	cmp	r3, #0
 8015080:	d006      	beq.n	8015090 <eMBFuncReadInputRegister+0xbc>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8015082:	7afb      	ldrb	r3, [r7, #11]
 8015084:	4618      	mov	r0, r3
 8015086:	f000 f983 	bl	8015390 <prveMBError2Exception>
 801508a:	4603      	mov	r3, r0
 801508c:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 801508e:	e00e      	b.n	80150ae <eMBFuncReadInputRegister+0xda>
            }
            else
            {
                *usLen += usRegCount * 2;
 8015090:	683b      	ldr	r3, [r7, #0]
 8015092:	881a      	ldrh	r2, [r3, #0]
 8015094:	8a7b      	ldrh	r3, [r7, #18]
 8015096:	005b      	lsls	r3, r3, #1
 8015098:	b29b      	uxth	r3, r3
 801509a:	4413      	add	r3, r2
 801509c:	b29a      	uxth	r2, r3
 801509e:	683b      	ldr	r3, [r7, #0]
 80150a0:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 80150a2:	e004      	b.n	80150ae <eMBFuncReadInputRegister+0xda>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80150a4:	2303      	movs	r3, #3
 80150a6:	75fb      	strb	r3, [r7, #23]
 80150a8:	e001      	b.n	80150ae <eMBFuncReadInputRegister+0xda>
    }
    else
    {
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80150aa:	2303      	movs	r3, #3
 80150ac:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 80150ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80150b0:	4618      	mov	r0, r3
 80150b2:	3718      	adds	r7, #24
 80150b4:	46bd      	mov	sp, r7
 80150b6:	bd80      	pop	{r7, pc}

080150b8 <eMBMasterReqReadInputRegister>:
 *
 * @return error code
 */
eMBMasterReqErrCode
eMBMasterReqReadInputRegister( UCHAR ucSndAddr, USHORT usRegAddr, USHORT usNRegs, LONG lTimeOut )
{
 80150b8:	b580      	push	{r7, lr}
 80150ba:	b086      	sub	sp, #24
 80150bc:	af00      	add	r7, sp, #0
 80150be:	607b      	str	r3, [r7, #4]
 80150c0:	4603      	mov	r3, r0
 80150c2:	73fb      	strb	r3, [r7, #15]
 80150c4:	460b      	mov	r3, r1
 80150c6:	81bb      	strh	r3, [r7, #12]
 80150c8:	4613      	mov	r3, r2
 80150ca:	817b      	strh	r3, [r7, #10]
    UCHAR                 *ucMBFrame;
    eMBMasterReqErrCode    eErrStatus = MB_MRE_NO_ERR;
 80150cc:	2300      	movs	r3, #0
 80150ce:	75fb      	strb	r3, [r7, #23]

    if ( ucSndAddr > MB_MASTER_TOTAL_SLAVE_NUM ) eErrStatus = MB_MRE_ILL_ARG;
 80150d0:	7bfb      	ldrb	r3, [r7, #15]
 80150d2:	2b10      	cmp	r3, #16
 80150d4:	d902      	bls.n	80150dc <eMBMasterReqReadInputRegister+0x24>
 80150d6:	2302      	movs	r3, #2
 80150d8:	75fb      	strb	r3, [r7, #23]
 80150da:	e036      	b.n	801514a <eMBMasterReqReadInputRegister+0x92>
    else if ( xMBMasterRunResTake( lTimeOut ) == FALSE ) eErrStatus = MB_MRE_MASTER_BUSY;
 80150dc:	6878      	ldr	r0, [r7, #4]
 80150de:	f000 ff65 	bl	8015fac <xMBMasterRunResTake>
 80150e2:	4603      	mov	r3, r0
 80150e4:	2b00      	cmp	r3, #0
 80150e6:	d102      	bne.n	80150ee <eMBMasterReqReadInputRegister+0x36>
 80150e8:	2305      	movs	r3, #5
 80150ea:	75fb      	strb	r3, [r7, #23]
 80150ec:	e02d      	b.n	801514a <eMBMasterReqReadInputRegister+0x92>
    else
    {
		vMBMasterGetPDUSndBuf(&ucMBFrame);
 80150ee:	f107 0310 	add.w	r3, r7, #16
 80150f2:	4618      	mov	r0, r3
 80150f4:	f002 fbac 	bl	8017850 <vMBMasterGetPDUSndBuf>
		vMBMasterSetDestAddress(ucSndAddr);
 80150f8:	7bfb      	ldrb	r3, [r7, #15]
 80150fa:	4618      	mov	r0, r3
 80150fc:	f000 fcb8 	bl	8015a70 <vMBMasterSetDestAddress>
		ucMBFrame[MB_PDU_FUNC_OFF]                = MB_FUNC_READ_INPUT_REGISTER;
 8015100:	693b      	ldr	r3, [r7, #16]
 8015102:	2204      	movs	r2, #4
 8015104:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF]       = usRegAddr >> 8;
 8015106:	89bb      	ldrh	r3, [r7, #12]
 8015108:	0a1b      	lsrs	r3, r3, #8
 801510a:	b29a      	uxth	r2, r3
 801510c:	693b      	ldr	r3, [r7, #16]
 801510e:	3301      	adds	r3, #1
 8015110:	b2d2      	uxtb	r2, r2
 8015112:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1]   = usRegAddr;
 8015114:	693b      	ldr	r3, [r7, #16]
 8015116:	3302      	adds	r3, #2
 8015118:	89ba      	ldrh	r2, [r7, #12]
 801511a:	b2d2      	uxtb	r2, r2
 801511c:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF]     = usNRegs >> 8;
 801511e:	897b      	ldrh	r3, [r7, #10]
 8015120:	0a1b      	lsrs	r3, r3, #8
 8015122:	b29a      	uxth	r2, r3
 8015124:	693b      	ldr	r3, [r7, #16]
 8015126:	3303      	adds	r3, #3
 8015128:	b2d2      	uxtb	r2, r2
 801512a:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF + 1] = usNRegs;
 801512c:	693b      	ldr	r3, [r7, #16]
 801512e:	3304      	adds	r3, #4
 8015130:	897a      	ldrh	r2, [r7, #10]
 8015132:	b2d2      	uxtb	r2, r2
 8015134:	701a      	strb	r2, [r3, #0]
		vMBMasterSetPDUSndLength( MB_PDU_SIZE_MIN + MB_PDU_REQ_READ_SIZE );
 8015136:	2005      	movs	r0, #5
 8015138:	f002 fb9a 	bl	8017870 <vMBMasterSetPDUSndLength>
		( void ) xMBMasterPortEventPost( EV_MASTER_FRAME_SENT );
 801513c:	2008      	movs	r0, #8
 801513e:	f000 fe9f 	bl	8015e80 <xMBMasterPortEventPost>
		eErrStatus = eMBMasterWaitRequestFinish( );
 8015142:	f000 ffa3 	bl	801608c <eMBMasterWaitRequestFinish>
 8015146:	4603      	mov	r3, r0
 8015148:	75fb      	strb	r3, [r7, #23]
    }
    return eErrStatus;
 801514a:	7dfb      	ldrb	r3, [r7, #23]
}
 801514c:	4618      	mov	r0, r3
 801514e:	3718      	adds	r7, #24
 8015150:	46bd      	mov	sp, r7
 8015152:	bd80      	pop	{r7, pc}

08015154 <eMBMasterFuncReadInputRegister>:

eMBException
eMBMasterFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8015154:	b580      	push	{r7, lr}
 8015156:	b086      	sub	sp, #24
 8015158:	af00      	add	r7, sp, #0
 801515a:	6078      	str	r0, [r7, #4]
 801515c:	6039      	str	r1, [r7, #0]
    UCHAR          *ucMBFrame;
    USHORT          usRegAddress;
    USHORT          usRegCount;

    eMBException    eStatus = MB_EX_NONE;
 801515e:	2300      	movs	r3, #0
 8015160:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, and it's read mode. This request don't need execute. */
	if ( xMBMasterRequestIsBroadcast() )
 8015162:	f002 fba1 	bl	80178a8 <xMBMasterRequestIsBroadcast>
 8015166:	4603      	mov	r3, r0
 8015168:	2b00      	cmp	r3, #0
 801516a:	d002      	beq.n	8015172 <eMBMasterFuncReadInputRegister+0x1e>
	{
		eStatus = MB_EX_NONE;
 801516c:	2300      	movs	r3, #0
 801516e:	75fb      	strb	r3, [r7, #23]
 8015170:	e047      	b.n	8015202 <eMBMasterFuncReadInputRegister+0xae>
	}
	else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
 8015172:	683b      	ldr	r3, [r7, #0]
 8015174:	881b      	ldrh	r3, [r3, #0]
 8015176:	2b01      	cmp	r3, #1
 8015178:	d941      	bls.n	80151fe <eMBMasterFuncReadInputRegister+0xaa>
    {
		vMBMasterGetPDUSndBuf(&ucMBFrame);
 801517a:	f107 030c 	add.w	r3, r7, #12
 801517e:	4618      	mov	r0, r3
 8015180:	f002 fb66 	bl	8017850 <vMBMasterGetPDUSndBuf>
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
 8015184:	68fb      	ldr	r3, [r7, #12]
 8015186:	3301      	adds	r3, #1
 8015188:	781b      	ldrb	r3, [r3, #0]
 801518a:	b29b      	uxth	r3, r3
 801518c:	021b      	lsls	r3, r3, #8
 801518e:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
 8015190:	68fb      	ldr	r3, [r7, #12]
 8015192:	3302      	adds	r3, #2
 8015194:	781b      	ldrb	r3, [r3, #0]
 8015196:	b29a      	uxth	r2, r3
 8015198:	8abb      	ldrh	r3, [r7, #20]
 801519a:	4313      	orrs	r3, r2
 801519c:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 801519e:	8abb      	ldrh	r3, [r7, #20]
 80151a0:	3301      	adds	r3, #1
 80151a2:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF] << 8 );
 80151a4:	68fb      	ldr	r3, [r7, #12]
 80151a6:	3303      	adds	r3, #3
 80151a8:	781b      	ldrb	r3, [r3, #0]
 80151aa:	b29b      	uxth	r3, r3
 80151ac:	021b      	lsls	r3, r3, #8
 80151ae:	827b      	strh	r3, [r7, #18]
        usRegCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF + 1] );
 80151b0:	68fb      	ldr	r3, [r7, #12]
 80151b2:	3304      	adds	r3, #4
 80151b4:	781b      	ldrb	r3, [r3, #0]
 80151b6:	b29a      	uxth	r2, r3
 80151b8:	8a7b      	ldrh	r3, [r7, #18]
 80151ba:	4313      	orrs	r3, r2
 80151bc:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception.
         */
        if( ( usRegCount >= 1 ) && ( 2 * usRegCount == pucFrame[MB_PDU_FUNC_READ_BYTECNT_OFF] ) )
 80151be:	8a7b      	ldrh	r3, [r7, #18]
 80151c0:	2b00      	cmp	r3, #0
 80151c2:	d019      	beq.n	80151f8 <eMBMasterFuncReadInputRegister+0xa4>
 80151c4:	8a7b      	ldrh	r3, [r7, #18]
 80151c6:	005b      	lsls	r3, r3, #1
 80151c8:	687a      	ldr	r2, [r7, #4]
 80151ca:	3201      	adds	r2, #1
 80151cc:	7812      	ldrb	r2, [r2, #0]
 80151ce:	4293      	cmp	r3, r2
 80151d0:	d112      	bne.n	80151f8 <eMBMasterFuncReadInputRegister+0xa4>
        {
            /* Make callback to fill the buffer. */
            eRegStatus = eMBMasterRegInputCB( &pucFrame[MB_PDU_FUNC_READ_VALUES_OFF], usRegAddress, usRegCount );
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	3302      	adds	r3, #2
 80151d6:	8a7a      	ldrh	r2, [r7, #18]
 80151d8:	8ab9      	ldrh	r1, [r7, #20]
 80151da:	4618      	mov	r0, r3
 80151dc:	f001 fc38 	bl	8016a50 <eMBMasterRegInputCB>
 80151e0:	4603      	mov	r3, r0
 80151e2:	747b      	strb	r3, [r7, #17]
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80151e4:	7c7b      	ldrb	r3, [r7, #17]
 80151e6:	2b00      	cmp	r3, #0
 80151e8:	d00b      	beq.n	8015202 <eMBMasterFuncReadInputRegister+0xae>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 80151ea:	7c7b      	ldrb	r3, [r7, #17]
 80151ec:	4618      	mov	r0, r3
 80151ee:	f000 f8cf 	bl	8015390 <prveMBError2Exception>
 80151f2:	4603      	mov	r3, r0
 80151f4:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 80151f6:	e004      	b.n	8015202 <eMBMasterFuncReadInputRegister+0xae>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80151f8:	2303      	movs	r3, #3
 80151fa:	75fb      	strb	r3, [r7, #23]
 80151fc:	e001      	b.n	8015202 <eMBMasterFuncReadInputRegister+0xae>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80151fe:	2303      	movs	r3, #3
 8015200:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 8015202:	7dfb      	ldrb	r3, [r7, #23]
}
 8015204:	4618      	mov	r0, r3
 8015206:	3718      	adds	r7, #24
 8015208:	46bd      	mov	sp, r7
 801520a:	bd80      	pop	{r7, pc}

0801520c <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 801520c:	b580      	push	{r7, lr}
 801520e:	b082      	sub	sp, #8
 8015210:	af00      	add	r7, sp, #0
 8015212:	6078      	str	r0, [r7, #4]
 8015214:	6039      	str	r1, [r7, #0]
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 8015216:	687b      	ldr	r3, [r7, #4]
 8015218:	3301      	adds	r3, #1
 801521a:	4a08      	ldr	r2, [pc, #32]	; (801523c <eMBFuncReportSlaveID+0x30>)
 801521c:	8812      	ldrh	r2, [r2, #0]
 801521e:	4908      	ldr	r1, [pc, #32]	; (8015240 <eMBFuncReportSlaveID+0x34>)
 8015220:	4618      	mov	r0, r3
 8015222:	f002 fca8 	bl	8017b76 <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 8015226:	4b05      	ldr	r3, [pc, #20]	; (801523c <eMBFuncReportSlaveID+0x30>)
 8015228:	881b      	ldrh	r3, [r3, #0]
 801522a:	3301      	adds	r3, #1
 801522c:	b29a      	uxth	r2, r3
 801522e:	683b      	ldr	r3, [r7, #0]
 8015230:	801a      	strh	r2, [r3, #0]
    return MB_EX_NONE;
 8015232:	2300      	movs	r3, #0
}
 8015234:	4618      	mov	r0, r3
 8015236:	3708      	adds	r7, #8
 8015238:	46bd      	mov	sp, r7
 801523a:	bd80      	pop	{r7, pc}
 801523c:	20004d24 	.word	0x20004d24
 8015240:	20004d04 	.word	0x20004d04

08015244 <xMBUtilSetBits>:

/* ----------------------- Start implementation -----------------------------*/
void
xMBUtilSetBits( UCHAR * ucByteBuf, USHORT usBitOffset, UCHAR ucNBits,
                UCHAR ucValue )
{
 8015244:	b580      	push	{r7, lr}
 8015246:	b086      	sub	sp, #24
 8015248:	af00      	add	r7, sp, #0
 801524a:	6078      	str	r0, [r7, #4]
 801524c:	4608      	mov	r0, r1
 801524e:	4611      	mov	r1, r2
 8015250:	461a      	mov	r2, r3
 8015252:	4603      	mov	r3, r0
 8015254:	807b      	strh	r3, [r7, #2]
 8015256:	460b      	mov	r3, r1
 8015258:	707b      	strb	r3, [r7, #1]
 801525a:	4613      	mov	r3, r2
 801525c:	703b      	strb	r3, [r7, #0]
    USHORT          usWordBuf;
    USHORT          usMask;
    USHORT          usByteOffset;
    USHORT          usNPreBits;
    USHORT          usValue = ucValue;
 801525e:	783b      	ldrb	r3, [r7, #0]
 8015260:	82fb      	strh	r3, [r7, #22]

    assert( ucNBits <= 8 );
 8015262:	787b      	ldrb	r3, [r7, #1]
 8015264:	2b08      	cmp	r3, #8
 8015266:	d905      	bls.n	8015274 <xMBUtilSetBits+0x30>
 8015268:	4b29      	ldr	r3, [pc, #164]	; (8015310 <xMBUtilSetBits+0xcc>)
 801526a:	4a2a      	ldr	r2, [pc, #168]	; (8015314 <xMBUtilSetBits+0xd0>)
 801526c:	2136      	movs	r1, #54	; 0x36
 801526e:	482a      	ldr	r0, [pc, #168]	; (8015318 <xMBUtilSetBits+0xd4>)
 8015270:	f002 fb26 	bl	80178c0 <__assert_func>
    assert( ( size_t )BITS_UCHAR == sizeof( UCHAR ) * 8 );

    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );
 8015274:	887b      	ldrh	r3, [r7, #2]
 8015276:	08db      	lsrs	r3, r3, #3
 8015278:	82bb      	strh	r3, [r7, #20]

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );
 801527a:	8abb      	ldrh	r3, [r7, #20]
 801527c:	00db      	lsls	r3, r3, #3
 801527e:	b29b      	uxth	r3, r3
 8015280:	887a      	ldrh	r2, [r7, #2]
 8015282:	1ad3      	subs	r3, r2, r3
 8015284:	827b      	strh	r3, [r7, #18]

    /* Move bit field into position over bits to set */
    usValue <<= usNPreBits;
 8015286:	8afa      	ldrh	r2, [r7, #22]
 8015288:	8a7b      	ldrh	r3, [r7, #18]
 801528a:	fa02 f303 	lsl.w	r3, r2, r3
 801528e:	82fb      	strh	r3, [r7, #22]

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 8015290:	787b      	ldrb	r3, [r7, #1]
 8015292:	2201      	movs	r2, #1
 8015294:	fa02 f303 	lsl.w	r3, r2, r3
 8015298:	b29b      	uxth	r3, r3
 801529a:	3b01      	subs	r3, #1
 801529c:	823b      	strh	r3, [r7, #16]
    usMask <<= usBitOffset - usByteOffset * BITS_UCHAR;
 801529e:	8a3a      	ldrh	r2, [r7, #16]
 80152a0:	8879      	ldrh	r1, [r7, #2]
 80152a2:	8abb      	ldrh	r3, [r7, #20]
 80152a4:	00db      	lsls	r3, r3, #3
 80152a6:	1acb      	subs	r3, r1, r3
 80152a8:	fa02 f303 	lsl.w	r3, r2, r3
 80152ac:	823b      	strh	r3, [r7, #16]

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
 80152ae:	8abb      	ldrh	r3, [r7, #20]
 80152b0:	687a      	ldr	r2, [r7, #4]
 80152b2:	4413      	add	r3, r2
 80152b4:	781b      	ldrb	r3, [r3, #0]
 80152b6:	81fb      	strh	r3, [r7, #14]
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 80152b8:	8abb      	ldrh	r3, [r7, #20]
 80152ba:	3301      	adds	r3, #1
 80152bc:	687a      	ldr	r2, [r7, #4]
 80152be:	4413      	add	r3, r2
 80152c0:	781b      	ldrb	r3, [r3, #0]
 80152c2:	021b      	lsls	r3, r3, #8
 80152c4:	b21a      	sxth	r2, r3
 80152c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80152ca:	4313      	orrs	r3, r2
 80152cc:	b21b      	sxth	r3, r3
 80152ce:	81fb      	strh	r3, [r7, #14]

    /* Zero out bit field bits and then or value bits into them. */
    usWordBuf = ( USHORT )( ( usWordBuf & ( ~usMask ) ) | usValue );
 80152d0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80152d4:	43db      	mvns	r3, r3
 80152d6:	b21a      	sxth	r2, r3
 80152d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80152dc:	4013      	ands	r3, r2
 80152de:	b21a      	sxth	r2, r3
 80152e0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80152e4:	4313      	orrs	r3, r2
 80152e6:	b21b      	sxth	r3, r3
 80152e8:	81fb      	strh	r3, [r7, #14]

    /* move bits back into storage */
    ucByteBuf[usByteOffset] = ( UCHAR )( usWordBuf & 0xFF );
 80152ea:	8abb      	ldrh	r3, [r7, #20]
 80152ec:	687a      	ldr	r2, [r7, #4]
 80152ee:	4413      	add	r3, r2
 80152f0:	89fa      	ldrh	r2, [r7, #14]
 80152f2:	b2d2      	uxtb	r2, r2
 80152f4:	701a      	strb	r2, [r3, #0]
    ucByteBuf[usByteOffset + 1] = ( UCHAR )( usWordBuf >> BITS_UCHAR );
 80152f6:	89fb      	ldrh	r3, [r7, #14]
 80152f8:	0a1b      	lsrs	r3, r3, #8
 80152fa:	b299      	uxth	r1, r3
 80152fc:	8abb      	ldrh	r3, [r7, #20]
 80152fe:	3301      	adds	r3, #1
 8015300:	687a      	ldr	r2, [r7, #4]
 8015302:	4413      	add	r3, r2
 8015304:	b2ca      	uxtb	r2, r1
 8015306:	701a      	strb	r2, [r3, #0]
}
 8015308:	bf00      	nop
 801530a:	3718      	adds	r7, #24
 801530c:	46bd      	mov	sp, r7
 801530e:	bd80      	pop	{r7, pc}
 8015310:	0801b584 	.word	0x0801b584
 8015314:	0801b84c 	.word	0x0801b84c
 8015318:	0801b594 	.word	0x0801b594

0801531c <xMBUtilGetBits>:

UCHAR
xMBUtilGetBits( UCHAR * ucByteBuf, USHORT usBitOffset, UCHAR ucNBits )
{
 801531c:	b480      	push	{r7}
 801531e:	b085      	sub	sp, #20
 8015320:	af00      	add	r7, sp, #0
 8015322:	6078      	str	r0, [r7, #4]
 8015324:	460b      	mov	r3, r1
 8015326:	807b      	strh	r3, [r7, #2]
 8015328:	4613      	mov	r3, r2
 801532a:	707b      	strb	r3, [r7, #1]
    USHORT          usByteOffset;
    USHORT          usNPreBits;

    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );
 801532c:	887b      	ldrh	r3, [r7, #2]
 801532e:	08db      	lsrs	r3, r3, #3
 8015330:	81fb      	strh	r3, [r7, #14]

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );
 8015332:	89fb      	ldrh	r3, [r7, #14]
 8015334:	00db      	lsls	r3, r3, #3
 8015336:	b29b      	uxth	r3, r3
 8015338:	887a      	ldrh	r2, [r7, #2]
 801533a:	1ad3      	subs	r3, r2, r3
 801533c:	81bb      	strh	r3, [r7, #12]

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 801533e:	787b      	ldrb	r3, [r7, #1]
 8015340:	2201      	movs	r2, #1
 8015342:	fa02 f303 	lsl.w	r3, r2, r3
 8015346:	b29b      	uxth	r3, r3
 8015348:	3b01      	subs	r3, #1
 801534a:	817b      	strh	r3, [r7, #10]

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
 801534c:	89fb      	ldrh	r3, [r7, #14]
 801534e:	687a      	ldr	r2, [r7, #4]
 8015350:	4413      	add	r3, r2
 8015352:	781b      	ldrb	r3, [r3, #0]
 8015354:	813b      	strh	r3, [r7, #8]
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 8015356:	89fb      	ldrh	r3, [r7, #14]
 8015358:	3301      	adds	r3, #1
 801535a:	687a      	ldr	r2, [r7, #4]
 801535c:	4413      	add	r3, r2
 801535e:	781b      	ldrb	r3, [r3, #0]
 8015360:	021b      	lsls	r3, r3, #8
 8015362:	b21a      	sxth	r2, r3
 8015364:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8015368:	4313      	orrs	r3, r2
 801536a:	b21b      	sxth	r3, r3
 801536c:	813b      	strh	r3, [r7, #8]

    /* throw away unneeded bits. */
    usWordBuf >>= usNPreBits;
 801536e:	893a      	ldrh	r2, [r7, #8]
 8015370:	89bb      	ldrh	r3, [r7, #12]
 8015372:	fa42 f303 	asr.w	r3, r2, r3
 8015376:	813b      	strh	r3, [r7, #8]

    /* mask away bits above the requested bitfield. */
    usWordBuf &= usMask;
 8015378:	893a      	ldrh	r2, [r7, #8]
 801537a:	897b      	ldrh	r3, [r7, #10]
 801537c:	4013      	ands	r3, r2
 801537e:	813b      	strh	r3, [r7, #8]

    return ( UCHAR ) usWordBuf;
 8015380:	893b      	ldrh	r3, [r7, #8]
 8015382:	b2db      	uxtb	r3, r3
}
 8015384:	4618      	mov	r0, r3
 8015386:	3714      	adds	r7, #20
 8015388:	46bd      	mov	sp, r7
 801538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801538e:	4770      	bx	lr

08015390 <prveMBError2Exception>:

eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
 8015390:	b480      	push	{r7}
 8015392:	b085      	sub	sp, #20
 8015394:	af00      	add	r7, sp, #0
 8015396:	4603      	mov	r3, r0
 8015398:	71fb      	strb	r3, [r7, #7]
    eMBException    eStatus;

    switch ( eErrorCode )
 801539a:	79fb      	ldrb	r3, [r7, #7]
 801539c:	2b0a      	cmp	r3, #10
 801539e:	d00c      	beq.n	80153ba <prveMBError2Exception+0x2a>
 80153a0:	2b0a      	cmp	r3, #10
 80153a2:	dc0d      	bgt.n	80153c0 <prveMBError2Exception+0x30>
 80153a4:	2b00      	cmp	r3, #0
 80153a6:	d002      	beq.n	80153ae <prveMBError2Exception+0x1e>
 80153a8:	2b01      	cmp	r3, #1
 80153aa:	d003      	beq.n	80153b4 <prveMBError2Exception+0x24>
 80153ac:	e008      	b.n	80153c0 <prveMBError2Exception+0x30>
    {
        case MB_ENOERR:
            eStatus = MB_EX_NONE;
 80153ae:	2300      	movs	r3, #0
 80153b0:	73fb      	strb	r3, [r7, #15]
            break;
 80153b2:	e008      	b.n	80153c6 <prveMBError2Exception+0x36>

        case MB_ENOREG:
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
 80153b4:	2302      	movs	r3, #2
 80153b6:	73fb      	strb	r3, [r7, #15]
            break;
 80153b8:	e005      	b.n	80153c6 <prveMBError2Exception+0x36>

        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
 80153ba:	2306      	movs	r3, #6
 80153bc:	73fb      	strb	r3, [r7, #15]
            break;
 80153be:	e002      	b.n	80153c6 <prveMBError2Exception+0x36>

        default:
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
 80153c0:	2304      	movs	r3, #4
 80153c2:	73fb      	strb	r3, [r7, #15]
            break;
 80153c4:	bf00      	nop
    }

    return eStatus;
 80153c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80153c8:	4618      	mov	r0, r3
 80153ca:	3714      	adds	r7, #20
 80153cc:	46bd      	mov	sp, r7
 80153ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153d2:	4770      	bx	lr

080153d4 <eMBInit>:
};

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBInit( eMBMode eMode, UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 80153d4:	b580      	push	{r7, lr}
 80153d6:	b084      	sub	sp, #16
 80153d8:	af00      	add	r7, sp, #0
 80153da:	603b      	str	r3, [r7, #0]
 80153dc:	4603      	mov	r3, r0
 80153de:	71fb      	strb	r3, [r7, #7]
 80153e0:	460b      	mov	r3, r1
 80153e2:	71bb      	strb	r3, [r7, #6]
 80153e4:	4613      	mov	r3, r2
 80153e6:	717b      	strb	r3, [r7, #5]
    eMBErrorCode    eStatus = MB_ENOERR;
 80153e8:	2300      	movs	r3, #0
 80153ea:	73fb      	strb	r3, [r7, #15]

    /* check preconditions */
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
 80153ec:	79bb      	ldrb	r3, [r7, #6]
 80153ee:	2b00      	cmp	r3, #0
 80153f0:	d005      	beq.n	80153fe <eMBInit+0x2a>
 80153f2:	79bb      	ldrb	r3, [r7, #6]
 80153f4:	2b00      	cmp	r3, #0
 80153f6:	d002      	beq.n	80153fe <eMBInit+0x2a>
        ( ucSlaveAddress < MB_ADDRESS_MIN ) || ( ucSlaveAddress > MB_ADDRESS_MAX ) )
 80153f8:	79bb      	ldrb	r3, [r7, #6]
 80153fa:	2bf7      	cmp	r3, #247	; 0xf7
 80153fc:	d902      	bls.n	8015404 <eMBInit+0x30>
    {
        eStatus = MB_EINVAL;
 80153fe:	2302      	movs	r3, #2
 8015400:	73fb      	strb	r3, [r7, #15]
 8015402:	e03a      	b.n	801547a <eMBInit+0xa6>
    }
    else
    {
        ucMBAddress = ucSlaveAddress;
 8015404:	4a1f      	ldr	r2, [pc, #124]	; (8015484 <eMBInit+0xb0>)
 8015406:	79bb      	ldrb	r3, [r7, #6]
 8015408:	7013      	strb	r3, [r2, #0]

        switch ( eMode )
 801540a:	79fb      	ldrb	r3, [r7, #7]
 801540c:	2b00      	cmp	r3, #0
 801540e:	d121      	bne.n	8015454 <eMBInit+0x80>
        {
#if MB_SLAVE_RTU_ENABLED > 0
        case MB_RTU:
            pvMBFrameStartCur = eMBRTUStart;
 8015410:	4b1d      	ldr	r3, [pc, #116]	; (8015488 <eMBInit+0xb4>)
 8015412:	4a1e      	ldr	r2, [pc, #120]	; (801548c <eMBInit+0xb8>)
 8015414:	601a      	str	r2, [r3, #0]
            pvMBFrameStopCur = eMBRTUStop;
 8015416:	4b1e      	ldr	r3, [pc, #120]	; (8015490 <eMBInit+0xbc>)
 8015418:	4a1e      	ldr	r2, [pc, #120]	; (8015494 <eMBInit+0xc0>)
 801541a:	601a      	str	r2, [r3, #0]
            peMBFrameSendCur = eMBRTUSend;
 801541c:	4b1e      	ldr	r3, [pc, #120]	; (8015498 <eMBInit+0xc4>)
 801541e:	4a1f      	ldr	r2, [pc, #124]	; (801549c <eMBInit+0xc8>)
 8015420:	601a      	str	r2, [r3, #0]
            peMBFrameReceiveCur = eMBRTUReceive;
 8015422:	4b1f      	ldr	r3, [pc, #124]	; (80154a0 <eMBInit+0xcc>)
 8015424:	4a1f      	ldr	r2, [pc, #124]	; (80154a4 <eMBInit+0xd0>)
 8015426:	601a      	str	r2, [r3, #0]
            pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
 8015428:	4b1f      	ldr	r3, [pc, #124]	; (80154a8 <eMBInit+0xd4>)
 801542a:	2200      	movs	r2, #0
 801542c:	601a      	str	r2, [r3, #0]
            pxMBFrameCBByteReceived = xMBRTUReceiveFSM;			//call back from interrupt
 801542e:	4b1f      	ldr	r3, [pc, #124]	; (80154ac <eMBInit+0xd8>)
 8015430:	4a1f      	ldr	r2, [pc, #124]	; (80154b0 <eMBInit+0xdc>)
 8015432:	601a      	str	r2, [r3, #0]
            pxMBFrameCBTransmitterEmpty = xMBRTUTransmitFSM;	//call back from interrupt
 8015434:	4b1f      	ldr	r3, [pc, #124]	; (80154b4 <eMBInit+0xe0>)
 8015436:	4a20      	ldr	r2, [pc, #128]	; (80154b8 <eMBInit+0xe4>)
 8015438:	601a      	str	r2, [r3, #0]
            pxMBPortCBTimerExpired = xMBRTUTimerT35Expired;		//call back from interrupt
 801543a:	4b20      	ldr	r3, [pc, #128]	; (80154bc <eMBInit+0xe8>)
 801543c:	4a20      	ldr	r2, [pc, #128]	; (80154c0 <eMBInit+0xec>)
 801543e:	601a      	str	r2, [r3, #0]

            eStatus = eMBRTUInit( ucMBAddress, ucPort, ulBaudRate, eParity );
 8015440:	4b10      	ldr	r3, [pc, #64]	; (8015484 <eMBInit+0xb0>)
 8015442:	7818      	ldrb	r0, [r3, #0]
 8015444:	7e3b      	ldrb	r3, [r7, #24]
 8015446:	7979      	ldrb	r1, [r7, #5]
 8015448:	683a      	ldr	r2, [r7, #0]
 801544a:	f001 fd4b 	bl	8016ee4 <eMBRTUInit>
 801544e:	4603      	mov	r3, r0
 8015450:	73fb      	strb	r3, [r7, #15]
            break;
 8015452:	e001      	b.n	8015458 <eMBInit+0x84>

            eStatus = eMBASCIIInit( ucMBAddress, ucPort, ulBaudRate, eParity );
            break;
#endif
        default:
            eStatus = MB_EINVAL;
 8015454:	2302      	movs	r3, #2
 8015456:	73fb      	strb	r3, [r7, #15]
        }

        if( eStatus == MB_ENOERR )
 8015458:	7bfb      	ldrb	r3, [r7, #15]
 801545a:	2b00      	cmp	r3, #0
 801545c:	d10d      	bne.n	801547a <eMBInit+0xa6>
        {
            if( !xMBPortEventInit(  ) )
 801545e:	f000 fc71 	bl	8015d44 <xMBPortEventInit>
 8015462:	4603      	mov	r3, r0
 8015464:	2b00      	cmp	r3, #0
 8015466:	d102      	bne.n	801546e <eMBInit+0x9a>
            {
                /* port dependent event module initalization failed. */
                eStatus = MB_EPORTERR;
 8015468:	2303      	movs	r3, #3
 801546a:	73fb      	strb	r3, [r7, #15]
 801546c:	e005      	b.n	801547a <eMBInit+0xa6>
            }
            else
            {
                eMBCurrentMode = eMode;
 801546e:	4a15      	ldr	r2, [pc, #84]	; (80154c4 <eMBInit+0xf0>)
 8015470:	79fb      	ldrb	r3, [r7, #7]
 8015472:	7013      	strb	r3, [r2, #0]
                eMBState = STATE_DISABLED;
 8015474:	4b14      	ldr	r3, [pc, #80]	; (80154c8 <eMBInit+0xf4>)
 8015476:	2201      	movs	r2, #1
 8015478:	701a      	strb	r2, [r3, #0]
            }
        }
    }
    return eStatus;
 801547a:	7bfb      	ldrb	r3, [r7, #15]
}
 801547c:	4618      	mov	r0, r3
 801547e:	3710      	adds	r7, #16
 8015480:	46bd      	mov	sp, r7
 8015482:	bd80      	pop	{r7, pc}
 8015484:	20004d26 	.word	0x20004d26
 8015488:	20004d2c 	.word	0x20004d2c
 801548c:	08016f5d 	.word	0x08016f5d
 8015490:	20004d30 	.word	0x20004d30
 8015494:	08016f85 	.word	0x08016f85
 8015498:	20004d28 	.word	0x20004d28
 801549c:	0801703d 	.word	0x0801703d
 80154a0:	20004d34 	.word	0x20004d34
 80154a4:	08016fa1 	.word	0x08016fa1
 80154a8:	20004d38 	.word	0x20004d38
 80154ac:	2000dc70 	.word	0x2000dc70
 80154b0:	08017105 	.word	0x08017105
 80154b4:	2000dc68 	.word	0x2000dc68
 80154b8:	080171d5 	.word	0x080171d5
 80154bc:	2000dc6c 	.word	0x2000dc6c
 80154c0:	08017285 	.word	0x08017285
 80154c4:	20004d27 	.word	0x20004d27
 80154c8:	2000001a 	.word	0x2000001a

080154cc <eMBEnable>:
    return eStatus;
}

eMBErrorCode
eMBEnable( void )
{
 80154cc:	b580      	push	{r7, lr}
 80154ce:	b082      	sub	sp, #8
 80154d0:	af00      	add	r7, sp, #0
    eMBErrorCode    eStatus = MB_ENOERR;
 80154d2:	2300      	movs	r3, #0
 80154d4:	71fb      	strb	r3, [r7, #7]

    if( eMBState == STATE_DISABLED )
 80154d6:	4b09      	ldr	r3, [pc, #36]	; (80154fc <eMBEnable+0x30>)
 80154d8:	781b      	ldrb	r3, [r3, #0]
 80154da:	2b01      	cmp	r3, #1
 80154dc:	d106      	bne.n	80154ec <eMBEnable+0x20>
    {
        /* Activate the protocol stack. */
        pvMBFrameStartCur(  );
 80154de:	4b08      	ldr	r3, [pc, #32]	; (8015500 <eMBEnable+0x34>)
 80154e0:	681b      	ldr	r3, [r3, #0]
 80154e2:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 80154e4:	4b05      	ldr	r3, [pc, #20]	; (80154fc <eMBEnable+0x30>)
 80154e6:	2200      	movs	r2, #0
 80154e8:	701a      	strb	r2, [r3, #0]
 80154ea:	e001      	b.n	80154f0 <eMBEnable+0x24>
    }
    else
    {
        eStatus = MB_EILLSTATE;
 80154ec:	2306      	movs	r3, #6
 80154ee:	71fb      	strb	r3, [r7, #7]
    }
    return eStatus;
 80154f0:	79fb      	ldrb	r3, [r7, #7]
}
 80154f2:	4618      	mov	r0, r3
 80154f4:	3708      	adds	r7, #8
 80154f6:	46bd      	mov	sp, r7
 80154f8:	bd80      	pop	{r7, pc}
 80154fa:	bf00      	nop
 80154fc:	2000001a 	.word	0x2000001a
 8015500:	20004d2c 	.word	0x20004d2c

08015504 <eMBPoll>:
    return eStatus;
}

eMBErrorCode
eMBPoll( void )
{
 8015504:	b590      	push	{r4, r7, lr}
 8015506:	b083      	sub	sp, #12
 8015508:	af00      	add	r7, sp, #0
    static UCHAR    ucFunctionCode;
    static USHORT   usLength;
    static eMBException eException;

    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
 801550a:	2300      	movs	r3, #0
 801550c:	70fb      	strb	r3, [r7, #3]
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
 801550e:	4b56      	ldr	r3, [pc, #344]	; (8015668 <eMBPoll+0x164>)
 8015510:	781b      	ldrb	r3, [r3, #0]
 8015512:	2b00      	cmp	r3, #0
 8015514:	d001      	beq.n	801551a <eMBPoll+0x16>
    {
        return MB_EILLSTATE;
 8015516:	2306      	movs	r3, #6
 8015518:	e0a1      	b.n	801565e <eMBPoll+0x15a>
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
 801551a:	1cbb      	adds	r3, r7, #2
 801551c:	4618      	mov	r0, r3
 801551e:	f000 fc5f 	bl	8015de0 <xMBPortEventGet>
 8015522:	4603      	mov	r3, r0
 8015524:	2b01      	cmp	r3, #1
 8015526:	f040 8094 	bne.w	8015652 <eMBPoll+0x14e>
    {
        switch ( eEvent )
 801552a:	78bb      	ldrb	r3, [r7, #2]
 801552c:	3b01      	subs	r3, #1
 801552e:	2b07      	cmp	r3, #7
 8015530:	f200 8094 	bhi.w	801565c <eMBPoll+0x158>
 8015534:	a201      	add	r2, pc, #4	; (adr r2, 801553c <eMBPoll+0x38>)
 8015536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801553a:	bf00      	nop
 801553c:	0801565d 	.word	0x0801565d
 8015540:	0801555d 	.word	0x0801555d
 8015544:	0801565d 	.word	0x0801565d
 8015548:	0801558f 	.word	0x0801558f
 801554c:	0801565d 	.word	0x0801565d
 8015550:	0801565d 	.word	0x0801565d
 8015554:	0801565d 	.word	0x0801565d
 8015558:	0801565d 	.word	0x0801565d
        case EV_READY:

            break;

        case EV_FRAME_RECEIVED:
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 801555c:	4b43      	ldr	r3, [pc, #268]	; (801566c <eMBPoll+0x168>)
 801555e:	681b      	ldr	r3, [r3, #0]
 8015560:	4a43      	ldr	r2, [pc, #268]	; (8015670 <eMBPoll+0x16c>)
 8015562:	4944      	ldr	r1, [pc, #272]	; (8015674 <eMBPoll+0x170>)
 8015564:	4844      	ldr	r0, [pc, #272]	; (8015678 <eMBPoll+0x174>)
 8015566:	4798      	blx	r3
 8015568:	4603      	mov	r3, r0
 801556a:	70fb      	strb	r3, [r7, #3]
            if( eStatus == MB_ENOERR )
 801556c:	78fb      	ldrb	r3, [r7, #3]
 801556e:	2b00      	cmp	r3, #0
 8015570:	d171      	bne.n	8015656 <eMBPoll+0x152>
            {
                /* Check if the frame is for us. If not ignore the frame. */
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
 8015572:	4b41      	ldr	r3, [pc, #260]	; (8015678 <eMBPoll+0x174>)
 8015574:	781a      	ldrb	r2, [r3, #0]
 8015576:	4b41      	ldr	r3, [pc, #260]	; (801567c <eMBPoll+0x178>)
 8015578:	781b      	ldrb	r3, [r3, #0]
 801557a:	429a      	cmp	r2, r3
 801557c:	d003      	beq.n	8015586 <eMBPoll+0x82>
 801557e:	4b3e      	ldr	r3, [pc, #248]	; (8015678 <eMBPoll+0x174>)
 8015580:	781b      	ldrb	r3, [r3, #0]
 8015582:	2b00      	cmp	r3, #0
 8015584:	d167      	bne.n	8015656 <eMBPoll+0x152>
                {
                    ( void )xMBPortEventPost( EV_EXECUTE );
 8015586:	2004      	movs	r0, #4
 8015588:	f000 fbfc 	bl	8015d84 <xMBPortEventPost>
                }
            }
            break;
 801558c:	e063      	b.n	8015656 <eMBPoll+0x152>

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 801558e:	4b39      	ldr	r3, [pc, #228]	; (8015674 <eMBPoll+0x170>)
 8015590:	681b      	ldr	r3, [r3, #0]
 8015592:	781a      	ldrb	r2, [r3, #0]
 8015594:	4b3a      	ldr	r3, [pc, #232]	; (8015680 <eMBPoll+0x17c>)
 8015596:	701a      	strb	r2, [r3, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 8015598:	4b3a      	ldr	r3, [pc, #232]	; (8015684 <eMBPoll+0x180>)
 801559a:	2201      	movs	r2, #1
 801559c:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 801559e:	2300      	movs	r3, #0
 80155a0:	607b      	str	r3, [r7, #4]
 80155a2:	e01f      	b.n	80155e4 <eMBPoll+0xe0>
            {
                /* No more function handlers registered. Abort. */
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 80155a4:	4a38      	ldr	r2, [pc, #224]	; (8015688 <eMBPoll+0x184>)
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	d01d      	beq.n	80155ec <eMBPoll+0xe8>
                {
                    break;
                }
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 80155b0:	4a35      	ldr	r2, [pc, #212]	; (8015688 <eMBPoll+0x184>)
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 80155b8:	4b31      	ldr	r3, [pc, #196]	; (8015680 <eMBPoll+0x17c>)
 80155ba:	781b      	ldrb	r3, [r3, #0]
 80155bc:	429a      	cmp	r2, r3
 80155be:	d10e      	bne.n	80155de <eMBPoll+0xda>
                {
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
 80155c0:	4a31      	ldr	r2, [pc, #196]	; (8015688 <eMBPoll+0x184>)
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	00db      	lsls	r3, r3, #3
 80155c6:	4413      	add	r3, r2
 80155c8:	685b      	ldr	r3, [r3, #4]
 80155ca:	4a2a      	ldr	r2, [pc, #168]	; (8015674 <eMBPoll+0x170>)
 80155cc:	6812      	ldr	r2, [r2, #0]
 80155ce:	4928      	ldr	r1, [pc, #160]	; (8015670 <eMBPoll+0x16c>)
 80155d0:	4610      	mov	r0, r2
 80155d2:	4798      	blx	r3
 80155d4:	4603      	mov	r3, r0
 80155d6:	461a      	mov	r2, r3
 80155d8:	4b2a      	ldr	r3, [pc, #168]	; (8015684 <eMBPoll+0x180>)
 80155da:	701a      	strb	r2, [r3, #0]
                    break;
 80155dc:	e007      	b.n	80155ee <eMBPoll+0xea>
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 80155de:	687b      	ldr	r3, [r7, #4]
 80155e0:	3301      	adds	r3, #1
 80155e2:	607b      	str	r3, [r7, #4]
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	2b0f      	cmp	r3, #15
 80155e8:	dddc      	ble.n	80155a4 <eMBPoll+0xa0>
 80155ea:	e000      	b.n	80155ee <eMBPoll+0xea>
                    break;
 80155ec:	bf00      	nop
                }
            }

            /* If the request was not sent to the broadcast address we
             * return a reply. */
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 80155ee:	4b22      	ldr	r3, [pc, #136]	; (8015678 <eMBPoll+0x174>)
 80155f0:	781b      	ldrb	r3, [r3, #0]
 80155f2:	2b00      	cmp	r3, #0
 80155f4:	d031      	beq.n	801565a <eMBPoll+0x156>
            {
                if( eException != MB_EX_NONE )
 80155f6:	4b23      	ldr	r3, [pc, #140]	; (8015684 <eMBPoll+0x180>)
 80155f8:	781b      	ldrb	r3, [r3, #0]
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	d01d      	beq.n	801563a <eMBPoll+0x136>
                {
                    /* An exception occured. Build an error frame. */
                    usLength = 0;
 80155fe:	4b1c      	ldr	r3, [pc, #112]	; (8015670 <eMBPoll+0x16c>)
 8015600:	2200      	movs	r2, #0
 8015602:	801a      	strh	r2, [r3, #0]
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 8015604:	4b1e      	ldr	r3, [pc, #120]	; (8015680 <eMBPoll+0x17c>)
 8015606:	781a      	ldrb	r2, [r3, #0]
 8015608:	4b1a      	ldr	r3, [pc, #104]	; (8015674 <eMBPoll+0x170>)
 801560a:	6819      	ldr	r1, [r3, #0]
 801560c:	4b18      	ldr	r3, [pc, #96]	; (8015670 <eMBPoll+0x16c>)
 801560e:	881b      	ldrh	r3, [r3, #0]
 8015610:	1c58      	adds	r0, r3, #1
 8015612:	b284      	uxth	r4, r0
 8015614:	4816      	ldr	r0, [pc, #88]	; (8015670 <eMBPoll+0x16c>)
 8015616:	8004      	strh	r4, [r0, #0]
 8015618:	440b      	add	r3, r1
 801561a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801561e:	b2d2      	uxtb	r2, r2
 8015620:	701a      	strb	r2, [r3, #0]
                    ucMBFrame[usLength++] = eException;
 8015622:	4b14      	ldr	r3, [pc, #80]	; (8015674 <eMBPoll+0x170>)
 8015624:	681a      	ldr	r2, [r3, #0]
 8015626:	4b12      	ldr	r3, [pc, #72]	; (8015670 <eMBPoll+0x16c>)
 8015628:	881b      	ldrh	r3, [r3, #0]
 801562a:	1c59      	adds	r1, r3, #1
 801562c:	b288      	uxth	r0, r1
 801562e:	4910      	ldr	r1, [pc, #64]	; (8015670 <eMBPoll+0x16c>)
 8015630:	8008      	strh	r0, [r1, #0]
 8015632:	4413      	add	r3, r2
 8015634:	4a13      	ldr	r2, [pc, #76]	; (8015684 <eMBPoll+0x180>)
 8015636:	7812      	ldrb	r2, [r2, #0]
 8015638:	701a      	strb	r2, [r3, #0]
                }


                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
 801563a:	4b14      	ldr	r3, [pc, #80]	; (801568c <eMBPoll+0x188>)
 801563c:	681b      	ldr	r3, [r3, #0]
 801563e:	4a0f      	ldr	r2, [pc, #60]	; (801567c <eMBPoll+0x178>)
 8015640:	7810      	ldrb	r0, [r2, #0]
 8015642:	4a0c      	ldr	r2, [pc, #48]	; (8015674 <eMBPoll+0x170>)
 8015644:	6811      	ldr	r1, [r2, #0]
 8015646:	4a0a      	ldr	r2, [pc, #40]	; (8015670 <eMBPoll+0x16c>)
 8015648:	8812      	ldrh	r2, [r2, #0]
 801564a:	4798      	blx	r3
 801564c:	4603      	mov	r3, r0
 801564e:	70fb      	strb	r3, [r7, #3]
            }
            break;
 8015650:	e003      	b.n	801565a <eMBPoll+0x156>

        case EV_FRAME_SENT:
            break;
        }
    }
 8015652:	bf00      	nop
 8015654:	e002      	b.n	801565c <eMBPoll+0x158>
            break;
 8015656:	bf00      	nop
 8015658:	e000      	b.n	801565c <eMBPoll+0x158>
            break;
 801565a:	bf00      	nop
    return MB_ENOERR;
 801565c:	2300      	movs	r3, #0
}
 801565e:	4618      	mov	r0, r3
 8015660:	370c      	adds	r7, #12
 8015662:	46bd      	mov	sp, r7
 8015664:	bd90      	pop	{r4, r7, pc}
 8015666:	bf00      	nop
 8015668:	2000001a 	.word	0x2000001a
 801566c:	20004d34 	.word	0x20004d34
 8015670:	20004d44 	.word	0x20004d44
 8015674:	20004d40 	.word	0x20004d40
 8015678:	20004d3c 	.word	0x20004d3c
 801567c:	20004d26 	.word	0x20004d26
 8015680:	20004d46 	.word	0x20004d46
 8015684:	20004d47 	.word	0x20004d47
 8015688:	2000001c 	.word	0x2000001c
 801568c:	20004d28 	.word	0x20004d28

08015690 <eMBMasterInit>:
};

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBMasterInit( eMBMode eMode, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 8015690:	b580      	push	{r7, lr}
 8015692:	b084      	sub	sp, #16
 8015694:	af00      	add	r7, sp, #0
 8015696:	603a      	str	r2, [r7, #0]
 8015698:	461a      	mov	r2, r3
 801569a:	4603      	mov	r3, r0
 801569c:	71fb      	strb	r3, [r7, #7]
 801569e:	460b      	mov	r3, r1
 80156a0:	71bb      	strb	r3, [r7, #6]
 80156a2:	4613      	mov	r3, r2
 80156a4:	717b      	strb	r3, [r7, #5]
    eMBErrorCode    eStatus = MB_ENOERR;
 80156a6:	2300      	movs	r3, #0
 80156a8:	73fb      	strb	r3, [r7, #15]

	switch (eMode)
 80156aa:	79fb      	ldrb	r3, [r7, #7]
 80156ac:	2b00      	cmp	r3, #0
 80156ae:	d120      	bne.n	80156f2 <eMBMasterInit+0x62>
	{
#if MB_MASTER_RTU_ENABLED > 0
	case MB_RTU:
		pvMBMasterFrameStartCur = eMBMasterRTUStart;
 80156b0:	4b1c      	ldr	r3, [pc, #112]	; (8015724 <eMBMasterInit+0x94>)
 80156b2:	4a1d      	ldr	r2, [pc, #116]	; (8015728 <eMBMasterInit+0x98>)
 80156b4:	601a      	str	r2, [r3, #0]
		pvMBMasterFrameStopCur = eMBMasterRTUStop;
 80156b6:	4b1d      	ldr	r3, [pc, #116]	; (801572c <eMBMasterInit+0x9c>)
 80156b8:	4a1d      	ldr	r2, [pc, #116]	; (8015730 <eMBMasterInit+0xa0>)
 80156ba:	601a      	str	r2, [r3, #0]
		peMBMasterFrameSendCur = eMBMasterRTUSend;
 80156bc:	4b1d      	ldr	r3, [pc, #116]	; (8015734 <eMBMasterInit+0xa4>)
 80156be:	4a1e      	ldr	r2, [pc, #120]	; (8015738 <eMBMasterInit+0xa8>)
 80156c0:	601a      	str	r2, [r3, #0]
		peMBMasterFrameReceiveCur = eMBMasterRTUReceive;
 80156c2:	4b1e      	ldr	r3, [pc, #120]	; (801573c <eMBMasterInit+0xac>)
 80156c4:	4a1e      	ldr	r2, [pc, #120]	; (8015740 <eMBMasterInit+0xb0>)
 80156c6:	601a      	str	r2, [r3, #0]
		pvMBMasterFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBMasterPortClose : NULL;
 80156c8:	4b1e      	ldr	r3, [pc, #120]	; (8015744 <eMBMasterInit+0xb4>)
 80156ca:	2200      	movs	r2, #0
 80156cc:	601a      	str	r2, [r3, #0]
		pxMBMasterFrameCBByteReceived = xMBMasterRTUReceiveFSM;
 80156ce:	4b1e      	ldr	r3, [pc, #120]	; (8015748 <eMBMasterInit+0xb8>)
 80156d0:	4a1e      	ldr	r2, [pc, #120]	; (801574c <eMBMasterInit+0xbc>)
 80156d2:	601a      	str	r2, [r3, #0]
		pxMBMasterFrameCBTransmitterEmpty = xMBMasterRTUTransmitFSM;
 80156d4:	4b1e      	ldr	r3, [pc, #120]	; (8015750 <eMBMasterInit+0xc0>)
 80156d6:	4a1f      	ldr	r2, [pc, #124]	; (8015754 <eMBMasterInit+0xc4>)
 80156d8:	601a      	str	r2, [r3, #0]
		pxMBMasterPortCBTimerExpired = xMBMasterRTUTimerExpired;
 80156da:	4b1f      	ldr	r3, [pc, #124]	; (8015758 <eMBMasterInit+0xc8>)
 80156dc:	4a1f      	ldr	r2, [pc, #124]	; (801575c <eMBMasterInit+0xcc>)
 80156de:	601a      	str	r2, [r3, #0]

		eStatus = eMBMasterRTUInit(ucPort, ulBaudRate, eParity);
 80156e0:	797a      	ldrb	r2, [r7, #5]
 80156e2:	79bb      	ldrb	r3, [r7, #6]
 80156e4:	6839      	ldr	r1, [r7, #0]
 80156e6:	4618      	mov	r0, r3
 80156e8:	f001 fe12 	bl	8017310 <eMBMasterRTUInit>
 80156ec:	4603      	mov	r3, r0
 80156ee:	73fb      	strb	r3, [r7, #15]
		break;
 80156f0:	e002      	b.n	80156f8 <eMBMasterInit+0x68>

		eStatus = eMBMasterASCIIInit(ucPort, ulBaudRate, eParity );
		break;
#endif
	default:
		eStatus = MB_EINVAL;
 80156f2:	2302      	movs	r3, #2
 80156f4:	73fb      	strb	r3, [r7, #15]
		break;
 80156f6:	bf00      	nop
	}

	if (eStatus == MB_ENOERR)
 80156f8:	7bfb      	ldrb	r3, [r7, #15]
 80156fa:	2b00      	cmp	r3, #0
 80156fc:	d10c      	bne.n	8015718 <eMBMasterInit+0x88>
	{
		if (!xMBMasterPortEventInit())
 80156fe:	f000 fbad 	bl	8015e5c <xMBMasterPortEventInit>
 8015702:	4603      	mov	r3, r0
 8015704:	2b00      	cmp	r3, #0
 8015706:	d102      	bne.n	801570e <eMBMasterInit+0x7e>
		{
			/* port dependent event module initalization failed. */
			eStatus = MB_EPORTERR;
 8015708:	2303      	movs	r3, #3
 801570a:	73fb      	strb	r3, [r7, #15]
 801570c:	e002      	b.n	8015714 <eMBMasterInit+0x84>
		}
		else
		{
			eMBState = STATE_DISABLED;
 801570e:	4b14      	ldr	r3, [pc, #80]	; (8015760 <eMBMasterInit+0xd0>)
 8015710:	2201      	movs	r2, #1
 8015712:	701a      	strb	r2, [r3, #0]
		}
		/* initialize the OS resource for modbus master. */
		vMBMasterOsResInit();
 8015714:	f000 fc30 	bl	8015f78 <vMBMasterOsResInit>
	}
	return eStatus;
 8015718:	7bfb      	ldrb	r3, [r7, #15]
}
 801571a:	4618      	mov	r0, r3
 801571c:	3710      	adds	r7, #16
 801571e:	46bd      	mov	sp, r7
 8015720:	bd80      	pop	{r7, pc}
 8015722:	bf00      	nop
 8015724:	20004d50 	.word	0x20004d50
 8015728:	08017381 	.word	0x08017381
 801572c:	20004d54 	.word	0x20004d54
 8015730:	080173a9 	.word	0x080173a9
 8015734:	20004d4c 	.word	0x20004d4c
 8015738:	08017459 	.word	0x08017459
 801573c:	20004d58 	.word	0x20004d58
 8015740:	080173c5 	.word	0x080173c5
 8015744:	20004d5c 	.word	0x20004d5c
 8015748:	2000dc78 	.word	0x2000dc78
 801574c:	08017549 	.word	0x08017549
 8015750:	2000dc74 	.word	0x2000dc74
 8015754:	0801763d 	.word	0x0801763d
 8015758:	2000dc7c 	.word	0x2000dc7c
 801575c:	08017715 	.word	0x08017715
 8015760:	2000009c 	.word	0x2000009c

08015764 <eMBMasterEnable>:
    return eStatus;
}

eMBErrorCode
eMBMasterEnable( void )
{
 8015764:	b580      	push	{r7, lr}
 8015766:	b082      	sub	sp, #8
 8015768:	af00      	add	r7, sp, #0
    eMBErrorCode    eStatus = MB_ENOERR;
 801576a:	2300      	movs	r3, #0
 801576c:	71fb      	strb	r3, [r7, #7]

    if( eMBState == STATE_DISABLED )
 801576e:	4b09      	ldr	r3, [pc, #36]	; (8015794 <eMBMasterEnable+0x30>)
 8015770:	781b      	ldrb	r3, [r3, #0]
 8015772:	2b01      	cmp	r3, #1
 8015774:	d106      	bne.n	8015784 <eMBMasterEnable+0x20>
    {
        /* Activate the protocol stack. */
        pvMBMasterFrameStartCur(  );
 8015776:	4b08      	ldr	r3, [pc, #32]	; (8015798 <eMBMasterEnable+0x34>)
 8015778:	681b      	ldr	r3, [r3, #0]
 801577a:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 801577c:	4b05      	ldr	r3, [pc, #20]	; (8015794 <eMBMasterEnable+0x30>)
 801577e:	2200      	movs	r2, #0
 8015780:	701a      	strb	r2, [r3, #0]
 8015782:	e001      	b.n	8015788 <eMBMasterEnable+0x24>
    }
    else
    {
        eStatus = MB_EILLSTATE;
 8015784:	2306      	movs	r3, #6
 8015786:	71fb      	strb	r3, [r7, #7]
    }
    return eStatus;
 8015788:	79fb      	ldrb	r3, [r7, #7]
}
 801578a:	4618      	mov	r0, r3
 801578c:	3708      	adds	r7, #8
 801578e:	46bd      	mov	sp, r7
 8015790:	bd80      	pop	{r7, pc}
 8015792:	bf00      	nop
 8015794:	2000009c 	.word	0x2000009c
 8015798:	20004d50 	.word	0x20004d50

0801579c <eMBMasterPoll>:
    }
}

eMBErrorCode
eMBMasterPoll( void )
{
 801579c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801579e:	b085      	sub	sp, #20
 80157a0:	af00      	add	r7, sp, #0
    static UCHAR    ucFunctionCode;
    static USHORT   usLength;
    static eMBException eException;

    int             i , j;
    eMBErrorCode    eStatus = MB_ENOERR;
 80157a2:	2300      	movs	r3, #0
 80157a4:	71fb      	strb	r3, [r7, #7]
    eMBMasterEventType    eEvent;
    eMBMasterErrorEventType errorType;

    /* Check if the protocol stack is ready. */
    if(( eMBState != STATE_ENABLED ) && ( eMBState != STATE_ESTABLISHED))
 80157a6:	4b9b      	ldr	r3, [pc, #620]	; (8015a14 <eMBMasterPoll+0x278>)
 80157a8:	781b      	ldrb	r3, [r3, #0]
 80157aa:	2b00      	cmp	r3, #0
 80157ac:	d005      	beq.n	80157ba <eMBMasterPoll+0x1e>
 80157ae:	4b99      	ldr	r3, [pc, #612]	; (8015a14 <eMBMasterPoll+0x278>)
 80157b0:	781b      	ldrb	r3, [r3, #0]
 80157b2:	2b03      	cmp	r3, #3
 80157b4:	d001      	beq.n	80157ba <eMBMasterPoll+0x1e>
    {
        return MB_EILLSTATE;
 80157b6:	2306      	movs	r3, #6
 80157b8:	e127      	b.n	8015a0a <eMBMasterPoll+0x26e>
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBMasterPortEventGet( &eEvent ) == TRUE )
 80157ba:	1d3b      	adds	r3, r7, #4
 80157bc:	4618      	mov	r0, r3
 80157be:	f000 fb89 	bl	8015ed4 <xMBMasterPortEventGet>
 80157c2:	4603      	mov	r3, r0
 80157c4:	2b01      	cmp	r3, #1
 80157c6:	f040 811c 	bne.w	8015a02 <eMBMasterPoll+0x266>
    {
        switch ( eEvent )
 80157ca:	88bb      	ldrh	r3, [r7, #4]
 80157cc:	3b01      	subs	r3, #1
 80157ce:	2b0f      	cmp	r3, #15
 80157d0:	f200 8119 	bhi.w	8015a06 <eMBMasterPoll+0x26a>
 80157d4:	a201      	add	r2, pc, #4	; (adr r2, 80157dc <eMBMasterPoll+0x40>)
 80157d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80157da:	bf00      	nop
 80157dc:	0801581d 	.word	0x0801581d
 80157e0:	08015825 	.word	0x08015825
 80157e4:	08015a07 	.word	0x08015a07
 80157e8:	08015863 	.word	0x08015863
 80157ec:	08015a07 	.word	0x08015a07
 80157f0:	08015a07 	.word	0x08015a07
 80157f4:	08015a07 	.word	0x08015a07
 80157f8:	08015957 	.word	0x08015957
 80157fc:	08015a07 	.word	0x08015a07
 8015800:	08015a07 	.word	0x08015a07
 8015804:	08015a07 	.word	0x08015a07
 8015808:	08015a07 	.word	0x08015a07
 801580c:	08015a07 	.word	0x08015a07
 8015810:	08015a07 	.word	0x08015a07
 8015814:	08015a07 	.word	0x08015a07
 8015818:	08015981 	.word	0x08015981
        {
        case EV_MASTER_READY:
            eMBState = STATE_ESTABLISHED;
 801581c:	4b7d      	ldr	r3, [pc, #500]	; (8015a14 <eMBMasterPoll+0x278>)
 801581e:	2203      	movs	r2, #3
 8015820:	701a      	strb	r2, [r3, #0]
            break;
 8015822:	e0f1      	b.n	8015a08 <eMBMasterPoll+0x26c>

        case EV_MASTER_FRAME_RECEIVED:
            eStatus = peMBMasterFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 8015824:	4b7c      	ldr	r3, [pc, #496]	; (8015a18 <eMBMasterPoll+0x27c>)
 8015826:	681b      	ldr	r3, [r3, #0]
 8015828:	4a7c      	ldr	r2, [pc, #496]	; (8015a1c <eMBMasterPoll+0x280>)
 801582a:	497d      	ldr	r1, [pc, #500]	; (8015a20 <eMBMasterPoll+0x284>)
 801582c:	487d      	ldr	r0, [pc, #500]	; (8015a24 <eMBMasterPoll+0x288>)
 801582e:	4798      	blx	r3
 8015830:	4603      	mov	r3, r0
 8015832:	71fb      	strb	r3, [r7, #7]
            /* Check if the frame is for us. If not ,send an error process event. */
            if ( ( eStatus == MB_ENOERR ) && ( ucRcvAddress == ucMBMasterGetDestAddress() ) )
 8015834:	79fb      	ldrb	r3, [r7, #7]
 8015836:	2b00      	cmp	r3, #0
 8015838:	d10c      	bne.n	8015854 <eMBMasterPoll+0xb8>
 801583a:	f000 f90d 	bl	8015a58 <ucMBMasterGetDestAddress>
 801583e:	4603      	mov	r3, r0
 8015840:	461a      	mov	r2, r3
 8015842:	4b78      	ldr	r3, [pc, #480]	; (8015a24 <eMBMasterPoll+0x288>)
 8015844:	781b      	ldrb	r3, [r3, #0]
 8015846:	429a      	cmp	r2, r3
 8015848:	d104      	bne.n	8015854 <eMBMasterPoll+0xb8>
            {
                ( void ) xMBMasterPortEventPost( EV_MASTER_EXECUTE );
 801584a:	2004      	movs	r0, #4
 801584c:	f000 fb18 	bl	8015e80 <xMBMasterPortEventPost>
 8015850:	bf00      	nop
            else
            {
                vMBMasterSetErrorType(EV_ERROR_RECEIVE_DATA);
                ( void ) xMBMasterPortEventPost( EV_MASTER_ERROR_PROCESS );
            }
            break;
 8015852:	e0d9      	b.n	8015a08 <eMBMasterPoll+0x26c>
                vMBMasterSetErrorType(EV_ERROR_RECEIVE_DATA);
 8015854:	2001      	movs	r0, #1
 8015856:	f000 f927 	bl	8015aa8 <vMBMasterSetErrorType>
                ( void ) xMBMasterPortEventPost( EV_MASTER_ERROR_PROCESS );
 801585a:	2010      	movs	r0, #16
 801585c:	f000 fb10 	bl	8015e80 <xMBMasterPortEventPost>
            break;
 8015860:	e0d2      	b.n	8015a08 <eMBMasterPoll+0x26c>

        case EV_MASTER_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 8015862:	4b6f      	ldr	r3, [pc, #444]	; (8015a20 <eMBMasterPoll+0x284>)
 8015864:	681b      	ldr	r3, [r3, #0]
 8015866:	781a      	ldrb	r2, [r3, #0]
 8015868:	4b6f      	ldr	r3, [pc, #444]	; (8015a28 <eMBMasterPoll+0x28c>)
 801586a:	701a      	strb	r2, [r3, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 801586c:	4b6f      	ldr	r3, [pc, #444]	; (8015a2c <eMBMasterPoll+0x290>)
 801586e:	2201      	movs	r2, #1
 8015870:	701a      	strb	r2, [r3, #0]
            /* If receive frame has exception .The receive function code highest bit is 1.*/
            if(ucFunctionCode >> 7) {
 8015872:	4b6d      	ldr	r3, [pc, #436]	; (8015a28 <eMBMasterPoll+0x28c>)
 8015874:	781b      	ldrb	r3, [r3, #0]
 8015876:	b25b      	sxtb	r3, r3
 8015878:	2b00      	cmp	r3, #0
 801587a:	da06      	bge.n	801588a <eMBMasterPoll+0xee>
            	eException = (eMBException)ucMBFrame[MB_PDU_DATA_OFF];
 801587c:	4b68      	ldr	r3, [pc, #416]	; (8015a20 <eMBMasterPoll+0x284>)
 801587e:	681b      	ldr	r3, [r3, #0]
 8015880:	3301      	adds	r3, #1
 8015882:	781a      	ldrb	r2, [r3, #0]
 8015884:	4b69      	ldr	r3, [pc, #420]	; (8015a2c <eMBMasterPoll+0x290>)
 8015886:	701a      	strb	r2, [r3, #0]
 8015888:	e055      	b.n	8015936 <eMBMasterPoll+0x19a>
            }
			else
			{
				for (i = 0; i < MB_FUNC_HANDLERS_MAX; i++)
 801588a:	2300      	movs	r3, #0
 801588c:	60fb      	str	r3, [r7, #12]
 801588e:	e04d      	b.n	801592c <eMBMasterPoll+0x190>
				{
					/* No more function handlers registered. Abort. */
					if (xMasterFuncHandlers[i].ucFunctionCode == 0)	{
 8015890:	4a67      	ldr	r2, [pc, #412]	; (8015a30 <eMBMasterPoll+0x294>)
 8015892:	68fb      	ldr	r3, [r7, #12]
 8015894:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8015898:	2b00      	cmp	r3, #0
 801589a:	d04b      	beq.n	8015934 <eMBMasterPoll+0x198>
						break;
					}
					else if (xMasterFuncHandlers[i].ucFunctionCode == ucFunctionCode) {
 801589c:	4a64      	ldr	r2, [pc, #400]	; (8015a30 <eMBMasterPoll+0x294>)
 801589e:	68fb      	ldr	r3, [r7, #12]
 80158a0:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 80158a4:	4b60      	ldr	r3, [pc, #384]	; (8015a28 <eMBMasterPoll+0x28c>)
 80158a6:	781b      	ldrb	r3, [r3, #0]
 80158a8:	429a      	cmp	r2, r3
 80158aa:	d13c      	bne.n	8015926 <eMBMasterPoll+0x18a>
						vMBMasterSetCBRunInMasterMode(TRUE);
 80158ac:	2001      	movs	r0, #1
 80158ae:	f000 f8c3 	bl	8015a38 <vMBMasterSetCBRunInMasterMode>
						/* If master request is broadcast,
						 * the master need execute function for all slave.
						 */
						if ( xMBMasterRequestIsBroadcast() ) {
 80158b2:	f001 fff9 	bl	80178a8 <xMBMasterRequestIsBroadcast>
 80158b6:	4603      	mov	r3, r0
 80158b8:	2b00      	cmp	r3, #0
 80158ba:	d022      	beq.n	8015902 <eMBMasterPoll+0x166>
							usLength = usMBMasterGetPDUSndLength();
 80158bc:	f001 ffe8 	bl	8017890 <usMBMasterGetPDUSndLength>
 80158c0:	4603      	mov	r3, r0
 80158c2:	461a      	mov	r2, r3
 80158c4:	4b55      	ldr	r3, [pc, #340]	; (8015a1c <eMBMasterPoll+0x280>)
 80158c6:	801a      	strh	r2, [r3, #0]
							for(j = 1; j <= MB_MASTER_TOTAL_SLAVE_NUM; j++){
 80158c8:	2301      	movs	r3, #1
 80158ca:	60bb      	str	r3, [r7, #8]
 80158cc:	e015      	b.n	80158fa <eMBMasterPoll+0x15e>
								vMBMasterSetDestAddress(j);
 80158ce:	68bb      	ldr	r3, [r7, #8]
 80158d0:	b2db      	uxtb	r3, r3
 80158d2:	4618      	mov	r0, r3
 80158d4:	f000 f8cc 	bl	8015a70 <vMBMasterSetDestAddress>
								eException = xMasterFuncHandlers[i].pxHandler(ucMBFrame, &usLength);
 80158d8:	4a55      	ldr	r2, [pc, #340]	; (8015a30 <eMBMasterPoll+0x294>)
 80158da:	68fb      	ldr	r3, [r7, #12]
 80158dc:	00db      	lsls	r3, r3, #3
 80158de:	4413      	add	r3, r2
 80158e0:	685b      	ldr	r3, [r3, #4]
 80158e2:	4a4f      	ldr	r2, [pc, #316]	; (8015a20 <eMBMasterPoll+0x284>)
 80158e4:	6812      	ldr	r2, [r2, #0]
 80158e6:	494d      	ldr	r1, [pc, #308]	; (8015a1c <eMBMasterPoll+0x280>)
 80158e8:	4610      	mov	r0, r2
 80158ea:	4798      	blx	r3
 80158ec:	4603      	mov	r3, r0
 80158ee:	461a      	mov	r2, r3
 80158f0:	4b4e      	ldr	r3, [pc, #312]	; (8015a2c <eMBMasterPoll+0x290>)
 80158f2:	701a      	strb	r2, [r3, #0]
							for(j = 1; j <= MB_MASTER_TOTAL_SLAVE_NUM; j++){
 80158f4:	68bb      	ldr	r3, [r7, #8]
 80158f6:	3301      	adds	r3, #1
 80158f8:	60bb      	str	r3, [r7, #8]
 80158fa:	68bb      	ldr	r3, [r7, #8]
 80158fc:	2b10      	cmp	r3, #16
 80158fe:	dde6      	ble.n	80158ce <eMBMasterPoll+0x132>
 8015900:	e00d      	b.n	801591e <eMBMasterPoll+0x182>
							}
						}
						else {
							eException = xMasterFuncHandlers[i].pxHandler(ucMBFrame, &usLength);
 8015902:	4a4b      	ldr	r2, [pc, #300]	; (8015a30 <eMBMasterPoll+0x294>)
 8015904:	68fb      	ldr	r3, [r7, #12]
 8015906:	00db      	lsls	r3, r3, #3
 8015908:	4413      	add	r3, r2
 801590a:	685b      	ldr	r3, [r3, #4]
 801590c:	4a44      	ldr	r2, [pc, #272]	; (8015a20 <eMBMasterPoll+0x284>)
 801590e:	6812      	ldr	r2, [r2, #0]
 8015910:	4942      	ldr	r1, [pc, #264]	; (8015a1c <eMBMasterPoll+0x280>)
 8015912:	4610      	mov	r0, r2
 8015914:	4798      	blx	r3
 8015916:	4603      	mov	r3, r0
 8015918:	461a      	mov	r2, r3
 801591a:	4b44      	ldr	r3, [pc, #272]	; (8015a2c <eMBMasterPoll+0x290>)
 801591c:	701a      	strb	r2, [r3, #0]
						}
						vMBMasterSetCBRunInMasterMode(FALSE);
 801591e:	2000      	movs	r0, #0
 8015920:	f000 f88a 	bl	8015a38 <vMBMasterSetCBRunInMasterMode>
						break;
 8015924:	e007      	b.n	8015936 <eMBMasterPoll+0x19a>
				for (i = 0; i < MB_FUNC_HANDLERS_MAX; i++)
 8015926:	68fb      	ldr	r3, [r7, #12]
 8015928:	3301      	adds	r3, #1
 801592a:	60fb      	str	r3, [r7, #12]
 801592c:	68fb      	ldr	r3, [r7, #12]
 801592e:	2b0f      	cmp	r3, #15
 8015930:	ddae      	ble.n	8015890 <eMBMasterPoll+0xf4>
 8015932:	e000      	b.n	8015936 <eMBMasterPoll+0x19a>
						break;
 8015934:	bf00      	nop
					}
				}
			}
            /* If master has exception ,Master will send error process.Otherwise the Master is idle.*/
            if (eException != MB_EX_NONE) {
 8015936:	4b3d      	ldr	r3, [pc, #244]	; (8015a2c <eMBMasterPoll+0x290>)
 8015938:	781b      	ldrb	r3, [r3, #0]
 801593a:	2b00      	cmp	r3, #0
 801593c:	d006      	beq.n	801594c <eMBMasterPoll+0x1b0>
            	vMBMasterSetErrorType(EV_ERROR_EXECUTE_FUNCTION);
 801593e:	2002      	movs	r0, #2
 8015940:	f000 f8b2 	bl	8015aa8 <vMBMasterSetErrorType>
            	( void ) xMBMasterPortEventPost( EV_MASTER_ERROR_PROCESS );
 8015944:	2010      	movs	r0, #16
 8015946:	f000 fa9b 	bl	8015e80 <xMBMasterPortEventPost>
            }
            else {
            	vMBMasterCBRequestScuuess( );	//post event to request function that is being called
            	vMBMasterRunResRelease( );
            }
            break;
 801594a:	e05d      	b.n	8015a08 <eMBMasterPoll+0x26c>
            	vMBMasterCBRequestScuuess( );	//post event to request function that is being called
 801594c:	f000 fb92 	bl	8016074 <vMBMasterCBRequestScuuess>
            	vMBMasterRunResRelease( );
 8015950:	f000 fb44 	bl	8015fdc <vMBMasterRunResRelease>
            break;
 8015954:	e058      	b.n	8015a08 <eMBMasterPoll+0x26c>

        case EV_MASTER_FRAME_SENT:
        	/* Master is busy now. */
        	vMBMasterGetPDUSndBuf( &ucMBFrame );
 8015956:	4832      	ldr	r0, [pc, #200]	; (8015a20 <eMBMasterPoll+0x284>)
 8015958:	f001 ff7a 	bl	8017850 <vMBMasterGetPDUSndBuf>
			eStatus = peMBMasterFrameSendCur( ucMBMasterGetDestAddress(), ucMBFrame, usMBMasterGetPDUSndLength() );
 801595c:	4b35      	ldr	r3, [pc, #212]	; (8015a34 <eMBMasterPoll+0x298>)
 801595e:	681c      	ldr	r4, [r3, #0]
 8015960:	f000 f87a 	bl	8015a58 <ucMBMasterGetDestAddress>
 8015964:	4603      	mov	r3, r0
 8015966:	461e      	mov	r6, r3
 8015968:	4b2d      	ldr	r3, [pc, #180]	; (8015a20 <eMBMasterPoll+0x284>)
 801596a:	681d      	ldr	r5, [r3, #0]
 801596c:	f001 ff90 	bl	8017890 <usMBMasterGetPDUSndLength>
 8015970:	4603      	mov	r3, r0
 8015972:	461a      	mov	r2, r3
 8015974:	4629      	mov	r1, r5
 8015976:	4630      	mov	r0, r6
 8015978:	47a0      	blx	r4
 801597a:	4603      	mov	r3, r0
 801597c:	71fb      	strb	r3, [r7, #7]
            break;
 801597e:	e043      	b.n	8015a08 <eMBMasterPoll+0x26c>

        case EV_MASTER_ERROR_PROCESS:
        	/* Execute specified error process callback function. */
			errorType = eMBMasterGetErrorType();
 8015980:	f000 f886 	bl	8015a90 <eMBMasterGetErrorType>
 8015984:	4603      	mov	r3, r0
 8015986:	71bb      	strb	r3, [r7, #6]
			vMBMasterGetPDUSndBuf( &ucMBFrame );
 8015988:	4825      	ldr	r0, [pc, #148]	; (8015a20 <eMBMasterPoll+0x284>)
 801598a:	f001 ff61 	bl	8017850 <vMBMasterGetPDUSndBuf>
			switch (errorType) {
 801598e:	79bb      	ldrb	r3, [r7, #6]
 8015990:	2b02      	cmp	r3, #2
 8015992:	d024      	beq.n	80159de <eMBMasterPoll+0x242>
 8015994:	2b02      	cmp	r3, #2
 8015996:	dc31      	bgt.n	80159fc <eMBMasterPoll+0x260>
 8015998:	2b00      	cmp	r3, #0
 801599a:	d002      	beq.n	80159a2 <eMBMasterPoll+0x206>
 801599c:	2b01      	cmp	r3, #1
 801599e:	d00f      	beq.n	80159c0 <eMBMasterPoll+0x224>
 80159a0:	e02c      	b.n	80159fc <eMBMasterPoll+0x260>
			case EV_ERROR_RESPOND_TIMEOUT:
				vMBMasterErrorCBRespondTimeout(ucMBMasterGetDestAddress(),
 80159a2:	f000 f859 	bl	8015a58 <ucMBMasterGetDestAddress>
 80159a6:	4603      	mov	r3, r0
 80159a8:	461d      	mov	r5, r3
 80159aa:	4b1d      	ldr	r3, [pc, #116]	; (8015a20 <eMBMasterPoll+0x284>)
 80159ac:	681c      	ldr	r4, [r3, #0]
 80159ae:	f001 ff6f 	bl	8017890 <usMBMasterGetPDUSndLength>
 80159b2:	4603      	mov	r3, r0
 80159b4:	461a      	mov	r2, r3
 80159b6:	4621      	mov	r1, r4
 80159b8:	4628      	mov	r0, r5
 80159ba:	f000 fb1d 	bl	8015ff8 <vMBMasterErrorCBRespondTimeout>
						ucMBFrame, usMBMasterGetPDUSndLength());
				break;
 80159be:	e01d      	b.n	80159fc <eMBMasterPoll+0x260>
			case EV_ERROR_RECEIVE_DATA:
				vMBMasterErrorCBReceiveData(ucMBMasterGetDestAddress(),
 80159c0:	f000 f84a 	bl	8015a58 <ucMBMasterGetDestAddress>
 80159c4:	4603      	mov	r3, r0
 80159c6:	461d      	mov	r5, r3
 80159c8:	4b15      	ldr	r3, [pc, #84]	; (8015a20 <eMBMasterPoll+0x284>)
 80159ca:	681c      	ldr	r4, [r3, #0]
 80159cc:	f001 ff60 	bl	8017890 <usMBMasterGetPDUSndLength>
 80159d0:	4603      	mov	r3, r0
 80159d2:	461a      	mov	r2, r3
 80159d4:	4621      	mov	r1, r4
 80159d6:	4628      	mov	r0, r5
 80159d8:	f000 fb22 	bl	8016020 <vMBMasterErrorCBReceiveData>
						ucMBFrame, usMBMasterGetPDUSndLength());
				break;
 80159dc:	e00e      	b.n	80159fc <eMBMasterPoll+0x260>
			case EV_ERROR_EXECUTE_FUNCTION:
				vMBMasterErrorCBExecuteFunction(ucMBMasterGetDestAddress(),
 80159de:	f000 f83b 	bl	8015a58 <ucMBMasterGetDestAddress>
 80159e2:	4603      	mov	r3, r0
 80159e4:	461d      	mov	r5, r3
 80159e6:	4b0e      	ldr	r3, [pc, #56]	; (8015a20 <eMBMasterPoll+0x284>)
 80159e8:	681c      	ldr	r4, [r3, #0]
 80159ea:	f001 ff51 	bl	8017890 <usMBMasterGetPDUSndLength>
 80159ee:	4603      	mov	r3, r0
 80159f0:	461a      	mov	r2, r3
 80159f2:	4621      	mov	r1, r4
 80159f4:	4628      	mov	r0, r5
 80159f6:	f000 fb27 	bl	8016048 <vMBMasterErrorCBExecuteFunction>
						ucMBFrame, usMBMasterGetPDUSndLength());
				break;
 80159fa:	bf00      	nop
			}
			vMBMasterRunResRelease();
 80159fc:	f000 faee 	bl	8015fdc <vMBMasterRunResRelease>
        	break;
 8015a00:	e002      	b.n	8015a08 <eMBMasterPoll+0x26c>
            
        default:
            break;
        }

    }
 8015a02:	bf00      	nop
 8015a04:	e000      	b.n	8015a08 <eMBMasterPoll+0x26c>
            break;
 8015a06:	bf00      	nop
    //return MB_ENOERR;
    return eStatus;
 8015a08:	79fb      	ldrb	r3, [r7, #7]
}
 8015a0a:	4618      	mov	r0, r3
 8015a0c:	3714      	adds	r7, #20
 8015a0e:	46bd      	mov	sp, r7
 8015a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015a12:	bf00      	nop
 8015a14:	2000009c 	.word	0x2000009c
 8015a18:	20004d58 	.word	0x20004d58
 8015a1c:	20004d68 	.word	0x20004d68
 8015a20:	20004d64 	.word	0x20004d64
 8015a24:	20004d60 	.word	0x20004d60
 8015a28:	20004d6a 	.word	0x20004d6a
 8015a2c:	20004d6b 	.word	0x20004d6b
 8015a30:	200000a0 	.word	0x200000a0
 8015a34:	20004d4c 	.word	0x20004d4c

08015a38 <vMBMasterSetCBRunInMasterMode>:
{
	return xMBRunInMasterMode;
}
/* Set whether the Modbus Master is run in master mode.*/
void vMBMasterSetCBRunInMasterMode( BOOL IsMasterMode )
{
 8015a38:	b480      	push	{r7}
 8015a3a:	b083      	sub	sp, #12
 8015a3c:	af00      	add	r7, sp, #0
 8015a3e:	4603      	mov	r3, r0
 8015a40:	71fb      	strb	r3, [r7, #7]
	xMBRunInMasterMode = IsMasterMode;
 8015a42:	4a04      	ldr	r2, [pc, #16]	; (8015a54 <vMBMasterSetCBRunInMasterMode+0x1c>)
 8015a44:	79fb      	ldrb	r3, [r7, #7]
 8015a46:	7013      	strb	r3, [r2, #0]
}
 8015a48:	bf00      	nop
 8015a4a:	370c      	adds	r7, #12
 8015a4c:	46bd      	mov	sp, r7
 8015a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a52:	4770      	bx	lr
 8015a54:	20004d49 	.word	0x20004d49

08015a58 <ucMBMasterGetDestAddress>:
/* Get Modbus Master send destination address. */
UCHAR ucMBMasterGetDestAddress( void )
{
 8015a58:	b480      	push	{r7}
 8015a5a:	af00      	add	r7, sp, #0
	return ucMBMasterDestAddress;
 8015a5c:	4b03      	ldr	r3, [pc, #12]	; (8015a6c <ucMBMasterGetDestAddress+0x14>)
 8015a5e:	781b      	ldrb	r3, [r3, #0]
 }
 8015a60:	4618      	mov	r0, r3
 8015a62:	46bd      	mov	sp, r7
 8015a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a68:	4770      	bx	lr
 8015a6a:	bf00      	nop
 8015a6c:	20004d48 	.word	0x20004d48

08015a70 <vMBMasterSetDestAddress>:
/* Set Modbus Master send destination address. */
void vMBMasterSetDestAddress( UCHAR Address )
{
 8015a70:	b480      	push	{r7}
 8015a72:	b083      	sub	sp, #12
 8015a74:	af00      	add	r7, sp, #0
 8015a76:	4603      	mov	r3, r0
 8015a78:	71fb      	strb	r3, [r7, #7]
	ucMBMasterDestAddress = Address;
 8015a7a:	4a04      	ldr	r2, [pc, #16]	; (8015a8c <vMBMasterSetDestAddress+0x1c>)
 8015a7c:	79fb      	ldrb	r3, [r7, #7]
 8015a7e:	7013      	strb	r3, [r2, #0]
}
 8015a80:	bf00      	nop
 8015a82:	370c      	adds	r7, #12
 8015a84:	46bd      	mov	sp, r7
 8015a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a8a:	4770      	bx	lr
 8015a8c:	20004d48 	.word	0x20004d48

08015a90 <eMBMasterGetErrorType>:
/* Get Modbus Master current error event type. */
eMBMasterErrorEventType eMBMasterGetErrorType( void )
{
 8015a90:	b480      	push	{r7}
 8015a92:	af00      	add	r7, sp, #0
	return eMBMasterCurErrorType;
 8015a94:	4b03      	ldr	r3, [pc, #12]	; (8015aa4 <eMBMasterGetErrorType+0x14>)
 8015a96:	781b      	ldrb	r3, [r3, #0]
}
 8015a98:	4618      	mov	r0, r3
 8015a9a:	46bd      	mov	sp, r7
 8015a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aa0:	4770      	bx	lr
 8015aa2:	bf00      	nop
 8015aa4:	20004d4a 	.word	0x20004d4a

08015aa8 <vMBMasterSetErrorType>:
/* Set Modbus Master current error event type. */
void vMBMasterSetErrorType( eMBMasterErrorEventType errorType )
{
 8015aa8:	b480      	push	{r7}
 8015aaa:	b083      	sub	sp, #12
 8015aac:	af00      	add	r7, sp, #0
 8015aae:	4603      	mov	r3, r0
 8015ab0:	71fb      	strb	r3, [r7, #7]
	eMBMasterCurErrorType = errorType;
 8015ab2:	4a04      	ldr	r2, [pc, #16]	; (8015ac4 <vMBMasterSetErrorType+0x1c>)
 8015ab4:	79fb      	ldrb	r3, [r7, #7]
 8015ab6:	7013      	strb	r3, [r2, #0]
}
 8015ab8:	bf00      	nop
 8015aba:	370c      	adds	r7, #12
 8015abc:	46bd      	mov	sp, r7
 8015abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ac2:	4770      	bx	lr
 8015ac4:	20004d4a 	.word	0x20004d4a

08015ac8 <vInitMBTask>:
TaskHandle_t MasterMonitorHandle = NULL;
TaskHandle_t MasterPollHandle = NULL;
TaskHandle_t SlavePollHandle = NULL;
TaskHandle_t LedTaskHandle = NULL;

void vInitMBTask(void){
 8015ac8:	b580      	push	{r7, lr}
 8015aca:	b088      	sub	sp, #32
 8015acc:	af02      	add	r7, sp, #8
	BaseType_t status;

#if MB_MASTER_RTU_ENABLED || MB_MASTER_TCP_ENABLED
	status = xTaskCreate(mastermonitor_task, "master monitor task", 600, NULL, osPriorityNormal, &MasterMonitorHandle);
 8015ace:	4b39      	ldr	r3, [pc, #228]	; (8015bb4 <vInitMBTask+0xec>)
 8015ad0:	9301      	str	r3, [sp, #4]
 8015ad2:	2318      	movs	r3, #24
 8015ad4:	9300      	str	r3, [sp, #0]
 8015ad6:	2300      	movs	r3, #0
 8015ad8:	f44f 7216 	mov.w	r2, #600	; 0x258
 8015adc:	4936      	ldr	r1, [pc, #216]	; (8015bb8 <vInitMBTask+0xf0>)
 8015ade:	4837      	ldr	r0, [pc, #220]	; (8015bbc <vInitMBTask+0xf4>)
 8015ae0:	f7f2 fa73 	bl	8007fca <xTaskCreate>
 8015ae4:	6178      	str	r0, [r7, #20]
	configASSERT(status == pdPASS);
 8015ae6:	697b      	ldr	r3, [r7, #20]
 8015ae8:	2b01      	cmp	r3, #1
 8015aea:	d00c      	beq.n	8015b06 <vInitMBTask+0x3e>
	__asm volatile
 8015aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015af0:	b672      	cpsid	i
 8015af2:	f383 8811 	msr	BASEPRI, r3
 8015af6:	f3bf 8f6f 	isb	sy
 8015afa:	f3bf 8f4f 	dsb	sy
 8015afe:	b662      	cpsie	i
 8015b00:	613b      	str	r3, [r7, #16]
}
 8015b02:	bf00      	nop
 8015b04:	e7fe      	b.n	8015b04 <vInitMBTask+0x3c>
#endif

#if MB_MASTER_RTU_ENABLED
	status = xTaskCreate(masterpoll_task, "master poll task", 600, NULL, osPriorityNormal1, &MasterPollHandle);
 8015b06:	4b2e      	ldr	r3, [pc, #184]	; (8015bc0 <vInitMBTask+0xf8>)
 8015b08:	9301      	str	r3, [sp, #4]
 8015b0a:	2319      	movs	r3, #25
 8015b0c:	9300      	str	r3, [sp, #0]
 8015b0e:	2300      	movs	r3, #0
 8015b10:	f44f 7216 	mov.w	r2, #600	; 0x258
 8015b14:	492b      	ldr	r1, [pc, #172]	; (8015bc4 <vInitMBTask+0xfc>)
 8015b16:	482c      	ldr	r0, [pc, #176]	; (8015bc8 <vInitMBTask+0x100>)
 8015b18:	f7f2 fa57 	bl	8007fca <xTaskCreate>
 8015b1c:	6178      	str	r0, [r7, #20]
	configASSERT(status == pdPASS);
 8015b1e:	697b      	ldr	r3, [r7, #20]
 8015b20:	2b01      	cmp	r3, #1
 8015b22:	d00c      	beq.n	8015b3e <vInitMBTask+0x76>
	__asm volatile
 8015b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b28:	b672      	cpsid	i
 8015b2a:	f383 8811 	msr	BASEPRI, r3
 8015b2e:	f3bf 8f6f 	isb	sy
 8015b32:	f3bf 8f4f 	dsb	sy
 8015b36:	b662      	cpsie	i
 8015b38:	60fb      	str	r3, [r7, #12]
}
 8015b3a:	bf00      	nop
 8015b3c:	e7fe      	b.n	8015b3c <vInitMBTask+0x74>
#endif

#if MB_SLAVE_RTU_ENABLED
	status = xTaskCreate(slavepoll_task, "slave poll task", 600, NULL, osPriorityNormal, &SlavePollHandle);
 8015b3e:	4b23      	ldr	r3, [pc, #140]	; (8015bcc <vInitMBTask+0x104>)
 8015b40:	9301      	str	r3, [sp, #4]
 8015b42:	2318      	movs	r3, #24
 8015b44:	9300      	str	r3, [sp, #0]
 8015b46:	2300      	movs	r3, #0
 8015b48:	f44f 7216 	mov.w	r2, #600	; 0x258
 8015b4c:	4920      	ldr	r1, [pc, #128]	; (8015bd0 <vInitMBTask+0x108>)
 8015b4e:	4821      	ldr	r0, [pc, #132]	; (8015bd4 <vInitMBTask+0x10c>)
 8015b50:	f7f2 fa3b 	bl	8007fca <xTaskCreate>
 8015b54:	6178      	str	r0, [r7, #20]
	configASSERT(status == pdPASS);
 8015b56:	697b      	ldr	r3, [r7, #20]
 8015b58:	2b01      	cmp	r3, #1
 8015b5a:	d00c      	beq.n	8015b76 <vInitMBTask+0xae>
	__asm volatile
 8015b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b60:	b672      	cpsid	i
 8015b62:	f383 8811 	msr	BASEPRI, r3
 8015b66:	f3bf 8f6f 	isb	sy
 8015b6a:	f3bf 8f4f 	dsb	sy
 8015b6e:	b662      	cpsie	i
 8015b70:	60bb      	str	r3, [r7, #8]
}
 8015b72:	bf00      	nop
 8015b74:	e7fe      	b.n	8015b74 <vInitMBTask+0xac>
#endif

	status = xTaskCreate(led_task, "LED task", 200, NULL, osPriorityNormal, &LedTaskHandle);
 8015b76:	4b18      	ldr	r3, [pc, #96]	; (8015bd8 <vInitMBTask+0x110>)
 8015b78:	9301      	str	r3, [sp, #4]
 8015b7a:	2318      	movs	r3, #24
 8015b7c:	9300      	str	r3, [sp, #0]
 8015b7e:	2300      	movs	r3, #0
 8015b80:	22c8      	movs	r2, #200	; 0xc8
 8015b82:	4916      	ldr	r1, [pc, #88]	; (8015bdc <vInitMBTask+0x114>)
 8015b84:	4816      	ldr	r0, [pc, #88]	; (8015be0 <vInitMBTask+0x118>)
 8015b86:	f7f2 fa20 	bl	8007fca <xTaskCreate>
 8015b8a:	6178      	str	r0, [r7, #20]
	configASSERT(status == pdPASS);
 8015b8c:	697b      	ldr	r3, [r7, #20]
 8015b8e:	2b01      	cmp	r3, #1
 8015b90:	d00c      	beq.n	8015bac <vInitMBTask+0xe4>
	__asm volatile
 8015b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b96:	b672      	cpsid	i
 8015b98:	f383 8811 	msr	BASEPRI, r3
 8015b9c:	f3bf 8f6f 	isb	sy
 8015ba0:	f3bf 8f4f 	dsb	sy
 8015ba4:	b662      	cpsie	i
 8015ba6:	607b      	str	r3, [r7, #4]
}
 8015ba8:	bf00      	nop
 8015baa:	e7fe      	b.n	8015baa <vInitMBTask+0xe2>
}
 8015bac:	bf00      	nop
 8015bae:	3718      	adds	r7, #24
 8015bb0:	46bd      	mov	sp, r7
 8015bb2:	bd80      	pop	{r7, pc}
 8015bb4:	20004d6c 	.word	0x20004d6c
 8015bb8:	0801b5c0 	.word	0x0801b5c0
 8015bbc:	08015be5 	.word	0x08015be5
 8015bc0:	20004d70 	.word	0x20004d70
 8015bc4:	0801b5d4 	.word	0x0801b5d4
 8015bc8:	08015c75 	.word	0x08015c75
 8015bcc:	20004d74 	.word	0x20004d74
 8015bd0:	0801b5e8 	.word	0x0801b5e8
 8015bd4:	08015c9d 	.word	0x08015c9d
 8015bd8:	20004d78 	.word	0x20004d78
 8015bdc:	0801b5f8 	.word	0x0801b5f8
 8015be0:	08015d0d 	.word	0x08015d0d

08015be4 <mastermonitor_task>:

USHORT usModbusUserData[10];
UCHAR  ucModbusUserData[10];

void mastermonitor_task(void*p){
 8015be4:	b580      	push	{r7, lr}
 8015be6:	b086      	sub	sp, #24
 8015be8:	af02      	add	r7, sp, #8
 8015bea:	6078      	str	r0, [r7, #4]

#if MB_MASTER_TCP_ENABLED
	eMBMasterTCPDoInit(502);
#endif
    eMBMasterReqErrCode    errorCode = MB_MRE_NO_ERR;
 8015bec:	2300      	movs	r3, #0
 8015bee:	73fb      	strb	r3, [r7, #15]
    usModbusUserData[0] = 0x1000;
 8015bf0:	4b1f      	ldr	r3, [pc, #124]	; (8015c70 <mastermonitor_task+0x8c>)
 8015bf2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8015bf6:	801a      	strh	r2, [r3, #0]
    usModbusUserData[1] = 0x1111;
 8015bf8:	4b1d      	ldr	r3, [pc, #116]	; (8015c70 <mastermonitor_task+0x8c>)
 8015bfa:	f241 1211 	movw	r2, #4369	; 0x1111
 8015bfe:	805a      	strh	r2, [r3, #2]
    usModbusUserData[2] = 0x2222;
 8015c00:	4b1b      	ldr	r3, [pc, #108]	; (8015c70 <mastermonitor_task+0x8c>)
 8015c02:	f242 2222 	movw	r2, #8738	; 0x2222
 8015c06:	809a      	strh	r2, [r3, #4]
    usModbusUserData[3] = 0x3333;
 8015c08:	4b19      	ldr	r3, [pc, #100]	; (8015c70 <mastermonitor_task+0x8c>)
 8015c0a:	f243 3233 	movw	r2, #13107	; 0x3333
 8015c0e:	80da      	strh	r2, [r3, #6]
    usModbusUserData[4] = 0x4444;
 8015c10:	4b17      	ldr	r3, [pc, #92]	; (8015c70 <mastermonitor_task+0x8c>)
 8015c12:	f244 4244 	movw	r2, #17476	; 0x4444
 8015c16:	811a      	strh	r2, [r3, #8]
	while(1)
	{
				//GHI 1 vào bit thứ 8 của slave modbus (function code = 05)
		        errorCode = eMBMasterReqWriteCoil(1,8,0xFF00, portMAX_DELAY);
 8015c18:	f04f 33ff 	mov.w	r3, #4294967295
 8015c1c:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8015c20:	2108      	movs	r1, #8
 8015c22:	2001      	movs	r0, #1
 8015c24:	f7fe fbfc 	bl	8014420 <eMBMasterReqWriteCoil>
 8015c28:	4603      	mov	r3, r0
 8015c2a:	73fb      	strb	r3, [r7, #15]

		        //đọc 8 bit đầu tiên của slave modbus	(function code = 02)
		        errorCode = eMBMasterReqReadDiscreteInputs(1, 0, 8, portMAX_DELAY);
 8015c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8015c30:	2208      	movs	r2, #8
 8015c32:	2100      	movs	r1, #0
 8015c34:	2001      	movs	r0, #1
 8015c36:	f7fe fd87 	bl	8014748 <eMBMasterReqReadDiscreteInputs>
 8015c3a:	4603      	mov	r3, r0
 8015c3c:	73fb      	strb	r3, [r7, #15]

		        //Đọc 16 thanh ghi INPUT đầu tiên của slave modbus  (function code = 04)
		     	errorCode = eMBMasterReqReadInputRegister(1,0,16,portMAX_DELAY);
 8015c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8015c42:	2210      	movs	r2, #16
 8015c44:	2100      	movs	r1, #0
 8015c46:	2001      	movs	r0, #1
 8015c48:	f7ff fa36 	bl	80150b8 <eMBMasterReqReadInputRegister>
 8015c4c:	4603      	mov	r3, r0
 8015c4e:	73fb      	strb	r3, [r7, #15]

		     	//ghi vào 4 thanh ghi đầu tiên của slave modbus  (function code = 10)
		     	errorCode = eMBMasterReqWriteMultipleHoldingRegister(1,0,2,usModbusUserData,portMAX_DELAY);
 8015c50:	f04f 33ff 	mov.w	r3, #4294967295
 8015c54:	9300      	str	r3, [sp, #0]
 8015c56:	4b06      	ldr	r3, [pc, #24]	; (8015c70 <mastermonitor_task+0x8c>)
 8015c58:	2202      	movs	r2, #2
 8015c5a:	2100      	movs	r1, #0
 8015c5c:	2001      	movs	r0, #1
 8015c5e:	f7ff f808 	bl	8014c72 <eMBMasterReqWriteMultipleHoldingRegister>
 8015c62:	4603      	mov	r3, r0
 8015c64:	73fb      	strb	r3, [r7, #15]

		     	vTaskDelay(500);
 8015c66:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8015c6a:	f7f2 fb0b 	bl	8008284 <vTaskDelay>
		        errorCode = eMBMasterReqWriteCoil(1,8,0xFF00, portMAX_DELAY);
 8015c6e:	e7d3      	b.n	8015c18 <mastermonitor_task+0x34>
 8015c70:	2000dc8c 	.word	0x2000dc8c

08015c74 <masterpoll_task>:
	}


}

void masterpoll_task(void*p){
 8015c74:	b580      	push	{r7, lr}
 8015c76:	b082      	sub	sp, #8
 8015c78:	af00      	add	r7, sp, #0
 8015c7a:	6078      	str	r0, [r7, #4]

    eMBMasterInit(MB_RTU, 2, 115200,  MB_PAR_EVEN);
 8015c7c:	2302      	movs	r3, #2
 8015c7e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8015c82:	2102      	movs	r1, #2
 8015c84:	2000      	movs	r0, #0
 8015c86:	f7ff fd03 	bl	8015690 <eMBMasterInit>
    eMBMasterEnable();
 8015c8a:	f7ff fd6b 	bl	8015764 <eMBMasterEnable>
    HAL_Delay(10);// delay for startup master modbus
 8015c8e:	200a      	movs	r0, #10
 8015c90:	f7eb f9e4 	bl	800105c <HAL_Delay>

	while(1)
	{
		eMBMasterPoll();
 8015c94:	f7ff fd82 	bl	801579c <eMBMasterPoll>
 8015c98:	e7fc      	b.n	8015c94 <masterpoll_task+0x20>
	...

08015c9c <slavepoll_task>:
}

#define PORT_MODBUS_RTU		0


void slavepoll_task(void*p){
 8015c9c:	b580      	push	{r7, lr}
 8015c9e:	b084      	sub	sp, #16
 8015ca0:	af02      	add	r7, sp, #8
 8015ca2:	6078      	str	r0, [r7, #4]

	  usSRegInBuf[0] 	= 0x11;
 8015ca4:	4b15      	ldr	r3, [pc, #84]	; (8015cfc <slavepoll_task+0x60>)
 8015ca6:	2211      	movs	r2, #17
 8015ca8:	801a      	strh	r2, [r3, #0]
	  usSRegInBuf[1] 	= 0x22;
 8015caa:	4b14      	ldr	r3, [pc, #80]	; (8015cfc <slavepoll_task+0x60>)
 8015cac:	2222      	movs	r2, #34	; 0x22
 8015cae:	805a      	strh	r2, [r3, #2]
	  usSRegInBuf[2] 	= 0x33;
 8015cb0:	4b12      	ldr	r3, [pc, #72]	; (8015cfc <slavepoll_task+0x60>)
 8015cb2:	2233      	movs	r2, #51	; 0x33
 8015cb4:	809a      	strh	r2, [r3, #4]
	  usSRegInBuf[3] 	= 0x44;
 8015cb6:	4b11      	ldr	r3, [pc, #68]	; (8015cfc <slavepoll_task+0x60>)
 8015cb8:	2244      	movs	r2, #68	; 0x44
 8015cba:	80da      	strh	r2, [r3, #6]
	  usSRegHoldBuf[0] 	= 0x1111;
 8015cbc:	4b10      	ldr	r3, [pc, #64]	; (8015d00 <slavepoll_task+0x64>)
 8015cbe:	f241 1211 	movw	r2, #4369	; 0x1111
 8015cc2:	801a      	strh	r2, [r3, #0]
	  usSRegHoldBuf[1] 	= 0x2222;
 8015cc4:	4b0e      	ldr	r3, [pc, #56]	; (8015d00 <slavepoll_task+0x64>)
 8015cc6:	f242 2222 	movw	r2, #8738	; 0x2222
 8015cca:	805a      	strh	r2, [r3, #2]
	  ucSDiscInBuf[0] 	= 0xAA;
 8015ccc:	4b0d      	ldr	r3, [pc, #52]	; (8015d04 <slavepoll_task+0x68>)
 8015cce:	22aa      	movs	r2, #170	; 0xaa
 8015cd0:	701a      	strb	r2, [r3, #0]
	  ucSCoilBuf[0] 	= 0xf4;
 8015cd2:	4b0d      	ldr	r3, [pc, #52]	; (8015d08 <slavepoll_task+0x6c>)
 8015cd4:	22f4      	movs	r2, #244	; 0xf4
 8015cd6:	701a      	strb	r2, [r3, #0]

	eMBInit(MB_RTU, 1, PORT_MODBUS_RTU, 115200, MB_PAR_NONE);
 8015cd8:	2300      	movs	r3, #0
 8015cda:	9300      	str	r3, [sp, #0]
 8015cdc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8015ce0:	2200      	movs	r2, #0
 8015ce2:	2101      	movs	r1, #1
 8015ce4:	2000      	movs	r0, #0
 8015ce6:	f7ff fb75 	bl	80153d4 <eMBInit>
	eMBEnable();
 8015cea:	f7ff fbef 	bl	80154cc <eMBEnable>
	HAL_Delay(2);
 8015cee:	2002      	movs	r0, #2
 8015cf0:	f7eb f9b4 	bl	800105c <HAL_Delay>

	while(1){

		eMBPoll();
 8015cf4:	f7ff fc06 	bl	8015504 <eMBPoll>
 8015cf8:	e7fc      	b.n	8015cf4 <slavepoll_task+0x58>
 8015cfa:	bf00      	nop
 8015cfc:	2000dcc8 	.word	0x2000dcc8
 8015d00:	2000dca8 	.word	0x2000dca8
 8015d04:	2000dca4 	.word	0x2000dca4
 8015d08:	2000dca0 	.word	0x2000dca0

08015d0c <led_task>:

	}

}

void led_task(void*p){
 8015d0c:	b580      	push	{r7, lr}
 8015d0e:	b082      	sub	sp, #8
 8015d10:	af00      	add	r7, sp, #0
 8015d12:	6078      	str	r0, [r7, #4]

	while(1){
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8015d14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8015d18:	4803      	ldr	r0, [pc, #12]	; (8015d28 <led_task+0x1c>)
 8015d1a:	f7ec fe80 	bl	8002a1e <HAL_GPIO_TogglePin>
		vTaskDelay(500);
 8015d1e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8015d22:	f7f2 faaf 	bl	8008284 <vTaskDelay>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8015d26:	e7f5      	b.n	8015d14 <led_task+0x8>
 8015d28:	40020400 	.word	0x40020400

08015d2c <EnterCriticalSection>:

/* ----------------------- Variables ----------------------------------------*/

/* ----------------------- Start implementation -----------------------------*/
void EnterCriticalSection(void)
{
 8015d2c:	b580      	push	{r7, lr}
 8015d2e:	af00      	add	r7, sp, #0
    taskENTER_CRITICAL();
 8015d30:	f7f3 fe9c 	bl	8009a6c <vPortEnterCritical>
}
 8015d34:	bf00      	nop
 8015d36:	bd80      	pop	{r7, pc}

08015d38 <ExitCriticalSection>:

void ExitCriticalSection(void)
{
 8015d38:	b580      	push	{r7, lr}
 8015d3a:	af00      	add	r7, sp, #0
    taskEXIT_CRITICAL();
 8015d3c:	f7f3 feca 	bl	8009ad4 <vPortExitCritical>
}
 8015d40:	bf00      	nop
 8015d42:	bd80      	pop	{r7, pc}

08015d44 <xMBPortEventInit>:


/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortEventInit( void )
{
 8015d44:	b580      	push	{r7, lr}
 8015d46:	b082      	sub	sp, #8
 8015d48:	af00      	add	r7, sp, #0
	xSlaveOsEvent = xEventGroupCreate();
 8015d4a:	f7f0 fd55 	bl	80067f8 <xEventGroupCreate>
 8015d4e:	4603      	mov	r3, r0
 8015d50:	4a0b      	ldr	r2, [pc, #44]	; (8015d80 <xMBPortEventInit+0x3c>)
 8015d52:	6013      	str	r3, [r2, #0]

	configASSERT(xSlaveOsEvent != NULL);
 8015d54:	4b0a      	ldr	r3, [pc, #40]	; (8015d80 <xMBPortEventInit+0x3c>)
 8015d56:	681b      	ldr	r3, [r3, #0]
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	d10c      	bne.n	8015d76 <xMBPortEventInit+0x32>
	__asm volatile
 8015d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d60:	b672      	cpsid	i
 8015d62:	f383 8811 	msr	BASEPRI, r3
 8015d66:	f3bf 8f6f 	isb	sy
 8015d6a:	f3bf 8f4f 	dsb	sy
 8015d6e:	b662      	cpsie	i
 8015d70:	607b      	str	r3, [r7, #4]
}
 8015d72:	bf00      	nop
 8015d74:	e7fe      	b.n	8015d74 <xMBPortEventInit+0x30>

    return TRUE;
 8015d76:	2301      	movs	r3, #1
}
 8015d78:	4618      	mov	r0, r3
 8015d7a:	3708      	adds	r7, #8
 8015d7c:	46bd      	mov	sp, r7
 8015d7e:	bd80      	pop	{r7, pc}
 8015d80:	20004d7c 	.word	0x20004d7c

08015d84 <xMBPortEventPost>:

BOOL
xMBPortEventPost( eMBEventType eEvent )
{
 8015d84:	b580      	push	{r7, lr}
 8015d86:	b082      	sub	sp, #8
 8015d88:	af00      	add	r7, sp, #0
 8015d8a:	4603      	mov	r3, r0
 8015d8c:	71fb      	strb	r3, [r7, #7]
	xEventGroupSetBits(xSlaveOsEvent, eEvent);
 8015d8e:	4b06      	ldr	r3, [pc, #24]	; (8015da8 <xMBPortEventPost+0x24>)
 8015d90:	681b      	ldr	r3, [r3, #0]
 8015d92:	79fa      	ldrb	r2, [r7, #7]
 8015d94:	4611      	mov	r1, r2
 8015d96:	4618      	mov	r0, r3
 8015d98:	f7f0 fe1e 	bl	80069d8 <xEventGroupSetBits>
    return TRUE;
 8015d9c:	2301      	movs	r3, #1
}
 8015d9e:	4618      	mov	r0, r3
 8015da0:	3708      	adds	r7, #8
 8015da2:	46bd      	mov	sp, r7
 8015da4:	bd80      	pop	{r7, pc}
 8015da6:	bf00      	nop
 8015da8:	20004d7c 	.word	0x20004d7c

08015dac <xMBPortEventPostFromISR>:

BOOL
xMBPortEventPostFromISR( eMBEventType eEvent )
{
 8015dac:	b580      	push	{r7, lr}
 8015dae:	b084      	sub	sp, #16
 8015db0:	af00      	add	r7, sp, #0
 8015db2:	4603      	mov	r3, r0
 8015db4:	71fb      	strb	r3, [r7, #7]
	BaseType_t xresult = pdFAIL;
 8015db6:	2300      	movs	r3, #0
 8015db8:	60fb      	str	r3, [r7, #12]
	xresult = xEventGroupSetBitsFromISR(xSlaveOsEvent, eEvent, NULL);
 8015dba:	4b08      	ldr	r3, [pc, #32]	; (8015ddc <xMBPortEventPostFromISR+0x30>)
 8015dbc:	681b      	ldr	r3, [r3, #0]
 8015dbe:	79f9      	ldrb	r1, [r7, #7]
 8015dc0:	2200      	movs	r2, #0
 8015dc2:	4618      	mov	r0, r3
 8015dc4:	f7f0 fec6 	bl	8006b54 <xEventGroupSetBitsFromISR>
 8015dc8:	60f8      	str	r0, [r7, #12]
	if(xresult == pdFAIL){
 8015dca:	68fb      	ldr	r3, [r7, #12]
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	d100      	bne.n	8015dd2 <xMBPortEventPostFromISR+0x26>
		while(1);
 8015dd0:	e7fe      	b.n	8015dd0 <xMBPortEventPostFromISR+0x24>
	}
	return TRUE;
 8015dd2:	2301      	movs	r3, #1
}
 8015dd4:	4618      	mov	r0, r3
 8015dd6:	3710      	adds	r7, #16
 8015dd8:	46bd      	mov	sp, r7
 8015dda:	bd80      	pop	{r7, pc}
 8015ddc:	20004d7c 	.word	0x20004d7c

08015de0 <xMBPortEventGet>:

BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
 8015de0:	b580      	push	{r7, lr}
 8015de2:	b086      	sub	sp, #24
 8015de4:	af02      	add	r7, sp, #8
 8015de6:	6078      	str	r0, [r7, #4]
	EventBits_t recEvent;
	recEvent = xEventGroupWaitBits(	xSlaveOsEvent,
 8015de8:	4b1b      	ldr	r3, [pc, #108]	; (8015e58 <xMBPortEventGet+0x78>)
 8015dea:	6818      	ldr	r0, [r3, #0]
 8015dec:	f04f 33ff 	mov.w	r3, #4294967295
 8015df0:	9300      	str	r3, [sp, #0]
 8015df2:	2300      	movs	r3, #0
 8015df4:	2201      	movs	r2, #1
 8015df6:	210f      	movs	r1, #15
 8015df8:	f7f0 fd18 	bl	800682c <xEventGroupWaitBits>
 8015dfc:	60f8      	str	r0, [r7, #12]
 8015dfe:	68fb      	ldr	r3, [r7, #12]
 8015e00:	3b01      	subs	r3, #1
 8015e02:	2b07      	cmp	r3, #7
 8015e04:	d822      	bhi.n	8015e4c <xMBPortEventGet+0x6c>
 8015e06:	a201      	add	r2, pc, #4	; (adr r2, 8015e0c <xMBPortEventGet+0x2c>)
 8015e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e0c:	08015e2d 	.word	0x08015e2d
 8015e10:	08015e35 	.word	0x08015e35
 8015e14:	08015e4d 	.word	0x08015e4d
 8015e18:	08015e3d 	.word	0x08015e3d
 8015e1c:	08015e4d 	.word	0x08015e4d
 8015e20:	08015e4d 	.word	0x08015e4d
 8015e24:	08015e4d 	.word	0x08015e4d
 8015e28:	08015e45 	.word	0x08015e45
									portMAX_DELAY);

    switch (recEvent)
    {
    case EV_READY:
        *eEvent = EV_READY;
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	2201      	movs	r2, #1
 8015e30:	701a      	strb	r2, [r3, #0]
        break;
 8015e32:	e00b      	b.n	8015e4c <xMBPortEventGet+0x6c>
    case EV_FRAME_RECEIVED:
        *eEvent = EV_FRAME_RECEIVED;
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	2202      	movs	r2, #2
 8015e38:	701a      	strb	r2, [r3, #0]
        break;
 8015e3a:	e007      	b.n	8015e4c <xMBPortEventGet+0x6c>
    case EV_EXECUTE:
        *eEvent = EV_EXECUTE;
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	2204      	movs	r2, #4
 8015e40:	701a      	strb	r2, [r3, #0]
        break;
 8015e42:	e003      	b.n	8015e4c <xMBPortEventGet+0x6c>
    case EV_FRAME_SENT:
        *eEvent = EV_FRAME_SENT;
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	2208      	movs	r2, #8
 8015e48:	701a      	strb	r2, [r3, #0]
        break;
 8015e4a:	bf00      	nop
    }
    return TRUE;
 8015e4c:	2301      	movs	r3, #1
}
 8015e4e:	4618      	mov	r0, r3
 8015e50:	3710      	adds	r7, #16
 8015e52:	46bd      	mov	sp, r7
 8015e54:	bd80      	pop	{r7, pc}
 8015e56:	bf00      	nop
 8015e58:	20004d7c 	.word	0x20004d7c

08015e5c <xMBMasterPortEventInit>:
static SemaphoreHandle_t	xMasterRunRes;

/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBMasterPortEventInit( void )
{
 8015e5c:	b580      	push	{r7, lr}
 8015e5e:	af00      	add	r7, sp, #0
	xMasterOsEvent = xEventGroupCreate();
 8015e60:	f7f0 fcca 	bl	80067f8 <xEventGroupCreate>
 8015e64:	4603      	mov	r3, r0
 8015e66:	4a05      	ldr	r2, [pc, #20]	; (8015e7c <xMBMasterPortEventInit+0x20>)
 8015e68:	6013      	str	r3, [r2, #0]
	if(xMasterOsEvent == NULL) return FALSE;
 8015e6a:	4b04      	ldr	r3, [pc, #16]	; (8015e7c <xMBMasterPortEventInit+0x20>)
 8015e6c:	681b      	ldr	r3, [r3, #0]
 8015e6e:	2b00      	cmp	r3, #0
 8015e70:	d101      	bne.n	8015e76 <xMBMasterPortEventInit+0x1a>
 8015e72:	2300      	movs	r3, #0
 8015e74:	e000      	b.n	8015e78 <xMBMasterPortEventInit+0x1c>
	return TRUE;
 8015e76:	2301      	movs	r3, #1
}
 8015e78:	4618      	mov	r0, r3
 8015e7a:	bd80      	pop	{r7, pc}
 8015e7c:	20004d80 	.word	0x20004d80

08015e80 <xMBMasterPortEventPost>:

BOOL
xMBMasterPortEventPost( eMBMasterEventType eEvent )
{
 8015e80:	b580      	push	{r7, lr}
 8015e82:	b082      	sub	sp, #8
 8015e84:	af00      	add	r7, sp, #0
 8015e86:	4603      	mov	r3, r0
 8015e88:	80fb      	strh	r3, [r7, #6]
	xEventGroupSetBits(xMasterOsEvent, eEvent);
 8015e8a:	4b06      	ldr	r3, [pc, #24]	; (8015ea4 <xMBMasterPortEventPost+0x24>)
 8015e8c:	681b      	ldr	r3, [r3, #0]
 8015e8e:	88fa      	ldrh	r2, [r7, #6]
 8015e90:	4611      	mov	r1, r2
 8015e92:	4618      	mov	r0, r3
 8015e94:	f7f0 fda0 	bl	80069d8 <xEventGroupSetBits>
	return TRUE;
 8015e98:	2301      	movs	r3, #1
}
 8015e9a:	4618      	mov	r0, r3
 8015e9c:	3708      	adds	r7, #8
 8015e9e:	46bd      	mov	sp, r7
 8015ea0:	bd80      	pop	{r7, pc}
 8015ea2:	bf00      	nop
 8015ea4:	20004d80 	.word	0x20004d80

08015ea8 <xMBMasterPortEventPostFromISR>:

BOOL
xMBMasterPortEventPostFromISR( eMBMasterEventType eEvent )
{
 8015ea8:	b580      	push	{r7, lr}
 8015eaa:	b084      	sub	sp, #16
 8015eac:	af00      	add	r7, sp, #0
 8015eae:	4603      	mov	r3, r0
 8015eb0:	80fb      	strh	r3, [r7, #6]
	BaseType_t xresult = pdFAIL;
 8015eb2:	2300      	movs	r3, #0
 8015eb4:	60fb      	str	r3, [r7, #12]
	xresult = xEventGroupSetBitsFromISR(xMasterOsEvent, eEvent, NULL);
 8015eb6:	4b06      	ldr	r3, [pc, #24]	; (8015ed0 <xMBMasterPortEventPostFromISR+0x28>)
 8015eb8:	681b      	ldr	r3, [r3, #0]
 8015eba:	88f9      	ldrh	r1, [r7, #6]
 8015ebc:	2200      	movs	r2, #0
 8015ebe:	4618      	mov	r0, r3
 8015ec0:	f7f0 fe48 	bl	8006b54 <xEventGroupSetBitsFromISR>
 8015ec4:	60f8      	str	r0, [r7, #12]
	if(xresult == pdFAIL){

	}
	return TRUE;
 8015ec6:	2301      	movs	r3, #1
}
 8015ec8:	4618      	mov	r0, r3
 8015eca:	3710      	adds	r7, #16
 8015ecc:	46bd      	mov	sp, r7
 8015ece:	bd80      	pop	{r7, pc}
 8015ed0:	20004d80 	.word	0x20004d80

08015ed4 <xMBMasterPortEventGet>:

BOOL
xMBMasterPortEventGet( eMBMasterEventType * eEvent )
{
 8015ed4:	b580      	push	{r7, lr}
 8015ed6:	b086      	sub	sp, #24
 8015ed8:	af02      	add	r7, sp, #8
 8015eda:	6078      	str	r0, [r7, #4]
	EventBits_t recEvent;
	recEvent = xEventGroupWaitBits(	xMasterOsEvent,
 8015edc:	4b25      	ldr	r3, [pc, #148]	; (8015f74 <xMBMasterPortEventGet+0xa0>)
 8015ede:	6818      	ldr	r0, [r3, #0]
 8015ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8015ee4:	9300      	str	r3, [sp, #0]
 8015ee6:	2300      	movs	r3, #0
 8015ee8:	2201      	movs	r2, #1
 8015eea:	211f      	movs	r1, #31
 8015eec:	f7f0 fc9e 	bl	800682c <xEventGroupWaitBits>
 8015ef0:	60f8      	str	r0, [r7, #12]
 8015ef2:	68fb      	ldr	r3, [r7, #12]
 8015ef4:	3b01      	subs	r3, #1
 8015ef6:	2b0f      	cmp	r3, #15
 8015ef8:	d836      	bhi.n	8015f68 <xMBMasterPortEventGet+0x94>
 8015efa:	a201      	add	r2, pc, #4	; (adr r2, 8015f00 <xMBMasterPortEventGet+0x2c>)
 8015efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015f00:	08015f41 	.word	0x08015f41
 8015f04:	08015f49 	.word	0x08015f49
 8015f08:	08015f69 	.word	0x08015f69
 8015f0c:	08015f51 	.word	0x08015f51
 8015f10:	08015f69 	.word	0x08015f69
 8015f14:	08015f69 	.word	0x08015f69
 8015f18:	08015f69 	.word	0x08015f69
 8015f1c:	08015f59 	.word	0x08015f59
 8015f20:	08015f69 	.word	0x08015f69
 8015f24:	08015f69 	.word	0x08015f69
 8015f28:	08015f69 	.word	0x08015f69
 8015f2c:	08015f69 	.word	0x08015f69
 8015f30:	08015f69 	.word	0x08015f69
 8015f34:	08015f69 	.word	0x08015f69
 8015f38:	08015f69 	.word	0x08015f69
 8015f3c:	08015f61 	.word	0x08015f61

    /* the enum type couldn't convert to int type */
    switch (recEvent)
    {
    case EV_MASTER_READY:
        *eEvent = EV_MASTER_READY;
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	2201      	movs	r2, #1
 8015f44:	801a      	strh	r2, [r3, #0]
        break;
 8015f46:	e00f      	b.n	8015f68 <xMBMasterPortEventGet+0x94>
    case EV_MASTER_FRAME_RECEIVED:
        *eEvent = EV_MASTER_FRAME_RECEIVED;
 8015f48:	687b      	ldr	r3, [r7, #4]
 8015f4a:	2202      	movs	r2, #2
 8015f4c:	801a      	strh	r2, [r3, #0]
        break;
 8015f4e:	e00b      	b.n	8015f68 <xMBMasterPortEventGet+0x94>
    case EV_MASTER_EXECUTE:
        *eEvent = EV_MASTER_EXECUTE;
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	2204      	movs	r2, #4
 8015f54:	801a      	strh	r2, [r3, #0]
        break;
 8015f56:	e007      	b.n	8015f68 <xMBMasterPortEventGet+0x94>
    case EV_MASTER_FRAME_SENT:
        *eEvent = EV_MASTER_FRAME_SENT;
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	2208      	movs	r2, #8
 8015f5c:	801a      	strh	r2, [r3, #0]
        break;
 8015f5e:	e003      	b.n	8015f68 <xMBMasterPortEventGet+0x94>
    case EV_MASTER_ERROR_PROCESS:
        *eEvent = EV_MASTER_ERROR_PROCESS;
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	2210      	movs	r2, #16
 8015f64:	801a      	strh	r2, [r3, #0]
        break;
 8015f66:	bf00      	nop
    }
    return TRUE;
 8015f68:	2301      	movs	r3, #1
}
 8015f6a:	4618      	mov	r0, r3
 8015f6c:	3710      	adds	r7, #16
 8015f6e:	46bd      	mov	sp, r7
 8015f70:	bd80      	pop	{r7, pc}
 8015f72:	bf00      	nop
 8015f74:	20004d80 	.word	0x20004d80

08015f78 <vMBMasterOsResInit>:
 * This function is initialize the OS resource for modbus master.
 * Note:The resource is define by OS.If you not use OS this function can be empty.
 *
 */
void vMBMasterOsResInit( void )
{
 8015f78:	b580      	push	{r7, lr}
 8015f7a:	af00      	add	r7, sp, #0
	xMasterRunRes  = xSemaphoreCreateBinary();
 8015f7c:	2203      	movs	r2, #3
 8015f7e:	2100      	movs	r1, #0
 8015f80:	2001      	movs	r0, #1
 8015f82:	f7f0 ff9b 	bl	8006ebc <xQueueGenericCreate>
 8015f86:	4603      	mov	r3, r0
 8015f88:	4a07      	ldr	r2, [pc, #28]	; (8015fa8 <vMBMasterOsResInit+0x30>)
 8015f8a:	6013      	str	r3, [r2, #0]

	if(xMasterRunRes == NULL) while (1);
 8015f8c:	4b06      	ldr	r3, [pc, #24]	; (8015fa8 <vMBMasterOsResInit+0x30>)
 8015f8e:	681b      	ldr	r3, [r3, #0]
 8015f90:	2b00      	cmp	r3, #0
 8015f92:	d100      	bne.n	8015f96 <vMBMasterOsResInit+0x1e>
 8015f94:	e7fe      	b.n	8015f94 <vMBMasterOsResInit+0x1c>

	//first realse semaphore
	xSemaphoreGive(xMasterRunRes);
 8015f96:	4b04      	ldr	r3, [pc, #16]	; (8015fa8 <vMBMasterOsResInit+0x30>)
 8015f98:	6818      	ldr	r0, [r3, #0]
 8015f9a:	2300      	movs	r3, #0
 8015f9c:	2200      	movs	r2, #0
 8015f9e:	2100      	movs	r1, #0
 8015fa0:	f7f1 f91e 	bl	80071e0 <xQueueGenericSend>
	return;
 8015fa4:	bf00      	nop
}
 8015fa6:	bd80      	pop	{r7, pc}
 8015fa8:	20004d84 	.word	0x20004d84

08015fac <xMBMasterRunResTake>:
 * @param lTimeOut the waiting time.
 *
 * @return resource taked result
 */
BOOL xMBMasterRunResTake( LONG lTimeOut )
{
 8015fac:	b580      	push	{r7, lr}
 8015fae:	b082      	sub	sp, #8
 8015fb0:	af00      	add	r7, sp, #0
 8015fb2:	6078      	str	r0, [r7, #4]
	return (xSemaphoreTake(xMasterRunRes, lTimeOut) ? TRUE : FALSE);
 8015fb4:	4b08      	ldr	r3, [pc, #32]	; (8015fd8 <xMBMasterRunResTake+0x2c>)
 8015fb6:	681b      	ldr	r3, [r3, #0]
 8015fb8:	687a      	ldr	r2, [r7, #4]
 8015fba:	4611      	mov	r1, r2
 8015fbc:	4618      	mov	r0, r3
 8015fbe:	f7f1 fc31 	bl	8007824 <xQueueSemaphoreTake>
 8015fc2:	4603      	mov	r3, r0
 8015fc4:	2b00      	cmp	r3, #0
 8015fc6:	bf14      	ite	ne
 8015fc8:	2301      	movne	r3, #1
 8015fca:	2300      	moveq	r3, #0
 8015fcc:	b2db      	uxtb	r3, r3

}
 8015fce:	4618      	mov	r0, r3
 8015fd0:	3708      	adds	r7, #8
 8015fd2:	46bd      	mov	sp, r7
 8015fd4:	bd80      	pop	{r7, pc}
 8015fd6:	bf00      	nop
 8015fd8:	20004d84 	.word	0x20004d84

08015fdc <vMBMasterRunResRelease>:
 * This function is release Mobus Master running resource.
 * Note:The resource is define by Operating System.If you not use OS this function can be empty.
 *
 */
void vMBMasterRunResRelease( void )
{
 8015fdc:	b580      	push	{r7, lr}
 8015fde:	af00      	add	r7, sp, #0
    /* release resource */
	xSemaphoreGive(xMasterRunRes);
 8015fe0:	4b04      	ldr	r3, [pc, #16]	; (8015ff4 <vMBMasterRunResRelease+0x18>)
 8015fe2:	6818      	ldr	r0, [r3, #0]
 8015fe4:	2300      	movs	r3, #0
 8015fe6:	2200      	movs	r2, #0
 8015fe8:	2100      	movs	r1, #0
 8015fea:	f7f1 f8f9 	bl	80071e0 <xQueueGenericSend>
}
 8015fee:	bf00      	nop
 8015ff0:	bd80      	pop	{r7, pc}
 8015ff2:	bf00      	nop
 8015ff4:	20004d84 	.word	0x20004d84

08015ff8 <vMBMasterErrorCBRespondTimeout>:
 * @param pucPDUData PDU buffer data
 * @param ucPDULength PDU buffer length
 *
 */
void vMBMasterErrorCBRespondTimeout(UCHAR ucDestAddress, const UCHAR* pucPDUData,
        USHORT ucPDULength) {
 8015ff8:	b580      	push	{r7, lr}
 8015ffa:	b082      	sub	sp, #8
 8015ffc:	af00      	add	r7, sp, #0
 8015ffe:	4603      	mov	r3, r0
 8016000:	6039      	str	r1, [r7, #0]
 8016002:	71fb      	strb	r3, [r7, #7]
 8016004:	4613      	mov	r3, r2
 8016006:	80bb      	strh	r3, [r7, #4]
    /**
     * @note This code is use OS's event mechanism for modbus master protocol stack.
     * If you don't use OS, you can change it.
     */
	xEventGroupSetBits(xMasterOsEvent, EV_MASTER_ERROR_RESPOND_TIMEOUT);
 8016008:	4b04      	ldr	r3, [pc, #16]	; (801601c <vMBMasterErrorCBRespondTimeout+0x24>)
 801600a:	681b      	ldr	r3, [r3, #0]
 801600c:	2140      	movs	r1, #64	; 0x40
 801600e:	4618      	mov	r0, r3
 8016010:	f7f0 fce2 	bl	80069d8 <xEventGroupSetBits>
    /* You can add your code under here. */

}
 8016014:	bf00      	nop
 8016016:	3708      	adds	r7, #8
 8016018:	46bd      	mov	sp, r7
 801601a:	bd80      	pop	{r7, pc}
 801601c:	20004d80 	.word	0x20004d80

08016020 <vMBMasterErrorCBReceiveData>:
 * @param pucPDUData PDU buffer data
 * @param ucPDULength PDU buffer length
 *
 */
void vMBMasterErrorCBReceiveData(UCHAR ucDestAddress, const UCHAR* pucPDUData,
        USHORT ucPDULength) {
 8016020:	b580      	push	{r7, lr}
 8016022:	b082      	sub	sp, #8
 8016024:	af00      	add	r7, sp, #0
 8016026:	4603      	mov	r3, r0
 8016028:	6039      	str	r1, [r7, #0]
 801602a:	71fb      	strb	r3, [r7, #7]
 801602c:	4613      	mov	r3, r2
 801602e:	80bb      	strh	r3, [r7, #4]
    /**
     * @note This code is use OS's event mechanism for modbus master protocol stack.
     * If you don't use OS, you can change it.
     */
	xEventGroupSetBits(xMasterOsEvent, EV_MASTER_ERROR_RECEIVE_DATA);
 8016030:	4b04      	ldr	r3, [pc, #16]	; (8016044 <vMBMasterErrorCBReceiveData+0x24>)
 8016032:	681b      	ldr	r3, [r3, #0]
 8016034:	2180      	movs	r1, #128	; 0x80
 8016036:	4618      	mov	r0, r3
 8016038:	f7f0 fcce 	bl	80069d8 <xEventGroupSetBits>
    /* You can add your code under here. */

}
 801603c:	bf00      	nop
 801603e:	3708      	adds	r7, #8
 8016040:	46bd      	mov	sp, r7
 8016042:	bd80      	pop	{r7, pc}
 8016044:	20004d80 	.word	0x20004d80

08016048 <vMBMasterErrorCBExecuteFunction>:
 * @param pucPDUData PDU buffer data
 * @param ucPDULength PDU buffer length
 *
 */
void vMBMasterErrorCBExecuteFunction(UCHAR ucDestAddress, const UCHAR* pucPDUData,
        USHORT ucPDULength) {
 8016048:	b580      	push	{r7, lr}
 801604a:	b082      	sub	sp, #8
 801604c:	af00      	add	r7, sp, #0
 801604e:	4603      	mov	r3, r0
 8016050:	6039      	str	r1, [r7, #0]
 8016052:	71fb      	strb	r3, [r7, #7]
 8016054:	4613      	mov	r3, r2
 8016056:	80bb      	strh	r3, [r7, #4]
    /**
     * @note This code is use OS's event mechanism for modbus master protocol stack.
     * If you don't use OS, you can change it.
     */
	xEventGroupSetBits(xMasterOsEvent, EV_MASTER_ERROR_EXECUTE_FUNCTION);
 8016058:	4b05      	ldr	r3, [pc, #20]	; (8016070 <vMBMasterErrorCBExecuteFunction+0x28>)
 801605a:	681b      	ldr	r3, [r3, #0]
 801605c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8016060:	4618      	mov	r0, r3
 8016062:	f7f0 fcb9 	bl	80069d8 <xEventGroupSetBits>
    /* You can add your code under here. */

}
 8016066:	bf00      	nop
 8016068:	3708      	adds	r7, #8
 801606a:	46bd      	mov	sp, r7
 801606c:	bd80      	pop	{r7, pc}
 801606e:	bf00      	nop
 8016070:	20004d80 	.word	0x20004d80

08016074 <vMBMasterCBRequestScuuess>:
 * This is modbus master request process success callback function.
 * @note There functions will block modbus master poll while execute OS waiting.
 * So,for real-time of system.Do not execute too much waiting process.
 *
 */
void vMBMasterCBRequestScuuess( void ) {
 8016074:	b580      	push	{r7, lr}
 8016076:	af00      	add	r7, sp, #0
    /**
     * @note This code is use OS's event mechanism for modbus master protocol stack.
     * If you don't use OS, you can change it.EV_MASTER_PROCESS_SUCESS
     */
	xEventGroupSetBits(xMasterOsEvent, EV_MASTER_PROCESS_SUCESS);
 8016078:	4b03      	ldr	r3, [pc, #12]	; (8016088 <vMBMasterCBRequestScuuess+0x14>)
 801607a:	681b      	ldr	r3, [r3, #0]
 801607c:	2120      	movs	r1, #32
 801607e:	4618      	mov	r0, r3
 8016080:	f7f0 fcaa 	bl	80069d8 <xEventGroupSetBits>
    /* You can add your code under here. */

}
 8016084:	bf00      	nop
 8016086:	bd80      	pop	{r7, pc}
 8016088:	20004d80 	.word	0x20004d80

0801608c <eMBMasterWaitRequestFinish>:
 * @note If you are use OS, you can use OS's event mechanism. Otherwise you have to run
 * much user custom delay for waiting.
 *
 * @return request error code
 */
eMBMasterReqErrCode eMBMasterWaitRequestFinish( void ) {
 801608c:	b580      	push	{r7, lr}
 801608e:	b084      	sub	sp, #16
 8016090:	af02      	add	r7, sp, #8
    eMBMasterReqErrCode    eErrStatus = MB_MRE_NO_ERR;
 8016092:	2300      	movs	r3, #0
 8016094:	71fb      	strb	r3, [r7, #7]
    EventBits_t recvedEvent;

    recvedEvent = xEventGroupWaitBits(	xMasterOsEvent,
 8016096:	4b17      	ldr	r3, [pc, #92]	; (80160f4 <eMBMasterWaitRequestFinish+0x68>)
 8016098:	6818      	ldr	r0, [r3, #0]
 801609a:	f04f 33ff 	mov.w	r3, #4294967295
 801609e:	9300      	str	r3, [sp, #0]
 80160a0:	2300      	movs	r3, #0
 80160a2:	2201      	movs	r2, #1
 80160a4:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80160a8:	f7f0 fbc0 	bl	800682c <xEventGroupWaitBits>
 80160ac:	6038      	str	r0, [r7, #0]
												EV_MASTER_ERROR_EXECUTE_FUNCTION),
									pdTRUE, //clear on exit
									pdFALSE,//wait for any bits
									portMAX_DELAY);

    switch (recvedEvent)
 80160ae:	683b      	ldr	r3, [r7, #0]
 80160b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80160b4:	d015      	beq.n	80160e2 <eMBMasterWaitRequestFinish+0x56>
 80160b6:	683b      	ldr	r3, [r7, #0]
 80160b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80160bc:	d815      	bhi.n	80160ea <eMBMasterWaitRequestFinish+0x5e>
 80160be:	683b      	ldr	r3, [r7, #0]
 80160c0:	2b80      	cmp	r3, #128	; 0x80
 80160c2:	d00b      	beq.n	80160dc <eMBMasterWaitRequestFinish+0x50>
 80160c4:	683b      	ldr	r3, [r7, #0]
 80160c6:	2b80      	cmp	r3, #128	; 0x80
 80160c8:	d80f      	bhi.n	80160ea <eMBMasterWaitRequestFinish+0x5e>
 80160ca:	683b      	ldr	r3, [r7, #0]
 80160cc:	2b20      	cmp	r3, #32
 80160ce:	d00b      	beq.n	80160e8 <eMBMasterWaitRequestFinish+0x5c>
 80160d0:	683b      	ldr	r3, [r7, #0]
 80160d2:	2b40      	cmp	r3, #64	; 0x40
 80160d4:	d109      	bne.n	80160ea <eMBMasterWaitRequestFinish+0x5e>
    {
			case EV_MASTER_PROCESS_SUCESS:
					break;
			case EV_MASTER_ERROR_RESPOND_TIMEOUT:
			{
					eErrStatus = MB_MRE_TIMEDOUT;
 80160d6:	2304      	movs	r3, #4
 80160d8:	71fb      	strb	r3, [r7, #7]
					break;
 80160da:	e006      	b.n	80160ea <eMBMasterWaitRequestFinish+0x5e>
			}
			case EV_MASTER_ERROR_RECEIVE_DATA:
			{
					eErrStatus = MB_MRE_REV_DATA;
 80160dc:	2303      	movs	r3, #3
 80160de:	71fb      	strb	r3, [r7, #7]
					break;
 80160e0:	e003      	b.n	80160ea <eMBMasterWaitRequestFinish+0x5e>
			}
			case EV_MASTER_ERROR_EXECUTE_FUNCTION:
			{
					eErrStatus = MB_MRE_EXE_FUN;
 80160e2:	2306      	movs	r3, #6
 80160e4:	71fb      	strb	r3, [r7, #7]
					break;
 80160e6:	e000      	b.n	80160ea <eMBMasterWaitRequestFinish+0x5e>
					break;
 80160e8:	bf00      	nop
				eErrStatus = MB_MRE_CONNECTION;
				break;
			}
#endif
    }
    return eErrStatus;
 80160ea:	79fb      	ldrb	r3, [r7, #7]

}
 80160ec:	4618      	mov	r0, r3
 80160ee:	3708      	adds	r7, #8
 80160f0:	46bd      	mov	sp, r7
 80160f2:	bd80      	pop	{r7, pc}
 80160f4:	20004d80 	.word	0x20004d80

080160f8 <vMBPortSerialEnable>:
 
/* ----------------------- Start implementation -----------------------------*/

void
vMBPortSerialEnable( BOOL xRxEnable, BOOL xTxEnable )
{
 80160f8:	b480      	push	{r7}
 80160fa:	b083      	sub	sp, #12
 80160fc:	af00      	add	r7, sp, #0
 80160fe:	4603      	mov	r3, r0
 8016100:	460a      	mov	r2, r1
 8016102:	71fb      	strb	r3, [r7, #7]
 8016104:	4613      	mov	r3, r2
 8016106:	71bb      	strb	r3, [r7, #6]
  /* If xRXEnable enable serial receive interrupts. If xTxENable enable
  * transmitter empty interrupts.
  */
  
  if (xRxEnable) {        
 8016108:	79fb      	ldrb	r3, [r7, #7]
 801610a:	2b00      	cmp	r3, #0
 801610c:	d008      	beq.n	8016120 <vMBPortSerialEnable+0x28>
	  SET_BIT((&huartslave)->Instance->CR1, ( USART_CR1_RXNEIE) );
 801610e:	4b15      	ldr	r3, [pc, #84]	; (8016164 <vMBPortSerialEnable+0x6c>)
 8016110:	681b      	ldr	r3, [r3, #0]
 8016112:	681a      	ldr	r2, [r3, #0]
 8016114:	4b13      	ldr	r3, [pc, #76]	; (8016164 <vMBPortSerialEnable+0x6c>)
 8016116:	681b      	ldr	r3, [r3, #0]
 8016118:	f042 0220 	orr.w	r2, r2, #32
 801611c:	601a      	str	r2, [r3, #0]
 801611e:	e007      	b.n	8016130 <vMBPortSerialEnable+0x38>
//	  HAL_GPIO_WritePin(RE_GPIO_Port, RE_Pin, GPIO_PIN_RESET);// PB10 <=> RE..Receiver Output Enable (Low to enable)
  } else {    
	 CLEAR_BIT((&huartslave)->Instance->CR1, ( USART_CR1_RXNEIE) );
 8016120:	4b10      	ldr	r3, [pc, #64]	; (8016164 <vMBPortSerialEnable+0x6c>)
 8016122:	681b      	ldr	r3, [r3, #0]
 8016124:	681a      	ldr	r2, [r3, #0]
 8016126:	4b0f      	ldr	r3, [pc, #60]	; (8016164 <vMBPortSerialEnable+0x6c>)
 8016128:	681b      	ldr	r3, [r3, #0]
 801612a:	f022 0220 	bic.w	r2, r2, #32
 801612e:	601a      	str	r2, [r3, #0]
//	 HAL_GPIO_WritePin(RE_GPIO_Port, RE_Pin, GPIO_PIN_SET);
  }
  if (xTxEnable) {
 8016130:	79bb      	ldrb	r3, [r7, #6]
 8016132:	2b00      	cmp	r3, #0
 8016134:	d008      	beq.n	8016148 <vMBPortSerialEnable+0x50>
	  SET_BIT((&huartslave)->Instance->CR1, USART_CR1_TXEIE);
 8016136:	4b0b      	ldr	r3, [pc, #44]	; (8016164 <vMBPortSerialEnable+0x6c>)
 8016138:	681b      	ldr	r3, [r3, #0]
 801613a:	681a      	ldr	r2, [r3, #0]
 801613c:	4b09      	ldr	r3, [pc, #36]	; (8016164 <vMBPortSerialEnable+0x6c>)
 801613e:	681b      	ldr	r3, [r3, #0]
 8016140:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8016144:	601a      	str	r2, [r3, #0]
  } else {
	  CLEAR_BIT((&huartslave)->Instance->CR1, USART_CR1_TXEIE);
//	  HAL_GPIO_WritePin(DE_GPIO_Port, DE_Pin, GPIO_PIN_RESET);
  }  
  
}
 8016146:	e007      	b.n	8016158 <vMBPortSerialEnable+0x60>
	  CLEAR_BIT((&huartslave)->Instance->CR1, USART_CR1_TXEIE);
 8016148:	4b06      	ldr	r3, [pc, #24]	; (8016164 <vMBPortSerialEnable+0x6c>)
 801614a:	681b      	ldr	r3, [r3, #0]
 801614c:	681a      	ldr	r2, [r3, #0]
 801614e:	4b05      	ldr	r3, [pc, #20]	; (8016164 <vMBPortSerialEnable+0x6c>)
 8016150:	681b      	ldr	r3, [r3, #0]
 8016152:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016156:	601a      	str	r2, [r3, #0]
}
 8016158:	bf00      	nop
 801615a:	370c      	adds	r7, #12
 801615c:	46bd      	mov	sp, r7
 801615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016162:	4770      	bx	lr
 8016164:	20004fcc 	.word	0x20004fcc

08016168 <xMBPortSerialInit>:
 
BOOL
xMBPortSerialInit( UCHAR ucPORT, ULONG ulBaudRate, UCHAR ucDataBits, eMBParity eParity )
{
 8016168:	b480      	push	{r7}
 801616a:	b083      	sub	sp, #12
 801616c:	af00      	add	r7, sp, #0
 801616e:	6039      	str	r1, [r7, #0]
 8016170:	4611      	mov	r1, r2
 8016172:	461a      	mov	r2, r3
 8016174:	4603      	mov	r3, r0
 8016176:	71fb      	strb	r3, [r7, #7]
 8016178:	460b      	mov	r3, r1
 801617a:	71bb      	strb	r3, [r7, #6]
 801617c:	4613      	mov	r3, r2
 801617e:	717b      	strb	r3, [r7, #5]

	/*
	 * Please note: when user uses EVEN or ODD parity the Data bit value chose
	 * in CubeMx initialize must be 9 bit
	 */
  return TRUE;
 8016180:	2301      	movs	r3, #1
}
 8016182:	4618      	mov	r0, r3
 8016184:	370c      	adds	r7, #12
 8016186:	46bd      	mov	sp, r7
 8016188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801618c:	4770      	bx	lr
	...

08016190 <xMBPortSerialPutByte>:
 
BOOL
xMBPortSerialPutByte( CHAR ucByte )
{
 8016190:	b480      	push	{r7}
 8016192:	b083      	sub	sp, #12
 8016194:	af00      	add	r7, sp, #0
 8016196:	4603      	mov	r3, r0
 8016198:	71fb      	strb	r3, [r7, #7]
  /* Put a byte in the UARTs transmit buffer. This function is called
  * by the protocol stack if pxMBFrameCBTransmitterEmpty( ) has been
  * called. */
	huartslave.Instance->TDR = (uint8_t)(ucByte & 0xFFU);
 801619a:	4b05      	ldr	r3, [pc, #20]	; (80161b0 <xMBPortSerialPutByte+0x20>)
 801619c:	681b      	ldr	r3, [r3, #0]
 801619e:	79fa      	ldrb	r2, [r7, #7]
 80161a0:	629a      	str	r2, [r3, #40]	; 0x28
	return TRUE;
 80161a2:	2301      	movs	r3, #1
}
 80161a4:	4618      	mov	r0, r3
 80161a6:	370c      	adds	r7, #12
 80161a8:	46bd      	mov	sp, r7
 80161aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161ae:	4770      	bx	lr
 80161b0:	20004fcc 	.word	0x20004fcc

080161b4 <xMBPortSerialGetByte>:
 
BOOL
xMBPortSerialGetByte( CHAR * pucByte )
{
 80161b4:	b480      	push	{r7}
 80161b6:	b083      	sub	sp, #12
 80161b8:	af00      	add	r7, sp, #0
 80161ba:	6078      	str	r0, [r7, #4]
  /* Return the byte in the UARTs receive buffer. This function is called
  * by the protocol stack after pxMBFrameCBByteReceived( ) has been called.
  */
  *pucByte = (uint8_t)(huartslave.Instance->RDR & (uint8_t)0x00FF);
 80161bc:	4b06      	ldr	r3, [pc, #24]	; (80161d8 <xMBPortSerialGetByte+0x24>)
 80161be:	681b      	ldr	r3, [r3, #0]
 80161c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80161c2:	b2da      	uxtb	r2, r3
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	701a      	strb	r2, [r3, #0]
  return TRUE;
 80161c8:	2301      	movs	r3, #1
}
 80161ca:	4618      	mov	r0, r3
 80161cc:	370c      	adds	r7, #12
 80161ce:	46bd      	mov	sp, r7
 80161d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161d4:	4770      	bx	lr
 80161d6:	bf00      	nop
 80161d8:	20004fcc 	.word	0x20004fcc

080161dc <USART3_IRQHandler>:
void USART3_IRQHandler(void)

#else
void USART2_IRQHandler(void)
#endif
{
 80161dc:	b580      	push	{r7, lr}
 80161de:	b082      	sub	sp, #8
 80161e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	uint32_t isrflags   = READ_REG(huartslave.Instance->ISR);
 80161e2:	4b1b      	ldr	r3, [pc, #108]	; (8016250 <USART3_IRQHandler+0x74>)
 80161e4:	681b      	ldr	r3, [r3, #0]
 80161e6:	69db      	ldr	r3, [r3, #28]
 80161e8:	607b      	str	r3, [r7, #4]
	uint32_t cr1its     = READ_REG(huartslave.Instance->CR1);
 80161ea:	4b19      	ldr	r3, [pc, #100]	; (8016250 <USART3_IRQHandler+0x74>)
 80161ec:	681b      	ldr	r3, [r3, #0]
 80161ee:	681b      	ldr	r3, [r3, #0]
 80161f0:	603b      	str	r3, [r7, #0]

    if ( ((isrflags & USART_ISR_RXNE) != 0U)
 80161f2:	687b      	ldr	r3, [r7, #4]
 80161f4:	f003 0320 	and.w	r3, r3, #32
 80161f8:	2b00      	cmp	r3, #0
 80161fa:	d010      	beq.n	801621e <USART3_IRQHandler+0x42>
         && ((cr1its & USART_CR1_RXNEIE) != 0U) )
 80161fc:	683b      	ldr	r3, [r7, #0]
 80161fe:	f003 0320 	and.w	r3, r3, #32
 8016202:	2b00      	cmp	r3, #0
 8016204:	d00b      	beq.n	801621e <USART3_IRQHandler+0x42>
    {

		  pxMBFrameCBByteReceived();	  //xMBRTUReceiveFSM() in mbrtu.c
 8016206:	4b13      	ldr	r3, [pc, #76]	; (8016254 <USART3_IRQHandler+0x78>)
 8016208:	681b      	ldr	r3, [r3, #0]
 801620a:	4798      	blx	r3

		  SET_BIT((&huartslave)->Instance->RQR,  USART_RQR_RXFRQ );
 801620c:	4b10      	ldr	r3, [pc, #64]	; (8016250 <USART3_IRQHandler+0x74>)
 801620e:	681b      	ldr	r3, [r3, #0]
 8016210:	699a      	ldr	r2, [r3, #24]
 8016212:	4b0f      	ldr	r3, [pc, #60]	; (8016250 <USART3_IRQHandler+0x74>)
 8016214:	681b      	ldr	r3, [r3, #0]
 8016216:	f042 0208 	orr.w	r2, r2, #8
 801621a:	619a      	str	r2, [r3, #24]

		return;
 801621c:	e014      	b.n	8016248 <USART3_IRQHandler+0x6c>
    }

  if((__HAL_UART_GET_FLAG(&huartslave, UART_FLAG_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(&huartslave, UART_IT_TXE) != RESET)) {
 801621e:	4b0c      	ldr	r3, [pc, #48]	; (8016250 <USART3_IRQHandler+0x74>)
 8016220:	681b      	ldr	r3, [r3, #0]
 8016222:	69db      	ldr	r3, [r3, #28]
 8016224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016228:	2b80      	cmp	r3, #128	; 0x80
 801622a:	d10a      	bne.n	8016242 <USART3_IRQHandler+0x66>
 801622c:	4b08      	ldr	r3, [pc, #32]	; (8016250 <USART3_IRQHandler+0x74>)
 801622e:	681b      	ldr	r3, [r3, #0]
 8016230:	681b      	ldr	r3, [r3, #0]
 8016232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016236:	2b00      	cmp	r3, #0
 8016238:	d003      	beq.n	8016242 <USART3_IRQHandler+0x66>

	  pxMBFrameCBTransmitterEmpty(); 	  //xMBRTUTransmitFSM() in mbrtu.c
 801623a:	4b07      	ldr	r3, [pc, #28]	; (8016258 <USART3_IRQHandler+0x7c>)
 801623c:	681b      	ldr	r3, [r3, #0]
 801623e:	4798      	blx	r3

    return ;
 8016240:	e002      	b.n	8016248 <USART3_IRQHandler+0x6c>
  }

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huartslave);
 8016242:	4803      	ldr	r0, [pc, #12]	; (8016250 <USART3_IRQHandler+0x74>)
 8016244:	f7ee f950 	bl	80044e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8016248:	3708      	adds	r7, #8
 801624a:	46bd      	mov	sp, r7
 801624c:	bd80      	pop	{r7, pc}
 801624e:	bf00      	nop
 8016250:	20004fcc 	.word	0x20004fcc
 8016254:	2000dc70 	.word	0x2000dc70
 8016258:	2000dc68 	.word	0x2000dc68

0801625c <xMBMasterPortSerialInit>:


/* ----------------------- Start implementation -----------------------------*/
BOOL xMBMasterPortSerialInit( UCHAR ucPORT, ULONG ulBaudRate, UCHAR ucDataBits,
							  eMBParity eParity)
{
 801625c:	b480      	push	{r7}
 801625e:	b083      	sub	sp, #12
 8016260:	af00      	add	r7, sp, #0
 8016262:	6039      	str	r1, [r7, #0]
 8016264:	4611      	mov	r1, r2
 8016266:	461a      	mov	r2, r3
 8016268:	4603      	mov	r3, r0
 801626a:	71fb      	strb	r3, [r7, #7]
 801626c:	460b      	mov	r3, r1
 801626e:	71bb      	strb	r3, [r7, #6]
 8016270:	4613      	mov	r3, r2
 8016272:	717b      	strb	r3, [r7, #5]
		/*
		 * Please note: when user uses EVEN or ODD parity, the Data bit value chose
		 * in CubeMx initialize must be 9 bit
		 */

	return TRUE;
 8016274:	2301      	movs	r3, #1
}
 8016276:	4618      	mov	r0, r3
 8016278:	370c      	adds	r7, #12
 801627a:	46bd      	mov	sp, r7
 801627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016280:	4770      	bx	lr
	...

08016284 <vMBMasterPortSerialEnable>:

void vMBMasterPortSerialEnable(BOOL xRxEnable, BOOL xTxEnable)
{
 8016284:	b580      	push	{r7, lr}
 8016286:	b082      	sub	sp, #8
 8016288:	af00      	add	r7, sp, #0
 801628a:	4603      	mov	r3, r0
 801628c:	460a      	mov	r2, r1
 801628e:	71fb      	strb	r3, [r7, #7]
 8016290:	4613      	mov	r3, r2
 8016292:	71bb      	strb	r3, [r7, #6]

	  /* If xRXEnable enable serial receive interrupts. If xTxENable enable
	  * transmitter empty interrupts.
	  */
	  if (xRxEnable) {
 8016294:	79fb      	ldrb	r3, [r7, #7]
 8016296:	2b00      	cmp	r3, #0
 8016298:	d00e      	beq.n	80162b8 <vMBMasterPortSerialEnable+0x34>
	    __HAL_UART_ENABLE_IT(&huartmaster, UART_IT_RXNE);
 801629a:	4b20      	ldr	r3, [pc, #128]	; (801631c <vMBMasterPortSerialEnable+0x98>)
 801629c:	681b      	ldr	r3, [r3, #0]
 801629e:	681a      	ldr	r2, [r3, #0]
 80162a0:	4b1e      	ldr	r3, [pc, #120]	; (801631c <vMBMasterPortSerialEnable+0x98>)
 80162a2:	681b      	ldr	r3, [r3, #0]
 80162a4:	f042 0220 	orr.w	r2, r2, #32
 80162a8:	601a      	str	r2, [r3, #0]
	    HAL_GPIO_WritePin(RE_GPIO_Port, RE_Pin, GPIO_PIN_RESET);// PC10 <=> RE..Receiver Output Enable (Low to enable)
 80162aa:	2200      	movs	r2, #0
 80162ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80162b0:	481b      	ldr	r0, [pc, #108]	; (8016320 <vMBMasterPortSerialEnable+0x9c>)
 80162b2:	f7ec fb9b 	bl	80029ec <HAL_GPIO_WritePin>
 80162b6:	e00d      	b.n	80162d4 <vMBMasterPortSerialEnable+0x50>
	  } else {
	    __HAL_UART_DISABLE_IT(&huartmaster, UART_IT_RXNE);
 80162b8:	4b18      	ldr	r3, [pc, #96]	; (801631c <vMBMasterPortSerialEnable+0x98>)
 80162ba:	681b      	ldr	r3, [r3, #0]
 80162bc:	681a      	ldr	r2, [r3, #0]
 80162be:	4b17      	ldr	r3, [pc, #92]	; (801631c <vMBMasterPortSerialEnable+0x98>)
 80162c0:	681b      	ldr	r3, [r3, #0]
 80162c2:	f022 0220 	bic.w	r2, r2, #32
 80162c6:	601a      	str	r2, [r3, #0]
	    HAL_GPIO_WritePin(RE_GPIO_Port, RE_Pin, GPIO_PIN_SET);
 80162c8:	2201      	movs	r2, #1
 80162ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80162ce:	4814      	ldr	r0, [pc, #80]	; (8016320 <vMBMasterPortSerialEnable+0x9c>)
 80162d0:	f7ec fb8c 	bl	80029ec <HAL_GPIO_WritePin>
	  }

	  if (xTxEnable) {
 80162d4:	79bb      	ldrb	r3, [r7, #6]
 80162d6:	2b00      	cmp	r3, #0
 80162d8:	d00e      	beq.n	80162f8 <vMBMasterPortSerialEnable+0x74>
	    __HAL_UART_ENABLE_IT(&huartmaster, UART_IT_TXE);
 80162da:	4b10      	ldr	r3, [pc, #64]	; (801631c <vMBMasterPortSerialEnable+0x98>)
 80162dc:	681b      	ldr	r3, [r3, #0]
 80162de:	681a      	ldr	r2, [r3, #0]
 80162e0:	4b0e      	ldr	r3, [pc, #56]	; (801631c <vMBMasterPortSerialEnable+0x98>)
 80162e2:	681b      	ldr	r3, [r3, #0]
 80162e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80162e8:	601a      	str	r2, [r3, #0]
	    HAL_GPIO_WritePin(DE_GPIO_Port, DE_Pin, GPIO_PIN_SET);// PC11 <=> DE……….Driver Output Enable (high to enable)
 80162ea:	2201      	movs	r2, #1
 80162ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80162f0:	480b      	ldr	r0, [pc, #44]	; (8016320 <vMBMasterPortSerialEnable+0x9c>)
 80162f2:	f7ec fb7b 	bl	80029ec <HAL_GPIO_WritePin>
	  } else {
	    __HAL_UART_DISABLE_IT(&huartmaster, UART_IT_TXE);
	    HAL_GPIO_WritePin(DE_GPIO_Port, DE_Pin, GPIO_PIN_RESET);
	  }

}
 80162f6:	e00d      	b.n	8016314 <vMBMasterPortSerialEnable+0x90>
	    __HAL_UART_DISABLE_IT(&huartmaster, UART_IT_TXE);
 80162f8:	4b08      	ldr	r3, [pc, #32]	; (801631c <vMBMasterPortSerialEnable+0x98>)
 80162fa:	681b      	ldr	r3, [r3, #0]
 80162fc:	681a      	ldr	r2, [r3, #0]
 80162fe:	4b07      	ldr	r3, [pc, #28]	; (801631c <vMBMasterPortSerialEnable+0x98>)
 8016300:	681b      	ldr	r3, [r3, #0]
 8016302:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016306:	601a      	str	r2, [r3, #0]
	    HAL_GPIO_WritePin(DE_GPIO_Port, DE_Pin, GPIO_PIN_RESET);
 8016308:	2200      	movs	r2, #0
 801630a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801630e:	4804      	ldr	r0, [pc, #16]	; (8016320 <vMBMasterPortSerialEnable+0x9c>)
 8016310:	f7ec fb6c 	bl	80029ec <HAL_GPIO_WritePin>
}
 8016314:	bf00      	nop
 8016316:	3708      	adds	r7, #8
 8016318:	46bd      	mov	sp, r7
 801631a:	bd80      	pop	{r7, pc}
 801631c:	2000509c 	.word	0x2000509c
 8016320:	40020400 	.word	0x40020400

08016324 <xMBMasterPortSerialPutByte>:
	//..
	return;
}

BOOL xMBMasterPortSerialPutByte(CHAR ucByte)
{
 8016324:	b480      	push	{r7}
 8016326:	b083      	sub	sp, #12
 8016328:	af00      	add	r7, sp, #0
 801632a:	4603      	mov	r3, r0
 801632c:	71fb      	strb	r3, [r7, #7]
	  /* Put a byte in the UARTs transmit buffer. This function is called
	  * by the protocol stack if pxMBFrameCBTransmitterEmpty( ) has been
	  * called. */
	huartmaster.Instance->TDR = (uint8_t)(ucByte & 0xFFU);
 801632e:	4b05      	ldr	r3, [pc, #20]	; (8016344 <xMBMasterPortSerialPutByte+0x20>)
 8016330:	681b      	ldr	r3, [r3, #0]
 8016332:	79fa      	ldrb	r2, [r7, #7]
 8016334:	629a      	str	r2, [r3, #40]	; 0x28
	return TRUE;
 8016336:	2301      	movs	r3, #1
}
 8016338:	4618      	mov	r0, r3
 801633a:	370c      	adds	r7, #12
 801633c:	46bd      	mov	sp, r7
 801633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016342:	4770      	bx	lr
 8016344:	2000509c 	.word	0x2000509c

08016348 <xMBMasterPortSerialGetByte>:

BOOL xMBMasterPortSerialGetByte(CHAR * pucByte)
{
 8016348:	b480      	push	{r7}
 801634a:	b083      	sub	sp, #12
 801634c:	af00      	add	r7, sp, #0
 801634e:	6078      	str	r0, [r7, #4]

	  /* Return the byte in the UARTs receive buffer. This function is called
	  *  by the protocol stack after pxMBFrameCBByteReceived( ) has been called.
	  */

	*pucByte = (uint8_t)(huartmaster.Instance->RDR & (uint8_t)0x00FF);
 8016350:	4b06      	ldr	r3, [pc, #24]	; (801636c <xMBMasterPortSerialGetByte+0x24>)
 8016352:	681b      	ldr	r3, [r3, #0]
 8016354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016356:	b2da      	uxtb	r2, r3
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	701a      	strb	r2, [r3, #0]

	  return TRUE;
 801635c:	2301      	movs	r3, #1
}
 801635e:	4618      	mov	r0, r3
 8016360:	370c      	adds	r7, #12
 8016362:	46bd      	mov	sp, r7
 8016364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016368:	4770      	bx	lr
 801636a:	bf00      	nop
 801636c:	2000509c 	.word	0x2000509c

08016370 <USART2_IRQHandler>:
#if MASTER_USE_UART2
void USART2_IRQHandler(void)
#else
void USART3_IRQHandler(void)
#endif
{
 8016370:	b580      	push	{r7, lr}
 8016372:	b082      	sub	sp, #8
 8016374:	af00      	add	r7, sp, #0

	uint32_t isrflags   = READ_REG(huartmaster.Instance->ISR);
 8016376:	4b1b      	ldr	r3, [pc, #108]	; (80163e4 <USART2_IRQHandler+0x74>)
 8016378:	681b      	ldr	r3, [r3, #0]
 801637a:	69db      	ldr	r3, [r3, #28]
 801637c:	607b      	str	r3, [r7, #4]
	uint32_t cr1its     = READ_REG(huartmaster.Instance->CR1);
 801637e:	4b19      	ldr	r3, [pc, #100]	; (80163e4 <USART2_IRQHandler+0x74>)
 8016380:	681b      	ldr	r3, [r3, #0]
 8016382:	681b      	ldr	r3, [r3, #0]
 8016384:	603b      	str	r3, [r7, #0]

    if ( ((isrflags & USART_ISR_RXNE) != 0U)
 8016386:	687b      	ldr	r3, [r7, #4]
 8016388:	f003 0320 	and.w	r3, r3, #32
 801638c:	2b00      	cmp	r3, #0
 801638e:	d010      	beq.n	80163b2 <USART2_IRQHandler+0x42>
         && ((cr1its & USART_CR1_RXNEIE) != 0U) )
 8016390:	683b      	ldr	r3, [r7, #0]
 8016392:	f003 0320 	and.w	r3, r3, #32
 8016396:	2b00      	cmp	r3, #0
 8016398:	d00b      	beq.n	80163b2 <USART2_IRQHandler+0x42>
    {

		//xMBMasterRTUReceiveFSM();
		pxMBMasterFrameCBByteReceived();
 801639a:	4b13      	ldr	r3, [pc, #76]	; (80163e8 <USART2_IRQHandler+0x78>)
 801639c:	681b      	ldr	r3, [r3, #0]
 801639e:	4798      	blx	r3

		SET_BIT((&huartmaster)->Instance->RQR,  USART_RQR_RXFRQ );
 80163a0:	4b10      	ldr	r3, [pc, #64]	; (80163e4 <USART2_IRQHandler+0x74>)
 80163a2:	681b      	ldr	r3, [r3, #0]
 80163a4:	699a      	ldr	r2, [r3, #24]
 80163a6:	4b0f      	ldr	r3, [pc, #60]	; (80163e4 <USART2_IRQHandler+0x74>)
 80163a8:	681b      	ldr	r3, [r3, #0]
 80163aa:	f042 0208 	orr.w	r2, r2, #8
 80163ae:	619a      	str	r2, [r3, #24]

		return;
 80163b0:	e014      	b.n	80163dc <USART2_IRQHandler+0x6c>

	}

	if((__HAL_UART_GET_FLAG(&huartmaster, UART_FLAG_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(&huartmaster, UART_IT_TXE) != RESET)) {
 80163b2:	4b0c      	ldr	r3, [pc, #48]	; (80163e4 <USART2_IRQHandler+0x74>)
 80163b4:	681b      	ldr	r3, [r3, #0]
 80163b6:	69db      	ldr	r3, [r3, #28]
 80163b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80163bc:	2b80      	cmp	r3, #128	; 0x80
 80163be:	d10a      	bne.n	80163d6 <USART2_IRQHandler+0x66>
 80163c0:	4b08      	ldr	r3, [pc, #32]	; (80163e4 <USART2_IRQHandler+0x74>)
 80163c2:	681b      	ldr	r3, [r3, #0]
 80163c4:	681b      	ldr	r3, [r3, #0]
 80163c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80163ca:	2b00      	cmp	r3, #0
 80163cc:	d003      	beq.n	80163d6 <USART2_IRQHandler+0x66>

		//xMBMasterRTUTransmitFSM();
		pxMBMasterFrameCBTransmitterEmpty();
 80163ce:	4b07      	ldr	r3, [pc, #28]	; (80163ec <USART2_IRQHandler+0x7c>)
 80163d0:	681b      	ldr	r3, [r3, #0]
 80163d2:	4798      	blx	r3
		return ;
 80163d4:	e002      	b.n	80163dc <USART2_IRQHandler+0x6c>

	}

	HAL_UART_IRQHandler(&huartmaster);
 80163d6:	4803      	ldr	r0, [pc, #12]	; (80163e4 <USART2_IRQHandler+0x74>)
 80163d8:	f7ee f886 	bl	80044e8 <HAL_UART_IRQHandler>
}
 80163dc:	3708      	adds	r7, #8
 80163de:	46bd      	mov	sp, r7
 80163e0:	bd80      	pop	{r7, pc}
 80163e2:	bf00      	nop
 80163e4:	2000509c 	.word	0x2000509c
 80163e8:	2000dc78 	.word	0x2000dc78
 80163ec:	2000dc74 	.word	0x2000dc74

080163f0 <xMBPortTimersInit>:
static uint16_t downcounter = 0;		//20000 = 1s for test timer
 
/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortTimersInit( USHORT usTim1Timerout50us )
{
 80163f0:	b580      	push	{r7, lr}
 80163f2:	b086      	sub	sp, #24
 80163f4:	af00      	add	r7, sp, #0
 80163f6:	4603      	mov	r3, r0
 80163f8:	80fb      	strh	r3, [r7, #6]
  TIM_MasterConfigTypeDef sMasterConfig;
  
  htim6.Instance = TIM6;
 80163fa:	4b19      	ldr	r3, [pc, #100]	; (8016460 <xMBPortTimersInit+0x70>)
 80163fc:	4a19      	ldr	r2, [pc, #100]	; (8016464 <xMBPortTimersInit+0x74>)
 80163fe:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = (2 * HAL_RCC_GetPCLK1Freq() / 1000000) - 1; //TIMx_CLK = 216Mhz, PCLK1 = 108MHz
 8016400:	f7ed f810 	bl	8003424 <HAL_RCC_GetPCLK1Freq>
 8016404:	4603      	mov	r3, r0
 8016406:	005b      	lsls	r3, r3, #1
 8016408:	4a17      	ldr	r2, [pc, #92]	; (8016468 <xMBPortTimersInit+0x78>)
 801640a:	fba2 2303 	umull	r2, r3, r2, r3
 801640e:	0c9b      	lsrs	r3, r3, #18
 8016410:	3b01      	subs	r3, #1
 8016412:	4a13      	ldr	r2, [pc, #76]	; (8016460 <xMBPortTimersInit+0x70>)
 8016414:	6053      	str	r3, [r2, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8016416:	4b12      	ldr	r3, [pc, #72]	; (8016460 <xMBPortTimersInit+0x70>)
 8016418:	2200      	movs	r2, #0
 801641a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 50 - 1;
 801641c:	4b10      	ldr	r3, [pc, #64]	; (8016460 <xMBPortTimersInit+0x70>)
 801641e:	2231      	movs	r2, #49	; 0x31
 8016420:	60da      	str	r2, [r3, #12]
  
  timeout = usTim1Timerout50us;
 8016422:	4a12      	ldr	r2, [pc, #72]	; (801646c <xMBPortTimersInit+0x7c>)
 8016424:	88fb      	ldrh	r3, [r7, #6]
 8016426:	8013      	strh	r3, [r2, #0]
  
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8016428:	480d      	ldr	r0, [pc, #52]	; (8016460 <xMBPortTimersInit+0x70>)
 801642a:	f7ed fc7d 	bl	8003d28 <HAL_TIM_Base_Init>
 801642e:	4603      	mov	r3, r0
 8016430:	2b00      	cmp	r3, #0
 8016432:	d001      	beq.n	8016438 <xMBPortTimersInit+0x48>
  {
    return FALSE;
 8016434:	2300      	movs	r3, #0
 8016436:	e00f      	b.n	8016458 <xMBPortTimersInit+0x68>
  }
  
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8016438:	2320      	movs	r3, #32
 801643a:	60fb      	str	r3, [r7, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801643c:	2300      	movs	r3, #0
 801643e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8016440:	f107 030c 	add.w	r3, r7, #12
 8016444:	4619      	mov	r1, r3
 8016446:	4806      	ldr	r0, [pc, #24]	; (8016460 <xMBPortTimersInit+0x70>)
 8016448:	f7ed ff54 	bl	80042f4 <HAL_TIMEx_MasterConfigSynchronization>
 801644c:	4603      	mov	r3, r0
 801644e:	2b00      	cmp	r3, #0
 8016450:	d001      	beq.n	8016456 <xMBPortTimersInit+0x66>
  {
    return FALSE;
 8016452:	2300      	movs	r3, #0
 8016454:	e000      	b.n	8016458 <xMBPortTimersInit+0x68>
  }
  
  return TRUE;
 8016456:	2301      	movs	r3, #1
}
 8016458:	4618      	mov	r0, r3
 801645a:	3718      	adds	r7, #24
 801645c:	46bd      	mov	sp, r7
 801645e:	bd80      	pop	{r7, pc}
 8016460:	20005050 	.word	0x20005050
 8016464:	40001000 	.word	0x40001000
 8016468:	431bde83 	.word	0x431bde83
 801646c:	20004d88 	.word	0x20004d88

08016470 <vMBPortTimersEnable>:
 
void
vMBPortTimersEnable(  )
{
 8016470:	b580      	push	{r7, lr}
 8016472:	af00      	add	r7, sp, #0
  /* Enable the timer with the timeout passed to xMBPortTimersInit( ) */
  downcounter = timeout;
 8016474:	4b04      	ldr	r3, [pc, #16]	; (8016488 <vMBPortTimersEnable+0x18>)
 8016476:	881a      	ldrh	r2, [r3, #0]
 8016478:	4b04      	ldr	r3, [pc, #16]	; (801648c <vMBPortTimersEnable+0x1c>)
 801647a:	801a      	strh	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim6);
 801647c:	4804      	ldr	r0, [pc, #16]	; (8016490 <vMBPortTimersEnable+0x20>)
 801647e:	f7ed fcab 	bl	8003dd8 <HAL_TIM_Base_Start_IT>
}
 8016482:	bf00      	nop
 8016484:	bd80      	pop	{r7, pc}
 8016486:	bf00      	nop
 8016488:	20004d88 	.word	0x20004d88
 801648c:	20004d8a 	.word	0x20004d8a
 8016490:	20005050 	.word	0x20005050

08016494 <vMBPortTimersDisable>:
 
void
vMBPortTimersDisable(  )
{
 8016494:	b580      	push	{r7, lr}
 8016496:	af00      	add	r7, sp, #0
  /* Disable any pending timers. */
  HAL_TIM_Base_Stop_IT(&htim6);
 8016498:	4802      	ldr	r0, [pc, #8]	; (80164a4 <vMBPortTimersDisable+0x10>)
 801649a:	f7ed fd15 	bl	8003ec8 <HAL_TIM_Base_Stop_IT>
}
 801649e:	bf00      	nop
 80164a0:	bd80      	pop	{r7, pc}
 80164a2:	bf00      	nop
 80164a4:	20005050 	.word	0x20005050

080164a8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 80164a8:	b580      	push	{r7, lr}
 80164aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	if(__HAL_TIM_GET_FLAG(&htim6, TIM_FLAG_UPDATE) != RESET
 80164ac:	4b12      	ldr	r3, [pc, #72]	; (80164f8 <TIM6_DAC_IRQHandler+0x50>)
 80164ae:	681b      	ldr	r3, [r3, #0]
 80164b0:	691b      	ldr	r3, [r3, #16]
 80164b2:	f003 0301 	and.w	r3, r3, #1
 80164b6:	2b01      	cmp	r3, #1
 80164b8:	d118      	bne.n	80164ec <TIM6_DAC_IRQHandler+0x44>
	   && __HAL_TIM_GET_IT_SOURCE(&htim6, TIM_IT_UPDATE) !=RESET)
 80164ba:	4b0f      	ldr	r3, [pc, #60]	; (80164f8 <TIM6_DAC_IRQHandler+0x50>)
 80164bc:	681b      	ldr	r3, [r3, #0]
 80164be:	68db      	ldr	r3, [r3, #12]
 80164c0:	f003 0301 	and.w	r3, r3, #1
 80164c4:	2b01      	cmp	r3, #1
 80164c6:	d111      	bne.n	80164ec <TIM6_DAC_IRQHandler+0x44>
	{
		__HAL_TIM_CLEAR_IT(&htim6, TIM_IT_UPDATE);
 80164c8:	4b0b      	ldr	r3, [pc, #44]	; (80164f8 <TIM6_DAC_IRQHandler+0x50>)
 80164ca:	681b      	ldr	r3, [r3, #0]
 80164cc:	f06f 0201 	mvn.w	r2, #1
 80164d0:	611a      	str	r2, [r3, #16]
		if (!--downcounter)
 80164d2:	4b0a      	ldr	r3, [pc, #40]	; (80164fc <TIM6_DAC_IRQHandler+0x54>)
 80164d4:	881b      	ldrh	r3, [r3, #0]
 80164d6:	3b01      	subs	r3, #1
 80164d8:	b29a      	uxth	r2, r3
 80164da:	4b08      	ldr	r3, [pc, #32]	; (80164fc <TIM6_DAC_IRQHandler+0x54>)
 80164dc:	801a      	strh	r2, [r3, #0]
 80164de:	4b07      	ldr	r3, [pc, #28]	; (80164fc <TIM6_DAC_IRQHandler+0x54>)
 80164e0:	881b      	ldrh	r3, [r3, #0]
 80164e2:	2b00      	cmp	r3, #0
 80164e4:	d102      	bne.n	80164ec <TIM6_DAC_IRQHandler+0x44>
		{
			pxMBPortCBTimerExpired();	// it is "xMBRTUTimerT35Expired()"
 80164e6:	4b06      	ldr	r3, [pc, #24]	; (8016500 <TIM6_DAC_IRQHandler+0x58>)
 80164e8:	681b      	ldr	r3, [r3, #0]
 80164ea:	4798      	blx	r3
			//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
			//todo return;
		}
	}
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80164ec:	4802      	ldr	r0, [pc, #8]	; (80164f8 <TIM6_DAC_IRQHandler+0x50>)
 80164ee:	f7ed fd1a 	bl	8003f26 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80164f2:	bf00      	nop
 80164f4:	bd80      	pop	{r7, pc}
 80164f6:	bf00      	nop
 80164f8:	20005050 	.word	0x20005050
 80164fc:	20004d8a 	.word	0x20004d8a
 8016500:	2000dc6c 	.word	0x2000dc6c

08016504 <xMBMasterPortTimersInit>:
 void TIM7_IRQHandler(void);

/* ----------------------- Start implementation -----------------------------*/

BOOL xMBMasterPortTimersInit(USHORT usTim7Timerout50us)	//each entering ISRTIM7 is 50us
{
 8016504:	b580      	push	{r7, lr}
 8016506:	b086      	sub	sp, #24
 8016508:	af00      	add	r7, sp, #0
 801650a:	4603      	mov	r3, r0
 801650c:	80fb      	strh	r3, [r7, #6]
	  TIM_MasterConfigTypeDef sMasterConfig;

	  htim7.Instance = TIM7;
 801650e:	4b19      	ldr	r3, [pc, #100]	; (8016574 <xMBMasterPortTimersInit+0x70>)
 8016510:	4a19      	ldr	r2, [pc, #100]	; (8016578 <xMBMasterPortTimersInit+0x74>)
 8016512:	601a      	str	r2, [r3, #0]
	  htim7.Init.Prescaler = (2 * HAL_RCC_GetPCLK1Freq() / 1000000) - 1;
 8016514:	f7ec ff86 	bl	8003424 <HAL_RCC_GetPCLK1Freq>
 8016518:	4603      	mov	r3, r0
 801651a:	005b      	lsls	r3, r3, #1
 801651c:	4a17      	ldr	r2, [pc, #92]	; (801657c <xMBMasterPortTimersInit+0x78>)
 801651e:	fba2 2303 	umull	r2, r3, r2, r3
 8016522:	0c9b      	lsrs	r3, r3, #18
 8016524:	3b01      	subs	r3, #1
 8016526:	4a13      	ldr	r2, [pc, #76]	; (8016574 <xMBMasterPortTimersInit+0x70>)
 8016528:	6053      	str	r3, [r2, #4]
	  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 801652a:	4b12      	ldr	r3, [pc, #72]	; (8016574 <xMBMasterPortTimersInit+0x70>)
 801652c:	2200      	movs	r2, #0
 801652e:	609a      	str	r2, [r3, #8]
	  htim7.Init.Period = 50 - 1;
 8016530:	4b10      	ldr	r3, [pc, #64]	; (8016574 <xMBMasterPortTimersInit+0x70>)
 8016532:	2231      	movs	r2, #49	; 0x31
 8016534:	60da      	str	r2, [r3, #12]

	  t35timer = usTim7Timerout50us;	//1.75 ms for t35 timeout
 8016536:	4a12      	ldr	r2, [pc, #72]	; (8016580 <xMBMasterPortTimersInit+0x7c>)
 8016538:	88fb      	ldrh	r3, [r7, #6]
 801653a:	8013      	strh	r3, [r2, #0]
	  	  	  	  	  	  	  	  	  	//user should set t35timer = 36 <=> 1800 us

	  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 801653c:	480d      	ldr	r0, [pc, #52]	; (8016574 <xMBMasterPortTimersInit+0x70>)
 801653e:	f7ed fbf3 	bl	8003d28 <HAL_TIM_Base_Init>
 8016542:	4603      	mov	r3, r0
 8016544:	2b00      	cmp	r3, #0
 8016546:	d001      	beq.n	801654c <xMBMasterPortTimersInit+0x48>
	  {
	    return FALSE;
 8016548:	2300      	movs	r3, #0
 801654a:	e00f      	b.n	801656c <xMBMasterPortTimersInit+0x68>
	  }

	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 801654c:	2320      	movs	r3, #32
 801654e:	60fb      	str	r3, [r7, #12]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8016550:	2300      	movs	r3, #0
 8016552:	617b      	str	r3, [r7, #20]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8016554:	f107 030c 	add.w	r3, r7, #12
 8016558:	4619      	mov	r1, r3
 801655a:	4806      	ldr	r0, [pc, #24]	; (8016574 <xMBMasterPortTimersInit+0x70>)
 801655c:	f7ed feca 	bl	80042f4 <HAL_TIMEx_MasterConfigSynchronization>
 8016560:	4603      	mov	r3, r0
 8016562:	2b00      	cmp	r3, #0
 8016564:	d001      	beq.n	801656a <xMBMasterPortTimersInit+0x66>
	  {
	    return FALSE;
 8016566:	2300      	movs	r3, #0
 8016568:	e000      	b.n	801656c <xMBMasterPortTimersInit+0x68>
	  }

	  return TRUE;
 801656a:	2301      	movs	r3, #1
}
 801656c:	4618      	mov	r0, r3
 801656e:	3718      	adds	r7, #24
 8016570:	46bd      	mov	sp, r7
 8016572:	bd80      	pop	{r7, pc}
 8016574:	20005120 	.word	0x20005120
 8016578:	40001400 	.word	0x40001400
 801657c:	431bde83 	.word	0x431bde83
 8016580:	20004d8c 	.word	0x20004d8c

08016584 <vMBMasterPortTimersT35Enable>:

void vMBMasterPortTimersT35Enable(void)
{
 8016584:	b580      	push	{r7, lr}
 8016586:	af00      	add	r7, sp, #0
	  /* Enable the timer with the t35timer passed to xMBMasterPortTimersInit( ) */
	  mdowncounter = t35timer;
 8016588:	4b04      	ldr	r3, [pc, #16]	; (801659c <vMBMasterPortTimersT35Enable+0x18>)
 801658a:	881a      	ldrh	r2, [r3, #0]
 801658c:	4b04      	ldr	r3, [pc, #16]	; (80165a0 <vMBMasterPortTimersT35Enable+0x1c>)
 801658e:	801a      	strh	r2, [r3, #0]
	  HAL_TIM_Base_Start_IT(&htim7);
 8016590:	4804      	ldr	r0, [pc, #16]	; (80165a4 <vMBMasterPortTimersT35Enable+0x20>)
 8016592:	f7ed fc21 	bl	8003dd8 <HAL_TIM_Base_Start_IT>

}
 8016596:	bf00      	nop
 8016598:	bd80      	pop	{r7, pc}
 801659a:	bf00      	nop
 801659c:	20004d8c 	.word	0x20004d8c
 80165a0:	20004d8e 	.word	0x20004d8e
 80165a4:	20005120 	.word	0x20005120

080165a8 <vMBMasterPortTimersConvertDelayEnable>:

void vMBMasterPortTimersConvertDelayEnable(void)	//be called from UART_ISR
{
 80165a8:	b580      	push	{r7, lr}
 80165aa:	af00      	add	r7, sp, #0
	mdowncounter = CONVERTTIMER_PERIOD;		//200ms
 80165ac:	4b04      	ldr	r3, [pc, #16]	; (80165c0 <vMBMasterPortTimersConvertDelayEnable+0x18>)
 80165ae:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80165b2:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim7);
 80165b4:	4803      	ldr	r0, [pc, #12]	; (80165c4 <vMBMasterPortTimersConvertDelayEnable+0x1c>)
 80165b6:	f7ed fc0f 	bl	8003dd8 <HAL_TIM_Base_Start_IT>

}
 80165ba:	bf00      	nop
 80165bc:	bd80      	pop	{r7, pc}
 80165be:	bf00      	nop
 80165c0:	20004d8e 	.word	0x20004d8e
 80165c4:	20005120 	.word	0x20005120

080165c8 <vMBMasterPortTimersRespondTimeoutEnable>:

void vMBMasterPortTimersRespondTimeoutEnable(void)
{
 80165c8:	b580      	push	{r7, lr}
 80165ca:	af00      	add	r7, sp, #0
	mdowncounter = RESPONSETIMER_PERIOD;	//900ms
 80165cc:	4b04      	ldr	r3, [pc, #16]	; (80165e0 <vMBMasterPortTimersRespondTimeoutEnable+0x18>)
 80165ce:	f244 6250 	movw	r2, #18000	; 0x4650
 80165d2:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim7);
 80165d4:	4803      	ldr	r0, [pc, #12]	; (80165e4 <vMBMasterPortTimersRespondTimeoutEnable+0x1c>)
 80165d6:	f7ed fbff 	bl	8003dd8 <HAL_TIM_Base_Start_IT>
}
 80165da:	bf00      	nop
 80165dc:	bd80      	pop	{r7, pc}
 80165de:	bf00      	nop
 80165e0:	20004d8e 	.word	0x20004d8e
 80165e4:	20005120 	.word	0x20005120

080165e8 <vMBMasterPortTimersDisable>:

void vMBMasterPortTimersDisable(void)
{
 80165e8:	b580      	push	{r7, lr}
 80165ea:	af00      	add	r7, sp, #0
	  /* Disable any pending timers. */
	  HAL_TIM_Base_Stop_IT(&htim7);
 80165ec:	4802      	ldr	r0, [pc, #8]	; (80165f8 <vMBMasterPortTimersDisable+0x10>)
 80165ee:	f7ed fc6b 	bl	8003ec8 <HAL_TIM_Base_Stop_IT>
}
 80165f2:	bf00      	nop
 80165f4:	bd80      	pop	{r7, pc}
 80165f6:	bf00      	nop
 80165f8:	20005120 	.word	0x20005120

080165fc <TIM7_IRQHandler>:
/**
  * @brief This function handles TIM7 global interrupt.
  */

 void TIM7_IRQHandler(void)
{
 80165fc:	b580      	push	{r7, lr}
 80165fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	if(__HAL_TIM_GET_FLAG(&htim7, TIM_FLAG_UPDATE) != RESET
 8016600:	4b12      	ldr	r3, [pc, #72]	; (801664c <TIM7_IRQHandler+0x50>)
 8016602:	681b      	ldr	r3, [r3, #0]
 8016604:	691b      	ldr	r3, [r3, #16]
 8016606:	f003 0301 	and.w	r3, r3, #1
 801660a:	2b01      	cmp	r3, #1
 801660c:	d118      	bne.n	8016640 <TIM7_IRQHandler+0x44>
	   && __HAL_TIM_GET_IT_SOURCE(&htim7, TIM_IT_UPDATE) !=RESET)
 801660e:	4b0f      	ldr	r3, [pc, #60]	; (801664c <TIM7_IRQHandler+0x50>)
 8016610:	681b      	ldr	r3, [r3, #0]
 8016612:	68db      	ldr	r3, [r3, #12]
 8016614:	f003 0301 	and.w	r3, r3, #1
 8016618:	2b01      	cmp	r3, #1
 801661a:	d111      	bne.n	8016640 <TIM7_IRQHandler+0x44>
	{
		__HAL_TIM_CLEAR_IT(&htim7, TIM_IT_UPDATE);
 801661c:	4b0b      	ldr	r3, [pc, #44]	; (801664c <TIM7_IRQHandler+0x50>)
 801661e:	681b      	ldr	r3, [r3, #0]
 8016620:	f06f 0201 	mvn.w	r2, #1
 8016624:	611a      	str	r2, [r3, #16]
		if (!--mdowncounter)
 8016626:	4b0a      	ldr	r3, [pc, #40]	; (8016650 <TIM7_IRQHandler+0x54>)
 8016628:	881b      	ldrh	r3, [r3, #0]
 801662a:	3b01      	subs	r3, #1
 801662c:	b29a      	uxth	r2, r3
 801662e:	4b08      	ldr	r3, [pc, #32]	; (8016650 <TIM7_IRQHandler+0x54>)
 8016630:	801a      	strh	r2, [r3, #0]
 8016632:	4b07      	ldr	r3, [pc, #28]	; (8016650 <TIM7_IRQHandler+0x54>)
 8016634:	881b      	ldrh	r3, [r3, #0]
 8016636:	2b00      	cmp	r3, #0
 8016638:	d102      	bne.n	8016640 <TIM7_IRQHandler+0x44>
		{
			pxMBMasterPortCBTimerExpired();	// it is "xMBMasterRTUTimerExpired()"
 801663a:	4b06      	ldr	r3, [pc, #24]	; (8016654 <TIM7_IRQHandler+0x58>)
 801663c:	681b      	ldr	r3, [r3, #0]
 801663e:	4798      	blx	r3
		}
	}
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8016640:	4802      	ldr	r0, [pc, #8]	; (801664c <TIM7_IRQHandler+0x50>)
 8016642:	f7ed fc70 	bl	8003f26 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8016646:	bf00      	nop
 8016648:	bd80      	pop	{r7, pc}
 801664a:	bf00      	nop
 801664c:	20005120 	.word	0x20005120
 8016650:	20004d8e 	.word	0x20004d8e
 8016654:	2000dc7c 	.word	0x2000dc7c

08016658 <eMBRegInputCB>:
 *
 * @return result
 */

eMBErrorCode eMBRegInputCB(UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
{
 8016658:	b480      	push	{r7}
 801665a:	b087      	sub	sp, #28
 801665c:	af00      	add	r7, sp, #0
 801665e:	6078      	str	r0, [r7, #4]
 8016660:	460b      	mov	r3, r1
 8016662:	807b      	strh	r3, [r7, #2]
 8016664:	4613      	mov	r3, r2
 8016666:	803b      	strh	r3, [r7, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 8016668:	2300      	movs	r3, #0
 801666a:	75fb      	strb	r3, [r7, #23]
    USHORT *        pusRegInputBuf;
    USHORT          REG_INPUT_START;
    USHORT          REG_INPUT_NREGS;
    USHORT          usRegInStart;

    pusRegInputBuf = usSRegInBuf;
 801666c:	4b22      	ldr	r3, [pc, #136]	; (80166f8 <eMBRegInputCB+0xa0>)
 801666e:	613b      	str	r3, [r7, #16]
    REG_INPUT_START = S_REG_INPUT_START;
 8016670:	2300      	movs	r3, #0
 8016672:	81fb      	strh	r3, [r7, #14]
    REG_INPUT_NREGS = S_REG_INPUT_NREGS;
 8016674:	2310      	movs	r3, #16
 8016676:	81bb      	strh	r3, [r7, #12]
    usRegInStart = usSRegInStart;
 8016678:	4b20      	ldr	r3, [pc, #128]	; (80166fc <eMBRegInputCB+0xa4>)
 801667a:	881b      	ldrh	r3, [r3, #0]
 801667c:	817b      	strh	r3, [r7, #10]

    /* it already plus one in modbus function method. */
    usAddress--;
 801667e:	887b      	ldrh	r3, [r7, #2]
 8016680:	3b01      	subs	r3, #1
 8016682:	807b      	strh	r3, [r7, #2]

    if ((usAddress >= REG_INPUT_START)
 8016684:	887a      	ldrh	r2, [r7, #2]
 8016686:	89fb      	ldrh	r3, [r7, #14]
 8016688:	429a      	cmp	r2, r3
 801668a:	d32c      	bcc.n	80166e6 <eMBRegInputCB+0x8e>
            && (usAddress + usNRegs <= REG_INPUT_START + REG_INPUT_NREGS))
 801668c:	887a      	ldrh	r2, [r7, #2]
 801668e:	883b      	ldrh	r3, [r7, #0]
 8016690:	441a      	add	r2, r3
 8016692:	89f9      	ldrh	r1, [r7, #14]
 8016694:	89bb      	ldrh	r3, [r7, #12]
 8016696:	440b      	add	r3, r1
 8016698:	429a      	cmp	r2, r3
 801669a:	dc24      	bgt.n	80166e6 <eMBRegInputCB+0x8e>
    {
        iRegIndex = usAddress - usRegInStart;
 801669c:	887a      	ldrh	r2, [r7, #2]
 801669e:	897b      	ldrh	r3, [r7, #10]
 80166a0:	1ad3      	subs	r3, r2, r3
 80166a2:	82bb      	strh	r3, [r7, #20]
        while (usNRegs > 0)
 80166a4:	e01b      	b.n	80166de <eMBRegInputCB+0x86>
        {
            *pucRegBuffer++ = (UCHAR) (pusRegInputBuf[iRegIndex] >> 8);
 80166a6:	8abb      	ldrh	r3, [r7, #20]
 80166a8:	005b      	lsls	r3, r3, #1
 80166aa:	693a      	ldr	r2, [r7, #16]
 80166ac:	4413      	add	r3, r2
 80166ae:	881b      	ldrh	r3, [r3, #0]
 80166b0:	0a1b      	lsrs	r3, r3, #8
 80166b2:	b299      	uxth	r1, r3
 80166b4:	687b      	ldr	r3, [r7, #4]
 80166b6:	1c5a      	adds	r2, r3, #1
 80166b8:	607a      	str	r2, [r7, #4]
 80166ba:	b2ca      	uxtb	r2, r1
 80166bc:	701a      	strb	r2, [r3, #0]
            *pucRegBuffer++ = (UCHAR) (pusRegInputBuf[iRegIndex] & 0xFF);
 80166be:	8abb      	ldrh	r3, [r7, #20]
 80166c0:	005b      	lsls	r3, r3, #1
 80166c2:	693a      	ldr	r2, [r7, #16]
 80166c4:	4413      	add	r3, r2
 80166c6:	8819      	ldrh	r1, [r3, #0]
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	1c5a      	adds	r2, r3, #1
 80166cc:	607a      	str	r2, [r7, #4]
 80166ce:	b2ca      	uxtb	r2, r1
 80166d0:	701a      	strb	r2, [r3, #0]
            iRegIndex++;
 80166d2:	8abb      	ldrh	r3, [r7, #20]
 80166d4:	3301      	adds	r3, #1
 80166d6:	82bb      	strh	r3, [r7, #20]
            usNRegs--;
 80166d8:	883b      	ldrh	r3, [r7, #0]
 80166da:	3b01      	subs	r3, #1
 80166dc:	803b      	strh	r3, [r7, #0]
        while (usNRegs > 0)
 80166de:	883b      	ldrh	r3, [r7, #0]
 80166e0:	2b00      	cmp	r3, #0
 80166e2:	d1e0      	bne.n	80166a6 <eMBRegInputCB+0x4e>
    if ((usAddress >= REG_INPUT_START)
 80166e4:	e001      	b.n	80166ea <eMBRegInputCB+0x92>
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 80166e6:	2301      	movs	r3, #1
 80166e8:	75fb      	strb	r3, [r7, #23]
    }

    return eStatus;
 80166ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80166ec:	4618      	mov	r0, r3
 80166ee:	371c      	adds	r7, #28
 80166f0:	46bd      	mov	sp, r7
 80166f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166f6:	4770      	bx	lr
 80166f8:	2000dcc8 	.word	0x2000dcc8
 80166fc:	20004d94 	.word	0x20004d94

08016700 <eMBRegHoldingCB>:
 *
 * @return result
 */
eMBErrorCode eMBRegHoldingCB(UCHAR * pucRegBuffer, USHORT usAddress,
        USHORT usNRegs, eMBRegisterMode eMode)
{
 8016700:	b480      	push	{r7}
 8016702:	b089      	sub	sp, #36	; 0x24
 8016704:	af00      	add	r7, sp, #0
 8016706:	60f8      	str	r0, [r7, #12]
 8016708:	4608      	mov	r0, r1
 801670a:	4611      	mov	r1, r2
 801670c:	461a      	mov	r2, r3
 801670e:	4603      	mov	r3, r0
 8016710:	817b      	strh	r3, [r7, #10]
 8016712:	460b      	mov	r3, r1
 8016714:	813b      	strh	r3, [r7, #8]
 8016716:	4613      	mov	r3, r2
 8016718:	71fb      	strb	r3, [r7, #7]
    eMBErrorCode    eStatus = MB_ENOERR;
 801671a:	2300      	movs	r3, #0
 801671c:	77fb      	strb	r3, [r7, #31]
    USHORT *        pusRegHoldingBuf;
    USHORT          REG_HOLDING_START;
    USHORT          REG_HOLDING_NREGS;
    USHORT          usRegHoldStart;

    pusRegHoldingBuf = usSRegHoldBuf;
 801671e:	4b39      	ldr	r3, [pc, #228]	; (8016804 <eMBRegHoldingCB+0x104>)
 8016720:	61bb      	str	r3, [r7, #24]
    REG_HOLDING_START = S_REG_HOLDING_START;
 8016722:	2300      	movs	r3, #0
 8016724:	82fb      	strh	r3, [r7, #22]
    REG_HOLDING_NREGS = S_REG_HOLDING_NREGS;
 8016726:	2310      	movs	r3, #16
 8016728:	82bb      	strh	r3, [r7, #20]
    usRegHoldStart = usSRegHoldStart;
 801672a:	4b37      	ldr	r3, [pc, #220]	; (8016808 <eMBRegHoldingCB+0x108>)
 801672c:	881b      	ldrh	r3, [r3, #0]
 801672e:	827b      	strh	r3, [r7, #18]

    /* it already plus one in modbus function method. */
    usAddress--;
 8016730:	897b      	ldrh	r3, [r7, #10]
 8016732:	3b01      	subs	r3, #1
 8016734:	817b      	strh	r3, [r7, #10]

    if ((usAddress >= REG_HOLDING_START)
 8016736:	897a      	ldrh	r2, [r7, #10]
 8016738:	8afb      	ldrh	r3, [r7, #22]
 801673a:	429a      	cmp	r2, r3
 801673c:	d359      	bcc.n	80167f2 <eMBRegHoldingCB+0xf2>
            && (usAddress + usNRegs <= REG_HOLDING_START + REG_HOLDING_NREGS))
 801673e:	897a      	ldrh	r2, [r7, #10]
 8016740:	893b      	ldrh	r3, [r7, #8]
 8016742:	441a      	add	r2, r3
 8016744:	8af9      	ldrh	r1, [r7, #22]
 8016746:	8abb      	ldrh	r3, [r7, #20]
 8016748:	440b      	add	r3, r1
 801674a:	429a      	cmp	r2, r3
 801674c:	dc51      	bgt.n	80167f2 <eMBRegHoldingCB+0xf2>
    {
        iRegIndex = usAddress - usRegHoldStart;
 801674e:	897a      	ldrh	r2, [r7, #10]
 8016750:	8a7b      	ldrh	r3, [r7, #18]
 8016752:	1ad3      	subs	r3, r2, r3
 8016754:	83bb      	strh	r3, [r7, #28]
        switch (eMode)
 8016756:	79fb      	ldrb	r3, [r7, #7]
 8016758:	2b00      	cmp	r3, #0
 801675a:	d01e      	beq.n	801679a <eMBRegHoldingCB+0x9a>
 801675c:	2b01      	cmp	r3, #1
 801675e:	d043      	beq.n	80167e8 <eMBRegHoldingCB+0xe8>
 8016760:	e049      	b.n	80167f6 <eMBRegHoldingCB+0xf6>
        {
        /* read current register values from the protocol stack. */
        case MB_REG_READ:
            while (usNRegs > 0)
            {
                *pucRegBuffer++ = (UCHAR) (pusRegHoldingBuf[iRegIndex] >> 8);
 8016762:	8bbb      	ldrh	r3, [r7, #28]
 8016764:	005b      	lsls	r3, r3, #1
 8016766:	69ba      	ldr	r2, [r7, #24]
 8016768:	4413      	add	r3, r2
 801676a:	881b      	ldrh	r3, [r3, #0]
 801676c:	0a1b      	lsrs	r3, r3, #8
 801676e:	b299      	uxth	r1, r3
 8016770:	68fb      	ldr	r3, [r7, #12]
 8016772:	1c5a      	adds	r2, r3, #1
 8016774:	60fa      	str	r2, [r7, #12]
 8016776:	b2ca      	uxtb	r2, r1
 8016778:	701a      	strb	r2, [r3, #0]
                *pucRegBuffer++ = (UCHAR) (pusRegHoldingBuf[iRegIndex] & 0xFF);
 801677a:	8bbb      	ldrh	r3, [r7, #28]
 801677c:	005b      	lsls	r3, r3, #1
 801677e:	69ba      	ldr	r2, [r7, #24]
 8016780:	4413      	add	r3, r2
 8016782:	8819      	ldrh	r1, [r3, #0]
 8016784:	68fb      	ldr	r3, [r7, #12]
 8016786:	1c5a      	adds	r2, r3, #1
 8016788:	60fa      	str	r2, [r7, #12]
 801678a:	b2ca      	uxtb	r2, r1
 801678c:	701a      	strb	r2, [r3, #0]
                iRegIndex++;
 801678e:	8bbb      	ldrh	r3, [r7, #28]
 8016790:	3301      	adds	r3, #1
 8016792:	83bb      	strh	r3, [r7, #28]
                usNRegs--;
 8016794:	893b      	ldrh	r3, [r7, #8]
 8016796:	3b01      	subs	r3, #1
 8016798:	813b      	strh	r3, [r7, #8]
            while (usNRegs > 0)
 801679a:	893b      	ldrh	r3, [r7, #8]
 801679c:	2b00      	cmp	r3, #0
 801679e:	d1e0      	bne.n	8016762 <eMBRegHoldingCB+0x62>
            }
            break;
 80167a0:	e026      	b.n	80167f0 <eMBRegHoldingCB+0xf0>

        /* write current register values with new values from the protocol stack. */
        case MB_REG_WRITE:
            while (usNRegs > 0)
            {
                pusRegHoldingBuf[iRegIndex] = *pucRegBuffer++ << 8;
 80167a2:	68fb      	ldr	r3, [r7, #12]
 80167a4:	1c5a      	adds	r2, r3, #1
 80167a6:	60fa      	str	r2, [r7, #12]
 80167a8:	781b      	ldrb	r3, [r3, #0]
 80167aa:	b29a      	uxth	r2, r3
 80167ac:	8bbb      	ldrh	r3, [r7, #28]
 80167ae:	005b      	lsls	r3, r3, #1
 80167b0:	69b9      	ldr	r1, [r7, #24]
 80167b2:	440b      	add	r3, r1
 80167b4:	0212      	lsls	r2, r2, #8
 80167b6:	b292      	uxth	r2, r2
 80167b8:	801a      	strh	r2, [r3, #0]
                pusRegHoldingBuf[iRegIndex] |= *pucRegBuffer++;
 80167ba:	68fb      	ldr	r3, [r7, #12]
 80167bc:	1c5a      	adds	r2, r3, #1
 80167be:	60fa      	str	r2, [r7, #12]
 80167c0:	7818      	ldrb	r0, [r3, #0]
 80167c2:	8bbb      	ldrh	r3, [r7, #28]
 80167c4:	005b      	lsls	r3, r3, #1
 80167c6:	69ba      	ldr	r2, [r7, #24]
 80167c8:	4413      	add	r3, r2
 80167ca:	8819      	ldrh	r1, [r3, #0]
 80167cc:	b282      	uxth	r2, r0
 80167ce:	8bbb      	ldrh	r3, [r7, #28]
 80167d0:	005b      	lsls	r3, r3, #1
 80167d2:	69b8      	ldr	r0, [r7, #24]
 80167d4:	4403      	add	r3, r0
 80167d6:	430a      	orrs	r2, r1
 80167d8:	b292      	uxth	r2, r2
 80167da:	801a      	strh	r2, [r3, #0]
                iRegIndex++;
 80167dc:	8bbb      	ldrh	r3, [r7, #28]
 80167de:	3301      	adds	r3, #1
 80167e0:	83bb      	strh	r3, [r7, #28]
                usNRegs--;
 80167e2:	893b      	ldrh	r3, [r7, #8]
 80167e4:	3b01      	subs	r3, #1
 80167e6:	813b      	strh	r3, [r7, #8]
            while (usNRegs > 0)
 80167e8:	893b      	ldrh	r3, [r7, #8]
 80167ea:	2b00      	cmp	r3, #0
 80167ec:	d1d9      	bne.n	80167a2 <eMBRegHoldingCB+0xa2>
            }
            break;
 80167ee:	bf00      	nop
        switch (eMode)
 80167f0:	e001      	b.n	80167f6 <eMBRegHoldingCB+0xf6>
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 80167f2:	2301      	movs	r3, #1
 80167f4:	77fb      	strb	r3, [r7, #31]
    }
    return eStatus;
 80167f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80167f8:	4618      	mov	r0, r3
 80167fa:	3724      	adds	r7, #36	; 0x24
 80167fc:	46bd      	mov	sp, r7
 80167fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016802:	4770      	bx	lr
 8016804:	2000dca8 	.word	0x2000dca8
 8016808:	20004d96 	.word	0x20004d96

0801680c <eMBRegCoilsCB>:
 *
 * @return result
 */
eMBErrorCode eMBRegCoilsCB(UCHAR * pucRegBuffer, USHORT usAddress,
        USHORT usNCoils, eMBRegisterMode eMode)
{
 801680c:	b590      	push	{r4, r7, lr}
 801680e:	b08b      	sub	sp, #44	; 0x2c
 8016810:	af00      	add	r7, sp, #0
 8016812:	60f8      	str	r0, [r7, #12]
 8016814:	4608      	mov	r0, r1
 8016816:	4611      	mov	r1, r2
 8016818:	461a      	mov	r2, r3
 801681a:	4603      	mov	r3, r0
 801681c:	817b      	strh	r3, [r7, #10]
 801681e:	460b      	mov	r3, r1
 8016820:	813b      	strh	r3, [r7, #8]
 8016822:	4613      	mov	r3, r2
 8016824:	71fb      	strb	r3, [r7, #7]
    eMBErrorCode    eStatus = MB_ENOERR;
 8016826:	2300      	movs	r3, #0
 8016828:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    USHORT          iRegIndex , iRegBitIndex , iNReg;
    UCHAR *         pucCoilBuf;
    USHORT          COIL_START;
    USHORT          COIL_NCOILS;
    USHORT          usCoilStart;
    iNReg =  usNCoils / 8 + 1;
 801682c:	893b      	ldrh	r3, [r7, #8]
 801682e:	08db      	lsrs	r3, r3, #3
 8016830:	b29b      	uxth	r3, r3
 8016832:	3301      	adds	r3, #1
 8016834:	847b      	strh	r3, [r7, #34]	; 0x22

    pucCoilBuf = ucSCoilBuf;
 8016836:	4b4a      	ldr	r3, [pc, #296]	; (8016960 <eMBRegCoilsCB+0x154>)
 8016838:	61fb      	str	r3, [r7, #28]
    COIL_START = S_COIL_START;
 801683a:	2300      	movs	r3, #0
 801683c:	837b      	strh	r3, [r7, #26]
    COIL_NCOILS = S_COIL_NCOILS;
 801683e:	2310      	movs	r3, #16
 8016840:	833b      	strh	r3, [r7, #24]
    usCoilStart = usSCoilStart;
 8016842:	4b48      	ldr	r3, [pc, #288]	; (8016964 <eMBRegCoilsCB+0x158>)
 8016844:	881b      	ldrh	r3, [r3, #0]
 8016846:	82fb      	strh	r3, [r7, #22]

    /* it already plus one in modbus function method. */
    usAddress--;
 8016848:	897b      	ldrh	r3, [r7, #10]
 801684a:	3b01      	subs	r3, #1
 801684c:	817b      	strh	r3, [r7, #10]

    if( ( usAddress >= COIL_START ) &&
 801684e:	897a      	ldrh	r2, [r7, #10]
 8016850:	8b7b      	ldrh	r3, [r7, #26]
 8016852:	429a      	cmp	r2, r3
 8016854:	d37b      	bcc.n	801694e <eMBRegCoilsCB+0x142>
        ( usAddress + usNCoils <= COIL_START + COIL_NCOILS ) )
 8016856:	897a      	ldrh	r2, [r7, #10]
 8016858:	893b      	ldrh	r3, [r7, #8]
 801685a:	441a      	add	r2, r3
 801685c:	8b79      	ldrh	r1, [r7, #26]
 801685e:	8b3b      	ldrh	r3, [r7, #24]
 8016860:	440b      	add	r3, r1
    if( ( usAddress >= COIL_START ) &&
 8016862:	429a      	cmp	r2, r3
 8016864:	dc73      	bgt.n	801694e <eMBRegCoilsCB+0x142>
    {
        iRegIndex = (USHORT) (usAddress - usCoilStart) / 8;
 8016866:	897a      	ldrh	r2, [r7, #10]
 8016868:	8afb      	ldrh	r3, [r7, #22]
 801686a:	1ad3      	subs	r3, r2, r3
 801686c:	b29b      	uxth	r3, r3
 801686e:	08db      	lsrs	r3, r3, #3
 8016870:	84bb      	strh	r3, [r7, #36]	; 0x24
        iRegBitIndex = (USHORT) (usAddress - usCoilStart) % 8;
 8016872:	897a      	ldrh	r2, [r7, #10]
 8016874:	8afb      	ldrh	r3, [r7, #22]
 8016876:	1ad3      	subs	r3, r2, r3
 8016878:	b29b      	uxth	r3, r3
 801687a:	f003 0307 	and.w	r3, r3, #7
 801687e:	82bb      	strh	r3, [r7, #20]
        switch ( eMode )
 8016880:	79fb      	ldrb	r3, [r7, #7]
 8016882:	2b00      	cmp	r3, #0
 8016884:	d015      	beq.n	80168b2 <eMBRegCoilsCB+0xa6>
 8016886:	2b01      	cmp	r3, #1
 8016888:	d045      	beq.n	8016916 <eMBRegCoilsCB+0x10a>
 801688a:	e063      	b.n	8016954 <eMBRegCoilsCB+0x148>
        {
        /* read current coil values from the protocol stack. */
        case MB_REG_READ:
            while (iNReg > 0)
            {
                *pucRegBuffer++ = xMBUtilGetBits(&pucCoilBuf[iRegIndex++],
 801688c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801688e:	1c5a      	adds	r2, r3, #1
 8016890:	84ba      	strh	r2, [r7, #36]	; 0x24
 8016892:	461a      	mov	r2, r3
 8016894:	69fb      	ldr	r3, [r7, #28]
 8016896:	1898      	adds	r0, r3, r2
 8016898:	68fc      	ldr	r4, [r7, #12]
 801689a:	1c63      	adds	r3, r4, #1
 801689c:	60fb      	str	r3, [r7, #12]
 801689e:	8abb      	ldrh	r3, [r7, #20]
 80168a0:	2208      	movs	r2, #8
 80168a2:	4619      	mov	r1, r3
 80168a4:	f7fe fd3a 	bl	801531c <xMBUtilGetBits>
 80168a8:	4603      	mov	r3, r0
 80168aa:	7023      	strb	r3, [r4, #0]
                        iRegBitIndex, 8);
                iNReg--;
 80168ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80168ae:	3b01      	subs	r3, #1
 80168b0:	847b      	strh	r3, [r7, #34]	; 0x22
            while (iNReg > 0)
 80168b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80168b4:	2b00      	cmp	r3, #0
 80168b6:	d1e9      	bne.n	801688c <eMBRegCoilsCB+0x80>
            }
            pucRegBuffer--;
 80168b8:	68fb      	ldr	r3, [r7, #12]
 80168ba:	3b01      	subs	r3, #1
 80168bc:	60fb      	str	r3, [r7, #12]
            /* last coils */
            usNCoils = usNCoils % 8;
 80168be:	893b      	ldrh	r3, [r7, #8]
 80168c0:	f003 0307 	and.w	r3, r3, #7
 80168c4:	813b      	strh	r3, [r7, #8]
            /* filling zero to high bit */
            *pucRegBuffer = *pucRegBuffer << (8 - usNCoils);
 80168c6:	68fb      	ldr	r3, [r7, #12]
 80168c8:	781b      	ldrb	r3, [r3, #0]
 80168ca:	461a      	mov	r2, r3
 80168cc:	893b      	ldrh	r3, [r7, #8]
 80168ce:	f1c3 0308 	rsb	r3, r3, #8
 80168d2:	fa02 f303 	lsl.w	r3, r2, r3
 80168d6:	b2da      	uxtb	r2, r3
 80168d8:	68fb      	ldr	r3, [r7, #12]
 80168da:	701a      	strb	r2, [r3, #0]
            *pucRegBuffer = *pucRegBuffer >> (8 - usNCoils);
 80168dc:	68fb      	ldr	r3, [r7, #12]
 80168de:	781b      	ldrb	r3, [r3, #0]
 80168e0:	461a      	mov	r2, r3
 80168e2:	893b      	ldrh	r3, [r7, #8]
 80168e4:	f1c3 0308 	rsb	r3, r3, #8
 80168e8:	fa42 f303 	asr.w	r3, r2, r3
 80168ec:	b2da      	uxtb	r2, r3
 80168ee:	68fb      	ldr	r3, [r7, #12]
 80168f0:	701a      	strb	r2, [r3, #0]
            break;
 80168f2:	e02b      	b.n	801694c <eMBRegCoilsCB+0x140>

            /* write current coil values with new values from the protocol stack. */
        case MB_REG_WRITE:
            while (iNReg > 1)
            {
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, 8,
 80168f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80168f6:	1c5a      	adds	r2, r3, #1
 80168f8:	84ba      	strh	r2, [r7, #36]	; 0x24
 80168fa:	461a      	mov	r2, r3
 80168fc:	69fb      	ldr	r3, [r7, #28]
 80168fe:	1898      	adds	r0, r3, r2
                        *pucRegBuffer++);
 8016900:	68fb      	ldr	r3, [r7, #12]
 8016902:	1c5a      	adds	r2, r3, #1
 8016904:	60fa      	str	r2, [r7, #12]
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, 8,
 8016906:	781b      	ldrb	r3, [r3, #0]
 8016908:	8ab9      	ldrh	r1, [r7, #20]
 801690a:	2208      	movs	r2, #8
 801690c:	f7fe fc9a 	bl	8015244 <xMBUtilSetBits>
                iNReg--;
 8016910:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016912:	3b01      	subs	r3, #1
 8016914:	847b      	strh	r3, [r7, #34]	; 0x22
            while (iNReg > 1)
 8016916:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016918:	2b01      	cmp	r3, #1
 801691a:	d8eb      	bhi.n	80168f4 <eMBRegCoilsCB+0xe8>
            }
            /* last coils */
            usNCoils = usNCoils % 8;
 801691c:	893b      	ldrh	r3, [r7, #8]
 801691e:	f003 0307 	and.w	r3, r3, #7
 8016922:	813b      	strh	r3, [r7, #8]
            /* xMBUtilSetBits has bug when ucNBits is zero */
            if (usNCoils != 0)
 8016924:	893b      	ldrh	r3, [r7, #8]
 8016926:	2b00      	cmp	r3, #0
 8016928:	d00f      	beq.n	801694a <eMBRegCoilsCB+0x13e>
            {
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, usNCoils,
 801692a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801692c:	1c5a      	adds	r2, r3, #1
 801692e:	84ba      	strh	r2, [r7, #36]	; 0x24
 8016930:	461a      	mov	r2, r3
 8016932:	69fb      	ldr	r3, [r7, #28]
 8016934:	1898      	adds	r0, r3, r2
 8016936:	893b      	ldrh	r3, [r7, #8]
 8016938:	b2dc      	uxtb	r4, r3
                        *pucRegBuffer++);
 801693a:	68fb      	ldr	r3, [r7, #12]
 801693c:	1c5a      	adds	r2, r3, #1
 801693e:	60fa      	str	r2, [r7, #12]
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, usNCoils,
 8016940:	781b      	ldrb	r3, [r3, #0]
 8016942:	8ab9      	ldrh	r1, [r7, #20]
 8016944:	4622      	mov	r2, r4
 8016946:	f7fe fc7d 	bl	8015244 <xMBUtilSetBits>
            }
            break;
 801694a:	bf00      	nop
        switch ( eMode )
 801694c:	e002      	b.n	8016954 <eMBRegCoilsCB+0x148>
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 801694e:	2301      	movs	r3, #1
 8016950:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    return eStatus;
 8016954:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8016958:	4618      	mov	r0, r3
 801695a:	372c      	adds	r7, #44	; 0x2c
 801695c:	46bd      	mov	sp, r7
 801695e:	bd90      	pop	{r4, r7, pc}
 8016960:	2000dca0 	.word	0x2000dca0
 8016964:	20004d92 	.word	0x20004d92

08016968 <eMBRegDiscreteCB>:
 * @param usNDiscrete discrete number
 *
 * @return result
 */
eMBErrorCode eMBRegDiscreteCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete )
{
 8016968:	b590      	push	{r4, r7, lr}
 801696a:	b089      	sub	sp, #36	; 0x24
 801696c:	af00      	add	r7, sp, #0
 801696e:	6078      	str	r0, [r7, #4]
 8016970:	460b      	mov	r3, r1
 8016972:	807b      	strh	r3, [r7, #2]
 8016974:	4613      	mov	r3, r2
 8016976:	803b      	strh	r3, [r7, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 8016978:	2300      	movs	r3, #0
 801697a:	77fb      	strb	r3, [r7, #31]
    USHORT          iRegIndex , iRegBitIndex , iNReg;
    UCHAR *         pucDiscreteInputBuf;
    USHORT          DISCRETE_INPUT_START;
    USHORT          DISCRETE_INPUT_NDISCRETES;
    USHORT          usDiscreteInputStart;
    iNReg =  usNDiscrete / 8 + 1;
 801697c:	883b      	ldrh	r3, [r7, #0]
 801697e:	08db      	lsrs	r3, r3, #3
 8016980:	b29b      	uxth	r3, r3
 8016982:	3301      	adds	r3, #1
 8016984:	837b      	strh	r3, [r7, #26]

    pucDiscreteInputBuf = ucSDiscInBuf;
 8016986:	4b30      	ldr	r3, [pc, #192]	; (8016a48 <eMBRegDiscreteCB+0xe0>)
 8016988:	617b      	str	r3, [r7, #20]
    DISCRETE_INPUT_START = S_DISCRETE_INPUT_START;
 801698a:	2300      	movs	r3, #0
 801698c:	827b      	strh	r3, [r7, #18]
    DISCRETE_INPUT_NDISCRETES = S_DISCRETE_INPUT_NDISCRETES;
 801698e:	2310      	movs	r3, #16
 8016990:	823b      	strh	r3, [r7, #16]
    usDiscreteInputStart = usSDiscInStart;
 8016992:	4b2e      	ldr	r3, [pc, #184]	; (8016a4c <eMBRegDiscreteCB+0xe4>)
 8016994:	881b      	ldrh	r3, [r3, #0]
 8016996:	81fb      	strh	r3, [r7, #14]

    /* it already plus one in modbus function method. */
    usAddress--;
 8016998:	887b      	ldrh	r3, [r7, #2]
 801699a:	3b01      	subs	r3, #1
 801699c:	807b      	strh	r3, [r7, #2]

    if ((usAddress >= DISCRETE_INPUT_START)
 801699e:	887a      	ldrh	r2, [r7, #2]
 80169a0:	8a7b      	ldrh	r3, [r7, #18]
 80169a2:	429a      	cmp	r2, r3
 80169a4:	d349      	bcc.n	8016a3a <eMBRegDiscreteCB+0xd2>
            && (usAddress + usNDiscrete    <= DISCRETE_INPUT_START + DISCRETE_INPUT_NDISCRETES))
 80169a6:	887a      	ldrh	r2, [r7, #2]
 80169a8:	883b      	ldrh	r3, [r7, #0]
 80169aa:	441a      	add	r2, r3
 80169ac:	8a79      	ldrh	r1, [r7, #18]
 80169ae:	8a3b      	ldrh	r3, [r7, #16]
 80169b0:	440b      	add	r3, r1
 80169b2:	429a      	cmp	r2, r3
 80169b4:	dc41      	bgt.n	8016a3a <eMBRegDiscreteCB+0xd2>
    {
        iRegIndex = (USHORT) (usAddress - usDiscreteInputStart) / 8;
 80169b6:	887a      	ldrh	r2, [r7, #2]
 80169b8:	89fb      	ldrh	r3, [r7, #14]
 80169ba:	1ad3      	subs	r3, r2, r3
 80169bc:	b29b      	uxth	r3, r3
 80169be:	08db      	lsrs	r3, r3, #3
 80169c0:	83bb      	strh	r3, [r7, #28]
        iRegBitIndex = (USHORT) (usAddress - usDiscreteInputStart) % 8;
 80169c2:	887a      	ldrh	r2, [r7, #2]
 80169c4:	89fb      	ldrh	r3, [r7, #14]
 80169c6:	1ad3      	subs	r3, r2, r3
 80169c8:	b29b      	uxth	r3, r3
 80169ca:	f003 0307 	and.w	r3, r3, #7
 80169ce:	81bb      	strh	r3, [r7, #12]

        while (iNReg > 0)
 80169d0:	e012      	b.n	80169f8 <eMBRegDiscreteCB+0x90>
        {
            *pucRegBuffer++ = xMBUtilGetBits(&pucDiscreteInputBuf[iRegIndex++],
 80169d2:	8bbb      	ldrh	r3, [r7, #28]
 80169d4:	1c5a      	adds	r2, r3, #1
 80169d6:	83ba      	strh	r2, [r7, #28]
 80169d8:	461a      	mov	r2, r3
 80169da:	697b      	ldr	r3, [r7, #20]
 80169dc:	1898      	adds	r0, r3, r2
 80169de:	687c      	ldr	r4, [r7, #4]
 80169e0:	1c63      	adds	r3, r4, #1
 80169e2:	607b      	str	r3, [r7, #4]
 80169e4:	89bb      	ldrh	r3, [r7, #12]
 80169e6:	2208      	movs	r2, #8
 80169e8:	4619      	mov	r1, r3
 80169ea:	f7fe fc97 	bl	801531c <xMBUtilGetBits>
 80169ee:	4603      	mov	r3, r0
 80169f0:	7023      	strb	r3, [r4, #0]
                    iRegBitIndex, 8);
            iNReg--;
 80169f2:	8b7b      	ldrh	r3, [r7, #26]
 80169f4:	3b01      	subs	r3, #1
 80169f6:	837b      	strh	r3, [r7, #26]
        while (iNReg > 0)
 80169f8:	8b7b      	ldrh	r3, [r7, #26]
 80169fa:	2b00      	cmp	r3, #0
 80169fc:	d1e9      	bne.n	80169d2 <eMBRegDiscreteCB+0x6a>
        }
        pucRegBuffer--;
 80169fe:	687b      	ldr	r3, [r7, #4]
 8016a00:	3b01      	subs	r3, #1
 8016a02:	607b      	str	r3, [r7, #4]
        /* last discrete */
        usNDiscrete = usNDiscrete % 8;
 8016a04:	883b      	ldrh	r3, [r7, #0]
 8016a06:	f003 0307 	and.w	r3, r3, #7
 8016a0a:	803b      	strh	r3, [r7, #0]
        /* filling zero to high bit */
        *pucRegBuffer = *pucRegBuffer << (8 - usNDiscrete);
 8016a0c:	687b      	ldr	r3, [r7, #4]
 8016a0e:	781b      	ldrb	r3, [r3, #0]
 8016a10:	461a      	mov	r2, r3
 8016a12:	883b      	ldrh	r3, [r7, #0]
 8016a14:	f1c3 0308 	rsb	r3, r3, #8
 8016a18:	fa02 f303 	lsl.w	r3, r2, r3
 8016a1c:	b2da      	uxtb	r2, r3
 8016a1e:	687b      	ldr	r3, [r7, #4]
 8016a20:	701a      	strb	r2, [r3, #0]
        *pucRegBuffer = *pucRegBuffer >> (8 - usNDiscrete);
 8016a22:	687b      	ldr	r3, [r7, #4]
 8016a24:	781b      	ldrb	r3, [r3, #0]
 8016a26:	461a      	mov	r2, r3
 8016a28:	883b      	ldrh	r3, [r7, #0]
 8016a2a:	f1c3 0308 	rsb	r3, r3, #8
 8016a2e:	fa42 f303 	asr.w	r3, r2, r3
 8016a32:	b2da      	uxtb	r2, r3
 8016a34:	687b      	ldr	r3, [r7, #4]
 8016a36:	701a      	strb	r2, [r3, #0]
 8016a38:	e001      	b.n	8016a3e <eMBRegDiscreteCB+0xd6>
    }
    else
    {
        eStatus = MB_ENOREG;
 8016a3a:	2301      	movs	r3, #1
 8016a3c:	77fb      	strb	r3, [r7, #31]
    }

    return eStatus;
 8016a3e:	7ffb      	ldrb	r3, [r7, #31]
}
 8016a40:	4618      	mov	r0, r3
 8016a42:	3724      	adds	r7, #36	; 0x24
 8016a44:	46bd      	mov	sp, r7
 8016a46:	bd90      	pop	{r4, r7, pc}
 8016a48:	2000dca4 	.word	0x2000dca4
 8016a4c:	20004d90 	.word	0x20004d90

08016a50 <eMBMasterRegInputCB>:
 * @param usNRegs input register number
 *
 * @return result
 */
eMBErrorCode eMBMasterRegInputCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
{
 8016a50:	b580      	push	{r7, lr}
 8016a52:	b086      	sub	sp, #24
 8016a54:	af00      	add	r7, sp, #0
 8016a56:	6078      	str	r0, [r7, #4]
 8016a58:	460b      	mov	r3, r1
 8016a5a:	807b      	strh	r3, [r7, #2]
 8016a5c:	4613      	mov	r3, r2
 8016a5e:	803b      	strh	r3, [r7, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 8016a60:	2300      	movs	r3, #0
 8016a62:	75fb      	strb	r3, [r7, #23]
    USHORT *        pusRegInputBuf;
    USHORT          REG_INPUT_START;
    USHORT          REG_INPUT_NREGS;
    USHORT          usRegInStart;

    pusRegInputBuf = usMRegInBuf[ucMBMasterGetDestAddress() - 1];
 8016a64:	f7fe fff8 	bl	8015a58 <ucMBMasterGetDestAddress>
 8016a68:	4603      	mov	r3, r0
 8016a6a:	3b01      	subs	r3, #1
 8016a6c:	015b      	lsls	r3, r3, #5
 8016a6e:	4a26      	ldr	r2, [pc, #152]	; (8016b08 <eMBMasterRegInputCB+0xb8>)
 8016a70:	4413      	add	r3, r2
 8016a72:	613b      	str	r3, [r7, #16]
    REG_INPUT_START = M_REG_INPUT_START;
 8016a74:	2300      	movs	r3, #0
 8016a76:	81fb      	strh	r3, [r7, #14]
    REG_INPUT_NREGS = M_REG_INPUT_NREGS;
 8016a78:	2310      	movs	r3, #16
 8016a7a:	81bb      	strh	r3, [r7, #12]
    usRegInStart = usMRegInStart;
 8016a7c:	4b23      	ldr	r3, [pc, #140]	; (8016b0c <eMBMasterRegInputCB+0xbc>)
 8016a7e:	881b      	ldrh	r3, [r3, #0]
 8016a80:	817b      	strh	r3, [r7, #10]

    /* it already plus one in modbus function method. */
    usAddress--;
 8016a82:	887b      	ldrh	r3, [r7, #2]
 8016a84:	3b01      	subs	r3, #1
 8016a86:	807b      	strh	r3, [r7, #2]

    if ((usAddress >= REG_INPUT_START)
 8016a88:	887a      	ldrh	r2, [r7, #2]
 8016a8a:	89fb      	ldrh	r3, [r7, #14]
 8016a8c:	429a      	cmp	r2, r3
 8016a8e:	d333      	bcc.n	8016af8 <eMBMasterRegInputCB+0xa8>
            && (usAddress + usNRegs <= REG_INPUT_START + REG_INPUT_NREGS))
 8016a90:	887a      	ldrh	r2, [r7, #2]
 8016a92:	883b      	ldrh	r3, [r7, #0]
 8016a94:	441a      	add	r2, r3
 8016a96:	89f9      	ldrh	r1, [r7, #14]
 8016a98:	89bb      	ldrh	r3, [r7, #12]
 8016a9a:	440b      	add	r3, r1
 8016a9c:	429a      	cmp	r2, r3
 8016a9e:	dc2b      	bgt.n	8016af8 <eMBMasterRegInputCB+0xa8>
    {
        iRegIndex = usAddress - usRegInStart;
 8016aa0:	887a      	ldrh	r2, [r7, #2]
 8016aa2:	897b      	ldrh	r3, [r7, #10]
 8016aa4:	1ad3      	subs	r3, r2, r3
 8016aa6:	82bb      	strh	r3, [r7, #20]
        while (usNRegs > 0)
 8016aa8:	e022      	b.n	8016af0 <eMBMasterRegInputCB+0xa0>
        {
            pusRegInputBuf[iRegIndex] = *pucRegBuffer++ << 8;
 8016aaa:	687b      	ldr	r3, [r7, #4]
 8016aac:	1c5a      	adds	r2, r3, #1
 8016aae:	607a      	str	r2, [r7, #4]
 8016ab0:	781b      	ldrb	r3, [r3, #0]
 8016ab2:	b29a      	uxth	r2, r3
 8016ab4:	8abb      	ldrh	r3, [r7, #20]
 8016ab6:	005b      	lsls	r3, r3, #1
 8016ab8:	6939      	ldr	r1, [r7, #16]
 8016aba:	440b      	add	r3, r1
 8016abc:	0212      	lsls	r2, r2, #8
 8016abe:	b292      	uxth	r2, r2
 8016ac0:	801a      	strh	r2, [r3, #0]
            pusRegInputBuf[iRegIndex] |= *pucRegBuffer++;
 8016ac2:	687b      	ldr	r3, [r7, #4]
 8016ac4:	1c5a      	adds	r2, r3, #1
 8016ac6:	607a      	str	r2, [r7, #4]
 8016ac8:	7818      	ldrb	r0, [r3, #0]
 8016aca:	8abb      	ldrh	r3, [r7, #20]
 8016acc:	005b      	lsls	r3, r3, #1
 8016ace:	693a      	ldr	r2, [r7, #16]
 8016ad0:	4413      	add	r3, r2
 8016ad2:	8819      	ldrh	r1, [r3, #0]
 8016ad4:	b282      	uxth	r2, r0
 8016ad6:	8abb      	ldrh	r3, [r7, #20]
 8016ad8:	005b      	lsls	r3, r3, #1
 8016ada:	6938      	ldr	r0, [r7, #16]
 8016adc:	4403      	add	r3, r0
 8016ade:	430a      	orrs	r2, r1
 8016ae0:	b292      	uxth	r2, r2
 8016ae2:	801a      	strh	r2, [r3, #0]
            iRegIndex++;
 8016ae4:	8abb      	ldrh	r3, [r7, #20]
 8016ae6:	3301      	adds	r3, #1
 8016ae8:	82bb      	strh	r3, [r7, #20]
            usNRegs--;
 8016aea:	883b      	ldrh	r3, [r7, #0]
 8016aec:	3b01      	subs	r3, #1
 8016aee:	803b      	strh	r3, [r7, #0]
        while (usNRegs > 0)
 8016af0:	883b      	ldrh	r3, [r7, #0]
 8016af2:	2b00      	cmp	r3, #0
 8016af4:	d1d9      	bne.n	8016aaa <eMBMasterRegInputCB+0x5a>
    if ((usAddress >= REG_INPUT_START)
 8016af6:	e001      	b.n	8016afc <eMBMasterRegInputCB+0xac>
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 8016af8:	2301      	movs	r3, #1
 8016afa:	75fb      	strb	r3, [r7, #23]
    }

    return eStatus;
 8016afc:	7dfb      	ldrb	r3, [r7, #23]
}
 8016afe:	4618      	mov	r0, r3
 8016b00:	3718      	adds	r7, #24
 8016b02:	46bd      	mov	sp, r7
 8016b04:	bd80      	pop	{r7, pc}
 8016b06:	bf00      	nop
 8016b08:	2000df28 	.word	0x2000df28
 8016b0c:	20004d9c 	.word	0x20004d9c

08016b10 <eMBMasterRegHoldingCB>:
 *
 * @return result
 */
eMBErrorCode eMBMasterRegHoldingCB(UCHAR * pucRegBuffer, USHORT usAddress,
        USHORT usNRegs, eMBRegisterMode eMode)
{
 8016b10:	b580      	push	{r7, lr}
 8016b12:	b088      	sub	sp, #32
 8016b14:	af00      	add	r7, sp, #0
 8016b16:	60f8      	str	r0, [r7, #12]
 8016b18:	4608      	mov	r0, r1
 8016b1a:	4611      	mov	r1, r2
 8016b1c:	461a      	mov	r2, r3
 8016b1e:	4603      	mov	r3, r0
 8016b20:	817b      	strh	r3, [r7, #10]
 8016b22:	460b      	mov	r3, r1
 8016b24:	813b      	strh	r3, [r7, #8]
 8016b26:	4613      	mov	r3, r2
 8016b28:	71fb      	strb	r3, [r7, #7]
    eMBErrorCode    eStatus = MB_ENOERR;
 8016b2a:	2300      	movs	r3, #0
 8016b2c:	77fb      	strb	r3, [r7, #31]
    USHORT *        pusRegHoldingBuf;
    USHORT          REG_HOLDING_START;
    USHORT          REG_HOLDING_NREGS;
    USHORT          usRegHoldStart;

    pusRegHoldingBuf = usMRegHoldBuf[ucMBMasterGetDestAddress() - 1];
 8016b2e:	f7fe ff93 	bl	8015a58 <ucMBMasterGetDestAddress>
 8016b32:	4603      	mov	r3, r0
 8016b34:	3b01      	subs	r3, #1
 8016b36:	015b      	lsls	r3, r3, #5
 8016b38:	4a39      	ldr	r2, [pc, #228]	; (8016c20 <eMBMasterRegHoldingCB+0x110>)
 8016b3a:	4413      	add	r3, r2
 8016b3c:	61bb      	str	r3, [r7, #24]
    REG_HOLDING_START = M_REG_HOLDING_START;
 8016b3e:	2300      	movs	r3, #0
 8016b40:	82fb      	strh	r3, [r7, #22]
    REG_HOLDING_NREGS = M_REG_HOLDING_NREGS;
 8016b42:	2310      	movs	r3, #16
 8016b44:	82bb      	strh	r3, [r7, #20]
    usRegHoldStart = usMRegHoldStart;
 8016b46:	4b37      	ldr	r3, [pc, #220]	; (8016c24 <eMBMasterRegHoldingCB+0x114>)
 8016b48:	881b      	ldrh	r3, [r3, #0]
 8016b4a:	827b      	strh	r3, [r7, #18]
    /* if mode is read, the master will write the received date to buffer. */
    eMode = MB_REG_WRITE;
 8016b4c:	2301      	movs	r3, #1
 8016b4e:	71fb      	strb	r3, [r7, #7]

    /* it already plus one in modbus function method. */
    usAddress--;
 8016b50:	897b      	ldrh	r3, [r7, #10]
 8016b52:	3b01      	subs	r3, #1
 8016b54:	817b      	strh	r3, [r7, #10]

    if ((usAddress >= REG_HOLDING_START)
 8016b56:	897a      	ldrh	r2, [r7, #10]
 8016b58:	8afb      	ldrh	r3, [r7, #22]
 8016b5a:	429a      	cmp	r2, r3
 8016b5c:	d359      	bcc.n	8016c12 <eMBMasterRegHoldingCB+0x102>
            && (usAddress + usNRegs <= REG_HOLDING_START + REG_HOLDING_NREGS))
 8016b5e:	897a      	ldrh	r2, [r7, #10]
 8016b60:	893b      	ldrh	r3, [r7, #8]
 8016b62:	441a      	add	r2, r3
 8016b64:	8af9      	ldrh	r1, [r7, #22]
 8016b66:	8abb      	ldrh	r3, [r7, #20]
 8016b68:	440b      	add	r3, r1
 8016b6a:	429a      	cmp	r2, r3
 8016b6c:	dc51      	bgt.n	8016c12 <eMBMasterRegHoldingCB+0x102>
    {
        iRegIndex = usAddress - usRegHoldStart;
 8016b6e:	897a      	ldrh	r2, [r7, #10]
 8016b70:	8a7b      	ldrh	r3, [r7, #18]
 8016b72:	1ad3      	subs	r3, r2, r3
 8016b74:	83bb      	strh	r3, [r7, #28]
        switch (eMode)
 8016b76:	79fb      	ldrb	r3, [r7, #7]
 8016b78:	2b00      	cmp	r3, #0
 8016b7a:	d01e      	beq.n	8016bba <eMBMasterRegHoldingCB+0xaa>
 8016b7c:	2b01      	cmp	r3, #1
 8016b7e:	d043      	beq.n	8016c08 <eMBMasterRegHoldingCB+0xf8>
 8016b80:	e049      	b.n	8016c16 <eMBMasterRegHoldingCB+0x106>
        {
        /* read current register values from the protocol stack. */
        case MB_REG_READ:
            while (usNRegs > 0)
            {
                *pucRegBuffer++ = (UCHAR) (pusRegHoldingBuf[iRegIndex] >> 8);
 8016b82:	8bbb      	ldrh	r3, [r7, #28]
 8016b84:	005b      	lsls	r3, r3, #1
 8016b86:	69ba      	ldr	r2, [r7, #24]
 8016b88:	4413      	add	r3, r2
 8016b8a:	881b      	ldrh	r3, [r3, #0]
 8016b8c:	0a1b      	lsrs	r3, r3, #8
 8016b8e:	b299      	uxth	r1, r3
 8016b90:	68fb      	ldr	r3, [r7, #12]
 8016b92:	1c5a      	adds	r2, r3, #1
 8016b94:	60fa      	str	r2, [r7, #12]
 8016b96:	b2ca      	uxtb	r2, r1
 8016b98:	701a      	strb	r2, [r3, #0]
                *pucRegBuffer++ = (UCHAR) (pusRegHoldingBuf[iRegIndex] & 0xFF);
 8016b9a:	8bbb      	ldrh	r3, [r7, #28]
 8016b9c:	005b      	lsls	r3, r3, #1
 8016b9e:	69ba      	ldr	r2, [r7, #24]
 8016ba0:	4413      	add	r3, r2
 8016ba2:	8819      	ldrh	r1, [r3, #0]
 8016ba4:	68fb      	ldr	r3, [r7, #12]
 8016ba6:	1c5a      	adds	r2, r3, #1
 8016ba8:	60fa      	str	r2, [r7, #12]
 8016baa:	b2ca      	uxtb	r2, r1
 8016bac:	701a      	strb	r2, [r3, #0]
                iRegIndex++;
 8016bae:	8bbb      	ldrh	r3, [r7, #28]
 8016bb0:	3301      	adds	r3, #1
 8016bb2:	83bb      	strh	r3, [r7, #28]
                usNRegs--;
 8016bb4:	893b      	ldrh	r3, [r7, #8]
 8016bb6:	3b01      	subs	r3, #1
 8016bb8:	813b      	strh	r3, [r7, #8]
            while (usNRegs > 0)
 8016bba:	893b      	ldrh	r3, [r7, #8]
 8016bbc:	2b00      	cmp	r3, #0
 8016bbe:	d1e0      	bne.n	8016b82 <eMBMasterRegHoldingCB+0x72>
            }
            break;
 8016bc0:	e026      	b.n	8016c10 <eMBMasterRegHoldingCB+0x100>
        /* write current register values with new values from the protocol stack. */
        case MB_REG_WRITE:
            while (usNRegs > 0)
            {
                pusRegHoldingBuf[iRegIndex] = *pucRegBuffer++ << 8;
 8016bc2:	68fb      	ldr	r3, [r7, #12]
 8016bc4:	1c5a      	adds	r2, r3, #1
 8016bc6:	60fa      	str	r2, [r7, #12]
 8016bc8:	781b      	ldrb	r3, [r3, #0]
 8016bca:	b29a      	uxth	r2, r3
 8016bcc:	8bbb      	ldrh	r3, [r7, #28]
 8016bce:	005b      	lsls	r3, r3, #1
 8016bd0:	69b9      	ldr	r1, [r7, #24]
 8016bd2:	440b      	add	r3, r1
 8016bd4:	0212      	lsls	r2, r2, #8
 8016bd6:	b292      	uxth	r2, r2
 8016bd8:	801a      	strh	r2, [r3, #0]
                pusRegHoldingBuf[iRegIndex] |= *pucRegBuffer++;
 8016bda:	68fb      	ldr	r3, [r7, #12]
 8016bdc:	1c5a      	adds	r2, r3, #1
 8016bde:	60fa      	str	r2, [r7, #12]
 8016be0:	7818      	ldrb	r0, [r3, #0]
 8016be2:	8bbb      	ldrh	r3, [r7, #28]
 8016be4:	005b      	lsls	r3, r3, #1
 8016be6:	69ba      	ldr	r2, [r7, #24]
 8016be8:	4413      	add	r3, r2
 8016bea:	8819      	ldrh	r1, [r3, #0]
 8016bec:	b282      	uxth	r2, r0
 8016bee:	8bbb      	ldrh	r3, [r7, #28]
 8016bf0:	005b      	lsls	r3, r3, #1
 8016bf2:	69b8      	ldr	r0, [r7, #24]
 8016bf4:	4403      	add	r3, r0
 8016bf6:	430a      	orrs	r2, r1
 8016bf8:	b292      	uxth	r2, r2
 8016bfa:	801a      	strh	r2, [r3, #0]
                iRegIndex++;
 8016bfc:	8bbb      	ldrh	r3, [r7, #28]
 8016bfe:	3301      	adds	r3, #1
 8016c00:	83bb      	strh	r3, [r7, #28]
                usNRegs--;
 8016c02:	893b      	ldrh	r3, [r7, #8]
 8016c04:	3b01      	subs	r3, #1
 8016c06:	813b      	strh	r3, [r7, #8]
            while (usNRegs > 0)
 8016c08:	893b      	ldrh	r3, [r7, #8]
 8016c0a:	2b00      	cmp	r3, #0
 8016c0c:	d1d9      	bne.n	8016bc2 <eMBMasterRegHoldingCB+0xb2>
            }
            break;
 8016c0e:	bf00      	nop
        switch (eMode)
 8016c10:	e001      	b.n	8016c16 <eMBMasterRegHoldingCB+0x106>
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 8016c12:	2301      	movs	r3, #1
 8016c14:	77fb      	strb	r3, [r7, #31]
    }
    return eStatus;
 8016c16:	7ffb      	ldrb	r3, [r7, #31]
}
 8016c18:	4618      	mov	r0, r3
 8016c1a:	3720      	adds	r7, #32
 8016c1c:	46bd      	mov	sp, r7
 8016c1e:	bd80      	pop	{r7, pc}
 8016c20:	2000dd28 	.word	0x2000dd28
 8016c24:	20004d9e 	.word	0x20004d9e

08016c28 <eMBMasterRegCoilsCB>:
 *
 * @return result
 */
eMBErrorCode eMBMasterRegCoilsCB(UCHAR * pucRegBuffer, USHORT usAddress,
        USHORT usNCoils, eMBRegisterMode eMode)
{
 8016c28:	b590      	push	{r4, r7, lr}
 8016c2a:	b08b      	sub	sp, #44	; 0x2c
 8016c2c:	af00      	add	r7, sp, #0
 8016c2e:	60f8      	str	r0, [r7, #12]
 8016c30:	4608      	mov	r0, r1
 8016c32:	4611      	mov	r1, r2
 8016c34:	461a      	mov	r2, r3
 8016c36:	4603      	mov	r3, r0
 8016c38:	817b      	strh	r3, [r7, #10]
 8016c3a:	460b      	mov	r3, r1
 8016c3c:	813b      	strh	r3, [r7, #8]
 8016c3e:	4613      	mov	r3, r2
 8016c40:	71fb      	strb	r3, [r7, #7]
    eMBErrorCode    eStatus = MB_ENOERR;
 8016c42:	2300      	movs	r3, #0
 8016c44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    USHORT          iRegIndex , iRegBitIndex , iNReg;
    UCHAR *         pucCoilBuf;
    USHORT          COIL_START;
    USHORT          COIL_NCOILS;
    USHORT          usCoilStart;
    iNReg =  usNCoils / 8 + 1;
 8016c48:	893b      	ldrh	r3, [r7, #8]
 8016c4a:	08db      	lsrs	r3, r3, #3
 8016c4c:	b29b      	uxth	r3, r3
 8016c4e:	3301      	adds	r3, #1
 8016c50:	847b      	strh	r3, [r7, #34]	; 0x22

    pucCoilBuf = ucMCoilBuf[ucMBMasterGetDestAddress() - 1];
 8016c52:	f7fe ff01 	bl	8015a58 <ucMBMasterGetDestAddress>
 8016c56:	4603      	mov	r3, r0
 8016c58:	3b01      	subs	r3, #1
 8016c5a:	005b      	lsls	r3, r3, #1
 8016c5c:	4a4b      	ldr	r2, [pc, #300]	; (8016d8c <eMBMasterRegCoilsCB+0x164>)
 8016c5e:	4413      	add	r3, r2
 8016c60:	61fb      	str	r3, [r7, #28]
    COIL_START = M_COIL_START;
 8016c62:	2300      	movs	r3, #0
 8016c64:	837b      	strh	r3, [r7, #26]
    COIL_NCOILS = M_COIL_NCOILS;
 8016c66:	2310      	movs	r3, #16
 8016c68:	833b      	strh	r3, [r7, #24]
    usCoilStart = usMCoilStart;
 8016c6a:	4b49      	ldr	r3, [pc, #292]	; (8016d90 <eMBMasterRegCoilsCB+0x168>)
 8016c6c:	881b      	ldrh	r3, [r3, #0]
 8016c6e:	82fb      	strh	r3, [r7, #22]

    /* if mode is read,the master will write the received date to buffer. */
    eMode = MB_REG_WRITE;
 8016c70:	2301      	movs	r3, #1
 8016c72:	71fb      	strb	r3, [r7, #7]

    /* it already plus one in modbus function method. */
    usAddress--;
 8016c74:	897b      	ldrh	r3, [r7, #10]
 8016c76:	3b01      	subs	r3, #1
 8016c78:	817b      	strh	r3, [r7, #10]

    if ((usAddress >= COIL_START)
 8016c7a:	897a      	ldrh	r2, [r7, #10]
 8016c7c:	8b7b      	ldrh	r3, [r7, #26]
 8016c7e:	429a      	cmp	r2, r3
 8016c80:	d37b      	bcc.n	8016d7a <eMBMasterRegCoilsCB+0x152>
            && (usAddress + usNCoils <= COIL_START + COIL_NCOILS))
 8016c82:	897a      	ldrh	r2, [r7, #10]
 8016c84:	893b      	ldrh	r3, [r7, #8]
 8016c86:	441a      	add	r2, r3
 8016c88:	8b79      	ldrh	r1, [r7, #26]
 8016c8a:	8b3b      	ldrh	r3, [r7, #24]
 8016c8c:	440b      	add	r3, r1
 8016c8e:	429a      	cmp	r2, r3
 8016c90:	dc73      	bgt.n	8016d7a <eMBMasterRegCoilsCB+0x152>
    {
        iRegIndex = (USHORT) (usAddress - usCoilStart) / 8;
 8016c92:	897a      	ldrh	r2, [r7, #10]
 8016c94:	8afb      	ldrh	r3, [r7, #22]
 8016c96:	1ad3      	subs	r3, r2, r3
 8016c98:	b29b      	uxth	r3, r3
 8016c9a:	08db      	lsrs	r3, r3, #3
 8016c9c:	84bb      	strh	r3, [r7, #36]	; 0x24
        iRegBitIndex = (USHORT) (usAddress - usCoilStart) % 8;
 8016c9e:	897a      	ldrh	r2, [r7, #10]
 8016ca0:	8afb      	ldrh	r3, [r7, #22]
 8016ca2:	1ad3      	subs	r3, r2, r3
 8016ca4:	b29b      	uxth	r3, r3
 8016ca6:	f003 0307 	and.w	r3, r3, #7
 8016caa:	82bb      	strh	r3, [r7, #20]
        switch (eMode)
 8016cac:	79fb      	ldrb	r3, [r7, #7]
 8016cae:	2b00      	cmp	r3, #0
 8016cb0:	d015      	beq.n	8016cde <eMBMasterRegCoilsCB+0xb6>
 8016cb2:	2b01      	cmp	r3, #1
 8016cb4:	d045      	beq.n	8016d42 <eMBMasterRegCoilsCB+0x11a>
 8016cb6:	e063      	b.n	8016d80 <eMBMasterRegCoilsCB+0x158>
        {
         /* read current coil values from the protocol stack. */
        case MB_REG_READ:
            while (iNReg > 0)
            {
                *pucRegBuffer++ = xMBUtilGetBits(&pucCoilBuf[iRegIndex++],
 8016cb8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016cba:	1c5a      	adds	r2, r3, #1
 8016cbc:	84ba      	strh	r2, [r7, #36]	; 0x24
 8016cbe:	461a      	mov	r2, r3
 8016cc0:	69fb      	ldr	r3, [r7, #28]
 8016cc2:	1898      	adds	r0, r3, r2
 8016cc4:	68fc      	ldr	r4, [r7, #12]
 8016cc6:	1c63      	adds	r3, r4, #1
 8016cc8:	60fb      	str	r3, [r7, #12]
 8016cca:	8abb      	ldrh	r3, [r7, #20]
 8016ccc:	2208      	movs	r2, #8
 8016cce:	4619      	mov	r1, r3
 8016cd0:	f7fe fb24 	bl	801531c <xMBUtilGetBits>
 8016cd4:	4603      	mov	r3, r0
 8016cd6:	7023      	strb	r3, [r4, #0]
                        						 iRegBitIndex, 8);
                iNReg--;
 8016cd8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016cda:	3b01      	subs	r3, #1
 8016cdc:	847b      	strh	r3, [r7, #34]	; 0x22
            while (iNReg > 0)
 8016cde:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016ce0:	2b00      	cmp	r3, #0
 8016ce2:	d1e9      	bne.n	8016cb8 <eMBMasterRegCoilsCB+0x90>
            }
            pucRegBuffer--;
 8016ce4:	68fb      	ldr	r3, [r7, #12]
 8016ce6:	3b01      	subs	r3, #1
 8016ce8:	60fb      	str	r3, [r7, #12]
            /* last coils */
            usNCoils = usNCoils % 8;
 8016cea:	893b      	ldrh	r3, [r7, #8]
 8016cec:	f003 0307 	and.w	r3, r3, #7
 8016cf0:	813b      	strh	r3, [r7, #8]
            /* filling zero to high bit */
            *pucRegBuffer = *pucRegBuffer << (8 - usNCoils);
 8016cf2:	68fb      	ldr	r3, [r7, #12]
 8016cf4:	781b      	ldrb	r3, [r3, #0]
 8016cf6:	461a      	mov	r2, r3
 8016cf8:	893b      	ldrh	r3, [r7, #8]
 8016cfa:	f1c3 0308 	rsb	r3, r3, #8
 8016cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8016d02:	b2da      	uxtb	r2, r3
 8016d04:	68fb      	ldr	r3, [r7, #12]
 8016d06:	701a      	strb	r2, [r3, #0]
            *pucRegBuffer = *pucRegBuffer >> (8 - usNCoils);
 8016d08:	68fb      	ldr	r3, [r7, #12]
 8016d0a:	781b      	ldrb	r3, [r3, #0]
 8016d0c:	461a      	mov	r2, r3
 8016d0e:	893b      	ldrh	r3, [r7, #8]
 8016d10:	f1c3 0308 	rsb	r3, r3, #8
 8016d14:	fa42 f303 	asr.w	r3, r2, r3
 8016d18:	b2da      	uxtb	r2, r3
 8016d1a:	68fb      	ldr	r3, [r7, #12]
 8016d1c:	701a      	strb	r2, [r3, #0]
            break;
 8016d1e:	e02b      	b.n	8016d78 <eMBMasterRegCoilsCB+0x150>

        /* write current coil values with new values from the protocol stack. */
        case MB_REG_WRITE:
            while (iNReg > 1)
            {
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, 8,
 8016d20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016d22:	1c5a      	adds	r2, r3, #1
 8016d24:	84ba      	strh	r2, [r7, #36]	; 0x24
 8016d26:	461a      	mov	r2, r3
 8016d28:	69fb      	ldr	r3, [r7, #28]
 8016d2a:	1898      	adds	r0, r3, r2
                        *pucRegBuffer++);
 8016d2c:	68fb      	ldr	r3, [r7, #12]
 8016d2e:	1c5a      	adds	r2, r3, #1
 8016d30:	60fa      	str	r2, [r7, #12]
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, 8,
 8016d32:	781b      	ldrb	r3, [r3, #0]
 8016d34:	8ab9      	ldrh	r1, [r7, #20]
 8016d36:	2208      	movs	r2, #8
 8016d38:	f7fe fa84 	bl	8015244 <xMBUtilSetBits>
                iNReg--;
 8016d3c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016d3e:	3b01      	subs	r3, #1
 8016d40:	847b      	strh	r3, [r7, #34]	; 0x22
            while (iNReg > 1)
 8016d42:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016d44:	2b01      	cmp	r3, #1
 8016d46:	d8eb      	bhi.n	8016d20 <eMBMasterRegCoilsCB+0xf8>
            }
            /* last coils */
            usNCoils = usNCoils % 8;
 8016d48:	893b      	ldrh	r3, [r7, #8]
 8016d4a:	f003 0307 	and.w	r3, r3, #7
 8016d4e:	813b      	strh	r3, [r7, #8]
            /* xMBUtilSetBits has bug when ucNBits is zero */
            if (usNCoils != 0)
 8016d50:	893b      	ldrh	r3, [r7, #8]
 8016d52:	2b00      	cmp	r3, #0
 8016d54:	d00f      	beq.n	8016d76 <eMBMasterRegCoilsCB+0x14e>
            {
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, usNCoils,
 8016d56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016d58:	1c5a      	adds	r2, r3, #1
 8016d5a:	84ba      	strh	r2, [r7, #36]	; 0x24
 8016d5c:	461a      	mov	r2, r3
 8016d5e:	69fb      	ldr	r3, [r7, #28]
 8016d60:	1898      	adds	r0, r3, r2
 8016d62:	893b      	ldrh	r3, [r7, #8]
 8016d64:	b2dc      	uxtb	r4, r3
                        *pucRegBuffer++);
 8016d66:	68fb      	ldr	r3, [r7, #12]
 8016d68:	1c5a      	adds	r2, r3, #1
 8016d6a:	60fa      	str	r2, [r7, #12]
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, usNCoils,
 8016d6c:	781b      	ldrb	r3, [r3, #0]
 8016d6e:	8ab9      	ldrh	r1, [r7, #20]
 8016d70:	4622      	mov	r2, r4
 8016d72:	f7fe fa67 	bl	8015244 <xMBUtilSetBits>
            }
            break;
 8016d76:	bf00      	nop
        switch (eMode)
 8016d78:	e002      	b.n	8016d80 <eMBMasterRegCoilsCB+0x158>
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 8016d7a:	2301      	movs	r3, #1
 8016d7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    return eStatus;
 8016d80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8016d84:	4618      	mov	r0, r3
 8016d86:	372c      	adds	r7, #44	; 0x2c
 8016d88:	46bd      	mov	sp, r7
 8016d8a:	bd90      	pop	{r4, r7, pc}
 8016d8c:	2000dd08 	.word	0x2000dd08
 8016d90:	20004d9a 	.word	0x20004d9a

08016d94 <eMBMasterRegDiscreteCB>:
 * @param usNDiscrete discrete number
 *
 * @return result
 */
eMBErrorCode eMBMasterRegDiscreteCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete )
{
 8016d94:	b590      	push	{r4, r7, lr}
 8016d96:	b089      	sub	sp, #36	; 0x24
 8016d98:	af00      	add	r7, sp, #0
 8016d9a:	6078      	str	r0, [r7, #4]
 8016d9c:	460b      	mov	r3, r1
 8016d9e:	807b      	strh	r3, [r7, #2]
 8016da0:	4613      	mov	r3, r2
 8016da2:	803b      	strh	r3, [r7, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 8016da4:	2300      	movs	r3, #0
 8016da6:	77fb      	strb	r3, [r7, #31]
    USHORT          iRegIndex , iRegBitIndex , iNReg;
    UCHAR *         pucDiscreteInputBuf;
    USHORT          DISCRETE_INPUT_START;
    USHORT          DISCRETE_INPUT_NDISCRETES;
    USHORT          usDiscreteInputStart;
    iNReg =  usNDiscrete / 8 + 1;
 8016da8:	883b      	ldrh	r3, [r7, #0]
 8016daa:	08db      	lsrs	r3, r3, #3
 8016dac:	b29b      	uxth	r3, r3
 8016dae:	3301      	adds	r3, #1
 8016db0:	837b      	strh	r3, [r7, #26]

    pucDiscreteInputBuf = ucMDiscInBuf[ucMBMasterGetDestAddress() - 1];
 8016db2:	f7fe fe51 	bl	8015a58 <ucMBMasterGetDestAddress>
 8016db6:	4603      	mov	r3, r0
 8016db8:	3b01      	subs	r3, #1
 8016dba:	005b      	lsls	r3, r3, #1
 8016dbc:	4a2c      	ldr	r2, [pc, #176]	; (8016e70 <eMBMasterRegDiscreteCB+0xdc>)
 8016dbe:	4413      	add	r3, r2
 8016dc0:	617b      	str	r3, [r7, #20]
    DISCRETE_INPUT_START = M_DISCRETE_INPUT_START;
 8016dc2:	2300      	movs	r3, #0
 8016dc4:	827b      	strh	r3, [r7, #18]
    DISCRETE_INPUT_NDISCRETES = M_DISCRETE_INPUT_NDISCRETES;
 8016dc6:	2310      	movs	r3, #16
 8016dc8:	823b      	strh	r3, [r7, #16]
    usDiscreteInputStart = usMDiscInStart;
 8016dca:	4b2a      	ldr	r3, [pc, #168]	; (8016e74 <eMBMasterRegDiscreteCB+0xe0>)
 8016dcc:	881b      	ldrh	r3, [r3, #0]
 8016dce:	81fb      	strh	r3, [r7, #14]

    /* it already plus one in modbus function method. */
    usAddress--;
 8016dd0:	887b      	ldrh	r3, [r7, #2]
 8016dd2:	3b01      	subs	r3, #1
 8016dd4:	807b      	strh	r3, [r7, #2]

    if ((usAddress >= DISCRETE_INPUT_START)
 8016dd6:	887a      	ldrh	r2, [r7, #2]
 8016dd8:	8a7b      	ldrh	r3, [r7, #18]
 8016dda:	429a      	cmp	r2, r3
 8016ddc:	d341      	bcc.n	8016e62 <eMBMasterRegDiscreteCB+0xce>
            && (usAddress + usNDiscrete    <= DISCRETE_INPUT_START + DISCRETE_INPUT_NDISCRETES))
 8016dde:	887a      	ldrh	r2, [r7, #2]
 8016de0:	883b      	ldrh	r3, [r7, #0]
 8016de2:	441a      	add	r2, r3
 8016de4:	8a79      	ldrh	r1, [r7, #18]
 8016de6:	8a3b      	ldrh	r3, [r7, #16]
 8016de8:	440b      	add	r3, r1
 8016dea:	429a      	cmp	r2, r3
 8016dec:	dc39      	bgt.n	8016e62 <eMBMasterRegDiscreteCB+0xce>
    {
        iRegIndex = (USHORT) (usAddress - usDiscreteInputStart) / 8;
 8016dee:	887a      	ldrh	r2, [r7, #2]
 8016df0:	89fb      	ldrh	r3, [r7, #14]
 8016df2:	1ad3      	subs	r3, r2, r3
 8016df4:	b29b      	uxth	r3, r3
 8016df6:	08db      	lsrs	r3, r3, #3
 8016df8:	83bb      	strh	r3, [r7, #28]
        iRegBitIndex = (USHORT) (usAddress - usDiscreteInputStart) % 8;
 8016dfa:	887a      	ldrh	r2, [r7, #2]
 8016dfc:	89fb      	ldrh	r3, [r7, #14]
 8016dfe:	1ad3      	subs	r3, r2, r3
 8016e00:	b29b      	uxth	r3, r3
 8016e02:	f003 0307 	and.w	r3, r3, #7
 8016e06:	81bb      	strh	r3, [r7, #12]

        /* write current discrete values with new values from the protocol stack. */
        while (iNReg > 1)
 8016e08:	e010      	b.n	8016e2c <eMBMasterRegDiscreteCB+0x98>
        {
            xMBUtilSetBits(&pucDiscreteInputBuf[iRegIndex++], iRegBitIndex, 8,
 8016e0a:	8bbb      	ldrh	r3, [r7, #28]
 8016e0c:	1c5a      	adds	r2, r3, #1
 8016e0e:	83ba      	strh	r2, [r7, #28]
 8016e10:	461a      	mov	r2, r3
 8016e12:	697b      	ldr	r3, [r7, #20]
 8016e14:	1898      	adds	r0, r3, r2
                    *pucRegBuffer++);
 8016e16:	687b      	ldr	r3, [r7, #4]
 8016e18:	1c5a      	adds	r2, r3, #1
 8016e1a:	607a      	str	r2, [r7, #4]
            xMBUtilSetBits(&pucDiscreteInputBuf[iRegIndex++], iRegBitIndex, 8,
 8016e1c:	781b      	ldrb	r3, [r3, #0]
 8016e1e:	89b9      	ldrh	r1, [r7, #12]
 8016e20:	2208      	movs	r2, #8
 8016e22:	f7fe fa0f 	bl	8015244 <xMBUtilSetBits>
            iNReg--;
 8016e26:	8b7b      	ldrh	r3, [r7, #26]
 8016e28:	3b01      	subs	r3, #1
 8016e2a:	837b      	strh	r3, [r7, #26]
        while (iNReg > 1)
 8016e2c:	8b7b      	ldrh	r3, [r7, #26]
 8016e2e:	2b01      	cmp	r3, #1
 8016e30:	d8eb      	bhi.n	8016e0a <eMBMasterRegDiscreteCB+0x76>
        }
        /* last discrete */
        usNDiscrete = usNDiscrete % 8;
 8016e32:	883b      	ldrh	r3, [r7, #0]
 8016e34:	f003 0307 	and.w	r3, r3, #7
 8016e38:	803b      	strh	r3, [r7, #0]
        /* xMBUtilSetBits has bug when ucNBits is zero */
        if (usNDiscrete != 0)
 8016e3a:	883b      	ldrh	r3, [r7, #0]
 8016e3c:	2b00      	cmp	r3, #0
 8016e3e:	d012      	beq.n	8016e66 <eMBMasterRegDiscreteCB+0xd2>
        {
            xMBUtilSetBits(&pucDiscreteInputBuf[iRegIndex++], iRegBitIndex,
 8016e40:	8bbb      	ldrh	r3, [r7, #28]
 8016e42:	1c5a      	adds	r2, r3, #1
 8016e44:	83ba      	strh	r2, [r7, #28]
 8016e46:	461a      	mov	r2, r3
 8016e48:	697b      	ldr	r3, [r7, #20]
 8016e4a:	1898      	adds	r0, r3, r2
 8016e4c:	883b      	ldrh	r3, [r7, #0]
 8016e4e:	b2dc      	uxtb	r4, r3
                    usNDiscrete, *pucRegBuffer++);
 8016e50:	687b      	ldr	r3, [r7, #4]
 8016e52:	1c5a      	adds	r2, r3, #1
 8016e54:	607a      	str	r2, [r7, #4]
            xMBUtilSetBits(&pucDiscreteInputBuf[iRegIndex++], iRegBitIndex,
 8016e56:	781b      	ldrb	r3, [r3, #0]
 8016e58:	89b9      	ldrh	r1, [r7, #12]
 8016e5a:	4622      	mov	r2, r4
 8016e5c:	f7fe f9f2 	bl	8015244 <xMBUtilSetBits>
        if (usNDiscrete != 0)
 8016e60:	e001      	b.n	8016e66 <eMBMasterRegDiscreteCB+0xd2>
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 8016e62:	2301      	movs	r3, #1
 8016e64:	77fb      	strb	r3, [r7, #31]
    }

    return eStatus;
 8016e66:	7ffb      	ldrb	r3, [r7, #31]
}
 8016e68:	4618      	mov	r0, r3
 8016e6a:	3724      	adds	r7, #36	; 0x24
 8016e6c:	46bd      	mov	sp, r7
 8016e6e:	bd90      	pop	{r4, r7, pc}
 8016e70:	2000dce8 	.word	0x2000dce8
 8016e74:	20004d98 	.word	0x20004d98

08016e78 <usMBCRC16>:
    0x41, 0x81, 0x80, 0x40
};

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
 8016e78:	b480      	push	{r7}
 8016e7a:	b085      	sub	sp, #20
 8016e7c:	af00      	add	r7, sp, #0
 8016e7e:	6078      	str	r0, [r7, #4]
 8016e80:	460b      	mov	r3, r1
 8016e82:	807b      	strh	r3, [r7, #2]
    UCHAR           ucCRCHi = 0xFF;
 8016e84:	23ff      	movs	r3, #255	; 0xff
 8016e86:	73fb      	strb	r3, [r7, #15]
    UCHAR           ucCRCLo = 0xFF;
 8016e88:	23ff      	movs	r3, #255	; 0xff
 8016e8a:	73bb      	strb	r3, [r7, #14]
    int             iIndex;

    while( usLen-- )
 8016e8c:	e013      	b.n	8016eb6 <usMBCRC16+0x3e>
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
 8016e8e:	687b      	ldr	r3, [r7, #4]
 8016e90:	1c5a      	adds	r2, r3, #1
 8016e92:	607a      	str	r2, [r7, #4]
 8016e94:	781a      	ldrb	r2, [r3, #0]
 8016e96:	7bbb      	ldrb	r3, [r7, #14]
 8016e98:	4053      	eors	r3, r2
 8016e9a:	b2db      	uxtb	r3, r3
 8016e9c:	60bb      	str	r3, [r7, #8]
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 8016e9e:	4a0f      	ldr	r2, [pc, #60]	; (8016edc <usMBCRC16+0x64>)
 8016ea0:	68bb      	ldr	r3, [r7, #8]
 8016ea2:	4413      	add	r3, r2
 8016ea4:	781a      	ldrb	r2, [r3, #0]
 8016ea6:	7bfb      	ldrb	r3, [r7, #15]
 8016ea8:	4053      	eors	r3, r2
 8016eaa:	73bb      	strb	r3, [r7, #14]
        ucCRCHi = aucCRCLo[iIndex];
 8016eac:	4a0c      	ldr	r2, [pc, #48]	; (8016ee0 <usMBCRC16+0x68>)
 8016eae:	68bb      	ldr	r3, [r7, #8]
 8016eb0:	4413      	add	r3, r2
 8016eb2:	781b      	ldrb	r3, [r3, #0]
 8016eb4:	73fb      	strb	r3, [r7, #15]
    while( usLen-- )
 8016eb6:	887b      	ldrh	r3, [r7, #2]
 8016eb8:	1e5a      	subs	r2, r3, #1
 8016eba:	807a      	strh	r2, [r7, #2]
 8016ebc:	2b00      	cmp	r3, #0
 8016ebe:	d1e6      	bne.n	8016e8e <usMBCRC16+0x16>
    }
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
 8016ec0:	7bfb      	ldrb	r3, [r7, #15]
 8016ec2:	021b      	lsls	r3, r3, #8
 8016ec4:	b21a      	sxth	r2, r3
 8016ec6:	7bbb      	ldrb	r3, [r7, #14]
 8016ec8:	b21b      	sxth	r3, r3
 8016eca:	4313      	orrs	r3, r2
 8016ecc:	b21b      	sxth	r3, r3
 8016ece:	b29b      	uxth	r3, r3
}
 8016ed0:	4618      	mov	r0, r3
 8016ed2:	3714      	adds	r7, #20
 8016ed4:	46bd      	mov	sp, r7
 8016ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016eda:	4770      	bx	lr
 8016edc:	0801b85c 	.word	0x0801b85c
 8016ee0:	0801b95c 	.word	0x0801b95c

08016ee4 <eMBRTUInit>:
static volatile USHORT usRcvBufferPos;

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBRTUInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 8016ee4:	b580      	push	{r7, lr}
 8016ee6:	b084      	sub	sp, #16
 8016ee8:	af00      	add	r7, sp, #0
 8016eea:	603a      	str	r2, [r7, #0]
 8016eec:	461a      	mov	r2, r3
 8016eee:	4603      	mov	r3, r0
 8016ef0:	71fb      	strb	r3, [r7, #7]
 8016ef2:	460b      	mov	r3, r1
 8016ef4:	71bb      	strb	r3, [r7, #6]
 8016ef6:	4613      	mov	r3, r2
 8016ef8:	717b      	strb	r3, [r7, #5]
    eMBErrorCode    eStatus = MB_ENOERR;
 8016efa:	2300      	movs	r3, #0
 8016efc:	73fb      	strb	r3, [r7, #15]
    ULONG           usTimerT35_50us;

    ( void )ucSlaveAddress;
    ENTER_CRITICAL_SECTION(  );
 8016efe:	f7fe ff15 	bl	8015d2c <EnterCriticalSection>

    /* Modbus RTU uses 8 Databits. */
    if( xMBPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
 8016f02:	797b      	ldrb	r3, [r7, #5]
 8016f04:	79b8      	ldrb	r0, [r7, #6]
 8016f06:	2208      	movs	r2, #8
 8016f08:	6839      	ldr	r1, [r7, #0]
 8016f0a:	f7ff f92d 	bl	8016168 <xMBPortSerialInit>
 8016f0e:	4603      	mov	r3, r0
 8016f10:	2b01      	cmp	r3, #1
 8016f12:	d002      	beq.n	8016f1a <eMBRTUInit+0x36>
    {
        eStatus = MB_EPORTERR;
 8016f14:	2303      	movs	r3, #3
 8016f16:	73fb      	strb	r3, [r7, #15]
 8016f18:	e016      	b.n	8016f48 <eMBRTUInit+0x64>
    else
    {
        /* If baudrate > 19200 then we should use the fixed timer values
         * t35 = 1750us. Otherwise t35 must be 3.5 times the character time.
         */
        if( ulBaudRate > 19200 )
 8016f1a:	683b      	ldr	r3, [r7, #0]
 8016f1c:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
 8016f20:	d902      	bls.n	8016f28 <eMBRTUInit+0x44>
        {
            usTimerT35_50us = 35;       /* 1800us. */
 8016f22:	2323      	movs	r3, #35	; 0x23
 8016f24:	60bb      	str	r3, [r7, #8]
 8016f26:	e005      	b.n	8016f34 <eMBRTUInit+0x50>
             *             = 11 * Ticks_per_1s / Baudrate
             *             = 220000 / Baudrate
             * The reload for t3.5 is 1.5 times this value and similary
             * for t3.5.
             */
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
 8016f28:	683b      	ldr	r3, [r7, #0]
 8016f2a:	005b      	lsls	r3, r3, #1
 8016f2c:	4a0a      	ldr	r2, [pc, #40]	; (8016f58 <eMBRTUInit+0x74>)
 8016f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8016f32:	60bb      	str	r3, [r7, #8]
        }
        if( xMBPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
 8016f34:	68bb      	ldr	r3, [r7, #8]
 8016f36:	b29b      	uxth	r3, r3
 8016f38:	4618      	mov	r0, r3
 8016f3a:	f7ff fa59 	bl	80163f0 <xMBPortTimersInit>
 8016f3e:	4603      	mov	r3, r0
 8016f40:	2b01      	cmp	r3, #1
 8016f42:	d001      	beq.n	8016f48 <eMBRTUInit+0x64>
        {
            eStatus = MB_EPORTERR;
 8016f44:	2303      	movs	r3, #3
 8016f46:	73fb      	strb	r3, [r7, #15]
        }
    }
    EXIT_CRITICAL_SECTION(  );
 8016f48:	f7fe fef6 	bl	8015d38 <ExitCriticalSection>

    return eStatus;
 8016f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8016f4e:	4618      	mov	r0, r3
 8016f50:	3710      	adds	r7, #16
 8016f52:	46bd      	mov	sp, r7
 8016f54:	bd80      	pop	{r7, pc}
 8016f56:	bf00      	nop
 8016f58:	00177fa0 	.word	0x00177fa0

08016f5c <eMBRTUStart>:

void
eMBRTUStart( void )
{
 8016f5c:	b580      	push	{r7, lr}
 8016f5e:	af00      	add	r7, sp, #0
    ENTER_CRITICAL_SECTION(  );
 8016f60:	f7fe fee4 	bl	8015d2c <EnterCriticalSection>
    /* Initially the receiver is in the state STATE_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_RX_INIT;
 8016f64:	4b06      	ldr	r3, [pc, #24]	; (8016f80 <eMBRTUStart+0x24>)
 8016f66:	2200      	movs	r2, #0
 8016f68:	701a      	strb	r2, [r3, #0]
    vMBPortSerialEnable( TRUE, FALSE );
 8016f6a:	2100      	movs	r1, #0
 8016f6c:	2001      	movs	r0, #1
 8016f6e:	f7ff f8c3 	bl	80160f8 <vMBPortSerialEnable>
    vMBPortTimersEnable(  );
 8016f72:	f7ff fa7d 	bl	8016470 <vMBPortTimersEnable>

    EXIT_CRITICAL_SECTION(  );
 8016f76:	f7fe fedf 	bl	8015d38 <ExitCriticalSection>
}
 8016f7a:	bf00      	nop
 8016f7c:	bd80      	pop	{r7, pc}
 8016f7e:	bf00      	nop
 8016f80:	20004da1 	.word	0x20004da1

08016f84 <eMBRTUStop>:

void
eMBRTUStop( void )
{
 8016f84:	b580      	push	{r7, lr}
 8016f86:	af00      	add	r7, sp, #0
    ENTER_CRITICAL_SECTION(  );
 8016f88:	f7fe fed0 	bl	8015d2c <EnterCriticalSection>
    vMBPortSerialEnable( FALSE, FALSE );
 8016f8c:	2100      	movs	r1, #0
 8016f8e:	2000      	movs	r0, #0
 8016f90:	f7ff f8b2 	bl	80160f8 <vMBPortSerialEnable>
    vMBPortTimersDisable(  );
 8016f94:	f7ff fa7e 	bl	8016494 <vMBPortTimersDisable>
    EXIT_CRITICAL_SECTION(  );
 8016f98:	f7fe fece 	bl	8015d38 <ExitCriticalSection>
}
 8016f9c:	bf00      	nop
 8016f9e:	bd80      	pop	{r7, pc}

08016fa0 <eMBRTUReceive>:

eMBErrorCode
eMBRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
 8016fa0:	b580      	push	{r7, lr}
 8016fa2:	b086      	sub	sp, #24
 8016fa4:	af00      	add	r7, sp, #0
 8016fa6:	60f8      	str	r0, [r7, #12]
 8016fa8:	60b9      	str	r1, [r7, #8]
 8016faa:	607a      	str	r2, [r7, #4]
    BOOL            xFrameReceived = FALSE;
 8016fac:	2300      	movs	r3, #0
 8016fae:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eStatus = MB_ENOERR;
 8016fb0:	2300      	movs	r3, #0
 8016fb2:	75fb      	strb	r3, [r7, #23]

    (void)(xFrameReceived);

    ENTER_CRITICAL_SECTION(  );
 8016fb4:	f7fe feba 	bl	8015d2c <EnterCriticalSection>
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );
 8016fb8:	4b1a      	ldr	r3, [pc, #104]	; (8017024 <eMBRTUReceive+0x84>)
 8016fba:	881b      	ldrh	r3, [r3, #0]
 8016fbc:	b29b      	uxth	r3, r3
 8016fbe:	2bff      	cmp	r3, #255	; 0xff
 8016fc0:	d905      	bls.n	8016fce <eMBRTUReceive+0x2e>
 8016fc2:	4b19      	ldr	r3, [pc, #100]	; (8017028 <eMBRTUReceive+0x88>)
 8016fc4:	4a19      	ldr	r2, [pc, #100]	; (801702c <eMBRTUReceive+0x8c>)
 8016fc6:	21a0      	movs	r1, #160	; 0xa0
 8016fc8:	4819      	ldr	r0, [pc, #100]	; (8017030 <eMBRTUReceive+0x90>)
 8016fca:	f000 fc79 	bl	80178c0 <__assert_func>

    /* Length and CRC check */
    if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
 8016fce:	4b15      	ldr	r3, [pc, #84]	; (8017024 <eMBRTUReceive+0x84>)
 8016fd0:	881b      	ldrh	r3, [r3, #0]
 8016fd2:	b29b      	uxth	r3, r3
 8016fd4:	2b03      	cmp	r3, #3
 8016fd6:	d91b      	bls.n	8017010 <eMBRTUReceive+0x70>
        && ( usMBCRC16( ( UCHAR * ) ucRTUBuf, usRcvBufferPos ) == 0 ) )
 8016fd8:	4b12      	ldr	r3, [pc, #72]	; (8017024 <eMBRTUReceive+0x84>)
 8016fda:	881b      	ldrh	r3, [r3, #0]
 8016fdc:	b29b      	uxth	r3, r3
 8016fde:	4619      	mov	r1, r3
 8016fe0:	4814      	ldr	r0, [pc, #80]	; (8017034 <eMBRTUReceive+0x94>)
 8016fe2:	f7ff ff49 	bl	8016e78 <usMBCRC16>
 8016fe6:	4603      	mov	r3, r0
 8016fe8:	2b00      	cmp	r3, #0
 8016fea:	d111      	bne.n	8017010 <eMBRTUReceive+0x70>
    {
        /* Save the address field. All frames are passed to the upper layed
         * and the decision if a frame is used is done there.
         */
        *pucRcvAddress = ucRTUBuf[MB_SER_PDU_ADDR_OFF];
 8016fec:	4b11      	ldr	r3, [pc, #68]	; (8017034 <eMBRTUReceive+0x94>)
 8016fee:	781b      	ldrb	r3, [r3, #0]
 8016ff0:	b2da      	uxtb	r2, r3
 8016ff2:	68fb      	ldr	r3, [r7, #12]
 8016ff4:	701a      	strb	r2, [r3, #0]

        /* Total length of Modbus-PDU is Modbus-Serial-Line-PDU minus
         * size of address field and CRC checksum.
         */
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 8016ff6:	4b0b      	ldr	r3, [pc, #44]	; (8017024 <eMBRTUReceive+0x84>)
 8016ff8:	881b      	ldrh	r3, [r3, #0]
 8016ffa:	b29b      	uxth	r3, r3
 8016ffc:	3b03      	subs	r3, #3
 8016ffe:	b29a      	uxth	r2, r3
 8017000:	687b      	ldr	r3, [r7, #4]
 8017002:	801a      	strh	r2, [r3, #0]

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
 8017004:	68bb      	ldr	r3, [r7, #8]
 8017006:	4a0c      	ldr	r2, [pc, #48]	; (8017038 <eMBRTUReceive+0x98>)
 8017008:	601a      	str	r2, [r3, #0]
        xFrameReceived = TRUE;
 801700a:	2301      	movs	r3, #1
 801700c:	75bb      	strb	r3, [r7, #22]
 801700e:	e001      	b.n	8017014 <eMBRTUReceive+0x74>
    }
    else
    {
        eStatus = MB_EIO;
 8017010:	2305      	movs	r3, #5
 8017012:	75fb      	strb	r3, [r7, #23]
    }

    EXIT_CRITICAL_SECTION(  );
 8017014:	f7fe fe90 	bl	8015d38 <ExitCriticalSection>
    return eStatus;
 8017018:	7dfb      	ldrb	r3, [r7, #23]
}
 801701a:	4618      	mov	r0, r3
 801701c:	3718      	adds	r7, #24
 801701e:	46bd      	mov	sp, r7
 8017020:	bd80      	pop	{r7, pc}
 8017022:	bf00      	nop
 8017024:	20004daa 	.word	0x20004daa
 8017028:	0801b604 	.word	0x0801b604
 801702c:	0801ba5c 	.word	0x0801ba5c
 8017030:	0801b62c 	.word	0x0801b62c
 8017034:	2000e128 	.word	0x2000e128
 8017038:	2000e129 	.word	0x2000e129

0801703c <eMBRTUSend>:

eMBErrorCode
eMBRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
 801703c:	b580      	push	{r7, lr}
 801703e:	b084      	sub	sp, #16
 8017040:	af00      	add	r7, sp, #0
 8017042:	4603      	mov	r3, r0
 8017044:	6039      	str	r1, [r7, #0]
 8017046:	71fb      	strb	r3, [r7, #7]
 8017048:	4613      	mov	r3, r2
 801704a:	80bb      	strh	r3, [r7, #4]
    eMBErrorCode    eStatus = MB_ENOERR;
 801704c:	2300      	movs	r3, #0
 801704e:	73fb      	strb	r3, [r7, #15]
    USHORT          usCRC16;

    ENTER_CRITICAL_SECTION(  );
 8017050:	f7fe fe6c 	bl	8015d2c <EnterCriticalSection>

    /* Check if the receiver is still in idle state. If not we where to
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_RX_IDLE )
 8017054:	4b26      	ldr	r3, [pc, #152]	; (80170f0 <eMBRTUSend+0xb4>)
 8017056:	781b      	ldrb	r3, [r3, #0]
 8017058:	b2db      	uxtb	r3, r3
 801705a:	2b01      	cmp	r3, #1
 801705c:	d13f      	bne.n	80170de <eMBRTUSend+0xa2>
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
 801705e:	683b      	ldr	r3, [r7, #0]
 8017060:	3b01      	subs	r3, #1
 8017062:	4a24      	ldr	r2, [pc, #144]	; (80170f4 <eMBRTUSend+0xb8>)
 8017064:	6013      	str	r3, [r2, #0]
        usSndBufferCount = 1;
 8017066:	4b24      	ldr	r3, [pc, #144]	; (80170f8 <eMBRTUSend+0xbc>)
 8017068:	2201      	movs	r2, #1
 801706a:	801a      	strh	r2, [r3, #0]

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
        pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
 801706c:	4b21      	ldr	r3, [pc, #132]	; (80170f4 <eMBRTUSend+0xb8>)
 801706e:	681b      	ldr	r3, [r3, #0]
 8017070:	79fa      	ldrb	r2, [r7, #7]
 8017072:	701a      	strb	r2, [r3, #0]
        usSndBufferCount += usLength;
 8017074:	4b20      	ldr	r3, [pc, #128]	; (80170f8 <eMBRTUSend+0xbc>)
 8017076:	881b      	ldrh	r3, [r3, #0]
 8017078:	b29a      	uxth	r2, r3
 801707a:	88bb      	ldrh	r3, [r7, #4]
 801707c:	4413      	add	r3, r2
 801707e:	b29a      	uxth	r2, r3
 8017080:	4b1d      	ldr	r3, [pc, #116]	; (80170f8 <eMBRTUSend+0xbc>)
 8017082:	801a      	strh	r2, [r3, #0]

        /* Calculate CRC16 checksum for Modbus-Serial-Line-PDU. */
        usCRC16 = usMBCRC16( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );
 8017084:	4b1b      	ldr	r3, [pc, #108]	; (80170f4 <eMBRTUSend+0xb8>)
 8017086:	681b      	ldr	r3, [r3, #0]
 8017088:	4a1b      	ldr	r2, [pc, #108]	; (80170f8 <eMBRTUSend+0xbc>)
 801708a:	8812      	ldrh	r2, [r2, #0]
 801708c:	b292      	uxth	r2, r2
 801708e:	4611      	mov	r1, r2
 8017090:	4618      	mov	r0, r3
 8017092:	f7ff fef1 	bl	8016e78 <usMBCRC16>
 8017096:	4603      	mov	r3, r0
 8017098:	81bb      	strh	r3, [r7, #12]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
 801709a:	4b17      	ldr	r3, [pc, #92]	; (80170f8 <eMBRTUSend+0xbc>)
 801709c:	881b      	ldrh	r3, [r3, #0]
 801709e:	b29b      	uxth	r3, r3
 80170a0:	1c5a      	adds	r2, r3, #1
 80170a2:	b291      	uxth	r1, r2
 80170a4:	4a14      	ldr	r2, [pc, #80]	; (80170f8 <eMBRTUSend+0xbc>)
 80170a6:	8011      	strh	r1, [r2, #0]
 80170a8:	461a      	mov	r2, r3
 80170aa:	89bb      	ldrh	r3, [r7, #12]
 80170ac:	b2d9      	uxtb	r1, r3
 80170ae:	4b13      	ldr	r3, [pc, #76]	; (80170fc <eMBRTUSend+0xc0>)
 80170b0:	5499      	strb	r1, [r3, r2]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 80170b2:	89bb      	ldrh	r3, [r7, #12]
 80170b4:	0a1b      	lsrs	r3, r3, #8
 80170b6:	b299      	uxth	r1, r3
 80170b8:	4b0f      	ldr	r3, [pc, #60]	; (80170f8 <eMBRTUSend+0xbc>)
 80170ba:	881b      	ldrh	r3, [r3, #0]
 80170bc:	b29b      	uxth	r3, r3
 80170be:	1c5a      	adds	r2, r3, #1
 80170c0:	b290      	uxth	r0, r2
 80170c2:	4a0d      	ldr	r2, [pc, #52]	; (80170f8 <eMBRTUSend+0xbc>)
 80170c4:	8010      	strh	r0, [r2, #0]
 80170c6:	461a      	mov	r2, r3
 80170c8:	b2c9      	uxtb	r1, r1
 80170ca:	4b0c      	ldr	r3, [pc, #48]	; (80170fc <eMBRTUSend+0xc0>)
 80170cc:	5499      	strb	r1, [r3, r2]
		#if MB_RTU_SLAVE_USE_RS485
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
		#endif

        /*  Activate the transmitter. */
        eSndState = STATE_TX_XMIT;
 80170ce:	4b0c      	ldr	r3, [pc, #48]	; (8017100 <eMBRTUSend+0xc4>)
 80170d0:	2201      	movs	r2, #1
 80170d2:	701a      	strb	r2, [r3, #0]
        vMBPortSerialEnable( FALSE, TRUE );
 80170d4:	2101      	movs	r1, #1
 80170d6:	2000      	movs	r0, #0
 80170d8:	f7ff f80e 	bl	80160f8 <vMBPortSerialEnable>
 80170dc:	e001      	b.n	80170e2 <eMBRTUSend+0xa6>
    }
    else
    {
        eStatus = MB_EIO;
 80170de:	2305      	movs	r3, #5
 80170e0:	73fb      	strb	r3, [r7, #15]
    }
    EXIT_CRITICAL_SECTION(  );
 80170e2:	f7fe fe29 	bl	8015d38 <ExitCriticalSection>
    return eStatus;
 80170e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80170e8:	4618      	mov	r0, r3
 80170ea:	3710      	adds	r7, #16
 80170ec:	46bd      	mov	sp, r7
 80170ee:	bd80      	pop	{r7, pc}
 80170f0:	20004da1 	.word	0x20004da1
 80170f4:	20004da4 	.word	0x20004da4
 80170f8:	20004da8 	.word	0x20004da8
 80170fc:	2000e128 	.word	0x2000e128
 8017100:	20004da0 	.word	0x20004da0

08017104 <xMBRTUReceiveFSM>:

BOOL
xMBRTUReceiveFSM( void )		//run in UART_ISR - thread mode
{
 8017104:	b580      	push	{r7, lr}
 8017106:	b082      	sub	sp, #8
 8017108:	af00      	add	r7, sp, #0
    BOOL            xTaskNeedSwitch = FALSE;
 801710a:	2300      	movs	r3, #0
 801710c:	71fb      	strb	r3, [r7, #7]
    UCHAR           ucByte;

    assert( eSndState == STATE_TX_IDLE );
 801710e:	4b2a      	ldr	r3, [pc, #168]	; (80171b8 <xMBRTUReceiveFSM+0xb4>)
 8017110:	781b      	ldrb	r3, [r3, #0]
 8017112:	b2db      	uxtb	r3, r3
 8017114:	2b00      	cmp	r3, #0
 8017116:	d005      	beq.n	8017124 <xMBRTUReceiveFSM+0x20>
 8017118:	4b28      	ldr	r3, [pc, #160]	; (80171bc <xMBRTUReceiveFSM+0xb8>)
 801711a:	4a29      	ldr	r2, [pc, #164]	; (80171c0 <xMBRTUReceiveFSM+0xbc>)
 801711c:	21f2      	movs	r1, #242	; 0xf2
 801711e:	4829      	ldr	r0, [pc, #164]	; (80171c4 <xMBRTUReceiveFSM+0xc0>)
 8017120:	f000 fbce 	bl	80178c0 <__assert_func>

    /* Always read the character. */
    ( void )xMBPortSerialGetByte( ( CHAR * ) & ucByte );
 8017124:	1dbb      	adds	r3, r7, #6
 8017126:	4618      	mov	r0, r3
 8017128:	f7ff f844 	bl	80161b4 <xMBPortSerialGetByte>

    switch ( eRcvState )
 801712c:	4b26      	ldr	r3, [pc, #152]	; (80171c8 <xMBRTUReceiveFSM+0xc4>)
 801712e:	781b      	ldrb	r3, [r3, #0]
 8017130:	b2db      	uxtb	r3, r3
 8017132:	2b03      	cmp	r3, #3
 8017134:	d83b      	bhi.n	80171ae <xMBRTUReceiveFSM+0xaa>
 8017136:	a201      	add	r2, pc, #4	; (adr r2, 801713c <xMBRTUReceiveFSM+0x38>)
 8017138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801713c:	0801714d 	.word	0x0801714d
 8017140:	08017159 	.word	0x08017159
 8017144:	08017181 	.word	0x08017181
 8017148:	08017153 	.word	0x08017153
    {
        /* If we have received a character in the init state we have to
         * wait until the frame is finished.
         */
    case STATE_RX_INIT:
        vMBPortTimersEnable(  );
 801714c:	f7ff f990 	bl	8016470 <vMBPortTimersEnable>
        break;
 8017150:	e02d      	b.n	80171ae <xMBRTUReceiveFSM+0xaa>

        /* In the error state we wait until all characters in the
         * damaged frame are transmitted.
         */
    case STATE_RX_ERROR:
        vMBPortTimersEnable(  );
 8017152:	f7ff f98d 	bl	8016470 <vMBPortTimersEnable>
        break;
 8017156:	e02a      	b.n	80171ae <xMBRTUReceiveFSM+0xaa>
        /* In the idle state we wait for a new character. If a character
         * is received the t1.5 and t3.5 timers are started and the
         * receiver is in the state STATE_RX_RECEIVCE.
         */
    case STATE_RX_IDLE:
        usRcvBufferPos = 0;
 8017158:	4b1c      	ldr	r3, [pc, #112]	; (80171cc <xMBRTUReceiveFSM+0xc8>)
 801715a:	2200      	movs	r2, #0
 801715c:	801a      	strh	r2, [r3, #0]
        ucRTUBuf[usRcvBufferPos++] = ucByte;
 801715e:	4b1b      	ldr	r3, [pc, #108]	; (80171cc <xMBRTUReceiveFSM+0xc8>)
 8017160:	881b      	ldrh	r3, [r3, #0]
 8017162:	b29b      	uxth	r3, r3
 8017164:	1c5a      	adds	r2, r3, #1
 8017166:	b291      	uxth	r1, r2
 8017168:	4a18      	ldr	r2, [pc, #96]	; (80171cc <xMBRTUReceiveFSM+0xc8>)
 801716a:	8011      	strh	r1, [r2, #0]
 801716c:	461a      	mov	r2, r3
 801716e:	79b9      	ldrb	r1, [r7, #6]
 8017170:	4b17      	ldr	r3, [pc, #92]	; (80171d0 <xMBRTUReceiveFSM+0xcc>)
 8017172:	5499      	strb	r1, [r3, r2]
        eRcvState = STATE_RX_RCV;
 8017174:	4b14      	ldr	r3, [pc, #80]	; (80171c8 <xMBRTUReceiveFSM+0xc4>)
 8017176:	2202      	movs	r2, #2
 8017178:	701a      	strb	r2, [r3, #0]

        /* Enable t3.5 timers. */
        vMBPortTimersEnable(  );
 801717a:	f7ff f979 	bl	8016470 <vMBPortTimersEnable>
        break;
 801717e:	e016      	b.n	80171ae <xMBRTUReceiveFSM+0xaa>
         * every character received. If more than the maximum possible
         * number of bytes in a modbus frame is received the frame is
         * ignored.
         */
    case STATE_RX_RCV:
        if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
 8017180:	4b12      	ldr	r3, [pc, #72]	; (80171cc <xMBRTUReceiveFSM+0xc8>)
 8017182:	881b      	ldrh	r3, [r3, #0]
 8017184:	b29b      	uxth	r3, r3
 8017186:	2bff      	cmp	r3, #255	; 0xff
 8017188:	d80b      	bhi.n	80171a2 <xMBRTUReceiveFSM+0x9e>
        {
            ucRTUBuf[usRcvBufferPos++] = ucByte;
 801718a:	4b10      	ldr	r3, [pc, #64]	; (80171cc <xMBRTUReceiveFSM+0xc8>)
 801718c:	881b      	ldrh	r3, [r3, #0]
 801718e:	b29b      	uxth	r3, r3
 8017190:	1c5a      	adds	r2, r3, #1
 8017192:	b291      	uxth	r1, r2
 8017194:	4a0d      	ldr	r2, [pc, #52]	; (80171cc <xMBRTUReceiveFSM+0xc8>)
 8017196:	8011      	strh	r1, [r2, #0]
 8017198:	461a      	mov	r2, r3
 801719a:	79b9      	ldrb	r1, [r7, #6]
 801719c:	4b0c      	ldr	r3, [pc, #48]	; (80171d0 <xMBRTUReceiveFSM+0xcc>)
 801719e:	5499      	strb	r1, [r3, r2]
 80171a0:	e002      	b.n	80171a8 <xMBRTUReceiveFSM+0xa4>
        }
        else
        {
            eRcvState = STATE_RX_ERROR;
 80171a2:	4b09      	ldr	r3, [pc, #36]	; (80171c8 <xMBRTUReceiveFSM+0xc4>)
 80171a4:	2203      	movs	r2, #3
 80171a6:	701a      	strb	r2, [r3, #0]
        }
        vMBPortTimersEnable(  );
 80171a8:	f7ff f962 	bl	8016470 <vMBPortTimersEnable>
        break;
 80171ac:	bf00      	nop
    }
    return xTaskNeedSwitch;
 80171ae:	79fb      	ldrb	r3, [r7, #7]
}
 80171b0:	4618      	mov	r0, r3
 80171b2:	3708      	adds	r7, #8
 80171b4:	46bd      	mov	sp, r7
 80171b6:	bd80      	pop	{r7, pc}
 80171b8:	20004da0 	.word	0x20004da0
 80171bc:	0801b650 	.word	0x0801b650
 80171c0:	0801ba6c 	.word	0x0801ba6c
 80171c4:	0801b62c 	.word	0x0801b62c
 80171c8:	20004da1 	.word	0x20004da1
 80171cc:	20004daa 	.word	0x20004daa
 80171d0:	2000e128 	.word	0x2000e128

080171d4 <xMBRTUTransmitFSM>:

BOOL
xMBRTUTransmitFSM( void )	//run in UART_ISR - thread mode
{
 80171d4:	b580      	push	{r7, lr}
 80171d6:	b082      	sub	sp, #8
 80171d8:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 80171da:	2300      	movs	r3, #0
 80171dc:	71fb      	strb	r3, [r7, #7]

    assert( eRcvState == STATE_RX_IDLE );
 80171de:	4b22      	ldr	r3, [pc, #136]	; (8017268 <xMBRTUTransmitFSM+0x94>)
 80171e0:	781b      	ldrb	r3, [r3, #0]
 80171e2:	b2db      	uxtb	r3, r3
 80171e4:	2b01      	cmp	r3, #1
 80171e6:	d006      	beq.n	80171f6 <xMBRTUTransmitFSM+0x22>
 80171e8:	4b20      	ldr	r3, [pc, #128]	; (801726c <xMBRTUTransmitFSM+0x98>)
 80171ea:	4a21      	ldr	r2, [pc, #132]	; (8017270 <xMBRTUTransmitFSM+0x9c>)
 80171ec:	f240 112d 	movw	r1, #301	; 0x12d
 80171f0:	4820      	ldr	r0, [pc, #128]	; (8017274 <xMBRTUTransmitFSM+0xa0>)
 80171f2:	f000 fb65 	bl	80178c0 <__assert_func>

    switch ( eSndState )
 80171f6:	4b20      	ldr	r3, [pc, #128]	; (8017278 <xMBRTUTransmitFSM+0xa4>)
 80171f8:	781b      	ldrb	r3, [r3, #0]
 80171fa:	b2db      	uxtb	r3, r3
 80171fc:	2b00      	cmp	r3, #0
 80171fe:	d002      	beq.n	8017206 <xMBRTUTransmitFSM+0x32>
 8017200:	2b01      	cmp	r3, #1
 8017202:	d005      	beq.n	8017210 <xMBRTUTransmitFSM+0x3c>
 8017204:	e02a      	b.n	801725c <xMBRTUTransmitFSM+0x88>
    {
        /* We should not get a transmitter event if the transmitter is in
         * idle state.  */
    case STATE_TX_IDLE:
        /* enable receiver/disable transmitter. */
        vMBPortSerialEnable( TRUE, FALSE );
 8017206:	2100      	movs	r1, #0
 8017208:	2001      	movs	r0, #1
 801720a:	f7fe ff75 	bl	80160f8 <vMBPortSerialEnable>
        break;
 801720e:	e025      	b.n	801725c <xMBRTUTransmitFSM+0x88>

    case STATE_TX_XMIT:
        /* check if we are finished. */
        if( usSndBufferCount != 0 )
 8017210:	4b1a      	ldr	r3, [pc, #104]	; (801727c <xMBRTUTransmitFSM+0xa8>)
 8017212:	881b      	ldrh	r3, [r3, #0]
 8017214:	b29b      	uxth	r3, r3
 8017216:	2b00      	cmp	r3, #0
 8017218:	d013      	beq.n	8017242 <xMBRTUTransmitFSM+0x6e>
        {
            xMBPortSerialPutByte( ( CHAR )*pucSndBufferCur );
 801721a:	4b19      	ldr	r3, [pc, #100]	; (8017280 <xMBRTUTransmitFSM+0xac>)
 801721c:	681b      	ldr	r3, [r3, #0]
 801721e:	781b      	ldrb	r3, [r3, #0]
 8017220:	b2db      	uxtb	r3, r3
 8017222:	4618      	mov	r0, r3
 8017224:	f7fe ffb4 	bl	8016190 <xMBPortSerialPutByte>
            pucSndBufferCur++;  /* next byte in sendbuffer. */
 8017228:	4b15      	ldr	r3, [pc, #84]	; (8017280 <xMBRTUTransmitFSM+0xac>)
 801722a:	681b      	ldr	r3, [r3, #0]
 801722c:	3301      	adds	r3, #1
 801722e:	4a14      	ldr	r2, [pc, #80]	; (8017280 <xMBRTUTransmitFSM+0xac>)
 8017230:	6013      	str	r3, [r2, #0]
            usSndBufferCount--;
 8017232:	4b12      	ldr	r3, [pc, #72]	; (801727c <xMBRTUTransmitFSM+0xa8>)
 8017234:	881b      	ldrh	r3, [r3, #0]
 8017236:	b29b      	uxth	r3, r3
 8017238:	3b01      	subs	r3, #1
 801723a:	b29a      	uxth	r2, r3
 801723c:	4b0f      	ldr	r3, [pc, #60]	; (801727c <xMBRTUTransmitFSM+0xa8>)
 801723e:	801a      	strh	r2, [r3, #0]
            /* Disable transmitter. This prevents another transmit buffer
             * empty interrupt. */
            vMBPortSerialEnable( TRUE, FALSE );
            eSndState = STATE_TX_IDLE;
        }
        break;
 8017240:	e00b      	b.n	801725a <xMBRTUTransmitFSM+0x86>
            xNeedPoll = xMBPortEventPostFromISR( EV_FRAME_SENT );
 8017242:	2008      	movs	r0, #8
 8017244:	f7fe fdb2 	bl	8015dac <xMBPortEventPostFromISR>
 8017248:	4603      	mov	r3, r0
 801724a:	71fb      	strb	r3, [r7, #7]
            vMBPortSerialEnable( TRUE, FALSE );
 801724c:	2100      	movs	r1, #0
 801724e:	2001      	movs	r0, #1
 8017250:	f7fe ff52 	bl	80160f8 <vMBPortSerialEnable>
            eSndState = STATE_TX_IDLE;
 8017254:	4b08      	ldr	r3, [pc, #32]	; (8017278 <xMBRTUTransmitFSM+0xa4>)
 8017256:	2200      	movs	r2, #0
 8017258:	701a      	strb	r2, [r3, #0]
        break;
 801725a:	bf00      	nop
    }

    return xNeedPoll;
 801725c:	79fb      	ldrb	r3, [r7, #7]
}
 801725e:	4618      	mov	r0, r3
 8017260:	3708      	adds	r7, #8
 8017262:	46bd      	mov	sp, r7
 8017264:	bd80      	pop	{r7, pc}
 8017266:	bf00      	nop
 8017268:	20004da1 	.word	0x20004da1
 801726c:	0801b66c 	.word	0x0801b66c
 8017270:	0801ba80 	.word	0x0801ba80
 8017274:	0801b62c 	.word	0x0801b62c
 8017278:	20004da0 	.word	0x20004da0
 801727c:	20004da8 	.word	0x20004da8
 8017280:	20004da4 	.word	0x20004da4

08017284 <xMBRTUTimerT35Expired>:

BOOL
xMBRTUTimerT35Expired( void )
{
 8017284:	b580      	push	{r7, lr}
 8017286:	b082      	sub	sp, #8
 8017288:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 801728a:	2300      	movs	r3, #0
 801728c:	71fb      	strb	r3, [r7, #7]

    switch ( eRcvState )
 801728e:	4b1c      	ldr	r3, [pc, #112]	; (8017300 <xMBRTUTimerT35Expired+0x7c>)
 8017290:	781b      	ldrb	r3, [r3, #0]
 8017292:	b2db      	uxtb	r3, r3
 8017294:	2b03      	cmp	r3, #3
 8017296:	d028      	beq.n	80172ea <xMBRTUTimerT35Expired+0x66>
 8017298:	2b03      	cmp	r3, #3
 801729a:	dc10      	bgt.n	80172be <xMBRTUTimerT35Expired+0x3a>
 801729c:	2b00      	cmp	r3, #0
 801729e:	d002      	beq.n	80172a6 <xMBRTUTimerT35Expired+0x22>
 80172a0:	2b02      	cmp	r3, #2
 80172a2:	d006      	beq.n	80172b2 <xMBRTUTimerT35Expired+0x2e>
 80172a4:	e00b      	b.n	80172be <xMBRTUTimerT35Expired+0x3a>
    {
        /* Timer t35 expired. Startup phase is finished. */
    case STATE_RX_INIT:
        xNeedPoll = xMBPortEventPostFromISR( EV_READY );
 80172a6:	2001      	movs	r0, #1
 80172a8:	f7fe fd80 	bl	8015dac <xMBPortEventPostFromISR>
 80172ac:	4603      	mov	r3, r0
 80172ae:	71fb      	strb	r3, [r7, #7]
        break;
 80172b0:	e01c      	b.n	80172ec <xMBRTUTimerT35Expired+0x68>

        /* A frame was received and t35 expired. Notify the listener that
         * a new frame was received. */
    case STATE_RX_RCV:
    	//vMBPortSerialEnable( FALSE, FALSE );
        xNeedPoll = xMBPortEventPostFromISR( EV_FRAME_RECEIVED );
 80172b2:	2002      	movs	r0, #2
 80172b4:	f7fe fd7a 	bl	8015dac <xMBPortEventPostFromISR>
 80172b8:	4603      	mov	r3, r0
 80172ba:	71fb      	strb	r3, [r7, #7]
        break;
 80172bc:	e016      	b.n	80172ec <xMBRTUTimerT35Expired+0x68>
    case STATE_RX_ERROR:
        break;

        /* Function called in an illegal state. */
    default:
        assert( ( eRcvState == STATE_RX_INIT ) ||
 80172be:	4b10      	ldr	r3, [pc, #64]	; (8017300 <xMBRTUTimerT35Expired+0x7c>)
 80172c0:	781b      	ldrb	r3, [r3, #0]
 80172c2:	b2db      	uxtb	r3, r3
 80172c4:	2b00      	cmp	r3, #0
 80172c6:	d011      	beq.n	80172ec <xMBRTUTimerT35Expired+0x68>
 80172c8:	4b0d      	ldr	r3, [pc, #52]	; (8017300 <xMBRTUTimerT35Expired+0x7c>)
 80172ca:	781b      	ldrb	r3, [r3, #0]
 80172cc:	b2db      	uxtb	r3, r3
 80172ce:	2b02      	cmp	r3, #2
 80172d0:	d00c      	beq.n	80172ec <xMBRTUTimerT35Expired+0x68>
 80172d2:	4b0b      	ldr	r3, [pc, #44]	; (8017300 <xMBRTUTimerT35Expired+0x7c>)
 80172d4:	781b      	ldrb	r3, [r3, #0]
 80172d6:	b2db      	uxtb	r3, r3
 80172d8:	2b03      	cmp	r3, #3
 80172da:	d007      	beq.n	80172ec <xMBRTUTimerT35Expired+0x68>
 80172dc:	4b09      	ldr	r3, [pc, #36]	; (8017304 <xMBRTUTimerT35Expired+0x80>)
 80172de:	4a0a      	ldr	r2, [pc, #40]	; (8017308 <xMBRTUTimerT35Expired+0x84>)
 80172e0:	f240 1167 	movw	r1, #359	; 0x167
 80172e4:	4809      	ldr	r0, [pc, #36]	; (801730c <xMBRTUTimerT35Expired+0x88>)
 80172e6:	f000 faeb 	bl	80178c0 <__assert_func>
        break;
 80172ea:	bf00      	nop
                ( eRcvState == STATE_RX_RCV ) || ( eRcvState == STATE_RX_ERROR ) );
    }

    vMBPortTimersDisable(  );
 80172ec:	f7ff f8d2 	bl	8016494 <vMBPortTimersDisable>
    eRcvState = STATE_RX_IDLE;
 80172f0:	4b03      	ldr	r3, [pc, #12]	; (8017300 <xMBRTUTimerT35Expired+0x7c>)
 80172f2:	2201      	movs	r2, #1
 80172f4:	701a      	strb	r2, [r3, #0]

    return xNeedPoll;
 80172f6:	79fb      	ldrb	r3, [r7, #7]
}
 80172f8:	4618      	mov	r0, r3
 80172fa:	3708      	adds	r7, #8
 80172fc:	46bd      	mov	sp, r7
 80172fe:	bd80      	pop	{r7, pc}
 8017300:	20004da1 	.word	0x20004da1
 8017304:	0801b688 	.word	0x0801b688
 8017308:	0801ba94 	.word	0x0801ba94
 801730c:	0801b62c 	.word	0x0801b62c

08017310 <eMBMasterRTUInit>:
static volatile eMBMasterTimerMode eMasterCurTimerMode;

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBMasterRTUInit(UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 8017310:	b580      	push	{r7, lr}
 8017312:	b084      	sub	sp, #16
 8017314:	af00      	add	r7, sp, #0
 8017316:	4603      	mov	r3, r0
 8017318:	6039      	str	r1, [r7, #0]
 801731a:	71fb      	strb	r3, [r7, #7]
 801731c:	4613      	mov	r3, r2
 801731e:	71bb      	strb	r3, [r7, #6]
    eMBErrorCode    eStatus = MB_ENOERR;
 8017320:	2300      	movs	r3, #0
 8017322:	73fb      	strb	r3, [r7, #15]
    ULONG           usTimerT35_50us;

    ENTER_CRITICAL_SECTION(  );
 8017324:	f7fe fd02 	bl	8015d2c <EnterCriticalSection>

    /* Modbus RTU uses 8 Databits. */
    if( xMBMasterPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
 8017328:	79bb      	ldrb	r3, [r7, #6]
 801732a:	79f8      	ldrb	r0, [r7, #7]
 801732c:	2208      	movs	r2, #8
 801732e:	6839      	ldr	r1, [r7, #0]
 8017330:	f7fe ff94 	bl	801625c <xMBMasterPortSerialInit>
 8017334:	4603      	mov	r3, r0
 8017336:	2b01      	cmp	r3, #1
 8017338:	d002      	beq.n	8017340 <eMBMasterRTUInit+0x30>
    {
        eStatus = MB_EPORTERR;
 801733a:	2303      	movs	r3, #3
 801733c:	73fb      	strb	r3, [r7, #15]
 801733e:	e016      	b.n	801736e <eMBMasterRTUInit+0x5e>
    else
    {
        /* If baudrate > 19200 then we should use the fixed timer values
         * t35 = 1750us. Otherwise t35 must be 3.5 times the character time.
         */
        if( ulBaudRate > 19200 )
 8017340:	683b      	ldr	r3, [r7, #0]
 8017342:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
 8017346:	d902      	bls.n	801734e <eMBMasterRTUInit+0x3e>
        {
            usTimerT35_50us = 35;       /* 1800us. */
 8017348:	2323      	movs	r3, #35	; 0x23
 801734a:	60bb      	str	r3, [r7, #8]
 801734c:	e005      	b.n	801735a <eMBMasterRTUInit+0x4a>
             *             = 11 * Ticks_per_1s / Baudrate
             *             = 220000 / Baudrate
             * The reload for t3.5 is 1.5 times this value and similary
             * for t3.5.
             */
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
 801734e:	683b      	ldr	r3, [r7, #0]
 8017350:	005b      	lsls	r3, r3, #1
 8017352:	4a0a      	ldr	r2, [pc, #40]	; (801737c <eMBMasterRTUInit+0x6c>)
 8017354:	fbb2 f3f3 	udiv	r3, r2, r3
 8017358:	60bb      	str	r3, [r7, #8]
        }
        if( xMBMasterPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
 801735a:	68bb      	ldr	r3, [r7, #8]
 801735c:	b29b      	uxth	r3, r3
 801735e:	4618      	mov	r0, r3
 8017360:	f7ff f8d0 	bl	8016504 <xMBMasterPortTimersInit>
 8017364:	4603      	mov	r3, r0
 8017366:	2b01      	cmp	r3, #1
 8017368:	d001      	beq.n	801736e <eMBMasterRTUInit+0x5e>
        {
            eStatus = MB_EPORTERR;
 801736a:	2303      	movs	r3, #3
 801736c:	73fb      	strb	r3, [r7, #15]
        }
    }
    EXIT_CRITICAL_SECTION(  );
 801736e:	f7fe fce3 	bl	8015d38 <ExitCriticalSection>

    return eStatus;
 8017372:	7bfb      	ldrb	r3, [r7, #15]
}
 8017374:	4618      	mov	r0, r3
 8017376:	3710      	adds	r7, #16
 8017378:	46bd      	mov	sp, r7
 801737a:	bd80      	pop	{r7, pc}
 801737c:	00177fa0 	.word	0x00177fa0

08017380 <eMBMasterRTUStart>:

void
eMBMasterRTUStart( void )
{
 8017380:	b580      	push	{r7, lr}
 8017382:	af00      	add	r7, sp, #0
    ENTER_CRITICAL_SECTION(  );
 8017384:	f7fe fcd2 	bl	8015d2c <EnterCriticalSection>
    /* Initially the receiver is in the state STATE_M_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_M_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_M_RX_INIT;
 8017388:	4b06      	ldr	r3, [pc, #24]	; (80173a4 <eMBMasterRTUStart+0x24>)
 801738a:	2200      	movs	r2, #0
 801738c:	701a      	strb	r2, [r3, #0]
    vMBMasterPortSerialEnable( TRUE, FALSE );
 801738e:	2100      	movs	r1, #0
 8017390:	2001      	movs	r0, #1
 8017392:	f7fe ff77 	bl	8016284 <vMBMasterPortSerialEnable>
    vMBMasterPortTimersT35Enable(  );
 8017396:	f7ff f8f5 	bl	8016584 <vMBMasterPortTimersT35Enable>

    EXIT_CRITICAL_SECTION(  );
 801739a:	f7fe fccd 	bl	8015d38 <ExitCriticalSection>
}
 801739e:	bf00      	nop
 80173a0:	bd80      	pop	{r7, pc}
 80173a2:	bf00      	nop
 80173a4:	20004dad 	.word	0x20004dad

080173a8 <eMBMasterRTUStop>:

void
eMBMasterRTUStop( void )
{
 80173a8:	b580      	push	{r7, lr}
 80173aa:	af00      	add	r7, sp, #0
    ENTER_CRITICAL_SECTION(  );
 80173ac:	f7fe fcbe 	bl	8015d2c <EnterCriticalSection>
    vMBMasterPortSerialEnable( FALSE, FALSE );
 80173b0:	2100      	movs	r1, #0
 80173b2:	2000      	movs	r0, #0
 80173b4:	f7fe ff66 	bl	8016284 <vMBMasterPortSerialEnable>
    vMBMasterPortTimersDisable(  );
 80173b8:	f7ff f916 	bl	80165e8 <vMBMasterPortTimersDisable>
    EXIT_CRITICAL_SECTION(  );
 80173bc:	f7fe fcbc 	bl	8015d38 <ExitCriticalSection>
}
 80173c0:	bf00      	nop
 80173c2:	bd80      	pop	{r7, pc}

080173c4 <eMBMasterRTUReceive>:

eMBErrorCode
eMBMasterRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
 80173c4:	b580      	push	{r7, lr}
 80173c6:	b086      	sub	sp, #24
 80173c8:	af00      	add	r7, sp, #0
 80173ca:	60f8      	str	r0, [r7, #12]
 80173cc:	60b9      	str	r1, [r7, #8]
 80173ce:	607a      	str	r2, [r7, #4]
    eMBErrorCode    eStatus = MB_ENOERR;
 80173d0:	2300      	movs	r3, #0
 80173d2:	75fb      	strb	r3, [r7, #23]

    ENTER_CRITICAL_SECTION(  );
 80173d4:	f7fe fcaa 	bl	8015d2c <EnterCriticalSection>
    //RT_ASSERT( usMasterRcvBufferPos < MB_SER_PDU_SIZE_MAX );
    configASSERT(usMasterRcvBufferPos < MB_SER_PDU_SIZE_MAX);
 80173d8:	4b1c      	ldr	r3, [pc, #112]	; (801744c <eMBMasterRTUReceive+0x88>)
 80173da:	881b      	ldrh	r3, [r3, #0]
 80173dc:	b29b      	uxth	r3, r3
 80173de:	2bff      	cmp	r3, #255	; 0xff
 80173e0:	d90c      	bls.n	80173fc <eMBMasterRTUReceive+0x38>
	__asm volatile
 80173e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80173e6:	b672      	cpsid	i
 80173e8:	f383 8811 	msr	BASEPRI, r3
 80173ec:	f3bf 8f6f 	isb	sy
 80173f0:	f3bf 8f4f 	dsb	sy
 80173f4:	b662      	cpsie	i
 80173f6:	613b      	str	r3, [r7, #16]
}
 80173f8:	bf00      	nop
 80173fa:	e7fe      	b.n	80173fa <eMBMasterRTUReceive+0x36>

    /* Length and CRC check */
    if( ( usMasterRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
 80173fc:	4b13      	ldr	r3, [pc, #76]	; (801744c <eMBMasterRTUReceive+0x88>)
 80173fe:	881b      	ldrh	r3, [r3, #0]
 8017400:	b29b      	uxth	r3, r3
 8017402:	2b03      	cmp	r3, #3
 8017404:	d919      	bls.n	801743a <eMBMasterRTUReceive+0x76>
        && ( usMBCRC16( ( UCHAR * ) ucMasterRTURcvBuf, usMasterRcvBufferPos ) == 0 ) )
 8017406:	4b11      	ldr	r3, [pc, #68]	; (801744c <eMBMasterRTUReceive+0x88>)
 8017408:	881b      	ldrh	r3, [r3, #0]
 801740a:	b29b      	uxth	r3, r3
 801740c:	4619      	mov	r1, r3
 801740e:	4810      	ldr	r0, [pc, #64]	; (8017450 <eMBMasterRTUReceive+0x8c>)
 8017410:	f7ff fd32 	bl	8016e78 <usMBCRC16>
 8017414:	4603      	mov	r3, r0
 8017416:	2b00      	cmp	r3, #0
 8017418:	d10f      	bne.n	801743a <eMBMasterRTUReceive+0x76>
    {
        /* Save the address field. All frames are passed to the upper layed
         * and the decision if a frame is used is done there.
         */
        *pucRcvAddress = ucMasterRTURcvBuf[MB_SER_PDU_ADDR_OFF];
 801741a:	4b0d      	ldr	r3, [pc, #52]	; (8017450 <eMBMasterRTUReceive+0x8c>)
 801741c:	781b      	ldrb	r3, [r3, #0]
 801741e:	b2da      	uxtb	r2, r3
 8017420:	68fb      	ldr	r3, [r7, #12]
 8017422:	701a      	strb	r2, [r3, #0]

        /* Total length of Modbus-PDU is Modbus-Serial-Line-PDU minus
         * size of address field and CRC checksum.
         */
        *pusLength = ( USHORT )( usMasterRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 8017424:	4b09      	ldr	r3, [pc, #36]	; (801744c <eMBMasterRTUReceive+0x88>)
 8017426:	881b      	ldrh	r3, [r3, #0]
 8017428:	b29b      	uxth	r3, r3
 801742a:	3b03      	subs	r3, #3
 801742c:	b29a      	uxth	r2, r3
 801742e:	687b      	ldr	r3, [r7, #4]
 8017430:	801a      	strh	r2, [r3, #0]

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucMasterRTURcvBuf[MB_SER_PDU_PDU_OFF];
 8017432:	68bb      	ldr	r3, [r7, #8]
 8017434:	4a07      	ldr	r2, [pc, #28]	; (8017454 <eMBMasterRTUReceive+0x90>)
 8017436:	601a      	str	r2, [r3, #0]
 8017438:	e001      	b.n	801743e <eMBMasterRTUReceive+0x7a>
    }
    else
    {
        eStatus = MB_EIO;
 801743a:	2305      	movs	r3, #5
 801743c:	75fb      	strb	r3, [r7, #23]
    }

    EXIT_CRITICAL_SECTION(  );
 801743e:	f7fe fc7b 	bl	8015d38 <ExitCriticalSection>
    return eStatus;
 8017442:	7dfb      	ldrb	r3, [r7, #23]
}
 8017444:	4618      	mov	r0, r3
 8017446:	3718      	adds	r7, #24
 8017448:	46bd      	mov	sp, r7
 801744a:	bd80      	pop	{r7, pc}
 801744c:	20004fba 	.word	0x20004fba
 8017450:	20004eb0 	.word	0x20004eb0
 8017454:	20004eb1 	.word	0x20004eb1

08017458 <eMBMasterRTUSend>:

eMBErrorCode
eMBMasterRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )//peMBMasterFrameSendCur from modbus POLL
{
 8017458:	b580      	push	{r7, lr}
 801745a:	b084      	sub	sp, #16
 801745c:	af00      	add	r7, sp, #0
 801745e:	4603      	mov	r3, r0
 8017460:	6039      	str	r1, [r7, #0]
 8017462:	71fb      	strb	r3, [r7, #7]
 8017464:	4613      	mov	r3, r2
 8017466:	80bb      	strh	r3, [r7, #4]
    eMBErrorCode    eStatus = MB_ENOERR;
 8017468:	2300      	movs	r3, #0
 801746a:	73fb      	strb	r3, [r7, #15]
    USHORT          usCRC16;

    if ( ucSlaveAddress > MB_MASTER_TOTAL_SLAVE_NUM ) return MB_EINVAL;
 801746c:	79fb      	ldrb	r3, [r7, #7]
 801746e:	2b10      	cmp	r3, #16
 8017470:	d901      	bls.n	8017476 <eMBMasterRTUSend+0x1e>
 8017472:	2302      	movs	r3, #2
 8017474:	e059      	b.n	801752a <eMBMasterRTUSend+0xd2>

    ENTER_CRITICAL_SECTION(  );
 8017476:	f7fe fc59 	bl	8015d2c <EnterCriticalSection>

    /* Check if the receiver is still in idle state. If not we where to
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_M_RX_IDLE )
 801747a:	4b2e      	ldr	r3, [pc, #184]	; (8017534 <eMBMasterRTUSend+0xdc>)
 801747c:	781b      	ldrb	r3, [r3, #0]
 801747e:	b2db      	uxtb	r3, r3
 8017480:	2b01      	cmp	r3, #1
 8017482:	d14d      	bne.n	8017520 <eMBMasterRTUSend+0xc8>
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucMasterSndBufferCur = ( UCHAR * ) pucFrame - 1;
 8017484:	683b      	ldr	r3, [r7, #0]
 8017486:	3b01      	subs	r3, #1
 8017488:	4a2b      	ldr	r2, [pc, #172]	; (8017538 <eMBMasterRTUSend+0xe0>)
 801748a:	6013      	str	r3, [r2, #0]
        usMasterSndBufferCount = 1;
 801748c:	4b2b      	ldr	r3, [pc, #172]	; (801753c <eMBMasterRTUSend+0xe4>)
 801748e:	2201      	movs	r2, #1
 8017490:	801a      	strh	r2, [r3, #0]

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
        pucMasterSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
 8017492:	4b29      	ldr	r3, [pc, #164]	; (8017538 <eMBMasterRTUSend+0xe0>)
 8017494:	681b      	ldr	r3, [r3, #0]
 8017496:	79fa      	ldrb	r2, [r7, #7]
 8017498:	701a      	strb	r2, [r3, #0]
        usMasterSndBufferCount += usLength;
 801749a:	4b28      	ldr	r3, [pc, #160]	; (801753c <eMBMasterRTUSend+0xe4>)
 801749c:	881b      	ldrh	r3, [r3, #0]
 801749e:	b29a      	uxth	r2, r3
 80174a0:	88bb      	ldrh	r3, [r7, #4]
 80174a2:	4413      	add	r3, r2
 80174a4:	b29a      	uxth	r2, r3
 80174a6:	4b25      	ldr	r3, [pc, #148]	; (801753c <eMBMasterRTUSend+0xe4>)
 80174a8:	801a      	strh	r2, [r3, #0]

        /* Calculate CRC16 checksum for Modbus-Serial-Line-PDU. */
        usCRC16 = usMBCRC16( ( UCHAR * ) pucMasterSndBufferCur, usMasterSndBufferCount );
 80174aa:	4b23      	ldr	r3, [pc, #140]	; (8017538 <eMBMasterRTUSend+0xe0>)
 80174ac:	681b      	ldr	r3, [r3, #0]
 80174ae:	4a23      	ldr	r2, [pc, #140]	; (801753c <eMBMasterRTUSend+0xe4>)
 80174b0:	8812      	ldrh	r2, [r2, #0]
 80174b2:	b292      	uxth	r2, r2
 80174b4:	4611      	mov	r1, r2
 80174b6:	4618      	mov	r0, r3
 80174b8:	f7ff fcde 	bl	8016e78 <usMBCRC16>
 80174bc:	4603      	mov	r3, r0
 80174be:	81bb      	strh	r3, [r7, #12]
        ucMasterRTUSndBuf[usMasterSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
 80174c0:	4b1e      	ldr	r3, [pc, #120]	; (801753c <eMBMasterRTUSend+0xe4>)
 80174c2:	881b      	ldrh	r3, [r3, #0]
 80174c4:	b29b      	uxth	r3, r3
 80174c6:	1c5a      	adds	r2, r3, #1
 80174c8:	b291      	uxth	r1, r2
 80174ca:	4a1c      	ldr	r2, [pc, #112]	; (801753c <eMBMasterRTUSend+0xe4>)
 80174cc:	8011      	strh	r1, [r2, #0]
 80174ce:	461a      	mov	r2, r3
 80174d0:	89bb      	ldrh	r3, [r7, #12]
 80174d2:	b2d9      	uxtb	r1, r3
 80174d4:	4b1a      	ldr	r3, [pc, #104]	; (8017540 <eMBMasterRTUSend+0xe8>)
 80174d6:	5499      	strb	r1, [r3, r2]
        ucMasterRTUSndBuf[usMasterSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 80174d8:	89bb      	ldrh	r3, [r7, #12]
 80174da:	0a1b      	lsrs	r3, r3, #8
 80174dc:	b299      	uxth	r1, r3
 80174de:	4b17      	ldr	r3, [pc, #92]	; (801753c <eMBMasterRTUSend+0xe4>)
 80174e0:	881b      	ldrh	r3, [r3, #0]
 80174e2:	b29b      	uxth	r3, r3
 80174e4:	1c5a      	adds	r2, r3, #1
 80174e6:	b290      	uxth	r0, r2
 80174e8:	4a14      	ldr	r2, [pc, #80]	; (801753c <eMBMasterRTUSend+0xe4>)
 80174ea:	8010      	strh	r0, [r2, #0]
 80174ec:	461a      	mov	r2, r3
 80174ee:	b2c9      	uxtb	r1, r1
 80174f0:	4b13      	ldr	r3, [pc, #76]	; (8017540 <eMBMasterRTUSend+0xe8>)
 80174f2:	5499      	strb	r1, [r3, r2]
        /* NOTE: the following instruction must be added when use RS485 module
         * cause when MB Poll receive response frame, it lose the last byte which is
         * High byte CRC
         */
		#if MB_RTU_MASTER_USE_RS485
        ucMasterRTUSndBuf[usMasterSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 80174f4:	89bb      	ldrh	r3, [r7, #12]
 80174f6:	0a1b      	lsrs	r3, r3, #8
 80174f8:	b299      	uxth	r1, r3
 80174fa:	4b10      	ldr	r3, [pc, #64]	; (801753c <eMBMasterRTUSend+0xe4>)
 80174fc:	881b      	ldrh	r3, [r3, #0]
 80174fe:	b29b      	uxth	r3, r3
 8017500:	1c5a      	adds	r2, r3, #1
 8017502:	b290      	uxth	r0, r2
 8017504:	4a0d      	ldr	r2, [pc, #52]	; (801753c <eMBMasterRTUSend+0xe4>)
 8017506:	8010      	strh	r0, [r2, #0]
 8017508:	461a      	mov	r2, r3
 801750a:	b2c9      	uxtb	r1, r1
 801750c:	4b0c      	ldr	r3, [pc, #48]	; (8017540 <eMBMasterRTUSend+0xe8>)
 801750e:	5499      	strb	r1, [r3, r2]
		#endif
        /* Activate the transmitter. */
        eSndState = STATE_M_TX_XMIT;
 8017510:	4b0c      	ldr	r3, [pc, #48]	; (8017544 <eMBMasterRTUSend+0xec>)
 8017512:	2201      	movs	r2, #1
 8017514:	701a      	strb	r2, [r3, #0]
        vMBMasterPortSerialEnable( FALSE, TRUE );
 8017516:	2101      	movs	r1, #1
 8017518:	2000      	movs	r0, #0
 801751a:	f7fe feb3 	bl	8016284 <vMBMasterPortSerialEnable>
 801751e:	e001      	b.n	8017524 <eMBMasterRTUSend+0xcc>
    }
    else
    {
        eStatus = MB_EIO;
 8017520:	2305      	movs	r3, #5
 8017522:	73fb      	strb	r3, [r7, #15]
    }
    EXIT_CRITICAL_SECTION(  );
 8017524:	f7fe fc08 	bl	8015d38 <ExitCriticalSection>
    return eStatus;
 8017528:	7bfb      	ldrb	r3, [r7, #15]
}
 801752a:	4618      	mov	r0, r3
 801752c:	3710      	adds	r7, #16
 801752e:	46bd      	mov	sp, r7
 8017530:	bd80      	pop	{r7, pc}
 8017532:	bf00      	nop
 8017534:	20004dad 	.word	0x20004dad
 8017538:	20004fb4 	.word	0x20004fb4
 801753c:	20004fb8 	.word	0x20004fb8
 8017540:	20004db0 	.word	0x20004db0
 8017544:	20004dac 	.word	0x20004dac

08017548 <xMBMasterRTUReceiveFSM>:

BOOL
xMBMasterRTUReceiveFSM( void )				/* ISR handler*/
{
 8017548:	b580      	push	{r7, lr}
 801754a:	b084      	sub	sp, #16
 801754c:	af00      	add	r7, sp, #0
    BOOL            xTaskNeedSwitch = FALSE;
 801754e:	2300      	movs	r3, #0
 8017550:	73fb      	strb	r3, [r7, #15]
    UCHAR           ucByte;

    configASSERT(( eSndState == STATE_M_TX_IDLE ) || ( eSndState == STATE_M_TX_XFWR ));
 8017552:	4b36      	ldr	r3, [pc, #216]	; (801762c <xMBMasterRTUReceiveFSM+0xe4>)
 8017554:	781b      	ldrb	r3, [r3, #0]
 8017556:	b2db      	uxtb	r3, r3
 8017558:	2b00      	cmp	r3, #0
 801755a:	d004      	beq.n	8017566 <xMBMasterRTUReceiveFSM+0x1e>
 801755c:	4b33      	ldr	r3, [pc, #204]	; (801762c <xMBMasterRTUReceiveFSM+0xe4>)
 801755e:	781b      	ldrb	r3, [r3, #0]
 8017560:	b2db      	uxtb	r3, r3
 8017562:	2b02      	cmp	r3, #2
 8017564:	d101      	bne.n	801756a <xMBMasterRTUReceiveFSM+0x22>
 8017566:	2301      	movs	r3, #1
 8017568:	e000      	b.n	801756c <xMBMasterRTUReceiveFSM+0x24>
 801756a:	2300      	movs	r3, #0
 801756c:	2b00      	cmp	r3, #0
 801756e:	d10c      	bne.n	801758a <xMBMasterRTUReceiveFSM+0x42>
	__asm volatile
 8017570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017574:	b672      	cpsid	i
 8017576:	f383 8811 	msr	BASEPRI, r3
 801757a:	f3bf 8f6f 	isb	sy
 801757e:	f3bf 8f4f 	dsb	sy
 8017582:	b662      	cpsie	i
 8017584:	60bb      	str	r3, [r7, #8]
}
 8017586:	bf00      	nop
 8017588:	e7fe      	b.n	8017588 <xMBMasterRTUReceiveFSM+0x40>

    /* Always read the character. */
    ( void )xMBMasterPortSerialGetByte( ( CHAR * ) & ucByte );
 801758a:	1dfb      	adds	r3, r7, #7
 801758c:	4618      	mov	r0, r3
 801758e:	f7fe fedb 	bl	8016348 <xMBMasterPortSerialGetByte>

    switch ( eRcvState )
 8017592:	4b27      	ldr	r3, [pc, #156]	; (8017630 <xMBMasterRTUReceiveFSM+0xe8>)
 8017594:	781b      	ldrb	r3, [r3, #0]
 8017596:	b2db      	uxtb	r3, r3
 8017598:	2b03      	cmp	r3, #3
 801759a:	d841      	bhi.n	8017620 <xMBMasterRTUReceiveFSM+0xd8>
 801759c:	a201      	add	r2, pc, #4	; (adr r2, 80175a4 <xMBMasterRTUReceiveFSM+0x5c>)
 801759e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80175a2:	bf00      	nop
 80175a4:	080175b5 	.word	0x080175b5
 80175a8:	080175c1 	.word	0x080175c1
 80175ac:	080175f3 	.word	0x080175f3
 80175b0:	080175bb 	.word	0x080175bb
    {
        /* If we have received a character in the init state we have to
         * wait until the frame is finished.
         */
    case STATE_M_RX_INIT:
        vMBMasterPortTimersT35Enable( );
 80175b4:	f7fe ffe6 	bl	8016584 <vMBMasterPortTimersT35Enable>
        break;
 80175b8:	e032      	b.n	8017620 <xMBMasterRTUReceiveFSM+0xd8>

        /* In the error state we wait until all characters in the
         * damaged frame are transmitted.
         */
    case STATE_M_RX_ERROR:
        vMBMasterPortTimersT35Enable( );
 80175ba:	f7fe ffe3 	bl	8016584 <vMBMasterPortTimersT35Enable>
        break;
 80175be:	e02f      	b.n	8017620 <xMBMasterRTUReceiveFSM+0xd8>
         */
    case STATE_M_RX_IDLE:
    	/* In time of respond timeout,the receiver receive a frame.
    	 * Disable timer of respond timeout and change the transmiter state to idle.
    	 */
    	vMBMasterPortTimersDisable( );
 80175c0:	f7ff f812 	bl	80165e8 <vMBMasterPortTimersDisable>
    	eSndState = STATE_M_TX_IDLE;
 80175c4:	4b19      	ldr	r3, [pc, #100]	; (801762c <xMBMasterRTUReceiveFSM+0xe4>)
 80175c6:	2200      	movs	r2, #0
 80175c8:	701a      	strb	r2, [r3, #0]

        usMasterRcvBufferPos = 0;
 80175ca:	4b1a      	ldr	r3, [pc, #104]	; (8017634 <xMBMasterRTUReceiveFSM+0xec>)
 80175cc:	2200      	movs	r2, #0
 80175ce:	801a      	strh	r2, [r3, #0]
        ucMasterRTURcvBuf[usMasterRcvBufferPos++] = ucByte;
 80175d0:	4b18      	ldr	r3, [pc, #96]	; (8017634 <xMBMasterRTUReceiveFSM+0xec>)
 80175d2:	881b      	ldrh	r3, [r3, #0]
 80175d4:	b29b      	uxth	r3, r3
 80175d6:	1c5a      	adds	r2, r3, #1
 80175d8:	b291      	uxth	r1, r2
 80175da:	4a16      	ldr	r2, [pc, #88]	; (8017634 <xMBMasterRTUReceiveFSM+0xec>)
 80175dc:	8011      	strh	r1, [r2, #0]
 80175de:	461a      	mov	r2, r3
 80175e0:	79f9      	ldrb	r1, [r7, #7]
 80175e2:	4b15      	ldr	r3, [pc, #84]	; (8017638 <xMBMasterRTUReceiveFSM+0xf0>)
 80175e4:	5499      	strb	r1, [r3, r2]
        eRcvState = STATE_M_RX_RCV;
 80175e6:	4b12      	ldr	r3, [pc, #72]	; (8017630 <xMBMasterRTUReceiveFSM+0xe8>)
 80175e8:	2202      	movs	r2, #2
 80175ea:	701a      	strb	r2, [r3, #0]

        /* Enable t3.5 timers. */
        vMBMasterPortTimersT35Enable( );
 80175ec:	f7fe ffca 	bl	8016584 <vMBMasterPortTimersT35Enable>
        break;
 80175f0:	e016      	b.n	8017620 <xMBMasterRTUReceiveFSM+0xd8>
         * every character received. If more than the maximum possible
         * number of bytes in a modbus frame is received the frame is
         * ignored.
         */
    case STATE_M_RX_RCV:
        if( usMasterRcvBufferPos < MB_SER_PDU_SIZE_MAX )
 80175f2:	4b10      	ldr	r3, [pc, #64]	; (8017634 <xMBMasterRTUReceiveFSM+0xec>)
 80175f4:	881b      	ldrh	r3, [r3, #0]
 80175f6:	b29b      	uxth	r3, r3
 80175f8:	2bff      	cmp	r3, #255	; 0xff
 80175fa:	d80b      	bhi.n	8017614 <xMBMasterRTUReceiveFSM+0xcc>
        {
            ucMasterRTURcvBuf[usMasterRcvBufferPos++] = ucByte;
 80175fc:	4b0d      	ldr	r3, [pc, #52]	; (8017634 <xMBMasterRTUReceiveFSM+0xec>)
 80175fe:	881b      	ldrh	r3, [r3, #0]
 8017600:	b29b      	uxth	r3, r3
 8017602:	1c5a      	adds	r2, r3, #1
 8017604:	b291      	uxth	r1, r2
 8017606:	4a0b      	ldr	r2, [pc, #44]	; (8017634 <xMBMasterRTUReceiveFSM+0xec>)
 8017608:	8011      	strh	r1, [r2, #0]
 801760a:	461a      	mov	r2, r3
 801760c:	79f9      	ldrb	r1, [r7, #7]
 801760e:	4b0a      	ldr	r3, [pc, #40]	; (8017638 <xMBMasterRTUReceiveFSM+0xf0>)
 8017610:	5499      	strb	r1, [r3, r2]
 8017612:	e002      	b.n	801761a <xMBMasterRTUReceiveFSM+0xd2>
        }
        else
        {
            eRcvState = STATE_M_RX_ERROR;
 8017614:	4b06      	ldr	r3, [pc, #24]	; (8017630 <xMBMasterRTUReceiveFSM+0xe8>)
 8017616:	2203      	movs	r2, #3
 8017618:	701a      	strb	r2, [r3, #0]
        }
        vMBMasterPortTimersT35Enable();
 801761a:	f7fe ffb3 	bl	8016584 <vMBMasterPortTimersT35Enable>
        break;
 801761e:	bf00      	nop
    }
    return xTaskNeedSwitch;
 8017620:	7bfb      	ldrb	r3, [r7, #15]
}
 8017622:	4618      	mov	r0, r3
 8017624:	3710      	adds	r7, #16
 8017626:	46bd      	mov	sp, r7
 8017628:	bd80      	pop	{r7, pc}
 801762a:	bf00      	nop
 801762c:	20004dac 	.word	0x20004dac
 8017630:	20004dad 	.word	0x20004dad
 8017634:	20004fba 	.word	0x20004fba
 8017638:	20004eb0 	.word	0x20004eb0

0801763c <xMBMasterRTUTransmitFSM>:

BOOL
xMBMasterRTUTransmitFSM( void )
{
 801763c:	b580      	push	{r7, lr}
 801763e:	b082      	sub	sp, #8
 8017640:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 8017642:	2300      	movs	r3, #0
 8017644:	71fb      	strb	r3, [r7, #7]

    //RT_ASSERT( eRcvState == STATE_M_RX_IDLE );
    configASSERT(eRcvState == STATE_M_RX_IDLE);
 8017646:	4b2d      	ldr	r3, [pc, #180]	; (80176fc <xMBMasterRTUTransmitFSM+0xc0>)
 8017648:	781b      	ldrb	r3, [r3, #0]
 801764a:	b2db      	uxtb	r3, r3
 801764c:	2b01      	cmp	r3, #1
 801764e:	d00c      	beq.n	801766a <xMBMasterRTUTransmitFSM+0x2e>
	__asm volatile
 8017650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017654:	b672      	cpsid	i
 8017656:	f383 8811 	msr	BASEPRI, r3
 801765a:	f3bf 8f6f 	isb	sy
 801765e:	f3bf 8f4f 	dsb	sy
 8017662:	b662      	cpsie	i
 8017664:	603b      	str	r3, [r7, #0]
}
 8017666:	bf00      	nop
 8017668:	e7fe      	b.n	8017668 <xMBMasterRTUTransmitFSM+0x2c>
    switch ( eSndState )
 801766a:	4b25      	ldr	r3, [pc, #148]	; (8017700 <xMBMasterRTUTransmitFSM+0xc4>)
 801766c:	781b      	ldrb	r3, [r3, #0]
 801766e:	b2db      	uxtb	r3, r3
 8017670:	2b00      	cmp	r3, #0
 8017672:	d002      	beq.n	801767a <xMBMasterRTUTransmitFSM+0x3e>
 8017674:	2b01      	cmp	r3, #1
 8017676:	d005      	beq.n	8017684 <xMBMasterRTUTransmitFSM+0x48>
            }
        }
        break;

    default:
        break;
 8017678:	e03a      	b.n	80176f0 <xMBMasterRTUTransmitFSM+0xb4>
        vMBMasterPortSerialEnable( TRUE, FALSE );
 801767a:	2100      	movs	r1, #0
 801767c:	2001      	movs	r0, #1
 801767e:	f7fe fe01 	bl	8016284 <vMBMasterPortSerialEnable>
        break;
 8017682:	e035      	b.n	80176f0 <xMBMasterRTUTransmitFSM+0xb4>
        if( usMasterSndBufferCount != 0 )
 8017684:	4b1f      	ldr	r3, [pc, #124]	; (8017704 <xMBMasterRTUTransmitFSM+0xc8>)
 8017686:	881b      	ldrh	r3, [r3, #0]
 8017688:	b29b      	uxth	r3, r3
 801768a:	2b00      	cmp	r3, #0
 801768c:	d013      	beq.n	80176b6 <xMBMasterRTUTransmitFSM+0x7a>
            xMBMasterPortSerialPutByte( ( CHAR )*pucMasterSndBufferCur );
 801768e:	4b1e      	ldr	r3, [pc, #120]	; (8017708 <xMBMasterRTUTransmitFSM+0xcc>)
 8017690:	681b      	ldr	r3, [r3, #0]
 8017692:	781b      	ldrb	r3, [r3, #0]
 8017694:	b2db      	uxtb	r3, r3
 8017696:	4618      	mov	r0, r3
 8017698:	f7fe fe44 	bl	8016324 <xMBMasterPortSerialPutByte>
            pucMasterSndBufferCur++;  /* next byte in sendbuffer. */
 801769c:	4b1a      	ldr	r3, [pc, #104]	; (8017708 <xMBMasterRTUTransmitFSM+0xcc>)
 801769e:	681b      	ldr	r3, [r3, #0]
 80176a0:	3301      	adds	r3, #1
 80176a2:	4a19      	ldr	r2, [pc, #100]	; (8017708 <xMBMasterRTUTransmitFSM+0xcc>)
 80176a4:	6013      	str	r3, [r2, #0]
            usMasterSndBufferCount--;
 80176a6:	4b17      	ldr	r3, [pc, #92]	; (8017704 <xMBMasterRTUTransmitFSM+0xc8>)
 80176a8:	881b      	ldrh	r3, [r3, #0]
 80176aa:	b29b      	uxth	r3, r3
 80176ac:	3b01      	subs	r3, #1
 80176ae:	b29a      	uxth	r2, r3
 80176b0:	4b14      	ldr	r3, [pc, #80]	; (8017704 <xMBMasterRTUTransmitFSM+0xc8>)
 80176b2:	801a      	strh	r2, [r3, #0]
        break;
 80176b4:	e01b      	b.n	80176ee <xMBMasterRTUTransmitFSM+0xb2>
            xFrameIsBroadcast = ( ucMasterRTUSndBuf[MB_SER_PDU_ADDR_OFF] == MB_ADDRESS_BROADCAST ) ? TRUE : FALSE;
 80176b6:	4b15      	ldr	r3, [pc, #84]	; (801770c <xMBMasterRTUTransmitFSM+0xd0>)
 80176b8:	781b      	ldrb	r3, [r3, #0]
 80176ba:	b2db      	uxtb	r3, r3
 80176bc:	2b00      	cmp	r3, #0
 80176be:	bf0c      	ite	eq
 80176c0:	2301      	moveq	r3, #1
 80176c2:	2300      	movne	r3, #0
 80176c4:	b2db      	uxtb	r3, r3
 80176c6:	461a      	mov	r2, r3
 80176c8:	4b11      	ldr	r3, [pc, #68]	; (8017710 <xMBMasterRTUTransmitFSM+0xd4>)
 80176ca:	701a      	strb	r2, [r3, #0]
            vMBMasterPortSerialEnable( TRUE, FALSE );
 80176cc:	2100      	movs	r1, #0
 80176ce:	2001      	movs	r0, #1
 80176d0:	f7fe fdd8 	bl	8016284 <vMBMasterPortSerialEnable>
            eSndState = STATE_M_TX_XFWR;
 80176d4:	4b0a      	ldr	r3, [pc, #40]	; (8017700 <xMBMasterRTUTransmitFSM+0xc4>)
 80176d6:	2202      	movs	r2, #2
 80176d8:	701a      	strb	r2, [r3, #0]
            if ( xFrameIsBroadcast == TRUE )
 80176da:	4b0d      	ldr	r3, [pc, #52]	; (8017710 <xMBMasterRTUTransmitFSM+0xd4>)
 80176dc:	781b      	ldrb	r3, [r3, #0]
 80176de:	b2db      	uxtb	r3, r3
 80176e0:	2b01      	cmp	r3, #1
 80176e2:	d102      	bne.n	80176ea <xMBMasterRTUTransmitFSM+0xae>
            	vMBMasterPortTimersConvertDelayEnable( );
 80176e4:	f7fe ff60 	bl	80165a8 <vMBMasterPortTimersConvertDelayEnable>
        break;
 80176e8:	e001      	b.n	80176ee <xMBMasterRTUTransmitFSM+0xb2>
            	vMBMasterPortTimersRespondTimeoutEnable( );
 80176ea:	f7fe ff6d 	bl	80165c8 <vMBMasterPortTimersRespondTimeoutEnable>
        break;
 80176ee:	bf00      	nop
    }

    return xNeedPoll;
 80176f0:	79fb      	ldrb	r3, [r7, #7]
}
 80176f2:	4618      	mov	r0, r3
 80176f4:	3708      	adds	r7, #8
 80176f6:	46bd      	mov	sp, r7
 80176f8:	bd80      	pop	{r7, pc}
 80176fa:	bf00      	nop
 80176fc:	20004dad 	.word	0x20004dad
 8017700:	20004dac 	.word	0x20004dac
 8017704:	20004fb8 	.word	0x20004fb8
 8017708:	20004fb4 	.word	0x20004fb4
 801770c:	20004db0 	.word	0x20004db0
 8017710:	20004fbc 	.word	0x20004fbc

08017714 <xMBMasterRTUTimerExpired>:

BOOL
xMBMasterRTUTimerExpired(void)
{
 8017714:	b580      	push	{r7, lr}
 8017716:	b084      	sub	sp, #16
 8017718:	af00      	add	r7, sp, #0
	BOOL xNeedPoll = FALSE;
 801771a:	2300      	movs	r3, #0
 801771c:	73fb      	strb	r3, [r7, #15]

	switch (eRcvState)
 801771e:	4b48      	ldr	r3, [pc, #288]	; (8017840 <xMBMasterRTUTimerExpired+0x12c>)
 8017720:	781b      	ldrb	r3, [r3, #0]
 8017722:	b2db      	uxtb	r3, r3
 8017724:	2b03      	cmp	r3, #3
 8017726:	d012      	beq.n	801774e <xMBMasterRTUTimerExpired+0x3a>
 8017728:	2b03      	cmp	r3, #3
 801772a:	dc19      	bgt.n	8017760 <xMBMasterRTUTimerExpired+0x4c>
 801772c:	2b00      	cmp	r3, #0
 801772e:	d002      	beq.n	8017736 <xMBMasterRTUTimerExpired+0x22>
 8017730:	2b02      	cmp	r3, #2
 8017732:	d006      	beq.n	8017742 <xMBMasterRTUTimerExpired+0x2e>
 8017734:	e014      	b.n	8017760 <xMBMasterRTUTimerExpired+0x4c>
	{
		/* Timer t35 expired. Startup phase is finished. */
	case STATE_M_RX_INIT:
		xNeedPoll = xMBMasterPortEventPostFromISR(EV_MASTER_READY);
 8017736:	2001      	movs	r0, #1
 8017738:	f7fe fbb6 	bl	8015ea8 <xMBMasterPortEventPostFromISR>
 801773c:	4603      	mov	r3, r0
 801773e:	73fb      	strb	r3, [r7, #15]
		break;
 8017740:	e035      	b.n	80177ae <xMBMasterRTUTimerExpired+0x9a>

		/* A frame was received and t35 expired. Notify the listener that
		 * a new frame was received. */
	case STATE_M_RX_RCV:
		xNeedPoll = xMBMasterPortEventPostFromISR(EV_MASTER_FRAME_RECEIVED);
 8017742:	2002      	movs	r0, #2
 8017744:	f7fe fbb0 	bl	8015ea8 <xMBMasterPortEventPostFromISR>
 8017748:	4603      	mov	r3, r0
 801774a:	73fb      	strb	r3, [r7, #15]
		break;
 801774c:	e02f      	b.n	80177ae <xMBMasterRTUTimerExpired+0x9a>

		/* An error occured while receiving the frame. */
	case STATE_M_RX_ERROR:
		vMBMasterSetErrorType(EV_ERROR_RECEIVE_DATA);
 801774e:	2001      	movs	r0, #1
 8017750:	f7fe f9aa 	bl	8015aa8 <vMBMasterSetErrorType>
		xNeedPoll = xMBMasterPortEventPostFromISR( EV_MASTER_ERROR_PROCESS );
 8017754:	2010      	movs	r0, #16
 8017756:	f7fe fba7 	bl	8015ea8 <xMBMasterPortEventPostFromISR>
 801775a:	4603      	mov	r3, r0
 801775c:	73fb      	strb	r3, [r7, #15]
		break;
 801775e:	e026      	b.n	80177ae <xMBMasterRTUTimerExpired+0x9a>

		/* Function called in an illegal state. */
	default:
		//RT_ASSERT
		configASSERT(
 8017760:	4b37      	ldr	r3, [pc, #220]	; (8017840 <xMBMasterRTUTimerExpired+0x12c>)
 8017762:	781b      	ldrb	r3, [r3, #0]
 8017764:	b2db      	uxtb	r3, r3
 8017766:	2b00      	cmp	r3, #0
 8017768:	d00e      	beq.n	8017788 <xMBMasterRTUTimerExpired+0x74>
 801776a:	4b35      	ldr	r3, [pc, #212]	; (8017840 <xMBMasterRTUTimerExpired+0x12c>)
 801776c:	781b      	ldrb	r3, [r3, #0]
 801776e:	b2db      	uxtb	r3, r3
 8017770:	2b02      	cmp	r3, #2
 8017772:	d009      	beq.n	8017788 <xMBMasterRTUTimerExpired+0x74>
 8017774:	4b32      	ldr	r3, [pc, #200]	; (8017840 <xMBMasterRTUTimerExpired+0x12c>)
 8017776:	781b      	ldrb	r3, [r3, #0]
 8017778:	b2db      	uxtb	r3, r3
 801777a:	2b03      	cmp	r3, #3
 801777c:	d004      	beq.n	8017788 <xMBMasterRTUTimerExpired+0x74>
 801777e:	4b30      	ldr	r3, [pc, #192]	; (8017840 <xMBMasterRTUTimerExpired+0x12c>)
 8017780:	781b      	ldrb	r3, [r3, #0]
 8017782:	b2db      	uxtb	r3, r3
 8017784:	2b01      	cmp	r3, #1
 8017786:	d101      	bne.n	801778c <xMBMasterRTUTimerExpired+0x78>
 8017788:	2301      	movs	r3, #1
 801778a:	e000      	b.n	801778e <xMBMasterRTUTimerExpired+0x7a>
 801778c:	2300      	movs	r3, #0
 801778e:	2b00      	cmp	r3, #0
 8017790:	d10c      	bne.n	80177ac <xMBMasterRTUTimerExpired+0x98>
	__asm volatile
 8017792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017796:	b672      	cpsid	i
 8017798:	f383 8811 	msr	BASEPRI, r3
 801779c:	f3bf 8f6f 	isb	sy
 80177a0:	f3bf 8f4f 	dsb	sy
 80177a4:	b662      	cpsie	i
 80177a6:	60bb      	str	r3, [r7, #8]
}
 80177a8:	bf00      	nop
 80177aa:	e7fe      	b.n	80177aa <xMBMasterRTUTimerExpired+0x96>
				( eRcvState == STATE_M_RX_INIT ) || ( eRcvState == STATE_M_RX_RCV ) ||
				( eRcvState == STATE_M_RX_ERROR ) || ( eRcvState == STATE_M_RX_IDLE ));
		break;
 80177ac:	bf00      	nop
	}
	eRcvState = STATE_M_RX_IDLE;
 80177ae:	4b24      	ldr	r3, [pc, #144]	; (8017840 <xMBMasterRTUTimerExpired+0x12c>)
 80177b0:	2201      	movs	r2, #1
 80177b2:	701a      	strb	r2, [r3, #0]

	switch (eSndState)
 80177b4:	4b23      	ldr	r3, [pc, #140]	; (8017844 <xMBMasterRTUTimerExpired+0x130>)
 80177b6:	781b      	ldrb	r3, [r3, #0]
 80177b8:	b2db      	uxtb	r3, r3
 80177ba:	2b02      	cmp	r3, #2
 80177bc:	d10d      	bne.n	80177da <xMBMasterRTUTimerExpired+0xc6>
	{
		/* A frame was send finish and convert delay or respond timeout expired.
		 * If the frame is broadcast,The master will idle,and if the frame is not
		 * broadcast.Notify the listener process error.*/
	case STATE_M_TX_XFWR:
		if ( xFrameIsBroadcast == FALSE ) {
 80177be:	4b22      	ldr	r3, [pc, #136]	; (8017848 <xMBMasterRTUTimerExpired+0x134>)
 80177c0:	781b      	ldrb	r3, [r3, #0]
 80177c2:	b2db      	uxtb	r3, r3
 80177c4:	2b00      	cmp	r3, #0
 80177c6:	d124      	bne.n	8017812 <xMBMasterRTUTimerExpired+0xfe>
			vMBMasterSetErrorType(EV_ERROR_RESPOND_TIMEOUT);
 80177c8:	2000      	movs	r0, #0
 80177ca:	f7fe f96d 	bl	8015aa8 <vMBMasterSetErrorType>
			xNeedPoll = xMBMasterPortEventPostFromISR(EV_MASTER_ERROR_PROCESS);
 80177ce:	2010      	movs	r0, #16
 80177d0:	f7fe fb6a 	bl	8015ea8 <xMBMasterPortEventPostFromISR>
 80177d4:	4603      	mov	r3, r0
 80177d6:	73fb      	strb	r3, [r7, #15]
		}
		break;
 80177d8:	e01b      	b.n	8017812 <xMBMasterRTUTimerExpired+0xfe>
		/* Function called in an illegal state. */
	default:
		//RT_ASSERT
		//NOTE: assert_param(x)
		configASSERT(
 80177da:	4b1a      	ldr	r3, [pc, #104]	; (8017844 <xMBMasterRTUTimerExpired+0x130>)
 80177dc:	781b      	ldrb	r3, [r3, #0]
 80177de:	b2db      	uxtb	r3, r3
 80177e0:	2b02      	cmp	r3, #2
 80177e2:	d004      	beq.n	80177ee <xMBMasterRTUTimerExpired+0xda>
 80177e4:	4b17      	ldr	r3, [pc, #92]	; (8017844 <xMBMasterRTUTimerExpired+0x130>)
 80177e6:	781b      	ldrb	r3, [r3, #0]
 80177e8:	b2db      	uxtb	r3, r3
 80177ea:	2b00      	cmp	r3, #0
 80177ec:	d101      	bne.n	80177f2 <xMBMasterRTUTimerExpired+0xde>
 80177ee:	2301      	movs	r3, #1
 80177f0:	e000      	b.n	80177f4 <xMBMasterRTUTimerExpired+0xe0>
 80177f2:	2300      	movs	r3, #0
 80177f4:	2b00      	cmp	r3, #0
 80177f6:	d10e      	bne.n	8017816 <xMBMasterRTUTimerExpired+0x102>
	__asm volatile
 80177f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80177fc:	b672      	cpsid	i
 80177fe:	f383 8811 	msr	BASEPRI, r3
 8017802:	f3bf 8f6f 	isb	sy
 8017806:	f3bf 8f4f 	dsb	sy
 801780a:	b662      	cpsie	i
 801780c:	607b      	str	r3, [r7, #4]
}
 801780e:	bf00      	nop
 8017810:	e7fe      	b.n	8017810 <xMBMasterRTUTimerExpired+0xfc>
		break;
 8017812:	bf00      	nop
 8017814:	e000      	b.n	8017818 <xMBMasterRTUTimerExpired+0x104>
					( eSndState == STATE_M_TX_XFWR ) || ( eSndState == STATE_M_TX_IDLE ));
		break;
 8017816:	bf00      	nop
	}
	eSndState = STATE_M_TX_IDLE;
 8017818:	4b0a      	ldr	r3, [pc, #40]	; (8017844 <xMBMasterRTUTimerExpired+0x130>)
 801781a:	2200      	movs	r2, #0
 801781c:	701a      	strb	r2, [r3, #0]

	vMBMasterPortTimersDisable( );
 801781e:	f7fe fee3 	bl	80165e8 <vMBMasterPortTimersDisable>
	/* If timer mode is convert delay, the master event then turns EV_MASTER_EXECUTE status. */
	if (eMasterCurTimerMode == MB_TMODE_CONVERT_DELAY) {
 8017822:	4b0a      	ldr	r3, [pc, #40]	; (801784c <xMBMasterRTUTimerExpired+0x138>)
 8017824:	781b      	ldrb	r3, [r3, #0]
 8017826:	b2db      	uxtb	r3, r3
 8017828:	2b02      	cmp	r3, #2
 801782a:	d104      	bne.n	8017836 <xMBMasterRTUTimerExpired+0x122>
		xNeedPoll = xMBMasterPortEventPostFromISR( EV_MASTER_EXECUTE );
 801782c:	2004      	movs	r0, #4
 801782e:	f7fe fb3b 	bl	8015ea8 <xMBMasterPortEventPostFromISR>
 8017832:	4603      	mov	r3, r0
 8017834:	73fb      	strb	r3, [r7, #15]
	}

	return xNeedPoll;
 8017836:	7bfb      	ldrb	r3, [r7, #15]
}
 8017838:	4618      	mov	r0, r3
 801783a:	3710      	adds	r7, #16
 801783c:	46bd      	mov	sp, r7
 801783e:	bd80      	pop	{r7, pc}
 8017840:	20004dad 	.word	0x20004dad
 8017844:	20004dac 	.word	0x20004dac
 8017848:	20004fbc 	.word	0x20004fbc
 801784c:	20004fbd 	.word	0x20004fbd

08017850 <vMBMasterGetPDUSndBuf>:
	*pucFrame = ( UCHAR * ) ucMasterRTUSndBuf;
}

/* Get Modbus Master send PDU's buffer address pointer.*/
void vMBMasterGetPDUSndBuf( UCHAR ** pucFrame )
{
 8017850:	b480      	push	{r7}
 8017852:	b083      	sub	sp, #12
 8017854:	af00      	add	r7, sp, #0
 8017856:	6078      	str	r0, [r7, #4]
	*pucFrame = ( UCHAR * ) &ucMasterRTUSndBuf[MB_SER_PDU_PDU_OFF];
 8017858:	687b      	ldr	r3, [r7, #4]
 801785a:	4a04      	ldr	r2, [pc, #16]	; (801786c <vMBMasterGetPDUSndBuf+0x1c>)
 801785c:	601a      	str	r2, [r3, #0]
}
 801785e:	bf00      	nop
 8017860:	370c      	adds	r7, #12
 8017862:	46bd      	mov	sp, r7
 8017864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017868:	4770      	bx	lr
 801786a:	bf00      	nop
 801786c:	20004db1 	.word	0x20004db1

08017870 <vMBMasterSetPDUSndLength>:

/* Set Modbus Master send PDU's buffer length.*/
void vMBMasterSetPDUSndLength( USHORT SendPDULength )
{
 8017870:	b480      	push	{r7}
 8017872:	b083      	sub	sp, #12
 8017874:	af00      	add	r7, sp, #0
 8017876:	4603      	mov	r3, r0
 8017878:	80fb      	strh	r3, [r7, #6]
	usMasterSendPDULength = SendPDULength;
 801787a:	4a04      	ldr	r2, [pc, #16]	; (801788c <vMBMasterSetPDUSndLength+0x1c>)
 801787c:	88fb      	ldrh	r3, [r7, #6]
 801787e:	8013      	strh	r3, [r2, #0]
}
 8017880:	bf00      	nop
 8017882:	370c      	adds	r7, #12
 8017884:	46bd      	mov	sp, r7
 8017886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801788a:	4770      	bx	lr
 801788c:	20004fb0 	.word	0x20004fb0

08017890 <usMBMasterGetPDUSndLength>:

/* Get Modbus Master send PDU's buffer length.*/
USHORT usMBMasterGetPDUSndLength( void )
{
 8017890:	b480      	push	{r7}
 8017892:	af00      	add	r7, sp, #0
	return usMasterSendPDULength;
 8017894:	4b03      	ldr	r3, [pc, #12]	; (80178a4 <usMBMasterGetPDUSndLength+0x14>)
 8017896:	881b      	ldrh	r3, [r3, #0]
 8017898:	b29b      	uxth	r3, r3
}
 801789a:	4618      	mov	r0, r3
 801789c:	46bd      	mov	sp, r7
 801789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178a2:	4770      	bx	lr
 80178a4:	20004fb0 	.word	0x20004fb0

080178a8 <xMBMasterRequestIsBroadcast>:
{
	eMasterCurTimerMode = eMBTimerMode;
}

/* The master request is broadcast? */
BOOL xMBMasterRequestIsBroadcast( void ){
 80178a8:	b480      	push	{r7}
 80178aa:	af00      	add	r7, sp, #0
	return xFrameIsBroadcast;
 80178ac:	4b03      	ldr	r3, [pc, #12]	; (80178bc <xMBMasterRequestIsBroadcast+0x14>)
 80178ae:	781b      	ldrb	r3, [r3, #0]
 80178b0:	b2db      	uxtb	r3, r3
}
 80178b2:	4618      	mov	r0, r3
 80178b4:	46bd      	mov	sp, r7
 80178b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178ba:	4770      	bx	lr
 80178bc:	20004fbc 	.word	0x20004fbc

080178c0 <__assert_func>:
 80178c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80178c2:	4614      	mov	r4, r2
 80178c4:	461a      	mov	r2, r3
 80178c6:	4b09      	ldr	r3, [pc, #36]	; (80178ec <__assert_func+0x2c>)
 80178c8:	681b      	ldr	r3, [r3, #0]
 80178ca:	4605      	mov	r5, r0
 80178cc:	68d8      	ldr	r0, [r3, #12]
 80178ce:	b14c      	cbz	r4, 80178e4 <__assert_func+0x24>
 80178d0:	4b07      	ldr	r3, [pc, #28]	; (80178f0 <__assert_func+0x30>)
 80178d2:	9100      	str	r1, [sp, #0]
 80178d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80178d8:	4906      	ldr	r1, [pc, #24]	; (80178f4 <__assert_func+0x34>)
 80178da:	462b      	mov	r3, r5
 80178dc:	f000 f8e4 	bl	8017aa8 <fiprintf>
 80178e0:	f000 fe90 	bl	8018604 <abort>
 80178e4:	4b04      	ldr	r3, [pc, #16]	; (80178f8 <__assert_func+0x38>)
 80178e6:	461c      	mov	r4, r3
 80178e8:	e7f3      	b.n	80178d2 <__assert_func+0x12>
 80178ea:	bf00      	nop
 80178ec:	20000120 	.word	0x20000120
 80178f0:	0801baaa 	.word	0x0801baaa
 80178f4:	0801bab7 	.word	0x0801bab7
 80178f8:	0801bae5 	.word	0x0801bae5

080178fc <std>:
 80178fc:	2300      	movs	r3, #0
 80178fe:	b510      	push	{r4, lr}
 8017900:	4604      	mov	r4, r0
 8017902:	e9c0 3300 	strd	r3, r3, [r0]
 8017906:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801790a:	6083      	str	r3, [r0, #8]
 801790c:	8181      	strh	r1, [r0, #12]
 801790e:	6643      	str	r3, [r0, #100]	; 0x64
 8017910:	81c2      	strh	r2, [r0, #14]
 8017912:	6183      	str	r3, [r0, #24]
 8017914:	4619      	mov	r1, r3
 8017916:	2208      	movs	r2, #8
 8017918:	305c      	adds	r0, #92	; 0x5c
 801791a:	f000 f93a 	bl	8017b92 <memset>
 801791e:	4b05      	ldr	r3, [pc, #20]	; (8017934 <std+0x38>)
 8017920:	6263      	str	r3, [r4, #36]	; 0x24
 8017922:	4b05      	ldr	r3, [pc, #20]	; (8017938 <std+0x3c>)
 8017924:	62a3      	str	r3, [r4, #40]	; 0x28
 8017926:	4b05      	ldr	r3, [pc, #20]	; (801793c <std+0x40>)
 8017928:	62e3      	str	r3, [r4, #44]	; 0x2c
 801792a:	4b05      	ldr	r3, [pc, #20]	; (8017940 <std+0x44>)
 801792c:	6224      	str	r4, [r4, #32]
 801792e:	6323      	str	r3, [r4, #48]	; 0x30
 8017930:	bd10      	pop	{r4, pc}
 8017932:	bf00      	nop
 8017934:	080183d9 	.word	0x080183d9
 8017938:	080183fb 	.word	0x080183fb
 801793c:	08018433 	.word	0x08018433
 8017940:	08018457 	.word	0x08018457

08017944 <_cleanup_r>:
 8017944:	4901      	ldr	r1, [pc, #4]	; (801794c <_cleanup_r+0x8>)
 8017946:	f000 b8c1 	b.w	8017acc <_fwalk_reent>
 801794a:	bf00      	nop
 801794c:	08018741 	.word	0x08018741

08017950 <__sfmoreglue>:
 8017950:	b570      	push	{r4, r5, r6, lr}
 8017952:	1e4a      	subs	r2, r1, #1
 8017954:	2568      	movs	r5, #104	; 0x68
 8017956:	4355      	muls	r5, r2
 8017958:	460e      	mov	r6, r1
 801795a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801795e:	f000 f921 	bl	8017ba4 <_malloc_r>
 8017962:	4604      	mov	r4, r0
 8017964:	b140      	cbz	r0, 8017978 <__sfmoreglue+0x28>
 8017966:	2100      	movs	r1, #0
 8017968:	e9c0 1600 	strd	r1, r6, [r0]
 801796c:	300c      	adds	r0, #12
 801796e:	60a0      	str	r0, [r4, #8]
 8017970:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017974:	f000 f90d 	bl	8017b92 <memset>
 8017978:	4620      	mov	r0, r4
 801797a:	bd70      	pop	{r4, r5, r6, pc}

0801797c <__sfp_lock_acquire>:
 801797c:	4801      	ldr	r0, [pc, #4]	; (8017984 <__sfp_lock_acquire+0x8>)
 801797e:	f000 b8ea 	b.w	8017b56 <__retarget_lock_acquire_recursive>
 8017982:	bf00      	nop
 8017984:	2000e230 	.word	0x2000e230

08017988 <__sfp_lock_release>:
 8017988:	4801      	ldr	r0, [pc, #4]	; (8017990 <__sfp_lock_release+0x8>)
 801798a:	f000 b8e5 	b.w	8017b58 <__retarget_lock_release_recursive>
 801798e:	bf00      	nop
 8017990:	2000e230 	.word	0x2000e230

08017994 <__sinit_lock_acquire>:
 8017994:	4801      	ldr	r0, [pc, #4]	; (801799c <__sinit_lock_acquire+0x8>)
 8017996:	f000 b8de 	b.w	8017b56 <__retarget_lock_acquire_recursive>
 801799a:	bf00      	nop
 801799c:	2000e22b 	.word	0x2000e22b

080179a0 <__sinit_lock_release>:
 80179a0:	4801      	ldr	r0, [pc, #4]	; (80179a8 <__sinit_lock_release+0x8>)
 80179a2:	f000 b8d9 	b.w	8017b58 <__retarget_lock_release_recursive>
 80179a6:	bf00      	nop
 80179a8:	2000e22b 	.word	0x2000e22b

080179ac <__sinit>:
 80179ac:	b510      	push	{r4, lr}
 80179ae:	4604      	mov	r4, r0
 80179b0:	f7ff fff0 	bl	8017994 <__sinit_lock_acquire>
 80179b4:	69a3      	ldr	r3, [r4, #24]
 80179b6:	b11b      	cbz	r3, 80179c0 <__sinit+0x14>
 80179b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80179bc:	f7ff bff0 	b.w	80179a0 <__sinit_lock_release>
 80179c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80179c4:	6523      	str	r3, [r4, #80]	; 0x50
 80179c6:	4b13      	ldr	r3, [pc, #76]	; (8017a14 <__sinit+0x68>)
 80179c8:	4a13      	ldr	r2, [pc, #76]	; (8017a18 <__sinit+0x6c>)
 80179ca:	681b      	ldr	r3, [r3, #0]
 80179cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80179ce:	42a3      	cmp	r3, r4
 80179d0:	bf04      	itt	eq
 80179d2:	2301      	moveq	r3, #1
 80179d4:	61a3      	streq	r3, [r4, #24]
 80179d6:	4620      	mov	r0, r4
 80179d8:	f000 f820 	bl	8017a1c <__sfp>
 80179dc:	6060      	str	r0, [r4, #4]
 80179de:	4620      	mov	r0, r4
 80179e0:	f000 f81c 	bl	8017a1c <__sfp>
 80179e4:	60a0      	str	r0, [r4, #8]
 80179e6:	4620      	mov	r0, r4
 80179e8:	f000 f818 	bl	8017a1c <__sfp>
 80179ec:	2200      	movs	r2, #0
 80179ee:	60e0      	str	r0, [r4, #12]
 80179f0:	2104      	movs	r1, #4
 80179f2:	6860      	ldr	r0, [r4, #4]
 80179f4:	f7ff ff82 	bl	80178fc <std>
 80179f8:	68a0      	ldr	r0, [r4, #8]
 80179fa:	2201      	movs	r2, #1
 80179fc:	2109      	movs	r1, #9
 80179fe:	f7ff ff7d 	bl	80178fc <std>
 8017a02:	68e0      	ldr	r0, [r4, #12]
 8017a04:	2202      	movs	r2, #2
 8017a06:	2112      	movs	r1, #18
 8017a08:	f7ff ff78 	bl	80178fc <std>
 8017a0c:	2301      	movs	r3, #1
 8017a0e:	61a3      	str	r3, [r4, #24]
 8017a10:	e7d2      	b.n	80179b8 <__sinit+0xc>
 8017a12:	bf00      	nop
 8017a14:	0801bb48 	.word	0x0801bb48
 8017a18:	08017945 	.word	0x08017945

08017a1c <__sfp>:
 8017a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a1e:	4607      	mov	r7, r0
 8017a20:	f7ff ffac 	bl	801797c <__sfp_lock_acquire>
 8017a24:	4b1e      	ldr	r3, [pc, #120]	; (8017aa0 <__sfp+0x84>)
 8017a26:	681e      	ldr	r6, [r3, #0]
 8017a28:	69b3      	ldr	r3, [r6, #24]
 8017a2a:	b913      	cbnz	r3, 8017a32 <__sfp+0x16>
 8017a2c:	4630      	mov	r0, r6
 8017a2e:	f7ff ffbd 	bl	80179ac <__sinit>
 8017a32:	3648      	adds	r6, #72	; 0x48
 8017a34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017a38:	3b01      	subs	r3, #1
 8017a3a:	d503      	bpl.n	8017a44 <__sfp+0x28>
 8017a3c:	6833      	ldr	r3, [r6, #0]
 8017a3e:	b30b      	cbz	r3, 8017a84 <__sfp+0x68>
 8017a40:	6836      	ldr	r6, [r6, #0]
 8017a42:	e7f7      	b.n	8017a34 <__sfp+0x18>
 8017a44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017a48:	b9d5      	cbnz	r5, 8017a80 <__sfp+0x64>
 8017a4a:	4b16      	ldr	r3, [pc, #88]	; (8017aa4 <__sfp+0x88>)
 8017a4c:	60e3      	str	r3, [r4, #12]
 8017a4e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017a52:	6665      	str	r5, [r4, #100]	; 0x64
 8017a54:	f000 f87e 	bl	8017b54 <__retarget_lock_init_recursive>
 8017a58:	f7ff ff96 	bl	8017988 <__sfp_lock_release>
 8017a5c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017a60:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017a64:	6025      	str	r5, [r4, #0]
 8017a66:	61a5      	str	r5, [r4, #24]
 8017a68:	2208      	movs	r2, #8
 8017a6a:	4629      	mov	r1, r5
 8017a6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017a70:	f000 f88f 	bl	8017b92 <memset>
 8017a74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017a78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017a7c:	4620      	mov	r0, r4
 8017a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017a80:	3468      	adds	r4, #104	; 0x68
 8017a82:	e7d9      	b.n	8017a38 <__sfp+0x1c>
 8017a84:	2104      	movs	r1, #4
 8017a86:	4638      	mov	r0, r7
 8017a88:	f7ff ff62 	bl	8017950 <__sfmoreglue>
 8017a8c:	4604      	mov	r4, r0
 8017a8e:	6030      	str	r0, [r6, #0]
 8017a90:	2800      	cmp	r0, #0
 8017a92:	d1d5      	bne.n	8017a40 <__sfp+0x24>
 8017a94:	f7ff ff78 	bl	8017988 <__sfp_lock_release>
 8017a98:	230c      	movs	r3, #12
 8017a9a:	603b      	str	r3, [r7, #0]
 8017a9c:	e7ee      	b.n	8017a7c <__sfp+0x60>
 8017a9e:	bf00      	nop
 8017aa0:	0801bb48 	.word	0x0801bb48
 8017aa4:	ffff0001 	.word	0xffff0001

08017aa8 <fiprintf>:
 8017aa8:	b40e      	push	{r1, r2, r3}
 8017aaa:	b503      	push	{r0, r1, lr}
 8017aac:	4601      	mov	r1, r0
 8017aae:	ab03      	add	r3, sp, #12
 8017ab0:	4805      	ldr	r0, [pc, #20]	; (8017ac8 <fiprintf+0x20>)
 8017ab2:	f853 2b04 	ldr.w	r2, [r3], #4
 8017ab6:	6800      	ldr	r0, [r0, #0]
 8017ab8:	9301      	str	r3, [sp, #4]
 8017aba:	f000 f8f7 	bl	8017cac <_vfiprintf_r>
 8017abe:	b002      	add	sp, #8
 8017ac0:	f85d eb04 	ldr.w	lr, [sp], #4
 8017ac4:	b003      	add	sp, #12
 8017ac6:	4770      	bx	lr
 8017ac8:	20000120 	.word	0x20000120

08017acc <_fwalk_reent>:
 8017acc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017ad0:	4606      	mov	r6, r0
 8017ad2:	4688      	mov	r8, r1
 8017ad4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017ad8:	2700      	movs	r7, #0
 8017ada:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017ade:	f1b9 0901 	subs.w	r9, r9, #1
 8017ae2:	d505      	bpl.n	8017af0 <_fwalk_reent+0x24>
 8017ae4:	6824      	ldr	r4, [r4, #0]
 8017ae6:	2c00      	cmp	r4, #0
 8017ae8:	d1f7      	bne.n	8017ada <_fwalk_reent+0xe>
 8017aea:	4638      	mov	r0, r7
 8017aec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017af0:	89ab      	ldrh	r3, [r5, #12]
 8017af2:	2b01      	cmp	r3, #1
 8017af4:	d907      	bls.n	8017b06 <_fwalk_reent+0x3a>
 8017af6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017afa:	3301      	adds	r3, #1
 8017afc:	d003      	beq.n	8017b06 <_fwalk_reent+0x3a>
 8017afe:	4629      	mov	r1, r5
 8017b00:	4630      	mov	r0, r6
 8017b02:	47c0      	blx	r8
 8017b04:	4307      	orrs	r7, r0
 8017b06:	3568      	adds	r5, #104	; 0x68
 8017b08:	e7e9      	b.n	8017ade <_fwalk_reent+0x12>
	...

08017b0c <__libc_init_array>:
 8017b0c:	b570      	push	{r4, r5, r6, lr}
 8017b0e:	4d0d      	ldr	r5, [pc, #52]	; (8017b44 <__libc_init_array+0x38>)
 8017b10:	4c0d      	ldr	r4, [pc, #52]	; (8017b48 <__libc_init_array+0x3c>)
 8017b12:	1b64      	subs	r4, r4, r5
 8017b14:	10a4      	asrs	r4, r4, #2
 8017b16:	2600      	movs	r6, #0
 8017b18:	42a6      	cmp	r6, r4
 8017b1a:	d109      	bne.n	8017b30 <__libc_init_array+0x24>
 8017b1c:	4d0b      	ldr	r5, [pc, #44]	; (8017b4c <__libc_init_array+0x40>)
 8017b1e:	4c0c      	ldr	r4, [pc, #48]	; (8017b50 <__libc_init_array+0x44>)
 8017b20:	f000 ff9c 	bl	8018a5c <_init>
 8017b24:	1b64      	subs	r4, r4, r5
 8017b26:	10a4      	asrs	r4, r4, #2
 8017b28:	2600      	movs	r6, #0
 8017b2a:	42a6      	cmp	r6, r4
 8017b2c:	d105      	bne.n	8017b3a <__libc_init_array+0x2e>
 8017b2e:	bd70      	pop	{r4, r5, r6, pc}
 8017b30:	f855 3b04 	ldr.w	r3, [r5], #4
 8017b34:	4798      	blx	r3
 8017b36:	3601      	adds	r6, #1
 8017b38:	e7ee      	b.n	8017b18 <__libc_init_array+0xc>
 8017b3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8017b3e:	4798      	blx	r3
 8017b40:	3601      	adds	r6, #1
 8017b42:	e7f2      	b.n	8017b2a <__libc_init_array+0x1e>
 8017b44:	0801bc00 	.word	0x0801bc00
 8017b48:	0801bc00 	.word	0x0801bc00
 8017b4c:	0801bc00 	.word	0x0801bc00
 8017b50:	0801bc04 	.word	0x0801bc04

08017b54 <__retarget_lock_init_recursive>:
 8017b54:	4770      	bx	lr

08017b56 <__retarget_lock_acquire_recursive>:
 8017b56:	4770      	bx	lr

08017b58 <__retarget_lock_release_recursive>:
 8017b58:	4770      	bx	lr

08017b5a <memcmp>:
 8017b5a:	b530      	push	{r4, r5, lr}
 8017b5c:	3901      	subs	r1, #1
 8017b5e:	2400      	movs	r4, #0
 8017b60:	42a2      	cmp	r2, r4
 8017b62:	d101      	bne.n	8017b68 <memcmp+0xe>
 8017b64:	2000      	movs	r0, #0
 8017b66:	e005      	b.n	8017b74 <memcmp+0x1a>
 8017b68:	5d03      	ldrb	r3, [r0, r4]
 8017b6a:	3401      	adds	r4, #1
 8017b6c:	5d0d      	ldrb	r5, [r1, r4]
 8017b6e:	42ab      	cmp	r3, r5
 8017b70:	d0f6      	beq.n	8017b60 <memcmp+0x6>
 8017b72:	1b58      	subs	r0, r3, r5
 8017b74:	bd30      	pop	{r4, r5, pc}

08017b76 <memcpy>:
 8017b76:	440a      	add	r2, r1
 8017b78:	4291      	cmp	r1, r2
 8017b7a:	f100 33ff 	add.w	r3, r0, #4294967295
 8017b7e:	d100      	bne.n	8017b82 <memcpy+0xc>
 8017b80:	4770      	bx	lr
 8017b82:	b510      	push	{r4, lr}
 8017b84:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017b88:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017b8c:	4291      	cmp	r1, r2
 8017b8e:	d1f9      	bne.n	8017b84 <memcpy+0xe>
 8017b90:	bd10      	pop	{r4, pc}

08017b92 <memset>:
 8017b92:	4402      	add	r2, r0
 8017b94:	4603      	mov	r3, r0
 8017b96:	4293      	cmp	r3, r2
 8017b98:	d100      	bne.n	8017b9c <memset+0xa>
 8017b9a:	4770      	bx	lr
 8017b9c:	f803 1b01 	strb.w	r1, [r3], #1
 8017ba0:	e7f9      	b.n	8017b96 <memset+0x4>
	...

08017ba4 <_malloc_r>:
 8017ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ba6:	1ccd      	adds	r5, r1, #3
 8017ba8:	f025 0503 	bic.w	r5, r5, #3
 8017bac:	3508      	adds	r5, #8
 8017bae:	2d0c      	cmp	r5, #12
 8017bb0:	bf38      	it	cc
 8017bb2:	250c      	movcc	r5, #12
 8017bb4:	2d00      	cmp	r5, #0
 8017bb6:	4606      	mov	r6, r0
 8017bb8:	db01      	blt.n	8017bbe <_malloc_r+0x1a>
 8017bba:	42a9      	cmp	r1, r5
 8017bbc:	d903      	bls.n	8017bc6 <_malloc_r+0x22>
 8017bbe:	230c      	movs	r3, #12
 8017bc0:	6033      	str	r3, [r6, #0]
 8017bc2:	2000      	movs	r0, #0
 8017bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017bc6:	f000 fe75 	bl	80188b4 <__malloc_lock>
 8017bca:	4921      	ldr	r1, [pc, #132]	; (8017c50 <_malloc_r+0xac>)
 8017bcc:	680a      	ldr	r2, [r1, #0]
 8017bce:	4614      	mov	r4, r2
 8017bd0:	b99c      	cbnz	r4, 8017bfa <_malloc_r+0x56>
 8017bd2:	4f20      	ldr	r7, [pc, #128]	; (8017c54 <_malloc_r+0xb0>)
 8017bd4:	683b      	ldr	r3, [r7, #0]
 8017bd6:	b923      	cbnz	r3, 8017be2 <_malloc_r+0x3e>
 8017bd8:	4621      	mov	r1, r4
 8017bda:	4630      	mov	r0, r6
 8017bdc:	f000 fbec 	bl	80183b8 <_sbrk_r>
 8017be0:	6038      	str	r0, [r7, #0]
 8017be2:	4629      	mov	r1, r5
 8017be4:	4630      	mov	r0, r6
 8017be6:	f000 fbe7 	bl	80183b8 <_sbrk_r>
 8017bea:	1c43      	adds	r3, r0, #1
 8017bec:	d123      	bne.n	8017c36 <_malloc_r+0x92>
 8017bee:	230c      	movs	r3, #12
 8017bf0:	6033      	str	r3, [r6, #0]
 8017bf2:	4630      	mov	r0, r6
 8017bf4:	f000 fe64 	bl	80188c0 <__malloc_unlock>
 8017bf8:	e7e3      	b.n	8017bc2 <_malloc_r+0x1e>
 8017bfa:	6823      	ldr	r3, [r4, #0]
 8017bfc:	1b5b      	subs	r3, r3, r5
 8017bfe:	d417      	bmi.n	8017c30 <_malloc_r+0x8c>
 8017c00:	2b0b      	cmp	r3, #11
 8017c02:	d903      	bls.n	8017c0c <_malloc_r+0x68>
 8017c04:	6023      	str	r3, [r4, #0]
 8017c06:	441c      	add	r4, r3
 8017c08:	6025      	str	r5, [r4, #0]
 8017c0a:	e004      	b.n	8017c16 <_malloc_r+0x72>
 8017c0c:	6863      	ldr	r3, [r4, #4]
 8017c0e:	42a2      	cmp	r2, r4
 8017c10:	bf0c      	ite	eq
 8017c12:	600b      	streq	r3, [r1, #0]
 8017c14:	6053      	strne	r3, [r2, #4]
 8017c16:	4630      	mov	r0, r6
 8017c18:	f000 fe52 	bl	80188c0 <__malloc_unlock>
 8017c1c:	f104 000b 	add.w	r0, r4, #11
 8017c20:	1d23      	adds	r3, r4, #4
 8017c22:	f020 0007 	bic.w	r0, r0, #7
 8017c26:	1ac2      	subs	r2, r0, r3
 8017c28:	d0cc      	beq.n	8017bc4 <_malloc_r+0x20>
 8017c2a:	1a1b      	subs	r3, r3, r0
 8017c2c:	50a3      	str	r3, [r4, r2]
 8017c2e:	e7c9      	b.n	8017bc4 <_malloc_r+0x20>
 8017c30:	4622      	mov	r2, r4
 8017c32:	6864      	ldr	r4, [r4, #4]
 8017c34:	e7cc      	b.n	8017bd0 <_malloc_r+0x2c>
 8017c36:	1cc4      	adds	r4, r0, #3
 8017c38:	f024 0403 	bic.w	r4, r4, #3
 8017c3c:	42a0      	cmp	r0, r4
 8017c3e:	d0e3      	beq.n	8017c08 <_malloc_r+0x64>
 8017c40:	1a21      	subs	r1, r4, r0
 8017c42:	4630      	mov	r0, r6
 8017c44:	f000 fbb8 	bl	80183b8 <_sbrk_r>
 8017c48:	3001      	adds	r0, #1
 8017c4a:	d1dd      	bne.n	8017c08 <_malloc_r+0x64>
 8017c4c:	e7cf      	b.n	8017bee <_malloc_r+0x4a>
 8017c4e:	bf00      	nop
 8017c50:	20004fc0 	.word	0x20004fc0
 8017c54:	20004fc4 	.word	0x20004fc4

08017c58 <__sfputc_r>:
 8017c58:	6893      	ldr	r3, [r2, #8]
 8017c5a:	3b01      	subs	r3, #1
 8017c5c:	2b00      	cmp	r3, #0
 8017c5e:	b410      	push	{r4}
 8017c60:	6093      	str	r3, [r2, #8]
 8017c62:	da08      	bge.n	8017c76 <__sfputc_r+0x1e>
 8017c64:	6994      	ldr	r4, [r2, #24]
 8017c66:	42a3      	cmp	r3, r4
 8017c68:	db01      	blt.n	8017c6e <__sfputc_r+0x16>
 8017c6a:	290a      	cmp	r1, #10
 8017c6c:	d103      	bne.n	8017c76 <__sfputc_r+0x1e>
 8017c6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017c72:	f000 bbf5 	b.w	8018460 <__swbuf_r>
 8017c76:	6813      	ldr	r3, [r2, #0]
 8017c78:	1c58      	adds	r0, r3, #1
 8017c7a:	6010      	str	r0, [r2, #0]
 8017c7c:	7019      	strb	r1, [r3, #0]
 8017c7e:	4608      	mov	r0, r1
 8017c80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017c84:	4770      	bx	lr

08017c86 <__sfputs_r>:
 8017c86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c88:	4606      	mov	r6, r0
 8017c8a:	460f      	mov	r7, r1
 8017c8c:	4614      	mov	r4, r2
 8017c8e:	18d5      	adds	r5, r2, r3
 8017c90:	42ac      	cmp	r4, r5
 8017c92:	d101      	bne.n	8017c98 <__sfputs_r+0x12>
 8017c94:	2000      	movs	r0, #0
 8017c96:	e007      	b.n	8017ca8 <__sfputs_r+0x22>
 8017c98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017c9c:	463a      	mov	r2, r7
 8017c9e:	4630      	mov	r0, r6
 8017ca0:	f7ff ffda 	bl	8017c58 <__sfputc_r>
 8017ca4:	1c43      	adds	r3, r0, #1
 8017ca6:	d1f3      	bne.n	8017c90 <__sfputs_r+0xa>
 8017ca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017cac <_vfiprintf_r>:
 8017cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017cb0:	460d      	mov	r5, r1
 8017cb2:	b09d      	sub	sp, #116	; 0x74
 8017cb4:	4614      	mov	r4, r2
 8017cb6:	4698      	mov	r8, r3
 8017cb8:	4606      	mov	r6, r0
 8017cba:	b118      	cbz	r0, 8017cc4 <_vfiprintf_r+0x18>
 8017cbc:	6983      	ldr	r3, [r0, #24]
 8017cbe:	b90b      	cbnz	r3, 8017cc4 <_vfiprintf_r+0x18>
 8017cc0:	f7ff fe74 	bl	80179ac <__sinit>
 8017cc4:	4b89      	ldr	r3, [pc, #548]	; (8017eec <_vfiprintf_r+0x240>)
 8017cc6:	429d      	cmp	r5, r3
 8017cc8:	d11b      	bne.n	8017d02 <_vfiprintf_r+0x56>
 8017cca:	6875      	ldr	r5, [r6, #4]
 8017ccc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017cce:	07d9      	lsls	r1, r3, #31
 8017cd0:	d405      	bmi.n	8017cde <_vfiprintf_r+0x32>
 8017cd2:	89ab      	ldrh	r3, [r5, #12]
 8017cd4:	059a      	lsls	r2, r3, #22
 8017cd6:	d402      	bmi.n	8017cde <_vfiprintf_r+0x32>
 8017cd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017cda:	f7ff ff3c 	bl	8017b56 <__retarget_lock_acquire_recursive>
 8017cde:	89ab      	ldrh	r3, [r5, #12]
 8017ce0:	071b      	lsls	r3, r3, #28
 8017ce2:	d501      	bpl.n	8017ce8 <_vfiprintf_r+0x3c>
 8017ce4:	692b      	ldr	r3, [r5, #16]
 8017ce6:	b9eb      	cbnz	r3, 8017d24 <_vfiprintf_r+0x78>
 8017ce8:	4629      	mov	r1, r5
 8017cea:	4630      	mov	r0, r6
 8017cec:	f000 fc1c 	bl	8018528 <__swsetup_r>
 8017cf0:	b1c0      	cbz	r0, 8017d24 <_vfiprintf_r+0x78>
 8017cf2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017cf4:	07dc      	lsls	r4, r3, #31
 8017cf6:	d50e      	bpl.n	8017d16 <_vfiprintf_r+0x6a>
 8017cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8017cfc:	b01d      	add	sp, #116	; 0x74
 8017cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d02:	4b7b      	ldr	r3, [pc, #492]	; (8017ef0 <_vfiprintf_r+0x244>)
 8017d04:	429d      	cmp	r5, r3
 8017d06:	d101      	bne.n	8017d0c <_vfiprintf_r+0x60>
 8017d08:	68b5      	ldr	r5, [r6, #8]
 8017d0a:	e7df      	b.n	8017ccc <_vfiprintf_r+0x20>
 8017d0c:	4b79      	ldr	r3, [pc, #484]	; (8017ef4 <_vfiprintf_r+0x248>)
 8017d0e:	429d      	cmp	r5, r3
 8017d10:	bf08      	it	eq
 8017d12:	68f5      	ldreq	r5, [r6, #12]
 8017d14:	e7da      	b.n	8017ccc <_vfiprintf_r+0x20>
 8017d16:	89ab      	ldrh	r3, [r5, #12]
 8017d18:	0598      	lsls	r0, r3, #22
 8017d1a:	d4ed      	bmi.n	8017cf8 <_vfiprintf_r+0x4c>
 8017d1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017d1e:	f7ff ff1b 	bl	8017b58 <__retarget_lock_release_recursive>
 8017d22:	e7e9      	b.n	8017cf8 <_vfiprintf_r+0x4c>
 8017d24:	2300      	movs	r3, #0
 8017d26:	9309      	str	r3, [sp, #36]	; 0x24
 8017d28:	2320      	movs	r3, #32
 8017d2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017d2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8017d32:	2330      	movs	r3, #48	; 0x30
 8017d34:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8017ef8 <_vfiprintf_r+0x24c>
 8017d38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017d3c:	f04f 0901 	mov.w	r9, #1
 8017d40:	4623      	mov	r3, r4
 8017d42:	469a      	mov	sl, r3
 8017d44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017d48:	b10a      	cbz	r2, 8017d4e <_vfiprintf_r+0xa2>
 8017d4a:	2a25      	cmp	r2, #37	; 0x25
 8017d4c:	d1f9      	bne.n	8017d42 <_vfiprintf_r+0x96>
 8017d4e:	ebba 0b04 	subs.w	fp, sl, r4
 8017d52:	d00b      	beq.n	8017d6c <_vfiprintf_r+0xc0>
 8017d54:	465b      	mov	r3, fp
 8017d56:	4622      	mov	r2, r4
 8017d58:	4629      	mov	r1, r5
 8017d5a:	4630      	mov	r0, r6
 8017d5c:	f7ff ff93 	bl	8017c86 <__sfputs_r>
 8017d60:	3001      	adds	r0, #1
 8017d62:	f000 80aa 	beq.w	8017eba <_vfiprintf_r+0x20e>
 8017d66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017d68:	445a      	add	r2, fp
 8017d6a:	9209      	str	r2, [sp, #36]	; 0x24
 8017d6c:	f89a 3000 	ldrb.w	r3, [sl]
 8017d70:	2b00      	cmp	r3, #0
 8017d72:	f000 80a2 	beq.w	8017eba <_vfiprintf_r+0x20e>
 8017d76:	2300      	movs	r3, #0
 8017d78:	f04f 32ff 	mov.w	r2, #4294967295
 8017d7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017d80:	f10a 0a01 	add.w	sl, sl, #1
 8017d84:	9304      	str	r3, [sp, #16]
 8017d86:	9307      	str	r3, [sp, #28]
 8017d88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017d8c:	931a      	str	r3, [sp, #104]	; 0x68
 8017d8e:	4654      	mov	r4, sl
 8017d90:	2205      	movs	r2, #5
 8017d92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017d96:	4858      	ldr	r0, [pc, #352]	; (8017ef8 <_vfiprintf_r+0x24c>)
 8017d98:	f7e8 fa52 	bl	8000240 <memchr>
 8017d9c:	9a04      	ldr	r2, [sp, #16]
 8017d9e:	b9d8      	cbnz	r0, 8017dd8 <_vfiprintf_r+0x12c>
 8017da0:	06d1      	lsls	r1, r2, #27
 8017da2:	bf44      	itt	mi
 8017da4:	2320      	movmi	r3, #32
 8017da6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017daa:	0713      	lsls	r3, r2, #28
 8017dac:	bf44      	itt	mi
 8017dae:	232b      	movmi	r3, #43	; 0x2b
 8017db0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017db4:	f89a 3000 	ldrb.w	r3, [sl]
 8017db8:	2b2a      	cmp	r3, #42	; 0x2a
 8017dba:	d015      	beq.n	8017de8 <_vfiprintf_r+0x13c>
 8017dbc:	9a07      	ldr	r2, [sp, #28]
 8017dbe:	4654      	mov	r4, sl
 8017dc0:	2000      	movs	r0, #0
 8017dc2:	f04f 0c0a 	mov.w	ip, #10
 8017dc6:	4621      	mov	r1, r4
 8017dc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017dcc:	3b30      	subs	r3, #48	; 0x30
 8017dce:	2b09      	cmp	r3, #9
 8017dd0:	d94e      	bls.n	8017e70 <_vfiprintf_r+0x1c4>
 8017dd2:	b1b0      	cbz	r0, 8017e02 <_vfiprintf_r+0x156>
 8017dd4:	9207      	str	r2, [sp, #28]
 8017dd6:	e014      	b.n	8017e02 <_vfiprintf_r+0x156>
 8017dd8:	eba0 0308 	sub.w	r3, r0, r8
 8017ddc:	fa09 f303 	lsl.w	r3, r9, r3
 8017de0:	4313      	orrs	r3, r2
 8017de2:	9304      	str	r3, [sp, #16]
 8017de4:	46a2      	mov	sl, r4
 8017de6:	e7d2      	b.n	8017d8e <_vfiprintf_r+0xe2>
 8017de8:	9b03      	ldr	r3, [sp, #12]
 8017dea:	1d19      	adds	r1, r3, #4
 8017dec:	681b      	ldr	r3, [r3, #0]
 8017dee:	9103      	str	r1, [sp, #12]
 8017df0:	2b00      	cmp	r3, #0
 8017df2:	bfbb      	ittet	lt
 8017df4:	425b      	neglt	r3, r3
 8017df6:	f042 0202 	orrlt.w	r2, r2, #2
 8017dfa:	9307      	strge	r3, [sp, #28]
 8017dfc:	9307      	strlt	r3, [sp, #28]
 8017dfe:	bfb8      	it	lt
 8017e00:	9204      	strlt	r2, [sp, #16]
 8017e02:	7823      	ldrb	r3, [r4, #0]
 8017e04:	2b2e      	cmp	r3, #46	; 0x2e
 8017e06:	d10c      	bne.n	8017e22 <_vfiprintf_r+0x176>
 8017e08:	7863      	ldrb	r3, [r4, #1]
 8017e0a:	2b2a      	cmp	r3, #42	; 0x2a
 8017e0c:	d135      	bne.n	8017e7a <_vfiprintf_r+0x1ce>
 8017e0e:	9b03      	ldr	r3, [sp, #12]
 8017e10:	1d1a      	adds	r2, r3, #4
 8017e12:	681b      	ldr	r3, [r3, #0]
 8017e14:	9203      	str	r2, [sp, #12]
 8017e16:	2b00      	cmp	r3, #0
 8017e18:	bfb8      	it	lt
 8017e1a:	f04f 33ff 	movlt.w	r3, #4294967295
 8017e1e:	3402      	adds	r4, #2
 8017e20:	9305      	str	r3, [sp, #20]
 8017e22:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017f08 <_vfiprintf_r+0x25c>
 8017e26:	7821      	ldrb	r1, [r4, #0]
 8017e28:	2203      	movs	r2, #3
 8017e2a:	4650      	mov	r0, sl
 8017e2c:	f7e8 fa08 	bl	8000240 <memchr>
 8017e30:	b140      	cbz	r0, 8017e44 <_vfiprintf_r+0x198>
 8017e32:	2340      	movs	r3, #64	; 0x40
 8017e34:	eba0 000a 	sub.w	r0, r0, sl
 8017e38:	fa03 f000 	lsl.w	r0, r3, r0
 8017e3c:	9b04      	ldr	r3, [sp, #16]
 8017e3e:	4303      	orrs	r3, r0
 8017e40:	3401      	adds	r4, #1
 8017e42:	9304      	str	r3, [sp, #16]
 8017e44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017e48:	482c      	ldr	r0, [pc, #176]	; (8017efc <_vfiprintf_r+0x250>)
 8017e4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017e4e:	2206      	movs	r2, #6
 8017e50:	f7e8 f9f6 	bl	8000240 <memchr>
 8017e54:	2800      	cmp	r0, #0
 8017e56:	d03f      	beq.n	8017ed8 <_vfiprintf_r+0x22c>
 8017e58:	4b29      	ldr	r3, [pc, #164]	; (8017f00 <_vfiprintf_r+0x254>)
 8017e5a:	bb1b      	cbnz	r3, 8017ea4 <_vfiprintf_r+0x1f8>
 8017e5c:	9b03      	ldr	r3, [sp, #12]
 8017e5e:	3307      	adds	r3, #7
 8017e60:	f023 0307 	bic.w	r3, r3, #7
 8017e64:	3308      	adds	r3, #8
 8017e66:	9303      	str	r3, [sp, #12]
 8017e68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017e6a:	443b      	add	r3, r7
 8017e6c:	9309      	str	r3, [sp, #36]	; 0x24
 8017e6e:	e767      	b.n	8017d40 <_vfiprintf_r+0x94>
 8017e70:	fb0c 3202 	mla	r2, ip, r2, r3
 8017e74:	460c      	mov	r4, r1
 8017e76:	2001      	movs	r0, #1
 8017e78:	e7a5      	b.n	8017dc6 <_vfiprintf_r+0x11a>
 8017e7a:	2300      	movs	r3, #0
 8017e7c:	3401      	adds	r4, #1
 8017e7e:	9305      	str	r3, [sp, #20]
 8017e80:	4619      	mov	r1, r3
 8017e82:	f04f 0c0a 	mov.w	ip, #10
 8017e86:	4620      	mov	r0, r4
 8017e88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017e8c:	3a30      	subs	r2, #48	; 0x30
 8017e8e:	2a09      	cmp	r2, #9
 8017e90:	d903      	bls.n	8017e9a <_vfiprintf_r+0x1ee>
 8017e92:	2b00      	cmp	r3, #0
 8017e94:	d0c5      	beq.n	8017e22 <_vfiprintf_r+0x176>
 8017e96:	9105      	str	r1, [sp, #20]
 8017e98:	e7c3      	b.n	8017e22 <_vfiprintf_r+0x176>
 8017e9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8017e9e:	4604      	mov	r4, r0
 8017ea0:	2301      	movs	r3, #1
 8017ea2:	e7f0      	b.n	8017e86 <_vfiprintf_r+0x1da>
 8017ea4:	ab03      	add	r3, sp, #12
 8017ea6:	9300      	str	r3, [sp, #0]
 8017ea8:	462a      	mov	r2, r5
 8017eaa:	4b16      	ldr	r3, [pc, #88]	; (8017f04 <_vfiprintf_r+0x258>)
 8017eac:	a904      	add	r1, sp, #16
 8017eae:	4630      	mov	r0, r6
 8017eb0:	f3af 8000 	nop.w
 8017eb4:	4607      	mov	r7, r0
 8017eb6:	1c78      	adds	r0, r7, #1
 8017eb8:	d1d6      	bne.n	8017e68 <_vfiprintf_r+0x1bc>
 8017eba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017ebc:	07d9      	lsls	r1, r3, #31
 8017ebe:	d405      	bmi.n	8017ecc <_vfiprintf_r+0x220>
 8017ec0:	89ab      	ldrh	r3, [r5, #12]
 8017ec2:	059a      	lsls	r2, r3, #22
 8017ec4:	d402      	bmi.n	8017ecc <_vfiprintf_r+0x220>
 8017ec6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017ec8:	f7ff fe46 	bl	8017b58 <__retarget_lock_release_recursive>
 8017ecc:	89ab      	ldrh	r3, [r5, #12]
 8017ece:	065b      	lsls	r3, r3, #25
 8017ed0:	f53f af12 	bmi.w	8017cf8 <_vfiprintf_r+0x4c>
 8017ed4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017ed6:	e711      	b.n	8017cfc <_vfiprintf_r+0x50>
 8017ed8:	ab03      	add	r3, sp, #12
 8017eda:	9300      	str	r3, [sp, #0]
 8017edc:	462a      	mov	r2, r5
 8017ede:	4b09      	ldr	r3, [pc, #36]	; (8017f04 <_vfiprintf_r+0x258>)
 8017ee0:	a904      	add	r1, sp, #16
 8017ee2:	4630      	mov	r0, r6
 8017ee4:	f000 f880 	bl	8017fe8 <_printf_i>
 8017ee8:	e7e4      	b.n	8017eb4 <_vfiprintf_r+0x208>
 8017eea:	bf00      	nop
 8017eec:	0801bb08 	.word	0x0801bb08
 8017ef0:	0801bb28 	.word	0x0801bb28
 8017ef4:	0801bae8 	.word	0x0801bae8
 8017ef8:	0801bb4c 	.word	0x0801bb4c
 8017efc:	0801bb56 	.word	0x0801bb56
 8017f00:	00000000 	.word	0x00000000
 8017f04:	08017c87 	.word	0x08017c87
 8017f08:	0801bb52 	.word	0x0801bb52

08017f0c <_printf_common>:
 8017f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017f10:	4616      	mov	r6, r2
 8017f12:	4699      	mov	r9, r3
 8017f14:	688a      	ldr	r2, [r1, #8]
 8017f16:	690b      	ldr	r3, [r1, #16]
 8017f18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017f1c:	4293      	cmp	r3, r2
 8017f1e:	bfb8      	it	lt
 8017f20:	4613      	movlt	r3, r2
 8017f22:	6033      	str	r3, [r6, #0]
 8017f24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017f28:	4607      	mov	r7, r0
 8017f2a:	460c      	mov	r4, r1
 8017f2c:	b10a      	cbz	r2, 8017f32 <_printf_common+0x26>
 8017f2e:	3301      	adds	r3, #1
 8017f30:	6033      	str	r3, [r6, #0]
 8017f32:	6823      	ldr	r3, [r4, #0]
 8017f34:	0699      	lsls	r1, r3, #26
 8017f36:	bf42      	ittt	mi
 8017f38:	6833      	ldrmi	r3, [r6, #0]
 8017f3a:	3302      	addmi	r3, #2
 8017f3c:	6033      	strmi	r3, [r6, #0]
 8017f3e:	6825      	ldr	r5, [r4, #0]
 8017f40:	f015 0506 	ands.w	r5, r5, #6
 8017f44:	d106      	bne.n	8017f54 <_printf_common+0x48>
 8017f46:	f104 0a19 	add.w	sl, r4, #25
 8017f4a:	68e3      	ldr	r3, [r4, #12]
 8017f4c:	6832      	ldr	r2, [r6, #0]
 8017f4e:	1a9b      	subs	r3, r3, r2
 8017f50:	42ab      	cmp	r3, r5
 8017f52:	dc26      	bgt.n	8017fa2 <_printf_common+0x96>
 8017f54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017f58:	1e13      	subs	r3, r2, #0
 8017f5a:	6822      	ldr	r2, [r4, #0]
 8017f5c:	bf18      	it	ne
 8017f5e:	2301      	movne	r3, #1
 8017f60:	0692      	lsls	r2, r2, #26
 8017f62:	d42b      	bmi.n	8017fbc <_printf_common+0xb0>
 8017f64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017f68:	4649      	mov	r1, r9
 8017f6a:	4638      	mov	r0, r7
 8017f6c:	47c0      	blx	r8
 8017f6e:	3001      	adds	r0, #1
 8017f70:	d01e      	beq.n	8017fb0 <_printf_common+0xa4>
 8017f72:	6823      	ldr	r3, [r4, #0]
 8017f74:	68e5      	ldr	r5, [r4, #12]
 8017f76:	6832      	ldr	r2, [r6, #0]
 8017f78:	f003 0306 	and.w	r3, r3, #6
 8017f7c:	2b04      	cmp	r3, #4
 8017f7e:	bf08      	it	eq
 8017f80:	1aad      	subeq	r5, r5, r2
 8017f82:	68a3      	ldr	r3, [r4, #8]
 8017f84:	6922      	ldr	r2, [r4, #16]
 8017f86:	bf0c      	ite	eq
 8017f88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017f8c:	2500      	movne	r5, #0
 8017f8e:	4293      	cmp	r3, r2
 8017f90:	bfc4      	itt	gt
 8017f92:	1a9b      	subgt	r3, r3, r2
 8017f94:	18ed      	addgt	r5, r5, r3
 8017f96:	2600      	movs	r6, #0
 8017f98:	341a      	adds	r4, #26
 8017f9a:	42b5      	cmp	r5, r6
 8017f9c:	d11a      	bne.n	8017fd4 <_printf_common+0xc8>
 8017f9e:	2000      	movs	r0, #0
 8017fa0:	e008      	b.n	8017fb4 <_printf_common+0xa8>
 8017fa2:	2301      	movs	r3, #1
 8017fa4:	4652      	mov	r2, sl
 8017fa6:	4649      	mov	r1, r9
 8017fa8:	4638      	mov	r0, r7
 8017faa:	47c0      	blx	r8
 8017fac:	3001      	adds	r0, #1
 8017fae:	d103      	bne.n	8017fb8 <_printf_common+0xac>
 8017fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8017fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017fb8:	3501      	adds	r5, #1
 8017fba:	e7c6      	b.n	8017f4a <_printf_common+0x3e>
 8017fbc:	18e1      	adds	r1, r4, r3
 8017fbe:	1c5a      	adds	r2, r3, #1
 8017fc0:	2030      	movs	r0, #48	; 0x30
 8017fc2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017fc6:	4422      	add	r2, r4
 8017fc8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017fcc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017fd0:	3302      	adds	r3, #2
 8017fd2:	e7c7      	b.n	8017f64 <_printf_common+0x58>
 8017fd4:	2301      	movs	r3, #1
 8017fd6:	4622      	mov	r2, r4
 8017fd8:	4649      	mov	r1, r9
 8017fda:	4638      	mov	r0, r7
 8017fdc:	47c0      	blx	r8
 8017fde:	3001      	adds	r0, #1
 8017fe0:	d0e6      	beq.n	8017fb0 <_printf_common+0xa4>
 8017fe2:	3601      	adds	r6, #1
 8017fe4:	e7d9      	b.n	8017f9a <_printf_common+0x8e>
	...

08017fe8 <_printf_i>:
 8017fe8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017fec:	460c      	mov	r4, r1
 8017fee:	4691      	mov	r9, r2
 8017ff0:	7e27      	ldrb	r7, [r4, #24]
 8017ff2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017ff4:	2f78      	cmp	r7, #120	; 0x78
 8017ff6:	4680      	mov	r8, r0
 8017ff8:	469a      	mov	sl, r3
 8017ffa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017ffe:	d807      	bhi.n	8018010 <_printf_i+0x28>
 8018000:	2f62      	cmp	r7, #98	; 0x62
 8018002:	d80a      	bhi.n	801801a <_printf_i+0x32>
 8018004:	2f00      	cmp	r7, #0
 8018006:	f000 80d8 	beq.w	80181ba <_printf_i+0x1d2>
 801800a:	2f58      	cmp	r7, #88	; 0x58
 801800c:	f000 80a3 	beq.w	8018156 <_printf_i+0x16e>
 8018010:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8018014:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8018018:	e03a      	b.n	8018090 <_printf_i+0xa8>
 801801a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801801e:	2b15      	cmp	r3, #21
 8018020:	d8f6      	bhi.n	8018010 <_printf_i+0x28>
 8018022:	a001      	add	r0, pc, #4	; (adr r0, 8018028 <_printf_i+0x40>)
 8018024:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8018028:	08018081 	.word	0x08018081
 801802c:	08018095 	.word	0x08018095
 8018030:	08018011 	.word	0x08018011
 8018034:	08018011 	.word	0x08018011
 8018038:	08018011 	.word	0x08018011
 801803c:	08018011 	.word	0x08018011
 8018040:	08018095 	.word	0x08018095
 8018044:	08018011 	.word	0x08018011
 8018048:	08018011 	.word	0x08018011
 801804c:	08018011 	.word	0x08018011
 8018050:	08018011 	.word	0x08018011
 8018054:	080181a1 	.word	0x080181a1
 8018058:	080180c5 	.word	0x080180c5
 801805c:	08018183 	.word	0x08018183
 8018060:	08018011 	.word	0x08018011
 8018064:	08018011 	.word	0x08018011
 8018068:	080181c3 	.word	0x080181c3
 801806c:	08018011 	.word	0x08018011
 8018070:	080180c5 	.word	0x080180c5
 8018074:	08018011 	.word	0x08018011
 8018078:	08018011 	.word	0x08018011
 801807c:	0801818b 	.word	0x0801818b
 8018080:	680b      	ldr	r3, [r1, #0]
 8018082:	1d1a      	adds	r2, r3, #4
 8018084:	681b      	ldr	r3, [r3, #0]
 8018086:	600a      	str	r2, [r1, #0]
 8018088:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801808c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018090:	2301      	movs	r3, #1
 8018092:	e0a3      	b.n	80181dc <_printf_i+0x1f4>
 8018094:	6825      	ldr	r5, [r4, #0]
 8018096:	6808      	ldr	r0, [r1, #0]
 8018098:	062e      	lsls	r6, r5, #24
 801809a:	f100 0304 	add.w	r3, r0, #4
 801809e:	d50a      	bpl.n	80180b6 <_printf_i+0xce>
 80180a0:	6805      	ldr	r5, [r0, #0]
 80180a2:	600b      	str	r3, [r1, #0]
 80180a4:	2d00      	cmp	r5, #0
 80180a6:	da03      	bge.n	80180b0 <_printf_i+0xc8>
 80180a8:	232d      	movs	r3, #45	; 0x2d
 80180aa:	426d      	negs	r5, r5
 80180ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80180b0:	485e      	ldr	r0, [pc, #376]	; (801822c <_printf_i+0x244>)
 80180b2:	230a      	movs	r3, #10
 80180b4:	e019      	b.n	80180ea <_printf_i+0x102>
 80180b6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80180ba:	6805      	ldr	r5, [r0, #0]
 80180bc:	600b      	str	r3, [r1, #0]
 80180be:	bf18      	it	ne
 80180c0:	b22d      	sxthne	r5, r5
 80180c2:	e7ef      	b.n	80180a4 <_printf_i+0xbc>
 80180c4:	680b      	ldr	r3, [r1, #0]
 80180c6:	6825      	ldr	r5, [r4, #0]
 80180c8:	1d18      	adds	r0, r3, #4
 80180ca:	6008      	str	r0, [r1, #0]
 80180cc:	0628      	lsls	r0, r5, #24
 80180ce:	d501      	bpl.n	80180d4 <_printf_i+0xec>
 80180d0:	681d      	ldr	r5, [r3, #0]
 80180d2:	e002      	b.n	80180da <_printf_i+0xf2>
 80180d4:	0669      	lsls	r1, r5, #25
 80180d6:	d5fb      	bpl.n	80180d0 <_printf_i+0xe8>
 80180d8:	881d      	ldrh	r5, [r3, #0]
 80180da:	4854      	ldr	r0, [pc, #336]	; (801822c <_printf_i+0x244>)
 80180dc:	2f6f      	cmp	r7, #111	; 0x6f
 80180de:	bf0c      	ite	eq
 80180e0:	2308      	moveq	r3, #8
 80180e2:	230a      	movne	r3, #10
 80180e4:	2100      	movs	r1, #0
 80180e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80180ea:	6866      	ldr	r6, [r4, #4]
 80180ec:	60a6      	str	r6, [r4, #8]
 80180ee:	2e00      	cmp	r6, #0
 80180f0:	bfa2      	ittt	ge
 80180f2:	6821      	ldrge	r1, [r4, #0]
 80180f4:	f021 0104 	bicge.w	r1, r1, #4
 80180f8:	6021      	strge	r1, [r4, #0]
 80180fa:	b90d      	cbnz	r5, 8018100 <_printf_i+0x118>
 80180fc:	2e00      	cmp	r6, #0
 80180fe:	d04d      	beq.n	801819c <_printf_i+0x1b4>
 8018100:	4616      	mov	r6, r2
 8018102:	fbb5 f1f3 	udiv	r1, r5, r3
 8018106:	fb03 5711 	mls	r7, r3, r1, r5
 801810a:	5dc7      	ldrb	r7, [r0, r7]
 801810c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018110:	462f      	mov	r7, r5
 8018112:	42bb      	cmp	r3, r7
 8018114:	460d      	mov	r5, r1
 8018116:	d9f4      	bls.n	8018102 <_printf_i+0x11a>
 8018118:	2b08      	cmp	r3, #8
 801811a:	d10b      	bne.n	8018134 <_printf_i+0x14c>
 801811c:	6823      	ldr	r3, [r4, #0]
 801811e:	07df      	lsls	r7, r3, #31
 8018120:	d508      	bpl.n	8018134 <_printf_i+0x14c>
 8018122:	6923      	ldr	r3, [r4, #16]
 8018124:	6861      	ldr	r1, [r4, #4]
 8018126:	4299      	cmp	r1, r3
 8018128:	bfde      	ittt	le
 801812a:	2330      	movle	r3, #48	; 0x30
 801812c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8018130:	f106 36ff 	addle.w	r6, r6, #4294967295
 8018134:	1b92      	subs	r2, r2, r6
 8018136:	6122      	str	r2, [r4, #16]
 8018138:	f8cd a000 	str.w	sl, [sp]
 801813c:	464b      	mov	r3, r9
 801813e:	aa03      	add	r2, sp, #12
 8018140:	4621      	mov	r1, r4
 8018142:	4640      	mov	r0, r8
 8018144:	f7ff fee2 	bl	8017f0c <_printf_common>
 8018148:	3001      	adds	r0, #1
 801814a:	d14c      	bne.n	80181e6 <_printf_i+0x1fe>
 801814c:	f04f 30ff 	mov.w	r0, #4294967295
 8018150:	b004      	add	sp, #16
 8018152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018156:	4835      	ldr	r0, [pc, #212]	; (801822c <_printf_i+0x244>)
 8018158:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801815c:	6823      	ldr	r3, [r4, #0]
 801815e:	680e      	ldr	r6, [r1, #0]
 8018160:	061f      	lsls	r7, r3, #24
 8018162:	f856 5b04 	ldr.w	r5, [r6], #4
 8018166:	600e      	str	r6, [r1, #0]
 8018168:	d514      	bpl.n	8018194 <_printf_i+0x1ac>
 801816a:	07d9      	lsls	r1, r3, #31
 801816c:	bf44      	itt	mi
 801816e:	f043 0320 	orrmi.w	r3, r3, #32
 8018172:	6023      	strmi	r3, [r4, #0]
 8018174:	b91d      	cbnz	r5, 801817e <_printf_i+0x196>
 8018176:	6823      	ldr	r3, [r4, #0]
 8018178:	f023 0320 	bic.w	r3, r3, #32
 801817c:	6023      	str	r3, [r4, #0]
 801817e:	2310      	movs	r3, #16
 8018180:	e7b0      	b.n	80180e4 <_printf_i+0xfc>
 8018182:	6823      	ldr	r3, [r4, #0]
 8018184:	f043 0320 	orr.w	r3, r3, #32
 8018188:	6023      	str	r3, [r4, #0]
 801818a:	2378      	movs	r3, #120	; 0x78
 801818c:	4828      	ldr	r0, [pc, #160]	; (8018230 <_printf_i+0x248>)
 801818e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8018192:	e7e3      	b.n	801815c <_printf_i+0x174>
 8018194:	065e      	lsls	r6, r3, #25
 8018196:	bf48      	it	mi
 8018198:	b2ad      	uxthmi	r5, r5
 801819a:	e7e6      	b.n	801816a <_printf_i+0x182>
 801819c:	4616      	mov	r6, r2
 801819e:	e7bb      	b.n	8018118 <_printf_i+0x130>
 80181a0:	680b      	ldr	r3, [r1, #0]
 80181a2:	6826      	ldr	r6, [r4, #0]
 80181a4:	6960      	ldr	r0, [r4, #20]
 80181a6:	1d1d      	adds	r5, r3, #4
 80181a8:	600d      	str	r5, [r1, #0]
 80181aa:	0635      	lsls	r5, r6, #24
 80181ac:	681b      	ldr	r3, [r3, #0]
 80181ae:	d501      	bpl.n	80181b4 <_printf_i+0x1cc>
 80181b0:	6018      	str	r0, [r3, #0]
 80181b2:	e002      	b.n	80181ba <_printf_i+0x1d2>
 80181b4:	0671      	lsls	r1, r6, #25
 80181b6:	d5fb      	bpl.n	80181b0 <_printf_i+0x1c8>
 80181b8:	8018      	strh	r0, [r3, #0]
 80181ba:	2300      	movs	r3, #0
 80181bc:	6123      	str	r3, [r4, #16]
 80181be:	4616      	mov	r6, r2
 80181c0:	e7ba      	b.n	8018138 <_printf_i+0x150>
 80181c2:	680b      	ldr	r3, [r1, #0]
 80181c4:	1d1a      	adds	r2, r3, #4
 80181c6:	600a      	str	r2, [r1, #0]
 80181c8:	681e      	ldr	r6, [r3, #0]
 80181ca:	6862      	ldr	r2, [r4, #4]
 80181cc:	2100      	movs	r1, #0
 80181ce:	4630      	mov	r0, r6
 80181d0:	f7e8 f836 	bl	8000240 <memchr>
 80181d4:	b108      	cbz	r0, 80181da <_printf_i+0x1f2>
 80181d6:	1b80      	subs	r0, r0, r6
 80181d8:	6060      	str	r0, [r4, #4]
 80181da:	6863      	ldr	r3, [r4, #4]
 80181dc:	6123      	str	r3, [r4, #16]
 80181de:	2300      	movs	r3, #0
 80181e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80181e4:	e7a8      	b.n	8018138 <_printf_i+0x150>
 80181e6:	6923      	ldr	r3, [r4, #16]
 80181e8:	4632      	mov	r2, r6
 80181ea:	4649      	mov	r1, r9
 80181ec:	4640      	mov	r0, r8
 80181ee:	47d0      	blx	sl
 80181f0:	3001      	adds	r0, #1
 80181f2:	d0ab      	beq.n	801814c <_printf_i+0x164>
 80181f4:	6823      	ldr	r3, [r4, #0]
 80181f6:	079b      	lsls	r3, r3, #30
 80181f8:	d413      	bmi.n	8018222 <_printf_i+0x23a>
 80181fa:	68e0      	ldr	r0, [r4, #12]
 80181fc:	9b03      	ldr	r3, [sp, #12]
 80181fe:	4298      	cmp	r0, r3
 8018200:	bfb8      	it	lt
 8018202:	4618      	movlt	r0, r3
 8018204:	e7a4      	b.n	8018150 <_printf_i+0x168>
 8018206:	2301      	movs	r3, #1
 8018208:	4632      	mov	r2, r6
 801820a:	4649      	mov	r1, r9
 801820c:	4640      	mov	r0, r8
 801820e:	47d0      	blx	sl
 8018210:	3001      	adds	r0, #1
 8018212:	d09b      	beq.n	801814c <_printf_i+0x164>
 8018214:	3501      	adds	r5, #1
 8018216:	68e3      	ldr	r3, [r4, #12]
 8018218:	9903      	ldr	r1, [sp, #12]
 801821a:	1a5b      	subs	r3, r3, r1
 801821c:	42ab      	cmp	r3, r5
 801821e:	dcf2      	bgt.n	8018206 <_printf_i+0x21e>
 8018220:	e7eb      	b.n	80181fa <_printf_i+0x212>
 8018222:	2500      	movs	r5, #0
 8018224:	f104 0619 	add.w	r6, r4, #25
 8018228:	e7f5      	b.n	8018216 <_printf_i+0x22e>
 801822a:	bf00      	nop
 801822c:	0801bb5d 	.word	0x0801bb5d
 8018230:	0801bb6e 	.word	0x0801bb6e

08018234 <iprintf>:
 8018234:	b40f      	push	{r0, r1, r2, r3}
 8018236:	4b0a      	ldr	r3, [pc, #40]	; (8018260 <iprintf+0x2c>)
 8018238:	b513      	push	{r0, r1, r4, lr}
 801823a:	681c      	ldr	r4, [r3, #0]
 801823c:	b124      	cbz	r4, 8018248 <iprintf+0x14>
 801823e:	69a3      	ldr	r3, [r4, #24]
 8018240:	b913      	cbnz	r3, 8018248 <iprintf+0x14>
 8018242:	4620      	mov	r0, r4
 8018244:	f7ff fbb2 	bl	80179ac <__sinit>
 8018248:	ab05      	add	r3, sp, #20
 801824a:	9a04      	ldr	r2, [sp, #16]
 801824c:	68a1      	ldr	r1, [r4, #8]
 801824e:	9301      	str	r3, [sp, #4]
 8018250:	4620      	mov	r0, r4
 8018252:	f7ff fd2b 	bl	8017cac <_vfiprintf_r>
 8018256:	b002      	add	sp, #8
 8018258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801825c:	b004      	add	sp, #16
 801825e:	4770      	bx	lr
 8018260:	20000120 	.word	0x20000120

08018264 <rand>:
 8018264:	4b17      	ldr	r3, [pc, #92]	; (80182c4 <rand+0x60>)
 8018266:	b510      	push	{r4, lr}
 8018268:	681c      	ldr	r4, [r3, #0]
 801826a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801826c:	b9b3      	cbnz	r3, 801829c <rand+0x38>
 801826e:	2018      	movs	r0, #24
 8018270:	f000 fb18 	bl	80188a4 <malloc>
 8018274:	63a0      	str	r0, [r4, #56]	; 0x38
 8018276:	b928      	cbnz	r0, 8018284 <rand+0x20>
 8018278:	4602      	mov	r2, r0
 801827a:	4b13      	ldr	r3, [pc, #76]	; (80182c8 <rand+0x64>)
 801827c:	4813      	ldr	r0, [pc, #76]	; (80182cc <rand+0x68>)
 801827e:	214e      	movs	r1, #78	; 0x4e
 8018280:	f7ff fb1e 	bl	80178c0 <__assert_func>
 8018284:	4a12      	ldr	r2, [pc, #72]	; (80182d0 <rand+0x6c>)
 8018286:	4b13      	ldr	r3, [pc, #76]	; (80182d4 <rand+0x70>)
 8018288:	e9c0 2300 	strd	r2, r3, [r0]
 801828c:	4b12      	ldr	r3, [pc, #72]	; (80182d8 <rand+0x74>)
 801828e:	6083      	str	r3, [r0, #8]
 8018290:	230b      	movs	r3, #11
 8018292:	8183      	strh	r3, [r0, #12]
 8018294:	2201      	movs	r2, #1
 8018296:	2300      	movs	r3, #0
 8018298:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801829c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801829e:	480f      	ldr	r0, [pc, #60]	; (80182dc <rand+0x78>)
 80182a0:	690a      	ldr	r2, [r1, #16]
 80182a2:	694b      	ldr	r3, [r1, #20]
 80182a4:	4c0e      	ldr	r4, [pc, #56]	; (80182e0 <rand+0x7c>)
 80182a6:	4350      	muls	r0, r2
 80182a8:	fb04 0003 	mla	r0, r4, r3, r0
 80182ac:	fba2 3404 	umull	r3, r4, r2, r4
 80182b0:	1c5a      	adds	r2, r3, #1
 80182b2:	4404      	add	r4, r0
 80182b4:	f144 0000 	adc.w	r0, r4, #0
 80182b8:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80182bc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80182c0:	bd10      	pop	{r4, pc}
 80182c2:	bf00      	nop
 80182c4:	20000120 	.word	0x20000120
 80182c8:	0801bb7f 	.word	0x0801bb7f
 80182cc:	0801bb96 	.word	0x0801bb96
 80182d0:	abcd330e 	.word	0xabcd330e
 80182d4:	e66d1234 	.word	0xe66d1234
 80182d8:	0005deec 	.word	0x0005deec
 80182dc:	5851f42d 	.word	0x5851f42d
 80182e0:	4c957f2d 	.word	0x4c957f2d

080182e4 <cleanup_glue>:
 80182e4:	b538      	push	{r3, r4, r5, lr}
 80182e6:	460c      	mov	r4, r1
 80182e8:	6809      	ldr	r1, [r1, #0]
 80182ea:	4605      	mov	r5, r0
 80182ec:	b109      	cbz	r1, 80182f2 <cleanup_glue+0xe>
 80182ee:	f7ff fff9 	bl	80182e4 <cleanup_glue>
 80182f2:	4621      	mov	r1, r4
 80182f4:	4628      	mov	r0, r5
 80182f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80182fa:	f000 bae7 	b.w	80188cc <_free_r>
	...

08018300 <_reclaim_reent>:
 8018300:	4b2c      	ldr	r3, [pc, #176]	; (80183b4 <_reclaim_reent+0xb4>)
 8018302:	681b      	ldr	r3, [r3, #0]
 8018304:	4283      	cmp	r3, r0
 8018306:	b570      	push	{r4, r5, r6, lr}
 8018308:	4604      	mov	r4, r0
 801830a:	d051      	beq.n	80183b0 <_reclaim_reent+0xb0>
 801830c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801830e:	b143      	cbz	r3, 8018322 <_reclaim_reent+0x22>
 8018310:	68db      	ldr	r3, [r3, #12]
 8018312:	2b00      	cmp	r3, #0
 8018314:	d14a      	bne.n	80183ac <_reclaim_reent+0xac>
 8018316:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018318:	6819      	ldr	r1, [r3, #0]
 801831a:	b111      	cbz	r1, 8018322 <_reclaim_reent+0x22>
 801831c:	4620      	mov	r0, r4
 801831e:	f000 fad5 	bl	80188cc <_free_r>
 8018322:	6961      	ldr	r1, [r4, #20]
 8018324:	b111      	cbz	r1, 801832c <_reclaim_reent+0x2c>
 8018326:	4620      	mov	r0, r4
 8018328:	f000 fad0 	bl	80188cc <_free_r>
 801832c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801832e:	b111      	cbz	r1, 8018336 <_reclaim_reent+0x36>
 8018330:	4620      	mov	r0, r4
 8018332:	f000 facb 	bl	80188cc <_free_r>
 8018336:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8018338:	b111      	cbz	r1, 8018340 <_reclaim_reent+0x40>
 801833a:	4620      	mov	r0, r4
 801833c:	f000 fac6 	bl	80188cc <_free_r>
 8018340:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8018342:	b111      	cbz	r1, 801834a <_reclaim_reent+0x4a>
 8018344:	4620      	mov	r0, r4
 8018346:	f000 fac1 	bl	80188cc <_free_r>
 801834a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801834c:	b111      	cbz	r1, 8018354 <_reclaim_reent+0x54>
 801834e:	4620      	mov	r0, r4
 8018350:	f000 fabc 	bl	80188cc <_free_r>
 8018354:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8018356:	b111      	cbz	r1, 801835e <_reclaim_reent+0x5e>
 8018358:	4620      	mov	r0, r4
 801835a:	f000 fab7 	bl	80188cc <_free_r>
 801835e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8018360:	b111      	cbz	r1, 8018368 <_reclaim_reent+0x68>
 8018362:	4620      	mov	r0, r4
 8018364:	f000 fab2 	bl	80188cc <_free_r>
 8018368:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801836a:	b111      	cbz	r1, 8018372 <_reclaim_reent+0x72>
 801836c:	4620      	mov	r0, r4
 801836e:	f000 faad 	bl	80188cc <_free_r>
 8018372:	69a3      	ldr	r3, [r4, #24]
 8018374:	b1e3      	cbz	r3, 80183b0 <_reclaim_reent+0xb0>
 8018376:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8018378:	4620      	mov	r0, r4
 801837a:	4798      	blx	r3
 801837c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801837e:	b1b9      	cbz	r1, 80183b0 <_reclaim_reent+0xb0>
 8018380:	4620      	mov	r0, r4
 8018382:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018386:	f7ff bfad 	b.w	80182e4 <cleanup_glue>
 801838a:	5949      	ldr	r1, [r1, r5]
 801838c:	b941      	cbnz	r1, 80183a0 <_reclaim_reent+0xa0>
 801838e:	3504      	adds	r5, #4
 8018390:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018392:	2d80      	cmp	r5, #128	; 0x80
 8018394:	68d9      	ldr	r1, [r3, #12]
 8018396:	d1f8      	bne.n	801838a <_reclaim_reent+0x8a>
 8018398:	4620      	mov	r0, r4
 801839a:	f000 fa97 	bl	80188cc <_free_r>
 801839e:	e7ba      	b.n	8018316 <_reclaim_reent+0x16>
 80183a0:	680e      	ldr	r6, [r1, #0]
 80183a2:	4620      	mov	r0, r4
 80183a4:	f000 fa92 	bl	80188cc <_free_r>
 80183a8:	4631      	mov	r1, r6
 80183aa:	e7ef      	b.n	801838c <_reclaim_reent+0x8c>
 80183ac:	2500      	movs	r5, #0
 80183ae:	e7ef      	b.n	8018390 <_reclaim_reent+0x90>
 80183b0:	bd70      	pop	{r4, r5, r6, pc}
 80183b2:	bf00      	nop
 80183b4:	20000120 	.word	0x20000120

080183b8 <_sbrk_r>:
 80183b8:	b538      	push	{r3, r4, r5, lr}
 80183ba:	4d06      	ldr	r5, [pc, #24]	; (80183d4 <_sbrk_r+0x1c>)
 80183bc:	2300      	movs	r3, #0
 80183be:	4604      	mov	r4, r0
 80183c0:	4608      	mov	r0, r1
 80183c2:	602b      	str	r3, [r5, #0]
 80183c4:	f7e8 fdaa 	bl	8000f1c <_sbrk>
 80183c8:	1c43      	adds	r3, r0, #1
 80183ca:	d102      	bne.n	80183d2 <_sbrk_r+0x1a>
 80183cc:	682b      	ldr	r3, [r5, #0]
 80183ce:	b103      	cbz	r3, 80183d2 <_sbrk_r+0x1a>
 80183d0:	6023      	str	r3, [r4, #0]
 80183d2:	bd38      	pop	{r3, r4, r5, pc}
 80183d4:	2000dc60 	.word	0x2000dc60

080183d8 <__sread>:
 80183d8:	b510      	push	{r4, lr}
 80183da:	460c      	mov	r4, r1
 80183dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80183e0:	f000 fac4 	bl	801896c <_read_r>
 80183e4:	2800      	cmp	r0, #0
 80183e6:	bfab      	itete	ge
 80183e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80183ea:	89a3      	ldrhlt	r3, [r4, #12]
 80183ec:	181b      	addge	r3, r3, r0
 80183ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80183f2:	bfac      	ite	ge
 80183f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80183f6:	81a3      	strhlt	r3, [r4, #12]
 80183f8:	bd10      	pop	{r4, pc}

080183fa <__swrite>:
 80183fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80183fe:	461f      	mov	r7, r3
 8018400:	898b      	ldrh	r3, [r1, #12]
 8018402:	05db      	lsls	r3, r3, #23
 8018404:	4605      	mov	r5, r0
 8018406:	460c      	mov	r4, r1
 8018408:	4616      	mov	r6, r2
 801840a:	d505      	bpl.n	8018418 <__swrite+0x1e>
 801840c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018410:	2302      	movs	r3, #2
 8018412:	2200      	movs	r2, #0
 8018414:	f000 f9d0 	bl	80187b8 <_lseek_r>
 8018418:	89a3      	ldrh	r3, [r4, #12]
 801841a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801841e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018422:	81a3      	strh	r3, [r4, #12]
 8018424:	4632      	mov	r2, r6
 8018426:	463b      	mov	r3, r7
 8018428:	4628      	mov	r0, r5
 801842a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801842e:	f000 b869 	b.w	8018504 <_write_r>

08018432 <__sseek>:
 8018432:	b510      	push	{r4, lr}
 8018434:	460c      	mov	r4, r1
 8018436:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801843a:	f000 f9bd 	bl	80187b8 <_lseek_r>
 801843e:	1c43      	adds	r3, r0, #1
 8018440:	89a3      	ldrh	r3, [r4, #12]
 8018442:	bf15      	itete	ne
 8018444:	6560      	strne	r0, [r4, #84]	; 0x54
 8018446:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801844a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801844e:	81a3      	strheq	r3, [r4, #12]
 8018450:	bf18      	it	ne
 8018452:	81a3      	strhne	r3, [r4, #12]
 8018454:	bd10      	pop	{r4, pc}

08018456 <__sclose>:
 8018456:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801845a:	f000 b8db 	b.w	8018614 <_close_r>
	...

08018460 <__swbuf_r>:
 8018460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018462:	460e      	mov	r6, r1
 8018464:	4614      	mov	r4, r2
 8018466:	4605      	mov	r5, r0
 8018468:	b118      	cbz	r0, 8018472 <__swbuf_r+0x12>
 801846a:	6983      	ldr	r3, [r0, #24]
 801846c:	b90b      	cbnz	r3, 8018472 <__swbuf_r+0x12>
 801846e:	f7ff fa9d 	bl	80179ac <__sinit>
 8018472:	4b21      	ldr	r3, [pc, #132]	; (80184f8 <__swbuf_r+0x98>)
 8018474:	429c      	cmp	r4, r3
 8018476:	d12b      	bne.n	80184d0 <__swbuf_r+0x70>
 8018478:	686c      	ldr	r4, [r5, #4]
 801847a:	69a3      	ldr	r3, [r4, #24]
 801847c:	60a3      	str	r3, [r4, #8]
 801847e:	89a3      	ldrh	r3, [r4, #12]
 8018480:	071a      	lsls	r2, r3, #28
 8018482:	d52f      	bpl.n	80184e4 <__swbuf_r+0x84>
 8018484:	6923      	ldr	r3, [r4, #16]
 8018486:	b36b      	cbz	r3, 80184e4 <__swbuf_r+0x84>
 8018488:	6923      	ldr	r3, [r4, #16]
 801848a:	6820      	ldr	r0, [r4, #0]
 801848c:	1ac0      	subs	r0, r0, r3
 801848e:	6963      	ldr	r3, [r4, #20]
 8018490:	b2f6      	uxtb	r6, r6
 8018492:	4283      	cmp	r3, r0
 8018494:	4637      	mov	r7, r6
 8018496:	dc04      	bgt.n	80184a2 <__swbuf_r+0x42>
 8018498:	4621      	mov	r1, r4
 801849a:	4628      	mov	r0, r5
 801849c:	f000 f950 	bl	8018740 <_fflush_r>
 80184a0:	bb30      	cbnz	r0, 80184f0 <__swbuf_r+0x90>
 80184a2:	68a3      	ldr	r3, [r4, #8]
 80184a4:	3b01      	subs	r3, #1
 80184a6:	60a3      	str	r3, [r4, #8]
 80184a8:	6823      	ldr	r3, [r4, #0]
 80184aa:	1c5a      	adds	r2, r3, #1
 80184ac:	6022      	str	r2, [r4, #0]
 80184ae:	701e      	strb	r6, [r3, #0]
 80184b0:	6963      	ldr	r3, [r4, #20]
 80184b2:	3001      	adds	r0, #1
 80184b4:	4283      	cmp	r3, r0
 80184b6:	d004      	beq.n	80184c2 <__swbuf_r+0x62>
 80184b8:	89a3      	ldrh	r3, [r4, #12]
 80184ba:	07db      	lsls	r3, r3, #31
 80184bc:	d506      	bpl.n	80184cc <__swbuf_r+0x6c>
 80184be:	2e0a      	cmp	r6, #10
 80184c0:	d104      	bne.n	80184cc <__swbuf_r+0x6c>
 80184c2:	4621      	mov	r1, r4
 80184c4:	4628      	mov	r0, r5
 80184c6:	f000 f93b 	bl	8018740 <_fflush_r>
 80184ca:	b988      	cbnz	r0, 80184f0 <__swbuf_r+0x90>
 80184cc:	4638      	mov	r0, r7
 80184ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80184d0:	4b0a      	ldr	r3, [pc, #40]	; (80184fc <__swbuf_r+0x9c>)
 80184d2:	429c      	cmp	r4, r3
 80184d4:	d101      	bne.n	80184da <__swbuf_r+0x7a>
 80184d6:	68ac      	ldr	r4, [r5, #8]
 80184d8:	e7cf      	b.n	801847a <__swbuf_r+0x1a>
 80184da:	4b09      	ldr	r3, [pc, #36]	; (8018500 <__swbuf_r+0xa0>)
 80184dc:	429c      	cmp	r4, r3
 80184de:	bf08      	it	eq
 80184e0:	68ec      	ldreq	r4, [r5, #12]
 80184e2:	e7ca      	b.n	801847a <__swbuf_r+0x1a>
 80184e4:	4621      	mov	r1, r4
 80184e6:	4628      	mov	r0, r5
 80184e8:	f000 f81e 	bl	8018528 <__swsetup_r>
 80184ec:	2800      	cmp	r0, #0
 80184ee:	d0cb      	beq.n	8018488 <__swbuf_r+0x28>
 80184f0:	f04f 37ff 	mov.w	r7, #4294967295
 80184f4:	e7ea      	b.n	80184cc <__swbuf_r+0x6c>
 80184f6:	bf00      	nop
 80184f8:	0801bb08 	.word	0x0801bb08
 80184fc:	0801bb28 	.word	0x0801bb28
 8018500:	0801bae8 	.word	0x0801bae8

08018504 <_write_r>:
 8018504:	b538      	push	{r3, r4, r5, lr}
 8018506:	4d07      	ldr	r5, [pc, #28]	; (8018524 <_write_r+0x20>)
 8018508:	4604      	mov	r4, r0
 801850a:	4608      	mov	r0, r1
 801850c:	4611      	mov	r1, r2
 801850e:	2200      	movs	r2, #0
 8018510:	602a      	str	r2, [r5, #0]
 8018512:	461a      	mov	r2, r3
 8018514:	f7e8 fcb1 	bl	8000e7a <_write>
 8018518:	1c43      	adds	r3, r0, #1
 801851a:	d102      	bne.n	8018522 <_write_r+0x1e>
 801851c:	682b      	ldr	r3, [r5, #0]
 801851e:	b103      	cbz	r3, 8018522 <_write_r+0x1e>
 8018520:	6023      	str	r3, [r4, #0]
 8018522:	bd38      	pop	{r3, r4, r5, pc}
 8018524:	2000dc60 	.word	0x2000dc60

08018528 <__swsetup_r>:
 8018528:	4b32      	ldr	r3, [pc, #200]	; (80185f4 <__swsetup_r+0xcc>)
 801852a:	b570      	push	{r4, r5, r6, lr}
 801852c:	681d      	ldr	r5, [r3, #0]
 801852e:	4606      	mov	r6, r0
 8018530:	460c      	mov	r4, r1
 8018532:	b125      	cbz	r5, 801853e <__swsetup_r+0x16>
 8018534:	69ab      	ldr	r3, [r5, #24]
 8018536:	b913      	cbnz	r3, 801853e <__swsetup_r+0x16>
 8018538:	4628      	mov	r0, r5
 801853a:	f7ff fa37 	bl	80179ac <__sinit>
 801853e:	4b2e      	ldr	r3, [pc, #184]	; (80185f8 <__swsetup_r+0xd0>)
 8018540:	429c      	cmp	r4, r3
 8018542:	d10f      	bne.n	8018564 <__swsetup_r+0x3c>
 8018544:	686c      	ldr	r4, [r5, #4]
 8018546:	89a3      	ldrh	r3, [r4, #12]
 8018548:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801854c:	0719      	lsls	r1, r3, #28
 801854e:	d42c      	bmi.n	80185aa <__swsetup_r+0x82>
 8018550:	06dd      	lsls	r5, r3, #27
 8018552:	d411      	bmi.n	8018578 <__swsetup_r+0x50>
 8018554:	2309      	movs	r3, #9
 8018556:	6033      	str	r3, [r6, #0]
 8018558:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801855c:	81a3      	strh	r3, [r4, #12]
 801855e:	f04f 30ff 	mov.w	r0, #4294967295
 8018562:	e03e      	b.n	80185e2 <__swsetup_r+0xba>
 8018564:	4b25      	ldr	r3, [pc, #148]	; (80185fc <__swsetup_r+0xd4>)
 8018566:	429c      	cmp	r4, r3
 8018568:	d101      	bne.n	801856e <__swsetup_r+0x46>
 801856a:	68ac      	ldr	r4, [r5, #8]
 801856c:	e7eb      	b.n	8018546 <__swsetup_r+0x1e>
 801856e:	4b24      	ldr	r3, [pc, #144]	; (8018600 <__swsetup_r+0xd8>)
 8018570:	429c      	cmp	r4, r3
 8018572:	bf08      	it	eq
 8018574:	68ec      	ldreq	r4, [r5, #12]
 8018576:	e7e6      	b.n	8018546 <__swsetup_r+0x1e>
 8018578:	0758      	lsls	r0, r3, #29
 801857a:	d512      	bpl.n	80185a2 <__swsetup_r+0x7a>
 801857c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801857e:	b141      	cbz	r1, 8018592 <__swsetup_r+0x6a>
 8018580:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018584:	4299      	cmp	r1, r3
 8018586:	d002      	beq.n	801858e <__swsetup_r+0x66>
 8018588:	4630      	mov	r0, r6
 801858a:	f000 f99f 	bl	80188cc <_free_r>
 801858e:	2300      	movs	r3, #0
 8018590:	6363      	str	r3, [r4, #52]	; 0x34
 8018592:	89a3      	ldrh	r3, [r4, #12]
 8018594:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018598:	81a3      	strh	r3, [r4, #12]
 801859a:	2300      	movs	r3, #0
 801859c:	6063      	str	r3, [r4, #4]
 801859e:	6923      	ldr	r3, [r4, #16]
 80185a0:	6023      	str	r3, [r4, #0]
 80185a2:	89a3      	ldrh	r3, [r4, #12]
 80185a4:	f043 0308 	orr.w	r3, r3, #8
 80185a8:	81a3      	strh	r3, [r4, #12]
 80185aa:	6923      	ldr	r3, [r4, #16]
 80185ac:	b94b      	cbnz	r3, 80185c2 <__swsetup_r+0x9a>
 80185ae:	89a3      	ldrh	r3, [r4, #12]
 80185b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80185b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80185b8:	d003      	beq.n	80185c2 <__swsetup_r+0x9a>
 80185ba:	4621      	mov	r1, r4
 80185bc:	4630      	mov	r0, r6
 80185be:	f000 f931 	bl	8018824 <__smakebuf_r>
 80185c2:	89a0      	ldrh	r0, [r4, #12]
 80185c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80185c8:	f010 0301 	ands.w	r3, r0, #1
 80185cc:	d00a      	beq.n	80185e4 <__swsetup_r+0xbc>
 80185ce:	2300      	movs	r3, #0
 80185d0:	60a3      	str	r3, [r4, #8]
 80185d2:	6963      	ldr	r3, [r4, #20]
 80185d4:	425b      	negs	r3, r3
 80185d6:	61a3      	str	r3, [r4, #24]
 80185d8:	6923      	ldr	r3, [r4, #16]
 80185da:	b943      	cbnz	r3, 80185ee <__swsetup_r+0xc6>
 80185dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80185e0:	d1ba      	bne.n	8018558 <__swsetup_r+0x30>
 80185e2:	bd70      	pop	{r4, r5, r6, pc}
 80185e4:	0781      	lsls	r1, r0, #30
 80185e6:	bf58      	it	pl
 80185e8:	6963      	ldrpl	r3, [r4, #20]
 80185ea:	60a3      	str	r3, [r4, #8]
 80185ec:	e7f4      	b.n	80185d8 <__swsetup_r+0xb0>
 80185ee:	2000      	movs	r0, #0
 80185f0:	e7f7      	b.n	80185e2 <__swsetup_r+0xba>
 80185f2:	bf00      	nop
 80185f4:	20000120 	.word	0x20000120
 80185f8:	0801bb08 	.word	0x0801bb08
 80185fc:	0801bb28 	.word	0x0801bb28
 8018600:	0801bae8 	.word	0x0801bae8

08018604 <abort>:
 8018604:	b508      	push	{r3, lr}
 8018606:	2006      	movs	r0, #6
 8018608:	f000 f9ea 	bl	80189e0 <raise>
 801860c:	2001      	movs	r0, #1
 801860e:	f7e8 fc0d 	bl	8000e2c <_exit>
	...

08018614 <_close_r>:
 8018614:	b538      	push	{r3, r4, r5, lr}
 8018616:	4d06      	ldr	r5, [pc, #24]	; (8018630 <_close_r+0x1c>)
 8018618:	2300      	movs	r3, #0
 801861a:	4604      	mov	r4, r0
 801861c:	4608      	mov	r0, r1
 801861e:	602b      	str	r3, [r5, #0]
 8018620:	f7e8 fc47 	bl	8000eb2 <_close>
 8018624:	1c43      	adds	r3, r0, #1
 8018626:	d102      	bne.n	801862e <_close_r+0x1a>
 8018628:	682b      	ldr	r3, [r5, #0]
 801862a:	b103      	cbz	r3, 801862e <_close_r+0x1a>
 801862c:	6023      	str	r3, [r4, #0]
 801862e:	bd38      	pop	{r3, r4, r5, pc}
 8018630:	2000dc60 	.word	0x2000dc60

08018634 <__sflush_r>:
 8018634:	898a      	ldrh	r2, [r1, #12]
 8018636:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801863a:	4605      	mov	r5, r0
 801863c:	0710      	lsls	r0, r2, #28
 801863e:	460c      	mov	r4, r1
 8018640:	d458      	bmi.n	80186f4 <__sflush_r+0xc0>
 8018642:	684b      	ldr	r3, [r1, #4]
 8018644:	2b00      	cmp	r3, #0
 8018646:	dc05      	bgt.n	8018654 <__sflush_r+0x20>
 8018648:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801864a:	2b00      	cmp	r3, #0
 801864c:	dc02      	bgt.n	8018654 <__sflush_r+0x20>
 801864e:	2000      	movs	r0, #0
 8018650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018654:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018656:	2e00      	cmp	r6, #0
 8018658:	d0f9      	beq.n	801864e <__sflush_r+0x1a>
 801865a:	2300      	movs	r3, #0
 801865c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018660:	682f      	ldr	r7, [r5, #0]
 8018662:	602b      	str	r3, [r5, #0]
 8018664:	d032      	beq.n	80186cc <__sflush_r+0x98>
 8018666:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018668:	89a3      	ldrh	r3, [r4, #12]
 801866a:	075a      	lsls	r2, r3, #29
 801866c:	d505      	bpl.n	801867a <__sflush_r+0x46>
 801866e:	6863      	ldr	r3, [r4, #4]
 8018670:	1ac0      	subs	r0, r0, r3
 8018672:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018674:	b10b      	cbz	r3, 801867a <__sflush_r+0x46>
 8018676:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018678:	1ac0      	subs	r0, r0, r3
 801867a:	2300      	movs	r3, #0
 801867c:	4602      	mov	r2, r0
 801867e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018680:	6a21      	ldr	r1, [r4, #32]
 8018682:	4628      	mov	r0, r5
 8018684:	47b0      	blx	r6
 8018686:	1c43      	adds	r3, r0, #1
 8018688:	89a3      	ldrh	r3, [r4, #12]
 801868a:	d106      	bne.n	801869a <__sflush_r+0x66>
 801868c:	6829      	ldr	r1, [r5, #0]
 801868e:	291d      	cmp	r1, #29
 8018690:	d82c      	bhi.n	80186ec <__sflush_r+0xb8>
 8018692:	4a2a      	ldr	r2, [pc, #168]	; (801873c <__sflush_r+0x108>)
 8018694:	40ca      	lsrs	r2, r1
 8018696:	07d6      	lsls	r6, r2, #31
 8018698:	d528      	bpl.n	80186ec <__sflush_r+0xb8>
 801869a:	2200      	movs	r2, #0
 801869c:	6062      	str	r2, [r4, #4]
 801869e:	04d9      	lsls	r1, r3, #19
 80186a0:	6922      	ldr	r2, [r4, #16]
 80186a2:	6022      	str	r2, [r4, #0]
 80186a4:	d504      	bpl.n	80186b0 <__sflush_r+0x7c>
 80186a6:	1c42      	adds	r2, r0, #1
 80186a8:	d101      	bne.n	80186ae <__sflush_r+0x7a>
 80186aa:	682b      	ldr	r3, [r5, #0]
 80186ac:	b903      	cbnz	r3, 80186b0 <__sflush_r+0x7c>
 80186ae:	6560      	str	r0, [r4, #84]	; 0x54
 80186b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80186b2:	602f      	str	r7, [r5, #0]
 80186b4:	2900      	cmp	r1, #0
 80186b6:	d0ca      	beq.n	801864e <__sflush_r+0x1a>
 80186b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80186bc:	4299      	cmp	r1, r3
 80186be:	d002      	beq.n	80186c6 <__sflush_r+0x92>
 80186c0:	4628      	mov	r0, r5
 80186c2:	f000 f903 	bl	80188cc <_free_r>
 80186c6:	2000      	movs	r0, #0
 80186c8:	6360      	str	r0, [r4, #52]	; 0x34
 80186ca:	e7c1      	b.n	8018650 <__sflush_r+0x1c>
 80186cc:	6a21      	ldr	r1, [r4, #32]
 80186ce:	2301      	movs	r3, #1
 80186d0:	4628      	mov	r0, r5
 80186d2:	47b0      	blx	r6
 80186d4:	1c41      	adds	r1, r0, #1
 80186d6:	d1c7      	bne.n	8018668 <__sflush_r+0x34>
 80186d8:	682b      	ldr	r3, [r5, #0]
 80186da:	2b00      	cmp	r3, #0
 80186dc:	d0c4      	beq.n	8018668 <__sflush_r+0x34>
 80186de:	2b1d      	cmp	r3, #29
 80186e0:	d001      	beq.n	80186e6 <__sflush_r+0xb2>
 80186e2:	2b16      	cmp	r3, #22
 80186e4:	d101      	bne.n	80186ea <__sflush_r+0xb6>
 80186e6:	602f      	str	r7, [r5, #0]
 80186e8:	e7b1      	b.n	801864e <__sflush_r+0x1a>
 80186ea:	89a3      	ldrh	r3, [r4, #12]
 80186ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80186f0:	81a3      	strh	r3, [r4, #12]
 80186f2:	e7ad      	b.n	8018650 <__sflush_r+0x1c>
 80186f4:	690f      	ldr	r7, [r1, #16]
 80186f6:	2f00      	cmp	r7, #0
 80186f8:	d0a9      	beq.n	801864e <__sflush_r+0x1a>
 80186fa:	0793      	lsls	r3, r2, #30
 80186fc:	680e      	ldr	r6, [r1, #0]
 80186fe:	bf08      	it	eq
 8018700:	694b      	ldreq	r3, [r1, #20]
 8018702:	600f      	str	r7, [r1, #0]
 8018704:	bf18      	it	ne
 8018706:	2300      	movne	r3, #0
 8018708:	eba6 0807 	sub.w	r8, r6, r7
 801870c:	608b      	str	r3, [r1, #8]
 801870e:	f1b8 0f00 	cmp.w	r8, #0
 8018712:	dd9c      	ble.n	801864e <__sflush_r+0x1a>
 8018714:	6a21      	ldr	r1, [r4, #32]
 8018716:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018718:	4643      	mov	r3, r8
 801871a:	463a      	mov	r2, r7
 801871c:	4628      	mov	r0, r5
 801871e:	47b0      	blx	r6
 8018720:	2800      	cmp	r0, #0
 8018722:	dc06      	bgt.n	8018732 <__sflush_r+0xfe>
 8018724:	89a3      	ldrh	r3, [r4, #12]
 8018726:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801872a:	81a3      	strh	r3, [r4, #12]
 801872c:	f04f 30ff 	mov.w	r0, #4294967295
 8018730:	e78e      	b.n	8018650 <__sflush_r+0x1c>
 8018732:	4407      	add	r7, r0
 8018734:	eba8 0800 	sub.w	r8, r8, r0
 8018738:	e7e9      	b.n	801870e <__sflush_r+0xda>
 801873a:	bf00      	nop
 801873c:	20400001 	.word	0x20400001

08018740 <_fflush_r>:
 8018740:	b538      	push	{r3, r4, r5, lr}
 8018742:	690b      	ldr	r3, [r1, #16]
 8018744:	4605      	mov	r5, r0
 8018746:	460c      	mov	r4, r1
 8018748:	b913      	cbnz	r3, 8018750 <_fflush_r+0x10>
 801874a:	2500      	movs	r5, #0
 801874c:	4628      	mov	r0, r5
 801874e:	bd38      	pop	{r3, r4, r5, pc}
 8018750:	b118      	cbz	r0, 801875a <_fflush_r+0x1a>
 8018752:	6983      	ldr	r3, [r0, #24]
 8018754:	b90b      	cbnz	r3, 801875a <_fflush_r+0x1a>
 8018756:	f7ff f929 	bl	80179ac <__sinit>
 801875a:	4b14      	ldr	r3, [pc, #80]	; (80187ac <_fflush_r+0x6c>)
 801875c:	429c      	cmp	r4, r3
 801875e:	d11b      	bne.n	8018798 <_fflush_r+0x58>
 8018760:	686c      	ldr	r4, [r5, #4]
 8018762:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018766:	2b00      	cmp	r3, #0
 8018768:	d0ef      	beq.n	801874a <_fflush_r+0xa>
 801876a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801876c:	07d0      	lsls	r0, r2, #31
 801876e:	d404      	bmi.n	801877a <_fflush_r+0x3a>
 8018770:	0599      	lsls	r1, r3, #22
 8018772:	d402      	bmi.n	801877a <_fflush_r+0x3a>
 8018774:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018776:	f7ff f9ee 	bl	8017b56 <__retarget_lock_acquire_recursive>
 801877a:	4628      	mov	r0, r5
 801877c:	4621      	mov	r1, r4
 801877e:	f7ff ff59 	bl	8018634 <__sflush_r>
 8018782:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018784:	07da      	lsls	r2, r3, #31
 8018786:	4605      	mov	r5, r0
 8018788:	d4e0      	bmi.n	801874c <_fflush_r+0xc>
 801878a:	89a3      	ldrh	r3, [r4, #12]
 801878c:	059b      	lsls	r3, r3, #22
 801878e:	d4dd      	bmi.n	801874c <_fflush_r+0xc>
 8018790:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018792:	f7ff f9e1 	bl	8017b58 <__retarget_lock_release_recursive>
 8018796:	e7d9      	b.n	801874c <_fflush_r+0xc>
 8018798:	4b05      	ldr	r3, [pc, #20]	; (80187b0 <_fflush_r+0x70>)
 801879a:	429c      	cmp	r4, r3
 801879c:	d101      	bne.n	80187a2 <_fflush_r+0x62>
 801879e:	68ac      	ldr	r4, [r5, #8]
 80187a0:	e7df      	b.n	8018762 <_fflush_r+0x22>
 80187a2:	4b04      	ldr	r3, [pc, #16]	; (80187b4 <_fflush_r+0x74>)
 80187a4:	429c      	cmp	r4, r3
 80187a6:	bf08      	it	eq
 80187a8:	68ec      	ldreq	r4, [r5, #12]
 80187aa:	e7da      	b.n	8018762 <_fflush_r+0x22>
 80187ac:	0801bb08 	.word	0x0801bb08
 80187b0:	0801bb28 	.word	0x0801bb28
 80187b4:	0801bae8 	.word	0x0801bae8

080187b8 <_lseek_r>:
 80187b8:	b538      	push	{r3, r4, r5, lr}
 80187ba:	4d07      	ldr	r5, [pc, #28]	; (80187d8 <_lseek_r+0x20>)
 80187bc:	4604      	mov	r4, r0
 80187be:	4608      	mov	r0, r1
 80187c0:	4611      	mov	r1, r2
 80187c2:	2200      	movs	r2, #0
 80187c4:	602a      	str	r2, [r5, #0]
 80187c6:	461a      	mov	r2, r3
 80187c8:	f7e8 fb9a 	bl	8000f00 <_lseek>
 80187cc:	1c43      	adds	r3, r0, #1
 80187ce:	d102      	bne.n	80187d6 <_lseek_r+0x1e>
 80187d0:	682b      	ldr	r3, [r5, #0]
 80187d2:	b103      	cbz	r3, 80187d6 <_lseek_r+0x1e>
 80187d4:	6023      	str	r3, [r4, #0]
 80187d6:	bd38      	pop	{r3, r4, r5, pc}
 80187d8:	2000dc60 	.word	0x2000dc60

080187dc <__swhatbuf_r>:
 80187dc:	b570      	push	{r4, r5, r6, lr}
 80187de:	460e      	mov	r6, r1
 80187e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80187e4:	2900      	cmp	r1, #0
 80187e6:	b096      	sub	sp, #88	; 0x58
 80187e8:	4614      	mov	r4, r2
 80187ea:	461d      	mov	r5, r3
 80187ec:	da07      	bge.n	80187fe <__swhatbuf_r+0x22>
 80187ee:	2300      	movs	r3, #0
 80187f0:	602b      	str	r3, [r5, #0]
 80187f2:	89b3      	ldrh	r3, [r6, #12]
 80187f4:	061a      	lsls	r2, r3, #24
 80187f6:	d410      	bmi.n	801881a <__swhatbuf_r+0x3e>
 80187f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80187fc:	e00e      	b.n	801881c <__swhatbuf_r+0x40>
 80187fe:	466a      	mov	r2, sp
 8018800:	f000 f90a 	bl	8018a18 <_fstat_r>
 8018804:	2800      	cmp	r0, #0
 8018806:	dbf2      	blt.n	80187ee <__swhatbuf_r+0x12>
 8018808:	9a01      	ldr	r2, [sp, #4]
 801880a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801880e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8018812:	425a      	negs	r2, r3
 8018814:	415a      	adcs	r2, r3
 8018816:	602a      	str	r2, [r5, #0]
 8018818:	e7ee      	b.n	80187f8 <__swhatbuf_r+0x1c>
 801881a:	2340      	movs	r3, #64	; 0x40
 801881c:	2000      	movs	r0, #0
 801881e:	6023      	str	r3, [r4, #0]
 8018820:	b016      	add	sp, #88	; 0x58
 8018822:	bd70      	pop	{r4, r5, r6, pc}

08018824 <__smakebuf_r>:
 8018824:	898b      	ldrh	r3, [r1, #12]
 8018826:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018828:	079d      	lsls	r5, r3, #30
 801882a:	4606      	mov	r6, r0
 801882c:	460c      	mov	r4, r1
 801882e:	d507      	bpl.n	8018840 <__smakebuf_r+0x1c>
 8018830:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018834:	6023      	str	r3, [r4, #0]
 8018836:	6123      	str	r3, [r4, #16]
 8018838:	2301      	movs	r3, #1
 801883a:	6163      	str	r3, [r4, #20]
 801883c:	b002      	add	sp, #8
 801883e:	bd70      	pop	{r4, r5, r6, pc}
 8018840:	ab01      	add	r3, sp, #4
 8018842:	466a      	mov	r2, sp
 8018844:	f7ff ffca 	bl	80187dc <__swhatbuf_r>
 8018848:	9900      	ldr	r1, [sp, #0]
 801884a:	4605      	mov	r5, r0
 801884c:	4630      	mov	r0, r6
 801884e:	f7ff f9a9 	bl	8017ba4 <_malloc_r>
 8018852:	b948      	cbnz	r0, 8018868 <__smakebuf_r+0x44>
 8018854:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018858:	059a      	lsls	r2, r3, #22
 801885a:	d4ef      	bmi.n	801883c <__smakebuf_r+0x18>
 801885c:	f023 0303 	bic.w	r3, r3, #3
 8018860:	f043 0302 	orr.w	r3, r3, #2
 8018864:	81a3      	strh	r3, [r4, #12]
 8018866:	e7e3      	b.n	8018830 <__smakebuf_r+0xc>
 8018868:	4b0d      	ldr	r3, [pc, #52]	; (80188a0 <__smakebuf_r+0x7c>)
 801886a:	62b3      	str	r3, [r6, #40]	; 0x28
 801886c:	89a3      	ldrh	r3, [r4, #12]
 801886e:	6020      	str	r0, [r4, #0]
 8018870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018874:	81a3      	strh	r3, [r4, #12]
 8018876:	9b00      	ldr	r3, [sp, #0]
 8018878:	6163      	str	r3, [r4, #20]
 801887a:	9b01      	ldr	r3, [sp, #4]
 801887c:	6120      	str	r0, [r4, #16]
 801887e:	b15b      	cbz	r3, 8018898 <__smakebuf_r+0x74>
 8018880:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018884:	4630      	mov	r0, r6
 8018886:	f000 f8d9 	bl	8018a3c <_isatty_r>
 801888a:	b128      	cbz	r0, 8018898 <__smakebuf_r+0x74>
 801888c:	89a3      	ldrh	r3, [r4, #12]
 801888e:	f023 0303 	bic.w	r3, r3, #3
 8018892:	f043 0301 	orr.w	r3, r3, #1
 8018896:	81a3      	strh	r3, [r4, #12]
 8018898:	89a0      	ldrh	r0, [r4, #12]
 801889a:	4305      	orrs	r5, r0
 801889c:	81a5      	strh	r5, [r4, #12]
 801889e:	e7cd      	b.n	801883c <__smakebuf_r+0x18>
 80188a0:	08017945 	.word	0x08017945

080188a4 <malloc>:
 80188a4:	4b02      	ldr	r3, [pc, #8]	; (80188b0 <malloc+0xc>)
 80188a6:	4601      	mov	r1, r0
 80188a8:	6818      	ldr	r0, [r3, #0]
 80188aa:	f7ff b97b 	b.w	8017ba4 <_malloc_r>
 80188ae:	bf00      	nop
 80188b0:	20000120 	.word	0x20000120

080188b4 <__malloc_lock>:
 80188b4:	4801      	ldr	r0, [pc, #4]	; (80188bc <__malloc_lock+0x8>)
 80188b6:	f7ff b94e 	b.w	8017b56 <__retarget_lock_acquire_recursive>
 80188ba:	bf00      	nop
 80188bc:	2000e22c 	.word	0x2000e22c

080188c0 <__malloc_unlock>:
 80188c0:	4801      	ldr	r0, [pc, #4]	; (80188c8 <__malloc_unlock+0x8>)
 80188c2:	f7ff b949 	b.w	8017b58 <__retarget_lock_release_recursive>
 80188c6:	bf00      	nop
 80188c8:	2000e22c 	.word	0x2000e22c

080188cc <_free_r>:
 80188cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80188ce:	2900      	cmp	r1, #0
 80188d0:	d048      	beq.n	8018964 <_free_r+0x98>
 80188d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80188d6:	9001      	str	r0, [sp, #4]
 80188d8:	2b00      	cmp	r3, #0
 80188da:	f1a1 0404 	sub.w	r4, r1, #4
 80188de:	bfb8      	it	lt
 80188e0:	18e4      	addlt	r4, r4, r3
 80188e2:	f7ff ffe7 	bl	80188b4 <__malloc_lock>
 80188e6:	4a20      	ldr	r2, [pc, #128]	; (8018968 <_free_r+0x9c>)
 80188e8:	9801      	ldr	r0, [sp, #4]
 80188ea:	6813      	ldr	r3, [r2, #0]
 80188ec:	4615      	mov	r5, r2
 80188ee:	b933      	cbnz	r3, 80188fe <_free_r+0x32>
 80188f0:	6063      	str	r3, [r4, #4]
 80188f2:	6014      	str	r4, [r2, #0]
 80188f4:	b003      	add	sp, #12
 80188f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80188fa:	f7ff bfe1 	b.w	80188c0 <__malloc_unlock>
 80188fe:	42a3      	cmp	r3, r4
 8018900:	d90b      	bls.n	801891a <_free_r+0x4e>
 8018902:	6821      	ldr	r1, [r4, #0]
 8018904:	1862      	adds	r2, r4, r1
 8018906:	4293      	cmp	r3, r2
 8018908:	bf04      	itt	eq
 801890a:	681a      	ldreq	r2, [r3, #0]
 801890c:	685b      	ldreq	r3, [r3, #4]
 801890e:	6063      	str	r3, [r4, #4]
 8018910:	bf04      	itt	eq
 8018912:	1852      	addeq	r2, r2, r1
 8018914:	6022      	streq	r2, [r4, #0]
 8018916:	602c      	str	r4, [r5, #0]
 8018918:	e7ec      	b.n	80188f4 <_free_r+0x28>
 801891a:	461a      	mov	r2, r3
 801891c:	685b      	ldr	r3, [r3, #4]
 801891e:	b10b      	cbz	r3, 8018924 <_free_r+0x58>
 8018920:	42a3      	cmp	r3, r4
 8018922:	d9fa      	bls.n	801891a <_free_r+0x4e>
 8018924:	6811      	ldr	r1, [r2, #0]
 8018926:	1855      	adds	r5, r2, r1
 8018928:	42a5      	cmp	r5, r4
 801892a:	d10b      	bne.n	8018944 <_free_r+0x78>
 801892c:	6824      	ldr	r4, [r4, #0]
 801892e:	4421      	add	r1, r4
 8018930:	1854      	adds	r4, r2, r1
 8018932:	42a3      	cmp	r3, r4
 8018934:	6011      	str	r1, [r2, #0]
 8018936:	d1dd      	bne.n	80188f4 <_free_r+0x28>
 8018938:	681c      	ldr	r4, [r3, #0]
 801893a:	685b      	ldr	r3, [r3, #4]
 801893c:	6053      	str	r3, [r2, #4]
 801893e:	4421      	add	r1, r4
 8018940:	6011      	str	r1, [r2, #0]
 8018942:	e7d7      	b.n	80188f4 <_free_r+0x28>
 8018944:	d902      	bls.n	801894c <_free_r+0x80>
 8018946:	230c      	movs	r3, #12
 8018948:	6003      	str	r3, [r0, #0]
 801894a:	e7d3      	b.n	80188f4 <_free_r+0x28>
 801894c:	6825      	ldr	r5, [r4, #0]
 801894e:	1961      	adds	r1, r4, r5
 8018950:	428b      	cmp	r3, r1
 8018952:	bf04      	itt	eq
 8018954:	6819      	ldreq	r1, [r3, #0]
 8018956:	685b      	ldreq	r3, [r3, #4]
 8018958:	6063      	str	r3, [r4, #4]
 801895a:	bf04      	itt	eq
 801895c:	1949      	addeq	r1, r1, r5
 801895e:	6021      	streq	r1, [r4, #0]
 8018960:	6054      	str	r4, [r2, #4]
 8018962:	e7c7      	b.n	80188f4 <_free_r+0x28>
 8018964:	b003      	add	sp, #12
 8018966:	bd30      	pop	{r4, r5, pc}
 8018968:	20004fc0 	.word	0x20004fc0

0801896c <_read_r>:
 801896c:	b538      	push	{r3, r4, r5, lr}
 801896e:	4d07      	ldr	r5, [pc, #28]	; (801898c <_read_r+0x20>)
 8018970:	4604      	mov	r4, r0
 8018972:	4608      	mov	r0, r1
 8018974:	4611      	mov	r1, r2
 8018976:	2200      	movs	r2, #0
 8018978:	602a      	str	r2, [r5, #0]
 801897a:	461a      	mov	r2, r3
 801897c:	f7e8 fa60 	bl	8000e40 <_read>
 8018980:	1c43      	adds	r3, r0, #1
 8018982:	d102      	bne.n	801898a <_read_r+0x1e>
 8018984:	682b      	ldr	r3, [r5, #0]
 8018986:	b103      	cbz	r3, 801898a <_read_r+0x1e>
 8018988:	6023      	str	r3, [r4, #0]
 801898a:	bd38      	pop	{r3, r4, r5, pc}
 801898c:	2000dc60 	.word	0x2000dc60

08018990 <_raise_r>:
 8018990:	291f      	cmp	r1, #31
 8018992:	b538      	push	{r3, r4, r5, lr}
 8018994:	4604      	mov	r4, r0
 8018996:	460d      	mov	r5, r1
 8018998:	d904      	bls.n	80189a4 <_raise_r+0x14>
 801899a:	2316      	movs	r3, #22
 801899c:	6003      	str	r3, [r0, #0]
 801899e:	f04f 30ff 	mov.w	r0, #4294967295
 80189a2:	bd38      	pop	{r3, r4, r5, pc}
 80189a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80189a6:	b112      	cbz	r2, 80189ae <_raise_r+0x1e>
 80189a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80189ac:	b94b      	cbnz	r3, 80189c2 <_raise_r+0x32>
 80189ae:	4620      	mov	r0, r4
 80189b0:	f000 f830 	bl	8018a14 <_getpid_r>
 80189b4:	462a      	mov	r2, r5
 80189b6:	4601      	mov	r1, r0
 80189b8:	4620      	mov	r0, r4
 80189ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80189be:	f000 b817 	b.w	80189f0 <_kill_r>
 80189c2:	2b01      	cmp	r3, #1
 80189c4:	d00a      	beq.n	80189dc <_raise_r+0x4c>
 80189c6:	1c59      	adds	r1, r3, #1
 80189c8:	d103      	bne.n	80189d2 <_raise_r+0x42>
 80189ca:	2316      	movs	r3, #22
 80189cc:	6003      	str	r3, [r0, #0]
 80189ce:	2001      	movs	r0, #1
 80189d0:	e7e7      	b.n	80189a2 <_raise_r+0x12>
 80189d2:	2400      	movs	r4, #0
 80189d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80189d8:	4628      	mov	r0, r5
 80189da:	4798      	blx	r3
 80189dc:	2000      	movs	r0, #0
 80189de:	e7e0      	b.n	80189a2 <_raise_r+0x12>

080189e0 <raise>:
 80189e0:	4b02      	ldr	r3, [pc, #8]	; (80189ec <raise+0xc>)
 80189e2:	4601      	mov	r1, r0
 80189e4:	6818      	ldr	r0, [r3, #0]
 80189e6:	f7ff bfd3 	b.w	8018990 <_raise_r>
 80189ea:	bf00      	nop
 80189ec:	20000120 	.word	0x20000120

080189f0 <_kill_r>:
 80189f0:	b538      	push	{r3, r4, r5, lr}
 80189f2:	4d07      	ldr	r5, [pc, #28]	; (8018a10 <_kill_r+0x20>)
 80189f4:	2300      	movs	r3, #0
 80189f6:	4604      	mov	r4, r0
 80189f8:	4608      	mov	r0, r1
 80189fa:	4611      	mov	r1, r2
 80189fc:	602b      	str	r3, [r5, #0]
 80189fe:	f7e8 fa03 	bl	8000e08 <_kill>
 8018a02:	1c43      	adds	r3, r0, #1
 8018a04:	d102      	bne.n	8018a0c <_kill_r+0x1c>
 8018a06:	682b      	ldr	r3, [r5, #0]
 8018a08:	b103      	cbz	r3, 8018a0c <_kill_r+0x1c>
 8018a0a:	6023      	str	r3, [r4, #0]
 8018a0c:	bd38      	pop	{r3, r4, r5, pc}
 8018a0e:	bf00      	nop
 8018a10:	2000dc60 	.word	0x2000dc60

08018a14 <_getpid_r>:
 8018a14:	f7e8 b9f0 	b.w	8000df8 <_getpid>

08018a18 <_fstat_r>:
 8018a18:	b538      	push	{r3, r4, r5, lr}
 8018a1a:	4d07      	ldr	r5, [pc, #28]	; (8018a38 <_fstat_r+0x20>)
 8018a1c:	2300      	movs	r3, #0
 8018a1e:	4604      	mov	r4, r0
 8018a20:	4608      	mov	r0, r1
 8018a22:	4611      	mov	r1, r2
 8018a24:	602b      	str	r3, [r5, #0]
 8018a26:	f7e8 fa50 	bl	8000eca <_fstat>
 8018a2a:	1c43      	adds	r3, r0, #1
 8018a2c:	d102      	bne.n	8018a34 <_fstat_r+0x1c>
 8018a2e:	682b      	ldr	r3, [r5, #0]
 8018a30:	b103      	cbz	r3, 8018a34 <_fstat_r+0x1c>
 8018a32:	6023      	str	r3, [r4, #0]
 8018a34:	bd38      	pop	{r3, r4, r5, pc}
 8018a36:	bf00      	nop
 8018a38:	2000dc60 	.word	0x2000dc60

08018a3c <_isatty_r>:
 8018a3c:	b538      	push	{r3, r4, r5, lr}
 8018a3e:	4d06      	ldr	r5, [pc, #24]	; (8018a58 <_isatty_r+0x1c>)
 8018a40:	2300      	movs	r3, #0
 8018a42:	4604      	mov	r4, r0
 8018a44:	4608      	mov	r0, r1
 8018a46:	602b      	str	r3, [r5, #0]
 8018a48:	f7e8 fa4f 	bl	8000eea <_isatty>
 8018a4c:	1c43      	adds	r3, r0, #1
 8018a4e:	d102      	bne.n	8018a56 <_isatty_r+0x1a>
 8018a50:	682b      	ldr	r3, [r5, #0]
 8018a52:	b103      	cbz	r3, 8018a56 <_isatty_r+0x1a>
 8018a54:	6023      	str	r3, [r4, #0]
 8018a56:	bd38      	pop	{r3, r4, r5, pc}
 8018a58:	2000dc60 	.word	0x2000dc60

08018a5c <_init>:
 8018a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a5e:	bf00      	nop
 8018a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018a62:	bc08      	pop	{r3}
 8018a64:	469e      	mov	lr, r3
 8018a66:	4770      	bx	lr

08018a68 <_fini>:
 8018a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a6a:	bf00      	nop
 8018a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018a6e:	bc08      	pop	{r3}
 8018a70:	469e      	mov	lr, r3
 8018a72:	4770      	bx	lr
