
f7RTU_freeMB_master_slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000baa0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004fc  0800bca0  0800bca0  0001bca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c19c  0800c19c  0002017c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c19c  0800c19c  0001c19c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c1a4  0800c1a4  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c1a4  0800c1a4  0001c1a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c1a8  0800c1a8  0001c1a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  0800c1ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000052b0  2000017c  0800c328  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000542c  0800c328  0002542c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003e2a1  00000000  00000000  000201aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000077b0  00000000  00000000  0005e44b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d18  00000000  00000000  00065c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a10  00000000  00000000  00067918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000b839  00000000  00000000  00069328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002bc20  00000000  00000000  00074b61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010b62f  00000000  00000000  000a0781  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001abdb0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b24  00000000  00000000  001abe04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000017c 	.word	0x2000017c
 800021c:	00000000 	.word	0x00000000
 8000220:	0800bc88 	.word	0x0800bc88

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000180 	.word	0x20000180
 800023c:	0800bc88 	.word	0x0800bc88

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005dc:	f000 fd2d 	bl	800103a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e0:	f000 f81e 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e4:	f000 f97e 	bl	80008e4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005e8:	f000 f94c 	bl	8000884 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 80005ec:	f000 f8ae 	bl	800074c <MX_TIM6_Init>
  MX_TIM7_Init();
 80005f0:	f000 f8e2 	bl	80007b8 <MX_TIM7_Init>
  MX_USART2_UART_Init();
 80005f4:	f000 f916 	bl	8000824 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005f8:	f003 fc66 	bl	8003ec8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005fc:	4a05      	ldr	r2, [pc, #20]	; (8000614 <main+0x3c>)
 80005fe:	2100      	movs	r1, #0
 8000600:	4805      	ldr	r0, [pc, #20]	; (8000618 <main+0x40>)
 8000602:	f003 fccb 	bl	8003f9c <osThreadNew>
 8000606:	4603      	mov	r3, r0
 8000608:	4a04      	ldr	r2, [pc, #16]	; (800061c <main+0x44>)
 800060a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800060c:	f003 fc90 	bl	8003f30 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000610:	e7fe      	b.n	8000610 <main+0x38>
 8000612:	bf00      	nop
 8000614:	0800be2c 	.word	0x0800be2c
 8000618:	08000aed 	.word	0x08000aed
 800061c:	20004e28 	.word	0x20004e28

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b0b8      	sub	sp, #224	; 0xe0
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800062a:	2234      	movs	r2, #52	; 0x34
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f00a fc25 	bl	800ae7e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000644:	f107 0308 	add.w	r3, r7, #8
 8000648:	2290      	movs	r2, #144	; 0x90
 800064a:	2100      	movs	r1, #0
 800064c:	4618      	mov	r0, r3
 800064e:	f00a fc16 	bl	800ae7e <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000652:	f001 f897 	bl	8001784 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000656:	4b3b      	ldr	r3, [pc, #236]	; (8000744 <SystemClock_Config+0x124>)
 8000658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065a:	4a3a      	ldr	r2, [pc, #232]	; (8000744 <SystemClock_Config+0x124>)
 800065c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000660:	6413      	str	r3, [r2, #64]	; 0x40
 8000662:	4b38      	ldr	r3, [pc, #224]	; (8000744 <SystemClock_Config+0x124>)
 8000664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800066e:	4b36      	ldr	r3, [pc, #216]	; (8000748 <SystemClock_Config+0x128>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4a35      	ldr	r2, [pc, #212]	; (8000748 <SystemClock_Config+0x128>)
 8000674:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000678:	6013      	str	r3, [r2, #0]
 800067a:	4b33      	ldr	r3, [pc, #204]	; (8000748 <SystemClock_Config+0x128>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000682:	603b      	str	r3, [r7, #0]
 8000684:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000686:	2301      	movs	r3, #1
 8000688:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800068c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000690:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000694:	2302      	movs	r3, #2
 8000696:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800069a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800069e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006a2:	2304      	movs	r3, #4
 80006a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 80006a8:	23d8      	movs	r3, #216	; 0xd8
 80006aa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ae:	2302      	movs	r3, #2
 80006b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006b4:	2304      	movs	r3, #4
 80006b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006ba:	2302      	movs	r3, #2
 80006bc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80006c4:	4618      	mov	r0, r3
 80006c6:	f001 f8bd 	bl	8001844 <HAL_RCC_OscConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80006d0:	f000 fa28 	bl	8000b24 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006d4:	f001 f866 	bl	80017a4 <HAL_PWREx_EnableOverDrive>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006de:	f000 fa21 	bl	8000b24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e2:	230f      	movs	r3, #15
 80006e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e8:	2302      	movs	r3, #2
 80006ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006f4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000700:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000704:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000708:	2107      	movs	r1, #7
 800070a:	4618      	mov	r0, r3
 800070c:	f001 fb48 	bl	8001da0 <HAL_RCC_ClockConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8000716:	f000 fa05 	bl	8000b24 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
 800071a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800071e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000720:	2300      	movs	r3, #0
 8000722:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000724:	2300      	movs	r3, #0
 8000726:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000728:	f107 0308 	add.w	r3, r7, #8
 800072c:	4618      	mov	r0, r3
 800072e:	f001 fd6b 	bl	8002208 <HAL_RCCEx_PeriphCLKConfig>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <SystemClock_Config+0x11c>
  {
    Error_Handler();
 8000738:	f000 f9f4 	bl	8000b24 <Error_Handler>
  }
}
 800073c:	bf00      	nop
 800073e:	37e0      	adds	r7, #224	; 0xe0
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40023800 	.word	0x40023800
 8000748:	40007000 	.word	0x40007000

0800074c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800075c:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <MX_TIM6_Init+0x64>)
 800075e:	4a15      	ldr	r2, [pc, #84]	; (80007b4 <MX_TIM6_Init+0x68>)
 8000760:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000762:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <MX_TIM6_Init+0x64>)
 8000764:	2200      	movs	r2, #0
 8000766:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000768:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <MX_TIM6_Init+0x64>)
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800076e:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <MX_TIM6_Init+0x64>)
 8000770:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000774:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000776:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <MX_TIM6_Init+0x64>)
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800077c:	480c      	ldr	r0, [pc, #48]	; (80007b0 <MX_TIM6_Init+0x64>)
 800077e:	f002 f96b 	bl	8002a58 <HAL_TIM_Base_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000788:	f000 f9cc 	bl	8000b24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800078c:	2300      	movs	r3, #0
 800078e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000790:	2300      	movs	r3, #0
 8000792:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	4619      	mov	r1, r3
 8000798:	4805      	ldr	r0, [pc, #20]	; (80007b0 <MX_TIM6_Init+0x64>)
 800079a:	f002 fc43 	bl	8003024 <HAL_TIMEx_MasterConfigSynchronization>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80007a4:	f000 f9be 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80007a8:	bf00      	nop
 80007aa:	3710      	adds	r7, #16
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20004eb0 	.word	0x20004eb0
 80007b4:	40001000 	.word	0x40001000

080007b8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80007c8:	4b14      	ldr	r3, [pc, #80]	; (800081c <MX_TIM7_Init+0x64>)
 80007ca:	4a15      	ldr	r2, [pc, #84]	; (8000820 <MX_TIM7_Init+0x68>)
 80007cc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80007ce:	4b13      	ldr	r3, [pc, #76]	; (800081c <MX_TIM7_Init+0x64>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d4:	4b11      	ldr	r3, [pc, #68]	; (800081c <MX_TIM7_Init+0x64>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80007da:	4b10      	ldr	r3, [pc, #64]	; (800081c <MX_TIM7_Init+0x64>)
 80007dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007e0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <MX_TIM7_Init+0x64>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80007e8:	480c      	ldr	r0, [pc, #48]	; (800081c <MX_TIM7_Init+0x64>)
 80007ea:	f002 f935 	bl	8002a58 <HAL_TIM_Base_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80007f4:	f000 f996 	bl	8000b24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007f8:	2300      	movs	r3, #0
 80007fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007fc:	2300      	movs	r3, #0
 80007fe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	4619      	mov	r1, r3
 8000804:	4805      	ldr	r0, [pc, #20]	; (800081c <MX_TIM7_Init+0x64>)
 8000806:	f002 fc0d 	bl	8003024 <HAL_TIMEx_MasterConfigSynchronization>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000810:	f000 f988 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000814:	bf00      	nop
 8000816:	3710      	adds	r7, #16
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20004f80 	.word	0x20004f80
 8000820:	40001400 	.word	0x40001400

08000824 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000828:	4b14      	ldr	r3, [pc, #80]	; (800087c <MX_USART2_UART_Init+0x58>)
 800082a:	4a15      	ldr	r2, [pc, #84]	; (8000880 <MX_USART2_UART_Init+0x5c>)
 800082c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800082e:	4b13      	ldr	r3, [pc, #76]	; (800087c <MX_USART2_UART_Init+0x58>)
 8000830:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000834:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000836:	4b11      	ldr	r3, [pc, #68]	; (800087c <MX_USART2_UART_Init+0x58>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800083c:	4b0f      	ldr	r3, [pc, #60]	; (800087c <MX_USART2_UART_Init+0x58>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <MX_USART2_UART_Init+0x58>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000848:	4b0c      	ldr	r3, [pc, #48]	; (800087c <MX_USART2_UART_Init+0x58>)
 800084a:	220c      	movs	r2, #12
 800084c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084e:	4b0b      	ldr	r3, [pc, #44]	; (800087c <MX_USART2_UART_Init+0x58>)
 8000850:	2200      	movs	r2, #0
 8000852:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000854:	4b09      	ldr	r3, [pc, #36]	; (800087c <MX_USART2_UART_Init+0x58>)
 8000856:	2200      	movs	r2, #0
 8000858:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800085a:	4b08      	ldr	r3, [pc, #32]	; (800087c <MX_USART2_UART_Init+0x58>)
 800085c:	2200      	movs	r2, #0
 800085e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <MX_USART2_UART_Init+0x58>)
 8000862:	2200      	movs	r2, #0
 8000864:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000866:	4805      	ldr	r0, [pc, #20]	; (800087c <MX_USART2_UART_Init+0x58>)
 8000868:	f002 fc88 	bl	800317c <HAL_UART_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000872:	f000 f957 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20004efc 	.word	0x20004efc
 8000880:	40004400 	.word	0x40004400

08000884 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000888:	4b14      	ldr	r3, [pc, #80]	; (80008dc <MX_USART3_UART_Init+0x58>)
 800088a:	4a15      	ldr	r2, [pc, #84]	; (80008e0 <MX_USART3_UART_Init+0x5c>)
 800088c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800088e:	4b13      	ldr	r3, [pc, #76]	; (80008dc <MX_USART3_UART_Init+0x58>)
 8000890:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000894:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000896:	4b11      	ldr	r3, [pc, #68]	; (80008dc <MX_USART3_UART_Init+0x58>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800089c:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <MX_USART3_UART_Init+0x58>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008a2:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <MX_USART3_UART_Init+0x58>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008a8:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <MX_USART3_UART_Init+0x58>)
 80008aa:	220c      	movs	r2, #12
 80008ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ae:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <MX_USART3_UART_Init+0x58>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b4:	4b09      	ldr	r3, [pc, #36]	; (80008dc <MX_USART3_UART_Init+0x58>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ba:	4b08      	ldr	r3, [pc, #32]	; (80008dc <MX_USART3_UART_Init+0x58>)
 80008bc:	2200      	movs	r2, #0
 80008be:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008c0:	4b06      	ldr	r3, [pc, #24]	; (80008dc <MX_USART3_UART_Init+0x58>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008c6:	4805      	ldr	r0, [pc, #20]	; (80008dc <MX_USART3_UART_Init+0x58>)
 80008c8:	f002 fc58 	bl	800317c <HAL_UART_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80008d2:	f000 f927 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20004e2c 	.word	0x20004e2c
 80008e0:	40004800 	.word	0x40004800

080008e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08c      	sub	sp, #48	; 0x30
 80008e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
 80008f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fa:	4b76      	ldr	r3, [pc, #472]	; (8000ad4 <MX_GPIO_Init+0x1f0>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a75      	ldr	r2, [pc, #468]	; (8000ad4 <MX_GPIO_Init+0x1f0>)
 8000900:	f043 0304 	orr.w	r3, r3, #4
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b73      	ldr	r3, [pc, #460]	; (8000ad4 <MX_GPIO_Init+0x1f0>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0304 	and.w	r3, r3, #4
 800090e:	61bb      	str	r3, [r7, #24]
 8000910:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000912:	4b70      	ldr	r3, [pc, #448]	; (8000ad4 <MX_GPIO_Init+0x1f0>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a6f      	ldr	r2, [pc, #444]	; (8000ad4 <MX_GPIO_Init+0x1f0>)
 8000918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b6d      	ldr	r3, [pc, #436]	; (8000ad4 <MX_GPIO_Init+0x1f0>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000926:	617b      	str	r3, [r7, #20]
 8000928:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092a:	4b6a      	ldr	r3, [pc, #424]	; (8000ad4 <MX_GPIO_Init+0x1f0>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a69      	ldr	r2, [pc, #420]	; (8000ad4 <MX_GPIO_Init+0x1f0>)
 8000930:	f043 0301 	orr.w	r3, r3, #1
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b67      	ldr	r3, [pc, #412]	; (8000ad4 <MX_GPIO_Init+0x1f0>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	613b      	str	r3, [r7, #16]
 8000940:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000942:	4b64      	ldr	r3, [pc, #400]	; (8000ad4 <MX_GPIO_Init+0x1f0>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a63      	ldr	r2, [pc, #396]	; (8000ad4 <MX_GPIO_Init+0x1f0>)
 8000948:	f043 0302 	orr.w	r3, r3, #2
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b61      	ldr	r3, [pc, #388]	; (8000ad4 <MX_GPIO_Init+0x1f0>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0302 	and.w	r3, r3, #2
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800095a:	4b5e      	ldr	r3, [pc, #376]	; (8000ad4 <MX_GPIO_Init+0x1f0>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a5d      	ldr	r2, [pc, #372]	; (8000ad4 <MX_GPIO_Init+0x1f0>)
 8000960:	f043 0308 	orr.w	r3, r3, #8
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b5b      	ldr	r3, [pc, #364]	; (8000ad4 <MX_GPIO_Init+0x1f0>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0308 	and.w	r3, r3, #8
 800096e:	60bb      	str	r3, [r7, #8]
 8000970:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000972:	4b58      	ldr	r3, [pc, #352]	; (8000ad4 <MX_GPIO_Init+0x1f0>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a57      	ldr	r2, [pc, #348]	; (8000ad4 <MX_GPIO_Init+0x1f0>)
 8000978:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b55      	ldr	r3, [pc, #340]	; (8000ad4 <MX_GPIO_Init+0x1f0>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800098a:	2200      	movs	r2, #0
 800098c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000990:	4851      	ldr	r0, [pc, #324]	; (8000ad8 <MX_GPIO_Init+0x1f4>)
 8000992:	f000 fec3 	bl	800171c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	2140      	movs	r1, #64	; 0x40
 800099a:	4850      	ldr	r0, [pc, #320]	; (8000adc <MX_GPIO_Init+0x1f8>)
 800099c:	f000 febe 	bl	800171c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009a6:	4b4e      	ldr	r3, [pc, #312]	; (8000ae0 <MX_GPIO_Init+0x1fc>)
 80009a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009ae:	f107 031c 	add.w	r3, r7, #28
 80009b2:	4619      	mov	r1, r3
 80009b4:	484b      	ldr	r0, [pc, #300]	; (8000ae4 <MX_GPIO_Init+0x200>)
 80009b6:	f000 fd05 	bl	80013c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80009ba:	2332      	movs	r3, #50	; 0x32
 80009bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009be:	2302      	movs	r3, #2
 80009c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c6:	2303      	movs	r3, #3
 80009c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009ca:	230b      	movs	r3, #11
 80009cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ce:	f107 031c 	add.w	r3, r7, #28
 80009d2:	4619      	mov	r1, r3
 80009d4:	4843      	ldr	r0, [pc, #268]	; (8000ae4 <MX_GPIO_Init+0x200>)
 80009d6:	f000 fcf5 	bl	80013c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80009da:	2386      	movs	r3, #134	; 0x86
 80009dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009de:	2302      	movs	r3, #2
 80009e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e6:	2303      	movs	r3, #3
 80009e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009ea:	230b      	movs	r3, #11
 80009ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	4619      	mov	r1, r3
 80009f4:	483c      	ldr	r0, [pc, #240]	; (8000ae8 <MX_GPIO_Init+0x204>)
 80009f6:	f000 fce5 	bl	80013c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009fa:	f244 0381 	movw	r3, #16513	; 0x4081
 80009fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a00:	2301      	movs	r3, #1
 8000a02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a0c:	f107 031c 	add.w	r3, r7, #28
 8000a10:	4619      	mov	r1, r3
 8000a12:	4831      	ldr	r0, [pc, #196]	; (8000ad8 <MX_GPIO_Init+0x1f4>)
 8000a14:	f000 fcd6 	bl	80013c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000a18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a26:	2303      	movs	r3, #3
 8000a28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a2a:	230b      	movs	r3, #11
 8000a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000a2e:	f107 031c 	add.w	r3, r7, #28
 8000a32:	4619      	mov	r1, r3
 8000a34:	4828      	ldr	r0, [pc, #160]	; (8000ad8 <MX_GPIO_Init+0x1f4>)
 8000a36:	f000 fcc5 	bl	80013c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a3a:	2340      	movs	r3, #64	; 0x40
 8000a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a46:	2300      	movs	r3, #0
 8000a48:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4822      	ldr	r0, [pc, #136]	; (8000adc <MX_GPIO_Init+0x1f8>)
 8000a52:	f000 fcb7 	bl	80013c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a56:	2380      	movs	r3, #128	; 0x80
 8000a58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a62:	f107 031c 	add.w	r3, r7, #28
 8000a66:	4619      	mov	r1, r3
 8000a68:	481c      	ldr	r0, [pc, #112]	; (8000adc <MX_GPIO_Init+0x1f8>)
 8000a6a:	f000 fcab 	bl	80013c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000a6e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000a72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a74:	2302      	movs	r3, #2
 8000a76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a80:	230a      	movs	r3, #10
 8000a82:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a84:	f107 031c 	add.w	r3, r7, #28
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4817      	ldr	r0, [pc, #92]	; (8000ae8 <MX_GPIO_Init+0x204>)
 8000a8c:	f000 fc9a 	bl	80013c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000a90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a96:	2300      	movs	r3, #0
 8000a98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a9e:	f107 031c 	add.w	r3, r7, #28
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4810      	ldr	r0, [pc, #64]	; (8000ae8 <MX_GPIO_Init+0x204>)
 8000aa6:	f000 fc8d 	bl	80013c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000aaa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000aae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab8:	2303      	movs	r3, #3
 8000aba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000abc:	230b      	movs	r3, #11
 8000abe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ac0:	f107 031c 	add.w	r3, r7, #28
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4805      	ldr	r0, [pc, #20]	; (8000adc <MX_GPIO_Init+0x1f8>)
 8000ac8:	f000 fc7c 	bl	80013c4 <HAL_GPIO_Init>

}
 8000acc:	bf00      	nop
 8000ace:	3730      	adds	r7, #48	; 0x30
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	40020400 	.word	0x40020400
 8000adc:	40021800 	.word	0x40021800
 8000ae0:	10110000 	.word	0x10110000
 8000ae4:	40020800 	.word	0x40020800
 8000ae8:	40020000 	.word	0x40020000

08000aec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	vInitMBTask();
 8000af4:	f008 f994 	bl	8008e20 <vInitMBTask>
  for(;;)
  {
    osDelay(1);
 8000af8:	2001      	movs	r0, #1
 8000afa:	f003 faf5 	bl	80040e8 <osDelay>
 8000afe:	e7fb      	b.n	8000af8 <StartDefaultTask+0xc>

08000b00 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM13) {
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a04      	ldr	r2, [pc, #16]	; (8000b20 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d101      	bne.n	8000b16 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b12:	f000 fa9f 	bl	8001054 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b16:	bf00      	nop
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40001c00 	.word	0x40001c00

08000b24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b28:	b672      	cpsid	i
}
 8000b2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <Error_Handler+0x8>
	...

08000b30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b36:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <HAL_MspInit+0x4c>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3a:	4a10      	ldr	r2, [pc, #64]	; (8000b7c <HAL_MspInit+0x4c>)
 8000b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b40:	6413      	str	r3, [r2, #64]	; 0x40
 8000b42:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <HAL_MspInit+0x4c>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b4a:	607b      	str	r3, [r7, #4]
 8000b4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4e:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <HAL_MspInit+0x4c>)
 8000b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b52:	4a0a      	ldr	r2, [pc, #40]	; (8000b7c <HAL_MspInit+0x4c>)
 8000b54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b58:	6453      	str	r3, [r2, #68]	; 0x44
 8000b5a:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <HAL_MspInit+0x4c>)
 8000b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b62:	603b      	str	r3, [r7, #0]
 8000b64:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b66:	2200      	movs	r2, #0
 8000b68:	210f      	movs	r1, #15
 8000b6a:	f06f 0001 	mvn.w	r0, #1
 8000b6e:	f000 fb6d 	bl	800124c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40023800 	.word	0x40023800

08000b80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a1a      	ldr	r2, [pc, #104]	; (8000bf8 <HAL_TIM_Base_MspInit+0x78>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d114      	bne.n	8000bbc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000b92:	4b1a      	ldr	r3, [pc, #104]	; (8000bfc <HAL_TIM_Base_MspInit+0x7c>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b96:	4a19      	ldr	r2, [pc, #100]	; (8000bfc <HAL_TIM_Base_MspInit+0x7c>)
 8000b98:	f043 0310 	orr.w	r3, r3, #16
 8000b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b9e:	4b17      	ldr	r3, [pc, #92]	; (8000bfc <HAL_TIM_Base_MspInit+0x7c>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba2:	f003 0310 	and.w	r3, r3, #16
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2105      	movs	r1, #5
 8000bae:	2036      	movs	r0, #54	; 0x36
 8000bb0:	f000 fb4c 	bl	800124c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bb4:	2036      	movs	r0, #54	; 0x36
 8000bb6:	f000 fb65 	bl	8001284 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000bba:	e018      	b.n	8000bee <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM7)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a0f      	ldr	r2, [pc, #60]	; (8000c00 <HAL_TIM_Base_MspInit+0x80>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d113      	bne.n	8000bee <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000bc6:	4b0d      	ldr	r3, [pc, #52]	; (8000bfc <HAL_TIM_Base_MspInit+0x7c>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	4a0c      	ldr	r2, [pc, #48]	; (8000bfc <HAL_TIM_Base_MspInit+0x7c>)
 8000bcc:	f043 0320 	orr.w	r3, r3, #32
 8000bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd2:	4b0a      	ldr	r3, [pc, #40]	; (8000bfc <HAL_TIM_Base_MspInit+0x7c>)
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd6:	f003 0320 	and.w	r3, r3, #32
 8000bda:	60bb      	str	r3, [r7, #8]
 8000bdc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2105      	movs	r1, #5
 8000be2:	2037      	movs	r0, #55	; 0x37
 8000be4:	f000 fb32 	bl	800124c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000be8:	2037      	movs	r0, #55	; 0x37
 8000bea:	f000 fb4b 	bl	8001284 <HAL_NVIC_EnableIRQ>
}
 8000bee:	bf00      	nop
 8000bf0:	3710      	adds	r7, #16
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40001000 	.word	0x40001000
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	40001400 	.word	0x40001400

08000c04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08c      	sub	sp, #48	; 0x30
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0c:	f107 031c 	add.w	r3, r7, #28
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a44      	ldr	r2, [pc, #272]	; (8000d34 <HAL_UART_MspInit+0x130>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d14c      	bne.n	8000cc0 <HAL_UART_MspInit+0xbc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c26:	4b44      	ldr	r3, [pc, #272]	; (8000d38 <HAL_UART_MspInit+0x134>)
 8000c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2a:	4a43      	ldr	r2, [pc, #268]	; (8000d38 <HAL_UART_MspInit+0x134>)
 8000c2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c30:	6413      	str	r3, [r2, #64]	; 0x40
 8000c32:	4b41      	ldr	r3, [pc, #260]	; (8000d38 <HAL_UART_MspInit+0x134>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c3a:	61bb      	str	r3, [r7, #24]
 8000c3c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3e:	4b3e      	ldr	r3, [pc, #248]	; (8000d38 <HAL_UART_MspInit+0x134>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	4a3d      	ldr	r2, [pc, #244]	; (8000d38 <HAL_UART_MspInit+0x134>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4a:	4b3b      	ldr	r3, [pc, #236]	; (8000d38 <HAL_UART_MspInit+0x134>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	617b      	str	r3, [r7, #20]
 8000c54:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c56:	4b38      	ldr	r3, [pc, #224]	; (8000d38 <HAL_UART_MspInit+0x134>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a37      	ldr	r2, [pc, #220]	; (8000d38 <HAL_UART_MspInit+0x134>)
 8000c5c:	f043 0308 	orr.w	r3, r3, #8
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b35      	ldr	r3, [pc, #212]	; (8000d38 <HAL_UART_MspInit+0x134>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0308 	and.w	r3, r3, #8
 8000c6a:	613b      	str	r3, [r7, #16]
 8000c6c:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c6e:	2308      	movs	r3, #8
 8000c70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c72:	2302      	movs	r3, #2
 8000c74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c7e:	2307      	movs	r3, #7
 8000c80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c82:	f107 031c 	add.w	r3, r7, #28
 8000c86:	4619      	mov	r1, r3
 8000c88:	482c      	ldr	r0, [pc, #176]	; (8000d3c <HAL_UART_MspInit+0x138>)
 8000c8a:	f000 fb9b 	bl	80013c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c8e:	2320      	movs	r3, #32
 8000c90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c92:	2302      	movs	r3, #2
 8000c94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c9a:	2303      	movs	r3, #3
 8000c9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c9e:	2307      	movs	r3, #7
 8000ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ca2:	f107 031c 	add.w	r3, r7, #28
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4825      	ldr	r0, [pc, #148]	; (8000d40 <HAL_UART_MspInit+0x13c>)
 8000caa:	f000 fb8b 	bl	80013c4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2105      	movs	r1, #5
 8000cb2:	2026      	movs	r0, #38	; 0x26
 8000cb4:	f000 faca 	bl	800124c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000cb8:	2026      	movs	r0, #38	; 0x26
 8000cba:	f000 fae3 	bl	8001284 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cbe:	e035      	b.n	8000d2c <HAL_UART_MspInit+0x128>
  else if(huart->Instance==USART3)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a1f      	ldr	r2, [pc, #124]	; (8000d44 <HAL_UART_MspInit+0x140>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d130      	bne.n	8000d2c <HAL_UART_MspInit+0x128>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cca:	4b1b      	ldr	r3, [pc, #108]	; (8000d38 <HAL_UART_MspInit+0x134>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cce:	4a1a      	ldr	r2, [pc, #104]	; (8000d38 <HAL_UART_MspInit+0x134>)
 8000cd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd6:	4b18      	ldr	r3, [pc, #96]	; (8000d38 <HAL_UART_MspInit+0x134>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ce2:	4b15      	ldr	r3, [pc, #84]	; (8000d38 <HAL_UART_MspInit+0x134>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	4a14      	ldr	r2, [pc, #80]	; (8000d38 <HAL_UART_MspInit+0x134>)
 8000ce8:	f043 0308 	orr.w	r3, r3, #8
 8000cec:	6313      	str	r3, [r2, #48]	; 0x30
 8000cee:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <HAL_UART_MspInit+0x134>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	f003 0308 	and.w	r3, r3, #8
 8000cf6:	60bb      	str	r3, [r7, #8]
 8000cf8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000cfa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d00:	2302      	movs	r3, #2
 8000d02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d08:	2303      	movs	r3, #3
 8000d0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d0c:	2307      	movs	r3, #7
 8000d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d10:	f107 031c 	add.w	r3, r7, #28
 8000d14:	4619      	mov	r1, r3
 8000d16:	480a      	ldr	r0, [pc, #40]	; (8000d40 <HAL_UART_MspInit+0x13c>)
 8000d18:	f000 fb54 	bl	80013c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2105      	movs	r1, #5
 8000d20:	2027      	movs	r0, #39	; 0x27
 8000d22:	f000 fa93 	bl	800124c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000d26:	2027      	movs	r0, #39	; 0x27
 8000d28:	f000 faac 	bl	8001284 <HAL_NVIC_EnableIRQ>
}
 8000d2c:	bf00      	nop
 8000d2e:	3730      	adds	r7, #48	; 0x30
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40004400 	.word	0x40004400
 8000d38:	40023800 	.word	0x40023800
 8000d3c:	40020000 	.word	0x40020000
 8000d40:	40020c00 	.word	0x40020c00
 8000d44:	40004800 	.word	0x40004800

08000d48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b08c      	sub	sp, #48	; 0x30
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d54:	2300      	movs	r3, #0
 8000d56:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM13 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	6879      	ldr	r1, [r7, #4]
 8000d5c:	202c      	movs	r0, #44	; 0x2c
 8000d5e:	f000 fa75 	bl	800124c <HAL_NVIC_SetPriority>

  /* Enable the TIM13 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8000d62:	202c      	movs	r0, #44	; 0x2c
 8000d64:	f000 fa8e 	bl	8001284 <HAL_NVIC_EnableIRQ>

  /* Enable TIM13 clock */
  __HAL_RCC_TIM13_CLK_ENABLE();
 8000d68:	4b1f      	ldr	r3, [pc, #124]	; (8000de8 <HAL_InitTick+0xa0>)
 8000d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6c:	4a1e      	ldr	r2, [pc, #120]	; (8000de8 <HAL_InitTick+0xa0>)
 8000d6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d72:	6413      	str	r3, [r2, #64]	; 0x40
 8000d74:	4b1c      	ldr	r3, [pc, #112]	; (8000de8 <HAL_InitTick+0xa0>)
 8000d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d80:	f107 0210 	add.w	r2, r7, #16
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	4611      	mov	r1, r2
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f001 fa0a 	bl	80021a4 <HAL_RCC_GetClockConfig>

  /* Compute TIM13 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000d90:	f001 f9e0 	bl	8002154 <HAL_RCC_GetPCLK1Freq>
 8000d94:	4603      	mov	r3, r0
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM13 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d9c:	4a13      	ldr	r2, [pc, #76]	; (8000dec <HAL_InitTick+0xa4>)
 8000d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000da2:	0c9b      	lsrs	r3, r3, #18
 8000da4:	3b01      	subs	r3, #1
 8000da6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM13 */
  htim13.Instance = TIM13;
 8000da8:	4b11      	ldr	r3, [pc, #68]	; (8000df0 <HAL_InitTick+0xa8>)
 8000daa:	4a12      	ldr	r2, [pc, #72]	; (8000df4 <HAL_InitTick+0xac>)
 8000dac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM13CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim13.Init.Period = (1000000U / 1000U) - 1U;
 8000dae:	4b10      	ldr	r3, [pc, #64]	; (8000df0 <HAL_InitTick+0xa8>)
 8000db0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000db4:	60da      	str	r2, [r3, #12]
  htim13.Init.Prescaler = uwPrescalerValue;
 8000db6:	4a0e      	ldr	r2, [pc, #56]	; (8000df0 <HAL_InitTick+0xa8>)
 8000db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dba:	6053      	str	r3, [r2, #4]
  htim13.Init.ClockDivision = 0;
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <HAL_InitTick+0xa8>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	611a      	str	r2, [r3, #16]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc2:	4b0b      	ldr	r3, [pc, #44]	; (8000df0 <HAL_InitTick+0xa8>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim13) == HAL_OK)
 8000dc8:	4809      	ldr	r0, [pc, #36]	; (8000df0 <HAL_InitTick+0xa8>)
 8000dca:	f001 fe45 	bl	8002a58 <HAL_TIM_Base_Init>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d104      	bne.n	8000dde <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim13);
 8000dd4:	4806      	ldr	r0, [pc, #24]	; (8000df0 <HAL_InitTick+0xa8>)
 8000dd6:	f001 fe97 	bl	8002b08 <HAL_TIM_Base_Start_IT>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	e000      	b.n	8000de0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3730      	adds	r7, #48	; 0x30
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	40023800 	.word	0x40023800
 8000dec:	431bde83 	.word	0x431bde83
 8000df0:	20004fcc 	.word	0x20004fcc
 8000df4:	40001c00 	.word	0x40001c00

08000df8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dfc:	e7fe      	b.n	8000dfc <NMI_Handler+0x4>

08000dfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e02:	e7fe      	b.n	8000e02 <HardFault_Handler+0x4>

08000e04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e08:	e7fe      	b.n	8000e08 <MemManage_Handler+0x4>

08000e0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e0e:	e7fe      	b.n	8000e0e <BusFault_Handler+0x4>

08000e10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <UsageFault_Handler+0x4>

08000e16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8000e28:	4802      	ldr	r0, [pc, #8]	; (8000e34 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8000e2a:	f001 ff14 	bl	8002c56 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20004fcc 	.word	0x20004fcc

08000e38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
	return 1;
 8000e3c:	2301      	movs	r3, #1
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr

08000e48 <_kill>:

int _kill(int pid, int sig)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000e52:	f009 fed1 	bl	800abf8 <__errno>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2216      	movs	r2, #22
 8000e5a:	601a      	str	r2, [r3, #0]
	return -1;
 8000e5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <_exit>:

void _exit (int status)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000e70:	f04f 31ff 	mov.w	r1, #4294967295
 8000e74:	6878      	ldr	r0, [r7, #4]
 8000e76:	f7ff ffe7 	bl	8000e48 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000e7a:	e7fe      	b.n	8000e7a <_exit+0x12>

08000e7c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e88:	2300      	movs	r3, #0
 8000e8a:	617b      	str	r3, [r7, #20]
 8000e8c:	e00a      	b.n	8000ea4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e8e:	f3af 8000 	nop.w
 8000e92:	4601      	mov	r1, r0
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	1c5a      	adds	r2, r3, #1
 8000e98:	60ba      	str	r2, [r7, #8]
 8000e9a:	b2ca      	uxtb	r2, r1
 8000e9c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	617b      	str	r3, [r7, #20]
 8000ea4:	697a      	ldr	r2, [r7, #20]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	dbf0      	blt.n	8000e8e <_read+0x12>
	}

return len;
 8000eac:	687b      	ldr	r3, [r7, #4]
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3718      	adds	r7, #24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b086      	sub	sp, #24
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	60f8      	str	r0, [r7, #12]
 8000ebe:	60b9      	str	r1, [r7, #8]
 8000ec0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	617b      	str	r3, [r7, #20]
 8000ec6:	e009      	b.n	8000edc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	1c5a      	adds	r2, r3, #1
 8000ecc:	60ba      	str	r2, [r7, #8]
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	617b      	str	r3, [r7, #20]
 8000edc:	697a      	ldr	r2, [r7, #20]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	dbf1      	blt.n	8000ec8 <_write+0x12>
	}
	return len;
 8000ee4:	687b      	ldr	r3, [r7, #4]
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3718      	adds	r7, #24
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <_close>:

int _close(int file)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	b083      	sub	sp, #12
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
	return -1;
 8000ef6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f06:	b480      	push	{r7}
 8000f08:	b083      	sub	sp, #12
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
 8000f0e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f16:	605a      	str	r2, [r3, #4]
	return 0;
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <_isatty>:

int _isatty(int file)
{
 8000f26:	b480      	push	{r7}
 8000f28:	b083      	sub	sp, #12
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
	return 1;
 8000f2e:	2301      	movs	r3, #1
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
	return 0;
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3714      	adds	r7, #20
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
	...

08000f58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f60:	4a14      	ldr	r2, [pc, #80]	; (8000fb4 <_sbrk+0x5c>)
 8000f62:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <_sbrk+0x60>)
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f6c:	4b13      	ldr	r3, [pc, #76]	; (8000fbc <_sbrk+0x64>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d102      	bne.n	8000f7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f74:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <_sbrk+0x64>)
 8000f76:	4a12      	ldr	r2, [pc, #72]	; (8000fc0 <_sbrk+0x68>)
 8000f78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f7a:	4b10      	ldr	r3, [pc, #64]	; (8000fbc <_sbrk+0x64>)
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4413      	add	r3, r2
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d207      	bcs.n	8000f98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f88:	f009 fe36 	bl	800abf8 <__errno>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	220c      	movs	r2, #12
 8000f90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f92:	f04f 33ff 	mov.w	r3, #4294967295
 8000f96:	e009      	b.n	8000fac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f98:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <_sbrk+0x64>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f9e:	4b07      	ldr	r3, [pc, #28]	; (8000fbc <_sbrk+0x64>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	4a05      	ldr	r2, [pc, #20]	; (8000fbc <_sbrk+0x64>)
 8000fa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000faa:	68fb      	ldr	r3, [r7, #12]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3718      	adds	r7, #24
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20080000 	.word	0x20080000
 8000fb8:	00000400 	.word	0x00000400
 8000fbc:	20000198 	.word	0x20000198
 8000fc0:	20005430 	.word	0x20005430

08000fc4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fc8:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <SystemInit+0x20>)
 8000fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fce:	4a05      	ldr	r2, [pc, #20]	; (8000fe4 <SystemInit+0x20>)
 8000fd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fe8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001020 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fec:	480d      	ldr	r0, [pc, #52]	; (8001024 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fee:	490e      	ldr	r1, [pc, #56]	; (8001028 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ff0:	4a0e      	ldr	r2, [pc, #56]	; (800102c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ff2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff4:	e002      	b.n	8000ffc <LoopCopyDataInit>

08000ff6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ff6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ffa:	3304      	adds	r3, #4

08000ffc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ffc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ffe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001000:	d3f9      	bcc.n	8000ff6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001002:	4a0b      	ldr	r2, [pc, #44]	; (8001030 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001004:	4c0b      	ldr	r4, [pc, #44]	; (8001034 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001006:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001008:	e001      	b.n	800100e <LoopFillZerobss>

0800100a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800100a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800100c:	3204      	adds	r2, #4

0800100e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800100e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001010:	d3fb      	bcc.n	800100a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001012:	f7ff ffd7 	bl	8000fc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001016:	f009 fefd 	bl	800ae14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800101a:	f7ff fadd 	bl	80005d8 <main>
  bx  lr    
 800101e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001020:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001024:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001028:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 800102c:	0800c1ac 	.word	0x0800c1ac
  ldr r2, =_sbss
 8001030:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8001034:	2000542c 	.word	0x2000542c

08001038 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001038:	e7fe      	b.n	8001038 <ADC_IRQHandler>

0800103a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800103e:	2003      	movs	r0, #3
 8001040:	f000 f8f9 	bl	8001236 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001044:	200f      	movs	r0, #15
 8001046:	f7ff fe7f 	bl	8000d48 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800104a:	f7ff fd71 	bl	8000b30 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800104e:	2300      	movs	r3, #0
}
 8001050:	4618      	mov	r0, r3
 8001052:	bd80      	pop	{r7, pc}

08001054 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001058:	4b06      	ldr	r3, [pc, #24]	; (8001074 <HAL_IncTick+0x20>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	461a      	mov	r2, r3
 800105e:	4b06      	ldr	r3, [pc, #24]	; (8001078 <HAL_IncTick+0x24>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4413      	add	r3, r2
 8001064:	4a04      	ldr	r2, [pc, #16]	; (8001078 <HAL_IncTick+0x24>)
 8001066:	6013      	str	r3, [r2, #0]
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	20000008 	.word	0x20000008
 8001078:	20005018 	.word	0x20005018

0800107c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  return uwTick;
 8001080:	4b03      	ldr	r3, [pc, #12]	; (8001090 <HAL_GetTick+0x14>)
 8001082:	681b      	ldr	r3, [r3, #0]
}
 8001084:	4618      	mov	r0, r3
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	20005018 	.word	0x20005018

08001094 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800109c:	f7ff ffee 	bl	800107c <HAL_GetTick>
 80010a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010ac:	d005      	beq.n	80010ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ae:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <HAL_Delay+0x44>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	461a      	mov	r2, r3
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	4413      	add	r3, r2
 80010b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010ba:	bf00      	nop
 80010bc:	f7ff ffde 	bl	800107c <HAL_GetTick>
 80010c0:	4602      	mov	r2, r0
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	68fa      	ldr	r2, [r7, #12]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d8f7      	bhi.n	80010bc <HAL_Delay+0x28>
  {
  }
}
 80010cc:	bf00      	nop
 80010ce:	bf00      	nop
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000008 	.word	0x20000008

080010dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f003 0307 	and.w	r3, r3, #7
 80010ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010ec:	4b0b      	ldr	r3, [pc, #44]	; (800111c <__NVIC_SetPriorityGrouping+0x40>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010f2:	68ba      	ldr	r2, [r7, #8]
 80010f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010f8:	4013      	ands	r3, r2
 80010fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001104:	4b06      	ldr	r3, [pc, #24]	; (8001120 <__NVIC_SetPriorityGrouping+0x44>)
 8001106:	4313      	orrs	r3, r2
 8001108:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800110a:	4a04      	ldr	r2, [pc, #16]	; (800111c <__NVIC_SetPriorityGrouping+0x40>)
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	60d3      	str	r3, [r2, #12]
}
 8001110:	bf00      	nop
 8001112:	3714      	adds	r7, #20
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	e000ed00 	.word	0xe000ed00
 8001120:	05fa0000 	.word	0x05fa0000

08001124 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001128:	4b04      	ldr	r3, [pc, #16]	; (800113c <__NVIC_GetPriorityGrouping+0x18>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	0a1b      	lsrs	r3, r3, #8
 800112e:	f003 0307 	and.w	r3, r3, #7
}
 8001132:	4618      	mov	r0, r3
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800114a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114e:	2b00      	cmp	r3, #0
 8001150:	db0b      	blt.n	800116a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	f003 021f 	and.w	r2, r3, #31
 8001158:	4907      	ldr	r1, [pc, #28]	; (8001178 <__NVIC_EnableIRQ+0x38>)
 800115a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115e:	095b      	lsrs	r3, r3, #5
 8001160:	2001      	movs	r0, #1
 8001162:	fa00 f202 	lsl.w	r2, r0, r2
 8001166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800116a:	bf00      	nop
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	e000e100 	.word	0xe000e100

0800117c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	6039      	str	r1, [r7, #0]
 8001186:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118c:	2b00      	cmp	r3, #0
 800118e:	db0a      	blt.n	80011a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	b2da      	uxtb	r2, r3
 8001194:	490c      	ldr	r1, [pc, #48]	; (80011c8 <__NVIC_SetPriority+0x4c>)
 8001196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119a:	0112      	lsls	r2, r2, #4
 800119c:	b2d2      	uxtb	r2, r2
 800119e:	440b      	add	r3, r1
 80011a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011a4:	e00a      	b.n	80011bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	4908      	ldr	r1, [pc, #32]	; (80011cc <__NVIC_SetPriority+0x50>)
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	f003 030f 	and.w	r3, r3, #15
 80011b2:	3b04      	subs	r3, #4
 80011b4:	0112      	lsls	r2, r2, #4
 80011b6:	b2d2      	uxtb	r2, r2
 80011b8:	440b      	add	r3, r1
 80011ba:	761a      	strb	r2, [r3, #24]
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	e000e100 	.word	0xe000e100
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b089      	sub	sp, #36	; 0x24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f003 0307 	and.w	r3, r3, #7
 80011e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	f1c3 0307 	rsb	r3, r3, #7
 80011ea:	2b04      	cmp	r3, #4
 80011ec:	bf28      	it	cs
 80011ee:	2304      	movcs	r3, #4
 80011f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	3304      	adds	r3, #4
 80011f6:	2b06      	cmp	r3, #6
 80011f8:	d902      	bls.n	8001200 <NVIC_EncodePriority+0x30>
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	3b03      	subs	r3, #3
 80011fe:	e000      	b.n	8001202 <NVIC_EncodePriority+0x32>
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001204:	f04f 32ff 	mov.w	r2, #4294967295
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	43da      	mvns	r2, r3
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	401a      	ands	r2, r3
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001218:	f04f 31ff 	mov.w	r1, #4294967295
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	fa01 f303 	lsl.w	r3, r1, r3
 8001222:	43d9      	mvns	r1, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001228:	4313      	orrs	r3, r2
         );
}
 800122a:	4618      	mov	r0, r3
 800122c:	3724      	adds	r7, #36	; 0x24
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr

08001236 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b082      	sub	sp, #8
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f7ff ff4c 	bl	80010dc <__NVIC_SetPriorityGrouping>
}
 8001244:	bf00      	nop
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
 8001258:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800125a:	2300      	movs	r3, #0
 800125c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800125e:	f7ff ff61 	bl	8001124 <__NVIC_GetPriorityGrouping>
 8001262:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	68b9      	ldr	r1, [r7, #8]
 8001268:	6978      	ldr	r0, [r7, #20]
 800126a:	f7ff ffb1 	bl	80011d0 <NVIC_EncodePriority>
 800126e:	4602      	mov	r2, r0
 8001270:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001274:	4611      	mov	r1, r2
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff ff80 	bl	800117c <__NVIC_SetPriority>
}
 800127c:	bf00      	nop
 800127e:	3718      	adds	r7, #24
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800128e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff ff54 	bl	8001140 <__NVIC_EnableIRQ>
}
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ac:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80012ae:	f7ff fee5 	bl	800107c <HAL_GetTick>
 80012b2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d008      	beq.n	80012d2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2280      	movs	r2, #128	; 0x80
 80012c4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2200      	movs	r2, #0
 80012ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e052      	b.n	8001378 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f022 0216 	bic.w	r2, r2, #22
 80012e0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	695a      	ldr	r2, [r3, #20]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012f0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d103      	bne.n	8001302 <HAL_DMA_Abort+0x62>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d007      	beq.n	8001312 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f022 0208 	bic.w	r2, r2, #8
 8001310:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f022 0201 	bic.w	r2, r2, #1
 8001320:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001322:	e013      	b.n	800134c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001324:	f7ff feaa 	bl	800107c <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b05      	cmp	r3, #5
 8001330:	d90c      	bls.n	800134c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2220      	movs	r2, #32
 8001336:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2200      	movs	r2, #0
 800133c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2203      	movs	r2, #3
 8001344:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001348:	2303      	movs	r3, #3
 800134a:	e015      	b.n	8001378 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	2b00      	cmp	r3, #0
 8001358:	d1e4      	bne.n	8001324 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800135e:	223f      	movs	r2, #63	; 0x3f
 8001360:	409a      	lsls	r2, r3
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2200      	movs	r2, #0
 800136a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2201      	movs	r2, #1
 8001372:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001376:	2300      	movs	r3, #0
}
 8001378:	4618      	mov	r0, r3
 800137a:	3710      	adds	r7, #16
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800138e:	b2db      	uxtb	r3, r3
 8001390:	2b02      	cmp	r3, #2
 8001392:	d004      	beq.n	800139e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2280      	movs	r2, #128	; 0x80
 8001398:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e00c      	b.n	80013b8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2205      	movs	r2, #5
 80013a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f022 0201 	bic.w	r2, r2, #1
 80013b4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80013b6:	2300      	movs	r3, #0
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b089      	sub	sp, #36	; 0x24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80013ce:	2300      	movs	r3, #0
 80013d0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80013d2:	2300      	movs	r3, #0
 80013d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80013d6:	2300      	movs	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80013da:	2300      	movs	r3, #0
 80013dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80013de:	2300      	movs	r3, #0
 80013e0:	61fb      	str	r3, [r7, #28]
 80013e2:	e175      	b.n	80016d0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80013e4:	2201      	movs	r2, #1
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	697a      	ldr	r2, [r7, #20]
 80013f4:	4013      	ands	r3, r2
 80013f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	f040 8164 	bne.w	80016ca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	2b01      	cmp	r3, #1
 8001408:	d00b      	beq.n	8001422 <HAL_GPIO_Init+0x5e>
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	2b02      	cmp	r3, #2
 8001410:	d007      	beq.n	8001422 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001416:	2b11      	cmp	r3, #17
 8001418:	d003      	beq.n	8001422 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	2b12      	cmp	r3, #18
 8001420:	d130      	bne.n	8001484 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	2203      	movs	r2, #3
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	43db      	mvns	r3, r3
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	4013      	ands	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	68da      	ldr	r2, [r3, #12]
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	4313      	orrs	r3, r2
 800144a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001458:	2201      	movs	r2, #1
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	43db      	mvns	r3, r3
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4013      	ands	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	091b      	lsrs	r3, r3, #4
 800146e:	f003 0201 	and.w	r2, r3, #1
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4313      	orrs	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	2203      	movs	r2, #3
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	43db      	mvns	r3, r3
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	4013      	ands	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	689a      	ldr	r2, [r3, #8]
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d003      	beq.n	80014c4 <HAL_GPIO_Init+0x100>
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	2b12      	cmp	r3, #18
 80014c2:	d123      	bne.n	800150c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	08da      	lsrs	r2, r3, #3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	3208      	adds	r2, #8
 80014cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	f003 0307 	and.w	r3, r3, #7
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	220f      	movs	r2, #15
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	43db      	mvns	r3, r3
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	4013      	ands	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	691a      	ldr	r2, [r3, #16]
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	08da      	lsrs	r2, r3, #3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	3208      	adds	r2, #8
 8001506:	69b9      	ldr	r1, [r7, #24]
 8001508:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	2203      	movs	r2, #3
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	43db      	mvns	r3, r3
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	4013      	ands	r3, r2
 8001522:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f003 0203 	and.w	r2, r3, #3
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	4313      	orrs	r3, r2
 8001538:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001548:	2b00      	cmp	r3, #0
 800154a:	f000 80be 	beq.w	80016ca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800154e:	4b66      	ldr	r3, [pc, #408]	; (80016e8 <HAL_GPIO_Init+0x324>)
 8001550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001552:	4a65      	ldr	r2, [pc, #404]	; (80016e8 <HAL_GPIO_Init+0x324>)
 8001554:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001558:	6453      	str	r3, [r2, #68]	; 0x44
 800155a:	4b63      	ldr	r3, [pc, #396]	; (80016e8 <HAL_GPIO_Init+0x324>)
 800155c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001566:	4a61      	ldr	r2, [pc, #388]	; (80016ec <HAL_GPIO_Init+0x328>)
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	089b      	lsrs	r3, r3, #2
 800156c:	3302      	adds	r3, #2
 800156e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001572:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	f003 0303 	and.w	r3, r3, #3
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	220f      	movs	r2, #15
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	43db      	mvns	r3, r3
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	4013      	ands	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a58      	ldr	r2, [pc, #352]	; (80016f0 <HAL_GPIO_Init+0x32c>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d037      	beq.n	8001602 <HAL_GPIO_Init+0x23e>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a57      	ldr	r2, [pc, #348]	; (80016f4 <HAL_GPIO_Init+0x330>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d031      	beq.n	80015fe <HAL_GPIO_Init+0x23a>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a56      	ldr	r2, [pc, #344]	; (80016f8 <HAL_GPIO_Init+0x334>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d02b      	beq.n	80015fa <HAL_GPIO_Init+0x236>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a55      	ldr	r2, [pc, #340]	; (80016fc <HAL_GPIO_Init+0x338>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d025      	beq.n	80015f6 <HAL_GPIO_Init+0x232>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a54      	ldr	r2, [pc, #336]	; (8001700 <HAL_GPIO_Init+0x33c>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d01f      	beq.n	80015f2 <HAL_GPIO_Init+0x22e>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a53      	ldr	r2, [pc, #332]	; (8001704 <HAL_GPIO_Init+0x340>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d019      	beq.n	80015ee <HAL_GPIO_Init+0x22a>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a52      	ldr	r2, [pc, #328]	; (8001708 <HAL_GPIO_Init+0x344>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d013      	beq.n	80015ea <HAL_GPIO_Init+0x226>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a51      	ldr	r2, [pc, #324]	; (800170c <HAL_GPIO_Init+0x348>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d00d      	beq.n	80015e6 <HAL_GPIO_Init+0x222>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a50      	ldr	r2, [pc, #320]	; (8001710 <HAL_GPIO_Init+0x34c>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d007      	beq.n	80015e2 <HAL_GPIO_Init+0x21e>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a4f      	ldr	r2, [pc, #316]	; (8001714 <HAL_GPIO_Init+0x350>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d101      	bne.n	80015de <HAL_GPIO_Init+0x21a>
 80015da:	2309      	movs	r3, #9
 80015dc:	e012      	b.n	8001604 <HAL_GPIO_Init+0x240>
 80015de:	230a      	movs	r3, #10
 80015e0:	e010      	b.n	8001604 <HAL_GPIO_Init+0x240>
 80015e2:	2308      	movs	r3, #8
 80015e4:	e00e      	b.n	8001604 <HAL_GPIO_Init+0x240>
 80015e6:	2307      	movs	r3, #7
 80015e8:	e00c      	b.n	8001604 <HAL_GPIO_Init+0x240>
 80015ea:	2306      	movs	r3, #6
 80015ec:	e00a      	b.n	8001604 <HAL_GPIO_Init+0x240>
 80015ee:	2305      	movs	r3, #5
 80015f0:	e008      	b.n	8001604 <HAL_GPIO_Init+0x240>
 80015f2:	2304      	movs	r3, #4
 80015f4:	e006      	b.n	8001604 <HAL_GPIO_Init+0x240>
 80015f6:	2303      	movs	r3, #3
 80015f8:	e004      	b.n	8001604 <HAL_GPIO_Init+0x240>
 80015fa:	2302      	movs	r3, #2
 80015fc:	e002      	b.n	8001604 <HAL_GPIO_Init+0x240>
 80015fe:	2301      	movs	r3, #1
 8001600:	e000      	b.n	8001604 <HAL_GPIO_Init+0x240>
 8001602:	2300      	movs	r3, #0
 8001604:	69fa      	ldr	r2, [r7, #28]
 8001606:	f002 0203 	and.w	r2, r2, #3
 800160a:	0092      	lsls	r2, r2, #2
 800160c:	4093      	lsls	r3, r2
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	4313      	orrs	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001614:	4935      	ldr	r1, [pc, #212]	; (80016ec <HAL_GPIO_Init+0x328>)
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	089b      	lsrs	r3, r3, #2
 800161a:	3302      	adds	r3, #2
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001622:	4b3d      	ldr	r3, [pc, #244]	; (8001718 <HAL_GPIO_Init+0x354>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	43db      	mvns	r3, r3
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	4013      	ands	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d003      	beq.n	8001646 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	4313      	orrs	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001646:	4a34      	ldr	r2, [pc, #208]	; (8001718 <HAL_GPIO_Init+0x354>)
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800164c:	4b32      	ldr	r3, [pc, #200]	; (8001718 <HAL_GPIO_Init+0x354>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	43db      	mvns	r3, r3
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	4013      	ands	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d003      	beq.n	8001670 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	4313      	orrs	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001670:	4a29      	ldr	r2, [pc, #164]	; (8001718 <HAL_GPIO_Init+0x354>)
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001676:	4b28      	ldr	r3, [pc, #160]	; (8001718 <HAL_GPIO_Init+0x354>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	43db      	mvns	r3, r3
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	4013      	ands	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	4313      	orrs	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800169a:	4a1f      	ldr	r2, [pc, #124]	; (8001718 <HAL_GPIO_Init+0x354>)
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016a0:	4b1d      	ldr	r3, [pc, #116]	; (8001718 <HAL_GPIO_Init+0x354>)
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	43db      	mvns	r3, r3
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	4013      	ands	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d003      	beq.n	80016c4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016c4:	4a14      	ldr	r2, [pc, #80]	; (8001718 <HAL_GPIO_Init+0x354>)
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	3301      	adds	r3, #1
 80016ce:	61fb      	str	r3, [r7, #28]
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	2b0f      	cmp	r3, #15
 80016d4:	f67f ae86 	bls.w	80013e4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80016d8:	bf00      	nop
 80016da:	bf00      	nop
 80016dc:	3724      	adds	r7, #36	; 0x24
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	40023800 	.word	0x40023800
 80016ec:	40013800 	.word	0x40013800
 80016f0:	40020000 	.word	0x40020000
 80016f4:	40020400 	.word	0x40020400
 80016f8:	40020800 	.word	0x40020800
 80016fc:	40020c00 	.word	0x40020c00
 8001700:	40021000 	.word	0x40021000
 8001704:	40021400 	.word	0x40021400
 8001708:	40021800 	.word	0x40021800
 800170c:	40021c00 	.word	0x40021c00
 8001710:	40022000 	.word	0x40022000
 8001714:	40022400 	.word	0x40022400
 8001718:	40013c00 	.word	0x40013c00

0800171c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	460b      	mov	r3, r1
 8001726:	807b      	strh	r3, [r7, #2]
 8001728:	4613      	mov	r3, r2
 800172a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800172c:	787b      	ldrb	r3, [r7, #1]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d003      	beq.n	800173a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001732:	887a      	ldrh	r2, [r7, #2]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001738:	e003      	b.n	8001742 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800173a:	887b      	ldrh	r3, [r7, #2]
 800173c:	041a      	lsls	r2, r3, #16
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	619a      	str	r2, [r3, #24]
}
 8001742:	bf00      	nop
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800174e:	b480      	push	{r7}
 8001750:	b085      	sub	sp, #20
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
 8001756:	460b      	mov	r3, r1
 8001758:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	695b      	ldr	r3, [r3, #20]
 800175e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001760:	887a      	ldrh	r2, [r7, #2]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	4013      	ands	r3, r2
 8001766:	041a      	lsls	r2, r3, #16
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	43d9      	mvns	r1, r3
 800176c:	887b      	ldrh	r3, [r7, #2]
 800176e:	400b      	ands	r3, r1
 8001770:	431a      	orrs	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	619a      	str	r2, [r3, #24]
}
 8001776:	bf00      	nop
 8001778:	3714      	adds	r7, #20
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
	...

08001784 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001788:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a04      	ldr	r2, [pc, #16]	; (80017a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800178e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001792:	6013      	str	r3, [r2, #0]
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	40007000 	.word	0x40007000

080017a4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80017aa:	2300      	movs	r3, #0
 80017ac:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80017ae:	4b23      	ldr	r3, [pc, #140]	; (800183c <HAL_PWREx_EnableOverDrive+0x98>)
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	4a22      	ldr	r2, [pc, #136]	; (800183c <HAL_PWREx_EnableOverDrive+0x98>)
 80017b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b8:	6413      	str	r3, [r2, #64]	; 0x40
 80017ba:	4b20      	ldr	r3, [pc, #128]	; (800183c <HAL_PWREx_EnableOverDrive+0x98>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c2:	603b      	str	r3, [r7, #0]
 80017c4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80017c6:	4b1e      	ldr	r3, [pc, #120]	; (8001840 <HAL_PWREx_EnableOverDrive+0x9c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a1d      	ldr	r2, [pc, #116]	; (8001840 <HAL_PWREx_EnableOverDrive+0x9c>)
 80017cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017d0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017d2:	f7ff fc53 	bl	800107c <HAL_GetTick>
 80017d6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80017d8:	e009      	b.n	80017ee <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80017da:	f7ff fc4f 	bl	800107c <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017e8:	d901      	bls.n	80017ee <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e022      	b.n	8001834 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80017ee:	4b14      	ldr	r3, [pc, #80]	; (8001840 <HAL_PWREx_EnableOverDrive+0x9c>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017fa:	d1ee      	bne.n	80017da <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80017fc:	4b10      	ldr	r3, [pc, #64]	; (8001840 <HAL_PWREx_EnableOverDrive+0x9c>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a0f      	ldr	r2, [pc, #60]	; (8001840 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001802:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001806:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001808:	f7ff fc38 	bl	800107c <HAL_GetTick>
 800180c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800180e:	e009      	b.n	8001824 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001810:	f7ff fc34 	bl	800107c <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800181e:	d901      	bls.n	8001824 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e007      	b.n	8001834 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001824:	4b06      	ldr	r3, [pc, #24]	; (8001840 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001830:	d1ee      	bne.n	8001810 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001832:	2300      	movs	r3, #0
}
 8001834:	4618      	mov	r0, r3
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	40023800 	.word	0x40023800
 8001840:	40007000 	.word	0x40007000

08001844 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800184c:	2300      	movs	r3, #0
 800184e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d101      	bne.n	800185a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e29b      	b.n	8001d92 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	2b00      	cmp	r3, #0
 8001864:	f000 8087 	beq.w	8001976 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001868:	4b96      	ldr	r3, [pc, #600]	; (8001ac4 <HAL_RCC_OscConfig+0x280>)
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f003 030c 	and.w	r3, r3, #12
 8001870:	2b04      	cmp	r3, #4
 8001872:	d00c      	beq.n	800188e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001874:	4b93      	ldr	r3, [pc, #588]	; (8001ac4 <HAL_RCC_OscConfig+0x280>)
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f003 030c 	and.w	r3, r3, #12
 800187c:	2b08      	cmp	r3, #8
 800187e:	d112      	bne.n	80018a6 <HAL_RCC_OscConfig+0x62>
 8001880:	4b90      	ldr	r3, [pc, #576]	; (8001ac4 <HAL_RCC_OscConfig+0x280>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001888:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800188c:	d10b      	bne.n	80018a6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800188e:	4b8d      	ldr	r3, [pc, #564]	; (8001ac4 <HAL_RCC_OscConfig+0x280>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d06c      	beq.n	8001974 <HAL_RCC_OscConfig+0x130>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d168      	bne.n	8001974 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e275      	b.n	8001d92 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018ae:	d106      	bne.n	80018be <HAL_RCC_OscConfig+0x7a>
 80018b0:	4b84      	ldr	r3, [pc, #528]	; (8001ac4 <HAL_RCC_OscConfig+0x280>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a83      	ldr	r2, [pc, #524]	; (8001ac4 <HAL_RCC_OscConfig+0x280>)
 80018b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ba:	6013      	str	r3, [r2, #0]
 80018bc:	e02e      	b.n	800191c <HAL_RCC_OscConfig+0xd8>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d10c      	bne.n	80018e0 <HAL_RCC_OscConfig+0x9c>
 80018c6:	4b7f      	ldr	r3, [pc, #508]	; (8001ac4 <HAL_RCC_OscConfig+0x280>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a7e      	ldr	r2, [pc, #504]	; (8001ac4 <HAL_RCC_OscConfig+0x280>)
 80018cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018d0:	6013      	str	r3, [r2, #0]
 80018d2:	4b7c      	ldr	r3, [pc, #496]	; (8001ac4 <HAL_RCC_OscConfig+0x280>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a7b      	ldr	r2, [pc, #492]	; (8001ac4 <HAL_RCC_OscConfig+0x280>)
 80018d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018dc:	6013      	str	r3, [r2, #0]
 80018de:	e01d      	b.n	800191c <HAL_RCC_OscConfig+0xd8>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018e8:	d10c      	bne.n	8001904 <HAL_RCC_OscConfig+0xc0>
 80018ea:	4b76      	ldr	r3, [pc, #472]	; (8001ac4 <HAL_RCC_OscConfig+0x280>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a75      	ldr	r2, [pc, #468]	; (8001ac4 <HAL_RCC_OscConfig+0x280>)
 80018f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018f4:	6013      	str	r3, [r2, #0]
 80018f6:	4b73      	ldr	r3, [pc, #460]	; (8001ac4 <HAL_RCC_OscConfig+0x280>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a72      	ldr	r2, [pc, #456]	; (8001ac4 <HAL_RCC_OscConfig+0x280>)
 80018fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001900:	6013      	str	r3, [r2, #0]
 8001902:	e00b      	b.n	800191c <HAL_RCC_OscConfig+0xd8>
 8001904:	4b6f      	ldr	r3, [pc, #444]	; (8001ac4 <HAL_RCC_OscConfig+0x280>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a6e      	ldr	r2, [pc, #440]	; (8001ac4 <HAL_RCC_OscConfig+0x280>)
 800190a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800190e:	6013      	str	r3, [r2, #0]
 8001910:	4b6c      	ldr	r3, [pc, #432]	; (8001ac4 <HAL_RCC_OscConfig+0x280>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a6b      	ldr	r2, [pc, #428]	; (8001ac4 <HAL_RCC_OscConfig+0x280>)
 8001916:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800191a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d013      	beq.n	800194c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001924:	f7ff fbaa 	bl	800107c <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800192c:	f7ff fba6 	bl	800107c <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b64      	cmp	r3, #100	; 0x64
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e229      	b.n	8001d92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800193e:	4b61      	ldr	r3, [pc, #388]	; (8001ac4 <HAL_RCC_OscConfig+0x280>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d0f0      	beq.n	800192c <HAL_RCC_OscConfig+0xe8>
 800194a:	e014      	b.n	8001976 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800194c:	f7ff fb96 	bl	800107c <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001952:	e008      	b.n	8001966 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001954:	f7ff fb92 	bl	800107c <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b64      	cmp	r3, #100	; 0x64
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e215      	b.n	8001d92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001966:	4b57      	ldr	r3, [pc, #348]	; (8001ac4 <HAL_RCC_OscConfig+0x280>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d1f0      	bne.n	8001954 <HAL_RCC_OscConfig+0x110>
 8001972:	e000      	b.n	8001976 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001974:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d069      	beq.n	8001a56 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001982:	4b50      	ldr	r3, [pc, #320]	; (8001ac4 <HAL_RCC_OscConfig+0x280>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f003 030c 	and.w	r3, r3, #12
 800198a:	2b00      	cmp	r3, #0
 800198c:	d00b      	beq.n	80019a6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800198e:	4b4d      	ldr	r3, [pc, #308]	; (8001ac4 <HAL_RCC_OscConfig+0x280>)
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	f003 030c 	and.w	r3, r3, #12
 8001996:	2b08      	cmp	r3, #8
 8001998:	d11c      	bne.n	80019d4 <HAL_RCC_OscConfig+0x190>
 800199a:	4b4a      	ldr	r3, [pc, #296]	; (8001ac4 <HAL_RCC_OscConfig+0x280>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d116      	bne.n	80019d4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019a6:	4b47      	ldr	r3, [pc, #284]	; (8001ac4 <HAL_RCC_OscConfig+0x280>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d005      	beq.n	80019be <HAL_RCC_OscConfig+0x17a>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d001      	beq.n	80019be <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e1e9      	b.n	8001d92 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019be:	4b41      	ldr	r3, [pc, #260]	; (8001ac4 <HAL_RCC_OscConfig+0x280>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	691b      	ldr	r3, [r3, #16]
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	493d      	ldr	r1, [pc, #244]	; (8001ac4 <HAL_RCC_OscConfig+0x280>)
 80019ce:	4313      	orrs	r3, r2
 80019d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019d2:	e040      	b.n	8001a56 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d023      	beq.n	8001a24 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019dc:	4b39      	ldr	r3, [pc, #228]	; (8001ac4 <HAL_RCC_OscConfig+0x280>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a38      	ldr	r2, [pc, #224]	; (8001ac4 <HAL_RCC_OscConfig+0x280>)
 80019e2:	f043 0301 	orr.w	r3, r3, #1
 80019e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e8:	f7ff fb48 	bl	800107c <HAL_GetTick>
 80019ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ee:	e008      	b.n	8001a02 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019f0:	f7ff fb44 	bl	800107c <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e1c7      	b.n	8001d92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a02:	4b30      	ldr	r3, [pc, #192]	; (8001ac4 <HAL_RCC_OscConfig+0x280>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d0f0      	beq.n	80019f0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a0e:	4b2d      	ldr	r3, [pc, #180]	; (8001ac4 <HAL_RCC_OscConfig+0x280>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	4929      	ldr	r1, [pc, #164]	; (8001ac4 <HAL_RCC_OscConfig+0x280>)
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	600b      	str	r3, [r1, #0]
 8001a22:	e018      	b.n	8001a56 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a24:	4b27      	ldr	r3, [pc, #156]	; (8001ac4 <HAL_RCC_OscConfig+0x280>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a26      	ldr	r2, [pc, #152]	; (8001ac4 <HAL_RCC_OscConfig+0x280>)
 8001a2a:	f023 0301 	bic.w	r3, r3, #1
 8001a2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a30:	f7ff fb24 	bl	800107c <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a38:	f7ff fb20 	bl	800107c <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e1a3      	b.n	8001d92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a4a:	4b1e      	ldr	r3, [pc, #120]	; (8001ac4 <HAL_RCC_OscConfig+0x280>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d1f0      	bne.n	8001a38 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0308 	and.w	r3, r3, #8
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d038      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	695b      	ldr	r3, [r3, #20]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d019      	beq.n	8001a9e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a6a:	4b16      	ldr	r3, [pc, #88]	; (8001ac4 <HAL_RCC_OscConfig+0x280>)
 8001a6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a6e:	4a15      	ldr	r2, [pc, #84]	; (8001ac4 <HAL_RCC_OscConfig+0x280>)
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a76:	f7ff fb01 	bl	800107c <HAL_GetTick>
 8001a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a7c:	e008      	b.n	8001a90 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a7e:	f7ff fafd 	bl	800107c <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e180      	b.n	8001d92 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a90:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <HAL_RCC_OscConfig+0x280>)
 8001a92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d0f0      	beq.n	8001a7e <HAL_RCC_OscConfig+0x23a>
 8001a9c:	e01a      	b.n	8001ad4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a9e:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <HAL_RCC_OscConfig+0x280>)
 8001aa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001aa2:	4a08      	ldr	r2, [pc, #32]	; (8001ac4 <HAL_RCC_OscConfig+0x280>)
 8001aa4:	f023 0301 	bic.w	r3, r3, #1
 8001aa8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aaa:	f7ff fae7 	bl	800107c <HAL_GetTick>
 8001aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ab0:	e00a      	b.n	8001ac8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ab2:	f7ff fae3 	bl	800107c <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d903      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e166      	b.n	8001d92 <HAL_RCC_OscConfig+0x54e>
 8001ac4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ac8:	4b92      	ldr	r3, [pc, #584]	; (8001d14 <HAL_RCC_OscConfig+0x4d0>)
 8001aca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d1ee      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0304 	and.w	r3, r3, #4
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	f000 80a4 	beq.w	8001c2a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ae2:	4b8c      	ldr	r3, [pc, #560]	; (8001d14 <HAL_RCC_OscConfig+0x4d0>)
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d10d      	bne.n	8001b0a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aee:	4b89      	ldr	r3, [pc, #548]	; (8001d14 <HAL_RCC_OscConfig+0x4d0>)
 8001af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af2:	4a88      	ldr	r2, [pc, #544]	; (8001d14 <HAL_RCC_OscConfig+0x4d0>)
 8001af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001af8:	6413      	str	r3, [r2, #64]	; 0x40
 8001afa:	4b86      	ldr	r3, [pc, #536]	; (8001d14 <HAL_RCC_OscConfig+0x4d0>)
 8001afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b02:	60bb      	str	r3, [r7, #8]
 8001b04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b06:	2301      	movs	r3, #1
 8001b08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b0a:	4b83      	ldr	r3, [pc, #524]	; (8001d18 <HAL_RCC_OscConfig+0x4d4>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d118      	bne.n	8001b48 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001b16:	4b80      	ldr	r3, [pc, #512]	; (8001d18 <HAL_RCC_OscConfig+0x4d4>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a7f      	ldr	r2, [pc, #508]	; (8001d18 <HAL_RCC_OscConfig+0x4d4>)
 8001b1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b22:	f7ff faab 	bl	800107c <HAL_GetTick>
 8001b26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b28:	e008      	b.n	8001b3c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b2a:	f7ff faa7 	bl	800107c <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b64      	cmp	r3, #100	; 0x64
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e12a      	b.n	8001d92 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b3c:	4b76      	ldr	r3, [pc, #472]	; (8001d18 <HAL_RCC_OscConfig+0x4d4>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d0f0      	beq.n	8001b2a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d106      	bne.n	8001b5e <HAL_RCC_OscConfig+0x31a>
 8001b50:	4b70      	ldr	r3, [pc, #448]	; (8001d14 <HAL_RCC_OscConfig+0x4d0>)
 8001b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b54:	4a6f      	ldr	r2, [pc, #444]	; (8001d14 <HAL_RCC_OscConfig+0x4d0>)
 8001b56:	f043 0301 	orr.w	r3, r3, #1
 8001b5a:	6713      	str	r3, [r2, #112]	; 0x70
 8001b5c:	e02d      	b.n	8001bba <HAL_RCC_OscConfig+0x376>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d10c      	bne.n	8001b80 <HAL_RCC_OscConfig+0x33c>
 8001b66:	4b6b      	ldr	r3, [pc, #428]	; (8001d14 <HAL_RCC_OscConfig+0x4d0>)
 8001b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b6a:	4a6a      	ldr	r2, [pc, #424]	; (8001d14 <HAL_RCC_OscConfig+0x4d0>)
 8001b6c:	f023 0301 	bic.w	r3, r3, #1
 8001b70:	6713      	str	r3, [r2, #112]	; 0x70
 8001b72:	4b68      	ldr	r3, [pc, #416]	; (8001d14 <HAL_RCC_OscConfig+0x4d0>)
 8001b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b76:	4a67      	ldr	r2, [pc, #412]	; (8001d14 <HAL_RCC_OscConfig+0x4d0>)
 8001b78:	f023 0304 	bic.w	r3, r3, #4
 8001b7c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b7e:	e01c      	b.n	8001bba <HAL_RCC_OscConfig+0x376>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	2b05      	cmp	r3, #5
 8001b86:	d10c      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x35e>
 8001b88:	4b62      	ldr	r3, [pc, #392]	; (8001d14 <HAL_RCC_OscConfig+0x4d0>)
 8001b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b8c:	4a61      	ldr	r2, [pc, #388]	; (8001d14 <HAL_RCC_OscConfig+0x4d0>)
 8001b8e:	f043 0304 	orr.w	r3, r3, #4
 8001b92:	6713      	str	r3, [r2, #112]	; 0x70
 8001b94:	4b5f      	ldr	r3, [pc, #380]	; (8001d14 <HAL_RCC_OscConfig+0x4d0>)
 8001b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b98:	4a5e      	ldr	r2, [pc, #376]	; (8001d14 <HAL_RCC_OscConfig+0x4d0>)
 8001b9a:	f043 0301 	orr.w	r3, r3, #1
 8001b9e:	6713      	str	r3, [r2, #112]	; 0x70
 8001ba0:	e00b      	b.n	8001bba <HAL_RCC_OscConfig+0x376>
 8001ba2:	4b5c      	ldr	r3, [pc, #368]	; (8001d14 <HAL_RCC_OscConfig+0x4d0>)
 8001ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba6:	4a5b      	ldr	r2, [pc, #364]	; (8001d14 <HAL_RCC_OscConfig+0x4d0>)
 8001ba8:	f023 0301 	bic.w	r3, r3, #1
 8001bac:	6713      	str	r3, [r2, #112]	; 0x70
 8001bae:	4b59      	ldr	r3, [pc, #356]	; (8001d14 <HAL_RCC_OscConfig+0x4d0>)
 8001bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb2:	4a58      	ldr	r2, [pc, #352]	; (8001d14 <HAL_RCC_OscConfig+0x4d0>)
 8001bb4:	f023 0304 	bic.w	r3, r3, #4
 8001bb8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d015      	beq.n	8001bee <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc2:	f7ff fa5b 	bl	800107c <HAL_GetTick>
 8001bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bc8:	e00a      	b.n	8001be0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bca:	f7ff fa57 	bl	800107c <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e0d8      	b.n	8001d92 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001be0:	4b4c      	ldr	r3, [pc, #304]	; (8001d14 <HAL_RCC_OscConfig+0x4d0>)
 8001be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d0ee      	beq.n	8001bca <HAL_RCC_OscConfig+0x386>
 8001bec:	e014      	b.n	8001c18 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bee:	f7ff fa45 	bl	800107c <HAL_GetTick>
 8001bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bf4:	e00a      	b.n	8001c0c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bf6:	f7ff fa41 	bl	800107c <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d901      	bls.n	8001c0c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e0c2      	b.n	8001d92 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c0c:	4b41      	ldr	r3, [pc, #260]	; (8001d14 <HAL_RCC_OscConfig+0x4d0>)
 8001c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c10:	f003 0302 	and.w	r3, r3, #2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d1ee      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c18:	7dfb      	ldrb	r3, [r7, #23]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d105      	bne.n	8001c2a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c1e:	4b3d      	ldr	r3, [pc, #244]	; (8001d14 <HAL_RCC_OscConfig+0x4d0>)
 8001c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c22:	4a3c      	ldr	r2, [pc, #240]	; (8001d14 <HAL_RCC_OscConfig+0x4d0>)
 8001c24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c28:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	699b      	ldr	r3, [r3, #24]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f000 80ae 	beq.w	8001d90 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c34:	4b37      	ldr	r3, [pc, #220]	; (8001d14 <HAL_RCC_OscConfig+0x4d0>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f003 030c 	and.w	r3, r3, #12
 8001c3c:	2b08      	cmp	r3, #8
 8001c3e:	d06d      	beq.n	8001d1c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d14b      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c48:	4b32      	ldr	r3, [pc, #200]	; (8001d14 <HAL_RCC_OscConfig+0x4d0>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a31      	ldr	r2, [pc, #196]	; (8001d14 <HAL_RCC_OscConfig+0x4d0>)
 8001c4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c54:	f7ff fa12 	bl	800107c <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c5c:	f7ff fa0e 	bl	800107c <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e091      	b.n	8001d92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c6e:	4b29      	ldr	r3, [pc, #164]	; (8001d14 <HAL_RCC_OscConfig+0x4d0>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1f0      	bne.n	8001c5c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	69da      	ldr	r2, [r3, #28]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a1b      	ldr	r3, [r3, #32]
 8001c82:	431a      	orrs	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c88:	019b      	lsls	r3, r3, #6
 8001c8a:	431a      	orrs	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c90:	085b      	lsrs	r3, r3, #1
 8001c92:	3b01      	subs	r3, #1
 8001c94:	041b      	lsls	r3, r3, #16
 8001c96:	431a      	orrs	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c9c:	061b      	lsls	r3, r3, #24
 8001c9e:	431a      	orrs	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca4:	071b      	lsls	r3, r3, #28
 8001ca6:	491b      	ldr	r1, [pc, #108]	; (8001d14 <HAL_RCC_OscConfig+0x4d0>)
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cac:	4b19      	ldr	r3, [pc, #100]	; (8001d14 <HAL_RCC_OscConfig+0x4d0>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a18      	ldr	r2, [pc, #96]	; (8001d14 <HAL_RCC_OscConfig+0x4d0>)
 8001cb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb8:	f7ff f9e0 	bl	800107c <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cc0:	f7ff f9dc 	bl	800107c <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e05f      	b.n	8001d92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cd2:	4b10      	ldr	r3, [pc, #64]	; (8001d14 <HAL_RCC_OscConfig+0x4d0>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d0f0      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x47c>
 8001cde:	e057      	b.n	8001d90 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ce0:	4b0c      	ldr	r3, [pc, #48]	; (8001d14 <HAL_RCC_OscConfig+0x4d0>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a0b      	ldr	r2, [pc, #44]	; (8001d14 <HAL_RCC_OscConfig+0x4d0>)
 8001ce6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cec:	f7ff f9c6 	bl	800107c <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cf4:	f7ff f9c2 	bl	800107c <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e045      	b.n	8001d92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d06:	4b03      	ldr	r3, [pc, #12]	; (8001d14 <HAL_RCC_OscConfig+0x4d0>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1f0      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x4b0>
 8001d12:	e03d      	b.n	8001d90 <HAL_RCC_OscConfig+0x54c>
 8001d14:	40023800 	.word	0x40023800
 8001d18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001d1c:	4b1f      	ldr	r3, [pc, #124]	; (8001d9c <HAL_RCC_OscConfig+0x558>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d030      	beq.n	8001d8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d129      	bne.n	8001d8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d122      	bne.n	8001d8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d52:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d119      	bne.n	8001d8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d62:	085b      	lsrs	r3, r3, #1
 8001d64:	3b01      	subs	r3, #1
 8001d66:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d10f      	bne.n	8001d8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d76:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d107      	bne.n	8001d8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d001      	beq.n	8001d90 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e000      	b.n	8001d92 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3718      	adds	r7, #24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40023800 	.word	0x40023800

08001da0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001daa:	2300      	movs	r3, #0
 8001dac:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d101      	bne.n	8001db8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e0d0      	b.n	8001f5a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001db8:	4b6a      	ldr	r3, [pc, #424]	; (8001f64 <HAL_RCC_ClockConfig+0x1c4>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 030f 	and.w	r3, r3, #15
 8001dc0:	683a      	ldr	r2, [r7, #0]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d910      	bls.n	8001de8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dc6:	4b67      	ldr	r3, [pc, #412]	; (8001f64 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f023 020f 	bic.w	r2, r3, #15
 8001dce:	4965      	ldr	r1, [pc, #404]	; (8001f64 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dd6:	4b63      	ldr	r3, [pc, #396]	; (8001f64 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 030f 	and.w	r3, r3, #15
 8001dde:	683a      	ldr	r2, [r7, #0]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d001      	beq.n	8001de8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e0b8      	b.n	8001f5a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0302 	and.w	r3, r3, #2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d020      	beq.n	8001e36 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0304 	and.w	r3, r3, #4
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d005      	beq.n	8001e0c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e00:	4b59      	ldr	r3, [pc, #356]	; (8001f68 <HAL_RCC_ClockConfig+0x1c8>)
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	4a58      	ldr	r2, [pc, #352]	; (8001f68 <HAL_RCC_ClockConfig+0x1c8>)
 8001e06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e0a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0308 	and.w	r3, r3, #8
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d005      	beq.n	8001e24 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e18:	4b53      	ldr	r3, [pc, #332]	; (8001f68 <HAL_RCC_ClockConfig+0x1c8>)
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	4a52      	ldr	r2, [pc, #328]	; (8001f68 <HAL_RCC_ClockConfig+0x1c8>)
 8001e1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e22:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e24:	4b50      	ldr	r3, [pc, #320]	; (8001f68 <HAL_RCC_ClockConfig+0x1c8>)
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	494d      	ldr	r1, [pc, #308]	; (8001f68 <HAL_RCC_ClockConfig+0x1c8>)
 8001e32:	4313      	orrs	r3, r2
 8001e34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d040      	beq.n	8001ec4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d107      	bne.n	8001e5a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e4a:	4b47      	ldr	r3, [pc, #284]	; (8001f68 <HAL_RCC_ClockConfig+0x1c8>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d115      	bne.n	8001e82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e07f      	b.n	8001f5a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d107      	bne.n	8001e72 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e62:	4b41      	ldr	r3, [pc, #260]	; (8001f68 <HAL_RCC_ClockConfig+0x1c8>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d109      	bne.n	8001e82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e073      	b.n	8001f5a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e72:	4b3d      	ldr	r3, [pc, #244]	; (8001f68 <HAL_RCC_ClockConfig+0x1c8>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e06b      	b.n	8001f5a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e82:	4b39      	ldr	r3, [pc, #228]	; (8001f68 <HAL_RCC_ClockConfig+0x1c8>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f023 0203 	bic.w	r2, r3, #3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	4936      	ldr	r1, [pc, #216]	; (8001f68 <HAL_RCC_ClockConfig+0x1c8>)
 8001e90:	4313      	orrs	r3, r2
 8001e92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e94:	f7ff f8f2 	bl	800107c <HAL_GetTick>
 8001e98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e9a:	e00a      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e9c:	f7ff f8ee 	bl	800107c <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e053      	b.n	8001f5a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eb2:	4b2d      	ldr	r3, [pc, #180]	; (8001f68 <HAL_RCC_ClockConfig+0x1c8>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f003 020c 	and.w	r2, r3, #12
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d1eb      	bne.n	8001e9c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ec4:	4b27      	ldr	r3, [pc, #156]	; (8001f64 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 030f 	and.w	r3, r3, #15
 8001ecc:	683a      	ldr	r2, [r7, #0]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d210      	bcs.n	8001ef4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ed2:	4b24      	ldr	r3, [pc, #144]	; (8001f64 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f023 020f 	bic.w	r2, r3, #15
 8001eda:	4922      	ldr	r1, [pc, #136]	; (8001f64 <HAL_RCC_ClockConfig+0x1c4>)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ee2:	4b20      	ldr	r3, [pc, #128]	; (8001f64 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 030f 	and.w	r3, r3, #15
 8001eea:	683a      	ldr	r2, [r7, #0]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d001      	beq.n	8001ef4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e032      	b.n	8001f5a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0304 	and.w	r3, r3, #4
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d008      	beq.n	8001f12 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f00:	4b19      	ldr	r3, [pc, #100]	; (8001f68 <HAL_RCC_ClockConfig+0x1c8>)
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	4916      	ldr	r1, [pc, #88]	; (8001f68 <HAL_RCC_ClockConfig+0x1c8>)
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0308 	and.w	r3, r3, #8
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d009      	beq.n	8001f32 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f1e:	4b12      	ldr	r3, [pc, #72]	; (8001f68 <HAL_RCC_ClockConfig+0x1c8>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	490e      	ldr	r1, [pc, #56]	; (8001f68 <HAL_RCC_ClockConfig+0x1c8>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f32:	f000 f821 	bl	8001f78 <HAL_RCC_GetSysClockFreq>
 8001f36:	4602      	mov	r2, r0
 8001f38:	4b0b      	ldr	r3, [pc, #44]	; (8001f68 <HAL_RCC_ClockConfig+0x1c8>)
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	091b      	lsrs	r3, r3, #4
 8001f3e:	f003 030f 	and.w	r3, r3, #15
 8001f42:	490a      	ldr	r1, [pc, #40]	; (8001f6c <HAL_RCC_ClockConfig+0x1cc>)
 8001f44:	5ccb      	ldrb	r3, [r1, r3]
 8001f46:	fa22 f303 	lsr.w	r3, r2, r3
 8001f4a:	4a09      	ldr	r2, [pc, #36]	; (8001f70 <HAL_RCC_ClockConfig+0x1d0>)
 8001f4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f4e:	4b09      	ldr	r3, [pc, #36]	; (8001f74 <HAL_RCC_ClockConfig+0x1d4>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7fe fef8 	bl	8000d48 <HAL_InitTick>

  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40023c00 	.word	0x40023c00
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	0800be50 	.word	0x0800be50
 8001f70:	20000000 	.word	0x20000000
 8001f74:	20000004 	.word	0x20000004

08001f78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f78:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f7c:	b084      	sub	sp, #16
 8001f7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001f80:	2300      	movs	r3, #0
 8001f82:	607b      	str	r3, [r7, #4]
 8001f84:	2300      	movs	r3, #0
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	2300      	movs	r3, #0
 8001f8a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f90:	4b67      	ldr	r3, [pc, #412]	; (8002130 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f003 030c 	and.w	r3, r3, #12
 8001f98:	2b08      	cmp	r3, #8
 8001f9a:	d00d      	beq.n	8001fb8 <HAL_RCC_GetSysClockFreq+0x40>
 8001f9c:	2b08      	cmp	r3, #8
 8001f9e:	f200 80bd 	bhi.w	800211c <HAL_RCC_GetSysClockFreq+0x1a4>
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d002      	beq.n	8001fac <HAL_RCC_GetSysClockFreq+0x34>
 8001fa6:	2b04      	cmp	r3, #4
 8001fa8:	d003      	beq.n	8001fb2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001faa:	e0b7      	b.n	800211c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fac:	4b61      	ldr	r3, [pc, #388]	; (8002134 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001fae:	60bb      	str	r3, [r7, #8]
      break;
 8001fb0:	e0b7      	b.n	8002122 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fb2:	4b61      	ldr	r3, [pc, #388]	; (8002138 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001fb4:	60bb      	str	r3, [r7, #8]
      break;
 8001fb6:	e0b4      	b.n	8002122 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fb8:	4b5d      	ldr	r3, [pc, #372]	; (8002130 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fc0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001fc2:	4b5b      	ldr	r3, [pc, #364]	; (8002130 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d04d      	beq.n	800206a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fce:	4b58      	ldr	r3, [pc, #352]	; (8002130 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	099b      	lsrs	r3, r3, #6
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	f04f 0300 	mov.w	r3, #0
 8001fda:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001fde:	f04f 0100 	mov.w	r1, #0
 8001fe2:	ea02 0800 	and.w	r8, r2, r0
 8001fe6:	ea03 0901 	and.w	r9, r3, r1
 8001fea:	4640      	mov	r0, r8
 8001fec:	4649      	mov	r1, r9
 8001fee:	f04f 0200 	mov.w	r2, #0
 8001ff2:	f04f 0300 	mov.w	r3, #0
 8001ff6:	014b      	lsls	r3, r1, #5
 8001ff8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001ffc:	0142      	lsls	r2, r0, #5
 8001ffe:	4610      	mov	r0, r2
 8002000:	4619      	mov	r1, r3
 8002002:	ebb0 0008 	subs.w	r0, r0, r8
 8002006:	eb61 0109 	sbc.w	r1, r1, r9
 800200a:	f04f 0200 	mov.w	r2, #0
 800200e:	f04f 0300 	mov.w	r3, #0
 8002012:	018b      	lsls	r3, r1, #6
 8002014:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002018:	0182      	lsls	r2, r0, #6
 800201a:	1a12      	subs	r2, r2, r0
 800201c:	eb63 0301 	sbc.w	r3, r3, r1
 8002020:	f04f 0000 	mov.w	r0, #0
 8002024:	f04f 0100 	mov.w	r1, #0
 8002028:	00d9      	lsls	r1, r3, #3
 800202a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800202e:	00d0      	lsls	r0, r2, #3
 8002030:	4602      	mov	r2, r0
 8002032:	460b      	mov	r3, r1
 8002034:	eb12 0208 	adds.w	r2, r2, r8
 8002038:	eb43 0309 	adc.w	r3, r3, r9
 800203c:	f04f 0000 	mov.w	r0, #0
 8002040:	f04f 0100 	mov.w	r1, #0
 8002044:	0259      	lsls	r1, r3, #9
 8002046:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800204a:	0250      	lsls	r0, r2, #9
 800204c:	4602      	mov	r2, r0
 800204e:	460b      	mov	r3, r1
 8002050:	4610      	mov	r0, r2
 8002052:	4619      	mov	r1, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	461a      	mov	r2, r3
 8002058:	f04f 0300 	mov.w	r3, #0
 800205c:	f7fe f940 	bl	80002e0 <__aeabi_uldivmod>
 8002060:	4602      	mov	r2, r0
 8002062:	460b      	mov	r3, r1
 8002064:	4613      	mov	r3, r2
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	e04a      	b.n	8002100 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800206a:	4b31      	ldr	r3, [pc, #196]	; (8002130 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	099b      	lsrs	r3, r3, #6
 8002070:	461a      	mov	r2, r3
 8002072:	f04f 0300 	mov.w	r3, #0
 8002076:	f240 10ff 	movw	r0, #511	; 0x1ff
 800207a:	f04f 0100 	mov.w	r1, #0
 800207e:	ea02 0400 	and.w	r4, r2, r0
 8002082:	ea03 0501 	and.w	r5, r3, r1
 8002086:	4620      	mov	r0, r4
 8002088:	4629      	mov	r1, r5
 800208a:	f04f 0200 	mov.w	r2, #0
 800208e:	f04f 0300 	mov.w	r3, #0
 8002092:	014b      	lsls	r3, r1, #5
 8002094:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002098:	0142      	lsls	r2, r0, #5
 800209a:	4610      	mov	r0, r2
 800209c:	4619      	mov	r1, r3
 800209e:	1b00      	subs	r0, r0, r4
 80020a0:	eb61 0105 	sbc.w	r1, r1, r5
 80020a4:	f04f 0200 	mov.w	r2, #0
 80020a8:	f04f 0300 	mov.w	r3, #0
 80020ac:	018b      	lsls	r3, r1, #6
 80020ae:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80020b2:	0182      	lsls	r2, r0, #6
 80020b4:	1a12      	subs	r2, r2, r0
 80020b6:	eb63 0301 	sbc.w	r3, r3, r1
 80020ba:	f04f 0000 	mov.w	r0, #0
 80020be:	f04f 0100 	mov.w	r1, #0
 80020c2:	00d9      	lsls	r1, r3, #3
 80020c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80020c8:	00d0      	lsls	r0, r2, #3
 80020ca:	4602      	mov	r2, r0
 80020cc:	460b      	mov	r3, r1
 80020ce:	1912      	adds	r2, r2, r4
 80020d0:	eb45 0303 	adc.w	r3, r5, r3
 80020d4:	f04f 0000 	mov.w	r0, #0
 80020d8:	f04f 0100 	mov.w	r1, #0
 80020dc:	0299      	lsls	r1, r3, #10
 80020de:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80020e2:	0290      	lsls	r0, r2, #10
 80020e4:	4602      	mov	r2, r0
 80020e6:	460b      	mov	r3, r1
 80020e8:	4610      	mov	r0, r2
 80020ea:	4619      	mov	r1, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	461a      	mov	r2, r3
 80020f0:	f04f 0300 	mov.w	r3, #0
 80020f4:	f7fe f8f4 	bl	80002e0 <__aeabi_uldivmod>
 80020f8:	4602      	mov	r2, r0
 80020fa:	460b      	mov	r3, r1
 80020fc:	4613      	mov	r3, r2
 80020fe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002100:	4b0b      	ldr	r3, [pc, #44]	; (8002130 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	0c1b      	lsrs	r3, r3, #16
 8002106:	f003 0303 	and.w	r3, r3, #3
 800210a:	3301      	adds	r3, #1
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002110:	68fa      	ldr	r2, [r7, #12]
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	fbb2 f3f3 	udiv	r3, r2, r3
 8002118:	60bb      	str	r3, [r7, #8]
      break;
 800211a:	e002      	b.n	8002122 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800211c:	4b05      	ldr	r3, [pc, #20]	; (8002134 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800211e:	60bb      	str	r3, [r7, #8]
      break;
 8002120:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002122:	68bb      	ldr	r3, [r7, #8]
}
 8002124:	4618      	mov	r0, r3
 8002126:	3710      	adds	r7, #16
 8002128:	46bd      	mov	sp, r7
 800212a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800212e:	bf00      	nop
 8002130:	40023800 	.word	0x40023800
 8002134:	00f42400 	.word	0x00f42400
 8002138:	007a1200 	.word	0x007a1200

0800213c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002140:	4b03      	ldr	r3, [pc, #12]	; (8002150 <HAL_RCC_GetHCLKFreq+0x14>)
 8002142:	681b      	ldr	r3, [r3, #0]
}
 8002144:	4618      	mov	r0, r3
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	20000000 	.word	0x20000000

08002154 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002158:	f7ff fff0 	bl	800213c <HAL_RCC_GetHCLKFreq>
 800215c:	4602      	mov	r2, r0
 800215e:	4b05      	ldr	r3, [pc, #20]	; (8002174 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	0a9b      	lsrs	r3, r3, #10
 8002164:	f003 0307 	and.w	r3, r3, #7
 8002168:	4903      	ldr	r1, [pc, #12]	; (8002178 <HAL_RCC_GetPCLK1Freq+0x24>)
 800216a:	5ccb      	ldrb	r3, [r1, r3]
 800216c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002170:	4618      	mov	r0, r3
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40023800 	.word	0x40023800
 8002178:	0800be60 	.word	0x0800be60

0800217c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002180:	f7ff ffdc 	bl	800213c <HAL_RCC_GetHCLKFreq>
 8002184:	4602      	mov	r2, r0
 8002186:	4b05      	ldr	r3, [pc, #20]	; (800219c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	0b5b      	lsrs	r3, r3, #13
 800218c:	f003 0307 	and.w	r3, r3, #7
 8002190:	4903      	ldr	r1, [pc, #12]	; (80021a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002192:	5ccb      	ldrb	r3, [r1, r3]
 8002194:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002198:	4618      	mov	r0, r3
 800219a:	bd80      	pop	{r7, pc}
 800219c:	40023800 	.word	0x40023800
 80021a0:	0800be60 	.word	0x0800be60

080021a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	220f      	movs	r2, #15
 80021b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80021b4:	4b12      	ldr	r3, [pc, #72]	; (8002200 <HAL_RCC_GetClockConfig+0x5c>)
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f003 0203 	and.w	r2, r3, #3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80021c0:	4b0f      	ldr	r3, [pc, #60]	; (8002200 <HAL_RCC_GetClockConfig+0x5c>)
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80021cc:	4b0c      	ldr	r3, [pc, #48]	; (8002200 <HAL_RCC_GetClockConfig+0x5c>)
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80021d8:	4b09      	ldr	r3, [pc, #36]	; (8002200 <HAL_RCC_GetClockConfig+0x5c>)
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	08db      	lsrs	r3, r3, #3
 80021de:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80021e6:	4b07      	ldr	r3, [pc, #28]	; (8002204 <HAL_RCC_GetClockConfig+0x60>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 020f 	and.w	r2, r3, #15
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	601a      	str	r2, [r3, #0]
}
 80021f2:	bf00      	nop
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	40023800 	.word	0x40023800
 8002204:	40023c00 	.word	0x40023c00

08002208 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b088      	sub	sp, #32
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002210:	2300      	movs	r3, #0
 8002212:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002214:	2300      	movs	r3, #0
 8002216:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002218:	2300      	movs	r3, #0
 800221a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800221c:	2300      	movs	r3, #0
 800221e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002220:	2300      	movs	r3, #0
 8002222:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0301 	and.w	r3, r3, #1
 800222c:	2b00      	cmp	r3, #0
 800222e:	d012      	beq.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002230:	4b69      	ldr	r3, [pc, #420]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	4a68      	ldr	r2, [pc, #416]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002236:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800223a:	6093      	str	r3, [r2, #8]
 800223c:	4b66      	ldr	r3, [pc, #408]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002244:	4964      	ldr	r1, [pc, #400]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002246:	4313      	orrs	r3, r2
 8002248:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002252:	2301      	movs	r3, #1
 8002254:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d017      	beq.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002262:	4b5d      	ldr	r3, [pc, #372]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002264:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002268:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002270:	4959      	ldr	r1, [pc, #356]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002272:	4313      	orrs	r3, r2
 8002274:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800227c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002280:	d101      	bne.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002282:	2301      	movs	r3, #1
 8002284:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800228e:	2301      	movs	r3, #1
 8002290:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d017      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800229e:	4b4e      	ldr	r3, [pc, #312]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ac:	494a      	ldr	r1, [pc, #296]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022bc:	d101      	bne.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80022be:	2301      	movs	r3, #1
 80022c0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80022ca:	2301      	movs	r3, #1
 80022cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80022da:	2301      	movs	r3, #1
 80022dc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0320 	and.w	r3, r3, #32
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f000 808b 	beq.w	8002402 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80022ec:	4b3a      	ldr	r3, [pc, #232]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f0:	4a39      	ldr	r2, [pc, #228]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022f6:	6413      	str	r3, [r2, #64]	; 0x40
 80022f8:	4b37      	ldr	r3, [pc, #220]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002300:	60bb      	str	r3, [r7, #8]
 8002302:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002304:	4b35      	ldr	r3, [pc, #212]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a34      	ldr	r2, [pc, #208]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800230a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800230e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002310:	f7fe feb4 	bl	800107c <HAL_GetTick>
 8002314:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002316:	e008      	b.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002318:	f7fe feb0 	bl	800107c <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b64      	cmp	r3, #100	; 0x64
 8002324:	d901      	bls.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e38f      	b.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800232a:	4b2c      	ldr	r3, [pc, #176]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002332:	2b00      	cmp	r3, #0
 8002334:	d0f0      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002336:	4b28      	ldr	r3, [pc, #160]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800233a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800233e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d035      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	429a      	cmp	r2, r3
 8002352:	d02e      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002354:	4b20      	ldr	r3, [pc, #128]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002358:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800235c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800235e:	4b1e      	ldr	r3, [pc, #120]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002362:	4a1d      	ldr	r2, [pc, #116]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002364:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002368:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800236a:	4b1b      	ldr	r3, [pc, #108]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800236c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800236e:	4a1a      	ldr	r2, [pc, #104]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002370:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002374:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002376:	4a18      	ldr	r2, [pc, #96]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800237c:	4b16      	ldr	r3, [pc, #88]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800237e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	2b01      	cmp	r3, #1
 8002386:	d114      	bne.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002388:	f7fe fe78 	bl	800107c <HAL_GetTick>
 800238c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800238e:	e00a      	b.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002390:	f7fe fe74 	bl	800107c <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	f241 3288 	movw	r2, #5000	; 0x1388
 800239e:	4293      	cmp	r3, r2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e351      	b.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023a6:	4b0c      	ldr	r3, [pc, #48]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d0ee      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80023be:	d111      	bne.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80023c0:	4b05      	ldr	r3, [pc, #20]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023cc:	4b04      	ldr	r3, [pc, #16]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80023ce:	400b      	ands	r3, r1
 80023d0:	4901      	ldr	r1, [pc, #4]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	608b      	str	r3, [r1, #8]
 80023d6:	e00b      	b.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80023d8:	40023800 	.word	0x40023800
 80023dc:	40007000 	.word	0x40007000
 80023e0:	0ffffcff 	.word	0x0ffffcff
 80023e4:	4bb3      	ldr	r3, [pc, #716]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	4ab2      	ldr	r2, [pc, #712]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023ea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80023ee:	6093      	str	r3, [r2, #8]
 80023f0:	4bb0      	ldr	r3, [pc, #704]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023fc:	49ad      	ldr	r1, [pc, #692]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0310 	and.w	r3, r3, #16
 800240a:	2b00      	cmp	r3, #0
 800240c:	d010      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800240e:	4ba9      	ldr	r3, [pc, #676]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002410:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002414:	4aa7      	ldr	r2, [pc, #668]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002416:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800241a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800241e:	4ba5      	ldr	r3, [pc, #660]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002420:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002428:	49a2      	ldr	r1, [pc, #648]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800242a:	4313      	orrs	r3, r2
 800242c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d00a      	beq.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800243c:	4b9d      	ldr	r3, [pc, #628]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800243e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002442:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800244a:	499a      	ldr	r1, [pc, #616]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800244c:	4313      	orrs	r3, r2
 800244e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d00a      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800245e:	4b95      	ldr	r3, [pc, #596]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002464:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800246c:	4991      	ldr	r1, [pc, #580]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800246e:	4313      	orrs	r3, r2
 8002470:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d00a      	beq.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002480:	4b8c      	ldr	r3, [pc, #560]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002486:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800248e:	4989      	ldr	r1, [pc, #548]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002490:	4313      	orrs	r3, r2
 8002492:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d00a      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80024a2:	4b84      	ldr	r3, [pc, #528]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024a8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b0:	4980      	ldr	r1, [pc, #512]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d00a      	beq.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024c4:	4b7b      	ldr	r3, [pc, #492]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ca:	f023 0203 	bic.w	r2, r3, #3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d2:	4978      	ldr	r1, [pc, #480]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00a      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024e6:	4b73      	ldr	r3, [pc, #460]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ec:	f023 020c 	bic.w	r2, r3, #12
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024f4:	496f      	ldr	r1, [pc, #444]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002504:	2b00      	cmp	r3, #0
 8002506:	d00a      	beq.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002508:	4b6a      	ldr	r3, [pc, #424]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800250a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800250e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002516:	4967      	ldr	r1, [pc, #412]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002518:	4313      	orrs	r3, r2
 800251a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002526:	2b00      	cmp	r3, #0
 8002528:	d00a      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800252a:	4b62      	ldr	r3, [pc, #392]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800252c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002530:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002538:	495e      	ldr	r1, [pc, #376]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800253a:	4313      	orrs	r3, r2
 800253c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002548:	2b00      	cmp	r3, #0
 800254a:	d00a      	beq.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800254c:	4b59      	ldr	r3, [pc, #356]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800254e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002552:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800255a:	4956      	ldr	r1, [pc, #344]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800255c:	4313      	orrs	r3, r2
 800255e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00a      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800256e:	4b51      	ldr	r3, [pc, #324]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002574:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800257c:	494d      	ldr	r1, [pc, #308]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800257e:	4313      	orrs	r3, r2
 8002580:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d00a      	beq.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002590:	4b48      	ldr	r3, [pc, #288]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002596:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800259e:	4945      	ldr	r1, [pc, #276]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00a      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80025b2:	4b40      	ldr	r3, [pc, #256]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025c0:	493c      	ldr	r1, [pc, #240]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d00a      	beq.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80025d4:	4b37      	ldr	r3, [pc, #220]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025da:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025e2:	4934      	ldr	r1, [pc, #208]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d011      	beq.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80025f6:	4b2f      	ldr	r3, [pc, #188]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025fc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002604:	492b      	ldr	r1, [pc, #172]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002606:	4313      	orrs	r3, r2
 8002608:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002610:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002614:	d101      	bne.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002616:	2301      	movs	r3, #1
 8002618:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0308 	and.w	r3, r3, #8
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002626:	2301      	movs	r3, #1
 8002628:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00a      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002636:	4b1f      	ldr	r3, [pc, #124]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800263c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002644:	491b      	ldr	r1, [pc, #108]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002646:	4313      	orrs	r3, r2
 8002648:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d00b      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002658:	4b16      	ldr	r3, [pc, #88]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800265a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800265e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002668:	4912      	ldr	r1, [pc, #72]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800266a:	4313      	orrs	r3, r2
 800266c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00b      	beq.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800267c:	4b0d      	ldr	r3, [pc, #52]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800267e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002682:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800268c:	4909      	ldr	r1, [pc, #36]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800268e:	4313      	orrs	r3, r2
 8002690:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d00f      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80026a0:	4b04      	ldr	r3, [pc, #16]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026a6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b0:	e002      	b.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80026b2:	bf00      	nop
 80026b4:	40023800 	.word	0x40023800
 80026b8:	4986      	ldr	r1, [pc, #536]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00b      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80026cc:	4b81      	ldr	r3, [pc, #516]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026d2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026dc:	497d      	ldr	r1, [pc, #500]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d006      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f000 80d6 	beq.w	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80026f8:	4b76      	ldr	r3, [pc, #472]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a75      	ldr	r2, [pc, #468]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002702:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002704:	f7fe fcba 	bl	800107c <HAL_GetTick>
 8002708:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800270a:	e008      	b.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800270c:	f7fe fcb6 	bl	800107c <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b64      	cmp	r3, #100	; 0x64
 8002718:	d901      	bls.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e195      	b.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800271e:	4b6d      	ldr	r3, [pc, #436]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d1f0      	bne.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b00      	cmp	r3, #0
 8002734:	d021      	beq.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800273a:	2b00      	cmp	r3, #0
 800273c:	d11d      	bne.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800273e:	4b65      	ldr	r3, [pc, #404]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002740:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002744:	0c1b      	lsrs	r3, r3, #16
 8002746:	f003 0303 	and.w	r3, r3, #3
 800274a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800274c:	4b61      	ldr	r3, [pc, #388]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800274e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002752:	0e1b      	lsrs	r3, r3, #24
 8002754:	f003 030f 	and.w	r3, r3, #15
 8002758:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	019a      	lsls	r2, r3, #6
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	041b      	lsls	r3, r3, #16
 8002764:	431a      	orrs	r2, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	061b      	lsls	r3, r3, #24
 800276a:	431a      	orrs	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	071b      	lsls	r3, r3, #28
 8002772:	4958      	ldr	r1, [pc, #352]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002774:	4313      	orrs	r3, r2
 8002776:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d004      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800278a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800278e:	d00a      	beq.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002798:	2b00      	cmp	r3, #0
 800279a:	d02e      	beq.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027a4:	d129      	bne.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80027a6:	4b4b      	ldr	r3, [pc, #300]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027ac:	0c1b      	lsrs	r3, r3, #16
 80027ae:	f003 0303 	and.w	r3, r3, #3
 80027b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80027b4:	4b47      	ldr	r3, [pc, #284]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027ba:	0f1b      	lsrs	r3, r3, #28
 80027bc:	f003 0307 	and.w	r3, r3, #7
 80027c0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	019a      	lsls	r2, r3, #6
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	041b      	lsls	r3, r3, #16
 80027cc:	431a      	orrs	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	061b      	lsls	r3, r3, #24
 80027d4:	431a      	orrs	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	071b      	lsls	r3, r3, #28
 80027da:	493e      	ldr	r1, [pc, #248]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80027e2:	4b3c      	ldr	r3, [pc, #240]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027e8:	f023 021f 	bic.w	r2, r3, #31
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f0:	3b01      	subs	r3, #1
 80027f2:	4938      	ldr	r1, [pc, #224]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d01d      	beq.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002806:	4b33      	ldr	r3, [pc, #204]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002808:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800280c:	0e1b      	lsrs	r3, r3, #24
 800280e:	f003 030f 	and.w	r3, r3, #15
 8002812:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002814:	4b2f      	ldr	r3, [pc, #188]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002816:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800281a:	0f1b      	lsrs	r3, r3, #28
 800281c:	f003 0307 	and.w	r3, r3, #7
 8002820:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	019a      	lsls	r2, r3, #6
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	041b      	lsls	r3, r3, #16
 800282e:	431a      	orrs	r2, r3
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	061b      	lsls	r3, r3, #24
 8002834:	431a      	orrs	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	071b      	lsls	r3, r3, #28
 800283a:	4926      	ldr	r1, [pc, #152]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800283c:	4313      	orrs	r3, r2
 800283e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d011      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	019a      	lsls	r2, r3, #6
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	041b      	lsls	r3, r3, #16
 800285a:	431a      	orrs	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	061b      	lsls	r3, r3, #24
 8002862:	431a      	orrs	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	071b      	lsls	r3, r3, #28
 800286a:	491a      	ldr	r1, [pc, #104]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800286c:	4313      	orrs	r3, r2
 800286e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002872:	4b18      	ldr	r3, [pc, #96]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a17      	ldr	r2, [pc, #92]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002878:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800287c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800287e:	f7fe fbfd 	bl	800107c <HAL_GetTick>
 8002882:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002884:	e008      	b.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002886:	f7fe fbf9 	bl	800107c <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b64      	cmp	r3, #100	; 0x64
 8002892:	d901      	bls.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e0d8      	b.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002898:	4b0e      	ldr	r3, [pc, #56]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d0f0      	beq.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	f040 80ce 	bne.w	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80028ac:	4b09      	ldr	r3, [pc, #36]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a08      	ldr	r2, [pc, #32]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028b8:	f7fe fbe0 	bl	800107c <HAL_GetTick>
 80028bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80028be:	e00b      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80028c0:	f7fe fbdc 	bl	800107c <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b64      	cmp	r3, #100	; 0x64
 80028cc:	d904      	bls.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e0bb      	b.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80028d2:	bf00      	nop
 80028d4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80028d8:	4b5e      	ldr	r3, [pc, #376]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028e4:	d0ec      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d003      	beq.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d009      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002902:	2b00      	cmp	r3, #0
 8002904:	d02e      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	2b00      	cmp	r3, #0
 800290c:	d12a      	bne.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800290e:	4b51      	ldr	r3, [pc, #324]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002914:	0c1b      	lsrs	r3, r3, #16
 8002916:	f003 0303 	and.w	r3, r3, #3
 800291a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800291c:	4b4d      	ldr	r3, [pc, #308]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800291e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002922:	0f1b      	lsrs	r3, r3, #28
 8002924:	f003 0307 	and.w	r3, r3, #7
 8002928:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	019a      	lsls	r2, r3, #6
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	041b      	lsls	r3, r3, #16
 8002934:	431a      	orrs	r2, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	061b      	lsls	r3, r3, #24
 800293c:	431a      	orrs	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	071b      	lsls	r3, r3, #28
 8002942:	4944      	ldr	r1, [pc, #272]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002944:	4313      	orrs	r3, r2
 8002946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800294a:	4b42      	ldr	r3, [pc, #264]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800294c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002950:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002958:	3b01      	subs	r3, #1
 800295a:	021b      	lsls	r3, r3, #8
 800295c:	493d      	ldr	r1, [pc, #244]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800295e:	4313      	orrs	r3, r2
 8002960:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d022      	beq.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002974:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002978:	d11d      	bne.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800297a:	4b36      	ldr	r3, [pc, #216]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800297c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002980:	0e1b      	lsrs	r3, r3, #24
 8002982:	f003 030f 	and.w	r3, r3, #15
 8002986:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002988:	4b32      	ldr	r3, [pc, #200]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800298a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800298e:	0f1b      	lsrs	r3, r3, #28
 8002990:	f003 0307 	and.w	r3, r3, #7
 8002994:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	019a      	lsls	r2, r3, #6
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	041b      	lsls	r3, r3, #16
 80029a2:	431a      	orrs	r2, r3
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	061b      	lsls	r3, r3, #24
 80029a8:	431a      	orrs	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	071b      	lsls	r3, r3, #28
 80029ae:	4929      	ldr	r1, [pc, #164]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0308 	and.w	r3, r3, #8
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d028      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80029c2:	4b24      	ldr	r3, [pc, #144]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80029c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c8:	0e1b      	lsrs	r3, r3, #24
 80029ca:	f003 030f 	and.w	r3, r3, #15
 80029ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80029d0:	4b20      	ldr	r3, [pc, #128]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80029d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d6:	0c1b      	lsrs	r3, r3, #16
 80029d8:	f003 0303 	and.w	r3, r3, #3
 80029dc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	019a      	lsls	r2, r3, #6
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	041b      	lsls	r3, r3, #16
 80029e8:	431a      	orrs	r2, r3
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	061b      	lsls	r3, r3, #24
 80029ee:	431a      	orrs	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	69db      	ldr	r3, [r3, #28]
 80029f4:	071b      	lsls	r3, r3, #28
 80029f6:	4917      	ldr	r1, [pc, #92]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80029fe:	4b15      	ldr	r3, [pc, #84]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0c:	4911      	ldr	r1, [pc, #68]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002a14:	4b0f      	ldr	r3, [pc, #60]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a0e      	ldr	r2, [pc, #56]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a20:	f7fe fb2c 	bl	800107c <HAL_GetTick>
 8002a24:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002a26:	e008      	b.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002a28:	f7fe fb28 	bl	800107c <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b64      	cmp	r3, #100	; 0x64
 8002a34:	d901      	bls.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e007      	b.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002a3a:	4b06      	ldr	r3, [pc, #24]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a46:	d1ef      	bne.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3720      	adds	r7, #32
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	40023800 	.word	0x40023800

08002a58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e049      	b.n	8002afe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d106      	bne.n	8002a84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f7fe f87e 	bl	8000b80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2202      	movs	r2, #2
 8002a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	3304      	adds	r3, #4
 8002a94:	4619      	mov	r1, r3
 8002a96:	4610      	mov	r0, r2
 8002a98:	f000 fa24 	bl	8002ee4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
	...

08002b08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d001      	beq.n	8002b20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e054      	b.n	8002bca <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2202      	movs	r2, #2
 8002b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68da      	ldr	r2, [r3, #12]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f042 0201 	orr.w	r2, r2, #1
 8002b36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a26      	ldr	r2, [pc, #152]	; (8002bd8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d022      	beq.n	8002b88 <HAL_TIM_Base_Start_IT+0x80>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b4a:	d01d      	beq.n	8002b88 <HAL_TIM_Base_Start_IT+0x80>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a22      	ldr	r2, [pc, #136]	; (8002bdc <HAL_TIM_Base_Start_IT+0xd4>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d018      	beq.n	8002b88 <HAL_TIM_Base_Start_IT+0x80>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a21      	ldr	r2, [pc, #132]	; (8002be0 <HAL_TIM_Base_Start_IT+0xd8>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d013      	beq.n	8002b88 <HAL_TIM_Base_Start_IT+0x80>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a1f      	ldr	r2, [pc, #124]	; (8002be4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d00e      	beq.n	8002b88 <HAL_TIM_Base_Start_IT+0x80>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a1e      	ldr	r2, [pc, #120]	; (8002be8 <HAL_TIM_Base_Start_IT+0xe0>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d009      	beq.n	8002b88 <HAL_TIM_Base_Start_IT+0x80>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a1c      	ldr	r2, [pc, #112]	; (8002bec <HAL_TIM_Base_Start_IT+0xe4>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d004      	beq.n	8002b88 <HAL_TIM_Base_Start_IT+0x80>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a1b      	ldr	r2, [pc, #108]	; (8002bf0 <HAL_TIM_Base_Start_IT+0xe8>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d115      	bne.n	8002bb4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	689a      	ldr	r2, [r3, #8]
 8002b8e:	4b19      	ldr	r3, [pc, #100]	; (8002bf4 <HAL_TIM_Base_Start_IT+0xec>)
 8002b90:	4013      	ands	r3, r2
 8002b92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2b06      	cmp	r3, #6
 8002b98:	d015      	beq.n	8002bc6 <HAL_TIM_Base_Start_IT+0xbe>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ba0:	d011      	beq.n	8002bc6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f042 0201 	orr.w	r2, r2, #1
 8002bb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bb2:	e008      	b.n	8002bc6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f042 0201 	orr.w	r2, r2, #1
 8002bc2:	601a      	str	r2, [r3, #0]
 8002bc4:	e000      	b.n	8002bc8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bc6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3714      	adds	r7, #20
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	40010000 	.word	0x40010000
 8002bdc:	40000400 	.word	0x40000400
 8002be0:	40000800 	.word	0x40000800
 8002be4:	40000c00 	.word	0x40000c00
 8002be8:	40010400 	.word	0x40010400
 8002bec:	40014000 	.word	0x40014000
 8002bf0:	40001800 	.word	0x40001800
 8002bf4:	00010007 	.word	0x00010007

08002bf8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	68da      	ldr	r2, [r3, #12]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f022 0201 	bic.w	r2, r2, #1
 8002c0e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	6a1a      	ldr	r2, [r3, #32]
 8002c16:	f241 1311 	movw	r3, #4369	; 0x1111
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d10f      	bne.n	8002c40 <HAL_TIM_Base_Stop_IT+0x48>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	6a1a      	ldr	r2, [r3, #32]
 8002c26:	f240 4344 	movw	r3, #1092	; 0x444
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d107      	bne.n	8002c40 <HAL_TIM_Base_Stop_IT+0x48>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f022 0201 	bic.w	r2, r2, #1
 8002c3e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr

08002c56 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b082      	sub	sp, #8
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	f003 0302 	and.w	r3, r3, #2
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d122      	bne.n	8002cb2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d11b      	bne.n	8002cb2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f06f 0202 	mvn.w	r2, #2
 8002c82:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	f003 0303 	and.w	r3, r3, #3
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d003      	beq.n	8002ca0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f000 f905 	bl	8002ea8 <HAL_TIM_IC_CaptureCallback>
 8002c9e:	e005      	b.n	8002cac <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f000 f8f7 	bl	8002e94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 f908 	bl	8002ebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	f003 0304 	and.w	r3, r3, #4
 8002cbc:	2b04      	cmp	r3, #4
 8002cbe:	d122      	bne.n	8002d06 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	f003 0304 	and.w	r3, r3, #4
 8002cca:	2b04      	cmp	r3, #4
 8002ccc:	d11b      	bne.n	8002d06 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f06f 0204 	mvn.w	r2, #4
 8002cd6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2202      	movs	r2, #2
 8002cdc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	699b      	ldr	r3, [r3, #24]
 8002ce4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d003      	beq.n	8002cf4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f000 f8db 	bl	8002ea8 <HAL_TIM_IC_CaptureCallback>
 8002cf2:	e005      	b.n	8002d00 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f000 f8cd 	bl	8002e94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 f8de 	bl	8002ebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	f003 0308 	and.w	r3, r3, #8
 8002d10:	2b08      	cmp	r3, #8
 8002d12:	d122      	bne.n	8002d5a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	f003 0308 	and.w	r3, r3, #8
 8002d1e:	2b08      	cmp	r3, #8
 8002d20:	d11b      	bne.n	8002d5a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f06f 0208 	mvn.w	r2, #8
 8002d2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2204      	movs	r2, #4
 8002d30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	69db      	ldr	r3, [r3, #28]
 8002d38:	f003 0303 	and.w	r3, r3, #3
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d003      	beq.n	8002d48 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 f8b1 	bl	8002ea8 <HAL_TIM_IC_CaptureCallback>
 8002d46:	e005      	b.n	8002d54 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f000 f8a3 	bl	8002e94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f000 f8b4 	bl	8002ebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	691b      	ldr	r3, [r3, #16]
 8002d60:	f003 0310 	and.w	r3, r3, #16
 8002d64:	2b10      	cmp	r3, #16
 8002d66:	d122      	bne.n	8002dae <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	f003 0310 	and.w	r3, r3, #16
 8002d72:	2b10      	cmp	r3, #16
 8002d74:	d11b      	bne.n	8002dae <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f06f 0210 	mvn.w	r2, #16
 8002d7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2208      	movs	r2, #8
 8002d84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	69db      	ldr	r3, [r3, #28]
 8002d8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d003      	beq.n	8002d9c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f000 f887 	bl	8002ea8 <HAL_TIM_IC_CaptureCallback>
 8002d9a:	e005      	b.n	8002da8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f000 f879 	bl	8002e94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 f88a 	bl	8002ebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	691b      	ldr	r3, [r3, #16]
 8002db4:	f003 0301 	and.w	r3, r3, #1
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d10e      	bne.n	8002dda <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d107      	bne.n	8002dda <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f06f 0201 	mvn.w	r2, #1
 8002dd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f7fd fe93 	bl	8000b00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	691b      	ldr	r3, [r3, #16]
 8002de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002de4:	2b80      	cmp	r3, #128	; 0x80
 8002de6:	d10e      	bne.n	8002e06 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002df2:	2b80      	cmp	r3, #128	; 0x80
 8002df4:	d107      	bne.n	8002e06 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002dfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f000 f9a7 	bl	8003154 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e14:	d10e      	bne.n	8002e34 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e20:	2b80      	cmp	r3, #128	; 0x80
 8002e22:	d107      	bne.n	8002e34 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 f99a 	bl	8003168 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e3e:	2b40      	cmp	r3, #64	; 0x40
 8002e40:	d10e      	bne.n	8002e60 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e4c:	2b40      	cmp	r3, #64	; 0x40
 8002e4e:	d107      	bne.n	8002e60 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 f838 	bl	8002ed0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	f003 0320 	and.w	r3, r3, #32
 8002e6a:	2b20      	cmp	r3, #32
 8002e6c:	d10e      	bne.n	8002e8c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	f003 0320 	and.w	r3, r3, #32
 8002e78:	2b20      	cmp	r3, #32
 8002e7a:	d107      	bne.n	8002e8c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f06f 0220 	mvn.w	r2, #32
 8002e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f000 f95a 	bl	8003140 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e8c:	bf00      	nop
 8002e8e:	3708      	adds	r7, #8
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002eb0:	bf00      	nop
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ed8:	bf00      	nop
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b085      	sub	sp, #20
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4a40      	ldr	r2, [pc, #256]	; (8002ff8 <TIM_Base_SetConfig+0x114>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d013      	beq.n	8002f24 <TIM_Base_SetConfig+0x40>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f02:	d00f      	beq.n	8002f24 <TIM_Base_SetConfig+0x40>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4a3d      	ldr	r2, [pc, #244]	; (8002ffc <TIM_Base_SetConfig+0x118>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d00b      	beq.n	8002f24 <TIM_Base_SetConfig+0x40>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4a3c      	ldr	r2, [pc, #240]	; (8003000 <TIM_Base_SetConfig+0x11c>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d007      	beq.n	8002f24 <TIM_Base_SetConfig+0x40>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a3b      	ldr	r2, [pc, #236]	; (8003004 <TIM_Base_SetConfig+0x120>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d003      	beq.n	8002f24 <TIM_Base_SetConfig+0x40>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a3a      	ldr	r2, [pc, #232]	; (8003008 <TIM_Base_SetConfig+0x124>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d108      	bne.n	8002f36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	68fa      	ldr	r2, [r7, #12]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a2f      	ldr	r2, [pc, #188]	; (8002ff8 <TIM_Base_SetConfig+0x114>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d02b      	beq.n	8002f96 <TIM_Base_SetConfig+0xb2>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f44:	d027      	beq.n	8002f96 <TIM_Base_SetConfig+0xb2>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a2c      	ldr	r2, [pc, #176]	; (8002ffc <TIM_Base_SetConfig+0x118>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d023      	beq.n	8002f96 <TIM_Base_SetConfig+0xb2>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a2b      	ldr	r2, [pc, #172]	; (8003000 <TIM_Base_SetConfig+0x11c>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d01f      	beq.n	8002f96 <TIM_Base_SetConfig+0xb2>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a2a      	ldr	r2, [pc, #168]	; (8003004 <TIM_Base_SetConfig+0x120>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d01b      	beq.n	8002f96 <TIM_Base_SetConfig+0xb2>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a29      	ldr	r2, [pc, #164]	; (8003008 <TIM_Base_SetConfig+0x124>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d017      	beq.n	8002f96 <TIM_Base_SetConfig+0xb2>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a28      	ldr	r2, [pc, #160]	; (800300c <TIM_Base_SetConfig+0x128>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d013      	beq.n	8002f96 <TIM_Base_SetConfig+0xb2>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a27      	ldr	r2, [pc, #156]	; (8003010 <TIM_Base_SetConfig+0x12c>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d00f      	beq.n	8002f96 <TIM_Base_SetConfig+0xb2>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a26      	ldr	r2, [pc, #152]	; (8003014 <TIM_Base_SetConfig+0x130>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d00b      	beq.n	8002f96 <TIM_Base_SetConfig+0xb2>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a25      	ldr	r2, [pc, #148]	; (8003018 <TIM_Base_SetConfig+0x134>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d007      	beq.n	8002f96 <TIM_Base_SetConfig+0xb2>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a24      	ldr	r2, [pc, #144]	; (800301c <TIM_Base_SetConfig+0x138>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d003      	beq.n	8002f96 <TIM_Base_SetConfig+0xb2>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a23      	ldr	r2, [pc, #140]	; (8003020 <TIM_Base_SetConfig+0x13c>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d108      	bne.n	8002fa8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a0a      	ldr	r2, [pc, #40]	; (8002ff8 <TIM_Base_SetConfig+0x114>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d003      	beq.n	8002fdc <TIM_Base_SetConfig+0xf8>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4a0c      	ldr	r2, [pc, #48]	; (8003008 <TIM_Base_SetConfig+0x124>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d103      	bne.n	8002fe4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	691a      	ldr	r2, [r3, #16]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	615a      	str	r2, [r3, #20]
}
 8002fea:	bf00      	nop
 8002fec:	3714      	adds	r7, #20
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	40010000 	.word	0x40010000
 8002ffc:	40000400 	.word	0x40000400
 8003000:	40000800 	.word	0x40000800
 8003004:	40000c00 	.word	0x40000c00
 8003008:	40010400 	.word	0x40010400
 800300c:	40014000 	.word	0x40014000
 8003010:	40014400 	.word	0x40014400
 8003014:	40014800 	.word	0x40014800
 8003018:	40001800 	.word	0x40001800
 800301c:	40001c00 	.word	0x40001c00
 8003020:	40002000 	.word	0x40002000

08003024 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003034:	2b01      	cmp	r3, #1
 8003036:	d101      	bne.n	800303c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003038:	2302      	movs	r3, #2
 800303a:	e06d      	b.n	8003118 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2202      	movs	r2, #2
 8003048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a30      	ldr	r2, [pc, #192]	; (8003124 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d004      	beq.n	8003070 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a2f      	ldr	r2, [pc, #188]	; (8003128 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d108      	bne.n	8003082 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003076:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	4313      	orrs	r3, r2
 8003080:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003088:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	4313      	orrs	r3, r2
 8003092:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a20      	ldr	r2, [pc, #128]	; (8003124 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d022      	beq.n	80030ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ae:	d01d      	beq.n	80030ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a1d      	ldr	r2, [pc, #116]	; (800312c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d018      	beq.n	80030ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a1c      	ldr	r2, [pc, #112]	; (8003130 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d013      	beq.n	80030ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a1a      	ldr	r2, [pc, #104]	; (8003134 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d00e      	beq.n	80030ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a15      	ldr	r2, [pc, #84]	; (8003128 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d009      	beq.n	80030ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a16      	ldr	r2, [pc, #88]	; (8003138 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d004      	beq.n	80030ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a15      	ldr	r2, [pc, #84]	; (800313c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d10c      	bne.n	8003106 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030f2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	68ba      	ldr	r2, [r7, #8]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68ba      	ldr	r2, [r7, #8]
 8003104:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	3714      	adds	r7, #20
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr
 8003124:	40010000 	.word	0x40010000
 8003128:	40010400 	.word	0x40010400
 800312c:	40000400 	.word	0x40000400
 8003130:	40000800 	.word	0x40000800
 8003134:	40000c00 	.word	0x40000c00
 8003138:	40014000 	.word	0x40014000
 800313c:	40001800 	.word	0x40001800

08003140 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003148:	bf00      	nop
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800315c:	bf00      	nop
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003170:	bf00      	nop
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e040      	b.n	8003210 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003192:	2b00      	cmp	r3, #0
 8003194:	d106      	bne.n	80031a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f7fd fd30 	bl	8000c04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2224      	movs	r2, #36	; 0x24
 80031a8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f022 0201 	bic.w	r2, r2, #1
 80031b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 fa56 	bl	800366c <UART_SetConfig>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d101      	bne.n	80031ca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e022      	b.n	8003210 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d002      	beq.n	80031d8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 fcac 	bl	8003b30 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	685a      	ldr	r2, [r3, #4]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	689a      	ldr	r2, [r3, #8]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f042 0201 	orr.w	r2, r2, #1
 8003206:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f000 fd33 	bl	8003c74 <UART_CheckIdleState>
 800320e:	4603      	mov	r3, r0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3708      	adds	r7, #8
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b088      	sub	sp, #32
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	69db      	ldr	r3, [r3, #28]
 8003226:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003238:	69fa      	ldr	r2, [r7, #28]
 800323a:	f640 030f 	movw	r3, #2063	; 0x80f
 800323e:	4013      	ands	r3, r2
 8003240:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d113      	bne.n	8003270 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	f003 0320 	and.w	r3, r3, #32
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00e      	beq.n	8003270 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	f003 0320 	and.w	r3, r3, #32
 8003258:	2b00      	cmp	r3, #0
 800325a:	d009      	beq.n	8003270 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003260:	2b00      	cmp	r3, #0
 8003262:	f000 81cc 	beq.w	80035fe <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	4798      	blx	r3
      }
      return;
 800326e:	e1c6      	b.n	80035fe <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	2b00      	cmp	r3, #0
 8003274:	f000 80e3 	beq.w	800343e <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	d105      	bne.n	800328e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	4ba5      	ldr	r3, [pc, #660]	; (800351c <HAL_UART_IRQHandler+0x304>)
 8003286:	4013      	ands	r3, r2
 8003288:	2b00      	cmp	r3, #0
 800328a:	f000 80d8 	beq.w	800343e <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	f003 0301 	and.w	r3, r3, #1
 8003294:	2b00      	cmp	r3, #0
 8003296:	d010      	beq.n	80032ba <HAL_UART_IRQHandler+0xa2>
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00b      	beq.n	80032ba <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2201      	movs	r2, #1
 80032a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032b0:	f043 0201 	orr.w	r2, r3, #1
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d010      	beq.n	80032e6 <HAL_UART_IRQHandler+0xce>
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00b      	beq.n	80032e6 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2202      	movs	r2, #2
 80032d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032dc:	f043 0204 	orr.w	r2, r3, #4
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	f003 0304 	and.w	r3, r3, #4
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d010      	beq.n	8003312 <HAL_UART_IRQHandler+0xfa>
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00b      	beq.n	8003312 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2204      	movs	r2, #4
 8003300:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003308:	f043 0202 	orr.w	r2, r3, #2
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	f003 0308 	and.w	r3, r3, #8
 8003318:	2b00      	cmp	r3, #0
 800331a:	d015      	beq.n	8003348 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	f003 0320 	and.w	r3, r3, #32
 8003322:	2b00      	cmp	r3, #0
 8003324:	d104      	bne.n	8003330 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800332c:	2b00      	cmp	r3, #0
 800332e:	d00b      	beq.n	8003348 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2208      	movs	r2, #8
 8003336:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800333e:	f043 0208 	orr.w	r2, r3, #8
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800334e:	2b00      	cmp	r3, #0
 8003350:	d011      	beq.n	8003376 <HAL_UART_IRQHandler+0x15e>
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00c      	beq.n	8003376 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003364:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800336c:	f043 0220 	orr.w	r2, r3, #32
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800337c:	2b00      	cmp	r3, #0
 800337e:	f000 8140 	beq.w	8003602 <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	f003 0320 	and.w	r3, r3, #32
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00c      	beq.n	80033a6 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	f003 0320 	and.w	r3, r3, #32
 8003392:	2b00      	cmp	r3, #0
 8003394:	d007      	beq.n	80033a6 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800339a:	2b00      	cmp	r3, #0
 800339c:	d003      	beq.n	80033a6 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033ac:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b8:	2b40      	cmp	r3, #64	; 0x40
 80033ba:	d004      	beq.n	80033c6 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d031      	beq.n	800342a <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 fd19 	bl	8003dfe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d6:	2b40      	cmp	r3, #64	; 0x40
 80033d8:	d123      	bne.n	8003422 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	689a      	ldr	r2, [r3, #8]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033e8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d013      	beq.n	800341a <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f6:	4a4a      	ldr	r2, [pc, #296]	; (8003520 <HAL_UART_IRQHandler+0x308>)
 80033f8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033fe:	4618      	mov	r0, r3
 8003400:	f7fd ffbe 	bl	8001380 <HAL_DMA_Abort_IT>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d017      	beq.n	800343a <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800340e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003414:	4610      	mov	r0, r2
 8003416:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003418:	e00f      	b.n	800343a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 f906 	bl	800362c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003420:	e00b      	b.n	800343a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 f902 	bl	800362c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003428:	e007      	b.n	800343a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 f8fe 	bl	800362c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003438:	e0e3      	b.n	8003602 <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800343a:	bf00      	nop
    return;
 800343c:	e0e1      	b.n	8003602 <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003442:	2b01      	cmp	r3, #1
 8003444:	f040 80a7 	bne.w	8003596 <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	f003 0310 	and.w	r3, r3, #16
 800344e:	2b00      	cmp	r3, #0
 8003450:	f000 80a1 	beq.w	8003596 <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	f003 0310 	and.w	r3, r3, #16
 800345a:	2b00      	cmp	r3, #0
 800345c:	f000 809b 	beq.w	8003596 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2210      	movs	r2, #16
 8003466:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003472:	2b40      	cmp	r3, #64	; 0x40
 8003474:	d156      	bne.n	8003524 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8003480:	893b      	ldrh	r3, [r7, #8]
 8003482:	2b00      	cmp	r3, #0
 8003484:	f000 80bf 	beq.w	8003606 <HAL_UART_IRQHandler+0x3ee>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800348e:	893a      	ldrh	r2, [r7, #8]
 8003490:	429a      	cmp	r2, r3
 8003492:	f080 80b8 	bcs.w	8003606 <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	893a      	ldrh	r2, [r7, #8]
 800349a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a2:	69db      	ldr	r3, [r3, #28]
 80034a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034a8:	d02a      	beq.n	8003500 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034b8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	689a      	ldr	r2, [r3, #8]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f022 0201 	bic.w	r2, r2, #1
 80034c8:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	689a      	ldr	r2, [r3, #8]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034d8:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2220      	movs	r2, #32
 80034de:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 0210 	bic.w	r2, r2, #16
 80034f4:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7fd fed0 	bl	80012a0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800350c:	b29b      	uxth	r3, r3
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	b29b      	uxth	r3, r3
 8003512:	4619      	mov	r1, r3
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f000 f893 	bl	8003640 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800351a:	e074      	b.n	8003606 <HAL_UART_IRQHandler+0x3ee>
 800351c:	04000120 	.word	0x04000120
 8003520:	08003e5d 	.word	0x08003e5d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003530:	b29b      	uxth	r3, r3
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800353c:	b29b      	uxth	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d063      	beq.n	800360a <HAL_UART_IRQHandler+0x3f2>
          && (nb_rx_data > 0U))
 8003542:	897b      	ldrh	r3, [r7, #10]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d060      	beq.n	800360a <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003556:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	689a      	ldr	r2, [r3, #8]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f022 0201 	bic.w	r2, r2, #1
 8003566:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2220      	movs	r2, #32
 800356c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f022 0210 	bic.w	r2, r2, #16
 8003588:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800358a:	897b      	ldrh	r3, [r7, #10]
 800358c:	4619      	mov	r1, r3
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 f856 	bl	8003640 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003594:	e039      	b.n	800360a <HAL_UART_IRQHandler+0x3f2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d00d      	beq.n	80035bc <HAL_UART_IRQHandler+0x3a4>
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d008      	beq.n	80035bc <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80035b2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 f84f 	bl	8003658 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80035ba:	e029      	b.n	8003610 <HAL_UART_IRQHandler+0x3f8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00d      	beq.n	80035e2 <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d008      	beq.n	80035e2 <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d01a      	beq.n	800360e <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	4798      	blx	r3
    }
    return;
 80035e0:	e015      	b.n	800360e <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d011      	beq.n	8003610 <HAL_UART_IRQHandler+0x3f8>
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00c      	beq.n	8003610 <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 fc46 	bl	8003e88 <UART_EndTransmit_IT>
    return;
 80035fc:	e008      	b.n	8003610 <HAL_UART_IRQHandler+0x3f8>
      return;
 80035fe:	bf00      	nop
 8003600:	e006      	b.n	8003610 <HAL_UART_IRQHandler+0x3f8>
    return;
 8003602:	bf00      	nop
 8003604:	e004      	b.n	8003610 <HAL_UART_IRQHandler+0x3f8>
      return;
 8003606:	bf00      	nop
 8003608:	e002      	b.n	8003610 <HAL_UART_IRQHandler+0x3f8>
      return;
 800360a:	bf00      	nop
 800360c:	e000      	b.n	8003610 <HAL_UART_IRQHandler+0x3f8>
    return;
 800360e:	bf00      	nop
  }

}
 8003610:	3720      	adds	r7, #32
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop

08003618 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	460b      	mov	r3, r1
 800364a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800364c:	bf00      	nop
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003660:	bf00      	nop
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b088      	sub	sp, #32
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003674:	2300      	movs	r3, #0
 8003676:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689a      	ldr	r2, [r3, #8]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	431a      	orrs	r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	431a      	orrs	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	69db      	ldr	r3, [r3, #28]
 800368c:	4313      	orrs	r3, r2
 800368e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	4ba7      	ldr	r3, [pc, #668]	; (8003934 <UART_SetConfig+0x2c8>)
 8003698:	4013      	ands	r3, r2
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	6812      	ldr	r2, [r2, #0]
 800369e:	6979      	ldr	r1, [r7, #20]
 80036a0:	430b      	orrs	r3, r1
 80036a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	68da      	ldr	r2, [r3, #12]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	430a      	orrs	r2, r1
 80036b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a1b      	ldr	r3, [r3, #32]
 80036c4:	697a      	ldr	r2, [r7, #20]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	697a      	ldr	r2, [r7, #20]
 80036da:	430a      	orrs	r2, r1
 80036dc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a95      	ldr	r2, [pc, #596]	; (8003938 <UART_SetConfig+0x2cc>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d120      	bne.n	800372a <UART_SetConfig+0xbe>
 80036e8:	4b94      	ldr	r3, [pc, #592]	; (800393c <UART_SetConfig+0x2d0>)
 80036ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ee:	f003 0303 	and.w	r3, r3, #3
 80036f2:	2b03      	cmp	r3, #3
 80036f4:	d816      	bhi.n	8003724 <UART_SetConfig+0xb8>
 80036f6:	a201      	add	r2, pc, #4	; (adr r2, 80036fc <UART_SetConfig+0x90>)
 80036f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036fc:	0800370d 	.word	0x0800370d
 8003700:	08003719 	.word	0x08003719
 8003704:	08003713 	.word	0x08003713
 8003708:	0800371f 	.word	0x0800371f
 800370c:	2301      	movs	r3, #1
 800370e:	77fb      	strb	r3, [r7, #31]
 8003710:	e14f      	b.n	80039b2 <UART_SetConfig+0x346>
 8003712:	2302      	movs	r3, #2
 8003714:	77fb      	strb	r3, [r7, #31]
 8003716:	e14c      	b.n	80039b2 <UART_SetConfig+0x346>
 8003718:	2304      	movs	r3, #4
 800371a:	77fb      	strb	r3, [r7, #31]
 800371c:	e149      	b.n	80039b2 <UART_SetConfig+0x346>
 800371e:	2308      	movs	r3, #8
 8003720:	77fb      	strb	r3, [r7, #31]
 8003722:	e146      	b.n	80039b2 <UART_SetConfig+0x346>
 8003724:	2310      	movs	r3, #16
 8003726:	77fb      	strb	r3, [r7, #31]
 8003728:	e143      	b.n	80039b2 <UART_SetConfig+0x346>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a84      	ldr	r2, [pc, #528]	; (8003940 <UART_SetConfig+0x2d4>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d132      	bne.n	800379a <UART_SetConfig+0x12e>
 8003734:	4b81      	ldr	r3, [pc, #516]	; (800393c <UART_SetConfig+0x2d0>)
 8003736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800373a:	f003 030c 	and.w	r3, r3, #12
 800373e:	2b0c      	cmp	r3, #12
 8003740:	d828      	bhi.n	8003794 <UART_SetConfig+0x128>
 8003742:	a201      	add	r2, pc, #4	; (adr r2, 8003748 <UART_SetConfig+0xdc>)
 8003744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003748:	0800377d 	.word	0x0800377d
 800374c:	08003795 	.word	0x08003795
 8003750:	08003795 	.word	0x08003795
 8003754:	08003795 	.word	0x08003795
 8003758:	08003789 	.word	0x08003789
 800375c:	08003795 	.word	0x08003795
 8003760:	08003795 	.word	0x08003795
 8003764:	08003795 	.word	0x08003795
 8003768:	08003783 	.word	0x08003783
 800376c:	08003795 	.word	0x08003795
 8003770:	08003795 	.word	0x08003795
 8003774:	08003795 	.word	0x08003795
 8003778:	0800378f 	.word	0x0800378f
 800377c:	2300      	movs	r3, #0
 800377e:	77fb      	strb	r3, [r7, #31]
 8003780:	e117      	b.n	80039b2 <UART_SetConfig+0x346>
 8003782:	2302      	movs	r3, #2
 8003784:	77fb      	strb	r3, [r7, #31]
 8003786:	e114      	b.n	80039b2 <UART_SetConfig+0x346>
 8003788:	2304      	movs	r3, #4
 800378a:	77fb      	strb	r3, [r7, #31]
 800378c:	e111      	b.n	80039b2 <UART_SetConfig+0x346>
 800378e:	2308      	movs	r3, #8
 8003790:	77fb      	strb	r3, [r7, #31]
 8003792:	e10e      	b.n	80039b2 <UART_SetConfig+0x346>
 8003794:	2310      	movs	r3, #16
 8003796:	77fb      	strb	r3, [r7, #31]
 8003798:	e10b      	b.n	80039b2 <UART_SetConfig+0x346>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a69      	ldr	r2, [pc, #420]	; (8003944 <UART_SetConfig+0x2d8>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d120      	bne.n	80037e6 <UART_SetConfig+0x17a>
 80037a4:	4b65      	ldr	r3, [pc, #404]	; (800393c <UART_SetConfig+0x2d0>)
 80037a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037aa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80037ae:	2b30      	cmp	r3, #48	; 0x30
 80037b0:	d013      	beq.n	80037da <UART_SetConfig+0x16e>
 80037b2:	2b30      	cmp	r3, #48	; 0x30
 80037b4:	d814      	bhi.n	80037e0 <UART_SetConfig+0x174>
 80037b6:	2b20      	cmp	r3, #32
 80037b8:	d009      	beq.n	80037ce <UART_SetConfig+0x162>
 80037ba:	2b20      	cmp	r3, #32
 80037bc:	d810      	bhi.n	80037e0 <UART_SetConfig+0x174>
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d002      	beq.n	80037c8 <UART_SetConfig+0x15c>
 80037c2:	2b10      	cmp	r3, #16
 80037c4:	d006      	beq.n	80037d4 <UART_SetConfig+0x168>
 80037c6:	e00b      	b.n	80037e0 <UART_SetConfig+0x174>
 80037c8:	2300      	movs	r3, #0
 80037ca:	77fb      	strb	r3, [r7, #31]
 80037cc:	e0f1      	b.n	80039b2 <UART_SetConfig+0x346>
 80037ce:	2302      	movs	r3, #2
 80037d0:	77fb      	strb	r3, [r7, #31]
 80037d2:	e0ee      	b.n	80039b2 <UART_SetConfig+0x346>
 80037d4:	2304      	movs	r3, #4
 80037d6:	77fb      	strb	r3, [r7, #31]
 80037d8:	e0eb      	b.n	80039b2 <UART_SetConfig+0x346>
 80037da:	2308      	movs	r3, #8
 80037dc:	77fb      	strb	r3, [r7, #31]
 80037de:	e0e8      	b.n	80039b2 <UART_SetConfig+0x346>
 80037e0:	2310      	movs	r3, #16
 80037e2:	77fb      	strb	r3, [r7, #31]
 80037e4:	e0e5      	b.n	80039b2 <UART_SetConfig+0x346>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a57      	ldr	r2, [pc, #348]	; (8003948 <UART_SetConfig+0x2dc>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d120      	bne.n	8003832 <UART_SetConfig+0x1c6>
 80037f0:	4b52      	ldr	r3, [pc, #328]	; (800393c <UART_SetConfig+0x2d0>)
 80037f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80037fa:	2bc0      	cmp	r3, #192	; 0xc0
 80037fc:	d013      	beq.n	8003826 <UART_SetConfig+0x1ba>
 80037fe:	2bc0      	cmp	r3, #192	; 0xc0
 8003800:	d814      	bhi.n	800382c <UART_SetConfig+0x1c0>
 8003802:	2b80      	cmp	r3, #128	; 0x80
 8003804:	d009      	beq.n	800381a <UART_SetConfig+0x1ae>
 8003806:	2b80      	cmp	r3, #128	; 0x80
 8003808:	d810      	bhi.n	800382c <UART_SetConfig+0x1c0>
 800380a:	2b00      	cmp	r3, #0
 800380c:	d002      	beq.n	8003814 <UART_SetConfig+0x1a8>
 800380e:	2b40      	cmp	r3, #64	; 0x40
 8003810:	d006      	beq.n	8003820 <UART_SetConfig+0x1b4>
 8003812:	e00b      	b.n	800382c <UART_SetConfig+0x1c0>
 8003814:	2300      	movs	r3, #0
 8003816:	77fb      	strb	r3, [r7, #31]
 8003818:	e0cb      	b.n	80039b2 <UART_SetConfig+0x346>
 800381a:	2302      	movs	r3, #2
 800381c:	77fb      	strb	r3, [r7, #31]
 800381e:	e0c8      	b.n	80039b2 <UART_SetConfig+0x346>
 8003820:	2304      	movs	r3, #4
 8003822:	77fb      	strb	r3, [r7, #31]
 8003824:	e0c5      	b.n	80039b2 <UART_SetConfig+0x346>
 8003826:	2308      	movs	r3, #8
 8003828:	77fb      	strb	r3, [r7, #31]
 800382a:	e0c2      	b.n	80039b2 <UART_SetConfig+0x346>
 800382c:	2310      	movs	r3, #16
 800382e:	77fb      	strb	r3, [r7, #31]
 8003830:	e0bf      	b.n	80039b2 <UART_SetConfig+0x346>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a45      	ldr	r2, [pc, #276]	; (800394c <UART_SetConfig+0x2e0>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d125      	bne.n	8003888 <UART_SetConfig+0x21c>
 800383c:	4b3f      	ldr	r3, [pc, #252]	; (800393c <UART_SetConfig+0x2d0>)
 800383e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003842:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003846:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800384a:	d017      	beq.n	800387c <UART_SetConfig+0x210>
 800384c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003850:	d817      	bhi.n	8003882 <UART_SetConfig+0x216>
 8003852:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003856:	d00b      	beq.n	8003870 <UART_SetConfig+0x204>
 8003858:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800385c:	d811      	bhi.n	8003882 <UART_SetConfig+0x216>
 800385e:	2b00      	cmp	r3, #0
 8003860:	d003      	beq.n	800386a <UART_SetConfig+0x1fe>
 8003862:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003866:	d006      	beq.n	8003876 <UART_SetConfig+0x20a>
 8003868:	e00b      	b.n	8003882 <UART_SetConfig+0x216>
 800386a:	2300      	movs	r3, #0
 800386c:	77fb      	strb	r3, [r7, #31]
 800386e:	e0a0      	b.n	80039b2 <UART_SetConfig+0x346>
 8003870:	2302      	movs	r3, #2
 8003872:	77fb      	strb	r3, [r7, #31]
 8003874:	e09d      	b.n	80039b2 <UART_SetConfig+0x346>
 8003876:	2304      	movs	r3, #4
 8003878:	77fb      	strb	r3, [r7, #31]
 800387a:	e09a      	b.n	80039b2 <UART_SetConfig+0x346>
 800387c:	2308      	movs	r3, #8
 800387e:	77fb      	strb	r3, [r7, #31]
 8003880:	e097      	b.n	80039b2 <UART_SetConfig+0x346>
 8003882:	2310      	movs	r3, #16
 8003884:	77fb      	strb	r3, [r7, #31]
 8003886:	e094      	b.n	80039b2 <UART_SetConfig+0x346>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a30      	ldr	r2, [pc, #192]	; (8003950 <UART_SetConfig+0x2e4>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d125      	bne.n	80038de <UART_SetConfig+0x272>
 8003892:	4b2a      	ldr	r3, [pc, #168]	; (800393c <UART_SetConfig+0x2d0>)
 8003894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003898:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800389c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80038a0:	d017      	beq.n	80038d2 <UART_SetConfig+0x266>
 80038a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80038a6:	d817      	bhi.n	80038d8 <UART_SetConfig+0x26c>
 80038a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038ac:	d00b      	beq.n	80038c6 <UART_SetConfig+0x25a>
 80038ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038b2:	d811      	bhi.n	80038d8 <UART_SetConfig+0x26c>
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d003      	beq.n	80038c0 <UART_SetConfig+0x254>
 80038b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038bc:	d006      	beq.n	80038cc <UART_SetConfig+0x260>
 80038be:	e00b      	b.n	80038d8 <UART_SetConfig+0x26c>
 80038c0:	2301      	movs	r3, #1
 80038c2:	77fb      	strb	r3, [r7, #31]
 80038c4:	e075      	b.n	80039b2 <UART_SetConfig+0x346>
 80038c6:	2302      	movs	r3, #2
 80038c8:	77fb      	strb	r3, [r7, #31]
 80038ca:	e072      	b.n	80039b2 <UART_SetConfig+0x346>
 80038cc:	2304      	movs	r3, #4
 80038ce:	77fb      	strb	r3, [r7, #31]
 80038d0:	e06f      	b.n	80039b2 <UART_SetConfig+0x346>
 80038d2:	2308      	movs	r3, #8
 80038d4:	77fb      	strb	r3, [r7, #31]
 80038d6:	e06c      	b.n	80039b2 <UART_SetConfig+0x346>
 80038d8:	2310      	movs	r3, #16
 80038da:	77fb      	strb	r3, [r7, #31]
 80038dc:	e069      	b.n	80039b2 <UART_SetConfig+0x346>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a1c      	ldr	r2, [pc, #112]	; (8003954 <UART_SetConfig+0x2e8>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d137      	bne.n	8003958 <UART_SetConfig+0x2ec>
 80038e8:	4b14      	ldr	r3, [pc, #80]	; (800393c <UART_SetConfig+0x2d0>)
 80038ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ee:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80038f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80038f6:	d017      	beq.n	8003928 <UART_SetConfig+0x2bc>
 80038f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80038fc:	d817      	bhi.n	800392e <UART_SetConfig+0x2c2>
 80038fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003902:	d00b      	beq.n	800391c <UART_SetConfig+0x2b0>
 8003904:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003908:	d811      	bhi.n	800392e <UART_SetConfig+0x2c2>
 800390a:	2b00      	cmp	r3, #0
 800390c:	d003      	beq.n	8003916 <UART_SetConfig+0x2aa>
 800390e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003912:	d006      	beq.n	8003922 <UART_SetConfig+0x2b6>
 8003914:	e00b      	b.n	800392e <UART_SetConfig+0x2c2>
 8003916:	2300      	movs	r3, #0
 8003918:	77fb      	strb	r3, [r7, #31]
 800391a:	e04a      	b.n	80039b2 <UART_SetConfig+0x346>
 800391c:	2302      	movs	r3, #2
 800391e:	77fb      	strb	r3, [r7, #31]
 8003920:	e047      	b.n	80039b2 <UART_SetConfig+0x346>
 8003922:	2304      	movs	r3, #4
 8003924:	77fb      	strb	r3, [r7, #31]
 8003926:	e044      	b.n	80039b2 <UART_SetConfig+0x346>
 8003928:	2308      	movs	r3, #8
 800392a:	77fb      	strb	r3, [r7, #31]
 800392c:	e041      	b.n	80039b2 <UART_SetConfig+0x346>
 800392e:	2310      	movs	r3, #16
 8003930:	77fb      	strb	r3, [r7, #31]
 8003932:	e03e      	b.n	80039b2 <UART_SetConfig+0x346>
 8003934:	efff69f3 	.word	0xefff69f3
 8003938:	40011000 	.word	0x40011000
 800393c:	40023800 	.word	0x40023800
 8003940:	40004400 	.word	0x40004400
 8003944:	40004800 	.word	0x40004800
 8003948:	40004c00 	.word	0x40004c00
 800394c:	40005000 	.word	0x40005000
 8003950:	40011400 	.word	0x40011400
 8003954:	40007800 	.word	0x40007800
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a71      	ldr	r2, [pc, #452]	; (8003b24 <UART_SetConfig+0x4b8>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d125      	bne.n	80039ae <UART_SetConfig+0x342>
 8003962:	4b71      	ldr	r3, [pc, #452]	; (8003b28 <UART_SetConfig+0x4bc>)
 8003964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003968:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800396c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003970:	d017      	beq.n	80039a2 <UART_SetConfig+0x336>
 8003972:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003976:	d817      	bhi.n	80039a8 <UART_SetConfig+0x33c>
 8003978:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800397c:	d00b      	beq.n	8003996 <UART_SetConfig+0x32a>
 800397e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003982:	d811      	bhi.n	80039a8 <UART_SetConfig+0x33c>
 8003984:	2b00      	cmp	r3, #0
 8003986:	d003      	beq.n	8003990 <UART_SetConfig+0x324>
 8003988:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800398c:	d006      	beq.n	800399c <UART_SetConfig+0x330>
 800398e:	e00b      	b.n	80039a8 <UART_SetConfig+0x33c>
 8003990:	2300      	movs	r3, #0
 8003992:	77fb      	strb	r3, [r7, #31]
 8003994:	e00d      	b.n	80039b2 <UART_SetConfig+0x346>
 8003996:	2302      	movs	r3, #2
 8003998:	77fb      	strb	r3, [r7, #31]
 800399a:	e00a      	b.n	80039b2 <UART_SetConfig+0x346>
 800399c:	2304      	movs	r3, #4
 800399e:	77fb      	strb	r3, [r7, #31]
 80039a0:	e007      	b.n	80039b2 <UART_SetConfig+0x346>
 80039a2:	2308      	movs	r3, #8
 80039a4:	77fb      	strb	r3, [r7, #31]
 80039a6:	e004      	b.n	80039b2 <UART_SetConfig+0x346>
 80039a8:	2310      	movs	r3, #16
 80039aa:	77fb      	strb	r3, [r7, #31]
 80039ac:	e001      	b.n	80039b2 <UART_SetConfig+0x346>
 80039ae:	2310      	movs	r3, #16
 80039b0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039ba:	d15b      	bne.n	8003a74 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80039bc:	7ffb      	ldrb	r3, [r7, #31]
 80039be:	2b08      	cmp	r3, #8
 80039c0:	d827      	bhi.n	8003a12 <UART_SetConfig+0x3a6>
 80039c2:	a201      	add	r2, pc, #4	; (adr r2, 80039c8 <UART_SetConfig+0x35c>)
 80039c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c8:	080039ed 	.word	0x080039ed
 80039cc:	080039f5 	.word	0x080039f5
 80039d0:	080039fd 	.word	0x080039fd
 80039d4:	08003a13 	.word	0x08003a13
 80039d8:	08003a03 	.word	0x08003a03
 80039dc:	08003a13 	.word	0x08003a13
 80039e0:	08003a13 	.word	0x08003a13
 80039e4:	08003a13 	.word	0x08003a13
 80039e8:	08003a0b 	.word	0x08003a0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039ec:	f7fe fbb2 	bl	8002154 <HAL_RCC_GetPCLK1Freq>
 80039f0:	61b8      	str	r0, [r7, #24]
        break;
 80039f2:	e013      	b.n	8003a1c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039f4:	f7fe fbc2 	bl	800217c <HAL_RCC_GetPCLK2Freq>
 80039f8:	61b8      	str	r0, [r7, #24]
        break;
 80039fa:	e00f      	b.n	8003a1c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039fc:	4b4b      	ldr	r3, [pc, #300]	; (8003b2c <UART_SetConfig+0x4c0>)
 80039fe:	61bb      	str	r3, [r7, #24]
        break;
 8003a00:	e00c      	b.n	8003a1c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a02:	f7fe fab9 	bl	8001f78 <HAL_RCC_GetSysClockFreq>
 8003a06:	61b8      	str	r0, [r7, #24]
        break;
 8003a08:	e008      	b.n	8003a1c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a0e:	61bb      	str	r3, [r7, #24]
        break;
 8003a10:	e004      	b.n	8003a1c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8003a12:	2300      	movs	r3, #0
 8003a14:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	77bb      	strb	r3, [r7, #30]
        break;
 8003a1a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d074      	beq.n	8003b0c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	005a      	lsls	r2, r3, #1
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	085b      	lsrs	r3, r3, #1
 8003a2c:	441a      	add	r2, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	2b0f      	cmp	r3, #15
 8003a3e:	d916      	bls.n	8003a6e <UART_SetConfig+0x402>
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a46:	d212      	bcs.n	8003a6e <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	f023 030f 	bic.w	r3, r3, #15
 8003a50:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	085b      	lsrs	r3, r3, #1
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	f003 0307 	and.w	r3, r3, #7
 8003a5c:	b29a      	uxth	r2, r3
 8003a5e:	89fb      	ldrh	r3, [r7, #14]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	89fa      	ldrh	r2, [r7, #14]
 8003a6a:	60da      	str	r2, [r3, #12]
 8003a6c:	e04e      	b.n	8003b0c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	77bb      	strb	r3, [r7, #30]
 8003a72:	e04b      	b.n	8003b0c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a74:	7ffb      	ldrb	r3, [r7, #31]
 8003a76:	2b08      	cmp	r3, #8
 8003a78:	d827      	bhi.n	8003aca <UART_SetConfig+0x45e>
 8003a7a:	a201      	add	r2, pc, #4	; (adr r2, 8003a80 <UART_SetConfig+0x414>)
 8003a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a80:	08003aa5 	.word	0x08003aa5
 8003a84:	08003aad 	.word	0x08003aad
 8003a88:	08003ab5 	.word	0x08003ab5
 8003a8c:	08003acb 	.word	0x08003acb
 8003a90:	08003abb 	.word	0x08003abb
 8003a94:	08003acb 	.word	0x08003acb
 8003a98:	08003acb 	.word	0x08003acb
 8003a9c:	08003acb 	.word	0x08003acb
 8003aa0:	08003ac3 	.word	0x08003ac3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003aa4:	f7fe fb56 	bl	8002154 <HAL_RCC_GetPCLK1Freq>
 8003aa8:	61b8      	str	r0, [r7, #24]
        break;
 8003aaa:	e013      	b.n	8003ad4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003aac:	f7fe fb66 	bl	800217c <HAL_RCC_GetPCLK2Freq>
 8003ab0:	61b8      	str	r0, [r7, #24]
        break;
 8003ab2:	e00f      	b.n	8003ad4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ab4:	4b1d      	ldr	r3, [pc, #116]	; (8003b2c <UART_SetConfig+0x4c0>)
 8003ab6:	61bb      	str	r3, [r7, #24]
        break;
 8003ab8:	e00c      	b.n	8003ad4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003aba:	f7fe fa5d 	bl	8001f78 <HAL_RCC_GetSysClockFreq>
 8003abe:	61b8      	str	r0, [r7, #24]
        break;
 8003ac0:	e008      	b.n	8003ad4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ac2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ac6:	61bb      	str	r3, [r7, #24]
        break;
 8003ac8:	e004      	b.n	8003ad4 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8003aca:	2300      	movs	r3, #0
 8003acc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	77bb      	strb	r3, [r7, #30]
        break;
 8003ad2:	bf00      	nop
    }

    if (pclk != 0U)
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d018      	beq.n	8003b0c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	085a      	lsrs	r2, r3, #1
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	441a      	add	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	2b0f      	cmp	r3, #15
 8003af4:	d908      	bls.n	8003b08 <UART_SetConfig+0x49c>
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003afc:	d204      	bcs.n	8003b08 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	693a      	ldr	r2, [r7, #16]
 8003b04:	60da      	str	r2, [r3, #12]
 8003b06:	e001      	b.n	8003b0c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003b18:	7fbb      	ldrb	r3, [r7, #30]
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3720      	adds	r7, #32
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	40007c00 	.word	0x40007c00
 8003b28:	40023800 	.word	0x40023800
 8003b2c:	00f42400 	.word	0x00f42400

08003b30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3c:	f003 0301 	and.w	r3, r3, #1
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00a      	beq.n	8003b5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	430a      	orrs	r2, r1
 8003b58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5e:	f003 0302 	and.w	r3, r3, #2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00a      	beq.n	8003b7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	430a      	orrs	r2, r1
 8003b7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b80:	f003 0304 	and.w	r3, r3, #4
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00a      	beq.n	8003b9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba2:	f003 0308 	and.w	r3, r3, #8
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00a      	beq.n	8003bc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc4:	f003 0310 	and.w	r3, r3, #16
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d00a      	beq.n	8003be2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	430a      	orrs	r2, r1
 8003be0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be6:	f003 0320 	and.w	r3, r3, #32
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d00a      	beq.n	8003c04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	430a      	orrs	r2, r1
 8003c02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d01a      	beq.n	8003c46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	430a      	orrs	r2, r1
 8003c24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c2e:	d10a      	bne.n	8003c46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	430a      	orrs	r2, r1
 8003c44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00a      	beq.n	8003c68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	430a      	orrs	r2, r1
 8003c66:	605a      	str	r2, [r3, #4]
  }
}
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b086      	sub	sp, #24
 8003c78:	af02      	add	r7, sp, #8
 8003c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c84:	f7fd f9fa 	bl	800107c <HAL_GetTick>
 8003c88:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0308 	and.w	r3, r3, #8
 8003c94:	2b08      	cmp	r3, #8
 8003c96:	d10e      	bne.n	8003cb6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c9c:	9300      	str	r3, [sp, #0]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 f82d 	bl	8003d06 <UART_WaitOnFlagUntilTimeout>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e023      	b.n	8003cfe <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0304 	and.w	r3, r3, #4
 8003cc0:	2b04      	cmp	r3, #4
 8003cc2:	d10e      	bne.n	8003ce2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cc4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003cc8:	9300      	str	r3, [sp, #0]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 f817 	bl	8003d06 <UART_WaitOnFlagUntilTimeout>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d001      	beq.n	8003ce2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e00d      	b.n	8003cfe <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2220      	movs	r2, #32
 8003ce6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2220      	movs	r2, #32
 8003cec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3710      	adds	r7, #16
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b084      	sub	sp, #16
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	60f8      	str	r0, [r7, #12]
 8003d0e:	60b9      	str	r1, [r7, #8]
 8003d10:	603b      	str	r3, [r7, #0]
 8003d12:	4613      	mov	r3, r2
 8003d14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d16:	e05e      	b.n	8003dd6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d1e:	d05a      	beq.n	8003dd6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d20:	f7fd f9ac 	bl	800107c <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	69ba      	ldr	r2, [r7, #24]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d302      	bcc.n	8003d36 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d11b      	bne.n	8003d6e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003d44:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	689a      	ldr	r2, [r3, #8]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f022 0201 	bic.w	r2, r2, #1
 8003d54:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2220      	movs	r2, #32
 8003d5a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2220      	movs	r2, #32
 8003d60:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e043      	b.n	8003df6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0304 	and.w	r3, r3, #4
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d02c      	beq.n	8003dd6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	69db      	ldr	r3, [r3, #28]
 8003d82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d8a:	d124      	bne.n	8003dd6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d94:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003da4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	689a      	ldr	r2, [r3, #8]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f022 0201 	bic.w	r2, r2, #1
 8003db4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2220      	movs	r2, #32
 8003dba:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2220      	movs	r2, #32
 8003dc0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2220      	movs	r2, #32
 8003dc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e00f      	b.n	8003df6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	69da      	ldr	r2, [r3, #28]
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	4013      	ands	r3, r2
 8003de0:	68ba      	ldr	r2, [r7, #8]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	bf0c      	ite	eq
 8003de6:	2301      	moveq	r3, #1
 8003de8:	2300      	movne	r3, #0
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	461a      	mov	r2, r3
 8003dee:	79fb      	ldrb	r3, [r7, #7]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d091      	beq.n	8003d18 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003dfe:	b480      	push	{r7}
 8003e00:	b083      	sub	sp, #12
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003e14:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	689a      	ldr	r2, [r3, #8]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f022 0201 	bic.w	r2, r2, #1
 8003e24:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d107      	bne.n	8003e3e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f022 0210 	bic.w	r2, r2, #16
 8003e3c:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2220      	movs	r2, #32
 8003e42:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003e50:	bf00      	nop
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e68:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	f7ff fbd6 	bl	800362c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e80:	bf00      	nop
 8003e82:	3710      	adds	r7, #16
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e9e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2220      	movs	r2, #32
 8003ea4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f7ff fbb3 	bl	8003618 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003eb2:	bf00      	nop
 8003eb4:	3708      	adds	r7, #8
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}

08003eba <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003eba:	b480      	push	{r7}
 8003ebc:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8003ebe:	bf00      	nop
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ece:	f3ef 8305 	mrs	r3, IPSR
 8003ed2:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ed4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10f      	bne.n	8003efa <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eda:	f3ef 8310 	mrs	r3, PRIMASK
 8003ede:	607b      	str	r3, [r7, #4]
  return(result);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d105      	bne.n	8003ef2 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003ee6:	f3ef 8311 	mrs	r3, BASEPRI
 8003eea:	603b      	str	r3, [r7, #0]
  return(result);
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d007      	beq.n	8003f02 <osKernelInitialize+0x3a>
 8003ef2:	4b0e      	ldr	r3, [pc, #56]	; (8003f2c <osKernelInitialize+0x64>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d103      	bne.n	8003f02 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003efa:	f06f 0305 	mvn.w	r3, #5
 8003efe:	60fb      	str	r3, [r7, #12]
 8003f00:	e00c      	b.n	8003f1c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003f02:	4b0a      	ldr	r3, [pc, #40]	; (8003f2c <osKernelInitialize+0x64>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d105      	bne.n	8003f16 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003f0a:	4b08      	ldr	r3, [pc, #32]	; (8003f2c <osKernelInitialize+0x64>)
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003f10:	2300      	movs	r3, #0
 8003f12:	60fb      	str	r3, [r7, #12]
 8003f14:	e002      	b.n	8003f1c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003f16:	f04f 33ff 	mov.w	r3, #4294967295
 8003f1a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3714      	adds	r7, #20
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	2000019c 	.word	0x2000019c

08003f30 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f36:	f3ef 8305 	mrs	r3, IPSR
 8003f3a:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f3c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d10f      	bne.n	8003f62 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f42:	f3ef 8310 	mrs	r3, PRIMASK
 8003f46:	607b      	str	r3, [r7, #4]
  return(result);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d105      	bne.n	8003f5a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003f4e:	f3ef 8311 	mrs	r3, BASEPRI
 8003f52:	603b      	str	r3, [r7, #0]
  return(result);
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d007      	beq.n	8003f6a <osKernelStart+0x3a>
 8003f5a:	4b0f      	ldr	r3, [pc, #60]	; (8003f98 <osKernelStart+0x68>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d103      	bne.n	8003f6a <osKernelStart+0x3a>
    stat = osErrorISR;
 8003f62:	f06f 0305 	mvn.w	r3, #5
 8003f66:	60fb      	str	r3, [r7, #12]
 8003f68:	e010      	b.n	8003f8c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003f6a:	4b0b      	ldr	r3, [pc, #44]	; (8003f98 <osKernelStart+0x68>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d109      	bne.n	8003f86 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003f72:	f7ff ffa2 	bl	8003eba <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003f76:	4b08      	ldr	r3, [pc, #32]	; (8003f98 <osKernelStart+0x68>)
 8003f78:	2202      	movs	r2, #2
 8003f7a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003f7c:	f001 fbfa 	bl	8005774 <vTaskStartScheduler>
      stat = osOK;
 8003f80:	2300      	movs	r3, #0
 8003f82:	60fb      	str	r3, [r7, #12]
 8003f84:	e002      	b.n	8003f8c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8003f86:	f04f 33ff 	mov.w	r3, #4294967295
 8003f8a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3710      	adds	r7, #16
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	2000019c 	.word	0x2000019c

08003f9c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b090      	sub	sp, #64	; 0x40
 8003fa0:	af04      	add	r7, sp, #16
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003fac:	f3ef 8305 	mrs	r3, IPSR
 8003fb0:	61fb      	str	r3, [r7, #28]
  return(result);
 8003fb2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f040 808f 	bne.w	80040d8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fba:	f3ef 8310 	mrs	r3, PRIMASK
 8003fbe:	61bb      	str	r3, [r7, #24]
  return(result);
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d105      	bne.n	8003fd2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003fc6:	f3ef 8311 	mrs	r3, BASEPRI
 8003fca:	617b      	str	r3, [r7, #20]
  return(result);
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d003      	beq.n	8003fda <osThreadNew+0x3e>
 8003fd2:	4b44      	ldr	r3, [pc, #272]	; (80040e4 <osThreadNew+0x148>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d07e      	beq.n	80040d8 <osThreadNew+0x13c>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d07b      	beq.n	80040d8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8003fe0:	2380      	movs	r3, #128	; 0x80
 8003fe2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8003fe4:	2318      	movs	r3, #24
 8003fe6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8003fec:	f04f 33ff 	mov.w	r3, #4294967295
 8003ff0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d045      	beq.n	8004084 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d002      	beq.n	8004006 <osThreadNew+0x6a>
        name = attr->name;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d002      	beq.n	8004014 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004016:	2b00      	cmp	r3, #0
 8004018:	d008      	beq.n	800402c <osThreadNew+0x90>
 800401a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401c:	2b38      	cmp	r3, #56	; 0x38
 800401e:	d805      	bhi.n	800402c <osThreadNew+0x90>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f003 0301 	and.w	r3, r3, #1
 8004028:	2b00      	cmp	r3, #0
 800402a:	d001      	beq.n	8004030 <osThreadNew+0x94>
        return (NULL);
 800402c:	2300      	movs	r3, #0
 800402e:	e054      	b.n	80040da <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	695b      	ldr	r3, [r3, #20]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d003      	beq.n	8004040 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	695b      	ldr	r3, [r3, #20]
 800403c:	089b      	lsrs	r3, r3, #2
 800403e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d00e      	beq.n	8004066 <osThreadNew+0xca>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	2bbb      	cmp	r3, #187	; 0xbb
 800404e:	d90a      	bls.n	8004066 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004054:	2b00      	cmp	r3, #0
 8004056:	d006      	beq.n	8004066 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	695b      	ldr	r3, [r3, #20]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d002      	beq.n	8004066 <osThreadNew+0xca>
        mem = 1;
 8004060:	2301      	movs	r3, #1
 8004062:	623b      	str	r3, [r7, #32]
 8004064:	e010      	b.n	8004088 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d10c      	bne.n	8004088 <osThreadNew+0xec>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d108      	bne.n	8004088 <osThreadNew+0xec>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d104      	bne.n	8004088 <osThreadNew+0xec>
          mem = 0;
 800407e:	2300      	movs	r3, #0
 8004080:	623b      	str	r3, [r7, #32]
 8004082:	e001      	b.n	8004088 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004084:	2300      	movs	r3, #0
 8004086:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004088:	6a3b      	ldr	r3, [r7, #32]
 800408a:	2b01      	cmp	r3, #1
 800408c:	d110      	bne.n	80040b0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004096:	9202      	str	r2, [sp, #8]
 8004098:	9301      	str	r3, [sp, #4]
 800409a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409c:	9300      	str	r3, [sp, #0]
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040a4:	68f8      	ldr	r0, [r7, #12]
 80040a6:	f001 f96f 	bl	8005388 <xTaskCreateStatic>
 80040aa:	4603      	mov	r3, r0
 80040ac:	613b      	str	r3, [r7, #16]
 80040ae:	e013      	b.n	80040d8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80040b0:	6a3b      	ldr	r3, [r7, #32]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d110      	bne.n	80040d8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80040b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b8:	b29a      	uxth	r2, r3
 80040ba:	f107 0310 	add.w	r3, r7, #16
 80040be:	9301      	str	r3, [sp, #4]
 80040c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c2:	9300      	str	r3, [sp, #0]
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040c8:	68f8      	ldr	r0, [r7, #12]
 80040ca:	f001 f9c0 	bl	800544e <xTaskCreate>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d001      	beq.n	80040d8 <osThreadNew+0x13c>
          hTask = NULL;
 80040d4:	2300      	movs	r3, #0
 80040d6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80040d8:	693b      	ldr	r3, [r7, #16]
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3730      	adds	r7, #48	; 0x30
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	2000019c 	.word	0x2000019c

080040e8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b086      	sub	sp, #24
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040f0:	f3ef 8305 	mrs	r3, IPSR
 80040f4:	613b      	str	r3, [r7, #16]
  return(result);
 80040f6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d10f      	bne.n	800411c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040fc:	f3ef 8310 	mrs	r3, PRIMASK
 8004100:	60fb      	str	r3, [r7, #12]
  return(result);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d105      	bne.n	8004114 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004108:	f3ef 8311 	mrs	r3, BASEPRI
 800410c:	60bb      	str	r3, [r7, #8]
  return(result);
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d007      	beq.n	8004124 <osDelay+0x3c>
 8004114:	4b0a      	ldr	r3, [pc, #40]	; (8004140 <osDelay+0x58>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2b02      	cmp	r3, #2
 800411a:	d103      	bne.n	8004124 <osDelay+0x3c>
    stat = osErrorISR;
 800411c:	f06f 0305 	mvn.w	r3, #5
 8004120:	617b      	str	r3, [r7, #20]
 8004122:	e007      	b.n	8004134 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004124:	2300      	movs	r3, #0
 8004126:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d002      	beq.n	8004134 <osDelay+0x4c>
      vTaskDelay(ticks);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f001 faea 	bl	8005708 <vTaskDelay>
    }
  }

  return (stat);
 8004134:	697b      	ldr	r3, [r7, #20]
}
 8004136:	4618      	mov	r0, r3
 8004138:	3718      	adds	r7, #24
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	2000019c 	.word	0x2000019c

08004144 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004144:	b480      	push	{r7}
 8004146:	b085      	sub	sp, #20
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	4a07      	ldr	r2, [pc, #28]	; (8004170 <vApplicationGetIdleTaskMemory+0x2c>)
 8004154:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	4a06      	ldr	r2, [pc, #24]	; (8004174 <vApplicationGetIdleTaskMemory+0x30>)
 800415a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2280      	movs	r2, #128	; 0x80
 8004160:	601a      	str	r2, [r3, #0]
}
 8004162:	bf00      	nop
 8004164:	3714      	adds	r7, #20
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	200001a0 	.word	0x200001a0
 8004174:	2000025c 	.word	0x2000025c

08004178 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004178:	b480      	push	{r7}
 800417a:	b085      	sub	sp, #20
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	4a07      	ldr	r2, [pc, #28]	; (80041a4 <vApplicationGetTimerTaskMemory+0x2c>)
 8004188:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	4a06      	ldr	r2, [pc, #24]	; (80041a8 <vApplicationGetTimerTaskMemory+0x30>)
 800418e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004196:	601a      	str	r2, [r3, #0]
}
 8004198:	bf00      	nop
 800419a:	3714      	adds	r7, #20
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr
 80041a4:	2000045c 	.word	0x2000045c
 80041a8:	20000518 	.word	0x20000518

080041ac <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80041b2:	2020      	movs	r0, #32
 80041b4:	f002 ffa6 	bl	8007104 <pvPortMalloc>
 80041b8:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00a      	beq.n	80041d6 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	3304      	adds	r3, #4
 80041ca:	4618      	mov	r0, r3
 80041cc:	f000 f9b0 	bl	8004530 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80041d6:	687b      	ldr	r3, [r7, #4]
	}
 80041d8:	4618      	mov	r0, r3
 80041da:	3708      	adds	r7, #8
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b090      	sub	sp, #64	; 0x40
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
 80041ec:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80041f2:	2300      	movs	r3, #0
 80041f4:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80041f6:	2300      	movs	r3, #0
 80041f8:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d10c      	bne.n	800421a <xEventGroupWaitBits+0x3a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004204:	b672      	cpsid	i
 8004206:	f383 8811 	msr	BASEPRI, r3
 800420a:	f3bf 8f6f 	isb	sy
 800420e:	f3bf 8f4f 	dsb	sy
 8004212:	b662      	cpsie	i
 8004214:	623b      	str	r3, [r7, #32]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004216:	bf00      	nop
 8004218:	e7fe      	b.n	8004218 <xEventGroupWaitBits+0x38>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d00c      	beq.n	800423e <xEventGroupWaitBits+0x5e>
	__asm volatile
 8004224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004228:	b672      	cpsid	i
 800422a:	f383 8811 	msr	BASEPRI, r3
 800422e:	f3bf 8f6f 	isb	sy
 8004232:	f3bf 8f4f 	dsb	sy
 8004236:	b662      	cpsie	i
 8004238:	61fb      	str	r3, [r7, #28]
}
 800423a:	bf00      	nop
 800423c:	e7fe      	b.n	800423c <xEventGroupWaitBits+0x5c>
	configASSERT( uxBitsToWaitFor != 0 );
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d10c      	bne.n	800425e <xEventGroupWaitBits+0x7e>
	__asm volatile
 8004244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004248:	b672      	cpsid	i
 800424a:	f383 8811 	msr	BASEPRI, r3
 800424e:	f3bf 8f6f 	isb	sy
 8004252:	f3bf 8f4f 	dsb	sy
 8004256:	b662      	cpsie	i
 8004258:	61bb      	str	r3, [r7, #24]
}
 800425a:	bf00      	nop
 800425c:	e7fe      	b.n	800425c <xEventGroupWaitBits+0x7c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800425e:	f001 ffa1 	bl	80061a4 <xTaskGetSchedulerState>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d102      	bne.n	800426e <xEventGroupWaitBits+0x8e>
 8004268:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800426a:	2b00      	cmp	r3, #0
 800426c:	d101      	bne.n	8004272 <xEventGroupWaitBits+0x92>
 800426e:	2301      	movs	r3, #1
 8004270:	e000      	b.n	8004274 <xEventGroupWaitBits+0x94>
 8004272:	2300      	movs	r3, #0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d10c      	bne.n	8004292 <xEventGroupWaitBits+0xb2>
	__asm volatile
 8004278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800427c:	b672      	cpsid	i
 800427e:	f383 8811 	msr	BASEPRI, r3
 8004282:	f3bf 8f6f 	isb	sy
 8004286:	f3bf 8f4f 	dsb	sy
 800428a:	b662      	cpsie	i
 800428c:	617b      	str	r3, [r7, #20]
}
 800428e:	bf00      	nop
 8004290:	e7fe      	b.n	8004290 <xEventGroupWaitBits+0xb0>
	}
	#endif

	vTaskSuspendAll();
 8004292:	f001 fae3 	bl	800585c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8004296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800429c:	683a      	ldr	r2, [r7, #0]
 800429e:	68b9      	ldr	r1, [r7, #8]
 80042a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80042a2:	f000 f90f 	bl	80044c4 <prvTestWaitCondition>
 80042a6:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80042a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00e      	beq.n	80042cc <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80042ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b0:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80042b2:	2300      	movs	r3, #0
 80042b4:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d028      	beq.n	800430e <xEventGroupWaitBits+0x12e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80042bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	43db      	mvns	r3, r3
 80042c4:	401a      	ands	r2, r3
 80042c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042c8:	601a      	str	r2, [r3, #0]
 80042ca:	e020      	b.n	800430e <xEventGroupWaitBits+0x12e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80042cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d104      	bne.n	80042dc <xEventGroupWaitBits+0xfc>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80042d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042d4:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 80042d6:	2301      	movs	r3, #1
 80042d8:	633b      	str	r3, [r7, #48]	; 0x30
 80042da:	e018      	b.n	800430e <xEventGroupWaitBits+0x12e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d003      	beq.n	80042ea <xEventGroupWaitBits+0x10a>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80042e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042e8:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d003      	beq.n	80042f8 <xEventGroupWaitBits+0x118>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80042f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80042f6:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80042f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042fa:	1d18      	adds	r0, r3, #4
 80042fc:	68ba      	ldr	r2, [r7, #8]
 80042fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004300:	4313      	orrs	r3, r2
 8004302:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004304:	4619      	mov	r1, r3
 8004306:	f001 fcaf 	bl	8005c68 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800430a:	2300      	movs	r3, #0
 800430c:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800430e:	f001 fab3 	bl	8005878 <xTaskResumeAll>
 8004312:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8004314:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004316:	2b00      	cmp	r3, #0
 8004318:	d031      	beq.n	800437e <xEventGroupWaitBits+0x19e>
	{
		if( xAlreadyYielded == pdFALSE )
 800431a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431c:	2b00      	cmp	r3, #0
 800431e:	d107      	bne.n	8004330 <xEventGroupWaitBits+0x150>
		{
			portYIELD_WITHIN_API();
 8004320:	4b19      	ldr	r3, [pc, #100]	; (8004388 <xEventGroupWaitBits+0x1a8>)
 8004322:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004326:	601a      	str	r2, [r3, #0]
 8004328:	f3bf 8f4f 	dsb	sy
 800432c:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8004330:	f002 f8b6 	bl	80064a0 <uxTaskResetEventItemValue>
 8004334:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8004336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004338:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d11a      	bne.n	8004376 <xEventGroupWaitBits+0x196>
		{
			taskENTER_CRITICAL();
 8004340:	f002 fdb4 	bl	8006eac <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8004344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800434a:	683a      	ldr	r2, [r7, #0]
 800434c:	68b9      	ldr	r1, [r7, #8]
 800434e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004350:	f000 f8b8 	bl	80044c4 <prvTestWaitCondition>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d009      	beq.n	800436e <xEventGroupWaitBits+0x18e>
				{
					if( xClearOnExit != pdFALSE )
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d006      	beq.n	800436e <xEventGroupWaitBits+0x18e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8004360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	43db      	mvns	r3, r3
 8004368:	401a      	ands	r2, r3
 800436a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800436c:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800436e:	2301      	movs	r3, #1
 8004370:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8004372:	f002 fdcf 	bl	8006f14 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004378:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800437c:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800437e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004380:	4618      	mov	r0, r3
 8004382:	3740      	adds	r7, #64	; 0x40
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	e000ed04 	.word	0xe000ed04

0800438c <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b08e      	sub	sp, #56	; 0x38
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8004396:	2300      	movs	r3, #0
 8004398:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800439e:	2300      	movs	r3, #0
 80043a0:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d10c      	bne.n	80043c2 <xEventGroupSetBits+0x36>
	__asm volatile
 80043a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ac:	b672      	cpsid	i
 80043ae:	f383 8811 	msr	BASEPRI, r3
 80043b2:	f3bf 8f6f 	isb	sy
 80043b6:	f3bf 8f4f 	dsb	sy
 80043ba:	b662      	cpsie	i
 80043bc:	613b      	str	r3, [r7, #16]
}
 80043be:	bf00      	nop
 80043c0:	e7fe      	b.n	80043c0 <xEventGroupSetBits+0x34>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00c      	beq.n	80043e6 <xEventGroupSetBits+0x5a>
	__asm volatile
 80043cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d0:	b672      	cpsid	i
 80043d2:	f383 8811 	msr	BASEPRI, r3
 80043d6:	f3bf 8f6f 	isb	sy
 80043da:	f3bf 8f4f 	dsb	sy
 80043de:	b662      	cpsie	i
 80043e0:	60fb      	str	r3, [r7, #12]
}
 80043e2:	bf00      	nop
 80043e4:	e7fe      	b.n	80043e4 <xEventGroupSetBits+0x58>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80043e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e8:	3304      	adds	r3, #4
 80043ea:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ee:	3308      	adds	r3, #8
 80043f0:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80043f2:	f001 fa33 	bl	800585c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80043f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80043fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	431a      	orrs	r2, r3
 8004404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004406:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8004408:	e03c      	b.n	8004484 <xEventGroupSetBits+0xf8>
		{
			pxNext = listGET_NEXT( pxListItem );
 800440a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8004410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8004416:	2300      	movs	r3, #0
 8004418:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004420:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004428:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d108      	bne.n	8004446 <xEventGroupSetBits+0xba>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8004434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	4013      	ands	r3, r2
 800443c:	2b00      	cmp	r3, #0
 800443e:	d00b      	beq.n	8004458 <xEventGroupSetBits+0xcc>
				{
					xMatchFound = pdTRUE;
 8004440:	2301      	movs	r3, #1
 8004442:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004444:	e008      	b.n	8004458 <xEventGroupSetBits+0xcc>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8004446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	4013      	ands	r3, r2
 800444e:	69ba      	ldr	r2, [r7, #24]
 8004450:	429a      	cmp	r2, r3
 8004452:	d101      	bne.n	8004458 <xEventGroupSetBits+0xcc>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8004454:	2301      	movs	r3, #1
 8004456:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8004458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800445a:	2b00      	cmp	r3, #0
 800445c:	d010      	beq.n	8004480 <xEventGroupSetBits+0xf4>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d003      	beq.n	8004470 <xEventGroupSetBits+0xe4>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8004468:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	4313      	orrs	r3, r2
 800446e:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8004470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004478:	4619      	mov	r1, r3
 800447a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800447c:	f001 fcc8 	bl	8005e10 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8004484:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004486:	6a3b      	ldr	r3, [r7, #32]
 8004488:	429a      	cmp	r2, r3
 800448a:	d1be      	bne.n	800440a <xEventGroupSetBits+0x7e>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800448c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004492:	43db      	mvns	r3, r3
 8004494:	401a      	ands	r2, r3
 8004496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004498:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800449a:	f001 f9ed 	bl	8005878 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800449e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a0:	681b      	ldr	r3, [r3, #0]
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3738      	adds	r7, #56	; 0x38
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}

080044aa <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80044aa:	b580      	push	{r7, lr}
 80044ac:	b082      	sub	sp, #8
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
 80044b2:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80044b4:	6839      	ldr	r1, [r7, #0]
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f7ff ff68 	bl	800438c <xEventGroupSetBits>
}
 80044bc:	bf00      	nop
 80044be:	3708      	adds	r7, #8
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80044c4:	b480      	push	{r7}
 80044c6:	b087      	sub	sp, #28
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80044d0:	2300      	movs	r3, #0
 80044d2:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d107      	bne.n	80044ea <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	4013      	ands	r3, r2
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d00a      	beq.n	80044fa <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80044e4:	2301      	movs	r3, #1
 80044e6:	617b      	str	r3, [r7, #20]
 80044e8:	e007      	b.n	80044fa <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	4013      	ands	r3, r2
 80044f0:	68ba      	ldr	r2, [r7, #8]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d101      	bne.n	80044fa <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80044f6:	2301      	movs	r3, #1
 80044f8:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80044fa:	697b      	ldr	r3, [r7, #20]
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	371c      	adds	r7, #28
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8004508:	b580      	push	{r7, lr}
 800450a:	b086      	sub	sp, #24
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	68ba      	ldr	r2, [r7, #8]
 8004518:	68f9      	ldr	r1, [r7, #12]
 800451a:	4804      	ldr	r0, [pc, #16]	; (800452c <xEventGroupSetBitsFromISR+0x24>)
 800451c:	f002 fb9c 	bl	8006c58 <xTimerPendFunctionCallFromISR>
 8004520:	6178      	str	r0, [r7, #20]

		return xReturn;
 8004522:	697b      	ldr	r3, [r7, #20]
	}
 8004524:	4618      	mov	r0, r3
 8004526:	3718      	adds	r7, #24
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	080044ab 	.word	0x080044ab

08004530 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f103 0208 	add.w	r2, r3, #8
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f04f 32ff 	mov.w	r2, #4294967295
 8004548:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f103 0208 	add.w	r2, r3, #8
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f103 0208 	add.w	r2, r3, #8
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004564:	bf00      	nop
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800457e:	bf00      	nop
 8004580:	370c      	adds	r7, #12
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr

0800458a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800458a:	b480      	push	{r7}
 800458c:	b085      	sub	sp, #20
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
 8004592:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	68fa      	ldr	r2, [r7, #12]
 800459e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	689a      	ldr	r2, [r3, #8]
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	683a      	ldr	r2, [r7, #0]
 80045ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	683a      	ldr	r2, [r7, #0]
 80045b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	1c5a      	adds	r2, r3, #1
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	601a      	str	r2, [r3, #0]
}
 80045c6:	bf00      	nop
 80045c8:	3714      	adds	r7, #20
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr

080045d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80045d2:	b480      	push	{r7}
 80045d4:	b085      	sub	sp, #20
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
 80045da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e8:	d103      	bne.n	80045f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	60fb      	str	r3, [r7, #12]
 80045f0:	e00c      	b.n	800460c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	3308      	adds	r3, #8
 80045f6:	60fb      	str	r3, [r7, #12]
 80045f8:	e002      	b.n	8004600 <vListInsert+0x2e>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	60fb      	str	r3, [r7, #12]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68ba      	ldr	r2, [r7, #8]
 8004608:	429a      	cmp	r2, r3
 800460a:	d2f6      	bcs.n	80045fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	685a      	ldr	r2, [r3, #4]
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	683a      	ldr	r2, [r7, #0]
 800461a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	683a      	ldr	r2, [r7, #0]
 8004626:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	1c5a      	adds	r2, r3, #1
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	601a      	str	r2, [r3, #0]
}
 8004638:	bf00      	nop
 800463a:	3714      	adds	r7, #20
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	6892      	ldr	r2, [r2, #8]
 800465a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	6852      	ldr	r2, [r2, #4]
 8004664:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	429a      	cmp	r2, r3
 800466e:	d103      	bne.n	8004678 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689a      	ldr	r2, [r3, #8]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	1e5a      	subs	r2, r3, #1
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
}
 800468c:	4618      	mov	r0, r3
 800468e:	3714      	adds	r7, #20
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d10c      	bne.n	80046c6 <xQueueGenericReset+0x2e>
	__asm volatile
 80046ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b0:	b672      	cpsid	i
 80046b2:	f383 8811 	msr	BASEPRI, r3
 80046b6:	f3bf 8f6f 	isb	sy
 80046ba:	f3bf 8f4f 	dsb	sy
 80046be:	b662      	cpsie	i
 80046c0:	60bb      	str	r3, [r7, #8]
}
 80046c2:	bf00      	nop
 80046c4:	e7fe      	b.n	80046c4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80046c6:	f002 fbf1 	bl	8006eac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d2:	68f9      	ldr	r1, [r7, #12]
 80046d4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80046d6:	fb01 f303 	mul.w	r3, r1, r3
 80046da:	441a      	add	r2, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2200      	movs	r2, #0
 80046e4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046f6:	3b01      	subs	r3, #1
 80046f8:	68f9      	ldr	r1, [r7, #12]
 80046fa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80046fc:	fb01 f303 	mul.w	r3, r1, r3
 8004700:	441a      	add	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	22ff      	movs	r2, #255	; 0xff
 800470a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	22ff      	movs	r2, #255	; 0xff
 8004712:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d114      	bne.n	8004746 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	691b      	ldr	r3, [r3, #16]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d01a      	beq.n	800475a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	3310      	adds	r3, #16
 8004728:	4618      	mov	r0, r3
 800472a:	f001 fb0b 	bl	8005d44 <xTaskRemoveFromEventList>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d012      	beq.n	800475a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004734:	4b0c      	ldr	r3, [pc, #48]	; (8004768 <xQueueGenericReset+0xd0>)
 8004736:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800473a:	601a      	str	r2, [r3, #0]
 800473c:	f3bf 8f4f 	dsb	sy
 8004740:	f3bf 8f6f 	isb	sy
 8004744:	e009      	b.n	800475a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	3310      	adds	r3, #16
 800474a:	4618      	mov	r0, r3
 800474c:	f7ff fef0 	bl	8004530 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	3324      	adds	r3, #36	; 0x24
 8004754:	4618      	mov	r0, r3
 8004756:	f7ff feeb 	bl	8004530 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800475a:	f002 fbdb 	bl	8006f14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800475e:	2301      	movs	r3, #1
}
 8004760:	4618      	mov	r0, r3
 8004762:	3710      	adds	r7, #16
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	e000ed04 	.word	0xe000ed04

0800476c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800476c:	b580      	push	{r7, lr}
 800476e:	b08e      	sub	sp, #56	; 0x38
 8004770:	af02      	add	r7, sp, #8
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	607a      	str	r2, [r7, #4]
 8004778:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d10c      	bne.n	800479a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8004780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004784:	b672      	cpsid	i
 8004786:	f383 8811 	msr	BASEPRI, r3
 800478a:	f3bf 8f6f 	isb	sy
 800478e:	f3bf 8f4f 	dsb	sy
 8004792:	b662      	cpsie	i
 8004794:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004796:	bf00      	nop
 8004798:	e7fe      	b.n	8004798 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d10c      	bne.n	80047ba <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80047a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a4:	b672      	cpsid	i
 80047a6:	f383 8811 	msr	BASEPRI, r3
 80047aa:	f3bf 8f6f 	isb	sy
 80047ae:	f3bf 8f4f 	dsb	sy
 80047b2:	b662      	cpsie	i
 80047b4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80047b6:	bf00      	nop
 80047b8:	e7fe      	b.n	80047b8 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d002      	beq.n	80047c6 <xQueueGenericCreateStatic+0x5a>
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d001      	beq.n	80047ca <xQueueGenericCreateStatic+0x5e>
 80047c6:	2301      	movs	r3, #1
 80047c8:	e000      	b.n	80047cc <xQueueGenericCreateStatic+0x60>
 80047ca:	2300      	movs	r3, #0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d10c      	bne.n	80047ea <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80047d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d4:	b672      	cpsid	i
 80047d6:	f383 8811 	msr	BASEPRI, r3
 80047da:	f3bf 8f6f 	isb	sy
 80047de:	f3bf 8f4f 	dsb	sy
 80047e2:	b662      	cpsie	i
 80047e4:	623b      	str	r3, [r7, #32]
}
 80047e6:	bf00      	nop
 80047e8:	e7fe      	b.n	80047e8 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d102      	bne.n	80047f6 <xQueueGenericCreateStatic+0x8a>
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d101      	bne.n	80047fa <xQueueGenericCreateStatic+0x8e>
 80047f6:	2301      	movs	r3, #1
 80047f8:	e000      	b.n	80047fc <xQueueGenericCreateStatic+0x90>
 80047fa:	2300      	movs	r3, #0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d10c      	bne.n	800481a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8004800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004804:	b672      	cpsid	i
 8004806:	f383 8811 	msr	BASEPRI, r3
 800480a:	f3bf 8f6f 	isb	sy
 800480e:	f3bf 8f4f 	dsb	sy
 8004812:	b662      	cpsie	i
 8004814:	61fb      	str	r3, [r7, #28]
}
 8004816:	bf00      	nop
 8004818:	e7fe      	b.n	8004818 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800481a:	2350      	movs	r3, #80	; 0x50
 800481c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	2b50      	cmp	r3, #80	; 0x50
 8004822:	d00c      	beq.n	800483e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8004824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004828:	b672      	cpsid	i
 800482a:	f383 8811 	msr	BASEPRI, r3
 800482e:	f3bf 8f6f 	isb	sy
 8004832:	f3bf 8f4f 	dsb	sy
 8004836:	b662      	cpsie	i
 8004838:	61bb      	str	r3, [r7, #24]
}
 800483a:	bf00      	nop
 800483c:	e7fe      	b.n	800483c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800483e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00d      	beq.n	8004866 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800484a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800484c:	2201      	movs	r2, #1
 800484e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004852:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004858:	9300      	str	r3, [sp, #0]
 800485a:	4613      	mov	r3, r2
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	68b9      	ldr	r1, [r7, #8]
 8004860:	68f8      	ldr	r0, [r7, #12]
 8004862:	f000 f847 	bl	80048f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004868:	4618      	mov	r0, r3
 800486a:	3730      	adds	r7, #48	; 0x30
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004870:	b580      	push	{r7, lr}
 8004872:	b08a      	sub	sp, #40	; 0x28
 8004874:	af02      	add	r7, sp, #8
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	4613      	mov	r3, r2
 800487c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d10c      	bne.n	800489e <xQueueGenericCreate+0x2e>
	__asm volatile
 8004884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004888:	b672      	cpsid	i
 800488a:	f383 8811 	msr	BASEPRI, r3
 800488e:	f3bf 8f6f 	isb	sy
 8004892:	f3bf 8f4f 	dsb	sy
 8004896:	b662      	cpsie	i
 8004898:	613b      	str	r3, [r7, #16]
}
 800489a:	bf00      	nop
 800489c:	e7fe      	b.n	800489c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d102      	bne.n	80048aa <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80048a4:	2300      	movs	r3, #0
 80048a6:	61fb      	str	r3, [r7, #28]
 80048a8:	e004      	b.n	80048b4 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	68ba      	ldr	r2, [r7, #8]
 80048ae:	fb02 f303 	mul.w	r3, r2, r3
 80048b2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	3350      	adds	r3, #80	; 0x50
 80048b8:	4618      	mov	r0, r3
 80048ba:	f002 fc23 	bl	8007104 <pvPortMalloc>
 80048be:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d011      	beq.n	80048ea <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	3350      	adds	r3, #80	; 0x50
 80048ce:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	2200      	movs	r2, #0
 80048d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80048d8:	79fa      	ldrb	r2, [r7, #7]
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	9300      	str	r3, [sp, #0]
 80048de:	4613      	mov	r3, r2
 80048e0:	697a      	ldr	r2, [r7, #20]
 80048e2:	68b9      	ldr	r1, [r7, #8]
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	f000 f805 	bl	80048f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80048ea:	69bb      	ldr	r3, [r7, #24]
	}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3720      	adds	r7, #32
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	607a      	str	r2, [r7, #4]
 8004900:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d103      	bne.n	8004910 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	69ba      	ldr	r2, [r7, #24]
 800490c:	601a      	str	r2, [r3, #0]
 800490e:	e002      	b.n	8004916 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	68ba      	ldr	r2, [r7, #8]
 8004920:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004922:	2101      	movs	r1, #1
 8004924:	69b8      	ldr	r0, [r7, #24]
 8004926:	f7ff feb7 	bl	8004698 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	78fa      	ldrb	r2, [r7, #3]
 800492e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004932:	bf00      	nop
 8004934:	3710      	adds	r7, #16
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
	...

0800493c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b08e      	sub	sp, #56	; 0x38
 8004940:	af00      	add	r7, sp, #0
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	607a      	str	r2, [r7, #4]
 8004948:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800494a:	2300      	movs	r3, #0
 800494c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004954:	2b00      	cmp	r3, #0
 8004956:	d10c      	bne.n	8004972 <xQueueGenericSend+0x36>
	__asm volatile
 8004958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800495c:	b672      	cpsid	i
 800495e:	f383 8811 	msr	BASEPRI, r3
 8004962:	f3bf 8f6f 	isb	sy
 8004966:	f3bf 8f4f 	dsb	sy
 800496a:	b662      	cpsie	i
 800496c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800496e:	bf00      	nop
 8004970:	e7fe      	b.n	8004970 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d103      	bne.n	8004980 <xQueueGenericSend+0x44>
 8004978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800497a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497c:	2b00      	cmp	r3, #0
 800497e:	d101      	bne.n	8004984 <xQueueGenericSend+0x48>
 8004980:	2301      	movs	r3, #1
 8004982:	e000      	b.n	8004986 <xQueueGenericSend+0x4a>
 8004984:	2300      	movs	r3, #0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d10c      	bne.n	80049a4 <xQueueGenericSend+0x68>
	__asm volatile
 800498a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800498e:	b672      	cpsid	i
 8004990:	f383 8811 	msr	BASEPRI, r3
 8004994:	f3bf 8f6f 	isb	sy
 8004998:	f3bf 8f4f 	dsb	sy
 800499c:	b662      	cpsie	i
 800499e:	627b      	str	r3, [r7, #36]	; 0x24
}
 80049a0:	bf00      	nop
 80049a2:	e7fe      	b.n	80049a2 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d103      	bne.n	80049b2 <xQueueGenericSend+0x76>
 80049aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d101      	bne.n	80049b6 <xQueueGenericSend+0x7a>
 80049b2:	2301      	movs	r3, #1
 80049b4:	e000      	b.n	80049b8 <xQueueGenericSend+0x7c>
 80049b6:	2300      	movs	r3, #0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d10c      	bne.n	80049d6 <xQueueGenericSend+0x9a>
	__asm volatile
 80049bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c0:	b672      	cpsid	i
 80049c2:	f383 8811 	msr	BASEPRI, r3
 80049c6:	f3bf 8f6f 	isb	sy
 80049ca:	f3bf 8f4f 	dsb	sy
 80049ce:	b662      	cpsie	i
 80049d0:	623b      	str	r3, [r7, #32]
}
 80049d2:	bf00      	nop
 80049d4:	e7fe      	b.n	80049d4 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80049d6:	f001 fbe5 	bl	80061a4 <xTaskGetSchedulerState>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d102      	bne.n	80049e6 <xQueueGenericSend+0xaa>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d101      	bne.n	80049ea <xQueueGenericSend+0xae>
 80049e6:	2301      	movs	r3, #1
 80049e8:	e000      	b.n	80049ec <xQueueGenericSend+0xb0>
 80049ea:	2300      	movs	r3, #0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d10c      	bne.n	8004a0a <xQueueGenericSend+0xce>
	__asm volatile
 80049f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f4:	b672      	cpsid	i
 80049f6:	f383 8811 	msr	BASEPRI, r3
 80049fa:	f3bf 8f6f 	isb	sy
 80049fe:	f3bf 8f4f 	dsb	sy
 8004a02:	b662      	cpsie	i
 8004a04:	61fb      	str	r3, [r7, #28]
}
 8004a06:	bf00      	nop
 8004a08:	e7fe      	b.n	8004a08 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a0a:	f002 fa4f 	bl	8006eac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d302      	bcc.n	8004a20 <xQueueGenericSend+0xe4>
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d129      	bne.n	8004a74 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a20:	683a      	ldr	r2, [r7, #0]
 8004a22:	68b9      	ldr	r1, [r7, #8]
 8004a24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a26:	f000 fb41 	bl	80050ac <prvCopyDataToQueue>
 8004a2a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d010      	beq.n	8004a56 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a36:	3324      	adds	r3, #36	; 0x24
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f001 f983 	bl	8005d44 <xTaskRemoveFromEventList>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d013      	beq.n	8004a6c <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004a44:	4b3f      	ldr	r3, [pc, #252]	; (8004b44 <xQueueGenericSend+0x208>)
 8004a46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a4a:	601a      	str	r2, [r3, #0]
 8004a4c:	f3bf 8f4f 	dsb	sy
 8004a50:	f3bf 8f6f 	isb	sy
 8004a54:	e00a      	b.n	8004a6c <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d007      	beq.n	8004a6c <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004a5c:	4b39      	ldr	r3, [pc, #228]	; (8004b44 <xQueueGenericSend+0x208>)
 8004a5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a62:	601a      	str	r2, [r3, #0]
 8004a64:	f3bf 8f4f 	dsb	sy
 8004a68:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004a6c:	f002 fa52 	bl	8006f14 <vPortExitCritical>
				return pdPASS;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e063      	b.n	8004b3c <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d103      	bne.n	8004a82 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004a7a:	f002 fa4b 	bl	8006f14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	e05c      	b.n	8004b3c <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d106      	bne.n	8004a96 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a88:	f107 0314 	add.w	r3, r7, #20
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f001 fa25 	bl	8005edc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a92:	2301      	movs	r3, #1
 8004a94:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a96:	f002 fa3d 	bl	8006f14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a9a:	f000 fedf 	bl	800585c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a9e:	f002 fa05 	bl	8006eac <vPortEnterCritical>
 8004aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004aa8:	b25b      	sxtb	r3, r3
 8004aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aae:	d103      	bne.n	8004ab8 <xQueueGenericSend+0x17c>
 8004ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004abe:	b25b      	sxtb	r3, r3
 8004ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ac4:	d103      	bne.n	8004ace <xQueueGenericSend+0x192>
 8004ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ace:	f002 fa21 	bl	8006f14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ad2:	1d3a      	adds	r2, r7, #4
 8004ad4:	f107 0314 	add.w	r3, r7, #20
 8004ad8:	4611      	mov	r1, r2
 8004ada:	4618      	mov	r0, r3
 8004adc:	f001 fa14 	bl	8005f08 <xTaskCheckForTimeOut>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d124      	bne.n	8004b30 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004ae6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ae8:	f000 fbd8 	bl	800529c <prvIsQueueFull>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d018      	beq.n	8004b24 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af4:	3310      	adds	r3, #16
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	4611      	mov	r1, r2
 8004afa:	4618      	mov	r0, r3
 8004afc:	f001 f88e 	bl	8005c1c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004b00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b02:	f000 fb63 	bl	80051cc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004b06:	f000 feb7 	bl	8005878 <xTaskResumeAll>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	f47f af7c 	bne.w	8004a0a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8004b12:	4b0c      	ldr	r3, [pc, #48]	; (8004b44 <xQueueGenericSend+0x208>)
 8004b14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b18:	601a      	str	r2, [r3, #0]
 8004b1a:	f3bf 8f4f 	dsb	sy
 8004b1e:	f3bf 8f6f 	isb	sy
 8004b22:	e772      	b.n	8004a0a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004b24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b26:	f000 fb51 	bl	80051cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b2a:	f000 fea5 	bl	8005878 <xTaskResumeAll>
 8004b2e:	e76c      	b.n	8004a0a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004b30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b32:	f000 fb4b 	bl	80051cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b36:	f000 fe9f 	bl	8005878 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004b3a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3738      	adds	r7, #56	; 0x38
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	e000ed04 	.word	0xe000ed04

08004b48 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b08e      	sub	sp, #56	; 0x38
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]
 8004b54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d10c      	bne.n	8004b7a <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8004b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b64:	b672      	cpsid	i
 8004b66:	f383 8811 	msr	BASEPRI, r3
 8004b6a:	f3bf 8f6f 	isb	sy
 8004b6e:	f3bf 8f4f 	dsb	sy
 8004b72:	b662      	cpsie	i
 8004b74:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004b76:	bf00      	nop
 8004b78:	e7fe      	b.n	8004b78 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d103      	bne.n	8004b88 <xQueueGenericSendFromISR+0x40>
 8004b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d101      	bne.n	8004b8c <xQueueGenericSendFromISR+0x44>
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e000      	b.n	8004b8e <xQueueGenericSendFromISR+0x46>
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d10c      	bne.n	8004bac <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8004b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b96:	b672      	cpsid	i
 8004b98:	f383 8811 	msr	BASEPRI, r3
 8004b9c:	f3bf 8f6f 	isb	sy
 8004ba0:	f3bf 8f4f 	dsb	sy
 8004ba4:	b662      	cpsie	i
 8004ba6:	623b      	str	r3, [r7, #32]
}
 8004ba8:	bf00      	nop
 8004baa:	e7fe      	b.n	8004baa <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d103      	bne.n	8004bba <xQueueGenericSendFromISR+0x72>
 8004bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d101      	bne.n	8004bbe <xQueueGenericSendFromISR+0x76>
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e000      	b.n	8004bc0 <xQueueGenericSendFromISR+0x78>
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d10c      	bne.n	8004bde <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8004bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc8:	b672      	cpsid	i
 8004bca:	f383 8811 	msr	BASEPRI, r3
 8004bce:	f3bf 8f6f 	isb	sy
 8004bd2:	f3bf 8f4f 	dsb	sy
 8004bd6:	b662      	cpsie	i
 8004bd8:	61fb      	str	r3, [r7, #28]
}
 8004bda:	bf00      	nop
 8004bdc:	e7fe      	b.n	8004bdc <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004bde:	f002 fa4d 	bl	800707c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004be2:	f3ef 8211 	mrs	r2, BASEPRI
 8004be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bea:	b672      	cpsid	i
 8004bec:	f383 8811 	msr	BASEPRI, r3
 8004bf0:	f3bf 8f6f 	isb	sy
 8004bf4:	f3bf 8f4f 	dsb	sy
 8004bf8:	b662      	cpsie	i
 8004bfa:	61ba      	str	r2, [r7, #24]
 8004bfc:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004bfe:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004c00:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d302      	bcc.n	8004c14 <xQueueGenericSendFromISR+0xcc>
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d12c      	bne.n	8004c6e <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c1e:	683a      	ldr	r2, [r7, #0]
 8004c20:	68b9      	ldr	r1, [r7, #8]
 8004c22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c24:	f000 fa42 	bl	80050ac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004c28:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c30:	d112      	bne.n	8004c58 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d016      	beq.n	8004c68 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c3c:	3324      	adds	r3, #36	; 0x24
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f001 f880 	bl	8005d44 <xTaskRemoveFromEventList>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00e      	beq.n	8004c68 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d00b      	beq.n	8004c68 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	601a      	str	r2, [r3, #0]
 8004c56:	e007      	b.n	8004c68 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004c58:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	b25a      	sxtb	r2, r3
 8004c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004c6c:	e001      	b.n	8004c72 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	637b      	str	r3, [r7, #52]	; 0x34
 8004c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c74:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004c7c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3738      	adds	r7, #56	; 0x38
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b08c      	sub	sp, #48	; 0x30
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004c94:	2300      	movs	r3, #0
 8004c96:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d10c      	bne.n	8004cbc <xQueueReceive+0x34>
	__asm volatile
 8004ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca6:	b672      	cpsid	i
 8004ca8:	f383 8811 	msr	BASEPRI, r3
 8004cac:	f3bf 8f6f 	isb	sy
 8004cb0:	f3bf 8f4f 	dsb	sy
 8004cb4:	b662      	cpsie	i
 8004cb6:	623b      	str	r3, [r7, #32]
}
 8004cb8:	bf00      	nop
 8004cba:	e7fe      	b.n	8004cba <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d103      	bne.n	8004cca <xQueueReceive+0x42>
 8004cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d101      	bne.n	8004cce <xQueueReceive+0x46>
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e000      	b.n	8004cd0 <xQueueReceive+0x48>
 8004cce:	2300      	movs	r3, #0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d10c      	bne.n	8004cee <xQueueReceive+0x66>
	__asm volatile
 8004cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd8:	b672      	cpsid	i
 8004cda:	f383 8811 	msr	BASEPRI, r3
 8004cde:	f3bf 8f6f 	isb	sy
 8004ce2:	f3bf 8f4f 	dsb	sy
 8004ce6:	b662      	cpsie	i
 8004ce8:	61fb      	str	r3, [r7, #28]
}
 8004cea:	bf00      	nop
 8004cec:	e7fe      	b.n	8004cec <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004cee:	f001 fa59 	bl	80061a4 <xTaskGetSchedulerState>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d102      	bne.n	8004cfe <xQueueReceive+0x76>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d101      	bne.n	8004d02 <xQueueReceive+0x7a>
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e000      	b.n	8004d04 <xQueueReceive+0x7c>
 8004d02:	2300      	movs	r3, #0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d10c      	bne.n	8004d22 <xQueueReceive+0x9a>
	__asm volatile
 8004d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d0c:	b672      	cpsid	i
 8004d0e:	f383 8811 	msr	BASEPRI, r3
 8004d12:	f3bf 8f6f 	isb	sy
 8004d16:	f3bf 8f4f 	dsb	sy
 8004d1a:	b662      	cpsie	i
 8004d1c:	61bb      	str	r3, [r7, #24]
}
 8004d1e:	bf00      	nop
 8004d20:	e7fe      	b.n	8004d20 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d22:	f002 f8c3 	bl	8006eac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d2a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d01f      	beq.n	8004d72 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004d32:	68b9      	ldr	r1, [r7, #8]
 8004d34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d36:	f000 fa23 	bl	8005180 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3c:	1e5a      	subs	r2, r3, #1
 8004d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d40:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d00f      	beq.n	8004d6a <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4c:	3310      	adds	r3, #16
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f000 fff8 	bl	8005d44 <xTaskRemoveFromEventList>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d007      	beq.n	8004d6a <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004d5a:	4b3d      	ldr	r3, [pc, #244]	; (8004e50 <xQueueReceive+0x1c8>)
 8004d5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d60:	601a      	str	r2, [r3, #0]
 8004d62:	f3bf 8f4f 	dsb	sy
 8004d66:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004d6a:	f002 f8d3 	bl	8006f14 <vPortExitCritical>
				return pdPASS;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e069      	b.n	8004e46 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d103      	bne.n	8004d80 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004d78:	f002 f8cc 	bl	8006f14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	e062      	b.n	8004e46 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d106      	bne.n	8004d94 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d86:	f107 0310 	add.w	r3, r7, #16
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f001 f8a6 	bl	8005edc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d90:	2301      	movs	r3, #1
 8004d92:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d94:	f002 f8be 	bl	8006f14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d98:	f000 fd60 	bl	800585c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d9c:	f002 f886 	bl	8006eac <vPortEnterCritical>
 8004da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004da6:	b25b      	sxtb	r3, r3
 8004da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dac:	d103      	bne.n	8004db6 <xQueueReceive+0x12e>
 8004dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004dbc:	b25b      	sxtb	r3, r3
 8004dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc2:	d103      	bne.n	8004dcc <xQueueReceive+0x144>
 8004dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004dcc:	f002 f8a2 	bl	8006f14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004dd0:	1d3a      	adds	r2, r7, #4
 8004dd2:	f107 0310 	add.w	r3, r7, #16
 8004dd6:	4611      	mov	r1, r2
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f001 f895 	bl	8005f08 <xTaskCheckForTimeOut>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d123      	bne.n	8004e2c <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004de4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004de6:	f000 fa43 	bl	8005270 <prvIsQueueEmpty>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d017      	beq.n	8004e20 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df2:	3324      	adds	r3, #36	; 0x24
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	4611      	mov	r1, r2
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f000 ff0f 	bl	8005c1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004dfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e00:	f000 f9e4 	bl	80051cc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004e04:	f000 fd38 	bl	8005878 <xTaskResumeAll>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d189      	bne.n	8004d22 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8004e0e:	4b10      	ldr	r3, [pc, #64]	; (8004e50 <xQueueReceive+0x1c8>)
 8004e10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e14:	601a      	str	r2, [r3, #0]
 8004e16:	f3bf 8f4f 	dsb	sy
 8004e1a:	f3bf 8f6f 	isb	sy
 8004e1e:	e780      	b.n	8004d22 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004e20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e22:	f000 f9d3 	bl	80051cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e26:	f000 fd27 	bl	8005878 <xTaskResumeAll>
 8004e2a:	e77a      	b.n	8004d22 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004e2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e2e:	f000 f9cd 	bl	80051cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e32:	f000 fd21 	bl	8005878 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e38:	f000 fa1a 	bl	8005270 <prvIsQueueEmpty>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	f43f af6f 	beq.w	8004d22 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004e44:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3730      	adds	r7, #48	; 0x30
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	e000ed04 	.word	0xe000ed04

08004e54 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b08e      	sub	sp, #56	; 0x38
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004e66:	2300      	movs	r3, #0
 8004e68:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d10c      	bne.n	8004e8a <xQueueSemaphoreTake+0x36>
	__asm volatile
 8004e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e74:	b672      	cpsid	i
 8004e76:	f383 8811 	msr	BASEPRI, r3
 8004e7a:	f3bf 8f6f 	isb	sy
 8004e7e:	f3bf 8f4f 	dsb	sy
 8004e82:	b662      	cpsie	i
 8004e84:	623b      	str	r3, [r7, #32]
}
 8004e86:	bf00      	nop
 8004e88:	e7fe      	b.n	8004e88 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00c      	beq.n	8004eac <xQueueSemaphoreTake+0x58>
	__asm volatile
 8004e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e96:	b672      	cpsid	i
 8004e98:	f383 8811 	msr	BASEPRI, r3
 8004e9c:	f3bf 8f6f 	isb	sy
 8004ea0:	f3bf 8f4f 	dsb	sy
 8004ea4:	b662      	cpsie	i
 8004ea6:	61fb      	str	r3, [r7, #28]
}
 8004ea8:	bf00      	nop
 8004eaa:	e7fe      	b.n	8004eaa <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004eac:	f001 f97a 	bl	80061a4 <xTaskGetSchedulerState>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d102      	bne.n	8004ebc <xQueueSemaphoreTake+0x68>
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d101      	bne.n	8004ec0 <xQueueSemaphoreTake+0x6c>
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e000      	b.n	8004ec2 <xQueueSemaphoreTake+0x6e>
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d10c      	bne.n	8004ee0 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8004ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eca:	b672      	cpsid	i
 8004ecc:	f383 8811 	msr	BASEPRI, r3
 8004ed0:	f3bf 8f6f 	isb	sy
 8004ed4:	f3bf 8f4f 	dsb	sy
 8004ed8:	b662      	cpsie	i
 8004eda:	61bb      	str	r3, [r7, #24]
}
 8004edc:	bf00      	nop
 8004ede:	e7fe      	b.n	8004ede <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004ee0:	f001 ffe4 	bl	8006eac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d024      	beq.n	8004f3a <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef2:	1e5a      	subs	r2, r3, #1
 8004ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d104      	bne.n	8004f0a <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004f00:	f001 fae6 	bl	80064d0 <pvTaskIncrementMutexHeldCount>
 8004f04:	4602      	mov	r2, r0
 8004f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f08:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d00f      	beq.n	8004f32 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f14:	3310      	adds	r3, #16
 8004f16:	4618      	mov	r0, r3
 8004f18:	f000 ff14 	bl	8005d44 <xTaskRemoveFromEventList>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d007      	beq.n	8004f32 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004f22:	4b55      	ldr	r3, [pc, #340]	; (8005078 <xQueueSemaphoreTake+0x224>)
 8004f24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f28:	601a      	str	r2, [r3, #0]
 8004f2a:	f3bf 8f4f 	dsb	sy
 8004f2e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004f32:	f001 ffef 	bl	8006f14 <vPortExitCritical>
				return pdPASS;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e099      	b.n	800506e <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d113      	bne.n	8004f68 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00c      	beq.n	8004f60 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8004f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f4a:	b672      	cpsid	i
 8004f4c:	f383 8811 	msr	BASEPRI, r3
 8004f50:	f3bf 8f6f 	isb	sy
 8004f54:	f3bf 8f4f 	dsb	sy
 8004f58:	b662      	cpsie	i
 8004f5a:	617b      	str	r3, [r7, #20]
}
 8004f5c:	bf00      	nop
 8004f5e:	e7fe      	b.n	8004f5e <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004f60:	f001 ffd8 	bl	8006f14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004f64:	2300      	movs	r3, #0
 8004f66:	e082      	b.n	800506e <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d106      	bne.n	8004f7c <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004f6e:	f107 030c 	add.w	r3, r7, #12
 8004f72:	4618      	mov	r0, r3
 8004f74:	f000 ffb2 	bl	8005edc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004f7c:	f001 ffca 	bl	8006f14 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004f80:	f000 fc6c 	bl	800585c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f84:	f001 ff92 	bl	8006eac <vPortEnterCritical>
 8004f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f8e:	b25b      	sxtb	r3, r3
 8004f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f94:	d103      	bne.n	8004f9e <xQueueSemaphoreTake+0x14a>
 8004f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fa4:	b25b      	sxtb	r3, r3
 8004fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004faa:	d103      	bne.n	8004fb4 <xQueueSemaphoreTake+0x160>
 8004fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fb4:	f001 ffae 	bl	8006f14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004fb8:	463a      	mov	r2, r7
 8004fba:	f107 030c 	add.w	r3, r7, #12
 8004fbe:	4611      	mov	r1, r2
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f000 ffa1 	bl	8005f08 <xTaskCheckForTimeOut>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d132      	bne.n	8005032 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004fcc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004fce:	f000 f94f 	bl	8005270 <prvIsQueueEmpty>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d026      	beq.n	8005026 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d109      	bne.n	8004ff4 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8004fe0:	f001 ff64 	bl	8006eac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f001 f8f9 	bl	80061e0 <xTaskPriorityInherit>
 8004fee:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004ff0:	f001 ff90 	bl	8006f14 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff6:	3324      	adds	r3, #36	; 0x24
 8004ff8:	683a      	ldr	r2, [r7, #0]
 8004ffa:	4611      	mov	r1, r2
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f000 fe0d 	bl	8005c1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005002:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005004:	f000 f8e2 	bl	80051cc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005008:	f000 fc36 	bl	8005878 <xTaskResumeAll>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	f47f af66 	bne.w	8004ee0 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8005014:	4b18      	ldr	r3, [pc, #96]	; (8005078 <xQueueSemaphoreTake+0x224>)
 8005016:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800501a:	601a      	str	r2, [r3, #0]
 800501c:	f3bf 8f4f 	dsb	sy
 8005020:	f3bf 8f6f 	isb	sy
 8005024:	e75c      	b.n	8004ee0 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005026:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005028:	f000 f8d0 	bl	80051cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800502c:	f000 fc24 	bl	8005878 <xTaskResumeAll>
 8005030:	e756      	b.n	8004ee0 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005032:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005034:	f000 f8ca 	bl	80051cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005038:	f000 fc1e 	bl	8005878 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800503c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800503e:	f000 f917 	bl	8005270 <prvIsQueueEmpty>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	f43f af4b 	beq.w	8004ee0 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800504a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800504c:	2b00      	cmp	r3, #0
 800504e:	d00d      	beq.n	800506c <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8005050:	f001 ff2c 	bl	8006eac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005054:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005056:	f000 f811 	bl	800507c <prvGetDisinheritPriorityAfterTimeout>
 800505a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800505c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005062:	4618      	mov	r0, r3
 8005064:	f001 f996 	bl	8006394 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005068:	f001 ff54 	bl	8006f14 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800506c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800506e:	4618      	mov	r0, r3
 8005070:	3738      	adds	r7, #56	; 0x38
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	e000ed04 	.word	0xe000ed04

0800507c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800507c:	b480      	push	{r7}
 800507e:	b085      	sub	sp, #20
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005088:	2b00      	cmp	r3, #0
 800508a:	d006      	beq.n	800509a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8005096:	60fb      	str	r3, [r7, #12]
 8005098:	e001      	b.n	800509e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800509a:	2300      	movs	r3, #0
 800509c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800509e:	68fb      	ldr	r3, [r7, #12]
	}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3714      	adds	r7, #20
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr

080050ac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b086      	sub	sp, #24
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	60b9      	str	r1, [r7, #8]
 80050b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80050b8:	2300      	movs	r3, #0
 80050ba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d10d      	bne.n	80050e6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d14d      	bne.n	800516e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	4618      	mov	r0, r3
 80050d8:	f001 f8ea 	bl	80062b0 <xTaskPriorityDisinherit>
 80050dc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2200      	movs	r2, #0
 80050e2:	609a      	str	r2, [r3, #8]
 80050e4:	e043      	b.n	800516e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d119      	bne.n	8005120 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6858      	ldr	r0, [r3, #4]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f4:	461a      	mov	r2, r3
 80050f6:	68b9      	ldr	r1, [r7, #8]
 80050f8:	f005 feb3 	bl	800ae62 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	685a      	ldr	r2, [r3, #4]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005104:	441a      	add	r2, r3
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	685a      	ldr	r2, [r3, #4]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	429a      	cmp	r2, r3
 8005114:	d32b      	bcc.n	800516e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	605a      	str	r2, [r3, #4]
 800511e:	e026      	b.n	800516e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	68d8      	ldr	r0, [r3, #12]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005128:	461a      	mov	r2, r3
 800512a:	68b9      	ldr	r1, [r7, #8]
 800512c:	f005 fe99 	bl	800ae62 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	68da      	ldr	r2, [r3, #12]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005138:	425b      	negs	r3, r3
 800513a:	441a      	add	r2, r3
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	68da      	ldr	r2, [r3, #12]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	429a      	cmp	r2, r3
 800514a:	d207      	bcs.n	800515c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	689a      	ldr	r2, [r3, #8]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005154:	425b      	negs	r3, r3
 8005156:	441a      	add	r2, r3
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2b02      	cmp	r3, #2
 8005160:	d105      	bne.n	800516e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d002      	beq.n	800516e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	3b01      	subs	r3, #1
 800516c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	1c5a      	adds	r2, r3, #1
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005176:	697b      	ldr	r3, [r7, #20]
}
 8005178:	4618      	mov	r0, r3
 800517a:	3718      	adds	r7, #24
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b082      	sub	sp, #8
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518e:	2b00      	cmp	r3, #0
 8005190:	d018      	beq.n	80051c4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	68da      	ldr	r2, [r3, #12]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519a:	441a      	add	r2, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	68da      	ldr	r2, [r3, #12]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d303      	bcc.n	80051b4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	68d9      	ldr	r1, [r3, #12]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051bc:	461a      	mov	r2, r3
 80051be:	6838      	ldr	r0, [r7, #0]
 80051c0:	f005 fe4f 	bl	800ae62 <memcpy>
	}
}
 80051c4:	bf00      	nop
 80051c6:	3708      	adds	r7, #8
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b084      	sub	sp, #16
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80051d4:	f001 fe6a 	bl	8006eac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051de:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80051e0:	e011      	b.n	8005206 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d012      	beq.n	8005210 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	3324      	adds	r3, #36	; 0x24
 80051ee:	4618      	mov	r0, r3
 80051f0:	f000 fda8 	bl	8005d44 <xTaskRemoveFromEventList>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d001      	beq.n	80051fe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80051fa:	f000 feeb 	bl	8005fd4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80051fe:	7bfb      	ldrb	r3, [r7, #15]
 8005200:	3b01      	subs	r3, #1
 8005202:	b2db      	uxtb	r3, r3
 8005204:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800520a:	2b00      	cmp	r3, #0
 800520c:	dce9      	bgt.n	80051e2 <prvUnlockQueue+0x16>
 800520e:	e000      	b.n	8005212 <prvUnlockQueue+0x46>
					break;
 8005210:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	22ff      	movs	r2, #255	; 0xff
 8005216:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800521a:	f001 fe7b 	bl	8006f14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800521e:	f001 fe45 	bl	8006eac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005228:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800522a:	e011      	b.n	8005250 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d012      	beq.n	800525a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	3310      	adds	r3, #16
 8005238:	4618      	mov	r0, r3
 800523a:	f000 fd83 	bl	8005d44 <xTaskRemoveFromEventList>
 800523e:	4603      	mov	r3, r0
 8005240:	2b00      	cmp	r3, #0
 8005242:	d001      	beq.n	8005248 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005244:	f000 fec6 	bl	8005fd4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005248:	7bbb      	ldrb	r3, [r7, #14]
 800524a:	3b01      	subs	r3, #1
 800524c:	b2db      	uxtb	r3, r3
 800524e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005250:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005254:	2b00      	cmp	r3, #0
 8005256:	dce9      	bgt.n	800522c <prvUnlockQueue+0x60>
 8005258:	e000      	b.n	800525c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800525a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	22ff      	movs	r2, #255	; 0xff
 8005260:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005264:	f001 fe56 	bl	8006f14 <vPortExitCritical>
}
 8005268:	bf00      	nop
 800526a:	3710      	adds	r7, #16
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005278:	f001 fe18 	bl	8006eac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005280:	2b00      	cmp	r3, #0
 8005282:	d102      	bne.n	800528a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005284:	2301      	movs	r3, #1
 8005286:	60fb      	str	r3, [r7, #12]
 8005288:	e001      	b.n	800528e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800528a:	2300      	movs	r3, #0
 800528c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800528e:	f001 fe41 	bl	8006f14 <vPortExitCritical>

	return xReturn;
 8005292:	68fb      	ldr	r3, [r7, #12]
}
 8005294:	4618      	mov	r0, r3
 8005296:	3710      	adds	r7, #16
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80052a4:	f001 fe02 	bl	8006eac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d102      	bne.n	80052ba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80052b4:	2301      	movs	r3, #1
 80052b6:	60fb      	str	r3, [r7, #12]
 80052b8:	e001      	b.n	80052be <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80052ba:	2300      	movs	r3, #0
 80052bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80052be:	f001 fe29 	bl	8006f14 <vPortExitCritical>

	return xReturn;
 80052c2:	68fb      	ldr	r3, [r7, #12]
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3710      	adds	r7, #16
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80052cc:	b480      	push	{r7}
 80052ce:	b085      	sub	sp, #20
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80052d6:	2300      	movs	r3, #0
 80052d8:	60fb      	str	r3, [r7, #12]
 80052da:	e014      	b.n	8005306 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80052dc:	4a0f      	ldr	r2, [pc, #60]	; (800531c <vQueueAddToRegistry+0x50>)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d10b      	bne.n	8005300 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80052e8:	490c      	ldr	r1, [pc, #48]	; (800531c <vQueueAddToRegistry+0x50>)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	683a      	ldr	r2, [r7, #0]
 80052ee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80052f2:	4a0a      	ldr	r2, [pc, #40]	; (800531c <vQueueAddToRegistry+0x50>)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	00db      	lsls	r3, r3, #3
 80052f8:	4413      	add	r3, r2
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80052fe:	e006      	b.n	800530e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	3301      	adds	r3, #1
 8005304:	60fb      	str	r3, [r7, #12]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2b07      	cmp	r3, #7
 800530a:	d9e7      	bls.n	80052dc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800530c:	bf00      	nop
 800530e:	bf00      	nop
 8005310:	3714      	adds	r7, #20
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr
 800531a:	bf00      	nop
 800531c:	2000501c 	.word	0x2000501c

08005320 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005320:	b580      	push	{r7, lr}
 8005322:	b086      	sub	sp, #24
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005330:	f001 fdbc 	bl	8006eac <vPortEnterCritical>
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800533a:	b25b      	sxtb	r3, r3
 800533c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005340:	d103      	bne.n	800534a <vQueueWaitForMessageRestricted+0x2a>
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	2200      	movs	r2, #0
 8005346:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005350:	b25b      	sxtb	r3, r3
 8005352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005356:	d103      	bne.n	8005360 <vQueueWaitForMessageRestricted+0x40>
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	2200      	movs	r2, #0
 800535c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005360:	f001 fdd8 	bl	8006f14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005368:	2b00      	cmp	r3, #0
 800536a:	d106      	bne.n	800537a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	3324      	adds	r3, #36	; 0x24
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	68b9      	ldr	r1, [r7, #8]
 8005374:	4618      	mov	r0, r3
 8005376:	f000 fcb7 	bl	8005ce8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800537a:	6978      	ldr	r0, [r7, #20]
 800537c:	f7ff ff26 	bl	80051cc <prvUnlockQueue>
	}
 8005380:	bf00      	nop
 8005382:	3718      	adds	r7, #24
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005388:	b580      	push	{r7, lr}
 800538a:	b08e      	sub	sp, #56	; 0x38
 800538c:	af04      	add	r7, sp, #16
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	60b9      	str	r1, [r7, #8]
 8005392:	607a      	str	r2, [r7, #4]
 8005394:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005398:	2b00      	cmp	r3, #0
 800539a:	d10c      	bne.n	80053b6 <xTaskCreateStatic+0x2e>
	__asm volatile
 800539c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a0:	b672      	cpsid	i
 80053a2:	f383 8811 	msr	BASEPRI, r3
 80053a6:	f3bf 8f6f 	isb	sy
 80053aa:	f3bf 8f4f 	dsb	sy
 80053ae:	b662      	cpsie	i
 80053b0:	623b      	str	r3, [r7, #32]
}
 80053b2:	bf00      	nop
 80053b4:	e7fe      	b.n	80053b4 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80053b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d10c      	bne.n	80053d6 <xTaskCreateStatic+0x4e>
	__asm volatile
 80053bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c0:	b672      	cpsid	i
 80053c2:	f383 8811 	msr	BASEPRI, r3
 80053c6:	f3bf 8f6f 	isb	sy
 80053ca:	f3bf 8f4f 	dsb	sy
 80053ce:	b662      	cpsie	i
 80053d0:	61fb      	str	r3, [r7, #28]
}
 80053d2:	bf00      	nop
 80053d4:	e7fe      	b.n	80053d4 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80053d6:	23bc      	movs	r3, #188	; 0xbc
 80053d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	2bbc      	cmp	r3, #188	; 0xbc
 80053de:	d00c      	beq.n	80053fa <xTaskCreateStatic+0x72>
	__asm volatile
 80053e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e4:	b672      	cpsid	i
 80053e6:	f383 8811 	msr	BASEPRI, r3
 80053ea:	f3bf 8f6f 	isb	sy
 80053ee:	f3bf 8f4f 	dsb	sy
 80053f2:	b662      	cpsie	i
 80053f4:	61bb      	str	r3, [r7, #24]
}
 80053f6:	bf00      	nop
 80053f8:	e7fe      	b.n	80053f8 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80053fa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80053fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d01e      	beq.n	8005440 <xTaskCreateStatic+0xb8>
 8005402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005404:	2b00      	cmp	r3, #0
 8005406:	d01b      	beq.n	8005440 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800540a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800540c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005410:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005414:	2202      	movs	r2, #2
 8005416:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800541a:	2300      	movs	r3, #0
 800541c:	9303      	str	r3, [sp, #12]
 800541e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005420:	9302      	str	r3, [sp, #8]
 8005422:	f107 0314 	add.w	r3, r7, #20
 8005426:	9301      	str	r3, [sp, #4]
 8005428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800542a:	9300      	str	r3, [sp, #0]
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	68b9      	ldr	r1, [r7, #8]
 8005432:	68f8      	ldr	r0, [r7, #12]
 8005434:	f000 f850 	bl	80054d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005438:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800543a:	f000 f8f5 	bl	8005628 <prvAddNewTaskToReadyList>
 800543e:	e001      	b.n	8005444 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8005440:	2300      	movs	r3, #0
 8005442:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005444:	697b      	ldr	r3, [r7, #20]
	}
 8005446:	4618      	mov	r0, r3
 8005448:	3728      	adds	r7, #40	; 0x28
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}

0800544e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800544e:	b580      	push	{r7, lr}
 8005450:	b08c      	sub	sp, #48	; 0x30
 8005452:	af04      	add	r7, sp, #16
 8005454:	60f8      	str	r0, [r7, #12]
 8005456:	60b9      	str	r1, [r7, #8]
 8005458:	603b      	str	r3, [r7, #0]
 800545a:	4613      	mov	r3, r2
 800545c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800545e:	88fb      	ldrh	r3, [r7, #6]
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	4618      	mov	r0, r3
 8005464:	f001 fe4e 	bl	8007104 <pvPortMalloc>
 8005468:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d00e      	beq.n	800548e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005470:	20bc      	movs	r0, #188	; 0xbc
 8005472:	f001 fe47 	bl	8007104 <pvPortMalloc>
 8005476:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d003      	beq.n	8005486 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	697a      	ldr	r2, [r7, #20]
 8005482:	631a      	str	r2, [r3, #48]	; 0x30
 8005484:	e005      	b.n	8005492 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005486:	6978      	ldr	r0, [r7, #20]
 8005488:	f001 ff06 	bl	8007298 <vPortFree>
 800548c:	e001      	b.n	8005492 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800548e:	2300      	movs	r3, #0
 8005490:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d017      	beq.n	80054c8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	2200      	movs	r2, #0
 800549c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80054a0:	88fa      	ldrh	r2, [r7, #6]
 80054a2:	2300      	movs	r3, #0
 80054a4:	9303      	str	r3, [sp, #12]
 80054a6:	69fb      	ldr	r3, [r7, #28]
 80054a8:	9302      	str	r3, [sp, #8]
 80054aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ac:	9301      	str	r3, [sp, #4]
 80054ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b0:	9300      	str	r3, [sp, #0]
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	68b9      	ldr	r1, [r7, #8]
 80054b6:	68f8      	ldr	r0, [r7, #12]
 80054b8:	f000 f80e 	bl	80054d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80054bc:	69f8      	ldr	r0, [r7, #28]
 80054be:	f000 f8b3 	bl	8005628 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80054c2:	2301      	movs	r3, #1
 80054c4:	61bb      	str	r3, [r7, #24]
 80054c6:	e002      	b.n	80054ce <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80054c8:	f04f 33ff 	mov.w	r3, #4294967295
 80054cc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80054ce:	69bb      	ldr	r3, [r7, #24]
	}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3720      	adds	r7, #32
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b088      	sub	sp, #32
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	607a      	str	r2, [r7, #4]
 80054e4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80054e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	461a      	mov	r2, r3
 80054f0:	21a5      	movs	r1, #165	; 0xa5
 80054f2:	f005 fcc4 	bl	800ae7e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80054f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054fa:	6879      	ldr	r1, [r7, #4]
 80054fc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005500:	440b      	add	r3, r1
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	4413      	add	r3, r2
 8005506:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005508:	69bb      	ldr	r3, [r7, #24]
 800550a:	f023 0307 	bic.w	r3, r3, #7
 800550e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	f003 0307 	and.w	r3, r3, #7
 8005516:	2b00      	cmp	r3, #0
 8005518:	d00c      	beq.n	8005534 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800551a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800551e:	b672      	cpsid	i
 8005520:	f383 8811 	msr	BASEPRI, r3
 8005524:	f3bf 8f6f 	isb	sy
 8005528:	f3bf 8f4f 	dsb	sy
 800552c:	b662      	cpsie	i
 800552e:	617b      	str	r3, [r7, #20]
}
 8005530:	bf00      	nop
 8005532:	e7fe      	b.n	8005532 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d01f      	beq.n	800557a <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800553a:	2300      	movs	r3, #0
 800553c:	61fb      	str	r3, [r7, #28]
 800553e:	e012      	b.n	8005566 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005540:	68ba      	ldr	r2, [r7, #8]
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	4413      	add	r3, r2
 8005546:	7819      	ldrb	r1, [r3, #0]
 8005548:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	4413      	add	r3, r2
 800554e:	3334      	adds	r3, #52	; 0x34
 8005550:	460a      	mov	r2, r1
 8005552:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005554:	68ba      	ldr	r2, [r7, #8]
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	4413      	add	r3, r2
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d006      	beq.n	800556e <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	3301      	adds	r3, #1
 8005564:	61fb      	str	r3, [r7, #28]
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	2b0f      	cmp	r3, #15
 800556a:	d9e9      	bls.n	8005540 <prvInitialiseNewTask+0x68>
 800556c:	e000      	b.n	8005570 <prvInitialiseNewTask+0x98>
			{
				break;
 800556e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005572:	2200      	movs	r2, #0
 8005574:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005578:	e003      	b.n	8005582 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800557a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800557c:	2200      	movs	r2, #0
 800557e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005584:	2b37      	cmp	r3, #55	; 0x37
 8005586:	d901      	bls.n	800558c <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005588:	2337      	movs	r3, #55	; 0x37
 800558a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800558c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005590:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005594:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005596:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559a:	2200      	movs	r2, #0
 800559c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800559e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a0:	3304      	adds	r3, #4
 80055a2:	4618      	mov	r0, r3
 80055a4:	f7fe ffe4 	bl	8004570 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80055a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055aa:	3318      	adds	r3, #24
 80055ac:	4618      	mov	r0, r3
 80055ae:	f7fe ffdf 	bl	8004570 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80055b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055b6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80055be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80055c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055c6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80055c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ca:	2200      	movs	r2, #0
 80055cc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80055d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d2:	2200      	movs	r2, #0
 80055d4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80055d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055da:	3354      	adds	r3, #84	; 0x54
 80055dc:	2260      	movs	r2, #96	; 0x60
 80055de:	2100      	movs	r1, #0
 80055e0:	4618      	mov	r0, r3
 80055e2:	f005 fc4c 	bl	800ae7e <memset>
 80055e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e8:	4a0c      	ldr	r2, [pc, #48]	; (800561c <prvInitialiseNewTask+0x144>)
 80055ea:	659a      	str	r2, [r3, #88]	; 0x58
 80055ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ee:	4a0c      	ldr	r2, [pc, #48]	; (8005620 <prvInitialiseNewTask+0x148>)
 80055f0:	65da      	str	r2, [r3, #92]	; 0x5c
 80055f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f4:	4a0b      	ldr	r2, [pc, #44]	; (8005624 <prvInitialiseNewTask+0x14c>)
 80055f6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80055f8:	683a      	ldr	r2, [r7, #0]
 80055fa:	68f9      	ldr	r1, [r7, #12]
 80055fc:	69b8      	ldr	r0, [r7, #24]
 80055fe:	f001 fb4b 	bl	8006c98 <pxPortInitialiseStack>
 8005602:	4602      	mov	r2, r0
 8005604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005606:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800560a:	2b00      	cmp	r3, #0
 800560c:	d002      	beq.n	8005614 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800560e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005610:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005612:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005614:	bf00      	nop
 8005616:	3720      	adds	r7, #32
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}
 800561c:	0800c124 	.word	0x0800c124
 8005620:	0800c144 	.word	0x0800c144
 8005624:	0800c104 	.word	0x0800c104

08005628 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005630:	f001 fc3c 	bl	8006eac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005634:	4b2d      	ldr	r3, [pc, #180]	; (80056ec <prvAddNewTaskToReadyList+0xc4>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	3301      	adds	r3, #1
 800563a:	4a2c      	ldr	r2, [pc, #176]	; (80056ec <prvAddNewTaskToReadyList+0xc4>)
 800563c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800563e:	4b2c      	ldr	r3, [pc, #176]	; (80056f0 <prvAddNewTaskToReadyList+0xc8>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d109      	bne.n	800565a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005646:	4a2a      	ldr	r2, [pc, #168]	; (80056f0 <prvAddNewTaskToReadyList+0xc8>)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800564c:	4b27      	ldr	r3, [pc, #156]	; (80056ec <prvAddNewTaskToReadyList+0xc4>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2b01      	cmp	r3, #1
 8005652:	d110      	bne.n	8005676 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005654:	f000 fce2 	bl	800601c <prvInitialiseTaskLists>
 8005658:	e00d      	b.n	8005676 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800565a:	4b26      	ldr	r3, [pc, #152]	; (80056f4 <prvAddNewTaskToReadyList+0xcc>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d109      	bne.n	8005676 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005662:	4b23      	ldr	r3, [pc, #140]	; (80056f0 <prvAddNewTaskToReadyList+0xc8>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800566c:	429a      	cmp	r2, r3
 800566e:	d802      	bhi.n	8005676 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005670:	4a1f      	ldr	r2, [pc, #124]	; (80056f0 <prvAddNewTaskToReadyList+0xc8>)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005676:	4b20      	ldr	r3, [pc, #128]	; (80056f8 <prvAddNewTaskToReadyList+0xd0>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	3301      	adds	r3, #1
 800567c:	4a1e      	ldr	r2, [pc, #120]	; (80056f8 <prvAddNewTaskToReadyList+0xd0>)
 800567e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005680:	4b1d      	ldr	r3, [pc, #116]	; (80056f8 <prvAddNewTaskToReadyList+0xd0>)
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800568c:	4b1b      	ldr	r3, [pc, #108]	; (80056fc <prvAddNewTaskToReadyList+0xd4>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	429a      	cmp	r2, r3
 8005692:	d903      	bls.n	800569c <prvAddNewTaskToReadyList+0x74>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005698:	4a18      	ldr	r2, [pc, #96]	; (80056fc <prvAddNewTaskToReadyList+0xd4>)
 800569a:	6013      	str	r3, [r2, #0]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056a0:	4613      	mov	r3, r2
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	4413      	add	r3, r2
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	4a15      	ldr	r2, [pc, #84]	; (8005700 <prvAddNewTaskToReadyList+0xd8>)
 80056aa:	441a      	add	r2, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	3304      	adds	r3, #4
 80056b0:	4619      	mov	r1, r3
 80056b2:	4610      	mov	r0, r2
 80056b4:	f7fe ff69 	bl	800458a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80056b8:	f001 fc2c 	bl	8006f14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80056bc:	4b0d      	ldr	r3, [pc, #52]	; (80056f4 <prvAddNewTaskToReadyList+0xcc>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d00e      	beq.n	80056e2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80056c4:	4b0a      	ldr	r3, [pc, #40]	; (80056f0 <prvAddNewTaskToReadyList+0xc8>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d207      	bcs.n	80056e2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80056d2:	4b0c      	ldr	r3, [pc, #48]	; (8005704 <prvAddNewTaskToReadyList+0xdc>)
 80056d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056d8:	601a      	str	r2, [r3, #0]
 80056da:	f3bf 8f4f 	dsb	sy
 80056de:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056e2:	bf00      	nop
 80056e4:	3708      	adds	r7, #8
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	20000dec 	.word	0x20000dec
 80056f0:	20000918 	.word	0x20000918
 80056f4:	20000df8 	.word	0x20000df8
 80056f8:	20000e08 	.word	0x20000e08
 80056fc:	20000df4 	.word	0x20000df4
 8005700:	2000091c 	.word	0x2000091c
 8005704:	e000ed04 	.word	0xe000ed04

08005708 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005710:	2300      	movs	r3, #0
 8005712:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d019      	beq.n	800574e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800571a:	4b14      	ldr	r3, [pc, #80]	; (800576c <vTaskDelay+0x64>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d00c      	beq.n	800573c <vTaskDelay+0x34>
	__asm volatile
 8005722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005726:	b672      	cpsid	i
 8005728:	f383 8811 	msr	BASEPRI, r3
 800572c:	f3bf 8f6f 	isb	sy
 8005730:	f3bf 8f4f 	dsb	sy
 8005734:	b662      	cpsie	i
 8005736:	60bb      	str	r3, [r7, #8]
}
 8005738:	bf00      	nop
 800573a:	e7fe      	b.n	800573a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800573c:	f000 f88e 	bl	800585c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005740:	2100      	movs	r1, #0
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 fed8 	bl	80064f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005748:	f000 f896 	bl	8005878 <xTaskResumeAll>
 800574c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d107      	bne.n	8005764 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8005754:	4b06      	ldr	r3, [pc, #24]	; (8005770 <vTaskDelay+0x68>)
 8005756:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800575a:	601a      	str	r2, [r3, #0]
 800575c:	f3bf 8f4f 	dsb	sy
 8005760:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005764:	bf00      	nop
 8005766:	3710      	adds	r7, #16
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}
 800576c:	20000e14 	.word	0x20000e14
 8005770:	e000ed04 	.word	0xe000ed04

08005774 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b08a      	sub	sp, #40	; 0x28
 8005778:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800577a:	2300      	movs	r3, #0
 800577c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800577e:	2300      	movs	r3, #0
 8005780:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005782:	463a      	mov	r2, r7
 8005784:	1d39      	adds	r1, r7, #4
 8005786:	f107 0308 	add.w	r3, r7, #8
 800578a:	4618      	mov	r0, r3
 800578c:	f7fe fcda 	bl	8004144 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005790:	6839      	ldr	r1, [r7, #0]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	68ba      	ldr	r2, [r7, #8]
 8005796:	9202      	str	r2, [sp, #8]
 8005798:	9301      	str	r3, [sp, #4]
 800579a:	2300      	movs	r3, #0
 800579c:	9300      	str	r3, [sp, #0]
 800579e:	2300      	movs	r3, #0
 80057a0:	460a      	mov	r2, r1
 80057a2:	4926      	ldr	r1, [pc, #152]	; (800583c <vTaskStartScheduler+0xc8>)
 80057a4:	4826      	ldr	r0, [pc, #152]	; (8005840 <vTaskStartScheduler+0xcc>)
 80057a6:	f7ff fdef 	bl	8005388 <xTaskCreateStatic>
 80057aa:	4603      	mov	r3, r0
 80057ac:	4a25      	ldr	r2, [pc, #148]	; (8005844 <vTaskStartScheduler+0xd0>)
 80057ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80057b0:	4b24      	ldr	r3, [pc, #144]	; (8005844 <vTaskStartScheduler+0xd0>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d002      	beq.n	80057be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80057b8:	2301      	movs	r3, #1
 80057ba:	617b      	str	r3, [r7, #20]
 80057bc:	e001      	b.n	80057c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80057be:	2300      	movs	r3, #0
 80057c0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d102      	bne.n	80057ce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80057c8:	f000 feea 	bl	80065a0 <xTimerCreateTimerTask>
 80057cc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d11d      	bne.n	8005810 <vTaskStartScheduler+0x9c>
	__asm volatile
 80057d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d8:	b672      	cpsid	i
 80057da:	f383 8811 	msr	BASEPRI, r3
 80057de:	f3bf 8f6f 	isb	sy
 80057e2:	f3bf 8f4f 	dsb	sy
 80057e6:	b662      	cpsie	i
 80057e8:	613b      	str	r3, [r7, #16]
}
 80057ea:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80057ec:	4b16      	ldr	r3, [pc, #88]	; (8005848 <vTaskStartScheduler+0xd4>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	3354      	adds	r3, #84	; 0x54
 80057f2:	4a16      	ldr	r2, [pc, #88]	; (800584c <vTaskStartScheduler+0xd8>)
 80057f4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80057f6:	4b16      	ldr	r3, [pc, #88]	; (8005850 <vTaskStartScheduler+0xdc>)
 80057f8:	f04f 32ff 	mov.w	r2, #4294967295
 80057fc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80057fe:	4b15      	ldr	r3, [pc, #84]	; (8005854 <vTaskStartScheduler+0xe0>)
 8005800:	2201      	movs	r2, #1
 8005802:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005804:	4b14      	ldr	r3, [pc, #80]	; (8005858 <vTaskStartScheduler+0xe4>)
 8005806:	2200      	movs	r2, #0
 8005808:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800580a:	f001 fad1 	bl	8006db0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800580e:	e010      	b.n	8005832 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005816:	d10c      	bne.n	8005832 <vTaskStartScheduler+0xbe>
	__asm volatile
 8005818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800581c:	b672      	cpsid	i
 800581e:	f383 8811 	msr	BASEPRI, r3
 8005822:	f3bf 8f6f 	isb	sy
 8005826:	f3bf 8f4f 	dsb	sy
 800582a:	b662      	cpsie	i
 800582c:	60fb      	str	r3, [r7, #12]
}
 800582e:	bf00      	nop
 8005830:	e7fe      	b.n	8005830 <vTaskStartScheduler+0xbc>
}
 8005832:	bf00      	nop
 8005834:	3718      	adds	r7, #24
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	0800bcac 	.word	0x0800bcac
 8005840:	08005fed 	.word	0x08005fed
 8005844:	20000e10 	.word	0x20000e10
 8005848:	20000918 	.word	0x20000918
 800584c:	20000118 	.word	0x20000118
 8005850:	20000e0c 	.word	0x20000e0c
 8005854:	20000df8 	.word	0x20000df8
 8005858:	20000df0 	.word	0x20000df0

0800585c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800585c:	b480      	push	{r7}
 800585e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005860:	4b04      	ldr	r3, [pc, #16]	; (8005874 <vTaskSuspendAll+0x18>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	3301      	adds	r3, #1
 8005866:	4a03      	ldr	r2, [pc, #12]	; (8005874 <vTaskSuspendAll+0x18>)
 8005868:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800586a:	bf00      	nop
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr
 8005874:	20000e14 	.word	0x20000e14

08005878 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800587e:	2300      	movs	r3, #0
 8005880:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005882:	2300      	movs	r3, #0
 8005884:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005886:	4b43      	ldr	r3, [pc, #268]	; (8005994 <xTaskResumeAll+0x11c>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d10c      	bne.n	80058a8 <xTaskResumeAll+0x30>
	__asm volatile
 800588e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005892:	b672      	cpsid	i
 8005894:	f383 8811 	msr	BASEPRI, r3
 8005898:	f3bf 8f6f 	isb	sy
 800589c:	f3bf 8f4f 	dsb	sy
 80058a0:	b662      	cpsie	i
 80058a2:	603b      	str	r3, [r7, #0]
}
 80058a4:	bf00      	nop
 80058a6:	e7fe      	b.n	80058a6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80058a8:	f001 fb00 	bl	8006eac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80058ac:	4b39      	ldr	r3, [pc, #228]	; (8005994 <xTaskResumeAll+0x11c>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	3b01      	subs	r3, #1
 80058b2:	4a38      	ldr	r2, [pc, #224]	; (8005994 <xTaskResumeAll+0x11c>)
 80058b4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058b6:	4b37      	ldr	r3, [pc, #220]	; (8005994 <xTaskResumeAll+0x11c>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d162      	bne.n	8005984 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80058be:	4b36      	ldr	r3, [pc, #216]	; (8005998 <xTaskResumeAll+0x120>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d05e      	beq.n	8005984 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80058c6:	e02f      	b.n	8005928 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058c8:	4b34      	ldr	r3, [pc, #208]	; (800599c <xTaskResumeAll+0x124>)
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	3318      	adds	r3, #24
 80058d4:	4618      	mov	r0, r3
 80058d6:	f7fe feb5 	bl	8004644 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	3304      	adds	r3, #4
 80058de:	4618      	mov	r0, r3
 80058e0:	f7fe feb0 	bl	8004644 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058e8:	4b2d      	ldr	r3, [pc, #180]	; (80059a0 <xTaskResumeAll+0x128>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d903      	bls.n	80058f8 <xTaskResumeAll+0x80>
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f4:	4a2a      	ldr	r2, [pc, #168]	; (80059a0 <xTaskResumeAll+0x128>)
 80058f6:	6013      	str	r3, [r2, #0]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058fc:	4613      	mov	r3, r2
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	4413      	add	r3, r2
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	4a27      	ldr	r2, [pc, #156]	; (80059a4 <xTaskResumeAll+0x12c>)
 8005906:	441a      	add	r2, r3
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	3304      	adds	r3, #4
 800590c:	4619      	mov	r1, r3
 800590e:	4610      	mov	r0, r2
 8005910:	f7fe fe3b 	bl	800458a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005918:	4b23      	ldr	r3, [pc, #140]	; (80059a8 <xTaskResumeAll+0x130>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800591e:	429a      	cmp	r2, r3
 8005920:	d302      	bcc.n	8005928 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8005922:	4b22      	ldr	r3, [pc, #136]	; (80059ac <xTaskResumeAll+0x134>)
 8005924:	2201      	movs	r2, #1
 8005926:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005928:	4b1c      	ldr	r3, [pc, #112]	; (800599c <xTaskResumeAll+0x124>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d1cb      	bne.n	80058c8 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d001      	beq.n	800593a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005936:	f000 fc15 	bl	8006164 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800593a:	4b1d      	ldr	r3, [pc, #116]	; (80059b0 <xTaskResumeAll+0x138>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d010      	beq.n	8005968 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005946:	f000 f847 	bl	80059d8 <xTaskIncrementTick>
 800594a:	4603      	mov	r3, r0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d002      	beq.n	8005956 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8005950:	4b16      	ldr	r3, [pc, #88]	; (80059ac <xTaskResumeAll+0x134>)
 8005952:	2201      	movs	r2, #1
 8005954:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	3b01      	subs	r3, #1
 800595a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d1f1      	bne.n	8005946 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8005962:	4b13      	ldr	r3, [pc, #76]	; (80059b0 <xTaskResumeAll+0x138>)
 8005964:	2200      	movs	r2, #0
 8005966:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005968:	4b10      	ldr	r3, [pc, #64]	; (80059ac <xTaskResumeAll+0x134>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d009      	beq.n	8005984 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005970:	2301      	movs	r3, #1
 8005972:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005974:	4b0f      	ldr	r3, [pc, #60]	; (80059b4 <xTaskResumeAll+0x13c>)
 8005976:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800597a:	601a      	str	r2, [r3, #0]
 800597c:	f3bf 8f4f 	dsb	sy
 8005980:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005984:	f001 fac6 	bl	8006f14 <vPortExitCritical>

	return xAlreadyYielded;
 8005988:	68bb      	ldr	r3, [r7, #8]
}
 800598a:	4618      	mov	r0, r3
 800598c:	3710      	adds	r7, #16
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	20000e14 	.word	0x20000e14
 8005998:	20000dec 	.word	0x20000dec
 800599c:	20000dac 	.word	0x20000dac
 80059a0:	20000df4 	.word	0x20000df4
 80059a4:	2000091c 	.word	0x2000091c
 80059a8:	20000918 	.word	0x20000918
 80059ac:	20000e00 	.word	0x20000e00
 80059b0:	20000dfc 	.word	0x20000dfc
 80059b4:	e000ed04 	.word	0xe000ed04

080059b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80059be:	4b05      	ldr	r3, [pc, #20]	; (80059d4 <xTaskGetTickCount+0x1c>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80059c4:	687b      	ldr	r3, [r7, #4]
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	370c      	adds	r7, #12
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr
 80059d2:	bf00      	nop
 80059d4:	20000df0 	.word	0x20000df0

080059d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b086      	sub	sp, #24
 80059dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80059de:	2300      	movs	r3, #0
 80059e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059e2:	4b50      	ldr	r3, [pc, #320]	; (8005b24 <xTaskIncrementTick+0x14c>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	f040 808b 	bne.w	8005b02 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80059ec:	4b4e      	ldr	r3, [pc, #312]	; (8005b28 <xTaskIncrementTick+0x150>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	3301      	adds	r3, #1
 80059f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80059f4:	4a4c      	ldr	r2, [pc, #304]	; (8005b28 <xTaskIncrementTick+0x150>)
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d122      	bne.n	8005a46 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8005a00:	4b4a      	ldr	r3, [pc, #296]	; (8005b2c <xTaskIncrementTick+0x154>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00c      	beq.n	8005a24 <xTaskIncrementTick+0x4c>
	__asm volatile
 8005a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a0e:	b672      	cpsid	i
 8005a10:	f383 8811 	msr	BASEPRI, r3
 8005a14:	f3bf 8f6f 	isb	sy
 8005a18:	f3bf 8f4f 	dsb	sy
 8005a1c:	b662      	cpsie	i
 8005a1e:	603b      	str	r3, [r7, #0]
}
 8005a20:	bf00      	nop
 8005a22:	e7fe      	b.n	8005a22 <xTaskIncrementTick+0x4a>
 8005a24:	4b41      	ldr	r3, [pc, #260]	; (8005b2c <xTaskIncrementTick+0x154>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	60fb      	str	r3, [r7, #12]
 8005a2a:	4b41      	ldr	r3, [pc, #260]	; (8005b30 <xTaskIncrementTick+0x158>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a3f      	ldr	r2, [pc, #252]	; (8005b2c <xTaskIncrementTick+0x154>)
 8005a30:	6013      	str	r3, [r2, #0]
 8005a32:	4a3f      	ldr	r2, [pc, #252]	; (8005b30 <xTaskIncrementTick+0x158>)
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6013      	str	r3, [r2, #0]
 8005a38:	4b3e      	ldr	r3, [pc, #248]	; (8005b34 <xTaskIncrementTick+0x15c>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	3301      	adds	r3, #1
 8005a3e:	4a3d      	ldr	r2, [pc, #244]	; (8005b34 <xTaskIncrementTick+0x15c>)
 8005a40:	6013      	str	r3, [r2, #0]
 8005a42:	f000 fb8f 	bl	8006164 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005a46:	4b3c      	ldr	r3, [pc, #240]	; (8005b38 <xTaskIncrementTick+0x160>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	693a      	ldr	r2, [r7, #16]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d349      	bcc.n	8005ae4 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a50:	4b36      	ldr	r3, [pc, #216]	; (8005b2c <xTaskIncrementTick+0x154>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d104      	bne.n	8005a64 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a5a:	4b37      	ldr	r3, [pc, #220]	; (8005b38 <xTaskIncrementTick+0x160>)
 8005a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8005a60:	601a      	str	r2, [r3, #0]
					break;
 8005a62:	e03f      	b.n	8005ae4 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a64:	4b31      	ldr	r3, [pc, #196]	; (8005b2c <xTaskIncrementTick+0x154>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005a74:	693a      	ldr	r2, [r7, #16]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d203      	bcs.n	8005a84 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005a7c:	4a2e      	ldr	r2, [pc, #184]	; (8005b38 <xTaskIncrementTick+0x160>)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005a82:	e02f      	b.n	8005ae4 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	3304      	adds	r3, #4
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f7fe fddb 	bl	8004644 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d004      	beq.n	8005aa0 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	3318      	adds	r3, #24
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f7fe fdd2 	bl	8004644 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aa4:	4b25      	ldr	r3, [pc, #148]	; (8005b3c <xTaskIncrementTick+0x164>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d903      	bls.n	8005ab4 <xTaskIncrementTick+0xdc>
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab0:	4a22      	ldr	r2, [pc, #136]	; (8005b3c <xTaskIncrementTick+0x164>)
 8005ab2:	6013      	str	r3, [r2, #0]
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ab8:	4613      	mov	r3, r2
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	4413      	add	r3, r2
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	4a1f      	ldr	r2, [pc, #124]	; (8005b40 <xTaskIncrementTick+0x168>)
 8005ac2:	441a      	add	r2, r3
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	3304      	adds	r3, #4
 8005ac8:	4619      	mov	r1, r3
 8005aca:	4610      	mov	r0, r2
 8005acc:	f7fe fd5d 	bl	800458a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ad4:	4b1b      	ldr	r3, [pc, #108]	; (8005b44 <xTaskIncrementTick+0x16c>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d3b8      	bcc.n	8005a50 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ae2:	e7b5      	b.n	8005a50 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005ae4:	4b17      	ldr	r3, [pc, #92]	; (8005b44 <xTaskIncrementTick+0x16c>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aea:	4915      	ldr	r1, [pc, #84]	; (8005b40 <xTaskIncrementTick+0x168>)
 8005aec:	4613      	mov	r3, r2
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	4413      	add	r3, r2
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	440b      	add	r3, r1
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d907      	bls.n	8005b0c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8005afc:	2301      	movs	r3, #1
 8005afe:	617b      	str	r3, [r7, #20]
 8005b00:	e004      	b.n	8005b0c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005b02:	4b11      	ldr	r3, [pc, #68]	; (8005b48 <xTaskIncrementTick+0x170>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	3301      	adds	r3, #1
 8005b08:	4a0f      	ldr	r2, [pc, #60]	; (8005b48 <xTaskIncrementTick+0x170>)
 8005b0a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005b0c:	4b0f      	ldr	r3, [pc, #60]	; (8005b4c <xTaskIncrementTick+0x174>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d001      	beq.n	8005b18 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8005b14:	2301      	movs	r3, #1
 8005b16:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005b18:	697b      	ldr	r3, [r7, #20]
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3718      	adds	r7, #24
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	20000e14 	.word	0x20000e14
 8005b28:	20000df0 	.word	0x20000df0
 8005b2c:	20000da4 	.word	0x20000da4
 8005b30:	20000da8 	.word	0x20000da8
 8005b34:	20000e04 	.word	0x20000e04
 8005b38:	20000e0c 	.word	0x20000e0c
 8005b3c:	20000df4 	.word	0x20000df4
 8005b40:	2000091c 	.word	0x2000091c
 8005b44:	20000918 	.word	0x20000918
 8005b48:	20000dfc 	.word	0x20000dfc
 8005b4c:	20000e00 	.word	0x20000e00

08005b50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005b50:	b480      	push	{r7}
 8005b52:	b085      	sub	sp, #20
 8005b54:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005b56:	4b2b      	ldr	r3, [pc, #172]	; (8005c04 <vTaskSwitchContext+0xb4>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d003      	beq.n	8005b66 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005b5e:	4b2a      	ldr	r3, [pc, #168]	; (8005c08 <vTaskSwitchContext+0xb8>)
 8005b60:	2201      	movs	r2, #1
 8005b62:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005b64:	e048      	b.n	8005bf8 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8005b66:	4b28      	ldr	r3, [pc, #160]	; (8005c08 <vTaskSwitchContext+0xb8>)
 8005b68:	2200      	movs	r2, #0
 8005b6a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b6c:	4b27      	ldr	r3, [pc, #156]	; (8005c0c <vTaskSwitchContext+0xbc>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	60fb      	str	r3, [r7, #12]
 8005b72:	e012      	b.n	8005b9a <vTaskSwitchContext+0x4a>
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d10c      	bne.n	8005b94 <vTaskSwitchContext+0x44>
	__asm volatile
 8005b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b7e:	b672      	cpsid	i
 8005b80:	f383 8811 	msr	BASEPRI, r3
 8005b84:	f3bf 8f6f 	isb	sy
 8005b88:	f3bf 8f4f 	dsb	sy
 8005b8c:	b662      	cpsie	i
 8005b8e:	607b      	str	r3, [r7, #4]
}
 8005b90:	bf00      	nop
 8005b92:	e7fe      	b.n	8005b92 <vTaskSwitchContext+0x42>
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	3b01      	subs	r3, #1
 8005b98:	60fb      	str	r3, [r7, #12]
 8005b9a:	491d      	ldr	r1, [pc, #116]	; (8005c10 <vTaskSwitchContext+0xc0>)
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	4413      	add	r3, r2
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	440b      	add	r3, r1
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d0e2      	beq.n	8005b74 <vTaskSwitchContext+0x24>
 8005bae:	68fa      	ldr	r2, [r7, #12]
 8005bb0:	4613      	mov	r3, r2
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	4413      	add	r3, r2
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	4a15      	ldr	r2, [pc, #84]	; (8005c10 <vTaskSwitchContext+0xc0>)
 8005bba:	4413      	add	r3, r2
 8005bbc:	60bb      	str	r3, [r7, #8]
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	685a      	ldr	r2, [r3, #4]
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	605a      	str	r2, [r3, #4]
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	685a      	ldr	r2, [r3, #4]
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	3308      	adds	r3, #8
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d104      	bne.n	8005bde <vTaskSwitchContext+0x8e>
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	685a      	ldr	r2, [r3, #4]
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	605a      	str	r2, [r3, #4]
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	4a0b      	ldr	r2, [pc, #44]	; (8005c14 <vTaskSwitchContext+0xc4>)
 8005be6:	6013      	str	r3, [r2, #0]
 8005be8:	4a08      	ldr	r2, [pc, #32]	; (8005c0c <vTaskSwitchContext+0xbc>)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005bee:	4b09      	ldr	r3, [pc, #36]	; (8005c14 <vTaskSwitchContext+0xc4>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	3354      	adds	r3, #84	; 0x54
 8005bf4:	4a08      	ldr	r2, [pc, #32]	; (8005c18 <vTaskSwitchContext+0xc8>)
 8005bf6:	6013      	str	r3, [r2, #0]
}
 8005bf8:	bf00      	nop
 8005bfa:	3714      	adds	r7, #20
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr
 8005c04:	20000e14 	.word	0x20000e14
 8005c08:	20000e00 	.word	0x20000e00
 8005c0c:	20000df4 	.word	0x20000df4
 8005c10:	2000091c 	.word	0x2000091c
 8005c14:	20000918 	.word	0x20000918
 8005c18:	20000118 	.word	0x20000118

08005c1c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d10c      	bne.n	8005c46 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8005c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c30:	b672      	cpsid	i
 8005c32:	f383 8811 	msr	BASEPRI, r3
 8005c36:	f3bf 8f6f 	isb	sy
 8005c3a:	f3bf 8f4f 	dsb	sy
 8005c3e:	b662      	cpsie	i
 8005c40:	60fb      	str	r3, [r7, #12]
}
 8005c42:	bf00      	nop
 8005c44:	e7fe      	b.n	8005c44 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c46:	4b07      	ldr	r3, [pc, #28]	; (8005c64 <vTaskPlaceOnEventList+0x48>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	3318      	adds	r3, #24
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f7fe fcbf 	bl	80045d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005c54:	2101      	movs	r1, #1
 8005c56:	6838      	ldr	r0, [r7, #0]
 8005c58:	f000 fc4e 	bl	80064f8 <prvAddCurrentTaskToDelayedList>
}
 8005c5c:	bf00      	nop
 8005c5e:	3710      	adds	r7, #16
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}
 8005c64:	20000918 	.word	0x20000918

08005c68 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b086      	sub	sp, #24
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d10c      	bne.n	8005c94 <vTaskPlaceOnUnorderedEventList+0x2c>
	__asm volatile
 8005c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c7e:	b672      	cpsid	i
 8005c80:	f383 8811 	msr	BASEPRI, r3
 8005c84:	f3bf 8f6f 	isb	sy
 8005c88:	f3bf 8f4f 	dsb	sy
 8005c8c:	b662      	cpsie	i
 8005c8e:	617b      	str	r3, [r7, #20]
}
 8005c90:	bf00      	nop
 8005c92:	e7fe      	b.n	8005c92 <vTaskPlaceOnUnorderedEventList+0x2a>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8005c94:	4b12      	ldr	r3, [pc, #72]	; (8005ce0 <vTaskPlaceOnUnorderedEventList+0x78>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d10c      	bne.n	8005cb6 <vTaskPlaceOnUnorderedEventList+0x4e>
	__asm volatile
 8005c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca0:	b672      	cpsid	i
 8005ca2:	f383 8811 	msr	BASEPRI, r3
 8005ca6:	f3bf 8f6f 	isb	sy
 8005caa:	f3bf 8f4f 	dsb	sy
 8005cae:	b662      	cpsie	i
 8005cb0:	613b      	str	r3, [r7, #16]
}
 8005cb2:	bf00      	nop
 8005cb4:	e7fe      	b.n	8005cb4 <vTaskPlaceOnUnorderedEventList+0x4c>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8005cb6:	4b0b      	ldr	r3, [pc, #44]	; (8005ce4 <vTaskPlaceOnUnorderedEventList+0x7c>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	68ba      	ldr	r2, [r7, #8]
 8005cbc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005cc0:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005cc2:	4b08      	ldr	r3, [pc, #32]	; (8005ce4 <vTaskPlaceOnUnorderedEventList+0x7c>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	3318      	adds	r3, #24
 8005cc8:	4619      	mov	r1, r3
 8005cca:	68f8      	ldr	r0, [r7, #12]
 8005ccc:	f7fe fc5d 	bl	800458a <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005cd0:	2101      	movs	r1, #1
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 fc10 	bl	80064f8 <prvAddCurrentTaskToDelayedList>
}
 8005cd8:	bf00      	nop
 8005cda:	3718      	adds	r7, #24
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}
 8005ce0:	20000e14 	.word	0x20000e14
 8005ce4:	20000918 	.word	0x20000918

08005ce8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b086      	sub	sp, #24
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	60b9      	str	r1, [r7, #8]
 8005cf2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d10c      	bne.n	8005d14 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8005cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cfe:	b672      	cpsid	i
 8005d00:	f383 8811 	msr	BASEPRI, r3
 8005d04:	f3bf 8f6f 	isb	sy
 8005d08:	f3bf 8f4f 	dsb	sy
 8005d0c:	b662      	cpsie	i
 8005d0e:	617b      	str	r3, [r7, #20]
}
 8005d10:	bf00      	nop
 8005d12:	e7fe      	b.n	8005d12 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005d14:	4b0a      	ldr	r3, [pc, #40]	; (8005d40 <vTaskPlaceOnEventListRestricted+0x58>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	3318      	adds	r3, #24
 8005d1a:	4619      	mov	r1, r3
 8005d1c:	68f8      	ldr	r0, [r7, #12]
 8005d1e:	f7fe fc34 	bl	800458a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d002      	beq.n	8005d2e <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8005d28:	f04f 33ff 	mov.w	r3, #4294967295
 8005d2c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005d2e:	6879      	ldr	r1, [r7, #4]
 8005d30:	68b8      	ldr	r0, [r7, #8]
 8005d32:	f000 fbe1 	bl	80064f8 <prvAddCurrentTaskToDelayedList>
	}
 8005d36:	bf00      	nop
 8005d38:	3718      	adds	r7, #24
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	20000918 	.word	0x20000918

08005d44 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b086      	sub	sp, #24
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d10c      	bne.n	8005d74 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8005d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d5e:	b672      	cpsid	i
 8005d60:	f383 8811 	msr	BASEPRI, r3
 8005d64:	f3bf 8f6f 	isb	sy
 8005d68:	f3bf 8f4f 	dsb	sy
 8005d6c:	b662      	cpsie	i
 8005d6e:	60fb      	str	r3, [r7, #12]
}
 8005d70:	bf00      	nop
 8005d72:	e7fe      	b.n	8005d72 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	3318      	adds	r3, #24
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f7fe fc63 	bl	8004644 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d7e:	4b1e      	ldr	r3, [pc, #120]	; (8005df8 <xTaskRemoveFromEventList+0xb4>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d11d      	bne.n	8005dc2 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	3304      	adds	r3, #4
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f7fe fc5a 	bl	8004644 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d94:	4b19      	ldr	r3, [pc, #100]	; (8005dfc <xTaskRemoveFromEventList+0xb8>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d903      	bls.n	8005da4 <xTaskRemoveFromEventList+0x60>
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da0:	4a16      	ldr	r2, [pc, #88]	; (8005dfc <xTaskRemoveFromEventList+0xb8>)
 8005da2:	6013      	str	r3, [r2, #0]
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005da8:	4613      	mov	r3, r2
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	4413      	add	r3, r2
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	4a13      	ldr	r2, [pc, #76]	; (8005e00 <xTaskRemoveFromEventList+0xbc>)
 8005db2:	441a      	add	r2, r3
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	3304      	adds	r3, #4
 8005db8:	4619      	mov	r1, r3
 8005dba:	4610      	mov	r0, r2
 8005dbc:	f7fe fbe5 	bl	800458a <vListInsertEnd>
 8005dc0:	e005      	b.n	8005dce <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	3318      	adds	r3, #24
 8005dc6:	4619      	mov	r1, r3
 8005dc8:	480e      	ldr	r0, [pc, #56]	; (8005e04 <xTaskRemoveFromEventList+0xc0>)
 8005dca:	f7fe fbde 	bl	800458a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dd2:	4b0d      	ldr	r3, [pc, #52]	; (8005e08 <xTaskRemoveFromEventList+0xc4>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d905      	bls.n	8005de8 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005de0:	4b0a      	ldr	r3, [pc, #40]	; (8005e0c <xTaskRemoveFromEventList+0xc8>)
 8005de2:	2201      	movs	r2, #1
 8005de4:	601a      	str	r2, [r3, #0]
 8005de6:	e001      	b.n	8005dec <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8005de8:	2300      	movs	r3, #0
 8005dea:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005dec:	697b      	ldr	r3, [r7, #20]
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3718      	adds	r7, #24
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	20000e14 	.word	0x20000e14
 8005dfc:	20000df4 	.word	0x20000df4
 8005e00:	2000091c 	.word	0x2000091c
 8005e04:	20000dac 	.word	0x20000dac
 8005e08:	20000918 	.word	0x20000918
 8005e0c:	20000e00 	.word	0x20000e00

08005e10 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b086      	sub	sp, #24
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8005e1a:	4b2b      	ldr	r3, [pc, #172]	; (8005ec8 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d10c      	bne.n	8005e3c <vTaskRemoveFromUnorderedEventList+0x2c>
	__asm volatile
 8005e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e26:	b672      	cpsid	i
 8005e28:	f383 8811 	msr	BASEPRI, r3
 8005e2c:	f3bf 8f6f 	isb	sy
 8005e30:	f3bf 8f4f 	dsb	sy
 8005e34:	b662      	cpsie	i
 8005e36:	613b      	str	r3, [r7, #16]
}
 8005e38:	bf00      	nop
 8005e3a:	e7fe      	b.n	8005e3a <vTaskRemoveFromUnorderedEventList+0x2a>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d10c      	bne.n	8005e6c <vTaskRemoveFromUnorderedEventList+0x5c>
	__asm volatile
 8005e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e56:	b672      	cpsid	i
 8005e58:	f383 8811 	msr	BASEPRI, r3
 8005e5c:	f3bf 8f6f 	isb	sy
 8005e60:	f3bf 8f4f 	dsb	sy
 8005e64:	b662      	cpsie	i
 8005e66:	60fb      	str	r3, [r7, #12]
}
 8005e68:	bf00      	nop
 8005e6a:	e7fe      	b.n	8005e6a <vTaskRemoveFromUnorderedEventList+0x5a>
	( void ) uxListRemove( pxEventListItem );
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f7fe fbe9 	bl	8004644 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	3304      	adds	r3, #4
 8005e76:	4618      	mov	r0, r3
 8005e78:	f7fe fbe4 	bl	8004644 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e80:	4b12      	ldr	r3, [pc, #72]	; (8005ecc <vTaskRemoveFromUnorderedEventList+0xbc>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d903      	bls.n	8005e90 <vTaskRemoveFromUnorderedEventList+0x80>
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e8c:	4a0f      	ldr	r2, [pc, #60]	; (8005ecc <vTaskRemoveFromUnorderedEventList+0xbc>)
 8005e8e:	6013      	str	r3, [r2, #0]
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e94:	4613      	mov	r3, r2
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	4413      	add	r3, r2
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	4a0c      	ldr	r2, [pc, #48]	; (8005ed0 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8005e9e:	441a      	add	r2, r3
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	3304      	adds	r3, #4
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	4610      	mov	r0, r2
 8005ea8:	f7fe fb6f 	bl	800458a <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eb0:	4b08      	ldr	r3, [pc, #32]	; (8005ed4 <vTaskRemoveFromUnorderedEventList+0xc4>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d902      	bls.n	8005ec0 <vTaskRemoveFromUnorderedEventList+0xb0>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8005eba:	4b07      	ldr	r3, [pc, #28]	; (8005ed8 <vTaskRemoveFromUnorderedEventList+0xc8>)
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	601a      	str	r2, [r3, #0]
	}
}
 8005ec0:	bf00      	nop
 8005ec2:	3718      	adds	r7, #24
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	20000e14 	.word	0x20000e14
 8005ecc:	20000df4 	.word	0x20000df4
 8005ed0:	2000091c 	.word	0x2000091c
 8005ed4:	20000918 	.word	0x20000918
 8005ed8:	20000e00 	.word	0x20000e00

08005edc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005ee4:	4b06      	ldr	r3, [pc, #24]	; (8005f00 <vTaskInternalSetTimeOutState+0x24>)
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005eec:	4b05      	ldr	r3, [pc, #20]	; (8005f04 <vTaskInternalSetTimeOutState+0x28>)
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	605a      	str	r2, [r3, #4]
}
 8005ef4:	bf00      	nop
 8005ef6:	370c      	adds	r7, #12
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr
 8005f00:	20000e04 	.word	0x20000e04
 8005f04:	20000df0 	.word	0x20000df0

08005f08 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b088      	sub	sp, #32
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d10c      	bne.n	8005f32 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8005f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f1c:	b672      	cpsid	i
 8005f1e:	f383 8811 	msr	BASEPRI, r3
 8005f22:	f3bf 8f6f 	isb	sy
 8005f26:	f3bf 8f4f 	dsb	sy
 8005f2a:	b662      	cpsie	i
 8005f2c:	613b      	str	r3, [r7, #16]
}
 8005f2e:	bf00      	nop
 8005f30:	e7fe      	b.n	8005f30 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d10c      	bne.n	8005f52 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8005f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f3c:	b672      	cpsid	i
 8005f3e:	f383 8811 	msr	BASEPRI, r3
 8005f42:	f3bf 8f6f 	isb	sy
 8005f46:	f3bf 8f4f 	dsb	sy
 8005f4a:	b662      	cpsie	i
 8005f4c:	60fb      	str	r3, [r7, #12]
}
 8005f4e:	bf00      	nop
 8005f50:	e7fe      	b.n	8005f50 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8005f52:	f000 ffab 	bl	8006eac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005f56:	4b1d      	ldr	r3, [pc, #116]	; (8005fcc <xTaskCheckForTimeOut+0xc4>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	69ba      	ldr	r2, [r7, #24]
 8005f62:	1ad3      	subs	r3, r2, r3
 8005f64:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f6e:	d102      	bne.n	8005f76 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005f70:	2300      	movs	r3, #0
 8005f72:	61fb      	str	r3, [r7, #28]
 8005f74:	e023      	b.n	8005fbe <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	4b15      	ldr	r3, [pc, #84]	; (8005fd0 <xTaskCheckForTimeOut+0xc8>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d007      	beq.n	8005f92 <xTaskCheckForTimeOut+0x8a>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	69ba      	ldr	r2, [r7, #24]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d302      	bcc.n	8005f92 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	61fb      	str	r3, [r7, #28]
 8005f90:	e015      	b.n	8005fbe <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	697a      	ldr	r2, [r7, #20]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d20b      	bcs.n	8005fb4 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	1ad2      	subs	r2, r2, r3
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f7ff ff97 	bl	8005edc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	61fb      	str	r3, [r7, #28]
 8005fb2:	e004      	b.n	8005fbe <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005fbe:	f000 ffa9 	bl	8006f14 <vPortExitCritical>

	return xReturn;
 8005fc2:	69fb      	ldr	r3, [r7, #28]
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3720      	adds	r7, #32
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	20000df0 	.word	0x20000df0
 8005fd0:	20000e04 	.word	0x20000e04

08005fd4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005fd8:	4b03      	ldr	r3, [pc, #12]	; (8005fe8 <vTaskMissedYield+0x14>)
 8005fda:	2201      	movs	r2, #1
 8005fdc:	601a      	str	r2, [r3, #0]
}
 8005fde:	bf00      	nop
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr
 8005fe8:	20000e00 	.word	0x20000e00

08005fec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b082      	sub	sp, #8
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005ff4:	f000 f852 	bl	800609c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005ff8:	4b06      	ldr	r3, [pc, #24]	; (8006014 <prvIdleTask+0x28>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d9f9      	bls.n	8005ff4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006000:	4b05      	ldr	r3, [pc, #20]	; (8006018 <prvIdleTask+0x2c>)
 8006002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006006:	601a      	str	r2, [r3, #0]
 8006008:	f3bf 8f4f 	dsb	sy
 800600c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006010:	e7f0      	b.n	8005ff4 <prvIdleTask+0x8>
 8006012:	bf00      	nop
 8006014:	2000091c 	.word	0x2000091c
 8006018:	e000ed04 	.word	0xe000ed04

0800601c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006022:	2300      	movs	r3, #0
 8006024:	607b      	str	r3, [r7, #4]
 8006026:	e00c      	b.n	8006042 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	4613      	mov	r3, r2
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	4413      	add	r3, r2
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	4a12      	ldr	r2, [pc, #72]	; (800607c <prvInitialiseTaskLists+0x60>)
 8006034:	4413      	add	r3, r2
 8006036:	4618      	mov	r0, r3
 8006038:	f7fe fa7a 	bl	8004530 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	3301      	adds	r3, #1
 8006040:	607b      	str	r3, [r7, #4]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2b37      	cmp	r3, #55	; 0x37
 8006046:	d9ef      	bls.n	8006028 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006048:	480d      	ldr	r0, [pc, #52]	; (8006080 <prvInitialiseTaskLists+0x64>)
 800604a:	f7fe fa71 	bl	8004530 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800604e:	480d      	ldr	r0, [pc, #52]	; (8006084 <prvInitialiseTaskLists+0x68>)
 8006050:	f7fe fa6e 	bl	8004530 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006054:	480c      	ldr	r0, [pc, #48]	; (8006088 <prvInitialiseTaskLists+0x6c>)
 8006056:	f7fe fa6b 	bl	8004530 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800605a:	480c      	ldr	r0, [pc, #48]	; (800608c <prvInitialiseTaskLists+0x70>)
 800605c:	f7fe fa68 	bl	8004530 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006060:	480b      	ldr	r0, [pc, #44]	; (8006090 <prvInitialiseTaskLists+0x74>)
 8006062:	f7fe fa65 	bl	8004530 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006066:	4b0b      	ldr	r3, [pc, #44]	; (8006094 <prvInitialiseTaskLists+0x78>)
 8006068:	4a05      	ldr	r2, [pc, #20]	; (8006080 <prvInitialiseTaskLists+0x64>)
 800606a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800606c:	4b0a      	ldr	r3, [pc, #40]	; (8006098 <prvInitialiseTaskLists+0x7c>)
 800606e:	4a05      	ldr	r2, [pc, #20]	; (8006084 <prvInitialiseTaskLists+0x68>)
 8006070:	601a      	str	r2, [r3, #0]
}
 8006072:	bf00      	nop
 8006074:	3708      	adds	r7, #8
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop
 800607c:	2000091c 	.word	0x2000091c
 8006080:	20000d7c 	.word	0x20000d7c
 8006084:	20000d90 	.word	0x20000d90
 8006088:	20000dac 	.word	0x20000dac
 800608c:	20000dc0 	.word	0x20000dc0
 8006090:	20000dd8 	.word	0x20000dd8
 8006094:	20000da4 	.word	0x20000da4
 8006098:	20000da8 	.word	0x20000da8

0800609c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b082      	sub	sp, #8
 80060a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80060a2:	e019      	b.n	80060d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80060a4:	f000 ff02 	bl	8006eac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060a8:	4b10      	ldr	r3, [pc, #64]	; (80060ec <prvCheckTasksWaitingTermination+0x50>)
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	3304      	adds	r3, #4
 80060b4:	4618      	mov	r0, r3
 80060b6:	f7fe fac5 	bl	8004644 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80060ba:	4b0d      	ldr	r3, [pc, #52]	; (80060f0 <prvCheckTasksWaitingTermination+0x54>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	3b01      	subs	r3, #1
 80060c0:	4a0b      	ldr	r2, [pc, #44]	; (80060f0 <prvCheckTasksWaitingTermination+0x54>)
 80060c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80060c4:	4b0b      	ldr	r3, [pc, #44]	; (80060f4 <prvCheckTasksWaitingTermination+0x58>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	3b01      	subs	r3, #1
 80060ca:	4a0a      	ldr	r2, [pc, #40]	; (80060f4 <prvCheckTasksWaitingTermination+0x58>)
 80060cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80060ce:	f000 ff21 	bl	8006f14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 f810 	bl	80060f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80060d8:	4b06      	ldr	r3, [pc, #24]	; (80060f4 <prvCheckTasksWaitingTermination+0x58>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d1e1      	bne.n	80060a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80060e0:	bf00      	nop
 80060e2:	bf00      	nop
 80060e4:	3708      	adds	r7, #8
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop
 80060ec:	20000dc0 	.word	0x20000dc0
 80060f0:	20000dec 	.word	0x20000dec
 80060f4:	20000dd4 	.word	0x20000dd4

080060f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b084      	sub	sp, #16
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	3354      	adds	r3, #84	; 0x54
 8006104:	4618      	mov	r0, r3
 8006106:	f005 fa19 	bl	800b53c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006110:	2b00      	cmp	r3, #0
 8006112:	d108      	bne.n	8006126 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006118:	4618      	mov	r0, r3
 800611a:	f001 f8bd 	bl	8007298 <vPortFree>
				vPortFree( pxTCB );
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f001 f8ba 	bl	8007298 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006124:	e01a      	b.n	800615c <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800612c:	2b01      	cmp	r3, #1
 800612e:	d103      	bne.n	8006138 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f001 f8b1 	bl	8007298 <vPortFree>
	}
 8006136:	e011      	b.n	800615c <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800613e:	2b02      	cmp	r3, #2
 8006140:	d00c      	beq.n	800615c <prvDeleteTCB+0x64>
	__asm volatile
 8006142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006146:	b672      	cpsid	i
 8006148:	f383 8811 	msr	BASEPRI, r3
 800614c:	f3bf 8f6f 	isb	sy
 8006150:	f3bf 8f4f 	dsb	sy
 8006154:	b662      	cpsie	i
 8006156:	60fb      	str	r3, [r7, #12]
}
 8006158:	bf00      	nop
 800615a:	e7fe      	b.n	800615a <prvDeleteTCB+0x62>
	}
 800615c:	bf00      	nop
 800615e:	3710      	adds	r7, #16
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}

08006164 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006164:	b480      	push	{r7}
 8006166:	b083      	sub	sp, #12
 8006168:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800616a:	4b0c      	ldr	r3, [pc, #48]	; (800619c <prvResetNextTaskUnblockTime+0x38>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d104      	bne.n	800617e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006174:	4b0a      	ldr	r3, [pc, #40]	; (80061a0 <prvResetNextTaskUnblockTime+0x3c>)
 8006176:	f04f 32ff 	mov.w	r2, #4294967295
 800617a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800617c:	e008      	b.n	8006190 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800617e:	4b07      	ldr	r3, [pc, #28]	; (800619c <prvResetNextTaskUnblockTime+0x38>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	4a04      	ldr	r2, [pc, #16]	; (80061a0 <prvResetNextTaskUnblockTime+0x3c>)
 800618e:	6013      	str	r3, [r2, #0]
}
 8006190:	bf00      	nop
 8006192:	370c      	adds	r7, #12
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr
 800619c:	20000da4 	.word	0x20000da4
 80061a0:	20000e0c 	.word	0x20000e0c

080061a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80061a4:	b480      	push	{r7}
 80061a6:	b083      	sub	sp, #12
 80061a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80061aa:	4b0b      	ldr	r3, [pc, #44]	; (80061d8 <xTaskGetSchedulerState+0x34>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d102      	bne.n	80061b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80061b2:	2301      	movs	r3, #1
 80061b4:	607b      	str	r3, [r7, #4]
 80061b6:	e008      	b.n	80061ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061b8:	4b08      	ldr	r3, [pc, #32]	; (80061dc <xTaskGetSchedulerState+0x38>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d102      	bne.n	80061c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80061c0:	2302      	movs	r3, #2
 80061c2:	607b      	str	r3, [r7, #4]
 80061c4:	e001      	b.n	80061ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80061c6:	2300      	movs	r3, #0
 80061c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80061ca:	687b      	ldr	r3, [r7, #4]
	}
 80061cc:	4618      	mov	r0, r3
 80061ce:	370c      	adds	r7, #12
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr
 80061d8:	20000df8 	.word	0x20000df8
 80061dc:	20000e14 	.word	0x20000e14

080061e0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b084      	sub	sp, #16
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80061ec:	2300      	movs	r3, #0
 80061ee:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d051      	beq.n	800629a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061fa:	4b2a      	ldr	r3, [pc, #168]	; (80062a4 <xTaskPriorityInherit+0xc4>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006200:	429a      	cmp	r2, r3
 8006202:	d241      	bcs.n	8006288 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	699b      	ldr	r3, [r3, #24]
 8006208:	2b00      	cmp	r3, #0
 800620a:	db06      	blt.n	800621a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800620c:	4b25      	ldr	r3, [pc, #148]	; (80062a4 <xTaskPriorityInherit+0xc4>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006212:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	6959      	ldr	r1, [r3, #20]
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006222:	4613      	mov	r3, r2
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	4413      	add	r3, r2
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	4a1f      	ldr	r2, [pc, #124]	; (80062a8 <xTaskPriorityInherit+0xc8>)
 800622c:	4413      	add	r3, r2
 800622e:	4299      	cmp	r1, r3
 8006230:	d122      	bne.n	8006278 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	3304      	adds	r3, #4
 8006236:	4618      	mov	r0, r3
 8006238:	f7fe fa04 	bl	8004644 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800623c:	4b19      	ldr	r3, [pc, #100]	; (80062a4 <xTaskPriorityInherit+0xc4>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800624a:	4b18      	ldr	r3, [pc, #96]	; (80062ac <xTaskPriorityInherit+0xcc>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	429a      	cmp	r2, r3
 8006250:	d903      	bls.n	800625a <xTaskPriorityInherit+0x7a>
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006256:	4a15      	ldr	r2, [pc, #84]	; (80062ac <xTaskPriorityInherit+0xcc>)
 8006258:	6013      	str	r3, [r2, #0]
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800625e:	4613      	mov	r3, r2
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	4413      	add	r3, r2
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	4a10      	ldr	r2, [pc, #64]	; (80062a8 <xTaskPriorityInherit+0xc8>)
 8006268:	441a      	add	r2, r3
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	3304      	adds	r3, #4
 800626e:	4619      	mov	r1, r3
 8006270:	4610      	mov	r0, r2
 8006272:	f7fe f98a 	bl	800458a <vListInsertEnd>
 8006276:	e004      	b.n	8006282 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006278:	4b0a      	ldr	r3, [pc, #40]	; (80062a4 <xTaskPriorityInherit+0xc4>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006282:	2301      	movs	r3, #1
 8006284:	60fb      	str	r3, [r7, #12]
 8006286:	e008      	b.n	800629a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800628c:	4b05      	ldr	r3, [pc, #20]	; (80062a4 <xTaskPriorityInherit+0xc4>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006292:	429a      	cmp	r2, r3
 8006294:	d201      	bcs.n	800629a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006296:	2301      	movs	r3, #1
 8006298:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800629a:	68fb      	ldr	r3, [r7, #12]
	}
 800629c:	4618      	mov	r0, r3
 800629e:	3710      	adds	r7, #16
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	20000918 	.word	0x20000918
 80062a8:	2000091c 	.word	0x2000091c
 80062ac:	20000df4 	.word	0x20000df4

080062b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b086      	sub	sp, #24
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80062bc:	2300      	movs	r3, #0
 80062be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d05a      	beq.n	800637c <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80062c6:	4b30      	ldr	r3, [pc, #192]	; (8006388 <xTaskPriorityDisinherit+0xd8>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	693a      	ldr	r2, [r7, #16]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d00c      	beq.n	80062ea <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80062d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d4:	b672      	cpsid	i
 80062d6:	f383 8811 	msr	BASEPRI, r3
 80062da:	f3bf 8f6f 	isb	sy
 80062de:	f3bf 8f4f 	dsb	sy
 80062e2:	b662      	cpsie	i
 80062e4:	60fb      	str	r3, [r7, #12]
}
 80062e6:	bf00      	nop
 80062e8:	e7fe      	b.n	80062e8 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d10c      	bne.n	800630c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80062f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f6:	b672      	cpsid	i
 80062f8:	f383 8811 	msr	BASEPRI, r3
 80062fc:	f3bf 8f6f 	isb	sy
 8006300:	f3bf 8f4f 	dsb	sy
 8006304:	b662      	cpsie	i
 8006306:	60bb      	str	r3, [r7, #8]
}
 8006308:	bf00      	nop
 800630a:	e7fe      	b.n	800630a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006310:	1e5a      	subs	r2, r3, #1
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800631e:	429a      	cmp	r2, r3
 8006320:	d02c      	beq.n	800637c <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006326:	2b00      	cmp	r3, #0
 8006328:	d128      	bne.n	800637c <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	3304      	adds	r3, #4
 800632e:	4618      	mov	r0, r3
 8006330:	f7fe f988 	bl	8004644 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006340:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800634c:	4b0f      	ldr	r3, [pc, #60]	; (800638c <xTaskPriorityDisinherit+0xdc>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	429a      	cmp	r2, r3
 8006352:	d903      	bls.n	800635c <xTaskPriorityDisinherit+0xac>
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006358:	4a0c      	ldr	r2, [pc, #48]	; (800638c <xTaskPriorityDisinherit+0xdc>)
 800635a:	6013      	str	r3, [r2, #0]
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006360:	4613      	mov	r3, r2
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	4413      	add	r3, r2
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	4a09      	ldr	r2, [pc, #36]	; (8006390 <xTaskPriorityDisinherit+0xe0>)
 800636a:	441a      	add	r2, r3
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	3304      	adds	r3, #4
 8006370:	4619      	mov	r1, r3
 8006372:	4610      	mov	r0, r2
 8006374:	f7fe f909 	bl	800458a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006378:	2301      	movs	r3, #1
 800637a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800637c:	697b      	ldr	r3, [r7, #20]
	}
 800637e:	4618      	mov	r0, r3
 8006380:	3718      	adds	r7, #24
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
 8006386:	bf00      	nop
 8006388:	20000918 	.word	0x20000918
 800638c:	20000df4 	.word	0x20000df4
 8006390:	2000091c 	.word	0x2000091c

08006394 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006394:	b580      	push	{r7, lr}
 8006396:	b088      	sub	sp, #32
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80063a2:	2301      	movs	r3, #1
 80063a4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d06e      	beq.n	800648a <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80063ac:	69bb      	ldr	r3, [r7, #24]
 80063ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d10c      	bne.n	80063ce <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 80063b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b8:	b672      	cpsid	i
 80063ba:	f383 8811 	msr	BASEPRI, r3
 80063be:	f3bf 8f6f 	isb	sy
 80063c2:	f3bf 8f4f 	dsb	sy
 80063c6:	b662      	cpsie	i
 80063c8:	60fb      	str	r3, [r7, #12]
}
 80063ca:	bf00      	nop
 80063cc:	e7fe      	b.n	80063cc <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80063ce:	69bb      	ldr	r3, [r7, #24]
 80063d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063d2:	683a      	ldr	r2, [r7, #0]
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d902      	bls.n	80063de <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	61fb      	str	r3, [r7, #28]
 80063dc:	e002      	b.n	80063e4 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80063de:	69bb      	ldr	r3, [r7, #24]
 80063e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063e2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e8:	69fa      	ldr	r2, [r7, #28]
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d04d      	beq.n	800648a <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80063ee:	69bb      	ldr	r3, [r7, #24]
 80063f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063f2:	697a      	ldr	r2, [r7, #20]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d148      	bne.n	800648a <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80063f8:	4b26      	ldr	r3, [pc, #152]	; (8006494 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	69ba      	ldr	r2, [r7, #24]
 80063fe:	429a      	cmp	r2, r3
 8006400:	d10c      	bne.n	800641c <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 8006402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006406:	b672      	cpsid	i
 8006408:	f383 8811 	msr	BASEPRI, r3
 800640c:	f3bf 8f6f 	isb	sy
 8006410:	f3bf 8f4f 	dsb	sy
 8006414:	b662      	cpsie	i
 8006416:	60bb      	str	r3, [r7, #8]
}
 8006418:	bf00      	nop
 800641a:	e7fe      	b.n	800641a <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006420:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	69fa      	ldr	r2, [r7, #28]
 8006426:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006428:	69bb      	ldr	r3, [r7, #24]
 800642a:	699b      	ldr	r3, [r3, #24]
 800642c:	2b00      	cmp	r3, #0
 800642e:	db04      	blt.n	800643a <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006436:	69bb      	ldr	r3, [r7, #24]
 8006438:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800643a:	69bb      	ldr	r3, [r7, #24]
 800643c:	6959      	ldr	r1, [r3, #20]
 800643e:	693a      	ldr	r2, [r7, #16]
 8006440:	4613      	mov	r3, r2
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	4413      	add	r3, r2
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	4a13      	ldr	r2, [pc, #76]	; (8006498 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800644a:	4413      	add	r3, r2
 800644c:	4299      	cmp	r1, r3
 800644e:	d11c      	bne.n	800648a <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006450:	69bb      	ldr	r3, [r7, #24]
 8006452:	3304      	adds	r3, #4
 8006454:	4618      	mov	r0, r3
 8006456:	f7fe f8f5 	bl	8004644 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800645a:	69bb      	ldr	r3, [r7, #24]
 800645c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800645e:	4b0f      	ldr	r3, [pc, #60]	; (800649c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	429a      	cmp	r2, r3
 8006464:	d903      	bls.n	800646e <vTaskPriorityDisinheritAfterTimeout+0xda>
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800646a:	4a0c      	ldr	r2, [pc, #48]	; (800649c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800646c:	6013      	str	r3, [r2, #0]
 800646e:	69bb      	ldr	r3, [r7, #24]
 8006470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006472:	4613      	mov	r3, r2
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	4413      	add	r3, r2
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	4a07      	ldr	r2, [pc, #28]	; (8006498 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800647c:	441a      	add	r2, r3
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	3304      	adds	r3, #4
 8006482:	4619      	mov	r1, r3
 8006484:	4610      	mov	r0, r2
 8006486:	f7fe f880 	bl	800458a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800648a:	bf00      	nop
 800648c:	3720      	adds	r7, #32
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
 8006492:	bf00      	nop
 8006494:	20000918 	.word	0x20000918
 8006498:	2000091c 	.word	0x2000091c
 800649c:	20000df4 	.word	0x20000df4

080064a0 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80064a0:	b480      	push	{r7}
 80064a2:	b083      	sub	sp, #12
 80064a4:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80064a6:	4b09      	ldr	r3, [pc, #36]	; (80064cc <uxTaskResetEventItemValue+0x2c>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	699b      	ldr	r3, [r3, #24]
 80064ac:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064ae:	4b07      	ldr	r3, [pc, #28]	; (80064cc <uxTaskResetEventItemValue+0x2c>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064b4:	4b05      	ldr	r3, [pc, #20]	; (80064cc <uxTaskResetEventItemValue+0x2c>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80064bc:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80064be:	687b      	ldr	r3, [r7, #4]
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr
 80064cc:	20000918 	.word	0x20000918

080064d0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80064d0:	b480      	push	{r7}
 80064d2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80064d4:	4b07      	ldr	r3, [pc, #28]	; (80064f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d004      	beq.n	80064e6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80064dc:	4b05      	ldr	r3, [pc, #20]	; (80064f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80064e2:	3201      	adds	r2, #1
 80064e4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80064e6:	4b03      	ldr	r3, [pc, #12]	; (80064f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80064e8:	681b      	ldr	r3, [r3, #0]
	}
 80064ea:	4618      	mov	r0, r3
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr
 80064f4:	20000918 	.word	0x20000918

080064f8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006502:	4b21      	ldr	r3, [pc, #132]	; (8006588 <prvAddCurrentTaskToDelayedList+0x90>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006508:	4b20      	ldr	r3, [pc, #128]	; (800658c <prvAddCurrentTaskToDelayedList+0x94>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	3304      	adds	r3, #4
 800650e:	4618      	mov	r0, r3
 8006510:	f7fe f898 	bl	8004644 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800651a:	d10a      	bne.n	8006532 <prvAddCurrentTaskToDelayedList+0x3a>
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d007      	beq.n	8006532 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006522:	4b1a      	ldr	r3, [pc, #104]	; (800658c <prvAddCurrentTaskToDelayedList+0x94>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	3304      	adds	r3, #4
 8006528:	4619      	mov	r1, r3
 800652a:	4819      	ldr	r0, [pc, #100]	; (8006590 <prvAddCurrentTaskToDelayedList+0x98>)
 800652c:	f7fe f82d 	bl	800458a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006530:	e026      	b.n	8006580 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006532:	68fa      	ldr	r2, [r7, #12]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	4413      	add	r3, r2
 8006538:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800653a:	4b14      	ldr	r3, [pc, #80]	; (800658c <prvAddCurrentTaskToDelayedList+0x94>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	68ba      	ldr	r2, [r7, #8]
 8006540:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006542:	68ba      	ldr	r2, [r7, #8]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	429a      	cmp	r2, r3
 8006548:	d209      	bcs.n	800655e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800654a:	4b12      	ldr	r3, [pc, #72]	; (8006594 <prvAddCurrentTaskToDelayedList+0x9c>)
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	4b0f      	ldr	r3, [pc, #60]	; (800658c <prvAddCurrentTaskToDelayedList+0x94>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	3304      	adds	r3, #4
 8006554:	4619      	mov	r1, r3
 8006556:	4610      	mov	r0, r2
 8006558:	f7fe f83b 	bl	80045d2 <vListInsert>
}
 800655c:	e010      	b.n	8006580 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800655e:	4b0e      	ldr	r3, [pc, #56]	; (8006598 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	4b0a      	ldr	r3, [pc, #40]	; (800658c <prvAddCurrentTaskToDelayedList+0x94>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	3304      	adds	r3, #4
 8006568:	4619      	mov	r1, r3
 800656a:	4610      	mov	r0, r2
 800656c:	f7fe f831 	bl	80045d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006570:	4b0a      	ldr	r3, [pc, #40]	; (800659c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	68ba      	ldr	r2, [r7, #8]
 8006576:	429a      	cmp	r2, r3
 8006578:	d202      	bcs.n	8006580 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800657a:	4a08      	ldr	r2, [pc, #32]	; (800659c <prvAddCurrentTaskToDelayedList+0xa4>)
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	6013      	str	r3, [r2, #0]
}
 8006580:	bf00      	nop
 8006582:	3710      	adds	r7, #16
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}
 8006588:	20000df0 	.word	0x20000df0
 800658c:	20000918 	.word	0x20000918
 8006590:	20000dd8 	.word	0x20000dd8
 8006594:	20000da8 	.word	0x20000da8
 8006598:	20000da4 	.word	0x20000da4
 800659c:	20000e0c 	.word	0x20000e0c

080065a0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b08a      	sub	sp, #40	; 0x28
 80065a4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80065a6:	2300      	movs	r3, #0
 80065a8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80065aa:	f000 fb15 	bl	8006bd8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80065ae:	4b1d      	ldr	r3, [pc, #116]	; (8006624 <xTimerCreateTimerTask+0x84>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d021      	beq.n	80065fa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80065b6:	2300      	movs	r3, #0
 80065b8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80065ba:	2300      	movs	r3, #0
 80065bc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80065be:	1d3a      	adds	r2, r7, #4
 80065c0:	f107 0108 	add.w	r1, r7, #8
 80065c4:	f107 030c 	add.w	r3, r7, #12
 80065c8:	4618      	mov	r0, r3
 80065ca:	f7fd fdd5 	bl	8004178 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80065ce:	6879      	ldr	r1, [r7, #4]
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	68fa      	ldr	r2, [r7, #12]
 80065d4:	9202      	str	r2, [sp, #8]
 80065d6:	9301      	str	r3, [sp, #4]
 80065d8:	2302      	movs	r3, #2
 80065da:	9300      	str	r3, [sp, #0]
 80065dc:	2300      	movs	r3, #0
 80065de:	460a      	mov	r2, r1
 80065e0:	4911      	ldr	r1, [pc, #68]	; (8006628 <xTimerCreateTimerTask+0x88>)
 80065e2:	4812      	ldr	r0, [pc, #72]	; (800662c <xTimerCreateTimerTask+0x8c>)
 80065e4:	f7fe fed0 	bl	8005388 <xTaskCreateStatic>
 80065e8:	4603      	mov	r3, r0
 80065ea:	4a11      	ldr	r2, [pc, #68]	; (8006630 <xTimerCreateTimerTask+0x90>)
 80065ec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80065ee:	4b10      	ldr	r3, [pc, #64]	; (8006630 <xTimerCreateTimerTask+0x90>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d001      	beq.n	80065fa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80065f6:	2301      	movs	r3, #1
 80065f8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d10c      	bne.n	800661a <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8006600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006604:	b672      	cpsid	i
 8006606:	f383 8811 	msr	BASEPRI, r3
 800660a:	f3bf 8f6f 	isb	sy
 800660e:	f3bf 8f4f 	dsb	sy
 8006612:	b662      	cpsie	i
 8006614:	613b      	str	r3, [r7, #16]
}
 8006616:	bf00      	nop
 8006618:	e7fe      	b.n	8006618 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800661a:	697b      	ldr	r3, [r7, #20]
}
 800661c:	4618      	mov	r0, r3
 800661e:	3718      	adds	r7, #24
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}
 8006624:	20000e48 	.word	0x20000e48
 8006628:	0800bcb4 	.word	0x0800bcb4
 800662c:	08006771 	.word	0x08006771
 8006630:	20000e4c 	.word	0x20000e4c

08006634 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b08a      	sub	sp, #40	; 0x28
 8006638:	af00      	add	r7, sp, #0
 800663a:	60f8      	str	r0, [r7, #12]
 800663c:	60b9      	str	r1, [r7, #8]
 800663e:	607a      	str	r2, [r7, #4]
 8006640:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006642:	2300      	movs	r3, #0
 8006644:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d10c      	bne.n	8006666 <xTimerGenericCommand+0x32>
	__asm volatile
 800664c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006650:	b672      	cpsid	i
 8006652:	f383 8811 	msr	BASEPRI, r3
 8006656:	f3bf 8f6f 	isb	sy
 800665a:	f3bf 8f4f 	dsb	sy
 800665e:	b662      	cpsie	i
 8006660:	623b      	str	r3, [r7, #32]
}
 8006662:	bf00      	nop
 8006664:	e7fe      	b.n	8006664 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006666:	4b1a      	ldr	r3, [pc, #104]	; (80066d0 <xTimerGenericCommand+0x9c>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d02a      	beq.n	80066c4 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	2b05      	cmp	r3, #5
 800667e:	dc18      	bgt.n	80066b2 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006680:	f7ff fd90 	bl	80061a4 <xTaskGetSchedulerState>
 8006684:	4603      	mov	r3, r0
 8006686:	2b02      	cmp	r3, #2
 8006688:	d109      	bne.n	800669e <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800668a:	4b11      	ldr	r3, [pc, #68]	; (80066d0 <xTimerGenericCommand+0x9c>)
 800668c:	6818      	ldr	r0, [r3, #0]
 800668e:	f107 0110 	add.w	r1, r7, #16
 8006692:	2300      	movs	r3, #0
 8006694:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006696:	f7fe f951 	bl	800493c <xQueueGenericSend>
 800669a:	6278      	str	r0, [r7, #36]	; 0x24
 800669c:	e012      	b.n	80066c4 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800669e:	4b0c      	ldr	r3, [pc, #48]	; (80066d0 <xTimerGenericCommand+0x9c>)
 80066a0:	6818      	ldr	r0, [r3, #0]
 80066a2:	f107 0110 	add.w	r1, r7, #16
 80066a6:	2300      	movs	r3, #0
 80066a8:	2200      	movs	r2, #0
 80066aa:	f7fe f947 	bl	800493c <xQueueGenericSend>
 80066ae:	6278      	str	r0, [r7, #36]	; 0x24
 80066b0:	e008      	b.n	80066c4 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80066b2:	4b07      	ldr	r3, [pc, #28]	; (80066d0 <xTimerGenericCommand+0x9c>)
 80066b4:	6818      	ldr	r0, [r3, #0]
 80066b6:	f107 0110 	add.w	r1, r7, #16
 80066ba:	2300      	movs	r3, #0
 80066bc:	683a      	ldr	r2, [r7, #0]
 80066be:	f7fe fa43 	bl	8004b48 <xQueueGenericSendFromISR>
 80066c2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80066c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3728      	adds	r7, #40	; 0x28
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	20000e48 	.word	0x20000e48

080066d4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b088      	sub	sp, #32
 80066d8:	af02      	add	r7, sp, #8
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066de:	4b23      	ldr	r3, [pc, #140]	; (800676c <prvProcessExpiredTimer+0x98>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	3304      	adds	r3, #4
 80066ec:	4618      	mov	r0, r3
 80066ee:	f7fd ffa9 	bl	8004644 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066f8:	f003 0304 	and.w	r3, r3, #4
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d024      	beq.n	800674a <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	699a      	ldr	r2, [r3, #24]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	18d1      	adds	r1, r2, r3
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	683a      	ldr	r2, [r7, #0]
 800670c:	6978      	ldr	r0, [r7, #20]
 800670e:	f000 f8d3 	bl	80068b8 <prvInsertTimerInActiveList>
 8006712:	4603      	mov	r3, r0
 8006714:	2b00      	cmp	r3, #0
 8006716:	d021      	beq.n	800675c <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006718:	2300      	movs	r3, #0
 800671a:	9300      	str	r3, [sp, #0]
 800671c:	2300      	movs	r3, #0
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	2100      	movs	r1, #0
 8006722:	6978      	ldr	r0, [r7, #20]
 8006724:	f7ff ff86 	bl	8006634 <xTimerGenericCommand>
 8006728:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d115      	bne.n	800675c <prvProcessExpiredTimer+0x88>
	__asm volatile
 8006730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006734:	b672      	cpsid	i
 8006736:	f383 8811 	msr	BASEPRI, r3
 800673a:	f3bf 8f6f 	isb	sy
 800673e:	f3bf 8f4f 	dsb	sy
 8006742:	b662      	cpsie	i
 8006744:	60fb      	str	r3, [r7, #12]
}
 8006746:	bf00      	nop
 8006748:	e7fe      	b.n	8006748 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006750:	f023 0301 	bic.w	r3, r3, #1
 8006754:	b2da      	uxtb	r2, r3
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	6a1b      	ldr	r3, [r3, #32]
 8006760:	6978      	ldr	r0, [r7, #20]
 8006762:	4798      	blx	r3
}
 8006764:	bf00      	nop
 8006766:	3718      	adds	r7, #24
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}
 800676c:	20000e40 	.word	0x20000e40

08006770 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006778:	f107 0308 	add.w	r3, r7, #8
 800677c:	4618      	mov	r0, r3
 800677e:	f000 f857 	bl	8006830 <prvGetNextExpireTime>
 8006782:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	4619      	mov	r1, r3
 8006788:	68f8      	ldr	r0, [r7, #12]
 800678a:	f000 f803 	bl	8006794 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800678e:	f000 f8d5 	bl	800693c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006792:	e7f1      	b.n	8006778 <prvTimerTask+0x8>

08006794 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800679e:	f7ff f85d 	bl	800585c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80067a2:	f107 0308 	add.w	r3, r7, #8
 80067a6:	4618      	mov	r0, r3
 80067a8:	f000 f866 	bl	8006878 <prvSampleTimeNow>
 80067ac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d130      	bne.n	8006816 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d10a      	bne.n	80067d0 <prvProcessTimerOrBlockTask+0x3c>
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	429a      	cmp	r2, r3
 80067c0:	d806      	bhi.n	80067d0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80067c2:	f7ff f859 	bl	8005878 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80067c6:	68f9      	ldr	r1, [r7, #12]
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f7ff ff83 	bl	80066d4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80067ce:	e024      	b.n	800681a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d008      	beq.n	80067e8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80067d6:	4b13      	ldr	r3, [pc, #76]	; (8006824 <prvProcessTimerOrBlockTask+0x90>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d101      	bne.n	80067e4 <prvProcessTimerOrBlockTask+0x50>
 80067e0:	2301      	movs	r3, #1
 80067e2:	e000      	b.n	80067e6 <prvProcessTimerOrBlockTask+0x52>
 80067e4:	2300      	movs	r3, #0
 80067e6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80067e8:	4b0f      	ldr	r3, [pc, #60]	; (8006828 <prvProcessTimerOrBlockTask+0x94>)
 80067ea:	6818      	ldr	r0, [r3, #0]
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	1ad3      	subs	r3, r2, r3
 80067f2:	683a      	ldr	r2, [r7, #0]
 80067f4:	4619      	mov	r1, r3
 80067f6:	f7fe fd93 	bl	8005320 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80067fa:	f7ff f83d 	bl	8005878 <xTaskResumeAll>
 80067fe:	4603      	mov	r3, r0
 8006800:	2b00      	cmp	r3, #0
 8006802:	d10a      	bne.n	800681a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006804:	4b09      	ldr	r3, [pc, #36]	; (800682c <prvProcessTimerOrBlockTask+0x98>)
 8006806:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800680a:	601a      	str	r2, [r3, #0]
 800680c:	f3bf 8f4f 	dsb	sy
 8006810:	f3bf 8f6f 	isb	sy
}
 8006814:	e001      	b.n	800681a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006816:	f7ff f82f 	bl	8005878 <xTaskResumeAll>
}
 800681a:	bf00      	nop
 800681c:	3710      	adds	r7, #16
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop
 8006824:	20000e44 	.word	0x20000e44
 8006828:	20000e48 	.word	0x20000e48
 800682c:	e000ed04 	.word	0xe000ed04

08006830 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006830:	b480      	push	{r7}
 8006832:	b085      	sub	sp, #20
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006838:	4b0e      	ldr	r3, [pc, #56]	; (8006874 <prvGetNextExpireTime+0x44>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d101      	bne.n	8006846 <prvGetNextExpireTime+0x16>
 8006842:	2201      	movs	r2, #1
 8006844:	e000      	b.n	8006848 <prvGetNextExpireTime+0x18>
 8006846:	2200      	movs	r2, #0
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d105      	bne.n	8006860 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006854:	4b07      	ldr	r3, [pc, #28]	; (8006874 <prvGetNextExpireTime+0x44>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	60fb      	str	r3, [r7, #12]
 800685e:	e001      	b.n	8006864 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006860:	2300      	movs	r3, #0
 8006862:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006864:	68fb      	ldr	r3, [r7, #12]
}
 8006866:	4618      	mov	r0, r3
 8006868:	3714      	adds	r7, #20
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr
 8006872:	bf00      	nop
 8006874:	20000e40 	.word	0x20000e40

08006878 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006880:	f7ff f89a 	bl	80059b8 <xTaskGetTickCount>
 8006884:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006886:	4b0b      	ldr	r3, [pc, #44]	; (80068b4 <prvSampleTimeNow+0x3c>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	68fa      	ldr	r2, [r7, #12]
 800688c:	429a      	cmp	r2, r3
 800688e:	d205      	bcs.n	800689c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006890:	f000 f93c 	bl	8006b0c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	601a      	str	r2, [r3, #0]
 800689a:	e002      	b.n	80068a2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80068a2:	4a04      	ldr	r2, [pc, #16]	; (80068b4 <prvSampleTimeNow+0x3c>)
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80068a8:	68fb      	ldr	r3, [r7, #12]
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3710      	adds	r7, #16
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop
 80068b4:	20000e50 	.word	0x20000e50

080068b8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b086      	sub	sp, #24
 80068bc:	af00      	add	r7, sp, #0
 80068be:	60f8      	str	r0, [r7, #12]
 80068c0:	60b9      	str	r1, [r7, #8]
 80068c2:	607a      	str	r2, [r7, #4]
 80068c4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80068c6:	2300      	movs	r3, #0
 80068c8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	68ba      	ldr	r2, [r7, #8]
 80068ce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	68fa      	ldr	r2, [r7, #12]
 80068d4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80068d6:	68ba      	ldr	r2, [r7, #8]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	429a      	cmp	r2, r3
 80068dc:	d812      	bhi.n	8006904 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	1ad2      	subs	r2, r2, r3
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	699b      	ldr	r3, [r3, #24]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d302      	bcc.n	80068f2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80068ec:	2301      	movs	r3, #1
 80068ee:	617b      	str	r3, [r7, #20]
 80068f0:	e01b      	b.n	800692a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80068f2:	4b10      	ldr	r3, [pc, #64]	; (8006934 <prvInsertTimerInActiveList+0x7c>)
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	3304      	adds	r3, #4
 80068fa:	4619      	mov	r1, r3
 80068fc:	4610      	mov	r0, r2
 80068fe:	f7fd fe68 	bl	80045d2 <vListInsert>
 8006902:	e012      	b.n	800692a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	429a      	cmp	r2, r3
 800690a:	d206      	bcs.n	800691a <prvInsertTimerInActiveList+0x62>
 800690c:	68ba      	ldr	r2, [r7, #8]
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	429a      	cmp	r2, r3
 8006912:	d302      	bcc.n	800691a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006914:	2301      	movs	r3, #1
 8006916:	617b      	str	r3, [r7, #20]
 8006918:	e007      	b.n	800692a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800691a:	4b07      	ldr	r3, [pc, #28]	; (8006938 <prvInsertTimerInActiveList+0x80>)
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	3304      	adds	r3, #4
 8006922:	4619      	mov	r1, r3
 8006924:	4610      	mov	r0, r2
 8006926:	f7fd fe54 	bl	80045d2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800692a:	697b      	ldr	r3, [r7, #20]
}
 800692c:	4618      	mov	r0, r3
 800692e:	3718      	adds	r7, #24
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}
 8006934:	20000e44 	.word	0x20000e44
 8006938:	20000e40 	.word	0x20000e40

0800693c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b08e      	sub	sp, #56	; 0x38
 8006940:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006942:	e0d0      	b.n	8006ae6 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2b00      	cmp	r3, #0
 8006948:	da1a      	bge.n	8006980 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800694a:	1d3b      	adds	r3, r7, #4
 800694c:	3304      	adds	r3, #4
 800694e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006952:	2b00      	cmp	r3, #0
 8006954:	d10c      	bne.n	8006970 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8006956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800695a:	b672      	cpsid	i
 800695c:	f383 8811 	msr	BASEPRI, r3
 8006960:	f3bf 8f6f 	isb	sy
 8006964:	f3bf 8f4f 	dsb	sy
 8006968:	b662      	cpsie	i
 800696a:	61fb      	str	r3, [r7, #28]
}
 800696c:	bf00      	nop
 800696e:	e7fe      	b.n	800696e <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006976:	6850      	ldr	r0, [r2, #4]
 8006978:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800697a:	6892      	ldr	r2, [r2, #8]
 800697c:	4611      	mov	r1, r2
 800697e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2b00      	cmp	r3, #0
 8006984:	f2c0 80ae 	blt.w	8006ae4 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800698c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800698e:	695b      	ldr	r3, [r3, #20]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d004      	beq.n	800699e <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006996:	3304      	adds	r3, #4
 8006998:	4618      	mov	r0, r3
 800699a:	f7fd fe53 	bl	8004644 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800699e:	463b      	mov	r3, r7
 80069a0:	4618      	mov	r0, r3
 80069a2:	f7ff ff69 	bl	8006878 <prvSampleTimeNow>
 80069a6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2b09      	cmp	r3, #9
 80069ac:	f200 809b 	bhi.w	8006ae6 <prvProcessReceivedCommands+0x1aa>
 80069b0:	a201      	add	r2, pc, #4	; (adr r2, 80069b8 <prvProcessReceivedCommands+0x7c>)
 80069b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b6:	bf00      	nop
 80069b8:	080069e1 	.word	0x080069e1
 80069bc:	080069e1 	.word	0x080069e1
 80069c0:	080069e1 	.word	0x080069e1
 80069c4:	08006a59 	.word	0x08006a59
 80069c8:	08006a6d 	.word	0x08006a6d
 80069cc:	08006abb 	.word	0x08006abb
 80069d0:	080069e1 	.word	0x080069e1
 80069d4:	080069e1 	.word	0x080069e1
 80069d8:	08006a59 	.word	0x08006a59
 80069dc:	08006a6d 	.word	0x08006a6d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80069e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069e6:	f043 0301 	orr.w	r3, r3, #1
 80069ea:	b2da      	uxtb	r2, r3
 80069ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80069f2:	68ba      	ldr	r2, [r7, #8]
 80069f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f6:	699b      	ldr	r3, [r3, #24]
 80069f8:	18d1      	adds	r1, r2, r3
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a00:	f7ff ff5a 	bl	80068b8 <prvInsertTimerInActiveList>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d06d      	beq.n	8006ae6 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a0c:	6a1b      	ldr	r3, [r3, #32]
 8006a0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a10:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a18:	f003 0304 	and.w	r3, r3, #4
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d062      	beq.n	8006ae6 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006a20:	68ba      	ldr	r2, [r7, #8]
 8006a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a24:	699b      	ldr	r3, [r3, #24]
 8006a26:	441a      	add	r2, r3
 8006a28:	2300      	movs	r3, #0
 8006a2a:	9300      	str	r3, [sp, #0]
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	2100      	movs	r1, #0
 8006a30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a32:	f7ff fdff 	bl	8006634 <xTimerGenericCommand>
 8006a36:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006a38:	6a3b      	ldr	r3, [r7, #32]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d153      	bne.n	8006ae6 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8006a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a42:	b672      	cpsid	i
 8006a44:	f383 8811 	msr	BASEPRI, r3
 8006a48:	f3bf 8f6f 	isb	sy
 8006a4c:	f3bf 8f4f 	dsb	sy
 8006a50:	b662      	cpsie	i
 8006a52:	61bb      	str	r3, [r7, #24]
}
 8006a54:	bf00      	nop
 8006a56:	e7fe      	b.n	8006a56 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a5e:	f023 0301 	bic.w	r3, r3, #1
 8006a62:	b2da      	uxtb	r2, r3
 8006a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006a6a:	e03c      	b.n	8006ae6 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a72:	f043 0301 	orr.w	r3, r3, #1
 8006a76:	b2da      	uxtb	r2, r3
 8006a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006a7e:	68ba      	ldr	r2, [r7, #8]
 8006a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a82:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a86:	699b      	ldr	r3, [r3, #24]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d10c      	bne.n	8006aa6 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8006a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a90:	b672      	cpsid	i
 8006a92:	f383 8811 	msr	BASEPRI, r3
 8006a96:	f3bf 8f6f 	isb	sy
 8006a9a:	f3bf 8f4f 	dsb	sy
 8006a9e:	b662      	cpsie	i
 8006aa0:	617b      	str	r3, [r7, #20]
}
 8006aa2:	bf00      	nop
 8006aa4:	e7fe      	b.n	8006aa4 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa8:	699a      	ldr	r2, [r3, #24]
 8006aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aac:	18d1      	adds	r1, r2, r3
 8006aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ab2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ab4:	f7ff ff00 	bl	80068b8 <prvInsertTimerInActiveList>
					break;
 8006ab8:	e015      	b.n	8006ae6 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006abc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ac0:	f003 0302 	and.w	r3, r3, #2
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d103      	bne.n	8006ad0 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8006ac8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006aca:	f000 fbe5 	bl	8007298 <vPortFree>
 8006ace:	e00a      	b.n	8006ae6 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ad6:	f023 0301 	bic.w	r3, r3, #1
 8006ada:	b2da      	uxtb	r2, r3
 8006adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ade:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006ae2:	e000      	b.n	8006ae6 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006ae4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006ae6:	4b08      	ldr	r3, [pc, #32]	; (8006b08 <prvProcessReceivedCommands+0x1cc>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	1d39      	adds	r1, r7, #4
 8006aec:	2200      	movs	r2, #0
 8006aee:	4618      	mov	r0, r3
 8006af0:	f7fe f8ca 	bl	8004c88 <xQueueReceive>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	f47f af24 	bne.w	8006944 <prvProcessReceivedCommands+0x8>
	}
}
 8006afc:	bf00      	nop
 8006afe:	bf00      	nop
 8006b00:	3730      	adds	r7, #48	; 0x30
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	20000e48 	.word	0x20000e48

08006b0c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b088      	sub	sp, #32
 8006b10:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006b12:	e04a      	b.n	8006baa <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b14:	4b2e      	ldr	r3, [pc, #184]	; (8006bd0 <prvSwitchTimerLists+0xc4>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	68db      	ldr	r3, [r3, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b1e:	4b2c      	ldr	r3, [pc, #176]	; (8006bd0 <prvSwitchTimerLists+0xc4>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	68db      	ldr	r3, [r3, #12]
 8006b26:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	3304      	adds	r3, #4
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f7fd fd89 	bl	8004644 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	6a1b      	ldr	r3, [r3, #32]
 8006b36:	68f8      	ldr	r0, [r7, #12]
 8006b38:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b40:	f003 0304 	and.w	r3, r3, #4
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d030      	beq.n	8006baa <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	699b      	ldr	r3, [r3, #24]
 8006b4c:	693a      	ldr	r2, [r7, #16]
 8006b4e:	4413      	add	r3, r2
 8006b50:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006b52:	68ba      	ldr	r2, [r7, #8]
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d90e      	bls.n	8006b78 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	68ba      	ldr	r2, [r7, #8]
 8006b5e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	68fa      	ldr	r2, [r7, #12]
 8006b64:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b66:	4b1a      	ldr	r3, [pc, #104]	; (8006bd0 <prvSwitchTimerLists+0xc4>)
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	3304      	adds	r3, #4
 8006b6e:	4619      	mov	r1, r3
 8006b70:	4610      	mov	r0, r2
 8006b72:	f7fd fd2e 	bl	80045d2 <vListInsert>
 8006b76:	e018      	b.n	8006baa <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006b78:	2300      	movs	r3, #0
 8006b7a:	9300      	str	r3, [sp, #0]
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	693a      	ldr	r2, [r7, #16]
 8006b80:	2100      	movs	r1, #0
 8006b82:	68f8      	ldr	r0, [r7, #12]
 8006b84:	f7ff fd56 	bl	8006634 <xTimerGenericCommand>
 8006b88:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d10c      	bne.n	8006baa <prvSwitchTimerLists+0x9e>
	__asm volatile
 8006b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b94:	b672      	cpsid	i
 8006b96:	f383 8811 	msr	BASEPRI, r3
 8006b9a:	f3bf 8f6f 	isb	sy
 8006b9e:	f3bf 8f4f 	dsb	sy
 8006ba2:	b662      	cpsie	i
 8006ba4:	603b      	str	r3, [r7, #0]
}
 8006ba6:	bf00      	nop
 8006ba8:	e7fe      	b.n	8006ba8 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006baa:	4b09      	ldr	r3, [pc, #36]	; (8006bd0 <prvSwitchTimerLists+0xc4>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d1af      	bne.n	8006b14 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006bb4:	4b06      	ldr	r3, [pc, #24]	; (8006bd0 <prvSwitchTimerLists+0xc4>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006bba:	4b06      	ldr	r3, [pc, #24]	; (8006bd4 <prvSwitchTimerLists+0xc8>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a04      	ldr	r2, [pc, #16]	; (8006bd0 <prvSwitchTimerLists+0xc4>)
 8006bc0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006bc2:	4a04      	ldr	r2, [pc, #16]	; (8006bd4 <prvSwitchTimerLists+0xc8>)
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	6013      	str	r3, [r2, #0]
}
 8006bc8:	bf00      	nop
 8006bca:	3718      	adds	r7, #24
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}
 8006bd0:	20000e40 	.word	0x20000e40
 8006bd4:	20000e44 	.word	0x20000e44

08006bd8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b082      	sub	sp, #8
 8006bdc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006bde:	f000 f965 	bl	8006eac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006be2:	4b15      	ldr	r3, [pc, #84]	; (8006c38 <prvCheckForValidListAndQueue+0x60>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d120      	bne.n	8006c2c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006bea:	4814      	ldr	r0, [pc, #80]	; (8006c3c <prvCheckForValidListAndQueue+0x64>)
 8006bec:	f7fd fca0 	bl	8004530 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006bf0:	4813      	ldr	r0, [pc, #76]	; (8006c40 <prvCheckForValidListAndQueue+0x68>)
 8006bf2:	f7fd fc9d 	bl	8004530 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006bf6:	4b13      	ldr	r3, [pc, #76]	; (8006c44 <prvCheckForValidListAndQueue+0x6c>)
 8006bf8:	4a10      	ldr	r2, [pc, #64]	; (8006c3c <prvCheckForValidListAndQueue+0x64>)
 8006bfa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006bfc:	4b12      	ldr	r3, [pc, #72]	; (8006c48 <prvCheckForValidListAndQueue+0x70>)
 8006bfe:	4a10      	ldr	r2, [pc, #64]	; (8006c40 <prvCheckForValidListAndQueue+0x68>)
 8006c00:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006c02:	2300      	movs	r3, #0
 8006c04:	9300      	str	r3, [sp, #0]
 8006c06:	4b11      	ldr	r3, [pc, #68]	; (8006c4c <prvCheckForValidListAndQueue+0x74>)
 8006c08:	4a11      	ldr	r2, [pc, #68]	; (8006c50 <prvCheckForValidListAndQueue+0x78>)
 8006c0a:	2110      	movs	r1, #16
 8006c0c:	200a      	movs	r0, #10
 8006c0e:	f7fd fdad 	bl	800476c <xQueueGenericCreateStatic>
 8006c12:	4603      	mov	r3, r0
 8006c14:	4a08      	ldr	r2, [pc, #32]	; (8006c38 <prvCheckForValidListAndQueue+0x60>)
 8006c16:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006c18:	4b07      	ldr	r3, [pc, #28]	; (8006c38 <prvCheckForValidListAndQueue+0x60>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d005      	beq.n	8006c2c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006c20:	4b05      	ldr	r3, [pc, #20]	; (8006c38 <prvCheckForValidListAndQueue+0x60>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	490b      	ldr	r1, [pc, #44]	; (8006c54 <prvCheckForValidListAndQueue+0x7c>)
 8006c26:	4618      	mov	r0, r3
 8006c28:	f7fe fb50 	bl	80052cc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006c2c:	f000 f972 	bl	8006f14 <vPortExitCritical>
}
 8006c30:	bf00      	nop
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	bf00      	nop
 8006c38:	20000e48 	.word	0x20000e48
 8006c3c:	20000e18 	.word	0x20000e18
 8006c40:	20000e2c 	.word	0x20000e2c
 8006c44:	20000e40 	.word	0x20000e40
 8006c48:	20000e44 	.word	0x20000e44
 8006c4c:	20000ef4 	.word	0x20000ef4
 8006c50:	20000e54 	.word	0x20000e54
 8006c54:	0800bcbc 	.word	0x0800bcbc

08006c58 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b08a      	sub	sp, #40	; 0x28
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	60f8      	str	r0, [r7, #12]
 8006c60:	60b9      	str	r1, [r7, #8]
 8006c62:	607a      	str	r2, [r7, #4]
 8006c64:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8006c66:	f06f 0301 	mvn.w	r3, #1
 8006c6a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006c78:	4b06      	ldr	r3, [pc, #24]	; (8006c94 <xTimerPendFunctionCallFromISR+0x3c>)
 8006c7a:	6818      	ldr	r0, [r3, #0]
 8006c7c:	f107 0114 	add.w	r1, r7, #20
 8006c80:	2300      	movs	r3, #0
 8006c82:	683a      	ldr	r2, [r7, #0]
 8006c84:	f7fd ff60 	bl	8004b48 <xQueueGenericSendFromISR>
 8006c88:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8006c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3728      	adds	r7, #40	; 0x28
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}
 8006c94:	20000e48 	.word	0x20000e48

08006c98 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b085      	sub	sp, #20
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	60b9      	str	r1, [r7, #8]
 8006ca2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	3b04      	subs	r3, #4
 8006ca8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006cb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	3b04      	subs	r3, #4
 8006cb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	f023 0201 	bic.w	r2, r3, #1
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	3b04      	subs	r3, #4
 8006cc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006cc8:	4a0c      	ldr	r2, [pc, #48]	; (8006cfc <pxPortInitialiseStack+0x64>)
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	3b14      	subs	r3, #20
 8006cd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	3b04      	subs	r3, #4
 8006cde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f06f 0202 	mvn.w	r2, #2
 8006ce6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	3b20      	subs	r3, #32
 8006cec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006cee:	68fb      	ldr	r3, [r7, #12]
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3714      	adds	r7, #20
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr
 8006cfc:	08006d01 	.word	0x08006d01

08006d00 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006d00:	b480      	push	{r7}
 8006d02:	b085      	sub	sp, #20
 8006d04:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006d06:	2300      	movs	r3, #0
 8006d08:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006d0a:	4b14      	ldr	r3, [pc, #80]	; (8006d5c <prvTaskExitError+0x5c>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d12:	d00c      	beq.n	8006d2e <prvTaskExitError+0x2e>
	__asm volatile
 8006d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d18:	b672      	cpsid	i
 8006d1a:	f383 8811 	msr	BASEPRI, r3
 8006d1e:	f3bf 8f6f 	isb	sy
 8006d22:	f3bf 8f4f 	dsb	sy
 8006d26:	b662      	cpsie	i
 8006d28:	60fb      	str	r3, [r7, #12]
}
 8006d2a:	bf00      	nop
 8006d2c:	e7fe      	b.n	8006d2c <prvTaskExitError+0x2c>
	__asm volatile
 8006d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d32:	b672      	cpsid	i
 8006d34:	f383 8811 	msr	BASEPRI, r3
 8006d38:	f3bf 8f6f 	isb	sy
 8006d3c:	f3bf 8f4f 	dsb	sy
 8006d40:	b662      	cpsie	i
 8006d42:	60bb      	str	r3, [r7, #8]
}
 8006d44:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006d46:	bf00      	nop
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d0fc      	beq.n	8006d48 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006d4e:	bf00      	nop
 8006d50:	bf00      	nop
 8006d52:	3714      	adds	r7, #20
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr
 8006d5c:	2000000c 	.word	0x2000000c

08006d60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006d60:	4b07      	ldr	r3, [pc, #28]	; (8006d80 <pxCurrentTCBConst2>)
 8006d62:	6819      	ldr	r1, [r3, #0]
 8006d64:	6808      	ldr	r0, [r1, #0]
 8006d66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d6a:	f380 8809 	msr	PSP, r0
 8006d6e:	f3bf 8f6f 	isb	sy
 8006d72:	f04f 0000 	mov.w	r0, #0
 8006d76:	f380 8811 	msr	BASEPRI, r0
 8006d7a:	4770      	bx	lr
 8006d7c:	f3af 8000 	nop.w

08006d80 <pxCurrentTCBConst2>:
 8006d80:	20000918 	.word	0x20000918
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006d84:	bf00      	nop
 8006d86:	bf00      	nop

08006d88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006d88:	4808      	ldr	r0, [pc, #32]	; (8006dac <prvPortStartFirstTask+0x24>)
 8006d8a:	6800      	ldr	r0, [r0, #0]
 8006d8c:	6800      	ldr	r0, [r0, #0]
 8006d8e:	f380 8808 	msr	MSP, r0
 8006d92:	f04f 0000 	mov.w	r0, #0
 8006d96:	f380 8814 	msr	CONTROL, r0
 8006d9a:	b662      	cpsie	i
 8006d9c:	b661      	cpsie	f
 8006d9e:	f3bf 8f4f 	dsb	sy
 8006da2:	f3bf 8f6f 	isb	sy
 8006da6:	df00      	svc	0
 8006da8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006daa:	bf00      	nop
 8006dac:	e000ed08 	.word	0xe000ed08

08006db0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b084      	sub	sp, #16
 8006db4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006db6:	4b37      	ldr	r3, [pc, #220]	; (8006e94 <xPortStartScheduler+0xe4>)
 8006db8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	22ff      	movs	r2, #255	; 0xff
 8006dc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006dd0:	78fb      	ldrb	r3, [r7, #3]
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006dd8:	b2da      	uxtb	r2, r3
 8006dda:	4b2f      	ldr	r3, [pc, #188]	; (8006e98 <xPortStartScheduler+0xe8>)
 8006ddc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006dde:	4b2f      	ldr	r3, [pc, #188]	; (8006e9c <xPortStartScheduler+0xec>)
 8006de0:	2207      	movs	r2, #7
 8006de2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006de4:	e009      	b.n	8006dfa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006de6:	4b2d      	ldr	r3, [pc, #180]	; (8006e9c <xPortStartScheduler+0xec>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	3b01      	subs	r3, #1
 8006dec:	4a2b      	ldr	r2, [pc, #172]	; (8006e9c <xPortStartScheduler+0xec>)
 8006dee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006df0:	78fb      	ldrb	r3, [r7, #3]
 8006df2:	b2db      	uxtb	r3, r3
 8006df4:	005b      	lsls	r3, r3, #1
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006dfa:	78fb      	ldrb	r3, [r7, #3]
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e02:	2b80      	cmp	r3, #128	; 0x80
 8006e04:	d0ef      	beq.n	8006de6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006e06:	4b25      	ldr	r3, [pc, #148]	; (8006e9c <xPortStartScheduler+0xec>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f1c3 0307 	rsb	r3, r3, #7
 8006e0e:	2b04      	cmp	r3, #4
 8006e10:	d00c      	beq.n	8006e2c <xPortStartScheduler+0x7c>
	__asm volatile
 8006e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e16:	b672      	cpsid	i
 8006e18:	f383 8811 	msr	BASEPRI, r3
 8006e1c:	f3bf 8f6f 	isb	sy
 8006e20:	f3bf 8f4f 	dsb	sy
 8006e24:	b662      	cpsie	i
 8006e26:	60bb      	str	r3, [r7, #8]
}
 8006e28:	bf00      	nop
 8006e2a:	e7fe      	b.n	8006e2a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006e2c:	4b1b      	ldr	r3, [pc, #108]	; (8006e9c <xPortStartScheduler+0xec>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	021b      	lsls	r3, r3, #8
 8006e32:	4a1a      	ldr	r2, [pc, #104]	; (8006e9c <xPortStartScheduler+0xec>)
 8006e34:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006e36:	4b19      	ldr	r3, [pc, #100]	; (8006e9c <xPortStartScheduler+0xec>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006e3e:	4a17      	ldr	r2, [pc, #92]	; (8006e9c <xPortStartScheduler+0xec>)
 8006e40:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	b2da      	uxtb	r2, r3
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006e4a:	4b15      	ldr	r3, [pc, #84]	; (8006ea0 <xPortStartScheduler+0xf0>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a14      	ldr	r2, [pc, #80]	; (8006ea0 <xPortStartScheduler+0xf0>)
 8006e50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006e54:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006e56:	4b12      	ldr	r3, [pc, #72]	; (8006ea0 <xPortStartScheduler+0xf0>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a11      	ldr	r2, [pc, #68]	; (8006ea0 <xPortStartScheduler+0xf0>)
 8006e5c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006e60:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006e62:	f000 f8dd 	bl	8007020 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006e66:	4b0f      	ldr	r3, [pc, #60]	; (8006ea4 <xPortStartScheduler+0xf4>)
 8006e68:	2200      	movs	r2, #0
 8006e6a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006e6c:	f000 f8fc 	bl	8007068 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006e70:	4b0d      	ldr	r3, [pc, #52]	; (8006ea8 <xPortStartScheduler+0xf8>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a0c      	ldr	r2, [pc, #48]	; (8006ea8 <xPortStartScheduler+0xf8>)
 8006e76:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006e7a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006e7c:	f7ff ff84 	bl	8006d88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006e80:	f7fe fe66 	bl	8005b50 <vTaskSwitchContext>
	prvTaskExitError();
 8006e84:	f7ff ff3c 	bl	8006d00 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006e88:	2300      	movs	r3, #0
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3710      	adds	r7, #16
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	bf00      	nop
 8006e94:	e000e400 	.word	0xe000e400
 8006e98:	20000f44 	.word	0x20000f44
 8006e9c:	20000f48 	.word	0x20000f48
 8006ea0:	e000ed20 	.word	0xe000ed20
 8006ea4:	2000000c 	.word	0x2000000c
 8006ea8:	e000ef34 	.word	0xe000ef34

08006eac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
	__asm volatile
 8006eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb6:	b672      	cpsid	i
 8006eb8:	f383 8811 	msr	BASEPRI, r3
 8006ebc:	f3bf 8f6f 	isb	sy
 8006ec0:	f3bf 8f4f 	dsb	sy
 8006ec4:	b662      	cpsie	i
 8006ec6:	607b      	str	r3, [r7, #4]
}
 8006ec8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006eca:	4b10      	ldr	r3, [pc, #64]	; (8006f0c <vPortEnterCritical+0x60>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	3301      	adds	r3, #1
 8006ed0:	4a0e      	ldr	r2, [pc, #56]	; (8006f0c <vPortEnterCritical+0x60>)
 8006ed2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006ed4:	4b0d      	ldr	r3, [pc, #52]	; (8006f0c <vPortEnterCritical+0x60>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d111      	bne.n	8006f00 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006edc:	4b0c      	ldr	r3, [pc, #48]	; (8006f10 <vPortEnterCritical+0x64>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d00c      	beq.n	8006f00 <vPortEnterCritical+0x54>
	__asm volatile
 8006ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eea:	b672      	cpsid	i
 8006eec:	f383 8811 	msr	BASEPRI, r3
 8006ef0:	f3bf 8f6f 	isb	sy
 8006ef4:	f3bf 8f4f 	dsb	sy
 8006ef8:	b662      	cpsie	i
 8006efa:	603b      	str	r3, [r7, #0]
}
 8006efc:	bf00      	nop
 8006efe:	e7fe      	b.n	8006efe <vPortEnterCritical+0x52>
	}
}
 8006f00:	bf00      	nop
 8006f02:	370c      	adds	r7, #12
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr
 8006f0c:	2000000c 	.word	0x2000000c
 8006f10:	e000ed04 	.word	0xe000ed04

08006f14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006f14:	b480      	push	{r7}
 8006f16:	b083      	sub	sp, #12
 8006f18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006f1a:	4b13      	ldr	r3, [pc, #76]	; (8006f68 <vPortExitCritical+0x54>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d10c      	bne.n	8006f3c <vPortExitCritical+0x28>
	__asm volatile
 8006f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f26:	b672      	cpsid	i
 8006f28:	f383 8811 	msr	BASEPRI, r3
 8006f2c:	f3bf 8f6f 	isb	sy
 8006f30:	f3bf 8f4f 	dsb	sy
 8006f34:	b662      	cpsie	i
 8006f36:	607b      	str	r3, [r7, #4]
}
 8006f38:	bf00      	nop
 8006f3a:	e7fe      	b.n	8006f3a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8006f3c:	4b0a      	ldr	r3, [pc, #40]	; (8006f68 <vPortExitCritical+0x54>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	3b01      	subs	r3, #1
 8006f42:	4a09      	ldr	r2, [pc, #36]	; (8006f68 <vPortExitCritical+0x54>)
 8006f44:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006f46:	4b08      	ldr	r3, [pc, #32]	; (8006f68 <vPortExitCritical+0x54>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d105      	bne.n	8006f5a <vPortExitCritical+0x46>
 8006f4e:	2300      	movs	r3, #0
 8006f50:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	f383 8811 	msr	BASEPRI, r3
}
 8006f58:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006f5a:	bf00      	nop
 8006f5c:	370c      	adds	r7, #12
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr
 8006f66:	bf00      	nop
 8006f68:	2000000c 	.word	0x2000000c
 8006f6c:	00000000 	.word	0x00000000

08006f70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006f70:	f3ef 8009 	mrs	r0, PSP
 8006f74:	f3bf 8f6f 	isb	sy
 8006f78:	4b15      	ldr	r3, [pc, #84]	; (8006fd0 <pxCurrentTCBConst>)
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	f01e 0f10 	tst.w	lr, #16
 8006f80:	bf08      	it	eq
 8006f82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006f86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f8a:	6010      	str	r0, [r2, #0]
 8006f8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006f90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006f94:	b672      	cpsid	i
 8006f96:	f380 8811 	msr	BASEPRI, r0
 8006f9a:	f3bf 8f4f 	dsb	sy
 8006f9e:	f3bf 8f6f 	isb	sy
 8006fa2:	b662      	cpsie	i
 8006fa4:	f7fe fdd4 	bl	8005b50 <vTaskSwitchContext>
 8006fa8:	f04f 0000 	mov.w	r0, #0
 8006fac:	f380 8811 	msr	BASEPRI, r0
 8006fb0:	bc09      	pop	{r0, r3}
 8006fb2:	6819      	ldr	r1, [r3, #0]
 8006fb4:	6808      	ldr	r0, [r1, #0]
 8006fb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fba:	f01e 0f10 	tst.w	lr, #16
 8006fbe:	bf08      	it	eq
 8006fc0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006fc4:	f380 8809 	msr	PSP, r0
 8006fc8:	f3bf 8f6f 	isb	sy
 8006fcc:	4770      	bx	lr
 8006fce:	bf00      	nop

08006fd0 <pxCurrentTCBConst>:
 8006fd0:	20000918 	.word	0x20000918
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006fd4:	bf00      	nop
 8006fd6:	bf00      	nop

08006fd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b082      	sub	sp, #8
 8006fdc:	af00      	add	r7, sp, #0
	__asm volatile
 8006fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe2:	b672      	cpsid	i
 8006fe4:	f383 8811 	msr	BASEPRI, r3
 8006fe8:	f3bf 8f6f 	isb	sy
 8006fec:	f3bf 8f4f 	dsb	sy
 8006ff0:	b662      	cpsie	i
 8006ff2:	607b      	str	r3, [r7, #4]
}
 8006ff4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006ff6:	f7fe fcef 	bl	80059d8 <xTaskIncrementTick>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d003      	beq.n	8007008 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007000:	4b06      	ldr	r3, [pc, #24]	; (800701c <SysTick_Handler+0x44>)
 8007002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007006:	601a      	str	r2, [r3, #0]
 8007008:	2300      	movs	r3, #0
 800700a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	f383 8811 	msr	BASEPRI, r3
}
 8007012:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007014:	bf00      	nop
 8007016:	3708      	adds	r7, #8
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}
 800701c:	e000ed04 	.word	0xe000ed04

08007020 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007020:	b480      	push	{r7}
 8007022:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007024:	4b0b      	ldr	r3, [pc, #44]	; (8007054 <vPortSetupTimerInterrupt+0x34>)
 8007026:	2200      	movs	r2, #0
 8007028:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800702a:	4b0b      	ldr	r3, [pc, #44]	; (8007058 <vPortSetupTimerInterrupt+0x38>)
 800702c:	2200      	movs	r2, #0
 800702e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007030:	4b0a      	ldr	r3, [pc, #40]	; (800705c <vPortSetupTimerInterrupt+0x3c>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a0a      	ldr	r2, [pc, #40]	; (8007060 <vPortSetupTimerInterrupt+0x40>)
 8007036:	fba2 2303 	umull	r2, r3, r2, r3
 800703a:	099b      	lsrs	r3, r3, #6
 800703c:	4a09      	ldr	r2, [pc, #36]	; (8007064 <vPortSetupTimerInterrupt+0x44>)
 800703e:	3b01      	subs	r3, #1
 8007040:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007042:	4b04      	ldr	r3, [pc, #16]	; (8007054 <vPortSetupTimerInterrupt+0x34>)
 8007044:	2207      	movs	r2, #7
 8007046:	601a      	str	r2, [r3, #0]
}
 8007048:	bf00      	nop
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr
 8007052:	bf00      	nop
 8007054:	e000e010 	.word	0xe000e010
 8007058:	e000e018 	.word	0xe000e018
 800705c:	20000000 	.word	0x20000000
 8007060:	10624dd3 	.word	0x10624dd3
 8007064:	e000e014 	.word	0xe000e014

08007068 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007068:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007078 <vPortEnableVFP+0x10>
 800706c:	6801      	ldr	r1, [r0, #0]
 800706e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007072:	6001      	str	r1, [r0, #0]
 8007074:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007076:	bf00      	nop
 8007078:	e000ed88 	.word	0xe000ed88

0800707c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800707c:	b480      	push	{r7}
 800707e:	b085      	sub	sp, #20
 8007080:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007082:	f3ef 8305 	mrs	r3, IPSR
 8007086:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2b0f      	cmp	r3, #15
 800708c:	d916      	bls.n	80070bc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800708e:	4a19      	ldr	r2, [pc, #100]	; (80070f4 <vPortValidateInterruptPriority+0x78>)
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	4413      	add	r3, r2
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007098:	4b17      	ldr	r3, [pc, #92]	; (80070f8 <vPortValidateInterruptPriority+0x7c>)
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	7afa      	ldrb	r2, [r7, #11]
 800709e:	429a      	cmp	r2, r3
 80070a0:	d20c      	bcs.n	80070bc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 80070a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a6:	b672      	cpsid	i
 80070a8:	f383 8811 	msr	BASEPRI, r3
 80070ac:	f3bf 8f6f 	isb	sy
 80070b0:	f3bf 8f4f 	dsb	sy
 80070b4:	b662      	cpsie	i
 80070b6:	607b      	str	r3, [r7, #4]
}
 80070b8:	bf00      	nop
 80070ba:	e7fe      	b.n	80070ba <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80070bc:	4b0f      	ldr	r3, [pc, #60]	; (80070fc <vPortValidateInterruptPriority+0x80>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80070c4:	4b0e      	ldr	r3, [pc, #56]	; (8007100 <vPortValidateInterruptPriority+0x84>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d90c      	bls.n	80070e6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80070cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d0:	b672      	cpsid	i
 80070d2:	f383 8811 	msr	BASEPRI, r3
 80070d6:	f3bf 8f6f 	isb	sy
 80070da:	f3bf 8f4f 	dsb	sy
 80070de:	b662      	cpsie	i
 80070e0:	603b      	str	r3, [r7, #0]
}
 80070e2:	bf00      	nop
 80070e4:	e7fe      	b.n	80070e4 <vPortValidateInterruptPriority+0x68>
	}
 80070e6:	bf00      	nop
 80070e8:	3714      	adds	r7, #20
 80070ea:	46bd      	mov	sp, r7
 80070ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f0:	4770      	bx	lr
 80070f2:	bf00      	nop
 80070f4:	e000e3f0 	.word	0xe000e3f0
 80070f8:	20000f44 	.word	0x20000f44
 80070fc:	e000ed0c 	.word	0xe000ed0c
 8007100:	20000f48 	.word	0x20000f48

08007104 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b08a      	sub	sp, #40	; 0x28
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800710c:	2300      	movs	r3, #0
 800710e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007110:	f7fe fba4 	bl	800585c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007114:	4b5b      	ldr	r3, [pc, #364]	; (8007284 <pvPortMalloc+0x180>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d101      	bne.n	8007120 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800711c:	f000 f91a 	bl	8007354 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007120:	4b59      	ldr	r3, [pc, #356]	; (8007288 <pvPortMalloc+0x184>)
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	4013      	ands	r3, r2
 8007128:	2b00      	cmp	r3, #0
 800712a:	f040 8092 	bne.w	8007252 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d01f      	beq.n	8007174 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8007134:	2208      	movs	r2, #8
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	4413      	add	r3, r2
 800713a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f003 0307 	and.w	r3, r3, #7
 8007142:	2b00      	cmp	r3, #0
 8007144:	d016      	beq.n	8007174 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f023 0307 	bic.w	r3, r3, #7
 800714c:	3308      	adds	r3, #8
 800714e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f003 0307 	and.w	r3, r3, #7
 8007156:	2b00      	cmp	r3, #0
 8007158:	d00c      	beq.n	8007174 <pvPortMalloc+0x70>
	__asm volatile
 800715a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800715e:	b672      	cpsid	i
 8007160:	f383 8811 	msr	BASEPRI, r3
 8007164:	f3bf 8f6f 	isb	sy
 8007168:	f3bf 8f4f 	dsb	sy
 800716c:	b662      	cpsie	i
 800716e:	617b      	str	r3, [r7, #20]
}
 8007170:	bf00      	nop
 8007172:	e7fe      	b.n	8007172 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d06b      	beq.n	8007252 <pvPortMalloc+0x14e>
 800717a:	4b44      	ldr	r3, [pc, #272]	; (800728c <pvPortMalloc+0x188>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	429a      	cmp	r2, r3
 8007182:	d866      	bhi.n	8007252 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007184:	4b42      	ldr	r3, [pc, #264]	; (8007290 <pvPortMalloc+0x18c>)
 8007186:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007188:	4b41      	ldr	r3, [pc, #260]	; (8007290 <pvPortMalloc+0x18c>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800718e:	e004      	b.n	800719a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8007190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007192:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800719a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d903      	bls.n	80071ac <pvPortMalloc+0xa8>
 80071a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d1f1      	bne.n	8007190 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80071ac:	4b35      	ldr	r3, [pc, #212]	; (8007284 <pvPortMalloc+0x180>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d04d      	beq.n	8007252 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80071b6:	6a3b      	ldr	r3, [r7, #32]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	2208      	movs	r2, #8
 80071bc:	4413      	add	r3, r2
 80071be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80071c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	6a3b      	ldr	r3, [r7, #32]
 80071c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80071c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ca:	685a      	ldr	r2, [r3, #4]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	1ad2      	subs	r2, r2, r3
 80071d0:	2308      	movs	r3, #8
 80071d2:	005b      	lsls	r3, r3, #1
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d921      	bls.n	800721c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80071d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4413      	add	r3, r2
 80071de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80071e0:	69bb      	ldr	r3, [r7, #24]
 80071e2:	f003 0307 	and.w	r3, r3, #7
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d00c      	beq.n	8007204 <pvPortMalloc+0x100>
	__asm volatile
 80071ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ee:	b672      	cpsid	i
 80071f0:	f383 8811 	msr	BASEPRI, r3
 80071f4:	f3bf 8f6f 	isb	sy
 80071f8:	f3bf 8f4f 	dsb	sy
 80071fc:	b662      	cpsie	i
 80071fe:	613b      	str	r3, [r7, #16]
}
 8007200:	bf00      	nop
 8007202:	e7fe      	b.n	8007202 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007206:	685a      	ldr	r2, [r3, #4]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	1ad2      	subs	r2, r2, r3
 800720c:	69bb      	ldr	r3, [r7, #24]
 800720e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007216:	69b8      	ldr	r0, [r7, #24]
 8007218:	f000 f8fe 	bl	8007418 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800721c:	4b1b      	ldr	r3, [pc, #108]	; (800728c <pvPortMalloc+0x188>)
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	1ad3      	subs	r3, r2, r3
 8007226:	4a19      	ldr	r2, [pc, #100]	; (800728c <pvPortMalloc+0x188>)
 8007228:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800722a:	4b18      	ldr	r3, [pc, #96]	; (800728c <pvPortMalloc+0x188>)
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	4b19      	ldr	r3, [pc, #100]	; (8007294 <pvPortMalloc+0x190>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	429a      	cmp	r2, r3
 8007234:	d203      	bcs.n	800723e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007236:	4b15      	ldr	r3, [pc, #84]	; (800728c <pvPortMalloc+0x188>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a16      	ldr	r2, [pc, #88]	; (8007294 <pvPortMalloc+0x190>)
 800723c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800723e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007240:	685a      	ldr	r2, [r3, #4]
 8007242:	4b11      	ldr	r3, [pc, #68]	; (8007288 <pvPortMalloc+0x184>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	431a      	orrs	r2, r3
 8007248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800724c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724e:	2200      	movs	r2, #0
 8007250:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007252:	f7fe fb11 	bl	8005878 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007256:	69fb      	ldr	r3, [r7, #28]
 8007258:	f003 0307 	and.w	r3, r3, #7
 800725c:	2b00      	cmp	r3, #0
 800725e:	d00c      	beq.n	800727a <pvPortMalloc+0x176>
	__asm volatile
 8007260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007264:	b672      	cpsid	i
 8007266:	f383 8811 	msr	BASEPRI, r3
 800726a:	f3bf 8f6f 	isb	sy
 800726e:	f3bf 8f4f 	dsb	sy
 8007272:	b662      	cpsie	i
 8007274:	60fb      	str	r3, [r7, #12]
}
 8007276:	bf00      	nop
 8007278:	e7fe      	b.n	8007278 <pvPortMalloc+0x174>
	return pvReturn;
 800727a:	69fb      	ldr	r3, [r7, #28]
}
 800727c:	4618      	mov	r0, r3
 800727e:	3728      	adds	r7, #40	; 0x28
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}
 8007284:	20004b54 	.word	0x20004b54
 8007288:	20004b60 	.word	0x20004b60
 800728c:	20004b58 	.word	0x20004b58
 8007290:	20004b4c 	.word	0x20004b4c
 8007294:	20004b5c 	.word	0x20004b5c

08007298 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b086      	sub	sp, #24
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d04c      	beq.n	8007344 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80072aa:	2308      	movs	r3, #8
 80072ac:	425b      	negs	r3, r3
 80072ae:	697a      	ldr	r2, [r7, #20]
 80072b0:	4413      	add	r3, r2
 80072b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	685a      	ldr	r2, [r3, #4]
 80072bc:	4b23      	ldr	r3, [pc, #140]	; (800734c <vPortFree+0xb4>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4013      	ands	r3, r2
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d10c      	bne.n	80072e0 <vPortFree+0x48>
	__asm volatile
 80072c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ca:	b672      	cpsid	i
 80072cc:	f383 8811 	msr	BASEPRI, r3
 80072d0:	f3bf 8f6f 	isb	sy
 80072d4:	f3bf 8f4f 	dsb	sy
 80072d8:	b662      	cpsie	i
 80072da:	60fb      	str	r3, [r7, #12]
}
 80072dc:	bf00      	nop
 80072de:	e7fe      	b.n	80072de <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d00c      	beq.n	8007302 <vPortFree+0x6a>
	__asm volatile
 80072e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ec:	b672      	cpsid	i
 80072ee:	f383 8811 	msr	BASEPRI, r3
 80072f2:	f3bf 8f6f 	isb	sy
 80072f6:	f3bf 8f4f 	dsb	sy
 80072fa:	b662      	cpsie	i
 80072fc:	60bb      	str	r3, [r7, #8]
}
 80072fe:	bf00      	nop
 8007300:	e7fe      	b.n	8007300 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	685a      	ldr	r2, [r3, #4]
 8007306:	4b11      	ldr	r3, [pc, #68]	; (800734c <vPortFree+0xb4>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4013      	ands	r3, r2
 800730c:	2b00      	cmp	r3, #0
 800730e:	d019      	beq.n	8007344 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d115      	bne.n	8007344 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	685a      	ldr	r2, [r3, #4]
 800731c:	4b0b      	ldr	r3, [pc, #44]	; (800734c <vPortFree+0xb4>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	43db      	mvns	r3, r3
 8007322:	401a      	ands	r2, r3
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007328:	f7fe fa98 	bl	800585c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	685a      	ldr	r2, [r3, #4]
 8007330:	4b07      	ldr	r3, [pc, #28]	; (8007350 <vPortFree+0xb8>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4413      	add	r3, r2
 8007336:	4a06      	ldr	r2, [pc, #24]	; (8007350 <vPortFree+0xb8>)
 8007338:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800733a:	6938      	ldr	r0, [r7, #16]
 800733c:	f000 f86c 	bl	8007418 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007340:	f7fe fa9a 	bl	8005878 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007344:	bf00      	nop
 8007346:	3718      	adds	r7, #24
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}
 800734c:	20004b60 	.word	0x20004b60
 8007350:	20004b58 	.word	0x20004b58

08007354 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007354:	b480      	push	{r7}
 8007356:	b085      	sub	sp, #20
 8007358:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800735a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800735e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007360:	4b27      	ldr	r3, [pc, #156]	; (8007400 <prvHeapInit+0xac>)
 8007362:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f003 0307 	and.w	r3, r3, #7
 800736a:	2b00      	cmp	r3, #0
 800736c:	d00c      	beq.n	8007388 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	3307      	adds	r3, #7
 8007372:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f023 0307 	bic.w	r3, r3, #7
 800737a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800737c:	68ba      	ldr	r2, [r7, #8]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	1ad3      	subs	r3, r2, r3
 8007382:	4a1f      	ldr	r2, [pc, #124]	; (8007400 <prvHeapInit+0xac>)
 8007384:	4413      	add	r3, r2
 8007386:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800738c:	4a1d      	ldr	r2, [pc, #116]	; (8007404 <prvHeapInit+0xb0>)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007392:	4b1c      	ldr	r3, [pc, #112]	; (8007404 <prvHeapInit+0xb0>)
 8007394:	2200      	movs	r2, #0
 8007396:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	68ba      	ldr	r2, [r7, #8]
 800739c:	4413      	add	r3, r2
 800739e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80073a0:	2208      	movs	r2, #8
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	1a9b      	subs	r3, r3, r2
 80073a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f023 0307 	bic.w	r3, r3, #7
 80073ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	4a15      	ldr	r2, [pc, #84]	; (8007408 <prvHeapInit+0xb4>)
 80073b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80073b6:	4b14      	ldr	r3, [pc, #80]	; (8007408 <prvHeapInit+0xb4>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	2200      	movs	r2, #0
 80073bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80073be:	4b12      	ldr	r3, [pc, #72]	; (8007408 <prvHeapInit+0xb4>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	2200      	movs	r2, #0
 80073c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	68fa      	ldr	r2, [r7, #12]
 80073ce:	1ad2      	subs	r2, r2, r3
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80073d4:	4b0c      	ldr	r3, [pc, #48]	; (8007408 <prvHeapInit+0xb4>)
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	4a0a      	ldr	r2, [pc, #40]	; (800740c <prvHeapInit+0xb8>)
 80073e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	4a09      	ldr	r2, [pc, #36]	; (8007410 <prvHeapInit+0xbc>)
 80073ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80073ec:	4b09      	ldr	r3, [pc, #36]	; (8007414 <prvHeapInit+0xc0>)
 80073ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80073f2:	601a      	str	r2, [r3, #0]
}
 80073f4:	bf00      	nop
 80073f6:	3714      	adds	r7, #20
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr
 8007400:	20000f4c 	.word	0x20000f4c
 8007404:	20004b4c 	.word	0x20004b4c
 8007408:	20004b54 	.word	0x20004b54
 800740c:	20004b5c 	.word	0x20004b5c
 8007410:	20004b58 	.word	0x20004b58
 8007414:	20004b60 	.word	0x20004b60

08007418 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007418:	b480      	push	{r7}
 800741a:	b085      	sub	sp, #20
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007420:	4b28      	ldr	r3, [pc, #160]	; (80074c4 <prvInsertBlockIntoFreeList+0xac>)
 8007422:	60fb      	str	r3, [r7, #12]
 8007424:	e002      	b.n	800742c <prvInsertBlockIntoFreeList+0x14>
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	60fb      	str	r3, [r7, #12]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	687a      	ldr	r2, [r7, #4]
 8007432:	429a      	cmp	r2, r3
 8007434:	d8f7      	bhi.n	8007426 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	68ba      	ldr	r2, [r7, #8]
 8007440:	4413      	add	r3, r2
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	429a      	cmp	r2, r3
 8007446:	d108      	bne.n	800745a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	685a      	ldr	r2, [r3, #4]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	441a      	add	r2, r3
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	68ba      	ldr	r2, [r7, #8]
 8007464:	441a      	add	r2, r3
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	429a      	cmp	r2, r3
 800746c:	d118      	bne.n	80074a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	4b15      	ldr	r3, [pc, #84]	; (80074c8 <prvInsertBlockIntoFreeList+0xb0>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	429a      	cmp	r2, r3
 8007478:	d00d      	beq.n	8007496 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	685a      	ldr	r2, [r3, #4]
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	441a      	add	r2, r3
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	601a      	str	r2, [r3, #0]
 8007494:	e008      	b.n	80074a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007496:	4b0c      	ldr	r3, [pc, #48]	; (80074c8 <prvInsertBlockIntoFreeList+0xb0>)
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	601a      	str	r2, [r3, #0]
 800749e:	e003      	b.n	80074a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681a      	ldr	r2, [r3, #0]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80074a8:	68fa      	ldr	r2, [r7, #12]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d002      	beq.n	80074b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	687a      	ldr	r2, [r7, #4]
 80074b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80074b6:	bf00      	nop
 80074b8:	3714      	adds	r7, #20
 80074ba:	46bd      	mov	sp, r7
 80074bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c0:	4770      	bx	lr
 80074c2:	bf00      	nop
 80074c4:	20004b4c 	.word	0x20004b4c
 80074c8:	20004b54 	.word	0x20004b54

080074cc <eMBFuncReadCoils>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b086      	sub	sp, #24
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usCoilCount;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 80074d6:	2300      	movs	r3, #0
 80074d8:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	881b      	ldrh	r3, [r3, #0]
 80074de:	2b05      	cmp	r3, #5
 80074e0:	d16c      	bne.n	80075bc <eMBFuncReadCoils+0xf0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	3301      	adds	r3, #1
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	021b      	lsls	r3, r3, #8
 80074ec:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	3302      	adds	r3, #2
 80074f2:	781b      	ldrb	r3, [r3, #0]
 80074f4:	b29a      	uxth	r2, r3
 80074f6:	8abb      	ldrh	r3, [r7, #20]
 80074f8:	4313      	orrs	r3, r2
 80074fa:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 80074fc:	8abb      	ldrh	r3, [r7, #20]
 80074fe:	3301      	adds	r3, #1
 8007500:	82bb      	strh	r3, [r7, #20]

        usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	3303      	adds	r3, #3
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	b29b      	uxth	r3, r3
 800750a:	021b      	lsls	r3, r3, #8
 800750c:	827b      	strh	r3, [r7, #18]
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	3304      	adds	r3, #4
 8007512:	781b      	ldrb	r3, [r3, #0]
 8007514:	b29a      	uxth	r2, r3
 8007516:	8a7b      	ldrh	r3, [r7, #18]
 8007518:	4313      	orrs	r3, r2
 800751a:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usCoilCount >= 1 ) &&
 800751c:	8a7b      	ldrh	r3, [r7, #18]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d049      	beq.n	80075b6 <eMBFuncReadCoils+0xea>
 8007522:	8a7b      	ldrh	r3, [r7, #18]
 8007524:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007528:	d245      	bcs.n	80075b6 <eMBFuncReadCoils+0xea>
            ( usCoilCount < MB_PDU_FUNC_READ_COILCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	2200      	movs	r2, #0
 8007532:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_COILS;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	1c5a      	adds	r2, r3, #1
 8007538:	60fa      	str	r2, [r7, #12]
 800753a:	2201      	movs	r2, #1
 800753c:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	881b      	ldrh	r3, [r3, #0]
 8007542:	3301      	adds	r3, #1
 8007544:	b29a      	uxth	r2, r3
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	801a      	strh	r2, [r3, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usCoilCount & 0x0007 ) != 0 )
 800754a:	8a7b      	ldrh	r3, [r7, #18]
 800754c:	f003 0307 	and.w	r3, r3, #7
 8007550:	2b00      	cmp	r3, #0
 8007552:	d006      	beq.n	8007562 <eMBFuncReadCoils+0x96>
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
 8007554:	8a7b      	ldrh	r3, [r7, #18]
 8007556:	08db      	lsrs	r3, r3, #3
 8007558:	b29b      	uxth	r3, r3
 800755a:	b2db      	uxtb	r3, r3
 800755c:	3301      	adds	r3, #1
 800755e:	75fb      	strb	r3, [r7, #23]
 8007560:	e003      	b.n	800756a <eMBFuncReadCoils+0x9e>
            }
            else
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
 8007562:	8a7b      	ldrh	r3, [r7, #18]
 8007564:	08db      	lsrs	r3, r3, #3
 8007566:	b29b      	uxth	r3, r3
 8007568:	75fb      	strb	r3, [r7, #23]
            }
            *pucFrameCur++ = ucNBytes;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	1c5a      	adds	r2, r3, #1
 800756e:	60fa      	str	r2, [r7, #12]
 8007570:	7dfa      	ldrb	r2, [r7, #23]
 8007572:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	881b      	ldrh	r3, [r3, #0]
 8007578:	3301      	adds	r3, #1
 800757a:	b29a      	uxth	r2, r3
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
 8007580:	8a7a      	ldrh	r2, [r7, #18]
 8007582:	8ab9      	ldrh	r1, [r7, #20]
 8007584:	2300      	movs	r3, #0
 8007586:	68f8      	ldr	r0, [r7, #12]
 8007588:	f002 facc 	bl	8009b24 <eMBRegCoilsCB>
 800758c:	4603      	mov	r3, r0
 800758e:	72fb      	strb	r3, [r7, #11]
                               MB_REG_READ );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8007590:	7afb      	ldrb	r3, [r7, #11]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d006      	beq.n	80075a4 <eMBFuncReadCoils+0xd8>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8007596:	7afb      	ldrb	r3, [r7, #11]
 8007598:	4618      	mov	r0, r3
 800759a:	f001 f8a5 	bl	80086e8 <prveMBError2Exception>
 800759e:	4603      	mov	r3, r0
 80075a0:	75bb      	strb	r3, [r7, #22]
            if( eRegStatus != MB_ENOERR )
 80075a2:	e00d      	b.n	80075c0 <eMBFuncReadCoils+0xf4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	881a      	ldrh	r2, [r3, #0]
 80075a8:	7dfb      	ldrb	r3, [r7, #23]
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	4413      	add	r3, r2
 80075ae:	b29a      	uxth	r2, r3
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 80075b4:	e004      	b.n	80075c0 <eMBFuncReadCoils+0xf4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80075b6:	2303      	movs	r3, #3
 80075b8:	75bb      	strb	r3, [r7, #22]
 80075ba:	e001      	b.n	80075c0 <eMBFuncReadCoils+0xf4>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80075bc:	2303      	movs	r3, #3
 80075be:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 80075c0:	7dbb      	ldrb	r3, [r7, #22]
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3718      	adds	r7, #24
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}

080075ca <eMBFuncWriteCoil>:

#if MB_FUNC_WRITE_COIL_ENABLED > 0
eMBException
eMBFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
{
 80075ca:	b580      	push	{r7, lr}
 80075cc:	b084      	sub	sp, #16
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	6078      	str	r0, [r7, #4]
 80075d2:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
 80075d4:	2300      	movs	r3, #0
 80075d6:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	881b      	ldrh	r3, [r3, #0]
 80075dc:	2b05      	cmp	r3, #5
 80075de:	d140      	bne.n	8007662 <eMBFuncWriteCoil+0x98>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	3301      	adds	r3, #1
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	021b      	lsls	r3, r3, #8
 80075ea:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	3302      	adds	r3, #2
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	b29a      	uxth	r2, r3
 80075f4:	89bb      	ldrh	r3, [r7, #12]
 80075f6:	4313      	orrs	r3, r2
 80075f8:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 80075fa:	89bb      	ldrh	r3, [r7, #12]
 80075fc:	3301      	adds	r3, #1
 80075fe:	81bb      	strh	r3, [r7, #12]

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	3304      	adds	r3, #4
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d128      	bne.n	800765c <eMBFuncWriteCoil+0x92>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	3303      	adds	r3, #3
 800760e:	781b      	ldrb	r3, [r3, #0]
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8007610:	2bff      	cmp	r3, #255	; 0xff
 8007612:	d004      	beq.n	800761e <eMBFuncWriteCoil+0x54>
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	3303      	adds	r3, #3
 8007618:	781b      	ldrb	r3, [r3, #0]
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 800761a:	2b00      	cmp	r3, #0
 800761c:	d11e      	bne.n	800765c <eMBFuncWriteCoil+0x92>
        {
            ucBuf[1] = 0;
 800761e:	2300      	movs	r3, #0
 8007620:	727b      	strb	r3, [r7, #9]
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	3303      	adds	r3, #3
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	2bff      	cmp	r3, #255	; 0xff
 800762a:	d102      	bne.n	8007632 <eMBFuncWriteCoil+0x68>
            {
                ucBuf[0] = 1;
 800762c:	2301      	movs	r3, #1
 800762e:	723b      	strb	r3, [r7, #8]
 8007630:	e001      	b.n	8007636 <eMBFuncWriteCoil+0x6c>
            }
            else
            {
                ucBuf[0] = 0;
 8007632:	2300      	movs	r3, #0
 8007634:	723b      	strb	r3, [r7, #8]
            }
            eRegStatus =
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );
 8007636:	89b9      	ldrh	r1, [r7, #12]
 8007638:	f107 0008 	add.w	r0, r7, #8
 800763c:	2301      	movs	r3, #1
 800763e:	2201      	movs	r2, #1
 8007640:	f002 fa70 	bl	8009b24 <eMBRegCoilsCB>
 8007644:	4603      	mov	r3, r0
 8007646:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8007648:	7afb      	ldrb	r3, [r7, #11]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d00b      	beq.n	8007666 <eMBFuncWriteCoil+0x9c>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800764e:	7afb      	ldrb	r3, [r7, #11]
 8007650:	4618      	mov	r0, r3
 8007652:	f001 f849 	bl	80086e8 <prveMBError2Exception>
 8007656:	4603      	mov	r3, r0
 8007658:	73fb      	strb	r3, [r7, #15]
            if( eRegStatus != MB_ENOERR )
 800765a:	e004      	b.n	8007666 <eMBFuncWriteCoil+0x9c>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800765c:	2303      	movs	r3, #3
 800765e:	73fb      	strb	r3, [r7, #15]
 8007660:	e001      	b.n	8007666 <eMBFuncWriteCoil+0x9c>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8007662:	2303      	movs	r3, #3
 8007664:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 8007666:	7bfb      	ldrb	r3, [r7, #15]
}
 8007668:	4618      	mov	r0, r3
 800766a:	3710      	adds	r7, #16
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}

08007670 <eMBFuncWriteMultipleCoils>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_COILS_ENABLED > 0
eMBException
eMBFuncWriteMultipleCoils( UCHAR * pucFrame, USHORT * usLen )
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b084      	sub	sp, #16
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usCoilCnt;
    UCHAR           ucByteCount;
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
 800767a:	2300      	movs	r3, #0
 800767c:	73bb      	strb	r3, [r7, #14]
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	881b      	ldrh	r3, [r3, #0]
 8007682:	2b05      	cmp	r3, #5
 8007684:	d954      	bls.n	8007730 <eMBFuncWriteMultipleCoils+0xc0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	3301      	adds	r3, #1
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	b29b      	uxth	r3, r3
 800768e:	021b      	lsls	r3, r3, #8
 8007690:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	3302      	adds	r3, #2
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	b29a      	uxth	r2, r3
 800769a:	89bb      	ldrh	r3, [r7, #12]
 800769c:	4313      	orrs	r3, r2
 800769e:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 80076a0:	89bb      	ldrh	r3, [r7, #12]
 80076a2:	3301      	adds	r3, #1
 80076a4:	81bb      	strh	r3, [r7, #12]

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	3303      	adds	r3, #3
 80076aa:	781b      	ldrb	r3, [r3, #0]
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	021b      	lsls	r3, r3, #8
 80076b0:	817b      	strh	r3, [r7, #10]
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	3304      	adds	r3, #4
 80076b6:	781b      	ldrb	r3, [r3, #0]
 80076b8:	b29a      	uxth	r2, r3
 80076ba:	897b      	ldrh	r3, [r7, #10]
 80076bc:	4313      	orrs	r3, r2
 80076be:	817b      	strh	r3, [r7, #10]

        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	795b      	ldrb	r3, [r3, #5]
 80076c4:	727b      	strb	r3, [r7, #9]

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
 80076c6:	897b      	ldrh	r3, [r7, #10]
 80076c8:	f003 0307 	and.w	r3, r3, #7
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d006      	beq.n	80076de <eMBFuncWriteMultipleCoils+0x6e>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 80076d0:	897b      	ldrh	r3, [r7, #10]
 80076d2:	08db      	lsrs	r3, r3, #3
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	3301      	adds	r3, #1
 80076da:	73fb      	strb	r3, [r7, #15]
 80076dc:	e003      	b.n	80076e6 <eMBFuncWriteMultipleCoils+0x76>
        }
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
 80076de:	897b      	ldrh	r3, [r7, #10]
 80076e0:	08db      	lsrs	r3, r3, #3
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	73fb      	strb	r3, [r7, #15]
        }

        if( ( usCoilCnt >= 1 ) &&
 80076e6:	897b      	ldrh	r3, [r7, #10]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d01e      	beq.n	800772a <eMBFuncWriteMultipleCoils+0xba>
 80076ec:	897b      	ldrh	r3, [r7, #10]
 80076ee:	f5b3 6ff6 	cmp.w	r3, #1968	; 0x7b0
 80076f2:	d81a      	bhi.n	800772a <eMBFuncWriteMultipleCoils+0xba>
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
 80076f4:	7bfa      	ldrb	r2, [r7, #15]
 80076f6:	7a7b      	ldrb	r3, [r7, #9]
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d116      	bne.n	800772a <eMBFuncWriteMultipleCoils+0xba>
            ( ucByteCountVerify == ucByteCount ) )
        {
            eRegStatus =
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	1d98      	adds	r0, r3, #6
 8007700:	897a      	ldrh	r2, [r7, #10]
 8007702:	89b9      	ldrh	r1, [r7, #12]
 8007704:	2301      	movs	r3, #1
 8007706:	f002 fa0d 	bl	8009b24 <eMBRegCoilsCB>
 800770a:	4603      	mov	r3, r0
 800770c:	723b      	strb	r3, [r7, #8]
                               usRegAddress, usCoilCnt, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 800770e:	7a3b      	ldrb	r3, [r7, #8]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d006      	beq.n	8007722 <eMBFuncWriteMultipleCoils+0xb2>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8007714:	7a3b      	ldrb	r3, [r7, #8]
 8007716:	4618      	mov	r0, r3
 8007718:	f000 ffe6 	bl	80086e8 <prveMBError2Exception>
 800771c:	4603      	mov	r3, r0
 800771e:	73bb      	strb	r3, [r7, #14]
            if( eRegStatus != MB_ENOERR )
 8007720:	e008      	b.n	8007734 <eMBFuncWriteMultipleCoils+0xc4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	2205      	movs	r2, #5
 8007726:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8007728:	e004      	b.n	8007734 <eMBFuncWriteMultipleCoils+0xc4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800772a:	2303      	movs	r3, #3
 800772c:	73bb      	strb	r3, [r7, #14]
 800772e:	e001      	b.n	8007734 <eMBFuncWriteMultipleCoils+0xc4>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8007730:	2303      	movs	r3, #3
 8007732:	73bb      	strb	r3, [r7, #14]
    }
    return eStatus;
 8007734:	7bbb      	ldrb	r3, [r7, #14]
}
 8007736:	4618      	mov	r0, r3
 8007738:	3710      	adds	r7, #16
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}

0800773e <eMBMasterFuncReadCoils>:
    return eErrStatus;
}

eMBException
eMBMasterFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
 800773e:	b580      	push	{r7, lr}
 8007740:	b086      	sub	sp, #24
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
 8007746:	6039      	str	r1, [r7, #0]
    UCHAR          *ucMBFrame;
    USHORT          usRegAddress;
    USHORT          usCoilCount;
    UCHAR           ucByteCount;

    eMBException    eStatus = MB_EX_NONE;
 8007748:	2300      	movs	r3, #0
 800774a:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, and it's read mode. This request don't need execute. */
    if ( xMBMasterRequestIsBroadcast() )
 800774c:	f003 fa2a 	bl	800aba4 <xMBMasterRequestIsBroadcast>
 8007750:	4603      	mov	r3, r0
 8007752:	2b00      	cmp	r3, #0
 8007754:	d002      	beq.n	800775c <eMBMasterFuncReadCoils+0x1e>
    {
    	eStatus = MB_EX_NONE;
 8007756:	2300      	movs	r3, #0
 8007758:	75bb      	strb	r3, [r7, #22]
 800775a:	e056      	b.n	800780a <eMBMasterFuncReadCoils+0xcc>
    }
    else if ( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	881b      	ldrh	r3, [r3, #0]
 8007760:	2b01      	cmp	r3, #1
 8007762:	d950      	bls.n	8007806 <eMBMasterFuncReadCoils+0xc8>
    {
    	vMBMasterGetPDUSndBuf(&ucMBFrame);
 8007764:	f107 030c 	add.w	r3, r7, #12
 8007768:	4618      	mov	r0, r3
 800776a:	f003 f9ef 	bl	800ab4c <vMBMasterGetPDUSndBuf>
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	3301      	adds	r3, #1
 8007772:	781b      	ldrb	r3, [r3, #0]
 8007774:	b29b      	uxth	r3, r3
 8007776:	021b      	lsls	r3, r3, #8
 8007778:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	3302      	adds	r3, #2
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	b29a      	uxth	r2, r3
 8007782:	8abb      	ldrh	r3, [r7, #20]
 8007784:	4313      	orrs	r3, r2
 8007786:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8007788:	8abb      	ldrh	r3, [r7, #20]
 800778a:	3301      	adds	r3, #1
 800778c:	82bb      	strh	r3, [r7, #20]

        usCoilCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_COILCNT_OFF] << 8 );
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	3303      	adds	r3, #3
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	b29b      	uxth	r3, r3
 8007796:	021b      	lsls	r3, r3, #8
 8007798:	827b      	strh	r3, [r7, #18]
        usCoilCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_COILCNT_OFF + 1] );
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	3304      	adds	r3, #4
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	b29a      	uxth	r2, r3
 80077a2:	8a7b      	ldrh	r3, [r7, #18]
 80077a4:	4313      	orrs	r3, r2
 80077a6:	827b      	strh	r3, [r7, #18]

        /* Test if the quantity of coils is a multiple of 8. If not last
         * byte is only partially field with unused coils set to zero. */
        if( ( usCoilCount & 0x0007 ) != 0 )
 80077a8:	8a7b      	ldrh	r3, [r7, #18]
 80077aa:	f003 0307 	and.w	r3, r3, #7
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d006      	beq.n	80077c0 <eMBMasterFuncReadCoils+0x82>
        {
        	ucByteCount = ( UCHAR )( usCoilCount / 8 + 1 );
 80077b2:	8a7b      	ldrh	r3, [r7, #18]
 80077b4:	08db      	lsrs	r3, r3, #3
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	3301      	adds	r3, #1
 80077bc:	75fb      	strb	r3, [r7, #23]
 80077be:	e003      	b.n	80077c8 <eMBMasterFuncReadCoils+0x8a>
        }
        else
        {
        	ucByteCount = ( UCHAR )( usCoilCount / 8 );
 80077c0:	8a7b      	ldrh	r3, [r7, #18]
 80077c2:	08db      	lsrs	r3, r3, #3
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	75fb      	strb	r3, [r7, #23]
        }

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usCoilCount >= 1 ) &&
 80077c8:	8a7b      	ldrh	r3, [r7, #18]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d018      	beq.n	8007800 <eMBMasterFuncReadCoils+0xc2>
            ( ucByteCount == pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] ) )
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	3301      	adds	r3, #1
 80077d2:	781b      	ldrb	r3, [r3, #0]
        if( ( usCoilCount >= 1 ) &&
 80077d4:	7dfa      	ldrb	r2, [r7, #23]
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d112      	bne.n	8007800 <eMBMasterFuncReadCoils+0xc2>
        {
        	/* Make callback to fill the buffer. */
            eRegStatus = eMBMasterRegCoilsCB( &pucFrame[MB_PDU_FUNC_READ_VALUES_OFF], usRegAddress, usCoilCount, MB_REG_READ );
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	1c98      	adds	r0, r3, #2
 80077de:	8a7a      	ldrh	r2, [r7, #18]
 80077e0:	8ab9      	ldrh	r1, [r7, #20]
 80077e2:	2300      	movs	r3, #0
 80077e4:	f002 fbac 	bl	8009f40 <eMBMasterRegCoilsCB>
 80077e8:	4603      	mov	r3, r0
 80077ea:	747b      	strb	r3, [r7, #17]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80077ec:	7c7b      	ldrb	r3, [r7, #17]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d00b      	beq.n	800780a <eMBMasterFuncReadCoils+0xcc>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 80077f2:	7c7b      	ldrb	r3, [r7, #17]
 80077f4:	4618      	mov	r0, r3
 80077f6:	f000 ff77 	bl	80086e8 <prveMBError2Exception>
 80077fa:	4603      	mov	r3, r0
 80077fc:	75bb      	strb	r3, [r7, #22]
            if( eRegStatus != MB_ENOERR )
 80077fe:	e004      	b.n	800780a <eMBMasterFuncReadCoils+0xcc>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8007800:	2303      	movs	r3, #3
 8007802:	75bb      	strb	r3, [r7, #22]
 8007804:	e001      	b.n	800780a <eMBMasterFuncReadCoils+0xcc>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8007806:	2303      	movs	r3, #3
 8007808:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 800780a:	7dbb      	ldrb	r3, [r7, #22]
}
 800780c:	4618      	mov	r0, r3
 800780e:	3718      	adds	r7, #24
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <eMBMasterReqWriteCoil>:
 *
 * @see eMBMasterReqWriteMultipleCoils
 */
eMBMasterReqErrCode
eMBMasterReqWriteCoil( UCHAR ucSndAddr, USHORT usCoilAddr, USHORT usCoilData, LONG lTimeOut )
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b086      	sub	sp, #24
 8007818:	af00      	add	r7, sp, #0
 800781a:	607b      	str	r3, [r7, #4]
 800781c:	4603      	mov	r3, r0
 800781e:	73fb      	strb	r3, [r7, #15]
 8007820:	460b      	mov	r3, r1
 8007822:	81bb      	strh	r3, [r7, #12]
 8007824:	4613      	mov	r3, r2
 8007826:	817b      	strh	r3, [r7, #10]
    UCHAR                 *ucMBFrame;
    eMBMasterReqErrCode    eErrStatus = MB_MRE_NO_ERR;
 8007828:	2300      	movs	r3, #0
 800782a:	75fb      	strb	r3, [r7, #23]

    if ( ucSndAddr > MB_MASTER_TOTAL_SLAVE_NUM ) eErrStatus = MB_MRE_ILL_ARG;
 800782c:	7bfb      	ldrb	r3, [r7, #15]
 800782e:	2b10      	cmp	r3, #16
 8007830:	d902      	bls.n	8007838 <eMBMasterReqWriteCoil+0x24>
 8007832:	2302      	movs	r3, #2
 8007834:	75fb      	strb	r3, [r7, #23]
 8007836:	e040      	b.n	80078ba <eMBMasterReqWriteCoil+0xa6>
    else if ( ( usCoilData != 0xFF00 ) && ( usCoilData != 0x0000 ) ) eErrStatus = MB_MRE_ILL_ARG;
 8007838:	897b      	ldrh	r3, [r7, #10]
 800783a:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800783e:	d005      	beq.n	800784c <eMBMasterReqWriteCoil+0x38>
 8007840:	897b      	ldrh	r3, [r7, #10]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d002      	beq.n	800784c <eMBMasterReqWriteCoil+0x38>
 8007846:	2302      	movs	r3, #2
 8007848:	75fb      	strb	r3, [r7, #23]
 800784a:	e036      	b.n	80078ba <eMBMasterReqWriteCoil+0xa6>
    else if ( xMBMasterRunResTake( lTimeOut ) == FALSE ) eErrStatus = MB_MRE_MASTER_BUSY;
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f001 fd51 	bl	80092f4 <xMBMasterRunResTake>
 8007852:	4603      	mov	r3, r0
 8007854:	2b00      	cmp	r3, #0
 8007856:	d102      	bne.n	800785e <eMBMasterReqWriteCoil+0x4a>
 8007858:	2305      	movs	r3, #5
 800785a:	75fb      	strb	r3, [r7, #23]
 800785c:	e02d      	b.n	80078ba <eMBMasterReqWriteCoil+0xa6>
    else
    {
		vMBMasterGetPDUSndBuf(&ucMBFrame);
 800785e:	f107 0310 	add.w	r3, r7, #16
 8007862:	4618      	mov	r0, r3
 8007864:	f003 f972 	bl	800ab4c <vMBMasterGetPDUSndBuf>
		vMBMasterSetDestAddress(ucSndAddr);
 8007868:	7bfb      	ldrb	r3, [r7, #15]
 800786a:	4618      	mov	r0, r3
 800786c:	f001 faac 	bl	8008dc8 <vMBMasterSetDestAddress>
		ucMBFrame[MB_PDU_FUNC_OFF]                = MB_FUNC_WRITE_SINGLE_COIL;
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	2205      	movs	r2, #5
 8007874:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_WRITE_ADDR_OFF]      = usCoilAddr >> 8;
 8007876:	89bb      	ldrh	r3, [r7, #12]
 8007878:	0a1b      	lsrs	r3, r3, #8
 800787a:	b29a      	uxth	r2, r3
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	3301      	adds	r3, #1
 8007880:	b2d2      	uxtb	r2, r2
 8007882:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_WRITE_ADDR_OFF + 1]  = usCoilAddr;
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	3302      	adds	r3, #2
 8007888:	89ba      	ldrh	r2, [r7, #12]
 800788a:	b2d2      	uxtb	r2, r2
 800788c:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_WRITE_VALUE_OFF ]    = usCoilData >> 8;
 800788e:	897b      	ldrh	r3, [r7, #10]
 8007890:	0a1b      	lsrs	r3, r3, #8
 8007892:	b29a      	uxth	r2, r3
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	3303      	adds	r3, #3
 8007898:	b2d2      	uxtb	r2, r2
 800789a:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_WRITE_VALUE_OFF + 1] = usCoilData;
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	3304      	adds	r3, #4
 80078a0:	897a      	ldrh	r2, [r7, #10]
 80078a2:	b2d2      	uxtb	r2, r2
 80078a4:	701a      	strb	r2, [r3, #0]
		vMBMasterSetPDUSndLength( MB_PDU_SIZE_MIN + MB_PDU_REQ_WRITE_SIZE );
 80078a6:	2005      	movs	r0, #5
 80078a8:	f003 f960 	bl	800ab6c <vMBMasterSetPDUSndLength>
		( void ) xMBMasterPortEventPost( EV_MASTER_FRAME_SENT );
 80078ac:	2008      	movs	r0, #8
 80078ae:	f001 fc8b 	bl	80091c8 <xMBMasterPortEventPost>
		eErrStatus = eMBMasterWaitRequestFinish( );
 80078b2:	f001 fd8f 	bl	80093d4 <eMBMasterWaitRequestFinish>
 80078b6:	4603      	mov	r3, r0
 80078b8:	75fb      	strb	r3, [r7, #23]
    }
    return eErrStatus;
 80078ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3718      	adds	r7, #24
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <eMBMasterFuncWriteCoil>:

eMBException
eMBMasterFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b084      	sub	sp, #16
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
 80078ce:	2300      	movs	r3, #0
 80078d0:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	881b      	ldrh	r3, [r3, #0]
 80078d6:	2b05      	cmp	r3, #5
 80078d8:	d140      	bne.n	800795c <eMBMasterFuncWriteCoil+0x98>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	3301      	adds	r3, #1
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	021b      	lsls	r3, r3, #8
 80078e4:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	3302      	adds	r3, #2
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	b29a      	uxth	r2, r3
 80078ee:	89bb      	ldrh	r3, [r7, #12]
 80078f0:	4313      	orrs	r3, r2
 80078f2:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 80078f4:	89bb      	ldrh	r3, [r7, #12]
 80078f6:	3301      	adds	r3, #1
 80078f8:	81bb      	strh	r3, [r7, #12]

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	3304      	adds	r3, #4
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d128      	bne.n	8007956 <eMBMasterFuncWriteCoil+0x92>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	3303      	adds	r3, #3
 8007908:	781b      	ldrb	r3, [r3, #0]
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 800790a:	2bff      	cmp	r3, #255	; 0xff
 800790c:	d004      	beq.n	8007918 <eMBMasterFuncWriteCoil+0x54>
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	3303      	adds	r3, #3
 8007912:	781b      	ldrb	r3, [r3, #0]
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 8007914:	2b00      	cmp	r3, #0
 8007916:	d11e      	bne.n	8007956 <eMBMasterFuncWriteCoil+0x92>
        {
            ucBuf[1] = 0;
 8007918:	2300      	movs	r3, #0
 800791a:	727b      	strb	r3, [r7, #9]
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	3303      	adds	r3, #3
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	2bff      	cmp	r3, #255	; 0xff
 8007924:	d102      	bne.n	800792c <eMBMasterFuncWriteCoil+0x68>
            {
                ucBuf[0] = 1;
 8007926:	2301      	movs	r3, #1
 8007928:	723b      	strb	r3, [r7, #8]
 800792a:	e001      	b.n	8007930 <eMBMasterFuncWriteCoil+0x6c>
            }
            else
            {
                ucBuf[0] = 0;
 800792c:	2300      	movs	r3, #0
 800792e:	723b      	strb	r3, [r7, #8]
            }
            eRegStatus =
                eMBMasterRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );
 8007930:	89b9      	ldrh	r1, [r7, #12]
 8007932:	f107 0008 	add.w	r0, r7, #8
 8007936:	2301      	movs	r3, #1
 8007938:	2201      	movs	r2, #1
 800793a:	f002 fb01 	bl	8009f40 <eMBMasterRegCoilsCB>
 800793e:	4603      	mov	r3, r0
 8007940:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8007942:	7afb      	ldrb	r3, [r7, #11]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d00b      	beq.n	8007960 <eMBMasterFuncWriteCoil+0x9c>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8007948:	7afb      	ldrb	r3, [r7, #11]
 800794a:	4618      	mov	r0, r3
 800794c:	f000 fecc 	bl	80086e8 <prveMBError2Exception>
 8007950:	4603      	mov	r3, r0
 8007952:	73fb      	strb	r3, [r7, #15]
            if( eRegStatus != MB_ENOERR )
 8007954:	e004      	b.n	8007960 <eMBMasterFuncWriteCoil+0x9c>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8007956:	2303      	movs	r3, #3
 8007958:	73fb      	strb	r3, [r7, #15]
 800795a:	e001      	b.n	8007960 <eMBMasterFuncWriteCoil+0x9c>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800795c:	2303      	movs	r3, #3
 800795e:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 8007960:	7bfb      	ldrb	r3, [r7, #15]
}
 8007962:	4618      	mov	r0, r3
 8007964:	3710      	adds	r7, #16
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}

0800796a <eMBMasterFuncWriteMultipleCoils>:
    return eErrStatus;
}

eMBException
eMBMasterFuncWriteMultipleCoils( UCHAR * pucFrame, USHORT * usLen )
{
 800796a:	b580      	push	{r7, lr}
 800796c:	b086      	sub	sp, #24
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
 8007972:	6039      	str	r1, [r7, #0]
    USHORT          usCoilCnt;
    UCHAR           ucByteCount;
    UCHAR           ucByteCountVerify;
    UCHAR          *ucMBFrame;

    eMBException    eStatus = MB_EX_NONE;
 8007974:	2300      	movs	r3, #0
 8007976:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, the *usLen is not need check. */
    if( ( *usLen == MB_PDU_FUNC_WRITE_MUL_SIZE ) || xMBMasterRequestIsBroadcast() )
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	881b      	ldrh	r3, [r3, #0]
 800797c:	2b05      	cmp	r3, #5
 800797e:	d004      	beq.n	800798a <eMBMasterFuncWriteMultipleCoils+0x20>
 8007980:	f003 f910 	bl	800aba4 <xMBMasterRequestIsBroadcast>
 8007984:	4603      	mov	r3, r0
 8007986:	2b00      	cmp	r3, #0
 8007988:	d052      	beq.n	8007a30 <eMBMasterFuncWriteMultipleCoils+0xc6>
    {
    	vMBMasterGetPDUSndBuf(&ucMBFrame);
 800798a:	f107 030c 	add.w	r3, r7, #12
 800798e:	4618      	mov	r0, r3
 8007990:	f003 f8dc 	bl	800ab4c <vMBMasterGetPDUSndBuf>
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	3301      	adds	r3, #1
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	b29b      	uxth	r3, r3
 800799c:	021b      	lsls	r3, r3, #8
 800799e:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	3302      	adds	r3, #2
 80079a4:	781b      	ldrb	r3, [r3, #0]
 80079a6:	b29a      	uxth	r2, r3
 80079a8:	8abb      	ldrh	r3, [r7, #20]
 80079aa:	4313      	orrs	r3, r2
 80079ac:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 80079ae:	8abb      	ldrh	r3, [r7, #20]
 80079b0:	3301      	adds	r3, #1
 80079b2:	82bb      	strh	r3, [r7, #20]

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	3303      	adds	r3, #3
 80079b8:	781b      	ldrb	r3, [r3, #0]
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	021b      	lsls	r3, r3, #8
 80079be:	827b      	strh	r3, [r7, #18]
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	3304      	adds	r3, #4
 80079c4:	781b      	ldrb	r3, [r3, #0]
 80079c6:	b29a      	uxth	r2, r3
 80079c8:	8a7b      	ldrh	r3, [r7, #18]
 80079ca:	4313      	orrs	r3, r2
 80079cc:	827b      	strh	r3, [r7, #18]

        ucByteCount = ucMBFrame[MB_PDU_REQ_WRITE_MUL_BYTECNT_OFF];
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	795b      	ldrb	r3, [r3, #5]
 80079d2:	747b      	strb	r3, [r7, #17]

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
 80079d4:	8a7b      	ldrh	r3, [r7, #18]
 80079d6:	f003 0307 	and.w	r3, r3, #7
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d006      	beq.n	80079ec <eMBMasterFuncWriteMultipleCoils+0x82>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 80079de:	8a7b      	ldrh	r3, [r7, #18]
 80079e0:	08db      	lsrs	r3, r3, #3
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	b2db      	uxtb	r3, r3
 80079e6:	3301      	adds	r3, #1
 80079e8:	75fb      	strb	r3, [r7, #23]
 80079ea:	e003      	b.n	80079f4 <eMBMasterFuncWriteMultipleCoils+0x8a>
        }
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
 80079ec:	8a7b      	ldrh	r3, [r7, #18]
 80079ee:	08db      	lsrs	r3, r3, #3
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	75fb      	strb	r3, [r7, #23]
        }

        if( ( usCoilCnt >= 1 ) && ( ucByteCountVerify == ucByteCount ) )
 80079f4:	8a7b      	ldrh	r3, [r7, #18]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d016      	beq.n	8007a28 <eMBMasterFuncWriteMultipleCoils+0xbe>
 80079fa:	7dfa      	ldrb	r2, [r7, #23]
 80079fc:	7c7b      	ldrb	r3, [r7, #17]
 80079fe:	429a      	cmp	r2, r3
 8007a00:	d112      	bne.n	8007a28 <eMBMasterFuncWriteMultipleCoils+0xbe>
        {
            eRegStatus =
                eMBMasterRegCoilsCB( &ucMBFrame[MB_PDU_REQ_WRITE_MUL_VALUES_OFF],
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	1d98      	adds	r0, r3, #6
 8007a06:	8a7a      	ldrh	r2, [r7, #18]
 8007a08:	8ab9      	ldrh	r1, [r7, #20]
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	f002 fa98 	bl	8009f40 <eMBMasterRegCoilsCB>
 8007a10:	4603      	mov	r3, r0
 8007a12:	743b      	strb	r3, [r7, #16]
                               usRegAddress, usCoilCnt, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8007a14:	7c3b      	ldrb	r3, [r7, #16]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d009      	beq.n	8007a2e <eMBMasterFuncWriteMultipleCoils+0xc4>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8007a1a:	7c3b      	ldrb	r3, [r7, #16]
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f000 fe63 	bl	80086e8 <prveMBError2Exception>
 8007a22:	4603      	mov	r3, r0
 8007a24:	75bb      	strb	r3, [r7, #22]
            if( eRegStatus != MB_ENOERR )
 8007a26:	e002      	b.n	8007a2e <eMBMasterFuncWriteMultipleCoils+0xc4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8007a28:	2303      	movs	r3, #3
 8007a2a:	75bb      	strb	r3, [r7, #22]
        if( ( usCoilCnt >= 1 ) && ( ucByteCountVerify == ucByteCount ) )
 8007a2c:	e002      	b.n	8007a34 <eMBMasterFuncWriteMultipleCoils+0xca>
 8007a2e:	e001      	b.n	8007a34 <eMBMasterFuncWriteMultipleCoils+0xca>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8007a30:	2303      	movs	r3, #3
 8007a32:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 8007a34:	7dbb      	ldrb	r3, [r7, #22]
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3718      	adds	r7, #24
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}

08007a3e <eMBFuncReadDiscreteInputs>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
 8007a3e:	b580      	push	{r7, lr}
 8007a40:	b086      	sub	sp, #24
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	6078      	str	r0, [r7, #4]
 8007a46:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usDiscreteCnt;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	881b      	ldrh	r3, [r3, #0]
 8007a50:	2b05      	cmp	r3, #5
 8007a52:	d16c      	bne.n	8007b2e <eMBFuncReadDiscreteInputs+0xf0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	3301      	adds	r3, #1
 8007a58:	781b      	ldrb	r3, [r3, #0]
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	021b      	lsls	r3, r3, #8
 8007a5e:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	3302      	adds	r3, #2
 8007a64:	781b      	ldrb	r3, [r3, #0]
 8007a66:	b29a      	uxth	r2, r3
 8007a68:	8abb      	ldrh	r3, [r7, #20]
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8007a6e:	8abb      	ldrh	r3, [r7, #20]
 8007a70:	3301      	adds	r3, #1
 8007a72:	82bb      	strh	r3, [r7, #20]

        usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	3303      	adds	r3, #3
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	021b      	lsls	r3, r3, #8
 8007a7e:	827b      	strh	r3, [r7, #18]
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	3304      	adds	r3, #4
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	b29a      	uxth	r2, r3
 8007a88:	8a7b      	ldrh	r3, [r7, #18]
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usDiscreteCnt >= 1 ) &&
 8007a8e:	8a7b      	ldrh	r3, [r7, #18]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d049      	beq.n	8007b28 <eMBFuncReadDiscreteInputs+0xea>
 8007a94:	8a7b      	ldrh	r3, [r7, #18]
 8007a96:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007a9a:	d245      	bcs.n	8007b28 <eMBFuncReadDiscreteInputs+0xea>
            ( usDiscreteCnt < MB_PDU_FUNC_READ_DISCCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	1c5a      	adds	r2, r3, #1
 8007aaa:	60fa      	str	r2, [r7, #12]
 8007aac:	2202      	movs	r2, #2
 8007aae:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	881b      	ldrh	r3, [r3, #0]
 8007ab4:	3301      	adds	r3, #1
 8007ab6:	b29a      	uxth	r2, r3
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	801a      	strh	r2, [r3, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
 8007abc:	8a7b      	ldrh	r3, [r7, #18]
 8007abe:	f003 0307 	and.w	r3, r3, #7
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d006      	beq.n	8007ad4 <eMBFuncReadDiscreteInputs+0x96>
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
 8007ac6:	8a7b      	ldrh	r3, [r7, #18]
 8007ac8:	08db      	lsrs	r3, r3, #3
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	b2db      	uxtb	r3, r3
 8007ace:	3301      	adds	r3, #1
 8007ad0:	75fb      	strb	r3, [r7, #23]
 8007ad2:	e003      	b.n	8007adc <eMBFuncReadDiscreteInputs+0x9e>
            }
            else
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
 8007ad4:	8a7b      	ldrh	r3, [r7, #18]
 8007ad6:	08db      	lsrs	r3, r3, #3
 8007ad8:	b29b      	uxth	r3, r3
 8007ada:	75fb      	strb	r3, [r7, #23]
            }
            *pucFrameCur++ = ucNBytes;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	1c5a      	adds	r2, r3, #1
 8007ae0:	60fa      	str	r2, [r7, #12]
 8007ae2:	7dfa      	ldrb	r2, [r7, #23]
 8007ae4:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	881b      	ldrh	r3, [r3, #0]
 8007aea:	3301      	adds	r3, #1
 8007aec:	b29a      	uxth	r2, r3
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );
 8007af2:	8a7a      	ldrh	r2, [r7, #18]
 8007af4:	8abb      	ldrh	r3, [r7, #20]
 8007af6:	4619      	mov	r1, r3
 8007af8:	68f8      	ldr	r0, [r7, #12]
 8007afa:	f002 f8c1 	bl	8009c80 <eMBRegDiscreteCB>
 8007afe:	4603      	mov	r3, r0
 8007b00:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8007b02:	7afb      	ldrb	r3, [r7, #11]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d006      	beq.n	8007b16 <eMBFuncReadDiscreteInputs+0xd8>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8007b08:	7afb      	ldrb	r3, [r7, #11]
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f000 fdec 	bl	80086e8 <prveMBError2Exception>
 8007b10:	4603      	mov	r3, r0
 8007b12:	75bb      	strb	r3, [r7, #22]
            if( eRegStatus != MB_ENOERR )
 8007b14:	e00d      	b.n	8007b32 <eMBFuncReadDiscreteInputs+0xf4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	881a      	ldrh	r2, [r3, #0]
 8007b1a:	7dfb      	ldrb	r3, [r7, #23]
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	4413      	add	r3, r2
 8007b20:	b29a      	uxth	r2, r3
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8007b26:	e004      	b.n	8007b32 <eMBFuncReadDiscreteInputs+0xf4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8007b28:	2303      	movs	r3, #3
 8007b2a:	75bb      	strb	r3, [r7, #22]
 8007b2c:	e001      	b.n	8007b32 <eMBFuncReadDiscreteInputs+0xf4>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8007b2e:	2303      	movs	r3, #3
 8007b30:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 8007b32:	7dbb      	ldrb	r3, [r7, #22]
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3718      	adds	r7, #24
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}

08007b3c <eMBMasterFuncReadDiscreteInputs>:
    return eErrStatus;
}

eMBException
eMBMasterFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b086      	sub	sp, #24
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usDiscreteCnt;
    UCHAR           ucNBytes;
    UCHAR          *ucMBFrame;

    eMBException    eStatus = MB_EX_NONE;
 8007b46:	2300      	movs	r3, #0
 8007b48:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, and it's read mode. This request don't need execute. */
    if ( xMBMasterRequestIsBroadcast() )
 8007b4a:	f003 f82b 	bl	800aba4 <xMBMasterRequestIsBroadcast>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d002      	beq.n	8007b5a <eMBMasterFuncReadDiscreteInputs+0x1e>
    {
    	eStatus = MB_EX_NONE;
 8007b54:	2300      	movs	r3, #0
 8007b56:	75bb      	strb	r3, [r7, #22]
 8007b58:	e056      	b.n	8007c08 <eMBMasterFuncReadDiscreteInputs+0xcc>
    }
    else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	881b      	ldrh	r3, [r3, #0]
 8007b5e:	2b01      	cmp	r3, #1
 8007b60:	d950      	bls.n	8007c04 <eMBMasterFuncReadDiscreteInputs+0xc8>
    {
    	vMBMasterGetPDUSndBuf(&ucMBFrame);
 8007b62:	f107 030c 	add.w	r3, r7, #12
 8007b66:	4618      	mov	r0, r3
 8007b68:	f002 fff0 	bl	800ab4c <vMBMasterGetPDUSndBuf>
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	3301      	adds	r3, #1
 8007b70:	781b      	ldrb	r3, [r3, #0]
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	021b      	lsls	r3, r3, #8
 8007b76:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	3302      	adds	r3, #2
 8007b7c:	781b      	ldrb	r3, [r3, #0]
 8007b7e:	b29a      	uxth	r2, r3
 8007b80:	8abb      	ldrh	r3, [r7, #20]
 8007b82:	4313      	orrs	r3, r2
 8007b84:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8007b86:	8abb      	ldrh	r3, [r7, #20]
 8007b88:	3301      	adds	r3, #1
 8007b8a:	82bb      	strh	r3, [r7, #20]

        usDiscreteCnt = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_DISCCNT_OFF] << 8 );
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	3303      	adds	r3, #3
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	021b      	lsls	r3, r3, #8
 8007b96:	827b      	strh	r3, [r7, #18]
        usDiscreteCnt |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_DISCCNT_OFF + 1] );
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	3304      	adds	r3, #4
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	b29a      	uxth	r2, r3
 8007ba0:	8a7b      	ldrh	r3, [r7, #18]
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	827b      	strh	r3, [r7, #18]

        /* Test if the quantity of coils is a multiple of 8. If not last
         * byte is only partially field with unused coils set to zero. */
        if( ( usDiscreteCnt & 0x0007 ) != 0 )
 8007ba6:	8a7b      	ldrh	r3, [r7, #18]
 8007ba8:	f003 0307 	and.w	r3, r3, #7
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d006      	beq.n	8007bbe <eMBMasterFuncReadDiscreteInputs+0x82>
        {
        	ucNBytes = ( UCHAR )( usDiscreteCnt / 8 + 1 );
 8007bb0:	8a7b      	ldrh	r3, [r7, #18]
 8007bb2:	08db      	lsrs	r3, r3, #3
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	b2db      	uxtb	r3, r3
 8007bb8:	3301      	adds	r3, #1
 8007bba:	75fb      	strb	r3, [r7, #23]
 8007bbc:	e003      	b.n	8007bc6 <eMBMasterFuncReadDiscreteInputs+0x8a>
        }
        else
        {
        	ucNBytes = ( UCHAR )( usDiscreteCnt / 8 );
 8007bbe:	8a7b      	ldrh	r3, [r7, #18]
 8007bc0:	08db      	lsrs	r3, r3, #3
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	75fb      	strb	r3, [r7, #23]
        }

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
		if ((usDiscreteCnt >= 1) && ucNBytes == pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF])
 8007bc6:	8a7b      	ldrh	r3, [r7, #18]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d018      	beq.n	8007bfe <eMBMasterFuncReadDiscreteInputs+0xc2>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	3301      	adds	r3, #1
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	7dfa      	ldrb	r2, [r7, #23]
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	d112      	bne.n	8007bfe <eMBMasterFuncReadDiscreteInputs+0xc2>
        {
	       	/* Make callback to fill the buffer. */
			eRegStatus = eMBMasterRegDiscreteCB( &pucFrame[MB_PDU_FUNC_READ_VALUES_OFF], usRegAddress, usDiscreteCnt );
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	3302      	adds	r3, #2
 8007bdc:	8a7a      	ldrh	r2, [r7, #18]
 8007bde:	8ab9      	ldrh	r1, [r7, #20]
 8007be0:	4618      	mov	r0, r3
 8007be2:	f002 fa63 	bl	800a0ac <eMBMasterRegDiscreteCB>
 8007be6:	4603      	mov	r3, r0
 8007be8:	747b      	strb	r3, [r7, #17]

			/* If an error occured convert it into a Modbus exception. */
			if( eRegStatus != MB_ENOERR )
 8007bea:	7c7b      	ldrb	r3, [r7, #17]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d00b      	beq.n	8007c08 <eMBMasterFuncReadDiscreteInputs+0xcc>
			{
				eStatus = prveMBError2Exception( eRegStatus );
 8007bf0:	7c7b      	ldrb	r3, [r7, #17]
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f000 fd78 	bl	80086e8 <prveMBError2Exception>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	75bb      	strb	r3, [r7, #22]
			if( eRegStatus != MB_ENOERR )
 8007bfc:	e004      	b.n	8007c08 <eMBMasterFuncReadDiscreteInputs+0xcc>
			}
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8007bfe:	2303      	movs	r3, #3
 8007c00:	75bb      	strb	r3, [r7, #22]
 8007c02:	e001      	b.n	8007c08 <eMBMasterFuncReadDiscreteInputs+0xcc>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8007c04:	2303      	movs	r3, #3
 8007c06:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 8007c08:	7dbb      	ldrb	r3, [r7, #22]
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3718      	adds	r7, #24
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}

08007c12 <eMBFuncWriteHoldingRegister>:

#if MB_FUNC_WRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8007c12:	b580      	push	{r7, lr}
 8007c14:	b084      	sub	sp, #16
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]
 8007c1a:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	881b      	ldrh	r3, [r3, #0]
 8007c24:	2b05      	cmp	r3, #5
 8007c26:	d122      	bne.n	8007c6e <eMBFuncWriteHoldingRegister+0x5c>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	781b      	ldrb	r3, [r3, #0]
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	021b      	lsls	r3, r3, #8
 8007c32:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	3302      	adds	r3, #2
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	b29a      	uxth	r2, r3
 8007c3c:	89bb      	ldrh	r3, [r7, #12]
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8007c42:	89bb      	ldrh	r3, [r7, #12]
 8007c44:	3301      	adds	r3, #1
 8007c46:	81bb      	strh	r3, [r7, #12]

        /* Make callback to update the value. */
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	1cd8      	adds	r0, r3, #3
 8007c4c:	89b9      	ldrh	r1, [r7, #12]
 8007c4e:	2301      	movs	r3, #1
 8007c50:	2201      	movs	r2, #1
 8007c52:	f001 fee1 	bl	8009a18 <eMBRegHoldingCB>
 8007c56:	4603      	mov	r3, r0
 8007c58:	72fb      	strb	r3, [r7, #11]
                                      usRegAddress, 1, MB_REG_WRITE );

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
 8007c5a:	7afb      	ldrb	r3, [r7, #11]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d008      	beq.n	8007c72 <eMBFuncWriteHoldingRegister+0x60>
        {
            eStatus = prveMBError2Exception( eRegStatus );
 8007c60:	7afb      	ldrb	r3, [r7, #11]
 8007c62:	4618      	mov	r0, r3
 8007c64:	f000 fd40 	bl	80086e8 <prveMBError2Exception>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	73fb      	strb	r3, [r7, #15]
 8007c6c:	e001      	b.n	8007c72 <eMBFuncWriteHoldingRegister+0x60>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8007c6e:	2303      	movs	r3, #3
 8007c70:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 8007c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3710      	adds	r7, #16
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <eMBFuncWriteMultipleHoldingRegister>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_HOLDING_ENABLED > 0
eMBException
eMBFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b084      	sub	sp, #16
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
 8007c86:	2300      	movs	r3, #0
 8007c88:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	881b      	ldrh	r3, [r3, #0]
 8007c8e:	2b05      	cmp	r3, #5
 8007c90:	d946      	bls.n	8007d20 <eMBFuncWriteMultipleHoldingRegister+0xa4>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	3301      	adds	r3, #1
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	021b      	lsls	r3, r3, #8
 8007c9c:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	3302      	adds	r3, #2
 8007ca2:	781b      	ldrb	r3, [r3, #0]
 8007ca4:	b29a      	uxth	r2, r3
 8007ca6:	89bb      	ldrh	r3, [r7, #12]
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8007cac:	89bb      	ldrh	r3, [r7, #12]
 8007cae:	3301      	adds	r3, #1
 8007cb0:	81bb      	strh	r3, [r7, #12]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	3303      	adds	r3, #3
 8007cb6:	781b      	ldrb	r3, [r3, #0]
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	021b      	lsls	r3, r3, #8
 8007cbc:	817b      	strh	r3, [r7, #10]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	3304      	adds	r3, #4
 8007cc2:	781b      	ldrb	r3, [r3, #0]
 8007cc4:	b29a      	uxth	r2, r3
 8007cc6:	897b      	ldrh	r3, [r7, #10]
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	817b      	strh	r3, [r7, #10]

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	795b      	ldrb	r3, [r3, #5]
 8007cd0:	727b      	strb	r3, [r7, #9]

        if( ( usRegCount >= 1 ) &&
 8007cd2:	897b      	ldrh	r3, [r7, #10]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d020      	beq.n	8007d1a <eMBFuncWriteMultipleHoldingRegister+0x9e>
 8007cd8:	897b      	ldrh	r3, [r7, #10]
 8007cda:	2b78      	cmp	r3, #120	; 0x78
 8007cdc:	d81d      	bhi.n	8007d1a <eMBFuncWriteMultipleHoldingRegister+0x9e>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
 8007cde:	897b      	ldrh	r3, [r7, #10]
 8007ce0:	b2db      	uxtb	r3, r3
 8007ce2:	005b      	lsls	r3, r3, #1
 8007ce4:	b2db      	uxtb	r3, r3
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
 8007ce6:	7a7a      	ldrb	r2, [r7, #9]
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d116      	bne.n	8007d1a <eMBFuncWriteMultipleHoldingRegister+0x9e>
        {
            /* Make callback to update the register values. */
            eRegStatus =
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	1d98      	adds	r0, r3, #6
 8007cf0:	897a      	ldrh	r2, [r7, #10]
 8007cf2:	89b9      	ldrh	r1, [r7, #12]
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	f001 fe8f 	bl	8009a18 <eMBRegHoldingCB>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	723b      	strb	r3, [r7, #8]
                                 usRegAddress, usRegCount, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8007cfe:	7a3b      	ldrb	r3, [r7, #8]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d006      	beq.n	8007d12 <eMBFuncWriteMultipleHoldingRegister+0x96>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8007d04:	7a3b      	ldrb	r3, [r7, #8]
 8007d06:	4618      	mov	r0, r3
 8007d08:	f000 fcee 	bl	80086e8 <prveMBError2Exception>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	73fb      	strb	r3, [r7, #15]
            if( eRegStatus != MB_ENOERR )
 8007d10:	e008      	b.n	8007d24 <eMBFuncWriteMultipleHoldingRegister+0xa8>
            {
                /* The response contains the function code, the starting
                 * address and the quantity of registers. We reuse the
                 * old values in the buffer because they are still valid.
                 */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	2205      	movs	r2, #5
 8007d16:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8007d18:	e004      	b.n	8007d24 <eMBFuncWriteMultipleHoldingRegister+0xa8>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8007d1a:	2303      	movs	r3, #3
 8007d1c:	73fb      	strb	r3, [r7, #15]
 8007d1e:	e001      	b.n	8007d24 <eMBFuncWriteMultipleHoldingRegister+0xa8>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8007d20:	2303      	movs	r3, #3
 8007d22:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 8007d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3710      	adds	r7, #16
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}

08007d2e <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8007d2e:	b580      	push	{r7, lr}
 8007d30:	b086      	sub	sp, #24
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	6078      	str	r0, [r7, #4]
 8007d36:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	881b      	ldrh	r3, [r3, #0]
 8007d40:	2b05      	cmp	r3, #5
 8007d42:	d15c      	bne.n	8007dfe <eMBFuncReadHoldingRegister+0xd0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	3301      	adds	r3, #1
 8007d48:	781b      	ldrb	r3, [r3, #0]
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	021b      	lsls	r3, r3, #8
 8007d4e:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	3302      	adds	r3, #2
 8007d54:	781b      	ldrb	r3, [r3, #0]
 8007d56:	b29a      	uxth	r2, r3
 8007d58:	8abb      	ldrh	r3, [r7, #20]
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8007d5e:	8abb      	ldrh	r3, [r7, #20]
 8007d60:	3301      	adds	r3, #1
 8007d62:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	3303      	adds	r3, #3
 8007d68:	781b      	ldrb	r3, [r3, #0]
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	021b      	lsls	r3, r3, #8
 8007d6e:	827b      	strh	r3, [r7, #18]
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	3304      	adds	r3, #4
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
 8007d78:	8a7b      	ldrh	r3, [r7, #18]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d03c      	beq.n	8007df8 <eMBFuncReadHoldingRegister+0xca>
 8007d7e:	8a7b      	ldrh	r3, [r7, #18]
 8007d80:	2b7d      	cmp	r3, #125	; 0x7d
 8007d82:	d839      	bhi.n	8007df8 <eMBFuncReadHoldingRegister+0xca>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	1c5a      	adds	r2, r3, #1
 8007d92:	60fa      	str	r2, [r7, #12]
 8007d94:	2203      	movs	r2, #3
 8007d96:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	881b      	ldrh	r3, [r3, #0]
 8007d9c:	3301      	adds	r3, #1
 8007d9e:	b29a      	uxth	r2, r3
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 8007da4:	8a7b      	ldrh	r3, [r7, #18]
 8007da6:	b2da      	uxtb	r2, r3
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	1c59      	adds	r1, r3, #1
 8007dac:	60f9      	str	r1, [r7, #12]
 8007dae:	0052      	lsls	r2, r2, #1
 8007db0:	b2d2      	uxtb	r2, r2
 8007db2:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	881b      	ldrh	r3, [r3, #0]
 8007db8:	3301      	adds	r3, #1
 8007dba:	b29a      	uxth	r2, r3
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	801a      	strh	r2, [r3, #0]

            /* Make callback to fill the buffer. */
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 8007dc0:	8a7a      	ldrh	r2, [r7, #18]
 8007dc2:	8ab9      	ldrh	r1, [r7, #20]
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	68f8      	ldr	r0, [r7, #12]
 8007dc8:	f001 fe26 	bl	8009a18 <eMBRegHoldingCB>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	72fb      	strb	r3, [r7, #11]
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8007dd0:	7afb      	ldrb	r3, [r7, #11]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d006      	beq.n	8007de4 <eMBFuncReadHoldingRegister+0xb6>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8007dd6:	7afb      	ldrb	r3, [r7, #11]
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f000 fc85 	bl	80086e8 <prveMBError2Exception>
 8007dde:	4603      	mov	r3, r0
 8007de0:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 8007de2:	e00e      	b.n	8007e02 <eMBFuncReadHoldingRegister+0xd4>
            }
            else
            {
                *usLen += usRegCount * 2;
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	881a      	ldrh	r2, [r3, #0]
 8007de8:	8a7b      	ldrh	r3, [r7, #18]
 8007dea:	005b      	lsls	r3, r3, #1
 8007dec:	b29b      	uxth	r3, r3
 8007dee:	4413      	add	r3, r2
 8007df0:	b29a      	uxth	r2, r3
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8007df6:	e004      	b.n	8007e02 <eMBFuncReadHoldingRegister+0xd4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8007df8:	2303      	movs	r3, #3
 8007dfa:	75fb      	strb	r3, [r7, #23]
 8007dfc:	e001      	b.n	8007e02 <eMBFuncReadHoldingRegister+0xd4>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8007dfe:	2303      	movs	r3, #3
 8007e00:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 8007e02:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3718      	adds	r7, #24
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <eMBFuncReadWriteMultipleHoldingRegister>:

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b086      	sub	sp, #24
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	6039      	str	r1, [r7, #0]
    USHORT          usRegWriteAddress;
    USHORT          usRegWriteCount;
    UCHAR           ucRegWriteByteCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8007e16:	2300      	movs	r3, #0
 8007e18:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	881b      	ldrh	r3, [r3, #0]
 8007e1e:	2b09      	cmp	r3, #9
 8007e20:	f240 8099 	bls.w	8007f56 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	3301      	adds	r3, #1
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	b29b      	uxth	r3, r3
 8007e2c:	021b      	lsls	r3, r3, #8
 8007e2e:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	3302      	adds	r3, #2
 8007e34:	781b      	ldrb	r3, [r3, #0]
 8007e36:	b29a      	uxth	r2, r3
 8007e38:	8abb      	ldrh	r3, [r7, #20]
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress++;
 8007e3e:	8abb      	ldrh	r3, [r7, #20]
 8007e40:	3301      	adds	r3, #1
 8007e42:	82bb      	strh	r3, [r7, #20]

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	3303      	adds	r3, #3
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	021b      	lsls	r3, r3, #8
 8007e4e:	827b      	strh	r3, [r7, #18]
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	3304      	adds	r3, #4
 8007e54:	781b      	ldrb	r3, [r3, #0]
 8007e56:	b29a      	uxth	r2, r3
 8007e58:	8a7b      	ldrh	r3, [r7, #18]
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	827b      	strh	r3, [r7, #18]

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	3305      	adds	r3, #5
 8007e62:	781b      	ldrb	r3, [r3, #0]
 8007e64:	b29b      	uxth	r3, r3
 8007e66:	021b      	lsls	r3, r3, #8
 8007e68:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	3306      	adds	r3, #6
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	b29a      	uxth	r2, r3
 8007e72:	8a3b      	ldrh	r3, [r7, #16]
 8007e74:	4313      	orrs	r3, r2
 8007e76:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress++;
 8007e78:	8a3b      	ldrh	r3, [r7, #16]
 8007e7a:	3301      	adds	r3, #1
 8007e7c:	823b      	strh	r3, [r7, #16]

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	3307      	adds	r3, #7
 8007e82:	781b      	ldrb	r3, [r3, #0]
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	021b      	lsls	r3, r3, #8
 8007e88:	81fb      	strh	r3, [r7, #14]
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	3308      	adds	r3, #8
 8007e8e:	781b      	ldrb	r3, [r3, #0]
 8007e90:	b29a      	uxth	r2, r3
 8007e92:	89fb      	ldrh	r3, [r7, #14]
 8007e94:	4313      	orrs	r3, r2
 8007e96:	81fb      	strh	r3, [r7, #14]

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	7a5b      	ldrb	r3, [r3, #9]
 8007e9c:	737b      	strb	r3, [r7, #13]

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 8007e9e:	8a7b      	ldrh	r3, [r7, #18]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d056      	beq.n	8007f52 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
 8007ea4:	8a7b      	ldrh	r3, [r7, #18]
 8007ea6:	2b7d      	cmp	r3, #125	; 0x7d
 8007ea8:	d853      	bhi.n	8007f52 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
 8007eaa:	89fb      	ldrh	r3, [r7, #14]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d050      	beq.n	8007f52 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 8007eb0:	89fb      	ldrh	r3, [r7, #14]
 8007eb2:	2b79      	cmp	r3, #121	; 0x79
 8007eb4:	d84d      	bhi.n	8007f52 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
 8007eb6:	89fb      	ldrh	r3, [r7, #14]
 8007eb8:	005a      	lsls	r2, r3, #1
 8007eba:	7b7b      	ldrb	r3, [r7, #13]
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d148      	bne.n	8007f52 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
        {
            /* Make callback to update the register values. */
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f103 000a 	add.w	r0, r3, #10
 8007ec6:	89fa      	ldrh	r2, [r7, #14]
 8007ec8:	8a39      	ldrh	r1, [r7, #16]
 8007eca:	2301      	movs	r3, #1
 8007ecc:	f001 fda4 	bl	8009a18 <eMBRegHoldingCB>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	75bb      	strb	r3, [r7, #22]
                                          usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );

            if( eRegStatus == MB_ENOERR )
 8007ed4:	7dbb      	ldrb	r3, [r7, #22]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d131      	bne.n	8007f3e <eMBFuncReadWriteMultipleHoldingRegister+0x132>
            {
                /* Set the current PDU data pointer to the beginning. */
                pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	60bb      	str	r3, [r7, #8]
                *usLen = MB_PDU_FUNC_OFF;
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	801a      	strh	r2, [r3, #0]

                /* First byte contains the function code. */
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	1c5a      	adds	r2, r3, #1
 8007ee8:	60ba      	str	r2, [r7, #8]
 8007eea:	2217      	movs	r2, #23
 8007eec:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	881b      	ldrh	r3, [r3, #0]
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	b29a      	uxth	r2, r3
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	801a      	strh	r2, [r3, #0]

                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 8007efa:	8a7b      	ldrh	r3, [r7, #18]
 8007efc:	b2da      	uxtb	r2, r3
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	1c59      	adds	r1, r3, #1
 8007f02:	60b9      	str	r1, [r7, #8]
 8007f04:	0052      	lsls	r2, r2, #1
 8007f06:	b2d2      	uxtb	r2, r2
 8007f08:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	881b      	ldrh	r3, [r3, #0]
 8007f0e:	3301      	adds	r3, #1
 8007f10:	b29a      	uxth	r2, r3
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	801a      	strh	r2, [r3, #0]

                /* Make the read callback. */
                eRegStatus =
                    eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
 8007f16:	8a7a      	ldrh	r2, [r7, #18]
 8007f18:	8ab9      	ldrh	r1, [r7, #20]
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	68b8      	ldr	r0, [r7, #8]
 8007f1e:	f001 fd7b 	bl	8009a18 <eMBRegHoldingCB>
 8007f22:	4603      	mov	r3, r0
 8007f24:	75bb      	strb	r3, [r7, #22]
                if( eRegStatus == MB_ENOERR )
 8007f26:	7dbb      	ldrb	r3, [r7, #22]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d108      	bne.n	8007f3e <eMBFuncReadWriteMultipleHoldingRegister+0x132>
                {
                    *usLen += 2 * usRegReadCount;
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	881a      	ldrh	r2, [r3, #0]
 8007f30:	8a7b      	ldrh	r3, [r7, #18]
 8007f32:	005b      	lsls	r3, r3, #1
 8007f34:	b29b      	uxth	r3, r3
 8007f36:	4413      	add	r3, r2
 8007f38:	b29a      	uxth	r2, r3
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	801a      	strh	r2, [r3, #0]
                }
            }
            if( eRegStatus != MB_ENOERR )
 8007f3e:	7dbb      	ldrb	r3, [r7, #22]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d008      	beq.n	8007f56 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8007f44:	7dbb      	ldrb	r3, [r7, #22]
 8007f46:	4618      	mov	r0, r3
 8007f48:	f000 fbce 	bl	80086e8 <prveMBError2Exception>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 8007f50:	e001      	b.n	8007f56 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8007f52:	2303      	movs	r3, #3
 8007f54:	75fb      	strb	r3, [r7, #23]
        }
    }
    return eStatus;
 8007f56:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3718      	adds	r7, #24
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}

08007f60 <eMBMasterFuncWriteHoldingRegister>:
    return eErrStatus;
}

eMBException
eMBMasterFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b084      	sub	sp, #16
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_SIZE_MIN + MB_PDU_FUNC_WRITE_SIZE ) )
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	881b      	ldrh	r3, [r3, #0]
 8007f72:	2b05      	cmp	r3, #5
 8007f74:	d122      	bne.n	8007fbc <eMBMasterFuncWriteHoldingRegister+0x5c>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	3301      	adds	r3, #1
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	b29b      	uxth	r3, r3
 8007f7e:	021b      	lsls	r3, r3, #8
 8007f80:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	3302      	adds	r3, #2
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	b29a      	uxth	r2, r3
 8007f8a:	89bb      	ldrh	r3, [r7, #12]
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8007f90:	89bb      	ldrh	r3, [r7, #12]
 8007f92:	3301      	adds	r3, #1
 8007f94:	81bb      	strh	r3, [r7, #12]

        /* Make callback to update the value. */
        eRegStatus = eMBMasterRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	1cd8      	adds	r0, r3, #3
 8007f9a:	89b9      	ldrh	r1, [r7, #12]
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	f001 ff42 	bl	8009e28 <eMBMasterRegHoldingCB>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	72fb      	strb	r3, [r7, #11]
                                      usRegAddress, 1, MB_REG_WRITE );

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
 8007fa8:	7afb      	ldrb	r3, [r7, #11]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d008      	beq.n	8007fc0 <eMBMasterFuncWriteHoldingRegister+0x60>
        {
            eStatus = prveMBError2Exception( eRegStatus );
 8007fae:	7afb      	ldrb	r3, [r7, #11]
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f000 fb99 	bl	80086e8 <prveMBError2Exception>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	73fb      	strb	r3, [r7, #15]
 8007fba:	e001      	b.n	8007fc0 <eMBMasterFuncWriteHoldingRegister+0x60>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8007fbc:	2303      	movs	r3, #3
 8007fbe:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 8007fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3710      	adds	r7, #16
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}

08007fca <eMBMasterReqWriteMultipleHoldingRegister>:
eMBMasterReqWriteMultipleHoldingRegister( 	UCHAR ucSndAddr,
											USHORT usRegAddr,
											USHORT usNRegs,
											USHORT * pusDataBuffer,
											LONG lTimeOut )
{
 8007fca:	b580      	push	{r7, lr}
 8007fcc:	b086      	sub	sp, #24
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	607b      	str	r3, [r7, #4]
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	73fb      	strb	r3, [r7, #15]
 8007fd6:	460b      	mov	r3, r1
 8007fd8:	81bb      	strh	r3, [r7, #12]
 8007fda:	4613      	mov	r3, r2
 8007fdc:	817b      	strh	r3, [r7, #10]
    UCHAR                 *ucMBFrame;
    USHORT                 usRegIndex = 0;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	82fb      	strh	r3, [r7, #22]
    eMBMasterReqErrCode    eErrStatus = MB_MRE_NO_ERR;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	757b      	strb	r3, [r7, #21]

    if ( ucSndAddr > MB_MASTER_TOTAL_SLAVE_NUM ) eErrStatus = MB_MRE_ILL_ARG;
 8007fe6:	7bfb      	ldrb	r3, [r7, #15]
 8007fe8:	2b10      	cmp	r3, #16
 8007fea:	d902      	bls.n	8007ff2 <eMBMasterReqWriteMultipleHoldingRegister+0x28>
 8007fec:	2302      	movs	r3, #2
 8007fee:	757b      	strb	r3, [r7, #21]
 8007ff0:	e062      	b.n	80080b8 <eMBMasterReqWriteMultipleHoldingRegister+0xee>
    else if ( xMBMasterRunResTake( lTimeOut ) == FALSE ) eErrStatus = MB_MRE_MASTER_BUSY;
 8007ff2:	6a38      	ldr	r0, [r7, #32]
 8007ff4:	f001 f97e 	bl	80092f4 <xMBMasterRunResTake>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d102      	bne.n	8008004 <eMBMasterReqWriteMultipleHoldingRegister+0x3a>
 8007ffe:	2305      	movs	r3, #5
 8008000:	757b      	strb	r3, [r7, #21]
 8008002:	e059      	b.n	80080b8 <eMBMasterReqWriteMultipleHoldingRegister+0xee>
    else
    {
		vMBMasterGetPDUSndBuf(&ucMBFrame);
 8008004:	f107 0310 	add.w	r3, r7, #16
 8008008:	4618      	mov	r0, r3
 800800a:	f002 fd9f 	bl	800ab4c <vMBMasterGetPDUSndBuf>
		vMBMasterSetDestAddress(ucSndAddr);
 800800e:	7bfb      	ldrb	r3, [r7, #15]
 8008010:	4618      	mov	r0, r3
 8008012:	f000 fed9 	bl	8008dc8 <vMBMasterSetDestAddress>
		ucMBFrame[MB_PDU_FUNC_OFF]                     = MB_FUNC_WRITE_MULTIPLE_REGISTERS;
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	2210      	movs	r2, #16
 800801a:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_WRITE_MUL_ADDR_OFF]       = usRegAddr >> 8;
 800801c:	89bb      	ldrh	r3, [r7, #12]
 800801e:	0a1b      	lsrs	r3, r3, #8
 8008020:	b29a      	uxth	r2, r3
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	3301      	adds	r3, #1
 8008026:	b2d2      	uxtb	r2, r2
 8008028:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_WRITE_MUL_ADDR_OFF + 1]   = usRegAddr;
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	3302      	adds	r3, #2
 800802e:	89ba      	ldrh	r2, [r7, #12]
 8008030:	b2d2      	uxtb	r2, r2
 8008032:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_WRITE_MUL_REGCNT_OFF]     = usNRegs >> 8;
 8008034:	897b      	ldrh	r3, [r7, #10]
 8008036:	0a1b      	lsrs	r3, r3, #8
 8008038:	b29a      	uxth	r2, r3
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	3303      	adds	r3, #3
 800803e:	b2d2      	uxtb	r2, r2
 8008040:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_WRITE_MUL_REGCNT_OFF + 1] = usNRegs ;
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	3304      	adds	r3, #4
 8008046:	897a      	ldrh	r2, [r7, #10]
 8008048:	b2d2      	uxtb	r2, r2
 800804a:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_WRITE_MUL_BYTECNT_OFF]    = usNRegs * 2;
 800804c:	897b      	ldrh	r3, [r7, #10]
 800804e:	b2da      	uxtb	r2, r3
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	3305      	adds	r3, #5
 8008054:	0052      	lsls	r2, r2, #1
 8008056:	b2d2      	uxtb	r2, r2
 8008058:	701a      	strb	r2, [r3, #0]
		ucMBFrame += MB_PDU_REQ_WRITE_MUL_VALUES_OFF;
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	3306      	adds	r3, #6
 800805e:	613b      	str	r3, [r7, #16]
		while( usNRegs > usRegIndex)
 8008060:	e017      	b.n	8008092 <eMBMasterReqWriteMultipleHoldingRegister+0xc8>
		{
			*ucMBFrame++ = pusDataBuffer[usRegIndex] >> 8;
 8008062:	8afb      	ldrh	r3, [r7, #22]
 8008064:	005b      	lsls	r3, r3, #1
 8008066:	687a      	ldr	r2, [r7, #4]
 8008068:	4413      	add	r3, r2
 800806a:	881b      	ldrh	r3, [r3, #0]
 800806c:	0a1b      	lsrs	r3, r3, #8
 800806e:	b299      	uxth	r1, r3
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	1c5a      	adds	r2, r3, #1
 8008074:	613a      	str	r2, [r7, #16]
 8008076:	b2ca      	uxtb	r2, r1
 8008078:	701a      	strb	r2, [r3, #0]
			*ucMBFrame++ = pusDataBuffer[usRegIndex++] ;
 800807a:	8afb      	ldrh	r3, [r7, #22]
 800807c:	1c5a      	adds	r2, r3, #1
 800807e:	82fa      	strh	r2, [r7, #22]
 8008080:	005b      	lsls	r3, r3, #1
 8008082:	687a      	ldr	r2, [r7, #4]
 8008084:	4413      	add	r3, r2
 8008086:	8819      	ldrh	r1, [r3, #0]
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	1c5a      	adds	r2, r3, #1
 800808c:	613a      	str	r2, [r7, #16]
 800808e:	b2ca      	uxtb	r2, r1
 8008090:	701a      	strb	r2, [r3, #0]
		while( usNRegs > usRegIndex)
 8008092:	897a      	ldrh	r2, [r7, #10]
 8008094:	8afb      	ldrh	r3, [r7, #22]
 8008096:	429a      	cmp	r2, r3
 8008098:	d8e3      	bhi.n	8008062 <eMBMasterReqWriteMultipleHoldingRegister+0x98>
		}
		vMBMasterSetPDUSndLength( MB_PDU_SIZE_MIN + MB_PDU_REQ_WRITE_MUL_SIZE_MIN + 2*usNRegs );
 800809a:	897b      	ldrh	r3, [r7, #10]
 800809c:	3303      	adds	r3, #3
 800809e:	b29b      	uxth	r3, r3
 80080a0:	005b      	lsls	r3, r3, #1
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	4618      	mov	r0, r3
 80080a6:	f002 fd61 	bl	800ab6c <vMBMasterSetPDUSndLength>
		( void ) xMBMasterPortEventPost( EV_MASTER_FRAME_SENT );
 80080aa:	2008      	movs	r0, #8
 80080ac:	f001 f88c 	bl	80091c8 <xMBMasterPortEventPost>
		eErrStatus = eMBMasterWaitRequestFinish( );
 80080b0:	f001 f990 	bl	80093d4 <eMBMasterWaitRequestFinish>
 80080b4:	4603      	mov	r3, r0
 80080b6:	757b      	strb	r3, [r7, #21]
    }
    return eErrStatus;
 80080b8:	7d7b      	ldrb	r3, [r7, #21]
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3718      	adds	r7, #24
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}

080080c2 <eMBMasterFuncWriteMultipleHoldingRegister>:

eMBException
eMBMasterFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 80080c2:	b580      	push	{r7, lr}
 80080c4:	b086      	sub	sp, #24
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	6078      	str	r0, [r7, #4]
 80080ca:	6039      	str	r1, [r7, #0]
    UCHAR          *ucMBFrame;
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
 80080cc:	2300      	movs	r3, #0
 80080ce:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, the *usLen is not need check. */
    if( ( *usLen == MB_PDU_SIZE_MIN + MB_PDU_FUNC_WRITE_MUL_SIZE ) || xMBMasterRequestIsBroadcast() )
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	881b      	ldrh	r3, [r3, #0]
 80080d4:	2b05      	cmp	r3, #5
 80080d6:	d004      	beq.n	80080e2 <eMBMasterFuncWriteMultipleHoldingRegister+0x20>
 80080d8:	f002 fd64 	bl	800aba4 <xMBMasterRequestIsBroadcast>
 80080dc:	4603      	mov	r3, r0
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d03f      	beq.n	8008162 <eMBMasterFuncWriteMultipleHoldingRegister+0xa0>
    {
		vMBMasterGetPDUSndBuf(&ucMBFrame);
 80080e2:	f107 030c 	add.w	r3, r7, #12
 80080e6:	4618      	mov	r0, r3
 80080e8:	f002 fd30 	bl	800ab4c <vMBMasterGetPDUSndBuf>
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_WRITE_MUL_ADDR_OFF] << 8 );
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	3301      	adds	r3, #1
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	b29b      	uxth	r3, r3
 80080f4:	021b      	lsls	r3, r3, #8
 80080f6:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_WRITE_MUL_ADDR_OFF + 1] );
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	3302      	adds	r3, #2
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	b29a      	uxth	r2, r3
 8008100:	8abb      	ldrh	r3, [r7, #20]
 8008102:	4313      	orrs	r3, r2
 8008104:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8008106:	8abb      	ldrh	r3, [r7, #20]
 8008108:	3301      	adds	r3, #1
 800810a:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_WRITE_MUL_REGCNT_OFF] << 8 );
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	3303      	adds	r3, #3
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	b29b      	uxth	r3, r3
 8008114:	021b      	lsls	r3, r3, #8
 8008116:	827b      	strh	r3, [r7, #18]
        usRegCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_WRITE_MUL_REGCNT_OFF + 1] );
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	3304      	adds	r3, #4
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	b29a      	uxth	r2, r3
 8008120:	8a7b      	ldrh	r3, [r7, #18]
 8008122:	4313      	orrs	r3, r2
 8008124:	827b      	strh	r3, [r7, #18]

        ucRegByteCount = ucMBFrame[MB_PDU_REQ_WRITE_MUL_BYTECNT_OFF];
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	795b      	ldrb	r3, [r3, #5]
 800812a:	747b      	strb	r3, [r7, #17]

        if( ucRegByteCount == 2 * usRegCount )
 800812c:	7c7a      	ldrb	r2, [r7, #17]
 800812e:	8a7b      	ldrh	r3, [r7, #18]
 8008130:	005b      	lsls	r3, r3, #1
 8008132:	429a      	cmp	r2, r3
 8008134:	d112      	bne.n	800815c <eMBMasterFuncWriteMultipleHoldingRegister+0x9a>
        {
            /* Make callback to update the register values. */
            eRegStatus =
                eMBMasterRegHoldingCB( &ucMBFrame[MB_PDU_REQ_WRITE_MUL_VALUES_OFF],
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	1d98      	adds	r0, r3, #6
 800813a:	8a7a      	ldrh	r2, [r7, #18]
 800813c:	8ab9      	ldrh	r1, [r7, #20]
 800813e:	2301      	movs	r3, #1
 8008140:	f001 fe72 	bl	8009e28 <eMBMasterRegHoldingCB>
 8008144:	4603      	mov	r3, r0
 8008146:	743b      	strb	r3, [r7, #16]
                                 usRegAddress, usRegCount, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8008148:	7c3b      	ldrb	r3, [r7, #16]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d00c      	beq.n	8008168 <eMBMasterFuncWriteMultipleHoldingRegister+0xa6>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800814e:	7c3b      	ldrb	r3, [r7, #16]
 8008150:	4618      	mov	r0, r3
 8008152:	f000 fac9 	bl	80086e8 <prveMBError2Exception>
 8008156:	4603      	mov	r3, r0
 8008158:	75fb      	strb	r3, [r7, #23]
        if( ucRegByteCount == 2 * usRegCount )
 800815a:	e005      	b.n	8008168 <eMBMasterFuncWriteMultipleHoldingRegister+0xa6>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800815c:	2303      	movs	r3, #3
 800815e:	75fb      	strb	r3, [r7, #23]
        if( ucRegByteCount == 2 * usRegCount )
 8008160:	e002      	b.n	8008168 <eMBMasterFuncWriteMultipleHoldingRegister+0xa6>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8008162:	2303      	movs	r3, #3
 8008164:	75fb      	strb	r3, [r7, #23]
 8008166:	e000      	b.n	800816a <eMBMasterFuncWriteMultipleHoldingRegister+0xa8>
        if( ucRegByteCount == 2 * usRegCount )
 8008168:	bf00      	nop
    }
    return eStatus;
 800816a:	7dfb      	ldrb	r3, [r7, #23]
}
 800816c:	4618      	mov	r0, r3
 800816e:	3718      	adds	r7, #24
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <eMBMasterFuncReadHoldingRegister>:
    return eErrStatus;
}

eMBException
eMBMasterFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b086      	sub	sp, #24
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	6039      	str	r1, [r7, #0]
    UCHAR          *ucMBFrame;
    USHORT          usRegAddress;
    USHORT          usRegCount;

    eMBException    eStatus = MB_EX_NONE;
 800817e:	2300      	movs	r3, #0
 8008180:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, and it's read mode. This request don't need execute. */
    if ( xMBMasterRequestIsBroadcast() )
 8008182:	f002 fd0f 	bl	800aba4 <xMBMasterRequestIsBroadcast>
 8008186:	4603      	mov	r3, r0
 8008188:	2b00      	cmp	r3, #0
 800818a:	d002      	beq.n	8008192 <eMBMasterFuncReadHoldingRegister+0x1e>
    {
    	eStatus = MB_EX_NONE;
 800818c:	2300      	movs	r3, #0
 800818e:	75fb      	strb	r3, [r7, #23]
 8008190:	e047      	b.n	8008222 <eMBMasterFuncReadHoldingRegister+0xae>
    }
    else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	881b      	ldrh	r3, [r3, #0]
 8008196:	2b01      	cmp	r3, #1
 8008198:	d941      	bls.n	800821e <eMBMasterFuncReadHoldingRegister+0xaa>
    {
		vMBMasterGetPDUSndBuf(&ucMBFrame);
 800819a:	f107 030c 	add.w	r3, r7, #12
 800819e:	4618      	mov	r0, r3
 80081a0:	f002 fcd4 	bl	800ab4c <vMBMasterGetPDUSndBuf>
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	3301      	adds	r3, #1
 80081a8:	781b      	ldrb	r3, [r3, #0]
 80081aa:	b29b      	uxth	r3, r3
 80081ac:	021b      	lsls	r3, r3, #8
 80081ae:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	3302      	adds	r3, #2
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	b29a      	uxth	r2, r3
 80081b8:	8abb      	ldrh	r3, [r7, #20]
 80081ba:	4313      	orrs	r3, r2
 80081bc:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 80081be:	8abb      	ldrh	r3, [r7, #20]
 80081c0:	3301      	adds	r3, #1
 80081c2:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF] << 8 );
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	3303      	adds	r3, #3
 80081c8:	781b      	ldrb	r3, [r3, #0]
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	021b      	lsls	r3, r3, #8
 80081ce:	827b      	strh	r3, [r7, #18]
        usRegCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF + 1] );
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	3304      	adds	r3, #4
 80081d4:	781b      	ldrb	r3, [r3, #0]
 80081d6:	b29a      	uxth	r2, r3
 80081d8:	8a7b      	ldrh	r3, [r7, #18]
 80081da:	4313      	orrs	r3, r2
 80081dc:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception.
         */
        if( ( usRegCount >= 1 ) && ( 2 * usRegCount == pucFrame[MB_PDU_FUNC_READ_BYTECNT_OFF] ) )
 80081de:	8a7b      	ldrh	r3, [r7, #18]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d019      	beq.n	8008218 <eMBMasterFuncReadHoldingRegister+0xa4>
 80081e4:	8a7b      	ldrh	r3, [r7, #18]
 80081e6:	005b      	lsls	r3, r3, #1
 80081e8:	687a      	ldr	r2, [r7, #4]
 80081ea:	3201      	adds	r2, #1
 80081ec:	7812      	ldrb	r2, [r2, #0]
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d112      	bne.n	8008218 <eMBMasterFuncReadHoldingRegister+0xa4>
        {
            /* Make callback to fill the buffer. */
            eRegStatus = eMBMasterRegHoldingCB( &pucFrame[MB_PDU_FUNC_READ_VALUES_OFF], usRegAddress, usRegCount, MB_REG_READ );
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	1c98      	adds	r0, r3, #2
 80081f6:	8a7a      	ldrh	r2, [r7, #18]
 80081f8:	8ab9      	ldrh	r1, [r7, #20]
 80081fa:	2300      	movs	r3, #0
 80081fc:	f001 fe14 	bl	8009e28 <eMBMasterRegHoldingCB>
 8008200:	4603      	mov	r3, r0
 8008202:	747b      	strb	r3, [r7, #17]
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8008204:	7c7b      	ldrb	r3, [r7, #17]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d00b      	beq.n	8008222 <eMBMasterFuncReadHoldingRegister+0xae>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800820a:	7c7b      	ldrb	r3, [r7, #17]
 800820c:	4618      	mov	r0, r3
 800820e:	f000 fa6b 	bl	80086e8 <prveMBError2Exception>
 8008212:	4603      	mov	r3, r0
 8008214:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 8008216:	e004      	b.n	8008222 <eMBMasterFuncReadHoldingRegister+0xae>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8008218:	2303      	movs	r3, #3
 800821a:	75fb      	strb	r3, [r7, #23]
 800821c:	e001      	b.n	8008222 <eMBMasterFuncReadHoldingRegister+0xae>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800821e:	2303      	movs	r3, #3
 8008220:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 8008222:	7dfb      	ldrb	r3, [r7, #23]
}
 8008224:	4618      	mov	r0, r3
 8008226:	3718      	adds	r7, #24
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}

0800822c <eMBMasterFuncReadWriteMultipleHoldingRegister>:
    return eErrStatus;
}

eMBException
eMBMasterFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b086      	sub	sp, #24
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	6039      	str	r1, [r7, #0]
    USHORT          usRegReadCount;
    USHORT          usRegWriteAddress;
    USHORT          usRegWriteCount;
    UCHAR          *ucMBFrame;

    eMBException    eStatus = MB_EX_NONE;
 8008236:	2300      	movs	r3, #0
 8008238:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, and it's read mode. This request don't need execute. */
    if ( xMBMasterRequestIsBroadcast() )
 800823a:	f002 fcb3 	bl	800aba4 <xMBMasterRequestIsBroadcast>
 800823e:	4603      	mov	r3, r0
 8008240:	2b00      	cmp	r3, #0
 8008242:	d002      	beq.n	800824a <eMBMasterFuncReadWriteMultipleHoldingRegister+0x1e>
    {
    	eStatus = MB_EX_NONE;
 8008244:	2300      	movs	r3, #0
 8008246:	75fb      	strb	r3, [r7, #23]
 8008248:	e06b      	b.n	8008322 <eMBMasterFuncReadWriteMultipleHoldingRegister+0xf6>
    }
    else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READWRITE_SIZE_MIN )
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	881b      	ldrh	r3, [r3, #0]
 800824e:	2b01      	cmp	r3, #1
 8008250:	d967      	bls.n	8008322 <eMBMasterFuncReadWriteMultipleHoldingRegister+0xf6>
    {
    	vMBMasterGetPDUSndBuf(&ucMBFrame);
 8008252:	f107 0308 	add.w	r3, r7, #8
 8008256:	4618      	mov	r0, r3
 8008258:	f002 fc78 	bl	800ab4c <vMBMasterGetPDUSndBuf>
        usRegReadAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_ADDR_OFF] << 8U );
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	3301      	adds	r3, #1
 8008260:	781b      	ldrb	r3, [r3, #0]
 8008262:	b29b      	uxth	r3, r3
 8008264:	021b      	lsls	r3, r3, #8
 8008266:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_ADDR_OFF + 1] );
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	3302      	adds	r3, #2
 800826c:	781b      	ldrb	r3, [r3, #0]
 800826e:	b29a      	uxth	r2, r3
 8008270:	8abb      	ldrh	r3, [r7, #20]
 8008272:	4313      	orrs	r3, r2
 8008274:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress++;
 8008276:	8abb      	ldrh	r3, [r7, #20]
 8008278:	3301      	adds	r3, #1
 800827a:	82bb      	strh	r3, [r7, #20]

        usRegReadCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_REGCNT_OFF] << 8U );
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	3303      	adds	r3, #3
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	b29b      	uxth	r3, r3
 8008284:	021b      	lsls	r3, r3, #8
 8008286:	827b      	strh	r3, [r7, #18]
        usRegReadCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_REGCNT_OFF + 1] );
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	3304      	adds	r3, #4
 800828c:	781b      	ldrb	r3, [r3, #0]
 800828e:	b29a      	uxth	r2, r3
 8008290:	8a7b      	ldrh	r3, [r7, #18]
 8008292:	4313      	orrs	r3, r2
 8008294:	827b      	strh	r3, [r7, #18]

        usRegWriteAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_ADDR_OFF] << 8U );
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	3305      	adds	r3, #5
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	b29b      	uxth	r3, r3
 800829e:	021b      	lsls	r3, r3, #8
 80082a0:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_ADDR_OFF + 1] );
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	3306      	adds	r3, #6
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	b29a      	uxth	r2, r3
 80082aa:	8a3b      	ldrh	r3, [r7, #16]
 80082ac:	4313      	orrs	r3, r2
 80082ae:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress++;
 80082b0:	8a3b      	ldrh	r3, [r7, #16]
 80082b2:	3301      	adds	r3, #1
 80082b4:	823b      	strh	r3, [r7, #16]

        usRegWriteCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_REGCNT_OFF] << 8U );
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	3307      	adds	r3, #7
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	b29b      	uxth	r3, r3
 80082be:	021b      	lsls	r3, r3, #8
 80082c0:	81fb      	strh	r3, [r7, #14]
        usRegWriteCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_REGCNT_OFF + 1] );
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	3308      	adds	r3, #8
 80082c6:	781b      	ldrb	r3, [r3, #0]
 80082c8:	b29a      	uxth	r2, r3
 80082ca:	89fb      	ldrh	r3, [r7, #14]
 80082cc:	4313      	orrs	r3, r2
 80082ce:	81fb      	strh	r3, [r7, #14]

        if( ( 2 * usRegReadCount ) == pucFrame[MB_PDU_FUNC_READWRITE_READ_BYTECNT_OFF] )
 80082d0:	8a7b      	ldrh	r3, [r7, #18]
 80082d2:	005b      	lsls	r3, r3, #1
 80082d4:	687a      	ldr	r2, [r7, #4]
 80082d6:	3201      	adds	r2, #1
 80082d8:	7812      	ldrb	r2, [r2, #0]
 80082da:	4293      	cmp	r3, r2
 80082dc:	d11f      	bne.n	800831e <eMBMasterFuncReadWriteMultipleHoldingRegister+0xf2>
        {
            /* Make callback to update the register values. */
            eRegStatus = eMBMasterRegHoldingCB( &ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_VALUES_OFF],
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	f103 000a 	add.w	r0, r3, #10
 80082e4:	89fa      	ldrh	r2, [r7, #14]
 80082e6:	8a39      	ldrh	r1, [r7, #16]
 80082e8:	2301      	movs	r3, #1
 80082ea:	f001 fd9d 	bl	8009e28 <eMBMasterRegHoldingCB>
 80082ee:	4603      	mov	r3, r0
 80082f0:	75bb      	strb	r3, [r7, #22]
                                           usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );

            if( eRegStatus == MB_ENOERR )
 80082f2:	7dbb      	ldrb	r3, [r7, #22]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d108      	bne.n	800830a <eMBMasterFuncReadWriteMultipleHoldingRegister+0xde>
            {
                /* Make the read callback. */
				eRegStatus = eMBMasterRegHoldingCB(&pucFrame[MB_PDU_FUNC_READWRITE_READ_VALUES_OFF],
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	1c98      	adds	r0, r3, #2
 80082fc:	8a7a      	ldrh	r2, [r7, #18]
 80082fe:	8ab9      	ldrh	r1, [r7, #20]
 8008300:	2300      	movs	r3, #0
 8008302:	f001 fd91 	bl	8009e28 <eMBMasterRegHoldingCB>
 8008306:	4603      	mov	r3, r0
 8008308:	75bb      	strb	r3, [r7, #22]
						                      usRegReadAddress, usRegReadCount, MB_REG_READ);
            }
            if( eRegStatus != MB_ENOERR )
 800830a:	7dbb      	ldrb	r3, [r7, #22]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d008      	beq.n	8008322 <eMBMasterFuncReadWriteMultipleHoldingRegister+0xf6>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8008310:	7dbb      	ldrb	r3, [r7, #22]
 8008312:	4618      	mov	r0, r3
 8008314:	f000 f9e8 	bl	80086e8 <prveMBError2Exception>
 8008318:	4603      	mov	r3, r0
 800831a:	75fb      	strb	r3, [r7, #23]
 800831c:	e001      	b.n	8008322 <eMBMasterFuncReadWriteMultipleHoldingRegister+0xf6>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800831e:	2303      	movs	r3, #3
 8008320:	75fb      	strb	r3, [r7, #23]
        }
    }
    return eStatus;
 8008322:	7dfb      	ldrb	r3, [r7, #23]
}
 8008324:	4618      	mov	r0, r3
 8008326:	3718      	adds	r7, #24
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}

0800832c <eMBFuncReadInputRegister>:
/* ----------------------- Start implementation -----------------------------*/
#if MB_FUNC_READ_INPUT_ENABLED > 0

eMBException
eMBFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b086      	sub	sp, #24
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8008336:	2300      	movs	r3, #0
 8008338:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	881b      	ldrh	r3, [r3, #0]
 800833e:	2b05      	cmp	r3, #5
 8008340:	d15f      	bne.n	8008402 <eMBFuncReadInputRegister+0xd6>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	3301      	adds	r3, #1
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	b29b      	uxth	r3, r3
 800834a:	021b      	lsls	r3, r3, #8
 800834c:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	3302      	adds	r3, #2
 8008352:	781b      	ldrb	r3, [r3, #0]
 8008354:	b29a      	uxth	r2, r3
 8008356:	8abb      	ldrh	r3, [r7, #20]
 8008358:	4313      	orrs	r3, r2
 800835a:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 800835c:	8abb      	ldrh	r3, [r7, #20]
 800835e:	3301      	adds	r3, #1
 8008360:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	3303      	adds	r3, #3
 8008366:	781b      	ldrb	r3, [r3, #0]
 8008368:	b29b      	uxth	r3, r3
 800836a:	021b      	lsls	r3, r3, #8
 800836c:	827b      	strh	r3, [r7, #18]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	3304      	adds	r3, #4
 8008372:	781b      	ldrb	r3, [r3, #0]
 8008374:	b29a      	uxth	r2, r3
 8008376:	8a7b      	ldrh	r3, [r7, #18]
 8008378:	4313      	orrs	r3, r2
 800837a:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 )
 800837c:	8a7b      	ldrh	r3, [r7, #18]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d03c      	beq.n	80083fc <eMBFuncReadInputRegister+0xd0>
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
 8008382:	8a7b      	ldrh	r3, [r7, #18]
 8008384:	2b7c      	cmp	r3, #124	; 0x7c
 8008386:	d839      	bhi.n	80083fc <eMBFuncReadInputRegister+0xd0>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	2200      	movs	r2, #0
 8008390:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	1c5a      	adds	r2, r3, #1
 8008396:	60fa      	str	r2, [r7, #12]
 8008398:	2204      	movs	r2, #4
 800839a:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	881b      	ldrh	r3, [r3, #0]
 80083a0:	3301      	adds	r3, #1
 80083a2:	b29a      	uxth	r2, r3
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
 80083a8:	8a7b      	ldrh	r3, [r7, #18]
 80083aa:	b2da      	uxtb	r2, r3
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	1c59      	adds	r1, r3, #1
 80083b0:	60f9      	str	r1, [r7, #12]
 80083b2:	0052      	lsls	r2, r2, #1
 80083b4:	b2d2      	uxtb	r2, r2
 80083b6:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	881b      	ldrh	r3, [r3, #0]
 80083bc:	3301      	adds	r3, #1
 80083be:	b29a      	uxth	r2, r3
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );
 80083c4:	8a7a      	ldrh	r2, [r7, #18]
 80083c6:	8abb      	ldrh	r3, [r7, #20]
 80083c8:	4619      	mov	r1, r3
 80083ca:	68f8      	ldr	r0, [r7, #12]
 80083cc:	f001 fad0 	bl	8009970 <eMBRegInputCB>
 80083d0:	4603      	mov	r3, r0
 80083d2:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80083d4:	7afb      	ldrb	r3, [r7, #11]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d006      	beq.n	80083e8 <eMBFuncReadInputRegister+0xbc>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 80083da:	7afb      	ldrb	r3, [r7, #11]
 80083dc:	4618      	mov	r0, r3
 80083de:	f000 f983 	bl	80086e8 <prveMBError2Exception>
 80083e2:	4603      	mov	r3, r0
 80083e4:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 80083e6:	e00e      	b.n	8008406 <eMBFuncReadInputRegister+0xda>
            }
            else
            {
                *usLen += usRegCount * 2;
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	881a      	ldrh	r2, [r3, #0]
 80083ec:	8a7b      	ldrh	r3, [r7, #18]
 80083ee:	005b      	lsls	r3, r3, #1
 80083f0:	b29b      	uxth	r3, r3
 80083f2:	4413      	add	r3, r2
 80083f4:	b29a      	uxth	r2, r3
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 80083fa:	e004      	b.n	8008406 <eMBFuncReadInputRegister+0xda>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80083fc:	2303      	movs	r3, #3
 80083fe:	75fb      	strb	r3, [r7, #23]
 8008400:	e001      	b.n	8008406 <eMBFuncReadInputRegister+0xda>
    }
    else
    {
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8008402:	2303      	movs	r3, #3
 8008404:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 8008406:	7dfb      	ldrb	r3, [r7, #23]
}
 8008408:	4618      	mov	r0, r3
 800840a:	3718      	adds	r7, #24
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}

08008410 <eMBMasterReqReadInputRegister>:
 *
 * @return error code
 */
eMBMasterReqErrCode
eMBMasterReqReadInputRegister( UCHAR ucSndAddr, USHORT usRegAddr, USHORT usNRegs, LONG lTimeOut )
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b086      	sub	sp, #24
 8008414:	af00      	add	r7, sp, #0
 8008416:	607b      	str	r3, [r7, #4]
 8008418:	4603      	mov	r3, r0
 800841a:	73fb      	strb	r3, [r7, #15]
 800841c:	460b      	mov	r3, r1
 800841e:	81bb      	strh	r3, [r7, #12]
 8008420:	4613      	mov	r3, r2
 8008422:	817b      	strh	r3, [r7, #10]
    UCHAR                 *ucMBFrame;
    eMBMasterReqErrCode    eErrStatus = MB_MRE_NO_ERR;
 8008424:	2300      	movs	r3, #0
 8008426:	75fb      	strb	r3, [r7, #23]

    if ( ucSndAddr > MB_MASTER_TOTAL_SLAVE_NUM ) eErrStatus = MB_MRE_ILL_ARG;
 8008428:	7bfb      	ldrb	r3, [r7, #15]
 800842a:	2b10      	cmp	r3, #16
 800842c:	d902      	bls.n	8008434 <eMBMasterReqReadInputRegister+0x24>
 800842e:	2302      	movs	r3, #2
 8008430:	75fb      	strb	r3, [r7, #23]
 8008432:	e036      	b.n	80084a2 <eMBMasterReqReadInputRegister+0x92>
    else if ( xMBMasterRunResTake( lTimeOut ) == FALSE ) eErrStatus = MB_MRE_MASTER_BUSY;
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 ff5d 	bl	80092f4 <xMBMasterRunResTake>
 800843a:	4603      	mov	r3, r0
 800843c:	2b00      	cmp	r3, #0
 800843e:	d102      	bne.n	8008446 <eMBMasterReqReadInputRegister+0x36>
 8008440:	2305      	movs	r3, #5
 8008442:	75fb      	strb	r3, [r7, #23]
 8008444:	e02d      	b.n	80084a2 <eMBMasterReqReadInputRegister+0x92>
    else
    {
		vMBMasterGetPDUSndBuf(&ucMBFrame);
 8008446:	f107 0310 	add.w	r3, r7, #16
 800844a:	4618      	mov	r0, r3
 800844c:	f002 fb7e 	bl	800ab4c <vMBMasterGetPDUSndBuf>
		vMBMasterSetDestAddress(ucSndAddr);
 8008450:	7bfb      	ldrb	r3, [r7, #15]
 8008452:	4618      	mov	r0, r3
 8008454:	f000 fcb8 	bl	8008dc8 <vMBMasterSetDestAddress>
		ucMBFrame[MB_PDU_FUNC_OFF]                = MB_FUNC_READ_INPUT_REGISTER;
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	2204      	movs	r2, #4
 800845c:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF]       = usRegAddr >> 8;
 800845e:	89bb      	ldrh	r3, [r7, #12]
 8008460:	0a1b      	lsrs	r3, r3, #8
 8008462:	b29a      	uxth	r2, r3
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	3301      	adds	r3, #1
 8008468:	b2d2      	uxtb	r2, r2
 800846a:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1]   = usRegAddr;
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	3302      	adds	r3, #2
 8008470:	89ba      	ldrh	r2, [r7, #12]
 8008472:	b2d2      	uxtb	r2, r2
 8008474:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF]     = usNRegs >> 8;
 8008476:	897b      	ldrh	r3, [r7, #10]
 8008478:	0a1b      	lsrs	r3, r3, #8
 800847a:	b29a      	uxth	r2, r3
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	3303      	adds	r3, #3
 8008480:	b2d2      	uxtb	r2, r2
 8008482:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF + 1] = usNRegs;
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	3304      	adds	r3, #4
 8008488:	897a      	ldrh	r2, [r7, #10]
 800848a:	b2d2      	uxtb	r2, r2
 800848c:	701a      	strb	r2, [r3, #0]
		vMBMasterSetPDUSndLength( MB_PDU_SIZE_MIN + MB_PDU_REQ_READ_SIZE );
 800848e:	2005      	movs	r0, #5
 8008490:	f002 fb6c 	bl	800ab6c <vMBMasterSetPDUSndLength>
		( void ) xMBMasterPortEventPost( EV_MASTER_FRAME_SENT );
 8008494:	2008      	movs	r0, #8
 8008496:	f000 fe97 	bl	80091c8 <xMBMasterPortEventPost>
		eErrStatus = eMBMasterWaitRequestFinish( );
 800849a:	f000 ff9b 	bl	80093d4 <eMBMasterWaitRequestFinish>
 800849e:	4603      	mov	r3, r0
 80084a0:	75fb      	strb	r3, [r7, #23]
    }
    return eErrStatus;
 80084a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3718      	adds	r7, #24
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}

080084ac <eMBMasterFuncReadInputRegister>:

eMBException
eMBMasterFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b086      	sub	sp, #24
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
 80084b4:	6039      	str	r1, [r7, #0]
    UCHAR          *ucMBFrame;
    USHORT          usRegAddress;
    USHORT          usRegCount;

    eMBException    eStatus = MB_EX_NONE;
 80084b6:	2300      	movs	r3, #0
 80084b8:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, and it's read mode. This request don't need execute. */
	if ( xMBMasterRequestIsBroadcast() )
 80084ba:	f002 fb73 	bl	800aba4 <xMBMasterRequestIsBroadcast>
 80084be:	4603      	mov	r3, r0
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d002      	beq.n	80084ca <eMBMasterFuncReadInputRegister+0x1e>
	{
		eStatus = MB_EX_NONE;
 80084c4:	2300      	movs	r3, #0
 80084c6:	75fb      	strb	r3, [r7, #23]
 80084c8:	e047      	b.n	800855a <eMBMasterFuncReadInputRegister+0xae>
	}
	else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	881b      	ldrh	r3, [r3, #0]
 80084ce:	2b01      	cmp	r3, #1
 80084d0:	d941      	bls.n	8008556 <eMBMasterFuncReadInputRegister+0xaa>
    {
		vMBMasterGetPDUSndBuf(&ucMBFrame);
 80084d2:	f107 030c 	add.w	r3, r7, #12
 80084d6:	4618      	mov	r0, r3
 80084d8:	f002 fb38 	bl	800ab4c <vMBMasterGetPDUSndBuf>
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	3301      	adds	r3, #1
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	b29b      	uxth	r3, r3
 80084e4:	021b      	lsls	r3, r3, #8
 80084e6:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	3302      	adds	r3, #2
 80084ec:	781b      	ldrb	r3, [r3, #0]
 80084ee:	b29a      	uxth	r2, r3
 80084f0:	8abb      	ldrh	r3, [r7, #20]
 80084f2:	4313      	orrs	r3, r2
 80084f4:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 80084f6:	8abb      	ldrh	r3, [r7, #20]
 80084f8:	3301      	adds	r3, #1
 80084fa:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF] << 8 );
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	3303      	adds	r3, #3
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	b29b      	uxth	r3, r3
 8008504:	021b      	lsls	r3, r3, #8
 8008506:	827b      	strh	r3, [r7, #18]
        usRegCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF + 1] );
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	3304      	adds	r3, #4
 800850c:	781b      	ldrb	r3, [r3, #0]
 800850e:	b29a      	uxth	r2, r3
 8008510:	8a7b      	ldrh	r3, [r7, #18]
 8008512:	4313      	orrs	r3, r2
 8008514:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception.
         */
        if( ( usRegCount >= 1 ) && ( 2 * usRegCount == pucFrame[MB_PDU_FUNC_READ_BYTECNT_OFF] ) )
 8008516:	8a7b      	ldrh	r3, [r7, #18]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d019      	beq.n	8008550 <eMBMasterFuncReadInputRegister+0xa4>
 800851c:	8a7b      	ldrh	r3, [r7, #18]
 800851e:	005b      	lsls	r3, r3, #1
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	3201      	adds	r2, #1
 8008524:	7812      	ldrb	r2, [r2, #0]
 8008526:	4293      	cmp	r3, r2
 8008528:	d112      	bne.n	8008550 <eMBMasterFuncReadInputRegister+0xa4>
        {
            /* Make callback to fill the buffer. */
            eRegStatus = eMBMasterRegInputCB( &pucFrame[MB_PDU_FUNC_READ_VALUES_OFF], usRegAddress, usRegCount );
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	3302      	adds	r3, #2
 800852e:	8a7a      	ldrh	r2, [r7, #18]
 8008530:	8ab9      	ldrh	r1, [r7, #20]
 8008532:	4618      	mov	r0, r3
 8008534:	f001 fc18 	bl	8009d68 <eMBMasterRegInputCB>
 8008538:	4603      	mov	r3, r0
 800853a:	747b      	strb	r3, [r7, #17]
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 800853c:	7c7b      	ldrb	r3, [r7, #17]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d00b      	beq.n	800855a <eMBMasterFuncReadInputRegister+0xae>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8008542:	7c7b      	ldrb	r3, [r7, #17]
 8008544:	4618      	mov	r0, r3
 8008546:	f000 f8cf 	bl	80086e8 <prveMBError2Exception>
 800854a:	4603      	mov	r3, r0
 800854c:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 800854e:	e004      	b.n	800855a <eMBMasterFuncReadInputRegister+0xae>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8008550:	2303      	movs	r3, #3
 8008552:	75fb      	strb	r3, [r7, #23]
 8008554:	e001      	b.n	800855a <eMBMasterFuncReadInputRegister+0xae>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8008556:	2303      	movs	r3, #3
 8008558:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 800855a:	7dfb      	ldrb	r3, [r7, #23]
}
 800855c:	4618      	mov	r0, r3
 800855e:	3718      	adds	r7, #24
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b082      	sub	sp, #8
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	6039      	str	r1, [r7, #0]
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	3301      	adds	r3, #1
 8008572:	4a08      	ldr	r2, [pc, #32]	; (8008594 <eMBFuncReportSlaveID+0x30>)
 8008574:	8812      	ldrh	r2, [r2, #0]
 8008576:	4908      	ldr	r1, [pc, #32]	; (8008598 <eMBFuncReportSlaveID+0x34>)
 8008578:	4618      	mov	r0, r3
 800857a:	f002 fc72 	bl	800ae62 <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 800857e:	4b05      	ldr	r3, [pc, #20]	; (8008594 <eMBFuncReportSlaveID+0x30>)
 8008580:	881b      	ldrh	r3, [r3, #0]
 8008582:	3301      	adds	r3, #1
 8008584:	b29a      	uxth	r2, r3
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	801a      	strh	r2, [r3, #0]
    return MB_EX_NONE;
 800858a:	2300      	movs	r3, #0
}
 800858c:	4618      	mov	r0, r3
 800858e:	3708      	adds	r7, #8
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}
 8008594:	20004b84 	.word	0x20004b84
 8008598:	20004b64 	.word	0x20004b64

0800859c <xMBUtilSetBits>:

/* ----------------------- Start implementation -----------------------------*/
void
xMBUtilSetBits( UCHAR * ucByteBuf, USHORT usBitOffset, UCHAR ucNBits,
                UCHAR ucValue )
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b086      	sub	sp, #24
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
 80085a4:	4608      	mov	r0, r1
 80085a6:	4611      	mov	r1, r2
 80085a8:	461a      	mov	r2, r3
 80085aa:	4603      	mov	r3, r0
 80085ac:	807b      	strh	r3, [r7, #2]
 80085ae:	460b      	mov	r3, r1
 80085b0:	707b      	strb	r3, [r7, #1]
 80085b2:	4613      	mov	r3, r2
 80085b4:	703b      	strb	r3, [r7, #0]
    USHORT          usWordBuf;
    USHORT          usMask;
    USHORT          usByteOffset;
    USHORT          usNPreBits;
    USHORT          usValue = ucValue;
 80085b6:	783b      	ldrb	r3, [r7, #0]
 80085b8:	82fb      	strh	r3, [r7, #22]

    assert( ucNBits <= 8 );
 80085ba:	787b      	ldrb	r3, [r7, #1]
 80085bc:	2b08      	cmp	r3, #8
 80085be:	d905      	bls.n	80085cc <xMBUtilSetBits+0x30>
 80085c0:	4b29      	ldr	r3, [pc, #164]	; (8008668 <xMBUtilSetBits+0xcc>)
 80085c2:	4a2a      	ldr	r2, [pc, #168]	; (800866c <xMBUtilSetBits+0xd0>)
 80085c4:	2136      	movs	r1, #54	; 0x36
 80085c6:	482a      	ldr	r0, [pc, #168]	; (8008670 <xMBUtilSetBits+0xd4>)
 80085c8:	f002 faf8 	bl	800abbc <__assert_func>
    assert( ( size_t )BITS_UCHAR == sizeof( UCHAR ) * 8 );

    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );
 80085cc:	887b      	ldrh	r3, [r7, #2]
 80085ce:	08db      	lsrs	r3, r3, #3
 80085d0:	82bb      	strh	r3, [r7, #20]

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );
 80085d2:	8abb      	ldrh	r3, [r7, #20]
 80085d4:	00db      	lsls	r3, r3, #3
 80085d6:	b29b      	uxth	r3, r3
 80085d8:	887a      	ldrh	r2, [r7, #2]
 80085da:	1ad3      	subs	r3, r2, r3
 80085dc:	827b      	strh	r3, [r7, #18]

    /* Move bit field into position over bits to set */
    usValue <<= usNPreBits;
 80085de:	8afa      	ldrh	r2, [r7, #22]
 80085e0:	8a7b      	ldrh	r3, [r7, #18]
 80085e2:	fa02 f303 	lsl.w	r3, r2, r3
 80085e6:	82fb      	strh	r3, [r7, #22]

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 80085e8:	787b      	ldrb	r3, [r7, #1]
 80085ea:	2201      	movs	r2, #1
 80085ec:	fa02 f303 	lsl.w	r3, r2, r3
 80085f0:	b29b      	uxth	r3, r3
 80085f2:	3b01      	subs	r3, #1
 80085f4:	823b      	strh	r3, [r7, #16]
    usMask <<= usBitOffset - usByteOffset * BITS_UCHAR;
 80085f6:	8a3a      	ldrh	r2, [r7, #16]
 80085f8:	8879      	ldrh	r1, [r7, #2]
 80085fa:	8abb      	ldrh	r3, [r7, #20]
 80085fc:	00db      	lsls	r3, r3, #3
 80085fe:	1acb      	subs	r3, r1, r3
 8008600:	fa02 f303 	lsl.w	r3, r2, r3
 8008604:	823b      	strh	r3, [r7, #16]

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
 8008606:	8abb      	ldrh	r3, [r7, #20]
 8008608:	687a      	ldr	r2, [r7, #4]
 800860a:	4413      	add	r3, r2
 800860c:	781b      	ldrb	r3, [r3, #0]
 800860e:	81fb      	strh	r3, [r7, #14]
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 8008610:	8abb      	ldrh	r3, [r7, #20]
 8008612:	3301      	adds	r3, #1
 8008614:	687a      	ldr	r2, [r7, #4]
 8008616:	4413      	add	r3, r2
 8008618:	781b      	ldrb	r3, [r3, #0]
 800861a:	021b      	lsls	r3, r3, #8
 800861c:	b21a      	sxth	r2, r3
 800861e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008622:	4313      	orrs	r3, r2
 8008624:	b21b      	sxth	r3, r3
 8008626:	81fb      	strh	r3, [r7, #14]

    /* Zero out bit field bits and then or value bits into them. */
    usWordBuf = ( USHORT )( ( usWordBuf & ( ~usMask ) ) | usValue );
 8008628:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800862c:	43db      	mvns	r3, r3
 800862e:	b21a      	sxth	r2, r3
 8008630:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008634:	4013      	ands	r3, r2
 8008636:	b21a      	sxth	r2, r3
 8008638:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800863c:	4313      	orrs	r3, r2
 800863e:	b21b      	sxth	r3, r3
 8008640:	81fb      	strh	r3, [r7, #14]

    /* move bits back into storage */
    ucByteBuf[usByteOffset] = ( UCHAR )( usWordBuf & 0xFF );
 8008642:	8abb      	ldrh	r3, [r7, #20]
 8008644:	687a      	ldr	r2, [r7, #4]
 8008646:	4413      	add	r3, r2
 8008648:	89fa      	ldrh	r2, [r7, #14]
 800864a:	b2d2      	uxtb	r2, r2
 800864c:	701a      	strb	r2, [r3, #0]
    ucByteBuf[usByteOffset + 1] = ( UCHAR )( usWordBuf >> BITS_UCHAR );
 800864e:	89fb      	ldrh	r3, [r7, #14]
 8008650:	0a1b      	lsrs	r3, r3, #8
 8008652:	b299      	uxth	r1, r3
 8008654:	8abb      	ldrh	r3, [r7, #20]
 8008656:	3301      	adds	r3, #1
 8008658:	687a      	ldr	r2, [r7, #4]
 800865a:	4413      	add	r3, r2
 800865c:	b2ca      	uxtb	r2, r1
 800865e:	701a      	strb	r2, [r3, #0]
}
 8008660:	bf00      	nop
 8008662:	3718      	adds	r7, #24
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}
 8008668:	0800bcc4 	.word	0x0800bcc4
 800866c:	0800be68 	.word	0x0800be68
 8008670:	0800bcd4 	.word	0x0800bcd4

08008674 <xMBUtilGetBits>:

UCHAR
xMBUtilGetBits( UCHAR * ucByteBuf, USHORT usBitOffset, UCHAR ucNBits )
{
 8008674:	b480      	push	{r7}
 8008676:	b085      	sub	sp, #20
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	460b      	mov	r3, r1
 800867e:	807b      	strh	r3, [r7, #2]
 8008680:	4613      	mov	r3, r2
 8008682:	707b      	strb	r3, [r7, #1]
    USHORT          usByteOffset;
    USHORT          usNPreBits;

    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );
 8008684:	887b      	ldrh	r3, [r7, #2]
 8008686:	08db      	lsrs	r3, r3, #3
 8008688:	81fb      	strh	r3, [r7, #14]

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );
 800868a:	89fb      	ldrh	r3, [r7, #14]
 800868c:	00db      	lsls	r3, r3, #3
 800868e:	b29b      	uxth	r3, r3
 8008690:	887a      	ldrh	r2, [r7, #2]
 8008692:	1ad3      	subs	r3, r2, r3
 8008694:	81bb      	strh	r3, [r7, #12]

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 8008696:	787b      	ldrb	r3, [r7, #1]
 8008698:	2201      	movs	r2, #1
 800869a:	fa02 f303 	lsl.w	r3, r2, r3
 800869e:	b29b      	uxth	r3, r3
 80086a0:	3b01      	subs	r3, #1
 80086a2:	817b      	strh	r3, [r7, #10]

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
 80086a4:	89fb      	ldrh	r3, [r7, #14]
 80086a6:	687a      	ldr	r2, [r7, #4]
 80086a8:	4413      	add	r3, r2
 80086aa:	781b      	ldrb	r3, [r3, #0]
 80086ac:	813b      	strh	r3, [r7, #8]
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 80086ae:	89fb      	ldrh	r3, [r7, #14]
 80086b0:	3301      	adds	r3, #1
 80086b2:	687a      	ldr	r2, [r7, #4]
 80086b4:	4413      	add	r3, r2
 80086b6:	781b      	ldrb	r3, [r3, #0]
 80086b8:	021b      	lsls	r3, r3, #8
 80086ba:	b21a      	sxth	r2, r3
 80086bc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80086c0:	4313      	orrs	r3, r2
 80086c2:	b21b      	sxth	r3, r3
 80086c4:	813b      	strh	r3, [r7, #8]

    /* throw away unneeded bits. */
    usWordBuf >>= usNPreBits;
 80086c6:	893a      	ldrh	r2, [r7, #8]
 80086c8:	89bb      	ldrh	r3, [r7, #12]
 80086ca:	fa42 f303 	asr.w	r3, r2, r3
 80086ce:	813b      	strh	r3, [r7, #8]

    /* mask away bits above the requested bitfield. */
    usWordBuf &= usMask;
 80086d0:	893a      	ldrh	r2, [r7, #8]
 80086d2:	897b      	ldrh	r3, [r7, #10]
 80086d4:	4013      	ands	r3, r2
 80086d6:	813b      	strh	r3, [r7, #8]

    return ( UCHAR ) usWordBuf;
 80086d8:	893b      	ldrh	r3, [r7, #8]
 80086da:	b2db      	uxtb	r3, r3
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3714      	adds	r7, #20
 80086e0:	46bd      	mov	sp, r7
 80086e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e6:	4770      	bx	lr

080086e8 <prveMBError2Exception>:

eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
 80086e8:	b480      	push	{r7}
 80086ea:	b085      	sub	sp, #20
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	4603      	mov	r3, r0
 80086f0:	71fb      	strb	r3, [r7, #7]
    eMBException    eStatus;

    switch ( eErrorCode )
 80086f2:	79fb      	ldrb	r3, [r7, #7]
 80086f4:	2b07      	cmp	r3, #7
 80086f6:	d00c      	beq.n	8008712 <prveMBError2Exception+0x2a>
 80086f8:	2b07      	cmp	r3, #7
 80086fa:	dc0d      	bgt.n	8008718 <prveMBError2Exception+0x30>
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d002      	beq.n	8008706 <prveMBError2Exception+0x1e>
 8008700:	2b01      	cmp	r3, #1
 8008702:	d003      	beq.n	800870c <prveMBError2Exception+0x24>
 8008704:	e008      	b.n	8008718 <prveMBError2Exception+0x30>
    {
        case MB_ENOERR:
            eStatus = MB_EX_NONE;
 8008706:	2300      	movs	r3, #0
 8008708:	73fb      	strb	r3, [r7, #15]
            break;
 800870a:	e008      	b.n	800871e <prveMBError2Exception+0x36>

        case MB_ENOREG:
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
 800870c:	2302      	movs	r3, #2
 800870e:	73fb      	strb	r3, [r7, #15]
            break;
 8008710:	e005      	b.n	800871e <prveMBError2Exception+0x36>

        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
 8008712:	2306      	movs	r3, #6
 8008714:	73fb      	strb	r3, [r7, #15]
            break;
 8008716:	e002      	b.n	800871e <prveMBError2Exception+0x36>

        default:
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
 8008718:	2304      	movs	r3, #4
 800871a:	73fb      	strb	r3, [r7, #15]
            break;
 800871c:	bf00      	nop
    }

    return eStatus;
 800871e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008720:	4618      	mov	r0, r3
 8008722:	3714      	adds	r7, #20
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr

0800872c <eMBInit>:
};

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBInit( eMBMode eMode, UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b084      	sub	sp, #16
 8008730:	af00      	add	r7, sp, #0
 8008732:	603b      	str	r3, [r7, #0]
 8008734:	4603      	mov	r3, r0
 8008736:	71fb      	strb	r3, [r7, #7]
 8008738:	460b      	mov	r3, r1
 800873a:	71bb      	strb	r3, [r7, #6]
 800873c:	4613      	mov	r3, r2
 800873e:	717b      	strb	r3, [r7, #5]
    eMBErrorCode    eStatus = MB_ENOERR;
 8008740:	2300      	movs	r3, #0
 8008742:	73fb      	strb	r3, [r7, #15]

    /* check preconditions */
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
 8008744:	79bb      	ldrb	r3, [r7, #6]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d005      	beq.n	8008756 <eMBInit+0x2a>
 800874a:	79bb      	ldrb	r3, [r7, #6]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d002      	beq.n	8008756 <eMBInit+0x2a>
        ( ucSlaveAddress < MB_ADDRESS_MIN ) || ( ucSlaveAddress > MB_ADDRESS_MAX ) )
 8008750:	79bb      	ldrb	r3, [r7, #6]
 8008752:	2bf7      	cmp	r3, #247	; 0xf7
 8008754:	d902      	bls.n	800875c <eMBInit+0x30>
    {
        eStatus = MB_EINVAL;
 8008756:	2302      	movs	r3, #2
 8008758:	73fb      	strb	r3, [r7, #15]
 800875a:	e03a      	b.n	80087d2 <eMBInit+0xa6>
    }
    else
    {
        ucMBAddress = ucSlaveAddress;
 800875c:	4a1f      	ldr	r2, [pc, #124]	; (80087dc <eMBInit+0xb0>)
 800875e:	79bb      	ldrb	r3, [r7, #6]
 8008760:	7013      	strb	r3, [r2, #0]

        switch ( eMode )
 8008762:	79fb      	ldrb	r3, [r7, #7]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d121      	bne.n	80087ac <eMBInit+0x80>
        {
#if MB_SLAVE_RTU_ENABLED > 0
        case MB_RTU:
            pvMBFrameStartCur = eMBRTUStart;
 8008768:	4b1d      	ldr	r3, [pc, #116]	; (80087e0 <eMBInit+0xb4>)
 800876a:	4a1e      	ldr	r2, [pc, #120]	; (80087e4 <eMBInit+0xb8>)
 800876c:	601a      	str	r2, [r3, #0]
            pvMBFrameStopCur = eMBRTUStop;
 800876e:	4b1e      	ldr	r3, [pc, #120]	; (80087e8 <eMBInit+0xbc>)
 8008770:	4a1e      	ldr	r2, [pc, #120]	; (80087ec <eMBInit+0xc0>)
 8008772:	601a      	str	r2, [r3, #0]
            peMBFrameSendCur = eMBRTUSend;
 8008774:	4b1e      	ldr	r3, [pc, #120]	; (80087f0 <eMBInit+0xc4>)
 8008776:	4a1f      	ldr	r2, [pc, #124]	; (80087f4 <eMBInit+0xc8>)
 8008778:	601a      	str	r2, [r3, #0]
            peMBFrameReceiveCur = eMBRTUReceive;
 800877a:	4b1f      	ldr	r3, [pc, #124]	; (80087f8 <eMBInit+0xcc>)
 800877c:	4a1f      	ldr	r2, [pc, #124]	; (80087fc <eMBInit+0xd0>)
 800877e:	601a      	str	r2, [r3, #0]
            pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
 8008780:	4b1f      	ldr	r3, [pc, #124]	; (8008800 <eMBInit+0xd4>)
 8008782:	2200      	movs	r2, #0
 8008784:	601a      	str	r2, [r3, #0]
            pxMBFrameCBByteReceived = xMBRTUReceiveFSM;			//call back from interrupt
 8008786:	4b1f      	ldr	r3, [pc, #124]	; (8008804 <eMBInit+0xd8>)
 8008788:	4a1f      	ldr	r2, [pc, #124]	; (8008808 <eMBInit+0xdc>)
 800878a:	601a      	str	r2, [r3, #0]
            pxMBFrameCBTransmitterEmpty = xMBRTUTransmitFSM;	//call back from interrupt
 800878c:	4b1f      	ldr	r3, [pc, #124]	; (800880c <eMBInit+0xe0>)
 800878e:	4a20      	ldr	r2, [pc, #128]	; (8008810 <eMBInit+0xe4>)
 8008790:	601a      	str	r2, [r3, #0]
            pxMBPortCBTimerExpired = xMBRTUTimerT35Expired;		//call back from interrupt
 8008792:	4b20      	ldr	r3, [pc, #128]	; (8008814 <eMBInit+0xe8>)
 8008794:	4a20      	ldr	r2, [pc, #128]	; (8008818 <eMBInit+0xec>)
 8008796:	601a      	str	r2, [r3, #0]

            eStatus = eMBRTUInit( ucMBAddress, ucPort, ulBaudRate, eParity );
 8008798:	4b10      	ldr	r3, [pc, #64]	; (80087dc <eMBInit+0xb0>)
 800879a:	7818      	ldrb	r0, [r3, #0]
 800879c:	7e3b      	ldrb	r3, [r7, #24]
 800879e:	7979      	ldrb	r1, [r7, #5]
 80087a0:	683a      	ldr	r2, [r7, #0]
 80087a2:	f001 fd2b 	bl	800a1fc <eMBRTUInit>
 80087a6:	4603      	mov	r3, r0
 80087a8:	73fb      	strb	r3, [r7, #15]
            break;
 80087aa:	e001      	b.n	80087b0 <eMBInit+0x84>

            eStatus = eMBASCIIInit( ucMBAddress, ucPort, ulBaudRate, eParity );
            break;
#endif
        default:
            eStatus = MB_EINVAL;
 80087ac:	2302      	movs	r3, #2
 80087ae:	73fb      	strb	r3, [r7, #15]
        }

        if( eStatus == MB_ENOERR )
 80087b0:	7bfb      	ldrb	r3, [r7, #15]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d10d      	bne.n	80087d2 <eMBInit+0xa6>
        {
            if( !xMBPortEventInit(  ) )
 80087b6:	f000 fc69 	bl	800908c <xMBPortEventInit>
 80087ba:	4603      	mov	r3, r0
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d102      	bne.n	80087c6 <eMBInit+0x9a>
            {
                /* port dependent event module initalization failed. */
                eStatus = MB_EPORTERR;
 80087c0:	2303      	movs	r3, #3
 80087c2:	73fb      	strb	r3, [r7, #15]
 80087c4:	e005      	b.n	80087d2 <eMBInit+0xa6>
            }
            else
            {
                eMBCurrentMode = eMode;
 80087c6:	4a15      	ldr	r2, [pc, #84]	; (800881c <eMBInit+0xf0>)
 80087c8:	79fb      	ldrb	r3, [r7, #7]
 80087ca:	7013      	strb	r3, [r2, #0]
                eMBState = STATE_DISABLED;
 80087cc:	4b14      	ldr	r3, [pc, #80]	; (8008820 <eMBInit+0xf4>)
 80087ce:	2201      	movs	r2, #1
 80087d0:	701a      	strb	r2, [r3, #0]
            }
        }
    }
    return eStatus;
 80087d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3710      	adds	r7, #16
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}
 80087dc:	20004b86 	.word	0x20004b86
 80087e0:	20004b8c 	.word	0x20004b8c
 80087e4:	0800a275 	.word	0x0800a275
 80087e8:	20004b90 	.word	0x20004b90
 80087ec:	0800a29d 	.word	0x0800a29d
 80087f0:	20004b88 	.word	0x20004b88
 80087f4:	0800a355 	.word	0x0800a355
 80087f8:	20004b94 	.word	0x20004b94
 80087fc:	0800a2b9 	.word	0x0800a2b9
 8008800:	20004b98 	.word	0x20004b98
 8008804:	20005064 	.word	0x20005064
 8008808:	0800a41d 	.word	0x0800a41d
 800880c:	2000505c 	.word	0x2000505c
 8008810:	0800a4ed 	.word	0x0800a4ed
 8008814:	20005060 	.word	0x20005060
 8008818:	0800a59d 	.word	0x0800a59d
 800881c:	20004b87 	.word	0x20004b87
 8008820:	20000010 	.word	0x20000010

08008824 <eMBEnable>:
    return eStatus;
}

eMBErrorCode
eMBEnable( void )
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b082      	sub	sp, #8
 8008828:	af00      	add	r7, sp, #0
    eMBErrorCode    eStatus = MB_ENOERR;
 800882a:	2300      	movs	r3, #0
 800882c:	71fb      	strb	r3, [r7, #7]

    if( eMBState == STATE_DISABLED )
 800882e:	4b09      	ldr	r3, [pc, #36]	; (8008854 <eMBEnable+0x30>)
 8008830:	781b      	ldrb	r3, [r3, #0]
 8008832:	2b01      	cmp	r3, #1
 8008834:	d106      	bne.n	8008844 <eMBEnable+0x20>
    {
        /* Activate the protocol stack. */
        pvMBFrameStartCur(  );
 8008836:	4b08      	ldr	r3, [pc, #32]	; (8008858 <eMBEnable+0x34>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 800883c:	4b05      	ldr	r3, [pc, #20]	; (8008854 <eMBEnable+0x30>)
 800883e:	2200      	movs	r2, #0
 8008840:	701a      	strb	r2, [r3, #0]
 8008842:	e001      	b.n	8008848 <eMBEnable+0x24>
    }
    else
    {
        eStatus = MB_EILLSTATE;
 8008844:	2306      	movs	r3, #6
 8008846:	71fb      	strb	r3, [r7, #7]
    }
    return eStatus;
 8008848:	79fb      	ldrb	r3, [r7, #7]
}
 800884a:	4618      	mov	r0, r3
 800884c:	3708      	adds	r7, #8
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}
 8008852:	bf00      	nop
 8008854:	20000010 	.word	0x20000010
 8008858:	20004b8c 	.word	0x20004b8c

0800885c <eMBPoll>:
    return eStatus;
}

eMBErrorCode
eMBPoll( void )
{
 800885c:	b590      	push	{r4, r7, lr}
 800885e:	b083      	sub	sp, #12
 8008860:	af00      	add	r7, sp, #0
    static UCHAR    ucFunctionCode;
    static USHORT   usLength;
    static eMBException eException;

    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
 8008862:	2300      	movs	r3, #0
 8008864:	70fb      	strb	r3, [r7, #3]
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
 8008866:	4b56      	ldr	r3, [pc, #344]	; (80089c0 <eMBPoll+0x164>)
 8008868:	781b      	ldrb	r3, [r3, #0]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d001      	beq.n	8008872 <eMBPoll+0x16>
    {
        return MB_EILLSTATE;
 800886e:	2306      	movs	r3, #6
 8008870:	e0a1      	b.n	80089b6 <eMBPoll+0x15a>
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
 8008872:	1cbb      	adds	r3, r7, #2
 8008874:	4618      	mov	r0, r3
 8008876:	f000 fc57 	bl	8009128 <xMBPortEventGet>
 800887a:	4603      	mov	r3, r0
 800887c:	2b01      	cmp	r3, #1
 800887e:	f040 8094 	bne.w	80089aa <eMBPoll+0x14e>
    {
        switch ( eEvent )
 8008882:	78bb      	ldrb	r3, [r7, #2]
 8008884:	3b01      	subs	r3, #1
 8008886:	2b07      	cmp	r3, #7
 8008888:	f200 8094 	bhi.w	80089b4 <eMBPoll+0x158>
 800888c:	a201      	add	r2, pc, #4	; (adr r2, 8008894 <eMBPoll+0x38>)
 800888e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008892:	bf00      	nop
 8008894:	080089b5 	.word	0x080089b5
 8008898:	080088b5 	.word	0x080088b5
 800889c:	080089b5 	.word	0x080089b5
 80088a0:	080088e7 	.word	0x080088e7
 80088a4:	080089b5 	.word	0x080089b5
 80088a8:	080089b5 	.word	0x080089b5
 80088ac:	080089b5 	.word	0x080089b5
 80088b0:	080089b5 	.word	0x080089b5
        case EV_READY:

            break;

        case EV_FRAME_RECEIVED:
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 80088b4:	4b43      	ldr	r3, [pc, #268]	; (80089c4 <eMBPoll+0x168>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4a43      	ldr	r2, [pc, #268]	; (80089c8 <eMBPoll+0x16c>)
 80088ba:	4944      	ldr	r1, [pc, #272]	; (80089cc <eMBPoll+0x170>)
 80088bc:	4844      	ldr	r0, [pc, #272]	; (80089d0 <eMBPoll+0x174>)
 80088be:	4798      	blx	r3
 80088c0:	4603      	mov	r3, r0
 80088c2:	70fb      	strb	r3, [r7, #3]
            if( eStatus == MB_ENOERR )
 80088c4:	78fb      	ldrb	r3, [r7, #3]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d171      	bne.n	80089ae <eMBPoll+0x152>
            {
                /* Check if the frame is for us. If not ignore the frame. */
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
 80088ca:	4b41      	ldr	r3, [pc, #260]	; (80089d0 <eMBPoll+0x174>)
 80088cc:	781a      	ldrb	r2, [r3, #0]
 80088ce:	4b41      	ldr	r3, [pc, #260]	; (80089d4 <eMBPoll+0x178>)
 80088d0:	781b      	ldrb	r3, [r3, #0]
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d003      	beq.n	80088de <eMBPoll+0x82>
 80088d6:	4b3e      	ldr	r3, [pc, #248]	; (80089d0 <eMBPoll+0x174>)
 80088d8:	781b      	ldrb	r3, [r3, #0]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d167      	bne.n	80089ae <eMBPoll+0x152>
                {
                    ( void )xMBPortEventPost( EV_EXECUTE );
 80088de:	2004      	movs	r0, #4
 80088e0:	f000 fbf4 	bl	80090cc <xMBPortEventPost>
                }
            }
            break;
 80088e4:	e063      	b.n	80089ae <eMBPoll+0x152>

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 80088e6:	4b39      	ldr	r3, [pc, #228]	; (80089cc <eMBPoll+0x170>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	781a      	ldrb	r2, [r3, #0]
 80088ec:	4b3a      	ldr	r3, [pc, #232]	; (80089d8 <eMBPoll+0x17c>)
 80088ee:	701a      	strb	r2, [r3, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 80088f0:	4b3a      	ldr	r3, [pc, #232]	; (80089dc <eMBPoll+0x180>)
 80088f2:	2201      	movs	r2, #1
 80088f4:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 80088f6:	2300      	movs	r3, #0
 80088f8:	607b      	str	r3, [r7, #4]
 80088fa:	e01f      	b.n	800893c <eMBPoll+0xe0>
            {
                /* No more function handlers registered. Abort. */
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 80088fc:	4a38      	ldr	r2, [pc, #224]	; (80089e0 <eMBPoll+0x184>)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d01d      	beq.n	8008944 <eMBPoll+0xe8>
                {
                    break;
                }
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 8008908:	4a35      	ldr	r2, [pc, #212]	; (80089e0 <eMBPoll+0x184>)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8008910:	4b31      	ldr	r3, [pc, #196]	; (80089d8 <eMBPoll+0x17c>)
 8008912:	781b      	ldrb	r3, [r3, #0]
 8008914:	429a      	cmp	r2, r3
 8008916:	d10e      	bne.n	8008936 <eMBPoll+0xda>
                {
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
 8008918:	4a31      	ldr	r2, [pc, #196]	; (80089e0 <eMBPoll+0x184>)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	00db      	lsls	r3, r3, #3
 800891e:	4413      	add	r3, r2
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	4a2a      	ldr	r2, [pc, #168]	; (80089cc <eMBPoll+0x170>)
 8008924:	6812      	ldr	r2, [r2, #0]
 8008926:	4928      	ldr	r1, [pc, #160]	; (80089c8 <eMBPoll+0x16c>)
 8008928:	4610      	mov	r0, r2
 800892a:	4798      	blx	r3
 800892c:	4603      	mov	r3, r0
 800892e:	461a      	mov	r2, r3
 8008930:	4b2a      	ldr	r3, [pc, #168]	; (80089dc <eMBPoll+0x180>)
 8008932:	701a      	strb	r2, [r3, #0]
                    break;
 8008934:	e007      	b.n	8008946 <eMBPoll+0xea>
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	3301      	adds	r3, #1
 800893a:	607b      	str	r3, [r7, #4]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2b0f      	cmp	r3, #15
 8008940:	dddc      	ble.n	80088fc <eMBPoll+0xa0>
 8008942:	e000      	b.n	8008946 <eMBPoll+0xea>
                    break;
 8008944:	bf00      	nop
                }
            }

            /* If the request was not sent to the broadcast address we
             * return a reply. */
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 8008946:	4b22      	ldr	r3, [pc, #136]	; (80089d0 <eMBPoll+0x174>)
 8008948:	781b      	ldrb	r3, [r3, #0]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d031      	beq.n	80089b2 <eMBPoll+0x156>
            {
                if( eException != MB_EX_NONE )
 800894e:	4b23      	ldr	r3, [pc, #140]	; (80089dc <eMBPoll+0x180>)
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d01d      	beq.n	8008992 <eMBPoll+0x136>
                {
                    /* An exception occured. Build an error frame. */
                    usLength = 0;
 8008956:	4b1c      	ldr	r3, [pc, #112]	; (80089c8 <eMBPoll+0x16c>)
 8008958:	2200      	movs	r2, #0
 800895a:	801a      	strh	r2, [r3, #0]
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 800895c:	4b1e      	ldr	r3, [pc, #120]	; (80089d8 <eMBPoll+0x17c>)
 800895e:	781a      	ldrb	r2, [r3, #0]
 8008960:	4b1a      	ldr	r3, [pc, #104]	; (80089cc <eMBPoll+0x170>)
 8008962:	6819      	ldr	r1, [r3, #0]
 8008964:	4b18      	ldr	r3, [pc, #96]	; (80089c8 <eMBPoll+0x16c>)
 8008966:	881b      	ldrh	r3, [r3, #0]
 8008968:	1c58      	adds	r0, r3, #1
 800896a:	b284      	uxth	r4, r0
 800896c:	4816      	ldr	r0, [pc, #88]	; (80089c8 <eMBPoll+0x16c>)
 800896e:	8004      	strh	r4, [r0, #0]
 8008970:	440b      	add	r3, r1
 8008972:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008976:	b2d2      	uxtb	r2, r2
 8008978:	701a      	strb	r2, [r3, #0]
                    ucMBFrame[usLength++] = eException;
 800897a:	4b14      	ldr	r3, [pc, #80]	; (80089cc <eMBPoll+0x170>)
 800897c:	681a      	ldr	r2, [r3, #0]
 800897e:	4b12      	ldr	r3, [pc, #72]	; (80089c8 <eMBPoll+0x16c>)
 8008980:	881b      	ldrh	r3, [r3, #0]
 8008982:	1c59      	adds	r1, r3, #1
 8008984:	b288      	uxth	r0, r1
 8008986:	4910      	ldr	r1, [pc, #64]	; (80089c8 <eMBPoll+0x16c>)
 8008988:	8008      	strh	r0, [r1, #0]
 800898a:	4413      	add	r3, r2
 800898c:	4a13      	ldr	r2, [pc, #76]	; (80089dc <eMBPoll+0x180>)
 800898e:	7812      	ldrb	r2, [r2, #0]
 8008990:	701a      	strb	r2, [r3, #0]
                }
               // if( ( eMBCurrentMode == MB_ASCII ) && MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS )
               // {
                //    vMBPortTimersDelay( MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS );
                //}
                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
 8008992:	4b14      	ldr	r3, [pc, #80]	; (80089e4 <eMBPoll+0x188>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	4a0f      	ldr	r2, [pc, #60]	; (80089d4 <eMBPoll+0x178>)
 8008998:	7810      	ldrb	r0, [r2, #0]
 800899a:	4a0c      	ldr	r2, [pc, #48]	; (80089cc <eMBPoll+0x170>)
 800899c:	6811      	ldr	r1, [r2, #0]
 800899e:	4a0a      	ldr	r2, [pc, #40]	; (80089c8 <eMBPoll+0x16c>)
 80089a0:	8812      	ldrh	r2, [r2, #0]
 80089a2:	4798      	blx	r3
 80089a4:	4603      	mov	r3, r0
 80089a6:	70fb      	strb	r3, [r7, #3]
            }
            break;
 80089a8:	e003      	b.n	80089b2 <eMBPoll+0x156>

        case EV_FRAME_SENT:
            break;
        }
    }
 80089aa:	bf00      	nop
 80089ac:	e002      	b.n	80089b4 <eMBPoll+0x158>
            break;
 80089ae:	bf00      	nop
 80089b0:	e000      	b.n	80089b4 <eMBPoll+0x158>
            break;
 80089b2:	bf00      	nop
    return MB_ENOERR;
 80089b4:	2300      	movs	r3, #0
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	370c      	adds	r7, #12
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd90      	pop	{r4, r7, pc}
 80089be:	bf00      	nop
 80089c0:	20000010 	.word	0x20000010
 80089c4:	20004b94 	.word	0x20004b94
 80089c8:	20004ba4 	.word	0x20004ba4
 80089cc:	20004ba0 	.word	0x20004ba0
 80089d0:	20004b9c 	.word	0x20004b9c
 80089d4:	20004b86 	.word	0x20004b86
 80089d8:	20004ba6 	.word	0x20004ba6
 80089dc:	20004ba7 	.word	0x20004ba7
 80089e0:	20000014 	.word	0x20000014
 80089e4:	20004b88 	.word	0x20004b88

080089e8 <eMBMasterInit>:
};

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBMasterInit( eMBMode eMode, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b084      	sub	sp, #16
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	603a      	str	r2, [r7, #0]
 80089f0:	461a      	mov	r2, r3
 80089f2:	4603      	mov	r3, r0
 80089f4:	71fb      	strb	r3, [r7, #7]
 80089f6:	460b      	mov	r3, r1
 80089f8:	71bb      	strb	r3, [r7, #6]
 80089fa:	4613      	mov	r3, r2
 80089fc:	717b      	strb	r3, [r7, #5]
    eMBErrorCode    eStatus = MB_ENOERR;
 80089fe:	2300      	movs	r3, #0
 8008a00:	73fb      	strb	r3, [r7, #15]

	switch (eMode)
 8008a02:	79fb      	ldrb	r3, [r7, #7]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d120      	bne.n	8008a4a <eMBMasterInit+0x62>
	{
#if MB_MASTER_RTU_ENABLED > 0
	case MB_RTU:
		pvMBMasterFrameStartCur = eMBMasterRTUStart;
 8008a08:	4b1c      	ldr	r3, [pc, #112]	; (8008a7c <eMBMasterInit+0x94>)
 8008a0a:	4a1d      	ldr	r2, [pc, #116]	; (8008a80 <eMBMasterInit+0x98>)
 8008a0c:	601a      	str	r2, [r3, #0]
		pvMBMasterFrameStopCur = eMBMasterRTUStop;
 8008a0e:	4b1d      	ldr	r3, [pc, #116]	; (8008a84 <eMBMasterInit+0x9c>)
 8008a10:	4a1d      	ldr	r2, [pc, #116]	; (8008a88 <eMBMasterInit+0xa0>)
 8008a12:	601a      	str	r2, [r3, #0]
		peMBMasterFrameSendCur = eMBMasterRTUSend;
 8008a14:	4b1d      	ldr	r3, [pc, #116]	; (8008a8c <eMBMasterInit+0xa4>)
 8008a16:	4a1e      	ldr	r2, [pc, #120]	; (8008a90 <eMBMasterInit+0xa8>)
 8008a18:	601a      	str	r2, [r3, #0]
		peMBMasterFrameReceiveCur = eMBMasterRTUReceive;
 8008a1a:	4b1e      	ldr	r3, [pc, #120]	; (8008a94 <eMBMasterInit+0xac>)
 8008a1c:	4a1e      	ldr	r2, [pc, #120]	; (8008a98 <eMBMasterInit+0xb0>)
 8008a1e:	601a      	str	r2, [r3, #0]
		pvMBMasterFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBMasterPortClose : NULL;
 8008a20:	4b1e      	ldr	r3, [pc, #120]	; (8008a9c <eMBMasterInit+0xb4>)
 8008a22:	2200      	movs	r2, #0
 8008a24:	601a      	str	r2, [r3, #0]
		pxMBMasterFrameCBByteReceived = xMBMasterRTUReceiveFSM;
 8008a26:	4b1e      	ldr	r3, [pc, #120]	; (8008aa0 <eMBMasterInit+0xb8>)
 8008a28:	4a1e      	ldr	r2, [pc, #120]	; (8008aa4 <eMBMasterInit+0xbc>)
 8008a2a:	601a      	str	r2, [r3, #0]
		pxMBMasterFrameCBTransmitterEmpty = xMBMasterRTUTransmitFSM;
 8008a2c:	4b1e      	ldr	r3, [pc, #120]	; (8008aa8 <eMBMasterInit+0xc0>)
 8008a2e:	4a1f      	ldr	r2, [pc, #124]	; (8008aac <eMBMasterInit+0xc4>)
 8008a30:	601a      	str	r2, [r3, #0]
		pxMBMasterPortCBTimerExpired = xMBMasterRTUTimerExpired;
 8008a32:	4b1f      	ldr	r3, [pc, #124]	; (8008ab0 <eMBMasterInit+0xc8>)
 8008a34:	4a1f      	ldr	r2, [pc, #124]	; (8008ab4 <eMBMasterInit+0xcc>)
 8008a36:	601a      	str	r2, [r3, #0]

		eStatus = eMBMasterRTUInit(ucPort, ulBaudRate, eParity);
 8008a38:	797a      	ldrb	r2, [r7, #5]
 8008a3a:	79bb      	ldrb	r3, [r7, #6]
 8008a3c:	6839      	ldr	r1, [r7, #0]
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f001 fdf2 	bl	800a628 <eMBMasterRTUInit>
 8008a44:	4603      	mov	r3, r0
 8008a46:	73fb      	strb	r3, [r7, #15]
		break;
 8008a48:	e002      	b.n	8008a50 <eMBMasterInit+0x68>

		eStatus = eMBMasterASCIIInit(ucPort, ulBaudRate, eParity );
		break;
#endif
	default:
		eStatus = MB_EINVAL;
 8008a4a:	2302      	movs	r3, #2
 8008a4c:	73fb      	strb	r3, [r7, #15]
		break;
 8008a4e:	bf00      	nop
	}

	if (eStatus == MB_ENOERR)
 8008a50:	7bfb      	ldrb	r3, [r7, #15]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d10c      	bne.n	8008a70 <eMBMasterInit+0x88>
	{
		if (!xMBMasterPortEventInit())
 8008a56:	f000 fba5 	bl	80091a4 <xMBMasterPortEventInit>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d102      	bne.n	8008a66 <eMBMasterInit+0x7e>
		{
			/* port dependent event module initalization failed. */
			eStatus = MB_EPORTERR;
 8008a60:	2303      	movs	r3, #3
 8008a62:	73fb      	strb	r3, [r7, #15]
 8008a64:	e002      	b.n	8008a6c <eMBMasterInit+0x84>
		}
		else
		{
			eMBState = STATE_DISABLED;
 8008a66:	4b14      	ldr	r3, [pc, #80]	; (8008ab8 <eMBMasterInit+0xd0>)
 8008a68:	2201      	movs	r2, #1
 8008a6a:	701a      	strb	r2, [r3, #0]
		}
		/* initialize the OS resource for modbus master. */
		vMBMasterOsResInit();
 8008a6c:	f000 fc28 	bl	80092c0 <vMBMasterOsResInit>
	}
	return eStatus;
 8008a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3710      	adds	r7, #16
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}
 8008a7a:	bf00      	nop
 8008a7c:	20004bb0 	.word	0x20004bb0
 8008a80:	0800a699 	.word	0x0800a699
 8008a84:	20004bb4 	.word	0x20004bb4
 8008a88:	0800a6c1 	.word	0x0800a6c1
 8008a8c:	20004bac 	.word	0x20004bac
 8008a90:	0800a771 	.word	0x0800a771
 8008a94:	20004bb8 	.word	0x20004bb8
 8008a98:	0800a6dd 	.word	0x0800a6dd
 8008a9c:	20004bbc 	.word	0x20004bbc
 8008aa0:	2000506c 	.word	0x2000506c
 8008aa4:	0800a845 	.word	0x0800a845
 8008aa8:	20005068 	.word	0x20005068
 8008aac:	0800a939 	.word	0x0800a939
 8008ab0:	20005070 	.word	0x20005070
 8008ab4:	0800aa11 	.word	0x0800aa11
 8008ab8:	20000094 	.word	0x20000094

08008abc <eMBMasterEnable>:
    return eStatus;
}

eMBErrorCode
eMBMasterEnable( void )
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b082      	sub	sp, #8
 8008ac0:	af00      	add	r7, sp, #0
    eMBErrorCode    eStatus = MB_ENOERR;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	71fb      	strb	r3, [r7, #7]

    if( eMBState == STATE_DISABLED )
 8008ac6:	4b09      	ldr	r3, [pc, #36]	; (8008aec <eMBMasterEnable+0x30>)
 8008ac8:	781b      	ldrb	r3, [r3, #0]
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	d106      	bne.n	8008adc <eMBMasterEnable+0x20>
    {
        /* Activate the protocol stack. */
        pvMBMasterFrameStartCur(  );
 8008ace:	4b08      	ldr	r3, [pc, #32]	; (8008af0 <eMBMasterEnable+0x34>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 8008ad4:	4b05      	ldr	r3, [pc, #20]	; (8008aec <eMBMasterEnable+0x30>)
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	701a      	strb	r2, [r3, #0]
 8008ada:	e001      	b.n	8008ae0 <eMBMasterEnable+0x24>
    }
    else
    {
        eStatus = MB_EILLSTATE;
 8008adc:	2306      	movs	r3, #6
 8008ade:	71fb      	strb	r3, [r7, #7]
    }
    return eStatus;
 8008ae0:	79fb      	ldrb	r3, [r7, #7]
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3708      	adds	r7, #8
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}
 8008aea:	bf00      	nop
 8008aec:	20000094 	.word	0x20000094
 8008af0:	20004bb0 	.word	0x20004bb0

08008af4 <eMBMasterPoll>:
}


eMBErrorCode
eMBMasterPoll( void )
{
 8008af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008af6:	b085      	sub	sp, #20
 8008af8:	af00      	add	r7, sp, #0
    static UCHAR    ucFunctionCode;
    static USHORT   usLength;
    static eMBException eException;

    int             i , j;
    eMBErrorCode    eStatus = MB_ENOERR;
 8008afa:	2300      	movs	r3, #0
 8008afc:	71fb      	strb	r3, [r7, #7]
    eMBMasterEventType    eEvent;
    eMBMasterErrorEventType errorType;

    /* Check if the protocol stack is ready. */
    if(( eMBState != STATE_ENABLED ) && ( eMBState != STATE_ESTABLISHED))
 8008afe:	4b9b      	ldr	r3, [pc, #620]	; (8008d6c <eMBMasterPoll+0x278>)
 8008b00:	781b      	ldrb	r3, [r3, #0]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d005      	beq.n	8008b12 <eMBMasterPoll+0x1e>
 8008b06:	4b99      	ldr	r3, [pc, #612]	; (8008d6c <eMBMasterPoll+0x278>)
 8008b08:	781b      	ldrb	r3, [r3, #0]
 8008b0a:	2b03      	cmp	r3, #3
 8008b0c:	d001      	beq.n	8008b12 <eMBMasterPoll+0x1e>
    {
        return MB_EILLSTATE;
 8008b0e:	2306      	movs	r3, #6
 8008b10:	e127      	b.n	8008d62 <eMBMasterPoll+0x26e>
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBMasterPortEventGet( &eEvent ) == TRUE )
 8008b12:	1d3b      	adds	r3, r7, #4
 8008b14:	4618      	mov	r0, r3
 8008b16:	f000 fb81 	bl	800921c <xMBMasterPortEventGet>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	f040 811c 	bne.w	8008d5a <eMBMasterPoll+0x266>
    {
        switch ( eEvent )
 8008b22:	88bb      	ldrh	r3, [r7, #4]
 8008b24:	3b01      	subs	r3, #1
 8008b26:	2b0f      	cmp	r3, #15
 8008b28:	f200 8119 	bhi.w	8008d5e <eMBMasterPoll+0x26a>
 8008b2c:	a201      	add	r2, pc, #4	; (adr r2, 8008b34 <eMBMasterPoll+0x40>)
 8008b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b32:	bf00      	nop
 8008b34:	08008b75 	.word	0x08008b75
 8008b38:	08008b7d 	.word	0x08008b7d
 8008b3c:	08008d5f 	.word	0x08008d5f
 8008b40:	08008bbb 	.word	0x08008bbb
 8008b44:	08008d5f 	.word	0x08008d5f
 8008b48:	08008d5f 	.word	0x08008d5f
 8008b4c:	08008d5f 	.word	0x08008d5f
 8008b50:	08008caf 	.word	0x08008caf
 8008b54:	08008d5f 	.word	0x08008d5f
 8008b58:	08008d5f 	.word	0x08008d5f
 8008b5c:	08008d5f 	.word	0x08008d5f
 8008b60:	08008d5f 	.word	0x08008d5f
 8008b64:	08008d5f 	.word	0x08008d5f
 8008b68:	08008d5f 	.word	0x08008d5f
 8008b6c:	08008d5f 	.word	0x08008d5f
 8008b70:	08008cd9 	.word	0x08008cd9
        {
        case EV_MASTER_READY:
            eMBState = STATE_ESTABLISHED;
 8008b74:	4b7d      	ldr	r3, [pc, #500]	; (8008d6c <eMBMasterPoll+0x278>)
 8008b76:	2203      	movs	r2, #3
 8008b78:	701a      	strb	r2, [r3, #0]
            break;
 8008b7a:	e0f1      	b.n	8008d60 <eMBMasterPoll+0x26c>

        case EV_MASTER_FRAME_RECEIVED:
            eStatus = peMBMasterFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 8008b7c:	4b7c      	ldr	r3, [pc, #496]	; (8008d70 <eMBMasterPoll+0x27c>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4a7c      	ldr	r2, [pc, #496]	; (8008d74 <eMBMasterPoll+0x280>)
 8008b82:	497d      	ldr	r1, [pc, #500]	; (8008d78 <eMBMasterPoll+0x284>)
 8008b84:	487d      	ldr	r0, [pc, #500]	; (8008d7c <eMBMasterPoll+0x288>)
 8008b86:	4798      	blx	r3
 8008b88:	4603      	mov	r3, r0
 8008b8a:	71fb      	strb	r3, [r7, #7]
            /* Check if the frame is for us. If not ,send an error process event. */
            if ( ( eStatus == MB_ENOERR ) && ( ucRcvAddress == ucMBMasterGetDestAddress() ) )
 8008b8c:	79fb      	ldrb	r3, [r7, #7]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d10c      	bne.n	8008bac <eMBMasterPoll+0xb8>
 8008b92:	f000 f90d 	bl	8008db0 <ucMBMasterGetDestAddress>
 8008b96:	4603      	mov	r3, r0
 8008b98:	461a      	mov	r2, r3
 8008b9a:	4b78      	ldr	r3, [pc, #480]	; (8008d7c <eMBMasterPoll+0x288>)
 8008b9c:	781b      	ldrb	r3, [r3, #0]
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	d104      	bne.n	8008bac <eMBMasterPoll+0xb8>
            {
                ( void ) xMBMasterPortEventPost( EV_MASTER_EXECUTE );
 8008ba2:	2004      	movs	r0, #4
 8008ba4:	f000 fb10 	bl	80091c8 <xMBMasterPortEventPost>
 8008ba8:	bf00      	nop
            else
            {
                vMBMasterSetErrorType(EV_ERROR_RECEIVE_DATA);
                ( void ) xMBMasterPortEventPost( EV_MASTER_ERROR_PROCESS );
            }
            break;
 8008baa:	e0d9      	b.n	8008d60 <eMBMasterPoll+0x26c>
                vMBMasterSetErrorType(EV_ERROR_RECEIVE_DATA);
 8008bac:	2001      	movs	r0, #1
 8008bae:	f000 f927 	bl	8008e00 <vMBMasterSetErrorType>
                ( void ) xMBMasterPortEventPost( EV_MASTER_ERROR_PROCESS );
 8008bb2:	2010      	movs	r0, #16
 8008bb4:	f000 fb08 	bl	80091c8 <xMBMasterPortEventPost>
            break;
 8008bb8:	e0d2      	b.n	8008d60 <eMBMasterPoll+0x26c>

        case EV_MASTER_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 8008bba:	4b6f      	ldr	r3, [pc, #444]	; (8008d78 <eMBMasterPoll+0x284>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	781a      	ldrb	r2, [r3, #0]
 8008bc0:	4b6f      	ldr	r3, [pc, #444]	; (8008d80 <eMBMasterPoll+0x28c>)
 8008bc2:	701a      	strb	r2, [r3, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 8008bc4:	4b6f      	ldr	r3, [pc, #444]	; (8008d84 <eMBMasterPoll+0x290>)
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	701a      	strb	r2, [r3, #0]
            /* If receive frame has exception .The receive function code highest bit is 1.*/
            if(ucFunctionCode >> 7) {
 8008bca:	4b6d      	ldr	r3, [pc, #436]	; (8008d80 <eMBMasterPoll+0x28c>)
 8008bcc:	781b      	ldrb	r3, [r3, #0]
 8008bce:	b25b      	sxtb	r3, r3
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	da06      	bge.n	8008be2 <eMBMasterPoll+0xee>
            	eException = (eMBException)ucMBFrame[MB_PDU_DATA_OFF];
 8008bd4:	4b68      	ldr	r3, [pc, #416]	; (8008d78 <eMBMasterPoll+0x284>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	3301      	adds	r3, #1
 8008bda:	781a      	ldrb	r2, [r3, #0]
 8008bdc:	4b69      	ldr	r3, [pc, #420]	; (8008d84 <eMBMasterPoll+0x290>)
 8008bde:	701a      	strb	r2, [r3, #0]
 8008be0:	e055      	b.n	8008c8e <eMBMasterPoll+0x19a>
            }
			else
			{
				for (i = 0; i < MB_FUNC_HANDLERS_MAX; i++)
 8008be2:	2300      	movs	r3, #0
 8008be4:	60fb      	str	r3, [r7, #12]
 8008be6:	e04d      	b.n	8008c84 <eMBMasterPoll+0x190>
				{
					/* No more function handlers registered. Abort. */
					if (xMasterFuncHandlers[i].ucFunctionCode == 0)	{
 8008be8:	4a67      	ldr	r2, [pc, #412]	; (8008d88 <eMBMasterPoll+0x294>)
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d04b      	beq.n	8008c8c <eMBMasterPoll+0x198>
						break;
					}
					else if (xMasterFuncHandlers[i].ucFunctionCode == ucFunctionCode) {
 8008bf4:	4a64      	ldr	r2, [pc, #400]	; (8008d88 <eMBMasterPoll+0x294>)
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8008bfc:	4b60      	ldr	r3, [pc, #384]	; (8008d80 <eMBMasterPoll+0x28c>)
 8008bfe:	781b      	ldrb	r3, [r3, #0]
 8008c00:	429a      	cmp	r2, r3
 8008c02:	d13c      	bne.n	8008c7e <eMBMasterPoll+0x18a>
						vMBMasterSetCBRunInMasterMode(TRUE);
 8008c04:	2001      	movs	r0, #1
 8008c06:	f000 f8c3 	bl	8008d90 <vMBMasterSetCBRunInMasterMode>
						/* If master request is broadcast,
						 * the master need execute function for all slave.
						 */
						if ( xMBMasterRequestIsBroadcast() ) {
 8008c0a:	f001 ffcb 	bl	800aba4 <xMBMasterRequestIsBroadcast>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d022      	beq.n	8008c5a <eMBMasterPoll+0x166>
							usLength = usMBMasterGetPDUSndLength();
 8008c14:	f001 ffba 	bl	800ab8c <usMBMasterGetPDUSndLength>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	461a      	mov	r2, r3
 8008c1c:	4b55      	ldr	r3, [pc, #340]	; (8008d74 <eMBMasterPoll+0x280>)
 8008c1e:	801a      	strh	r2, [r3, #0]
							for(j = 1; j <= MB_MASTER_TOTAL_SLAVE_NUM; j++){
 8008c20:	2301      	movs	r3, #1
 8008c22:	60bb      	str	r3, [r7, #8]
 8008c24:	e015      	b.n	8008c52 <eMBMasterPoll+0x15e>
								vMBMasterSetDestAddress(j);
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	b2db      	uxtb	r3, r3
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f000 f8cc 	bl	8008dc8 <vMBMasterSetDestAddress>
								eException = xMasterFuncHandlers[i].pxHandler(ucMBFrame, &usLength);
 8008c30:	4a55      	ldr	r2, [pc, #340]	; (8008d88 <eMBMasterPoll+0x294>)
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	00db      	lsls	r3, r3, #3
 8008c36:	4413      	add	r3, r2
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	4a4f      	ldr	r2, [pc, #316]	; (8008d78 <eMBMasterPoll+0x284>)
 8008c3c:	6812      	ldr	r2, [r2, #0]
 8008c3e:	494d      	ldr	r1, [pc, #308]	; (8008d74 <eMBMasterPoll+0x280>)
 8008c40:	4610      	mov	r0, r2
 8008c42:	4798      	blx	r3
 8008c44:	4603      	mov	r3, r0
 8008c46:	461a      	mov	r2, r3
 8008c48:	4b4e      	ldr	r3, [pc, #312]	; (8008d84 <eMBMasterPoll+0x290>)
 8008c4a:	701a      	strb	r2, [r3, #0]
							for(j = 1; j <= MB_MASTER_TOTAL_SLAVE_NUM; j++){
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	3301      	adds	r3, #1
 8008c50:	60bb      	str	r3, [r7, #8]
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	2b10      	cmp	r3, #16
 8008c56:	dde6      	ble.n	8008c26 <eMBMasterPoll+0x132>
 8008c58:	e00d      	b.n	8008c76 <eMBMasterPoll+0x182>
							}
						}
						else {
							eException = xMasterFuncHandlers[i].pxHandler(ucMBFrame, &usLength);
 8008c5a:	4a4b      	ldr	r2, [pc, #300]	; (8008d88 <eMBMasterPoll+0x294>)
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	00db      	lsls	r3, r3, #3
 8008c60:	4413      	add	r3, r2
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	4a44      	ldr	r2, [pc, #272]	; (8008d78 <eMBMasterPoll+0x284>)
 8008c66:	6812      	ldr	r2, [r2, #0]
 8008c68:	4942      	ldr	r1, [pc, #264]	; (8008d74 <eMBMasterPoll+0x280>)
 8008c6a:	4610      	mov	r0, r2
 8008c6c:	4798      	blx	r3
 8008c6e:	4603      	mov	r3, r0
 8008c70:	461a      	mov	r2, r3
 8008c72:	4b44      	ldr	r3, [pc, #272]	; (8008d84 <eMBMasterPoll+0x290>)
 8008c74:	701a      	strb	r2, [r3, #0]
						}
						vMBMasterSetCBRunInMasterMode(FALSE);
 8008c76:	2000      	movs	r0, #0
 8008c78:	f000 f88a 	bl	8008d90 <vMBMasterSetCBRunInMasterMode>
						break;
 8008c7c:	e007      	b.n	8008c8e <eMBMasterPoll+0x19a>
				for (i = 0; i < MB_FUNC_HANDLERS_MAX; i++)
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	3301      	adds	r3, #1
 8008c82:	60fb      	str	r3, [r7, #12]
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2b0f      	cmp	r3, #15
 8008c88:	ddae      	ble.n	8008be8 <eMBMasterPoll+0xf4>
 8008c8a:	e000      	b.n	8008c8e <eMBMasterPoll+0x19a>
						break;
 8008c8c:	bf00      	nop
					}
				}
			}
            /* If master has exception ,Master will send error process.Otherwise the Master is idle.*/
            if (eException != MB_EX_NONE) {
 8008c8e:	4b3d      	ldr	r3, [pc, #244]	; (8008d84 <eMBMasterPoll+0x290>)
 8008c90:	781b      	ldrb	r3, [r3, #0]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d006      	beq.n	8008ca4 <eMBMasterPoll+0x1b0>
            	vMBMasterSetErrorType(EV_ERROR_EXECUTE_FUNCTION);
 8008c96:	2002      	movs	r0, #2
 8008c98:	f000 f8b2 	bl	8008e00 <vMBMasterSetErrorType>
            	( void ) xMBMasterPortEventPost( EV_MASTER_ERROR_PROCESS );
 8008c9c:	2010      	movs	r0, #16
 8008c9e:	f000 fa93 	bl	80091c8 <xMBMasterPortEventPost>
            }
            else {
            	vMBMasterCBRequestScuuess( );	//post event to request function that is being called
            	vMBMasterRunResRelease( );
            }
            break;
 8008ca2:	e05d      	b.n	8008d60 <eMBMasterPoll+0x26c>
            	vMBMasterCBRequestScuuess( );	//post event to request function that is being called
 8008ca4:	f000 fb8a 	bl	80093bc <vMBMasterCBRequestScuuess>
            	vMBMasterRunResRelease( );
 8008ca8:	f000 fb3c 	bl	8009324 <vMBMasterRunResRelease>
            break;
 8008cac:	e058      	b.n	8008d60 <eMBMasterPoll+0x26c>

        case EV_MASTER_FRAME_SENT:
        	/* Master is busy now. */
        	vMBMasterGetPDUSndBuf( &ucMBFrame );
 8008cae:	4832      	ldr	r0, [pc, #200]	; (8008d78 <eMBMasterPoll+0x284>)
 8008cb0:	f001 ff4c 	bl	800ab4c <vMBMasterGetPDUSndBuf>
			eStatus = peMBMasterFrameSendCur( ucMBMasterGetDestAddress(), ucMBFrame, usMBMasterGetPDUSndLength() );
 8008cb4:	4b35      	ldr	r3, [pc, #212]	; (8008d8c <eMBMasterPoll+0x298>)
 8008cb6:	681c      	ldr	r4, [r3, #0]
 8008cb8:	f000 f87a 	bl	8008db0 <ucMBMasterGetDestAddress>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	461e      	mov	r6, r3
 8008cc0:	4b2d      	ldr	r3, [pc, #180]	; (8008d78 <eMBMasterPoll+0x284>)
 8008cc2:	681d      	ldr	r5, [r3, #0]
 8008cc4:	f001 ff62 	bl	800ab8c <usMBMasterGetPDUSndLength>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	461a      	mov	r2, r3
 8008ccc:	4629      	mov	r1, r5
 8008cce:	4630      	mov	r0, r6
 8008cd0:	47a0      	blx	r4
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	71fb      	strb	r3, [r7, #7]
            break;
 8008cd6:	e043      	b.n	8008d60 <eMBMasterPoll+0x26c>

        case EV_MASTER_ERROR_PROCESS:
        	/* Execute specified error process callback function. */
			errorType = eMBMasterGetErrorType();
 8008cd8:	f000 f886 	bl	8008de8 <eMBMasterGetErrorType>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	71bb      	strb	r3, [r7, #6]
			vMBMasterGetPDUSndBuf( &ucMBFrame );
 8008ce0:	4825      	ldr	r0, [pc, #148]	; (8008d78 <eMBMasterPoll+0x284>)
 8008ce2:	f001 ff33 	bl	800ab4c <vMBMasterGetPDUSndBuf>
			switch (errorType) {
 8008ce6:	79bb      	ldrb	r3, [r7, #6]
 8008ce8:	2b02      	cmp	r3, #2
 8008cea:	d024      	beq.n	8008d36 <eMBMasterPoll+0x242>
 8008cec:	2b02      	cmp	r3, #2
 8008cee:	dc31      	bgt.n	8008d54 <eMBMasterPoll+0x260>
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d002      	beq.n	8008cfa <eMBMasterPoll+0x206>
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	d00f      	beq.n	8008d18 <eMBMasterPoll+0x224>
 8008cf8:	e02c      	b.n	8008d54 <eMBMasterPoll+0x260>
			case EV_ERROR_RESPOND_TIMEOUT:
				vMBMasterErrorCBRespondTimeout(ucMBMasterGetDestAddress(),
 8008cfa:	f000 f859 	bl	8008db0 <ucMBMasterGetDestAddress>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	461d      	mov	r5, r3
 8008d02:	4b1d      	ldr	r3, [pc, #116]	; (8008d78 <eMBMasterPoll+0x284>)
 8008d04:	681c      	ldr	r4, [r3, #0]
 8008d06:	f001 ff41 	bl	800ab8c <usMBMasterGetPDUSndLength>
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	461a      	mov	r2, r3
 8008d0e:	4621      	mov	r1, r4
 8008d10:	4628      	mov	r0, r5
 8008d12:	f000 fb15 	bl	8009340 <vMBMasterErrorCBRespondTimeout>
						ucMBFrame, usMBMasterGetPDUSndLength());
				break;
 8008d16:	e01d      	b.n	8008d54 <eMBMasterPoll+0x260>
			case EV_ERROR_RECEIVE_DATA:
				vMBMasterErrorCBReceiveData(ucMBMasterGetDestAddress(),
 8008d18:	f000 f84a 	bl	8008db0 <ucMBMasterGetDestAddress>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	461d      	mov	r5, r3
 8008d20:	4b15      	ldr	r3, [pc, #84]	; (8008d78 <eMBMasterPoll+0x284>)
 8008d22:	681c      	ldr	r4, [r3, #0]
 8008d24:	f001 ff32 	bl	800ab8c <usMBMasterGetPDUSndLength>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	461a      	mov	r2, r3
 8008d2c:	4621      	mov	r1, r4
 8008d2e:	4628      	mov	r0, r5
 8008d30:	f000 fb1a 	bl	8009368 <vMBMasterErrorCBReceiveData>
						ucMBFrame, usMBMasterGetPDUSndLength());
				break;
 8008d34:	e00e      	b.n	8008d54 <eMBMasterPoll+0x260>
			case EV_ERROR_EXECUTE_FUNCTION:
				vMBMasterErrorCBExecuteFunction(ucMBMasterGetDestAddress(),
 8008d36:	f000 f83b 	bl	8008db0 <ucMBMasterGetDestAddress>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	461d      	mov	r5, r3
 8008d3e:	4b0e      	ldr	r3, [pc, #56]	; (8008d78 <eMBMasterPoll+0x284>)
 8008d40:	681c      	ldr	r4, [r3, #0]
 8008d42:	f001 ff23 	bl	800ab8c <usMBMasterGetPDUSndLength>
 8008d46:	4603      	mov	r3, r0
 8008d48:	461a      	mov	r2, r3
 8008d4a:	4621      	mov	r1, r4
 8008d4c:	4628      	mov	r0, r5
 8008d4e:	f000 fb1f 	bl	8009390 <vMBMasterErrorCBExecuteFunction>
						ucMBFrame, usMBMasterGetPDUSndLength());
				break;
 8008d52:	bf00      	nop
			}
			vMBMasterRunResRelease();
 8008d54:	f000 fae6 	bl	8009324 <vMBMasterRunResRelease>
        	break;
 8008d58:	e002      	b.n	8008d60 <eMBMasterPoll+0x26c>
            
        default:
            break;
        }

    }
 8008d5a:	bf00      	nop
 8008d5c:	e000      	b.n	8008d60 <eMBMasterPoll+0x26c>
            break;
 8008d5e:	bf00      	nop
    //return MB_ENOERR;
    return eStatus;
 8008d60:	79fb      	ldrb	r3, [r7, #7]
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3714      	adds	r7, #20
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d6a:	bf00      	nop
 8008d6c:	20000094 	.word	0x20000094
 8008d70:	20004bb8 	.word	0x20004bb8
 8008d74:	20004bc8 	.word	0x20004bc8
 8008d78:	20004bc4 	.word	0x20004bc4
 8008d7c:	20004bc0 	.word	0x20004bc0
 8008d80:	20004bca 	.word	0x20004bca
 8008d84:	20004bcb 	.word	0x20004bcb
 8008d88:	20000098 	.word	0x20000098
 8008d8c:	20004bac 	.word	0x20004bac

08008d90 <vMBMasterSetCBRunInMasterMode>:
{
	return xMBRunInMasterMode;
}
/* Set whether the Modbus Master is run in master mode.*/
void vMBMasterSetCBRunInMasterMode( BOOL IsMasterMode )
{
 8008d90:	b480      	push	{r7}
 8008d92:	b083      	sub	sp, #12
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	4603      	mov	r3, r0
 8008d98:	71fb      	strb	r3, [r7, #7]
	xMBRunInMasterMode = IsMasterMode;
 8008d9a:	4a04      	ldr	r2, [pc, #16]	; (8008dac <vMBMasterSetCBRunInMasterMode+0x1c>)
 8008d9c:	79fb      	ldrb	r3, [r7, #7]
 8008d9e:	7013      	strb	r3, [r2, #0]
}
 8008da0:	bf00      	nop
 8008da2:	370c      	adds	r7, #12
 8008da4:	46bd      	mov	sp, r7
 8008da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008daa:	4770      	bx	lr
 8008dac:	20004ba9 	.word	0x20004ba9

08008db0 <ucMBMasterGetDestAddress>:
/* Get Modbus Master send destination address. */
UCHAR ucMBMasterGetDestAddress( void )
{
 8008db0:	b480      	push	{r7}
 8008db2:	af00      	add	r7, sp, #0
	return ucMBMasterDestAddress;
 8008db4:	4b03      	ldr	r3, [pc, #12]	; (8008dc4 <ucMBMasterGetDestAddress+0x14>)
 8008db6:	781b      	ldrb	r3, [r3, #0]
 }
 8008db8:	4618      	mov	r0, r3
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc0:	4770      	bx	lr
 8008dc2:	bf00      	nop
 8008dc4:	20004ba8 	.word	0x20004ba8

08008dc8 <vMBMasterSetDestAddress>:
/* Set Modbus Master send destination address. */
void vMBMasterSetDestAddress( UCHAR Address )
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b083      	sub	sp, #12
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	4603      	mov	r3, r0
 8008dd0:	71fb      	strb	r3, [r7, #7]
	ucMBMasterDestAddress = Address;
 8008dd2:	4a04      	ldr	r2, [pc, #16]	; (8008de4 <vMBMasterSetDestAddress+0x1c>)
 8008dd4:	79fb      	ldrb	r3, [r7, #7]
 8008dd6:	7013      	strb	r3, [r2, #0]
}
 8008dd8:	bf00      	nop
 8008dda:	370c      	adds	r7, #12
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr
 8008de4:	20004ba8 	.word	0x20004ba8

08008de8 <eMBMasterGetErrorType>:
/* Get Modbus Master current error event type. */
eMBMasterErrorEventType eMBMasterGetErrorType( void )
{
 8008de8:	b480      	push	{r7}
 8008dea:	af00      	add	r7, sp, #0
	return eMBMasterCurErrorType;
 8008dec:	4b03      	ldr	r3, [pc, #12]	; (8008dfc <eMBMasterGetErrorType+0x14>)
 8008dee:	781b      	ldrb	r3, [r3, #0]
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	46bd      	mov	sp, r7
 8008df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df8:	4770      	bx	lr
 8008dfa:	bf00      	nop
 8008dfc:	20004baa 	.word	0x20004baa

08008e00 <vMBMasterSetErrorType>:
/* Set Modbus Master current error event type. */
void vMBMasterSetErrorType( eMBMasterErrorEventType errorType )
{
 8008e00:	b480      	push	{r7}
 8008e02:	b083      	sub	sp, #12
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	4603      	mov	r3, r0
 8008e08:	71fb      	strb	r3, [r7, #7]
	eMBMasterCurErrorType = errorType;
 8008e0a:	4a04      	ldr	r2, [pc, #16]	; (8008e1c <vMBMasterSetErrorType+0x1c>)
 8008e0c:	79fb      	ldrb	r3, [r7, #7]
 8008e0e:	7013      	strb	r3, [r2, #0]
}
 8008e10:	bf00      	nop
 8008e12:	370c      	adds	r7, #12
 8008e14:	46bd      	mov	sp, r7
 8008e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1a:	4770      	bx	lr
 8008e1c:	20004baa 	.word	0x20004baa

08008e20 <vInitMBTask>:
TaskHandle_t SlavePollHandle = NULL;
TaskHandle_t LedTaskHandle = NULL;



void vInitMBTask(void){
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b088      	sub	sp, #32
 8008e24:	af02      	add	r7, sp, #8
	BaseType_t status;

#if MB_MASTER_RTU_ENABLED
	status = xTaskCreate(mastermonitor_task, "master monitor task", 600, NULL, 2, &MasterMonitorHandle);
 8008e26:	4b39      	ldr	r3, [pc, #228]	; (8008f0c <vInitMBTask+0xec>)
 8008e28:	9301      	str	r3, [sp, #4]
 8008e2a:	2302      	movs	r3, #2
 8008e2c:	9300      	str	r3, [sp, #0]
 8008e2e:	2300      	movs	r3, #0
 8008e30:	f44f 7216 	mov.w	r2, #600	; 0x258
 8008e34:	4936      	ldr	r1, [pc, #216]	; (8008f10 <vInitMBTask+0xf0>)
 8008e36:	4837      	ldr	r0, [pc, #220]	; (8008f14 <vInitMBTask+0xf4>)
 8008e38:	f7fc fb09 	bl	800544e <xTaskCreate>
 8008e3c:	6178      	str	r0, [r7, #20]
	configASSERT(status == pdPASS);
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	d00c      	beq.n	8008e5e <vInitMBTask+0x3e>
	__asm volatile
 8008e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e48:	b672      	cpsid	i
 8008e4a:	f383 8811 	msr	BASEPRI, r3
 8008e4e:	f3bf 8f6f 	isb	sy
 8008e52:	f3bf 8f4f 	dsb	sy
 8008e56:	b662      	cpsie	i
 8008e58:	613b      	str	r3, [r7, #16]
}
 8008e5a:	bf00      	nop
 8008e5c:	e7fe      	b.n	8008e5c <vInitMBTask+0x3c>

	status = xTaskCreate(masterpoll_task, "master poll task", 600, NULL, 3, &MasterPollHandle);
 8008e5e:	4b2e      	ldr	r3, [pc, #184]	; (8008f18 <vInitMBTask+0xf8>)
 8008e60:	9301      	str	r3, [sp, #4]
 8008e62:	2303      	movs	r3, #3
 8008e64:	9300      	str	r3, [sp, #0]
 8008e66:	2300      	movs	r3, #0
 8008e68:	f44f 7216 	mov.w	r2, #600	; 0x258
 8008e6c:	492b      	ldr	r1, [pc, #172]	; (8008f1c <vInitMBTask+0xfc>)
 8008e6e:	482c      	ldr	r0, [pc, #176]	; (8008f20 <vInitMBTask+0x100>)
 8008e70:	f7fc faed 	bl	800544e <xTaskCreate>
 8008e74:	6178      	str	r0, [r7, #20]
	configASSERT(status == pdPASS);
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	2b01      	cmp	r3, #1
 8008e7a:	d00c      	beq.n	8008e96 <vInitMBTask+0x76>
	__asm volatile
 8008e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e80:	b672      	cpsid	i
 8008e82:	f383 8811 	msr	BASEPRI, r3
 8008e86:	f3bf 8f6f 	isb	sy
 8008e8a:	f3bf 8f4f 	dsb	sy
 8008e8e:	b662      	cpsie	i
 8008e90:	60fb      	str	r3, [r7, #12]
}
 8008e92:	bf00      	nop
 8008e94:	e7fe      	b.n	8008e94 <vInitMBTask+0x74>
#endif

#if MB_SLAVE_RTU_ENABLED

	status = xTaskCreate(slavepoll_task, "slave poll task", 600, NULL, 2, &SlavePollHandle);
 8008e96:	4b23      	ldr	r3, [pc, #140]	; (8008f24 <vInitMBTask+0x104>)
 8008e98:	9301      	str	r3, [sp, #4]
 8008e9a:	2302      	movs	r3, #2
 8008e9c:	9300      	str	r3, [sp, #0]
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	f44f 7216 	mov.w	r2, #600	; 0x258
 8008ea4:	4920      	ldr	r1, [pc, #128]	; (8008f28 <vInitMBTask+0x108>)
 8008ea6:	4821      	ldr	r0, [pc, #132]	; (8008f2c <vInitMBTask+0x10c>)
 8008ea8:	f7fc fad1 	bl	800544e <xTaskCreate>
 8008eac:	6178      	str	r0, [r7, #20]
	configASSERT(status == pdPASS);
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	2b01      	cmp	r3, #1
 8008eb2:	d00c      	beq.n	8008ece <vInitMBTask+0xae>
	__asm volatile
 8008eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb8:	b672      	cpsid	i
 8008eba:	f383 8811 	msr	BASEPRI, r3
 8008ebe:	f3bf 8f6f 	isb	sy
 8008ec2:	f3bf 8f4f 	dsb	sy
 8008ec6:	b662      	cpsie	i
 8008ec8:	60bb      	str	r3, [r7, #8]
}
 8008eca:	bf00      	nop
 8008ecc:	e7fe      	b.n	8008ecc <vInitMBTask+0xac>

#endif

	status = xTaskCreate(led_task, "LED task", 200, NULL, 2, &LedTaskHandle);
 8008ece:	4b18      	ldr	r3, [pc, #96]	; (8008f30 <vInitMBTask+0x110>)
 8008ed0:	9301      	str	r3, [sp, #4]
 8008ed2:	2302      	movs	r3, #2
 8008ed4:	9300      	str	r3, [sp, #0]
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	22c8      	movs	r2, #200	; 0xc8
 8008eda:	4916      	ldr	r1, [pc, #88]	; (8008f34 <vInitMBTask+0x114>)
 8008edc:	4816      	ldr	r0, [pc, #88]	; (8008f38 <vInitMBTask+0x118>)
 8008ede:	f7fc fab6 	bl	800544e <xTaskCreate>
 8008ee2:	6178      	str	r0, [r7, #20]
	configASSERT(status == pdPASS);
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	2b01      	cmp	r3, #1
 8008ee8:	d00c      	beq.n	8008f04 <vInitMBTask+0xe4>
	__asm volatile
 8008eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eee:	b672      	cpsid	i
 8008ef0:	f383 8811 	msr	BASEPRI, r3
 8008ef4:	f3bf 8f6f 	isb	sy
 8008ef8:	f3bf 8f4f 	dsb	sy
 8008efc:	b662      	cpsie	i
 8008efe:	607b      	str	r3, [r7, #4]
}
 8008f00:	bf00      	nop
 8008f02:	e7fe      	b.n	8008f02 <vInitMBTask+0xe2>

//	vTaskStartScheduler();

}
 8008f04:	bf00      	nop
 8008f06:	3718      	adds	r7, #24
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}
 8008f0c:	20004bcc 	.word	0x20004bcc
 8008f10:	0800bd00 	.word	0x0800bd00
 8008f14:	08008f3d 	.word	0x08008f3d
 8008f18:	20004bd0 	.word	0x20004bd0
 8008f1c:	0800bd14 	.word	0x0800bd14
 8008f20:	08008fbd 	.word	0x08008fbd
 8008f24:	20004bd4 	.word	0x20004bd4
 8008f28:	0800bd28 	.word	0x0800bd28
 8008f2c:	08008fe5 	.word	0x08008fe5
 8008f30:	20004bd8 	.word	0x20004bd8
 8008f34:	0800bd38 	.word	0x0800bd38
 8008f38:	08009055 	.word	0x08009055

08008f3c <mastermonitor_task>:

void mastermonitor_task(void*p){
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b086      	sub	sp, #24
 8008f40:	af02      	add	r7, sp, #8
 8008f42:	6078      	str	r0, [r7, #4]

    eMBMasterReqErrCode    errorCode = MB_MRE_NO_ERR;
 8008f44:	2300      	movs	r3, #0
 8008f46:	737b      	strb	r3, [r7, #13]
    uint16_t errorCount = 0;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	81fb      	strh	r3, [r7, #14]

    usModbusUserData[0] = 0x1111;
 8008f4c:	4b1a      	ldr	r3, [pc, #104]	; (8008fb8 <mastermonitor_task+0x7c>)
 8008f4e:	f241 1211 	movw	r2, #4369	; 0x1111
 8008f52:	801a      	strh	r2, [r3, #0]
    usModbusUserData[1] = 0x2222;
 8008f54:	4b18      	ldr	r3, [pc, #96]	; (8008fb8 <mastermonitor_task+0x7c>)
 8008f56:	f242 2222 	movw	r2, #8738	; 0x2222
 8008f5a:	805a      	strh	r2, [r3, #2]
    usModbusUserData[2] = 0x2333;
 8008f5c:	4b16      	ldr	r3, [pc, #88]	; (8008fb8 <mastermonitor_task+0x7c>)
 8008f5e:	f242 3233 	movw	r2, #9011	; 0x2333
 8008f62:	809a      	strh	r2, [r3, #4]
    usModbusUserData[3] = 0x3333;
 8008f64:	4b14      	ldr	r3, [pc, #80]	; (8008fb8 <mastermonitor_task+0x7c>)
 8008f66:	f243 3233 	movw	r2, #13107	; 0x3333
 8008f6a:	80da      	strh	r2, [r3, #6]
	{

				//errorCode = eMBMasterReqReadDiscreteInputs(1,0,8,portMAX_DELAY);
		//      errorCode = eMBMasterReqWriteMultipleCoils(1,3,5,ucModbusUserData,portMAX_DELAY);

		        errorCode = eMBMasterReqWriteCoil(1,8,0xFF00, portMAX_DELAY);
 8008f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8008f70:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8008f74:	2108      	movs	r1, #8
 8008f76:	2001      	movs	r0, #1
 8008f78:	f7fe fc4c 	bl	8007814 <eMBMasterReqWriteCoil>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	737b      	strb	r3, [r7, #13]

				//errorCode = eMBMasterReqReadCoils(1,0,8,portMAX_DELAY);
		     	errorCode = eMBMasterReqReadInputRegister(1,0,8,portMAX_DELAY);
 8008f80:	f04f 33ff 	mov.w	r3, #4294967295
 8008f84:	2208      	movs	r2, #8
 8008f86:	2100      	movs	r1, #0
 8008f88:	2001      	movs	r0, #1
 8008f8a:	f7ff fa41 	bl	8008410 <eMBMasterReqReadInputRegister>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	737b      	strb	r3, [r7, #13]

		     	//errorCode = eMBMasterReqWriteHoldingRegister(1,0,ucModbusUserData[3],portMAX_DELAY);

		     	errorCode = eMBMasterReqWriteMultipleHoldingRegister(1,0,4,usModbusUserData,portMAX_DELAY);
 8008f92:	f04f 33ff 	mov.w	r3, #4294967295
 8008f96:	9300      	str	r3, [sp, #0]
 8008f98:	4b07      	ldr	r3, [pc, #28]	; (8008fb8 <mastermonitor_task+0x7c>)
 8008f9a:	2204      	movs	r2, #4
 8008f9c:	2100      	movs	r1, #0
 8008f9e:	2001      	movs	r0, #1
 8008fa0:	f7ff f813 	bl	8007fca <eMBMasterReqWriteMultipleHoldingRegister>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	737b      	strb	r3, [r7, #13]
		     	//errorCode = eMBMasterReqReadHoldingRegister(1,3,2,portMAX_DELAY);
		//      errorCode = eMBMasterReqReadWriteMultipleHoldingRegister(1,3,2,usModbusUserData,5,2,portMAX_DELAY);


        if (errorCode != MB_MRE_NO_ERR) {
 8008fa8:	7b7b      	ldrb	r3, [r7, #13]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d0de      	beq.n	8008f6c <mastermonitor_task+0x30>
            errorCount++;
 8008fae:	89fb      	ldrh	r3, [r7, #14]
 8008fb0:	3301      	adds	r3, #1
 8008fb2:	81fb      	strh	r3, [r7, #14]
		        errorCode = eMBMasterReqWriteCoil(1,8,0xFF00, portMAX_DELAY);
 8008fb4:	e7da      	b.n	8008f6c <mastermonitor_task+0x30>
 8008fb6:	bf00      	nop
 8008fb8:	20005080 	.word	0x20005080

08008fbc <masterpoll_task>:
	}


}

void masterpoll_task(void*p){
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b082      	sub	sp, #8
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]

    eMBMasterInit(MB_RTU, 2, 115200,  MB_PAR_EVEN);
 8008fc4:	2302      	movs	r3, #2
 8008fc6:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008fca:	2102      	movs	r1, #2
 8008fcc:	2000      	movs	r0, #0
 8008fce:	f7ff fd0b 	bl	80089e8 <eMBMasterInit>
    eMBMasterEnable();
 8008fd2:	f7ff fd73 	bl	8008abc <eMBMasterEnable>
    HAL_Delay(10);// delay for startup master modbus
 8008fd6:	200a      	movs	r0, #10
 8008fd8:	f7f8 f85c 	bl	8001094 <HAL_Delay>

	while(1)
	{
		eMBMasterPoll();
 8008fdc:	f7ff fd8a 	bl	8008af4 <eMBMasterPoll>
 8008fe0:	e7fc      	b.n	8008fdc <masterpoll_task+0x20>
	...

08008fe4 <slavepoll_task>:
	}

}

void slavepoll_task(void*p){
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b084      	sub	sp, #16
 8008fe8:	af02      	add	r7, sp, #8
 8008fea:	6078      	str	r0, [r7, #4]

	  usSRegInBuf[0] = 0x11;
 8008fec:	4b15      	ldr	r3, [pc, #84]	; (8009044 <slavepoll_task+0x60>)
 8008fee:	2211      	movs	r2, #17
 8008ff0:	801a      	strh	r2, [r3, #0]
	  usSRegInBuf[1] = 0x22;
 8008ff2:	4b14      	ldr	r3, [pc, #80]	; (8009044 <slavepoll_task+0x60>)
 8008ff4:	2222      	movs	r2, #34	; 0x22
 8008ff6:	805a      	strh	r2, [r3, #2]
	  usSRegInBuf[2] = 0x33;
 8008ff8:	4b12      	ldr	r3, [pc, #72]	; (8009044 <slavepoll_task+0x60>)
 8008ffa:	2233      	movs	r2, #51	; 0x33
 8008ffc:	809a      	strh	r2, [r3, #4]
	  usSRegInBuf[3] = 0x44;
 8008ffe:	4b11      	ldr	r3, [pc, #68]	; (8009044 <slavepoll_task+0x60>)
 8009000:	2244      	movs	r2, #68	; 0x44
 8009002:	80da      	strh	r2, [r3, #6]
	  usSRegHoldBuf[0] = 0x1111;
 8009004:	4b10      	ldr	r3, [pc, #64]	; (8009048 <slavepoll_task+0x64>)
 8009006:	f241 1211 	movw	r2, #4369	; 0x1111
 800900a:	801a      	strh	r2, [r3, #0]
	  usSRegHoldBuf[1] = 0x2222;
 800900c:	4b0e      	ldr	r3, [pc, #56]	; (8009048 <slavepoll_task+0x64>)
 800900e:	f242 2222 	movw	r2, #8738	; 0x2222
 8009012:	805a      	strh	r2, [r3, #2]
	  ucSDiscInBuf[0] = 0xAA;
 8009014:	4b0d      	ldr	r3, [pc, #52]	; (800904c <slavepoll_task+0x68>)
 8009016:	22aa      	movs	r2, #170	; 0xaa
 8009018:	701a      	strb	r2, [r3, #0]
	  ucSCoilBuf[0] = 0xf1;
 800901a:	4b0d      	ldr	r3, [pc, #52]	; (8009050 <slavepoll_task+0x6c>)
 800901c:	22f1      	movs	r2, #241	; 0xf1
 800901e:	701a      	strb	r2, [r3, #0]
	eMBInit(MB_RTU, 1, 9, 115200, MB_PAR_NONE);
 8009020:	2300      	movs	r3, #0
 8009022:	9300      	str	r3, [sp, #0]
 8009024:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8009028:	2209      	movs	r2, #9
 800902a:	2101      	movs	r1, #1
 800902c:	2000      	movs	r0, #0
 800902e:	f7ff fb7d 	bl	800872c <eMBInit>
	eMBEnable();
 8009032:	f7ff fbf7 	bl	8008824 <eMBEnable>
	HAL_Delay(2);
 8009036:	2002      	movs	r0, #2
 8009038:	f7f8 f82c 	bl	8001094 <HAL_Delay>
	while(1){
		eMBPoll();
 800903c:	f7ff fc0e 	bl	800885c <eMBPoll>
 8009040:	e7fc      	b.n	800903c <slavepoll_task+0x58>
 8009042:	bf00      	nop
 8009044:	200050bc 	.word	0x200050bc
 8009048:	2000509c 	.word	0x2000509c
 800904c:	20005098 	.word	0x20005098
 8009050:	20005094 	.word	0x20005094

08009054 <led_task>:
	}

}

void led_task(void*p){
 8009054:	b580      	push	{r7, lr}
 8009056:	b082      	sub	sp, #8
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]

	while(1){
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800905c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009060:	4803      	ldr	r0, [pc, #12]	; (8009070 <led_task+0x1c>)
 8009062:	f7f8 fb74 	bl	800174e <HAL_GPIO_TogglePin>
		//HAL_GPIO_WritePin(GreenLed_GPIO_Port, GreenLed_Pin, GPIO_PIN_SET);
		vTaskDelay(500);
 8009066:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800906a:	f7fc fb4d 	bl	8005708 <vTaskDelay>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800906e:	e7f5      	b.n	800905c <led_task+0x8>
 8009070:	40020400 	.word	0x40020400

08009074 <EnterCriticalSection>:

/* ----------------------- Variables ----------------------------------------*/

/* ----------------------- Start implementation -----------------------------*/
void EnterCriticalSection(void)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	af00      	add	r7, sp, #0
    taskENTER_CRITICAL();
 8009078:	f7fd ff18 	bl	8006eac <vPortEnterCritical>
}
 800907c:	bf00      	nop
 800907e:	bd80      	pop	{r7, pc}

08009080 <ExitCriticalSection>:

void ExitCriticalSection(void)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	af00      	add	r7, sp, #0
    taskEXIT_CRITICAL();
 8009084:	f7fd ff46 	bl	8006f14 <vPortExitCritical>
}
 8009088:	bf00      	nop
 800908a:	bd80      	pop	{r7, pc}

0800908c <xMBPortEventInit>:


/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortEventInit( void )
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b082      	sub	sp, #8
 8009090:	af00      	add	r7, sp, #0
	xSlaveOsEvent = xEventGroupCreate();
 8009092:	f7fb f88b 	bl	80041ac <xEventGroupCreate>
 8009096:	4603      	mov	r3, r0
 8009098:	4a0b      	ldr	r2, [pc, #44]	; (80090c8 <xMBPortEventInit+0x3c>)
 800909a:	6013      	str	r3, [r2, #0]

	configASSERT(xSlaveOsEvent != NULL);
 800909c:	4b0a      	ldr	r3, [pc, #40]	; (80090c8 <xMBPortEventInit+0x3c>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d10c      	bne.n	80090be <xMBPortEventInit+0x32>
	__asm volatile
 80090a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a8:	b672      	cpsid	i
 80090aa:	f383 8811 	msr	BASEPRI, r3
 80090ae:	f3bf 8f6f 	isb	sy
 80090b2:	f3bf 8f4f 	dsb	sy
 80090b6:	b662      	cpsie	i
 80090b8:	607b      	str	r3, [r7, #4]
}
 80090ba:	bf00      	nop
 80090bc:	e7fe      	b.n	80090bc <xMBPortEventInit+0x30>

    return TRUE;
 80090be:	2301      	movs	r3, #1
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	3708      	adds	r7, #8
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}
 80090c8:	20004bdc 	.word	0x20004bdc

080090cc <xMBPortEventPost>:

BOOL
xMBPortEventPost( eMBEventType eEvent )
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b082      	sub	sp, #8
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	4603      	mov	r3, r0
 80090d4:	71fb      	strb	r3, [r7, #7]
	xEventGroupSetBits(xSlaveOsEvent, eEvent);
 80090d6:	4b06      	ldr	r3, [pc, #24]	; (80090f0 <xMBPortEventPost+0x24>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	79fa      	ldrb	r2, [r7, #7]
 80090dc:	4611      	mov	r1, r2
 80090de:	4618      	mov	r0, r3
 80090e0:	f7fb f954 	bl	800438c <xEventGroupSetBits>
    return TRUE;
 80090e4:	2301      	movs	r3, #1
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3708      	adds	r7, #8
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
 80090ee:	bf00      	nop
 80090f0:	20004bdc 	.word	0x20004bdc

080090f4 <xMBPortEventPostFromISR>:

BOOL
xMBPortEventPostFromISR( eMBEventType eEvent )
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b084      	sub	sp, #16
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	4603      	mov	r3, r0
 80090fc:	71fb      	strb	r3, [r7, #7]
	BaseType_t xresult = pdFAIL;
 80090fe:	2300      	movs	r3, #0
 8009100:	60fb      	str	r3, [r7, #12]
	xresult = xEventGroupSetBitsFromISR(xSlaveOsEvent, eEvent, NULL);
 8009102:	4b08      	ldr	r3, [pc, #32]	; (8009124 <xMBPortEventPostFromISR+0x30>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	79f9      	ldrb	r1, [r7, #7]
 8009108:	2200      	movs	r2, #0
 800910a:	4618      	mov	r0, r3
 800910c:	f7fb f9fc 	bl	8004508 <xEventGroupSetBitsFromISR>
 8009110:	60f8      	str	r0, [r7, #12]
	if(xresult == pdFAIL){
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d100      	bne.n	800911a <xMBPortEventPostFromISR+0x26>
		while(1);
 8009118:	e7fe      	b.n	8009118 <xMBPortEventPostFromISR+0x24>
	}
	return TRUE;
 800911a:	2301      	movs	r3, #1
}
 800911c:	4618      	mov	r0, r3
 800911e:	3710      	adds	r7, #16
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}
 8009124:	20004bdc 	.word	0x20004bdc

08009128 <xMBPortEventGet>:

BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b086      	sub	sp, #24
 800912c:	af02      	add	r7, sp, #8
 800912e:	6078      	str	r0, [r7, #4]
	EventBits_t recEvent;
	recEvent = xEventGroupWaitBits(	xSlaveOsEvent,
 8009130:	4b1b      	ldr	r3, [pc, #108]	; (80091a0 <xMBPortEventGet+0x78>)
 8009132:	6818      	ldr	r0, [r3, #0]
 8009134:	f04f 33ff 	mov.w	r3, #4294967295
 8009138:	9300      	str	r3, [sp, #0]
 800913a:	2300      	movs	r3, #0
 800913c:	2201      	movs	r2, #1
 800913e:	210f      	movs	r1, #15
 8009140:	f7fb f84e 	bl	80041e0 <xEventGroupWaitBits>
 8009144:	60f8      	str	r0, [r7, #12]
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	3b01      	subs	r3, #1
 800914a:	2b07      	cmp	r3, #7
 800914c:	d822      	bhi.n	8009194 <xMBPortEventGet+0x6c>
 800914e:	a201      	add	r2, pc, #4	; (adr r2, 8009154 <xMBPortEventGet+0x2c>)
 8009150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009154:	08009175 	.word	0x08009175
 8009158:	0800917d 	.word	0x0800917d
 800915c:	08009195 	.word	0x08009195
 8009160:	08009185 	.word	0x08009185
 8009164:	08009195 	.word	0x08009195
 8009168:	08009195 	.word	0x08009195
 800916c:	08009195 	.word	0x08009195
 8009170:	0800918d 	.word	0x0800918d
									portMAX_DELAY);

    switch (recEvent)
    {
    case EV_READY:
        *eEvent = EV_READY;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2201      	movs	r2, #1
 8009178:	701a      	strb	r2, [r3, #0]
        break;
 800917a:	e00b      	b.n	8009194 <xMBPortEventGet+0x6c>
    case EV_FRAME_RECEIVED:
        *eEvent = EV_FRAME_RECEIVED;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2202      	movs	r2, #2
 8009180:	701a      	strb	r2, [r3, #0]
        break;
 8009182:	e007      	b.n	8009194 <xMBPortEventGet+0x6c>
    case EV_EXECUTE:
        *eEvent = EV_EXECUTE;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2204      	movs	r2, #4
 8009188:	701a      	strb	r2, [r3, #0]
        break;
 800918a:	e003      	b.n	8009194 <xMBPortEventGet+0x6c>
    case EV_FRAME_SENT:
        *eEvent = EV_FRAME_SENT;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2208      	movs	r2, #8
 8009190:	701a      	strb	r2, [r3, #0]
        break;
 8009192:	bf00      	nop
    }
    return TRUE;
 8009194:	2301      	movs	r3, #1
}
 8009196:	4618      	mov	r0, r3
 8009198:	3710      	adds	r7, #16
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}
 800919e:	bf00      	nop
 80091a0:	20004bdc 	.word	0x20004bdc

080091a4 <xMBMasterPortEventInit>:
static SemaphoreHandle_t	xMasterRunRes;

/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBMasterPortEventInit( void )
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	af00      	add	r7, sp, #0
	xMasterOsEvent = xEventGroupCreate();
 80091a8:	f7fb f800 	bl	80041ac <xEventGroupCreate>
 80091ac:	4603      	mov	r3, r0
 80091ae:	4a05      	ldr	r2, [pc, #20]	; (80091c4 <xMBMasterPortEventInit+0x20>)
 80091b0:	6013      	str	r3, [r2, #0]
	if(xMasterOsEvent == NULL) return FALSE;
 80091b2:	4b04      	ldr	r3, [pc, #16]	; (80091c4 <xMBMasterPortEventInit+0x20>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d101      	bne.n	80091be <xMBMasterPortEventInit+0x1a>
 80091ba:	2300      	movs	r3, #0
 80091bc:	e000      	b.n	80091c0 <xMBMasterPortEventInit+0x1c>
	return TRUE;
 80091be:	2301      	movs	r3, #1
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	bd80      	pop	{r7, pc}
 80091c4:	20004be0 	.word	0x20004be0

080091c8 <xMBMasterPortEventPost>:

BOOL
xMBMasterPortEventPost( eMBMasterEventType eEvent )
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b082      	sub	sp, #8
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	4603      	mov	r3, r0
 80091d0:	80fb      	strh	r3, [r7, #6]
	xEventGroupSetBits(xMasterOsEvent, eEvent);
 80091d2:	4b06      	ldr	r3, [pc, #24]	; (80091ec <xMBMasterPortEventPost+0x24>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	88fa      	ldrh	r2, [r7, #6]
 80091d8:	4611      	mov	r1, r2
 80091da:	4618      	mov	r0, r3
 80091dc:	f7fb f8d6 	bl	800438c <xEventGroupSetBits>
	return TRUE;
 80091e0:	2301      	movs	r3, #1
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3708      	adds	r7, #8
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}
 80091ea:	bf00      	nop
 80091ec:	20004be0 	.word	0x20004be0

080091f0 <xMBMasterPortEventPostFromISR>:

BOOL
xMBMasterPortEventPostFromISR( eMBMasterEventType eEvent )
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b084      	sub	sp, #16
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	4603      	mov	r3, r0
 80091f8:	80fb      	strh	r3, [r7, #6]
	BaseType_t xresult = pdFAIL;
 80091fa:	2300      	movs	r3, #0
 80091fc:	60fb      	str	r3, [r7, #12]
	xresult = xEventGroupSetBitsFromISR(xMasterOsEvent, eEvent, NULL);
 80091fe:	4b06      	ldr	r3, [pc, #24]	; (8009218 <xMBMasterPortEventPostFromISR+0x28>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	88f9      	ldrh	r1, [r7, #6]
 8009204:	2200      	movs	r2, #0
 8009206:	4618      	mov	r0, r3
 8009208:	f7fb f97e 	bl	8004508 <xEventGroupSetBitsFromISR>
 800920c:	60f8      	str	r0, [r7, #12]
	if(xresult == pdFAIL){

	}
	return TRUE;
 800920e:	2301      	movs	r3, #1
}
 8009210:	4618      	mov	r0, r3
 8009212:	3710      	adds	r7, #16
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}
 8009218:	20004be0 	.word	0x20004be0

0800921c <xMBMasterPortEventGet>:

BOOL
xMBMasterPortEventGet( eMBMasterEventType * eEvent )
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b086      	sub	sp, #24
 8009220:	af02      	add	r7, sp, #8
 8009222:	6078      	str	r0, [r7, #4]
	EventBits_t recEvent;
	recEvent = xEventGroupWaitBits(	xMasterOsEvent,
 8009224:	4b25      	ldr	r3, [pc, #148]	; (80092bc <xMBMasterPortEventGet+0xa0>)
 8009226:	6818      	ldr	r0, [r3, #0]
 8009228:	f04f 33ff 	mov.w	r3, #4294967295
 800922c:	9300      	str	r3, [sp, #0]
 800922e:	2300      	movs	r3, #0
 8009230:	2201      	movs	r2, #1
 8009232:	211f      	movs	r1, #31
 8009234:	f7fa ffd4 	bl	80041e0 <xEventGroupWaitBits>
 8009238:	60f8      	str	r0, [r7, #12]
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	3b01      	subs	r3, #1
 800923e:	2b0f      	cmp	r3, #15
 8009240:	d836      	bhi.n	80092b0 <xMBMasterPortEventGet+0x94>
 8009242:	a201      	add	r2, pc, #4	; (adr r2, 8009248 <xMBMasterPortEventGet+0x2c>)
 8009244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009248:	08009289 	.word	0x08009289
 800924c:	08009291 	.word	0x08009291
 8009250:	080092b1 	.word	0x080092b1
 8009254:	08009299 	.word	0x08009299
 8009258:	080092b1 	.word	0x080092b1
 800925c:	080092b1 	.word	0x080092b1
 8009260:	080092b1 	.word	0x080092b1
 8009264:	080092a1 	.word	0x080092a1
 8009268:	080092b1 	.word	0x080092b1
 800926c:	080092b1 	.word	0x080092b1
 8009270:	080092b1 	.word	0x080092b1
 8009274:	080092b1 	.word	0x080092b1
 8009278:	080092b1 	.word	0x080092b1
 800927c:	080092b1 	.word	0x080092b1
 8009280:	080092b1 	.word	0x080092b1
 8009284:	080092a9 	.word	0x080092a9

    /* the enum type couldn't convert to int type */
    switch (recEvent)
    {
    case EV_MASTER_READY:
        *eEvent = EV_MASTER_READY;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2201      	movs	r2, #1
 800928c:	801a      	strh	r2, [r3, #0]
        break;
 800928e:	e00f      	b.n	80092b0 <xMBMasterPortEventGet+0x94>
    case EV_MASTER_FRAME_RECEIVED:
        *eEvent = EV_MASTER_FRAME_RECEIVED;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2202      	movs	r2, #2
 8009294:	801a      	strh	r2, [r3, #0]
        break;
 8009296:	e00b      	b.n	80092b0 <xMBMasterPortEventGet+0x94>
    case EV_MASTER_EXECUTE:
        *eEvent = EV_MASTER_EXECUTE;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2204      	movs	r2, #4
 800929c:	801a      	strh	r2, [r3, #0]
        break;
 800929e:	e007      	b.n	80092b0 <xMBMasterPortEventGet+0x94>
    case EV_MASTER_FRAME_SENT:
        *eEvent = EV_MASTER_FRAME_SENT;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2208      	movs	r2, #8
 80092a4:	801a      	strh	r2, [r3, #0]
        break;
 80092a6:	e003      	b.n	80092b0 <xMBMasterPortEventGet+0x94>
    case EV_MASTER_ERROR_PROCESS:
        *eEvent = EV_MASTER_ERROR_PROCESS;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2210      	movs	r2, #16
 80092ac:	801a      	strh	r2, [r3, #0]
        break;
 80092ae:	bf00      	nop
    }
    return TRUE;
 80092b0:	2301      	movs	r3, #1
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	3710      	adds	r7, #16
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}
 80092ba:	bf00      	nop
 80092bc:	20004be0 	.word	0x20004be0

080092c0 <vMBMasterOsResInit>:
 * This function is initialize the OS resource for modbus master.
 * Note:The resource is define by OS.If you not use OS this function can be empty.
 *
 */
void vMBMasterOsResInit( void )
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	af00      	add	r7, sp, #0
	xMasterRunRes  = xSemaphoreCreateBinary();
 80092c4:	2203      	movs	r2, #3
 80092c6:	2100      	movs	r1, #0
 80092c8:	2001      	movs	r0, #1
 80092ca:	f7fb fad1 	bl	8004870 <xQueueGenericCreate>
 80092ce:	4603      	mov	r3, r0
 80092d0:	4a07      	ldr	r2, [pc, #28]	; (80092f0 <vMBMasterOsResInit+0x30>)
 80092d2:	6013      	str	r3, [r2, #0]

	if(xMasterRunRes == NULL) while (1);
 80092d4:	4b06      	ldr	r3, [pc, #24]	; (80092f0 <vMBMasterOsResInit+0x30>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d100      	bne.n	80092de <vMBMasterOsResInit+0x1e>
 80092dc:	e7fe      	b.n	80092dc <vMBMasterOsResInit+0x1c>

	//first realse semaphore
	xSemaphoreGive(xMasterRunRes);
 80092de:	4b04      	ldr	r3, [pc, #16]	; (80092f0 <vMBMasterOsResInit+0x30>)
 80092e0:	6818      	ldr	r0, [r3, #0]
 80092e2:	2300      	movs	r3, #0
 80092e4:	2200      	movs	r2, #0
 80092e6:	2100      	movs	r1, #0
 80092e8:	f7fb fb28 	bl	800493c <xQueueGenericSend>
	return;
 80092ec:	bf00      	nop
}
 80092ee:	bd80      	pop	{r7, pc}
 80092f0:	20004be4 	.word	0x20004be4

080092f4 <xMBMasterRunResTake>:
 * @param lTimeOut the waiting time.
 *
 * @return resource taked result
 */
BOOL xMBMasterRunResTake( LONG lTimeOut )
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b082      	sub	sp, #8
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
	return (xSemaphoreTake(xMasterRunRes, lTimeOut) ? TRUE : FALSE);
 80092fc:	4b08      	ldr	r3, [pc, #32]	; (8009320 <xMBMasterRunResTake+0x2c>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	687a      	ldr	r2, [r7, #4]
 8009302:	4611      	mov	r1, r2
 8009304:	4618      	mov	r0, r3
 8009306:	f7fb fda5 	bl	8004e54 <xQueueSemaphoreTake>
 800930a:	4603      	mov	r3, r0
 800930c:	2b00      	cmp	r3, #0
 800930e:	bf14      	ite	ne
 8009310:	2301      	movne	r3, #1
 8009312:	2300      	moveq	r3, #0
 8009314:	b2db      	uxtb	r3, r3

}
 8009316:	4618      	mov	r0, r3
 8009318:	3708      	adds	r7, #8
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}
 800931e:	bf00      	nop
 8009320:	20004be4 	.word	0x20004be4

08009324 <vMBMasterRunResRelease>:
 * This function is release Mobus Master running resource.
 * Note:The resource is define by Operating System.If you not use OS this function can be empty.
 *
 */
void vMBMasterRunResRelease( void )
{
 8009324:	b580      	push	{r7, lr}
 8009326:	af00      	add	r7, sp, #0
    /* release resource */
	xSemaphoreGive(xMasterRunRes);
 8009328:	4b04      	ldr	r3, [pc, #16]	; (800933c <vMBMasterRunResRelease+0x18>)
 800932a:	6818      	ldr	r0, [r3, #0]
 800932c:	2300      	movs	r3, #0
 800932e:	2200      	movs	r2, #0
 8009330:	2100      	movs	r1, #0
 8009332:	f7fb fb03 	bl	800493c <xQueueGenericSend>
}
 8009336:	bf00      	nop
 8009338:	bd80      	pop	{r7, pc}
 800933a:	bf00      	nop
 800933c:	20004be4 	.word	0x20004be4

08009340 <vMBMasterErrorCBRespondTimeout>:
 * @param pucPDUData PDU buffer data
 * @param ucPDULength PDU buffer length
 *
 */
void vMBMasterErrorCBRespondTimeout(UCHAR ucDestAddress, const UCHAR* pucPDUData,
        USHORT ucPDULength) {
 8009340:	b580      	push	{r7, lr}
 8009342:	b082      	sub	sp, #8
 8009344:	af00      	add	r7, sp, #0
 8009346:	4603      	mov	r3, r0
 8009348:	6039      	str	r1, [r7, #0]
 800934a:	71fb      	strb	r3, [r7, #7]
 800934c:	4613      	mov	r3, r2
 800934e:	80bb      	strh	r3, [r7, #4]
    /**
     * @note This code is use OS's event mechanism for modbus master protocol stack.
     * If you don't use OS, you can change it.
     */
	xEventGroupSetBits(xMasterOsEvent, EV_MASTER_ERROR_RESPOND_TIMEOUT);
 8009350:	4b04      	ldr	r3, [pc, #16]	; (8009364 <vMBMasterErrorCBRespondTimeout+0x24>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	2140      	movs	r1, #64	; 0x40
 8009356:	4618      	mov	r0, r3
 8009358:	f7fb f818 	bl	800438c <xEventGroupSetBits>
    /* You can add your code under here. */

}
 800935c:	bf00      	nop
 800935e:	3708      	adds	r7, #8
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}
 8009364:	20004be0 	.word	0x20004be0

08009368 <vMBMasterErrorCBReceiveData>:
 * @param pucPDUData PDU buffer data
 * @param ucPDULength PDU buffer length
 *
 */
void vMBMasterErrorCBReceiveData(UCHAR ucDestAddress, const UCHAR* pucPDUData,
        USHORT ucPDULength) {
 8009368:	b580      	push	{r7, lr}
 800936a:	b082      	sub	sp, #8
 800936c:	af00      	add	r7, sp, #0
 800936e:	4603      	mov	r3, r0
 8009370:	6039      	str	r1, [r7, #0]
 8009372:	71fb      	strb	r3, [r7, #7]
 8009374:	4613      	mov	r3, r2
 8009376:	80bb      	strh	r3, [r7, #4]
    /**
     * @note This code is use OS's event mechanism for modbus master protocol stack.
     * If you don't use OS, you can change it.
     */
	xEventGroupSetBits(xMasterOsEvent, EV_MASTER_ERROR_RECEIVE_DATA);
 8009378:	4b04      	ldr	r3, [pc, #16]	; (800938c <vMBMasterErrorCBReceiveData+0x24>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	2180      	movs	r1, #128	; 0x80
 800937e:	4618      	mov	r0, r3
 8009380:	f7fb f804 	bl	800438c <xEventGroupSetBits>
    /* You can add your code under here. */

}
 8009384:	bf00      	nop
 8009386:	3708      	adds	r7, #8
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}
 800938c:	20004be0 	.word	0x20004be0

08009390 <vMBMasterErrorCBExecuteFunction>:
 * @param pucPDUData PDU buffer data
 * @param ucPDULength PDU buffer length
 *
 */
void vMBMasterErrorCBExecuteFunction(UCHAR ucDestAddress, const UCHAR* pucPDUData,
        USHORT ucPDULength) {
 8009390:	b580      	push	{r7, lr}
 8009392:	b082      	sub	sp, #8
 8009394:	af00      	add	r7, sp, #0
 8009396:	4603      	mov	r3, r0
 8009398:	6039      	str	r1, [r7, #0]
 800939a:	71fb      	strb	r3, [r7, #7]
 800939c:	4613      	mov	r3, r2
 800939e:	80bb      	strh	r3, [r7, #4]
    /**
     * @note This code is use OS's event mechanism for modbus master protocol stack.
     * If you don't use OS, you can change it.
     */
	xEventGroupSetBits(xMasterOsEvent, EV_MASTER_ERROR_EXECUTE_FUNCTION);
 80093a0:	4b05      	ldr	r3, [pc, #20]	; (80093b8 <vMBMasterErrorCBExecuteFunction+0x28>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80093a8:	4618      	mov	r0, r3
 80093aa:	f7fa ffef 	bl	800438c <xEventGroupSetBits>
    /* You can add your code under here. */

}
 80093ae:	bf00      	nop
 80093b0:	3708      	adds	r7, #8
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}
 80093b6:	bf00      	nop
 80093b8:	20004be0 	.word	0x20004be0

080093bc <vMBMasterCBRequestScuuess>:
 * This is modbus master request process success callback function.
 * @note There functions will block modbus master poll while execute OS waiting.
 * So,for real-time of system.Do not execute too much waiting process.
 *
 */
void vMBMasterCBRequestScuuess( void ) {
 80093bc:	b580      	push	{r7, lr}
 80093be:	af00      	add	r7, sp, #0
    /**
     * @note This code is use OS's event mechanism for modbus master protocol stack.
     * If you don't use OS, you can change it.EV_MASTER_PROCESS_SUCESS
     */
	xEventGroupSetBits(xMasterOsEvent, EV_MASTER_PROCESS_SUCESS);
 80093c0:	4b03      	ldr	r3, [pc, #12]	; (80093d0 <vMBMasterCBRequestScuuess+0x14>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	2120      	movs	r1, #32
 80093c6:	4618      	mov	r0, r3
 80093c8:	f7fa ffe0 	bl	800438c <xEventGroupSetBits>
    /* You can add your code under here. */

}
 80093cc:	bf00      	nop
 80093ce:	bd80      	pop	{r7, pc}
 80093d0:	20004be0 	.word	0x20004be0

080093d4 <eMBMasterWaitRequestFinish>:
 * @note If you are use OS, you can use OS's event mechanism. Otherwise you have to run
 * much user custom delay for waiting.
 *
 * @return request error code
 */
eMBMasterReqErrCode eMBMasterWaitRequestFinish( void ) {
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b084      	sub	sp, #16
 80093d8:	af02      	add	r7, sp, #8
    eMBMasterReqErrCode    eErrStatus = MB_MRE_NO_ERR;
 80093da:	2300      	movs	r3, #0
 80093dc:	71fb      	strb	r3, [r7, #7]
    EventBits_t recvedEvent;

    recvedEvent = xEventGroupWaitBits(	xMasterOsEvent,
 80093de:	4b17      	ldr	r3, [pc, #92]	; (800943c <eMBMasterWaitRequestFinish+0x68>)
 80093e0:	6818      	ldr	r0, [r3, #0]
 80093e2:	f04f 33ff 	mov.w	r3, #4294967295
 80093e6:	9300      	str	r3, [sp, #0]
 80093e8:	2300      	movs	r3, #0
 80093ea:	2201      	movs	r2, #1
 80093ec:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80093f0:	f7fa fef6 	bl	80041e0 <xEventGroupWaitBits>
 80093f4:	6038      	str	r0, [r7, #0]
												EV_MASTER_ERROR_EXECUTE_FUNCTION),
									pdTRUE, //clear on exit
									pdFALSE,//wait for any bits
									portMAX_DELAY);

    switch (recvedEvent)
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093fc:	d015      	beq.n	800942a <eMBMasterWaitRequestFinish+0x56>
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009404:	d815      	bhi.n	8009432 <eMBMasterWaitRequestFinish+0x5e>
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	2b80      	cmp	r3, #128	; 0x80
 800940a:	d00b      	beq.n	8009424 <eMBMasterWaitRequestFinish+0x50>
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	2b80      	cmp	r3, #128	; 0x80
 8009410:	d80f      	bhi.n	8009432 <eMBMasterWaitRequestFinish+0x5e>
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	2b20      	cmp	r3, #32
 8009416:	d00b      	beq.n	8009430 <eMBMasterWaitRequestFinish+0x5c>
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	2b40      	cmp	r3, #64	; 0x40
 800941c:	d109      	bne.n	8009432 <eMBMasterWaitRequestFinish+0x5e>
    {
			case EV_MASTER_PROCESS_SUCESS:
					break;
			case EV_MASTER_ERROR_RESPOND_TIMEOUT:
			{
					eErrStatus = MB_MRE_TIMEDOUT;
 800941e:	2304      	movs	r3, #4
 8009420:	71fb      	strb	r3, [r7, #7]
					break;
 8009422:	e006      	b.n	8009432 <eMBMasterWaitRequestFinish+0x5e>
			}
			case EV_MASTER_ERROR_RECEIVE_DATA:
			{
					eErrStatus = MB_MRE_REV_DATA;
 8009424:	2303      	movs	r3, #3
 8009426:	71fb      	strb	r3, [r7, #7]
					break;
 8009428:	e003      	b.n	8009432 <eMBMasterWaitRequestFinish+0x5e>
			}
			case EV_MASTER_ERROR_EXECUTE_FUNCTION:
			{
					eErrStatus = MB_MRE_EXE_FUN;
 800942a:	2306      	movs	r3, #6
 800942c:	71fb      	strb	r3, [r7, #7]
					break;
 800942e:	e000      	b.n	8009432 <eMBMasterWaitRequestFinish+0x5e>
					break;
 8009430:	bf00      	nop
			}
    }
    return eErrStatus;
 8009432:	79fb      	ldrb	r3, [r7, #7]

}
 8009434:	4618      	mov	r0, r3
 8009436:	3708      	adds	r7, #8
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}
 800943c:	20004be0 	.word	0x20004be0

08009440 <vMBPortSerialEnable>:
 
/* ----------------------- Start implementation -----------------------------*/

void
vMBPortSerialEnable( BOOL xRxEnable, BOOL xTxEnable )
{
 8009440:	b480      	push	{r7}
 8009442:	b083      	sub	sp, #12
 8009444:	af00      	add	r7, sp, #0
 8009446:	4603      	mov	r3, r0
 8009448:	460a      	mov	r2, r1
 800944a:	71fb      	strb	r3, [r7, #7]
 800944c:	4613      	mov	r3, r2
 800944e:	71bb      	strb	r3, [r7, #6]
  /* If xRXEnable enable serial receive interrupts. If xTxENable enable
  * transmitter empty interrupts.
  */
  
  if (xRxEnable) {        
 8009450:	79fb      	ldrb	r3, [r7, #7]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d008      	beq.n	8009468 <vMBPortSerialEnable+0x28>
	  SET_BIT((&huartslave)->Instance->CR1, ( USART_CR1_RXNEIE) );
 8009456:	4b15      	ldr	r3, [pc, #84]	; (80094ac <vMBPortSerialEnable+0x6c>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	681a      	ldr	r2, [r3, #0]
 800945c:	4b13      	ldr	r3, [pc, #76]	; (80094ac <vMBPortSerialEnable+0x6c>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f042 0220 	orr.w	r2, r2, #32
 8009464:	601a      	str	r2, [r3, #0]
 8009466:	e007      	b.n	8009478 <vMBPortSerialEnable+0x38>
  } else {    
	 CLEAR_BIT((&huartslave)->Instance->CR1, ( USART_CR1_RXNEIE) );
 8009468:	4b10      	ldr	r3, [pc, #64]	; (80094ac <vMBPortSerialEnable+0x6c>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	681a      	ldr	r2, [r3, #0]
 800946e:	4b0f      	ldr	r3, [pc, #60]	; (80094ac <vMBPortSerialEnable+0x6c>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f022 0220 	bic.w	r2, r2, #32
 8009476:	601a      	str	r2, [r3, #0]
  }
  if (xTxEnable) {
 8009478:	79bb      	ldrb	r3, [r7, #6]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d008      	beq.n	8009490 <vMBPortSerialEnable+0x50>
	  SET_BIT((&huartslave)->Instance->CR1, USART_CR1_TXEIE);
 800947e:	4b0b      	ldr	r3, [pc, #44]	; (80094ac <vMBPortSerialEnable+0x6c>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	681a      	ldr	r2, [r3, #0]
 8009484:	4b09      	ldr	r3, [pc, #36]	; (80094ac <vMBPortSerialEnable+0x6c>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800948c:	601a      	str	r2, [r3, #0]
  } else {
	  CLEAR_BIT((&huartslave)->Instance->CR1, USART_CR1_TXEIE);
  }  
  
}
 800948e:	e007      	b.n	80094a0 <vMBPortSerialEnable+0x60>
	  CLEAR_BIT((&huartslave)->Instance->CR1, USART_CR1_TXEIE);
 8009490:	4b06      	ldr	r3, [pc, #24]	; (80094ac <vMBPortSerialEnable+0x6c>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	681a      	ldr	r2, [r3, #0]
 8009496:	4b05      	ldr	r3, [pc, #20]	; (80094ac <vMBPortSerialEnable+0x6c>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800949e:	601a      	str	r2, [r3, #0]
}
 80094a0:	bf00      	nop
 80094a2:	370c      	adds	r7, #12
 80094a4:	46bd      	mov	sp, r7
 80094a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094aa:	4770      	bx	lr
 80094ac:	20004e2c 	.word	0x20004e2c

080094b0 <xMBPortSerialInit>:
 
BOOL
xMBPortSerialInit( UCHAR ucPORT, ULONG ulBaudRate, UCHAR ucDataBits, eMBParity eParity )
{
 80094b0:	b480      	push	{r7}
 80094b2:	b083      	sub	sp, #12
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6039      	str	r1, [r7, #0]
 80094b8:	4611      	mov	r1, r2
 80094ba:	461a      	mov	r2, r3
 80094bc:	4603      	mov	r3, r0
 80094be:	71fb      	strb	r3, [r7, #7]
 80094c0:	460b      	mov	r3, r1
 80094c2:	71bb      	strb	r3, [r7, #6]
 80094c4:	4613      	mov	r3, r2
 80094c6:	717b      	strb	r3, [r7, #5]

	/*
	 * Please note: when user uses EVEN or ODD parity the Data bit value chose
	 * in CubeMx initialize must be 9 bit
	 */
  return TRUE;
 80094c8:	2301      	movs	r3, #1
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	370c      	adds	r7, #12
 80094ce:	46bd      	mov	sp, r7
 80094d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d4:	4770      	bx	lr
	...

080094d8 <xMBPortSerialPutByte>:
 
BOOL
xMBPortSerialPutByte( CHAR ucByte )
{
 80094d8:	b480      	push	{r7}
 80094da:	b083      	sub	sp, #12
 80094dc:	af00      	add	r7, sp, #0
 80094de:	4603      	mov	r3, r0
 80094e0:	71fb      	strb	r3, [r7, #7]
  /* Put a byte in the UARTs transmit buffer. This function is called
  * by the protocol stack if pxMBFrameCBTransmitterEmpty( ) has been
  * called. */
	huartslave.Instance->TDR = (uint8_t)(ucByte & 0xFFU);
 80094e2:	4b05      	ldr	r3, [pc, #20]	; (80094f8 <xMBPortSerialPutByte+0x20>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	79fa      	ldrb	r2, [r7, #7]
 80094e8:	629a      	str	r2, [r3, #40]	; 0x28
	return TRUE;
 80094ea:	2301      	movs	r3, #1
  //return (HAL_OK == HAL_UART_Transmit(&huartslave, (uint8_t*)&ucByte, 1, 10));
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	370c      	adds	r7, #12
 80094f0:	46bd      	mov	sp, r7
 80094f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f6:	4770      	bx	lr
 80094f8:	20004e2c 	.word	0x20004e2c

080094fc <xMBPortSerialGetByte>:
 
BOOL
xMBPortSerialGetByte( CHAR * pucByte )
{
 80094fc:	b480      	push	{r7}
 80094fe:	b083      	sub	sp, #12
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
  /* Return the byte in the UARTs receive buffer. This function is called
  * by the protocol stack after pxMBFrameCBByteReceived( ) has been called.
  */
  *pucByte = (uint8_t)(huartslave.Instance->RDR & (uint8_t)0x00FF);
 8009504:	4b06      	ldr	r3, [pc, #24]	; (8009520 <xMBPortSerialGetByte+0x24>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800950a:	b2da      	uxtb	r2, r3
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	701a      	strb	r2, [r3, #0]
  return TRUE;
 8009510:	2301      	movs	r3, #1
}
 8009512:	4618      	mov	r0, r3
 8009514:	370c      	adds	r7, #12
 8009516:	46bd      	mov	sp, r7
 8009518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951c:	4770      	bx	lr
 800951e:	bf00      	nop
 8009520:	20004e2c 	.word	0x20004e2c

08009524 <USART3_IRQHandler>:
void USART3_IRQHandler(void)

#else
void USART2_IRQHandler(void)
#endif
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b082      	sub	sp, #8
 8009528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	uint32_t isrflags   = READ_REG(huartslave.Instance->ISR);
 800952a:	4b1b      	ldr	r3, [pc, #108]	; (8009598 <USART3_IRQHandler+0x74>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	69db      	ldr	r3, [r3, #28]
 8009530:	607b      	str	r3, [r7, #4]
	uint32_t cr1its     = READ_REG(huartslave.Instance->CR1);
 8009532:	4b19      	ldr	r3, [pc, #100]	; (8009598 <USART3_IRQHandler+0x74>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	603b      	str	r3, [r7, #0]

    if ( ((isrflags & USART_ISR_RXNE) != 0U)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f003 0320 	and.w	r3, r3, #32
 8009540:	2b00      	cmp	r3, #0
 8009542:	d010      	beq.n	8009566 <USART3_IRQHandler+0x42>
         && ((cr1its & USART_CR1_RXNEIE) != 0U) )
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	f003 0320 	and.w	r3, r3, #32
 800954a:	2b00      	cmp	r3, #0
 800954c:	d00b      	beq.n	8009566 <USART3_IRQHandler+0x42>
    {

		  pxMBFrameCBByteReceived();	  //xMBRTUReceiveFSM() in mbrtu.c
 800954e:	4b13      	ldr	r3, [pc, #76]	; (800959c <USART3_IRQHandler+0x78>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	4798      	blx	r3

//		  __IO uint32_t tmpreg = 0x00U;
//		  tmpreg = (&huartslave)->Instance->ISR;
//		  tmpreg = (&huartslave)->Instance->RDR;
		  SET_BIT((&huartslave)->Instance->RQR,  USART_RQR_RXFRQ );
 8009554:	4b10      	ldr	r3, [pc, #64]	; (8009598 <USART3_IRQHandler+0x74>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	699a      	ldr	r2, [r3, #24]
 800955a:	4b0f      	ldr	r3, [pc, #60]	; (8009598 <USART3_IRQHandler+0x74>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f042 0208 	orr.w	r2, r2, #8
 8009562:	619a      	str	r2, [r3, #24]
//		  (void) tmpreg;

		return;
 8009564:	e014      	b.n	8009590 <USART3_IRQHandler+0x6c>
    }

  if((__HAL_UART_GET_FLAG(&huartslave, UART_FLAG_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(&huartslave, UART_IT_TXE) != RESET)) {
 8009566:	4b0c      	ldr	r3, [pc, #48]	; (8009598 <USART3_IRQHandler+0x74>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	69db      	ldr	r3, [r3, #28]
 800956c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009570:	2b80      	cmp	r3, #128	; 0x80
 8009572:	d10a      	bne.n	800958a <USART3_IRQHandler+0x66>
 8009574:	4b08      	ldr	r3, [pc, #32]	; (8009598 <USART3_IRQHandler+0x74>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800957e:	2b00      	cmp	r3, #0
 8009580:	d003      	beq.n	800958a <USART3_IRQHandler+0x66>

	  pxMBFrameCBTransmitterEmpty(); 	  //xMBRTUTransmitFSM() in mbrtu.c
 8009582:	4b07      	ldr	r3, [pc, #28]	; (80095a0 <USART3_IRQHandler+0x7c>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	4798      	blx	r3

    return ;
 8009588:	e002      	b.n	8009590 <USART3_IRQHandler+0x6c>
  }

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huartslave);
 800958a:	4803      	ldr	r0, [pc, #12]	; (8009598 <USART3_IRQHandler+0x74>)
 800958c:	f7f9 fe44 	bl	8003218 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8009590:	3708      	adds	r7, #8
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}
 8009596:	bf00      	nop
 8009598:	20004e2c 	.word	0x20004e2c
 800959c:	20005064 	.word	0x20005064
 80095a0:	2000505c 	.word	0x2000505c

080095a4 <xMBMasterPortSerialInit>:


/* ----------------------- Start implementation -----------------------------*/
BOOL xMBMasterPortSerialInit( UCHAR ucPORT, ULONG ulBaudRate, UCHAR ucDataBits,
							  eMBParity eParity)
{
 80095a4:	b480      	push	{r7}
 80095a6:	b083      	sub	sp, #12
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6039      	str	r1, [r7, #0]
 80095ac:	4611      	mov	r1, r2
 80095ae:	461a      	mov	r2, r3
 80095b0:	4603      	mov	r3, r0
 80095b2:	71fb      	strb	r3, [r7, #7]
 80095b4:	460b      	mov	r3, r1
 80095b6:	71bb      	strb	r3, [r7, #6]
 80095b8:	4613      	mov	r3, r2
 80095ba:	717b      	strb	r3, [r7, #5]
		/*
		 * Please note: when user uses EVEN or ODD parity, the Data bit value chose
		 * in CubeMx initialize must be 9 bit
		 */

	return TRUE;
 80095bc:	2301      	movs	r3, #1
}
 80095be:	4618      	mov	r0, r3
 80095c0:	370c      	adds	r7, #12
 80095c2:	46bd      	mov	sp, r7
 80095c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c8:	4770      	bx	lr
	...

080095cc <vMBMasterPortSerialEnable>:

void vMBMasterPortSerialEnable(BOOL xRxEnable, BOOL xTxEnable)
{
 80095cc:	b480      	push	{r7}
 80095ce:	b083      	sub	sp, #12
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	4603      	mov	r3, r0
 80095d4:	460a      	mov	r2, r1
 80095d6:	71fb      	strb	r3, [r7, #7]
 80095d8:	4613      	mov	r3, r2
 80095da:	71bb      	strb	r3, [r7, #6]

	  /* If xRXEnable enable serial receive interrupts. If xTxENable enable
	  * transmitter empty interrupts.
	  */
	  if (xRxEnable) {
 80095dc:	79fb      	ldrb	r3, [r7, #7]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d008      	beq.n	80095f4 <vMBMasterPortSerialEnable+0x28>
	    __HAL_UART_ENABLE_IT(&huartmaster, UART_IT_RXNE);
 80095e2:	4b15      	ldr	r3, [pc, #84]	; (8009638 <vMBMasterPortSerialEnable+0x6c>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	681a      	ldr	r2, [r3, #0]
 80095e8:	4b13      	ldr	r3, [pc, #76]	; (8009638 <vMBMasterPortSerialEnable+0x6c>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f042 0220 	orr.w	r2, r2, #32
 80095f0:	601a      	str	r2, [r3, #0]
 80095f2:	e007      	b.n	8009604 <vMBMasterPortSerialEnable+0x38>
	    // PC2 <=> RE ........Receiver Output Enable (Low to enable)
	  } else {
	    __HAL_UART_DISABLE_IT(&huartmaster, UART_IT_RXNE);
 80095f4:	4b10      	ldr	r3, [pc, #64]	; (8009638 <vMBMasterPortSerialEnable+0x6c>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	681a      	ldr	r2, [r3, #0]
 80095fa:	4b0f      	ldr	r3, [pc, #60]	; (8009638 <vMBMasterPortSerialEnable+0x6c>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f022 0220 	bic.w	r2, r2, #32
 8009602:	601a      	str	r2, [r3, #0]
	  }

	  if (xTxEnable) {
 8009604:	79bb      	ldrb	r3, [r7, #6]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d008      	beq.n	800961c <vMBMasterPortSerialEnable+0x50>
	    __HAL_UART_ENABLE_IT(&huartmaster, UART_IT_TXE);
 800960a:	4b0b      	ldr	r3, [pc, #44]	; (8009638 <vMBMasterPortSerialEnable+0x6c>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	681a      	ldr	r2, [r3, #0]
 8009610:	4b09      	ldr	r3, [pc, #36]	; (8009638 <vMBMasterPortSerialEnable+0x6c>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009618:	601a      	str	r2, [r3, #0]

	  } else {
	    __HAL_UART_DISABLE_IT(&huartmaster, UART_IT_TXE);
	  }

}
 800961a:	e007      	b.n	800962c <vMBMasterPortSerialEnable+0x60>
	    __HAL_UART_DISABLE_IT(&huartmaster, UART_IT_TXE);
 800961c:	4b06      	ldr	r3, [pc, #24]	; (8009638 <vMBMasterPortSerialEnable+0x6c>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	681a      	ldr	r2, [r3, #0]
 8009622:	4b05      	ldr	r3, [pc, #20]	; (8009638 <vMBMasterPortSerialEnable+0x6c>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800962a:	601a      	str	r2, [r3, #0]
}
 800962c:	bf00      	nop
 800962e:	370c      	adds	r7, #12
 8009630:	46bd      	mov	sp, r7
 8009632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009636:	4770      	bx	lr
 8009638:	20004efc 	.word	0x20004efc

0800963c <xMBMasterPortSerialPutByte>:
	//..
	return;
}

BOOL xMBMasterPortSerialPutByte(CHAR ucByte)
{
 800963c:	b480      	push	{r7}
 800963e:	b083      	sub	sp, #12
 8009640:	af00      	add	r7, sp, #0
 8009642:	4603      	mov	r3, r0
 8009644:	71fb      	strb	r3, [r7, #7]
	  /* Put a byte in the UARTs transmit buffer. This function is called
	  * by the protocol stack if pxMBFrameCBTransmitterEmpty( ) has been
	  * called. */
	huartmaster.Instance->TDR = (uint8_t)(ucByte & 0xFFU);
 8009646:	4b05      	ldr	r3, [pc, #20]	; (800965c <xMBMasterPortSerialPutByte+0x20>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	79fa      	ldrb	r2, [r7, #7]
 800964c:	629a      	str	r2, [r3, #40]	; 0x28
	return TRUE;
 800964e:	2301      	movs	r3, #1
}
 8009650:	4618      	mov	r0, r3
 8009652:	370c      	adds	r7, #12
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr
 800965c:	20004efc 	.word	0x20004efc

08009660 <xMBMasterPortSerialGetByte>:

BOOL xMBMasterPortSerialGetByte(CHAR * pucByte)
{
 8009660:	b480      	push	{r7}
 8009662:	b083      	sub	sp, #12
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]

	  /* Return the byte in the UARTs receive buffer. This function is called
	  *  by the protocol stack after pxMBFrameCBByteReceived( ) has been called.
	  */

	*pucByte = (uint8_t)(huartmaster.Instance->RDR & (uint8_t)0x00FF);
 8009668:	4b06      	ldr	r3, [pc, #24]	; (8009684 <xMBMasterPortSerialGetByte+0x24>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800966e:	b2da      	uxtb	r2, r3
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	701a      	strb	r2, [r3, #0]

	  return TRUE;
 8009674:	2301      	movs	r3, #1
}
 8009676:	4618      	mov	r0, r3
 8009678:	370c      	adds	r7, #12
 800967a:	46bd      	mov	sp, r7
 800967c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009680:	4770      	bx	lr
 8009682:	bf00      	nop
 8009684:	20004efc 	.word	0x20004efc

08009688 <USART2_IRQHandler>:
#if MASTER_USE_UART2
void USART2_IRQHandler(void)
#else
void USART3_IRQHandler(void)
#endif
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b082      	sub	sp, #8
 800968c:	af00      	add	r7, sp, #0

	uint32_t isrflags   = READ_REG(huartmaster.Instance->ISR);
 800968e:	4b1b      	ldr	r3, [pc, #108]	; (80096fc <USART2_IRQHandler+0x74>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	69db      	ldr	r3, [r3, #28]
 8009694:	607b      	str	r3, [r7, #4]
	uint32_t cr1its     = READ_REG(huartmaster.Instance->CR1);
 8009696:	4b19      	ldr	r3, [pc, #100]	; (80096fc <USART2_IRQHandler+0x74>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	603b      	str	r3, [r7, #0]

    if ( ((isrflags & USART_ISR_RXNE) != 0U)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f003 0320 	and.w	r3, r3, #32
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d010      	beq.n	80096ca <USART2_IRQHandler+0x42>
         && ((cr1its & USART_CR1_RXNEIE) != 0U) )
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	f003 0320 	and.w	r3, r3, #32
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d00b      	beq.n	80096ca <USART2_IRQHandler+0x42>
    {

		//xMBMasterRTUReceiveFSM();
		pxMBMasterFrameCBByteReceived();
 80096b2:	4b13      	ldr	r3, [pc, #76]	; (8009700 <USART2_IRQHandler+0x78>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	4798      	blx	r3

		SET_BIT((&huartmaster)->Instance->RQR,  USART_RQR_RXFRQ );
 80096b8:	4b10      	ldr	r3, [pc, #64]	; (80096fc <USART2_IRQHandler+0x74>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	699a      	ldr	r2, [r3, #24]
 80096be:	4b0f      	ldr	r3, [pc, #60]	; (80096fc <USART2_IRQHandler+0x74>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f042 0208 	orr.w	r2, r2, #8
 80096c6:	619a      	str	r2, [r3, #24]

		return;
 80096c8:	e014      	b.n	80096f4 <USART2_IRQHandler+0x6c>

	}

	if((__HAL_UART_GET_FLAG(&huartmaster, UART_FLAG_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(&huartmaster, UART_IT_TXE) != RESET)) {
 80096ca:	4b0c      	ldr	r3, [pc, #48]	; (80096fc <USART2_IRQHandler+0x74>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	69db      	ldr	r3, [r3, #28]
 80096d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096d4:	2b80      	cmp	r3, #128	; 0x80
 80096d6:	d10a      	bne.n	80096ee <USART2_IRQHandler+0x66>
 80096d8:	4b08      	ldr	r3, [pc, #32]	; (80096fc <USART2_IRQHandler+0x74>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d003      	beq.n	80096ee <USART2_IRQHandler+0x66>

		//xMBMasterRTUTransmitFSM();
		pxMBMasterFrameCBTransmitterEmpty();
 80096e6:	4b07      	ldr	r3, [pc, #28]	; (8009704 <USART2_IRQHandler+0x7c>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	4798      	blx	r3
		return ;
 80096ec:	e002      	b.n	80096f4 <USART2_IRQHandler+0x6c>

	}

	HAL_UART_IRQHandler(&huartmaster);
 80096ee:	4803      	ldr	r0, [pc, #12]	; (80096fc <USART2_IRQHandler+0x74>)
 80096f0:	f7f9 fd92 	bl	8003218 <HAL_UART_IRQHandler>
}
 80096f4:	3708      	adds	r7, #8
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}
 80096fa:	bf00      	nop
 80096fc:	20004efc 	.word	0x20004efc
 8009700:	2000506c 	.word	0x2000506c
 8009704:	20005068 	.word	0x20005068

08009708 <xMBPortTimersInit>:
static uint16_t downcounter = 0;		//20000 = 1s for test timer
 
/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortTimersInit( USHORT usTim1Timerout50us )
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b086      	sub	sp, #24
 800970c:	af00      	add	r7, sp, #0
 800970e:	4603      	mov	r3, r0
 8009710:	80fb      	strh	r3, [r7, #6]
  TIM_MasterConfigTypeDef sMasterConfig;
  
  htim6.Instance = TIM6;
 8009712:	4b19      	ldr	r3, [pc, #100]	; (8009778 <xMBPortTimersInit+0x70>)
 8009714:	4a19      	ldr	r2, [pc, #100]	; (800977c <xMBPortTimersInit+0x74>)
 8009716:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = (2 * HAL_RCC_GetPCLK1Freq() / 1000000) - 1; //TIMx_CLK = 216Mhz, PCLK1 = 108MHz
 8009718:	f7f8 fd1c 	bl	8002154 <HAL_RCC_GetPCLK1Freq>
 800971c:	4603      	mov	r3, r0
 800971e:	005b      	lsls	r3, r3, #1
 8009720:	4a17      	ldr	r2, [pc, #92]	; (8009780 <xMBPortTimersInit+0x78>)
 8009722:	fba2 2303 	umull	r2, r3, r2, r3
 8009726:	0c9b      	lsrs	r3, r3, #18
 8009728:	3b01      	subs	r3, #1
 800972a:	4a13      	ldr	r2, [pc, #76]	; (8009778 <xMBPortTimersInit+0x70>)
 800972c:	6053      	str	r3, [r2, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800972e:	4b12      	ldr	r3, [pc, #72]	; (8009778 <xMBPortTimersInit+0x70>)
 8009730:	2200      	movs	r2, #0
 8009732:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 50 - 1;
 8009734:	4b10      	ldr	r3, [pc, #64]	; (8009778 <xMBPortTimersInit+0x70>)
 8009736:	2231      	movs	r2, #49	; 0x31
 8009738:	60da      	str	r2, [r3, #12]
  
  timeout = usTim1Timerout50us;
 800973a:	4a12      	ldr	r2, [pc, #72]	; (8009784 <xMBPortTimersInit+0x7c>)
 800973c:	88fb      	ldrh	r3, [r7, #6]
 800973e:	8013      	strh	r3, [r2, #0]
  
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8009740:	480d      	ldr	r0, [pc, #52]	; (8009778 <xMBPortTimersInit+0x70>)
 8009742:	f7f9 f989 	bl	8002a58 <HAL_TIM_Base_Init>
 8009746:	4603      	mov	r3, r0
 8009748:	2b00      	cmp	r3, #0
 800974a:	d001      	beq.n	8009750 <xMBPortTimersInit+0x48>
  {
    return FALSE;
 800974c:	2300      	movs	r3, #0
 800974e:	e00f      	b.n	8009770 <xMBPortTimersInit+0x68>
  }
  
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8009750:	2320      	movs	r3, #32
 8009752:	60fb      	str	r3, [r7, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009754:	2300      	movs	r3, #0
 8009756:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8009758:	f107 030c 	add.w	r3, r7, #12
 800975c:	4619      	mov	r1, r3
 800975e:	4806      	ldr	r0, [pc, #24]	; (8009778 <xMBPortTimersInit+0x70>)
 8009760:	f7f9 fc60 	bl	8003024 <HAL_TIMEx_MasterConfigSynchronization>
 8009764:	4603      	mov	r3, r0
 8009766:	2b00      	cmp	r3, #0
 8009768:	d001      	beq.n	800976e <xMBPortTimersInit+0x66>
  {
    return FALSE;
 800976a:	2300      	movs	r3, #0
 800976c:	e000      	b.n	8009770 <xMBPortTimersInit+0x68>
  }
  
  return TRUE;
 800976e:	2301      	movs	r3, #1
}
 8009770:	4618      	mov	r0, r3
 8009772:	3718      	adds	r7, #24
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}
 8009778:	20004eb0 	.word	0x20004eb0
 800977c:	40001000 	.word	0x40001000
 8009780:	431bde83 	.word	0x431bde83
 8009784:	20004be8 	.word	0x20004be8

08009788 <vMBPortTimersEnable>:
 
void
vMBPortTimersEnable(  )
{
 8009788:	b580      	push	{r7, lr}
 800978a:	af00      	add	r7, sp, #0
  /* Enable the timer with the timeout passed to xMBPortTimersInit( ) */
  downcounter = timeout;
 800978c:	4b04      	ldr	r3, [pc, #16]	; (80097a0 <vMBPortTimersEnable+0x18>)
 800978e:	881a      	ldrh	r2, [r3, #0]
 8009790:	4b04      	ldr	r3, [pc, #16]	; (80097a4 <vMBPortTimersEnable+0x1c>)
 8009792:	801a      	strh	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim6);
 8009794:	4804      	ldr	r0, [pc, #16]	; (80097a8 <vMBPortTimersEnable+0x20>)
 8009796:	f7f9 f9b7 	bl	8002b08 <HAL_TIM_Base_Start_IT>
}
 800979a:	bf00      	nop
 800979c:	bd80      	pop	{r7, pc}
 800979e:	bf00      	nop
 80097a0:	20004be8 	.word	0x20004be8
 80097a4:	20004bea 	.word	0x20004bea
 80097a8:	20004eb0 	.word	0x20004eb0

080097ac <vMBPortTimersDisable>:
 
void
vMBPortTimersDisable(  )
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	af00      	add	r7, sp, #0
  /* Disable any pending timers. */
  HAL_TIM_Base_Stop_IT(&htim6);
 80097b0:	4802      	ldr	r0, [pc, #8]	; (80097bc <vMBPortTimersDisable+0x10>)
 80097b2:	f7f9 fa21 	bl	8002bf8 <HAL_TIM_Base_Stop_IT>
}
 80097b6:	bf00      	nop
 80097b8:	bd80      	pop	{r7, pc}
 80097ba:	bf00      	nop
 80097bc:	20004eb0 	.word	0x20004eb0

080097c0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	if(__HAL_TIM_GET_FLAG(&htim6, TIM_FLAG_UPDATE) != RESET
 80097c4:	4b12      	ldr	r3, [pc, #72]	; (8009810 <TIM6_DAC_IRQHandler+0x50>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	691b      	ldr	r3, [r3, #16]
 80097ca:	f003 0301 	and.w	r3, r3, #1
 80097ce:	2b01      	cmp	r3, #1
 80097d0:	d118      	bne.n	8009804 <TIM6_DAC_IRQHandler+0x44>
	   && __HAL_TIM_GET_IT_SOURCE(&htim6, TIM_IT_UPDATE) !=RESET)
 80097d2:	4b0f      	ldr	r3, [pc, #60]	; (8009810 <TIM6_DAC_IRQHandler+0x50>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	68db      	ldr	r3, [r3, #12]
 80097d8:	f003 0301 	and.w	r3, r3, #1
 80097dc:	2b01      	cmp	r3, #1
 80097de:	d111      	bne.n	8009804 <TIM6_DAC_IRQHandler+0x44>
	{
		__HAL_TIM_CLEAR_IT(&htim6, TIM_IT_UPDATE);
 80097e0:	4b0b      	ldr	r3, [pc, #44]	; (8009810 <TIM6_DAC_IRQHandler+0x50>)
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f06f 0201 	mvn.w	r2, #1
 80097e8:	611a      	str	r2, [r3, #16]
		if (!--downcounter)
 80097ea:	4b0a      	ldr	r3, [pc, #40]	; (8009814 <TIM6_DAC_IRQHandler+0x54>)
 80097ec:	881b      	ldrh	r3, [r3, #0]
 80097ee:	3b01      	subs	r3, #1
 80097f0:	b29a      	uxth	r2, r3
 80097f2:	4b08      	ldr	r3, [pc, #32]	; (8009814 <TIM6_DAC_IRQHandler+0x54>)
 80097f4:	801a      	strh	r2, [r3, #0]
 80097f6:	4b07      	ldr	r3, [pc, #28]	; (8009814 <TIM6_DAC_IRQHandler+0x54>)
 80097f8:	881b      	ldrh	r3, [r3, #0]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d102      	bne.n	8009804 <TIM6_DAC_IRQHandler+0x44>
		{
			pxMBPortCBTimerExpired();	// it is "xMBRTUTimerT35Expired()"
 80097fe:	4b06      	ldr	r3, [pc, #24]	; (8009818 <TIM6_DAC_IRQHandler+0x58>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4798      	blx	r3
			//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
			//todo return;
		}
	}
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8009804:	4802      	ldr	r0, [pc, #8]	; (8009810 <TIM6_DAC_IRQHandler+0x50>)
 8009806:	f7f9 fa26 	bl	8002c56 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800980a:	bf00      	nop
 800980c:	bd80      	pop	{r7, pc}
 800980e:	bf00      	nop
 8009810:	20004eb0 	.word	0x20004eb0
 8009814:	20004bea 	.word	0x20004bea
 8009818:	20005060 	.word	0x20005060

0800981c <xMBMasterPortTimersInit>:
 void TIM7_IRQHandler(void);

/* ----------------------- Start implementation -----------------------------*/

BOOL xMBMasterPortTimersInit(USHORT usTim7Timerout50us)	//each entering ISRTIM7 is 50us
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b086      	sub	sp, #24
 8009820:	af00      	add	r7, sp, #0
 8009822:	4603      	mov	r3, r0
 8009824:	80fb      	strh	r3, [r7, #6]
	  TIM_MasterConfigTypeDef sMasterConfig;

	  htim7.Instance = TIM7;
 8009826:	4b19      	ldr	r3, [pc, #100]	; (800988c <xMBMasterPortTimersInit+0x70>)
 8009828:	4a19      	ldr	r2, [pc, #100]	; (8009890 <xMBMasterPortTimersInit+0x74>)
 800982a:	601a      	str	r2, [r3, #0]
	  htim7.Init.Prescaler = (2 * HAL_RCC_GetPCLK1Freq() / 1000000) - 1;
 800982c:	f7f8 fc92 	bl	8002154 <HAL_RCC_GetPCLK1Freq>
 8009830:	4603      	mov	r3, r0
 8009832:	005b      	lsls	r3, r3, #1
 8009834:	4a17      	ldr	r2, [pc, #92]	; (8009894 <xMBMasterPortTimersInit+0x78>)
 8009836:	fba2 2303 	umull	r2, r3, r2, r3
 800983a:	0c9b      	lsrs	r3, r3, #18
 800983c:	3b01      	subs	r3, #1
 800983e:	4a13      	ldr	r2, [pc, #76]	; (800988c <xMBMasterPortTimersInit+0x70>)
 8009840:	6053      	str	r3, [r2, #4]
	  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009842:	4b12      	ldr	r3, [pc, #72]	; (800988c <xMBMasterPortTimersInit+0x70>)
 8009844:	2200      	movs	r2, #0
 8009846:	609a      	str	r2, [r3, #8]
	  htim7.Init.Period = 50 - 1;
 8009848:	4b10      	ldr	r3, [pc, #64]	; (800988c <xMBMasterPortTimersInit+0x70>)
 800984a:	2231      	movs	r2, #49	; 0x31
 800984c:	60da      	str	r2, [r3, #12]

	  t35timer = usTim7Timerout50us;	//1.75 ms for t35 timeout
 800984e:	4a12      	ldr	r2, [pc, #72]	; (8009898 <xMBMasterPortTimersInit+0x7c>)
 8009850:	88fb      	ldrh	r3, [r7, #6]
 8009852:	8013      	strh	r3, [r2, #0]
	  	  	  	  	  	  	  	  	  	//user should set t35timer = 36 <=> 1800 us

	  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8009854:	480d      	ldr	r0, [pc, #52]	; (800988c <xMBMasterPortTimersInit+0x70>)
 8009856:	f7f9 f8ff 	bl	8002a58 <HAL_TIM_Base_Init>
 800985a:	4603      	mov	r3, r0
 800985c:	2b00      	cmp	r3, #0
 800985e:	d001      	beq.n	8009864 <xMBMasterPortTimersInit+0x48>
	  {
	    return FALSE;
 8009860:	2300      	movs	r3, #0
 8009862:	e00f      	b.n	8009884 <xMBMasterPortTimersInit+0x68>
	  }

	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8009864:	2320      	movs	r3, #32
 8009866:	60fb      	str	r3, [r7, #12]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009868:	2300      	movs	r3, #0
 800986a:	617b      	str	r3, [r7, #20]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800986c:	f107 030c 	add.w	r3, r7, #12
 8009870:	4619      	mov	r1, r3
 8009872:	4806      	ldr	r0, [pc, #24]	; (800988c <xMBMasterPortTimersInit+0x70>)
 8009874:	f7f9 fbd6 	bl	8003024 <HAL_TIMEx_MasterConfigSynchronization>
 8009878:	4603      	mov	r3, r0
 800987a:	2b00      	cmp	r3, #0
 800987c:	d001      	beq.n	8009882 <xMBMasterPortTimersInit+0x66>
	  {
	    return FALSE;
 800987e:	2300      	movs	r3, #0
 8009880:	e000      	b.n	8009884 <xMBMasterPortTimersInit+0x68>
	  }

	  return TRUE;
 8009882:	2301      	movs	r3, #1
}
 8009884:	4618      	mov	r0, r3
 8009886:	3718      	adds	r7, #24
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}
 800988c:	20004f80 	.word	0x20004f80
 8009890:	40001400 	.word	0x40001400
 8009894:	431bde83 	.word	0x431bde83
 8009898:	20004bec 	.word	0x20004bec

0800989c <vMBMasterPortTimersT35Enable>:

void vMBMasterPortTimersT35Enable(void)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	af00      	add	r7, sp, #0
	  /* Enable the timer with the t35timer passed to xMBMasterPortTimersInit( ) */
	  mdowncounter = t35timer;
 80098a0:	4b04      	ldr	r3, [pc, #16]	; (80098b4 <vMBMasterPortTimersT35Enable+0x18>)
 80098a2:	881a      	ldrh	r2, [r3, #0]
 80098a4:	4b04      	ldr	r3, [pc, #16]	; (80098b8 <vMBMasterPortTimersT35Enable+0x1c>)
 80098a6:	801a      	strh	r2, [r3, #0]
	  HAL_TIM_Base_Start_IT(&htim7);
 80098a8:	4804      	ldr	r0, [pc, #16]	; (80098bc <vMBMasterPortTimersT35Enable+0x20>)
 80098aa:	f7f9 f92d 	bl	8002b08 <HAL_TIM_Base_Start_IT>

}
 80098ae:	bf00      	nop
 80098b0:	bd80      	pop	{r7, pc}
 80098b2:	bf00      	nop
 80098b4:	20004bec 	.word	0x20004bec
 80098b8:	20004bee 	.word	0x20004bee
 80098bc:	20004f80 	.word	0x20004f80

080098c0 <vMBMasterPortTimersConvertDelayEnable>:

void vMBMasterPortTimersConvertDelayEnable(void)	//be called from UART_ISR
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	af00      	add	r7, sp, #0
	mdowncounter = CONVERTTIMER_PERIOD;		//200ms
 80098c4:	4b04      	ldr	r3, [pc, #16]	; (80098d8 <vMBMasterPortTimersConvertDelayEnable+0x18>)
 80098c6:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80098ca:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim7);
 80098cc:	4803      	ldr	r0, [pc, #12]	; (80098dc <vMBMasterPortTimersConvertDelayEnable+0x1c>)
 80098ce:	f7f9 f91b 	bl	8002b08 <HAL_TIM_Base_Start_IT>

}
 80098d2:	bf00      	nop
 80098d4:	bd80      	pop	{r7, pc}
 80098d6:	bf00      	nop
 80098d8:	20004bee 	.word	0x20004bee
 80098dc:	20004f80 	.word	0x20004f80

080098e0 <vMBMasterPortTimersRespondTimeoutEnable>:

void vMBMasterPortTimersRespondTimeoutEnable(void)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	af00      	add	r7, sp, #0
	mdowncounter = RESPONSETIMER_PERIOD;	//900ms
 80098e4:	4b04      	ldr	r3, [pc, #16]	; (80098f8 <vMBMasterPortTimersRespondTimeoutEnable+0x18>)
 80098e6:	f244 6250 	movw	r2, #18000	; 0x4650
 80098ea:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim7);
 80098ec:	4803      	ldr	r0, [pc, #12]	; (80098fc <vMBMasterPortTimersRespondTimeoutEnable+0x1c>)
 80098ee:	f7f9 f90b 	bl	8002b08 <HAL_TIM_Base_Start_IT>
}
 80098f2:	bf00      	nop
 80098f4:	bd80      	pop	{r7, pc}
 80098f6:	bf00      	nop
 80098f8:	20004bee 	.word	0x20004bee
 80098fc:	20004f80 	.word	0x20004f80

08009900 <vMBMasterPortTimersDisable>:

void vMBMasterPortTimersDisable(void)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	af00      	add	r7, sp, #0
	  /* Disable any pending timers. */
	  HAL_TIM_Base_Stop_IT(&htim7);
 8009904:	4802      	ldr	r0, [pc, #8]	; (8009910 <vMBMasterPortTimersDisable+0x10>)
 8009906:	f7f9 f977 	bl	8002bf8 <HAL_TIM_Base_Stop_IT>
}
 800990a:	bf00      	nop
 800990c:	bd80      	pop	{r7, pc}
 800990e:	bf00      	nop
 8009910:	20004f80 	.word	0x20004f80

08009914 <TIM7_IRQHandler>:
/**
  * @brief This function handles TIM7 global interrupt.
  */

 void TIM7_IRQHandler(void)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	if(__HAL_TIM_GET_FLAG(&htim7, TIM_FLAG_UPDATE) != RESET
 8009918:	4b12      	ldr	r3, [pc, #72]	; (8009964 <TIM7_IRQHandler+0x50>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	691b      	ldr	r3, [r3, #16]
 800991e:	f003 0301 	and.w	r3, r3, #1
 8009922:	2b01      	cmp	r3, #1
 8009924:	d118      	bne.n	8009958 <TIM7_IRQHandler+0x44>
	   && __HAL_TIM_GET_IT_SOURCE(&htim7, TIM_IT_UPDATE) !=RESET)
 8009926:	4b0f      	ldr	r3, [pc, #60]	; (8009964 <TIM7_IRQHandler+0x50>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	68db      	ldr	r3, [r3, #12]
 800992c:	f003 0301 	and.w	r3, r3, #1
 8009930:	2b01      	cmp	r3, #1
 8009932:	d111      	bne.n	8009958 <TIM7_IRQHandler+0x44>
	{
		__HAL_TIM_CLEAR_IT(&htim7, TIM_IT_UPDATE);
 8009934:	4b0b      	ldr	r3, [pc, #44]	; (8009964 <TIM7_IRQHandler+0x50>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f06f 0201 	mvn.w	r2, #1
 800993c:	611a      	str	r2, [r3, #16]
		if (!--mdowncounter)
 800993e:	4b0a      	ldr	r3, [pc, #40]	; (8009968 <TIM7_IRQHandler+0x54>)
 8009940:	881b      	ldrh	r3, [r3, #0]
 8009942:	3b01      	subs	r3, #1
 8009944:	b29a      	uxth	r2, r3
 8009946:	4b08      	ldr	r3, [pc, #32]	; (8009968 <TIM7_IRQHandler+0x54>)
 8009948:	801a      	strh	r2, [r3, #0]
 800994a:	4b07      	ldr	r3, [pc, #28]	; (8009968 <TIM7_IRQHandler+0x54>)
 800994c:	881b      	ldrh	r3, [r3, #0]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d102      	bne.n	8009958 <TIM7_IRQHandler+0x44>
		{
			pxMBMasterPortCBTimerExpired();	// it is "xMBMasterRTUTimerExpired()"
 8009952:	4b06      	ldr	r3, [pc, #24]	; (800996c <TIM7_IRQHandler+0x58>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	4798      	blx	r3
		}
	}
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8009958:	4802      	ldr	r0, [pc, #8]	; (8009964 <TIM7_IRQHandler+0x50>)
 800995a:	f7f9 f97c 	bl	8002c56 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800995e:	bf00      	nop
 8009960:	bd80      	pop	{r7, pc}
 8009962:	bf00      	nop
 8009964:	20004f80 	.word	0x20004f80
 8009968:	20004bee 	.word	0x20004bee
 800996c:	20005070 	.word	0x20005070

08009970 <eMBRegInputCB>:
 *
 * @return result
 */

eMBErrorCode eMBRegInputCB(UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
{
 8009970:	b480      	push	{r7}
 8009972:	b087      	sub	sp, #28
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
 8009978:	460b      	mov	r3, r1
 800997a:	807b      	strh	r3, [r7, #2]
 800997c:	4613      	mov	r3, r2
 800997e:	803b      	strh	r3, [r7, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 8009980:	2300      	movs	r3, #0
 8009982:	75fb      	strb	r3, [r7, #23]
    USHORT *        pusRegInputBuf;
    USHORT          REG_INPUT_START;
    USHORT          REG_INPUT_NREGS;
    USHORT          usRegInStart;

    pusRegInputBuf = usSRegInBuf;
 8009984:	4b22      	ldr	r3, [pc, #136]	; (8009a10 <eMBRegInputCB+0xa0>)
 8009986:	613b      	str	r3, [r7, #16]
    REG_INPUT_START = S_REG_INPUT_START;
 8009988:	2300      	movs	r3, #0
 800998a:	81fb      	strh	r3, [r7, #14]
    REG_INPUT_NREGS = S_REG_INPUT_NREGS;
 800998c:	2310      	movs	r3, #16
 800998e:	81bb      	strh	r3, [r7, #12]
    usRegInStart = usSRegInStart;
 8009990:	4b20      	ldr	r3, [pc, #128]	; (8009a14 <eMBRegInputCB+0xa4>)
 8009992:	881b      	ldrh	r3, [r3, #0]
 8009994:	817b      	strh	r3, [r7, #10]

    /* it already plus one in modbus function method. */
    usAddress--;
 8009996:	887b      	ldrh	r3, [r7, #2]
 8009998:	3b01      	subs	r3, #1
 800999a:	807b      	strh	r3, [r7, #2]

    if ((usAddress >= REG_INPUT_START)
 800999c:	887a      	ldrh	r2, [r7, #2]
 800999e:	89fb      	ldrh	r3, [r7, #14]
 80099a0:	429a      	cmp	r2, r3
 80099a2:	d32c      	bcc.n	80099fe <eMBRegInputCB+0x8e>
            && (usAddress + usNRegs <= REG_INPUT_START + REG_INPUT_NREGS))
 80099a4:	887a      	ldrh	r2, [r7, #2]
 80099a6:	883b      	ldrh	r3, [r7, #0]
 80099a8:	441a      	add	r2, r3
 80099aa:	89f9      	ldrh	r1, [r7, #14]
 80099ac:	89bb      	ldrh	r3, [r7, #12]
 80099ae:	440b      	add	r3, r1
 80099b0:	429a      	cmp	r2, r3
 80099b2:	dc24      	bgt.n	80099fe <eMBRegInputCB+0x8e>
    {
        iRegIndex = usAddress - usRegInStart;
 80099b4:	887a      	ldrh	r2, [r7, #2]
 80099b6:	897b      	ldrh	r3, [r7, #10]
 80099b8:	1ad3      	subs	r3, r2, r3
 80099ba:	82bb      	strh	r3, [r7, #20]
        while (usNRegs > 0)
 80099bc:	e01b      	b.n	80099f6 <eMBRegInputCB+0x86>
        {
            *pucRegBuffer++ = (UCHAR) (pusRegInputBuf[iRegIndex] >> 8);
 80099be:	8abb      	ldrh	r3, [r7, #20]
 80099c0:	005b      	lsls	r3, r3, #1
 80099c2:	693a      	ldr	r2, [r7, #16]
 80099c4:	4413      	add	r3, r2
 80099c6:	881b      	ldrh	r3, [r3, #0]
 80099c8:	0a1b      	lsrs	r3, r3, #8
 80099ca:	b299      	uxth	r1, r3
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	1c5a      	adds	r2, r3, #1
 80099d0:	607a      	str	r2, [r7, #4]
 80099d2:	b2ca      	uxtb	r2, r1
 80099d4:	701a      	strb	r2, [r3, #0]
            *pucRegBuffer++ = (UCHAR) (pusRegInputBuf[iRegIndex] & 0xFF);
 80099d6:	8abb      	ldrh	r3, [r7, #20]
 80099d8:	005b      	lsls	r3, r3, #1
 80099da:	693a      	ldr	r2, [r7, #16]
 80099dc:	4413      	add	r3, r2
 80099de:	8819      	ldrh	r1, [r3, #0]
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	1c5a      	adds	r2, r3, #1
 80099e4:	607a      	str	r2, [r7, #4]
 80099e6:	b2ca      	uxtb	r2, r1
 80099e8:	701a      	strb	r2, [r3, #0]
            iRegIndex++;
 80099ea:	8abb      	ldrh	r3, [r7, #20]
 80099ec:	3301      	adds	r3, #1
 80099ee:	82bb      	strh	r3, [r7, #20]
            usNRegs--;
 80099f0:	883b      	ldrh	r3, [r7, #0]
 80099f2:	3b01      	subs	r3, #1
 80099f4:	803b      	strh	r3, [r7, #0]
        while (usNRegs > 0)
 80099f6:	883b      	ldrh	r3, [r7, #0]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d1e0      	bne.n	80099be <eMBRegInputCB+0x4e>
    if ((usAddress >= REG_INPUT_START)
 80099fc:	e001      	b.n	8009a02 <eMBRegInputCB+0x92>
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 80099fe:	2301      	movs	r3, #1
 8009a00:	75fb      	strb	r3, [r7, #23]
    }

    return eStatus;
 8009a02:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	371c      	adds	r7, #28
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0e:	4770      	bx	lr
 8009a10:	200050bc 	.word	0x200050bc
 8009a14:	20004bf4 	.word	0x20004bf4

08009a18 <eMBRegHoldingCB>:
 *
 * @return result
 */
eMBErrorCode eMBRegHoldingCB(UCHAR * pucRegBuffer, USHORT usAddress,
        USHORT usNRegs, eMBRegisterMode eMode)
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b089      	sub	sp, #36	; 0x24
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	60f8      	str	r0, [r7, #12]
 8009a20:	4608      	mov	r0, r1
 8009a22:	4611      	mov	r1, r2
 8009a24:	461a      	mov	r2, r3
 8009a26:	4603      	mov	r3, r0
 8009a28:	817b      	strh	r3, [r7, #10]
 8009a2a:	460b      	mov	r3, r1
 8009a2c:	813b      	strh	r3, [r7, #8]
 8009a2e:	4613      	mov	r3, r2
 8009a30:	71fb      	strb	r3, [r7, #7]
    eMBErrorCode    eStatus = MB_ENOERR;
 8009a32:	2300      	movs	r3, #0
 8009a34:	77fb      	strb	r3, [r7, #31]
    USHORT *        pusRegHoldingBuf;
    USHORT          REG_HOLDING_START;
    USHORT          REG_HOLDING_NREGS;
    USHORT          usRegHoldStart;

    pusRegHoldingBuf = usSRegHoldBuf;
 8009a36:	4b39      	ldr	r3, [pc, #228]	; (8009b1c <eMBRegHoldingCB+0x104>)
 8009a38:	61bb      	str	r3, [r7, #24]
    REG_HOLDING_START = S_REG_HOLDING_START;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	82fb      	strh	r3, [r7, #22]
    REG_HOLDING_NREGS = S_REG_HOLDING_NREGS;
 8009a3e:	2310      	movs	r3, #16
 8009a40:	82bb      	strh	r3, [r7, #20]
    usRegHoldStart = usSRegHoldStart;
 8009a42:	4b37      	ldr	r3, [pc, #220]	; (8009b20 <eMBRegHoldingCB+0x108>)
 8009a44:	881b      	ldrh	r3, [r3, #0]
 8009a46:	827b      	strh	r3, [r7, #18]

    /* it already plus one in modbus function method. */
    usAddress--;
 8009a48:	897b      	ldrh	r3, [r7, #10]
 8009a4a:	3b01      	subs	r3, #1
 8009a4c:	817b      	strh	r3, [r7, #10]

    if ((usAddress >= REG_HOLDING_START)
 8009a4e:	897a      	ldrh	r2, [r7, #10]
 8009a50:	8afb      	ldrh	r3, [r7, #22]
 8009a52:	429a      	cmp	r2, r3
 8009a54:	d359      	bcc.n	8009b0a <eMBRegHoldingCB+0xf2>
            && (usAddress + usNRegs <= REG_HOLDING_START + REG_HOLDING_NREGS))
 8009a56:	897a      	ldrh	r2, [r7, #10]
 8009a58:	893b      	ldrh	r3, [r7, #8]
 8009a5a:	441a      	add	r2, r3
 8009a5c:	8af9      	ldrh	r1, [r7, #22]
 8009a5e:	8abb      	ldrh	r3, [r7, #20]
 8009a60:	440b      	add	r3, r1
 8009a62:	429a      	cmp	r2, r3
 8009a64:	dc51      	bgt.n	8009b0a <eMBRegHoldingCB+0xf2>
    {
        iRegIndex = usAddress - usRegHoldStart;
 8009a66:	897a      	ldrh	r2, [r7, #10]
 8009a68:	8a7b      	ldrh	r3, [r7, #18]
 8009a6a:	1ad3      	subs	r3, r2, r3
 8009a6c:	83bb      	strh	r3, [r7, #28]
        switch (eMode)
 8009a6e:	79fb      	ldrb	r3, [r7, #7]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d01e      	beq.n	8009ab2 <eMBRegHoldingCB+0x9a>
 8009a74:	2b01      	cmp	r3, #1
 8009a76:	d043      	beq.n	8009b00 <eMBRegHoldingCB+0xe8>
 8009a78:	e049      	b.n	8009b0e <eMBRegHoldingCB+0xf6>
        {
        /* read current register values from the protocol stack. */
        case MB_REG_READ:
            while (usNRegs > 0)
            {
                *pucRegBuffer++ = (UCHAR) (pusRegHoldingBuf[iRegIndex] >> 8);
 8009a7a:	8bbb      	ldrh	r3, [r7, #28]
 8009a7c:	005b      	lsls	r3, r3, #1
 8009a7e:	69ba      	ldr	r2, [r7, #24]
 8009a80:	4413      	add	r3, r2
 8009a82:	881b      	ldrh	r3, [r3, #0]
 8009a84:	0a1b      	lsrs	r3, r3, #8
 8009a86:	b299      	uxth	r1, r3
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	1c5a      	adds	r2, r3, #1
 8009a8c:	60fa      	str	r2, [r7, #12]
 8009a8e:	b2ca      	uxtb	r2, r1
 8009a90:	701a      	strb	r2, [r3, #0]
                *pucRegBuffer++ = (UCHAR) (pusRegHoldingBuf[iRegIndex] & 0xFF);
 8009a92:	8bbb      	ldrh	r3, [r7, #28]
 8009a94:	005b      	lsls	r3, r3, #1
 8009a96:	69ba      	ldr	r2, [r7, #24]
 8009a98:	4413      	add	r3, r2
 8009a9a:	8819      	ldrh	r1, [r3, #0]
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	1c5a      	adds	r2, r3, #1
 8009aa0:	60fa      	str	r2, [r7, #12]
 8009aa2:	b2ca      	uxtb	r2, r1
 8009aa4:	701a      	strb	r2, [r3, #0]
                iRegIndex++;
 8009aa6:	8bbb      	ldrh	r3, [r7, #28]
 8009aa8:	3301      	adds	r3, #1
 8009aaa:	83bb      	strh	r3, [r7, #28]
                usNRegs--;
 8009aac:	893b      	ldrh	r3, [r7, #8]
 8009aae:	3b01      	subs	r3, #1
 8009ab0:	813b      	strh	r3, [r7, #8]
            while (usNRegs > 0)
 8009ab2:	893b      	ldrh	r3, [r7, #8]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d1e0      	bne.n	8009a7a <eMBRegHoldingCB+0x62>
            }
            break;
 8009ab8:	e026      	b.n	8009b08 <eMBRegHoldingCB+0xf0>

        /* write current register values with new values from the protocol stack. */
        case MB_REG_WRITE:
            while (usNRegs > 0)
            {
                pusRegHoldingBuf[iRegIndex] = *pucRegBuffer++ << 8;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	1c5a      	adds	r2, r3, #1
 8009abe:	60fa      	str	r2, [r7, #12]
 8009ac0:	781b      	ldrb	r3, [r3, #0]
 8009ac2:	b29a      	uxth	r2, r3
 8009ac4:	8bbb      	ldrh	r3, [r7, #28]
 8009ac6:	005b      	lsls	r3, r3, #1
 8009ac8:	69b9      	ldr	r1, [r7, #24]
 8009aca:	440b      	add	r3, r1
 8009acc:	0212      	lsls	r2, r2, #8
 8009ace:	b292      	uxth	r2, r2
 8009ad0:	801a      	strh	r2, [r3, #0]
                pusRegHoldingBuf[iRegIndex] |= *pucRegBuffer++;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	1c5a      	adds	r2, r3, #1
 8009ad6:	60fa      	str	r2, [r7, #12]
 8009ad8:	7818      	ldrb	r0, [r3, #0]
 8009ada:	8bbb      	ldrh	r3, [r7, #28]
 8009adc:	005b      	lsls	r3, r3, #1
 8009ade:	69ba      	ldr	r2, [r7, #24]
 8009ae0:	4413      	add	r3, r2
 8009ae2:	8819      	ldrh	r1, [r3, #0]
 8009ae4:	b282      	uxth	r2, r0
 8009ae6:	8bbb      	ldrh	r3, [r7, #28]
 8009ae8:	005b      	lsls	r3, r3, #1
 8009aea:	69b8      	ldr	r0, [r7, #24]
 8009aec:	4403      	add	r3, r0
 8009aee:	430a      	orrs	r2, r1
 8009af0:	b292      	uxth	r2, r2
 8009af2:	801a      	strh	r2, [r3, #0]
                iRegIndex++;
 8009af4:	8bbb      	ldrh	r3, [r7, #28]
 8009af6:	3301      	adds	r3, #1
 8009af8:	83bb      	strh	r3, [r7, #28]
                usNRegs--;
 8009afa:	893b      	ldrh	r3, [r7, #8]
 8009afc:	3b01      	subs	r3, #1
 8009afe:	813b      	strh	r3, [r7, #8]
            while (usNRegs > 0)
 8009b00:	893b      	ldrh	r3, [r7, #8]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d1d9      	bne.n	8009aba <eMBRegHoldingCB+0xa2>
            }
            break;
 8009b06:	bf00      	nop
        switch (eMode)
 8009b08:	e001      	b.n	8009b0e <eMBRegHoldingCB+0xf6>
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	77fb      	strb	r3, [r7, #31]
    }
    return eStatus;
 8009b0e:	7ffb      	ldrb	r3, [r7, #31]
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3724      	adds	r7, #36	; 0x24
 8009b14:	46bd      	mov	sp, r7
 8009b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1a:	4770      	bx	lr
 8009b1c:	2000509c 	.word	0x2000509c
 8009b20:	20004bf6 	.word	0x20004bf6

08009b24 <eMBRegCoilsCB>:
 *
 * @return result
 */
eMBErrorCode eMBRegCoilsCB(UCHAR * pucRegBuffer, USHORT usAddress,
        USHORT usNCoils, eMBRegisterMode eMode)
{
 8009b24:	b590      	push	{r4, r7, lr}
 8009b26:	b08b      	sub	sp, #44	; 0x2c
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	60f8      	str	r0, [r7, #12]
 8009b2c:	4608      	mov	r0, r1
 8009b2e:	4611      	mov	r1, r2
 8009b30:	461a      	mov	r2, r3
 8009b32:	4603      	mov	r3, r0
 8009b34:	817b      	strh	r3, [r7, #10]
 8009b36:	460b      	mov	r3, r1
 8009b38:	813b      	strh	r3, [r7, #8]
 8009b3a:	4613      	mov	r3, r2
 8009b3c:	71fb      	strb	r3, [r7, #7]
    eMBErrorCode    eStatus = MB_ENOERR;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    USHORT          iRegIndex , iRegBitIndex , iNReg;
    UCHAR *         pucCoilBuf;
    USHORT          COIL_START;
    USHORT          COIL_NCOILS;
    USHORT          usCoilStart;
    iNReg =  usNCoils / 8 + 1;
 8009b44:	893b      	ldrh	r3, [r7, #8]
 8009b46:	08db      	lsrs	r3, r3, #3
 8009b48:	b29b      	uxth	r3, r3
 8009b4a:	3301      	adds	r3, #1
 8009b4c:	847b      	strh	r3, [r7, #34]	; 0x22

    pucCoilBuf = ucSCoilBuf;
 8009b4e:	4b4a      	ldr	r3, [pc, #296]	; (8009c78 <eMBRegCoilsCB+0x154>)
 8009b50:	61fb      	str	r3, [r7, #28]
    COIL_START = S_COIL_START;
 8009b52:	2300      	movs	r3, #0
 8009b54:	837b      	strh	r3, [r7, #26]
    COIL_NCOILS = S_COIL_NCOILS;
 8009b56:	2308      	movs	r3, #8
 8009b58:	833b      	strh	r3, [r7, #24]
    usCoilStart = usSCoilStart;
 8009b5a:	4b48      	ldr	r3, [pc, #288]	; (8009c7c <eMBRegCoilsCB+0x158>)
 8009b5c:	881b      	ldrh	r3, [r3, #0]
 8009b5e:	82fb      	strh	r3, [r7, #22]

    /* it already plus one in modbus function method. */
    usAddress--;
 8009b60:	897b      	ldrh	r3, [r7, #10]
 8009b62:	3b01      	subs	r3, #1
 8009b64:	817b      	strh	r3, [r7, #10]

    if( ( usAddress >= COIL_START ) &&
 8009b66:	897a      	ldrh	r2, [r7, #10]
 8009b68:	8b7b      	ldrh	r3, [r7, #26]
 8009b6a:	429a      	cmp	r2, r3
 8009b6c:	d37b      	bcc.n	8009c66 <eMBRegCoilsCB+0x142>
        ( usAddress + usNCoils <= COIL_START + COIL_NCOILS ) )
 8009b6e:	897a      	ldrh	r2, [r7, #10]
 8009b70:	893b      	ldrh	r3, [r7, #8]
 8009b72:	441a      	add	r2, r3
 8009b74:	8b79      	ldrh	r1, [r7, #26]
 8009b76:	8b3b      	ldrh	r3, [r7, #24]
 8009b78:	440b      	add	r3, r1
    if( ( usAddress >= COIL_START ) &&
 8009b7a:	429a      	cmp	r2, r3
 8009b7c:	dc73      	bgt.n	8009c66 <eMBRegCoilsCB+0x142>
    {
        iRegIndex = (USHORT) (usAddress - usCoilStart) / 8;
 8009b7e:	897a      	ldrh	r2, [r7, #10]
 8009b80:	8afb      	ldrh	r3, [r7, #22]
 8009b82:	1ad3      	subs	r3, r2, r3
 8009b84:	b29b      	uxth	r3, r3
 8009b86:	08db      	lsrs	r3, r3, #3
 8009b88:	84bb      	strh	r3, [r7, #36]	; 0x24
        iRegBitIndex = (USHORT) (usAddress - usCoilStart) % 8;
 8009b8a:	897a      	ldrh	r2, [r7, #10]
 8009b8c:	8afb      	ldrh	r3, [r7, #22]
 8009b8e:	1ad3      	subs	r3, r2, r3
 8009b90:	b29b      	uxth	r3, r3
 8009b92:	f003 0307 	and.w	r3, r3, #7
 8009b96:	82bb      	strh	r3, [r7, #20]
        switch ( eMode )
 8009b98:	79fb      	ldrb	r3, [r7, #7]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d015      	beq.n	8009bca <eMBRegCoilsCB+0xa6>
 8009b9e:	2b01      	cmp	r3, #1
 8009ba0:	d045      	beq.n	8009c2e <eMBRegCoilsCB+0x10a>
 8009ba2:	e063      	b.n	8009c6c <eMBRegCoilsCB+0x148>
        {
        /* read current coil values from the protocol stack. */
        case MB_REG_READ:
            while (iNReg > 0)
            {
                *pucRegBuffer++ = xMBUtilGetBits(&pucCoilBuf[iRegIndex++],
 8009ba4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ba6:	1c5a      	adds	r2, r3, #1
 8009ba8:	84ba      	strh	r2, [r7, #36]	; 0x24
 8009baa:	461a      	mov	r2, r3
 8009bac:	69fb      	ldr	r3, [r7, #28]
 8009bae:	1898      	adds	r0, r3, r2
 8009bb0:	68fc      	ldr	r4, [r7, #12]
 8009bb2:	1c63      	adds	r3, r4, #1
 8009bb4:	60fb      	str	r3, [r7, #12]
 8009bb6:	8abb      	ldrh	r3, [r7, #20]
 8009bb8:	2208      	movs	r2, #8
 8009bba:	4619      	mov	r1, r3
 8009bbc:	f7fe fd5a 	bl	8008674 <xMBUtilGetBits>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	7023      	strb	r3, [r4, #0]
                        iRegBitIndex, 8);
                iNReg--;
 8009bc4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009bc6:	3b01      	subs	r3, #1
 8009bc8:	847b      	strh	r3, [r7, #34]	; 0x22
            while (iNReg > 0)
 8009bca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d1e9      	bne.n	8009ba4 <eMBRegCoilsCB+0x80>
            }
            pucRegBuffer--;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	3b01      	subs	r3, #1
 8009bd4:	60fb      	str	r3, [r7, #12]
            /* last coils */
            usNCoils = usNCoils % 8;
 8009bd6:	893b      	ldrh	r3, [r7, #8]
 8009bd8:	f003 0307 	and.w	r3, r3, #7
 8009bdc:	813b      	strh	r3, [r7, #8]
            /* filling zero to high bit */
            *pucRegBuffer = *pucRegBuffer << (8 - usNCoils);
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	781b      	ldrb	r3, [r3, #0]
 8009be2:	461a      	mov	r2, r3
 8009be4:	893b      	ldrh	r3, [r7, #8]
 8009be6:	f1c3 0308 	rsb	r3, r3, #8
 8009bea:	fa02 f303 	lsl.w	r3, r2, r3
 8009bee:	b2da      	uxtb	r2, r3
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	701a      	strb	r2, [r3, #0]
            *pucRegBuffer = *pucRegBuffer >> (8 - usNCoils);
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	781b      	ldrb	r3, [r3, #0]
 8009bf8:	461a      	mov	r2, r3
 8009bfa:	893b      	ldrh	r3, [r7, #8]
 8009bfc:	f1c3 0308 	rsb	r3, r3, #8
 8009c00:	fa42 f303 	asr.w	r3, r2, r3
 8009c04:	b2da      	uxtb	r2, r3
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	701a      	strb	r2, [r3, #0]
            break;
 8009c0a:	e02b      	b.n	8009c64 <eMBRegCoilsCB+0x140>

            /* write current coil values with new values from the protocol stack. */
        case MB_REG_WRITE:
            while (iNReg > 1)
            {
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, 8,
 8009c0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c0e:	1c5a      	adds	r2, r3, #1
 8009c10:	84ba      	strh	r2, [r7, #36]	; 0x24
 8009c12:	461a      	mov	r2, r3
 8009c14:	69fb      	ldr	r3, [r7, #28]
 8009c16:	1898      	adds	r0, r3, r2
                        *pucRegBuffer++);
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	1c5a      	adds	r2, r3, #1
 8009c1c:	60fa      	str	r2, [r7, #12]
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, 8,
 8009c1e:	781b      	ldrb	r3, [r3, #0]
 8009c20:	8ab9      	ldrh	r1, [r7, #20]
 8009c22:	2208      	movs	r2, #8
 8009c24:	f7fe fcba 	bl	800859c <xMBUtilSetBits>
                iNReg--;
 8009c28:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009c2a:	3b01      	subs	r3, #1
 8009c2c:	847b      	strh	r3, [r7, #34]	; 0x22
            while (iNReg > 1)
 8009c2e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009c30:	2b01      	cmp	r3, #1
 8009c32:	d8eb      	bhi.n	8009c0c <eMBRegCoilsCB+0xe8>
            }
            /* last coils */
            usNCoils = usNCoils % 8;
 8009c34:	893b      	ldrh	r3, [r7, #8]
 8009c36:	f003 0307 	and.w	r3, r3, #7
 8009c3a:	813b      	strh	r3, [r7, #8]
            /* xMBUtilSetBits has bug when ucNBits is zero */
            if (usNCoils != 0)
 8009c3c:	893b      	ldrh	r3, [r7, #8]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d00f      	beq.n	8009c62 <eMBRegCoilsCB+0x13e>
            {
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, usNCoils,
 8009c42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c44:	1c5a      	adds	r2, r3, #1
 8009c46:	84ba      	strh	r2, [r7, #36]	; 0x24
 8009c48:	461a      	mov	r2, r3
 8009c4a:	69fb      	ldr	r3, [r7, #28]
 8009c4c:	1898      	adds	r0, r3, r2
 8009c4e:	893b      	ldrh	r3, [r7, #8]
 8009c50:	b2dc      	uxtb	r4, r3
                        *pucRegBuffer++);
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	1c5a      	adds	r2, r3, #1
 8009c56:	60fa      	str	r2, [r7, #12]
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, usNCoils,
 8009c58:	781b      	ldrb	r3, [r3, #0]
 8009c5a:	8ab9      	ldrh	r1, [r7, #20]
 8009c5c:	4622      	mov	r2, r4
 8009c5e:	f7fe fc9d 	bl	800859c <xMBUtilSetBits>
            }
            break;
 8009c62:	bf00      	nop
        switch ( eMode )
 8009c64:	e002      	b.n	8009c6c <eMBRegCoilsCB+0x148>
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 8009c66:	2301      	movs	r3, #1
 8009c68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    return eStatus;
 8009c6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009c70:	4618      	mov	r0, r3
 8009c72:	372c      	adds	r7, #44	; 0x2c
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd90      	pop	{r4, r7, pc}
 8009c78:	20005094 	.word	0x20005094
 8009c7c:	20004bf2 	.word	0x20004bf2

08009c80 <eMBRegDiscreteCB>:
 * @param usNDiscrete discrete number
 *
 * @return result
 */
eMBErrorCode eMBRegDiscreteCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete )
{
 8009c80:	b590      	push	{r4, r7, lr}
 8009c82:	b089      	sub	sp, #36	; 0x24
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
 8009c88:	460b      	mov	r3, r1
 8009c8a:	807b      	strh	r3, [r7, #2]
 8009c8c:	4613      	mov	r3, r2
 8009c8e:	803b      	strh	r3, [r7, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 8009c90:	2300      	movs	r3, #0
 8009c92:	77fb      	strb	r3, [r7, #31]
    USHORT          iRegIndex , iRegBitIndex , iNReg;
    UCHAR *         pucDiscreteInputBuf;
    USHORT          DISCRETE_INPUT_START;
    USHORT          DISCRETE_INPUT_NDISCRETES;
    USHORT          usDiscreteInputStart;
    iNReg =  usNDiscrete / 8 + 1;
 8009c94:	883b      	ldrh	r3, [r7, #0]
 8009c96:	08db      	lsrs	r3, r3, #3
 8009c98:	b29b      	uxth	r3, r3
 8009c9a:	3301      	adds	r3, #1
 8009c9c:	837b      	strh	r3, [r7, #26]

    pucDiscreteInputBuf = ucSDiscInBuf;
 8009c9e:	4b30      	ldr	r3, [pc, #192]	; (8009d60 <eMBRegDiscreteCB+0xe0>)
 8009ca0:	617b      	str	r3, [r7, #20]
    DISCRETE_INPUT_START = S_DISCRETE_INPUT_START;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	827b      	strh	r3, [r7, #18]
    DISCRETE_INPUT_NDISCRETES = S_DISCRETE_INPUT_NDISCRETES;
 8009ca6:	2308      	movs	r3, #8
 8009ca8:	823b      	strh	r3, [r7, #16]
    usDiscreteInputStart = usSDiscInStart;
 8009caa:	4b2e      	ldr	r3, [pc, #184]	; (8009d64 <eMBRegDiscreteCB+0xe4>)
 8009cac:	881b      	ldrh	r3, [r3, #0]
 8009cae:	81fb      	strh	r3, [r7, #14]

    /* it already plus one in modbus function method. */
    usAddress--;
 8009cb0:	887b      	ldrh	r3, [r7, #2]
 8009cb2:	3b01      	subs	r3, #1
 8009cb4:	807b      	strh	r3, [r7, #2]

    if ((usAddress >= DISCRETE_INPUT_START)
 8009cb6:	887a      	ldrh	r2, [r7, #2]
 8009cb8:	8a7b      	ldrh	r3, [r7, #18]
 8009cba:	429a      	cmp	r2, r3
 8009cbc:	d349      	bcc.n	8009d52 <eMBRegDiscreteCB+0xd2>
            && (usAddress + usNDiscrete    <= DISCRETE_INPUT_START + DISCRETE_INPUT_NDISCRETES))
 8009cbe:	887a      	ldrh	r2, [r7, #2]
 8009cc0:	883b      	ldrh	r3, [r7, #0]
 8009cc2:	441a      	add	r2, r3
 8009cc4:	8a79      	ldrh	r1, [r7, #18]
 8009cc6:	8a3b      	ldrh	r3, [r7, #16]
 8009cc8:	440b      	add	r3, r1
 8009cca:	429a      	cmp	r2, r3
 8009ccc:	dc41      	bgt.n	8009d52 <eMBRegDiscreteCB+0xd2>
    {
        iRegIndex = (USHORT) (usAddress - usDiscreteInputStart) / 8;
 8009cce:	887a      	ldrh	r2, [r7, #2]
 8009cd0:	89fb      	ldrh	r3, [r7, #14]
 8009cd2:	1ad3      	subs	r3, r2, r3
 8009cd4:	b29b      	uxth	r3, r3
 8009cd6:	08db      	lsrs	r3, r3, #3
 8009cd8:	83bb      	strh	r3, [r7, #28]
        iRegBitIndex = (USHORT) (usAddress - usDiscreteInputStart) % 8;
 8009cda:	887a      	ldrh	r2, [r7, #2]
 8009cdc:	89fb      	ldrh	r3, [r7, #14]
 8009cde:	1ad3      	subs	r3, r2, r3
 8009ce0:	b29b      	uxth	r3, r3
 8009ce2:	f003 0307 	and.w	r3, r3, #7
 8009ce6:	81bb      	strh	r3, [r7, #12]

        while (iNReg > 0)
 8009ce8:	e012      	b.n	8009d10 <eMBRegDiscreteCB+0x90>
        {
            *pucRegBuffer++ = xMBUtilGetBits(&pucDiscreteInputBuf[iRegIndex++],
 8009cea:	8bbb      	ldrh	r3, [r7, #28]
 8009cec:	1c5a      	adds	r2, r3, #1
 8009cee:	83ba      	strh	r2, [r7, #28]
 8009cf0:	461a      	mov	r2, r3
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	1898      	adds	r0, r3, r2
 8009cf6:	687c      	ldr	r4, [r7, #4]
 8009cf8:	1c63      	adds	r3, r4, #1
 8009cfa:	607b      	str	r3, [r7, #4]
 8009cfc:	89bb      	ldrh	r3, [r7, #12]
 8009cfe:	2208      	movs	r2, #8
 8009d00:	4619      	mov	r1, r3
 8009d02:	f7fe fcb7 	bl	8008674 <xMBUtilGetBits>
 8009d06:	4603      	mov	r3, r0
 8009d08:	7023      	strb	r3, [r4, #0]
                    iRegBitIndex, 8);
            iNReg--;
 8009d0a:	8b7b      	ldrh	r3, [r7, #26]
 8009d0c:	3b01      	subs	r3, #1
 8009d0e:	837b      	strh	r3, [r7, #26]
        while (iNReg > 0)
 8009d10:	8b7b      	ldrh	r3, [r7, #26]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d1e9      	bne.n	8009cea <eMBRegDiscreteCB+0x6a>
        }
        pucRegBuffer--;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	3b01      	subs	r3, #1
 8009d1a:	607b      	str	r3, [r7, #4]
        /* last discrete */
        usNDiscrete = usNDiscrete % 8;
 8009d1c:	883b      	ldrh	r3, [r7, #0]
 8009d1e:	f003 0307 	and.w	r3, r3, #7
 8009d22:	803b      	strh	r3, [r7, #0]
        /* filling zero to high bit */
        *pucRegBuffer = *pucRegBuffer << (8 - usNDiscrete);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	781b      	ldrb	r3, [r3, #0]
 8009d28:	461a      	mov	r2, r3
 8009d2a:	883b      	ldrh	r3, [r7, #0]
 8009d2c:	f1c3 0308 	rsb	r3, r3, #8
 8009d30:	fa02 f303 	lsl.w	r3, r2, r3
 8009d34:	b2da      	uxtb	r2, r3
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	701a      	strb	r2, [r3, #0]
        *pucRegBuffer = *pucRegBuffer >> (8 - usNDiscrete);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	781b      	ldrb	r3, [r3, #0]
 8009d3e:	461a      	mov	r2, r3
 8009d40:	883b      	ldrh	r3, [r7, #0]
 8009d42:	f1c3 0308 	rsb	r3, r3, #8
 8009d46:	fa42 f303 	asr.w	r3, r2, r3
 8009d4a:	b2da      	uxtb	r2, r3
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	701a      	strb	r2, [r3, #0]
 8009d50:	e001      	b.n	8009d56 <eMBRegDiscreteCB+0xd6>
    }
    else
    {
        eStatus = MB_ENOREG;
 8009d52:	2301      	movs	r3, #1
 8009d54:	77fb      	strb	r3, [r7, #31]
    }

    return eStatus;
 8009d56:	7ffb      	ldrb	r3, [r7, #31]
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	3724      	adds	r7, #36	; 0x24
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd90      	pop	{r4, r7, pc}
 8009d60:	20005098 	.word	0x20005098
 8009d64:	20004bf0 	.word	0x20004bf0

08009d68 <eMBMasterRegInputCB>:
 * @param usNRegs input register number
 *
 * @return result
 */
eMBErrorCode eMBMasterRegInputCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b086      	sub	sp, #24
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
 8009d70:	460b      	mov	r3, r1
 8009d72:	807b      	strh	r3, [r7, #2]
 8009d74:	4613      	mov	r3, r2
 8009d76:	803b      	strh	r3, [r7, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 8009d78:	2300      	movs	r3, #0
 8009d7a:	75fb      	strb	r3, [r7, #23]
    USHORT *        pusRegInputBuf;
    USHORT          REG_INPUT_START;
    USHORT          REG_INPUT_NREGS;
    USHORT          usRegInStart;

    pusRegInputBuf = usMRegInBuf[ucMBMasterGetDestAddress() - 1];
 8009d7c:	f7ff f818 	bl	8008db0 <ucMBMasterGetDestAddress>
 8009d80:	4603      	mov	r3, r0
 8009d82:	3b01      	subs	r3, #1
 8009d84:	011b      	lsls	r3, r3, #4
 8009d86:	4a26      	ldr	r2, [pc, #152]	; (8009e20 <eMBMasterRegInputCB+0xb8>)
 8009d88:	4413      	add	r3, r2
 8009d8a:	613b      	str	r3, [r7, #16]
    REG_INPUT_START = M_REG_INPUT_START;
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	81fb      	strh	r3, [r7, #14]
    REG_INPUT_NREGS = M_REG_INPUT_NREGS;
 8009d90:	2308      	movs	r3, #8
 8009d92:	81bb      	strh	r3, [r7, #12]
    usRegInStart = usMRegInStart;
 8009d94:	4b23      	ldr	r3, [pc, #140]	; (8009e24 <eMBMasterRegInputCB+0xbc>)
 8009d96:	881b      	ldrh	r3, [r3, #0]
 8009d98:	817b      	strh	r3, [r7, #10]

    /* it already plus one in modbus function method. */
    usAddress--;
 8009d9a:	887b      	ldrh	r3, [r7, #2]
 8009d9c:	3b01      	subs	r3, #1
 8009d9e:	807b      	strh	r3, [r7, #2]

    if ((usAddress >= REG_INPUT_START)
 8009da0:	887a      	ldrh	r2, [r7, #2]
 8009da2:	89fb      	ldrh	r3, [r7, #14]
 8009da4:	429a      	cmp	r2, r3
 8009da6:	d333      	bcc.n	8009e10 <eMBMasterRegInputCB+0xa8>
            && (usAddress + usNRegs <= REG_INPUT_START + REG_INPUT_NREGS))
 8009da8:	887a      	ldrh	r2, [r7, #2]
 8009daa:	883b      	ldrh	r3, [r7, #0]
 8009dac:	441a      	add	r2, r3
 8009dae:	89f9      	ldrh	r1, [r7, #14]
 8009db0:	89bb      	ldrh	r3, [r7, #12]
 8009db2:	440b      	add	r3, r1
 8009db4:	429a      	cmp	r2, r3
 8009db6:	dc2b      	bgt.n	8009e10 <eMBMasterRegInputCB+0xa8>
    {
        iRegIndex = usAddress - usRegInStart;
 8009db8:	887a      	ldrh	r2, [r7, #2]
 8009dba:	897b      	ldrh	r3, [r7, #10]
 8009dbc:	1ad3      	subs	r3, r2, r3
 8009dbe:	82bb      	strh	r3, [r7, #20]
        while (usNRegs > 0)
 8009dc0:	e022      	b.n	8009e08 <eMBMasterRegInputCB+0xa0>
        {
            pusRegInputBuf[iRegIndex] = *pucRegBuffer++ << 8;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	1c5a      	adds	r2, r3, #1
 8009dc6:	607a      	str	r2, [r7, #4]
 8009dc8:	781b      	ldrb	r3, [r3, #0]
 8009dca:	b29a      	uxth	r2, r3
 8009dcc:	8abb      	ldrh	r3, [r7, #20]
 8009dce:	005b      	lsls	r3, r3, #1
 8009dd0:	6939      	ldr	r1, [r7, #16]
 8009dd2:	440b      	add	r3, r1
 8009dd4:	0212      	lsls	r2, r2, #8
 8009dd6:	b292      	uxth	r2, r2
 8009dd8:	801a      	strh	r2, [r3, #0]
            pusRegInputBuf[iRegIndex] |= *pucRegBuffer++;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	1c5a      	adds	r2, r3, #1
 8009dde:	607a      	str	r2, [r7, #4]
 8009de0:	7818      	ldrb	r0, [r3, #0]
 8009de2:	8abb      	ldrh	r3, [r7, #20]
 8009de4:	005b      	lsls	r3, r3, #1
 8009de6:	693a      	ldr	r2, [r7, #16]
 8009de8:	4413      	add	r3, r2
 8009dea:	8819      	ldrh	r1, [r3, #0]
 8009dec:	b282      	uxth	r2, r0
 8009dee:	8abb      	ldrh	r3, [r7, #20]
 8009df0:	005b      	lsls	r3, r3, #1
 8009df2:	6938      	ldr	r0, [r7, #16]
 8009df4:	4403      	add	r3, r0
 8009df6:	430a      	orrs	r2, r1
 8009df8:	b292      	uxth	r2, r2
 8009dfa:	801a      	strh	r2, [r3, #0]
            iRegIndex++;
 8009dfc:	8abb      	ldrh	r3, [r7, #20]
 8009dfe:	3301      	adds	r3, #1
 8009e00:	82bb      	strh	r3, [r7, #20]
            usNRegs--;
 8009e02:	883b      	ldrh	r3, [r7, #0]
 8009e04:	3b01      	subs	r3, #1
 8009e06:	803b      	strh	r3, [r7, #0]
        while (usNRegs > 0)
 8009e08:	883b      	ldrh	r3, [r7, #0]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d1d9      	bne.n	8009dc2 <eMBMasterRegInputCB+0x5a>
    if ((usAddress >= REG_INPUT_START)
 8009e0e:	e001      	b.n	8009e14 <eMBMasterRegInputCB+0xac>
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 8009e10:	2301      	movs	r3, #1
 8009e12:	75fb      	strb	r3, [r7, #23]
    }

    return eStatus;
 8009e14:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	3718      	adds	r7, #24
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}
 8009e1e:	bf00      	nop
 8009e20:	2000521c 	.word	0x2000521c
 8009e24:	20004bfc 	.word	0x20004bfc

08009e28 <eMBMasterRegHoldingCB>:
 *
 * @return result
 */
eMBErrorCode eMBMasterRegHoldingCB(UCHAR * pucRegBuffer, USHORT usAddress,
        USHORT usNRegs, eMBRegisterMode eMode)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b088      	sub	sp, #32
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	60f8      	str	r0, [r7, #12]
 8009e30:	4608      	mov	r0, r1
 8009e32:	4611      	mov	r1, r2
 8009e34:	461a      	mov	r2, r3
 8009e36:	4603      	mov	r3, r0
 8009e38:	817b      	strh	r3, [r7, #10]
 8009e3a:	460b      	mov	r3, r1
 8009e3c:	813b      	strh	r3, [r7, #8]
 8009e3e:	4613      	mov	r3, r2
 8009e40:	71fb      	strb	r3, [r7, #7]
    eMBErrorCode    eStatus = MB_ENOERR;
 8009e42:	2300      	movs	r3, #0
 8009e44:	77fb      	strb	r3, [r7, #31]
    USHORT *        pusRegHoldingBuf;
    USHORT          REG_HOLDING_START;
    USHORT          REG_HOLDING_NREGS;
    USHORT          usRegHoldStart;

    pusRegHoldingBuf = usMRegHoldBuf[ucMBMasterGetDestAddress() - 1];
 8009e46:	f7fe ffb3 	bl	8008db0 <ucMBMasterGetDestAddress>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	3b01      	subs	r3, #1
 8009e4e:	011b      	lsls	r3, r3, #4
 8009e50:	4a39      	ldr	r2, [pc, #228]	; (8009f38 <eMBMasterRegHoldingCB+0x110>)
 8009e52:	4413      	add	r3, r2
 8009e54:	61bb      	str	r3, [r7, #24]
    REG_HOLDING_START = M_REG_HOLDING_START;
 8009e56:	2300      	movs	r3, #0
 8009e58:	82fb      	strh	r3, [r7, #22]
    REG_HOLDING_NREGS = M_REG_HOLDING_NREGS;
 8009e5a:	2308      	movs	r3, #8
 8009e5c:	82bb      	strh	r3, [r7, #20]
    usRegHoldStart = usMRegHoldStart;
 8009e5e:	4b37      	ldr	r3, [pc, #220]	; (8009f3c <eMBMasterRegHoldingCB+0x114>)
 8009e60:	881b      	ldrh	r3, [r3, #0]
 8009e62:	827b      	strh	r3, [r7, #18]
    /* if mode is read, the master will write the received date to buffer. */
    eMode = MB_REG_WRITE;
 8009e64:	2301      	movs	r3, #1
 8009e66:	71fb      	strb	r3, [r7, #7]

    /* it already plus one in modbus function method. */
    usAddress--;
 8009e68:	897b      	ldrh	r3, [r7, #10]
 8009e6a:	3b01      	subs	r3, #1
 8009e6c:	817b      	strh	r3, [r7, #10]

    if ((usAddress >= REG_HOLDING_START)
 8009e6e:	897a      	ldrh	r2, [r7, #10]
 8009e70:	8afb      	ldrh	r3, [r7, #22]
 8009e72:	429a      	cmp	r2, r3
 8009e74:	d359      	bcc.n	8009f2a <eMBMasterRegHoldingCB+0x102>
            && (usAddress + usNRegs <= REG_HOLDING_START + REG_HOLDING_NREGS))
 8009e76:	897a      	ldrh	r2, [r7, #10]
 8009e78:	893b      	ldrh	r3, [r7, #8]
 8009e7a:	441a      	add	r2, r3
 8009e7c:	8af9      	ldrh	r1, [r7, #22]
 8009e7e:	8abb      	ldrh	r3, [r7, #20]
 8009e80:	440b      	add	r3, r1
 8009e82:	429a      	cmp	r2, r3
 8009e84:	dc51      	bgt.n	8009f2a <eMBMasterRegHoldingCB+0x102>
    {
        iRegIndex = usAddress - usRegHoldStart;
 8009e86:	897a      	ldrh	r2, [r7, #10]
 8009e88:	8a7b      	ldrh	r3, [r7, #18]
 8009e8a:	1ad3      	subs	r3, r2, r3
 8009e8c:	83bb      	strh	r3, [r7, #28]
        switch (eMode)
 8009e8e:	79fb      	ldrb	r3, [r7, #7]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d01e      	beq.n	8009ed2 <eMBMasterRegHoldingCB+0xaa>
 8009e94:	2b01      	cmp	r3, #1
 8009e96:	d043      	beq.n	8009f20 <eMBMasterRegHoldingCB+0xf8>
 8009e98:	e049      	b.n	8009f2e <eMBMasterRegHoldingCB+0x106>
        {
        /* read current register values from the protocol stack. */
        case MB_REG_READ:
            while (usNRegs > 0)
            {
                *pucRegBuffer++ = (UCHAR) (pusRegHoldingBuf[iRegIndex] >> 8);
 8009e9a:	8bbb      	ldrh	r3, [r7, #28]
 8009e9c:	005b      	lsls	r3, r3, #1
 8009e9e:	69ba      	ldr	r2, [r7, #24]
 8009ea0:	4413      	add	r3, r2
 8009ea2:	881b      	ldrh	r3, [r3, #0]
 8009ea4:	0a1b      	lsrs	r3, r3, #8
 8009ea6:	b299      	uxth	r1, r3
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	1c5a      	adds	r2, r3, #1
 8009eac:	60fa      	str	r2, [r7, #12]
 8009eae:	b2ca      	uxtb	r2, r1
 8009eb0:	701a      	strb	r2, [r3, #0]
                *pucRegBuffer++ = (UCHAR) (pusRegHoldingBuf[iRegIndex] & 0xFF);
 8009eb2:	8bbb      	ldrh	r3, [r7, #28]
 8009eb4:	005b      	lsls	r3, r3, #1
 8009eb6:	69ba      	ldr	r2, [r7, #24]
 8009eb8:	4413      	add	r3, r2
 8009eba:	8819      	ldrh	r1, [r3, #0]
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	1c5a      	adds	r2, r3, #1
 8009ec0:	60fa      	str	r2, [r7, #12]
 8009ec2:	b2ca      	uxtb	r2, r1
 8009ec4:	701a      	strb	r2, [r3, #0]
                iRegIndex++;
 8009ec6:	8bbb      	ldrh	r3, [r7, #28]
 8009ec8:	3301      	adds	r3, #1
 8009eca:	83bb      	strh	r3, [r7, #28]
                usNRegs--;
 8009ecc:	893b      	ldrh	r3, [r7, #8]
 8009ece:	3b01      	subs	r3, #1
 8009ed0:	813b      	strh	r3, [r7, #8]
            while (usNRegs > 0)
 8009ed2:	893b      	ldrh	r3, [r7, #8]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d1e0      	bne.n	8009e9a <eMBMasterRegHoldingCB+0x72>
            }
            break;
 8009ed8:	e026      	b.n	8009f28 <eMBMasterRegHoldingCB+0x100>
        /* write current register values with new values from the protocol stack. */
        case MB_REG_WRITE:
            while (usNRegs > 0)
            {
                pusRegHoldingBuf[iRegIndex] = *pucRegBuffer++ << 8;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	1c5a      	adds	r2, r3, #1
 8009ede:	60fa      	str	r2, [r7, #12]
 8009ee0:	781b      	ldrb	r3, [r3, #0]
 8009ee2:	b29a      	uxth	r2, r3
 8009ee4:	8bbb      	ldrh	r3, [r7, #28]
 8009ee6:	005b      	lsls	r3, r3, #1
 8009ee8:	69b9      	ldr	r1, [r7, #24]
 8009eea:	440b      	add	r3, r1
 8009eec:	0212      	lsls	r2, r2, #8
 8009eee:	b292      	uxth	r2, r2
 8009ef0:	801a      	strh	r2, [r3, #0]
                pusRegHoldingBuf[iRegIndex] |= *pucRegBuffer++;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	1c5a      	adds	r2, r3, #1
 8009ef6:	60fa      	str	r2, [r7, #12]
 8009ef8:	7818      	ldrb	r0, [r3, #0]
 8009efa:	8bbb      	ldrh	r3, [r7, #28]
 8009efc:	005b      	lsls	r3, r3, #1
 8009efe:	69ba      	ldr	r2, [r7, #24]
 8009f00:	4413      	add	r3, r2
 8009f02:	8819      	ldrh	r1, [r3, #0]
 8009f04:	b282      	uxth	r2, r0
 8009f06:	8bbb      	ldrh	r3, [r7, #28]
 8009f08:	005b      	lsls	r3, r3, #1
 8009f0a:	69b8      	ldr	r0, [r7, #24]
 8009f0c:	4403      	add	r3, r0
 8009f0e:	430a      	orrs	r2, r1
 8009f10:	b292      	uxth	r2, r2
 8009f12:	801a      	strh	r2, [r3, #0]
                iRegIndex++;
 8009f14:	8bbb      	ldrh	r3, [r7, #28]
 8009f16:	3301      	adds	r3, #1
 8009f18:	83bb      	strh	r3, [r7, #28]
                usNRegs--;
 8009f1a:	893b      	ldrh	r3, [r7, #8]
 8009f1c:	3b01      	subs	r3, #1
 8009f1e:	813b      	strh	r3, [r7, #8]
            while (usNRegs > 0)
 8009f20:	893b      	ldrh	r3, [r7, #8]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d1d9      	bne.n	8009eda <eMBMasterRegHoldingCB+0xb2>
            }
            break;
 8009f26:	bf00      	nop
        switch (eMode)
 8009f28:	e001      	b.n	8009f2e <eMBMasterRegHoldingCB+0x106>
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	77fb      	strb	r3, [r7, #31]
    }
    return eStatus;
 8009f2e:	7ffb      	ldrb	r3, [r7, #31]
}
 8009f30:	4618      	mov	r0, r3
 8009f32:	3720      	adds	r7, #32
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}
 8009f38:	2000511c 	.word	0x2000511c
 8009f3c:	20004bfe 	.word	0x20004bfe

08009f40 <eMBMasterRegCoilsCB>:
 *
 * @return result
 */
eMBErrorCode eMBMasterRegCoilsCB(UCHAR * pucRegBuffer, USHORT usAddress,
        USHORT usNCoils, eMBRegisterMode eMode)
{
 8009f40:	b590      	push	{r4, r7, lr}
 8009f42:	b08b      	sub	sp, #44	; 0x2c
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	60f8      	str	r0, [r7, #12]
 8009f48:	4608      	mov	r0, r1
 8009f4a:	4611      	mov	r1, r2
 8009f4c:	461a      	mov	r2, r3
 8009f4e:	4603      	mov	r3, r0
 8009f50:	817b      	strh	r3, [r7, #10]
 8009f52:	460b      	mov	r3, r1
 8009f54:	813b      	strh	r3, [r7, #8]
 8009f56:	4613      	mov	r3, r2
 8009f58:	71fb      	strb	r3, [r7, #7]
    eMBErrorCode    eStatus = MB_ENOERR;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    USHORT          iRegIndex , iRegBitIndex , iNReg;
    UCHAR *         pucCoilBuf;
    USHORT          COIL_START;
    USHORT          COIL_NCOILS;
    USHORT          usCoilStart;
    iNReg =  usNCoils / 8 + 1;
 8009f60:	893b      	ldrh	r3, [r7, #8]
 8009f62:	08db      	lsrs	r3, r3, #3
 8009f64:	b29b      	uxth	r3, r3
 8009f66:	3301      	adds	r3, #1
 8009f68:	847b      	strh	r3, [r7, #34]	; 0x22

    pucCoilBuf = ucMCoilBuf[ucMBMasterGetDestAddress() - 1];
 8009f6a:	f7fe ff21 	bl	8008db0 <ucMBMasterGetDestAddress>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	3b01      	subs	r3, #1
 8009f72:	005b      	lsls	r3, r3, #1
 8009f74:	4a4b      	ldr	r2, [pc, #300]	; (800a0a4 <eMBMasterRegCoilsCB+0x164>)
 8009f76:	4413      	add	r3, r2
 8009f78:	61fb      	str	r3, [r7, #28]
    COIL_START = M_COIL_START;
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	837b      	strh	r3, [r7, #26]
    COIL_NCOILS = M_COIL_NCOILS;
 8009f7e:	2310      	movs	r3, #16
 8009f80:	833b      	strh	r3, [r7, #24]
    usCoilStart = usMCoilStart;
 8009f82:	4b49      	ldr	r3, [pc, #292]	; (800a0a8 <eMBMasterRegCoilsCB+0x168>)
 8009f84:	881b      	ldrh	r3, [r3, #0]
 8009f86:	82fb      	strh	r3, [r7, #22]

    /* if mode is read,the master will write the received date to buffer. */
    eMode = MB_REG_WRITE;
 8009f88:	2301      	movs	r3, #1
 8009f8a:	71fb      	strb	r3, [r7, #7]

    /* it already plus one in modbus function method. */
    usAddress--;
 8009f8c:	897b      	ldrh	r3, [r7, #10]
 8009f8e:	3b01      	subs	r3, #1
 8009f90:	817b      	strh	r3, [r7, #10]

    if ((usAddress >= COIL_START)
 8009f92:	897a      	ldrh	r2, [r7, #10]
 8009f94:	8b7b      	ldrh	r3, [r7, #26]
 8009f96:	429a      	cmp	r2, r3
 8009f98:	d37b      	bcc.n	800a092 <eMBMasterRegCoilsCB+0x152>
            && (usAddress + usNCoils <= COIL_START + COIL_NCOILS))
 8009f9a:	897a      	ldrh	r2, [r7, #10]
 8009f9c:	893b      	ldrh	r3, [r7, #8]
 8009f9e:	441a      	add	r2, r3
 8009fa0:	8b79      	ldrh	r1, [r7, #26]
 8009fa2:	8b3b      	ldrh	r3, [r7, #24]
 8009fa4:	440b      	add	r3, r1
 8009fa6:	429a      	cmp	r2, r3
 8009fa8:	dc73      	bgt.n	800a092 <eMBMasterRegCoilsCB+0x152>
    {
        iRegIndex = (USHORT) (usAddress - usCoilStart) / 8;
 8009faa:	897a      	ldrh	r2, [r7, #10]
 8009fac:	8afb      	ldrh	r3, [r7, #22]
 8009fae:	1ad3      	subs	r3, r2, r3
 8009fb0:	b29b      	uxth	r3, r3
 8009fb2:	08db      	lsrs	r3, r3, #3
 8009fb4:	84bb      	strh	r3, [r7, #36]	; 0x24
        iRegBitIndex = (USHORT) (usAddress - usCoilStart) % 8;
 8009fb6:	897a      	ldrh	r2, [r7, #10]
 8009fb8:	8afb      	ldrh	r3, [r7, #22]
 8009fba:	1ad3      	subs	r3, r2, r3
 8009fbc:	b29b      	uxth	r3, r3
 8009fbe:	f003 0307 	and.w	r3, r3, #7
 8009fc2:	82bb      	strh	r3, [r7, #20]
        switch (eMode)
 8009fc4:	79fb      	ldrb	r3, [r7, #7]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d015      	beq.n	8009ff6 <eMBMasterRegCoilsCB+0xb6>
 8009fca:	2b01      	cmp	r3, #1
 8009fcc:	d045      	beq.n	800a05a <eMBMasterRegCoilsCB+0x11a>
 8009fce:	e063      	b.n	800a098 <eMBMasterRegCoilsCB+0x158>
        {
         /* read current coil values from the protocol stack. */
        case MB_REG_READ:
            while (iNReg > 0)
            {
                *pucRegBuffer++ = xMBUtilGetBits(&pucCoilBuf[iRegIndex++],
 8009fd0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009fd2:	1c5a      	adds	r2, r3, #1
 8009fd4:	84ba      	strh	r2, [r7, #36]	; 0x24
 8009fd6:	461a      	mov	r2, r3
 8009fd8:	69fb      	ldr	r3, [r7, #28]
 8009fda:	1898      	adds	r0, r3, r2
 8009fdc:	68fc      	ldr	r4, [r7, #12]
 8009fde:	1c63      	adds	r3, r4, #1
 8009fe0:	60fb      	str	r3, [r7, #12]
 8009fe2:	8abb      	ldrh	r3, [r7, #20]
 8009fe4:	2208      	movs	r2, #8
 8009fe6:	4619      	mov	r1, r3
 8009fe8:	f7fe fb44 	bl	8008674 <xMBUtilGetBits>
 8009fec:	4603      	mov	r3, r0
 8009fee:	7023      	strb	r3, [r4, #0]
                        						 iRegBitIndex, 8);
                iNReg--;
 8009ff0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009ff2:	3b01      	subs	r3, #1
 8009ff4:	847b      	strh	r3, [r7, #34]	; 0x22
            while (iNReg > 0)
 8009ff6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d1e9      	bne.n	8009fd0 <eMBMasterRegCoilsCB+0x90>
            }
            pucRegBuffer--;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	3b01      	subs	r3, #1
 800a000:	60fb      	str	r3, [r7, #12]
            /* last coils */
            usNCoils = usNCoils % 8;
 800a002:	893b      	ldrh	r3, [r7, #8]
 800a004:	f003 0307 	and.w	r3, r3, #7
 800a008:	813b      	strh	r3, [r7, #8]
            /* filling zero to high bit */
            *pucRegBuffer = *pucRegBuffer << (8 - usNCoils);
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	781b      	ldrb	r3, [r3, #0]
 800a00e:	461a      	mov	r2, r3
 800a010:	893b      	ldrh	r3, [r7, #8]
 800a012:	f1c3 0308 	rsb	r3, r3, #8
 800a016:	fa02 f303 	lsl.w	r3, r2, r3
 800a01a:	b2da      	uxtb	r2, r3
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	701a      	strb	r2, [r3, #0]
            *pucRegBuffer = *pucRegBuffer >> (8 - usNCoils);
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	781b      	ldrb	r3, [r3, #0]
 800a024:	461a      	mov	r2, r3
 800a026:	893b      	ldrh	r3, [r7, #8]
 800a028:	f1c3 0308 	rsb	r3, r3, #8
 800a02c:	fa42 f303 	asr.w	r3, r2, r3
 800a030:	b2da      	uxtb	r2, r3
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	701a      	strb	r2, [r3, #0]
            break;
 800a036:	e02b      	b.n	800a090 <eMBMasterRegCoilsCB+0x150>

        /* write current coil values with new values from the protocol stack. */
        case MB_REG_WRITE:
            while (iNReg > 1)
            {
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, 8,
 800a038:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a03a:	1c5a      	adds	r2, r3, #1
 800a03c:	84ba      	strh	r2, [r7, #36]	; 0x24
 800a03e:	461a      	mov	r2, r3
 800a040:	69fb      	ldr	r3, [r7, #28]
 800a042:	1898      	adds	r0, r3, r2
                        *pucRegBuffer++);
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	1c5a      	adds	r2, r3, #1
 800a048:	60fa      	str	r2, [r7, #12]
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, 8,
 800a04a:	781b      	ldrb	r3, [r3, #0]
 800a04c:	8ab9      	ldrh	r1, [r7, #20]
 800a04e:	2208      	movs	r2, #8
 800a050:	f7fe faa4 	bl	800859c <xMBUtilSetBits>
                iNReg--;
 800a054:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a056:	3b01      	subs	r3, #1
 800a058:	847b      	strh	r3, [r7, #34]	; 0x22
            while (iNReg > 1)
 800a05a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a05c:	2b01      	cmp	r3, #1
 800a05e:	d8eb      	bhi.n	800a038 <eMBMasterRegCoilsCB+0xf8>
            }
            /* last coils */
            usNCoils = usNCoils % 8;
 800a060:	893b      	ldrh	r3, [r7, #8]
 800a062:	f003 0307 	and.w	r3, r3, #7
 800a066:	813b      	strh	r3, [r7, #8]
            /* xMBUtilSetBits has bug when ucNBits is zero */
            if (usNCoils != 0)
 800a068:	893b      	ldrh	r3, [r7, #8]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d00f      	beq.n	800a08e <eMBMasterRegCoilsCB+0x14e>
            {
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, usNCoils,
 800a06e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a070:	1c5a      	adds	r2, r3, #1
 800a072:	84ba      	strh	r2, [r7, #36]	; 0x24
 800a074:	461a      	mov	r2, r3
 800a076:	69fb      	ldr	r3, [r7, #28]
 800a078:	1898      	adds	r0, r3, r2
 800a07a:	893b      	ldrh	r3, [r7, #8]
 800a07c:	b2dc      	uxtb	r4, r3
                        *pucRegBuffer++);
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	1c5a      	adds	r2, r3, #1
 800a082:	60fa      	str	r2, [r7, #12]
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, usNCoils,
 800a084:	781b      	ldrb	r3, [r3, #0]
 800a086:	8ab9      	ldrh	r1, [r7, #20]
 800a088:	4622      	mov	r2, r4
 800a08a:	f7fe fa87 	bl	800859c <xMBUtilSetBits>
            }
            break;
 800a08e:	bf00      	nop
        switch (eMode)
 800a090:	e002      	b.n	800a098 <eMBMasterRegCoilsCB+0x158>
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 800a092:	2301      	movs	r3, #1
 800a094:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    return eStatus;
 800a098:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	372c      	adds	r7, #44	; 0x2c
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd90      	pop	{r4, r7, pc}
 800a0a4:	200050fc 	.word	0x200050fc
 800a0a8:	20004bfa 	.word	0x20004bfa

0800a0ac <eMBMasterRegDiscreteCB>:
 * @param usNDiscrete discrete number
 *
 * @return result
 */
eMBErrorCode eMBMasterRegDiscreteCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete )
{
 800a0ac:	b590      	push	{r4, r7, lr}
 800a0ae:	b089      	sub	sp, #36	; 0x24
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
 800a0b4:	460b      	mov	r3, r1
 800a0b6:	807b      	strh	r3, [r7, #2]
 800a0b8:	4613      	mov	r3, r2
 800a0ba:	803b      	strh	r3, [r7, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	77fb      	strb	r3, [r7, #31]
    USHORT          iRegIndex , iRegBitIndex , iNReg;
    UCHAR *         pucDiscreteInputBuf;
    USHORT          DISCRETE_INPUT_START;
    USHORT          DISCRETE_INPUT_NDISCRETES;
    USHORT          usDiscreteInputStart;
    iNReg =  usNDiscrete / 8 + 1;
 800a0c0:	883b      	ldrh	r3, [r7, #0]
 800a0c2:	08db      	lsrs	r3, r3, #3
 800a0c4:	b29b      	uxth	r3, r3
 800a0c6:	3301      	adds	r3, #1
 800a0c8:	837b      	strh	r3, [r7, #26]

    pucDiscreteInputBuf = ucMDiscInBuf[ucMBMasterGetDestAddress() - 1];
 800a0ca:	f7fe fe71 	bl	8008db0 <ucMBMasterGetDestAddress>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	3b01      	subs	r3, #1
 800a0d2:	005b      	lsls	r3, r3, #1
 800a0d4:	4a2c      	ldr	r2, [pc, #176]	; (800a188 <eMBMasterRegDiscreteCB+0xdc>)
 800a0d6:	4413      	add	r3, r2
 800a0d8:	617b      	str	r3, [r7, #20]
    DISCRETE_INPUT_START = M_DISCRETE_INPUT_START;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	827b      	strh	r3, [r7, #18]
    DISCRETE_INPUT_NDISCRETES = M_DISCRETE_INPUT_NDISCRETES;
 800a0de:	2310      	movs	r3, #16
 800a0e0:	823b      	strh	r3, [r7, #16]
    usDiscreteInputStart = usMDiscInStart;
 800a0e2:	4b2a      	ldr	r3, [pc, #168]	; (800a18c <eMBMasterRegDiscreteCB+0xe0>)
 800a0e4:	881b      	ldrh	r3, [r3, #0]
 800a0e6:	81fb      	strh	r3, [r7, #14]

    /* it already plus one in modbus function method. */
    usAddress--;
 800a0e8:	887b      	ldrh	r3, [r7, #2]
 800a0ea:	3b01      	subs	r3, #1
 800a0ec:	807b      	strh	r3, [r7, #2]

    if ((usAddress >= DISCRETE_INPUT_START)
 800a0ee:	887a      	ldrh	r2, [r7, #2]
 800a0f0:	8a7b      	ldrh	r3, [r7, #18]
 800a0f2:	429a      	cmp	r2, r3
 800a0f4:	d341      	bcc.n	800a17a <eMBMasterRegDiscreteCB+0xce>
            && (usAddress + usNDiscrete    <= DISCRETE_INPUT_START + DISCRETE_INPUT_NDISCRETES))
 800a0f6:	887a      	ldrh	r2, [r7, #2]
 800a0f8:	883b      	ldrh	r3, [r7, #0]
 800a0fa:	441a      	add	r2, r3
 800a0fc:	8a79      	ldrh	r1, [r7, #18]
 800a0fe:	8a3b      	ldrh	r3, [r7, #16]
 800a100:	440b      	add	r3, r1
 800a102:	429a      	cmp	r2, r3
 800a104:	dc39      	bgt.n	800a17a <eMBMasterRegDiscreteCB+0xce>
    {
        iRegIndex = (USHORT) (usAddress - usDiscreteInputStart) / 8;
 800a106:	887a      	ldrh	r2, [r7, #2]
 800a108:	89fb      	ldrh	r3, [r7, #14]
 800a10a:	1ad3      	subs	r3, r2, r3
 800a10c:	b29b      	uxth	r3, r3
 800a10e:	08db      	lsrs	r3, r3, #3
 800a110:	83bb      	strh	r3, [r7, #28]
        iRegBitIndex = (USHORT) (usAddress - usDiscreteInputStart) % 8;
 800a112:	887a      	ldrh	r2, [r7, #2]
 800a114:	89fb      	ldrh	r3, [r7, #14]
 800a116:	1ad3      	subs	r3, r2, r3
 800a118:	b29b      	uxth	r3, r3
 800a11a:	f003 0307 	and.w	r3, r3, #7
 800a11e:	81bb      	strh	r3, [r7, #12]

        /* write current discrete values with new values from the protocol stack. */
        while (iNReg > 1)
 800a120:	e010      	b.n	800a144 <eMBMasterRegDiscreteCB+0x98>
        {
            xMBUtilSetBits(&pucDiscreteInputBuf[iRegIndex++], iRegBitIndex, 8,
 800a122:	8bbb      	ldrh	r3, [r7, #28]
 800a124:	1c5a      	adds	r2, r3, #1
 800a126:	83ba      	strh	r2, [r7, #28]
 800a128:	461a      	mov	r2, r3
 800a12a:	697b      	ldr	r3, [r7, #20]
 800a12c:	1898      	adds	r0, r3, r2
                    *pucRegBuffer++);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	1c5a      	adds	r2, r3, #1
 800a132:	607a      	str	r2, [r7, #4]
            xMBUtilSetBits(&pucDiscreteInputBuf[iRegIndex++], iRegBitIndex, 8,
 800a134:	781b      	ldrb	r3, [r3, #0]
 800a136:	89b9      	ldrh	r1, [r7, #12]
 800a138:	2208      	movs	r2, #8
 800a13a:	f7fe fa2f 	bl	800859c <xMBUtilSetBits>
            iNReg--;
 800a13e:	8b7b      	ldrh	r3, [r7, #26]
 800a140:	3b01      	subs	r3, #1
 800a142:	837b      	strh	r3, [r7, #26]
        while (iNReg > 1)
 800a144:	8b7b      	ldrh	r3, [r7, #26]
 800a146:	2b01      	cmp	r3, #1
 800a148:	d8eb      	bhi.n	800a122 <eMBMasterRegDiscreteCB+0x76>
        }
        /* last discrete */
        usNDiscrete = usNDiscrete % 8;
 800a14a:	883b      	ldrh	r3, [r7, #0]
 800a14c:	f003 0307 	and.w	r3, r3, #7
 800a150:	803b      	strh	r3, [r7, #0]
        /* xMBUtilSetBits has bug when ucNBits is zero */
        if (usNDiscrete != 0)
 800a152:	883b      	ldrh	r3, [r7, #0]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d012      	beq.n	800a17e <eMBMasterRegDiscreteCB+0xd2>
        {
            xMBUtilSetBits(&pucDiscreteInputBuf[iRegIndex++], iRegBitIndex,
 800a158:	8bbb      	ldrh	r3, [r7, #28]
 800a15a:	1c5a      	adds	r2, r3, #1
 800a15c:	83ba      	strh	r2, [r7, #28]
 800a15e:	461a      	mov	r2, r3
 800a160:	697b      	ldr	r3, [r7, #20]
 800a162:	1898      	adds	r0, r3, r2
 800a164:	883b      	ldrh	r3, [r7, #0]
 800a166:	b2dc      	uxtb	r4, r3
                    usNDiscrete, *pucRegBuffer++);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	1c5a      	adds	r2, r3, #1
 800a16c:	607a      	str	r2, [r7, #4]
            xMBUtilSetBits(&pucDiscreteInputBuf[iRegIndex++], iRegBitIndex,
 800a16e:	781b      	ldrb	r3, [r3, #0]
 800a170:	89b9      	ldrh	r1, [r7, #12]
 800a172:	4622      	mov	r2, r4
 800a174:	f7fe fa12 	bl	800859c <xMBUtilSetBits>
        if (usNDiscrete != 0)
 800a178:	e001      	b.n	800a17e <eMBMasterRegDiscreteCB+0xd2>
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 800a17a:	2301      	movs	r3, #1
 800a17c:	77fb      	strb	r3, [r7, #31]
    }

    return eStatus;
 800a17e:	7ffb      	ldrb	r3, [r7, #31]
}
 800a180:	4618      	mov	r0, r3
 800a182:	3724      	adds	r7, #36	; 0x24
 800a184:	46bd      	mov	sp, r7
 800a186:	bd90      	pop	{r4, r7, pc}
 800a188:	200050dc 	.word	0x200050dc
 800a18c:	20004bf8 	.word	0x20004bf8

0800a190 <usMBCRC16>:
    0x41, 0x81, 0x80, 0x40
};

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
 800a190:	b480      	push	{r7}
 800a192:	b085      	sub	sp, #20
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
 800a198:	460b      	mov	r3, r1
 800a19a:	807b      	strh	r3, [r7, #2]
    UCHAR           ucCRCHi = 0xFF;
 800a19c:	23ff      	movs	r3, #255	; 0xff
 800a19e:	73fb      	strb	r3, [r7, #15]
    UCHAR           ucCRCLo = 0xFF;
 800a1a0:	23ff      	movs	r3, #255	; 0xff
 800a1a2:	73bb      	strb	r3, [r7, #14]
    int             iIndex;

    while( usLen-- )
 800a1a4:	e013      	b.n	800a1ce <usMBCRC16+0x3e>
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	1c5a      	adds	r2, r3, #1
 800a1aa:	607a      	str	r2, [r7, #4]
 800a1ac:	781a      	ldrb	r2, [r3, #0]
 800a1ae:	7bbb      	ldrb	r3, [r7, #14]
 800a1b0:	4053      	eors	r3, r2
 800a1b2:	b2db      	uxtb	r3, r3
 800a1b4:	60bb      	str	r3, [r7, #8]
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 800a1b6:	4a0f      	ldr	r2, [pc, #60]	; (800a1f4 <usMBCRC16+0x64>)
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	4413      	add	r3, r2
 800a1bc:	781a      	ldrb	r2, [r3, #0]
 800a1be:	7bfb      	ldrb	r3, [r7, #15]
 800a1c0:	4053      	eors	r3, r2
 800a1c2:	73bb      	strb	r3, [r7, #14]
        ucCRCHi = aucCRCLo[iIndex];
 800a1c4:	4a0c      	ldr	r2, [pc, #48]	; (800a1f8 <usMBCRC16+0x68>)
 800a1c6:	68bb      	ldr	r3, [r7, #8]
 800a1c8:	4413      	add	r3, r2
 800a1ca:	781b      	ldrb	r3, [r3, #0]
 800a1cc:	73fb      	strb	r3, [r7, #15]
    while( usLen-- )
 800a1ce:	887b      	ldrh	r3, [r7, #2]
 800a1d0:	1e5a      	subs	r2, r3, #1
 800a1d2:	807a      	strh	r2, [r7, #2]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d1e6      	bne.n	800a1a6 <usMBCRC16+0x16>
    }
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
 800a1d8:	7bfb      	ldrb	r3, [r7, #15]
 800a1da:	021b      	lsls	r3, r3, #8
 800a1dc:	b21a      	sxth	r2, r3
 800a1de:	7bbb      	ldrb	r3, [r7, #14]
 800a1e0:	b21b      	sxth	r3, r3
 800a1e2:	4313      	orrs	r3, r2
 800a1e4:	b21b      	sxth	r3, r3
 800a1e6:	b29b      	uxth	r3, r3
}
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	3714      	adds	r7, #20
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f2:	4770      	bx	lr
 800a1f4:	0800be78 	.word	0x0800be78
 800a1f8:	0800bf78 	.word	0x0800bf78

0800a1fc <eMBRTUInit>:
static volatile USHORT usRcvBufferPos;

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBRTUInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b084      	sub	sp, #16
 800a200:	af00      	add	r7, sp, #0
 800a202:	603a      	str	r2, [r7, #0]
 800a204:	461a      	mov	r2, r3
 800a206:	4603      	mov	r3, r0
 800a208:	71fb      	strb	r3, [r7, #7]
 800a20a:	460b      	mov	r3, r1
 800a20c:	71bb      	strb	r3, [r7, #6]
 800a20e:	4613      	mov	r3, r2
 800a210:	717b      	strb	r3, [r7, #5]
    eMBErrorCode    eStatus = MB_ENOERR;
 800a212:	2300      	movs	r3, #0
 800a214:	73fb      	strb	r3, [r7, #15]
    ULONG           usTimerT35_50us;

    ( void )ucSlaveAddress;
    ENTER_CRITICAL_SECTION(  );
 800a216:	f7fe ff2d 	bl	8009074 <EnterCriticalSection>

    /* Modbus RTU uses 8 Databits. */
    if( xMBPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
 800a21a:	797b      	ldrb	r3, [r7, #5]
 800a21c:	79b8      	ldrb	r0, [r7, #6]
 800a21e:	2208      	movs	r2, #8
 800a220:	6839      	ldr	r1, [r7, #0]
 800a222:	f7ff f945 	bl	80094b0 <xMBPortSerialInit>
 800a226:	4603      	mov	r3, r0
 800a228:	2b01      	cmp	r3, #1
 800a22a:	d002      	beq.n	800a232 <eMBRTUInit+0x36>
    {
        eStatus = MB_EPORTERR;
 800a22c:	2303      	movs	r3, #3
 800a22e:	73fb      	strb	r3, [r7, #15]
 800a230:	e016      	b.n	800a260 <eMBRTUInit+0x64>
    else
    {
        /* If baudrate > 19200 then we should use the fixed timer values
         * t35 = 1750us. Otherwise t35 must be 3.5 times the character time.
         */
        if( ulBaudRate > 19200 )
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
 800a238:	d902      	bls.n	800a240 <eMBRTUInit+0x44>
        {
            usTimerT35_50us = 35;       /* 1800us. */
 800a23a:	2323      	movs	r3, #35	; 0x23
 800a23c:	60bb      	str	r3, [r7, #8]
 800a23e:	e005      	b.n	800a24c <eMBRTUInit+0x50>
             *             = 11 * Ticks_per_1s / Baudrate
             *             = 220000 / Baudrate
             * The reload for t3.5 is 1.5 times this value and similary
             * for t3.5.
             */
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	005b      	lsls	r3, r3, #1
 800a244:	4a0a      	ldr	r2, [pc, #40]	; (800a270 <eMBRTUInit+0x74>)
 800a246:	fbb2 f3f3 	udiv	r3, r2, r3
 800a24a:	60bb      	str	r3, [r7, #8]
        }
        if( xMBPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
 800a24c:	68bb      	ldr	r3, [r7, #8]
 800a24e:	b29b      	uxth	r3, r3
 800a250:	4618      	mov	r0, r3
 800a252:	f7ff fa59 	bl	8009708 <xMBPortTimersInit>
 800a256:	4603      	mov	r3, r0
 800a258:	2b01      	cmp	r3, #1
 800a25a:	d001      	beq.n	800a260 <eMBRTUInit+0x64>
        {
            eStatus = MB_EPORTERR;
 800a25c:	2303      	movs	r3, #3
 800a25e:	73fb      	strb	r3, [r7, #15]
        }
    }
    EXIT_CRITICAL_SECTION(  );
 800a260:	f7fe ff0e 	bl	8009080 <ExitCriticalSection>

    return eStatus;
 800a264:	7bfb      	ldrb	r3, [r7, #15]
}
 800a266:	4618      	mov	r0, r3
 800a268:	3710      	adds	r7, #16
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}
 800a26e:	bf00      	nop
 800a270:	00177fa0 	.word	0x00177fa0

0800a274 <eMBRTUStart>:

void
eMBRTUStart( void )
{
 800a274:	b580      	push	{r7, lr}
 800a276:	af00      	add	r7, sp, #0
    ENTER_CRITICAL_SECTION(  );
 800a278:	f7fe fefc 	bl	8009074 <EnterCriticalSection>
    /* Initially the receiver is in the state STATE_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_RX_INIT;
 800a27c:	4b06      	ldr	r3, [pc, #24]	; (800a298 <eMBRTUStart+0x24>)
 800a27e:	2200      	movs	r2, #0
 800a280:	701a      	strb	r2, [r3, #0]
    vMBPortSerialEnable( TRUE, FALSE );
 800a282:	2100      	movs	r1, #0
 800a284:	2001      	movs	r0, #1
 800a286:	f7ff f8db 	bl	8009440 <vMBPortSerialEnable>
    vMBPortTimersEnable(  );
 800a28a:	f7ff fa7d 	bl	8009788 <vMBPortTimersEnable>

    EXIT_CRITICAL_SECTION(  );
 800a28e:	f7fe fef7 	bl	8009080 <ExitCriticalSection>
}
 800a292:	bf00      	nop
 800a294:	bd80      	pop	{r7, pc}
 800a296:	bf00      	nop
 800a298:	20004c01 	.word	0x20004c01

0800a29c <eMBRTUStop>:

void
eMBRTUStop( void )
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	af00      	add	r7, sp, #0
    ENTER_CRITICAL_SECTION(  );
 800a2a0:	f7fe fee8 	bl	8009074 <EnterCriticalSection>
    vMBPortSerialEnable( FALSE, FALSE );
 800a2a4:	2100      	movs	r1, #0
 800a2a6:	2000      	movs	r0, #0
 800a2a8:	f7ff f8ca 	bl	8009440 <vMBPortSerialEnable>
    vMBPortTimersDisable(  );
 800a2ac:	f7ff fa7e 	bl	80097ac <vMBPortTimersDisable>
    EXIT_CRITICAL_SECTION(  );
 800a2b0:	f7fe fee6 	bl	8009080 <ExitCriticalSection>
}
 800a2b4:	bf00      	nop
 800a2b6:	bd80      	pop	{r7, pc}

0800a2b8 <eMBRTUReceive>:

eMBErrorCode
eMBRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b086      	sub	sp, #24
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	60f8      	str	r0, [r7, #12]
 800a2c0:	60b9      	str	r1, [r7, #8]
 800a2c2:	607a      	str	r2, [r7, #4]
    BOOL            xFrameReceived = FALSE;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eStatus = MB_ENOERR;
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	75fb      	strb	r3, [r7, #23]

    (void)(xFrameReceived);

    ENTER_CRITICAL_SECTION(  );
 800a2cc:	f7fe fed2 	bl	8009074 <EnterCriticalSection>
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );
 800a2d0:	4b1a      	ldr	r3, [pc, #104]	; (800a33c <eMBRTUReceive+0x84>)
 800a2d2:	881b      	ldrh	r3, [r3, #0]
 800a2d4:	b29b      	uxth	r3, r3
 800a2d6:	2bff      	cmp	r3, #255	; 0xff
 800a2d8:	d905      	bls.n	800a2e6 <eMBRTUReceive+0x2e>
 800a2da:	4b19      	ldr	r3, [pc, #100]	; (800a340 <eMBRTUReceive+0x88>)
 800a2dc:	4a19      	ldr	r2, [pc, #100]	; (800a344 <eMBRTUReceive+0x8c>)
 800a2de:	21a0      	movs	r1, #160	; 0xa0
 800a2e0:	4819      	ldr	r0, [pc, #100]	; (800a348 <eMBRTUReceive+0x90>)
 800a2e2:	f000 fc6b 	bl	800abbc <__assert_func>

    /* Length and CRC check */
    if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
 800a2e6:	4b15      	ldr	r3, [pc, #84]	; (800a33c <eMBRTUReceive+0x84>)
 800a2e8:	881b      	ldrh	r3, [r3, #0]
 800a2ea:	b29b      	uxth	r3, r3
 800a2ec:	2b03      	cmp	r3, #3
 800a2ee:	d91b      	bls.n	800a328 <eMBRTUReceive+0x70>
        && ( usMBCRC16( ( UCHAR * ) ucRTUBuf, usRcvBufferPos ) == 0 ) )
 800a2f0:	4b12      	ldr	r3, [pc, #72]	; (800a33c <eMBRTUReceive+0x84>)
 800a2f2:	881b      	ldrh	r3, [r3, #0]
 800a2f4:	b29b      	uxth	r3, r3
 800a2f6:	4619      	mov	r1, r3
 800a2f8:	4814      	ldr	r0, [pc, #80]	; (800a34c <eMBRTUReceive+0x94>)
 800a2fa:	f7ff ff49 	bl	800a190 <usMBCRC16>
 800a2fe:	4603      	mov	r3, r0
 800a300:	2b00      	cmp	r3, #0
 800a302:	d111      	bne.n	800a328 <eMBRTUReceive+0x70>
    {
        /* Save the address field. All frames are passed to the upper layed
         * and the decision if a frame is used is done there.
         */
        *pucRcvAddress = ucRTUBuf[MB_SER_PDU_ADDR_OFF];
 800a304:	4b11      	ldr	r3, [pc, #68]	; (800a34c <eMBRTUReceive+0x94>)
 800a306:	781b      	ldrb	r3, [r3, #0]
 800a308:	b2da      	uxtb	r2, r3
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	701a      	strb	r2, [r3, #0]

        /* Total length of Modbus-PDU is Modbus-Serial-Line-PDU minus
         * size of address field and CRC checksum.
         */
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 800a30e:	4b0b      	ldr	r3, [pc, #44]	; (800a33c <eMBRTUReceive+0x84>)
 800a310:	881b      	ldrh	r3, [r3, #0]
 800a312:	b29b      	uxth	r3, r3
 800a314:	3b03      	subs	r3, #3
 800a316:	b29a      	uxth	r2, r3
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	801a      	strh	r2, [r3, #0]

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	4a0c      	ldr	r2, [pc, #48]	; (800a350 <eMBRTUReceive+0x98>)
 800a320:	601a      	str	r2, [r3, #0]
        xFrameReceived = TRUE;
 800a322:	2301      	movs	r3, #1
 800a324:	75bb      	strb	r3, [r7, #22]
 800a326:	e001      	b.n	800a32c <eMBRTUReceive+0x74>
    }
    else
    {
        eStatus = MB_EIO;
 800a328:	2305      	movs	r3, #5
 800a32a:	75fb      	strb	r3, [r7, #23]
    }

    EXIT_CRITICAL_SECTION(  );
 800a32c:	f7fe fea8 	bl	8009080 <ExitCriticalSection>
    return eStatus;
 800a330:	7dfb      	ldrb	r3, [r7, #23]
}
 800a332:	4618      	mov	r0, r3
 800a334:	3718      	adds	r7, #24
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}
 800a33a:	bf00      	nop
 800a33c:	20004c0a 	.word	0x20004c0a
 800a340:	0800bd44 	.word	0x0800bd44
 800a344:	0800c078 	.word	0x0800c078
 800a348:	0800bd6c 	.word	0x0800bd6c
 800a34c:	2000531c 	.word	0x2000531c
 800a350:	2000531d 	.word	0x2000531d

0800a354 <eMBRTUSend>:

eMBErrorCode
eMBRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b084      	sub	sp, #16
 800a358:	af00      	add	r7, sp, #0
 800a35a:	4603      	mov	r3, r0
 800a35c:	6039      	str	r1, [r7, #0]
 800a35e:	71fb      	strb	r3, [r7, #7]
 800a360:	4613      	mov	r3, r2
 800a362:	80bb      	strh	r3, [r7, #4]
    eMBErrorCode    eStatus = MB_ENOERR;
 800a364:	2300      	movs	r3, #0
 800a366:	73fb      	strb	r3, [r7, #15]
    USHORT          usCRC16;

    ENTER_CRITICAL_SECTION(  );
 800a368:	f7fe fe84 	bl	8009074 <EnterCriticalSection>

    /* Check if the receiver is still in idle state. If not we where to
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_RX_IDLE )
 800a36c:	4b26      	ldr	r3, [pc, #152]	; (800a408 <eMBRTUSend+0xb4>)
 800a36e:	781b      	ldrb	r3, [r3, #0]
 800a370:	b2db      	uxtb	r3, r3
 800a372:	2b01      	cmp	r3, #1
 800a374:	d13f      	bne.n	800a3f6 <eMBRTUSend+0xa2>
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	3b01      	subs	r3, #1
 800a37a:	4a24      	ldr	r2, [pc, #144]	; (800a40c <eMBRTUSend+0xb8>)
 800a37c:	6013      	str	r3, [r2, #0]
        usSndBufferCount = 1;
 800a37e:	4b24      	ldr	r3, [pc, #144]	; (800a410 <eMBRTUSend+0xbc>)
 800a380:	2201      	movs	r2, #1
 800a382:	801a      	strh	r2, [r3, #0]

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
        pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
 800a384:	4b21      	ldr	r3, [pc, #132]	; (800a40c <eMBRTUSend+0xb8>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	79fa      	ldrb	r2, [r7, #7]
 800a38a:	701a      	strb	r2, [r3, #0]
        usSndBufferCount += usLength;
 800a38c:	4b20      	ldr	r3, [pc, #128]	; (800a410 <eMBRTUSend+0xbc>)
 800a38e:	881b      	ldrh	r3, [r3, #0]
 800a390:	b29a      	uxth	r2, r3
 800a392:	88bb      	ldrh	r3, [r7, #4]
 800a394:	4413      	add	r3, r2
 800a396:	b29a      	uxth	r2, r3
 800a398:	4b1d      	ldr	r3, [pc, #116]	; (800a410 <eMBRTUSend+0xbc>)
 800a39a:	801a      	strh	r2, [r3, #0]

        /* Calculate CRC16 checksum for Modbus-Serial-Line-PDU. */
        usCRC16 = usMBCRC16( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );
 800a39c:	4b1b      	ldr	r3, [pc, #108]	; (800a40c <eMBRTUSend+0xb8>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	4a1b      	ldr	r2, [pc, #108]	; (800a410 <eMBRTUSend+0xbc>)
 800a3a2:	8812      	ldrh	r2, [r2, #0]
 800a3a4:	b292      	uxth	r2, r2
 800a3a6:	4611      	mov	r1, r2
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f7ff fef1 	bl	800a190 <usMBCRC16>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	81bb      	strh	r3, [r7, #12]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
 800a3b2:	4b17      	ldr	r3, [pc, #92]	; (800a410 <eMBRTUSend+0xbc>)
 800a3b4:	881b      	ldrh	r3, [r3, #0]
 800a3b6:	b29b      	uxth	r3, r3
 800a3b8:	1c5a      	adds	r2, r3, #1
 800a3ba:	b291      	uxth	r1, r2
 800a3bc:	4a14      	ldr	r2, [pc, #80]	; (800a410 <eMBRTUSend+0xbc>)
 800a3be:	8011      	strh	r1, [r2, #0]
 800a3c0:	461a      	mov	r2, r3
 800a3c2:	89bb      	ldrh	r3, [r7, #12]
 800a3c4:	b2d9      	uxtb	r1, r3
 800a3c6:	4b13      	ldr	r3, [pc, #76]	; (800a414 <eMBRTUSend+0xc0>)
 800a3c8:	5499      	strb	r1, [r3, r2]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 800a3ca:	89bb      	ldrh	r3, [r7, #12]
 800a3cc:	0a1b      	lsrs	r3, r3, #8
 800a3ce:	b299      	uxth	r1, r3
 800a3d0:	4b0f      	ldr	r3, [pc, #60]	; (800a410 <eMBRTUSend+0xbc>)
 800a3d2:	881b      	ldrh	r3, [r3, #0]
 800a3d4:	b29b      	uxth	r3, r3
 800a3d6:	1c5a      	adds	r2, r3, #1
 800a3d8:	b290      	uxth	r0, r2
 800a3da:	4a0d      	ldr	r2, [pc, #52]	; (800a410 <eMBRTUSend+0xbc>)
 800a3dc:	8010      	strh	r0, [r2, #0]
 800a3de:	461a      	mov	r2, r3
 800a3e0:	b2c9      	uxtb	r1, r1
 800a3e2:	4b0c      	ldr	r3, [pc, #48]	; (800a414 <eMBRTUSend+0xc0>)
 800a3e4:	5499      	strb	r1, [r3, r2]
		#if MB_RTU_SLAVE_USE_RS485
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
		#endif

        /* Activate the transmitter. */
        eSndState = STATE_TX_XMIT;
 800a3e6:	4b0c      	ldr	r3, [pc, #48]	; (800a418 <eMBRTUSend+0xc4>)
 800a3e8:	2201      	movs	r2, #1
 800a3ea:	701a      	strb	r2, [r3, #0]
        vMBPortSerialEnable( FALSE, TRUE );
 800a3ec:	2101      	movs	r1, #1
 800a3ee:	2000      	movs	r0, #0
 800a3f0:	f7ff f826 	bl	8009440 <vMBPortSerialEnable>
 800a3f4:	e001      	b.n	800a3fa <eMBRTUSend+0xa6>
    }
    else
    {
        eStatus = MB_EIO;
 800a3f6:	2305      	movs	r3, #5
 800a3f8:	73fb      	strb	r3, [r7, #15]
    }
    EXIT_CRITICAL_SECTION(  );
 800a3fa:	f7fe fe41 	bl	8009080 <ExitCriticalSection>
    return eStatus;
 800a3fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800a400:	4618      	mov	r0, r3
 800a402:	3710      	adds	r7, #16
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}
 800a408:	20004c01 	.word	0x20004c01
 800a40c:	20004c04 	.word	0x20004c04
 800a410:	20004c08 	.word	0x20004c08
 800a414:	2000531c 	.word	0x2000531c
 800a418:	20004c00 	.word	0x20004c00

0800a41c <xMBRTUReceiveFSM>:

BOOL
xMBRTUReceiveFSM( void )		//run in UART_ISR - thread mode
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b082      	sub	sp, #8
 800a420:	af00      	add	r7, sp, #0
    BOOL            xTaskNeedSwitch = FALSE;
 800a422:	2300      	movs	r3, #0
 800a424:	71fb      	strb	r3, [r7, #7]
    UCHAR           ucByte;

    assert( eSndState == STATE_TX_IDLE );
 800a426:	4b2a      	ldr	r3, [pc, #168]	; (800a4d0 <xMBRTUReceiveFSM+0xb4>)
 800a428:	781b      	ldrb	r3, [r3, #0]
 800a42a:	b2db      	uxtb	r3, r3
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d005      	beq.n	800a43c <xMBRTUReceiveFSM+0x20>
 800a430:	4b28      	ldr	r3, [pc, #160]	; (800a4d4 <xMBRTUReceiveFSM+0xb8>)
 800a432:	4a29      	ldr	r2, [pc, #164]	; (800a4d8 <xMBRTUReceiveFSM+0xbc>)
 800a434:	21f2      	movs	r1, #242	; 0xf2
 800a436:	4829      	ldr	r0, [pc, #164]	; (800a4dc <xMBRTUReceiveFSM+0xc0>)
 800a438:	f000 fbc0 	bl	800abbc <__assert_func>

    /* Always read the character. */
    ( void )xMBPortSerialGetByte( ( CHAR * ) & ucByte );
 800a43c:	1dbb      	adds	r3, r7, #6
 800a43e:	4618      	mov	r0, r3
 800a440:	f7ff f85c 	bl	80094fc <xMBPortSerialGetByte>

    switch ( eRcvState )
 800a444:	4b26      	ldr	r3, [pc, #152]	; (800a4e0 <xMBRTUReceiveFSM+0xc4>)
 800a446:	781b      	ldrb	r3, [r3, #0]
 800a448:	b2db      	uxtb	r3, r3
 800a44a:	2b03      	cmp	r3, #3
 800a44c:	d83b      	bhi.n	800a4c6 <xMBRTUReceiveFSM+0xaa>
 800a44e:	a201      	add	r2, pc, #4	; (adr r2, 800a454 <xMBRTUReceiveFSM+0x38>)
 800a450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a454:	0800a465 	.word	0x0800a465
 800a458:	0800a471 	.word	0x0800a471
 800a45c:	0800a499 	.word	0x0800a499
 800a460:	0800a46b 	.word	0x0800a46b
    {
        /* If we have received a character in the init state we have to
         * wait until the frame is finished.
         */
    case STATE_RX_INIT:
        vMBPortTimersEnable(  );
 800a464:	f7ff f990 	bl	8009788 <vMBPortTimersEnable>
        break;
 800a468:	e02d      	b.n	800a4c6 <xMBRTUReceiveFSM+0xaa>

        /* In the error state we wait until all characters in the
         * damaged frame are transmitted.
         */
    case STATE_RX_ERROR:
        vMBPortTimersEnable(  );
 800a46a:	f7ff f98d 	bl	8009788 <vMBPortTimersEnable>
        break;
 800a46e:	e02a      	b.n	800a4c6 <xMBRTUReceiveFSM+0xaa>
        /* In the idle state we wait for a new character. If a character
         * is received the t1.5 and t3.5 timers are started and the
         * receiver is in the state STATE_RX_RECEIVCE.
         */
    case STATE_RX_IDLE:
        usRcvBufferPos = 0;
 800a470:	4b1c      	ldr	r3, [pc, #112]	; (800a4e4 <xMBRTUReceiveFSM+0xc8>)
 800a472:	2200      	movs	r2, #0
 800a474:	801a      	strh	r2, [r3, #0]
        ucRTUBuf[usRcvBufferPos++] = ucByte;
 800a476:	4b1b      	ldr	r3, [pc, #108]	; (800a4e4 <xMBRTUReceiveFSM+0xc8>)
 800a478:	881b      	ldrh	r3, [r3, #0]
 800a47a:	b29b      	uxth	r3, r3
 800a47c:	1c5a      	adds	r2, r3, #1
 800a47e:	b291      	uxth	r1, r2
 800a480:	4a18      	ldr	r2, [pc, #96]	; (800a4e4 <xMBRTUReceiveFSM+0xc8>)
 800a482:	8011      	strh	r1, [r2, #0]
 800a484:	461a      	mov	r2, r3
 800a486:	79b9      	ldrb	r1, [r7, #6]
 800a488:	4b17      	ldr	r3, [pc, #92]	; (800a4e8 <xMBRTUReceiveFSM+0xcc>)
 800a48a:	5499      	strb	r1, [r3, r2]
        eRcvState = STATE_RX_RCV;
 800a48c:	4b14      	ldr	r3, [pc, #80]	; (800a4e0 <xMBRTUReceiveFSM+0xc4>)
 800a48e:	2202      	movs	r2, #2
 800a490:	701a      	strb	r2, [r3, #0]

        /* Enable t3.5 timers. */
        vMBPortTimersEnable(  );
 800a492:	f7ff f979 	bl	8009788 <vMBPortTimersEnable>
        break;
 800a496:	e016      	b.n	800a4c6 <xMBRTUReceiveFSM+0xaa>
         * every character received. If more than the maximum possible
         * number of bytes in a modbus frame is received the frame is
         * ignored.
         */
    case STATE_RX_RCV:
        if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
 800a498:	4b12      	ldr	r3, [pc, #72]	; (800a4e4 <xMBRTUReceiveFSM+0xc8>)
 800a49a:	881b      	ldrh	r3, [r3, #0]
 800a49c:	b29b      	uxth	r3, r3
 800a49e:	2bff      	cmp	r3, #255	; 0xff
 800a4a0:	d80b      	bhi.n	800a4ba <xMBRTUReceiveFSM+0x9e>
        {
            ucRTUBuf[usRcvBufferPos++] = ucByte;
 800a4a2:	4b10      	ldr	r3, [pc, #64]	; (800a4e4 <xMBRTUReceiveFSM+0xc8>)
 800a4a4:	881b      	ldrh	r3, [r3, #0]
 800a4a6:	b29b      	uxth	r3, r3
 800a4a8:	1c5a      	adds	r2, r3, #1
 800a4aa:	b291      	uxth	r1, r2
 800a4ac:	4a0d      	ldr	r2, [pc, #52]	; (800a4e4 <xMBRTUReceiveFSM+0xc8>)
 800a4ae:	8011      	strh	r1, [r2, #0]
 800a4b0:	461a      	mov	r2, r3
 800a4b2:	79b9      	ldrb	r1, [r7, #6]
 800a4b4:	4b0c      	ldr	r3, [pc, #48]	; (800a4e8 <xMBRTUReceiveFSM+0xcc>)
 800a4b6:	5499      	strb	r1, [r3, r2]
 800a4b8:	e002      	b.n	800a4c0 <xMBRTUReceiveFSM+0xa4>
        }
        else
        {
            eRcvState = STATE_RX_ERROR;
 800a4ba:	4b09      	ldr	r3, [pc, #36]	; (800a4e0 <xMBRTUReceiveFSM+0xc4>)
 800a4bc:	2203      	movs	r2, #3
 800a4be:	701a      	strb	r2, [r3, #0]
        }
        vMBPortTimersEnable(  );
 800a4c0:	f7ff f962 	bl	8009788 <vMBPortTimersEnable>
        break;
 800a4c4:	bf00      	nop
    }
    return xTaskNeedSwitch;
 800a4c6:	79fb      	ldrb	r3, [r7, #7]
}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	3708      	adds	r7, #8
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bd80      	pop	{r7, pc}
 800a4d0:	20004c00 	.word	0x20004c00
 800a4d4:	0800bd90 	.word	0x0800bd90
 800a4d8:	0800c088 	.word	0x0800c088
 800a4dc:	0800bd6c 	.word	0x0800bd6c
 800a4e0:	20004c01 	.word	0x20004c01
 800a4e4:	20004c0a 	.word	0x20004c0a
 800a4e8:	2000531c 	.word	0x2000531c

0800a4ec <xMBRTUTransmitFSM>:

BOOL
xMBRTUTransmitFSM( void )	//run in UART_ISR - thread mode
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b082      	sub	sp, #8
 800a4f0:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	71fb      	strb	r3, [r7, #7]

    assert( eRcvState == STATE_RX_IDLE );
 800a4f6:	4b22      	ldr	r3, [pc, #136]	; (800a580 <xMBRTUTransmitFSM+0x94>)
 800a4f8:	781b      	ldrb	r3, [r3, #0]
 800a4fa:	b2db      	uxtb	r3, r3
 800a4fc:	2b01      	cmp	r3, #1
 800a4fe:	d006      	beq.n	800a50e <xMBRTUTransmitFSM+0x22>
 800a500:	4b20      	ldr	r3, [pc, #128]	; (800a584 <xMBRTUTransmitFSM+0x98>)
 800a502:	4a21      	ldr	r2, [pc, #132]	; (800a588 <xMBRTUTransmitFSM+0x9c>)
 800a504:	f240 112d 	movw	r1, #301	; 0x12d
 800a508:	4820      	ldr	r0, [pc, #128]	; (800a58c <xMBRTUTransmitFSM+0xa0>)
 800a50a:	f000 fb57 	bl	800abbc <__assert_func>

    switch ( eSndState )
 800a50e:	4b20      	ldr	r3, [pc, #128]	; (800a590 <xMBRTUTransmitFSM+0xa4>)
 800a510:	781b      	ldrb	r3, [r3, #0]
 800a512:	b2db      	uxtb	r3, r3
 800a514:	2b00      	cmp	r3, #0
 800a516:	d002      	beq.n	800a51e <xMBRTUTransmitFSM+0x32>
 800a518:	2b01      	cmp	r3, #1
 800a51a:	d005      	beq.n	800a528 <xMBRTUTransmitFSM+0x3c>
 800a51c:	e02a      	b.n	800a574 <xMBRTUTransmitFSM+0x88>
    {
        /* We should not get a transmitter event if the transmitter is in
         * idle state.  */
    case STATE_TX_IDLE:
        /* enable receiver/disable transmitter. */
        vMBPortSerialEnable( TRUE, FALSE );
 800a51e:	2100      	movs	r1, #0
 800a520:	2001      	movs	r0, #1
 800a522:	f7fe ff8d 	bl	8009440 <vMBPortSerialEnable>
        break;
 800a526:	e025      	b.n	800a574 <xMBRTUTransmitFSM+0x88>

    case STATE_TX_XMIT:
        /* check if we are finished. */
        if( usSndBufferCount != 0 )
 800a528:	4b1a      	ldr	r3, [pc, #104]	; (800a594 <xMBRTUTransmitFSM+0xa8>)
 800a52a:	881b      	ldrh	r3, [r3, #0]
 800a52c:	b29b      	uxth	r3, r3
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d013      	beq.n	800a55a <xMBRTUTransmitFSM+0x6e>
        {
            xMBPortSerialPutByte( ( CHAR )*pucSndBufferCur );
 800a532:	4b19      	ldr	r3, [pc, #100]	; (800a598 <xMBRTUTransmitFSM+0xac>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	781b      	ldrb	r3, [r3, #0]
 800a538:	b2db      	uxtb	r3, r3
 800a53a:	4618      	mov	r0, r3
 800a53c:	f7fe ffcc 	bl	80094d8 <xMBPortSerialPutByte>
            pucSndBufferCur++;  /* next byte in sendbuffer. */
 800a540:	4b15      	ldr	r3, [pc, #84]	; (800a598 <xMBRTUTransmitFSM+0xac>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	3301      	adds	r3, #1
 800a546:	4a14      	ldr	r2, [pc, #80]	; (800a598 <xMBRTUTransmitFSM+0xac>)
 800a548:	6013      	str	r3, [r2, #0]
            usSndBufferCount--;
 800a54a:	4b12      	ldr	r3, [pc, #72]	; (800a594 <xMBRTUTransmitFSM+0xa8>)
 800a54c:	881b      	ldrh	r3, [r3, #0]
 800a54e:	b29b      	uxth	r3, r3
 800a550:	3b01      	subs	r3, #1
 800a552:	b29a      	uxth	r2, r3
 800a554:	4b0f      	ldr	r3, [pc, #60]	; (800a594 <xMBRTUTransmitFSM+0xa8>)
 800a556:	801a      	strh	r2, [r3, #0]
            /* Disable transmitter. This prevents another transmit buffer
             * empty interrupt. */
            vMBPortSerialEnable( TRUE, FALSE );
            eSndState = STATE_TX_IDLE;
        }
        break;
 800a558:	e00b      	b.n	800a572 <xMBRTUTransmitFSM+0x86>
            xNeedPoll = xMBPortEventPostFromISR( EV_FRAME_SENT );
 800a55a:	2008      	movs	r0, #8
 800a55c:	f7fe fdca 	bl	80090f4 <xMBPortEventPostFromISR>
 800a560:	4603      	mov	r3, r0
 800a562:	71fb      	strb	r3, [r7, #7]
            vMBPortSerialEnable( TRUE, FALSE );
 800a564:	2100      	movs	r1, #0
 800a566:	2001      	movs	r0, #1
 800a568:	f7fe ff6a 	bl	8009440 <vMBPortSerialEnable>
            eSndState = STATE_TX_IDLE;
 800a56c:	4b08      	ldr	r3, [pc, #32]	; (800a590 <xMBRTUTransmitFSM+0xa4>)
 800a56e:	2200      	movs	r2, #0
 800a570:	701a      	strb	r2, [r3, #0]
        break;
 800a572:	bf00      	nop
    }

    return xNeedPoll;
 800a574:	79fb      	ldrb	r3, [r7, #7]
}
 800a576:	4618      	mov	r0, r3
 800a578:	3708      	adds	r7, #8
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}
 800a57e:	bf00      	nop
 800a580:	20004c01 	.word	0x20004c01
 800a584:	0800bdac 	.word	0x0800bdac
 800a588:	0800c09c 	.word	0x0800c09c
 800a58c:	0800bd6c 	.word	0x0800bd6c
 800a590:	20004c00 	.word	0x20004c00
 800a594:	20004c08 	.word	0x20004c08
 800a598:	20004c04 	.word	0x20004c04

0800a59c <xMBRTUTimerT35Expired>:

BOOL
xMBRTUTimerT35Expired( void )
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b082      	sub	sp, #8
 800a5a0:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	71fb      	strb	r3, [r7, #7]

    switch ( eRcvState )
 800a5a6:	4b1c      	ldr	r3, [pc, #112]	; (800a618 <xMBRTUTimerT35Expired+0x7c>)
 800a5a8:	781b      	ldrb	r3, [r3, #0]
 800a5aa:	b2db      	uxtb	r3, r3
 800a5ac:	2b03      	cmp	r3, #3
 800a5ae:	d028      	beq.n	800a602 <xMBRTUTimerT35Expired+0x66>
 800a5b0:	2b03      	cmp	r3, #3
 800a5b2:	dc10      	bgt.n	800a5d6 <xMBRTUTimerT35Expired+0x3a>
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d002      	beq.n	800a5be <xMBRTUTimerT35Expired+0x22>
 800a5b8:	2b02      	cmp	r3, #2
 800a5ba:	d006      	beq.n	800a5ca <xMBRTUTimerT35Expired+0x2e>
 800a5bc:	e00b      	b.n	800a5d6 <xMBRTUTimerT35Expired+0x3a>
    {
        /* Timer t35 expired. Startup phase is finished. */
    case STATE_RX_INIT:
        xNeedPoll = xMBPortEventPostFromISR( EV_READY );
 800a5be:	2001      	movs	r0, #1
 800a5c0:	f7fe fd98 	bl	80090f4 <xMBPortEventPostFromISR>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	71fb      	strb	r3, [r7, #7]
        break;
 800a5c8:	e01c      	b.n	800a604 <xMBRTUTimerT35Expired+0x68>

        /* A frame was received and t35 expired. Notify the listener that
         * a new frame was received. */
    case STATE_RX_RCV:
    	//vMBPortSerialEnable( FALSE, FALSE );
        xNeedPoll = xMBPortEventPostFromISR( EV_FRAME_RECEIVED );
 800a5ca:	2002      	movs	r0, #2
 800a5cc:	f7fe fd92 	bl	80090f4 <xMBPortEventPostFromISR>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	71fb      	strb	r3, [r7, #7]
        break;
 800a5d4:	e016      	b.n	800a604 <xMBRTUTimerT35Expired+0x68>
    case STATE_RX_ERROR:
        break;

        /* Function called in an illegal state. */
    default:
        assert( ( eRcvState == STATE_RX_INIT ) ||
 800a5d6:	4b10      	ldr	r3, [pc, #64]	; (800a618 <xMBRTUTimerT35Expired+0x7c>)
 800a5d8:	781b      	ldrb	r3, [r3, #0]
 800a5da:	b2db      	uxtb	r3, r3
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d011      	beq.n	800a604 <xMBRTUTimerT35Expired+0x68>
 800a5e0:	4b0d      	ldr	r3, [pc, #52]	; (800a618 <xMBRTUTimerT35Expired+0x7c>)
 800a5e2:	781b      	ldrb	r3, [r3, #0]
 800a5e4:	b2db      	uxtb	r3, r3
 800a5e6:	2b02      	cmp	r3, #2
 800a5e8:	d00c      	beq.n	800a604 <xMBRTUTimerT35Expired+0x68>
 800a5ea:	4b0b      	ldr	r3, [pc, #44]	; (800a618 <xMBRTUTimerT35Expired+0x7c>)
 800a5ec:	781b      	ldrb	r3, [r3, #0]
 800a5ee:	b2db      	uxtb	r3, r3
 800a5f0:	2b03      	cmp	r3, #3
 800a5f2:	d007      	beq.n	800a604 <xMBRTUTimerT35Expired+0x68>
 800a5f4:	4b09      	ldr	r3, [pc, #36]	; (800a61c <xMBRTUTimerT35Expired+0x80>)
 800a5f6:	4a0a      	ldr	r2, [pc, #40]	; (800a620 <xMBRTUTimerT35Expired+0x84>)
 800a5f8:	f240 1167 	movw	r1, #359	; 0x167
 800a5fc:	4809      	ldr	r0, [pc, #36]	; (800a624 <xMBRTUTimerT35Expired+0x88>)
 800a5fe:	f000 fadd 	bl	800abbc <__assert_func>
        break;
 800a602:	bf00      	nop
                ( eRcvState == STATE_RX_RCV ) || ( eRcvState == STATE_RX_ERROR ) );
    }

    vMBPortTimersDisable(  );
 800a604:	f7ff f8d2 	bl	80097ac <vMBPortTimersDisable>
    eRcvState = STATE_RX_IDLE;
 800a608:	4b03      	ldr	r3, [pc, #12]	; (800a618 <xMBRTUTimerT35Expired+0x7c>)
 800a60a:	2201      	movs	r2, #1
 800a60c:	701a      	strb	r2, [r3, #0]

    return xNeedPoll;
 800a60e:	79fb      	ldrb	r3, [r7, #7]
}
 800a610:	4618      	mov	r0, r3
 800a612:	3708      	adds	r7, #8
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}
 800a618:	20004c01 	.word	0x20004c01
 800a61c:	0800bdc8 	.word	0x0800bdc8
 800a620:	0800c0b0 	.word	0x0800c0b0
 800a624:	0800bd6c 	.word	0x0800bd6c

0800a628 <eMBMasterRTUInit>:
static volatile eMBMasterTimerMode eMasterCurTimerMode;

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBMasterRTUInit(UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b084      	sub	sp, #16
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	4603      	mov	r3, r0
 800a630:	6039      	str	r1, [r7, #0]
 800a632:	71fb      	strb	r3, [r7, #7]
 800a634:	4613      	mov	r3, r2
 800a636:	71bb      	strb	r3, [r7, #6]
    eMBErrorCode    eStatus = MB_ENOERR;
 800a638:	2300      	movs	r3, #0
 800a63a:	73fb      	strb	r3, [r7, #15]
    ULONG           usTimerT35_50us;

    ENTER_CRITICAL_SECTION(  );
 800a63c:	f7fe fd1a 	bl	8009074 <EnterCriticalSection>

    /* Modbus RTU uses 8 Databits. */
    if( xMBMasterPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
 800a640:	79bb      	ldrb	r3, [r7, #6]
 800a642:	79f8      	ldrb	r0, [r7, #7]
 800a644:	2208      	movs	r2, #8
 800a646:	6839      	ldr	r1, [r7, #0]
 800a648:	f7fe ffac 	bl	80095a4 <xMBMasterPortSerialInit>
 800a64c:	4603      	mov	r3, r0
 800a64e:	2b01      	cmp	r3, #1
 800a650:	d002      	beq.n	800a658 <eMBMasterRTUInit+0x30>
    {
        eStatus = MB_EPORTERR;
 800a652:	2303      	movs	r3, #3
 800a654:	73fb      	strb	r3, [r7, #15]
 800a656:	e016      	b.n	800a686 <eMBMasterRTUInit+0x5e>
    else
    {
        /* If baudrate > 19200 then we should use the fixed timer values
         * t35 = 1750us. Otherwise t35 must be 3.5 times the character time.
         */
        if( ulBaudRate > 19200 )
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
 800a65e:	d902      	bls.n	800a666 <eMBMasterRTUInit+0x3e>
        {
            usTimerT35_50us = 35;       /* 1800us. */
 800a660:	2323      	movs	r3, #35	; 0x23
 800a662:	60bb      	str	r3, [r7, #8]
 800a664:	e005      	b.n	800a672 <eMBMasterRTUInit+0x4a>
             *             = 11 * Ticks_per_1s / Baudrate
             *             = 220000 / Baudrate
             * The reload for t3.5 is 1.5 times this value and similary
             * for t3.5.
             */
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	005b      	lsls	r3, r3, #1
 800a66a:	4a0a      	ldr	r2, [pc, #40]	; (800a694 <eMBMasterRTUInit+0x6c>)
 800a66c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a670:	60bb      	str	r3, [r7, #8]
        }
        if( xMBMasterPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	b29b      	uxth	r3, r3
 800a676:	4618      	mov	r0, r3
 800a678:	f7ff f8d0 	bl	800981c <xMBMasterPortTimersInit>
 800a67c:	4603      	mov	r3, r0
 800a67e:	2b01      	cmp	r3, #1
 800a680:	d001      	beq.n	800a686 <eMBMasterRTUInit+0x5e>
        {
            eStatus = MB_EPORTERR;
 800a682:	2303      	movs	r3, #3
 800a684:	73fb      	strb	r3, [r7, #15]
        }
    }
    EXIT_CRITICAL_SECTION(  );
 800a686:	f7fe fcfb 	bl	8009080 <ExitCriticalSection>

    return eStatus;
 800a68a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	3710      	adds	r7, #16
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}
 800a694:	00177fa0 	.word	0x00177fa0

0800a698 <eMBMasterRTUStart>:

void
eMBMasterRTUStart( void )
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	af00      	add	r7, sp, #0
    ENTER_CRITICAL_SECTION(  );
 800a69c:	f7fe fcea 	bl	8009074 <EnterCriticalSection>
    /* Initially the receiver is in the state STATE_M_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_M_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_M_RX_INIT;
 800a6a0:	4b06      	ldr	r3, [pc, #24]	; (800a6bc <eMBMasterRTUStart+0x24>)
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	701a      	strb	r2, [r3, #0]
    vMBMasterPortSerialEnable( TRUE, FALSE );
 800a6a6:	2100      	movs	r1, #0
 800a6a8:	2001      	movs	r0, #1
 800a6aa:	f7fe ff8f 	bl	80095cc <vMBMasterPortSerialEnable>
    vMBMasterPortTimersT35Enable(  );
 800a6ae:	f7ff f8f5 	bl	800989c <vMBMasterPortTimersT35Enable>

    EXIT_CRITICAL_SECTION(  );
 800a6b2:	f7fe fce5 	bl	8009080 <ExitCriticalSection>
}
 800a6b6:	bf00      	nop
 800a6b8:	bd80      	pop	{r7, pc}
 800a6ba:	bf00      	nop
 800a6bc:	20004c0d 	.word	0x20004c0d

0800a6c0 <eMBMasterRTUStop>:

void
eMBMasterRTUStop( void )
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	af00      	add	r7, sp, #0
    ENTER_CRITICAL_SECTION(  );
 800a6c4:	f7fe fcd6 	bl	8009074 <EnterCriticalSection>
    vMBMasterPortSerialEnable( FALSE, FALSE );
 800a6c8:	2100      	movs	r1, #0
 800a6ca:	2000      	movs	r0, #0
 800a6cc:	f7fe ff7e 	bl	80095cc <vMBMasterPortSerialEnable>
    vMBMasterPortTimersDisable(  );
 800a6d0:	f7ff f916 	bl	8009900 <vMBMasterPortTimersDisable>
    EXIT_CRITICAL_SECTION(  );
 800a6d4:	f7fe fcd4 	bl	8009080 <ExitCriticalSection>
}
 800a6d8:	bf00      	nop
 800a6da:	bd80      	pop	{r7, pc}

0800a6dc <eMBMasterRTUReceive>:

eMBErrorCode
eMBMasterRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b086      	sub	sp, #24
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	60f8      	str	r0, [r7, #12]
 800a6e4:	60b9      	str	r1, [r7, #8]
 800a6e6:	607a      	str	r2, [r7, #4]
    eMBErrorCode    eStatus = MB_ENOERR;
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	75fb      	strb	r3, [r7, #23]

    ENTER_CRITICAL_SECTION(  );
 800a6ec:	f7fe fcc2 	bl	8009074 <EnterCriticalSection>
    //RT_ASSERT( usMasterRcvBufferPos < MB_SER_PDU_SIZE_MAX );
    configASSERT(usMasterRcvBufferPos < MB_SER_PDU_SIZE_MAX);
 800a6f0:	4b1c      	ldr	r3, [pc, #112]	; (800a764 <eMBMasterRTUReceive+0x88>)
 800a6f2:	881b      	ldrh	r3, [r3, #0]
 800a6f4:	b29b      	uxth	r3, r3
 800a6f6:	2bff      	cmp	r3, #255	; 0xff
 800a6f8:	d90c      	bls.n	800a714 <eMBMasterRTUReceive+0x38>
	__asm volatile
 800a6fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6fe:	b672      	cpsid	i
 800a700:	f383 8811 	msr	BASEPRI, r3
 800a704:	f3bf 8f6f 	isb	sy
 800a708:	f3bf 8f4f 	dsb	sy
 800a70c:	b662      	cpsie	i
 800a70e:	613b      	str	r3, [r7, #16]
}
 800a710:	bf00      	nop
 800a712:	e7fe      	b.n	800a712 <eMBMasterRTUReceive+0x36>

    /* Length and CRC check */
    if( ( usMasterRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
 800a714:	4b13      	ldr	r3, [pc, #76]	; (800a764 <eMBMasterRTUReceive+0x88>)
 800a716:	881b      	ldrh	r3, [r3, #0]
 800a718:	b29b      	uxth	r3, r3
 800a71a:	2b03      	cmp	r3, #3
 800a71c:	d919      	bls.n	800a752 <eMBMasterRTUReceive+0x76>
        && ( usMBCRC16( ( UCHAR * ) ucMasterRTURcvBuf, usMasterRcvBufferPos ) == 0 ) )
 800a71e:	4b11      	ldr	r3, [pc, #68]	; (800a764 <eMBMasterRTUReceive+0x88>)
 800a720:	881b      	ldrh	r3, [r3, #0]
 800a722:	b29b      	uxth	r3, r3
 800a724:	4619      	mov	r1, r3
 800a726:	4810      	ldr	r0, [pc, #64]	; (800a768 <eMBMasterRTUReceive+0x8c>)
 800a728:	f7ff fd32 	bl	800a190 <usMBCRC16>
 800a72c:	4603      	mov	r3, r0
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d10f      	bne.n	800a752 <eMBMasterRTUReceive+0x76>
    {
        /* Save the address field. All frames are passed to the upper layed
         * and the decision if a frame is used is done there.
         */
        *pucRcvAddress = ucMasterRTURcvBuf[MB_SER_PDU_ADDR_OFF];
 800a732:	4b0d      	ldr	r3, [pc, #52]	; (800a768 <eMBMasterRTUReceive+0x8c>)
 800a734:	781b      	ldrb	r3, [r3, #0]
 800a736:	b2da      	uxtb	r2, r3
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	701a      	strb	r2, [r3, #0]

        /* Total length of Modbus-PDU is Modbus-Serial-Line-PDU minus
         * size of address field and CRC checksum.
         */
        *pusLength = ( USHORT )( usMasterRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 800a73c:	4b09      	ldr	r3, [pc, #36]	; (800a764 <eMBMasterRTUReceive+0x88>)
 800a73e:	881b      	ldrh	r3, [r3, #0]
 800a740:	b29b      	uxth	r3, r3
 800a742:	3b03      	subs	r3, #3
 800a744:	b29a      	uxth	r2, r3
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	801a      	strh	r2, [r3, #0]

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucMasterRTURcvBuf[MB_SER_PDU_PDU_OFF];
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	4a07      	ldr	r2, [pc, #28]	; (800a76c <eMBMasterRTUReceive+0x90>)
 800a74e:	601a      	str	r2, [r3, #0]
 800a750:	e001      	b.n	800a756 <eMBMasterRTUReceive+0x7a>
    }
    else
    {
        eStatus = MB_EIO;
 800a752:	2305      	movs	r3, #5
 800a754:	75fb      	strb	r3, [r7, #23]
    }

    EXIT_CRITICAL_SECTION(  );
 800a756:	f7fe fc93 	bl	8009080 <ExitCriticalSection>
    return eStatus;
 800a75a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a75c:	4618      	mov	r0, r3
 800a75e:	3718      	adds	r7, #24
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}
 800a764:	20004e1a 	.word	0x20004e1a
 800a768:	20004d10 	.word	0x20004d10
 800a76c:	20004d11 	.word	0x20004d11

0800a770 <eMBMasterRTUSend>:

eMBErrorCode
eMBMasterRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )			//peMBMasterFrameSendCur from modbus POLL
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b084      	sub	sp, #16
 800a774:	af00      	add	r7, sp, #0
 800a776:	4603      	mov	r3, r0
 800a778:	6039      	str	r1, [r7, #0]
 800a77a:	71fb      	strb	r3, [r7, #7]
 800a77c:	4613      	mov	r3, r2
 800a77e:	80bb      	strh	r3, [r7, #4]
    eMBErrorCode    eStatus = MB_ENOERR;
 800a780:	2300      	movs	r3, #0
 800a782:	73fb      	strb	r3, [r7, #15]
    USHORT          usCRC16;

    if ( ucSlaveAddress > MB_MASTER_TOTAL_SLAVE_NUM ) return MB_EINVAL;
 800a784:	79fb      	ldrb	r3, [r7, #7]
 800a786:	2b10      	cmp	r3, #16
 800a788:	d901      	bls.n	800a78e <eMBMasterRTUSend+0x1e>
 800a78a:	2302      	movs	r3, #2
 800a78c:	e04b      	b.n	800a826 <eMBMasterRTUSend+0xb6>

    ENTER_CRITICAL_SECTION(  );
 800a78e:	f7fe fc71 	bl	8009074 <EnterCriticalSection>

    /* Check if the receiver is still in idle state. If not we where to
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_M_RX_IDLE )
 800a792:	4b27      	ldr	r3, [pc, #156]	; (800a830 <eMBMasterRTUSend+0xc0>)
 800a794:	781b      	ldrb	r3, [r3, #0]
 800a796:	b2db      	uxtb	r3, r3
 800a798:	2b01      	cmp	r3, #1
 800a79a:	d13f      	bne.n	800a81c <eMBMasterRTUSend+0xac>
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucMasterSndBufferCur = ( UCHAR * ) pucFrame - 1;
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	3b01      	subs	r3, #1
 800a7a0:	4a24      	ldr	r2, [pc, #144]	; (800a834 <eMBMasterRTUSend+0xc4>)
 800a7a2:	6013      	str	r3, [r2, #0]
        usMasterSndBufferCount = 1;
 800a7a4:	4b24      	ldr	r3, [pc, #144]	; (800a838 <eMBMasterRTUSend+0xc8>)
 800a7a6:	2201      	movs	r2, #1
 800a7a8:	801a      	strh	r2, [r3, #0]

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
        pucMasterSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
 800a7aa:	4b22      	ldr	r3, [pc, #136]	; (800a834 <eMBMasterRTUSend+0xc4>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	79fa      	ldrb	r2, [r7, #7]
 800a7b0:	701a      	strb	r2, [r3, #0]
        usMasterSndBufferCount += usLength;
 800a7b2:	4b21      	ldr	r3, [pc, #132]	; (800a838 <eMBMasterRTUSend+0xc8>)
 800a7b4:	881b      	ldrh	r3, [r3, #0]
 800a7b6:	b29a      	uxth	r2, r3
 800a7b8:	88bb      	ldrh	r3, [r7, #4]
 800a7ba:	4413      	add	r3, r2
 800a7bc:	b29a      	uxth	r2, r3
 800a7be:	4b1e      	ldr	r3, [pc, #120]	; (800a838 <eMBMasterRTUSend+0xc8>)
 800a7c0:	801a      	strh	r2, [r3, #0]

        /* Calculate CRC16 checksum for Modbus-Serial-Line-PDU. */
        usCRC16 = usMBCRC16( ( UCHAR * ) pucMasterSndBufferCur, usMasterSndBufferCount );
 800a7c2:	4b1c      	ldr	r3, [pc, #112]	; (800a834 <eMBMasterRTUSend+0xc4>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	4a1c      	ldr	r2, [pc, #112]	; (800a838 <eMBMasterRTUSend+0xc8>)
 800a7c8:	8812      	ldrh	r2, [r2, #0]
 800a7ca:	b292      	uxth	r2, r2
 800a7cc:	4611      	mov	r1, r2
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f7ff fcde 	bl	800a190 <usMBCRC16>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	81bb      	strh	r3, [r7, #12]
        ucMasterRTUSndBuf[usMasterSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
 800a7d8:	4b17      	ldr	r3, [pc, #92]	; (800a838 <eMBMasterRTUSend+0xc8>)
 800a7da:	881b      	ldrh	r3, [r3, #0]
 800a7dc:	b29b      	uxth	r3, r3
 800a7de:	1c5a      	adds	r2, r3, #1
 800a7e0:	b291      	uxth	r1, r2
 800a7e2:	4a15      	ldr	r2, [pc, #84]	; (800a838 <eMBMasterRTUSend+0xc8>)
 800a7e4:	8011      	strh	r1, [r2, #0]
 800a7e6:	461a      	mov	r2, r3
 800a7e8:	89bb      	ldrh	r3, [r7, #12]
 800a7ea:	b2d9      	uxtb	r1, r3
 800a7ec:	4b13      	ldr	r3, [pc, #76]	; (800a83c <eMBMasterRTUSend+0xcc>)
 800a7ee:	5499      	strb	r1, [r3, r2]
        ucMasterRTUSndBuf[usMasterSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 800a7f0:	89bb      	ldrh	r3, [r7, #12]
 800a7f2:	0a1b      	lsrs	r3, r3, #8
 800a7f4:	b299      	uxth	r1, r3
 800a7f6:	4b10      	ldr	r3, [pc, #64]	; (800a838 <eMBMasterRTUSend+0xc8>)
 800a7f8:	881b      	ldrh	r3, [r3, #0]
 800a7fa:	b29b      	uxth	r3, r3
 800a7fc:	1c5a      	adds	r2, r3, #1
 800a7fe:	b290      	uxth	r0, r2
 800a800:	4a0d      	ldr	r2, [pc, #52]	; (800a838 <eMBMasterRTUSend+0xc8>)
 800a802:	8010      	strh	r0, [r2, #0]
 800a804:	461a      	mov	r2, r3
 800a806:	b2c9      	uxtb	r1, r1
 800a808:	4b0c      	ldr	r3, [pc, #48]	; (800a83c <eMBMasterRTUSend+0xcc>)
 800a80a:	5499      	strb	r1, [r3, r2]
         */
		#if MB_RTU_MASTER_USE_RS485
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
		#endif
        /* Activate the transmitter. */
        eSndState = STATE_M_TX_XMIT;
 800a80c:	4b0c      	ldr	r3, [pc, #48]	; (800a840 <eMBMasterRTUSend+0xd0>)
 800a80e:	2201      	movs	r2, #1
 800a810:	701a      	strb	r2, [r3, #0]
        vMBMasterPortSerialEnable( FALSE, TRUE );
 800a812:	2101      	movs	r1, #1
 800a814:	2000      	movs	r0, #0
 800a816:	f7fe fed9 	bl	80095cc <vMBMasterPortSerialEnable>
 800a81a:	e001      	b.n	800a820 <eMBMasterRTUSend+0xb0>
    }
    else
    {
        eStatus = MB_EIO;
 800a81c:	2305      	movs	r3, #5
 800a81e:	73fb      	strb	r3, [r7, #15]
    }
    EXIT_CRITICAL_SECTION(  );
 800a820:	f7fe fc2e 	bl	8009080 <ExitCriticalSection>
    return eStatus;
 800a824:	7bfb      	ldrb	r3, [r7, #15]
}
 800a826:	4618      	mov	r0, r3
 800a828:	3710      	adds	r7, #16
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}
 800a82e:	bf00      	nop
 800a830:	20004c0d 	.word	0x20004c0d
 800a834:	20004e14 	.word	0x20004e14
 800a838:	20004e18 	.word	0x20004e18
 800a83c:	20004c10 	.word	0x20004c10
 800a840:	20004c0c 	.word	0x20004c0c

0800a844 <xMBMasterRTUReceiveFSM>:

BOOL
xMBMasterRTUReceiveFSM( void )				/* ISR handler*/
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b084      	sub	sp, #16
 800a848:	af00      	add	r7, sp, #0
    BOOL            xTaskNeedSwitch = FALSE;
 800a84a:	2300      	movs	r3, #0
 800a84c:	73fb      	strb	r3, [r7, #15]
    UCHAR           ucByte;

    //RT_ASSERT(( eSndState == STATE_M_TX_IDLE ) || ( eSndState == STATE_M_TX_XFWR ));

    configASSERT(( eSndState == STATE_M_TX_IDLE ) || ( eSndState == STATE_M_TX_XFWR ));
 800a84e:	4b36      	ldr	r3, [pc, #216]	; (800a928 <xMBMasterRTUReceiveFSM+0xe4>)
 800a850:	781b      	ldrb	r3, [r3, #0]
 800a852:	b2db      	uxtb	r3, r3
 800a854:	2b00      	cmp	r3, #0
 800a856:	d004      	beq.n	800a862 <xMBMasterRTUReceiveFSM+0x1e>
 800a858:	4b33      	ldr	r3, [pc, #204]	; (800a928 <xMBMasterRTUReceiveFSM+0xe4>)
 800a85a:	781b      	ldrb	r3, [r3, #0]
 800a85c:	b2db      	uxtb	r3, r3
 800a85e:	2b02      	cmp	r3, #2
 800a860:	d101      	bne.n	800a866 <xMBMasterRTUReceiveFSM+0x22>
 800a862:	2301      	movs	r3, #1
 800a864:	e000      	b.n	800a868 <xMBMasterRTUReceiveFSM+0x24>
 800a866:	2300      	movs	r3, #0
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d10c      	bne.n	800a886 <xMBMasterRTUReceiveFSM+0x42>
	__asm volatile
 800a86c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a870:	b672      	cpsid	i
 800a872:	f383 8811 	msr	BASEPRI, r3
 800a876:	f3bf 8f6f 	isb	sy
 800a87a:	f3bf 8f4f 	dsb	sy
 800a87e:	b662      	cpsie	i
 800a880:	60bb      	str	r3, [r7, #8]
}
 800a882:	bf00      	nop
 800a884:	e7fe      	b.n	800a884 <xMBMasterRTUReceiveFSM+0x40>

    /* Always read the character. */
    ( void )xMBMasterPortSerialGetByte( ( CHAR * ) & ucByte );
 800a886:	1dfb      	adds	r3, r7, #7
 800a888:	4618      	mov	r0, r3
 800a88a:	f7fe fee9 	bl	8009660 <xMBMasterPortSerialGetByte>

    switch ( eRcvState )
 800a88e:	4b27      	ldr	r3, [pc, #156]	; (800a92c <xMBMasterRTUReceiveFSM+0xe8>)
 800a890:	781b      	ldrb	r3, [r3, #0]
 800a892:	b2db      	uxtb	r3, r3
 800a894:	2b03      	cmp	r3, #3
 800a896:	d841      	bhi.n	800a91c <xMBMasterRTUReceiveFSM+0xd8>
 800a898:	a201      	add	r2, pc, #4	; (adr r2, 800a8a0 <xMBMasterRTUReceiveFSM+0x5c>)
 800a89a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a89e:	bf00      	nop
 800a8a0:	0800a8b1 	.word	0x0800a8b1
 800a8a4:	0800a8bd 	.word	0x0800a8bd
 800a8a8:	0800a8ef 	.word	0x0800a8ef
 800a8ac:	0800a8b7 	.word	0x0800a8b7
    {
        /* If we have received a character in the init state we have to
         * wait until the frame is finished.
         */
    case STATE_M_RX_INIT:
        vMBMasterPortTimersT35Enable( );
 800a8b0:	f7fe fff4 	bl	800989c <vMBMasterPortTimersT35Enable>
        break;
 800a8b4:	e032      	b.n	800a91c <xMBMasterRTUReceiveFSM+0xd8>

        /* In the error state we wait until all characters in the
         * damaged frame are transmitted.
         */
    case STATE_M_RX_ERROR:
        vMBMasterPortTimersT35Enable( );
 800a8b6:	f7fe fff1 	bl	800989c <vMBMasterPortTimersT35Enable>
        break;
 800a8ba:	e02f      	b.n	800a91c <xMBMasterRTUReceiveFSM+0xd8>
         */
    case STATE_M_RX_IDLE:
    	/* In time of respond timeout,the receiver receive a frame.
    	 * Disable timer of respond timeout and change the transmiter state to idle.
    	 */
    	vMBMasterPortTimersDisable( );
 800a8bc:	f7ff f820 	bl	8009900 <vMBMasterPortTimersDisable>
    	eSndState = STATE_M_TX_IDLE;
 800a8c0:	4b19      	ldr	r3, [pc, #100]	; (800a928 <xMBMasterRTUReceiveFSM+0xe4>)
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	701a      	strb	r2, [r3, #0]

        usMasterRcvBufferPos = 0;
 800a8c6:	4b1a      	ldr	r3, [pc, #104]	; (800a930 <xMBMasterRTUReceiveFSM+0xec>)
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	801a      	strh	r2, [r3, #0]
        ucMasterRTURcvBuf[usMasterRcvBufferPos++] = ucByte;
 800a8cc:	4b18      	ldr	r3, [pc, #96]	; (800a930 <xMBMasterRTUReceiveFSM+0xec>)
 800a8ce:	881b      	ldrh	r3, [r3, #0]
 800a8d0:	b29b      	uxth	r3, r3
 800a8d2:	1c5a      	adds	r2, r3, #1
 800a8d4:	b291      	uxth	r1, r2
 800a8d6:	4a16      	ldr	r2, [pc, #88]	; (800a930 <xMBMasterRTUReceiveFSM+0xec>)
 800a8d8:	8011      	strh	r1, [r2, #0]
 800a8da:	461a      	mov	r2, r3
 800a8dc:	79f9      	ldrb	r1, [r7, #7]
 800a8de:	4b15      	ldr	r3, [pc, #84]	; (800a934 <xMBMasterRTUReceiveFSM+0xf0>)
 800a8e0:	5499      	strb	r1, [r3, r2]
        eRcvState = STATE_M_RX_RCV;
 800a8e2:	4b12      	ldr	r3, [pc, #72]	; (800a92c <xMBMasterRTUReceiveFSM+0xe8>)
 800a8e4:	2202      	movs	r2, #2
 800a8e6:	701a      	strb	r2, [r3, #0]

        /* Enable t3.5 timers. */
        vMBMasterPortTimersT35Enable( );
 800a8e8:	f7fe ffd8 	bl	800989c <vMBMasterPortTimersT35Enable>
        break;
 800a8ec:	e016      	b.n	800a91c <xMBMasterRTUReceiveFSM+0xd8>
         * every character received. If more than the maximum possible
         * number of bytes in a modbus frame is received the frame is
         * ignored.
         */
    case STATE_M_RX_RCV:
        if( usMasterRcvBufferPos < MB_SER_PDU_SIZE_MAX )
 800a8ee:	4b10      	ldr	r3, [pc, #64]	; (800a930 <xMBMasterRTUReceiveFSM+0xec>)
 800a8f0:	881b      	ldrh	r3, [r3, #0]
 800a8f2:	b29b      	uxth	r3, r3
 800a8f4:	2bff      	cmp	r3, #255	; 0xff
 800a8f6:	d80b      	bhi.n	800a910 <xMBMasterRTUReceiveFSM+0xcc>
        {
            ucMasterRTURcvBuf[usMasterRcvBufferPos++] = ucByte;
 800a8f8:	4b0d      	ldr	r3, [pc, #52]	; (800a930 <xMBMasterRTUReceiveFSM+0xec>)
 800a8fa:	881b      	ldrh	r3, [r3, #0]
 800a8fc:	b29b      	uxth	r3, r3
 800a8fe:	1c5a      	adds	r2, r3, #1
 800a900:	b291      	uxth	r1, r2
 800a902:	4a0b      	ldr	r2, [pc, #44]	; (800a930 <xMBMasterRTUReceiveFSM+0xec>)
 800a904:	8011      	strh	r1, [r2, #0]
 800a906:	461a      	mov	r2, r3
 800a908:	79f9      	ldrb	r1, [r7, #7]
 800a90a:	4b0a      	ldr	r3, [pc, #40]	; (800a934 <xMBMasterRTUReceiveFSM+0xf0>)
 800a90c:	5499      	strb	r1, [r3, r2]
 800a90e:	e002      	b.n	800a916 <xMBMasterRTUReceiveFSM+0xd2>
        }
        else
        {
            eRcvState = STATE_M_RX_ERROR;
 800a910:	4b06      	ldr	r3, [pc, #24]	; (800a92c <xMBMasterRTUReceiveFSM+0xe8>)
 800a912:	2203      	movs	r2, #3
 800a914:	701a      	strb	r2, [r3, #0]
        }
        vMBMasterPortTimersT35Enable();
 800a916:	f7fe ffc1 	bl	800989c <vMBMasterPortTimersT35Enable>
        break;
 800a91a:	bf00      	nop
    }
    return xTaskNeedSwitch;
 800a91c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a91e:	4618      	mov	r0, r3
 800a920:	3710      	adds	r7, #16
 800a922:	46bd      	mov	sp, r7
 800a924:	bd80      	pop	{r7, pc}
 800a926:	bf00      	nop
 800a928:	20004c0c 	.word	0x20004c0c
 800a92c:	20004c0d 	.word	0x20004c0d
 800a930:	20004e1a 	.word	0x20004e1a
 800a934:	20004d10 	.word	0x20004d10

0800a938 <xMBMasterRTUTransmitFSM>:

BOOL
xMBMasterRTUTransmitFSM( void )
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b082      	sub	sp, #8
 800a93c:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 800a93e:	2300      	movs	r3, #0
 800a940:	71fb      	strb	r3, [r7, #7]

    //RT_ASSERT( eRcvState == STATE_M_RX_IDLE );
    configASSERT(eRcvState == STATE_M_RX_IDLE);
 800a942:	4b2d      	ldr	r3, [pc, #180]	; (800a9f8 <xMBMasterRTUTransmitFSM+0xc0>)
 800a944:	781b      	ldrb	r3, [r3, #0]
 800a946:	b2db      	uxtb	r3, r3
 800a948:	2b01      	cmp	r3, #1
 800a94a:	d00c      	beq.n	800a966 <xMBMasterRTUTransmitFSM+0x2e>
	__asm volatile
 800a94c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a950:	b672      	cpsid	i
 800a952:	f383 8811 	msr	BASEPRI, r3
 800a956:	f3bf 8f6f 	isb	sy
 800a95a:	f3bf 8f4f 	dsb	sy
 800a95e:	b662      	cpsie	i
 800a960:	603b      	str	r3, [r7, #0]
}
 800a962:	bf00      	nop
 800a964:	e7fe      	b.n	800a964 <xMBMasterRTUTransmitFSM+0x2c>
    switch ( eSndState )
 800a966:	4b25      	ldr	r3, [pc, #148]	; (800a9fc <xMBMasterRTUTransmitFSM+0xc4>)
 800a968:	781b      	ldrb	r3, [r3, #0]
 800a96a:	b2db      	uxtb	r3, r3
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d002      	beq.n	800a976 <xMBMasterRTUTransmitFSM+0x3e>
 800a970:	2b01      	cmp	r3, #1
 800a972:	d005      	beq.n	800a980 <xMBMasterRTUTransmitFSM+0x48>
            }
        }
        break;

    default:
        break;
 800a974:	e03a      	b.n	800a9ec <xMBMasterRTUTransmitFSM+0xb4>
        vMBMasterPortSerialEnable( TRUE, FALSE );
 800a976:	2100      	movs	r1, #0
 800a978:	2001      	movs	r0, #1
 800a97a:	f7fe fe27 	bl	80095cc <vMBMasterPortSerialEnable>
        break;
 800a97e:	e035      	b.n	800a9ec <xMBMasterRTUTransmitFSM+0xb4>
        if( usMasterSndBufferCount != 0 )
 800a980:	4b1f      	ldr	r3, [pc, #124]	; (800aa00 <xMBMasterRTUTransmitFSM+0xc8>)
 800a982:	881b      	ldrh	r3, [r3, #0]
 800a984:	b29b      	uxth	r3, r3
 800a986:	2b00      	cmp	r3, #0
 800a988:	d013      	beq.n	800a9b2 <xMBMasterRTUTransmitFSM+0x7a>
            xMBMasterPortSerialPutByte( ( CHAR )*pucMasterSndBufferCur );
 800a98a:	4b1e      	ldr	r3, [pc, #120]	; (800aa04 <xMBMasterRTUTransmitFSM+0xcc>)
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	781b      	ldrb	r3, [r3, #0]
 800a990:	b2db      	uxtb	r3, r3
 800a992:	4618      	mov	r0, r3
 800a994:	f7fe fe52 	bl	800963c <xMBMasterPortSerialPutByte>
            pucMasterSndBufferCur++;  /* next byte in sendbuffer. */
 800a998:	4b1a      	ldr	r3, [pc, #104]	; (800aa04 <xMBMasterRTUTransmitFSM+0xcc>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	3301      	adds	r3, #1
 800a99e:	4a19      	ldr	r2, [pc, #100]	; (800aa04 <xMBMasterRTUTransmitFSM+0xcc>)
 800a9a0:	6013      	str	r3, [r2, #0]
            usMasterSndBufferCount--;
 800a9a2:	4b17      	ldr	r3, [pc, #92]	; (800aa00 <xMBMasterRTUTransmitFSM+0xc8>)
 800a9a4:	881b      	ldrh	r3, [r3, #0]
 800a9a6:	b29b      	uxth	r3, r3
 800a9a8:	3b01      	subs	r3, #1
 800a9aa:	b29a      	uxth	r2, r3
 800a9ac:	4b14      	ldr	r3, [pc, #80]	; (800aa00 <xMBMasterRTUTransmitFSM+0xc8>)
 800a9ae:	801a      	strh	r2, [r3, #0]
        break;
 800a9b0:	e01b      	b.n	800a9ea <xMBMasterRTUTransmitFSM+0xb2>
            xFrameIsBroadcast = ( ucMasterRTUSndBuf[MB_SER_PDU_ADDR_OFF] == MB_ADDRESS_BROADCAST ) ? TRUE : FALSE;
 800a9b2:	4b15      	ldr	r3, [pc, #84]	; (800aa08 <xMBMasterRTUTransmitFSM+0xd0>)
 800a9b4:	781b      	ldrb	r3, [r3, #0]
 800a9b6:	b2db      	uxtb	r3, r3
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	bf0c      	ite	eq
 800a9bc:	2301      	moveq	r3, #1
 800a9be:	2300      	movne	r3, #0
 800a9c0:	b2db      	uxtb	r3, r3
 800a9c2:	461a      	mov	r2, r3
 800a9c4:	4b11      	ldr	r3, [pc, #68]	; (800aa0c <xMBMasterRTUTransmitFSM+0xd4>)
 800a9c6:	701a      	strb	r2, [r3, #0]
            vMBMasterPortSerialEnable( TRUE, FALSE );
 800a9c8:	2100      	movs	r1, #0
 800a9ca:	2001      	movs	r0, #1
 800a9cc:	f7fe fdfe 	bl	80095cc <vMBMasterPortSerialEnable>
            eSndState = STATE_M_TX_XFWR;
 800a9d0:	4b0a      	ldr	r3, [pc, #40]	; (800a9fc <xMBMasterRTUTransmitFSM+0xc4>)
 800a9d2:	2202      	movs	r2, #2
 800a9d4:	701a      	strb	r2, [r3, #0]
            if ( xFrameIsBroadcast == TRUE )
 800a9d6:	4b0d      	ldr	r3, [pc, #52]	; (800aa0c <xMBMasterRTUTransmitFSM+0xd4>)
 800a9d8:	781b      	ldrb	r3, [r3, #0]
 800a9da:	b2db      	uxtb	r3, r3
 800a9dc:	2b01      	cmp	r3, #1
 800a9de:	d102      	bne.n	800a9e6 <xMBMasterRTUTransmitFSM+0xae>
            	vMBMasterPortTimersConvertDelayEnable( );
 800a9e0:	f7fe ff6e 	bl	80098c0 <vMBMasterPortTimersConvertDelayEnable>
        break;
 800a9e4:	e001      	b.n	800a9ea <xMBMasterRTUTransmitFSM+0xb2>
            	vMBMasterPortTimersRespondTimeoutEnable( );
 800a9e6:	f7fe ff7b 	bl	80098e0 <vMBMasterPortTimersRespondTimeoutEnable>
        break;
 800a9ea:	bf00      	nop
    }

    return xNeedPoll;
 800a9ec:	79fb      	ldrb	r3, [r7, #7]
}
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	3708      	adds	r7, #8
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bd80      	pop	{r7, pc}
 800a9f6:	bf00      	nop
 800a9f8:	20004c0d 	.word	0x20004c0d
 800a9fc:	20004c0c 	.word	0x20004c0c
 800aa00:	20004e18 	.word	0x20004e18
 800aa04:	20004e14 	.word	0x20004e14
 800aa08:	20004c10 	.word	0x20004c10
 800aa0c:	20004e1c 	.word	0x20004e1c

0800aa10 <xMBMasterRTUTimerExpired>:

BOOL
xMBMasterRTUTimerExpired(void)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b084      	sub	sp, #16
 800aa14:	af00      	add	r7, sp, #0
	BOOL xNeedPoll = FALSE;
 800aa16:	2300      	movs	r3, #0
 800aa18:	73fb      	strb	r3, [r7, #15]

	switch (eRcvState)
 800aa1a:	4b48      	ldr	r3, [pc, #288]	; (800ab3c <xMBMasterRTUTimerExpired+0x12c>)
 800aa1c:	781b      	ldrb	r3, [r3, #0]
 800aa1e:	b2db      	uxtb	r3, r3
 800aa20:	2b03      	cmp	r3, #3
 800aa22:	d012      	beq.n	800aa4a <xMBMasterRTUTimerExpired+0x3a>
 800aa24:	2b03      	cmp	r3, #3
 800aa26:	dc19      	bgt.n	800aa5c <xMBMasterRTUTimerExpired+0x4c>
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d002      	beq.n	800aa32 <xMBMasterRTUTimerExpired+0x22>
 800aa2c:	2b02      	cmp	r3, #2
 800aa2e:	d006      	beq.n	800aa3e <xMBMasterRTUTimerExpired+0x2e>
 800aa30:	e014      	b.n	800aa5c <xMBMasterRTUTimerExpired+0x4c>
	{
		/* Timer t35 expired. Startup phase is finished. */
	case STATE_M_RX_INIT:
		xNeedPoll = xMBMasterPortEventPostFromISR(EV_MASTER_READY);
 800aa32:	2001      	movs	r0, #1
 800aa34:	f7fe fbdc 	bl	80091f0 <xMBMasterPortEventPostFromISR>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	73fb      	strb	r3, [r7, #15]
		break;
 800aa3c:	e035      	b.n	800aaaa <xMBMasterRTUTimerExpired+0x9a>

		/* A frame was received and t35 expired. Notify the listener that
		 * a new frame was received. */
	case STATE_M_RX_RCV:
		xNeedPoll = xMBMasterPortEventPostFromISR(EV_MASTER_FRAME_RECEIVED);
 800aa3e:	2002      	movs	r0, #2
 800aa40:	f7fe fbd6 	bl	80091f0 <xMBMasterPortEventPostFromISR>
 800aa44:	4603      	mov	r3, r0
 800aa46:	73fb      	strb	r3, [r7, #15]
		break;
 800aa48:	e02f      	b.n	800aaaa <xMBMasterRTUTimerExpired+0x9a>

		/* An error occured while receiving the frame. */
	case STATE_M_RX_ERROR:
		vMBMasterSetErrorType(EV_ERROR_RECEIVE_DATA);
 800aa4a:	2001      	movs	r0, #1
 800aa4c:	f7fe f9d8 	bl	8008e00 <vMBMasterSetErrorType>
		xNeedPoll = xMBMasterPortEventPostFromISR( EV_MASTER_ERROR_PROCESS );
 800aa50:	2010      	movs	r0, #16
 800aa52:	f7fe fbcd 	bl	80091f0 <xMBMasterPortEventPostFromISR>
 800aa56:	4603      	mov	r3, r0
 800aa58:	73fb      	strb	r3, [r7, #15]
		break;
 800aa5a:	e026      	b.n	800aaaa <xMBMasterRTUTimerExpired+0x9a>

		/* Function called in an illegal state. */
	default:
		//RT_ASSERT
		configASSERT(
 800aa5c:	4b37      	ldr	r3, [pc, #220]	; (800ab3c <xMBMasterRTUTimerExpired+0x12c>)
 800aa5e:	781b      	ldrb	r3, [r3, #0]
 800aa60:	b2db      	uxtb	r3, r3
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d00e      	beq.n	800aa84 <xMBMasterRTUTimerExpired+0x74>
 800aa66:	4b35      	ldr	r3, [pc, #212]	; (800ab3c <xMBMasterRTUTimerExpired+0x12c>)
 800aa68:	781b      	ldrb	r3, [r3, #0]
 800aa6a:	b2db      	uxtb	r3, r3
 800aa6c:	2b02      	cmp	r3, #2
 800aa6e:	d009      	beq.n	800aa84 <xMBMasterRTUTimerExpired+0x74>
 800aa70:	4b32      	ldr	r3, [pc, #200]	; (800ab3c <xMBMasterRTUTimerExpired+0x12c>)
 800aa72:	781b      	ldrb	r3, [r3, #0]
 800aa74:	b2db      	uxtb	r3, r3
 800aa76:	2b03      	cmp	r3, #3
 800aa78:	d004      	beq.n	800aa84 <xMBMasterRTUTimerExpired+0x74>
 800aa7a:	4b30      	ldr	r3, [pc, #192]	; (800ab3c <xMBMasterRTUTimerExpired+0x12c>)
 800aa7c:	781b      	ldrb	r3, [r3, #0]
 800aa7e:	b2db      	uxtb	r3, r3
 800aa80:	2b01      	cmp	r3, #1
 800aa82:	d101      	bne.n	800aa88 <xMBMasterRTUTimerExpired+0x78>
 800aa84:	2301      	movs	r3, #1
 800aa86:	e000      	b.n	800aa8a <xMBMasterRTUTimerExpired+0x7a>
 800aa88:	2300      	movs	r3, #0
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d10c      	bne.n	800aaa8 <xMBMasterRTUTimerExpired+0x98>
	__asm volatile
 800aa8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa92:	b672      	cpsid	i
 800aa94:	f383 8811 	msr	BASEPRI, r3
 800aa98:	f3bf 8f6f 	isb	sy
 800aa9c:	f3bf 8f4f 	dsb	sy
 800aaa0:	b662      	cpsie	i
 800aaa2:	60bb      	str	r3, [r7, #8]
}
 800aaa4:	bf00      	nop
 800aaa6:	e7fe      	b.n	800aaa6 <xMBMasterRTUTimerExpired+0x96>
				( eRcvState == STATE_M_RX_INIT ) || ( eRcvState == STATE_M_RX_RCV ) ||
				( eRcvState == STATE_M_RX_ERROR ) || ( eRcvState == STATE_M_RX_IDLE ));
		break;
 800aaa8:	bf00      	nop
	}
	eRcvState = STATE_M_RX_IDLE;
 800aaaa:	4b24      	ldr	r3, [pc, #144]	; (800ab3c <xMBMasterRTUTimerExpired+0x12c>)
 800aaac:	2201      	movs	r2, #1
 800aaae:	701a      	strb	r2, [r3, #0]

	switch (eSndState)
 800aab0:	4b23      	ldr	r3, [pc, #140]	; (800ab40 <xMBMasterRTUTimerExpired+0x130>)
 800aab2:	781b      	ldrb	r3, [r3, #0]
 800aab4:	b2db      	uxtb	r3, r3
 800aab6:	2b02      	cmp	r3, #2
 800aab8:	d10d      	bne.n	800aad6 <xMBMasterRTUTimerExpired+0xc6>
	{
		/* A frame was send finish and convert delay or respond timeout expired.
		 * If the frame is broadcast,The master will idle,and if the frame is not
		 * broadcast.Notify the listener process error.*/
	case STATE_M_TX_XFWR:
		if ( xFrameIsBroadcast == FALSE ) {
 800aaba:	4b22      	ldr	r3, [pc, #136]	; (800ab44 <xMBMasterRTUTimerExpired+0x134>)
 800aabc:	781b      	ldrb	r3, [r3, #0]
 800aabe:	b2db      	uxtb	r3, r3
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d124      	bne.n	800ab0e <xMBMasterRTUTimerExpired+0xfe>
			vMBMasterSetErrorType(EV_ERROR_RESPOND_TIMEOUT);
 800aac4:	2000      	movs	r0, #0
 800aac6:	f7fe f99b 	bl	8008e00 <vMBMasterSetErrorType>
			xNeedPoll = xMBMasterPortEventPostFromISR(EV_MASTER_ERROR_PROCESS);
 800aaca:	2010      	movs	r0, #16
 800aacc:	f7fe fb90 	bl	80091f0 <xMBMasterPortEventPostFromISR>
 800aad0:	4603      	mov	r3, r0
 800aad2:	73fb      	strb	r3, [r7, #15]
		}
		break;
 800aad4:	e01b      	b.n	800ab0e <xMBMasterRTUTimerExpired+0xfe>
		/* Function called in an illegal state. */
	default:
		//RT_ASSERT
		//NOTE: assert_param(x)
		configASSERT(
 800aad6:	4b1a      	ldr	r3, [pc, #104]	; (800ab40 <xMBMasterRTUTimerExpired+0x130>)
 800aad8:	781b      	ldrb	r3, [r3, #0]
 800aada:	b2db      	uxtb	r3, r3
 800aadc:	2b02      	cmp	r3, #2
 800aade:	d004      	beq.n	800aaea <xMBMasterRTUTimerExpired+0xda>
 800aae0:	4b17      	ldr	r3, [pc, #92]	; (800ab40 <xMBMasterRTUTimerExpired+0x130>)
 800aae2:	781b      	ldrb	r3, [r3, #0]
 800aae4:	b2db      	uxtb	r3, r3
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d101      	bne.n	800aaee <xMBMasterRTUTimerExpired+0xde>
 800aaea:	2301      	movs	r3, #1
 800aaec:	e000      	b.n	800aaf0 <xMBMasterRTUTimerExpired+0xe0>
 800aaee:	2300      	movs	r3, #0
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d10e      	bne.n	800ab12 <xMBMasterRTUTimerExpired+0x102>
	__asm volatile
 800aaf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf8:	b672      	cpsid	i
 800aafa:	f383 8811 	msr	BASEPRI, r3
 800aafe:	f3bf 8f6f 	isb	sy
 800ab02:	f3bf 8f4f 	dsb	sy
 800ab06:	b662      	cpsie	i
 800ab08:	607b      	str	r3, [r7, #4]
}
 800ab0a:	bf00      	nop
 800ab0c:	e7fe      	b.n	800ab0c <xMBMasterRTUTimerExpired+0xfc>
		break;
 800ab0e:	bf00      	nop
 800ab10:	e000      	b.n	800ab14 <xMBMasterRTUTimerExpired+0x104>
					( eSndState == STATE_M_TX_XFWR ) || ( eSndState == STATE_M_TX_IDLE ));
		break;
 800ab12:	bf00      	nop
	}
	eSndState = STATE_M_TX_IDLE;
 800ab14:	4b0a      	ldr	r3, [pc, #40]	; (800ab40 <xMBMasterRTUTimerExpired+0x130>)
 800ab16:	2200      	movs	r2, #0
 800ab18:	701a      	strb	r2, [r3, #0]

	vMBMasterPortTimersDisable( );
 800ab1a:	f7fe fef1 	bl	8009900 <vMBMasterPortTimersDisable>
	/* If timer mode is convert delay, the master event then turns EV_MASTER_EXECUTE status. */
	if (eMasterCurTimerMode == MB_TMODE_CONVERT_DELAY) {
 800ab1e:	4b0a      	ldr	r3, [pc, #40]	; (800ab48 <xMBMasterRTUTimerExpired+0x138>)
 800ab20:	781b      	ldrb	r3, [r3, #0]
 800ab22:	b2db      	uxtb	r3, r3
 800ab24:	2b02      	cmp	r3, #2
 800ab26:	d104      	bne.n	800ab32 <xMBMasterRTUTimerExpired+0x122>
		xNeedPoll = xMBMasterPortEventPostFromISR( EV_MASTER_EXECUTE );
 800ab28:	2004      	movs	r0, #4
 800ab2a:	f7fe fb61 	bl	80091f0 <xMBMasterPortEventPostFromISR>
 800ab2e:	4603      	mov	r3, r0
 800ab30:	73fb      	strb	r3, [r7, #15]
	}

	return xNeedPoll;
 800ab32:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3710      	adds	r7, #16
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}
 800ab3c:	20004c0d 	.word	0x20004c0d
 800ab40:	20004c0c 	.word	0x20004c0c
 800ab44:	20004e1c 	.word	0x20004e1c
 800ab48:	20004e1d 	.word	0x20004e1d

0800ab4c <vMBMasterGetPDUSndBuf>:
	*pucFrame = ( UCHAR * ) ucMasterRTUSndBuf;
}

/* Get Modbus Master send PDU's buffer address pointer.*/
void vMBMasterGetPDUSndBuf( UCHAR ** pucFrame )
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	b083      	sub	sp, #12
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
	*pucFrame = ( UCHAR * ) &ucMasterRTUSndBuf[MB_SER_PDU_PDU_OFF];
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	4a04      	ldr	r2, [pc, #16]	; (800ab68 <vMBMasterGetPDUSndBuf+0x1c>)
 800ab58:	601a      	str	r2, [r3, #0]
}
 800ab5a:	bf00      	nop
 800ab5c:	370c      	adds	r7, #12
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab64:	4770      	bx	lr
 800ab66:	bf00      	nop
 800ab68:	20004c11 	.word	0x20004c11

0800ab6c <vMBMasterSetPDUSndLength>:

/* Set Modbus Master send PDU's buffer length.*/
void vMBMasterSetPDUSndLength( USHORT SendPDULength )
{
 800ab6c:	b480      	push	{r7}
 800ab6e:	b083      	sub	sp, #12
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	4603      	mov	r3, r0
 800ab74:	80fb      	strh	r3, [r7, #6]
	usMasterSendPDULength = SendPDULength;
 800ab76:	4a04      	ldr	r2, [pc, #16]	; (800ab88 <vMBMasterSetPDUSndLength+0x1c>)
 800ab78:	88fb      	ldrh	r3, [r7, #6]
 800ab7a:	8013      	strh	r3, [r2, #0]
}
 800ab7c:	bf00      	nop
 800ab7e:	370c      	adds	r7, #12
 800ab80:	46bd      	mov	sp, r7
 800ab82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab86:	4770      	bx	lr
 800ab88:	20004e10 	.word	0x20004e10

0800ab8c <usMBMasterGetPDUSndLength>:

/* Get Modbus Master send PDU's buffer length.*/
USHORT usMBMasterGetPDUSndLength( void )
{
 800ab8c:	b480      	push	{r7}
 800ab8e:	af00      	add	r7, sp, #0
	return usMasterSendPDULength;
 800ab90:	4b03      	ldr	r3, [pc, #12]	; (800aba0 <usMBMasterGetPDUSndLength+0x14>)
 800ab92:	881b      	ldrh	r3, [r3, #0]
 800ab94:	b29b      	uxth	r3, r3
}
 800ab96:	4618      	mov	r0, r3
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9e:	4770      	bx	lr
 800aba0:	20004e10 	.word	0x20004e10

0800aba4 <xMBMasterRequestIsBroadcast>:
{
	eMasterCurTimerMode = eMBTimerMode;
}

/* The master request is broadcast? */
BOOL xMBMasterRequestIsBroadcast( void ){
 800aba4:	b480      	push	{r7}
 800aba6:	af00      	add	r7, sp, #0
	return xFrameIsBroadcast;
 800aba8:	4b03      	ldr	r3, [pc, #12]	; (800abb8 <xMBMasterRequestIsBroadcast+0x14>)
 800abaa:	781b      	ldrb	r3, [r3, #0]
 800abac:	b2db      	uxtb	r3, r3
}
 800abae:	4618      	mov	r0, r3
 800abb0:	46bd      	mov	sp, r7
 800abb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb6:	4770      	bx	lr
 800abb8:	20004e1c 	.word	0x20004e1c

0800abbc <__assert_func>:
 800abbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800abbe:	4614      	mov	r4, r2
 800abc0:	461a      	mov	r2, r3
 800abc2:	4b09      	ldr	r3, [pc, #36]	; (800abe8 <__assert_func+0x2c>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	4605      	mov	r5, r0
 800abc8:	68d8      	ldr	r0, [r3, #12]
 800abca:	b14c      	cbz	r4, 800abe0 <__assert_func+0x24>
 800abcc:	4b07      	ldr	r3, [pc, #28]	; (800abec <__assert_func+0x30>)
 800abce:	9100      	str	r1, [sp, #0]
 800abd0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800abd4:	4906      	ldr	r1, [pc, #24]	; (800abf0 <__assert_func+0x34>)
 800abd6:	462b      	mov	r3, r5
 800abd8:	f000 f8ea 	bl	800adb0 <fiprintf>
 800abdc:	f000 fe30 	bl	800b840 <abort>
 800abe0:	4b04      	ldr	r3, [pc, #16]	; (800abf4 <__assert_func+0x38>)
 800abe2:	461c      	mov	r4, r3
 800abe4:	e7f3      	b.n	800abce <__assert_func+0x12>
 800abe6:	bf00      	nop
 800abe8:	20000118 	.word	0x20000118
 800abec:	0800c0c6 	.word	0x0800c0c6
 800abf0:	0800c0d3 	.word	0x0800c0d3
 800abf4:	0800c101 	.word	0x0800c101

0800abf8 <__errno>:
 800abf8:	4b01      	ldr	r3, [pc, #4]	; (800ac00 <__errno+0x8>)
 800abfa:	6818      	ldr	r0, [r3, #0]
 800abfc:	4770      	bx	lr
 800abfe:	bf00      	nop
 800ac00:	20000118 	.word	0x20000118

0800ac04 <std>:
 800ac04:	2300      	movs	r3, #0
 800ac06:	b510      	push	{r4, lr}
 800ac08:	4604      	mov	r4, r0
 800ac0a:	e9c0 3300 	strd	r3, r3, [r0]
 800ac0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ac12:	6083      	str	r3, [r0, #8]
 800ac14:	8181      	strh	r1, [r0, #12]
 800ac16:	6643      	str	r3, [r0, #100]	; 0x64
 800ac18:	81c2      	strh	r2, [r0, #14]
 800ac1a:	6183      	str	r3, [r0, #24]
 800ac1c:	4619      	mov	r1, r3
 800ac1e:	2208      	movs	r2, #8
 800ac20:	305c      	adds	r0, #92	; 0x5c
 800ac22:	f000 f92c 	bl	800ae7e <memset>
 800ac26:	4b05      	ldr	r3, [pc, #20]	; (800ac3c <std+0x38>)
 800ac28:	6263      	str	r3, [r4, #36]	; 0x24
 800ac2a:	4b05      	ldr	r3, [pc, #20]	; (800ac40 <std+0x3c>)
 800ac2c:	62a3      	str	r3, [r4, #40]	; 0x28
 800ac2e:	4b05      	ldr	r3, [pc, #20]	; (800ac44 <std+0x40>)
 800ac30:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ac32:	4b05      	ldr	r3, [pc, #20]	; (800ac48 <std+0x44>)
 800ac34:	6224      	str	r4, [r4, #32]
 800ac36:	6323      	str	r3, [r4, #48]	; 0x30
 800ac38:	bd10      	pop	{r4, pc}
 800ac3a:	bf00      	nop
 800ac3c:	0800b615 	.word	0x0800b615
 800ac40:	0800b637 	.word	0x0800b637
 800ac44:	0800b66f 	.word	0x0800b66f
 800ac48:	0800b693 	.word	0x0800b693

0800ac4c <_cleanup_r>:
 800ac4c:	4901      	ldr	r1, [pc, #4]	; (800ac54 <_cleanup_r+0x8>)
 800ac4e:	f000 b8c1 	b.w	800add4 <_fwalk_reent>
 800ac52:	bf00      	nop
 800ac54:	0800b97d 	.word	0x0800b97d

0800ac58 <__sfmoreglue>:
 800ac58:	b570      	push	{r4, r5, r6, lr}
 800ac5a:	1e4a      	subs	r2, r1, #1
 800ac5c:	2568      	movs	r5, #104	; 0x68
 800ac5e:	4355      	muls	r5, r2
 800ac60:	460e      	mov	r6, r1
 800ac62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ac66:	f000 f913 	bl	800ae90 <_malloc_r>
 800ac6a:	4604      	mov	r4, r0
 800ac6c:	b140      	cbz	r0, 800ac80 <__sfmoreglue+0x28>
 800ac6e:	2100      	movs	r1, #0
 800ac70:	e9c0 1600 	strd	r1, r6, [r0]
 800ac74:	300c      	adds	r0, #12
 800ac76:	60a0      	str	r0, [r4, #8]
 800ac78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ac7c:	f000 f8ff 	bl	800ae7e <memset>
 800ac80:	4620      	mov	r0, r4
 800ac82:	bd70      	pop	{r4, r5, r6, pc}

0800ac84 <__sfp_lock_acquire>:
 800ac84:	4801      	ldr	r0, [pc, #4]	; (800ac8c <__sfp_lock_acquire+0x8>)
 800ac86:	f000 b8ea 	b.w	800ae5e <__retarget_lock_acquire_recursive>
 800ac8a:	bf00      	nop
 800ac8c:	20005424 	.word	0x20005424

0800ac90 <__sfp_lock_release>:
 800ac90:	4801      	ldr	r0, [pc, #4]	; (800ac98 <__sfp_lock_release+0x8>)
 800ac92:	f000 b8e5 	b.w	800ae60 <__retarget_lock_release_recursive>
 800ac96:	bf00      	nop
 800ac98:	20005424 	.word	0x20005424

0800ac9c <__sinit_lock_acquire>:
 800ac9c:	4801      	ldr	r0, [pc, #4]	; (800aca4 <__sinit_lock_acquire+0x8>)
 800ac9e:	f000 b8de 	b.w	800ae5e <__retarget_lock_acquire_recursive>
 800aca2:	bf00      	nop
 800aca4:	2000541f 	.word	0x2000541f

0800aca8 <__sinit_lock_release>:
 800aca8:	4801      	ldr	r0, [pc, #4]	; (800acb0 <__sinit_lock_release+0x8>)
 800acaa:	f000 b8d9 	b.w	800ae60 <__retarget_lock_release_recursive>
 800acae:	bf00      	nop
 800acb0:	2000541f 	.word	0x2000541f

0800acb4 <__sinit>:
 800acb4:	b510      	push	{r4, lr}
 800acb6:	4604      	mov	r4, r0
 800acb8:	f7ff fff0 	bl	800ac9c <__sinit_lock_acquire>
 800acbc:	69a3      	ldr	r3, [r4, #24]
 800acbe:	b11b      	cbz	r3, 800acc8 <__sinit+0x14>
 800acc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acc4:	f7ff bff0 	b.w	800aca8 <__sinit_lock_release>
 800acc8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800accc:	6523      	str	r3, [r4, #80]	; 0x50
 800acce:	4b13      	ldr	r3, [pc, #76]	; (800ad1c <__sinit+0x68>)
 800acd0:	4a13      	ldr	r2, [pc, #76]	; (800ad20 <__sinit+0x6c>)
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	62a2      	str	r2, [r4, #40]	; 0x28
 800acd6:	42a3      	cmp	r3, r4
 800acd8:	bf04      	itt	eq
 800acda:	2301      	moveq	r3, #1
 800acdc:	61a3      	streq	r3, [r4, #24]
 800acde:	4620      	mov	r0, r4
 800ace0:	f000 f820 	bl	800ad24 <__sfp>
 800ace4:	6060      	str	r0, [r4, #4]
 800ace6:	4620      	mov	r0, r4
 800ace8:	f000 f81c 	bl	800ad24 <__sfp>
 800acec:	60a0      	str	r0, [r4, #8]
 800acee:	4620      	mov	r0, r4
 800acf0:	f000 f818 	bl	800ad24 <__sfp>
 800acf4:	2200      	movs	r2, #0
 800acf6:	60e0      	str	r0, [r4, #12]
 800acf8:	2104      	movs	r1, #4
 800acfa:	6860      	ldr	r0, [r4, #4]
 800acfc:	f7ff ff82 	bl	800ac04 <std>
 800ad00:	68a0      	ldr	r0, [r4, #8]
 800ad02:	2201      	movs	r2, #1
 800ad04:	2109      	movs	r1, #9
 800ad06:	f7ff ff7d 	bl	800ac04 <std>
 800ad0a:	68e0      	ldr	r0, [r4, #12]
 800ad0c:	2202      	movs	r2, #2
 800ad0e:	2112      	movs	r1, #18
 800ad10:	f7ff ff78 	bl	800ac04 <std>
 800ad14:	2301      	movs	r3, #1
 800ad16:	61a3      	str	r3, [r4, #24]
 800ad18:	e7d2      	b.n	800acc0 <__sinit+0xc>
 800ad1a:	bf00      	nop
 800ad1c:	0800c164 	.word	0x0800c164
 800ad20:	0800ac4d 	.word	0x0800ac4d

0800ad24 <__sfp>:
 800ad24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad26:	4607      	mov	r7, r0
 800ad28:	f7ff ffac 	bl	800ac84 <__sfp_lock_acquire>
 800ad2c:	4b1e      	ldr	r3, [pc, #120]	; (800ada8 <__sfp+0x84>)
 800ad2e:	681e      	ldr	r6, [r3, #0]
 800ad30:	69b3      	ldr	r3, [r6, #24]
 800ad32:	b913      	cbnz	r3, 800ad3a <__sfp+0x16>
 800ad34:	4630      	mov	r0, r6
 800ad36:	f7ff ffbd 	bl	800acb4 <__sinit>
 800ad3a:	3648      	adds	r6, #72	; 0x48
 800ad3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ad40:	3b01      	subs	r3, #1
 800ad42:	d503      	bpl.n	800ad4c <__sfp+0x28>
 800ad44:	6833      	ldr	r3, [r6, #0]
 800ad46:	b30b      	cbz	r3, 800ad8c <__sfp+0x68>
 800ad48:	6836      	ldr	r6, [r6, #0]
 800ad4a:	e7f7      	b.n	800ad3c <__sfp+0x18>
 800ad4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ad50:	b9d5      	cbnz	r5, 800ad88 <__sfp+0x64>
 800ad52:	4b16      	ldr	r3, [pc, #88]	; (800adac <__sfp+0x88>)
 800ad54:	60e3      	str	r3, [r4, #12]
 800ad56:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ad5a:	6665      	str	r5, [r4, #100]	; 0x64
 800ad5c:	f000 f87e 	bl	800ae5c <__retarget_lock_init_recursive>
 800ad60:	f7ff ff96 	bl	800ac90 <__sfp_lock_release>
 800ad64:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ad68:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ad6c:	6025      	str	r5, [r4, #0]
 800ad6e:	61a5      	str	r5, [r4, #24]
 800ad70:	2208      	movs	r2, #8
 800ad72:	4629      	mov	r1, r5
 800ad74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ad78:	f000 f881 	bl	800ae7e <memset>
 800ad7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ad80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ad84:	4620      	mov	r0, r4
 800ad86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad88:	3468      	adds	r4, #104	; 0x68
 800ad8a:	e7d9      	b.n	800ad40 <__sfp+0x1c>
 800ad8c:	2104      	movs	r1, #4
 800ad8e:	4638      	mov	r0, r7
 800ad90:	f7ff ff62 	bl	800ac58 <__sfmoreglue>
 800ad94:	4604      	mov	r4, r0
 800ad96:	6030      	str	r0, [r6, #0]
 800ad98:	2800      	cmp	r0, #0
 800ad9a:	d1d5      	bne.n	800ad48 <__sfp+0x24>
 800ad9c:	f7ff ff78 	bl	800ac90 <__sfp_lock_release>
 800ada0:	230c      	movs	r3, #12
 800ada2:	603b      	str	r3, [r7, #0]
 800ada4:	e7ee      	b.n	800ad84 <__sfp+0x60>
 800ada6:	bf00      	nop
 800ada8:	0800c164 	.word	0x0800c164
 800adac:	ffff0001 	.word	0xffff0001

0800adb0 <fiprintf>:
 800adb0:	b40e      	push	{r1, r2, r3}
 800adb2:	b503      	push	{r0, r1, lr}
 800adb4:	4601      	mov	r1, r0
 800adb6:	ab03      	add	r3, sp, #12
 800adb8:	4805      	ldr	r0, [pc, #20]	; (800add0 <fiprintf+0x20>)
 800adba:	f853 2b04 	ldr.w	r2, [r3], #4
 800adbe:	6800      	ldr	r0, [r0, #0]
 800adc0:	9301      	str	r3, [sp, #4]
 800adc2:	f000 f8e9 	bl	800af98 <_vfiprintf_r>
 800adc6:	b002      	add	sp, #8
 800adc8:	f85d eb04 	ldr.w	lr, [sp], #4
 800adcc:	b003      	add	sp, #12
 800adce:	4770      	bx	lr
 800add0:	20000118 	.word	0x20000118

0800add4 <_fwalk_reent>:
 800add4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800add8:	4606      	mov	r6, r0
 800adda:	4688      	mov	r8, r1
 800addc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ade0:	2700      	movs	r7, #0
 800ade2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ade6:	f1b9 0901 	subs.w	r9, r9, #1
 800adea:	d505      	bpl.n	800adf8 <_fwalk_reent+0x24>
 800adec:	6824      	ldr	r4, [r4, #0]
 800adee:	2c00      	cmp	r4, #0
 800adf0:	d1f7      	bne.n	800ade2 <_fwalk_reent+0xe>
 800adf2:	4638      	mov	r0, r7
 800adf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800adf8:	89ab      	ldrh	r3, [r5, #12]
 800adfa:	2b01      	cmp	r3, #1
 800adfc:	d907      	bls.n	800ae0e <_fwalk_reent+0x3a>
 800adfe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ae02:	3301      	adds	r3, #1
 800ae04:	d003      	beq.n	800ae0e <_fwalk_reent+0x3a>
 800ae06:	4629      	mov	r1, r5
 800ae08:	4630      	mov	r0, r6
 800ae0a:	47c0      	blx	r8
 800ae0c:	4307      	orrs	r7, r0
 800ae0e:	3568      	adds	r5, #104	; 0x68
 800ae10:	e7e9      	b.n	800ade6 <_fwalk_reent+0x12>
	...

0800ae14 <__libc_init_array>:
 800ae14:	b570      	push	{r4, r5, r6, lr}
 800ae16:	4d0d      	ldr	r5, [pc, #52]	; (800ae4c <__libc_init_array+0x38>)
 800ae18:	4c0d      	ldr	r4, [pc, #52]	; (800ae50 <__libc_init_array+0x3c>)
 800ae1a:	1b64      	subs	r4, r4, r5
 800ae1c:	10a4      	asrs	r4, r4, #2
 800ae1e:	2600      	movs	r6, #0
 800ae20:	42a6      	cmp	r6, r4
 800ae22:	d109      	bne.n	800ae38 <__libc_init_array+0x24>
 800ae24:	4d0b      	ldr	r5, [pc, #44]	; (800ae54 <__libc_init_array+0x40>)
 800ae26:	4c0c      	ldr	r4, [pc, #48]	; (800ae58 <__libc_init_array+0x44>)
 800ae28:	f000 ff2e 	bl	800bc88 <_init>
 800ae2c:	1b64      	subs	r4, r4, r5
 800ae2e:	10a4      	asrs	r4, r4, #2
 800ae30:	2600      	movs	r6, #0
 800ae32:	42a6      	cmp	r6, r4
 800ae34:	d105      	bne.n	800ae42 <__libc_init_array+0x2e>
 800ae36:	bd70      	pop	{r4, r5, r6, pc}
 800ae38:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae3c:	4798      	blx	r3
 800ae3e:	3601      	adds	r6, #1
 800ae40:	e7ee      	b.n	800ae20 <__libc_init_array+0xc>
 800ae42:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae46:	4798      	blx	r3
 800ae48:	3601      	adds	r6, #1
 800ae4a:	e7f2      	b.n	800ae32 <__libc_init_array+0x1e>
 800ae4c:	0800c1a4 	.word	0x0800c1a4
 800ae50:	0800c1a4 	.word	0x0800c1a4
 800ae54:	0800c1a4 	.word	0x0800c1a4
 800ae58:	0800c1a8 	.word	0x0800c1a8

0800ae5c <__retarget_lock_init_recursive>:
 800ae5c:	4770      	bx	lr

0800ae5e <__retarget_lock_acquire_recursive>:
 800ae5e:	4770      	bx	lr

0800ae60 <__retarget_lock_release_recursive>:
 800ae60:	4770      	bx	lr

0800ae62 <memcpy>:
 800ae62:	440a      	add	r2, r1
 800ae64:	4291      	cmp	r1, r2
 800ae66:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae6a:	d100      	bne.n	800ae6e <memcpy+0xc>
 800ae6c:	4770      	bx	lr
 800ae6e:	b510      	push	{r4, lr}
 800ae70:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae74:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae78:	4291      	cmp	r1, r2
 800ae7a:	d1f9      	bne.n	800ae70 <memcpy+0xe>
 800ae7c:	bd10      	pop	{r4, pc}

0800ae7e <memset>:
 800ae7e:	4402      	add	r2, r0
 800ae80:	4603      	mov	r3, r0
 800ae82:	4293      	cmp	r3, r2
 800ae84:	d100      	bne.n	800ae88 <memset+0xa>
 800ae86:	4770      	bx	lr
 800ae88:	f803 1b01 	strb.w	r1, [r3], #1
 800ae8c:	e7f9      	b.n	800ae82 <memset+0x4>
	...

0800ae90 <_malloc_r>:
 800ae90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae92:	1ccd      	adds	r5, r1, #3
 800ae94:	f025 0503 	bic.w	r5, r5, #3
 800ae98:	3508      	adds	r5, #8
 800ae9a:	2d0c      	cmp	r5, #12
 800ae9c:	bf38      	it	cc
 800ae9e:	250c      	movcc	r5, #12
 800aea0:	2d00      	cmp	r5, #0
 800aea2:	4606      	mov	r6, r0
 800aea4:	db01      	blt.n	800aeaa <_malloc_r+0x1a>
 800aea6:	42a9      	cmp	r1, r5
 800aea8:	d903      	bls.n	800aeb2 <_malloc_r+0x22>
 800aeaa:	230c      	movs	r3, #12
 800aeac:	6033      	str	r3, [r6, #0]
 800aeae:	2000      	movs	r0, #0
 800aeb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aeb2:	f000 fe15 	bl	800bae0 <__malloc_lock>
 800aeb6:	4921      	ldr	r1, [pc, #132]	; (800af3c <_malloc_r+0xac>)
 800aeb8:	680a      	ldr	r2, [r1, #0]
 800aeba:	4614      	mov	r4, r2
 800aebc:	b99c      	cbnz	r4, 800aee6 <_malloc_r+0x56>
 800aebe:	4f20      	ldr	r7, [pc, #128]	; (800af40 <_malloc_r+0xb0>)
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	b923      	cbnz	r3, 800aece <_malloc_r+0x3e>
 800aec4:	4621      	mov	r1, r4
 800aec6:	4630      	mov	r0, r6
 800aec8:	f000 fb94 	bl	800b5f4 <_sbrk_r>
 800aecc:	6038      	str	r0, [r7, #0]
 800aece:	4629      	mov	r1, r5
 800aed0:	4630      	mov	r0, r6
 800aed2:	f000 fb8f 	bl	800b5f4 <_sbrk_r>
 800aed6:	1c43      	adds	r3, r0, #1
 800aed8:	d123      	bne.n	800af22 <_malloc_r+0x92>
 800aeda:	230c      	movs	r3, #12
 800aedc:	6033      	str	r3, [r6, #0]
 800aede:	4630      	mov	r0, r6
 800aee0:	f000 fe04 	bl	800baec <__malloc_unlock>
 800aee4:	e7e3      	b.n	800aeae <_malloc_r+0x1e>
 800aee6:	6823      	ldr	r3, [r4, #0]
 800aee8:	1b5b      	subs	r3, r3, r5
 800aeea:	d417      	bmi.n	800af1c <_malloc_r+0x8c>
 800aeec:	2b0b      	cmp	r3, #11
 800aeee:	d903      	bls.n	800aef8 <_malloc_r+0x68>
 800aef0:	6023      	str	r3, [r4, #0]
 800aef2:	441c      	add	r4, r3
 800aef4:	6025      	str	r5, [r4, #0]
 800aef6:	e004      	b.n	800af02 <_malloc_r+0x72>
 800aef8:	6863      	ldr	r3, [r4, #4]
 800aefa:	42a2      	cmp	r2, r4
 800aefc:	bf0c      	ite	eq
 800aefe:	600b      	streq	r3, [r1, #0]
 800af00:	6053      	strne	r3, [r2, #4]
 800af02:	4630      	mov	r0, r6
 800af04:	f000 fdf2 	bl	800baec <__malloc_unlock>
 800af08:	f104 000b 	add.w	r0, r4, #11
 800af0c:	1d23      	adds	r3, r4, #4
 800af0e:	f020 0007 	bic.w	r0, r0, #7
 800af12:	1ac2      	subs	r2, r0, r3
 800af14:	d0cc      	beq.n	800aeb0 <_malloc_r+0x20>
 800af16:	1a1b      	subs	r3, r3, r0
 800af18:	50a3      	str	r3, [r4, r2]
 800af1a:	e7c9      	b.n	800aeb0 <_malloc_r+0x20>
 800af1c:	4622      	mov	r2, r4
 800af1e:	6864      	ldr	r4, [r4, #4]
 800af20:	e7cc      	b.n	800aebc <_malloc_r+0x2c>
 800af22:	1cc4      	adds	r4, r0, #3
 800af24:	f024 0403 	bic.w	r4, r4, #3
 800af28:	42a0      	cmp	r0, r4
 800af2a:	d0e3      	beq.n	800aef4 <_malloc_r+0x64>
 800af2c:	1a21      	subs	r1, r4, r0
 800af2e:	4630      	mov	r0, r6
 800af30:	f000 fb60 	bl	800b5f4 <_sbrk_r>
 800af34:	3001      	adds	r0, #1
 800af36:	d1dd      	bne.n	800aef4 <_malloc_r+0x64>
 800af38:	e7cf      	b.n	800aeda <_malloc_r+0x4a>
 800af3a:	bf00      	nop
 800af3c:	20004e20 	.word	0x20004e20
 800af40:	20004e24 	.word	0x20004e24

0800af44 <__sfputc_r>:
 800af44:	6893      	ldr	r3, [r2, #8]
 800af46:	3b01      	subs	r3, #1
 800af48:	2b00      	cmp	r3, #0
 800af4a:	b410      	push	{r4}
 800af4c:	6093      	str	r3, [r2, #8]
 800af4e:	da08      	bge.n	800af62 <__sfputc_r+0x1e>
 800af50:	6994      	ldr	r4, [r2, #24]
 800af52:	42a3      	cmp	r3, r4
 800af54:	db01      	blt.n	800af5a <__sfputc_r+0x16>
 800af56:	290a      	cmp	r1, #10
 800af58:	d103      	bne.n	800af62 <__sfputc_r+0x1e>
 800af5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af5e:	f000 bb9d 	b.w	800b69c <__swbuf_r>
 800af62:	6813      	ldr	r3, [r2, #0]
 800af64:	1c58      	adds	r0, r3, #1
 800af66:	6010      	str	r0, [r2, #0]
 800af68:	7019      	strb	r1, [r3, #0]
 800af6a:	4608      	mov	r0, r1
 800af6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af70:	4770      	bx	lr

0800af72 <__sfputs_r>:
 800af72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af74:	4606      	mov	r6, r0
 800af76:	460f      	mov	r7, r1
 800af78:	4614      	mov	r4, r2
 800af7a:	18d5      	adds	r5, r2, r3
 800af7c:	42ac      	cmp	r4, r5
 800af7e:	d101      	bne.n	800af84 <__sfputs_r+0x12>
 800af80:	2000      	movs	r0, #0
 800af82:	e007      	b.n	800af94 <__sfputs_r+0x22>
 800af84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af88:	463a      	mov	r2, r7
 800af8a:	4630      	mov	r0, r6
 800af8c:	f7ff ffda 	bl	800af44 <__sfputc_r>
 800af90:	1c43      	adds	r3, r0, #1
 800af92:	d1f3      	bne.n	800af7c <__sfputs_r+0xa>
 800af94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800af98 <_vfiprintf_r>:
 800af98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af9c:	460d      	mov	r5, r1
 800af9e:	b09d      	sub	sp, #116	; 0x74
 800afa0:	4614      	mov	r4, r2
 800afa2:	4698      	mov	r8, r3
 800afa4:	4606      	mov	r6, r0
 800afa6:	b118      	cbz	r0, 800afb0 <_vfiprintf_r+0x18>
 800afa8:	6983      	ldr	r3, [r0, #24]
 800afaa:	b90b      	cbnz	r3, 800afb0 <_vfiprintf_r+0x18>
 800afac:	f7ff fe82 	bl	800acb4 <__sinit>
 800afb0:	4b89      	ldr	r3, [pc, #548]	; (800b1d8 <_vfiprintf_r+0x240>)
 800afb2:	429d      	cmp	r5, r3
 800afb4:	d11b      	bne.n	800afee <_vfiprintf_r+0x56>
 800afb6:	6875      	ldr	r5, [r6, #4]
 800afb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800afba:	07d9      	lsls	r1, r3, #31
 800afbc:	d405      	bmi.n	800afca <_vfiprintf_r+0x32>
 800afbe:	89ab      	ldrh	r3, [r5, #12]
 800afc0:	059a      	lsls	r2, r3, #22
 800afc2:	d402      	bmi.n	800afca <_vfiprintf_r+0x32>
 800afc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800afc6:	f7ff ff4a 	bl	800ae5e <__retarget_lock_acquire_recursive>
 800afca:	89ab      	ldrh	r3, [r5, #12]
 800afcc:	071b      	lsls	r3, r3, #28
 800afce:	d501      	bpl.n	800afd4 <_vfiprintf_r+0x3c>
 800afd0:	692b      	ldr	r3, [r5, #16]
 800afd2:	b9eb      	cbnz	r3, 800b010 <_vfiprintf_r+0x78>
 800afd4:	4629      	mov	r1, r5
 800afd6:	4630      	mov	r0, r6
 800afd8:	f000 fbc4 	bl	800b764 <__swsetup_r>
 800afdc:	b1c0      	cbz	r0, 800b010 <_vfiprintf_r+0x78>
 800afde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800afe0:	07dc      	lsls	r4, r3, #31
 800afe2:	d50e      	bpl.n	800b002 <_vfiprintf_r+0x6a>
 800afe4:	f04f 30ff 	mov.w	r0, #4294967295
 800afe8:	b01d      	add	sp, #116	; 0x74
 800afea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afee:	4b7b      	ldr	r3, [pc, #492]	; (800b1dc <_vfiprintf_r+0x244>)
 800aff0:	429d      	cmp	r5, r3
 800aff2:	d101      	bne.n	800aff8 <_vfiprintf_r+0x60>
 800aff4:	68b5      	ldr	r5, [r6, #8]
 800aff6:	e7df      	b.n	800afb8 <_vfiprintf_r+0x20>
 800aff8:	4b79      	ldr	r3, [pc, #484]	; (800b1e0 <_vfiprintf_r+0x248>)
 800affa:	429d      	cmp	r5, r3
 800affc:	bf08      	it	eq
 800affe:	68f5      	ldreq	r5, [r6, #12]
 800b000:	e7da      	b.n	800afb8 <_vfiprintf_r+0x20>
 800b002:	89ab      	ldrh	r3, [r5, #12]
 800b004:	0598      	lsls	r0, r3, #22
 800b006:	d4ed      	bmi.n	800afe4 <_vfiprintf_r+0x4c>
 800b008:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b00a:	f7ff ff29 	bl	800ae60 <__retarget_lock_release_recursive>
 800b00e:	e7e9      	b.n	800afe4 <_vfiprintf_r+0x4c>
 800b010:	2300      	movs	r3, #0
 800b012:	9309      	str	r3, [sp, #36]	; 0x24
 800b014:	2320      	movs	r3, #32
 800b016:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b01a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b01e:	2330      	movs	r3, #48	; 0x30
 800b020:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b1e4 <_vfiprintf_r+0x24c>
 800b024:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b028:	f04f 0901 	mov.w	r9, #1
 800b02c:	4623      	mov	r3, r4
 800b02e:	469a      	mov	sl, r3
 800b030:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b034:	b10a      	cbz	r2, 800b03a <_vfiprintf_r+0xa2>
 800b036:	2a25      	cmp	r2, #37	; 0x25
 800b038:	d1f9      	bne.n	800b02e <_vfiprintf_r+0x96>
 800b03a:	ebba 0b04 	subs.w	fp, sl, r4
 800b03e:	d00b      	beq.n	800b058 <_vfiprintf_r+0xc0>
 800b040:	465b      	mov	r3, fp
 800b042:	4622      	mov	r2, r4
 800b044:	4629      	mov	r1, r5
 800b046:	4630      	mov	r0, r6
 800b048:	f7ff ff93 	bl	800af72 <__sfputs_r>
 800b04c:	3001      	adds	r0, #1
 800b04e:	f000 80aa 	beq.w	800b1a6 <_vfiprintf_r+0x20e>
 800b052:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b054:	445a      	add	r2, fp
 800b056:	9209      	str	r2, [sp, #36]	; 0x24
 800b058:	f89a 3000 	ldrb.w	r3, [sl]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	f000 80a2 	beq.w	800b1a6 <_vfiprintf_r+0x20e>
 800b062:	2300      	movs	r3, #0
 800b064:	f04f 32ff 	mov.w	r2, #4294967295
 800b068:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b06c:	f10a 0a01 	add.w	sl, sl, #1
 800b070:	9304      	str	r3, [sp, #16]
 800b072:	9307      	str	r3, [sp, #28]
 800b074:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b078:	931a      	str	r3, [sp, #104]	; 0x68
 800b07a:	4654      	mov	r4, sl
 800b07c:	2205      	movs	r2, #5
 800b07e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b082:	4858      	ldr	r0, [pc, #352]	; (800b1e4 <_vfiprintf_r+0x24c>)
 800b084:	f7f5 f8dc 	bl	8000240 <memchr>
 800b088:	9a04      	ldr	r2, [sp, #16]
 800b08a:	b9d8      	cbnz	r0, 800b0c4 <_vfiprintf_r+0x12c>
 800b08c:	06d1      	lsls	r1, r2, #27
 800b08e:	bf44      	itt	mi
 800b090:	2320      	movmi	r3, #32
 800b092:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b096:	0713      	lsls	r3, r2, #28
 800b098:	bf44      	itt	mi
 800b09a:	232b      	movmi	r3, #43	; 0x2b
 800b09c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b0a0:	f89a 3000 	ldrb.w	r3, [sl]
 800b0a4:	2b2a      	cmp	r3, #42	; 0x2a
 800b0a6:	d015      	beq.n	800b0d4 <_vfiprintf_r+0x13c>
 800b0a8:	9a07      	ldr	r2, [sp, #28]
 800b0aa:	4654      	mov	r4, sl
 800b0ac:	2000      	movs	r0, #0
 800b0ae:	f04f 0c0a 	mov.w	ip, #10
 800b0b2:	4621      	mov	r1, r4
 800b0b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b0b8:	3b30      	subs	r3, #48	; 0x30
 800b0ba:	2b09      	cmp	r3, #9
 800b0bc:	d94e      	bls.n	800b15c <_vfiprintf_r+0x1c4>
 800b0be:	b1b0      	cbz	r0, 800b0ee <_vfiprintf_r+0x156>
 800b0c0:	9207      	str	r2, [sp, #28]
 800b0c2:	e014      	b.n	800b0ee <_vfiprintf_r+0x156>
 800b0c4:	eba0 0308 	sub.w	r3, r0, r8
 800b0c8:	fa09 f303 	lsl.w	r3, r9, r3
 800b0cc:	4313      	orrs	r3, r2
 800b0ce:	9304      	str	r3, [sp, #16]
 800b0d0:	46a2      	mov	sl, r4
 800b0d2:	e7d2      	b.n	800b07a <_vfiprintf_r+0xe2>
 800b0d4:	9b03      	ldr	r3, [sp, #12]
 800b0d6:	1d19      	adds	r1, r3, #4
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	9103      	str	r1, [sp, #12]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	bfbb      	ittet	lt
 800b0e0:	425b      	neglt	r3, r3
 800b0e2:	f042 0202 	orrlt.w	r2, r2, #2
 800b0e6:	9307      	strge	r3, [sp, #28]
 800b0e8:	9307      	strlt	r3, [sp, #28]
 800b0ea:	bfb8      	it	lt
 800b0ec:	9204      	strlt	r2, [sp, #16]
 800b0ee:	7823      	ldrb	r3, [r4, #0]
 800b0f0:	2b2e      	cmp	r3, #46	; 0x2e
 800b0f2:	d10c      	bne.n	800b10e <_vfiprintf_r+0x176>
 800b0f4:	7863      	ldrb	r3, [r4, #1]
 800b0f6:	2b2a      	cmp	r3, #42	; 0x2a
 800b0f8:	d135      	bne.n	800b166 <_vfiprintf_r+0x1ce>
 800b0fa:	9b03      	ldr	r3, [sp, #12]
 800b0fc:	1d1a      	adds	r2, r3, #4
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	9203      	str	r2, [sp, #12]
 800b102:	2b00      	cmp	r3, #0
 800b104:	bfb8      	it	lt
 800b106:	f04f 33ff 	movlt.w	r3, #4294967295
 800b10a:	3402      	adds	r4, #2
 800b10c:	9305      	str	r3, [sp, #20]
 800b10e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b1f4 <_vfiprintf_r+0x25c>
 800b112:	7821      	ldrb	r1, [r4, #0]
 800b114:	2203      	movs	r2, #3
 800b116:	4650      	mov	r0, sl
 800b118:	f7f5 f892 	bl	8000240 <memchr>
 800b11c:	b140      	cbz	r0, 800b130 <_vfiprintf_r+0x198>
 800b11e:	2340      	movs	r3, #64	; 0x40
 800b120:	eba0 000a 	sub.w	r0, r0, sl
 800b124:	fa03 f000 	lsl.w	r0, r3, r0
 800b128:	9b04      	ldr	r3, [sp, #16]
 800b12a:	4303      	orrs	r3, r0
 800b12c:	3401      	adds	r4, #1
 800b12e:	9304      	str	r3, [sp, #16]
 800b130:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b134:	482c      	ldr	r0, [pc, #176]	; (800b1e8 <_vfiprintf_r+0x250>)
 800b136:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b13a:	2206      	movs	r2, #6
 800b13c:	f7f5 f880 	bl	8000240 <memchr>
 800b140:	2800      	cmp	r0, #0
 800b142:	d03f      	beq.n	800b1c4 <_vfiprintf_r+0x22c>
 800b144:	4b29      	ldr	r3, [pc, #164]	; (800b1ec <_vfiprintf_r+0x254>)
 800b146:	bb1b      	cbnz	r3, 800b190 <_vfiprintf_r+0x1f8>
 800b148:	9b03      	ldr	r3, [sp, #12]
 800b14a:	3307      	adds	r3, #7
 800b14c:	f023 0307 	bic.w	r3, r3, #7
 800b150:	3308      	adds	r3, #8
 800b152:	9303      	str	r3, [sp, #12]
 800b154:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b156:	443b      	add	r3, r7
 800b158:	9309      	str	r3, [sp, #36]	; 0x24
 800b15a:	e767      	b.n	800b02c <_vfiprintf_r+0x94>
 800b15c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b160:	460c      	mov	r4, r1
 800b162:	2001      	movs	r0, #1
 800b164:	e7a5      	b.n	800b0b2 <_vfiprintf_r+0x11a>
 800b166:	2300      	movs	r3, #0
 800b168:	3401      	adds	r4, #1
 800b16a:	9305      	str	r3, [sp, #20]
 800b16c:	4619      	mov	r1, r3
 800b16e:	f04f 0c0a 	mov.w	ip, #10
 800b172:	4620      	mov	r0, r4
 800b174:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b178:	3a30      	subs	r2, #48	; 0x30
 800b17a:	2a09      	cmp	r2, #9
 800b17c:	d903      	bls.n	800b186 <_vfiprintf_r+0x1ee>
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d0c5      	beq.n	800b10e <_vfiprintf_r+0x176>
 800b182:	9105      	str	r1, [sp, #20]
 800b184:	e7c3      	b.n	800b10e <_vfiprintf_r+0x176>
 800b186:	fb0c 2101 	mla	r1, ip, r1, r2
 800b18a:	4604      	mov	r4, r0
 800b18c:	2301      	movs	r3, #1
 800b18e:	e7f0      	b.n	800b172 <_vfiprintf_r+0x1da>
 800b190:	ab03      	add	r3, sp, #12
 800b192:	9300      	str	r3, [sp, #0]
 800b194:	462a      	mov	r2, r5
 800b196:	4b16      	ldr	r3, [pc, #88]	; (800b1f0 <_vfiprintf_r+0x258>)
 800b198:	a904      	add	r1, sp, #16
 800b19a:	4630      	mov	r0, r6
 800b19c:	f3af 8000 	nop.w
 800b1a0:	4607      	mov	r7, r0
 800b1a2:	1c78      	adds	r0, r7, #1
 800b1a4:	d1d6      	bne.n	800b154 <_vfiprintf_r+0x1bc>
 800b1a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b1a8:	07d9      	lsls	r1, r3, #31
 800b1aa:	d405      	bmi.n	800b1b8 <_vfiprintf_r+0x220>
 800b1ac:	89ab      	ldrh	r3, [r5, #12]
 800b1ae:	059a      	lsls	r2, r3, #22
 800b1b0:	d402      	bmi.n	800b1b8 <_vfiprintf_r+0x220>
 800b1b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b1b4:	f7ff fe54 	bl	800ae60 <__retarget_lock_release_recursive>
 800b1b8:	89ab      	ldrh	r3, [r5, #12]
 800b1ba:	065b      	lsls	r3, r3, #25
 800b1bc:	f53f af12 	bmi.w	800afe4 <_vfiprintf_r+0x4c>
 800b1c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b1c2:	e711      	b.n	800afe8 <_vfiprintf_r+0x50>
 800b1c4:	ab03      	add	r3, sp, #12
 800b1c6:	9300      	str	r3, [sp, #0]
 800b1c8:	462a      	mov	r2, r5
 800b1ca:	4b09      	ldr	r3, [pc, #36]	; (800b1f0 <_vfiprintf_r+0x258>)
 800b1cc:	a904      	add	r1, sp, #16
 800b1ce:	4630      	mov	r0, r6
 800b1d0:	f000 f880 	bl	800b2d4 <_printf_i>
 800b1d4:	e7e4      	b.n	800b1a0 <_vfiprintf_r+0x208>
 800b1d6:	bf00      	nop
 800b1d8:	0800c124 	.word	0x0800c124
 800b1dc:	0800c144 	.word	0x0800c144
 800b1e0:	0800c104 	.word	0x0800c104
 800b1e4:	0800c168 	.word	0x0800c168
 800b1e8:	0800c172 	.word	0x0800c172
 800b1ec:	00000000 	.word	0x00000000
 800b1f0:	0800af73 	.word	0x0800af73
 800b1f4:	0800c16e 	.word	0x0800c16e

0800b1f8 <_printf_common>:
 800b1f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1fc:	4616      	mov	r6, r2
 800b1fe:	4699      	mov	r9, r3
 800b200:	688a      	ldr	r2, [r1, #8]
 800b202:	690b      	ldr	r3, [r1, #16]
 800b204:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b208:	4293      	cmp	r3, r2
 800b20a:	bfb8      	it	lt
 800b20c:	4613      	movlt	r3, r2
 800b20e:	6033      	str	r3, [r6, #0]
 800b210:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b214:	4607      	mov	r7, r0
 800b216:	460c      	mov	r4, r1
 800b218:	b10a      	cbz	r2, 800b21e <_printf_common+0x26>
 800b21a:	3301      	adds	r3, #1
 800b21c:	6033      	str	r3, [r6, #0]
 800b21e:	6823      	ldr	r3, [r4, #0]
 800b220:	0699      	lsls	r1, r3, #26
 800b222:	bf42      	ittt	mi
 800b224:	6833      	ldrmi	r3, [r6, #0]
 800b226:	3302      	addmi	r3, #2
 800b228:	6033      	strmi	r3, [r6, #0]
 800b22a:	6825      	ldr	r5, [r4, #0]
 800b22c:	f015 0506 	ands.w	r5, r5, #6
 800b230:	d106      	bne.n	800b240 <_printf_common+0x48>
 800b232:	f104 0a19 	add.w	sl, r4, #25
 800b236:	68e3      	ldr	r3, [r4, #12]
 800b238:	6832      	ldr	r2, [r6, #0]
 800b23a:	1a9b      	subs	r3, r3, r2
 800b23c:	42ab      	cmp	r3, r5
 800b23e:	dc26      	bgt.n	800b28e <_printf_common+0x96>
 800b240:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b244:	1e13      	subs	r3, r2, #0
 800b246:	6822      	ldr	r2, [r4, #0]
 800b248:	bf18      	it	ne
 800b24a:	2301      	movne	r3, #1
 800b24c:	0692      	lsls	r2, r2, #26
 800b24e:	d42b      	bmi.n	800b2a8 <_printf_common+0xb0>
 800b250:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b254:	4649      	mov	r1, r9
 800b256:	4638      	mov	r0, r7
 800b258:	47c0      	blx	r8
 800b25a:	3001      	adds	r0, #1
 800b25c:	d01e      	beq.n	800b29c <_printf_common+0xa4>
 800b25e:	6823      	ldr	r3, [r4, #0]
 800b260:	68e5      	ldr	r5, [r4, #12]
 800b262:	6832      	ldr	r2, [r6, #0]
 800b264:	f003 0306 	and.w	r3, r3, #6
 800b268:	2b04      	cmp	r3, #4
 800b26a:	bf08      	it	eq
 800b26c:	1aad      	subeq	r5, r5, r2
 800b26e:	68a3      	ldr	r3, [r4, #8]
 800b270:	6922      	ldr	r2, [r4, #16]
 800b272:	bf0c      	ite	eq
 800b274:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b278:	2500      	movne	r5, #0
 800b27a:	4293      	cmp	r3, r2
 800b27c:	bfc4      	itt	gt
 800b27e:	1a9b      	subgt	r3, r3, r2
 800b280:	18ed      	addgt	r5, r5, r3
 800b282:	2600      	movs	r6, #0
 800b284:	341a      	adds	r4, #26
 800b286:	42b5      	cmp	r5, r6
 800b288:	d11a      	bne.n	800b2c0 <_printf_common+0xc8>
 800b28a:	2000      	movs	r0, #0
 800b28c:	e008      	b.n	800b2a0 <_printf_common+0xa8>
 800b28e:	2301      	movs	r3, #1
 800b290:	4652      	mov	r2, sl
 800b292:	4649      	mov	r1, r9
 800b294:	4638      	mov	r0, r7
 800b296:	47c0      	blx	r8
 800b298:	3001      	adds	r0, #1
 800b29a:	d103      	bne.n	800b2a4 <_printf_common+0xac>
 800b29c:	f04f 30ff 	mov.w	r0, #4294967295
 800b2a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2a4:	3501      	adds	r5, #1
 800b2a6:	e7c6      	b.n	800b236 <_printf_common+0x3e>
 800b2a8:	18e1      	adds	r1, r4, r3
 800b2aa:	1c5a      	adds	r2, r3, #1
 800b2ac:	2030      	movs	r0, #48	; 0x30
 800b2ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b2b2:	4422      	add	r2, r4
 800b2b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b2b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b2bc:	3302      	adds	r3, #2
 800b2be:	e7c7      	b.n	800b250 <_printf_common+0x58>
 800b2c0:	2301      	movs	r3, #1
 800b2c2:	4622      	mov	r2, r4
 800b2c4:	4649      	mov	r1, r9
 800b2c6:	4638      	mov	r0, r7
 800b2c8:	47c0      	blx	r8
 800b2ca:	3001      	adds	r0, #1
 800b2cc:	d0e6      	beq.n	800b29c <_printf_common+0xa4>
 800b2ce:	3601      	adds	r6, #1
 800b2d0:	e7d9      	b.n	800b286 <_printf_common+0x8e>
	...

0800b2d4 <_printf_i>:
 800b2d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b2d8:	460c      	mov	r4, r1
 800b2da:	4691      	mov	r9, r2
 800b2dc:	7e27      	ldrb	r7, [r4, #24]
 800b2de:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b2e0:	2f78      	cmp	r7, #120	; 0x78
 800b2e2:	4680      	mov	r8, r0
 800b2e4:	469a      	mov	sl, r3
 800b2e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b2ea:	d807      	bhi.n	800b2fc <_printf_i+0x28>
 800b2ec:	2f62      	cmp	r7, #98	; 0x62
 800b2ee:	d80a      	bhi.n	800b306 <_printf_i+0x32>
 800b2f0:	2f00      	cmp	r7, #0
 800b2f2:	f000 80d8 	beq.w	800b4a6 <_printf_i+0x1d2>
 800b2f6:	2f58      	cmp	r7, #88	; 0x58
 800b2f8:	f000 80a3 	beq.w	800b442 <_printf_i+0x16e>
 800b2fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b300:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b304:	e03a      	b.n	800b37c <_printf_i+0xa8>
 800b306:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b30a:	2b15      	cmp	r3, #21
 800b30c:	d8f6      	bhi.n	800b2fc <_printf_i+0x28>
 800b30e:	a001      	add	r0, pc, #4	; (adr r0, 800b314 <_printf_i+0x40>)
 800b310:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b314:	0800b36d 	.word	0x0800b36d
 800b318:	0800b381 	.word	0x0800b381
 800b31c:	0800b2fd 	.word	0x0800b2fd
 800b320:	0800b2fd 	.word	0x0800b2fd
 800b324:	0800b2fd 	.word	0x0800b2fd
 800b328:	0800b2fd 	.word	0x0800b2fd
 800b32c:	0800b381 	.word	0x0800b381
 800b330:	0800b2fd 	.word	0x0800b2fd
 800b334:	0800b2fd 	.word	0x0800b2fd
 800b338:	0800b2fd 	.word	0x0800b2fd
 800b33c:	0800b2fd 	.word	0x0800b2fd
 800b340:	0800b48d 	.word	0x0800b48d
 800b344:	0800b3b1 	.word	0x0800b3b1
 800b348:	0800b46f 	.word	0x0800b46f
 800b34c:	0800b2fd 	.word	0x0800b2fd
 800b350:	0800b2fd 	.word	0x0800b2fd
 800b354:	0800b4af 	.word	0x0800b4af
 800b358:	0800b2fd 	.word	0x0800b2fd
 800b35c:	0800b3b1 	.word	0x0800b3b1
 800b360:	0800b2fd 	.word	0x0800b2fd
 800b364:	0800b2fd 	.word	0x0800b2fd
 800b368:	0800b477 	.word	0x0800b477
 800b36c:	680b      	ldr	r3, [r1, #0]
 800b36e:	1d1a      	adds	r2, r3, #4
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	600a      	str	r2, [r1, #0]
 800b374:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b378:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b37c:	2301      	movs	r3, #1
 800b37e:	e0a3      	b.n	800b4c8 <_printf_i+0x1f4>
 800b380:	6825      	ldr	r5, [r4, #0]
 800b382:	6808      	ldr	r0, [r1, #0]
 800b384:	062e      	lsls	r6, r5, #24
 800b386:	f100 0304 	add.w	r3, r0, #4
 800b38a:	d50a      	bpl.n	800b3a2 <_printf_i+0xce>
 800b38c:	6805      	ldr	r5, [r0, #0]
 800b38e:	600b      	str	r3, [r1, #0]
 800b390:	2d00      	cmp	r5, #0
 800b392:	da03      	bge.n	800b39c <_printf_i+0xc8>
 800b394:	232d      	movs	r3, #45	; 0x2d
 800b396:	426d      	negs	r5, r5
 800b398:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b39c:	485e      	ldr	r0, [pc, #376]	; (800b518 <_printf_i+0x244>)
 800b39e:	230a      	movs	r3, #10
 800b3a0:	e019      	b.n	800b3d6 <_printf_i+0x102>
 800b3a2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b3a6:	6805      	ldr	r5, [r0, #0]
 800b3a8:	600b      	str	r3, [r1, #0]
 800b3aa:	bf18      	it	ne
 800b3ac:	b22d      	sxthne	r5, r5
 800b3ae:	e7ef      	b.n	800b390 <_printf_i+0xbc>
 800b3b0:	680b      	ldr	r3, [r1, #0]
 800b3b2:	6825      	ldr	r5, [r4, #0]
 800b3b4:	1d18      	adds	r0, r3, #4
 800b3b6:	6008      	str	r0, [r1, #0]
 800b3b8:	0628      	lsls	r0, r5, #24
 800b3ba:	d501      	bpl.n	800b3c0 <_printf_i+0xec>
 800b3bc:	681d      	ldr	r5, [r3, #0]
 800b3be:	e002      	b.n	800b3c6 <_printf_i+0xf2>
 800b3c0:	0669      	lsls	r1, r5, #25
 800b3c2:	d5fb      	bpl.n	800b3bc <_printf_i+0xe8>
 800b3c4:	881d      	ldrh	r5, [r3, #0]
 800b3c6:	4854      	ldr	r0, [pc, #336]	; (800b518 <_printf_i+0x244>)
 800b3c8:	2f6f      	cmp	r7, #111	; 0x6f
 800b3ca:	bf0c      	ite	eq
 800b3cc:	2308      	moveq	r3, #8
 800b3ce:	230a      	movne	r3, #10
 800b3d0:	2100      	movs	r1, #0
 800b3d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b3d6:	6866      	ldr	r6, [r4, #4]
 800b3d8:	60a6      	str	r6, [r4, #8]
 800b3da:	2e00      	cmp	r6, #0
 800b3dc:	bfa2      	ittt	ge
 800b3de:	6821      	ldrge	r1, [r4, #0]
 800b3e0:	f021 0104 	bicge.w	r1, r1, #4
 800b3e4:	6021      	strge	r1, [r4, #0]
 800b3e6:	b90d      	cbnz	r5, 800b3ec <_printf_i+0x118>
 800b3e8:	2e00      	cmp	r6, #0
 800b3ea:	d04d      	beq.n	800b488 <_printf_i+0x1b4>
 800b3ec:	4616      	mov	r6, r2
 800b3ee:	fbb5 f1f3 	udiv	r1, r5, r3
 800b3f2:	fb03 5711 	mls	r7, r3, r1, r5
 800b3f6:	5dc7      	ldrb	r7, [r0, r7]
 800b3f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b3fc:	462f      	mov	r7, r5
 800b3fe:	42bb      	cmp	r3, r7
 800b400:	460d      	mov	r5, r1
 800b402:	d9f4      	bls.n	800b3ee <_printf_i+0x11a>
 800b404:	2b08      	cmp	r3, #8
 800b406:	d10b      	bne.n	800b420 <_printf_i+0x14c>
 800b408:	6823      	ldr	r3, [r4, #0]
 800b40a:	07df      	lsls	r7, r3, #31
 800b40c:	d508      	bpl.n	800b420 <_printf_i+0x14c>
 800b40e:	6923      	ldr	r3, [r4, #16]
 800b410:	6861      	ldr	r1, [r4, #4]
 800b412:	4299      	cmp	r1, r3
 800b414:	bfde      	ittt	le
 800b416:	2330      	movle	r3, #48	; 0x30
 800b418:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b41c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b420:	1b92      	subs	r2, r2, r6
 800b422:	6122      	str	r2, [r4, #16]
 800b424:	f8cd a000 	str.w	sl, [sp]
 800b428:	464b      	mov	r3, r9
 800b42a:	aa03      	add	r2, sp, #12
 800b42c:	4621      	mov	r1, r4
 800b42e:	4640      	mov	r0, r8
 800b430:	f7ff fee2 	bl	800b1f8 <_printf_common>
 800b434:	3001      	adds	r0, #1
 800b436:	d14c      	bne.n	800b4d2 <_printf_i+0x1fe>
 800b438:	f04f 30ff 	mov.w	r0, #4294967295
 800b43c:	b004      	add	sp, #16
 800b43e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b442:	4835      	ldr	r0, [pc, #212]	; (800b518 <_printf_i+0x244>)
 800b444:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b448:	6823      	ldr	r3, [r4, #0]
 800b44a:	680e      	ldr	r6, [r1, #0]
 800b44c:	061f      	lsls	r7, r3, #24
 800b44e:	f856 5b04 	ldr.w	r5, [r6], #4
 800b452:	600e      	str	r6, [r1, #0]
 800b454:	d514      	bpl.n	800b480 <_printf_i+0x1ac>
 800b456:	07d9      	lsls	r1, r3, #31
 800b458:	bf44      	itt	mi
 800b45a:	f043 0320 	orrmi.w	r3, r3, #32
 800b45e:	6023      	strmi	r3, [r4, #0]
 800b460:	b91d      	cbnz	r5, 800b46a <_printf_i+0x196>
 800b462:	6823      	ldr	r3, [r4, #0]
 800b464:	f023 0320 	bic.w	r3, r3, #32
 800b468:	6023      	str	r3, [r4, #0]
 800b46a:	2310      	movs	r3, #16
 800b46c:	e7b0      	b.n	800b3d0 <_printf_i+0xfc>
 800b46e:	6823      	ldr	r3, [r4, #0]
 800b470:	f043 0320 	orr.w	r3, r3, #32
 800b474:	6023      	str	r3, [r4, #0]
 800b476:	2378      	movs	r3, #120	; 0x78
 800b478:	4828      	ldr	r0, [pc, #160]	; (800b51c <_printf_i+0x248>)
 800b47a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b47e:	e7e3      	b.n	800b448 <_printf_i+0x174>
 800b480:	065e      	lsls	r6, r3, #25
 800b482:	bf48      	it	mi
 800b484:	b2ad      	uxthmi	r5, r5
 800b486:	e7e6      	b.n	800b456 <_printf_i+0x182>
 800b488:	4616      	mov	r6, r2
 800b48a:	e7bb      	b.n	800b404 <_printf_i+0x130>
 800b48c:	680b      	ldr	r3, [r1, #0]
 800b48e:	6826      	ldr	r6, [r4, #0]
 800b490:	6960      	ldr	r0, [r4, #20]
 800b492:	1d1d      	adds	r5, r3, #4
 800b494:	600d      	str	r5, [r1, #0]
 800b496:	0635      	lsls	r5, r6, #24
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	d501      	bpl.n	800b4a0 <_printf_i+0x1cc>
 800b49c:	6018      	str	r0, [r3, #0]
 800b49e:	e002      	b.n	800b4a6 <_printf_i+0x1d2>
 800b4a0:	0671      	lsls	r1, r6, #25
 800b4a2:	d5fb      	bpl.n	800b49c <_printf_i+0x1c8>
 800b4a4:	8018      	strh	r0, [r3, #0]
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	6123      	str	r3, [r4, #16]
 800b4aa:	4616      	mov	r6, r2
 800b4ac:	e7ba      	b.n	800b424 <_printf_i+0x150>
 800b4ae:	680b      	ldr	r3, [r1, #0]
 800b4b0:	1d1a      	adds	r2, r3, #4
 800b4b2:	600a      	str	r2, [r1, #0]
 800b4b4:	681e      	ldr	r6, [r3, #0]
 800b4b6:	6862      	ldr	r2, [r4, #4]
 800b4b8:	2100      	movs	r1, #0
 800b4ba:	4630      	mov	r0, r6
 800b4bc:	f7f4 fec0 	bl	8000240 <memchr>
 800b4c0:	b108      	cbz	r0, 800b4c6 <_printf_i+0x1f2>
 800b4c2:	1b80      	subs	r0, r0, r6
 800b4c4:	6060      	str	r0, [r4, #4]
 800b4c6:	6863      	ldr	r3, [r4, #4]
 800b4c8:	6123      	str	r3, [r4, #16]
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b4d0:	e7a8      	b.n	800b424 <_printf_i+0x150>
 800b4d2:	6923      	ldr	r3, [r4, #16]
 800b4d4:	4632      	mov	r2, r6
 800b4d6:	4649      	mov	r1, r9
 800b4d8:	4640      	mov	r0, r8
 800b4da:	47d0      	blx	sl
 800b4dc:	3001      	adds	r0, #1
 800b4de:	d0ab      	beq.n	800b438 <_printf_i+0x164>
 800b4e0:	6823      	ldr	r3, [r4, #0]
 800b4e2:	079b      	lsls	r3, r3, #30
 800b4e4:	d413      	bmi.n	800b50e <_printf_i+0x23a>
 800b4e6:	68e0      	ldr	r0, [r4, #12]
 800b4e8:	9b03      	ldr	r3, [sp, #12]
 800b4ea:	4298      	cmp	r0, r3
 800b4ec:	bfb8      	it	lt
 800b4ee:	4618      	movlt	r0, r3
 800b4f0:	e7a4      	b.n	800b43c <_printf_i+0x168>
 800b4f2:	2301      	movs	r3, #1
 800b4f4:	4632      	mov	r2, r6
 800b4f6:	4649      	mov	r1, r9
 800b4f8:	4640      	mov	r0, r8
 800b4fa:	47d0      	blx	sl
 800b4fc:	3001      	adds	r0, #1
 800b4fe:	d09b      	beq.n	800b438 <_printf_i+0x164>
 800b500:	3501      	adds	r5, #1
 800b502:	68e3      	ldr	r3, [r4, #12]
 800b504:	9903      	ldr	r1, [sp, #12]
 800b506:	1a5b      	subs	r3, r3, r1
 800b508:	42ab      	cmp	r3, r5
 800b50a:	dcf2      	bgt.n	800b4f2 <_printf_i+0x21e>
 800b50c:	e7eb      	b.n	800b4e6 <_printf_i+0x212>
 800b50e:	2500      	movs	r5, #0
 800b510:	f104 0619 	add.w	r6, r4, #25
 800b514:	e7f5      	b.n	800b502 <_printf_i+0x22e>
 800b516:	bf00      	nop
 800b518:	0800c179 	.word	0x0800c179
 800b51c:	0800c18a 	.word	0x0800c18a

0800b520 <cleanup_glue>:
 800b520:	b538      	push	{r3, r4, r5, lr}
 800b522:	460c      	mov	r4, r1
 800b524:	6809      	ldr	r1, [r1, #0]
 800b526:	4605      	mov	r5, r0
 800b528:	b109      	cbz	r1, 800b52e <cleanup_glue+0xe>
 800b52a:	f7ff fff9 	bl	800b520 <cleanup_glue>
 800b52e:	4621      	mov	r1, r4
 800b530:	4628      	mov	r0, r5
 800b532:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b536:	f000 badf 	b.w	800baf8 <_free_r>
	...

0800b53c <_reclaim_reent>:
 800b53c:	4b2c      	ldr	r3, [pc, #176]	; (800b5f0 <_reclaim_reent+0xb4>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	4283      	cmp	r3, r0
 800b542:	b570      	push	{r4, r5, r6, lr}
 800b544:	4604      	mov	r4, r0
 800b546:	d051      	beq.n	800b5ec <_reclaim_reent+0xb0>
 800b548:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b54a:	b143      	cbz	r3, 800b55e <_reclaim_reent+0x22>
 800b54c:	68db      	ldr	r3, [r3, #12]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d14a      	bne.n	800b5e8 <_reclaim_reent+0xac>
 800b552:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b554:	6819      	ldr	r1, [r3, #0]
 800b556:	b111      	cbz	r1, 800b55e <_reclaim_reent+0x22>
 800b558:	4620      	mov	r0, r4
 800b55a:	f000 facd 	bl	800baf8 <_free_r>
 800b55e:	6961      	ldr	r1, [r4, #20]
 800b560:	b111      	cbz	r1, 800b568 <_reclaim_reent+0x2c>
 800b562:	4620      	mov	r0, r4
 800b564:	f000 fac8 	bl	800baf8 <_free_r>
 800b568:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b56a:	b111      	cbz	r1, 800b572 <_reclaim_reent+0x36>
 800b56c:	4620      	mov	r0, r4
 800b56e:	f000 fac3 	bl	800baf8 <_free_r>
 800b572:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b574:	b111      	cbz	r1, 800b57c <_reclaim_reent+0x40>
 800b576:	4620      	mov	r0, r4
 800b578:	f000 fabe 	bl	800baf8 <_free_r>
 800b57c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b57e:	b111      	cbz	r1, 800b586 <_reclaim_reent+0x4a>
 800b580:	4620      	mov	r0, r4
 800b582:	f000 fab9 	bl	800baf8 <_free_r>
 800b586:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b588:	b111      	cbz	r1, 800b590 <_reclaim_reent+0x54>
 800b58a:	4620      	mov	r0, r4
 800b58c:	f000 fab4 	bl	800baf8 <_free_r>
 800b590:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b592:	b111      	cbz	r1, 800b59a <_reclaim_reent+0x5e>
 800b594:	4620      	mov	r0, r4
 800b596:	f000 faaf 	bl	800baf8 <_free_r>
 800b59a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b59c:	b111      	cbz	r1, 800b5a4 <_reclaim_reent+0x68>
 800b59e:	4620      	mov	r0, r4
 800b5a0:	f000 faaa 	bl	800baf8 <_free_r>
 800b5a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b5a6:	b111      	cbz	r1, 800b5ae <_reclaim_reent+0x72>
 800b5a8:	4620      	mov	r0, r4
 800b5aa:	f000 faa5 	bl	800baf8 <_free_r>
 800b5ae:	69a3      	ldr	r3, [r4, #24]
 800b5b0:	b1e3      	cbz	r3, 800b5ec <_reclaim_reent+0xb0>
 800b5b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b5b4:	4620      	mov	r0, r4
 800b5b6:	4798      	blx	r3
 800b5b8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b5ba:	b1b9      	cbz	r1, 800b5ec <_reclaim_reent+0xb0>
 800b5bc:	4620      	mov	r0, r4
 800b5be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b5c2:	f7ff bfad 	b.w	800b520 <cleanup_glue>
 800b5c6:	5949      	ldr	r1, [r1, r5]
 800b5c8:	b941      	cbnz	r1, 800b5dc <_reclaim_reent+0xa0>
 800b5ca:	3504      	adds	r5, #4
 800b5cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b5ce:	2d80      	cmp	r5, #128	; 0x80
 800b5d0:	68d9      	ldr	r1, [r3, #12]
 800b5d2:	d1f8      	bne.n	800b5c6 <_reclaim_reent+0x8a>
 800b5d4:	4620      	mov	r0, r4
 800b5d6:	f000 fa8f 	bl	800baf8 <_free_r>
 800b5da:	e7ba      	b.n	800b552 <_reclaim_reent+0x16>
 800b5dc:	680e      	ldr	r6, [r1, #0]
 800b5de:	4620      	mov	r0, r4
 800b5e0:	f000 fa8a 	bl	800baf8 <_free_r>
 800b5e4:	4631      	mov	r1, r6
 800b5e6:	e7ef      	b.n	800b5c8 <_reclaim_reent+0x8c>
 800b5e8:	2500      	movs	r5, #0
 800b5ea:	e7ef      	b.n	800b5cc <_reclaim_reent+0x90>
 800b5ec:	bd70      	pop	{r4, r5, r6, pc}
 800b5ee:	bf00      	nop
 800b5f0:	20000118 	.word	0x20000118

0800b5f4 <_sbrk_r>:
 800b5f4:	b538      	push	{r3, r4, r5, lr}
 800b5f6:	4d06      	ldr	r5, [pc, #24]	; (800b610 <_sbrk_r+0x1c>)
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	4604      	mov	r4, r0
 800b5fc:	4608      	mov	r0, r1
 800b5fe:	602b      	str	r3, [r5, #0]
 800b600:	f7f5 fcaa 	bl	8000f58 <_sbrk>
 800b604:	1c43      	adds	r3, r0, #1
 800b606:	d102      	bne.n	800b60e <_sbrk_r+0x1a>
 800b608:	682b      	ldr	r3, [r5, #0]
 800b60a:	b103      	cbz	r3, 800b60e <_sbrk_r+0x1a>
 800b60c:	6023      	str	r3, [r4, #0]
 800b60e:	bd38      	pop	{r3, r4, r5, pc}
 800b610:	20005428 	.word	0x20005428

0800b614 <__sread>:
 800b614:	b510      	push	{r4, lr}
 800b616:	460c      	mov	r4, r1
 800b618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b61c:	f000 fabc 	bl	800bb98 <_read_r>
 800b620:	2800      	cmp	r0, #0
 800b622:	bfab      	itete	ge
 800b624:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b626:	89a3      	ldrhlt	r3, [r4, #12]
 800b628:	181b      	addge	r3, r3, r0
 800b62a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b62e:	bfac      	ite	ge
 800b630:	6563      	strge	r3, [r4, #84]	; 0x54
 800b632:	81a3      	strhlt	r3, [r4, #12]
 800b634:	bd10      	pop	{r4, pc}

0800b636 <__swrite>:
 800b636:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b63a:	461f      	mov	r7, r3
 800b63c:	898b      	ldrh	r3, [r1, #12]
 800b63e:	05db      	lsls	r3, r3, #23
 800b640:	4605      	mov	r5, r0
 800b642:	460c      	mov	r4, r1
 800b644:	4616      	mov	r6, r2
 800b646:	d505      	bpl.n	800b654 <__swrite+0x1e>
 800b648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b64c:	2302      	movs	r3, #2
 800b64e:	2200      	movs	r2, #0
 800b650:	f000 f9d0 	bl	800b9f4 <_lseek_r>
 800b654:	89a3      	ldrh	r3, [r4, #12]
 800b656:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b65a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b65e:	81a3      	strh	r3, [r4, #12]
 800b660:	4632      	mov	r2, r6
 800b662:	463b      	mov	r3, r7
 800b664:	4628      	mov	r0, r5
 800b666:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b66a:	f000 b869 	b.w	800b740 <_write_r>

0800b66e <__sseek>:
 800b66e:	b510      	push	{r4, lr}
 800b670:	460c      	mov	r4, r1
 800b672:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b676:	f000 f9bd 	bl	800b9f4 <_lseek_r>
 800b67a:	1c43      	adds	r3, r0, #1
 800b67c:	89a3      	ldrh	r3, [r4, #12]
 800b67e:	bf15      	itete	ne
 800b680:	6560      	strne	r0, [r4, #84]	; 0x54
 800b682:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b686:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b68a:	81a3      	strheq	r3, [r4, #12]
 800b68c:	bf18      	it	ne
 800b68e:	81a3      	strhne	r3, [r4, #12]
 800b690:	bd10      	pop	{r4, pc}

0800b692 <__sclose>:
 800b692:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b696:	f000 b8db 	b.w	800b850 <_close_r>
	...

0800b69c <__swbuf_r>:
 800b69c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b69e:	460e      	mov	r6, r1
 800b6a0:	4614      	mov	r4, r2
 800b6a2:	4605      	mov	r5, r0
 800b6a4:	b118      	cbz	r0, 800b6ae <__swbuf_r+0x12>
 800b6a6:	6983      	ldr	r3, [r0, #24]
 800b6a8:	b90b      	cbnz	r3, 800b6ae <__swbuf_r+0x12>
 800b6aa:	f7ff fb03 	bl	800acb4 <__sinit>
 800b6ae:	4b21      	ldr	r3, [pc, #132]	; (800b734 <__swbuf_r+0x98>)
 800b6b0:	429c      	cmp	r4, r3
 800b6b2:	d12b      	bne.n	800b70c <__swbuf_r+0x70>
 800b6b4:	686c      	ldr	r4, [r5, #4]
 800b6b6:	69a3      	ldr	r3, [r4, #24]
 800b6b8:	60a3      	str	r3, [r4, #8]
 800b6ba:	89a3      	ldrh	r3, [r4, #12]
 800b6bc:	071a      	lsls	r2, r3, #28
 800b6be:	d52f      	bpl.n	800b720 <__swbuf_r+0x84>
 800b6c0:	6923      	ldr	r3, [r4, #16]
 800b6c2:	b36b      	cbz	r3, 800b720 <__swbuf_r+0x84>
 800b6c4:	6923      	ldr	r3, [r4, #16]
 800b6c6:	6820      	ldr	r0, [r4, #0]
 800b6c8:	1ac0      	subs	r0, r0, r3
 800b6ca:	6963      	ldr	r3, [r4, #20]
 800b6cc:	b2f6      	uxtb	r6, r6
 800b6ce:	4283      	cmp	r3, r0
 800b6d0:	4637      	mov	r7, r6
 800b6d2:	dc04      	bgt.n	800b6de <__swbuf_r+0x42>
 800b6d4:	4621      	mov	r1, r4
 800b6d6:	4628      	mov	r0, r5
 800b6d8:	f000 f950 	bl	800b97c <_fflush_r>
 800b6dc:	bb30      	cbnz	r0, 800b72c <__swbuf_r+0x90>
 800b6de:	68a3      	ldr	r3, [r4, #8]
 800b6e0:	3b01      	subs	r3, #1
 800b6e2:	60a3      	str	r3, [r4, #8]
 800b6e4:	6823      	ldr	r3, [r4, #0]
 800b6e6:	1c5a      	adds	r2, r3, #1
 800b6e8:	6022      	str	r2, [r4, #0]
 800b6ea:	701e      	strb	r6, [r3, #0]
 800b6ec:	6963      	ldr	r3, [r4, #20]
 800b6ee:	3001      	adds	r0, #1
 800b6f0:	4283      	cmp	r3, r0
 800b6f2:	d004      	beq.n	800b6fe <__swbuf_r+0x62>
 800b6f4:	89a3      	ldrh	r3, [r4, #12]
 800b6f6:	07db      	lsls	r3, r3, #31
 800b6f8:	d506      	bpl.n	800b708 <__swbuf_r+0x6c>
 800b6fa:	2e0a      	cmp	r6, #10
 800b6fc:	d104      	bne.n	800b708 <__swbuf_r+0x6c>
 800b6fe:	4621      	mov	r1, r4
 800b700:	4628      	mov	r0, r5
 800b702:	f000 f93b 	bl	800b97c <_fflush_r>
 800b706:	b988      	cbnz	r0, 800b72c <__swbuf_r+0x90>
 800b708:	4638      	mov	r0, r7
 800b70a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b70c:	4b0a      	ldr	r3, [pc, #40]	; (800b738 <__swbuf_r+0x9c>)
 800b70e:	429c      	cmp	r4, r3
 800b710:	d101      	bne.n	800b716 <__swbuf_r+0x7a>
 800b712:	68ac      	ldr	r4, [r5, #8]
 800b714:	e7cf      	b.n	800b6b6 <__swbuf_r+0x1a>
 800b716:	4b09      	ldr	r3, [pc, #36]	; (800b73c <__swbuf_r+0xa0>)
 800b718:	429c      	cmp	r4, r3
 800b71a:	bf08      	it	eq
 800b71c:	68ec      	ldreq	r4, [r5, #12]
 800b71e:	e7ca      	b.n	800b6b6 <__swbuf_r+0x1a>
 800b720:	4621      	mov	r1, r4
 800b722:	4628      	mov	r0, r5
 800b724:	f000 f81e 	bl	800b764 <__swsetup_r>
 800b728:	2800      	cmp	r0, #0
 800b72a:	d0cb      	beq.n	800b6c4 <__swbuf_r+0x28>
 800b72c:	f04f 37ff 	mov.w	r7, #4294967295
 800b730:	e7ea      	b.n	800b708 <__swbuf_r+0x6c>
 800b732:	bf00      	nop
 800b734:	0800c124 	.word	0x0800c124
 800b738:	0800c144 	.word	0x0800c144
 800b73c:	0800c104 	.word	0x0800c104

0800b740 <_write_r>:
 800b740:	b538      	push	{r3, r4, r5, lr}
 800b742:	4d07      	ldr	r5, [pc, #28]	; (800b760 <_write_r+0x20>)
 800b744:	4604      	mov	r4, r0
 800b746:	4608      	mov	r0, r1
 800b748:	4611      	mov	r1, r2
 800b74a:	2200      	movs	r2, #0
 800b74c:	602a      	str	r2, [r5, #0]
 800b74e:	461a      	mov	r2, r3
 800b750:	f7f5 fbb1 	bl	8000eb6 <_write>
 800b754:	1c43      	adds	r3, r0, #1
 800b756:	d102      	bne.n	800b75e <_write_r+0x1e>
 800b758:	682b      	ldr	r3, [r5, #0]
 800b75a:	b103      	cbz	r3, 800b75e <_write_r+0x1e>
 800b75c:	6023      	str	r3, [r4, #0]
 800b75e:	bd38      	pop	{r3, r4, r5, pc}
 800b760:	20005428 	.word	0x20005428

0800b764 <__swsetup_r>:
 800b764:	4b32      	ldr	r3, [pc, #200]	; (800b830 <__swsetup_r+0xcc>)
 800b766:	b570      	push	{r4, r5, r6, lr}
 800b768:	681d      	ldr	r5, [r3, #0]
 800b76a:	4606      	mov	r6, r0
 800b76c:	460c      	mov	r4, r1
 800b76e:	b125      	cbz	r5, 800b77a <__swsetup_r+0x16>
 800b770:	69ab      	ldr	r3, [r5, #24]
 800b772:	b913      	cbnz	r3, 800b77a <__swsetup_r+0x16>
 800b774:	4628      	mov	r0, r5
 800b776:	f7ff fa9d 	bl	800acb4 <__sinit>
 800b77a:	4b2e      	ldr	r3, [pc, #184]	; (800b834 <__swsetup_r+0xd0>)
 800b77c:	429c      	cmp	r4, r3
 800b77e:	d10f      	bne.n	800b7a0 <__swsetup_r+0x3c>
 800b780:	686c      	ldr	r4, [r5, #4]
 800b782:	89a3      	ldrh	r3, [r4, #12]
 800b784:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b788:	0719      	lsls	r1, r3, #28
 800b78a:	d42c      	bmi.n	800b7e6 <__swsetup_r+0x82>
 800b78c:	06dd      	lsls	r5, r3, #27
 800b78e:	d411      	bmi.n	800b7b4 <__swsetup_r+0x50>
 800b790:	2309      	movs	r3, #9
 800b792:	6033      	str	r3, [r6, #0]
 800b794:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b798:	81a3      	strh	r3, [r4, #12]
 800b79a:	f04f 30ff 	mov.w	r0, #4294967295
 800b79e:	e03e      	b.n	800b81e <__swsetup_r+0xba>
 800b7a0:	4b25      	ldr	r3, [pc, #148]	; (800b838 <__swsetup_r+0xd4>)
 800b7a2:	429c      	cmp	r4, r3
 800b7a4:	d101      	bne.n	800b7aa <__swsetup_r+0x46>
 800b7a6:	68ac      	ldr	r4, [r5, #8]
 800b7a8:	e7eb      	b.n	800b782 <__swsetup_r+0x1e>
 800b7aa:	4b24      	ldr	r3, [pc, #144]	; (800b83c <__swsetup_r+0xd8>)
 800b7ac:	429c      	cmp	r4, r3
 800b7ae:	bf08      	it	eq
 800b7b0:	68ec      	ldreq	r4, [r5, #12]
 800b7b2:	e7e6      	b.n	800b782 <__swsetup_r+0x1e>
 800b7b4:	0758      	lsls	r0, r3, #29
 800b7b6:	d512      	bpl.n	800b7de <__swsetup_r+0x7a>
 800b7b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b7ba:	b141      	cbz	r1, 800b7ce <__swsetup_r+0x6a>
 800b7bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b7c0:	4299      	cmp	r1, r3
 800b7c2:	d002      	beq.n	800b7ca <__swsetup_r+0x66>
 800b7c4:	4630      	mov	r0, r6
 800b7c6:	f000 f997 	bl	800baf8 <_free_r>
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	6363      	str	r3, [r4, #52]	; 0x34
 800b7ce:	89a3      	ldrh	r3, [r4, #12]
 800b7d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b7d4:	81a3      	strh	r3, [r4, #12]
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	6063      	str	r3, [r4, #4]
 800b7da:	6923      	ldr	r3, [r4, #16]
 800b7dc:	6023      	str	r3, [r4, #0]
 800b7de:	89a3      	ldrh	r3, [r4, #12]
 800b7e0:	f043 0308 	orr.w	r3, r3, #8
 800b7e4:	81a3      	strh	r3, [r4, #12]
 800b7e6:	6923      	ldr	r3, [r4, #16]
 800b7e8:	b94b      	cbnz	r3, 800b7fe <__swsetup_r+0x9a>
 800b7ea:	89a3      	ldrh	r3, [r4, #12]
 800b7ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b7f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b7f4:	d003      	beq.n	800b7fe <__swsetup_r+0x9a>
 800b7f6:	4621      	mov	r1, r4
 800b7f8:	4630      	mov	r0, r6
 800b7fa:	f000 f931 	bl	800ba60 <__smakebuf_r>
 800b7fe:	89a0      	ldrh	r0, [r4, #12]
 800b800:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b804:	f010 0301 	ands.w	r3, r0, #1
 800b808:	d00a      	beq.n	800b820 <__swsetup_r+0xbc>
 800b80a:	2300      	movs	r3, #0
 800b80c:	60a3      	str	r3, [r4, #8]
 800b80e:	6963      	ldr	r3, [r4, #20]
 800b810:	425b      	negs	r3, r3
 800b812:	61a3      	str	r3, [r4, #24]
 800b814:	6923      	ldr	r3, [r4, #16]
 800b816:	b943      	cbnz	r3, 800b82a <__swsetup_r+0xc6>
 800b818:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b81c:	d1ba      	bne.n	800b794 <__swsetup_r+0x30>
 800b81e:	bd70      	pop	{r4, r5, r6, pc}
 800b820:	0781      	lsls	r1, r0, #30
 800b822:	bf58      	it	pl
 800b824:	6963      	ldrpl	r3, [r4, #20]
 800b826:	60a3      	str	r3, [r4, #8]
 800b828:	e7f4      	b.n	800b814 <__swsetup_r+0xb0>
 800b82a:	2000      	movs	r0, #0
 800b82c:	e7f7      	b.n	800b81e <__swsetup_r+0xba>
 800b82e:	bf00      	nop
 800b830:	20000118 	.word	0x20000118
 800b834:	0800c124 	.word	0x0800c124
 800b838:	0800c144 	.word	0x0800c144
 800b83c:	0800c104 	.word	0x0800c104

0800b840 <abort>:
 800b840:	b508      	push	{r3, lr}
 800b842:	2006      	movs	r0, #6
 800b844:	f000 f9e2 	bl	800bc0c <raise>
 800b848:	2001      	movs	r0, #1
 800b84a:	f7f5 fb0d 	bl	8000e68 <_exit>
	...

0800b850 <_close_r>:
 800b850:	b538      	push	{r3, r4, r5, lr}
 800b852:	4d06      	ldr	r5, [pc, #24]	; (800b86c <_close_r+0x1c>)
 800b854:	2300      	movs	r3, #0
 800b856:	4604      	mov	r4, r0
 800b858:	4608      	mov	r0, r1
 800b85a:	602b      	str	r3, [r5, #0]
 800b85c:	f7f5 fb47 	bl	8000eee <_close>
 800b860:	1c43      	adds	r3, r0, #1
 800b862:	d102      	bne.n	800b86a <_close_r+0x1a>
 800b864:	682b      	ldr	r3, [r5, #0]
 800b866:	b103      	cbz	r3, 800b86a <_close_r+0x1a>
 800b868:	6023      	str	r3, [r4, #0]
 800b86a:	bd38      	pop	{r3, r4, r5, pc}
 800b86c:	20005428 	.word	0x20005428

0800b870 <__sflush_r>:
 800b870:	898a      	ldrh	r2, [r1, #12]
 800b872:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b876:	4605      	mov	r5, r0
 800b878:	0710      	lsls	r0, r2, #28
 800b87a:	460c      	mov	r4, r1
 800b87c:	d458      	bmi.n	800b930 <__sflush_r+0xc0>
 800b87e:	684b      	ldr	r3, [r1, #4]
 800b880:	2b00      	cmp	r3, #0
 800b882:	dc05      	bgt.n	800b890 <__sflush_r+0x20>
 800b884:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b886:	2b00      	cmp	r3, #0
 800b888:	dc02      	bgt.n	800b890 <__sflush_r+0x20>
 800b88a:	2000      	movs	r0, #0
 800b88c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b890:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b892:	2e00      	cmp	r6, #0
 800b894:	d0f9      	beq.n	800b88a <__sflush_r+0x1a>
 800b896:	2300      	movs	r3, #0
 800b898:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b89c:	682f      	ldr	r7, [r5, #0]
 800b89e:	602b      	str	r3, [r5, #0]
 800b8a0:	d032      	beq.n	800b908 <__sflush_r+0x98>
 800b8a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b8a4:	89a3      	ldrh	r3, [r4, #12]
 800b8a6:	075a      	lsls	r2, r3, #29
 800b8a8:	d505      	bpl.n	800b8b6 <__sflush_r+0x46>
 800b8aa:	6863      	ldr	r3, [r4, #4]
 800b8ac:	1ac0      	subs	r0, r0, r3
 800b8ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b8b0:	b10b      	cbz	r3, 800b8b6 <__sflush_r+0x46>
 800b8b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b8b4:	1ac0      	subs	r0, r0, r3
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	4602      	mov	r2, r0
 800b8ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b8bc:	6a21      	ldr	r1, [r4, #32]
 800b8be:	4628      	mov	r0, r5
 800b8c0:	47b0      	blx	r6
 800b8c2:	1c43      	adds	r3, r0, #1
 800b8c4:	89a3      	ldrh	r3, [r4, #12]
 800b8c6:	d106      	bne.n	800b8d6 <__sflush_r+0x66>
 800b8c8:	6829      	ldr	r1, [r5, #0]
 800b8ca:	291d      	cmp	r1, #29
 800b8cc:	d82c      	bhi.n	800b928 <__sflush_r+0xb8>
 800b8ce:	4a2a      	ldr	r2, [pc, #168]	; (800b978 <__sflush_r+0x108>)
 800b8d0:	40ca      	lsrs	r2, r1
 800b8d2:	07d6      	lsls	r6, r2, #31
 800b8d4:	d528      	bpl.n	800b928 <__sflush_r+0xb8>
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	6062      	str	r2, [r4, #4]
 800b8da:	04d9      	lsls	r1, r3, #19
 800b8dc:	6922      	ldr	r2, [r4, #16]
 800b8de:	6022      	str	r2, [r4, #0]
 800b8e0:	d504      	bpl.n	800b8ec <__sflush_r+0x7c>
 800b8e2:	1c42      	adds	r2, r0, #1
 800b8e4:	d101      	bne.n	800b8ea <__sflush_r+0x7a>
 800b8e6:	682b      	ldr	r3, [r5, #0]
 800b8e8:	b903      	cbnz	r3, 800b8ec <__sflush_r+0x7c>
 800b8ea:	6560      	str	r0, [r4, #84]	; 0x54
 800b8ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b8ee:	602f      	str	r7, [r5, #0]
 800b8f0:	2900      	cmp	r1, #0
 800b8f2:	d0ca      	beq.n	800b88a <__sflush_r+0x1a>
 800b8f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b8f8:	4299      	cmp	r1, r3
 800b8fa:	d002      	beq.n	800b902 <__sflush_r+0x92>
 800b8fc:	4628      	mov	r0, r5
 800b8fe:	f000 f8fb 	bl	800baf8 <_free_r>
 800b902:	2000      	movs	r0, #0
 800b904:	6360      	str	r0, [r4, #52]	; 0x34
 800b906:	e7c1      	b.n	800b88c <__sflush_r+0x1c>
 800b908:	6a21      	ldr	r1, [r4, #32]
 800b90a:	2301      	movs	r3, #1
 800b90c:	4628      	mov	r0, r5
 800b90e:	47b0      	blx	r6
 800b910:	1c41      	adds	r1, r0, #1
 800b912:	d1c7      	bne.n	800b8a4 <__sflush_r+0x34>
 800b914:	682b      	ldr	r3, [r5, #0]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d0c4      	beq.n	800b8a4 <__sflush_r+0x34>
 800b91a:	2b1d      	cmp	r3, #29
 800b91c:	d001      	beq.n	800b922 <__sflush_r+0xb2>
 800b91e:	2b16      	cmp	r3, #22
 800b920:	d101      	bne.n	800b926 <__sflush_r+0xb6>
 800b922:	602f      	str	r7, [r5, #0]
 800b924:	e7b1      	b.n	800b88a <__sflush_r+0x1a>
 800b926:	89a3      	ldrh	r3, [r4, #12]
 800b928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b92c:	81a3      	strh	r3, [r4, #12]
 800b92e:	e7ad      	b.n	800b88c <__sflush_r+0x1c>
 800b930:	690f      	ldr	r7, [r1, #16]
 800b932:	2f00      	cmp	r7, #0
 800b934:	d0a9      	beq.n	800b88a <__sflush_r+0x1a>
 800b936:	0793      	lsls	r3, r2, #30
 800b938:	680e      	ldr	r6, [r1, #0]
 800b93a:	bf08      	it	eq
 800b93c:	694b      	ldreq	r3, [r1, #20]
 800b93e:	600f      	str	r7, [r1, #0]
 800b940:	bf18      	it	ne
 800b942:	2300      	movne	r3, #0
 800b944:	eba6 0807 	sub.w	r8, r6, r7
 800b948:	608b      	str	r3, [r1, #8]
 800b94a:	f1b8 0f00 	cmp.w	r8, #0
 800b94e:	dd9c      	ble.n	800b88a <__sflush_r+0x1a>
 800b950:	6a21      	ldr	r1, [r4, #32]
 800b952:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b954:	4643      	mov	r3, r8
 800b956:	463a      	mov	r2, r7
 800b958:	4628      	mov	r0, r5
 800b95a:	47b0      	blx	r6
 800b95c:	2800      	cmp	r0, #0
 800b95e:	dc06      	bgt.n	800b96e <__sflush_r+0xfe>
 800b960:	89a3      	ldrh	r3, [r4, #12]
 800b962:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b966:	81a3      	strh	r3, [r4, #12]
 800b968:	f04f 30ff 	mov.w	r0, #4294967295
 800b96c:	e78e      	b.n	800b88c <__sflush_r+0x1c>
 800b96e:	4407      	add	r7, r0
 800b970:	eba8 0800 	sub.w	r8, r8, r0
 800b974:	e7e9      	b.n	800b94a <__sflush_r+0xda>
 800b976:	bf00      	nop
 800b978:	20400001 	.word	0x20400001

0800b97c <_fflush_r>:
 800b97c:	b538      	push	{r3, r4, r5, lr}
 800b97e:	690b      	ldr	r3, [r1, #16]
 800b980:	4605      	mov	r5, r0
 800b982:	460c      	mov	r4, r1
 800b984:	b913      	cbnz	r3, 800b98c <_fflush_r+0x10>
 800b986:	2500      	movs	r5, #0
 800b988:	4628      	mov	r0, r5
 800b98a:	bd38      	pop	{r3, r4, r5, pc}
 800b98c:	b118      	cbz	r0, 800b996 <_fflush_r+0x1a>
 800b98e:	6983      	ldr	r3, [r0, #24]
 800b990:	b90b      	cbnz	r3, 800b996 <_fflush_r+0x1a>
 800b992:	f7ff f98f 	bl	800acb4 <__sinit>
 800b996:	4b14      	ldr	r3, [pc, #80]	; (800b9e8 <_fflush_r+0x6c>)
 800b998:	429c      	cmp	r4, r3
 800b99a:	d11b      	bne.n	800b9d4 <_fflush_r+0x58>
 800b99c:	686c      	ldr	r4, [r5, #4]
 800b99e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d0ef      	beq.n	800b986 <_fflush_r+0xa>
 800b9a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b9a8:	07d0      	lsls	r0, r2, #31
 800b9aa:	d404      	bmi.n	800b9b6 <_fflush_r+0x3a>
 800b9ac:	0599      	lsls	r1, r3, #22
 800b9ae:	d402      	bmi.n	800b9b6 <_fflush_r+0x3a>
 800b9b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b9b2:	f7ff fa54 	bl	800ae5e <__retarget_lock_acquire_recursive>
 800b9b6:	4628      	mov	r0, r5
 800b9b8:	4621      	mov	r1, r4
 800b9ba:	f7ff ff59 	bl	800b870 <__sflush_r>
 800b9be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b9c0:	07da      	lsls	r2, r3, #31
 800b9c2:	4605      	mov	r5, r0
 800b9c4:	d4e0      	bmi.n	800b988 <_fflush_r+0xc>
 800b9c6:	89a3      	ldrh	r3, [r4, #12]
 800b9c8:	059b      	lsls	r3, r3, #22
 800b9ca:	d4dd      	bmi.n	800b988 <_fflush_r+0xc>
 800b9cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b9ce:	f7ff fa47 	bl	800ae60 <__retarget_lock_release_recursive>
 800b9d2:	e7d9      	b.n	800b988 <_fflush_r+0xc>
 800b9d4:	4b05      	ldr	r3, [pc, #20]	; (800b9ec <_fflush_r+0x70>)
 800b9d6:	429c      	cmp	r4, r3
 800b9d8:	d101      	bne.n	800b9de <_fflush_r+0x62>
 800b9da:	68ac      	ldr	r4, [r5, #8]
 800b9dc:	e7df      	b.n	800b99e <_fflush_r+0x22>
 800b9de:	4b04      	ldr	r3, [pc, #16]	; (800b9f0 <_fflush_r+0x74>)
 800b9e0:	429c      	cmp	r4, r3
 800b9e2:	bf08      	it	eq
 800b9e4:	68ec      	ldreq	r4, [r5, #12]
 800b9e6:	e7da      	b.n	800b99e <_fflush_r+0x22>
 800b9e8:	0800c124 	.word	0x0800c124
 800b9ec:	0800c144 	.word	0x0800c144
 800b9f0:	0800c104 	.word	0x0800c104

0800b9f4 <_lseek_r>:
 800b9f4:	b538      	push	{r3, r4, r5, lr}
 800b9f6:	4d07      	ldr	r5, [pc, #28]	; (800ba14 <_lseek_r+0x20>)
 800b9f8:	4604      	mov	r4, r0
 800b9fa:	4608      	mov	r0, r1
 800b9fc:	4611      	mov	r1, r2
 800b9fe:	2200      	movs	r2, #0
 800ba00:	602a      	str	r2, [r5, #0]
 800ba02:	461a      	mov	r2, r3
 800ba04:	f7f5 fa9a 	bl	8000f3c <_lseek>
 800ba08:	1c43      	adds	r3, r0, #1
 800ba0a:	d102      	bne.n	800ba12 <_lseek_r+0x1e>
 800ba0c:	682b      	ldr	r3, [r5, #0]
 800ba0e:	b103      	cbz	r3, 800ba12 <_lseek_r+0x1e>
 800ba10:	6023      	str	r3, [r4, #0]
 800ba12:	bd38      	pop	{r3, r4, r5, pc}
 800ba14:	20005428 	.word	0x20005428

0800ba18 <__swhatbuf_r>:
 800ba18:	b570      	push	{r4, r5, r6, lr}
 800ba1a:	460e      	mov	r6, r1
 800ba1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba20:	2900      	cmp	r1, #0
 800ba22:	b096      	sub	sp, #88	; 0x58
 800ba24:	4614      	mov	r4, r2
 800ba26:	461d      	mov	r5, r3
 800ba28:	da07      	bge.n	800ba3a <__swhatbuf_r+0x22>
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	602b      	str	r3, [r5, #0]
 800ba2e:	89b3      	ldrh	r3, [r6, #12]
 800ba30:	061a      	lsls	r2, r3, #24
 800ba32:	d410      	bmi.n	800ba56 <__swhatbuf_r+0x3e>
 800ba34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba38:	e00e      	b.n	800ba58 <__swhatbuf_r+0x40>
 800ba3a:	466a      	mov	r2, sp
 800ba3c:	f000 f902 	bl	800bc44 <_fstat_r>
 800ba40:	2800      	cmp	r0, #0
 800ba42:	dbf2      	blt.n	800ba2a <__swhatbuf_r+0x12>
 800ba44:	9a01      	ldr	r2, [sp, #4]
 800ba46:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ba4a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ba4e:	425a      	negs	r2, r3
 800ba50:	415a      	adcs	r2, r3
 800ba52:	602a      	str	r2, [r5, #0]
 800ba54:	e7ee      	b.n	800ba34 <__swhatbuf_r+0x1c>
 800ba56:	2340      	movs	r3, #64	; 0x40
 800ba58:	2000      	movs	r0, #0
 800ba5a:	6023      	str	r3, [r4, #0]
 800ba5c:	b016      	add	sp, #88	; 0x58
 800ba5e:	bd70      	pop	{r4, r5, r6, pc}

0800ba60 <__smakebuf_r>:
 800ba60:	898b      	ldrh	r3, [r1, #12]
 800ba62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ba64:	079d      	lsls	r5, r3, #30
 800ba66:	4606      	mov	r6, r0
 800ba68:	460c      	mov	r4, r1
 800ba6a:	d507      	bpl.n	800ba7c <__smakebuf_r+0x1c>
 800ba6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ba70:	6023      	str	r3, [r4, #0]
 800ba72:	6123      	str	r3, [r4, #16]
 800ba74:	2301      	movs	r3, #1
 800ba76:	6163      	str	r3, [r4, #20]
 800ba78:	b002      	add	sp, #8
 800ba7a:	bd70      	pop	{r4, r5, r6, pc}
 800ba7c:	ab01      	add	r3, sp, #4
 800ba7e:	466a      	mov	r2, sp
 800ba80:	f7ff ffca 	bl	800ba18 <__swhatbuf_r>
 800ba84:	9900      	ldr	r1, [sp, #0]
 800ba86:	4605      	mov	r5, r0
 800ba88:	4630      	mov	r0, r6
 800ba8a:	f7ff fa01 	bl	800ae90 <_malloc_r>
 800ba8e:	b948      	cbnz	r0, 800baa4 <__smakebuf_r+0x44>
 800ba90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba94:	059a      	lsls	r2, r3, #22
 800ba96:	d4ef      	bmi.n	800ba78 <__smakebuf_r+0x18>
 800ba98:	f023 0303 	bic.w	r3, r3, #3
 800ba9c:	f043 0302 	orr.w	r3, r3, #2
 800baa0:	81a3      	strh	r3, [r4, #12]
 800baa2:	e7e3      	b.n	800ba6c <__smakebuf_r+0xc>
 800baa4:	4b0d      	ldr	r3, [pc, #52]	; (800badc <__smakebuf_r+0x7c>)
 800baa6:	62b3      	str	r3, [r6, #40]	; 0x28
 800baa8:	89a3      	ldrh	r3, [r4, #12]
 800baaa:	6020      	str	r0, [r4, #0]
 800baac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bab0:	81a3      	strh	r3, [r4, #12]
 800bab2:	9b00      	ldr	r3, [sp, #0]
 800bab4:	6163      	str	r3, [r4, #20]
 800bab6:	9b01      	ldr	r3, [sp, #4]
 800bab8:	6120      	str	r0, [r4, #16]
 800baba:	b15b      	cbz	r3, 800bad4 <__smakebuf_r+0x74>
 800babc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bac0:	4630      	mov	r0, r6
 800bac2:	f000 f8d1 	bl	800bc68 <_isatty_r>
 800bac6:	b128      	cbz	r0, 800bad4 <__smakebuf_r+0x74>
 800bac8:	89a3      	ldrh	r3, [r4, #12]
 800baca:	f023 0303 	bic.w	r3, r3, #3
 800bace:	f043 0301 	orr.w	r3, r3, #1
 800bad2:	81a3      	strh	r3, [r4, #12]
 800bad4:	89a0      	ldrh	r0, [r4, #12]
 800bad6:	4305      	orrs	r5, r0
 800bad8:	81a5      	strh	r5, [r4, #12]
 800bada:	e7cd      	b.n	800ba78 <__smakebuf_r+0x18>
 800badc:	0800ac4d 	.word	0x0800ac4d

0800bae0 <__malloc_lock>:
 800bae0:	4801      	ldr	r0, [pc, #4]	; (800bae8 <__malloc_lock+0x8>)
 800bae2:	f7ff b9bc 	b.w	800ae5e <__retarget_lock_acquire_recursive>
 800bae6:	bf00      	nop
 800bae8:	20005420 	.word	0x20005420

0800baec <__malloc_unlock>:
 800baec:	4801      	ldr	r0, [pc, #4]	; (800baf4 <__malloc_unlock+0x8>)
 800baee:	f7ff b9b7 	b.w	800ae60 <__retarget_lock_release_recursive>
 800baf2:	bf00      	nop
 800baf4:	20005420 	.word	0x20005420

0800baf8 <_free_r>:
 800baf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bafa:	2900      	cmp	r1, #0
 800bafc:	d048      	beq.n	800bb90 <_free_r+0x98>
 800bafe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb02:	9001      	str	r0, [sp, #4]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	f1a1 0404 	sub.w	r4, r1, #4
 800bb0a:	bfb8      	it	lt
 800bb0c:	18e4      	addlt	r4, r4, r3
 800bb0e:	f7ff ffe7 	bl	800bae0 <__malloc_lock>
 800bb12:	4a20      	ldr	r2, [pc, #128]	; (800bb94 <_free_r+0x9c>)
 800bb14:	9801      	ldr	r0, [sp, #4]
 800bb16:	6813      	ldr	r3, [r2, #0]
 800bb18:	4615      	mov	r5, r2
 800bb1a:	b933      	cbnz	r3, 800bb2a <_free_r+0x32>
 800bb1c:	6063      	str	r3, [r4, #4]
 800bb1e:	6014      	str	r4, [r2, #0]
 800bb20:	b003      	add	sp, #12
 800bb22:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bb26:	f7ff bfe1 	b.w	800baec <__malloc_unlock>
 800bb2a:	42a3      	cmp	r3, r4
 800bb2c:	d90b      	bls.n	800bb46 <_free_r+0x4e>
 800bb2e:	6821      	ldr	r1, [r4, #0]
 800bb30:	1862      	adds	r2, r4, r1
 800bb32:	4293      	cmp	r3, r2
 800bb34:	bf04      	itt	eq
 800bb36:	681a      	ldreq	r2, [r3, #0]
 800bb38:	685b      	ldreq	r3, [r3, #4]
 800bb3a:	6063      	str	r3, [r4, #4]
 800bb3c:	bf04      	itt	eq
 800bb3e:	1852      	addeq	r2, r2, r1
 800bb40:	6022      	streq	r2, [r4, #0]
 800bb42:	602c      	str	r4, [r5, #0]
 800bb44:	e7ec      	b.n	800bb20 <_free_r+0x28>
 800bb46:	461a      	mov	r2, r3
 800bb48:	685b      	ldr	r3, [r3, #4]
 800bb4a:	b10b      	cbz	r3, 800bb50 <_free_r+0x58>
 800bb4c:	42a3      	cmp	r3, r4
 800bb4e:	d9fa      	bls.n	800bb46 <_free_r+0x4e>
 800bb50:	6811      	ldr	r1, [r2, #0]
 800bb52:	1855      	adds	r5, r2, r1
 800bb54:	42a5      	cmp	r5, r4
 800bb56:	d10b      	bne.n	800bb70 <_free_r+0x78>
 800bb58:	6824      	ldr	r4, [r4, #0]
 800bb5a:	4421      	add	r1, r4
 800bb5c:	1854      	adds	r4, r2, r1
 800bb5e:	42a3      	cmp	r3, r4
 800bb60:	6011      	str	r1, [r2, #0]
 800bb62:	d1dd      	bne.n	800bb20 <_free_r+0x28>
 800bb64:	681c      	ldr	r4, [r3, #0]
 800bb66:	685b      	ldr	r3, [r3, #4]
 800bb68:	6053      	str	r3, [r2, #4]
 800bb6a:	4421      	add	r1, r4
 800bb6c:	6011      	str	r1, [r2, #0]
 800bb6e:	e7d7      	b.n	800bb20 <_free_r+0x28>
 800bb70:	d902      	bls.n	800bb78 <_free_r+0x80>
 800bb72:	230c      	movs	r3, #12
 800bb74:	6003      	str	r3, [r0, #0]
 800bb76:	e7d3      	b.n	800bb20 <_free_r+0x28>
 800bb78:	6825      	ldr	r5, [r4, #0]
 800bb7a:	1961      	adds	r1, r4, r5
 800bb7c:	428b      	cmp	r3, r1
 800bb7e:	bf04      	itt	eq
 800bb80:	6819      	ldreq	r1, [r3, #0]
 800bb82:	685b      	ldreq	r3, [r3, #4]
 800bb84:	6063      	str	r3, [r4, #4]
 800bb86:	bf04      	itt	eq
 800bb88:	1949      	addeq	r1, r1, r5
 800bb8a:	6021      	streq	r1, [r4, #0]
 800bb8c:	6054      	str	r4, [r2, #4]
 800bb8e:	e7c7      	b.n	800bb20 <_free_r+0x28>
 800bb90:	b003      	add	sp, #12
 800bb92:	bd30      	pop	{r4, r5, pc}
 800bb94:	20004e20 	.word	0x20004e20

0800bb98 <_read_r>:
 800bb98:	b538      	push	{r3, r4, r5, lr}
 800bb9a:	4d07      	ldr	r5, [pc, #28]	; (800bbb8 <_read_r+0x20>)
 800bb9c:	4604      	mov	r4, r0
 800bb9e:	4608      	mov	r0, r1
 800bba0:	4611      	mov	r1, r2
 800bba2:	2200      	movs	r2, #0
 800bba4:	602a      	str	r2, [r5, #0]
 800bba6:	461a      	mov	r2, r3
 800bba8:	f7f5 f968 	bl	8000e7c <_read>
 800bbac:	1c43      	adds	r3, r0, #1
 800bbae:	d102      	bne.n	800bbb6 <_read_r+0x1e>
 800bbb0:	682b      	ldr	r3, [r5, #0]
 800bbb2:	b103      	cbz	r3, 800bbb6 <_read_r+0x1e>
 800bbb4:	6023      	str	r3, [r4, #0]
 800bbb6:	bd38      	pop	{r3, r4, r5, pc}
 800bbb8:	20005428 	.word	0x20005428

0800bbbc <_raise_r>:
 800bbbc:	291f      	cmp	r1, #31
 800bbbe:	b538      	push	{r3, r4, r5, lr}
 800bbc0:	4604      	mov	r4, r0
 800bbc2:	460d      	mov	r5, r1
 800bbc4:	d904      	bls.n	800bbd0 <_raise_r+0x14>
 800bbc6:	2316      	movs	r3, #22
 800bbc8:	6003      	str	r3, [r0, #0]
 800bbca:	f04f 30ff 	mov.w	r0, #4294967295
 800bbce:	bd38      	pop	{r3, r4, r5, pc}
 800bbd0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bbd2:	b112      	cbz	r2, 800bbda <_raise_r+0x1e>
 800bbd4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bbd8:	b94b      	cbnz	r3, 800bbee <_raise_r+0x32>
 800bbda:	4620      	mov	r0, r4
 800bbdc:	f000 f830 	bl	800bc40 <_getpid_r>
 800bbe0:	462a      	mov	r2, r5
 800bbe2:	4601      	mov	r1, r0
 800bbe4:	4620      	mov	r0, r4
 800bbe6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bbea:	f000 b817 	b.w	800bc1c <_kill_r>
 800bbee:	2b01      	cmp	r3, #1
 800bbf0:	d00a      	beq.n	800bc08 <_raise_r+0x4c>
 800bbf2:	1c59      	adds	r1, r3, #1
 800bbf4:	d103      	bne.n	800bbfe <_raise_r+0x42>
 800bbf6:	2316      	movs	r3, #22
 800bbf8:	6003      	str	r3, [r0, #0]
 800bbfa:	2001      	movs	r0, #1
 800bbfc:	e7e7      	b.n	800bbce <_raise_r+0x12>
 800bbfe:	2400      	movs	r4, #0
 800bc00:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bc04:	4628      	mov	r0, r5
 800bc06:	4798      	blx	r3
 800bc08:	2000      	movs	r0, #0
 800bc0a:	e7e0      	b.n	800bbce <_raise_r+0x12>

0800bc0c <raise>:
 800bc0c:	4b02      	ldr	r3, [pc, #8]	; (800bc18 <raise+0xc>)
 800bc0e:	4601      	mov	r1, r0
 800bc10:	6818      	ldr	r0, [r3, #0]
 800bc12:	f7ff bfd3 	b.w	800bbbc <_raise_r>
 800bc16:	bf00      	nop
 800bc18:	20000118 	.word	0x20000118

0800bc1c <_kill_r>:
 800bc1c:	b538      	push	{r3, r4, r5, lr}
 800bc1e:	4d07      	ldr	r5, [pc, #28]	; (800bc3c <_kill_r+0x20>)
 800bc20:	2300      	movs	r3, #0
 800bc22:	4604      	mov	r4, r0
 800bc24:	4608      	mov	r0, r1
 800bc26:	4611      	mov	r1, r2
 800bc28:	602b      	str	r3, [r5, #0]
 800bc2a:	f7f5 f90d 	bl	8000e48 <_kill>
 800bc2e:	1c43      	adds	r3, r0, #1
 800bc30:	d102      	bne.n	800bc38 <_kill_r+0x1c>
 800bc32:	682b      	ldr	r3, [r5, #0]
 800bc34:	b103      	cbz	r3, 800bc38 <_kill_r+0x1c>
 800bc36:	6023      	str	r3, [r4, #0]
 800bc38:	bd38      	pop	{r3, r4, r5, pc}
 800bc3a:	bf00      	nop
 800bc3c:	20005428 	.word	0x20005428

0800bc40 <_getpid_r>:
 800bc40:	f7f5 b8fa 	b.w	8000e38 <_getpid>

0800bc44 <_fstat_r>:
 800bc44:	b538      	push	{r3, r4, r5, lr}
 800bc46:	4d07      	ldr	r5, [pc, #28]	; (800bc64 <_fstat_r+0x20>)
 800bc48:	2300      	movs	r3, #0
 800bc4a:	4604      	mov	r4, r0
 800bc4c:	4608      	mov	r0, r1
 800bc4e:	4611      	mov	r1, r2
 800bc50:	602b      	str	r3, [r5, #0]
 800bc52:	f7f5 f958 	bl	8000f06 <_fstat>
 800bc56:	1c43      	adds	r3, r0, #1
 800bc58:	d102      	bne.n	800bc60 <_fstat_r+0x1c>
 800bc5a:	682b      	ldr	r3, [r5, #0]
 800bc5c:	b103      	cbz	r3, 800bc60 <_fstat_r+0x1c>
 800bc5e:	6023      	str	r3, [r4, #0]
 800bc60:	bd38      	pop	{r3, r4, r5, pc}
 800bc62:	bf00      	nop
 800bc64:	20005428 	.word	0x20005428

0800bc68 <_isatty_r>:
 800bc68:	b538      	push	{r3, r4, r5, lr}
 800bc6a:	4d06      	ldr	r5, [pc, #24]	; (800bc84 <_isatty_r+0x1c>)
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	4604      	mov	r4, r0
 800bc70:	4608      	mov	r0, r1
 800bc72:	602b      	str	r3, [r5, #0]
 800bc74:	f7f5 f957 	bl	8000f26 <_isatty>
 800bc78:	1c43      	adds	r3, r0, #1
 800bc7a:	d102      	bne.n	800bc82 <_isatty_r+0x1a>
 800bc7c:	682b      	ldr	r3, [r5, #0]
 800bc7e:	b103      	cbz	r3, 800bc82 <_isatty_r+0x1a>
 800bc80:	6023      	str	r3, [r4, #0]
 800bc82:	bd38      	pop	{r3, r4, r5, pc}
 800bc84:	20005428 	.word	0x20005428

0800bc88 <_init>:
 800bc88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc8a:	bf00      	nop
 800bc8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc8e:	bc08      	pop	{r3}
 800bc90:	469e      	mov	lr, r3
 800bc92:	4770      	bx	lr

0800bc94 <_fini>:
 800bc94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc96:	bf00      	nop
 800bc98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc9a:	bc08      	pop	{r3}
 800bc9c:	469e      	mov	lr, r3
 800bc9e:	4770      	bx	lr
